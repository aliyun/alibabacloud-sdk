/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('ahas', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddAlarmRuleRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  alarmOn?: boolean(name='AlarmOn'),
  alertGroup?: string(name='AlertGroup'),
  alertLevel?: string(name='AlertLevel'),
  alertName?: string(name='AlertName'),
  andOr?: string(name='AndOr'),
  appName?: string(name='AppName'),
  conditions?: string(name='Conditions'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  repeatInterval?: string(name='RepeatInterval'),
  silencePeriod?: string(name='SilencePeriod'),
}

model AddAlarmRuleResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddAlarmRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddAlarmRuleResponseBody(name='body'),
}

async function addAlarmRuleWithOptions(request: AddAlarmRuleRequest, runtime: Util.RuntimeOptions): AddAlarmRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.alarmOn)) {
    query['AlarmOn'] = request.alarmOn;
  }
  if (!Util.isUnset(request.alertGroup)) {
    query['AlertGroup'] = request.alertGroup;
  }
  if (!Util.isUnset(request.alertLevel)) {
    query['AlertLevel'] = request.alertLevel;
  }
  if (!Util.isUnset(request.alertName)) {
    query['AlertName'] = request.alertName;
  }
  if (!Util.isUnset(request.andOr)) {
    query['AndOr'] = request.andOr;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.conditions)) {
    query['Conditions'] = request.conditions;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.repeatInterval)) {
    query['RepeatInterval'] = request.repeatInterval;
  }
  if (!Util.isUnset(request.silencePeriod)) {
    query['SilencePeriod'] = request.silencePeriod;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddAlarmRule',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addAlarmRule(request: AddAlarmRuleRequest): AddAlarmRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return addAlarmRuleWithOptions(request, runtime);
}

model AddCategoryRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model AddCategoryResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddCategoryResponseBody(name='body'),
}

async function addCategoryWithOptions(request: AddCategoryRequest, runtime: Util.RuntimeOptions): AddCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddCategory',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addCategory(request: AddCategoryRequest): AddCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCategoryWithOptions(request, runtime);
}

model AddNamespaceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model AddNamespaceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddNamespaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddNamespaceResponseBody(name='body'),
}

async function addNamespaceWithOptions(request: AddNamespaceRequest, runtime: Util.RuntimeOptions): AddNamespaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddNamespace',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addNamespace(request: AddNamespaceRequest): AddNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addNamespaceWithOptions(request, runtime);
}

model AddOrUpdateContactRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  contact?: string(name='Contact'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model AddOrUpdateContactResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddOrUpdateContactResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddOrUpdateContactResponseBody(name='body'),
}

async function addOrUpdateContactWithOptions(request: AddOrUpdateContactRequest, runtime: Util.RuntimeOptions): AddOrUpdateContactResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.contact)) {
    query['Contact'] = request.contact;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddOrUpdateContact',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addOrUpdateContact(request: AddOrUpdateContactRequest): AddOrUpdateContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return addOrUpdateContactWithOptions(request, runtime);
}

model AddPermanentTopologyNodesRequest {
  configurations?: string(name='Configurations'),
  namespace?: string(name='Namespace'),
  ports?: string(name='Ports'),
  product?: string(name='Product'),
  viewId?: string(name='ViewId'),
}

model AddPermanentTopologyNodesResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      extFields?: [  map[string]any ](name='ExtFields'),
      hostConfigurationId?: string(name='hostConfigurationId'),
      icon?: string(name='icon'),
      id?: string(name='id'),
      instanceId?: string(name='instanceId'),
      name?: string(name='name'),
      nameMinor?: string(name='nameMinor'),
      type?: int32(name='type'),
      viewId?: string(name='viewId'),
      zone?: string(name='zone'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddPermanentTopologyNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddPermanentTopologyNodesResponseBody(name='body'),
}

async function addPermanentTopologyNodesWithOptions(request: AddPermanentTopologyNodesRequest, runtime: Util.RuntimeOptions): AddPermanentTopologyNodesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configurations)) {
    query['Configurations'] = request.configurations;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.ports)) {
    query['Ports'] = request.ports;
  }
  if (!Util.isUnset(request.product)) {
    query['Product'] = request.product;
  }
  if (!Util.isUnset(request.viewId)) {
    query['ViewId'] = request.viewId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddPermanentTopologyNodes',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addPermanentTopologyNodes(request: AddPermanentTopologyNodesRequest): AddPermanentTopologyNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return addPermanentTopologyNodesWithOptions(request, runtime);
}

model AddSceneFunctionRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model AddSceneFunctionResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddSceneFunctionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddSceneFunctionResponseBody(name='body'),
}

async function addSceneFunctionWithOptions(request: AddSceneFunctionRequest, runtime: Util.RuntimeOptions): AddSceneFunctionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddSceneFunction',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addSceneFunction(request: AddSceneFunctionRequest): AddSceneFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return addSceneFunctionWithOptions(request, runtime);
}

model AddSceneFunctionParameterRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model AddSceneFunctionParameterResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddSceneFunctionParameterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddSceneFunctionParameterResponseBody(name='body'),
}

async function addSceneFunctionParameterWithOptions(request: AddSceneFunctionParameterRequest, runtime: Util.RuntimeOptions): AddSceneFunctionParameterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddSceneFunctionParameter',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addSceneFunctionParameter(request: AddSceneFunctionParameterRequest): AddSceneFunctionParameterResponse {
  var runtime = new Util.RuntimeOptions{};
  return addSceneFunctionParameterWithOptions(request, runtime);
}

model AddScriptSceneFunctionRequest {
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model AddScriptSceneFunctionResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddScriptSceneFunctionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddScriptSceneFunctionResponseBody(name='body'),
}

async function addScriptSceneFunctionWithOptions(request: AddScriptSceneFunctionRequest, runtime: Util.RuntimeOptions): AddScriptSceneFunctionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddScriptSceneFunction',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addScriptSceneFunction(request: AddScriptSceneFunctionRequest): AddScriptSceneFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return addScriptSceneFunctionWithOptions(request, runtime);
}

model AddSentinelHotParamItemsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  items?: string(name='Items'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  ruleId?: long(name='RuleId'),
}

model AddSentinelHotParamItemsResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    burstCount?: int32(name='burstCount'),
    clusterFailFallback?: boolean(name='clusterFailFallback'),
    clusterMode?: boolean(name='clusterMode'),
    clusterThresholdType?: int32(name='clusterThresholdType'),
    controlBehavior?: int32(name='controlBehavior'),
    count?: float(name='count'),
    durationInSec?: long(name='durationInSec'),
    enable?: boolean(name='enable'),
    grade?: int32(name='grade'),
    id?: long(name='id'),
    limitApp?: string(name='limitApp'),
    maxQueueingTimeMs?: int32(name='maxQueueingTimeMs'),
    namespace?: string(name='namespace'),
    paramFlowItemList?: [ 
      {
        classType?: string(name='classType'),
        count?: int32(name='count'),
        object?: string(name='object'),
      }
    ](name='paramFlowItemList'),
    paramIdx?: int32(name='paramIdx'),
    resource?: string(name='resource'),
    sampleCount?: int32(name='sampleCount'),
    tags?: [ string ](name='tags'),
    userId?: string(name='userId'),
    windowIntervalMs?: int32(name='windowIntervalMs'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddSentinelHotParamItemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddSentinelHotParamItemsResponseBody(name='body'),
}

async function addSentinelHotParamItemsWithOptions(request: AddSentinelHotParamItemsRequest, runtime: Util.RuntimeOptions): AddSentinelHotParamItemsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.items)) {
    query['Items'] = request.items;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddSentinelHotParamItems',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addSentinelHotParamItems(request: AddSentinelHotParamItemsRequest): AddSentinelHotParamItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addSentinelHotParamItemsWithOptions(request, runtime);
}

model AddSentinelHotParamRuleRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  burstCount?: int32(name='BurstCount'),
  controlBehavior?: int32(name='ControlBehavior'),
  count?: float(name='Count'),
  durationInSec?: long(name='DurationInSec'),
  enable?: boolean(name='Enable'),
  grade?: int32(name='Grade'),
  lang?: string(name='Lang'),
  maxQueueingTimeMs?: int32(name='MaxQueueingTimeMs'),
  model?: long(name='Model'),
  namespace?: string(name='Namespace'),
  paramIdx?: int32(name='ParamIdx'),
  resource?: string(name='Resource'),
  tags?: string(name='Tags'),
}

model AddSentinelHotParamRuleResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    burstCount?: int32(name='burstCount'),
    clusterFailFallback?: boolean(name='clusterFailFallback'),
    clusterMode?: boolean(name='clusterMode'),
    clusterThresholdType?: int32(name='clusterThresholdType'),
    controlBehavior?: int32(name='controlBehavior'),
    count?: float(name='count'),
    durationInSec?: long(name='durationInSec'),
    enable?: boolean(name='enable'),
    grade?: int32(name='grade'),
    id?: long(name='id'),
    limitApp?: string(name='limitApp'),
    maxQueueingTimeMs?: int32(name='maxQueueingTimeMs'),
    namespace?: string(name='namespace'),
    paramFlowItemList?: [ 
      {
        classType?: string(name='classType'),
        count?: int32(name='count'),
        object?: string(name='object'),
      }
    ](name='paramFlowItemList'),
    paramIdx?: int32(name='paramIdx'),
    resource?: string(name='resource'),
    sampleCount?: int32(name='sampleCount'),
    tags?: [ string ](name='tags'),
    userId?: string(name='userId'),
    windowIntervalMs?: int32(name='windowIntervalMs'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddSentinelHotParamRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddSentinelHotParamRuleResponseBody(name='body'),
}

async function addSentinelHotParamRuleWithOptions(request: AddSentinelHotParamRuleRequest, runtime: Util.RuntimeOptions): AddSentinelHotParamRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.burstCount)) {
    query['BurstCount'] = request.burstCount;
  }
  if (!Util.isUnset(request.controlBehavior)) {
    query['ControlBehavior'] = request.controlBehavior;
  }
  if (!Util.isUnset(request.count)) {
    query['Count'] = request.count;
  }
  if (!Util.isUnset(request.durationInSec)) {
    query['DurationInSec'] = request.durationInSec;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.grade)) {
    query['Grade'] = request.grade;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.maxQueueingTimeMs)) {
    query['MaxQueueingTimeMs'] = request.maxQueueingTimeMs;
  }
  if (!Util.isUnset(request.model)) {
    query['Model'] = request.model;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.paramIdx)) {
    query['ParamIdx'] = request.paramIdx;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddSentinelHotParamRule',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addSentinelHotParamRule(request: AddSentinelHotParamRuleRequest): AddSentinelHotParamRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return addSentinelHotParamRuleWithOptions(request, runtime);
}

model AddTagRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model AddTagResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddTagResponseBody(name='body'),
}

async function addTagWithOptions(request: AddTagRequest, runtime: Util.RuntimeOptions): AddTagResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddTag',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addTag(request: AddTagRequest): AddTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return addTagWithOptions(request, runtime);
}

model AddUserAuthorityRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  authItems?: string(name='AuthItems'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model AddUserAuthorityResponseBody = {
  code?: string(name='Code'),
  data?: int32(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddUserAuthorityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddUserAuthorityResponseBody(name='body'),
}

async function addUserAuthorityWithOptions(request: AddUserAuthorityRequest, runtime: Util.RuntimeOptions): AddUserAuthorityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.authItems)) {
    query['AuthItems'] = request.authItems;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddUserAuthority',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addUserAuthority(request: AddUserAuthorityRequest): AddUserAuthorityResponse {
  var runtime = new Util.RuntimeOptions{};
  return addUserAuthorityWithOptions(request, runtime);
}

model AddWorkspaceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model AddWorkspaceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddWorkspaceResponseBody(name='body'),
}

async function addWorkspaceWithOptions(request: AddWorkspaceRequest, runtime: Util.RuntimeOptions): AddWorkspaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddWorkspace',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addWorkspace(request: AddWorkspaceRequest): AddWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addWorkspaceWithOptions(request, runtime);
}

model AddWorkspaceExperimentRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model AddWorkspaceExperimentResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddWorkspaceExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddWorkspaceExperimentResponseBody(name='body'),
}

async function addWorkspaceExperimentWithOptions(request: AddWorkspaceExperimentRequest, runtime: Util.RuntimeOptions): AddWorkspaceExperimentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddWorkspaceExperiment',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addWorkspaceExperiment(request: AddWorkspaceExperimentRequest): AddWorkspaceExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  return addWorkspaceExperimentWithOptions(request, runtime);
}

model AddWorkspaceMemberRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model AddWorkspaceMemberResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddWorkspaceMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddWorkspaceMemberResponseBody(name='body'),
}

async function addWorkspaceMemberWithOptions(request: AddWorkspaceMemberRequest, runtime: Util.RuntimeOptions): AddWorkspaceMemberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddWorkspaceMember',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addWorkspaceMember(request: AddWorkspaceMemberRequest): AddWorkspaceMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return addWorkspaceMemberWithOptions(request, runtime);
}

model AllNodeExceptionStatisticsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  startTime?: long(name='StartTime'),
}

model AllNodeExceptionStatisticsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      count?: int32(name='Count'),
      timestamp?: long(name='Timestamp'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AllNodeExceptionStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllNodeExceptionStatisticsResponseBody(name='body'),
}

async function allNodeExceptionStatisticsWithOptions(request: AllNodeExceptionStatisticsRequest, runtime: Util.RuntimeOptions): AllNodeExceptionStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AllNodeExceptionStatistics',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function allNodeExceptionStatistics(request: AllNodeExceptionStatisticsRequest): AllNodeExceptionStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return allNodeExceptionStatisticsWithOptions(request, runtime);
}

model AppEventsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model AppEventsResponseBody = {
  code?: string(name='Code'),
  data?: {
    alarmEvents?: [ 
      {
        event?: string(name='Event'),
        time?: long(name='Time'),
        timestamp?: string(name='Timestamp'),
      }
    ](name='AlarmEvents'),
    alarmRuleCount?: int32(name='AlarmRuleCount'),
    appEventCount?: map[string]any(name='AppEventCount'),
    eventCount?: int32(name='EventCount'),
    protectEvents?: [ 
      {
        event?: string(name='Event'),
        time?: long(name='Time'),
        timestamp?: string(name='Timestamp'),
      }
    ](name='ProtectEvents'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AppEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AppEventsResponseBody(name='body'),
}

async function appEventsWithOptions(request: AppEventsRequest, runtime: Util.RuntimeOptions): AppEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AppEvents',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function appEvents(request: AppEventsRequest): AppEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return appEventsWithOptions(request, runtime);
}

model AppProtectionsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model AppProtectionsResponseBody = {
  code?: string(name='Code'),
  data?: {
    appCount?: int32(name='AppCount'),
    appQps?: map[string]any(name='AppQps'),
    protectStatistics?: [ 
      {
        count?: int32(name='Count'),
        time?: long(name='Time'),
      }
    ](name='ProtectStatistics'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AppProtectionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AppProtectionsResponseBody(name='body'),
}

async function appProtectionsWithOptions(request: AppProtectionsRequest, runtime: Util.RuntimeOptions): AppProtectionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AppProtections',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function appProtections(request: AppProtectionsRequest): AppProtectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return appProtectionsWithOptions(request, runtime);
}

model ApplicationExceptionStatisticsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  startTime?: long(name='StartTime'),
}

model ApplicationExceptionStatisticsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      count?: int32(name='Count'),
      timestamp?: long(name='Timestamp'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ApplicationExceptionStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplicationExceptionStatisticsResponseBody(name='body'),
}

async function applicationExceptionStatisticsWithOptions(request: ApplicationExceptionStatisticsRequest, runtime: Util.RuntimeOptions): ApplicationExceptionStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplicationExceptionStatistics',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applicationExceptionStatistics(request: ApplicationExceptionStatisticsRequest): ApplicationExceptionStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return applicationExceptionStatisticsWithOptions(request, runtime);
}

model ApplicationExceptionsWithTimeRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  time?: long(name='Time'),
}

model ApplicationExceptionsWithTimeResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      exceptions?: string(name='Exceptions'),
      num?: int32(name='Num'),
      resource?: string(name='Resource'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ApplicationExceptionsWithTimeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplicationExceptionsWithTimeResponseBody(name='body'),
}

async function applicationExceptionsWithTimeWithOptions(request: ApplicationExceptionsWithTimeRequest, runtime: Util.RuntimeOptions): ApplicationExceptionsWithTimeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.time)) {
    query['Time'] = request.time;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplicationExceptionsWithTime',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applicationExceptionsWithTime(request: ApplicationExceptionsWithTimeRequest): ApplicationExceptionsWithTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return applicationExceptionsWithTimeWithOptions(request, runtime);
}

model ApplicationLatestExceptionsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model ApplicationLatestExceptionsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      exceptions?: string(name='Exceptions'),
      num?: int32(name='Num'),
      resource?: string(name='Resource'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ApplicationLatestExceptionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplicationLatestExceptionsResponseBody(name='body'),
}

async function applicationLatestExceptionsWithOptions(request: ApplicationLatestExceptionsRequest, runtime: Util.RuntimeOptions): ApplicationLatestExceptionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplicationLatestExceptions',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applicationLatestExceptions(request: ApplicationLatestExceptionsRequest): ApplicationLatestExceptionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return applicationLatestExceptionsWithOptions(request, runtime);
}

model BatchDisableSentinelParamDegradeRulesRequest {
  appName?: string(name='AppName'),
  ids?: string(name='Ids'),
  namespace?: string(name='Namespace'),
}

model BatchDisableSentinelParamDegradeRulesResponseBody = {
  content?: {
    code?: string(name='Code', description='请求响应码，200 为success'),
    data?: int32(name='Data', description='返回的数据对象'),
    message?: string(name='Message', description='返回的错误信息'),
    requestId?: string(name='RequestId', description='请求ID'),
    success?: boolean(name='Success', description='是否成功标识'),
  }(name='Content', description='RestResponse<Integer>'),
  first?: boolean(name='First'),
  last?: boolean(name='Last'),
}

model BatchDisableSentinelParamDegradeRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchDisableSentinelParamDegradeRulesResponseBody(name='body'),
}

async function batchDisableSentinelParamDegradeRulesWithOptions(request: BatchDisableSentinelParamDegradeRulesRequest, runtime: Util.RuntimeOptions): BatchDisableSentinelParamDegradeRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.ids)) {
    body['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.namespace)) {
    body['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchDisableSentinelParamDegradeRules',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchDisableSentinelParamDegradeRules(request: BatchDisableSentinelParamDegradeRulesRequest): BatchDisableSentinelParamDegradeRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDisableSentinelParamDegradeRulesWithOptions(request, runtime);
}

model BatchEnableSentinelDefaultCircuitBreakerRulesRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  ids?: string(name='Ids'),
  namespace?: string(name='Namespace'),
}

model BatchEnableSentinelDefaultCircuitBreakerRulesResponseBody = {
  code?: string(name='Code'),
  data?: int32(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchEnableSentinelDefaultCircuitBreakerRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchEnableSentinelDefaultCircuitBreakerRulesResponseBody(name='body'),
}

async function batchEnableSentinelDefaultCircuitBreakerRulesWithOptions(request: BatchEnableSentinelDefaultCircuitBreakerRulesRequest, runtime: Util.RuntimeOptions): BatchEnableSentinelDefaultCircuitBreakerRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchEnableSentinelDefaultCircuitBreakerRules',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchEnableSentinelDefaultCircuitBreakerRules(request: BatchEnableSentinelDefaultCircuitBreakerRulesRequest): BatchEnableSentinelDefaultCircuitBreakerRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchEnableSentinelDefaultCircuitBreakerRulesWithOptions(request, runtime);
}

model BatchEnableSentinelParamDegradeRulesRequest {
  appName?: string(name='AppName'),
  ids?: string(name='Ids'),
  namespace?: string(name='Namespace'),
}

model BatchEnableSentinelParamDegradeRulesResponseBody = {
  content?: {
    code?: string(name='Code', description='请求响应码，200 为success'),
    data?: int32(name='Data', description='返回的数据对象'),
    message?: string(name='Message', description='返回的错误信息'),
    requestId?: string(name='RequestId', description='请求ID'),
    success?: boolean(name='Success', description='是否成功标识'),
  }(name='Content', description='RestResponse<Integer>'),
  first?: boolean(name='First'),
  last?: boolean(name='Last'),
}

model BatchEnableSentinelParamDegradeRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchEnableSentinelParamDegradeRulesResponseBody(name='body'),
}

async function batchEnableSentinelParamDegradeRulesWithOptions(request: BatchEnableSentinelParamDegradeRulesRequest, runtime: Util.RuntimeOptions): BatchEnableSentinelParamDegradeRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.ids)) {
    body['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.namespace)) {
    body['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchEnableSentinelParamDegradeRules',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchEnableSentinelParamDegradeRules(request: BatchEnableSentinelParamDegradeRulesRequest): BatchEnableSentinelParamDegradeRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchEnableSentinelParamDegradeRulesWithOptions(request, runtime);
}

model BatchInstallPluginRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appGroupName?: string(name='AppGroupName'),
  appName?: string(name='AppName'),
  instanceIds?: string(name='InstanceIds'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model BatchInstallPluginResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchInstallPluginResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchInstallPluginResponseBody(name='body'),
}

async function batchInstallPluginWithOptions(request: BatchInstallPluginRequest, runtime: Util.RuntimeOptions): BatchInstallPluginResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appGroupName)) {
    query['AppGroupName'] = request.appGroupName;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchInstallPlugin',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchInstallPlugin(request: BatchInstallPluginRequest): BatchInstallPluginResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchInstallPluginWithOptions(request, runtime);
}

model BatchQueryExperimentTaskConsumedAmountRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model BatchQueryExperimentTaskConsumedAmountResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchQueryExperimentTaskConsumedAmountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchQueryExperimentTaskConsumedAmountResponseBody(name='body'),
}

async function batchQueryExperimentTaskConsumedAmountWithOptions(request: BatchQueryExperimentTaskConsumedAmountRequest, runtime: Util.RuntimeOptions): BatchQueryExperimentTaskConsumedAmountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchQueryExperimentTaskConsumedAmount',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchQueryExperimentTaskConsumedAmount(request: BatchQueryExperimentTaskConsumedAmountRequest): BatchQueryExperimentTaskConsumedAmountResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchQueryExperimentTaskConsumedAmountWithOptions(request, runtime);
}

model BatchQueryPluginStatusRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  instanceIds?: string(name='InstanceIds'),
  namespace?: string(name='Namespace'),
}

model BatchQueryPluginStatusResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchQueryPluginStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchQueryPluginStatusResponseBody(name='body'),
}

async function batchQueryPluginStatusWithOptions(request: BatchQueryPluginStatusRequest, runtime: Util.RuntimeOptions): BatchQueryPluginStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchQueryPluginStatus',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchQueryPluginStatus(request: BatchQueryPluginStatusRequest): BatchQueryPluginStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchQueryPluginStatusWithOptions(request, runtime);
}

model BindSentinelBlockFallbackDefinitionRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  fallbackId?: long(name='FallbackId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
  targetType?: long(name='TargetType'),
}

model BindSentinelBlockFallbackDefinitionResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='AppName'),
    fallbackBehavior?: map[string]any(name='FallbackBehavior'),
    id?: long(name='Id'),
    name?: string(name='Name'),
    namespace?: string(name='Namespace'),
    resourceClassification?: int32(name='ResourceClassification'),
    userId?: string(name='UserId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BindSentinelBlockFallbackDefinitionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindSentinelBlockFallbackDefinitionResponseBody(name='body'),
}

async function bindSentinelBlockFallbackDefinitionWithOptions(request: BindSentinelBlockFallbackDefinitionRequest, runtime: Util.RuntimeOptions): BindSentinelBlockFallbackDefinitionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.fallbackId)) {
    query['FallbackId'] = request.fallbackId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindSentinelBlockFallbackDefinition',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindSentinelBlockFallbackDefinition(request: BindSentinelBlockFallbackDefinitionRequest): BindSentinelBlockFallbackDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindSentinelBlockFallbackDefinitionWithOptions(request, runtime);
}

model CaculatePriceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  days?: int32(name='Days'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  numNodes?: int32(name='NumNodes'),
}

model CaculatePriceResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      packages?: [ 
        {
          count?: int32(name='count'),
          hours?: int32(name='hours'),
          maxDays?: int32(name='maxDays'),
          name?: string(name='name'),
          price?: float(name='price'),
        }
      ](name='Packages'),
      price?: float(name='Price'),
      solutionName?: string(name='SolutionName'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CaculatePriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CaculatePriceResponseBody(name='body'),
}

async function caculatePriceWithOptions(request: CaculatePriceRequest, runtime: Util.RuntimeOptions): CaculatePriceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.days)) {
    query['Days'] = request.days;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.numNodes)) {
    query['NumNodes'] = request.numNodes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CaculatePrice',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function caculatePrice(request: CaculatePriceRequest): CaculatePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return caculatePriceWithOptions(request, runtime);
}

model CancelInspectionRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  inspectResultId?: long(name='InspectResultId'),
}

model CancelInspectionResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CancelInspectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelInspectionResponseBody(name='body'),
}

async function cancelInspectionWithOptions(request: CancelInspectionRequest, runtime: Util.RuntimeOptions): CancelInspectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.inspectResultId)) {
    query['InspectResultId'] = request.inspectResultId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelInspection',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelInspection(request: CancelInspectionRequest): CancelInspectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelInspectionWithOptions(request, runtime);
}

model ChaosDeleteNamespaceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model ChaosDeleteNamespaceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ChaosDeleteNamespaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChaosDeleteNamespaceResponseBody(name='body'),
}

async function chaosDeleteNamespaceWithOptions(request: ChaosDeleteNamespaceRequest, runtime: Util.RuntimeOptions): ChaosDeleteNamespaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChaosDeleteNamespace',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function chaosDeleteNamespace(request: ChaosDeleteNamespaceRequest): ChaosDeleteNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return chaosDeleteNamespaceWithOptions(request, runtime);
}

model ChaosPayCanRefundCallbackRequest {
  data?: string(name='data'),
}

model ChaosPayCanRefundCallbackResponseBody = {
  code?: string(name='code'),
  data?: string(name='data'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  synchro?: string(name='synchro'),
}

model ChaosPayCanRefundCallbackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChaosPayCanRefundCallbackResponseBody(name='body'),
}

async function chaosPayCanRefundCallbackWithOptions(request: ChaosPayCanRefundCallbackRequest, runtime: Util.RuntimeOptions): ChaosPayCanRefundCallbackResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.data)) {
    query['data'] = request.data;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChaosPayCanRefundCallback',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function chaosPayCanRefundCallback(request: ChaosPayCanRefundCallbackRequest): ChaosPayCanRefundCallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return chaosPayCanRefundCallbackWithOptions(request, runtime);
}

model ChaosPayOrderCallbackRequest {
  data?: string(name='data'),
}

model ChaosPayOrderCallbackResponseBody = {
  code?: string(name='code'),
  data?: string(name='data'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  synchro?: string(name='synchro'),
}

model ChaosPayOrderCallbackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChaosPayOrderCallbackResponseBody(name='body'),
}

async function chaosPayOrderCallbackWithOptions(request: ChaosPayOrderCallbackRequest, runtime: Util.RuntimeOptions): ChaosPayOrderCallbackResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.data)) {
    query['data'] = request.data;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChaosPayOrderCallback',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function chaosPayOrderCallback(request: ChaosPayOrderCallbackRequest): ChaosPayOrderCallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return chaosPayOrderCallbackWithOptions(request, runtime);
}

model ChaosPayOrderVerifyCallbackRequest {
  data?: string(name='data'),
}

model ChaosPayOrderVerifyCallbackResponseBody = {
  code?: string(name='code'),
  data?: string(name='data'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  synchro?: string(name='synchro'),
}

model ChaosPayOrderVerifyCallbackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChaosPayOrderVerifyCallbackResponseBody(name='body'),
}

async function chaosPayOrderVerifyCallbackWithOptions(request: ChaosPayOrderVerifyCallbackRequest, runtime: Util.RuntimeOptions): ChaosPayOrderVerifyCallbackResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.data)) {
    query['data'] = request.data;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChaosPayOrderVerifyCallback',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function chaosPayOrderVerifyCallback(request: ChaosPayOrderVerifyCallbackRequest): ChaosPayOrderVerifyCallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return chaosPayOrderVerifyCallbackWithOptions(request, runtime);
}

model ChaosPayProductCompleteCallbackRequest {
  data?: string(name='data'),
}

model ChaosPayProductCompleteCallbackResponseBody = {
  code?: string(name='code'),
  data?: string(name='data'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  synchro?: string(name='synchro'),
}

model ChaosPayProductCompleteCallbackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChaosPayProductCompleteCallbackResponseBody(name='body'),
}

async function chaosPayProductCompleteCallbackWithOptions(request: ChaosPayProductCompleteCallbackRequest, runtime: Util.RuntimeOptions): ChaosPayProductCompleteCallbackResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.data)) {
    query['data'] = request.data;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChaosPayProductCompleteCallback',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function chaosPayProductCompleteCallback(request: ChaosPayProductCompleteCallbackRequest): ChaosPayProductCompleteCallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return chaosPayProductCompleteCallbackWithOptions(request, runtime);
}

model ChaosPayRefundCallbackRequest {
  data?: string(name='data'),
}

model ChaosPayRefundCallbackResponseBody = {
  code?: string(name='code'),
  data?: string(name='data'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  synchro?: string(name='synchro'),
}

model ChaosPayRefundCallbackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChaosPayRefundCallbackResponseBody(name='body'),
}

async function chaosPayRefundCallbackWithOptions(request: ChaosPayRefundCallbackRequest, runtime: Util.RuntimeOptions): ChaosPayRefundCallbackResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.data)) {
    query['data'] = request.data;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChaosPayRefundCallback',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function chaosPayRefundCallback(request: ChaosPayRefundCallbackRequest): ChaosPayRefundCallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return chaosPayRefundCallbackWithOptions(request, runtime);
}

model CheckActivityGroupDefinitionRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model CheckActivityGroupDefinitionResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckActivityGroupDefinitionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckActivityGroupDefinitionResponseBody(name='body'),
}

async function checkActivityGroupDefinitionWithOptions(request: CheckActivityGroupDefinitionRequest, runtime: Util.RuntimeOptions): CheckActivityGroupDefinitionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckActivityGroupDefinition',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkActivityGroupDefinition(request: CheckActivityGroupDefinitionRequest): CheckActivityGroupDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkActivityGroupDefinitionWithOptions(request, runtime);
}

model CheckOpenAhasStatusRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  buyerId?: long(name='BuyerId'),
  isInternational?: boolean(name='IsInternational'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  openType?: int32(name='OpenType'),
  product?: string(name='Product'),
}

model CheckOpenAhasStatusResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckOpenAhasStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckOpenAhasStatusResponseBody(name='body'),
}

async function checkOpenAhasStatusWithOptions(request: CheckOpenAhasStatusRequest, runtime: Util.RuntimeOptions): CheckOpenAhasStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.buyerId)) {
    query['BuyerId'] = request.buyerId;
  }
  if (!Util.isUnset(request.isInternational)) {
    query['IsInternational'] = request.isInternational;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.openType)) {
    query['OpenType'] = request.openType;
  }
  if (!Util.isUnset(request.product)) {
    query['Product'] = request.product;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckOpenAhasStatus',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkOpenAhasStatus(request: CheckOpenAhasStatusRequest): CheckOpenAhasStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkOpenAhasStatusWithOptions(request, runtime);
}

model CheckServiceLinkedRoleForDeletingRequest {
  accountId?: string(name='AccountId'),
  ahasRegionId?: string(name='AhasRegionId'),
  deletionTaskId?: string(name='DeletionTaskId'),
  lang?: string(name='Lang'),
  roleArn?: string(name='RoleArn'),
  SPIRegionId?: string(name='SPIRegionId'),
  serviceName?: string(name='ServiceName'),
}

model CheckServiceLinkedRoleForDeletingResponseBody = {
  deletable?: boolean(name='Deletable'),
  requestId?: string(name='RequestId'),
  roleUsages?: [ 
    {
      region?: string(name='Region'),
      resources?: [ string ](name='Resources'),
    }
  ](name='RoleUsages'),
}

model CheckServiceLinkedRoleForDeletingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckServiceLinkedRoleForDeletingResponseBody(name='body'),
}

async function checkServiceLinkedRoleForDeletingWithOptions(request: CheckServiceLinkedRoleForDeletingRequest, runtime: Util.RuntimeOptions): CheckServiceLinkedRoleForDeletingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.deletionTaskId)) {
    query['DeletionTaskId'] = request.deletionTaskId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.roleArn)) {
    query['RoleArn'] = request.roleArn;
  }
  if (!Util.isUnset(request.SPIRegionId)) {
    query['SPIRegionId'] = request.SPIRegionId;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckServiceLinkedRoleForDeleting',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkServiceLinkedRoleForDeleting(request: CheckServiceLinkedRoleForDeletingRequest): CheckServiceLinkedRoleForDeletingResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkServiceLinkedRoleForDeletingWithOptions(request, runtime);
}

model CheckSwitchPostUserRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model CheckSwitchPostUserResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckSwitchPostUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckSwitchPostUserResponseBody(name='body'),
}

async function checkSwitchPostUserWithOptions(request: CheckSwitchPostUserRequest, runtime: Util.RuntimeOptions): CheckSwitchPostUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckSwitchPostUser',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkSwitchPostUser(request: CheckSwitchPostUserRequest): CheckSwitchPostUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkSwitchPostUserWithOptions(request, runtime);
}

model CheckUserPayPackPermissionRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model CheckUserPayPackPermissionResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckUserPayPackPermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckUserPayPackPermissionResponseBody(name='body'),
}

async function checkUserPayPackPermissionWithOptions(request: CheckUserPayPackPermissionRequest, runtime: Util.RuntimeOptions): CheckUserPayPackPermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckUserPayPackPermission',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkUserPayPackPermission(request: CheckUserPayPackPermissionRequest): CheckUserPayPackPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkUserPayPackPermissionWithOptions(request, runtime);
}

model CloneExperimentRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model CloneExperimentResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CloneExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloneExperimentResponseBody(name='body'),
}

async function cloneExperimentWithOptions(request: CloneExperimentRequest, runtime: Util.RuntimeOptions): CloneExperimentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CloneExperiment',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cloneExperiment(request: CloneExperimentRequest): CloneExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  return cloneExperimentWithOptions(request, runtime);
}

model CloneExpertiseRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model CloneExpertiseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CloneExpertiseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloneExpertiseResponseBody(name='body'),
}

async function cloneExpertiseWithOptions(request: CloneExpertiseRequest, runtime: Util.RuntimeOptions): CloneExpertiseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CloneExpertise',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cloneExpertise(request: CloneExpertiseRequest): CloneExpertiseResponse {
  var runtime = new Util.RuntimeOptions{};
  return cloneExpertiseWithOptions(request, runtime);
}

model ClusterOffRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  clusterId?: long(name='ClusterId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model ClusterOffResponseBody = {
  code?: string(name='Code'),
  data?: {
    apps?: [ string ](name='Apps'),
    clusterName?: string(name='ClusterName'),
    clusterQpsLevel?: int32(name='ClusterQpsLevel'),
    enable?: boolean(name='Enable'),
    id?: long(name='Id'),
    maxClusterQps?: int32(name='MaxClusterQps'),
    maxMachineCount?: int32(name='MaxMachineCount'),
    maxSingleQps?: int32(name='MaxSingleQps'),
    maxThresholdCount?: int32(name='MaxThresholdCount'),
    namespace?: string(name='Namespace'),
    shareLevel?: int32(name='ShareLevel'),
    userId?: string(name='UserId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ClusterOffResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ClusterOffResponseBody(name='body'),
}

async function clusterOffWithOptions(request: ClusterOffRequest, runtime: Util.RuntimeOptions): ClusterOffResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ClusterOff',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function clusterOff(request: ClusterOffRequest): ClusterOffResponse {
  var runtime = new Util.RuntimeOptions{};
  return clusterOffWithOptions(request, runtime);
}

model ClusterOnRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  clusterId?: long(name='ClusterId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model ClusterOnResponseBody = {
  code?: string(name='Code'),
  data?: {
    apps?: [ string ](name='Apps'),
    clusterName?: string(name='ClusterName'),
    clusterQpsLevel?: int32(name='ClusterQpsLevel'),
    enable?: boolean(name='Enable'),
    id?: long(name='Id'),
    maxClusterQps?: int32(name='MaxClusterQps'),
    maxMachineCount?: int32(name='MaxMachineCount'),
    maxSingleQps?: int32(name='MaxSingleQps'),
    maxThresholdCount?: int32(name='MaxThresholdCount'),
    namespace?: string(name='Namespace'),
    shareLevel?: int32(name='ShareLevel'),
    userId?: string(name='UserId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ClusterOnResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ClusterOnResponseBody(name='body'),
}

async function clusterOnWithOptions(request: ClusterOnRequest, runtime: Util.RuntimeOptions): ClusterOnResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ClusterOn',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function clusterOn(request: ClusterOnRequest): ClusterOnResponse {
  var runtime = new Util.RuntimeOptions{};
  return clusterOnWithOptions(request, runtime);
}

model ConvertExperimentToExpertiseRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model ConvertExperimentToExpertiseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ConvertExperimentToExpertiseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConvertExperimentToExpertiseResponseBody(name='body'),
}

async function convertExperimentToExpertiseWithOptions(request: ConvertExperimentToExpertiseRequest, runtime: Util.RuntimeOptions): ConvertExperimentToExpertiseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConvertExperimentToExpertise',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function convertExperimentToExpertise(request: ConvertExperimentToExpertiseRequest): ConvertExperimentToExpertiseResponse {
  var runtime = new Util.RuntimeOptions{};
  return convertExperimentToExpertiseWithOptions(request, runtime);
}

model CountExperimentScopeInvocationRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model CountExperimentScopeInvocationResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CountExperimentScopeInvocationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CountExperimentScopeInvocationResponseBody(name='body'),
}

async function countExperimentScopeInvocationWithOptions(request: CountExperimentScopeInvocationRequest, runtime: Util.RuntimeOptions): CountExperimentScopeInvocationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CountExperimentScopeInvocation',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function countExperimentScopeInvocation(request: CountExperimentScopeInvocationRequest): CountExperimentScopeInvocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return countExperimentScopeInvocationWithOptions(request, runtime);
}

model CountExperimentScopeSceneFunctionCountRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model CountExperimentScopeSceneFunctionCountResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CountExperimentScopeSceneFunctionCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CountExperimentScopeSceneFunctionCountResponseBody(name='body'),
}

async function countExperimentScopeSceneFunctionCountWithOptions(request: CountExperimentScopeSceneFunctionCountRequest, runtime: Util.RuntimeOptions): CountExperimentScopeSceneFunctionCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CountExperimentScopeSceneFunctionCount',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function countExperimentScopeSceneFunctionCount(request: CountExperimentScopeSceneFunctionCountRequest): CountExperimentScopeSceneFunctionCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return countExperimentScopeSceneFunctionCountWithOptions(request, runtime);
}

model CountExperimentTaskByDayRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model CountExperimentTaskByDayResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CountExperimentTaskByDayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CountExperimentTaskByDayResponseBody(name='body'),
}

async function countExperimentTaskByDayWithOptions(request: CountExperimentTaskByDayRequest, runtime: Util.RuntimeOptions): CountExperimentTaskByDayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CountExperimentTaskByDay',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function countExperimentTaskByDay(request: CountExperimentTaskByDayRequest): CountExperimentTaskByDayResponse {
  var runtime = new Util.RuntimeOptions{};
  return countExperimentTaskByDayWithOptions(request, runtime);
}

model CountFunctionInvocationRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model CountFunctionInvocationResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CountFunctionInvocationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CountFunctionInvocationResponseBody(name='body'),
}

async function countFunctionInvocationWithOptions(request: CountFunctionInvocationRequest, runtime: Util.RuntimeOptions): CountFunctionInvocationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CountFunctionInvocation',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function countFunctionInvocation(request: CountFunctionInvocationRequest): CountFunctionInvocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return countFunctionInvocationWithOptions(request, runtime);
}

model CreateAppsRelationshipRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  authId?: string(name='AuthId'),
  edges?: string(name='Edges'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model CreateAppsRelationshipResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateAppsRelationshipResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAppsRelationshipResponseBody(name='body'),
}

async function createAppsRelationshipWithOptions(request: CreateAppsRelationshipRequest, runtime: Util.RuntimeOptions): CreateAppsRelationshipResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.authId)) {
    query['AuthId'] = request.authId;
  }
  if (!Util.isUnset(request.edges)) {
    query['Edges'] = request.edges;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAppsRelationship',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAppsRelationship(request: CreateAppsRelationshipRequest): CreateAppsRelationshipResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppsRelationshipWithOptions(request, runtime);
}

model CreateAttackSuiteRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  scenarioDisplayVO?: string(name='ScenarioDisplayVO'),
  sourceType?: int32(name='SourceType'),
}

model CreateAttackSuiteResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateAttackSuiteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAttackSuiteResponseBody(name='body'),
}

async function createAttackSuiteWithOptions(request: CreateAttackSuiteRequest, runtime: Util.RuntimeOptions): CreateAttackSuiteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.scenarioDisplayVO)) {
    body['ScenarioDisplayVO'] = request.scenarioDisplayVO;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateAttackSuite',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAttackSuite(request: CreateAttackSuiteRequest): CreateAttackSuiteResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAttackSuiteWithOptions(request, runtime);
}

model CreateBatchPublishOrderRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  batchNum?: int32(name='BatchNum'),
  nameSpace?: string(name='NameSpace'),
  pauseType?: string(name='PauseType'),
  switchName?: string(name='SwitchName'),
  switchNameSpace?: string(name='SwitchNameSpace'),
  switchValue?: string(name='SwitchValue'),
}

model CreateBatchPublishOrderResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model CreateBatchPublishOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBatchPublishOrderResponseBody(name='body'),
}

async function createBatchPublishOrderWithOptions(request: CreateBatchPublishOrderRequest, runtime: Util.RuntimeOptions): CreateBatchPublishOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.batchNum)) {
    query['BatchNum'] = request.batchNum;
  }
  if (!Util.isUnset(request.nameSpace)) {
    query['NameSpace'] = request.nameSpace;
  }
  if (!Util.isUnset(request.pauseType)) {
    query['PauseType'] = request.pauseType;
  }
  if (!Util.isUnset(request.switchName)) {
    query['SwitchName'] = request.switchName;
  }
  if (!Util.isUnset(request.switchNameSpace)) {
    query['SwitchNameSpace'] = request.switchNameSpace;
  }
  if (!Util.isUnset(request.switchValue)) {
    query['SwitchValue'] = request.switchValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateBatchPublishOrder',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createBatchPublishOrder(request: CreateBatchPublishOrderRequest): CreateBatchPublishOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBatchPublishOrderWithOptions(request, runtime);
}

model CreateExperimentBasicInfoRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model CreateExperimentBasicInfoResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateExperimentBasicInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateExperimentBasicInfoResponseBody(name='body'),
}

async function createExperimentBasicInfoWithOptions(request: CreateExperimentBasicInfoRequest, runtime: Util.RuntimeOptions): CreateExperimentBasicInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateExperimentBasicInfo',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createExperimentBasicInfo(request: CreateExperimentBasicInfoRequest): CreateExperimentBasicInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return createExperimentBasicInfoWithOptions(request, runtime);
}

model CreateExperimentFlowDefinitionRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model CreateExperimentFlowDefinitionResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateExperimentFlowDefinitionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateExperimentFlowDefinitionResponseBody(name='body'),
}

async function createExperimentFlowDefinitionWithOptions(request: CreateExperimentFlowDefinitionRequest, runtime: Util.RuntimeOptions): CreateExperimentFlowDefinitionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateExperimentFlowDefinition',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createExperimentFlowDefinition(request: CreateExperimentFlowDefinitionRequest): CreateExperimentFlowDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createExperimentFlowDefinitionWithOptions(request, runtime);
}

model CreateExpertiseRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model CreateExpertiseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateExpertiseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateExpertiseResponseBody(name='body'),
}

async function createExpertiseWithOptions(request: CreateExpertiseRequest, runtime: Util.RuntimeOptions): CreateExpertiseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateExpertise',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createExpertise(request: CreateExpertiseRequest): CreateExpertiseResponse {
  var runtime = new Util.RuntimeOptions{};
  return createExpertiseWithOptions(request, runtime);
}

model CreateFreeLicenseKeyRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  authId?: string(name='AuthId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  sourceType?: string(name='SourceType'),
}

model CreateFreeLicenseKeyResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateFreeLicenseKeyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFreeLicenseKeyResponseBody(name='body'),
}

async function createFreeLicenseKeyWithOptions(request: CreateFreeLicenseKeyRequest, runtime: Util.RuntimeOptions): CreateFreeLicenseKeyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.authId)) {
    query['AuthId'] = request.authId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFreeLicenseKey',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFreeLicenseKey(request: CreateFreeLicenseKeyRequest): CreateFreeLicenseKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFreeLicenseKeyWithOptions(request, runtime);
}

model CreateInspectJobRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  clusterId?: string(name='ClusterId'),
  clusterName?: string(name='ClusterName'),
  cron?: string(name='Cron'),
  date?: long(name='Date'),
  day?: string(name='Day'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  terminationDate?: long(name='TerminationDate'),
  terminationTime?: long(name='TerminationTime'),
  time?: long(name='Time'),
  type?: string(name='Type'),
  week?: string(name='Week'),
}

model CreateInspectJobResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateInspectJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInspectJobResponseBody(name='body'),
}

async function createInspectJobWithOptions(request: CreateInspectJobRequest, runtime: Util.RuntimeOptions): CreateInspectJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.cron)) {
    query['Cron'] = request.cron;
  }
  if (!Util.isUnset(request.date)) {
    query['Date'] = request.date;
  }
  if (!Util.isUnset(request.day)) {
    query['Day'] = request.day;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.terminationDate)) {
    query['TerminationDate'] = request.terminationDate;
  }
  if (!Util.isUnset(request.terminationTime)) {
    query['TerminationTime'] = request.terminationTime;
  }
  if (!Util.isUnset(request.time)) {
    query['Time'] = request.time;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.week)) {
    query['Week'] = request.week;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateInspectJob',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createInspectJob(request: CreateInspectJobRequest): CreateInspectJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInspectJobWithOptions(request, runtime);
}

model CreateNamespaceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  description?: string(name='Description'),
  lang?: string(name='Lang'),
  name?: string(name='Name'),
}

model CreateNamespaceResponseBody = {
  code?: string(name='Code'),
  data?: {
    createTime?: long(name='createTime'),
    description?: string(name='description'),
    name?: string(name='name'),
    namespace?: string(name='namespace'),
    regionId?: string(name='regionId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateNamespaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateNamespaceResponseBody(name='body'),
}

async function createNamespaceWithOptions(request: CreateNamespaceRequest, runtime: Util.RuntimeOptions): CreateNamespaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateNamespace',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createNamespace(request: CreateNamespaceRequest): CreateNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNamespaceWithOptions(request, runtime);
}

model CreateSentinelBlockFallbackDefinitionRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  fallbackBehavior?: string(name='FallbackBehavior'),
  lang?: string(name='Lang'),
  name?: string(name='Name'),
  namespace?: string(name='Namespace'),
  resourceClassification?: int32(name='ResourceClassification'),
}

model CreateSentinelBlockFallbackDefinitionResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='AppName'),
    fallbackBehavior?: map[string]any(name='FallbackBehavior'),
    id?: long(name='Id'),
    name?: string(name='Name'),
    namespace?: string(name='Namespace'),
    resourceClassification?: int32(name='ResourceClassification'),
    userId?: string(name='UserId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateSentinelBlockFallbackDefinitionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSentinelBlockFallbackDefinitionResponseBody(name='body'),
}

async function createSentinelBlockFallbackDefinitionWithOptions(request: CreateSentinelBlockFallbackDefinitionRequest, runtime: Util.RuntimeOptions): CreateSentinelBlockFallbackDefinitionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.fallbackBehavior)) {
    query['FallbackBehavior'] = request.fallbackBehavior;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resourceClassification)) {
    query['ResourceClassification'] = request.resourceClassification;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSentinelBlockFallbackDefinition',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSentinelBlockFallbackDefinition(request: CreateSentinelBlockFallbackDefinitionRequest): CreateSentinelBlockFallbackDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSentinelBlockFallbackDefinitionWithOptions(request, runtime);
}

model CreateSentinelDefaultCircuitBreakerRuleRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  count?: float(name='Count'),
  enable?: boolean(name='Enable'),
  grade?: int32(name='Grade'),
  halfOpenBaseAmountPerStep?: int32(name='HalfOpenBaseAmountPerStep'),
  halfOpenRecoveryStepNum?: int32(name='HalfOpenRecoveryStepNum'),
  minRequestAmount?: int32(name='MinRequestAmount'),
  model?: long(name='Model'),
  namespace?: string(name='Namespace'),
  slowRatioThreshold?: float(name='SlowRatioThreshold'),
  statIntervalMs?: int32(name='StatIntervalMs'),
  timeWindow?: int32(name='TimeWindow'),
}

model CreateSentinelDefaultCircuitBreakerRuleResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    count?: float(name='count'),
    createTimestamp?: long(name='createTimestamp'),
    enable?: boolean(name='enable'),
    grade?: int32(name='grade'),
    halfOpenBaseAmountPerStep?: int32(name='halfOpenBaseAmountPerStep'),
    halfOpenRecoveryStepNum?: int32(name='halfOpenRecoveryStepNum'),
    id?: long(name='id'),
    limitApp?: string(name='limitApp'),
    minRequestAmount?: int32(name='minRequestAmount'),
    modifiedTimestamp?: long(name='modifiedTimestamp'),
    namespace?: string(name='namespace'),
    resource?: string(name='resource'),
    slowRatioThreshold?: float(name='slowRatioThreshold'),
    statIntervalMs?: int32(name='statIntervalMs'),
    timeWindow?: int32(name='timeWindow'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateSentinelDefaultCircuitBreakerRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSentinelDefaultCircuitBreakerRuleResponseBody(name='body'),
}

async function createSentinelDefaultCircuitBreakerRuleWithOptions(request: CreateSentinelDefaultCircuitBreakerRuleRequest, runtime: Util.RuntimeOptions): CreateSentinelDefaultCircuitBreakerRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.count)) {
    query['Count'] = request.count;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.grade)) {
    query['Grade'] = request.grade;
  }
  if (!Util.isUnset(request.halfOpenBaseAmountPerStep)) {
    query['HalfOpenBaseAmountPerStep'] = request.halfOpenBaseAmountPerStep;
  }
  if (!Util.isUnset(request.halfOpenRecoveryStepNum)) {
    query['HalfOpenRecoveryStepNum'] = request.halfOpenRecoveryStepNum;
  }
  if (!Util.isUnset(request.minRequestAmount)) {
    query['MinRequestAmount'] = request.minRequestAmount;
  }
  if (!Util.isUnset(request.model)) {
    query['Model'] = request.model;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.slowRatioThreshold)) {
    query['SlowRatioThreshold'] = request.slowRatioThreshold;
  }
  if (!Util.isUnset(request.statIntervalMs)) {
    query['StatIntervalMs'] = request.statIntervalMs;
  }
  if (!Util.isUnset(request.timeWindow)) {
    query['TimeWindow'] = request.timeWindow;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSentinelDefaultCircuitBreakerRule',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSentinelDefaultCircuitBreakerRule(request: CreateSentinelDefaultCircuitBreakerRuleRequest): CreateSentinelDefaultCircuitBreakerRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSentinelDefaultCircuitBreakerRuleWithOptions(request, runtime);
}

model CreateSentinelParamDegradeRuleRequest {
  appGroup?: string(name='AppGroup'),
  appName?: string(name='AppName'),
  count?: double(name='Count'),
  enable?: boolean(name='Enable'),
  halfOpenBaseAmountPerStep?: int32(name='HalfOpenBaseAmountPerStep'),
  halfOpenRecoveryStepNum?: int32(name='HalfOpenRecoveryStepNum'),
  minRequestAmount?: int32(name='MinRequestAmount'),
  model?: long(name='Model'),
  namespace?: string(name='Namespace'),
  statIntervalMs?: int32(name='StatIntervalMs'),
  tags?: string(name='Tags'),
  timeWindow?: int32(name='TimeWindow'),
}

model CreateSentinelParamDegradeRuleResponseBody = {
  code?: string(name='Code'),
  data?: {
    appGroup?: string(name='AppGroup'),
    appName?: string(name='AppName'),
    count?: double(name='Count'),
    enable?: boolean(name='Enable'),
    fallbackObject?: string(name='FallbackObject'),
    halfOpenBaseAmountPerStep?: int32(name='HalfOpenBaseAmountPerStep'),
    halfOpenRecoveryStepNum?: int32(name='HalfOpenRecoveryStepNum'),
    id?: long(name='Id'),
    isDeleted?: boolean(name='IsDeleted'),
    limitApp?: string(name='LimitApp'),
    minRequestAmount?: int32(name='MinRequestAmount'),
    model?: long(name='Model'),
    namespace?: string(name='Namespace'),
    paramKey?: string(name='ParamKey'),
    resource?: string(name='Resource'),
    statIntervalMs?: int32(name='StatIntervalMs'),
    tags?: [ string ](name='Tags'),
    timeWindow?: int32(name='TimeWindow'),
    userId?: string(name='UserId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateSentinelParamDegradeRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSentinelParamDegradeRuleResponseBody(name='body'),
}

async function createSentinelParamDegradeRuleWithOptions(request: CreateSentinelParamDegradeRuleRequest, runtime: Util.RuntimeOptions): CreateSentinelParamDegradeRuleResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appGroup)) {
    body['AppGroup'] = request.appGroup;
  }
  if (!Util.isUnset(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.count)) {
    body['Count'] = request.count;
  }
  if (!Util.isUnset(request.enable)) {
    body['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.halfOpenBaseAmountPerStep)) {
    body['HalfOpenBaseAmountPerStep'] = request.halfOpenBaseAmountPerStep;
  }
  if (!Util.isUnset(request.halfOpenRecoveryStepNum)) {
    body['HalfOpenRecoveryStepNum'] = request.halfOpenRecoveryStepNum;
  }
  if (!Util.isUnset(request.minRequestAmount)) {
    body['MinRequestAmount'] = request.minRequestAmount;
  }
  if (!Util.isUnset(request.model)) {
    body['Model'] = request.model;
  }
  if (!Util.isUnset(request.namespace)) {
    body['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.statIntervalMs)) {
    body['StatIntervalMs'] = request.statIntervalMs;
  }
  if (!Util.isUnset(request.tags)) {
    body['Tags'] = request.tags;
  }
  if (!Util.isUnset(request.timeWindow)) {
    body['TimeWindow'] = request.timeWindow;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSentinelParamDegradeRule',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSentinelParamDegradeRule(request: CreateSentinelParamDegradeRuleRequest): CreateSentinelParamDegradeRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSentinelParamDegradeRuleWithOptions(request, runtime);
}

model DeleteAlarmRuleRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  alarmIds?: string(name='AlarmIds'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model DeleteAlarmRuleResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteAlarmRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAlarmRuleResponseBody(name='body'),
}

async function deleteAlarmRuleWithOptions(request: DeleteAlarmRuleRequest, runtime: Util.RuntimeOptions): DeleteAlarmRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.alarmIds)) {
    query['AlarmIds'] = request.alarmIds;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAlarmRule',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAlarmRule(request: DeleteAlarmRuleRequest): DeleteAlarmRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAlarmRuleWithOptions(request, runtime);
}

model DeleteCategoryRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model DeleteCategoryResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCategoryResponseBody(name='body'),
}

async function deleteCategoryWithOptions(request: DeleteCategoryRequest, runtime: Util.RuntimeOptions): DeleteCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCategory',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCategory(request: DeleteCategoryRequest): DeleteCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCategoryWithOptions(request, runtime);
}

model DeleteContactRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  contactId?: string(name='ContactId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model DeleteContactResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteContactResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteContactResponseBody(name='body'),
}

async function deleteContactWithOptions(request: DeleteContactRequest, runtime: Util.RuntimeOptions): DeleteContactResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.contactId)) {
    query['ContactId'] = request.contactId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteContact',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteContact(request: DeleteContactRequest): DeleteContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteContactWithOptions(request, runtime);
}

model DeleteExperimentRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model DeleteExperimentResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteExperimentResponseBody(name='body'),
}

async function deleteExperimentWithOptions(request: DeleteExperimentRequest, runtime: Util.RuntimeOptions): DeleteExperimentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteExperiment',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteExperiment(request: DeleteExperimentRequest): DeleteExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteExperimentWithOptions(request, runtime);
}

model DeleteExpertiseRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model DeleteExpertiseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteExpertiseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteExpertiseResponseBody(name='body'),
}

async function deleteExpertiseWithOptions(request: DeleteExpertiseRequest, runtime: Util.RuntimeOptions): DeleteExpertiseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteExpertise',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteExpertise(request: DeleteExpertiseRequest): DeleteExpertiseResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteExpertiseWithOptions(request, runtime);
}

model DeleteInspectJobRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  id?: long(name='Id'),
}

model DeleteInspectJobResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteInspectJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInspectJobResponseBody(name='body'),
}

async function deleteInspectJobWithOptions(request: DeleteInspectJobRequest, runtime: Util.RuntimeOptions): DeleteInspectJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteInspectJob',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteInspectJob(request: DeleteInspectJobRequest): DeleteInspectJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInspectJobWithOptions(request, runtime);
}

model DeleteNamespaceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespaceId?: string(name='NamespaceId'),
}

model DeleteNamespaceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteNamespaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNamespaceResponseBody(name='body'),
}

async function deleteNamespaceWithOptions(request: DeleteNamespaceRequest, runtime: Util.RuntimeOptions): DeleteNamespaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNamespace',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteNamespace(request: DeleteNamespaceRequest): DeleteNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNamespaceWithOptions(request, runtime);
}

model DeletePermanentTopologyNodesRequest {
  configurations?: string(name='Configurations'),
  namespace?: string(name='Namespace'),
  product?: string(name='Product'),
  viewId?: string(name='ViewId'),
}

model DeletePermanentTopologyNodesResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      icon?: string(name='icon'),
      id?: string(name='id'),
      instanceId?: string(name='instanceId'),
      name?: string(name='name'),
      nameMinor?: string(name='nameMinor'),
      type?: int32(name='type'),
      viewId?: string(name='viewId'),
      zone?: string(name='zone'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeletePermanentTopologyNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePermanentTopologyNodesResponseBody(name='body'),
}

async function deletePermanentTopologyNodesWithOptions(request: DeletePermanentTopologyNodesRequest, runtime: Util.RuntimeOptions): DeletePermanentTopologyNodesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configurations)) {
    query['Configurations'] = request.configurations;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.product)) {
    query['Product'] = request.product;
  }
  if (!Util.isUnset(request.viewId)) {
    query['ViewId'] = request.viewId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePermanentTopologyNodes',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePermanentTopologyNodes(request: DeletePermanentTopologyNodesRequest): DeletePermanentTopologyNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePermanentTopologyNodesWithOptions(request, runtime);
}

model DeleteSceneRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model DeleteSceneResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteSceneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSceneResponseBody(name='body'),
}

async function deleteSceneWithOptions(request: DeleteSceneRequest, runtime: Util.RuntimeOptions): DeleteSceneResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteScene',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteScene(request: DeleteSceneRequest): DeleteSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSceneWithOptions(request, runtime);
}

model DeleteSceneFunctionRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model DeleteSceneFunctionResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteSceneFunctionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSceneFunctionResponseBody(name='body'),
}

async function deleteSceneFunctionWithOptions(request: DeleteSceneFunctionRequest, runtime: Util.RuntimeOptions): DeleteSceneFunctionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSceneFunction',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSceneFunction(request: DeleteSceneFunctionRequest): DeleteSceneFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSceneFunctionWithOptions(request, runtime);
}

model DeleteSceneFunctionParameterRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model DeleteSceneFunctionParameterResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteSceneFunctionParameterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSceneFunctionParameterResponseBody(name='body'),
}

async function deleteSceneFunctionParameterWithOptions(request: DeleteSceneFunctionParameterRequest, runtime: Util.RuntimeOptions): DeleteSceneFunctionParameterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSceneFunctionParameter',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSceneFunctionParameter(request: DeleteSceneFunctionParameterRequest): DeleteSceneFunctionParameterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSceneFunctionParameterWithOptions(request, runtime);
}

model DeleteSentinelBlockFallbackDefinitionRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
}

model DeleteSentinelBlockFallbackDefinitionResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteSentinelBlockFallbackDefinitionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSentinelBlockFallbackDefinitionResponseBody(name='body'),
}

async function deleteSentinelBlockFallbackDefinitionWithOptions(request: DeleteSentinelBlockFallbackDefinitionRequest, runtime: Util.RuntimeOptions): DeleteSentinelBlockFallbackDefinitionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSentinelBlockFallbackDefinition',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSentinelBlockFallbackDefinition(request: DeleteSentinelBlockFallbackDefinitionRequest): DeleteSentinelBlockFallbackDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSentinelBlockFallbackDefinitionWithOptions(request, runtime);
}

model DeleteSentinelDefaultCircuitBreakerRuleRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  id?: long(name='Id'),
  namespace?: string(name='Namespace'),
}

model DeleteSentinelDefaultCircuitBreakerRuleResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteSentinelDefaultCircuitBreakerRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSentinelDefaultCircuitBreakerRuleResponseBody(name='body'),
}

async function deleteSentinelDefaultCircuitBreakerRuleWithOptions(request: DeleteSentinelDefaultCircuitBreakerRuleRequest, runtime: Util.RuntimeOptions): DeleteSentinelDefaultCircuitBreakerRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSentinelDefaultCircuitBreakerRule',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSentinelDefaultCircuitBreakerRule(request: DeleteSentinelDefaultCircuitBreakerRuleRequest): DeleteSentinelDefaultCircuitBreakerRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSentinelDefaultCircuitBreakerRuleWithOptions(request, runtime);
}

model DeleteSentinelMeshEnvoyRlsRuleRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model DeleteSentinelMeshEnvoyRlsRuleResponseBody = {
  code?: string(name='Code'),
  data?: int32(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteSentinelMeshEnvoyRlsRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSentinelMeshEnvoyRlsRuleResponseBody(name='body'),
}

async function deleteSentinelMeshEnvoyRlsRuleWithOptions(request: DeleteSentinelMeshEnvoyRlsRuleRequest, runtime: Util.RuntimeOptions): DeleteSentinelMeshEnvoyRlsRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSentinelMeshEnvoyRlsRule',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSentinelMeshEnvoyRlsRule(request: DeleteSentinelMeshEnvoyRlsRuleRequest): DeleteSentinelMeshEnvoyRlsRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSentinelMeshEnvoyRlsRuleWithOptions(request, runtime);
}

model DeleteSentinelParamDegradeRuleRequest {
  appName?: string(name='AppName'),
  id?: long(name='Id'),
  namespace?: string(name='Namespace'),
}

model DeleteSentinelParamDegradeRuleResponseBody = {
  content?: {
    code?: string(name='Code', description='请求响应码，200 为success'),
    data?: long(name='Data', description='返回的数据对象'),
    message?: string(name='Message', description='返回的错误信息'),
    requestId?: string(name='RequestId', description='请求ID'),
    success?: boolean(name='Success', description='是否成功标识'),
  }(name='Content', description='RestResponse<Long>'),
  first?: boolean(name='First'),
  last?: boolean(name='Last'),
}

model DeleteSentinelParamDegradeRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSentinelParamDegradeRuleResponseBody(name='body'),
}

async function deleteSentinelParamDegradeRuleWithOptions(request: DeleteSentinelParamDegradeRuleRequest, runtime: Util.RuntimeOptions): DeleteSentinelParamDegradeRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.namespace)) {
    body['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSentinelParamDegradeRule',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSentinelParamDegradeRule(request: DeleteSentinelParamDegradeRuleRequest): DeleteSentinelParamDegradeRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSentinelParamDegradeRuleWithOptions(request, runtime);
}

model DeleteUserAuthorityRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model DeleteUserAuthorityResponseBody = {
  code?: string(name='Code'),
  data?: {
    delete?: string(name='delete'),
    id?: long(name='id'),
    parentUid?: string(name='parentUid'),
    roleType?: int32(name='roleType'),
    subUserId?: string(name='subUserId'),
    userName?: string(name='userName'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteUserAuthorityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteUserAuthorityResponseBody(name='body'),
}

async function deleteUserAuthorityWithOptions(request: DeleteUserAuthorityRequest, runtime: Util.RuntimeOptions): DeleteUserAuthorityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUserAuthority',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteUserAuthority(request: DeleteUserAuthorityRequest): DeleteUserAuthorityResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserAuthorityWithOptions(request, runtime);
}

model DeleteWorkspaceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model DeleteWorkspaceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteWorkspaceResponseBody(name='body'),
}

async function deleteWorkspaceWithOptions(request: DeleteWorkspaceRequest, runtime: Util.RuntimeOptions): DeleteWorkspaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWorkspace',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteWorkspace(request: DeleteWorkspaceRequest): DeleteWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWorkspaceWithOptions(request, runtime);
}

model DeleteWorkspaceExperimentRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model DeleteWorkspaceExperimentResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteWorkspaceExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteWorkspaceExperimentResponseBody(name='body'),
}

async function deleteWorkspaceExperimentWithOptions(request: DeleteWorkspaceExperimentRequest, runtime: Util.RuntimeOptions): DeleteWorkspaceExperimentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWorkspaceExperiment',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteWorkspaceExperiment(request: DeleteWorkspaceExperimentRequest): DeleteWorkspaceExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWorkspaceExperimentWithOptions(request, runtime);
}

model DeleteWorkspaceMemberRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model DeleteWorkspaceMemberResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteWorkspaceMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteWorkspaceMemberResponseBody(name='body'),
}

async function deleteWorkspaceMemberWithOptions(request: DeleteWorkspaceMemberRequest, runtime: Util.RuntimeOptions): DeleteWorkspaceMemberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWorkspaceMember',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteWorkspaceMember(request: DeleteWorkspaceMemberRequest): DeleteWorkspaceMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWorkspaceMemberWithOptions(request, runtime);
}

model DescribeLastInspectResultRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  clusterId?: string(name='ClusterId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model DescribeLastInspectResultResponseBody = {
  code?: string(name='Code'),
  data?: {
    description?: string(name='Description'),
    endTime?: string(name='EndTime'),
    failInspectCount?: int32(name='FailInspectCount'),
    id?: long(name='Id'),
    namespace?: string(name='Namespace'),
    passInspectCount?: int32(name='PassInspectCount'),
    score?: float(name='Score'),
    startTime?: string(name='StartTime'),
    status?: string(name='Status'),
    title?: string(name='Title'),
    totalInspectCount?: int32(name='TotalInspectCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeLastInspectResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLastInspectResultResponseBody(name='body'),
}

async function describeLastInspectResultWithOptions(request: DescribeLastInspectResultRequest, runtime: Util.RuntimeOptions): DescribeLastInspectResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLastInspectResult',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLastInspectResult(request: DescribeLastInspectResultRequest): DescribeLastInspectResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLastInspectResultWithOptions(request, runtime);
}

model DescribePluginDetailRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  configurationId?: string(name='ConfigurationId'),
  namespace?: string(name='Namespace'),
}

model DescribePluginDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='AppName'),
    configurationId?: string(name='ConfigurationId'),
    connectTime?: long(name='ConnectTime'),
    enable?: boolean(name='Enable'),
    installMode?: string(name='InstallMode'),
    instanceId?: string(name='InstanceId'),
    instanceName?: string(name='InstanceName'),
    osType?: string(name='OsType'),
    pluginStatus?: int32(name='PluginStatus'),
    pluginType?: string(name='PluginType'),
    privateIp?: string(name='PrivateIp'),
    publicIp?: string(name='PublicIp'),
    upgrade?: boolean(name='Upgrade'),
    upgradeVersion?: string(name='UpgradeVersion'),
    version?: string(name='Version'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribePluginDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePluginDetailResponseBody(name='body'),
}

async function describePluginDetailWithOptions(request: DescribePluginDetailRequest, runtime: Util.RuntimeOptions): DescribePluginDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.configurationId)) {
    query['ConfigurationId'] = request.configurationId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePluginDetail',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePluginDetail(request: DescribePluginDetailRequest): DescribePluginDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePluginDetailWithOptions(request, runtime);
}

model DescribePluginRateRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  instanceName?: string(name='InstanceName'),
  namespace?: string(name='Namespace'),
  pluginType?: int32(name='PluginType'),
}

model DescribePluginRateResponseBody = {
  code?: string(name='Code'),
  data?: {
    ecsNumber?: int32(name='ecsNumber'),
    onLinePluginNumber?: int32(name='onLinePluginNumber'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribePluginRateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePluginRateResponseBody(name='body'),
}

async function describePluginRateWithOptions(request: DescribePluginRateRequest, runtime: Util.RuntimeOptions): DescribePluginRateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pluginType)) {
    query['PluginType'] = request.pluginType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePluginRate',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePluginRate(request: DescribePluginRateRequest): DescribePluginRateResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePluginRateWithOptions(request, runtime);
}

model DescribeRdsErrorLogsRequest {
  dbInstanceId?: string(name='DbInstanceId'),
  endTime?: string(name='EndTime'),
  keyword?: string(name='Keyword'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startTime?: string(name='StartTime'),
}

model DescribeRdsErrorLogsResponseBody = {
  code?: string(name='Code'),
  data?: {
    items?: [ 
      {
        createTime?: string(name='CreateTime'),
        errorInfo?: string(name='ErrorInfo'),
      }
    ](name='Items'),
    pageNumber?: int32(name='PageNumber'),
    pageRecordCount?: int32(name='PageRecordCount'),
    requestId?: string(name='RequestId'),
    totalRecordCount?: int32(name='TotalRecordCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRdsErrorLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRdsErrorLogsResponseBody(name='body'),
}

async function describeRdsErrorLogsWithOptions(request: DescribeRdsErrorLogsRequest, runtime: Util.RuntimeOptions): DescribeRdsErrorLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dbInstanceId)) {
    query['DbInstanceId'] = request.dbInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRdsErrorLogs',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRdsErrorLogs(request: DescribeRdsErrorLogsRequest): DescribeRdsErrorLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsErrorLogsWithOptions(request, runtime);
}

model DescribeRdsSlowLogRecordsRequest {
  dbInstanceId?: string(name='DbInstanceId'),
  endTime?: string(name='EndTime'),
  keyword?: string(name='Keyword'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startTime?: string(name='StartTime'),
}

model DescribeRdsSlowLogRecordsResponseBody = {
  code?: string(name='Code'),
  data?: {
    DBInstanceId?: string(name='DBInstanceId'),
    engine?: string(name='Engine'),
    items?: [ 
      {
        DBName?: string(name='DBName'),
        executionStartTime?: long(name='ExecutionStartTime'),
        hostAddress?: string(name='HostAddress'),
        lockTimes?: long(name='LockTimes'),
        parseRowCounts?: long(name='ParseRowCounts'),
        queryTimeMS?: long(name='QueryTimeMS'),
        queryTimes?: long(name='QueryTimes'),
        returnRowCounts?: long(name='ReturnRowCounts'),
        SQLText?: string(name='SQLText'),
      }
    ](name='Items'),
    pageNumber?: int32(name='PageNumber'),
    pageRecordCount?: int32(name='PageRecordCount'),
    requestId?: string(name='RequestId'),
    totalRecordCount?: int32(name='TotalRecordCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRdsSlowLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRdsSlowLogRecordsResponseBody(name='body'),
}

async function describeRdsSlowLogRecordsWithOptions(request: DescribeRdsSlowLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeRdsSlowLogRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dbInstanceId)) {
    query['DbInstanceId'] = request.dbInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRdsSlowLogRecords',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRdsSlowLogRecords(request: DescribeRdsSlowLogRecordsRequest): DescribeRdsSlowLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsSlowLogRecordsWithOptions(request, runtime);
}

model DescribeRdsSlowLogsRequest {
  dbInstanceId?: string(name='DbInstanceId'),
  endTime?: string(name='EndTime'),
  keyword?: string(name='Keyword'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startTime?: string(name='StartTime'),
}

model DescribeRdsSlowLogsResponseBody = {
  code?: string(name='Code'),
  data?: {
    DBInstanceId?: string(name='DBInstanceId'),
    endTime?: string(name='EndTime'),
    engine?: string(name='Engine'),
    items?: [ 
      {
        avgExecutionTime?: long(name='AvgExecutionTime'),
        createTime?: string(name='CreateTime'),
        DBName?: string(name='DBName'),
        maxExecutionTime?: long(name='MaxExecutionTime'),
        maxLockTime?: long(name='MaxLockTime'),
        mySQLTotalExecutionCounts?: long(name='MySQLTotalExecutionCounts'),
        mySQLTotalExecutionTimes?: long(name='MySQLTotalExecutionTimes'),
        parseMaxRowCount?: long(name='ParseMaxRowCount'),
        parseTotalRowCounts?: long(name='ParseTotalRowCounts'),
        reportTime?: string(name='ReportTime'),
        returnMaxRowCount?: long(name='ReturnMaxRowCount'),
        returnTotalRowCounts?: long(name='ReturnTotalRowCounts'),
        SQLHASH?: string(name='SQLHASH'),
        SQLIdStr?: string(name='SQLIdStr'),
        SQLServerTotalExecutionCounts?: long(name='SQLServerTotalExecutionCounts'),
        SQLServerTotalExecutionTimes?: long(name='SQLServerTotalExecutionTimes'),
        SQLText?: string(name='SQLText'),
        slowLogId?: long(name='SlowLogId'),
        totalLockTimes?: long(name='TotalLockTimes'),
        totalLogicalReadCounts?: long(name='TotalLogicalReadCounts'),
        totalPhysicalReadCounts?: long(name='TotalPhysicalReadCounts'),
      }
    ](name='Items'),
    pageNumber?: int32(name='PageNumber'),
    pageRecordCount?: int32(name='PageRecordCount'),
    requestId?: string(name='RequestId'),
    startTime?: string(name='StartTime'),
    totalRecordCount?: int32(name='TotalRecordCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRdsSlowLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRdsSlowLogsResponseBody(name='body'),
}

async function describeRdsSlowLogsWithOptions(request: DescribeRdsSlowLogsRequest, runtime: Util.RuntimeOptions): DescribeRdsSlowLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dbInstanceId)) {
    query['DbInstanceId'] = request.dbInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRdsSlowLogs',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRdsSlowLogs(request: DescribeRdsSlowLogsRequest): DescribeRdsSlowLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsSlowLogsWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model DescribeRegionsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      localName?: string(name='localName'),
      regionEndpoint?: string(name='regionEndpoint'),
      regionId?: string(name='regionId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DisableExpertiseRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model DisableExpertiseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DisableExpertiseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableExpertiseResponseBody(name='body'),
}

async function disableExpertiseWithOptions(request: DisableExpertiseRequest, runtime: Util.RuntimeOptions): DisableExpertiseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableExpertise',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableExpertise(request: DisableExpertiseRequest): DisableExpertiseResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableExpertiseWithOptions(request, runtime);
}

model DisableInspectRuleRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  functionId?: long(name='FunctionId'),
}

model DisableInspectRuleResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DisableInspectRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableInspectRuleResponseBody(name='body'),
}

async function disableInspectRuleWithOptions(request: DisableInspectRuleRequest, runtime: Util.RuntimeOptions): DisableInspectRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.functionId)) {
    query['FunctionId'] = request.functionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableInspectRule',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableInspectRule(request: DisableInspectRuleRequest): DisableInspectRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableInspectRuleWithOptions(request, runtime);
}

model DisableSentinelDefaultCircuitBreakerRuleRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  ids?: string(name='Ids'),
  namespace?: string(name='Namespace'),
}

model DisableSentinelDefaultCircuitBreakerRuleResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    count?: float(name='count'),
    createTimestamp?: long(name='createTimestamp'),
    enable?: boolean(name='enable'),
    grade?: int32(name='grade'),
    id?: long(name='id'),
    limitApp?: string(name='limitApp'),
    modifiedTimestamp?: long(name='modifiedTimestamp'),
    namespace?: string(name='namespace'),
    resource?: string(name='resource'),
    timeWindow?: int32(name='timeWindow'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DisableSentinelDefaultCircuitBreakerRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableSentinelDefaultCircuitBreakerRuleResponseBody(name='body'),
}

async function disableSentinelDefaultCircuitBreakerRuleWithOptions(request: DisableSentinelDefaultCircuitBreakerRuleRequest, runtime: Util.RuntimeOptions): DisableSentinelDefaultCircuitBreakerRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableSentinelDefaultCircuitBreakerRule',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableSentinelDefaultCircuitBreakerRule(request: DisableSentinelDefaultCircuitBreakerRuleRequest): DisableSentinelDefaultCircuitBreakerRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableSentinelDefaultCircuitBreakerRuleWithOptions(request, runtime);
}

model DisableSentinelMeshEnvoyRlsRuleRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
}

model DisableSentinelMeshEnvoyRlsRuleResponseBody = {
  code?: string(name='Code'),
  data?: {
    enabled?: boolean(name='Enabled'),
    groupId?: long(name='GroupId'),
    id?: long(name='Id'),
    name?: string(name='Name'),
    resourceDescriptors?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='ResourceDescriptors'),
    threshold?: long(name='Threshold'),
    timeUnit?: int32(name='TimeUnit'),
    userId?: string(name='UserId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DisableSentinelMeshEnvoyRlsRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableSentinelMeshEnvoyRlsRuleResponseBody(name='body'),
}

async function disableSentinelMeshEnvoyRlsRuleWithOptions(request: DisableSentinelMeshEnvoyRlsRuleRequest, runtime: Util.RuntimeOptions): DisableSentinelMeshEnvoyRlsRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableSentinelMeshEnvoyRlsRule',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableSentinelMeshEnvoyRlsRule(request: DisableSentinelMeshEnvoyRlsRuleRequest): DisableSentinelMeshEnvoyRlsRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableSentinelMeshEnvoyRlsRuleWithOptions(request, runtime);
}

model DisableSentinelParamDegradeRuleRequest {
  appName?: string(name='AppName'),
  ids?: string(name='Ids'),
  namespace?: string(name='Namespace'),
}

model DisableSentinelParamDegradeRuleResponseBody = {
  content?: {
    code?: string(name='Code', description='请求响应码，200 为success'),
    data?: {
      appGroup?: string(name='AppGroup'),
      appName?: string(name='AppName'),
      count?: double(name='Count'),
      enable?: boolean(name='Enable'),
      fallbackObject?: string(name='FallbackObject'),
      halfOpenBaseAmountPerStep?: int32(name='HalfOpenBaseAmountPerStep'),
      halfOpenRecoveryStepNum?: int32(name='HalfOpenRecoveryStepNum'),
      id?: long(name='Id'),
      isDeleted?: boolean(name='IsDeleted'),
      limitApp?: string(name='LimitApp'),
      minRequestAmount?: int32(name='MinRequestAmount'),
      model?: long(name='Model'),
      namespace?: string(name='Namespace'),
      paramKey?: string(name='ParamKey'),
      resource?: string(name='Resource'),
      statIntervalMs?: int32(name='StatIntervalMs'),
      tags?: [ string ](name='Tags'),
      timeWindow?: int32(name='TimeWindow'),
      userId?: string(name='UserId'),
    }(name='Data', description='返回的数据对象'),
    message?: string(name='Message', description='返回的错误信息'),
    requestId?: string(name='RequestId', description='请求ID'),
    success?: boolean(name='Success', description='是否成功标识'),
  }(name='Content', description='RestResponse<ParamDegradeRuleDTO>'),
  first?: boolean(name='First'),
  last?: boolean(name='Last'),
}

model DisableSentinelParamDegradeRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableSentinelParamDegradeRuleResponseBody(name='body'),
}

async function disableSentinelParamDegradeRuleWithOptions(request: DisableSentinelParamDegradeRuleRequest, runtime: Util.RuntimeOptions): DisableSentinelParamDegradeRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.ids)) {
    body['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.namespace)) {
    body['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DisableSentinelParamDegradeRule',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableSentinelParamDegradeRule(request: DisableSentinelParamDegradeRuleRequest): DisableSentinelParamDegradeRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableSentinelParamDegradeRuleWithOptions(request, runtime);
}

model EditSentinelDefaultCircuitBreakerRuleRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  count?: float(name='Count'),
  grade?: int32(name='Grade'),
  halfOpenBaseAmountPerStep?: int32(name='HalfOpenBaseAmountPerStep'),
  halfOpenRecoveryStepNum?: int32(name='HalfOpenRecoveryStepNum'),
  id?: long(name='Id'),
  minRequestAmount?: int32(name='MinRequestAmount'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
  slowRatioThreshold?: float(name='SlowRatioThreshold'),
  statIntervalMs?: int32(name='StatIntervalMs'),
  timeWindow?: int32(name='TimeWindow'),
}

model EditSentinelDefaultCircuitBreakerRuleResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    count?: float(name='count'),
    createTimestamp?: long(name='createTimestamp'),
    enable?: boolean(name='enable'),
    grade?: int32(name='grade'),
    halfOpenBaseAmountPerStep?: int32(name='halfOpenBaseAmountPerStep'),
    halfOpenRecoveryStepNum?: int32(name='halfOpenRecoveryStepNum'),
    id?: long(name='id'),
    limitApp?: string(name='limitApp'),
    minRequestAmount?: int32(name='minRequestAmount'),
    modifiedTimestamp?: long(name='modifiedTimestamp'),
    namespace?: string(name='namespace'),
    resource?: string(name='resource'),
    slowRatioThreshold?: float(name='slowRatioThreshold'),
    statIntervalMs?: int32(name='statIntervalMs'),
    timeWindow?: int32(name='timeWindow'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EditSentinelDefaultCircuitBreakerRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EditSentinelDefaultCircuitBreakerRuleResponseBody(name='body'),
}

async function editSentinelDefaultCircuitBreakerRuleWithOptions(request: EditSentinelDefaultCircuitBreakerRuleRequest, runtime: Util.RuntimeOptions): EditSentinelDefaultCircuitBreakerRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.count)) {
    query['Count'] = request.count;
  }
  if (!Util.isUnset(request.grade)) {
    query['Grade'] = request.grade;
  }
  if (!Util.isUnset(request.halfOpenBaseAmountPerStep)) {
    query['HalfOpenBaseAmountPerStep'] = request.halfOpenBaseAmountPerStep;
  }
  if (!Util.isUnset(request.halfOpenRecoveryStepNum)) {
    query['HalfOpenRecoveryStepNum'] = request.halfOpenRecoveryStepNum;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.minRequestAmount)) {
    query['MinRequestAmount'] = request.minRequestAmount;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.slowRatioThreshold)) {
    query['SlowRatioThreshold'] = request.slowRatioThreshold;
  }
  if (!Util.isUnset(request.statIntervalMs)) {
    query['StatIntervalMs'] = request.statIntervalMs;
  }
  if (!Util.isUnset(request.timeWindow)) {
    query['TimeWindow'] = request.timeWindow;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EditSentinelDefaultCircuitBreakerRule',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function editSentinelDefaultCircuitBreakerRule(request: EditSentinelDefaultCircuitBreakerRuleRequest): EditSentinelDefaultCircuitBreakerRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return editSentinelDefaultCircuitBreakerRuleWithOptions(request, runtime);
}

model EditSentinelHotParamRuleRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  burstCount?: int32(name='BurstCount'),
  controlBehavior?: int32(name='ControlBehavior'),
  count?: float(name='Count'),
  durationInSec?: long(name='DurationInSec'),
  enable?: boolean(name='Enable'),
  grade?: int32(name='Grade'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
  maxQueueingTimeMs?: int32(name='MaxQueueingTimeMs'),
  namespace?: string(name='Namespace'),
  paramIdx?: int32(name='ParamIdx'),
  tags?: string(name='Tags'),
}

model EditSentinelHotParamRuleResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    burstCount?: int32(name='burstCount'),
    clusterFailFallback?: boolean(name='clusterFailFallback'),
    clusterMode?: boolean(name='clusterMode'),
    clusterThresholdType?: int32(name='clusterThresholdType'),
    controlBehavior?: int32(name='controlBehavior'),
    count?: float(name='count'),
    durationInSec?: long(name='durationInSec'),
    enable?: boolean(name='enable'),
    grade?: int32(name='grade'),
    id?: long(name='id'),
    limitApp?: string(name='limitApp'),
    maxQueueingTimeMs?: int32(name='maxQueueingTimeMs'),
    namespace?: string(name='namespace'),
    paramFlowItemList?: [ 
      {
        classType?: string(name='classType'),
        count?: int32(name='count'),
        object?: string(name='object'),
      }
    ](name='paramFlowItemList'),
    paramIdx?: int32(name='paramIdx'),
    resource?: string(name='resource'),
    sampleCount?: int32(name='sampleCount'),
    tags?: [ string ](name='tags'),
    userId?: string(name='userId'),
    windowIntervalMs?: int32(name='windowIntervalMs'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EditSentinelHotParamRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EditSentinelHotParamRuleResponseBody(name='body'),
}

async function editSentinelHotParamRuleWithOptions(request: EditSentinelHotParamRuleRequest, runtime: Util.RuntimeOptions): EditSentinelHotParamRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.burstCount)) {
    query['BurstCount'] = request.burstCount;
  }
  if (!Util.isUnset(request.controlBehavior)) {
    query['ControlBehavior'] = request.controlBehavior;
  }
  if (!Util.isUnset(request.count)) {
    query['Count'] = request.count;
  }
  if (!Util.isUnset(request.durationInSec)) {
    query['DurationInSec'] = request.durationInSec;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.grade)) {
    query['Grade'] = request.grade;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.maxQueueingTimeMs)) {
    query['MaxQueueingTimeMs'] = request.maxQueueingTimeMs;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.paramIdx)) {
    query['ParamIdx'] = request.paramIdx;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EditSentinelHotParamRule',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function editSentinelHotParamRule(request: EditSentinelHotParamRuleRequest): EditSentinelHotParamRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return editSentinelHotParamRuleWithOptions(request, runtime);
}

model EditSentinelParamDegradeRuleRequest {
  appGroup?: string(name='AppGroup'),
  appName?: string(name='AppName'),
  count?: double(name='Count'),
  halfOpenBaseAmountPerStep?: int32(name='HalfOpenBaseAmountPerStep'),
  halfOpenRecoveryStepNum?: int32(name='HalfOpenRecoveryStepNum'),
  id?: long(name='Id'),
  minRequestAmount?: int32(name='MinRequestAmount'),
  namespace?: string(name='Namespace'),
  statIntervalMs?: int32(name='StatIntervalMs'),
  tags?: string(name='Tags'),
  timeWindow?: int32(name='TimeWindow'),
}

model EditSentinelParamDegradeRuleResponseBody = {
  content?: {
    code?: string(name='Code', description='请求响应码，200 为success'),
    data?: {
      appGroup?: string(name='AppGroup'),
      appName?: string(name='AppName'),
      count?: double(name='Count'),
      enable?: boolean(name='Enable'),
      fallbackObject?: string(name='FallbackObject'),
      halfOpenBaseAmountPerStep?: int32(name='HalfOpenBaseAmountPerStep'),
      halfOpenRecoveryStepNum?: int32(name='HalfOpenRecoveryStepNum'),
      id?: long(name='Id'),
      isDeleted?: boolean(name='IsDeleted'),
      limitApp?: string(name='LimitApp'),
      minRequestAmount?: int32(name='MinRequestAmount'),
      model?: long(name='Model'),
      namespace?: string(name='Namespace'),
      paramKey?: string(name='ParamKey'),
      resource?: string(name='Resource'),
      statIntervalMs?: int32(name='StatIntervalMs'),
      tags?: [ string ](name='Tags'),
      timeWindow?: int32(name='TimeWindow'),
      userId?: string(name='UserId'),
    }(name='Data', description='返回的数据对象'),
    message?: string(name='Message', description='返回的错误信息'),
    requestId?: string(name='RequestId', description='请求ID'),
    success?: boolean(name='Success', description='是否成功标识'),
  }(name='Content', description='RestResponse<ParamDegradeRuleDTO>'),
  first?: boolean(name='First'),
  last?: boolean(name='Last'),
}

model EditSentinelParamDegradeRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EditSentinelParamDegradeRuleResponseBody(name='body'),
}

async function editSentinelParamDegradeRuleWithOptions(request: EditSentinelParamDegradeRuleRequest, runtime: Util.RuntimeOptions): EditSentinelParamDegradeRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.appGroup)) {
    body['AppGroup'] = request.appGroup;
  }
  if (!Util.isUnset(request.count)) {
    body['Count'] = request.count;
  }
  if (!Util.isUnset(request.halfOpenBaseAmountPerStep)) {
    body['HalfOpenBaseAmountPerStep'] = request.halfOpenBaseAmountPerStep;
  }
  if (!Util.isUnset(request.halfOpenRecoveryStepNum)) {
    body['HalfOpenRecoveryStepNum'] = request.halfOpenRecoveryStepNum;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.minRequestAmount)) {
    body['MinRequestAmount'] = request.minRequestAmount;
  }
  if (!Util.isUnset(request.namespace)) {
    body['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.statIntervalMs)) {
    body['StatIntervalMs'] = request.statIntervalMs;
  }
  if (!Util.isUnset(request.tags)) {
    body['Tags'] = request.tags;
  }
  if (!Util.isUnset(request.timeWindow)) {
    body['TimeWindow'] = request.timeWindow;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EditSentinelParamDegradeRule',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function editSentinelParamDegradeRule(request: EditSentinelParamDegradeRuleRequest): EditSentinelParamDegradeRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return editSentinelParamDegradeRuleWithOptions(request, runtime);
}

model EnableExpertiseRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model EnableExpertiseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnableExpertiseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableExpertiseResponseBody(name='body'),
}

async function enableExpertiseWithOptions(request: EnableExpertiseRequest, runtime: Util.RuntimeOptions): EnableExpertiseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableExpertise',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableExpertise(request: EnableExpertiseRequest): EnableExpertiseResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableExpertiseWithOptions(request, runtime);
}

model EnableInspectRuleRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  functionId?: long(name='FunctionId'),
}

model EnableInspectRuleResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnableInspectRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableInspectRuleResponseBody(name='body'),
}

async function enableInspectRuleWithOptions(request: EnableInspectRuleRequest, runtime: Util.RuntimeOptions): EnableInspectRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.functionId)) {
    query['FunctionId'] = request.functionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableInspectRule',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableInspectRule(request: EnableInspectRuleRequest): EnableInspectRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableInspectRuleWithOptions(request, runtime);
}

model EnableSentinelDefaulCircuitBreakerRuleRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  ids?: string(name='Ids'),
  namespace?: string(name='Namespace'),
}

model EnableSentinelDefaulCircuitBreakerRuleResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    count?: float(name='count'),
    createTimestamp?: long(name='createTimestamp'),
    enable?: boolean(name='enable'),
    grade?: int32(name='grade'),
    id?: long(name='id'),
    limitApp?: string(name='limitApp'),
    modifiedTimestamp?: long(name='modifiedTimestamp'),
    namespace?: string(name='namespace'),
    resource?: string(name='resource'),
    timeWindow?: int32(name='timeWindow'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnableSentinelDefaulCircuitBreakerRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableSentinelDefaulCircuitBreakerRuleResponseBody(name='body'),
}

async function enableSentinelDefaulCircuitBreakerRuleWithOptions(request: EnableSentinelDefaulCircuitBreakerRuleRequest, runtime: Util.RuntimeOptions): EnableSentinelDefaulCircuitBreakerRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableSentinelDefaulCircuitBreakerRule',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableSentinelDefaulCircuitBreakerRule(request: EnableSentinelDefaulCircuitBreakerRuleRequest): EnableSentinelDefaulCircuitBreakerRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableSentinelDefaulCircuitBreakerRuleWithOptions(request, runtime);
}

model EnableSentinelMeshEnvoyRlsRuleRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
}

model EnableSentinelMeshEnvoyRlsRuleResponseBody = {
  code?: string(name='Code'),
  data?: {
    enabled?: boolean(name='Enabled'),
    groupId?: long(name='GroupId'),
    id?: long(name='Id'),
    name?: string(name='Name'),
    resourceDescriptors?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='ResourceDescriptors'),
    threshold?: long(name='Threshold'),
    timeUnit?: int32(name='TimeUnit'),
    userId?: string(name='UserId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnableSentinelMeshEnvoyRlsRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableSentinelMeshEnvoyRlsRuleResponseBody(name='body'),
}

async function enableSentinelMeshEnvoyRlsRuleWithOptions(request: EnableSentinelMeshEnvoyRlsRuleRequest, runtime: Util.RuntimeOptions): EnableSentinelMeshEnvoyRlsRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableSentinelMeshEnvoyRlsRule',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableSentinelMeshEnvoyRlsRule(request: EnableSentinelMeshEnvoyRlsRuleRequest): EnableSentinelMeshEnvoyRlsRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableSentinelMeshEnvoyRlsRuleWithOptions(request, runtime);
}

model EnableSentinelParamDegradeRuleRequest {
  appName?: string(name='AppName'),
  ids?: string(name='Ids'),
  namespace?: string(name='Namespace'),
}

model EnableSentinelParamDegradeRuleResponseBody = {
  content?: {
    code?: string(name='Code', description='请求响应码，200 为success'),
    data?: {
      appGroup?: string(name='AppGroup'),
      appName?: string(name='AppName'),
      count?: double(name='Count'),
      enable?: boolean(name='Enable'),
      fallbackObject?: string(name='FallbackObject'),
      halfOpenBaseAmountPerStep?: int32(name='HalfOpenBaseAmountPerStep'),
      halfOpenRecoveryStepNum?: int32(name='HalfOpenRecoveryStepNum'),
      id?: long(name='Id'),
      isDeleted?: boolean(name='IsDeleted'),
      limitApp?: string(name='LimitApp'),
      minRequestAmount?: int32(name='MinRequestAmount'),
      model?: long(name='Model'),
      namespace?: string(name='Namespace'),
      paramKey?: string(name='ParamKey'),
      resource?: string(name='Resource'),
      statIntervalMs?: int32(name='StatIntervalMs'),
      tags?: [ string ](name='Tags'),
      timeWindow?: int32(name='TimeWindow'),
      userId?: string(name='UserId'),
    }(name='Data', description='返回的数据对象'),
    message?: string(name='Message', description='返回的错误信息'),
    requestId?: string(name='RequestId', description='请求ID'),
    success?: boolean(name='Success', description='是否成功标识'),
  }(name='Content', description='RestResponse<ParamDegradeRuleDTO>'),
  first?: boolean(name='First'),
  last?: boolean(name='Last'),
}

model EnableSentinelParamDegradeRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableSentinelParamDegradeRuleResponseBody(name='body'),
}

async function enableSentinelParamDegradeRuleWithOptions(request: EnableSentinelParamDegradeRuleRequest, runtime: Util.RuntimeOptions): EnableSentinelParamDegradeRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.ids)) {
    body['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.namespace)) {
    body['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EnableSentinelParamDegradeRule',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableSentinelParamDegradeRule(request: EnableSentinelParamDegradeRuleRequest): EnableSentinelParamDegradeRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableSentinelParamDegradeRuleWithOptions(request, runtime);
}

model ExperimentTaskCostRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model ExperimentTaskCostResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ExperimentTaskCostResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExperimentTaskCostResponseBody(name='body'),
}

async function experimentTaskCostWithOptions(request: ExperimentTaskCostRequest, runtime: Util.RuntimeOptions): ExperimentTaskCostResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExperimentTaskCost',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function experimentTaskCost(request: ExperimentTaskCostRequest): ExperimentTaskCostResponse {
  var runtime = new Util.RuntimeOptions{};
  return experimentTaskCostWithOptions(request, runtime);
}

model ExperimentTaskCountRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model ExperimentTaskCountResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ExperimentTaskCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExperimentTaskCountResponseBody(name='body'),
}

async function experimentTaskCountWithOptions(request: ExperimentTaskCountRequest, runtime: Util.RuntimeOptions): ExperimentTaskCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExperimentTaskCount',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function experimentTaskCount(request: ExperimentTaskCountRequest): ExperimentTaskCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return experimentTaskCountWithOptions(request, runtime);
}

model ExperimentTaskOverviewRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model ExperimentTaskOverviewResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ExperimentTaskOverviewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExperimentTaskOverviewResponseBody(name='body'),
}

async function experimentTaskOverviewWithOptions(request: ExperimentTaskOverviewRequest, runtime: Util.RuntimeOptions): ExperimentTaskOverviewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExperimentTaskOverview',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function experimentTaskOverview(request: ExperimentTaskOverviewRequest): ExperimentTaskOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return experimentTaskOverviewWithOptions(request, runtime);
}

model ExperimentTaskOverviewIgnoreNamespaceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model ExperimentTaskOverviewIgnoreNamespaceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ExperimentTaskOverviewIgnoreNamespaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExperimentTaskOverviewIgnoreNamespaceResponseBody(name='body'),
}

async function experimentTaskOverviewIgnoreNamespaceWithOptions(request: ExperimentTaskOverviewIgnoreNamespaceRequest, runtime: Util.RuntimeOptions): ExperimentTaskOverviewIgnoreNamespaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExperimentTaskOverviewIgnoreNamespace',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function experimentTaskOverviewIgnoreNamespace(request: ExperimentTaskOverviewIgnoreNamespaceRequest): ExperimentTaskOverviewIgnoreNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return experimentTaskOverviewIgnoreNamespaceWithOptions(request, runtime);
}

model ExperimentTaskResultCountRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model ExperimentTaskResultCountResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ExperimentTaskResultCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExperimentTaskResultCountResponseBody(name='body'),
}

async function experimentTaskResultCountWithOptions(request: ExperimentTaskResultCountRequest, runtime: Util.RuntimeOptions): ExperimentTaskResultCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExperimentTaskResultCount',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function experimentTaskResultCount(request: ExperimentTaskResultCountRequest): ExperimentTaskResultCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return experimentTaskResultCountWithOptions(request, runtime);
}

model ExperimentTaskSummaryPageableQueryRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model ExperimentTaskSummaryPageableQueryResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ExperimentTaskSummaryPageableQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExperimentTaskSummaryPageableQueryResponseBody(name='body'),
}

async function experimentTaskSummaryPageableQueryWithOptions(request: ExperimentTaskSummaryPageableQueryRequest, runtime: Util.RuntimeOptions): ExperimentTaskSummaryPageableQueryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExperimentTaskSummaryPageableQuery',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function experimentTaskSummaryPageableQuery(request: ExperimentTaskSummaryPageableQueryRequest): ExperimentTaskSummaryPageableQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return experimentTaskSummaryPageableQueryWithOptions(request, runtime);
}

model ExportSceneFunctionConfigRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model ExportSceneFunctionConfigResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ExportSceneFunctionConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportSceneFunctionConfigResponseBody(name='body'),
}

async function exportSceneFunctionConfigWithOptions(request: ExportSceneFunctionConfigRequest, runtime: Util.RuntimeOptions): ExportSceneFunctionConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportSceneFunctionConfig',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function exportSceneFunctionConfig(request: ExportSceneFunctionConfigRequest): ExportSceneFunctionConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportSceneFunctionConfigWithOptions(request, runtime);
}

model FissionSceneFunctionRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model FissionSceneFunctionResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model FissionSceneFunctionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FissionSceneFunctionResponseBody(name='body'),
}

async function fissionSceneFunctionWithOptions(request: FissionSceneFunctionRequest, runtime: Util.RuntimeOptions): FissionSceneFunctionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FissionSceneFunction',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function fissionSceneFunction(request: FissionSceneFunctionRequest): FissionSceneFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return fissionSceneFunctionWithOptions(request, runtime);
}

model ForecastExperimentAmountRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model ForecastExperimentAmountResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ForecastExperimentAmountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ForecastExperimentAmountResponseBody(name='body'),
}

async function forecastExperimentAmountWithOptions(request: ForecastExperimentAmountRequest, runtime: Util.RuntimeOptions): ForecastExperimentAmountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ForecastExperimentAmount',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function forecastExperimentAmount(request: ForecastExperimentAmountRequest): ForecastExperimentAmountResponse {
  var runtime = new Util.RuntimeOptions{};
  return forecastExperimentAmountWithOptions(request, runtime);
}

model GatewayProtectionsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GatewayProtectionsResponseBody = {
  code?: string(name='Code'),
  data?: {
    gatewayCount?: map[string]any(name='GatewayCount'),
    gatewayQps?: map[string]any(name='GatewayQps'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GatewayProtectionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GatewayProtectionsResponseBody(name='body'),
}

async function gatewayProtectionsWithOptions(request: GatewayProtectionsRequest, runtime: Util.RuntimeOptions): GatewayProtectionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GatewayProtections',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function gatewayProtections(request: GatewayProtectionsRequest): GatewayProtectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return gatewayProtectionsWithOptions(request, runtime);
}

model GetAppMachinesRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  nameSpace?: string(name='NameSpace'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
}

model GetAppMachinesResponseBody = {
  code?: string(name='Code'),
  data?: {
    data?: [ string ](name='Data'),
    pageNo?: long(name='PageNo'),
    totalCount?: long(name='TotalCount'),
    totalPage?: long(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetAppMachinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAppMachinesResponseBody(name='body'),
}

async function getAppMachinesWithOptions(request: GetAppMachinesRequest, runtime: Util.RuntimeOptions): GetAppMachinesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.nameSpace)) {
    query['NameSpace'] = request.nameSpace;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAppMachines',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAppMachines(request: GetAppMachinesRequest): GetAppMachinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAppMachinesWithOptions(request, runtime);
}

model GetAppSwitchLogRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  beginTimeStamp?: long(name='BeginTimeStamp'),
  endTimeStamp?: long(name='EndTimeStamp'),
  nameSpace?: string(name='NameSpace'),
  operationType?: string(name='OperationType'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  switchName?: string(name='SwitchName'),
  switchNameSpace?: string(name='SwitchNameSpace'),
}

model GetAppSwitchLogResponseBody = {
  code?: string(name='Code'),
  data?: {
    data?: [ string ](name='Data'),
    pageNo?: long(name='PageNo'),
    totalCount?: long(name='TotalCount'),
    totalPage?: long(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetAppSwitchLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAppSwitchLogResponseBody(name='body'),
}

async function getAppSwitchLogWithOptions(request: GetAppSwitchLogRequest, runtime: Util.RuntimeOptions): GetAppSwitchLogResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAppSwitchLog',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAppSwitchLog(request: GetAppSwitchLogRequest): GetAppSwitchLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAppSwitchLogWithOptions(request, runtime);
}

model GetAppUnFinishedPublishOrderRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  nameSpace?: string(name='NameSpace'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
}

model GetAppUnFinishedPublishOrderResponseBody = {
  code?: string(name='Code'),
  data?: {
    data?: [ string ](name='Data'),
    pageNo?: long(name='PageNo'),
    totalCount?: long(name='TotalCount'),
    totalPage?: long(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetAppUnFinishedPublishOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAppUnFinishedPublishOrderResponseBody(name='body'),
}

async function getAppUnFinishedPublishOrderWithOptions(request: GetAppUnFinishedPublishOrderRequest, runtime: Util.RuntimeOptions): GetAppUnFinishedPublishOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.nameSpace)) {
    query['NameSpace'] = request.nameSpace;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAppUnFinishedPublishOrder',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAppUnFinishedPublishOrder(request: GetAppUnFinishedPublishOrderRequest): GetAppUnFinishedPublishOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAppUnFinishedPublishOrderWithOptions(request, runtime);
}

model GetApplicationBasicRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetApplicationBasicResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetApplicationBasicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationBasicResponseBody(name='body'),
}

async function getApplicationBasicWithOptions(request: GetApplicationBasicRequest, runtime: Util.RuntimeOptions): GetApplicationBasicResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetApplicationBasic',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getApplicationBasic(request: GetApplicationBasicRequest): GetApplicationBasicResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApplicationBasicWithOptions(request, runtime);
}

model GetApplicationEmpIdRelationRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetApplicationEmpIdRelationResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetApplicationEmpIdRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationEmpIdRelationResponseBody(name='body'),
}

async function getApplicationEmpIdRelationWithOptions(request: GetApplicationEmpIdRelationRequest, runtime: Util.RuntimeOptions): GetApplicationEmpIdRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetApplicationEmpIdRelation',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getApplicationEmpIdRelation(request: GetApplicationEmpIdRelationRequest): GetApplicationEmpIdRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApplicationEmpIdRelationWithOptions(request, runtime);
}

model GetApplicationExperimentTasksRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetApplicationExperimentTasksResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetApplicationExperimentTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationExperimentTasksResponseBody(name='body'),
}

async function getApplicationExperimentTasksWithOptions(request: GetApplicationExperimentTasksRequest, runtime: Util.RuntimeOptions): GetApplicationExperimentTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetApplicationExperimentTasks',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getApplicationExperimentTasks(request: GetApplicationExperimentTasksRequest): GetApplicationExperimentTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApplicationExperimentTasksWithOptions(request, runtime);
}

model GetApplicationHostsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetApplicationHostsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetApplicationHostsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationHostsResponseBody(name='body'),
}

async function getApplicationHostsWithOptions(request: GetApplicationHostsRequest, runtime: Util.RuntimeOptions): GetApplicationHostsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetApplicationHosts',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getApplicationHosts(request: GetApplicationHostsRequest): GetApplicationHostsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApplicationHostsWithOptions(request, runtime);
}

model GetContactsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model GetContactsResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetContactsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetContactsResponseBody(name='body'),
}

async function getContactsWithOptions(request: GetContactsRequest, runtime: Util.RuntimeOptions): GetContactsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetContacts',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getContacts(request: GetContactsRequest): GetContactsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getContactsWithOptions(request, runtime);
}

model GetDiskDeviceParamOptionsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetDiskDeviceParamOptionsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetDiskDeviceParamOptionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDiskDeviceParamOptionsResponseBody(name='body'),
}

async function getDiskDeviceParamOptionsWithOptions(request: GetDiskDeviceParamOptionsRequest, runtime: Util.RuntimeOptions): GetDiskDeviceParamOptionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDiskDeviceParamOptions',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDiskDeviceParamOptions(request: GetDiskDeviceParamOptionsRequest): GetDiskDeviceParamOptionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDiskDeviceParamOptionsWithOptions(request, runtime);
}

model GetExperimentSummaryRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetExperimentSummaryResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetExperimentSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetExperimentSummaryResponseBody(name='body'),
}

async function getExperimentSummaryWithOptions(request: GetExperimentSummaryRequest, runtime: Util.RuntimeOptions): GetExperimentSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetExperimentSummary',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getExperimentSummary(request: GetExperimentSummaryRequest): GetExperimentSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getExperimentSummaryWithOptions(request, runtime);
}

model GetExperimentSummaryIn30DaysRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetExperimentSummaryIn30DaysResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetExperimentSummaryIn30DaysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetExperimentSummaryIn30DaysResponseBody(name='body'),
}

async function getExperimentSummaryIn30DaysWithOptions(request: GetExperimentSummaryIn30DaysRequest, runtime: Util.RuntimeOptions): GetExperimentSummaryIn30DaysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetExperimentSummaryIn30Days',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getExperimentSummaryIn30Days(request: GetExperimentSummaryIn30DaysRequest): GetExperimentSummaryIn30DaysResponse {
  var runtime = new Util.RuntimeOptions{};
  return getExperimentSummaryIn30DaysWithOptions(request, runtime);
}

model GetExperimentTaskFeedbackRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetExperimentTaskFeedbackResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetExperimentTaskFeedbackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetExperimentTaskFeedbackResponseBody(name='body'),
}

async function getExperimentTaskFeedbackWithOptions(request: GetExperimentTaskFeedbackRequest, runtime: Util.RuntimeOptions): GetExperimentTaskFeedbackResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetExperimentTaskFeedback',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getExperimentTaskFeedback(request: GetExperimentTaskFeedbackRequest): GetExperimentTaskFeedbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getExperimentTaskFeedbackWithOptions(request, runtime);
}

model GetGeneralWorkSpaceBaseInfoRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetGeneralWorkSpaceBaseInfoResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetGeneralWorkSpaceBaseInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetGeneralWorkSpaceBaseInfoResponseBody(name='body'),
}

async function getGeneralWorkSpaceBaseInfoWithOptions(request: GetGeneralWorkSpaceBaseInfoRequest, runtime: Util.RuntimeOptions): GetGeneralWorkSpaceBaseInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetGeneralWorkSpaceBaseInfo',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGeneralWorkSpaceBaseInfo(request: GetGeneralWorkSpaceBaseInfoRequest): GetGeneralWorkSpaceBaseInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGeneralWorkSpaceBaseInfoWithOptions(request, runtime);
}

model GetGeneralWorkSpaceStatInfoRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetGeneralWorkSpaceStatInfoResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetGeneralWorkSpaceStatInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetGeneralWorkSpaceStatInfoResponseBody(name='body'),
}

async function getGeneralWorkSpaceStatInfoWithOptions(request: GetGeneralWorkSpaceStatInfoRequest, runtime: Util.RuntimeOptions): GetGeneralWorkSpaceStatInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetGeneralWorkSpaceStatInfo',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGeneralWorkSpaceStatInfo(request: GetGeneralWorkSpaceStatInfoRequest): GetGeneralWorkSpaceStatInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGeneralWorkSpaceStatInfoWithOptions(request, runtime);
}

model GetIngressDomainsRequest {
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetIngressDomainsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetIngressDomainsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetIngressDomainsResponseBody(name='body'),
}

async function getIngressDomainsWithOptions(request: GetIngressDomainsRequest, runtime: Util.RuntimeOptions): GetIngressDomainsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetIngressDomains',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getIngressDomains(request: GetIngressDomainsRequest): GetIngressDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getIngressDomainsWithOptions(request, runtime);
}

model GetLogItemByExpIdRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetLogItemByExpIdResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetLogItemByExpIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLogItemByExpIdResponseBody(name='body'),
}

async function getLogItemByExpIdWithOptions(request: GetLogItemByExpIdRequest, runtime: Util.RuntimeOptions): GetLogItemByExpIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLogItemByExpId',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLogItemByExpId(request: GetLogItemByExpIdRequest): GetLogItemByExpIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLogItemByExpIdWithOptions(request, runtime);
}

model GetMemorySwitchLogRequest {
  appName?: string(name='AppName'),
  beginTimeStamp?: long(name='BeginTimeStamp'),
  endTimeStamp?: long(name='EndTimeStamp'),
  ip?: string(name='Ip'),
  nameSpace?: string(name='NameSpace'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  switchName?: string(name='SwitchName'),
  switchNameSpace?: string(name='SwitchNameSpace'),
}

model GetMemorySwitchLogResponseBody = {
  code?: string(name='Code'),
  data?: {
    data?: [ string ](name='Data'),
    pageNo?: long(name='PageNo'),
    totalPage?: long(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMemorySwitchLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMemorySwitchLogResponseBody(name='body'),
}

async function getMemorySwitchLogWithOptions(request: GetMemorySwitchLogRequest, runtime: Util.RuntimeOptions): GetMemorySwitchLogResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMemorySwitchLog',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMemorySwitchLog(request: GetMemorySwitchLogRequest): GetMemorySwitchLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMemorySwitchLogWithOptions(request, runtime);
}

model GetMetricKeysRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetMetricKeysResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMetricKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetricKeysResponseBody(name='body'),
}

async function getMetricKeysWithOptions(request: GetMetricKeysRequest, runtime: Util.RuntimeOptions): GetMetricKeysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetricKeys',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetricKeys(request: GetMetricKeysRequest): GetMetricKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetricKeysWithOptions(request, runtime);
}

model GetMyJoinWorkspaceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetMyJoinWorkspaceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMyJoinWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMyJoinWorkspaceResponseBody(name='body'),
}

async function getMyJoinWorkspaceWithOptions(request: GetMyJoinWorkspaceRequest, runtime: Util.RuntimeOptions): GetMyJoinWorkspaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMyJoinWorkspace',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMyJoinWorkspace(request: GetMyJoinWorkspaceRequest): GetMyJoinWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMyJoinWorkspaceWithOptions(request, runtime);
}

model GetMyManageWorkspaceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetMyManageWorkspaceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMyManageWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMyManageWorkspaceResponseBody(name='body'),
}

async function getMyManageWorkspaceWithOptions(request: GetMyManageWorkspaceRequest, runtime: Util.RuntimeOptions): GetMyManageWorkspaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMyManageWorkspace',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMyManageWorkspace(request: GetMyManageWorkspaceRequest): GetMyManageWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMyManageWorkspaceWithOptions(request, runtime);
}

model GetMyWorkspaceBaseInfoRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetMyWorkspaceBaseInfoResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMyWorkspaceBaseInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMyWorkspaceBaseInfoResponseBody(name='body'),
}

async function getMyWorkspaceBaseInfoWithOptions(request: GetMyWorkspaceBaseInfoRequest, runtime: Util.RuntimeOptions): GetMyWorkspaceBaseInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMyWorkspaceBaseInfo',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMyWorkspaceBaseInfo(request: GetMyWorkspaceBaseInfoRequest): GetMyWorkspaceBaseInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMyWorkspaceBaseInfoWithOptions(request, runtime);
}

model GetNamespaceListByUserIdRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  authId?: string(name='AuthId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetNamespaceListByUserIdResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      createTime?: long(name='createTime'),
      description?: string(name='description'),
      name?: string(name='name'),
      namespace?: string(name='namespace'),
      regionId?: string(name='regionId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetNamespaceListByUserIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNamespaceListByUserIdResponseBody(name='body'),
}

async function getNamespaceListByUserIdWithOptions(request: GetNamespaceListByUserIdRequest, runtime: Util.RuntimeOptions): GetNamespaceListByUserIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.authId)) {
    query['AuthId'] = request.authId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetNamespaceListByUserId',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNamespaceListByUserId(request: GetNamespaceListByUserIdRequest): GetNamespaceListByUserIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNamespaceListByUserIdWithOptions(request, runtime);
}

model GetNetworkDeviceParamOptionsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetNetworkDeviceParamOptionsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetNetworkDeviceParamOptionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNetworkDeviceParamOptionsResponseBody(name='body'),
}

async function getNetworkDeviceParamOptionsWithOptions(request: GetNetworkDeviceParamOptionsRequest, runtime: Util.RuntimeOptions): GetNetworkDeviceParamOptionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetNetworkDeviceParamOptions',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNetworkDeviceParamOptions(request: GetNetworkDeviceParamOptionsRequest): GetNetworkDeviceParamOptionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNetworkDeviceParamOptionsWithOptions(request, runtime);
}

model GetParamOptionsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetParamOptionsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetParamOptionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetParamOptionsResponseBody(name='body'),
}

async function getParamOptionsWithOptions(request: GetParamOptionsRequest, runtime: Util.RuntimeOptions): GetParamOptionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetParamOptions',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getParamOptions(request: GetParamOptionsRequest): GetParamOptionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getParamOptionsWithOptions(request, runtime);
}

model GetPublishOrderStatusRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  publishOrderId?: string(name='PublishOrderId'),
}

model GetPublishOrderStatusResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    batchOrderDTOList?: [ string ](name='batchOrderDTOList'),
    createTime?: long(name='createTime'),
    currentBatch?: int32(name='currentBatch'),
    currentStatus?: string(name='currentStatus'),
    id?: string(name='id'),
    namespace?: string(name='namespace'),
    pauseType?: string(name='pauseType'),
    switchDesc?: string(name='switchDesc'),
    switchName?: string(name='switchName'),
    switchNamespace?: string(name='switchNamespace'),
    switchType?: string(name='switchType'),
    switchValue?: string(name='switchValue'),
    totalBatch?: int32(name='totalBatch'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model GetPublishOrderStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPublishOrderStatusResponseBody(name='body'),
}

async function getPublishOrderStatusWithOptions(request: GetPublishOrderStatusRequest, runtime: Util.RuntimeOptions): GetPublishOrderStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.publishOrderId)) {
    query['PublishOrderId'] = request.publishOrderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPublishOrderStatus',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPublishOrderStatus(request: GetPublishOrderStatusRequest): GetPublishOrderStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPublishOrderStatusWithOptions(request, runtime);
}

model GetResourcesPDFReportRequest {
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  reportUUID?: string(name='ReportUUID'),
  resources?: string(name='Resources'),
  startTime?: long(name='StartTime'),
}

model GetResourcesPDFReportResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetResourcesPDFReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourcesPDFReportResponseBody(name='body'),
}

async function getResourcesPDFReportWithOptions(request: GetResourcesPDFReportRequest, runtime: Util.RuntimeOptions): GetResourcesPDFReportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.reportUUID)) {
    query['ReportUUID'] = request.reportUUID;
  }
  if (!Util.isUnset(request.resources)) {
    query['Resources'] = request.resources;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResourcesPDFReport',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResourcesPDFReport(request: GetResourcesPDFReportRequest): GetResourcesPDFReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourcesPDFReportWithOptions(request, runtime);
}

model GetScopesByApplicationRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetScopesByApplicationResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetScopesByApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetScopesByApplicationResponseBody(name='body'),
}

async function getScopesByApplicationWithOptions(request: GetScopesByApplicationRequest, runtime: Util.RuntimeOptions): GetScopesByApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetScopesByApplication',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getScopesByApplication(request: GetScopesByApplicationRequest): GetScopesByApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getScopesByApplicationWithOptions(request, runtime);
}

model GetSentinelAdaptiveFlowSettingOfAppRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetSentinelAdaptiveFlowSettingOfAppResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='AppName'),
    enableAutoSystemAdaptive?: boolean(name='EnableAutoSystemAdaptive'),
    namespace?: string(name='Namespace'),
    userId?: string(name='UserId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetSentinelAdaptiveFlowSettingOfAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSentinelAdaptiveFlowSettingOfAppResponseBody(name='body'),
}

async function getSentinelAdaptiveFlowSettingOfAppWithOptions(request: GetSentinelAdaptiveFlowSettingOfAppRequest, runtime: Util.RuntimeOptions): GetSentinelAdaptiveFlowSettingOfAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSentinelAdaptiveFlowSettingOfApp',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSentinelAdaptiveFlowSettingOfApp(request: GetSentinelAdaptiveFlowSettingOfAppRequest): GetSentinelAdaptiveFlowSettingOfAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSentinelAdaptiveFlowSettingOfAppWithOptions(request, runtime);
}

model GetSentinelClientVersionOfAppRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetSentinelClientVersionOfAppResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='AppName'),
    machineCount?: int32(name='MachineCount'),
    namespace?: string(name='Namespace'),
    userId?: string(name='UserId'),
    versionMap?: map[string]any(name='VersionMap'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetSentinelClientVersionOfAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSentinelClientVersionOfAppResponseBody(name='body'),
}

async function getSentinelClientVersionOfAppWithOptions(request: GetSentinelClientVersionOfAppRequest, runtime: Util.RuntimeOptions): GetSentinelClientVersionOfAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSentinelClientVersionOfApp',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSentinelClientVersionOfApp(request: GetSentinelClientVersionOfAppRequest): GetSentinelClientVersionOfAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSentinelClientVersionOfAppWithOptions(request, runtime);
}

model GetSentinelMeshFlowGroupDetailRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  groupId?: long(name='GroupId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetSentinelMeshFlowGroupDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    envoyRlsDomain?: string(name='EnvoyRlsDomain'),
    id?: long(name='Id'),
    license?: string(name='License'),
    maxEstimatedQps?: long(name='MaxEstimatedQps'),
    meshType?: int32(name='MeshType'),
    name?: string(name='Name'),
    namespace?: string(name='Namespace'),
    serverId?: string(name='ServerId'),
    serverIp?: string(name='ServerIp'),
    serverPort?: int32(name='ServerPort'),
    userId?: string(name='UserId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetSentinelMeshFlowGroupDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSentinelMeshFlowGroupDetailResponseBody(name='body'),
}

async function getSentinelMeshFlowGroupDetailWithOptions(request: GetSentinelMeshFlowGroupDetailRequest, runtime: Util.RuntimeOptions): GetSentinelMeshFlowGroupDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSentinelMeshFlowGroupDetail',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSentinelMeshFlowGroupDetail(request: GetSentinelMeshFlowGroupDetailRequest): GetSentinelMeshFlowGroupDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSentinelMeshFlowGroupDetailWithOptions(request, runtime);
}

model GetSwitchAppListRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appTypes?: string(name='AppTypes'),
  keyWord?: string(name='KeyWord'),
  nameSpace?: string(name='NameSpace'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  sourceType?: string(name='SourceType'),
}

model GetSwitchAppListResponseBody = {
  code?: string(name='Code'),
  data?: {
    data?: [ string ](name='Data'),
    pageNo?: long(name='PageNo'),
    totalCount?: long(name='TotalCount'),
    totalPage?: long(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetSwitchAppListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSwitchAppListResponseBody(name='body'),
}

async function getSwitchAppListWithOptions(request: GetSwitchAppListRequest, runtime: Util.RuntimeOptions): GetSwitchAppListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appTypes)) {
    query['AppTypes'] = request.appTypes;
  }
  if (!Util.isUnset(request.keyWord)) {
    query['KeyWord'] = request.keyWord;
  }
  if (!Util.isUnset(request.nameSpace)) {
    query['NameSpace'] = request.nameSpace;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSwitchAppList',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSwitchAppList(request: GetSwitchAppListRequest): GetSwitchAppListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSwitchAppListWithOptions(request, runtime);
}

model GetSwitchDescriptionRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  keyWord?: string(name='KeyWord'),
  nameSpace?: string(name='NameSpace'),
  pageNo?: int32(name='PageNo'),
  switchNameSpace?: string(name='SwitchNameSpace'),
}

model GetSwitchDescriptionResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageData?: [ string ](name='PageData'),
    pageNo?: int32(name='PageNo'),
    totalCount?: long(name='TotalCount'),
    totalPage?: int32(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetSwitchDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSwitchDescriptionResponseBody(name='body'),
}

async function getSwitchDescriptionWithOptions(request: GetSwitchDescriptionRequest, runtime: Util.RuntimeOptions): GetSwitchDescriptionResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSwitchDescription',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSwitchDescription(request: GetSwitchDescriptionRequest): GetSwitchDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSwitchDescriptionWithOptions(request, runtime);
}

model GetSwitchNameSpacesRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  nameSpace?: string(name='NameSpace'),
}

model GetSwitchNameSpacesResponseBody = {
  code?: string(name='Code'),
  data?: [ string ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model GetSwitchNameSpacesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSwitchNameSpacesResponseBody(name='body'),
}

async function getSwitchNameSpacesWithOptions(request: GetSwitchNameSpacesRequest, runtime: Util.RuntimeOptions): GetSwitchNameSpacesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.nameSpace)) {
    query['NameSpace'] = request.nameSpace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSwitchNameSpaces',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSwitchNameSpaces(request: GetSwitchNameSpacesRequest): GetSwitchNameSpacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSwitchNameSpacesWithOptions(request, runtime);
}

model GetSwitchPersistValueRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  nameSpace?: string(name='NameSpace'),
  switchName?: string(name='SwitchName'),
  switchNameSpace?: string(name='SwitchNameSpace'),
}

model GetSwitchPersistValueResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      namespace?: string(name='Namespace'),
      value?: string(name='Value'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetSwitchPersistValueResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSwitchPersistValueResponseBody(name='body'),
}

async function getSwitchPersistValueWithOptions(request: GetSwitchPersistValueRequest, runtime: Util.RuntimeOptions): GetSwitchPersistValueResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.nameSpace)) {
    query['NameSpace'] = request.nameSpace;
  }
  if (!Util.isUnset(request.switchName)) {
    query['SwitchName'] = request.switchName;
  }
  if (!Util.isUnset(request.switchNameSpace)) {
    query['SwitchNameSpace'] = request.switchNameSpace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSwitchPersistValue',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSwitchPersistValue(request: GetSwitchPersistValueRequest): GetSwitchPersistValueResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSwitchPersistValueWithOptions(request, runtime);
}

model GetSwitchStatisticRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  nameSpace?: string(name='NameSpace'),
  switchName?: string(name='SwitchName'),
  switchNameSpace?: string(name='SwitchNameSpace'),
}

model GetSwitchStatisticResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetSwitchStatisticResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSwitchStatisticResponseBody(name='body'),
}

async function getSwitchStatisticWithOptions(request: GetSwitchStatisticRequest, runtime: Util.RuntimeOptions): GetSwitchStatisticResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.nameSpace)) {
    query['NameSpace'] = request.nameSpace;
  }
  if (!Util.isUnset(request.switchName)) {
    query['SwitchName'] = request.switchName;
  }
  if (!Util.isUnset(request.switchNameSpace)) {
    query['SwitchNameSpace'] = request.switchNameSpace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSwitchStatistic',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSwitchStatistic(request: GetSwitchStatisticRequest): GetSwitchStatisticResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSwitchStatisticWithOptions(request, runtime);
}

model GetUnFinishedPublishOrderRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  nameSpace?: string(name='NameSpace'),
  switchName?: string(name='SwitchName'),
  switchNameSpace?: string(name='SwitchNameSpace'),
}

model GetUnFinishedPublishOrderResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    batchOrderDTOList?: [ string ](name='batchOrderDTOList'),
    createTime?: long(name='createTime'),
    currentBatch?: int32(name='currentBatch'),
    currentStatus?: string(name='currentStatus'),
    id?: long(name='id'),
    namespace?: string(name='namespace'),
    pauseType?: string(name='pauseType'),
    switchDesc?: string(name='switchDesc'),
    switchName?: string(name='switchName'),
    switchNamespace?: string(name='switchNamespace'),
    switchType?: string(name='switchType'),
    switchValue?: string(name='switchValue'),
    totalBatch?: int32(name='totalBatch'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model GetUnFinishedPublishOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUnFinishedPublishOrderResponseBody(name='body'),
}

async function getUnFinishedPublishOrderWithOptions(request: GetUnFinishedPublishOrderRequest, runtime: Util.RuntimeOptions): GetUnFinishedPublishOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.nameSpace)) {
    query['NameSpace'] = request.nameSpace;
  }
  if (!Util.isUnset(request.switchName)) {
    query['SwitchName'] = request.switchName;
  }
  if (!Util.isUnset(request.switchNameSpace)) {
    query['SwitchNameSpace'] = request.switchNameSpace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUnFinishedPublishOrder',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUnFinishedPublishOrder(request: GetUnFinishedPublishOrderRequest): GetUnFinishedPublishOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUnFinishedPublishOrderWithOptions(request, runtime);
}

model GetUserApplicationGroupsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetUserApplicationGroupsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetUserApplicationGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserApplicationGroupsResponseBody(name='body'),
}

async function getUserApplicationGroupsWithOptions(request: GetUserApplicationGroupsRequest, runtime: Util.RuntimeOptions): GetUserApplicationGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUserApplicationGroups',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUserApplicationGroups(request: GetUserApplicationGroupsRequest): GetUserApplicationGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserApplicationGroupsWithOptions(request, runtime);
}

model GetUserApplicationSummariesRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetUserApplicationSummariesResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetUserApplicationSummariesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserApplicationSummariesResponseBody(name='body'),
}

async function getUserApplicationSummariesWithOptions(request: GetUserApplicationSummariesRequest, runtime: Util.RuntimeOptions): GetUserApplicationSummariesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUserApplicationSummaries',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUserApplicationSummaries(request: GetUserApplicationSummariesRequest): GetUserApplicationSummariesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserApplicationSummariesWithOptions(request, runtime);
}

model GetUserApplicationsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetUserApplicationsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetUserApplicationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserApplicationsResponseBody(name='body'),
}

async function getUserApplicationsWithOptions(request: GetUserApplicationsRequest, runtime: Util.RuntimeOptions): GetUserApplicationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUserApplications',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUserApplications(request: GetUserApplicationsRequest): GetUserApplicationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserApplicationsWithOptions(request, runtime);
}

model GetUserSummaryRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  nameSpace?: string(name='NameSpace'),
  sourceType?: string(name='SourceType'),
}

model GetUserSummaryResponseBody = {
  code?: string(name='Code'),
  data?: {
    machineCount?: long(name='MachineCount'),
    nameSpaceCount?: long(name='NameSpaceCount'),
    switchCount?: long(name='SwitchCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model GetUserSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserSummaryResponseBody(name='body'),
}

async function getUserSummaryWithOptions(request: GetUserSummaryRequest, runtime: Util.RuntimeOptions): GetUserSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.nameSpace)) {
    query['NameSpace'] = request.nameSpace;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUserSummary',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUserSummary(request: GetUserSummaryRequest): GetUserSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserSummaryWithOptions(request, runtime);
}

model GetUserWorkspacesRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetUserWorkspacesResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetUserWorkspacesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserWorkspacesResponseBody(name='body'),
}

async function getUserWorkspacesWithOptions(request: GetUserWorkspacesRequest, runtime: Util.RuntimeOptions): GetUserWorkspacesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUserWorkspaces',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUserWorkspaces(request: GetUserWorkspacesRequest): GetUserWorkspacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserWorkspacesWithOptions(request, runtime);
}

model GetWorkspaceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetWorkspaceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWorkspaceResponseBody(name='body'),
}

async function getWorkspaceWithOptions(request: GetWorkspaceRequest, runtime: Util.RuntimeOptions): GetWorkspaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetWorkspace',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getWorkspace(request: GetWorkspaceRequest): GetWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWorkspaceWithOptions(request, runtime);
}

model GetWorkspaceByExperimentIdRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetWorkspaceByExperimentIdResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetWorkspaceByExperimentIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWorkspaceByExperimentIdResponseBody(name='body'),
}

async function getWorkspaceByExperimentIdWithOptions(request: GetWorkspaceByExperimentIdRequest, runtime: Util.RuntimeOptions): GetWorkspaceByExperimentIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetWorkspaceByExperimentId',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getWorkspaceByExperimentId(request: GetWorkspaceByExperimentIdRequest): GetWorkspaceByExperimentIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWorkspaceByExperimentIdWithOptions(request, runtime);
}

model GetWorkspaceExperimentsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetWorkspaceExperimentsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetWorkspaceExperimentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWorkspaceExperimentsResponseBody(name='body'),
}

async function getWorkspaceExperimentsWithOptions(request: GetWorkspaceExperimentsRequest, runtime: Util.RuntimeOptions): GetWorkspaceExperimentsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetWorkspaceExperiments',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getWorkspaceExperiments(request: GetWorkspaceExperimentsRequest): GetWorkspaceExperimentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWorkspaceExperimentsWithOptions(request, runtime);
}

model GetWorkspaceMembersRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GetWorkspaceMembersResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetWorkspaceMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWorkspaceMembersResponseBody(name='body'),
}

async function getWorkspaceMembersWithOptions(request: GetWorkspaceMembersRequest, runtime: Util.RuntimeOptions): GetWorkspaceMembersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetWorkspaceMembers',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getWorkspaceMembers(request: GetWorkspaceMembersRequest): GetWorkspaceMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWorkspaceMembersWithOptions(request, runtime);
}

model GiveAwayCouponsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model GiveAwayCouponsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GiveAwayCouponsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GiveAwayCouponsResponseBody(name='body'),
}

async function giveAwayCouponsWithOptions(request: GiveAwayCouponsRequest, runtime: Util.RuntimeOptions): GiveAwayCouponsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GiveAwayCoupons',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function giveAwayCoupons(request: GiveAwayCouponsRequest): GiveAwayCouponsResponse {
  var runtime = new Util.RuntimeOptions{};
  return giveAwayCouponsWithOptions(request, runtime);
}

model HasCouponsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model HasCouponsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model HasCouponsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HasCouponsResponseBody(name='body'),
}

async function hasCouponsWithOptions(request: HasCouponsRequest, runtime: Util.RuntimeOptions): HasCouponsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HasCoupons',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function hasCoupons(request: HasCouponsRequest): HasCouponsResponse {
  var runtime = new Util.RuntimeOptions{};
  return hasCouponsWithOptions(request, runtime);
}

model InitExperimentByAppCodeRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model InitExperimentByAppCodeResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model InitExperimentByAppCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InitExperimentByAppCodeResponseBody(name='body'),
}

async function initExperimentByAppCodeWithOptions(request: InitExperimentByAppCodeRequest, runtime: Util.RuntimeOptions): InitExperimentByAppCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InitExperimentByAppCode',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function initExperimentByAppCode(request: InitExperimentByAppCodeRequest): InitExperimentByAppCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return initExperimentByAppCodeWithOptions(request, runtime);
}

model InitExperimentByExpertiseRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model InitExperimentByExpertiseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model InitExperimentByExpertiseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InitExperimentByExpertiseResponseBody(name='body'),
}

async function initExperimentByExpertiseWithOptions(request: InitExperimentByExpertiseRequest, runtime: Util.RuntimeOptions): InitExperimentByExpertiseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InitExperimentByExpertise',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function initExperimentByExpertise(request: InitExperimentByExpertiseRequest): InitExperimentByExpertiseResponse {
  var runtime = new Util.RuntimeOptions{};
  return initExperimentByExpertiseWithOptions(request, runtime);
}

model InitFlowByExpertiseRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model InitFlowByExpertiseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model InitFlowByExpertiseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InitFlowByExpertiseResponseBody(name='body'),
}

async function initFlowByExpertiseWithOptions(request: InitFlowByExpertiseRequest, runtime: Util.RuntimeOptions): InitFlowByExpertiseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InitFlowByExpertise',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function initFlowByExpertise(request: InitFlowByExpertiseRequest): InitFlowByExpertiseResponse {
  var runtime = new Util.RuntimeOptions{};
  return initFlowByExpertiseWithOptions(request, runtime);
}

model InitMiniFlowByAppCodeRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model InitMiniFlowByAppCodeResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model InitMiniFlowByAppCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InitMiniFlowByAppCodeResponseBody(name='body'),
}

async function initMiniFlowByAppCodeWithOptions(request: InitMiniFlowByAppCodeRequest, runtime: Util.RuntimeOptions): InitMiniFlowByAppCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InitMiniFlowByAppCode',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function initMiniFlowByAppCode(request: InitMiniFlowByAppCodeRequest): InitMiniFlowByAppCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return initMiniFlowByAppCodeWithOptions(request, runtime);
}

model InitMiniFlowByQuickSceneRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model InitMiniFlowByQuickSceneResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model InitMiniFlowByQuickSceneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InitMiniFlowByQuickSceneResponseBody(name='body'),
}

async function initMiniFlowByQuickSceneWithOptions(request: InitMiniFlowByQuickSceneRequest, runtime: Util.RuntimeOptions): InitMiniFlowByQuickSceneResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InitMiniFlowByQuickScene',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function initMiniFlowByQuickScene(request: InitMiniFlowByQuickSceneRequest): InitMiniFlowByQuickSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  return initMiniFlowByQuickSceneWithOptions(request, runtime);
}

model InstallPluginRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appGroupName?: string(name='AppGroupName'),
  appName?: string(name='AppName'),
  instanceId?: string(name='InstanceId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model InstallPluginResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model InstallPluginResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InstallPluginResponseBody(name='body'),
}

async function installPluginWithOptions(request: InstallPluginRequest, runtime: Util.RuntimeOptions): InstallPluginResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appGroupName)) {
    query['AppGroupName'] = request.appGroupName;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InstallPlugin',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function installPlugin(request: InstallPluginRequest): InstallPluginResponse {
  var runtime = new Util.RuntimeOptions{};
  return installPluginWithOptions(request, runtime);
}

model ListAhasAgentMetricsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  configurationId?: string(name='ConfigurationId'),
  endTime?: long(name='EndTime'),
  lang?: string(name='Lang'),
  metricNames?: string(name='MetricNames'),
  namespace?: string(name='Namespace'),
  startTime?: long(name='StartTime'),
}

model ListAhasAgentMetricsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      desc?: string(name='Desc'),
      items?: [ 
        {
          timestamp?: long(name='Timestamp'),
          value?: string(name='Value'),
        }
      ](name='Items'),
      metricName?: string(name='MetricName'),
      unit?: string(name='Unit'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListAhasAgentMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAhasAgentMetricsResponseBody(name='body'),
}

async function listAhasAgentMetricsWithOptions(request: ListAhasAgentMetricsRequest, runtime: Util.RuntimeOptions): ListAhasAgentMetricsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.configurationId)) {
    query['ConfigurationId'] = request.configurationId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.metricNames)) {
    query['MetricNames'] = request.metricNames;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAhasAgentMetrics',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAhasAgentMetrics(request: ListAhasAgentMetricsRequest): ListAhasAgentMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAhasAgentMetricsWithOptions(request, runtime);
}

model ListApplicationConfigurationsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model ListApplicationConfigurationsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListApplicationConfigurationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListApplicationConfigurationsResponseBody(name='body'),
}

async function listApplicationConfigurationsWithOptions(request: ListApplicationConfigurationsRequest, runtime: Util.RuntimeOptions): ListApplicationConfigurationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListApplicationConfigurations',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listApplicationConfigurations(request: ListApplicationConfigurationsRequest): ListApplicationConfigurationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listApplicationConfigurationsWithOptions(request, runtime);
}

model ListApplicationNameRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  applicationName?: string(name='ApplicationName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  viewId?: string(name='ViewId'),
}

model ListApplicationNameResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      currentPage?: int32(name='currentPage'),
      pageSize?: int32(name='pageSize'),
      result?: [ string ](name='result'),
      totalItem?: int32(name='totalItem'),
      totalPage?: int32(name='totalPage'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListApplicationNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListApplicationNameResponseBody(name='body'),
}

async function listApplicationNameWithOptions(request: ListApplicationNameRequest, runtime: Util.RuntimeOptions): ListApplicationNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.applicationName)) {
    query['ApplicationName'] = request.applicationName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.viewId)) {
    query['ViewId'] = request.viewId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListApplicationName',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listApplicationName(request: ListApplicationNameRequest): ListApplicationNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return listApplicationNameWithOptions(request, runtime);
}

model ListEcsMetricsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  endTime?: long(name='EndTime'),
  instanceIdList?: string(name='InstanceIdList'),
  keyword?: string(name='Keyword'),
  lang?: string(name='Lang'),
  metricName?: string(name='MetricName'),
  namespace?: string(name='Namespace'),
  startTime?: long(name='StartTime'),
}

model ListEcsMetricsResponseBody = {
  code?: string(name='Code'),
  data?: [  map[string]any ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListEcsMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEcsMetricsResponseBody(name='body'),
}

async function listEcsMetricsWithOptions(request: ListEcsMetricsRequest, runtime: Util.RuntimeOptions): ListEcsMetricsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceIdList)) {
    query['InstanceIdList'] = request.instanceIdList;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.metricName)) {
    query['MetricName'] = request.metricName;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEcsMetrics',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEcsMetrics(request: ListEcsMetricsRequest): ListEcsMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEcsMetricsWithOptions(request, runtime);
}

model ListEipMetricsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  endTime?: long(name='EndTime'),
  instanceIdList?: string(name='InstanceIdList'),
  keyword?: string(name='Keyword'),
  lang?: string(name='Lang'),
  metricName?: string(name='MetricName'),
  namespace?: string(name='Namespace'),
  startTime?: long(name='StartTime'),
}

model ListEipMetricsResponseBody = {
  code?: string(name='Code'),
  data?: [  map[string]any ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListEipMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEipMetricsResponseBody(name='body'),
}

async function listEipMetricsWithOptions(request: ListEipMetricsRequest, runtime: Util.RuntimeOptions): ListEipMetricsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceIdList)) {
    query['InstanceIdList'] = request.instanceIdList;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.metricName)) {
    query['MetricName'] = request.metricName;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEipMetrics',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEipMetrics(request: ListEipMetricsRequest): ListEipMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEipMetricsWithOptions(request, runtime);
}

model ListExperimentOperationLogsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model ListExperimentOperationLogsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListExperimentOperationLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListExperimentOperationLogsResponseBody(name='body'),
}

async function listExperimentOperationLogsWithOptions(request: ListExperimentOperationLogsRequest, runtime: Util.RuntimeOptions): ListExperimentOperationLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListExperimentOperationLogs',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listExperimentOperationLogs(request: ListExperimentOperationLogsRequest): ListExperimentOperationLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listExperimentOperationLogsWithOptions(request, runtime);
}

model ListExperimentTagsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model ListExperimentTagsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListExperimentTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListExperimentTagsResponseBody(name='body'),
}

async function listExperimentTagsWithOptions(request: ListExperimentTagsRequest, runtime: Util.RuntimeOptions): ListExperimentTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListExperimentTags',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listExperimentTags(request: ListExperimentTagsRequest): ListExperimentTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listExperimentTagsWithOptions(request, runtime);
}

model ListExperimentTasksByApplicationInVisionRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model ListExperimentTasksByApplicationInVisionResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListExperimentTasksByApplicationInVisionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListExperimentTasksByApplicationInVisionResponseBody(name='body'),
}

async function listExperimentTasksByApplicationInVisionWithOptions(request: ListExperimentTasksByApplicationInVisionRequest, runtime: Util.RuntimeOptions): ListExperimentTasksByApplicationInVisionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListExperimentTasksByApplicationInVision',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listExperimentTasksByApplicationInVision(request: ListExperimentTasksByApplicationInVisionRequest): ListExperimentTasksByApplicationInVisionResponse {
  var runtime = new Util.RuntimeOptions{};
  return listExperimentTasksByApplicationInVisionWithOptions(request, runtime);
}

model ListExperimentTasksByApplicationScopeInVisionRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model ListExperimentTasksByApplicationScopeInVisionResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListExperimentTasksByApplicationScopeInVisionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListExperimentTasksByApplicationScopeInVisionResponseBody(name='body'),
}

async function listExperimentTasksByApplicationScopeInVisionWithOptions(request: ListExperimentTasksByApplicationScopeInVisionRequest, runtime: Util.RuntimeOptions): ListExperimentTasksByApplicationScopeInVisionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListExperimentTasksByApplicationScopeInVision',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listExperimentTasksByApplicationScopeInVision(request: ListExperimentTasksByApplicationScopeInVisionRequest): ListExperimentTasksByApplicationScopeInVisionResponse {
  var runtime = new Util.RuntimeOptions{};
  return listExperimentTasksByApplicationScopeInVisionWithOptions(request, runtime);
}

model ListExpertiseTagsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model ListExpertiseTagsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListExpertiseTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListExpertiseTagsResponseBody(name='body'),
}

async function listExpertiseTagsWithOptions(request: ListExpertiseTagsRequest, runtime: Util.RuntimeOptions): ListExpertiseTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListExpertiseTags',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listExpertiseTags(request: ListExpertiseTagsRequest): ListExpertiseTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listExpertiseTagsWithOptions(request, runtime);
}

model ListGeneralWorkspaceExperimentTagsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model ListGeneralWorkspaceExperimentTagsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListGeneralWorkspaceExperimentTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGeneralWorkspaceExperimentTagsResponseBody(name='body'),
}

async function listGeneralWorkspaceExperimentTagsWithOptions(request: ListGeneralWorkspaceExperimentTagsRequest, runtime: Util.RuntimeOptions): ListGeneralWorkspaceExperimentTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListGeneralWorkspaceExperimentTags',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGeneralWorkspaceExperimentTags(request: ListGeneralWorkspaceExperimentTagsRequest): ListGeneralWorkspaceExperimentTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGeneralWorkspaceExperimentTagsWithOptions(request, runtime);
}

model ListGraphNodeExperimentTasksRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model ListGraphNodeExperimentTasksResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListGraphNodeExperimentTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGraphNodeExperimentTasksResponseBody(name='body'),
}

async function listGraphNodeExperimentTasksWithOptions(request: ListGraphNodeExperimentTasksRequest, runtime: Util.RuntimeOptions): ListGraphNodeExperimentTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListGraphNodeExperimentTasks',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGraphNodeExperimentTasks(request: ListGraphNodeExperimentTasksRequest): ListGraphNodeExperimentTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGraphNodeExperimentTasksWithOptions(request, runtime);
}

model ListInspectRuleRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  categoryId?: long(name='CategoryId'),
  hideExcludeFunction?: boolean(name='HideExcludeFunction'),
  hideNotEnableFunction?: boolean(name='HideNotEnableFunction'),
  lang?: string(name='Lang'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListInspectRuleResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    result?: [ 
      {
        categoryId?: long(name='CategoryId'),
        description?: string(name='Description'),
        enabled?: boolean(name='Enabled'),
        id?: long(name='Id'),
        matcher?: string(name='Matcher'),
        name?: string(name='Name'),
        scope?: string(name='Scope'),
        type?: string(name='Type'),
      }
    ](name='Result'),
    totalItem?: int32(name='TotalItem'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ListInspectRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInspectRuleResponseBody(name='body'),
}

async function listInspectRuleWithOptions(request: ListInspectRuleRequest, runtime: Util.RuntimeOptions): ListInspectRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.hideExcludeFunction)) {
    query['HideExcludeFunction'] = request.hideExcludeFunction;
  }
  if (!Util.isUnset(request.hideNotEnableFunction)) {
    query['HideNotEnableFunction'] = request.hideNotEnableFunction;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInspectRule',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInspectRule(request: ListInspectRuleRequest): ListInspectRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInspectRuleWithOptions(request, runtime);
}

model ListKubernetesClusterRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  clusterKey?: string(name='ClusterKey'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model ListKubernetesClusterResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    result?: [ 
      {
        clusterId?: string(name='ClusterId'),
        clusterName?: string(name='ClusterName'),
        connectTime?: long(name='ConnectTime'),
        onlineCount?: int32(name='OnlineCount'),
        pluginType?: string(name='PluginType'),
        upgrade?: boolean(name='Upgrade'),
        upgradeVersion?: string(name='UpgradeVersion'),
        version?: string(name='Version'),
        chaosTools?: [ string ](name='chaosTools'),
      }
    ](name='Result'),
    totalItem?: long(name='TotalItem'),
    totalPage?: int32(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListKubernetesClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListKubernetesClusterResponseBody(name='body'),
}

async function listKubernetesClusterWithOptions(request: ListKubernetesClusterRequest, runtime: Util.RuntimeOptions): ListKubernetesClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.clusterKey)) {
    query['ClusterKey'] = request.clusterKey;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListKubernetesCluster',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listKubernetesCluster(request: ListKubernetesClusterRequest): ListKubernetesClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return listKubernetesClusterWithOptions(request, runtime);
}

model ListLastInspectResultDetailRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  clusterId?: string(name='ClusterId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model ListLastInspectResultDetailResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      complete?: boolean(name='Complete'),
      list?: [ 
        {
          categoryId?: long(name='CategoryId'),
          description?: string(name='Description'),
          functionCode?: string(name='FunctionCode'),
          functionId?: long(name='FunctionId'),
          id?: long(name='Id'),
          inspectId?: long(name='InspectId'),
          inspectStatus?: string(name='InspectStatus'),
          lastCheckTime?: string(name='LastCheckTime'),
          level?: string(name='Level'),
          name?: string(name='Name'),
          runStatus?: string(name='RunStatus'),
          score?: string(name='Score'),
          success?: string(name='Success'),
        }
      ](name='List'),
      schedule?: int32(name='Schedule'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListLastInspectResultDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLastInspectResultDetailResponseBody(name='body'),
}

async function listLastInspectResultDetailWithOptions(request: ListLastInspectResultDetailRequest, runtime: Util.RuntimeOptions): ListLastInspectResultDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLastInspectResultDetail',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listLastInspectResultDetail(request: ListLastInspectResultDetailRequest): ListLastInspectResultDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLastInspectResultDetailWithOptions(request, runtime);
}

model ListLastScheduledInspectResultDetailRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  clusterId?: string(name='ClusterId'),
  clusterName?: string(name='ClusterName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model ListLastScheduledInspectResultDetailResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      complete?: boolean(name='Complete'),
      list?: [ 
        {
          categoryId?: long(name='CategoryId'),
          description?: string(name='Description'),
          functionCode?: string(name='FunctionCode'),
          functionId?: long(name='FunctionId'),
          id?: long(name='Id'),
          inspectId?: long(name='InspectId'),
          inspectStatus?: string(name='InspectStatus'),
          lastCheckTime?: string(name='LastCheckTime'),
          level?: string(name='Level'),
          name?: string(name='Name'),
          runStatus?: string(name='RunStatus'),
          score?: string(name='Score'),
          success?: string(name='Success'),
        }
      ](name='List'),
      schedule?: int32(name='Schedule'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListLastScheduledInspectResultDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLastScheduledInspectResultDetailResponseBody(name='body'),
}

async function listLastScheduledInspectResultDetailWithOptions(request: ListLastScheduledInspectResultDetailRequest, runtime: Util.RuntimeOptions): ListLastScheduledInspectResultDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLastScheduledInspectResultDetail',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listLastScheduledInspectResultDetail(request: ListLastScheduledInspectResultDetailRequest): ListLastScheduledInspectResultDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLastScheduledInspectResultDetailWithOptions(request, runtime);
}

model ListMetricsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  endTime?: long(name='EndTime'),
  group?: boolean(name='Group'),
  instanceIds?: string(name='InstanceIds'),
  instanceType?: string(name='InstanceType'),
  keyword?: string(name='Keyword'),
  lang?: string(name='Lang'),
  metricNames?: string(name='MetricNames'),
  namespace?: string(name='Namespace'),
  startTime?: long(name='StartTime'),
}

model ListMetricsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      desc?: string(name='desc'),
      items?: [ 
        {
          average?: string(name='average'),
          instanceId?: string(name='instanceId'),
          maximum?: string(name='maximum'),
          minimum?: string(name='minimum'),
          timestamp?: long(name='timestamp'),
        }
      ](name='items'),
      metricName?: string(name='metricName'),
      unit?: string(name='unit'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMetricsResponseBody(name='body'),
}

async function listMetricsWithOptions(request: ListMetricsRequest, runtime: Util.RuntimeOptions): ListMetricsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.metricNames)) {
    query['MetricNames'] = request.metricNames;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMetrics',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMetrics(request: ListMetricsRequest): ListMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMetricsWithOptions(request, runtime);
}

model ListPermanentTopologyResourcessRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  product?: string(name='Product'),
  queryParamValue?: string(name='QueryParamValue'),
  regionId?: string(name='RegionId'),
}

model ListPermanentTopologyResourcessResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      currentPage?: int32(name='CurrentPage'),
      pageSize?: int32(name='PageSize'),
      result?: [ 
        {
          effectHeader?: [ 
            {
              key?: string(name='Key'),
              name?: string(name='Name'),
            }
          ](name='EffectHeader'),
          effectRows?: [  map[string]any ](name='EffectRows'),
        }
      ](name='Result'),
      totalItem?: int32(name='TotalItem'),
      totalPage?: int32(name='TotalPage'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListPermanentTopologyResourcessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPermanentTopologyResourcessResponseBody(name='body'),
}

async function listPermanentTopologyResourcessWithOptions(request: ListPermanentTopologyResourcessRequest, runtime: Util.RuntimeOptions): ListPermanentTopologyResourcessResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.product)) {
    query['Product'] = request.product;
  }
  if (!Util.isUnset(request.queryParamValue)) {
    query['QueryParamValue'] = request.queryParamValue;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPermanentTopologyResourcess',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPermanentTopologyResourcess(request: ListPermanentTopologyResourcessRequest): ListPermanentTopologyResourcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPermanentTopologyResourcessWithOptions(request, runtime);
}

model ListPtsPerfHistoryDataRequest {
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  lang?: string(name='Lang'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  sourceId?: string(name='SourceId'),
}

model ListPtsPerfHistoryDataResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      currentPage?: int32(name='CurrentPage'),
      pageSize?: int32(name='PageSize'),
      result?: [ 
        {
          dataIndicatorDesc?: string(name='DataIndicatorDesc'),
          dataIndicatorType?: string(name='DataIndicatorType'),
          dataValue?: string(name='DataValue'),
          instanceType?: string(name='InstanceType'),
          objectName?: string(name='ObjectName'),
          timeStamp?: long(name='TimeStamp'),
        }
      ](name='Result'),
      totalItem?: long(name='TotalItem'),
      totalPage?: int32(name='TotalPage'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListPtsPerfHistoryDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPtsPerfHistoryDataResponseBody(name='body'),
}

async function listPtsPerfHistoryDataWithOptions(request: ListPtsPerfHistoryDataRequest, runtime: Util.RuntimeOptions): ListPtsPerfHistoryDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sourceId)) {
    query['SourceId'] = request.sourceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPtsPerfHistoryData',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPtsPerfHistoryData(request: ListPtsPerfHistoryDataRequest): ListPtsPerfHistoryDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPtsPerfHistoryDataWithOptions(request, runtime);
}

model ListPtsPerfLatestDataRequest {
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  lang?: string(name='Lang'),
  sourceId?: string(name='SourceId'),
}

model ListPtsPerfLatestDataResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      dataIndicatorDesc?: string(name='DataIndicatorDesc'),
      dataIndicatorType?: string(name='DataIndicatorType'),
      dataValue?: string(name='DataValue'),
      instanceType?: string(name='InstanceType'),
      objectName?: string(name='ObjectName'),
      timeStamp?: long(name='TimeStamp'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListPtsPerfLatestDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPtsPerfLatestDataResponseBody(name='body'),
}

async function listPtsPerfLatestDataWithOptions(request: ListPtsPerfLatestDataRequest, runtime: Util.RuntimeOptions): ListPtsPerfLatestDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceId)) {
    query['SourceId'] = request.sourceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPtsPerfLatestData',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPtsPerfLatestData(request: ListPtsPerfLatestDataRequest): ListPtsPerfLatestDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPtsPerfLatestDataWithOptions(request, runtime);
}

model ListPtsPerfMonitorStatusReportDataRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  sourceId?: string(name='SourceId'),
}

model ListPtsPerfMonitorStatusReportDataResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      items?: [ string ](name='Items'),
      objectId?: string(name='ObjectId'),
      ptsInstanceItemStatuss?: [ 
        {
          items?: [ string ](name='Items'),
          objectId?: string(name='ObjectId'),
          status?: string(name='Status'),
          type?: string(name='Type'),
        }
      ](name='PtsInstanceItemStatuss'),
      status?: string(name='Status'),
      type?: string(name='Type'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListPtsPerfMonitorStatusReportDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPtsPerfMonitorStatusReportDataResponseBody(name='body'),
}

async function listPtsPerfMonitorStatusReportDataWithOptions(request: ListPtsPerfMonitorStatusReportDataRequest, runtime: Util.RuntimeOptions): ListPtsPerfMonitorStatusReportDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.sourceId)) {
    query['SourceId'] = request.sourceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPtsPerfMonitorStatusReportData',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPtsPerfMonitorStatusReportData(request: ListPtsPerfMonitorStatusReportDataRequest): ListPtsPerfMonitorStatusReportDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPtsPerfMonitorStatusReportDataWithOptions(request, runtime);
}

model ListPtsPerfRealDataRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  sourceId?: string(name='SourceId'),
}

model ListPtsPerfRealDataResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      items?: [ string ](name='Items'),
      objectId?: string(name='ObjectId'),
      ptsInstanceItemStatuss?: [ 
        {
          items?: [ string ](name='Items'),
          objectId?: string(name='ObjectId'),
          status?: string(name='Status'),
          type?: string(name='Type'),
        }
      ](name='PtsInstanceItemStatuss'),
      status?: string(name='Status'),
      type?: string(name='Type'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListPtsPerfRealDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPtsPerfRealDataResponseBody(name='body'),
}

async function listPtsPerfRealDataWithOptions(request: ListPtsPerfRealDataRequest, runtime: Util.RuntimeOptions): ListPtsPerfRealDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.sourceId)) {
    query['SourceId'] = request.sourceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPtsPerfRealData',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPtsPerfRealData(request: ListPtsPerfRealDataRequest): ListPtsPerfRealDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPtsPerfRealDataWithOptions(request, runtime);
}

model ListRdsMetricsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  endTime?: long(name='EndTime'),
  instanceIdList?: string(name='InstanceIdList'),
  keyword?: string(name='Keyword'),
  lang?: string(name='Lang'),
  metricName?: string(name='MetricName'),
  namespace?: string(name='Namespace'),
  startTime?: long(name='StartTime'),
}

model ListRdsMetricsResponseBody = {
  code?: string(name='Code'),
  data?: [  map[string]any ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListRdsMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRdsMetricsResponseBody(name='body'),
}

async function listRdsMetricsWithOptions(request: ListRdsMetricsRequest, runtime: Util.RuntimeOptions): ListRdsMetricsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceIdList)) {
    query['InstanceIdList'] = request.instanceIdList;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.metricName)) {
    query['MetricName'] = request.metricName;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRdsMetrics',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRdsMetrics(request: ListRdsMetricsRequest): ListRdsMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRdsMetricsWithOptions(request, runtime);
}

model ListRedisMetricsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  endTime?: long(name='EndTime'),
  instanceIdList?: string(name='InstanceIdList'),
  keyword?: string(name='Keyword'),
  lang?: string(name='Lang'),
  metricName?: string(name='MetricName'),
  namespace?: string(name='Namespace'),
  startTime?: long(name='StartTime'),
}

model ListRedisMetricsResponseBody = {
  code?: string(name='Code'),
  data?: [  map[string]any ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListRedisMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRedisMetricsResponseBody(name='body'),
}

async function listRedisMetricsWithOptions(request: ListRedisMetricsRequest, runtime: Util.RuntimeOptions): ListRedisMetricsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceIdList)) {
    query['InstanceIdList'] = request.instanceIdList;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.metricName)) {
    query['MetricName'] = request.metricName;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRedisMetrics',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRedisMetrics(request: ListRedisMetricsRequest): ListRedisMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRedisMetricsWithOptions(request, runtime);
}

model ListRevealApplicationFilterRequest {
  lang?: string(name='Lang'),
  viewId?: string(name='ViewId'),
}

model ListRevealApplicationFilterResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      code?: string(name='code'),
      explanation?: string(name='explanation'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListRevealApplicationFilterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRevealApplicationFilterResponseBody(name='body'),
}

async function listRevealApplicationFilterWithOptions(request: ListRevealApplicationFilterRequest, runtime: Util.RuntimeOptions): ListRevealApplicationFilterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.viewId)) {
    query['ViewId'] = request.viewId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRevealApplicationFilter',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRevealApplicationFilter(request: ListRevealApplicationFilterRequest): ListRevealApplicationFilterResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRevealApplicationFilterWithOptions(request, runtime);
}

model ListSentinelAllDefaultCircuitBreakerRuleRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  model?: long(name='Model'),
  namespace?: string(name='Namespace'),
}

model ListSentinelAllDefaultCircuitBreakerRuleResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appName?: string(name='appName'),
      count?: float(name='count'),
      createTimestamp?: long(name='createTimestamp'),
      enable?: boolean(name='enable'),
      grade?: int32(name='grade'),
      halfOpenBaseAmountPerStep?: int32(name='halfOpenBaseAmountPerStep'),
      halfOpenRecoveryStepNum?: int32(name='halfOpenRecoveryStepNum'),
      id?: long(name='id'),
      limitApp?: string(name='limitApp'),
      minRequestAmount?: int32(name='minRequestAmount'),
      modifiedTimestamp?: long(name='modifiedTimestamp'),
      namespace?: string(name='namespace'),
      resource?: string(name='resource'),
      slowRatioThreshold?: float(name='slowRatioThreshold'),
      statIntervalMs?: int32(name='statIntervalMs'),
      timeWindow?: int32(name='timeWindow'),
      userId?: string(name='userId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListSentinelAllDefaultCircuitBreakerRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSentinelAllDefaultCircuitBreakerRuleResponseBody(name='body'),
}

async function listSentinelAllDefaultCircuitBreakerRuleWithOptions(request: ListSentinelAllDefaultCircuitBreakerRuleRequest, runtime: Util.RuntimeOptions): ListSentinelAllDefaultCircuitBreakerRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.model)) {
    query['Model'] = request.model;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSentinelAllDefaultCircuitBreakerRule',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSentinelAllDefaultCircuitBreakerRule(request: ListSentinelAllDefaultCircuitBreakerRuleRequest): ListSentinelAllDefaultCircuitBreakerRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSentinelAllDefaultCircuitBreakerRuleWithOptions(request, runtime);
}

model ListSentinelAllParamDegradeRuleRequest {
  appName?: string(name='AppName'),
  model?: long(name='Model'),
  namespace?: string(name='Namespace'),
  tags?: string(name='Tags'),
}

model ListSentinelAllParamDegradeRuleResponseBody = {
  content?: {
    code?: string(name='Code', description='请求响应码，200 为success'),
    data?: [ 
      {
        appGroup?: string(name='AppGroup'),
        appName?: string(name='AppName'),
        count?: double(name='Count'),
        enable?: boolean(name='Enable'),
        fallbackObject?: string(name='FallbackObject'),
        grade?: int32(name='Grade'),
        halfOpenBaseAmountPerStep?: int32(name='HalfOpenBaseAmountPerStep'),
        halfOpenRecoveryStepNum?: int32(name='HalfOpenRecoveryStepNum'),
        id?: long(name='Id'),
        isDeleted?: boolean(name='IsDeleted'),
        limitApp?: string(name='LimitApp'),
        minRequestAmount?: int32(name='MinRequestAmount'),
        model?: long(name='Model'),
        namespace?: string(name='Namespace'),
        paramKey?: string(name='ParamKey'),
        resource?: string(name='Resource'),
        statIntervalMs?: int32(name='StatIntervalMs'),
        tags?: [ string ](name='Tags'),
        timeWindow?: int32(name='TimeWindow'),
        userId?: string(name='UserId'),
      }
    ](name='Data', description='返回的数据对象'),
    message?: string(name='Message', description='返回的错误信息'),
    requestId?: string(name='RequestId', description='请求ID'),
    success?: boolean(name='Success', description='是否成功标识'),
  }(name='Content', description='RestResponse<List<ParamDegradeRuleDTO>>'),
  first?: boolean(name='First'),
  last?: boolean(name='Last'),
}

model ListSentinelAllParamDegradeRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSentinelAllParamDegradeRuleResponseBody(name='body'),
}

async function listSentinelAllParamDegradeRuleWithOptions(request: ListSentinelAllParamDegradeRuleRequest, runtime: Util.RuntimeOptions): ListSentinelAllParamDegradeRuleResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.model)) {
    body['Model'] = request.model;
  }
  if (!Util.isUnset(request.namespace)) {
    body['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.tags)) {
    body['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListSentinelAllParamDegradeRule',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSentinelAllParamDegradeRule(request: ListSentinelAllParamDegradeRuleRequest): ListSentinelAllParamDegradeRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSentinelAllParamDegradeRuleWithOptions(request, runtime);
}

model ListSentinelBlockFallbackDefinitionsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  classificationSet?: string(name='ClassificationSet'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  sourceType?: string(name='SourceType'),
}

model ListSentinelBlockFallbackDefinitionsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appName?: string(name='AppName'),
      fallbackBehavior?: map[string]any(name='FallbackBehavior'),
      id?: long(name='Id'),
      name?: string(name='Name'),
      namespace?: string(name='Namespace'),
      resourceClassification?: int32(name='ResourceClassification'),
      targetMap?: map[string]any(name='TargetMap'),
      userId?: string(name='UserId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListSentinelBlockFallbackDefinitionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSentinelBlockFallbackDefinitionsResponseBody(name='body'),
}

async function listSentinelBlockFallbackDefinitionsWithOptions(request: ListSentinelBlockFallbackDefinitionsRequest, runtime: Util.RuntimeOptions): ListSentinelBlockFallbackDefinitionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.classificationSet)) {
    query['ClassificationSet'] = request.classificationSet;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSentinelBlockFallbackDefinitions',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSentinelBlockFallbackDefinitions(request: ListSentinelBlockFallbackDefinitionsRequest): ListSentinelBlockFallbackDefinitionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSentinelBlockFallbackDefinitionsWithOptions(request, runtime);
}

model ListSentinelMeshEnvoyRlsRulesOfGroupRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  groupId?: long(name='GroupId'),
  lang?: string(name='Lang'),
}

model ListSentinelMeshEnvoyRlsRulesOfGroupResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      enabled?: boolean(name='Enabled'),
      groupId?: long(name='GroupId'),
      id?: long(name='Id'),
      name?: string(name='Name'),
      resourceDescriptors?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='ResourceDescriptors'),
      statInterval?: int32(name='StatInterval'),
      threshold?: long(name='Threshold'),
      timeUnit?: int32(name='TimeUnit'),
      userId?: string(name='UserId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListSentinelMeshEnvoyRlsRulesOfGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSentinelMeshEnvoyRlsRulesOfGroupResponseBody(name='body'),
}

async function listSentinelMeshEnvoyRlsRulesOfGroupWithOptions(request: ListSentinelMeshEnvoyRlsRulesOfGroupRequest, runtime: Util.RuntimeOptions): ListSentinelMeshEnvoyRlsRulesOfGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSentinelMeshEnvoyRlsRulesOfGroup',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSentinelMeshEnvoyRlsRulesOfGroup(request: ListSentinelMeshEnvoyRlsRulesOfGroupRequest): ListSentinelMeshEnvoyRlsRulesOfGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSentinelMeshEnvoyRlsRulesOfGroupWithOptions(request, runtime);
}

model ListSentinelMeshFlowGroupsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model ListSentinelMeshFlowGroupsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      envoyRlsDomain?: string(name='EnvoyRlsDomain'),
      id?: long(name='Id'),
      maxEstimatedQps?: long(name='MaxEstimatedQps'),
      meshType?: int32(name='MeshType'),
      name?: string(name='Name'),
      namespace?: string(name='Namespace'),
      serverId?: string(name='ServerId'),
      userId?: string(name='UserId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListSentinelMeshFlowGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSentinelMeshFlowGroupsResponseBody(name='body'),
}

async function listSentinelMeshFlowGroupsWithOptions(request: ListSentinelMeshFlowGroupsRequest, runtime: Util.RuntimeOptions): ListSentinelMeshFlowGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSentinelMeshFlowGroups',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSentinelMeshFlowGroups(request: ListSentinelMeshFlowGroupsRequest): ListSentinelMeshFlowGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSentinelMeshFlowGroupsWithOptions(request, runtime);
}

model ListSlbMetricsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  endTime?: long(name='EndTime'),
  instanceIdList?: string(name='InstanceIdList'),
  keyword?: string(name='Keyword'),
  lang?: string(name='Lang'),
  metricName?: string(name='MetricName'),
  namespace?: string(name='Namespace'),
  port?: string(name='Port'),
  startTime?: long(name='StartTime'),
  vip?: string(name='Vip'),
}

model ListSlbMetricsResponseBody = {
  code?: string(name='Code'),
  data?: [  map[string]any ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListSlbMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSlbMetricsResponseBody(name='body'),
}

async function listSlbMetricsWithOptions(request: ListSlbMetricsRequest, runtime: Util.RuntimeOptions): ListSlbMetricsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceIdList)) {
    query['InstanceIdList'] = request.instanceIdList;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.metricName)) {
    query['MetricName'] = request.metricName;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.vip)) {
    query['Vip'] = request.vip;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSlbMetrics',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSlbMetrics(request: ListSlbMetricsRequest): ListSlbMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSlbMetricsWithOptions(request, runtime);
}

model ListSubUsersRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model ListSubUsersResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      comments?: string(name='comments'),
      displayName?: string(name='displayName'),
      email?: string(name='email'),
      mobilePhone?: string(name='mobilePhone'),
      userId?: string(name='userId'),
      userName?: string(name='userName'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListSubUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSubUsersResponseBody(name='body'),
}

async function listSubUsersWithOptions(request: ListSubUsersRequest, runtime: Util.RuntimeOptions): ListSubUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSubUsers',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSubUsers(request: ListSubUsersRequest): ListSubUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSubUsersWithOptions(request, runtime);
}

model ListTopologyGroupRiskValuesRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  requestTimestamp?: long(name='RequestTimestamp'),
  size?: long(name='Size'),
  type?: string(name='Type'),
  viewId?: string(name='ViewId'),
  zone?: string(name='Zone'),
}

model ListTopologyGroupRiskValuesResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      riskCount?: int32(name='riskCount'),
      riskList?: [ 
        {
          items?: [ string ](name='items'),
        }
      ](name='riskList'),
      riskNodeCount?: int32(name='riskNodeCount'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListTopologyGroupRiskValuesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTopologyGroupRiskValuesResponseBody(name='body'),
}

async function listTopologyGroupRiskValuesWithOptions(request: ListTopologyGroupRiskValuesRequest, runtime: Util.RuntimeOptions): ListTopologyGroupRiskValuesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.requestTimestamp)) {
    query['RequestTimestamp'] = request.requestTimestamp;
  }
  if (!Util.isUnset(request.size)) {
    query['Size'] = request.size;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.viewId)) {
    query['ViewId'] = request.viewId;
  }
  if (!Util.isUnset(request.zone)) {
    query['Zone'] = request.zone;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTopologyGroupRiskValues',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTopologyGroupRiskValues(request: ListTopologyGroupRiskValuesRequest): ListTopologyGroupRiskValuesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTopologyGroupRiskValuesWithOptions(request, runtime);
}

model ListTopologyRiskValuesRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  configurationId?: string(name='ConfigurationId'),
  lang?: string(name='Lang'),
  requestTimestamp?: long(name='RequestTimestamp'),
  size?: long(name='Size'),
  viewId?: string(name='ViewId'),
}

model ListTopologyRiskValuesResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      riskCount?: int32(name='RiskCount'),
      riskList?: [ 
        {
          items?: [ string ](name='Items'),
        }
      ](name='RiskList'),
      riskNodeCount?: int32(name='RiskNodeCount'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListTopologyRiskValuesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTopologyRiskValuesResponseBody(name='body'),
}

async function listTopologyRiskValuesWithOptions(request: ListTopologyRiskValuesRequest, runtime: Util.RuntimeOptions): ListTopologyRiskValuesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.configurationId)) {
    query['ConfigurationId'] = request.configurationId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.requestTimestamp)) {
    query['RequestTimestamp'] = request.requestTimestamp;
  }
  if (!Util.isUnset(request.size)) {
    query['Size'] = request.size;
  }
  if (!Util.isUnset(request.viewId)) {
    query['ViewId'] = request.viewId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTopologyRiskValues',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTopologyRiskValues(request: ListTopologyRiskValuesRequest): ListTopologyRiskValuesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTopologyRiskValuesWithOptions(request, runtime);
}

model ListTopologyViewRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  source?: string(name='Source'),
}

model ListTopologyViewResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      atomicViewId?: string(name='atomicViewId'),
      category?: string(name='category'),
      deep?: string(name='deep'),
      defaultGroupView?: boolean(name='defaultGroupView'),
      defaultView?: boolean(name='defaultView'),
      description?: string(name='description'),
      environment?: string(name='environment'),
      groupViewId?: string(name='groupViewId'),
      viewId?: string(name='viewId'),
      viewName?: string(name='viewName'),
      visibility?: boolean(name='visibility'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListTopologyViewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTopologyViewResponseBody(name='body'),
}

async function listTopologyViewWithOptions(request: ListTopologyViewRequest, runtime: Util.RuntimeOptions): ListTopologyViewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTopologyView',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTopologyView(request: ListTopologyViewRequest): ListTopologyViewResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTopologyViewWithOptions(request, runtime);
}

model ListWorkspaceMemberRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model ListWorkspaceMemberResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListWorkspaceMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListWorkspaceMemberResponseBody(name='body'),
}

async function listWorkspaceMemberWithOptions(request: ListWorkspaceMemberRequest, runtime: Util.RuntimeOptions): ListWorkspaceMemberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWorkspaceMember',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listWorkspaceMember(request: ListWorkspaceMemberRequest): ListWorkspaceMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWorkspaceMemberWithOptions(request, runtime);
}

model MarkAttackTaskStopFinishRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  taskId?: string(name='TaskId'),
}

model MarkAttackTaskStopFinishResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model MarkAttackTaskStopFinishResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MarkAttackTaskStopFinishResponseBody(name='body'),
}

async function markAttackTaskStopFinishWithOptions(request: MarkAttackTaskStopFinishRequest, runtime: Util.RuntimeOptions): MarkAttackTaskStopFinishResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MarkAttackTaskStopFinish',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function markAttackTaskStopFinish(request: MarkAttackTaskStopFinishRequest): MarkAttackTaskStopFinishResponse {
  var runtime = new Util.RuntimeOptions{};
  return markAttackTaskStopFinishWithOptions(request, runtime);
}

model NodeExceptionStatisticsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  node?: string(name='Node'),
  startTime?: long(name='StartTime'),
}

model NodeExceptionStatisticsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      count?: int32(name='Count'),
      timestamp?: long(name='Timestamp'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model NodeExceptionStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: NodeExceptionStatisticsResponseBody(name='body'),
}

async function nodeExceptionStatisticsWithOptions(request: NodeExceptionStatisticsRequest, runtime: Util.RuntimeOptions): NodeExceptionStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.node)) {
    query['Node'] = request.node;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'NodeExceptionStatistics',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function nodeExceptionStatistics(request: NodeExceptionStatisticsRequest): NodeExceptionStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return nodeExceptionStatisticsWithOptions(request, runtime);
}

model NodeExceptionsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  node?: string(name='Node'),
}

model NodeExceptionsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      detail?: string(name='Detail'),
      exception?: string(name='Exception'),
      num?: int32(name='Num'),
      timestamp?: long(name='Timestamp'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model NodeExceptionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: NodeExceptionsResponseBody(name='body'),
}

async function nodeExceptionsWithOptions(request: NodeExceptionsRequest, runtime: Util.RuntimeOptions): NodeExceptionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.node)) {
    query['Node'] = request.node;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'NodeExceptions',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function nodeExceptions(request: NodeExceptionsRequest): NodeExceptionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return nodeExceptionsWithOptions(request, runtime);
}

model NodeExceptionsWithTimeRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  node?: string(name='Node'),
  time?: long(name='Time'),
}

model NodeExceptionsWithTimeResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      detail?: string(name='Detail'),
      exception?: string(name='Exception'),
      num?: int32(name='Num'),
      timestamp?: long(name='Timestamp'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model NodeExceptionsWithTimeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: NodeExceptionsWithTimeResponseBody(name='body'),
}

async function nodeExceptionsWithTimeWithOptions(request: NodeExceptionsWithTimeRequest, runtime: Util.RuntimeOptions): NodeExceptionsWithTimeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.node)) {
    query['Node'] = request.node;
  }
  if (!Util.isUnset(request.time)) {
    query['Time'] = request.time;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'NodeExceptionsWithTime',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function nodeExceptionsWithTime(request: NodeExceptionsWithTimeRequest): NodeExceptionsWithTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return nodeExceptionsWithTimeWithOptions(request, runtime);
}

model OpenAhasCommercialRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  buyerId?: long(name='BuyerId'),
  isInternational?: boolean(name='IsInternational'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  openType?: int32(name='OpenType'),
  product?: string(name='Product'),
}

model OpenAhasCommercialResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model OpenAhasCommercialResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenAhasCommercialResponseBody(name='body'),
}

async function openAhasCommercialWithOptions(request: OpenAhasCommercialRequest, runtime: Util.RuntimeOptions): OpenAhasCommercialResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.buyerId)) {
    query['BuyerId'] = request.buyerId;
  }
  if (!Util.isUnset(request.isInternational)) {
    query['IsInternational'] = request.isInternational;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.openType)) {
    query['OpenType'] = request.openType;
  }
  if (!Util.isUnset(request.product)) {
    query['Product'] = request.product;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenAhasCommercial',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openAhasCommercial(request: OpenAhasCommercialRequest): OpenAhasCommercialResponse {
  var runtime = new Util.RuntimeOptions{};
  return openAhasCommercialWithOptions(request, runtime);
}

model OperateAttackSuiteRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  attackSuiteId?: string(name='AttackSuiteId'),
  namespace?: string(name='Namespace'),
  ops?: string(name='Ops'),
}

model OperateAttackSuiteResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model OperateAttackSuiteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateAttackSuiteResponseBody(name='body'),
}

async function operateAttackSuiteWithOptions(request: OperateAttackSuiteRequest, runtime: Util.RuntimeOptions): OperateAttackSuiteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.attackSuiteId)) {
    query['AttackSuiteId'] = request.attackSuiteId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.ops)) {
    query['Ops'] = request.ops;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateAttackSuite',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateAttackSuite(request: OperateAttackSuiteRequest): OperateAttackSuiteResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateAttackSuiteWithOptions(request, runtime);
}

model OverViewOfAppsWithRelationshipRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model OverViewOfAppsWithRelationshipResponseBody = {
  code?: string(name='Code'),
  data?: {
    appNames?: [ string ](name='AppNames'),
    apps?: [ 
      {
        appName?: string(name='AppName'),
        groups?: [ string ](name='Groups'),
        metrics?: map[string]any(name='Metrics'),
        status?: string(name='Status'),
      }
    ](name='Apps'),
    pageIndex?: int32(name='PageIndex'),
    pageSize?: int32(name='PageSize'),
    relations?: [ 
      {
        from?: string(name='From'),
        to?: string(name='To'),
      }
    ](name='Relations'),
    totalCount?: long(name='TotalCount'),
    totalPage?: long(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model OverViewOfAppsWithRelationshipResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OverViewOfAppsWithRelationshipResponseBody(name='body'),
}

async function overViewOfAppsWithRelationshipWithOptions(request: OverViewOfAppsWithRelationshipRequest, runtime: Util.RuntimeOptions): OverViewOfAppsWithRelationshipResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OverViewOfAppsWithRelationship',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function overViewOfAppsWithRelationship(request: OverViewOfAppsWithRelationshipRequest): OverViewOfAppsWithRelationshipResponse {
  var runtime = new Util.RuntimeOptions{};
  return overViewOfAppsWithRelationshipWithOptions(request, runtime);
}

model OverViewOfAppsWithoutRelationshipRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model OverViewOfAppsWithoutRelationshipResponseBody = {
  code?: string(name='Code'),
  data?: {
    appNames?: [ string ](name='AppNames'),
    apps?: [ 
      {
        appName?: string(name='AppName'),
        groups?: [ string ](name='Groups'),
        metrics?: map[string]any(name='Metrics'),
        status?: string(name='Status'),
      }
    ](name='Apps'),
    pageIndex?: int32(name='PageIndex'),
    pageSize?: int32(name='PageSize'),
    relations?: [ 
      {
        from?: string(name='From'),
        to?: string(name='To'),
      }
    ](name='Relations'),
    totalCount?: long(name='TotalCount'),
    totalPage?: long(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model OverViewOfAppsWithoutRelationshipResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OverViewOfAppsWithoutRelationshipResponseBody(name='body'),
}

async function overViewOfAppsWithoutRelationshipWithOptions(request: OverViewOfAppsWithoutRelationshipRequest, runtime: Util.RuntimeOptions): OverViewOfAppsWithoutRelationshipResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OverViewOfAppsWithoutRelationship',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function overViewOfAppsWithoutRelationship(request: OverViewOfAppsWithoutRelationshipRequest): OverViewOfAppsWithoutRelationshipResponse {
  var runtime = new Util.RuntimeOptions{};
  return overViewOfAppsWithoutRelationshipWithOptions(request, runtime);
}

model PageableGeneralExperimentsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model PageableGeneralExperimentsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PageableGeneralExperimentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PageableGeneralExperimentsResponseBody(name='body'),
}

async function pageableGeneralExperimentsWithOptions(request: PageableGeneralExperimentsRequest, runtime: Util.RuntimeOptions): PageableGeneralExperimentsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PageableGeneralExperiments',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pageableGeneralExperiments(request: PageableGeneralExperimentsRequest): PageableGeneralExperimentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return pageableGeneralExperimentsWithOptions(request, runtime);
}

model PageableQueryExperimentScopesRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model PageableQueryExperimentScopesResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PageableQueryExperimentScopesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PageableQueryExperimentScopesResponseBody(name='body'),
}

async function pageableQueryExperimentScopesWithOptions(request: PageableQueryExperimentScopesRequest, runtime: Util.RuntimeOptions): PageableQueryExperimentScopesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PageableQueryExperimentScopes',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pageableQueryExperimentScopes(request: PageableQueryExperimentScopesRequest): PageableQueryExperimentScopesResponse {
  var runtime = new Util.RuntimeOptions{};
  return pageableQueryExperimentScopesWithOptions(request, runtime);
}

model PageableQueryExperimentTaskByScopeRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model PageableQueryExperimentTaskByScopeResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PageableQueryExperimentTaskByScopeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PageableQueryExperimentTaskByScopeResponseBody(name='body'),
}

async function pageableQueryExperimentTaskByScopeWithOptions(request: PageableQueryExperimentTaskByScopeRequest, runtime: Util.RuntimeOptions): PageableQueryExperimentTaskByScopeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PageableQueryExperimentTaskByScope',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pageableQueryExperimentTaskByScope(request: PageableQueryExperimentTaskByScopeRequest): PageableQueryExperimentTaskByScopeResponse {
  var runtime = new Util.RuntimeOptions{};
  return pageableQueryExperimentTaskByScopeWithOptions(request, runtime);
}

model PageableQueryExpertiseRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model PageableQueryExpertiseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PageableQueryExpertiseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PageableQueryExpertiseResponseBody(name='body'),
}

async function pageableQueryExpertiseWithOptions(request: PageableQueryExpertiseRequest, runtime: Util.RuntimeOptions): PageableQueryExpertiseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PageableQueryExpertise',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pageableQueryExpertise(request: PageableQueryExpertiseRequest): PageableQueryExpertiseResponse {
  var runtime = new Util.RuntimeOptions{};
  return pageableQueryExpertiseWithOptions(request, runtime);
}

model PageableQueryUserExperimentsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model PageableQueryUserExperimentsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PageableQueryUserExperimentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PageableQueryUserExperimentsResponseBody(name='body'),
}

async function pageableQueryUserExperimentsWithOptions(request: PageableQueryUserExperimentsRequest, runtime: Util.RuntimeOptions): PageableQueryUserExperimentsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PageableQueryUserExperiments',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pageableQueryUserExperiments(request: PageableQueryUserExperimentsRequest): PageableQueryUserExperimentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return pageableQueryUserExperimentsWithOptions(request, runtime);
}

model PluginInstallWizardRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model PluginInstallWizardResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PluginInstallWizardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PluginInstallWizardResponseBody(name='body'),
}

async function pluginInstallWizardWithOptions(request: PluginInstallWizardRequest, runtime: Util.RuntimeOptions): PluginInstallWizardResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PluginInstallWizard',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pluginInstallWizard(request: PluginInstallWizardRequest): PluginInstallWizardResponse {
  var runtime = new Util.RuntimeOptions{};
  return pluginInstallWizardWithOptions(request, runtime);
}

model PublishAppSwitchTargetBatchRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  nameSpace?: string(name='NameSpace'),
  publishOrderId?: long(name='PublishOrderId'),
  switchName?: string(name='SwitchName'),
  switchNameSpace?: string(name='SwitchNameSpace'),
  switchValue?: string(name='SwitchValue'),
  targetBatch?: int32(name='TargetBatch'),
}

model PublishAppSwitchTargetBatchResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model PublishAppSwitchTargetBatchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublishAppSwitchTargetBatchResponseBody(name='body'),
}

async function publishAppSwitchTargetBatchWithOptions(request: PublishAppSwitchTargetBatchRequest, runtime: Util.RuntimeOptions): PublishAppSwitchTargetBatchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.nameSpace)) {
    query['NameSpace'] = request.nameSpace;
  }
  if (!Util.isUnset(request.publishOrderId)) {
    query['PublishOrderId'] = request.publishOrderId;
  }
  if (!Util.isUnset(request.switchName)) {
    query['SwitchName'] = request.switchName;
  }
  if (!Util.isUnset(request.switchNameSpace)) {
    query['SwitchNameSpace'] = request.switchNameSpace;
  }
  if (!Util.isUnset(request.switchValue)) {
    query['SwitchValue'] = request.switchValue;
  }
  if (!Util.isUnset(request.targetBatch)) {
    query['TargetBatch'] = request.targetBatch;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PublishAppSwitchTargetBatch',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function publishAppSwitchTargetBatch(request: PublishAppSwitchTargetBatchRequest): PublishAppSwitchTargetBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishAppSwitchTargetBatchWithOptions(request, runtime);
}

model QuertInspectJobListRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  clusterId?: string(name='ClusterId'),
  clusterName?: string(name='ClusterName'),
  hideNotEnable?: boolean(name='HideNotEnable'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model QuertInspectJobListResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    result?: [ 
      {
        clusterName?: string(name='ClusterName'),
        cron?: string(name='Cron'),
        enable?: boolean(name='Enable'),
        id?: long(name='Id'),
        lastExecutionTime?: string(name='LastExecutionTime'),
        namespace?: string(name='Namespace'),
        nextExecutionTime?: string(name='NextExecutionTime'),
        termination?: string(name='Termination'),
        type?: string(name='Type'),
      }
    ](name='Result'),
    totalItem?: int32(name='TotalItem'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model QuertInspectJobListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuertInspectJobListResponseBody(name='body'),
}

async function quertInspectJobListWithOptions(request: QuertInspectJobListRequest, runtime: Util.RuntimeOptions): QuertInspectJobListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.hideNotEnable)) {
    query['HideNotEnable'] = request.hideNotEnable;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuertInspectJobList',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function quertInspectJobList(request: QuertInspectJobListRequest): QuertInspectJobListResponse {
  var runtime = new Util.RuntimeOptions{};
  return quertInspectJobListWithOptions(request, runtime);
}

model QueryActivityTaskRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryActivityTaskResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryActivityTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryActivityTaskResponseBody(name='body'),
}

async function queryActivityTaskWithOptions(request: QueryActivityTaskRequest, runtime: Util.RuntimeOptions): QueryActivityTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryActivityTask',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryActivityTask(request: QueryActivityTaskRequest): QueryActivityTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryActivityTaskWithOptions(request, runtime);
}

model QueryActivityTaskLogRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryActivityTaskLogResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryActivityTaskLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryActivityTaskLogResponseBody(name='body'),
}

async function queryActivityTaskLogWithOptions(request: QueryActivityTaskLogRequest, runtime: Util.RuntimeOptions): QueryActivityTaskLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryActivityTaskLog',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryActivityTaskLog(request: QueryActivityTaskLogRequest): QueryActivityTaskLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryActivityTaskLogWithOptions(request, runtime);
}

model QueryActivityTaskMetricRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryActivityTaskMetricResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryActivityTaskMetricResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryActivityTaskMetricResponseBody(name='body'),
}

async function queryActivityTaskMetricWithOptions(request: QueryActivityTaskMetricRequest, runtime: Util.RuntimeOptions): QueryActivityTaskMetricResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryActivityTaskMetric',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryActivityTaskMetric(request: QueryActivityTaskMetricRequest): QueryActivityTaskMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryActivityTaskMetricWithOptions(request, runtime);
}

model QueryAhasAgentPluginEnabledRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryAhasAgentPluginEnabledResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAhasAgentPluginEnabledResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAhasAgentPluginEnabledResponseBody(name='body'),
}

async function queryAhasAgentPluginEnabledWithOptions(request: QueryAhasAgentPluginEnabledRequest, runtime: Util.RuntimeOptions): QueryAhasAgentPluginEnabledResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAhasAgentPluginEnabled',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAhasAgentPluginEnabled(request: QueryAhasAgentPluginEnabledRequest): QueryAhasAgentPluginEnabledResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAhasAgentPluginEnabledWithOptions(request, runtime);
}

model QueryAhasAgentPluginInstallScriptRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  namespace?: string(name='Namespace'),
}

model QueryAhasAgentPluginInstallScriptResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAhasAgentPluginInstallScriptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAhasAgentPluginInstallScriptResponseBody(name='body'),
}

async function queryAhasAgentPluginInstallScriptWithOptions(request: QueryAhasAgentPluginInstallScriptRequest, runtime: Util.RuntimeOptions): QueryAhasAgentPluginInstallScriptResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAhasAgentPluginInstallScript',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAhasAgentPluginInstallScript(request: QueryAhasAgentPluginInstallScriptRequest): QueryAhasAgentPluginInstallScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAhasAgentPluginInstallScriptWithOptions(request, runtime);
}

model QueryAhasPostStatusRequest {
  lang?: string(name='Lang'),
}

model QueryAhasPostStatusResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAhasPostStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAhasPostStatusResponseBody(name='body'),
}

async function queryAhasPostStatusWithOptions(request: QueryAhasPostStatusRequest, runtime: Util.RuntimeOptions): QueryAhasPostStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAhasPostStatus',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAhasPostStatus(request: QueryAhasPostStatusRequest): QueryAhasPostStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAhasPostStatusWithOptions(request, runtime);
}

model QueryAlarmRecordsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  alertName?: string(name='AlertName'),
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  startTime?: long(name='StartTime'),
}

model QueryAlarmRecordsResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageIndex?: int32(name='PageIndex'),
    pageSize?: int32(name='PageSize'),
    records?: [ 
      {
        alarmDetail?: string(name='AlarmDetail'),
        alarmLevel?: string(name='AlarmLevel'),
        alarmName?: string(name='AlarmName'),
        alarmTime?: string(name='AlarmTime'),
        alarmType?: string(name='AlarmType'),
        identify?: string(name='Identify'),
        operUser?: string(name='OperUser'),
      }
    ](name='Records'),
    totalCount?: long(name='TotalCount'),
    totalPage?: long(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAlarmRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAlarmRecordsResponseBody(name='body'),
}

async function queryAlarmRecordsWithOptions(request: QueryAlarmRecordsRequest, runtime: Util.RuntimeOptions): QueryAlarmRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.alertName)) {
    query['AlertName'] = request.alertName;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAlarmRecords',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAlarmRecords(request: QueryAlarmRecordsRequest): QueryAlarmRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAlarmRecordsWithOptions(request, runtime);
}

model QueryAlarmRuleOperRecordsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  operUser?: string(name='OperUser'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  startTime?: long(name='StartTime'),
}

model QueryAlarmRuleOperRecordsResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageIndex?: int32(name='PageIndex'),
    pageSize?: int32(name='PageSize'),
    records?: [ 
      {
        alarmLevel?: string(name='AlarmLevel'),
        alarmName?: string(name='AlarmName'),
        operTime?: string(name='OperTime'),
        operType?: string(name='OperType'),
        operUser?: string(name='OperUser'),
      }
    ](name='Records'),
    totalCount?: long(name='TotalCount'),
    totalPage?: long(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAlarmRuleOperRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAlarmRuleOperRecordsResponseBody(name='body'),
}

async function queryAlarmRuleOperRecordsWithOptions(request: QueryAlarmRuleOperRecordsRequest, runtime: Util.RuntimeOptions): QueryAlarmRuleOperRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.operUser)) {
    query['OperUser'] = request.operUser;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAlarmRuleOperRecords',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAlarmRuleOperRecords(request: QueryAlarmRuleOperRecordsRequest): QueryAlarmRuleOperRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAlarmRuleOperRecordsWithOptions(request, runtime);
}

model QueryAlarmRulesRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  alertName?: string(name='AlertName'),
  appName?: string(name='AppName'),
  group?: string(name='Group'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model QueryAlarmRulesResponseBody = {
  code?: string(name='Code'),
  data?: {
    alarmRules?: [ 
      {
        alarmGroup?: string(name='AlarmGroup'),
        alarmLevel?: string(name='AlarmLevel'),
        alarmName?: string(name='AlarmName'),
        alarmOn?: string(name='AlarmOn'),
        alarmRuleConditions?: [ 
          {
            alarmType?: string(name='AlarmType'),
            conditionId?: long(name='ConditionId'),
            conditionVal?: string(name='ConditionVal'),
            groupInterval?: string(name='GroupInterval'),
            groupWait?: int32(name='GroupWait'),
            relationship?: string(name='Relationship'),
            ruleId?: long(name='RuleId'),
            slo?: float(name='Slo'),
          }
        ](name='AlarmRuleConditions'),
        alarmRuleId?: long(name='AlarmRuleId'),
        andOr?: string(name='AndOr'),
        appName?: string(name='AppName'),
        namespace?: string(name='Namespace'),
        repeatInterval?: string(name='RepeatInterval'),
        silencePeriod?: string(name='SilencePeriod'),
        userId?: string(name='UserId'),
      }
    ](name='AlarmRules'),
    pageIndex?: int32(name='PageIndex'),
    pageSize?: int32(name='PageSize'),
    totalCount?: long(name='TotalCount'),
    totalPage?: long(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAlarmRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAlarmRulesResponseBody(name='body'),
}

async function queryAlarmRulesWithOptions(request: QueryAlarmRulesRequest, runtime: Util.RuntimeOptions): QueryAlarmRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.alertName)) {
    query['AlertName'] = request.alertName;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAlarmRules',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAlarmRules(request: QueryAlarmRulesRequest): QueryAlarmRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAlarmRulesWithOptions(request, runtime);
}

model QueryAlarmRulesByResourceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  alertName?: string(name='AlertName'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  resource?: string(name='Resource'),
}

model QueryAlarmRulesByResourceResponseBody = {
  code?: string(name='Code'),
  data?: {
    alarmRules?: [ 
      {
        alarmGroup?: string(name='AlarmGroup'),
        alarmLevel?: string(name='AlarmLevel'),
        alarmName?: string(name='AlarmName'),
        alarmOn?: string(name='AlarmOn'),
        alarmRuleConditions?: [ 
          {
            alarmType?: string(name='AlarmType'),
            conditionId?: long(name='ConditionId'),
            conditionVal?: string(name='ConditionVal'),
            groupInterval?: string(name='GroupInterval'),
            groupWait?: int32(name='GroupWait'),
            relationship?: string(name='Relationship'),
            ruleId?: long(name='RuleId'),
            slo?: float(name='Slo'),
          }
        ](name='AlarmRuleConditions'),
        alarmRuleId?: long(name='AlarmRuleId'),
        andOr?: string(name='AndOr'),
        appName?: string(name='AppName'),
        namespace?: string(name='Namespace'),
        repeatInterval?: string(name='RepeatInterval'),
        silencePeriod?: string(name='SilencePeriod'),
        userId?: string(name='UserId'),
      }
    ](name='AlarmRules'),
    pageIndex?: int32(name='PageIndex'),
    pageSize?: int32(name='PageSize'),
    totalCount?: long(name='TotalCount'),
    totalPage?: long(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAlarmRulesByResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAlarmRulesByResourceResponseBody(name='body'),
}

async function queryAlarmRulesByResourceWithOptions(request: QueryAlarmRulesByResourceRequest, runtime: Util.RuntimeOptions): QueryAlarmRulesByResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.alertName)) {
    query['AlertName'] = request.alertName;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAlarmRulesByResource',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAlarmRulesByResource(request: QueryAlarmRulesByResourceRequest): QueryAlarmRulesByResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAlarmRulesByResourceWithOptions(request, runtime);
}

model QueryAllAlarmRulesRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  resource?: string(name='Resource'),
}

model QueryAllAlarmRulesResponseBody = {
  code?: string(name='Code'),
  data?: {
    alarmRules?: [ 
      {
        alarmGroup?: string(name='AlarmGroup'),
        alarmLevel?: string(name='AlarmLevel'),
        alarmName?: string(name='AlarmName'),
        alarmOn?: string(name='AlarmOn'),
        alarmRuleConditions?: [ 
          {
            alarmType?: string(name='AlarmType'),
            conditionId?: long(name='ConditionId'),
            conditionVal?: string(name='ConditionVal'),
            groupInterval?: string(name='GroupInterval'),
            groupWait?: int32(name='GroupWait'),
            relationship?: string(name='Relationship'),
            ruleId?: long(name='RuleId'),
            slo?: float(name='Slo'),
          }
        ](name='AlarmRuleConditions'),
        alarmRuleId?: long(name='AlarmRuleId'),
        andOr?: string(name='AndOr'),
        appName?: string(name='AppName'),
        namespace?: string(name='Namespace'),
        repeatInterval?: string(name='RepeatInterval'),
        silencePeriod?: string(name='SilencePeriod'),
        userId?: string(name='UserId'),
      }
    ](name='AlarmRules'),
    pageIndex?: int32(name='PageIndex'),
    pageSize?: int32(name='PageSize'),
    totalCount?: long(name='TotalCount'),
    totalPage?: long(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAllAlarmRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAllAlarmRulesResponseBody(name='body'),
}

async function queryAllAlarmRulesWithOptions(request: QueryAllAlarmRulesRequest, runtime: Util.RuntimeOptions): QueryAllAlarmRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAllAlarmRules',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAllAlarmRules(request: QueryAllAlarmRulesRequest): QueryAllAlarmRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAllAlarmRulesWithOptions(request, runtime);
}

model QueryAppEventsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  sourceType?: string(name='SourceType'),
}

model QueryAppEventsResponseBody = {
  code?: string(name='Code'),
  data?: {
    alarmEvents?: [ 
      {
        event?: string(name='Event'),
        time?: long(name='Time'),
        timestamp?: string(name='Timestamp'),
      }
    ](name='AlarmEvents'),
    alarmRuleCount?: int32(name='AlarmRuleCount'),
    appEventCount?: map[string]any(name='AppEventCount'),
    eventCount?: int32(name='EventCount'),
    protectEvents?: [ 
      {
        event?: string(name='Event'),
        time?: long(name='Time'),
        timestamp?: string(name='Timestamp'),
      }
    ](name='ProtectEvents'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAppEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAppEventsResponseBody(name='body'),
}

async function queryAppEventsWithOptions(request: QueryAppEventsRequest, runtime: Util.RuntimeOptions): QueryAppEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAppEvents',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAppEvents(request: QueryAppEventsRequest): QueryAppEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAppEventsWithOptions(request, runtime);
}

model QueryAppListSentinelAppsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appType?: int32(name='AppType'),
  lang?: string(name='Lang'),
  minHeartBeat?: long(name='MinHeartBeat'),
  namespace?: string(name='Namespace'),
  sourceType?: string(name='SourceType'),
}

model QueryAppListSentinelAppsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      ahasAppName?: string(name='AhasAppName'),
      appName?: string(name='AppName'),
      appType?: int32(name='AppType'),
      currentLevel?: int32(name='CurrentLevel'),
      dirtyLevel?: int32(name='DirtyLevel'),
      id?: long(name='Id'),
      isDeleted?: boolean(name='IsDeleted'),
      lastHealthPingTime?: long(name='LastHealthPingTime'),
      namespace?: string(name='Namespace'),
      userId?: string(name='UserId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAppListSentinelAppsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAppListSentinelAppsResponseBody(name='body'),
}

async function queryAppListSentinelAppsWithOptions(request: QueryAppListSentinelAppsRequest, runtime: Util.RuntimeOptions): QueryAppListSentinelAppsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appType)) {
    query['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.minHeartBeat)) {
    query['MinHeartBeat'] = request.minHeartBeat;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAppListSentinelApps',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAppListSentinelApps(request: QueryAppListSentinelAppsRequest): QueryAppListSentinelAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAppListSentinelAppsWithOptions(request, runtime);
}

model QueryAppPanoramicGraphRequest {
  applicationName?: string(name='ApplicationName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  viewId?: string(name='ViewId'),
}

model QueryAppPanoramicGraphResponseBody = {
  code?: string(name='Code'),
  data?: {
    edges?: [ 
      {
        source?: string(name='source'),
        target?: string(name='target'),
      }
    ](name='edges'),
    nodes?: [ 
      {
        comboId?: string(name='comboId'),
        configurationId?: string(name='configurationId'),
        deviceName?: string(name='deviceName'),
        icon?: string(name='icon'),
        id?: string(name='id'),
      }
    ](name='nodes'),
    types?: [ 
      {
        extInfo?: map[string]any(name='extInfo'),
        nodeCount?: int32(name='nodeCount'),
        sort?: int32(name='sort'),
        type?: string(name='type'),
      }
    ](name='types'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAppPanoramicGraphResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAppPanoramicGraphResponseBody(name='body'),
}

async function queryAppPanoramicGraphWithOptions(request: QueryAppPanoramicGraphRequest, runtime: Util.RuntimeOptions): QueryAppPanoramicGraphResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationName)) {
    query['ApplicationName'] = request.applicationName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.viewId)) {
    query['ViewId'] = request.viewId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAppPanoramicGraph',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAppPanoramicGraph(request: QueryAppPanoramicGraphRequest): QueryAppPanoramicGraphResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAppPanoramicGraphWithOptions(request, runtime);
}

model QueryAppProtectionInfoRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  endTime?: long(name='EndTime'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  simple?: boolean(name='Simple'),
  sourceType?: string(name='SourceType'),
  startTime?: long(name='StartTime'),
}

model QueryAppProtectionInfoResponseBody = {
  code?: string(name='Code'),
  data?: {
    appProtections?: map[string]any(name='AppProtections'),
    total?: long(name='Total'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAppProtectionInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAppProtectionInfoResponseBody(name='body'),
}

async function queryAppProtectionInfoWithOptions(request: QueryAppProtectionInfoRequest, runtime: Util.RuntimeOptions): QueryAppProtectionInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.simple)) {
    query['Simple'] = request.simple;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAppProtectionInfo',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAppProtectionInfo(request: QueryAppProtectionInfoRequest): QueryAppProtectionInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAppProtectionInfoWithOptions(request, runtime);
}

model QueryAppProtectionsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  sourceType?: string(name='SourceType'),
}

model QueryAppProtectionsResponseBody = {
  code?: string(name='Code'),
  data?: {
    appCount?: int32(name='AppCount'),
    appQps?: map[string]any(name='AppQps'),
    protectStatistics?: [ 
      {
        count?: int32(name='Count'),
        time?: long(name='Time'),
      }
    ](name='ProtectStatistics'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAppProtectionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAppProtectionsResponseBody(name='body'),
}

async function queryAppProtectionsWithOptions(request: QueryAppProtectionsRequest, runtime: Util.RuntimeOptions): QueryAppProtectionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAppProtections',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAppProtections(request: QueryAppProtectionsRequest): QueryAppProtectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAppProtectionsWithOptions(request, runtime);
}

model QueryAppStatisticsInfoRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appTypes?: string(name='AppTypes'),
  lang?: string(name='Lang'),
  minHeartbeat?: long(name='MinHeartbeat'),
  namespace?: string(name='Namespace'),
  sourceType?: string(name='SourceType'),
}

model QueryAppStatisticsInfoResponseBody = {
  code?: string(name='Code'),
  data?: {
    appCount?: long(name='AppCount'),
    appCounts?: map[string]any(name='AppCounts'),
    appDeviceCount?: long(name='AppDeviceCount'),
    appDeviceCounts?: map[string]any(name='AppDeviceCounts'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAppStatisticsInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAppStatisticsInfoResponseBody(name='body'),
}

async function queryAppStatisticsInfoWithOptions(request: QueryAppStatisticsInfoRequest, runtime: Util.RuntimeOptions): QueryAppStatisticsInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appTypes)) {
    query['AppTypes'] = request.appTypes;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.minHeartbeat)) {
    query['MinHeartbeat'] = request.minHeartbeat;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAppStatisticsInfo',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAppStatisticsInfo(request: QueryAppStatisticsInfoRequest): QueryAppStatisticsInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAppStatisticsInfoWithOptions(request, runtime);
}

model QueryAttackInstanceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  attackSuiteInstanceId?: string(name='AttackSuiteInstanceId'),
  lang?: string(name='Lang'),
}

model QueryAttackInstanceResponseBody = {
  code?: string(name='Code'),
  data?: {
    attackName?: string(name='attackName'),
    availablePoints?: [ string ](name='availablePoints'),
    checkPoints?: [ 
      {
        measure?: string(name='measure'),
        monitorPoint?: string(name='monitorPoint'),
        type?: string(name='type'),
        value?: string(name='value'),
      }
    ](name='checkPoints'),
    checkpointMeasures?: [ string ](name='checkpointMeasures'),
    checkpointTypes?: [ string ](name='checkpointTypes'),
    chosenPoints?: [ string ](name='chosenPoints'),
    id?: string(name='id'),
    name?: string(name='name'),
    scenarioComponentValues?: [ 
      {
        actions?: [ 
          {
            metaScenarioId?: string(name='metaScenarioId'),
            metaScenarioName?: string(name='metaScenarioName'),
            paramValues?: [ 
              {
                desc?: string(name='desc'),
                display?: boolean(name='display'),
                id?: string(name='id'),
                necessary?: boolean(name='necessary'),
                options?: [ string ](name='options'),
                placeholder?: string(name='placeholder'),
                tooltip?: string(name='tooltip'),
                type?: string(name='type'),
                unit?: string(name='unit'),
                value?: string(name='value'),
              }
            ](name='paramValues'),
          }
        ](name='actions'),
        hosts?: [ 
          {
            configurationId?: string(name='configurationId'),
            deviceIp?: string(name='deviceIp'),
          }
        ](name='hosts'),
        id?: string(name='id'),
        name?: string(name='name'),
      }
    ](name='scenarioComponentValues'),
    startTime?: long(name='startTime'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAttackInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAttackInstanceResponseBody(name='body'),
}

async function queryAttackInstanceWithOptions(request: QueryAttackInstanceRequest, runtime: Util.RuntimeOptions): QueryAttackInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.attackSuiteInstanceId)) {
    query['AttackSuiteInstanceId'] = request.attackSuiteInstanceId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAttackInstance',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAttackInstance(request: QueryAttackInstanceRequest): QueryAttackInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAttackInstanceWithOptions(request, runtime);
}

model QueryAttackInstanceListRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  attackSuiteId?: string(name='AttackSuiteId'),
  namespace?: string(name='Namespace'),
  pageNO?: int32(name='PageNO'),
}

model QueryAttackInstanceListResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      attackSuitInstanceId?: string(name='attackSuitInstanceId'),
      durableTime?: string(name='durableTime'),
      startTime?: long(name='startTime'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAttackInstanceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAttackInstanceListResponseBody(name='body'),
}

async function queryAttackInstanceListWithOptions(request: QueryAttackInstanceListRequest, runtime: Util.RuntimeOptions): QueryAttackInstanceListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.attackSuiteId)) {
    query['AttackSuiteId'] = request.attackSuiteId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageNO)) {
    query['PageNO'] = request.pageNO;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAttackInstanceList',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAttackInstanceList(request: QueryAttackInstanceListRequest): QueryAttackInstanceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAttackInstanceListWithOptions(request, runtime);
}

model QueryAttackInstanceReportRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  attackSuiteInstanceId?: string(name='AttackSuiteInstanceId'),
  namespace?: string(name='Namespace'),
}

model QueryAttackInstanceReportResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      chartType?: string(name='chartType'),
      series?: [ 
        {
          metric?: string(name='metric'),
          name?: string(name='name'),
          seriesData?: [ 
            {
              time?: long(name='time'),
              value?: float(name='value'),
            }
          ](name='seriesData'),
        }
      ](name='series'),
      title?: string(name='title'),
      yAxis?: string(name='yAxis'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAttackInstanceReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAttackInstanceReportResponseBody(name='body'),
}

async function queryAttackInstanceReportWithOptions(request: QueryAttackInstanceReportRequest, runtime: Util.RuntimeOptions): QueryAttackInstanceReportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.attackSuiteInstanceId)) {
    query['AttackSuiteInstanceId'] = request.attackSuiteInstanceId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAttackInstanceReport',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAttackInstanceReport(request: QueryAttackInstanceReportRequest): QueryAttackInstanceReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAttackInstanceReportWithOptions(request, runtime);
}

model QueryAttackScenarioDetailRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  scenarioId?: string(name='ScenarioId'),
  sourceType?: int32(name='SourceType'),
}

model QueryAttackScenarioDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    attackName?: string(name='attackName'),
    availablePoints?: [ string ](name='availablePoints'),
    checkPoints?: [ 
      {
        measure?: string(name='measure'),
        monitorPoint?: string(name='monitorPoint'),
        type?: string(name='type'),
        value?: string(name='value'),
      }
    ](name='checkPoints'),
    checkpointMeasures?: [ string ](name='checkpointMeasures'),
    checkpointTypes?: [ string ](name='checkpointTypes'),
    chosenPoints?: [ string ](name='chosenPoints'),
    id?: string(name='id'),
    name?: string(name='name'),
    scenarioComponentValues?: [ 
      {
        actions?: [ 
          {
            command?: string(name='command'),
            display?: boolean(name='display'),
            metaScenarioId?: string(name='metaScenarioId'),
            metaScenarioName?: string(name='metaScenarioName'),
            paramValues?: [ 
              {
                defaultValue?: string(name='defaultValue'),
                desc?: string(name='desc'),
                id?: string(name='id'),
                maxLength?: int32(name='maxLength'),
                minLength?: int32(name='minLength'),
                necessary?: boolean(name='necessary'),
                numberMaxValue?: long(name='numberMaxValue'),
                numberMinValue?: long(name='numberMinValue'),
                options?: map[string]any(name='options'),
                placeholder?: string(name='placeholder'),
                type?: string(name='type'),
                unit?: string(name='unit'),
                value?: string(name='value'),
              }
            ](name='paramValues'),
            tooltip?: string(name='tooltip'),
          }
        ](name='actions'),
        hosts?: [ 
          {
            configurationId?: string(name='configurationId'),
            deviceIp?: string(name='deviceIp'),
          }
        ](name='hosts'),
        id?: string(name='id'),
        name?: string(name='name'),
      }
    ](name='scenarioComponentValues'),
    startTime?: long(name='startTime'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAttackScenarioDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAttackScenarioDetailResponseBody(name='body'),
}

async function queryAttackScenarioDetailWithOptions(request: QueryAttackScenarioDetailRequest, runtime: Util.RuntimeOptions): QueryAttackScenarioDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.scenarioId)) {
    query['ScenarioId'] = request.scenarioId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAttackScenarioDetail',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAttackScenarioDetail(request: QueryAttackScenarioDetailRequest): QueryAttackScenarioDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAttackScenarioDetailWithOptions(request, runtime);
}

model QueryAttackSuiteListRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  attackName?: string(name='AttackName'),
  attackStatus?: string(name='AttackStatus'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryAttackSuiteListResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      attackModel?: string(name='attackModel'),
      attackStatus?: string(name='attackStatus'),
      attackSuiteId?: string(name='attackSuiteId'),
      checkAbility?: string(name='checkAbility'),
      componentLabel?: string(name='componentLabel'),
      gmtCreate?: long(name='gmtCreate'),
      name?: string(name='name'),
      scenarioId?: string(name='scenarioId'),
      scenarioName?: string(name='scenarioName'),
      sourceType?: int32(name='sourceType'),
      subTaskProgress?: string(name='subTaskProgress'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAttackSuiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAttackSuiteListResponseBody(name='body'),
}

async function queryAttackSuiteListWithOptions(request: QueryAttackSuiteListRequest, runtime: Util.RuntimeOptions): QueryAttackSuiteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.attackName)) {
    query['AttackName'] = request.attackName;
  }
  if (!Util.isUnset(request.attackStatus)) {
    query['AttackStatus'] = request.attackStatus;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAttackSuiteList',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAttackSuiteList(request: QueryAttackSuiteListRequest): QueryAttackSuiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAttackSuiteListWithOptions(request, runtime);
}

model QueryAttackSuiteStatusRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  attackSuiteId?: string(name='AttackSuiteId'),
  namespace?: string(name='Namespace'),
}

model QueryAttackSuiteStatusResponseBody = {
  code?: string(name='Code'),
  data?: {
    attackModel?: string(name='attackModel'),
    attackStatus?: string(name='attackStatus'),
    attackSuiteId?: string(name='attackSuiteId'),
    checkAbility?: string(name='checkAbility'),
    componentLabel?: string(name='componentLabel'),
    gmtCreate?: long(name='gmtCreate'),
    name?: string(name='name'),
    scenarioId?: string(name='scenarioId'),
    scenarioName?: string(name='scenarioName'),
    sourceType?: int32(name='sourceType'),
    subTaskProgress?: string(name='subTaskProgress'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAttackSuiteStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAttackSuiteStatusResponseBody(name='body'),
}

async function queryAttackSuiteStatusWithOptions(request: QueryAttackSuiteStatusRequest, runtime: Util.RuntimeOptions): QueryAttackSuiteStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.attackSuiteId)) {
    query['AttackSuiteId'] = request.attackSuiteId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAttackSuiteStatus',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAttackSuiteStatus(request: QueryAttackSuiteStatusRequest): QueryAttackSuiteStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAttackSuiteStatusWithOptions(request, runtime);
}

model QueryAttackSuiteTargetListRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  namespace?: string(name='Namespace'),
  scenarioId?: string(name='ScenarioId'),
  sourceType?: int32(name='SourceType'),
}

model QueryAttackSuiteTargetListResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      configurationId?: string(name='configurationId'),
      deviceId?: string(name='deviceId'),
      deviceIp?: string(name='deviceIp'),
      deviceName?: string(name='deviceName'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAttackSuiteTargetListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAttackSuiteTargetListResponseBody(name='body'),
}

async function queryAttackSuiteTargetListWithOptions(request: QueryAttackSuiteTargetListRequest, runtime: Util.RuntimeOptions): QueryAttackSuiteTargetListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.scenarioId)) {
    query['ScenarioId'] = request.scenarioId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAttackSuiteTargetList',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAttackSuiteTargetList(request: QueryAttackSuiteTargetListRequest): QueryAttackSuiteTargetListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAttackSuiteTargetListWithOptions(request, runtime);
}

model QueryAttackSuiteTaskListRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  attackSuiteInstanceId?: string(name='AttackSuiteInstanceId'),
  namespace?: string(name='Namespace'),
}

model QueryAttackSuiteTaskListResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      attackInstanceId?: string(name='attackInstanceId'),
      deviceConfigurationId?: string(name='deviceConfigurationId'),
      deviceIp?: string(name='deviceIp'),
      devicePort?: string(name='devicePort'),
      deviceType?: int32(name='deviceType'),
      scenarioId?: string(name='scenarioId'),
      scenarioName?: string(name='scenarioName'),
      taskId?: string(name='taskId'),
      taskResult?: string(name='taskResult'),
      taskStatus?: string(name='taskStatus'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAttackSuiteTaskListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAttackSuiteTaskListResponseBody(name='body'),
}

async function queryAttackSuiteTaskListWithOptions(request: QueryAttackSuiteTaskListRequest, runtime: Util.RuntimeOptions): QueryAttackSuiteTaskListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.attackSuiteInstanceId)) {
    query['AttackSuiteInstanceId'] = request.attackSuiteInstanceId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAttackSuiteTaskList',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAttackSuiteTaskList(request: QueryAttackSuiteTaskListRequest): QueryAttackSuiteTaskListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAttackSuiteTaskListWithOptions(request, runtime);
}

model QueryClusterResourcesRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model QueryClusterResourcesResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageIndex?: int32(name='PageIndex'),
    pageSize?: int32(name='PageSize'),
    resources?: [ string ](name='Resources'),
    totalCount?: long(name='TotalCount'),
    totalPage?: long(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryClusterResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryClusterResourcesResponseBody(name='body'),
}

async function queryClusterResourcesWithOptions(request: QueryClusterResourcesRequest, runtime: Util.RuntimeOptions): QueryClusterResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryClusterResources',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryClusterResources(request: QueryClusterResourcesRequest): QueryClusterResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryClusterResourcesWithOptions(request, runtime);
}

model QueryClusterStatisticsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  end?: long(name='End'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
  start?: long(name='Start'),
}

model QueryClusterStatisticsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      blockedQps?: float(name='BlockedQps'),
      exceptionQps?: float(name='ExceptionQps'),
      passedQps?: float(name='PassedQps'),
      ratio?: float(name='Ratio'),
      rt?: float(name='Rt'),
      successQps?: float(name='SuccessQps'),
      thread?: float(name='Thread'),
      timestamp?: long(name='Timestamp'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryClusterStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryClusterStatisticsResponseBody(name='body'),
}

async function queryClusterStatisticsWithOptions(request: QueryClusterStatisticsRequest, runtime: Util.RuntimeOptions): QueryClusterStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.end)) {
    query['End'] = request.end;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.start)) {
    query['Start'] = request.start;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryClusterStatistics',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryClusterStatistics(request: QueryClusterStatisticsRequest): QueryClusterStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryClusterStatisticsWithOptions(request, runtime);
}

model QueryClusterTimeStatisticsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
  time?: long(name='Time'),
}

model QueryClusterTimeStatisticsResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='AppName'),
    avg?: float(name='Avg'),
    max?: float(name='Max'),
    min?: float(name='Min'),
    namespace?: string(name='Namespace'),
    percent50?: float(name='Percent50'),
    percent75?: float(name='Percent75'),
    percent90?: float(name='Percent90'),
    percent95?: float(name='Percent95'),
    percent99?: float(name='Percent99'),
    resource?: string(name='Resource'),
    timestamp?: long(name='Timestamp'),
    userId?: string(name='UserId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryClusterTimeStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryClusterTimeStatisticsResponseBody(name='body'),
}

async function queryClusterTimeStatisticsWithOptions(request: QueryClusterTimeStatisticsRequest, runtime: Util.RuntimeOptions): QueryClusterTimeStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.time)) {
    query['Time'] = request.time;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryClusterTimeStatistics',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryClusterTimeStatistics(request: QueryClusterTimeStatisticsRequest): QueryClusterTimeStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryClusterTimeStatisticsWithOptions(request, runtime);
}

model QueryClusterTypeStatisticsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
  time?: long(name='Time'),
}

model QueryClusterTypeStatisticsResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='AppName'),
    badRequest?: float(name='BadRequest'),
    blocked?: float(name='Blocked'),
    fail?: float(name='Fail'),
    invalid?: float(name='Invalid'),
    namespace?: string(name='Namespace'),
    noRefRule?: float(name='NoRefRule'),
    noRuleExist?: float(name='NoRuleExist'),
    notAvailable?: float(name='NotAvailable'),
    ok?: float(name='Ok'),
    resource?: string(name='Resource'),
    shouldWait?: float(name='ShouldWait'),
    timestamp?: long(name='Timestamp'),
    tooMany?: float(name='TooMany'),
    unknown?: float(name='Unknown'),
    userId?: string(name='UserId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryClusterTypeStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryClusterTypeStatisticsResponseBody(name='body'),
}

async function queryClusterTypeStatisticsWithOptions(request: QueryClusterTypeStatisticsRequest, runtime: Util.RuntimeOptions): QueryClusterTypeStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.time)) {
    query['Time'] = request.time;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryClusterTypeStatistics',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryClusterTypeStatistics(request: QueryClusterTypeStatisticsRequest): QueryClusterTypeStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryClusterTypeStatisticsWithOptions(request, runtime);
}

model QueryComponentLayoutsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryComponentLayoutsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      code?: string(name='Code'),
      description?: string(name='description'),
      hidden?: boolean(name='hidden'),
      layoutOrder?: int32(name='layoutOrder'),
      layoutWidth?: int32(name='layoutWidth'),
      name?: string(name='name'),
      required?: boolean(name='required'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryComponentLayoutsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryComponentLayoutsResponseBody(name='body'),
}

async function queryComponentLayoutsWithOptions(request: QueryComponentLayoutsRequest, runtime: Util.RuntimeOptions): QueryComponentLayoutsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryComponentLayouts',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryComponentLayouts(request: QueryComponentLayoutsRequest): QueryComponentLayoutsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryComponentLayoutsWithOptions(request, runtime);
}

model QueryControlListRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryControlListResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryControlListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryControlListResponseBody(name='body'),
}

async function queryControlListWithOptions(request: QueryControlListRequest, runtime: Util.RuntimeOptions): QueryControlListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryControlList',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryControlList(request: QueryControlListRequest): QueryControlListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryControlListWithOptions(request, runtime);
}

model QueryEventDetailRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  eventId?: string(name='EventId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryEventDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    items?: [ string ](name='items'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryEventDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEventDetailResponseBody(name='body'),
}

async function queryEventDetailWithOptions(request: QueryEventDetailRequest, runtime: Util.RuntimeOptions): QueryEventDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.eventId)) {
    query['EventId'] = request.eventId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEventDetail',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEventDetail(request: QueryEventDetailRequest): QueryEventDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEventDetailWithOptions(request, runtime);
}

model QueryEventsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  keyword?: string(name='Keyword'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
}

model QueryEventsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      currentPage?: int32(name='currentPage'),
      pageSize?: int32(name='pageSize'),
      result?: [ 
        {
          items?: [ string ](name='items'),
        }
      ](name='result'),
      totalItem?: long(name='totalItem'),
      totalPage?: int32(name='totalPage'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEventsResponseBody(name='body'),
}

async function queryEventsWithOptions(request: QueryEventsRequest, runtime: Util.RuntimeOptions): QueryEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEvents',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEvents(request: QueryEventsRequest): QueryEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEventsWithOptions(request, runtime);
}

model QueryExperimentRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryExperimentResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryExperimentResponseBody(name='body'),
}

async function queryExperimentWithOptions(request: QueryExperimentRequest, runtime: Util.RuntimeOptions): QueryExperimentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryExperiment',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryExperiment(request: QueryExperimentRequest): QueryExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryExperimentWithOptions(request, runtime);
}

model QueryExperimentAmountRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryExperimentAmountResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryExperimentAmountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryExperimentAmountResponseBody(name='body'),
}

async function queryExperimentAmountWithOptions(request: QueryExperimentAmountRequest, runtime: Util.RuntimeOptions): QueryExperimentAmountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryExperimentAmount',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryExperimentAmount(request: QueryExperimentAmountRequest): QueryExperimentAmountResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryExperimentAmountWithOptions(request, runtime);
}

model QueryExperimentBasicInfoRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryExperimentBasicInfoResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryExperimentBasicInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryExperimentBasicInfoResponseBody(name='body'),
}

async function queryExperimentBasicInfoWithOptions(request: QueryExperimentBasicInfoRequest, runtime: Util.RuntimeOptions): QueryExperimentBasicInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryExperimentBasicInfo',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryExperimentBasicInfo(request: QueryExperimentBasicInfoRequest): QueryExperimentBasicInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryExperimentBasicInfoWithOptions(request, runtime);
}

model QueryExperimentFlowDefinitionRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryExperimentFlowDefinitionResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryExperimentFlowDefinitionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryExperimentFlowDefinitionResponseBody(name='body'),
}

async function queryExperimentFlowDefinitionWithOptions(request: QueryExperimentFlowDefinitionRequest, runtime: Util.RuntimeOptions): QueryExperimentFlowDefinitionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryExperimentFlowDefinition',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryExperimentFlowDefinition(request: QueryExperimentFlowDefinitionRequest): QueryExperimentFlowDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryExperimentFlowDefinitionWithOptions(request, runtime);
}

model QueryExperimentTaskRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryExperimentTaskResponseBody = {
  code?: string(name='Code'),
  data?: {
    activities?: [ 
      {
        activityId?: string(name='activityId'),
        activityTaskId?: string(name='activityTaskId'),
        apps?: [ 
          {
            appConfigurationId?: string(name='appConfigurationId'),
            deviceName?: string(name='deviceName'),
            hostIp?: string(name='hostIp'),
            result?: string(name='result'),
            startTime?: long(name='startTime'),
            state?: long(name='state'),
            taskId?: string(name='taskId'),
          }
        ](name='apps'),
        endTime?: long(name='endTime'),
        errorMessage?: string(name='errorMessage'),
        executableAppCode?: string(name='executableAppCode'),
        experimentTaskId?: string(name='experimentTaskId'),
        flowId?: string(name='flowId'),
        miniAppCode?: string(name='miniAppCode'),
        miniAppName?: string(name='miniAppName'),
        order?: int32(name='order'),
        phase?: string(name='phase'),
        retryable?: boolean(name='retryable'),
        runParam?: {
          activityId?: string(name='activityId'),
          arguments?: {
            action?: map[string]string(name='action'),
            argsComponents?: map[string]DataActivitiesRunParamArgumentsArgsComponentsValue(name='argsComponents'),
            matcher?: map[string]string(name='matcher'),
            userArgs?: map[string]string(name='user_args'),
          }(name='arguments'),
          failedTolerance?: int32(name='failedTolerance'),
          interruptedIfFailed?: boolean(name='interruptedIfFailed'),
          needUserCheck?: boolean(name='needUserCheck'),
        }(name='runParam'),
        runResult?: string(name='runResult'),
        startTime?: long(name='startTime'),
        state?: string(name='state'),
        userCheckState?: string(name='userCheckState'),
      }
    ](name='activities'),
    aoneApps?: [ string ](name='aoneApps'),
    creator?: {
      betaFlag?: int32(name='betaFlag'),
      grayEnable?: boolean(name='grayEnable'),
      isAdmin?: boolean(name='isAdmin'),
      isAliAccount?: boolean(name='isAliAccount'),
      mfaPresent?: boolean(name='mfaPresent'),
      namespace?: string(name='namespace'),
      outerId?: int32(name='outerId'),
      regionId?: string(name='regionId'),
      secureTransport?: boolean(name='secureTransport'),
      sourceIp?: string(name='sourceIp'),
      sts?: {
        accessKeyId?: string(name='accessKeyId'),
        parentId?: string(name='parentId'),
        roleId?: string(name='roleId'),
        userId?: string(name='userId'),
      }(name='sts'),
      stsRoleName?: string(name='stsRoleName'),
      stsUserId?: string(name='stsUserId'),
      subUserId?: string(name='subUserId'),
      userId?: string(name='userId'),
      userName?: string(name='userName'),
      userNick?: string(name='userNick'),
    }(name='creator'),
    currentPhase?: string(name='currentPhase'),
    endTime?: long(name='endTime'),
    experimentId?: string(name='experimentId'),
    experimentName?: string(name='experimentName'),
    extInfo?: {
      schedulerConfig?: {
        cronExpression?: string(name='CronExpression'),
        fixedTime?: long(name='FixedTime'),
      }(name='schedulerConfig'),
    }(name='extInfo'),
    feedbackStatus?: int32(name='feedbackStatus'),
    isJvm?: boolean(name='isJvm'),
    message?: string(name='message'),
    namespace?: string(name='namespace'),
    permission?: int32(name='permission'),
    result?: string(name='result'),
    source?: int32(name='source'),
    startTime?: long(name='startTime'),
    state?: string(name='state'),
    taskId?: string(name='taskId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryExperimentTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryExperimentTaskResponseBody(name='body'),
}

async function queryExperimentTaskWithOptions(request: QueryExperimentTaskRequest, runtime: Util.RuntimeOptions): QueryExperimentTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryExperimentTask',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryExperimentTask(request: QueryExperimentTaskRequest): QueryExperimentTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryExperimentTaskWithOptions(request, runtime);
}

model QueryExperimentTaskBasicRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryExperimentTaskBasicResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryExperimentTaskBasicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryExperimentTaskBasicResponseBody(name='body'),
}

async function queryExperimentTaskBasicWithOptions(request: QueryExperimentTaskBasicRequest, runtime: Util.RuntimeOptions): QueryExperimentTaskBasicResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryExperimentTaskBasic',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryExperimentTaskBasic(request: QueryExperimentTaskBasicRequest): QueryExperimentTaskBasicResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryExperimentTaskBasicWithOptions(request, runtime);
}

model QueryExperimentTaskConsumedAmountRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryExperimentTaskConsumedAmountResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryExperimentTaskConsumedAmountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryExperimentTaskConsumedAmountResponseBody(name='body'),
}

async function queryExperimentTaskConsumedAmountWithOptions(request: QueryExperimentTaskConsumedAmountRequest, runtime: Util.RuntimeOptions): QueryExperimentTaskConsumedAmountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryExperimentTaskConsumedAmount',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryExperimentTaskConsumedAmount(request: QueryExperimentTaskConsumedAmountRequest): QueryExperimentTaskConsumedAmountResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryExperimentTaskConsumedAmountWithOptions(request, runtime);
}

model QueryExperimentTaskGuardInfoRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryExperimentTaskGuardInfoResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryExperimentTaskGuardInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryExperimentTaskGuardInfoResponseBody(name='body'),
}

async function queryExperimentTaskGuardInfoWithOptions(request: QueryExperimentTaskGuardInfoRequest, runtime: Util.RuntimeOptions): QueryExperimentTaskGuardInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryExperimentTaskGuardInfo',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryExperimentTaskGuardInfo(request: QueryExperimentTaskGuardInfoRequest): QueryExperimentTaskGuardInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryExperimentTaskGuardInfoWithOptions(request, runtime);
}

model QueryExperimentTaskLogRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryExperimentTaskLogResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryExperimentTaskLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryExperimentTaskLogResponseBody(name='body'),
}

async function queryExperimentTaskLogWithOptions(request: QueryExperimentTaskLogRequest, runtime: Util.RuntimeOptions): QueryExperimentTaskLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryExperimentTaskLog',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryExperimentTaskLog(request: QueryExperimentTaskLogRequest): QueryExperimentTaskLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryExperimentTaskLogWithOptions(request, runtime);
}

model QueryExperimentTasksByExperimentIdRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryExperimentTasksByExperimentIdResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryExperimentTasksByExperimentIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryExperimentTasksByExperimentIdResponseBody(name='body'),
}

async function queryExperimentTasksByExperimentIdWithOptions(request: QueryExperimentTasksByExperimentIdRequest, runtime: Util.RuntimeOptions): QueryExperimentTasksByExperimentIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryExperimentTasksByExperimentId',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryExperimentTasksByExperimentId(request: QueryExperimentTasksByExperimentIdRequest): QueryExperimentTasksByExperimentIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryExperimentTasksByExperimentIdWithOptions(request, runtime);
}

model QueryExperimentTasksResultByExperimentIdRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryExperimentTasksResultByExperimentIdResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryExperimentTasksResultByExperimentIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryExperimentTasksResultByExperimentIdResponseBody(name='body'),
}

async function queryExperimentTasksResultByExperimentIdWithOptions(request: QueryExperimentTasksResultByExperimentIdRequest, runtime: Util.RuntimeOptions): QueryExperimentTasksResultByExperimentIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryExperimentTasksResultByExperimentId',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryExperimentTasksResultByExperimentId(request: QueryExperimentTasksResultByExperimentIdRequest): QueryExperimentTasksResultByExperimentIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryExperimentTasksResultByExperimentIdWithOptions(request, runtime);
}

model QueryExperimentTasksSimpleByExperimentIdRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryExperimentTasksSimpleByExperimentIdResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryExperimentTasksSimpleByExperimentIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryExperimentTasksSimpleByExperimentIdResponseBody(name='body'),
}

async function queryExperimentTasksSimpleByExperimentIdWithOptions(request: QueryExperimentTasksSimpleByExperimentIdRequest, runtime: Util.RuntimeOptions): QueryExperimentTasksSimpleByExperimentIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryExperimentTasksSimpleByExperimentId',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryExperimentTasksSimpleByExperimentId(request: QueryExperimentTasksSimpleByExperimentIdRequest): QueryExperimentTasksSimpleByExperimentIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryExperimentTasksSimpleByExperimentIdWithOptions(request, runtime);
}

model QueryExperimentsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryExperimentsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryExperimentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryExperimentsResponseBody(name='body'),
}

async function queryExperimentsWithOptions(request: QueryExperimentsRequest, runtime: Util.RuntimeOptions): QueryExperimentsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryExperiments',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryExperiments(request: QueryExperimentsRequest): QueryExperimentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryExperimentsWithOptions(request, runtime);
}

model QueryExpertiseDetailsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryExpertiseDetailsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryExpertiseDetailsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryExpertiseDetailsResponseBody(name='body'),
}

async function queryExpertiseDetailsWithOptions(request: QueryExpertiseDetailsRequest, runtime: Util.RuntimeOptions): QueryExpertiseDetailsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryExpertiseDetails',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryExpertiseDetails(request: QueryExpertiseDetailsRequest): QueryExpertiseDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryExpertiseDetailsWithOptions(request, runtime);
}

model QueryFissionSceneFunctionsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryFissionSceneFunctionsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryFissionSceneFunctionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryFissionSceneFunctionsResponseBody(name='body'),
}

async function queryFissionSceneFunctionsWithOptions(request: QueryFissionSceneFunctionsRequest, runtime: Util.RuntimeOptions): QueryFissionSceneFunctionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryFissionSceneFunctions',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryFissionSceneFunctions(request: QueryFissionSceneFunctionsRequest): QueryFissionSceneFunctionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryFissionSceneFunctionsWithOptions(request, runtime);
}

model QueryFlowStatisticsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
  time?: long(name='Time'),
}

model QueryFlowStatisticsResponseBody = {
  code?: string(name='Code'),
  data?: {
    bavg?: float(name='Bavg'),
    bmax?: float(name='Bmax'),
    bmin?: float(name='Bmin'),
    bvar?: float(name='Bvar'),
    pavg?: float(name='Pavg'),
    pmax?: float(name='Pmax'),
    pmin?: float(name='Pmin'),
    pvar?: float(name='Pvar'),
    qps?: [ 
      {
        bqps?: float(name='Bqps'),
        percent?: string(name='Percent'),
        pqps?: float(name='Pqps'),
      }
    ](name='Qps'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryFlowStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryFlowStatisticsResponseBody(name='body'),
}

async function queryFlowStatisticsWithOptions(request: QueryFlowStatisticsRequest, runtime: Util.RuntimeOptions): QueryFlowStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.time)) {
    query['Time'] = request.time;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryFlowStatistics',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryFlowStatistics(request: QueryFlowStatisticsRequest): QueryFlowStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryFlowStatisticsWithOptions(request, runtime);
}

model QueryGatewayProtectionsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  sourceType?: string(name='SourceType'),
}

model QueryGatewayProtectionsResponseBody = {
  code?: string(name='Code'),
  data?: {
    gatewayCount?: map[string]any(name='GatewayCount'),
    gatewayQps?: map[string]any(name='GatewayQps'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryGatewayProtectionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryGatewayProtectionsResponseBody(name='body'),
}

async function queryGatewayProtectionsWithOptions(request: QueryGatewayProtectionsRequest, runtime: Util.RuntimeOptions): QueryGatewayProtectionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryGatewayProtections',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryGatewayProtections(request: QueryGatewayProtectionsRequest): QueryGatewayProtectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryGatewayProtectionsWithOptions(request, runtime);
}

model QueryGlobalDataRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryGlobalDataResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryGlobalDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryGlobalDataResponseBody(name='body'),
}

async function queryGlobalDataWithOptions(request: QueryGlobalDataRequest, runtime: Util.RuntimeOptions): QueryGlobalDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryGlobalData',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryGlobalData(request: QueryGlobalDataRequest): QueryGlobalDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryGlobalDataWithOptions(request, runtime);
}

model QueryGlobalGuardSceneFunctionCategoriesRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryGlobalGuardSceneFunctionCategoriesResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryGlobalGuardSceneFunctionCategoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryGlobalGuardSceneFunctionCategoriesResponseBody(name='body'),
}

async function queryGlobalGuardSceneFunctionCategoriesWithOptions(request: QueryGlobalGuardSceneFunctionCategoriesRequest, runtime: Util.RuntimeOptions): QueryGlobalGuardSceneFunctionCategoriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryGlobalGuardSceneFunctionCategories',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryGlobalGuardSceneFunctionCategories(request: QueryGlobalGuardSceneFunctionCategoriesRequest): QueryGlobalGuardSceneFunctionCategoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryGlobalGuardSceneFunctionCategoriesWithOptions(request, runtime);
}

model QueryGlobalMonitorSceneFunctionCategoriesRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryGlobalMonitorSceneFunctionCategoriesResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryGlobalMonitorSceneFunctionCategoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryGlobalMonitorSceneFunctionCategoriesResponseBody(name='body'),
}

async function queryGlobalMonitorSceneFunctionCategoriesWithOptions(request: QueryGlobalMonitorSceneFunctionCategoriesRequest, runtime: Util.RuntimeOptions): QueryGlobalMonitorSceneFunctionCategoriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryGlobalMonitorSceneFunctionCategories',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryGlobalMonitorSceneFunctionCategories(request: QueryGlobalMonitorSceneFunctionCategoriesRequest): QueryGlobalMonitorSceneFunctionCategoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryGlobalMonitorSceneFunctionCategoriesWithOptions(request, runtime);
}

model QueryGuardSceneFunctionRulesRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryGuardSceneFunctionRulesResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryGuardSceneFunctionRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryGuardSceneFunctionRulesResponseBody(name='body'),
}

async function queryGuardSceneFunctionRulesWithOptions(request: QueryGuardSceneFunctionRulesRequest, runtime: Util.RuntimeOptions): QueryGuardSceneFunctionRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryGuardSceneFunctionRules',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryGuardSceneFunctionRules(request: QueryGuardSceneFunctionRulesRequest): QueryGuardSceneFunctionRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryGuardSceneFunctionRulesWithOptions(request, runtime);
}

model QueryHelmPackageAddressRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  namespace?: string(name='Namespace'),
}

model QueryHelmPackageAddressResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryHelmPackageAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryHelmPackageAddressResponseBody(name='body'),
}

async function queryHelmPackageAddressWithOptions(request: QueryHelmPackageAddressRequest, runtime: Util.RuntimeOptions): QueryHelmPackageAddressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryHelmPackageAddress',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryHelmPackageAddress(request: QueryHelmPackageAddressRequest): QueryHelmPackageAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryHelmPackageAddressWithOptions(request, runtime);
}

model QueryHistoryListRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  keyword?: string(name='Keyword'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
}

model QueryHistoryListResponseBody = {
  code?: string(name='Code'),
  data?: [  map[string]any ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryHistoryListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryHistoryListResponseBody(name='body'),
}

async function queryHistoryListWithOptions(request: QueryHistoryListRequest, runtime: Util.RuntimeOptions): QueryHistoryListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryHistoryList',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryHistoryList(request: QueryHistoryListRequest): QueryHistoryListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryHistoryListWithOptions(request, runtime);
}

model QueryInspectFailCountChartRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  dayCount?: int32(name='DayCount'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryInspectFailCountChartResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      count?: int32(name='Count'),
      date?: string(name='Date'),
      title?: string(name='Title'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryInspectFailCountChartResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryInspectFailCountChartResponseBody(name='body'),
}

async function queryInspectFailCountChartWithOptions(request: QueryInspectFailCountChartRequest, runtime: Util.RuntimeOptions): QueryInspectFailCountChartResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.dayCount)) {
    query['DayCount'] = request.dayCount;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryInspectFailCountChart',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryInspectFailCountChart(request: QueryInspectFailCountChartRequest): QueryInspectFailCountChartResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryInspectFailCountChartWithOptions(request, runtime);
}

model QueryInspectItemRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  inspectId?: long(name='InspectId'),
  lang?: string(name='Lang'),
}

model QueryInspectItemResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      description?: string(name='Description'),
      effect?: {
        effectHeader?: [ 
          {
            key?: string(name='Key'),
            name?: string(name='Name'),
          }
        ](name='EffectHeader'),
        effectRows?: [  map[string]any ](name='EffectRows'),
      }(name='Effect'),
      id?: long(name='Id'),
      level?: string(name='Level'),
      links?: string(name='Links'),
      name?: string(name='Name'),
      reason?: string(name='Reason'),
      risk?: string(name='Risk'),
      score?: string(name='Score'),
      suggest?: string(name='Suggest'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryInspectItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryInspectItemResponseBody(name='body'),
}

async function queryInspectItemWithOptions(request: QueryInspectItemRequest, runtime: Util.RuntimeOptions): QueryInspectItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.inspectId)) {
    query['InspectId'] = request.inspectId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryInspectItem',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryInspectItem(request: QueryInspectItemRequest): QueryInspectItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryInspectItemWithOptions(request, runtime);
}

model QueryInspectJobRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
}

model QueryInspectJobResponseBody = {
  code?: string(name='Code'),
  data?: {
    inspectSchedule?: {
      clusterId?: string(name='ClusterId'),
      clusterName?: string(name='ClusterName'),
      cron?: string(name='Cron'),
      date?: string(name='Date'),
      day?: string(name='Day'),
      id?: long(name='Id'),
      namespace?: string(name='Namespace'),
      termination?: string(name='Termination'),
      time?: string(name='Time'),
      type?: string(name='Type'),
      week?: string(name='Week'),
    }(name='InspectSchedule'),
    type?: string(name='Type'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model QueryInspectJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryInspectJobResponseBody(name='body'),
}

async function queryInspectJobWithOptions(request: QueryInspectJobRequest, runtime: Util.RuntimeOptions): QueryInspectJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryInspectJob',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryInspectJob(request: QueryInspectJobRequest): QueryInspectJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryInspectJobWithOptions(request, runtime);
}

model QueryInstallCommandRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  configurationId?: string(name='ConfigurationId'),
  helmVersion?: string(name='HelmVersion'),
  mode?: string(name='Mode'),
  namespace?: string(name='Namespace'),
  osType?: long(name='OsType'),
}

model QueryInstallCommandResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryInstallCommandResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryInstallCommandResponseBody(name='body'),
}

async function queryInstallCommandWithOptions(request: QueryInstallCommandRequest, runtime: Util.RuntimeOptions): QueryInstallCommandResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.configurationId)) {
    query['ConfigurationId'] = request.configurationId;
  }
  if (!Util.isUnset(request.helmVersion)) {
    query['HelmVersion'] = request.helmVersion;
  }
  if (!Util.isUnset(request.mode)) {
    query['Mode'] = request.mode;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.osType)) {
    query['OsType'] = request.osType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryInstallCommand',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryInstallCommand(request: QueryInstallCommandRequest): QueryInstallCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryInstallCommandWithOptions(request, runtime);
}

model QueryLicenseKeyRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryLicenseKeyResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryLicenseKeyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryLicenseKeyResponseBody(name='body'),
}

async function queryLicenseKeyWithOptions(request: QueryLicenseKeyRequest, runtime: Util.RuntimeOptions): QueryLicenseKeyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryLicenseKey',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryLicenseKey(request: QueryLicenseKeyRequest): QueryLicenseKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryLicenseKeyWithOptions(request, runtime);
}

model QueryLivedPluginCountRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespaceId?: string(name='NamespaceId'),
}

model QueryLivedPluginCountResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryLivedPluginCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryLivedPluginCountResponseBody(name='body'),
}

async function queryLivedPluginCountWithOptions(request: QueryLivedPluginCountRequest, runtime: Util.RuntimeOptions): QueryLivedPluginCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryLivedPluginCount',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryLivedPluginCount(request: QueryLivedPluginCountRequest): QueryLivedPluginCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryLivedPluginCountWithOptions(request, runtime);
}

model QueryMiniAppTaskRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryMiniAppTaskResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryMiniAppTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMiniAppTaskResponseBody(name='body'),
}

async function queryMiniAppTaskWithOptions(request: QueryMiniAppTaskRequest, runtime: Util.RuntimeOptions): QueryMiniAppTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryMiniAppTask',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMiniAppTask(request: QueryMiniAppTaskRequest): QueryMiniAppTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMiniAppTaskWithOptions(request, runtime);
}

model QueryMiniAppTaskLogRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryMiniAppTaskLogResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryMiniAppTaskLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMiniAppTaskLogResponseBody(name='body'),
}

async function queryMiniAppTaskLogWithOptions(request: QueryMiniAppTaskLogRequest, runtime: Util.RuntimeOptions): QueryMiniAppTaskLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryMiniAppTaskLog',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMiniAppTaskLog(request: QueryMiniAppTaskLogRequest): QueryMiniAppTaskLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMiniAppTaskLogWithOptions(request, runtime);
}

model QueryNamespaceListRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryNamespaceListResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      createTime?: long(name='createTime'),
      description?: string(name='description'),
      name?: string(name='name'),
      namespace?: string(name='namespace'),
      regionId?: string(name='regionId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryNamespaceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryNamespaceListResponseBody(name='body'),
}

async function queryNamespaceListWithOptions(request: QueryNamespaceListRequest, runtime: Util.RuntimeOptions): QueryNamespaceListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryNamespaceList',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryNamespaceList(request: QueryNamespaceListRequest): QueryNamespaceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryNamespaceListWithOptions(request, runtime);
}

model QueryNextCronListRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  clusterId?: string(name='ClusterId'),
  count?: int32(name='Count'),
  cron?: string(name='Cron'),
  date?: long(name='Date'),
  day?: string(name='Day'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  terminationDate?: long(name='TerminationDate'),
  terminationTime?: long(name='TerminationTime'),
  time?: long(name='Time'),
  week?: string(name='Week'),
}

model QueryNextCronListResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      expression?: string(name='Expression'),
      repeatTime?: [ string ](name='RepeatTime'),
      timeList?: [ string ](name='TimeList'),
      valid?: boolean(name='Valid'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryNextCronListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryNextCronListResponseBody(name='body'),
}

async function queryNextCronListWithOptions(request: QueryNextCronListRequest, runtime: Util.RuntimeOptions): QueryNextCronListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.count)) {
    query['Count'] = request.count;
  }
  if (!Util.isUnset(request.cron)) {
    query['Cron'] = request.cron;
  }
  if (!Util.isUnset(request.date)) {
    query['Date'] = request.date;
  }
  if (!Util.isUnset(request.day)) {
    query['Day'] = request.day;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.terminationDate)) {
    query['TerminationDate'] = request.terminationDate;
  }
  if (!Util.isUnset(request.terminationTime)) {
    query['TerminationTime'] = request.terminationTime;
  }
  if (!Util.isUnset(request.time)) {
    query['Time'] = request.time;
  }
  if (!Util.isUnset(request.week)) {
    query['Week'] = request.week;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryNextCronList',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryNextCronList(request: QueryNextCronListRequest): QueryNextCronListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryNextCronListWithOptions(request, runtime);
}

model QueryNoticeRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
}

model QueryNoticeResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryNoticeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryNoticeResponseBody(name='body'),
}

async function queryNoticeWithOptions(request: QueryNoticeRequest, runtime: Util.RuntimeOptions): QueryNoticeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryNotice',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryNotice(request: QueryNoticeRequest): QueryNoticeResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryNoticeWithOptions(request, runtime);
}

model QueryOptionalArgumentsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryOptionalArgumentsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryOptionalArgumentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryOptionalArgumentsResponseBody(name='body'),
}

async function queryOptionalArgumentsWithOptions(request: QueryOptionalArgumentsRequest, runtime: Util.RuntimeOptions): QueryOptionalArgumentsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryOptionalArguments',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryOptionalArguments(request: QueryOptionalArgumentsRequest): QueryOptionalArgumentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOptionalArgumentsWithOptions(request, runtime);
}

model QueryOverviewBasicRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  namespace?: string(name='Namespace'),
  requestTimestamp?: long(name='RequestTimestamp'),
}

model QueryOverviewBasicResponseBody = {
  code?: string(name='Code'),
  data?: {
    failInspectCount?: int32(name='FailInspectCount'),
    chaosSuites?: int32(name='chaosSuites'),
    containers?: int32(name='containers'),
    cpuUsage?: float(name='cpuUsage'),
    createTime?: long(name='createTime'),
    flowLimitApps?: int32(name='flowLimitApps'),
    hosts?: int32(name='hosts'),
    memUsage?: float(name='memUsage'),
    namespaceName?: string(name='namespaceName'),
    pods?: int32(name='pods'),
    processes?: int32(name='processes'),
    sentinelApps?: int32(name='sentinelApps'),
    sentinelDegradeRules?: int32(name='sentinelDegradeRules'),
    sentinelFlowRules?: int32(name='sentinelFlowRules'),
    sentinelGatewayApis?: int32(name='sentinelGatewayApis'),
    sentinelGatewayRules?: int32(name='sentinelGatewayRules'),
    sentinelGateways?: int32(name='sentinelGateways'),
    sentinelIsolateRules?: int32(name='sentinelIsolateRules'),
    sentinelMachines?: int32(name='sentinelMachines'),
    sentinelSystemRules?: int32(name='sentinelSystemRules'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryOverviewBasicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryOverviewBasicResponseBody(name='body'),
}

async function queryOverviewBasicWithOptions(request: QueryOverviewBasicRequest, runtime: Util.RuntimeOptions): QueryOverviewBasicResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.requestTimestamp)) {
    query['RequestTimestamp'] = request.requestTimestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryOverviewBasic',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryOverviewBasic(request: QueryOverviewBasicRequest): QueryOverviewBasicResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOverviewBasicWithOptions(request, runtime);
}

model QueryOverviewEventsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryOverviewEventsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appName?: string(name='appName'),
      description?: string(name='description'),
      deviceConfigurationId?: string(name='deviceConfigurationId'),
      deviceId?: string(name='deviceId'),
      deviceIp?: string(name='deviceIp'),
      end?: long(name='end'),
      eventType?: string(name='eventType'),
      level?: string(name='level'),
      occurTime?: long(name='occurTime'),
      optType?: string(name='optType'),
      result?: string(name='result'),
      start?: long(name='start'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryOverviewEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryOverviewEventsResponseBody(name='body'),
}

async function queryOverviewEventsWithOptions(request: QueryOverviewEventsRequest, runtime: Util.RuntimeOptions): QueryOverviewEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryOverviewEvents',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryOverviewEvents(request: QueryOverviewEventsRequest): QueryOverviewEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOverviewEventsWithOptions(request, runtime);
}

model QueryPageableExpenseRecordsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryPageableExpenseRecordsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryPageableExpenseRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPageableExpenseRecordsResponseBody(name='body'),
}

async function queryPageableExpenseRecordsWithOptions(request: QueryPageableExpenseRecordsRequest, runtime: Util.RuntimeOptions): QueryPageableExpenseRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryPageableExpenseRecords',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPageableExpenseRecords(request: QueryPageableExpenseRecordsRequest): QueryPageableExpenseRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPageableExpenseRecordsWithOptions(request, runtime);
}

model QueryPageableOrderRecordsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryPageableOrderRecordsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryPageableOrderRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPageableOrderRecordsResponseBody(name='body'),
}

async function queryPageableOrderRecordsWithOptions(request: QueryPageableOrderRecordsRequest, runtime: Util.RuntimeOptions): QueryPageableOrderRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryPageableOrderRecords',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPageableOrderRecords(request: QueryPageableOrderRecordsRequest): QueryPageableOrderRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPageableOrderRecordsWithOptions(request, runtime);
}

model QueryParamHotKeysRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  rule?: string(name='Rule'),
}

model QueryParamHotKeysResponseBody = {
  code?: string(name='Code'),
  data?: {
    metrics?: [ 
      {
        name?: string(name='Name'),
        value?: int32(name='Value'),
      }
    ](name='Metrics'),
    pageIndex?: int32(name='PageIndex'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    totalPage?: int32(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryParamHotKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryParamHotKeysResponseBody(name='body'),
}

async function queryParamHotKeysWithOptions(request: QueryParamHotKeysRequest, runtime: Util.RuntimeOptions): QueryParamHotKeysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.rule)) {
    query['Rule'] = request.rule;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryParamHotKeys',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryParamHotKeys(request: QueryParamHotKeysRequest): QueryParamHotKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryParamHotKeysWithOptions(request, runtime);
}

model QueryParamRuleHotKeyOnNodesRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  hotKey?: string(name='HotKey'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  rule?: string(name='Rule'),
}

model QueryParamRuleHotKeyOnNodesResponseBody = {
  code?: string(name='Code'),
  data?: {
    metrics?: [ 
      {
        name?: string(name='Name'),
        value?: int32(name='Value'),
      }
    ](name='Metrics'),
    pageIndex?: int32(name='PageIndex'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    totalPage?: int32(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryParamRuleHotKeyOnNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryParamRuleHotKeyOnNodesResponseBody(name='body'),
}

async function queryParamRuleHotKeyOnNodesWithOptions(request: QueryParamRuleHotKeyOnNodesRequest, runtime: Util.RuntimeOptions): QueryParamRuleHotKeyOnNodesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.hotKey)) {
    query['HotKey'] = request.hotKey;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.rule)) {
    query['Rule'] = request.rule;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryParamRuleHotKeyOnNodes',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryParamRuleHotKeyOnNodes(request: QueryParamRuleHotKeyOnNodesRequest): QueryParamRuleHotKeyOnNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryParamRuleHotKeyOnNodesWithOptions(request, runtime);
}

model QueryParamRuleHotKeyStatisticsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  hotKey?: string(name='HotKey'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  rule?: string(name='Rule'),
  startTime?: long(name='StartTime'),
}

model QueryParamRuleHotKeyStatisticsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      block?: int32(name='Block'),
      pass?: int32(name='Pass'),
      time?: long(name='Time'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryParamRuleHotKeyStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryParamRuleHotKeyStatisticsResponseBody(name='body'),
}

async function queryParamRuleHotKeyStatisticsWithOptions(request: QueryParamRuleHotKeyStatisticsRequest, runtime: Util.RuntimeOptions): QueryParamRuleHotKeyStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.hotKey)) {
    query['HotKey'] = request.hotKey;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryParamRuleHotKeyStatistics',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryParamRuleHotKeyStatistics(request: QueryParamRuleHotKeyStatisticsRequest): QueryParamRuleHotKeyStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryParamRuleHotKeyStatisticsWithOptions(request, runtime);
}

model QueryParamRuleHotKeyStatisticsOnNodeRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  hotKey?: string(name='HotKey'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  rule?: string(name='Rule'),
  startTime?: long(name='StartTime'),
}

model QueryParamRuleHotKeyStatisticsOnNodeResponseBody = {
  code?: string(name='Code'),
  data?: {
    nodeMetrics?: map[string]any(name='NodeMetrics'),
    pageIndex?: int32(name='PageIndex'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    totalPage?: int32(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryParamRuleHotKeyStatisticsOnNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryParamRuleHotKeyStatisticsOnNodeResponseBody(name='body'),
}

async function queryParamRuleHotKeyStatisticsOnNodeWithOptions(request: QueryParamRuleHotKeyStatisticsOnNodeRequest, runtime: Util.RuntimeOptions): QueryParamRuleHotKeyStatisticsOnNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.hotKey)) {
    query['HotKey'] = request.hotKey;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.rule)) {
    query['Rule'] = request.rule;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryParamRuleHotKeyStatisticsOnNode',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryParamRuleHotKeyStatisticsOnNode(request: QueryParamRuleHotKeyStatisticsOnNodeRequest): QueryParamRuleHotKeyStatisticsOnNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryParamRuleHotKeyStatisticsOnNodeWithOptions(request, runtime);
}

model QueryParamRuleHotKeysRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  rule?: string(name='Rule'),
}

model QueryParamRuleHotKeysResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageIndex?: int32(name='PageIndex'),
    pageSize?: int32(name='PageSize'),
    rules?: [ string ](name='Rules'),
    totalCount?: int32(name='TotalCount'),
    totalPage?: int32(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryParamRuleHotKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryParamRuleHotKeysResponseBody(name='body'),
}

async function queryParamRuleHotKeysWithOptions(request: QueryParamRuleHotKeysRequest, runtime: Util.RuntimeOptions): QueryParamRuleHotKeysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.rule)) {
    query['Rule'] = request.rule;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryParamRuleHotKeys',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryParamRuleHotKeys(request: QueryParamRuleHotKeysRequest): QueryParamRuleHotKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryParamRuleHotKeysWithOptions(request, runtime);
}

model QueryParamRuleHotKeysWithNameRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  key?: string(name='Key'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  rule?: string(name='Rule'),
}

model QueryParamRuleHotKeysWithNameResponseBody = {
  code?: string(name='Code'),
  data?: {
    metrics?: [ 
      {
        name?: string(name='Name'),
        value?: int32(name='Value'),
      }
    ](name='Metrics'),
    pageIndex?: int32(name='PageIndex'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    totalPage?: int32(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryParamRuleHotKeysWithNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryParamRuleHotKeysWithNameResponseBody(name='body'),
}

async function queryParamRuleHotKeysWithNameWithOptions(request: QueryParamRuleHotKeysWithNameRequest, runtime: Util.RuntimeOptions): QueryParamRuleHotKeysWithNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.rule)) {
    query['Rule'] = request.rule;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryParamRuleHotKeysWithName',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryParamRuleHotKeysWithName(request: QueryParamRuleHotKeysWithNameRequest): QueryParamRuleHotKeysWithNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryParamRuleHotKeysWithNameWithOptions(request, runtime);
}

model QueryParamRulesRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model QueryParamRulesResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageIndex?: int32(name='PageIndex'),
    pageSize?: int32(name='PageSize'),
    rules?: [ string ](name='Rules'),
    totalCount?: int32(name='TotalCount'),
    totalPage?: int32(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryParamRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryParamRulesResponseBody(name='body'),
}

async function queryParamRulesWithOptions(request: QueryParamRulesRequest, runtime: Util.RuntimeOptions): QueryParamRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryParamRules',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryParamRules(request: QueryParamRulesRequest): QueryParamRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryParamRulesWithOptions(request, runtime);
}

model QueryParamRulesWithNameRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  rule?: string(name='Rule'),
}

model QueryParamRulesWithNameResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageIndex?: int32(name='PageIndex'),
    pageSize?: int32(name='PageSize'),
    rules?: [ string ](name='Rules'),
    totalCount?: int32(name='TotalCount'),
    totalPage?: int32(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryParamRulesWithNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryParamRulesWithNameResponseBody(name='body'),
}

async function queryParamRulesWithNameWithOptions(request: QueryParamRulesWithNameRequest, runtime: Util.RuntimeOptions): QueryParamRulesWithNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.rule)) {
    query['Rule'] = request.rule;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryParamRulesWithName',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryParamRulesWithName(request: QueryParamRulesWithNameRequest): QueryParamRulesWithNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryParamRulesWithNameWithOptions(request, runtime);
}

model QueryParameHotKeysRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  rule?: string(name='Rule'),
}

model QueryParameHotKeysResponseBody = {
  code?: string(name='Code'),
  data?: {
    metrics?: [ 
      {
        name?: string(name='Name'),
        value?: int32(name='Value'),
      }
    ](name='Metrics'),
    pageIndex?: int32(name='PageIndex'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    totalPage?: int32(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryParameHotKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryParameHotKeysResponseBody(name='body'),
}

async function queryParameHotKeysWithOptions(request: QueryParameHotKeysRequest, runtime: Util.RuntimeOptions): QueryParameHotKeysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.rule)) {
    query['Rule'] = request.rule;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryParameHotKeys',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryParameHotKeys(request: QueryParameHotKeysRequest): QueryParameHotKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryParameHotKeysWithOptions(request, runtime);
}

model QueryPluginStatusRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  instanceId?: string(name='InstanceId'),
  namespace?: string(name='Namespace'),
}

model QueryPluginStatusResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    canAutoInstall?: boolean(name='canAutoInstall'),
    configurationId?: string(name='configurationId'),
    createTime?: long(name='createTime'),
    enable?: boolean(name='enable'),
    instanceId?: string(name='instanceId'),
    instanceName?: string(name='instanceName'),
    pluginStatus?: int32(name='pluginStatus'),
    pluginType?: string(name='pluginType'),
    privateIp?: string(name='privateIp'),
    publicIp?: string(name='publicIp'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryPluginStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPluginStatusResponseBody(name='body'),
}

async function queryPluginStatusWithOptions(request: QueryPluginStatusRequest, runtime: Util.RuntimeOptions): QueryPluginStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryPluginStatus',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPluginStatus(request: QueryPluginStatusRequest): QueryPluginStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPluginStatusWithOptions(request, runtime);
}

model QueryPluginsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  clusterId?: string(name='ClusterId'),
  instanceName?: string(name='InstanceName'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  pluginStatus?: int32(name='PluginStatus'),
  pluginType?: int32(name='PluginType'),
}

model QueryPluginsResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='currentPage'),
    pageSize?: int32(name='pageSize'),
    result?: [ 
      {
        appName?: string(name='appName'),
        canAutoInstall?: boolean(name='canAutoInstall'),
        chaosTools?: [ string ](name='chaosTools'),
        configurationId?: string(name='configurationId'),
        connectTime?: string(name='connectTime'),
        createTime?: long(name='createTime'),
        enable?: boolean(name='enable'),
        installMode?: string(name='installMode'),
        instanceId?: string(name='instanceId'),
        instanceName?: string(name='instanceName'),
        link?: string(name='link'),
        osType?: int32(name='osType'),
        pluginStatus?: int32(name='pluginStatus'),
        pluginType?: string(name='pluginType'),
        privateIp?: string(name='privateIp'),
        publicIp?: string(name='publicIp'),
        upgrade?: boolean(name='upgrade'),
        upgradeVersion?: string(name='upgradeVersion'),
        version?: string(name='version'),
      }
    ](name='result'),
    totalItem?: long(name='totalItem'),
    totalPage?: int32(name='totalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryPluginsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPluginsResponseBody(name='body'),
}

async function queryPluginsWithOptions(request: QueryPluginsRequest, runtime: Util.RuntimeOptions): QueryPluginsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pluginStatus)) {
    query['PluginStatus'] = request.pluginStatus;
  }
  if (!Util.isUnset(request.pluginType)) {
    query['PluginType'] = request.pluginType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryPlugins',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPlugins(request: QueryPluginsRequest): QueryPluginsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPluginsWithOptions(request, runtime);
}

model QueryQuickSceneByCategoryRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryQuickSceneByCategoryResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryQuickSceneByCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryQuickSceneByCategoryResponseBody(name='body'),
}

async function queryQuickSceneByCategoryWithOptions(request: QueryQuickSceneByCategoryRequest, runtime: Util.RuntimeOptions): QueryQuickSceneByCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryQuickSceneByCategory',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryQuickSceneByCategory(request: QueryQuickSceneByCategoryRequest): QueryQuickSceneByCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryQuickSceneByCategoryWithOptions(request, runtime);
}

model QueryQuickSceneCategoriesRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryQuickSceneCategoriesResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryQuickSceneCategoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryQuickSceneCategoriesResponseBody(name='body'),
}

async function queryQuickSceneCategoriesWithOptions(request: QueryQuickSceneCategoriesRequest, runtime: Util.RuntimeOptions): QueryQuickSceneCategoriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryQuickSceneCategories',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryQuickSceneCategories(request: QueryQuickSceneCategoriesRequest): QueryQuickSceneCategoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryQuickSceneCategoriesWithOptions(request, runtime);
}

model QueryRdsMetricsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  endTime?: string(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  keyword?: string(name='Keyword'),
  lang?: string(name='Lang'),
  metricName?: string(name='MetricName'),
  namespace?: string(name='Namespace'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  startTime?: string(name='StartTime'),
}

model QueryRdsMetricsResponseBody = {
  code?: string(name='Code'),
  data?: [  map[string]any ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryRdsMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRdsMetricsResponseBody(name='body'),
}

async function queryRdsMetricsWithOptions(request: QueryRdsMetricsRequest, runtime: Util.RuntimeOptions): QueryRdsMetricsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.metricName)) {
    query['MetricName'] = request.metricName;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryRdsMetrics',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRdsMetrics(request: QueryRdsMetricsRequest): QueryRdsMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRdsMetricsWithOptions(request, runtime);
}

model QueryRecentlyInstalledAhasAgentRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryRecentlyInstalledAhasAgentResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appName?: string(name='appName'),
      canAutoInstall?: boolean(name='canAutoInstall'),
      configurationId?: string(name='configurationId'),
      createTime?: long(name='createTime'),
      enable?: boolean(name='enable'),
      instanceId?: string(name='instanceId'),
      instanceName?: string(name='instanceName'),
      pluginStatus?: int32(name='pluginStatus'),
      pluginType?: string(name='pluginType'),
      privateIp?: string(name='privateIp'),
      publicIp?: string(name='publicIp'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryRecentlyInstalledAhasAgentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRecentlyInstalledAhasAgentResponseBody(name='body'),
}

async function queryRecentlyInstalledAhasAgentWithOptions(request: QueryRecentlyInstalledAhasAgentRequest, runtime: Util.RuntimeOptions): QueryRecentlyInstalledAhasAgentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryRecentlyInstalledAhasAgent',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRecentlyInstalledAhasAgent(request: QueryRecentlyInstalledAhasAgentRequest): QueryRecentlyInstalledAhasAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRecentlyInstalledAhasAgentWithOptions(request, runtime);
}

model QueryRecentlyInstalledJavaAgentRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  namespace?: string(name='Namespace'),
}

model QueryRecentlyInstalledJavaAgentResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appName?: string(name='appName'),
      canAutoInstall?: boolean(name='canAutoInstall'),
      configurationId?: string(name='configurationId'),
      createTime?: long(name='createTime'),
      enable?: boolean(name='enable'),
      instanceId?: string(name='instanceId'),
      instanceName?: string(name='instanceName'),
      pluginStatus?: int32(name='pluginStatus'),
      pluginType?: string(name='pluginType'),
      privateIp?: string(name='privateIp'),
      publicIp?: string(name='publicIp'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryRecentlyInstalledJavaAgentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRecentlyInstalledJavaAgentResponseBody(name='body'),
}

async function queryRecentlyInstalledJavaAgentWithOptions(request: QueryRecentlyInstalledJavaAgentRequest, runtime: Util.RuntimeOptions): QueryRecentlyInstalledJavaAgentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryRecentlyInstalledJavaAgent',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRecentlyInstalledJavaAgent(request: QueryRecentlyInstalledJavaAgentRequest): QueryRecentlyInstalledJavaAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRecentlyInstalledJavaAgentWithOptions(request, runtime);
}

model QueryRedisMetricsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  endTime?: string(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  keyword?: string(name='Keyword'),
  lang?: string(name='Lang'),
  metricName?: string(name='MetricName'),
  namespace?: string(name='Namespace'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  port?: string(name='Port'),
  startTime?: string(name='StartTime'),
  type?: string(name='Type'),
  vip?: string(name='Vip'),
}

model QueryRedisMetricsResponseBody = {
  code?: string(name='Code'),
  data?: [  map[string]any ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryRedisMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRedisMetricsResponseBody(name='body'),
}

async function queryRedisMetricsWithOptions(request: QueryRedisMetricsRequest, runtime: Util.RuntimeOptions): QueryRedisMetricsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.metricName)) {
    query['MetricName'] = request.metricName;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.vip)) {
    query['Vip'] = request.vip;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryRedisMetrics',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRedisMetrics(request: QueryRedisMetricsRequest): QueryRedisMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRedisMetricsWithOptions(request, runtime);
}

model QueryRelativeRatioQpsStatisticsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  end?: long(name='End'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
  start?: long(name='Start'),
}

model QueryRelativeRatioQpsStatisticsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      ratio?: float(name='Ratio'),
      time?: long(name='Time'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryRelativeRatioQpsStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRelativeRatioQpsStatisticsResponseBody(name='body'),
}

async function queryRelativeRatioQpsStatisticsWithOptions(request: QueryRelativeRatioQpsStatisticsRequest, runtime: Util.RuntimeOptions): QueryRelativeRatioQpsStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.end)) {
    query['End'] = request.end;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.start)) {
    query['Start'] = request.start;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryRelativeRatioQpsStatistics',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRelativeRatioQpsStatistics(request: QueryRelativeRatioQpsStatisticsRequest): QueryRelativeRatioQpsStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRelativeRatioQpsStatisticsWithOptions(request, runtime);
}

model QueryScenarioListRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryScenarioListResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      scenarioDesc?: string(name='scenarioDesc'),
      scenarioId?: string(name='scenarioId'),
      scenarioName?: string(name='scenarioName'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryScenarioListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryScenarioListResponseBody(name='body'),
}

async function queryScenarioListWithOptions(request: QueryScenarioListRequest, runtime: Util.RuntimeOptions): QueryScenarioListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryScenarioList',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryScenarioList(request: QueryScenarioListRequest): QueryScenarioListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryScenarioListWithOptions(request, runtime);
}

model QueryScenarioModifyRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  attackSuiteId?: string(name='AttackSuiteId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryScenarioModifyResponseBody = {
  code?: string(name='Code'),
  data?: {
    attackName?: string(name='attackName'),
    availablePoints?: [ string ](name='availablePoints'),
    checkPoints?: [ 
      {
        measure?: string(name='measure'),
        monitorPoint?: string(name='monitorPoint'),
        type?: string(name='type'),
        value?: string(name='value'),
      }
    ](name='checkPoints'),
    checkpointMeasures?: [ string ](name='checkpointMeasures'),
    checkpointTypes?: [ string ](name='checkpointTypes'),
    chosenPoints?: [ string ](name='chosenPoints'),
    id?: string(name='id'),
    name?: string(name='name'),
    scenarioComponentValues?: [ 
      {
        actions?: [ 
          {
            metaScenarioId?: string(name='metaScenarioId'),
            metaScenarioName?: string(name='metaScenarioName'),
            paramValues?: [ 
              {
                defaultValue?: string(name='defaultValue'),
                desc?: string(name='desc'),
                display?: boolean(name='display'),
                id?: string(name='id'),
                maxLength?: int32(name='maxLength'),
                minLength?: int32(name='minLength'),
                necessary?: boolean(name='necessary'),
                numberMaxValue?: long(name='numberMaxValue'),
                numberMinValue?: long(name='numberMinValue'),
                options?: [ string ](name='options'),
                placeholder?: string(name='placeholder'),
                tooltip?: string(name='tooltip'),
                type?: string(name='type'),
                unit?: string(name='unit'),
                value?: string(name='value'),
              }
            ](name='paramValues'),
          }
        ](name='actions'),
        hosts?: [ 
          {
            configurationId?: string(name='configurationId'),
            deviceIp?: string(name='deviceIp'),
          }
        ](name='hosts'),
        id?: string(name='id'),
        name?: string(name='name'),
      }
    ](name='scenarioComponentValues'),
    startTime?: long(name='startTime'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryScenarioModifyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryScenarioModifyResponseBody(name='body'),
}

async function queryScenarioModifyWithOptions(request: QueryScenarioModifyRequest, runtime: Util.RuntimeOptions): QueryScenarioModifyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.attackSuiteId)) {
    query['AttackSuiteId'] = request.attackSuiteId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryScenarioModify',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryScenarioModify(request: QueryScenarioModifyRequest): QueryScenarioModifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryScenarioModifyWithOptions(request, runtime);
}

model QuerySceneFunctionByCategoryIdRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QuerySceneFunctionByCategoryIdResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySceneFunctionByCategoryIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySceneFunctionByCategoryIdResponseBody(name='body'),
}

async function querySceneFunctionByCategoryIdWithOptions(request: QuerySceneFunctionByCategoryIdRequest, runtime: Util.RuntimeOptions): QuerySceneFunctionByCategoryIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySceneFunctionByCategoryId',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySceneFunctionByCategoryId(request: QuerySceneFunctionByCategoryIdRequest): QuerySceneFunctionByCategoryIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySceneFunctionByCategoryIdWithOptions(request, runtime);
}

model QuerySceneFunctionByIdRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QuerySceneFunctionByIdResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySceneFunctionByIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySceneFunctionByIdResponseBody(name='body'),
}

async function querySceneFunctionByIdWithOptions(request: QuerySceneFunctionByIdRequest, runtime: Util.RuntimeOptions): QuerySceneFunctionByIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySceneFunctionById',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySceneFunctionById(request: QuerySceneFunctionByIdRequest): QuerySceneFunctionByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySceneFunctionByIdWithOptions(request, runtime);
}

model QuerySceneFunctionCategoriesRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QuerySceneFunctionCategoriesResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySceneFunctionCategoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySceneFunctionCategoriesResponseBody(name='body'),
}

async function querySceneFunctionCategoriesWithOptions(request: QuerySceneFunctionCategoriesRequest, runtime: Util.RuntimeOptions): QuerySceneFunctionCategoriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySceneFunctionCategories',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySceneFunctionCategories(request: QuerySceneFunctionCategoriesRequest): QuerySceneFunctionCategoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySceneFunctionCategoriesWithOptions(request, runtime);
}

model QuerySceneFunctionChangeLogRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QuerySceneFunctionChangeLogResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySceneFunctionChangeLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySceneFunctionChangeLogResponseBody(name='body'),
}

async function querySceneFunctionChangeLogWithOptions(request: QuerySceneFunctionChangeLogRequest, runtime: Util.RuntimeOptions): QuerySceneFunctionChangeLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySceneFunctionChangeLog',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySceneFunctionChangeLog(request: QuerySceneFunctionChangeLogRequest): QuerySceneFunctionChangeLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySceneFunctionChangeLogWithOptions(request, runtime);
}

model QuerySceneFunctionPageableRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QuerySceneFunctionPageableResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySceneFunctionPageableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySceneFunctionPageableResponseBody(name='body'),
}

async function querySceneFunctionPageableWithOptions(request: QuerySceneFunctionPageableRequest, runtime: Util.RuntimeOptions): QuerySceneFunctionPageableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySceneFunctionPageable',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySceneFunctionPageable(request: QuerySceneFunctionPageableRequest): QuerySceneFunctionPageableResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySceneFunctionPageableWithOptions(request, runtime);
}

model QuerySceneFunctionParametersRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QuerySceneFunctionParametersResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySceneFunctionParametersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySceneFunctionParametersResponseBody(name='body'),
}

async function querySceneFunctionParametersWithOptions(request: QuerySceneFunctionParametersRequest, runtime: Util.RuntimeOptions): QuerySceneFunctionParametersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySceneFunctionParameters',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySceneFunctionParameters(request: QuerySceneFunctionParametersRequest): QuerySceneFunctionParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySceneFunctionParametersWithOptions(request, runtime);
}

model QuerySceneFunctionUsedCountByIdRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QuerySceneFunctionUsedCountByIdResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySceneFunctionUsedCountByIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySceneFunctionUsedCountByIdResponseBody(name='body'),
}

async function querySceneFunctionUsedCountByIdWithOptions(request: QuerySceneFunctionUsedCountByIdRequest, runtime: Util.RuntimeOptions): QuerySceneFunctionUsedCountByIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySceneFunctionUsedCountById',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySceneFunctionUsedCountById(request: QuerySceneFunctionUsedCountByIdRequest): QuerySceneFunctionUsedCountByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySceneFunctionUsedCountByIdWithOptions(request, runtime);
}

model QuerySceneFunctionsByCodeRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QuerySceneFunctionsByCodeResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySceneFunctionsByCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySceneFunctionsByCodeResponseBody(name='body'),
}

async function querySceneFunctionsByCodeWithOptions(request: QuerySceneFunctionsByCodeRequest, runtime: Util.RuntimeOptions): QuerySceneFunctionsByCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySceneFunctionsByCode',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySceneFunctionsByCode(request: QuerySceneFunctionsByCodeRequest): QuerySceneFunctionsByCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySceneFunctionsByCodeWithOptions(request, runtime);
}

model QuerySceneFunctionsBySceneRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QuerySceneFunctionsBySceneResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySceneFunctionsBySceneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySceneFunctionsBySceneResponseBody(name='body'),
}

async function querySceneFunctionsBySceneWithOptions(request: QuerySceneFunctionsBySceneRequest, runtime: Util.RuntimeOptions): QuerySceneFunctionsBySceneResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySceneFunctionsByScene',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySceneFunctionsByScene(request: QuerySceneFunctionsBySceneRequest): QuerySceneFunctionsBySceneResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySceneFunctionsBySceneWithOptions(request, runtime);
}

model QueryScenePageableRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryScenePageableResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryScenePageableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryScenePageableResponseBody(name='body'),
}

async function queryScenePageableWithOptions(request: QueryScenePageableRequest, runtime: Util.RuntimeOptions): QueryScenePageableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryScenePageable',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryScenePageable(request: QueryScenePageableRequest): QueryScenePageableResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryScenePageableWithOptions(request, runtime);
}

model QueryScopeInfoRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryScopeInfoResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryScopeInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryScopeInfoResponseBody(name='body'),
}

async function queryScopeInfoWithOptions(request: QueryScopeInfoRequest, runtime: Util.RuntimeOptions): QueryScopeInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryScopeInfo',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryScopeInfo(request: QueryScopeInfoRequest): QueryScopeInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryScopeInfoWithOptions(request, runtime);
}

model QuerySentinelAppSummaryMetricOverviewRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QuerySentinelAppSummaryMetricOverviewResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    blockQps5m?: float(name='blockQps_5m'),
    chainBlockQps5m?: float(name='chainBlockQps_5m'),
    chainExpQps5m?: float(name='chainExpQps_5m'),
    chainPassQps5m?: float(name='chainPassQps_5m'),
    chainRtAvg?: float(name='chainRtAvg'),
    curMetics?: [ 
      {
        appName?: string(name='appName'),
        blockedQps?: float(name='blockedQps'),
        count?: int32(name='count'),
        exception?: float(name='exception'),
        grayQps?: float(name='grayQps'),
        namespace?: string(name='namespace'),
        passedQps?: float(name='passedQps'),
        resource?: string(name='resource'),
        rt?: float(name='rt'),
        successQps?: float(name='successQps'),
        thread?: float(name='thread'),
        timestamp?: long(name='timestamp'),
        type?: int32(name='type'),
        userId?: string(name='userId'),
      }
    ](name='curMetics'),
    degradeRuleCount?: int32(name='degradeRuleCount'),
    expQps5m?: float(name='expQps_5m'),
    flowRuleCount?: int32(name='flowRuleCount'),
    machineCount?: int32(name='machineCount'),
    namespace?: string(name='namespace'),
    passQps5m?: float(name='passQps_5m'),
    rtAvg?: float(name='rtAvg'),
    systemRuleCount?: int32(name='systemRuleCount'),
    userId?: string(name='userId'),
    ydBlockQps5m?: float(name='ydBlockQps_5m'),
    ydExpQps5m?: float(name='ydExpQps_5m'),
    ydPassQps5m?: float(name='ydPassQps_5m'),
    ydRtAvg?: float(name='ydRtAvg'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySentinelAppSummaryMetricOverviewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySentinelAppSummaryMetricOverviewResponseBody(name='body'),
}

async function querySentinelAppSummaryMetricOverviewWithOptions(request: QuerySentinelAppSummaryMetricOverviewRequest, runtime: Util.RuntimeOptions): QuerySentinelAppSummaryMetricOverviewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySentinelAppSummaryMetricOverview',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySentinelAppSummaryMetricOverview(request: QuerySentinelAppSummaryMetricOverviewRequest): QuerySentinelAppSummaryMetricOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySentinelAppSummaryMetricOverviewWithOptions(request, runtime);
}

model QuerySentinelHistoryMetricsOfResourceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
  startTime?: long(name='StartTime'),
}

model QuerySentinelHistoryMetricsOfResourceResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appName?: string(name='appName'),
      passQpsL1?: float(name='passQpsL1'),
      resource?: string(name='resource'),
      rtL1?: float(name='rtL1'),
      timestamp?: long(name='timestamp'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySentinelHistoryMetricsOfResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySentinelHistoryMetricsOfResourceResponseBody(name='body'),
}

async function querySentinelHistoryMetricsOfResourceWithOptions(request: QuerySentinelHistoryMetricsOfResourceRequest, runtime: Util.RuntimeOptions): QuerySentinelHistoryMetricsOfResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySentinelHistoryMetricsOfResource',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySentinelHistoryMetricsOfResource(request: QuerySentinelHistoryMetricsOfResourceRequest): QuerySentinelHistoryMetricsOfResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySentinelHistoryMetricsOfResourceWithOptions(request, runtime);
}

model QuerySentinelHotparamRuleRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  model?: long(name='Model'),
  namespace?: string(name='Namespace'),
  tags?: string(name='Tags'),
}

model QuerySentinelHotparamRuleResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appName?: string(name='appName'),
      burstCount?: int32(name='burstCount'),
      clusterFailFallback?: boolean(name='clusterFailFallback'),
      clusterMode?: boolean(name='clusterMode'),
      clusterThresholdType?: int32(name='clusterThresholdType'),
      controlBehavior?: int32(name='controlBehavior'),
      count?: float(name='count'),
      durationInSec?: long(name='durationInSec'),
      enable?: boolean(name='enable'),
      grade?: int32(name='grade'),
      id?: long(name='id'),
      limitApp?: string(name='limitApp'),
      maxQueueingTimeMs?: int32(name='maxQueueingTimeMs'),
      namespace?: string(name='namespace'),
      paramFlowItemList?: [ 
        {
          classType?: string(name='classType'),
          count?: int32(name='count'),
          object?: string(name='object'),
        }
      ](name='paramFlowItemList'),
      paramIdx?: int32(name='paramIdx'),
      resource?: string(name='resource'),
      sampleCount?: int32(name='sampleCount'),
      tags?: [ string ](name='tags'),
      userId?: string(name='userId'),
      windowIntervalMs?: int32(name='windowIntervalMs'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySentinelHotparamRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySentinelHotparamRuleResponseBody(name='body'),
}

async function querySentinelHotparamRuleWithOptions(request: QuerySentinelHotparamRuleRequest, runtime: Util.RuntimeOptions): QuerySentinelHotparamRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.model)) {
    query['Model'] = request.model;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySentinelHotparamRule',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySentinelHotparamRule(request: QuerySentinelHotparamRuleRequest): QuerySentinelHotparamRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySentinelHotparamRuleWithOptions(request, runtime);
}

model QuerySentinelHotparamRuleOfResourceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
}

model QuerySentinelHotparamRuleOfResourceResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appName?: string(name='appName'),
      burstCount?: int32(name='burstCount'),
      clusterFailFallback?: boolean(name='clusterFailFallback'),
      clusterMode?: boolean(name='clusterMode'),
      clusterThresholdType?: int32(name='clusterThresholdType'),
      controlBehavior?: int32(name='controlBehavior'),
      count?: float(name='count'),
      durationInSec?: long(name='durationInSec'),
      enable?: boolean(name='enable'),
      grade?: int32(name='grade'),
      id?: long(name='id'),
      limitApp?: string(name='limitApp'),
      maxQueueingTimeMs?: int32(name='maxQueueingTimeMs'),
      namespace?: string(name='namespace'),
      paramFlowItemList?: [ 
        {
          classType?: string(name='classType'),
          count?: int32(name='count'),
          object?: string(name='object'),
        }
      ](name='paramFlowItemList'),
      paramIdx?: int32(name='paramIdx'),
      resource?: string(name='resource'),
      sampleCount?: int32(name='sampleCount'),
      tags?: [ string ](name='tags'),
      userId?: string(name='userId'),
      windowIntervalMs?: int32(name='windowIntervalMs'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySentinelHotparamRuleOfResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySentinelHotparamRuleOfResourceResponseBody(name='body'),
}

async function querySentinelHotparamRuleOfResourceWithOptions(request: QuerySentinelHotparamRuleOfResourceRequest, runtime: Util.RuntimeOptions): QuerySentinelHotparamRuleOfResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySentinelHotparamRuleOfResource',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySentinelHotparamRuleOfResource(request: QuerySentinelHotparamRuleOfResourceRequest): QuerySentinelHotparamRuleOfResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySentinelHotparamRuleOfResourceWithOptions(request, runtime);
}

model QuerySentinelMacMetricsOfResourceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  processConfigurationId?: string(name='ProcessConfigurationId'),
  resource?: string(name='Resource'),
  startTime?: long(name='StartTime'),
}

model QuerySentinelMacMetricsOfResourceResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    blockedQps?: float(name='blockedQps'),
    deviceConfigurationId?: string(name='deviceConfigurationId'),
    deviceId?: string(name='deviceId'),
    exception?: float(name='exception'),
    grayQps?: float(name='grayQps'),
    hostname?: string(name='hostname'),
    innerMetrics?: [ 
      {
        appName?: string(name='appName'),
        blockedQps?: float(name='blockedQps'),
        count?: int32(name='count'),
        degradeRuleId?: float(name='degradeRuleId'),
        degradeRuleQPS?: float(name='degradeRuleQPS'),
        exception?: float(name='exception'),
        flowRuleId?: float(name='flowRuleId'),
        flowRuleQPS?: float(name='flowRuleQPS'),
        grayQps?: float(name='grayQps'),
        manualDegradeRuleId?: float(name='manualDegradeRuleId'),
        manualDegradeRuleQPS?: float(name='manualDegradeRuleQPS'),
        namespace?: string(name='namespace'),
        paramRuleId?: float(name='paramRuleId'),
        paramRuleQPS?: float(name='paramRuleQPS'),
        passedQps?: float(name='passedQps'),
        resource?: string(name='resource'),
        rt?: float(name='rt'),
        successQps?: float(name='successQps'),
        systemRuleId?: float(name='systemRuleId'),
        systemRuleQPS?: float(name='systemRuleQPS'),
        thread?: float(name='thread'),
        timestamp?: long(name='timestamp'),
        userId?: string(name='userId'),
      }
    ](name='innerMetrics'),
    namespace?: string(name='namespace'),
    parentIp?: string(name='parentIp'),
    passedQps?: float(name='passedQps'),
    pid?: int32(name='pid'),
    privateIp?: string(name='privateIp'),
    processConfigurationId?: string(name='processConfigurationId'),
    resource?: string(name='resource'),
    rt?: float(name='rt'),
    userId?: string(name='userId'),
    vpcId?: string(name='vpcId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySentinelMacMetricsOfResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySentinelMacMetricsOfResourceResponseBody(name='body'),
}

async function querySentinelMacMetricsOfResourceWithOptions(request: QuerySentinelMacMetricsOfResourceRequest, runtime: Util.RuntimeOptions): QuerySentinelMacMetricsOfResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.processConfigurationId)) {
    query['ProcessConfigurationId'] = request.processConfigurationId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySentinelMacMetricsOfResource',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySentinelMacMetricsOfResource(request: QuerySentinelMacMetricsOfResourceRequest): QuerySentinelMacMetricsOfResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySentinelMacMetricsOfResourceWithOptions(request, runtime);
}

model QuerySentinelMetricsOfResourceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
  startTime?: long(name='StartTime'),
}

model QuerySentinelMetricsOfResourceResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    innerMetrics?: [ 
      {
        blockedQps?: float(name='blockedQps'),
        blockedQpsAvg?: float(name='blockedQpsAvg'),
        blockedQpsMax?: float(name='blockedQpsMax'),
        blockedQpsMin?: float(name='blockedQpsMin'),
        blockedQpsP75?: float(name='blockedQpsP75'),
        blockedQpsP95?: float(name='blockedQpsP95'),
        blockedQpsP99?: float(name='blockedQpsP99'),
        blockedQpsStd?: float(name='blockedQpsStd'),
        count?: int32(name='count'),
        degradeRuleId?: float(name='degradeRuleId'),
        degradeRuleQPS?: float(name='degradeRuleQPS'),
        exception?: float(name='exception'),
        exceptionAvg?: float(name='exceptionAvg'),
        exceptionMax?: float(name='exceptionMax'),
        exceptionMin?: float(name='exceptionMin'),
        exceptionP75?: float(name='exceptionP75'),
        exceptionP95?: float(name='exceptionP95'),
        exceptionP99?: float(name='exceptionP99'),
        exceptionStd?: float(name='exceptionStd'),
        flowRuleId?: float(name='flowRuleId'),
        flowRuleQPS?: float(name='flowRuleQPS'),
        grayQps?: float(name='grayQps'),
        grayQpsAvg?: float(name='grayQpsAvg'),
        grayQpsMax?: float(name='grayQpsMax'),
        grayQpsMin?: float(name='grayQpsMin'),
        grayQpsP75?: float(name='grayQpsP75'),
        grayQpsP95?: float(name='grayQpsP95'),
        grayQpsP99?: float(name='grayQpsP99'),
        grayQpsStd?: float(name='grayQpsStd'),
        manualDegradeRuleId?: float(name='manualDegradeRuleId'),
        manualDegradeRuleQPS?: float(name='manualDegradeRuleQPS'),
        paramRuleId?: float(name='paramRuleId'),
        paramRuleQPS?: float(name='paramRuleQPS'),
        passedQps?: float(name='passedQps'),
        passedQpsAvg?: float(name='passedQpsAvg'),
        passedQpsMax?: float(name='passedQpsMax'),
        passedQpsMin?: float(name='passedQpsMin'),
        passedQpsP75?: float(name='passedQpsP75'),
        passedQpsP95?: float(name='passedQpsP95'),
        passedQpsP99?: float(name='passedQpsP99'),
        passedQpsStd?: float(name='passedQpsStd'),
        rt?: float(name='rt'),
        rtAvg?: float(name='rtAvg'),
        rtMax?: float(name='rtMax'),
        rtMin?: float(name='rtMin'),
        rtP75?: float(name='rtP75'),
        rtP95?: float(name='rtP95'),
        rtP99?: float(name='rtP99'),
        rtStd?: float(name='rtStd'),
        successQps?: float(name='successQps'),
        successQpsAvg?: float(name='successQpsAvg'),
        successQpsMax?: float(name='successQpsMax'),
        successQpsMin?: float(name='successQpsMin'),
        successQpsP75?: float(name='successQpsP75'),
        successQpsP95?: float(name='successQpsP95'),
        successQpsP99?: float(name='successQpsP99'),
        successQpsStd?: float(name='successQpsStd'),
        systemRuleId?: float(name='systemRuleId'),
        systemRuleQPS?: float(name='systemRuleQPS'),
        thread?: float(name='thread'),
        threadAvg?: float(name='threadAvg'),
        threadMax?: float(name='threadMax'),
        threadMin?: float(name='threadMin'),
        threadP75?: float(name='threadP75'),
        threadP95?: float(name='threadP95'),
        threadP99?: float(name='threadP99'),
        threadStd?: float(name='threadStd'),
        timestamp?: long(name='timestamp'),
      }
    ](name='innerMetrics'),
    namespace?: string(name='namespace'),
    resource?: string(name='resource'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySentinelMetricsOfResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySentinelMetricsOfResourceResponseBody(name='body'),
}

async function querySentinelMetricsOfResourceWithOptions(request: QuerySentinelMetricsOfResourceRequest, runtime: Util.RuntimeOptions): QuerySentinelMetricsOfResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySentinelMetricsOfResource',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySentinelMetricsOfResource(request: QuerySentinelMetricsOfResourceRequest): QuerySentinelMetricsOfResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySentinelMetricsOfResourceWithOptions(request, runtime);
}

model QuerySentinelRuleInfoRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  sourceType?: string(name='SourceType'),
}

model QuerySentinelRuleInfoResponseBody = {
  code?: string(name='Code'),
  data?: {
    allRules?: map[string]any(name='AllRules'),
    allRulesCount?: long(name='AllRulesCount'),
    effectRules?: map[string]any(name='EffectRules'),
    effectRulesCount?: long(name='EffectRulesCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySentinelRuleInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySentinelRuleInfoResponseBody(name='body'),
}

async function querySentinelRuleInfoWithOptions(request: QuerySentinelRuleInfoRequest, runtime: Util.RuntimeOptions): QuerySentinelRuleInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySentinelRuleInfo',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySentinelRuleInfo(request: QuerySentinelRuleInfoRequest): QuerySentinelRuleInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySentinelRuleInfoWithOptions(request, runtime);
}

model QuerySingleSystemResourceMetricOfResourceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  group?: string(name='Group'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
  startTime?: long(name='StartTime'),
}

model QuerySingleSystemResourceMetricOfResourceResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      resource?: string(name='Resource'),
      time?: long(name='Time'),
      val?: float(name='Val'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySingleSystemResourceMetricOfResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySingleSystemResourceMetricOfResourceResponseBody(name='body'),
}

async function querySingleSystemResourceMetricOfResourceWithOptions(request: QuerySingleSystemResourceMetricOfResourceRequest, runtime: Util.RuntimeOptions): QuerySingleSystemResourceMetricOfResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySingleSystemResourceMetricOfResource',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySingleSystemResourceMetricOfResource(request: QuerySingleSystemResourceMetricOfResourceRequest): QuerySingleSystemResourceMetricOfResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySingleSystemResourceMetricOfResourceWithOptions(request, runtime);
}

model QuerySingleSystemResourceMetricOfResourceOnNodeRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  group?: string(name='Group'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  processConfigurationId?: string(name='ProcessConfigurationId'),
  resource?: string(name='Resource'),
  startTime?: long(name='StartTime'),
}

model QuerySingleSystemResourceMetricOfResourceOnNodeResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      resource?: string(name='Resource'),
      time?: long(name='Time'),
      val?: float(name='Val'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySingleSystemResourceMetricOfResourceOnNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySingleSystemResourceMetricOfResourceOnNodeResponseBody(name='body'),
}

async function querySingleSystemResourceMetricOfResourceOnNodeWithOptions(request: QuerySingleSystemResourceMetricOfResourceOnNodeRequest, runtime: Util.RuntimeOptions): QuerySingleSystemResourceMetricOfResourceOnNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.processConfigurationId)) {
    query['ProcessConfigurationId'] = request.processConfigurationId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySingleSystemResourceMetricOfResourceOnNode',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySingleSystemResourceMetricOfResourceOnNode(request: QuerySingleSystemResourceMetricOfResourceOnNodeRequest): QuerySingleSystemResourceMetricOfResourceOnNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySingleSystemResourceMetricOfResourceOnNodeWithOptions(request, runtime);
}

model QuerySlbMetricsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  endTime?: string(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  keyword?: string(name='Keyword'),
  lang?: string(name='Lang'),
  metricName?: string(name='MetricName'),
  namespace?: string(name='Namespace'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  port?: string(name='Port'),
  startTime?: string(name='StartTime'),
  vip?: string(name='Vip'),
}

model QuerySlbMetricsResponseBody = {
  code?: string(name='Code'),
  data?: [  map[string]any ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySlbMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySlbMetricsResponseBody(name='body'),
}

async function querySlbMetricsWithOptions(request: QuerySlbMetricsRequest, runtime: Util.RuntimeOptions): QuerySlbMetricsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.metricName)) {
    query['MetricName'] = request.metricName;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.vip)) {
    query['Vip'] = request.vip;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySlbMetrics',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySlbMetrics(request: QuerySlbMetricsRequest): QuerySlbMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySlbMetricsWithOptions(request, runtime);
}

model QueryStatusNotFineOfApplicationRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  startTime?: long(name='StartTime'),
}

model QueryStatusNotFineOfApplicationResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      errorNum?: float(name='ErrorNum'),
      is200?: float(name='Is200'),
      like2xx?: float(name='Like2xx'),
      like3xx?: float(name='Like3xx'),
      like4xx?: float(name='Like4xx'),
      like5xx?: float(name='Like5xx'),
      time?: long(name='Time'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryStatusNotFineOfApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryStatusNotFineOfApplicationResponseBody(name='body'),
}

async function queryStatusNotFineOfApplicationWithOptions(request: QueryStatusNotFineOfApplicationRequest, runtime: Util.RuntimeOptions): QueryStatusNotFineOfApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryStatusNotFineOfApplication',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryStatusNotFineOfApplication(request: QueryStatusNotFineOfApplicationRequest): QueryStatusNotFineOfApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryStatusNotFineOfApplicationWithOptions(request, runtime);
}

model QueryStatusNotFineOfResourceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
  startTime?: long(name='StartTime'),
}

model QueryStatusNotFineOfResourceResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      errorNum?: float(name='ErrorNum'),
      is200?: float(name='Is200'),
      like2xx?: float(name='Like2xx'),
      like3xx?: float(name='Like3xx'),
      like4xx?: float(name='Like4xx'),
      like5xx?: float(name='Like5xx'),
      time?: long(name='Time'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryStatusNotFineOfResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryStatusNotFineOfResourceResponseBody(name='body'),
}

async function queryStatusNotFineOfResourceWithOptions(request: QueryStatusNotFineOfResourceRequest, runtime: Util.RuntimeOptions): QueryStatusNotFineOfResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryStatusNotFineOfResource',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryStatusNotFineOfResource(request: QueryStatusNotFineOfResourceRequest): QueryStatusNotFineOfResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryStatusNotFineOfResourceWithOptions(request, runtime);
}

model QueryStatusNotFineOfResourceOnNodeRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  processConfigurationId?: string(name='ProcessConfigurationId'),
  resource?: string(name='Resource'),
  startTime?: long(name='StartTime'),
}

model QueryStatusNotFineOfResourceOnNodeResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      errorNum?: float(name='ErrorNum'),
      is200?: float(name='Is200'),
      like2xx?: float(name='Like2xx'),
      like3xx?: float(name='Like3xx'),
      like4xx?: float(name='Like4xx'),
      like5xx?: float(name='Like5xx'),
      time?: long(name='Time'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryStatusNotFineOfResourceOnNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryStatusNotFineOfResourceOnNodeResponseBody(name='body'),
}

async function queryStatusNotFineOfResourceOnNodeWithOptions(request: QueryStatusNotFineOfResourceOnNodeRequest, runtime: Util.RuntimeOptions): QueryStatusNotFineOfResourceOnNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.processConfigurationId)) {
    query['ProcessConfigurationId'] = request.processConfigurationId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryStatusNotFineOfResourceOnNode',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryStatusNotFineOfResourceOnNode(request: QueryStatusNotFineOfResourceOnNodeRequest): QueryStatusNotFineOfResourceOnNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryStatusNotFineOfResourceOnNodeWithOptions(request, runtime);
}

model QueryStatusTopOfApplicationRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  startTime?: long(name='StartTime'),
}

model QueryStatusTopOfApplicationResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      key?: string(name='Key'),
      processConfigurationId?: string(name='ProcessConfigurationId'),
      time?: long(name='Time'),
      val?: float(name='Val'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryStatusTopOfApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryStatusTopOfApplicationResponseBody(name='body'),
}

async function queryStatusTopOfApplicationWithOptions(request: QueryStatusTopOfApplicationRequest, runtime: Util.RuntimeOptions): QueryStatusTopOfApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryStatusTopOfApplication',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryStatusTopOfApplication(request: QueryStatusTopOfApplicationRequest): QueryStatusTopOfApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryStatusTopOfApplicationWithOptions(request, runtime);
}

model QueryStatusTopOfResourceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
  startTime?: long(name='StartTime'),
}

model QueryStatusTopOfResourceResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      key?: string(name='Key'),
      processConfigurationId?: string(name='ProcessConfigurationId'),
      time?: long(name='Time'),
      val?: float(name='Val'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryStatusTopOfResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryStatusTopOfResourceResponseBody(name='body'),
}

async function queryStatusTopOfResourceWithOptions(request: QueryStatusTopOfResourceRequest, runtime: Util.RuntimeOptions): QueryStatusTopOfResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryStatusTopOfResource',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryStatusTopOfResource(request: QueryStatusTopOfResourceRequest): QueryStatusTopOfResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryStatusTopOfResourceWithOptions(request, runtime);
}

model QuerySubUserAuthListRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QuerySubUserAuthListResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      delete?: string(name='delete'),
      displayName?: string(name='displayName'),
      id?: long(name='id'),
      parentUid?: string(name='parentUid'),
      roleType?: int32(name='roleType'),
      subUserId?: string(name='subUserId'),
      userName?: string(name='userName'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySubUserAuthListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySubUserAuthListResponseBody(name='body'),
}

async function querySubUserAuthListWithOptions(request: QuerySubUserAuthListRequest, runtime: Util.RuntimeOptions): QuerySubUserAuthListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySubUserAuthList',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySubUserAuthList(request: QuerySubUserAuthListRequest): QuerySubUserAuthListResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySubUserAuthListWithOptions(request, runtime);
}

model QuerySummaryExpressRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QuerySummaryExpressResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      hot?: boolean(name='hot'),
      latest?: boolean(name='latest'),
      link?: string(name='link'),
      title?: string(name='title'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySummaryExpressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySummaryExpressResponseBody(name='body'),
}

async function querySummaryExpressWithOptions(request: QuerySummaryExpressRequest, runtime: Util.RuntimeOptions): QuerySummaryExpressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySummaryExpress',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySummaryExpress(request: QuerySummaryExpressRequest): QuerySummaryExpressResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySummaryExpressWithOptions(request, runtime);
}

model QuerySummaryNoticeRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QuerySummaryNoticeResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySummaryNoticeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySummaryNoticeResponseBody(name='body'),
}

async function querySummaryNoticeWithOptions(request: QuerySummaryNoticeRequest, runtime: Util.RuntimeOptions): QuerySummaryNoticeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySummaryNotice',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySummaryNotice(request: QuerySummaryNoticeRequest): QuerySummaryNoticeResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySummaryNoticeWithOptions(request, runtime);
}

model QuerySwitchDetailRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  ip?: string(name='Ip'),
  nameSpace?: string(name='NameSpace'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  switchName?: string(name='SwitchName'),
  switchNameSpace?: string(name='SwitchNameSpace'),
}

model QuerySwitchDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    data?: [ string ](name='Data'),
    pageNo?: long(name='PageNo'),
    totalCount?: long(name='TotalCount'),
    totalPage?: long(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySwitchDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySwitchDetailResponseBody(name='body'),
}

async function querySwitchDetailWithOptions(request: QuerySwitchDetailRequest, runtime: Util.RuntimeOptions): QuerySwitchDetailResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySwitchDetail',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySwitchDetail(request: QuerySwitchDetailRequest): QuerySwitchDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySwitchDetailWithOptions(request, runtime);
}

model QuerySystemEnumsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QuerySystemEnumsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySystemEnumsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySystemEnumsResponseBody(name='body'),
}

async function querySystemEnumsWithOptions(request: QuerySystemEnumsRequest, runtime: Util.RuntimeOptions): QuerySystemEnumsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySystemEnums',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySystemEnums(request: QuerySystemEnumsRequest): QuerySystemEnumsResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySystemEnumsWithOptions(request, runtime);
}

model QuerySystemResourceMetricOfGroupRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  group?: string(name='Group'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  startTime?: long(name='StartTime'),
}

model QuerySystemResourceMetricOfGroupResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      resource?: string(name='Resource'),
      time?: long(name='Time'),
      val?: float(name='Val'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySystemResourceMetricOfGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySystemResourceMetricOfGroupResponseBody(name='body'),
}

async function querySystemResourceMetricOfGroupWithOptions(request: QuerySystemResourceMetricOfGroupRequest, runtime: Util.RuntimeOptions): QuerySystemResourceMetricOfGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySystemResourceMetricOfGroup',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySystemResourceMetricOfGroup(request: QuerySystemResourceMetricOfGroupRequest): QuerySystemResourceMetricOfGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySystemResourceMetricOfGroupWithOptions(request, runtime);
}

model QuerySystemResourceMetricOfGroupOnNodeRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  group?: string(name='Group'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  processConfigurationId?: string(name='ProcessConfigurationId'),
  startTime?: long(name='StartTime'),
}

model QuerySystemResourceMetricOfGroupOnNodeResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      resource?: string(name='Resource'),
      time?: long(name='Time'),
      val?: float(name='Val'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySystemResourceMetricOfGroupOnNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySystemResourceMetricOfGroupOnNodeResponseBody(name='body'),
}

async function querySystemResourceMetricOfGroupOnNodeWithOptions(request: QuerySystemResourceMetricOfGroupOnNodeRequest, runtime: Util.RuntimeOptions): QuerySystemResourceMetricOfGroupOnNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.processConfigurationId)) {
    query['ProcessConfigurationId'] = request.processConfigurationId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySystemResourceMetricOfGroupOnNode',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySystemResourceMetricOfGroupOnNode(request: QuerySystemResourceMetricOfGroupOnNodeRequest): QuerySystemResourceMetricOfGroupOnNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySystemResourceMetricOfGroupOnNodeWithOptions(request, runtime);
}

model QuerySystemStatResourceMetricOfResourceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  group?: string(name='Group'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
}

model QuerySystemStatResourceMetricOfResourceResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='AppName'),
    group?: string(name='Group'),
    metrics?: [ string ](name='Metrics'),
    namespace?: string(name='Namespace'),
    resource?: string(name='Resource'),
    statusMacPoints?: [ 
      {
        group?: string(name='Group'),
        hostname?: string(name='Hostname'),
        parentId?: string(name='ParentId'),
        pid?: int32(name='Pid'),
        processConfigurationId?: string(name='ProcessConfigurationId'),
        resource?: string(name='Resource'),
        time?: long(name='Time'),
        val?: float(name='Val'),
        vpcId?: string(name='VpcId'),
      }
    ](name='StatusMacPoints'),
    timestamp?: long(name='Timestamp'),
    userId?: string(name='UserId'),
    valAvg?: float(name='ValAvg'),
    valMax?: float(name='ValMax'),
    valMin?: float(name='ValMin'),
    valP75?: float(name='ValP75'),
    valP95?: float(name='ValP95'),
    valP99?: float(name='ValP99'),
    valStd?: float(name='ValStd'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySystemStatResourceMetricOfResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySystemStatResourceMetricOfResourceResponseBody(name='body'),
}

async function querySystemStatResourceMetricOfResourceWithOptions(request: QuerySystemStatResourceMetricOfResourceRequest, runtime: Util.RuntimeOptions): QuerySystemStatResourceMetricOfResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySystemStatResourceMetricOfResource',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySystemStatResourceMetricOfResource(request: QuerySystemStatResourceMetricOfResourceRequest): QuerySystemStatResourceMetricOfResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySystemStatResourceMetricOfResourceWithOptions(request, runtime);
}

model QueryThermodynamicDataRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  ahasTimestamp?: long(name='AhasTimestamp'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
}

model QueryThermodynamicDataResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appName?: string(name='appName'),
      deviceId?: string(name='deviceId'),
      innerMetric?: {
        appName?: string(name='appName'),
        blockedQps?: float(name='blockedQps'),
        count?: int32(name='count'),
        exception?: float(name='exception'),
        namespace?: string(name='namespace'),
        passedQps?: float(name='passedQps'),
        resource?: string(name='resource'),
        rt?: float(name='rt'),
        successQps?: float(name='successQps'),
        timestamp?: long(name='timestamp'),
        userId?: string(name='userId'),
      }(name='innerMetric'),
      namespace?: string(name='namespace'),
      parentIp?: string(name='parentIp'),
      pid?: int32(name='pid'),
      privateIp?: string(name='privateIp'),
      processConfigurationId?: string(name='processConfigurationId'),
      resource?: string(name='resource'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryThermodynamicDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryThermodynamicDataResponseBody(name='body'),
}

async function queryThermodynamicDataWithOptions(request: QueryThermodynamicDataRequest, runtime: Util.RuntimeOptions): QueryThermodynamicDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.ahasTimestamp)) {
    query['AhasTimestamp'] = request.ahasTimestamp;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryThermodynamicData',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryThermodynamicData(request: QueryThermodynamicDataRequest): QueryThermodynamicDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryThermodynamicDataWithOptions(request, runtime);
}

model QueryTopologyCloudNodeDetailRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  configurationId?: string(name='ConfigurationId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  nodeType?: string(name='NodeType'),
  requestTimestamp?: long(name='RequestTimestamp'),
  viewId?: string(name='ViewId'),
}

model QueryTopologyCloudNodeDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    alarms?: [ 
      {
        items?: [ string ](name='items'),
      }
    ](name='alarms'),
    containerImages?: [ 
      {
        id?: string(name='id'),
        label?: string(name='label'),
        priority?: int32(name='priority'),
        value?: string(name='value'),
      }
    ](name='containerImages'),
    containers?: [ 
      {
        id?: string(name='Id'),
        label?: string(name='label'),
        priority?: int32(name='priority'),
        value?: string(name='value'),
        viewId?: string(name='viewId'),
      }
    ](name='containers'),
    events?: [ 
      {
        items?: [ string ](name='items'),
      }
    ](name='events'),
    id?: string(name='id'),
    inbound?: [ 
      {
        canView?: boolean(name='canView'),
        id?: string(name='id'),
        label?: string(name='label'),
        port?: int32(name='port'),
        value?: string(name='value'),
        viewId?: string(name='viewId'),
      }
    ](name='inbound'),
    instanceId?: string(name='instanceId'),
    instanceUrl?: string(name='instanceUrl'),
    label?: string(name='label'),
    labelMinor?: string(name='labelMinor'),
    labels?: [ 
      {
        id?: string(name='id'),
        label?: string(name='label'),
        priority?: int32(name='priority'),
        value?: string(name='value'),
      }
    ](name='labels'),
    meta?: [ 
      {
        id?: string(name='id'),
        label?: string(name='label'),
        priority?: int32(name='priority'),
        value?: string(name='value'),
      }
    ](name='meta'),
    metrics?: [ 
      {
        data?: map[string]any(name='data'),
        key?: string(name='key'),
        label?: string(name='label'),
        priority?: int32(name='priority'),
      }
    ](name='metrics'),
    outbound?: [ 
      {
        canView?: boolean(name='canView'),
        id?: string(name='id'),
        label?: string(name='label'),
        port?: int32(name='port'),
        value?: string(name='value'),
        viewId?: string(name='viewId'),
      }
    ](name='outbound'),
    pods?: [ 
      {
        id?: string(name='id'),
        label?: string(name='label'),
        value?: string(name='value'),
        viewId?: string(name='viewId'),
      }
    ](name='pods'),
    processes?: [ 
      {
        id?: string(name='Id'),
        commandLine?: string(name='commandLine'),
        cpuUtil?: float(name='cpuUtil'),
        label?: string(name='label'),
        labelMinor?: string(name='labelMinor'),
        memUtil?: float(name='memUtil'),
        pid?: int32(name='pid'),
        ppid?: int32(name='ppid'),
        timeOfCreation?: long(name='timeOfCreation'),
        viewId?: string(name='viewId'),
      }
    ](name='processes'),
    risks?: [ 
      {
        items?: [ string ](name='items'),
      }
    ](name='risks'),
    viewId?: string(name='viewId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTopologyCloudNodeDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTopologyCloudNodeDetailResponseBody(name='body'),
}

async function queryTopologyCloudNodeDetailWithOptions(request: QueryTopologyCloudNodeDetailRequest, runtime: Util.RuntimeOptions): QueryTopologyCloudNodeDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.configurationId)) {
    query['ConfigurationId'] = request.configurationId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.nodeType)) {
    query['NodeType'] = request.nodeType;
  }
  if (!Util.isUnset(request.requestTimestamp)) {
    query['RequestTimestamp'] = request.requestTimestamp;
  }
  if (!Util.isUnset(request.viewId)) {
    query['ViewId'] = request.viewId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTopologyCloudNodeDetail',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTopologyCloudNodeDetail(request: QueryTopologyCloudNodeDetailRequest): QueryTopologyCloudNodeDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTopologyCloudNodeDetailWithOptions(request, runtime);
}

model QueryTopologyContainerOverviewRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  hostConfigurationId?: string(name='HostConfigurationId'),
  kubClusterId?: string(name='KubClusterId'),
  kubNamespace?: string(name='KubNamespace'),
  namespace?: string(name='Namespace'),
  requestTimestamp?: long(name='RequestTimestamp'),
  tierId?: int32(name='TierId'),
}

model QueryTopologyContainerOverviewResponseBody = {
  code?: string(name='Code'),
  data?: {
    container?: {
      containers?: [ 
        {
          containerLabels?: [ 
            {
              id?: string(name='id'),
              label?: string(name='label'),
              priority?: int32(name='priority'),
              value?: string(name='value'),
            }
          ](name='containerLabels'),
          id?: string(name='id'),
          image?: [ 
            {
              id?: string(name='id'),
              label?: string(name='label'),
              priority?: int32(name='priority'),
              value?: string(name='value'),
            }
          ](name='image'),
          inbound?: [ 
            {
              canView?: boolean(name='canView'),
              id?: string(name='id'),
              label?: string(name='label'),
              port?: int32(name='port'),
              tierId?: int32(name='tierId'),
              value?: string(name='value'),
            }
          ](name='inbound'),
          label?: string(name='label'),
          labelMinor?: string(name='labelMinor'),
          meta?: [ 
            {
              id?: string(name='id'),
              label?: string(name='label'),
              priority?: int32(name='priority'),
              value?: string(name='value'),
            }
          ](name='meta'),
          metrics?: [ 
            {
              data?: map[string]any(name='data'),
              key?: string(name='key'),
              label?: string(name='label'),
              priority?: int32(name='priority'),
            }
          ](name='metrics'),
          outbound?: [ 
            {
              canView?: boolean(name='canView'),
              id?: string(name='id'),
              label?: string(name='label'),
              port?: int32(name='port'),
              tierId?: int32(name='tierId'),
              value?: string(name='value'),
            }
          ](name='outbound'),
          parents?: [ 
            {
              id?: string(name='id'),
              label?: string(name='label'),
              tierId?: int32(name='tierId'),
              tierLabel?: string(name='tierLabel'),
              value?: string(name='value'),
            }
          ](name='parents'),
          processes?: [ 
            {
              commandLine?: string(name='commandLine'),
              cpuUtil?: float(name='cpuUtil'),
              id?: string(name='id'),
              label?: string(name='label'),
              labelMinor?: string(name='labelMinor'),
              memUtil?: float(name='memUtil'),
              pid?: int32(name='pid'),
              ppid?: int32(name='ppid'),
              tierId?: int32(name='tierId'),
              timeOfCreation?: long(name='timeOfCreation'),
            }
          ](name='processes'),
          tierId?: int32(name='tierId'),
        }
      ](name='containers'),
    }(name='container'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTopologyContainerOverviewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTopologyContainerOverviewResponseBody(name='body'),
}

async function queryTopologyContainerOverviewWithOptions(request: QueryTopologyContainerOverviewRequest, runtime: Util.RuntimeOptions): QueryTopologyContainerOverviewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.hostConfigurationId)) {
    query['HostConfigurationId'] = request.hostConfigurationId;
  }
  if (!Util.isUnset(request.kubClusterId)) {
    query['KubClusterId'] = request.kubClusterId;
  }
  if (!Util.isUnset(request.kubNamespace)) {
    query['KubNamespace'] = request.kubNamespace;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.requestTimestamp)) {
    query['RequestTimestamp'] = request.requestTimestamp;
  }
  if (!Util.isUnset(request.tierId)) {
    query['TierId'] = request.tierId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTopologyContainerOverview',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTopologyContainerOverview(request: QueryTopologyContainerOverviewRequest): QueryTopologyContainerOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTopologyContainerOverviewWithOptions(request, runtime);
}

model QueryTopologyGraphRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  applicationName?: string(name='ApplicationName'),
  atomicViewId?: string(name='AtomicViewId'),
  hostConfigurationId?: string(name='HostConfigurationId'),
  kubClusterId?: string(name='KubClusterId'),
  kubNamespace?: string(name='KubNamespace'),
  lang?: string(name='Lang'),
  loop?: boolean(name='Loop'),
  namespace?: string(name='Namespace'),
  requestTimestamp?: long(name='RequestTimestamp'),
  revealApp?: string(name='RevealApp'),
  showUnconnected?: boolean(name='ShowUnconnected'),
  source?: string(name='Source'),
  state?: string(name='State'),
  token?: string(name='Token'),
  viewId?: string(name='ViewId'),
  viewMode?: string(name='ViewMode'),
  viewType?: int32(name='ViewType'),
}

model QueryTopologyGraphResponseBody = {
  code?: string(name='Code'),
  data?: {
    combos?: [ 
      {
        alarmCount?: int32(name='alarmCount'),
        category?: string(name='category'),
        comboId?: string(name='comboId'),
        containerConfigurationId?: string(name='containerConfigurationId'),
        count?: int32(name='count'),
        cpuUtil?: float(name='cpuUtil'),
        deviceType?: int32(name='deviceType'),
        display?: boolean(name='display'),
        eventCount?: int32(name='eventCount'),
        extFields?: map[string]any(name='extFields'),
        group?: string(name='group'),
        hostConfigurationId?: string(name='hostConfigurationId'),
        icon?: string(name='icon'),
        id?: string(name='id'),
        instanceId?: string(name='instanceId'),
        kubContainerCount?: int32(name='kubContainerCount'),
        kubNamespace?: string(name='kubNamespace'),
        memUtil?: float(name='memUtil'),
        name?: string(name='name'),
        nameMinor?: string(name='nameMinor'),
        origin?: string(name='origin'),
        parentDeviceId?: string(name='parentDeviceId'),
        podConfigurationId?: string(name='podConfigurationId'),
        rankdir?: string(name='rankdir'),
        riskCount?: int32(name='riskCount'),
        riskLevel?: string(name='riskLevel'),
        selfConnected?: boolean(name='selfConnected'),
        state?: string(name='state'),
        type?: string(name='type'),
        viewId?: string(name='viewId'),
        zone?: string(name='zone'),
      }
    ](name='combos'),
    config?: {
      detailConnection?: boolean(name='detailConnection'),
      filters?: [ 
        {
          data?: string(name='data'),
          type?: string(name='type'),
        }
      ](name='filters'),
      groupViewId?: string(name='groupViewId'),
      layout?: string(name='layout'),
      rankdir?: string(name='rankdir'),
      setting?: string(name='setting'),
      viewType?: int32(name='viewType'),
    }(name='config'),
    edges?: [ 
      {
        protocol?: string(name='protocol'),
        scope?: string(name='scope'),
        source?: string(name='source'),
        target?: string(name='target'),
      }
    ](name='edges'),
    nodes?: [ 
      {
        alarmCount?: int32(name='alarmCount'),
        category?: string(name='category'),
        comboId?: string(name='comboId'),
        containerConfigurationId?: string(name='containerConfigurationId'),
        count?: int32(name='count'),
        cpuUtil?: float(name='cpuUtil'),
        deviceType?: int32(name='deviceType'),
        display?: boolean(name='display'),
        eventCount?: int32(name='eventCount'),
        experimentFlag?: int32(name='experimentFlag'),
        extFields?: map[string]any(name='extFields'),
        group?: string(name='group'),
        hostConfigurationId?: string(name='hostConfigurationId'),
        icon?: string(name='icon'),
        id?: string(name='id'),
        instanceId?: string(name='instanceId'),
        kubContainerCount?: int32(name='kubContainerCount'),
        kubNamespace?: string(name='kubNamespace'),
        memUtil?: float(name='memUtil'),
        name?: string(name='name'),
        nameMinor?: string(name='nameMinor'),
        origin?: string(name='origin'),
        parentDeviceId?: string(name='parentDeviceId'),
        podConfigurationId?: string(name='podConfigurationId'),
        rankdir?: string(name='rankdir'),
        riskCount?: int32(name='riskCount'),
        riskLevel?: string(name='riskLevel'),
        selfConnected?: boolean(name='selfConnected'),
        state?: string(name='state'),
        type?: string(name='type'),
        viewId?: string(name='viewId'),
        zone?: int32(name='zone'),
      }
    ](name='nodes'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTopologyGraphResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTopologyGraphResponseBody(name='body'),
}

async function queryTopologyGraphWithOptions(request: QueryTopologyGraphRequest, runtime: Util.RuntimeOptions): QueryTopologyGraphResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.applicationName)) {
    query['ApplicationName'] = request.applicationName;
  }
  if (!Util.isUnset(request.atomicViewId)) {
    query['AtomicViewId'] = request.atomicViewId;
  }
  if (!Util.isUnset(request.hostConfigurationId)) {
    query['HostConfigurationId'] = request.hostConfigurationId;
  }
  if (!Util.isUnset(request.kubClusterId)) {
    query['KubClusterId'] = request.kubClusterId;
  }
  if (!Util.isUnset(request.kubNamespace)) {
    query['KubNamespace'] = request.kubNamespace;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.loop)) {
    query['Loop'] = request.loop;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.requestTimestamp)) {
    query['RequestTimestamp'] = request.requestTimestamp;
  }
  if (!Util.isUnset(request.revealApp)) {
    query['RevealApp'] = request.revealApp;
  }
  if (!Util.isUnset(request.showUnconnected)) {
    query['ShowUnconnected'] = request.showUnconnected;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.state)) {
    query['State'] = request.state;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  if (!Util.isUnset(request.viewId)) {
    query['ViewId'] = request.viewId;
  }
  if (!Util.isUnset(request.viewMode)) {
    query['ViewMode'] = request.viewMode;
  }
  if (!Util.isUnset(request.viewType)) {
    query['ViewType'] = request.viewType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTopologyGraph',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTopologyGraph(request: QueryTopologyGraphRequest): QueryTopologyGraphResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTopologyGraphWithOptions(request, runtime);
}

model QueryTopologyHostOverviewRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  kubClusterId?: string(name='KubClusterId'),
  namespace?: string(name='Namespace'),
  requestTimestamp?: long(name='RequestTimestamp'),
  tierId?: int32(name='TierId'),
}

model QueryTopologyHostOverviewResponseBody = {
  code?: string(name='Code'),
  data?: {
    host?: {
      hosts?: [ 
        {
          containerImages?: [ 
            {
              id?: string(name='id'),
              label?: string(name='label'),
              priority?: int32(name='priority'),
              value?: string(name='value'),
            }
          ](name='containerImages'),
          containers?: [ 
            {
              id?: string(name='id'),
              label?: string(name='label'),
              priority?: int32(name='priority'),
              value?: string(name='value'),
            }
          ](name='containers'),
          id?: string(name='id'),
          inbound?: [ 
            {
              canView?: boolean(name='canView'),
              id?: string(name='id'),
              label?: string(name='label'),
              port?: int32(name='port'),
              tierId?: int32(name='tierId'),
              value?: string(name='value'),
            }
          ](name='inbound'),
          label?: string(name='label'),
          labelMinor?: string(name='labelMinor'),
          meta?: [ 
            {
              id?: string(name='id'),
              label?: string(name='label'),
              priority?: int32(name='priority'),
              value?: string(name='value'),
            }
          ](name='meta'),
          metrics?: [ 
            {
              data?: map[string]any(name='data'),
              key?: string(name='key'),
              label?: string(name='label'),
              priority?: int32(name='priority'),
            }
          ](name='metrics'),
          outbound?: [ 
            {
              canView?: boolean(name='canView'),
              id?: string(name='id'),
              label?: string(name='label'),
              port?: int32(name='port'),
              tierId?: int32(name='tierId'),
              value?: string(name='value'),
            }
          ](name='outbound'),
          processes?: [ 
            {
              commandLine?: string(name='commandLine'),
              cpuUtil?: float(name='cpuUtil'),
              id?: string(name='id'),
              label?: string(name='label'),
              labelMinor?: string(name='labelMinor'),
              memUtil?: float(name='memUtil'),
              pid?: int32(name='pid'),
              ppid?: int32(name='ppid'),
              tierId?: int32(name='tierId'),
              timeOfCreation?: long(name='timeOfCreation'),
            }
          ](name='processes'),
          tierId?: int32(name='tierId'),
        }
      ](name='hosts'),
    }(name='host'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTopologyHostOverviewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTopologyHostOverviewResponseBody(name='body'),
}

async function queryTopologyHostOverviewWithOptions(request: QueryTopologyHostOverviewRequest, runtime: Util.RuntimeOptions): QueryTopologyHostOverviewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.kubClusterId)) {
    query['KubClusterId'] = request.kubClusterId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.requestTimestamp)) {
    query['RequestTimestamp'] = request.requestTimestamp;
  }
  if (!Util.isUnset(request.tierId)) {
    query['TierId'] = request.tierId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTopologyHostOverview',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTopologyHostOverview(request: QueryTopologyHostOverviewRequest): QueryTopologyHostOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTopologyHostOverviewWithOptions(request, runtime);
}

model QueryTopologyIngressMetricRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  clusterId?: string(name='ClusterId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  requestTimestamp?: long(name='RequestTimestamp'),
  serviceName?: string(name='ServiceName'),
}

model QueryTopologyIngressMetricResponseBody = {
  code?: string(name='Code'),
  data?: [  map[string]any ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTopologyIngressMetricResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTopologyIngressMetricResponseBody(name='body'),
}

async function queryTopologyIngressMetricWithOptions(request: QueryTopologyIngressMetricRequest, runtime: Util.RuntimeOptions): QueryTopologyIngressMetricResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.requestTimestamp)) {
    query['RequestTimestamp'] = request.requestTimestamp;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTopologyIngressMetric',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTopologyIngressMetric(request: QueryTopologyIngressMetricRequest): QueryTopologyIngressMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTopologyIngressMetricWithOptions(request, runtime);
}

model QueryTopologyKubDeploymentNodeDetailRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  configurationId?: string(name='ConfigurationId'),
  hostConfigurationId?: string(name='HostConfigurationId'),
  kubClusterId?: string(name='KubClusterId'),
  kubNamespace?: string(name='KubNamespace'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  requestTimestamp?: long(name='RequestTimestamp'),
  viewId?: string(name='ViewId'),
}

model QueryTopologyKubDeploymentNodeDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    alarms?: [ 
      {
        items?: [ string ](name='items'),
      }
    ](name='alarms'),
    containers?: [ 
      {
        id?: string(name='id'),
        label?: string(name='label'),
        priority?: int32(name='priority'),
        value?: string(name='value'),
        viewId?: string(name='viewId'),
      }
    ](name='containers'),
    events?: [ 
      {
        items?: [ string ](name='items'),
      }
    ](name='events'),
    id?: string(name='id'),
    inbound?: [ 
      {
        canView?: boolean(name='canView'),
        id?: string(name='id'),
        label?: string(name='label'),
        port?: int32(name='port'),
        value?: string(name='value'),
        viewId?: string(name='viewId'),
      }
    ](name='inbound'),
    label?: string(name='label'),
    labelMinor?: string(name='labelMinor'),
    labels?: [ 
      {
        id?: string(name='id'),
        label?: string(name='label'),
        priority?: int32(name='priority'),
        value?: string(name='value'),
      }
    ](name='labels'),
    meta?: [ 
      {
        id?: string(name='id'),
        label?: string(name='label'),
        priority?: int32(name='priority'),
        value?: string(name='value'),
      }
    ](name='meta'),
    metrics?: [ 
      {
        data?: map[string]any(name='data'),
        key?: string(name='key'),
        label?: string(name='label'),
        priority?: int32(name='priority'),
      }
    ](name='metrics'),
    outbound?: [ 
      {
        canView?: boolean(name='canView'),
        id?: string(name='id'),
        label?: string(name='label'),
        port?: int32(name='port'),
        value?: string(name='value'),
        viewId?: string(name='viewId'),
      }
    ](name='outbound'),
    parents?: [ 
      {
        id?: string(name='id'),
        label?: string(name='label'),
        tierLabel?: string(name='tierLabel'),
        value?: string(name='value'),
        viewId?: string(name='viewId'),
      }
    ](name='parents'),
    pods?: [ 
      {
        id?: string(name='id'),
        label?: string(name='label'),
        priority?: int32(name='priority'),
        value?: string(name='value'),
        viewId?: string(name='viewId'),
      }
    ](name='pods'),
    processes?: [ 
      {
        id?: string(name='id'),
        label?: string(name='label'),
        priority?: int32(name='priority'),
        value?: string(name='value'),
        viewId?: string(name='viewId'),
      }
    ](name='processes'),
    risks?: [ 
      {
        items?: [ string ](name='items'),
      }
    ](name='risks'),
    viewId?: string(name='viewId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTopologyKubDeploymentNodeDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTopologyKubDeploymentNodeDetailResponseBody(name='body'),
}

async function queryTopologyKubDeploymentNodeDetailWithOptions(request: QueryTopologyKubDeploymentNodeDetailRequest, runtime: Util.RuntimeOptions): QueryTopologyKubDeploymentNodeDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.configurationId)) {
    query['ConfigurationId'] = request.configurationId;
  }
  if (!Util.isUnset(request.hostConfigurationId)) {
    query['HostConfigurationId'] = request.hostConfigurationId;
  }
  if (!Util.isUnset(request.kubClusterId)) {
    query['KubClusterId'] = request.kubClusterId;
  }
  if (!Util.isUnset(request.kubNamespace)) {
    query['KubNamespace'] = request.kubNamespace;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.requestTimestamp)) {
    query['RequestTimestamp'] = request.requestTimestamp;
  }
  if (!Util.isUnset(request.viewId)) {
    query['ViewId'] = request.viewId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTopologyKubDeploymentNodeDetail',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTopologyKubDeploymentNodeDetail(request: QueryTopologyKubDeploymentNodeDetailRequest): QueryTopologyKubDeploymentNodeDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTopologyKubDeploymentNodeDetailWithOptions(request, runtime);
}

model QueryTopologyKubDeploymentOverviewRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  kubClusterId?: string(name='KubClusterId'),
  kubNamespace?: string(name='KubNamespace'),
  namespace?: string(name='Namespace'),
  requestTimestamp?: long(name='RequestTimestamp'),
  tierId?: int32(name='TierId'),
}

model QueryTopologyKubDeploymentOverviewResponseBody = {
  code?: string(name='Code'),
  data?: {
    deployment?: {
      deployments?: [ 
        {
          id?: string(name='id'),
          image?: [ 
            {
              id?: string(name='id'),
              label?: string(name='label'),
              priority?: int32(name='priority'),
              value?: string(name='value'),
            }
          ](name='image'),
          inbound?: [ 
            {
              canView?: boolean(name='canView'),
              id?: string(name='id'),
              label?: string(name='label'),
              port?: int32(name='port'),
              tierId?: int32(name='tierId'),
              value?: string(name='value'),
            }
          ](name='inbound'),
          label?: string(name='label'),
          labelMinor?: string(name='labelMinor'),
          labels?: [ 
            {
              id?: string(name='id'),
              label?: string(name='label'),
              priority?: int32(name='priority'),
              value?: string(name='value'),
            }
          ](name='labels'),
          meta?: [ 
            {
              id?: string(name='id'),
              label?: string(name='label'),
              priority?: int32(name='priority'),
              value?: string(name='value'),
            }
          ](name='meta'),
          metrics?: [ 
            {
              data?: map[string]any(name='data'),
              key?: string(name='key'),
              label?: string(name='label'),
              priority?: int32(name='priority'),
            }
          ](name='metrics'),
          outbound?: [ 
            {
              canView?: boolean(name='canView'),
              id?: string(name='id'),
              label?: string(name='label'),
              port?: int32(name='port'),
              tierId?: int32(name='tierId'),
              value?: string(name='value'),
            }
          ](name='outbound'),
          parents?: [ 
            {
              id?: string(name='id'),
              label?: string(name='label'),
              tierId?: int32(name='tierId'),
              tierLabel?: string(name='tierLabel'),
              value?: string(name='value'),
            }
          ](name='parents'),
          processes?: [ 
            {
              commandLine?: string(name='commandLine'),
              cpuUtil?: float(name='cpuUtil'),
              id?: string(name='id'),
              label?: string(name='label'),
              labelMinor?: string(name='labelMinor'),
              memUtil?: float(name='memUtil'),
              pid?: int32(name='pid'),
              ppid?: int32(name='ppid'),
              tierId?: int32(name='tierId'),
              timeOfCreation?: long(name='timeOfCreation'),
            }
          ](name='processes'),
          tierId?: int32(name='tierId'),
        }
      ](name='deployments'),
    }(name='deployment'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTopologyKubDeploymentOverviewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTopologyKubDeploymentOverviewResponseBody(name='body'),
}

async function queryTopologyKubDeploymentOverviewWithOptions(request: QueryTopologyKubDeploymentOverviewRequest, runtime: Util.RuntimeOptions): QueryTopologyKubDeploymentOverviewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.kubClusterId)) {
    query['KubClusterId'] = request.kubClusterId;
  }
  if (!Util.isUnset(request.kubNamespace)) {
    query['KubNamespace'] = request.kubNamespace;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.requestTimestamp)) {
    query['RequestTimestamp'] = request.requestTimestamp;
  }
  if (!Util.isUnset(request.tierId)) {
    query['TierId'] = request.tierId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTopologyKubDeploymentOverview',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTopologyKubDeploymentOverview(request: QueryTopologyKubDeploymentOverviewRequest): QueryTopologyKubDeploymentOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTopologyKubDeploymentOverviewWithOptions(request, runtime);
}

model QueryTopologyKubNamespaceListRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  kubClusterId?: string(name='KubClusterId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  requestTimestamp?: long(name='RequestTimestamp'),
}

model QueryTopologyKubNamespaceListResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      id?: string(name='id'),
      kubNamespaces?: [ string ](name='kubNamespaces'),
      name?: string(name='name'),
      topologyCluster?: {
        id?: string(name='id'),
        name?: string(name='name'),
      }(name='topologyCluster'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTopologyKubNamespaceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTopologyKubNamespaceListResponseBody(name='body'),
}

async function queryTopologyKubNamespaceListWithOptions(request: QueryTopologyKubNamespaceListRequest, runtime: Util.RuntimeOptions): QueryTopologyKubNamespaceListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.kubClusterId)) {
    query['KubClusterId'] = request.kubClusterId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.requestTimestamp)) {
    query['RequestTimestamp'] = request.requestTimestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTopologyKubNamespaceList',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTopologyKubNamespaceList(request: QueryTopologyKubNamespaceListRequest): QueryTopologyKubNamespaceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTopologyKubNamespaceListWithOptions(request, runtime);
}

model QueryTopologyKubPodNodeDetailRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  configurationId?: string(name='ConfigurationId'),
  hostConfigurationId?: string(name='HostConfigurationId'),
  kubClusterId?: string(name='KubClusterId'),
  kubNamespace?: string(name='KubNamespace'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  requestTimestamp?: long(name='RequestTimestamp'),
  viewId?: string(name='ViewId'),
}

model QueryTopologyKubPodNodeDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    alarms?: [ 
      {
        items?: [ string ](name='items'),
      }
    ](name='alarms'),
    containerImages?: [ 
      {
        id?: string(name='id'),
        label?: string(name='label'),
        value?: string(name='value'),
      }
    ](name='containerImages'),
    containers?: [ 
      {
        id?: string(name='id'),
        label?: string(name='label'),
        priority?: int32(name='priority'),
        value?: string(name='value'),
        viewId?: string(name='viewId'),
      }
    ](name='containers'),
    events?: [ 
      {
        items?: [ string ](name='items'),
      }
    ](name='events'),
    hostConfigurationId?: string(name='hostConfigurationId'),
    id?: string(name='id'),
    inbound?: [ 
      {
        canView?: boolean(name='canView'),
        id?: string(name='id'),
        label?: string(name='label'),
        port?: int32(name='port'),
        value?: string(name='value'),
        viewId?: string(name='viewId'),
      }
    ](name='inbound'),
    label?: string(name='label'),
    labelMinor?: string(name='labelMinor'),
    labels?: [ 
      {
        id?: string(name='id'),
        label?: string(name='label'),
        priority?: int32(name='priority'),
        value?: string(name='value'),
      }
    ](name='labels'),
    meta?: [ 
      {
        id?: string(name='id'),
        label?: string(name='label'),
        priority?: int32(name='priority'),
        value?: string(name='value'),
      }
    ](name='meta'),
    metrics?: [ 
      {
        data?: map[string]any(name='data'),
        key?: string(name='key'),
        label?: string(name='label'),
        priority?: int32(name='priority'),
      }
    ](name='metrics'),
    outbound?: [ 
      {
        canView?: boolean(name='canView'),
        id?: string(name='id'),
        label?: string(name='label'),
        port?: int32(name='port'),
        value?: string(name='value'),
        viewId?: string(name='viewId'),
      }
    ](name='outbound'),
    parents?: [ 
      {
        id?: string(name='id'),
        label?: string(name='label'),
        value?: string(name='value'),
        viewId?: string(name='viewId'),
      }
    ](name='parents'),
    processes?: [ 
      {
        id?: string(name='id'),
        label?: string(name='label'),
        priority?: int32(name='priority'),
        value?: string(name='value'),
        viewId?: string(name='viewId'),
      }
    ](name='processes'),
    risks?: [ 
      {
        items?: [ string ](name='items'),
      }
    ](name='risks'),
    viewId?: string(name='viewId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTopologyKubPodNodeDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTopologyKubPodNodeDetailResponseBody(name='body'),
}

async function queryTopologyKubPodNodeDetailWithOptions(request: QueryTopologyKubPodNodeDetailRequest, runtime: Util.RuntimeOptions): QueryTopologyKubPodNodeDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.configurationId)) {
    query['ConfigurationId'] = request.configurationId;
  }
  if (!Util.isUnset(request.hostConfigurationId)) {
    query['HostConfigurationId'] = request.hostConfigurationId;
  }
  if (!Util.isUnset(request.kubClusterId)) {
    query['KubClusterId'] = request.kubClusterId;
  }
  if (!Util.isUnset(request.kubNamespace)) {
    query['KubNamespace'] = request.kubNamespace;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.requestTimestamp)) {
    query['RequestTimestamp'] = request.requestTimestamp;
  }
  if (!Util.isUnset(request.viewId)) {
    query['ViewId'] = request.viewId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTopologyKubPodNodeDetail',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTopologyKubPodNodeDetail(request: QueryTopologyKubPodNodeDetailRequest): QueryTopologyKubPodNodeDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTopologyKubPodNodeDetailWithOptions(request, runtime);
}

model QueryTopologyKubPodOverviewRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  kubClusterId?: string(name='KubClusterId'),
  kubNamespace?: string(name='KubNamespace'),
  namespace?: string(name='Namespace'),
  requestTimestamp?: long(name='RequestTimestamp'),
  tierId?: int32(name='TierId'),
}

model QueryTopologyKubPodOverviewResponseBody = {
  code?: string(name='Code'),
  data?: {
    pod?: {
      pods?: [ 
        {
          id?: string(name='id'),
          image?: [ 
            {
              id?: string(name='id'),
              label?: string(name='label'),
              priority?: int32(name='priority'),
              value?: string(name='value'),
            }
          ](name='image'),
          inbound?: [ 
            {
              canView?: boolean(name='canView'),
              id?: string(name='id'),
              label?: string(name='label'),
              port?: int32(name='port'),
              tierId?: int32(name='tierId'),
              value?: string(name='value'),
            }
          ](name='inbound'),
          label?: string(name='label'),
          labelMinor?: string(name='labelMinor'),
          labels?: [ 
            {
              id?: string(name='id'),
              label?: string(name='label'),
              priority?: int32(name='priority'),
              value?: string(name='value'),
            }
          ](name='labels'),
          meta?: [ 
            {
              id?: string(name='id'),
              label?: string(name='label'),
              priority?: int32(name='priority'),
              value?: string(name='value'),
            }
          ](name='meta'),
          metrics?: [ 
            {
              data?: map[string]any(name='data'),
              key?: string(name='key'),
              label?: string(name='label'),
              priority?: int32(name='priority'),
            }
          ](name='metrics'),
          outbound?: [ 
            {
              canView?: boolean(name='canView'),
              id?: string(name='id'),
              label?: string(name='label'),
              port?: int32(name='port'),
              tierId?: int32(name='tierId'),
              value?: string(name='value'),
            }
          ](name='outbound'),
          parents?: [ 
            {
              id?: string(name='id'),
              label?: string(name='label'),
              tierId?: int32(name='tierId'),
              tierLabel?: string(name='tierLabel'),
              value?: string(name='value'),
            }
          ](name='parents'),
          processes?: [ 
            {
              commandLine?: string(name='commandLine'),
              cpuUtil?: float(name='cpuUtil'),
              id?: string(name='id'),
              label?: string(name='label'),
              labelMinor?: string(name='labelMinor'),
              memUtil?: float(name='memUtil'),
              pid?: int32(name='pid'),
              ppid?: int32(name='ppid'),
              tierId?: int32(name='tierId'),
              timeOfCreation?: long(name='timeOfCreation'),
            }
          ](name='processes'),
          tierId?: int32(name='tierId'),
        }
      ](name='pods'),
    }(name='pod'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTopologyKubPodOverviewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTopologyKubPodOverviewResponseBody(name='body'),
}

async function queryTopologyKubPodOverviewWithOptions(request: QueryTopologyKubPodOverviewRequest, runtime: Util.RuntimeOptions): QueryTopologyKubPodOverviewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.kubClusterId)) {
    query['KubClusterId'] = request.kubClusterId;
  }
  if (!Util.isUnset(request.kubNamespace)) {
    query['KubNamespace'] = request.kubNamespace;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.requestTimestamp)) {
    query['RequestTimestamp'] = request.requestTimestamp;
  }
  if (!Util.isUnset(request.tierId)) {
    query['TierId'] = request.tierId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTopologyKubPodOverview',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTopologyKubPodOverview(request: QueryTopologyKubPodOverviewRequest): QueryTopologyKubPodOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTopologyKubPodOverviewWithOptions(request, runtime);
}

model QueryTopologyKubServiceNodeDetailRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  configurationId?: string(name='ConfigurationId'),
  hostConfigurationId?: string(name='HostConfigurationId'),
  kubClusterId?: string(name='KubClusterId'),
  kubNamespace?: string(name='KubNamespace'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  requestTimestamp?: long(name='RequestTimestamp'),
  viewId?: string(name='ViewId'),
}

model QueryTopologyKubServiceNodeDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    alarms?: [ 
      {
        items?: [ string ](name='items'),
      }
    ](name='alarms'),
    containers?: [ 
      {
        id?: string(name='id'),
        label?: string(name='label'),
        priority?: int32(name='priority'),
        value?: string(name='value'),
        viewId?: string(name='viewId'),
      }
    ](name='containers'),
    events?: [ 
      {
        items?: [ string ](name='items'),
      }
    ](name='events'),
    id?: string(name='id'),
    inbound?: [ 
      {
        canView?: boolean(name='canView'),
        id?: string(name='id'),
        label?: string(name='label'),
        port?: int32(name='port'),
        value?: string(name='value'),
        viewId?: string(name='viewId'),
      }
    ](name='inbound'),
    label?: string(name='label'),
    labelMinor?: string(name='labelMinor'),
    labels?: [ 
      {
        id?: string(name='id'),
        label?: string(name='label'),
        priority?: int32(name='priority'),
        value?: string(name='value'),
      }
    ](name='labels'),
    meta?: [ 
      {
        id?: string(name='id'),
        label?: string(name='label'),
        priority?: int32(name='priority'),
        value?: string(name='value'),
      }
    ](name='meta'),
    metrics?: [ 
      {
        data?: map[string]any(name='data'),
        key?: string(name='key'),
        label?: string(name='label'),
        priority?: int32(name='priority'),
      }
    ](name='metrics'),
    outbound?: [ 
      {
        canView?: boolean(name='canView'),
        id?: string(name='id'),
        label?: string(name='label'),
        port?: int32(name='port'),
        value?: string(name='value'),
        viewId?: string(name='viewId'),
      }
    ](name='outbound'),
    parents?: [ 
      {
        id?: string(name='id'),
        label?: string(name='label'),
        value?: string(name='value'),
        viewId?: string(name='viewId'),
      }
    ](name='parents'),
    pods?: [ 
      {
        id?: string(name='id'),
        label?: string(name='label'),
        priority?: int32(name='priority'),
        value?: string(name='value'),
        viewId?: string(name='viewId'),
      }
    ](name='pods'),
    processes?: [ 
      {
        id?: string(name='id'),
        label?: string(name='label'),
        priority?: int32(name='priority'),
        value?: string(name='value'),
        viewId?: string(name='viewId'),
      }
    ](name='processes'),
    risks?: [ 
      {
        items?: [ string ](name='items'),
      }
    ](name='risks'),
    rules?: [ 
      {
        id?: string(name='id'),
        label?: string(name='label'),
        value?: string(name='value'),
        viewId?: string(name='viewId'),
      }
    ](name='rules'),
    viewId?: string(name='viewId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTopologyKubServiceNodeDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTopologyKubServiceNodeDetailResponseBody(name='body'),
}

async function queryTopologyKubServiceNodeDetailWithOptions(request: QueryTopologyKubServiceNodeDetailRequest, runtime: Util.RuntimeOptions): QueryTopologyKubServiceNodeDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.configurationId)) {
    query['ConfigurationId'] = request.configurationId;
  }
  if (!Util.isUnset(request.hostConfigurationId)) {
    query['HostConfigurationId'] = request.hostConfigurationId;
  }
  if (!Util.isUnset(request.kubClusterId)) {
    query['KubClusterId'] = request.kubClusterId;
  }
  if (!Util.isUnset(request.kubNamespace)) {
    query['KubNamespace'] = request.kubNamespace;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.requestTimestamp)) {
    query['RequestTimestamp'] = request.requestTimestamp;
  }
  if (!Util.isUnset(request.viewId)) {
    query['ViewId'] = request.viewId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTopologyKubServiceNodeDetail',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTopologyKubServiceNodeDetail(request: QueryTopologyKubServiceNodeDetailRequest): QueryTopologyKubServiceNodeDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTopologyKubServiceNodeDetailWithOptions(request, runtime);
}

model QueryTopologyKubServiceOverviewRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  kubClusterId?: string(name='KubClusterId'),
  kubNamespace?: string(name='KubNamespace'),
  namespace?: string(name='Namespace'),
  requestTimestamp?: long(name='RequestTimestamp'),
  tierId?: int32(name='TierId'),
}

model QueryTopologyKubServiceOverviewResponseBody = {
  code?: string(name='Code'),
  data?: {
    kubService?: {
      services?: [ 
        {
          id?: string(name='id'),
          image?: [ 
            {
              id?: string(name='id'),
              label?: string(name='label'),
              priority?: int32(name='priority'),
              value?: string(name='value'),
            }
          ](name='image'),
          inbound?: [ 
            {
              canView?: boolean(name='canView'),
              id?: string(name='id'),
              label?: string(name='label'),
              port?: int32(name='port'),
              tierId?: int32(name='tierId'),
              value?: string(name='value'),
            }
          ](name='inbound'),
          label?: string(name='label'),
          labelMinor?: string(name='labelMinor'),
          labels?: [ 
            {
              id?: string(name='id'),
              label?: string(name='label'),
              priority?: int32(name='priority'),
              value?: string(name='value'),
            }
          ](name='labels'),
          meta?: [ 
            {
              id?: string(name='id'),
              label?: string(name='label'),
              priority?: int32(name='priority'),
              value?: string(name='value'),
            }
          ](name='meta'),
          metrics?: [ 
            {
              data?: map[string]any(name='data'),
              key?: string(name='key'),
              label?: string(name='label'),
              priority?: int32(name='priority'),
            }
          ](name='metrics'),
          outbound?: [ 
            {
              canView?: boolean(name='canView'),
              id?: string(name='id'),
              label?: string(name='label'),
              port?: int32(name='port'),
              tierId?: int32(name='tierId'),
              value?: string(name='value'),
            }
          ](name='outbound'),
          parents?: [ 
            {
              id?: string(name='id'),
              label?: string(name='label'),
              tierId?: int32(name='tierId'),
              tierLabel?: string(name='tierLabel'),
              value?: string(name='value'),
            }
          ](name='parents'),
          processes?: [ 
            {
              commandLine?: string(name='commandLine'),
              cpuUtil?: float(name='cpuUtil'),
              id?: string(name='id'),
              label?: string(name='label'),
              labelMinor?: string(name='labelMinor'),
              memUtil?: float(name='memUtil'),
              pid?: int32(name='pid'),
              ppid?: int32(name='ppid'),
              tierId?: int32(name='tierId'),
              timeOfCreation?: long(name='timeOfCreation'),
            }
          ](name='processes'),
          tierId?: int32(name='tierId'),
        }
      ](name='services'),
    }(name='kubService'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTopologyKubServiceOverviewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTopologyKubServiceOverviewResponseBody(name='body'),
}

async function queryTopologyKubServiceOverviewWithOptions(request: QueryTopologyKubServiceOverviewRequest, runtime: Util.RuntimeOptions): QueryTopologyKubServiceOverviewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.kubClusterId)) {
    query['KubClusterId'] = request.kubClusterId;
  }
  if (!Util.isUnset(request.kubNamespace)) {
    query['KubNamespace'] = request.kubNamespace;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.requestTimestamp)) {
    query['RequestTimestamp'] = request.requestTimestamp;
  }
  if (!Util.isUnset(request.tierId)) {
    query['TierId'] = request.tierId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTopologyKubServiceOverview',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTopologyKubServiceOverview(request: QueryTopologyKubServiceOverviewRequest): QueryTopologyKubServiceOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTopologyKubServiceOverviewWithOptions(request, runtime);
}

model QueryTopologyNodeDetailRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  configurationId?: string(name='ConfigurationId'),
  hostConfigurationId?: string(name='HostConfigurationId'),
  kubClusterId?: string(name='KubClusterId'),
  kubNamespace?: string(name='KubNamespace'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  requestTimestamp?: long(name='RequestTimestamp'),
  viewId?: string(name='ViewId'),
}

model QueryTopologyNodeDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    containerNode?: {
      containerLabels?: [ 
        {
          id?: string(name='id'),
          label?: string(name='label'),
          priority?: int32(name='priority'),
          value?: string(name='value'),
        }
      ](name='containerLabels'),
      hostConfigurationId?: string(name='hostConfigurationId'),
      id?: string(name='id'),
      image?: [ 
        {
          id?: string(name='id'),
          label?: string(name='label'),
          priority?: int32(name='priority'),
          value?: string(name='value'),
        }
      ](name='image'),
      inbound?: [ 
        {
          canView?: boolean(name='canView'),
          id?: string(name='id'),
          label?: string(name='label'),
          port?: int32(name='port'),
          value?: string(name='value'),
          viewId?: string(name='viewId'),
        }
      ](name='inbound'),
      label?: string(name='label'),
      labelMinor?: string(name='labelMinor'),
      meta?: [ 
        {
          id?: string(name='id'),
          label?: string(name='label'),
          priority?: int32(name='priority'),
          value?: string(name='value'),
        }
      ](name='meta'),
      metrics?: [ 
        {
          data?: map[string]any(name='data'),
          key?: string(name='key'),
          label?: string(name='label'),
          priority?: int32(name='priority'),
        }
      ](name='metrics'),
      outbound?: [ 
        {
          canView?: boolean(name='canView'),
          id?: string(name='id'),
          label?: string(name='label'),
          port?: int32(name='port'),
          value?: string(name='value'),
          viewId?: string(name='viewId'),
        }
      ](name='outbound'),
      parents?: [ 
        {
          id?: string(name='id'),
          label?: string(name='label'),
          value?: string(name='value'),
          viewId?: int32(name='viewId'),
        }
      ](name='parents'),
      processes?: [ 
        {
          id?: string(name='id'),
          label?: string(name='label'),
          labelMinor?: string(name='labelMinor'),
          value?: string(name='value'),
          viewId?: string(name='viewId'),
        }
      ](name='processes'),
      viewId?: string(name='viewId'),
    }(name='containerNode'),
    hostNode?: {
      alarms?: [ 
        {
          items?: [ string ](name='items'),
        }
      ](name='alarms'),
      containerImages?: [ 
        {
          id?: string(name='id'),
          label?: string(name='label'),
          priority?: int32(name='priority'),
          value?: string(name='value'),
        }
      ](name='containerImages'),
      containers?: [ 
        {
          id?: string(name='id'),
          label?: string(name='label'),
          priority?: int32(name='priority'),
          value?: string(name='value'),
          viewId?: string(name='viewId'),
        }
      ](name='containers'),
      events?: [ 
        {
          items?: [ string ](name='items'),
        }
      ](name='events'),
      hostConfigurationId?: string(name='hostConfigurationId'),
      id?: string(name='id'),
      inbound?: [ 
        {
          canView?: boolean(name='canView'),
          id?: string(name='id'),
          label?: string(name='label'),
          port?: int32(name='port'),
          value?: string(name='value'),
          viewId?: string(name='viewId'),
        }
      ](name='inbound'),
      instanceId?: string(name='instanceId'),
      instanceUrl?: string(name='instanceUrl'),
      label?: string(name='label'),
      labelMinor?: string(name='labelMinor'),
      meta?: [ 
        {
          id?: string(name='id'),
          label?: string(name='label'),
          priority?: int32(name='priority'),
          value?: string(name='value'),
        }
      ](name='meta'),
      metrics?: [ 
        {
          data?: map[string]any(name='data'),
          key?: string(name='key'),
          label?: string(name='label'),
          priority?: int32(name='priority'),
        }
      ](name='metrics'),
      outbound?: [ 
        {
          canView?: boolean(name='canView'),
          id?: string(name='id'),
          label?: string(name='label'),
          port?: int32(name='port'),
          value?: string(name='value'),
          viewId?: string(name='viewId'),
        }
      ](name='outbound'),
      pods?: [ 
        {
          id?: string(name='id'),
          label?: string(name='label'),
          value?: string(name='value'),
          viewId?: string(name='viewId'),
        }
      ](name='pods'),
      processes?: [ 
        {
          id?: string(name='id'),
          label?: string(name='label'),
          labelMinor?: string(name='labelMinor'),
          value?: string(name='value'),
          viewId?: string(name='viewId'),
        }
      ](name='processes'),
      risks?: [ 
        {
          items?: [ string ](name='items'),
        }
      ](name='risks'),
      viewId?: string(name='viewId'),
    }(name='hostNode'),
    processNode?: {
      commandLine?: string(name='commandLine'),
      cpuUtil?: float(name='cpuUtil'),
      hostConfigurationId?: string(name='hostConfigurationId'),
      id?: string(name='id'),
      inbound?: [ 
        {
          canView?: boolean(name='canView'),
          id?: string(name='id'),
          label?: string(name='label'),
          port?: int32(name='port'),
          value?: string(name='value'),
          viewId?: string(name='viewId'),
        }
      ](name='inbound'),
      label?: string(name='label'),
      labelMinor?: string(name='labelMinor'),
      memUtil?: float(name='memUtil'),
      meta?: [ 
        {
          id?: string(name='id'),
          label?: string(name='label'),
          priority?: int32(name='priority'),
          value?: string(name='value'),
        }
      ](name='meta'),
      metrics?: [ 
        {
          data?: map[string]any(name='data'),
          key?: string(name='key'),
          label?: string(name='label'),
          priority?: int32(name='priority'),
        }
      ](name='metrics'),
      outbound?: [ 
        {
          canView?: boolean(name='canView'),
          id?: string(name='id'),
          label?: string(name='label'),
          port?: int32(name='port'),
          value?: string(name='value'),
          viewId?: string(name='viewId'),
        }
      ](name='outbound'),
      parents?: [ 
        {
          id?: string(name='id'),
          label?: string(name='label'),
          value?: string(name='value'),
          viewId?: int32(name='viewId'),
        }
      ](name='parents'),
      pid?: int32(name='pid'),
      ppid?: int32(name='ppid'),
      timeOfCreation?: long(name='timeOfCreation'),
      viewId?: string(name='viewId'),
    }(name='processNode'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTopologyNodeDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTopologyNodeDetailResponseBody(name='body'),
}

async function queryTopologyNodeDetailWithOptions(request: QueryTopologyNodeDetailRequest, runtime: Util.RuntimeOptions): QueryTopologyNodeDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.configurationId)) {
    query['ConfigurationId'] = request.configurationId;
  }
  if (!Util.isUnset(request.hostConfigurationId)) {
    query['HostConfigurationId'] = request.hostConfigurationId;
  }
  if (!Util.isUnset(request.kubClusterId)) {
    query['KubClusterId'] = request.kubClusterId;
  }
  if (!Util.isUnset(request.kubNamespace)) {
    query['KubNamespace'] = request.kubNamespace;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.requestTimestamp)) {
    query['RequestTimestamp'] = request.requestTimestamp;
  }
  if (!Util.isUnset(request.viewId)) {
    query['ViewId'] = request.viewId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTopologyNodeDetail',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTopologyNodeDetail(request: QueryTopologyNodeDetailRequest): QueryTopologyNodeDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTopologyNodeDetailWithOptions(request, runtime);
}

model QueryTopologyNodeMetricRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  configurationId?: string(name='ConfigurationId'),
  endTime?: long(name='EndTime'),
  lang?: string(name='Lang'),
  metricKey?: string(name='MetricKey'),
  namespace?: string(name='Namespace'),
  startTime?: long(name='StartTime'),
  viewId?: string(name='ViewId'),
}

model QueryTopologyNodeMetricResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      data?: map[string]any(name='data'),
      key?: string(name='key'),
      label?: string(name='label'),
      priority?: int32(name='priority'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTopologyNodeMetricResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTopologyNodeMetricResponseBody(name='body'),
}

async function queryTopologyNodeMetricWithOptions(request: QueryTopologyNodeMetricRequest, runtime: Util.RuntimeOptions): QueryTopologyNodeMetricResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.configurationId)) {
    query['ConfigurationId'] = request.configurationId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.metricKey)) {
    query['MetricKey'] = request.metricKey;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.viewId)) {
    query['ViewId'] = request.viewId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTopologyNodeMetric',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTopologyNodeMetric(request: QueryTopologyNodeMetricRequest): QueryTopologyNodeMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTopologyNodeMetricWithOptions(request, runtime);
}

model QueryTopologyOverviewRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  kubClusterId?: string(name='KubClusterId'),
  namespace?: string(name='Namespace'),
  requestTimestamp?: long(name='RequestTimestamp'),
  tierId?: int32(name='TierId'),
}

model QueryTopologyOverviewResponseBody = {
  code?: string(name='Code'),
  data?: {
    container?: {
      containers?: [ 
        {
          id?: string(name='id'),
          label?: string(name='label'),
          priority?: int32(name='priority'),
          value?: string(name='value'),
        }
      ](name='containers'),
    }(name='container'),
    host?: {
      hosts?: [ 
        {
          containerImages?: [ 
            {
              id?: string(name='id'),
              label?: string(name='label'),
              priority?: int32(name='priority'),
              value?: string(name='value'),
            }
          ](name='containerImages'),
          containers?: [ 
            {
              id?: string(name='id'),
              label?: string(name='label'),
              priority?: int32(name='priority'),
              value?: string(name='value'),
            }
          ](name='containers'),
          id?: string(name='id'),
          inbound?: [ 
            {
              canView?: boolean(name='canView'),
              id?: string(name='id'),
              label?: string(name='label'),
              port?: int32(name='port'),
              tierId?: int32(name='tierId'),
              value?: string(name='value'),
            }
          ](name='inbound'),
          label?: string(name='label'),
          labelMinor?: string(name='labelMinor'),
          meta?: [ 
            {
              id?: string(name='id'),
              label?: string(name='label'),
              priority?: int32(name='priority'),
              value?: string(name='value'),
            }
          ](name='meta'),
          metrics?: [ 
            {
              data?: map[string]any(name='data'),
              key?: string(name='key'),
              label?: string(name='label'),
              priority?: int32(name='priority'),
            }
          ](name='metrics'),
          outbound?: [ 
            {
              canView?: boolean(name='canView'),
              id?: string(name='id'),
              label?: string(name='label'),
              port?: int32(name='port'),
              tierId?: int32(name='tierId'),
              value?: string(name='value'),
            }
          ](name='outbound'),
          processes?: [ 
            {
              commandLine?: string(name='commandLine'),
              cpuUtil?: float(name='cpuUtil'),
              id?: string(name='id'),
              label?: string(name='label'),
              labelMinor?: string(name='labelMinor'),
              memUtil?: float(name='memUtil'),
              pid?: int32(name='pid'),
              ppid?: int32(name='ppid'),
              tierId?: int32(name='tierId'),
              timeOfCreation?: long(name='timeOfCreation'),
            }
          ](name='processes'),
          tierId?: int32(name='tierId'),
        }
      ](name='hosts'),
    }(name='host'),
    process?: {
      applications?: [ 
        {
          appName?: string(name='appName'),
          blockQps?: long(name='blockQps'),
          commandLine?: string(name='commandLine'),
          cpu?: float(name='cpu'),
          exception?: long(name='exception'),
          flowLimitOpened?: boolean(name='flowLimitOpened'),
          id?: string(name='id'),
          mem?: float(name='mem'),
          passQps?: long(name='passQps'),
          rt?: float(name='rt'),
        }
      ](name='applications'),
      cloudComponents?: [ 
        {
          instances?: [ 
            {
              id?: string(name='id'),
              instanceId?: string(name='instanceId'),
              label?: string(name='label'),
            }
          ](name='instances'),
          label?: string(name='label'),
          requests?: [ 
            {
              commandLine?: string(name='commandLine'),
              id?: string(name='id'),
              label?: string(name='label'),
            }
          ](name='requests'),
          type?: string(name='type'),
        }
      ](name='cloudComponents'),
      componentTags?: [ 
        {
          ids?: [ string ](name='ids'),
          label?: string(name='label'),
        }
      ](name='componentTags'),
      thirdComponents?: [ 
        {
          commandLine?: string(name='commandLine'),
          cpu?: float(name='cpu'),
          id?: string(name='id'),
          label?: string(name='label'),
          mem?: float(name='mem'),
          type?: string(name='type'),
        }
      ](name='thirdComponents'),
    }(name='process'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTopologyOverviewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTopologyOverviewResponseBody(name='body'),
}

async function queryTopologyOverviewWithOptions(request: QueryTopologyOverviewRequest, runtime: Util.RuntimeOptions): QueryTopologyOverviewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.kubClusterId)) {
    query['KubClusterId'] = request.kubClusterId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.requestTimestamp)) {
    query['RequestTimestamp'] = request.requestTimestamp;
  }
  if (!Util.isUnset(request.tierId)) {
    query['TierId'] = request.tierId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTopologyOverview',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTopologyOverview(request: QueryTopologyOverviewRequest): QueryTopologyOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTopologyOverviewWithOptions(request, runtime);
}

model QueryTopologyOverviewStatisticsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  namespace?: string(name='Namespace'),
  requestTimestamp?: long(name='RequestTimestamp'),
}

model QueryTopologyOverviewStatisticsResponseBody = {
  code?: string(name='Code'),
  data?: {
    chaosScenarios?: int32(name='chaosScenarios'),
    flowLimitApps?: int32(name='flowLimitApps'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTopologyOverviewStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTopologyOverviewStatisticsResponseBody(name='body'),
}

async function queryTopologyOverviewStatisticsWithOptions(request: QueryTopologyOverviewStatisticsRequest, runtime: Util.RuntimeOptions): QueryTopologyOverviewStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.requestTimestamp)) {
    query['RequestTimestamp'] = request.requestTimestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTopologyOverviewStatistics',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTopologyOverviewStatistics(request: QueryTopologyOverviewStatisticsRequest): QueryTopologyOverviewStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTopologyOverviewStatisticsWithOptions(request, runtime);
}

model QueryTopologyTableRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  kubClusterId?: string(name='KubClusterId'),
  lang?: string(name='Lang'),
  loop?: boolean(name='Loop'),
  namespace?: string(name='Namespace'),
  requestTimestamp?: long(name='RequestTimestamp'),
  viewId?: string(name='ViewId'),
}

model QueryTopologyTableResponseBody = {
  code?: string(name='Code'),
  data?: {
    containerRows?: [ 
      {
        cpuUtil?: float(name='cpuUtil'),
        deviceId?: string(name='deviceId'),
        hostDeviceName?: string(name='hostDeviceName'),
        hostId?: string(name='hostId'),
        id?: string(name='id'),
        image?: string(name='image'),
        memUtil?: float(name='memUtil'),
        name?: string(name='name'),
        privateIp?: string(name='privateIp'),
        status?: string(name='status'),
        tag?: string(name='tag'),
        upTime?: string(name='upTime'),
      }
    ](name='containerRows'),
    deploymentRows?: [ 
      {
        id?: string(name='id'),
        kubNamespace?: string(name='kubNamespace'),
        name?: string(name='name'),
        observedGeneration?: string(name='observedGeneration'),
        readyReplicas?: int32(name='readyReplicas'),
        replicas?: int32(name='replicas'),
        strategy?: string(name='strategy'),
        type?: string(name='type'),
        updatedReplicas?: int32(name='updatedReplicas'),
      }
    ](name='deploymentRows'),
    headers?: [ string ](name='headers'),
    hostRows?: [ 
      {
        cpuUtil?: float(name='cpuUtil'),
        deviceId?: string(name='deviceId'),
        hostName?: string(name='hostName'),
        id?: string(name='id'),
        memUtil?: float(name='memUtil'),
        name?: string(name='name'),
        osVersion?: string(name='osVersion'),
        privateIp?: string(name='privateIp'),
        upTime?: string(name='upTime'),
      }
    ](name='hostRows'),
    hosts?: [ 
      {
        configurationId?: string(name='configurationId'),
        deviceId?: string(name='deviceId'),
        deviceIp?: string(name='deviceIp'),
        deviceName?: string(name='deviceName'),
      }
    ](name='hosts'),
    kubServiceRows?: [ 
      {
        id?: string(name='id'),
        ip?: string(name='ip'),
        kubNamespace?: string(name='kubNamespace'),
        name?: string(name='name'),
        selector?: string(name='selector'),
        type?: string(name='type'),
        upTime?: string(name='upTime'),
      }
    ](name='kubServiceRows'),
    podRows?: [ 
      {
        id?: string(name='id'),
        ip?: string(name='ip'),
        kubNamespace?: string(name='kubNamespace'),
        name?: string(name='name'),
        restartCount?: int32(name='restartCount'),
        state?: string(name='state'),
        upTime?: string(name='upTime'),
      }
    ](name='podRows'),
    processRows?: [ 
      {
        category?: string(name='category'),
        cmdLine?: string(name='cmdLine'),
        connected?: boolean(name='connected'),
        containerId?: string(name='containerId'),
        containerName?: string(name='containerName'),
        cpuUtil?: float(name='cpuUtil'),
        exception?: float(name='exception'),
        hostDeviceName?: string(name='hostDeviceName'),
        hostId?: string(name='hostId'),
        icon?: string(name='icon'),
        id?: string(name='id'),
        memUtil?: float(name='memUtil'),
        name?: string(name='name'),
        pid?: int32(name='pid'),
        ppid?: int32(name='ppid'),
        qps?: float(name='qps'),
        rt?: float(name='rt'),
        state?: string(name='state'),
        upTime?: string(name='upTime'),
        usr?: string(name='usr'),
      }
    ](name='processRows'),
    rowCategories?: [ string ](name='rowCategories'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTopologyTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTopologyTableResponseBody(name='body'),
}

async function queryTopologyTableWithOptions(request: QueryTopologyTableRequest, runtime: Util.RuntimeOptions): QueryTopologyTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.kubClusterId)) {
    query['KubClusterId'] = request.kubClusterId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.loop)) {
    query['Loop'] = request.loop;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.requestTimestamp)) {
    query['RequestTimestamp'] = request.requestTimestamp;
  }
  if (!Util.isUnset(request.viewId)) {
    query['ViewId'] = request.viewId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTopologyTable',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTopologyTable(request: QueryTopologyTableRequest): QueryTopologyTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTopologyTableWithOptions(request, runtime);
}

model QueryUninstallCommandRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  configurationId?: string(name='ConfigurationId'),
  namespace?: string(name='Namespace'),
}

model QueryUninstallCommandResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryUninstallCommandResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryUninstallCommandResponseBody(name='body'),
}

async function queryUninstallCommandWithOptions(request: QueryUninstallCommandRequest, runtime: Util.RuntimeOptions): QueryUninstallCommandResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.configurationId)) {
    query['ConfigurationId'] = request.configurationId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryUninstallCommand',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryUninstallCommand(request: QueryUninstallCommandRequest): QueryUninstallCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUninstallCommandWithOptions(request, runtime);
}

model QueryUserArrearsAmountRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryUserArrearsAmountResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryUserArrearsAmountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryUserArrearsAmountResponseBody(name='body'),
}

async function queryUserArrearsAmountWithOptions(request: QueryUserArrearsAmountRequest, runtime: Util.RuntimeOptions): QueryUserArrearsAmountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryUserArrearsAmount',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryUserArrearsAmount(request: QueryUserArrearsAmountRequest): QueryUserArrearsAmountResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUserArrearsAmountWithOptions(request, runtime);
}

model QueryUserConsumedAmountRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryUserConsumedAmountResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryUserConsumedAmountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryUserConsumedAmountResponseBody(name='body'),
}

async function queryUserConsumedAmountWithOptions(request: QueryUserConsumedAmountRequest, runtime: Util.RuntimeOptions): QueryUserConsumedAmountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryUserConsumedAmount',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryUserConsumedAmount(request: QueryUserConsumedAmountRequest): QueryUserConsumedAmountResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUserConsumedAmountWithOptions(request, runtime);
}

model QueryUserRemainingAmountRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryUserRemainingAmountResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryUserRemainingAmountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryUserRemainingAmountResponseBody(name='body'),
}

async function queryUserRemainingAmountWithOptions(request: QueryUserRemainingAmountRequest, runtime: Util.RuntimeOptions): QueryUserRemainingAmountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryUserRemainingAmount',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryUserRemainingAmount(request: QueryUserRemainingAmountRequest): QueryUserRemainingAmountResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUserRemainingAmountWithOptions(request, runtime);
}

model QueryUserSceneFunctionsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryUserSceneFunctionsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryUserSceneFunctionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryUserSceneFunctionsResponseBody(name='body'),
}

async function queryUserSceneFunctionsWithOptions(request: QueryUserSceneFunctionsRequest, runtime: Util.RuntimeOptions): QueryUserSceneFunctionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryUserSceneFunctions',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryUserSceneFunctions(request: QueryUserSceneFunctionsRequest): QueryUserSceneFunctionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUserSceneFunctionsWithOptions(request, runtime);
}

model QueryUserScenesRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model QueryUserScenesResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryUserScenesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryUserScenesResponseBody(name='body'),
}

async function queryUserScenesWithOptions(request: QueryUserScenesRequest, runtime: Util.RuntimeOptions): QueryUserScenesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryUserScenes',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryUserScenes(request: QueryUserScenesRequest): QueryUserScenesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUserScenesWithOptions(request, runtime);
}

model QueryWaitInstallPluginRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  EIpList?: string(name='EIpList'),
  instanceIdList?: string(name='InstanceIdList'),
  instanceNameList?: string(name='InstanceNameList'),
  namespace?: string(name='Namespace'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  privateIpList?: string(name='PrivateIpList'),
  publicIpList?: string(name='PublicIpList'),
}

model QueryWaitInstallPluginResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='currentPage'),
    pageSize?: int32(name='pageSize'),
    result?: [ 
      {
        appName?: string(name='appName'),
        canAutoInstall?: boolean(name='canAutoInstall'),
        configurationId?: string(name='configurationId'),
        createTime?: long(name='createTime'),
        enable?: boolean(name='enable'),
        instanceId?: string(name='instanceId'),
        instanceName?: string(name='instanceName'),
        link?: string(name='link'),
        networkType?: string(name='networkType'),
        osType?: string(name='osType'),
        pluginStatus?: int32(name='pluginStatus'),
        pluginType?: string(name='pluginType'),
        privateIp?: string(name='privateIp'),
        publicIp?: string(name='publicIp'),
      }
    ](name='result'),
    totalItem?: long(name='totalItem'),
    totalPage?: int32(name='totalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryWaitInstallPluginResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryWaitInstallPluginResponseBody(name='body'),
}

async function queryWaitInstallPluginWithOptions(request: QueryWaitInstallPluginRequest, runtime: Util.RuntimeOptions): QueryWaitInstallPluginResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.EIpList)) {
    query['EIpList'] = request.EIpList;
  }
  if (!Util.isUnset(request.instanceIdList)) {
    query['InstanceIdList'] = request.instanceIdList;
  }
  if (!Util.isUnset(request.instanceNameList)) {
    query['InstanceNameList'] = request.instanceNameList;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.privateIpList)) {
    query['PrivateIpList'] = request.privateIpList;
  }
  if (!Util.isUnset(request.publicIpList)) {
    query['PublicIpList'] = request.publicIpList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryWaitInstallPlugin',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryWaitInstallPlugin(request: QueryWaitInstallPluginRequest): QueryWaitInstallPluginResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryWaitInstallPluginWithOptions(request, runtime);
}

model ReImplementRuleInspectionRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  functionResultId?: long(name='FunctionResultId'),
  namespace?: string(name='Namespace'),
}

model ReImplementRuleInspectionResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReImplementRuleInspectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReImplementRuleInspectionResponseBody(name='body'),
}

async function reImplementRuleInspectionWithOptions(request: ReImplementRuleInspectionRequest, runtime: Util.RuntimeOptions): ReImplementRuleInspectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.functionResultId)) {
    query['FunctionResultId'] = request.functionResultId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReImplementRuleInspection',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reImplementRuleInspection(request: ReImplementRuleInspectionRequest): ReImplementRuleInspectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return reImplementRuleInspectionWithOptions(request, runtime);
}

model ReloadMetricActivityRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model ReloadMetricActivityResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReloadMetricActivityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReloadMetricActivityResponseBody(name='body'),
}

async function reloadMetricActivityWithOptions(request: ReloadMetricActivityRequest, runtime: Util.RuntimeOptions): ReloadMetricActivityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReloadMetricActivity',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reloadMetricActivity(request: ReloadMetricActivityRequest): ReloadMetricActivityResponse {
  var runtime = new Util.RuntimeOptions{};
  return reloadMetricActivityWithOptions(request, runtime);
}

model ResourceExceptionStatisticsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
  startTime?: long(name='StartTime'),
}

model ResourceExceptionStatisticsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      count?: int32(name='Count'),
      timestamp?: long(name='Timestamp'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ResourceExceptionStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResourceExceptionStatisticsResponseBody(name='body'),
}

async function resourceExceptionStatisticsWithOptions(request: ResourceExceptionStatisticsRequest, runtime: Util.RuntimeOptions): ResourceExceptionStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResourceExceptionStatistics',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resourceExceptionStatistics(request: ResourceExceptionStatisticsRequest): ResourceExceptionStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return resourceExceptionStatisticsWithOptions(request, runtime);
}

model ResourceExceptionsWithTimeRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
  time?: long(name='Time'),
}

model ResourceExceptionsWithTimeResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      detail?: string(name='Detail'),
      exception?: string(name='Exception'),
      num?: int32(name='Num'),
      timestamp?: long(name='Timestamp'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ResourceExceptionsWithTimeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResourceExceptionsWithTimeResponseBody(name='body'),
}

async function resourceExceptionsWithTimeWithOptions(request: ResourceExceptionsWithTimeRequest, runtime: Util.RuntimeOptions): ResourceExceptionsWithTimeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.time)) {
    query['Time'] = request.time;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResourceExceptionsWithTime',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resourceExceptionsWithTime(request: ResourceExceptionsWithTimeRequest): ResourceExceptionsWithTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return resourceExceptionsWithTimeWithOptions(request, runtime);
}

model ResourceLatestExceptionsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
}

model ResourceLatestExceptionsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      detail?: string(name='Detail'),
      exception?: string(name='Exception'),
      num?: int32(name='Num'),
      timestamp?: long(name='Timestamp'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ResourceLatestExceptionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResourceLatestExceptionsResponseBody(name='body'),
}

async function resourceLatestExceptionsWithOptions(request: ResourceLatestExceptionsRequest, runtime: Util.RuntimeOptions): ResourceLatestExceptionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResourceLatestExceptions',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resourceLatestExceptions(request: ResourceLatestExceptionsRequest): ResourceLatestExceptionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return resourceLatestExceptionsWithOptions(request, runtime);
}

model RetryActivityTaskRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model RetryActivityTaskResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RetryActivityTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RetryActivityTaskResponseBody(name='body'),
}

async function retryActivityTaskWithOptions(request: RetryActivityTaskRequest, runtime: Util.RuntimeOptions): RetryActivityTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RetryActivityTask',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function retryActivityTask(request: RetryActivityTaskRequest): RetryActivityTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return retryActivityTaskWithOptions(request, runtime);
}

model RollBackPublishOrderRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  publishOrderId?: string(name='PublishOrderId'),
  rollbackValue?: string(name='RollbackValue'),
}

model RollBackPublishOrderResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model RollBackPublishOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RollBackPublishOrderResponseBody(name='body'),
}

async function rollBackPublishOrderWithOptions(request: RollBackPublishOrderRequest, runtime: Util.RuntimeOptions): RollBackPublishOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.publishOrderId)) {
    query['PublishOrderId'] = request.publishOrderId;
  }
  if (!Util.isUnset(request.rollbackValue)) {
    query['RollbackValue'] = request.rollbackValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RollBackPublishOrder',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function rollBackPublishOrder(request: RollBackPublishOrderRequest): RollBackPublishOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return rollBackPublishOrderWithOptions(request, runtime);
}

model RunExperimentRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model RunExperimentResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RunExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RunExperimentResponseBody(name='body'),
}

async function runExperimentWithOptions(request: RunExperimentRequest, runtime: Util.RuntimeOptions): RunExperimentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RunExperiment',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function runExperiment(request: RunExperimentRequest): RunExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  return runExperimentWithOptions(request, runtime);
}

model RunInspectionRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  clusterId?: string(name='ClusterId'),
  namespace?: string(name='Namespace'),
}

model RunInspectionResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RunInspectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RunInspectionResponseBody(name='body'),
}

async function runInspectionWithOptions(request: RunInspectionRequest, runtime: Util.RuntimeOptions): RunInspectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RunInspection',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function runInspection(request: RunInspectionRequest): RunInspectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return runInspectionWithOptions(request, runtime);
}

model SearchApplicationHostsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SearchApplicationHostsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SearchApplicationHostsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchApplicationHostsResponseBody(name='body'),
}

async function searchApplicationHostsWithOptions(request: SearchApplicationHostsRequest, runtime: Util.RuntimeOptions): SearchApplicationHostsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchApplicationHosts',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchApplicationHosts(request: SearchApplicationHostsRequest): SearchApplicationHostsResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchApplicationHostsWithOptions(request, runtime);
}

model SearchApplicationInVisionRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SearchApplicationInVisionResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SearchApplicationInVisionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchApplicationInVisionResponseBody(name='body'),
}

async function searchApplicationInVisionWithOptions(request: SearchApplicationInVisionRequest, runtime: Util.RuntimeOptions): SearchApplicationInVisionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchApplicationInVision',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchApplicationInVision(request: SearchApplicationInVisionRequest): SearchApplicationInVisionResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchApplicationInVisionWithOptions(request, runtime);
}

model SearchApplicationsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SearchApplicationsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SearchApplicationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchApplicationsResponseBody(name='body'),
}

async function searchApplicationsWithOptions(request: SearchApplicationsRequest, runtime: Util.RuntimeOptions): SearchApplicationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchApplications',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchApplications(request: SearchApplicationsRequest): SearchApplicationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchApplicationsWithOptions(request, runtime);
}

model SearchClusterNamespaceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SearchClusterNamespaceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SearchClusterNamespaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchClusterNamespaceResponseBody(name='body'),
}

async function searchClusterNamespaceWithOptions(request: SearchClusterNamespaceRequest, runtime: Util.RuntimeOptions): SearchClusterNamespaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchClusterNamespace',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchClusterNamespace(request: SearchClusterNamespaceRequest): SearchClusterNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchClusterNamespaceWithOptions(request, runtime);
}

model SearchExperimentsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SearchExperimentsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SearchExperimentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchExperimentsResponseBody(name='body'),
}

async function searchExperimentsWithOptions(request: SearchExperimentsRequest, runtime: Util.RuntimeOptions): SearchExperimentsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchExperiments',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchExperiments(request: SearchExperimentsRequest): SearchExperimentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchExperimentsWithOptions(request, runtime);
}

model SearchExpertiseRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SearchExpertiseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SearchExpertiseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchExpertiseResponseBody(name='body'),
}

async function searchExpertiseWithOptions(request: SearchExpertiseRequest, runtime: Util.RuntimeOptions): SearchExpertiseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchExpertise',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchExpertise(request: SearchExpertiseRequest): SearchExpertiseResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchExpertiseWithOptions(request, runtime);
}

model SearchSceneDraftRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SearchSceneDraftResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SearchSceneDraftResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchSceneDraftResponseBody(name='body'),
}

async function searchSceneDraftWithOptions(request: SearchSceneDraftRequest, runtime: Util.RuntimeOptions): SearchSceneDraftResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchSceneDraft',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchSceneDraft(request: SearchSceneDraftRequest): SearchSceneDraftResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchSceneDraftWithOptions(request, runtime);
}

model SearchSceneFunctionRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SearchSceneFunctionResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SearchSceneFunctionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchSceneFunctionResponseBody(name='body'),
}

async function searchSceneFunctionWithOptions(request: SearchSceneFunctionRequest, runtime: Util.RuntimeOptions): SearchSceneFunctionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchSceneFunction',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchSceneFunction(request: SearchSceneFunctionRequest): SearchSceneFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchSceneFunctionWithOptions(request, runtime);
}

model SearchSceneFunctionsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SearchSceneFunctionsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SearchSceneFunctionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchSceneFunctionsResponseBody(name='body'),
}

async function searchSceneFunctionsWithOptions(request: SearchSceneFunctionsRequest, runtime: Util.RuntimeOptions): SearchSceneFunctionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchSceneFunctions',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchSceneFunctions(request: SearchSceneFunctionsRequest): SearchSceneFunctionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchSceneFunctionsWithOptions(request, runtime);
}

model SearchScopesByApplicationInVisionRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SearchScopesByApplicationInVisionResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SearchScopesByApplicationInVisionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchScopesByApplicationInVisionResponseBody(name='body'),
}

async function searchScopesByApplicationInVisionWithOptions(request: SearchScopesByApplicationInVisionRequest, runtime: Util.RuntimeOptions): SearchScopesByApplicationInVisionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchScopesByApplicationInVision',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchScopesByApplicationInVision(request: SearchScopesByApplicationInVisionRequest): SearchScopesByApplicationInVisionResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchScopesByApplicationInVisionWithOptions(request, runtime);
}

model SearchTagsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SearchTagsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SearchTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchTagsResponseBody(name='body'),
}

async function searchTagsWithOptions(request: SearchTagsRequest, runtime: Util.RuntimeOptions): SearchTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchTags',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchTags(request: SearchTagsRequest): SearchTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchTagsWithOptions(request, runtime);
}

model SearchUserSceneFunctionRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SearchUserSceneFunctionResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SearchUserSceneFunctionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchUserSceneFunctionResponseBody(name='body'),
}

async function searchUserSceneFunctionWithOptions(request: SearchUserSceneFunctionRequest, runtime: Util.RuntimeOptions): SearchUserSceneFunctionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchUserSceneFunction',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchUserSceneFunction(request: SearchUserSceneFunctionRequest): SearchUserSceneFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchUserSceneFunctionWithOptions(request, runtime);
}

model SearchWorkspaceMemberRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SearchWorkspaceMemberResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SearchWorkspaceMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchWorkspaceMemberResponseBody(name='body'),
}

async function searchWorkspaceMemberWithOptions(request: SearchWorkspaceMemberRequest, runtime: Util.RuntimeOptions): SearchWorkspaceMemberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchWorkspaceMember',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchWorkspaceMember(request: SearchWorkspaceMemberRequest): SearchWorkspaceMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchWorkspaceMemberWithOptions(request, runtime);
}

model SecurityCheckResourceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  bid?: string(name='Bid'),
  country?: string(name='Country'),
  gmtWakeup?: string(name='GmtWakeup'),
  hid?: long(name='Hid'),
  interrupt?: boolean(name='Interrupt'),
  invoker?: string(name='Invoker'),
  lang?: string(name='Lang'),
  level?: long(name='Level'),
  message?: string(name='Message'),
  namespace?: string(name='Namespace'),
  pk?: string(name='Pk'),
  prompt?: string(name='Prompt'),
  success?: boolean(name='Success'),
  taskExtraData?: string(name='TaskExtraData'),
  taskIdentifier?: string(name='TaskIdentifier'),
  url?: string(name='Url'),
}

model SecurityCheckResourceResponseBody = {
  bid?: string(name='Bid'),
  code?: string(name='Code'),
  country?: string(name='Country'),
  data?: string(name='Data'),
  gmtWakeup?: string(name='GmtWakeup'),
  hid?: long(name='Hid'),
  interrupt?: boolean(name='Interrupt'),
  invoker?: string(name='Invoker'),
  level?: long(name='Level'),
  message?: string(name='Message'),
  pk?: string(name='Pk'),
  prompt?: string(name='Prompt'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskExtraData?: string(name='TaskExtraData'),
  taskIdentifier?: string(name='TaskIdentifier'),
  url?: string(name='Url'),
}

model SecurityCheckResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SecurityCheckResourceResponseBody(name='body'),
}

async function securityCheckResourceWithOptions(request: SecurityCheckResourceRequest, runtime: Util.RuntimeOptions): SecurityCheckResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.bid)) {
    query['Bid'] = request.bid;
  }
  if (!Util.isUnset(request.country)) {
    query['Country'] = request.country;
  }
  if (!Util.isUnset(request.gmtWakeup)) {
    query['GmtWakeup'] = request.gmtWakeup;
  }
  if (!Util.isUnset(request.hid)) {
    query['Hid'] = request.hid;
  }
  if (!Util.isUnset(request.interrupt)) {
    query['Interrupt'] = request.interrupt;
  }
  if (!Util.isUnset(request.invoker)) {
    query['Invoker'] = request.invoker;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.level)) {
    query['Level'] = request.level;
  }
  if (!Util.isUnset(request.message)) {
    query['Message'] = request.message;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pk)) {
    query['Pk'] = request.pk;
  }
  if (!Util.isUnset(request.prompt)) {
    query['Prompt'] = request.prompt;
  }
  if (!Util.isUnset(request.success)) {
    query['Success'] = request.success;
  }
  if (!Util.isUnset(request.taskExtraData)) {
    query['TaskExtraData'] = request.taskExtraData;
  }
  if (!Util.isUnset(request.taskIdentifier)) {
    query['TaskIdentifier'] = request.taskIdentifier;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SecurityCheckResource',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function securityCheckResource(request: SecurityCheckResourceRequest): SecurityCheckResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return securityCheckResourceWithOptions(request, runtime);
}

model SecurityLogicalDeleteResourceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  bid?: string(name='Bid'),
  country?: string(name='Country'),
  gmtWakeup?: string(name='GmtWakeup'),
  hid?: long(name='Hid'),
  interrupt?: boolean(name='Interrupt'),
  invoker?: string(name='Invoker'),
  lang?: string(name='Lang'),
  level?: long(name='Level'),
  message?: string(name='Message'),
  namespace?: string(name='Namespace'),
  pk?: string(name='Pk'),
  prompt?: string(name='Prompt'),
  success?: boolean(name='Success'),
  taskExtraData?: string(name='TaskExtraData'),
  taskIdentifier?: string(name='TaskIdentifier'),
  url?: string(name='Url'),
}

model SecurityLogicalDeleteResourceResponseBody = {
  bid?: string(name='Bid'),
  code?: string(name='Code'),
  country?: string(name='Country'),
  data?: string(name='Data'),
  gmtWakeup?: string(name='GmtWakeup'),
  hid?: long(name='Hid'),
  interrupt?: boolean(name='Interrupt'),
  invoker?: string(name='Invoker'),
  level?: long(name='Level'),
  message?: string(name='Message'),
  pk?: string(name='Pk'),
  prompt?: string(name='Prompt'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskExtraData?: string(name='TaskExtraData'),
  taskIdentifier?: string(name='TaskIdentifier'),
  url?: string(name='Url'),
}

model SecurityLogicalDeleteResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SecurityLogicalDeleteResourceResponseBody(name='body'),
}

async function securityLogicalDeleteResourceWithOptions(request: SecurityLogicalDeleteResourceRequest, runtime: Util.RuntimeOptions): SecurityLogicalDeleteResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.bid)) {
    query['Bid'] = request.bid;
  }
  if (!Util.isUnset(request.country)) {
    query['Country'] = request.country;
  }
  if (!Util.isUnset(request.gmtWakeup)) {
    query['GmtWakeup'] = request.gmtWakeup;
  }
  if (!Util.isUnset(request.hid)) {
    query['Hid'] = request.hid;
  }
  if (!Util.isUnset(request.interrupt)) {
    query['Interrupt'] = request.interrupt;
  }
  if (!Util.isUnset(request.invoker)) {
    query['Invoker'] = request.invoker;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.level)) {
    query['Level'] = request.level;
  }
  if (!Util.isUnset(request.message)) {
    query['Message'] = request.message;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pk)) {
    query['Pk'] = request.pk;
  }
  if (!Util.isUnset(request.prompt)) {
    query['Prompt'] = request.prompt;
  }
  if (!Util.isUnset(request.success)) {
    query['Success'] = request.success;
  }
  if (!Util.isUnset(request.taskExtraData)) {
    query['TaskExtraData'] = request.taskExtraData;
  }
  if (!Util.isUnset(request.taskIdentifier)) {
    query['TaskIdentifier'] = request.taskIdentifier;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SecurityLogicalDeleteResource',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function securityLogicalDeleteResource(request: SecurityLogicalDeleteResourceRequest): SecurityLogicalDeleteResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return securityLogicalDeleteResourceWithOptions(request, runtime);
}

model SecurityPhysicalDeleteResourceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  bid?: string(name='Bid'),
  country?: string(name='Country'),
  gmtWakeup?: string(name='GmtWakeup'),
  hid?: long(name='Hid'),
  interrupt?: boolean(name='Interrupt'),
  invoker?: string(name='Invoker'),
  lang?: string(name='Lang'),
  level?: long(name='Level'),
  message?: string(name='Message'),
  namespace?: string(name='Namespace'),
  pk?: string(name='Pk'),
  prompt?: string(name='Prompt'),
  success?: boolean(name='Success'),
  taskExtraData?: string(name='TaskExtraData'),
  taskIdentifier?: string(name='TaskIdentifier'),
  url?: string(name='Url'),
}

model SecurityPhysicalDeleteResourceResponseBody = {
  bid?: string(name='Bid'),
  code?: string(name='Code'),
  country?: string(name='Country'),
  data?: string(name='Data'),
  gmtWakeup?: string(name='GmtWakeup'),
  hid?: long(name='Hid'),
  interrupt?: boolean(name='Interrupt'),
  invoker?: string(name='Invoker'),
  level?: long(name='Level'),
  message?: string(name='Message'),
  pk?: string(name='Pk'),
  prompt?: string(name='Prompt'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskExtraData?: string(name='TaskExtraData'),
  taskIdentifier?: string(name='TaskIdentifier'),
  url?: string(name='Url'),
}

model SecurityPhysicalDeleteResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SecurityPhysicalDeleteResourceResponseBody(name='body'),
}

async function securityPhysicalDeleteResourceWithOptions(request: SecurityPhysicalDeleteResourceRequest, runtime: Util.RuntimeOptions): SecurityPhysicalDeleteResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.bid)) {
    query['Bid'] = request.bid;
  }
  if (!Util.isUnset(request.country)) {
    query['Country'] = request.country;
  }
  if (!Util.isUnset(request.gmtWakeup)) {
    query['GmtWakeup'] = request.gmtWakeup;
  }
  if (!Util.isUnset(request.hid)) {
    query['Hid'] = request.hid;
  }
  if (!Util.isUnset(request.interrupt)) {
    query['Interrupt'] = request.interrupt;
  }
  if (!Util.isUnset(request.invoker)) {
    query['Invoker'] = request.invoker;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.level)) {
    query['Level'] = request.level;
  }
  if (!Util.isUnset(request.message)) {
    query['Message'] = request.message;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pk)) {
    query['Pk'] = request.pk;
  }
  if (!Util.isUnset(request.prompt)) {
    query['Prompt'] = request.prompt;
  }
  if (!Util.isUnset(request.success)) {
    query['Success'] = request.success;
  }
  if (!Util.isUnset(request.taskExtraData)) {
    query['TaskExtraData'] = request.taskExtraData;
  }
  if (!Util.isUnset(request.taskIdentifier)) {
    query['TaskIdentifier'] = request.taskIdentifier;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SecurityPhysicalDeleteResource',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function securityPhysicalDeleteResource(request: SecurityPhysicalDeleteResourceRequest): SecurityPhysicalDeleteResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return securityPhysicalDeleteResourceWithOptions(request, runtime);
}

model SentinelAddMonitorDashboardRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  dashboardName?: string(name='DashboardName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelAddMonitorDashboardResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelAddMonitorDashboardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelAddMonitorDashboardResponseBody(name='body'),
}

async function sentinelAddMonitorDashboardWithOptions(request: SentinelAddMonitorDashboardRequest, runtime: Util.RuntimeOptions): SentinelAddMonitorDashboardResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.dashboardName)) {
    query['DashboardName'] = request.dashboardName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelAddMonitorDashboard',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelAddMonitorDashboard(request: SentinelAddMonitorDashboardRequest): SentinelAddMonitorDashboardResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelAddMonitorDashboardWithOptions(request, runtime);
}

model SentinelAddOrUpdateMonitorDashboardItemsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  dashboardItems?: string(name='DashboardItems'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelAddOrUpdateMonitorDashboardItemsResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelAddOrUpdateMonitorDashboardItemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelAddOrUpdateMonitorDashboardItemsResponseBody(name='body'),
}

async function sentinelAddOrUpdateMonitorDashboardItemsWithOptions(request: SentinelAddOrUpdateMonitorDashboardItemsRequest, runtime: Util.RuntimeOptions): SentinelAddOrUpdateMonitorDashboardItemsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.dashboardItems)) {
    query['DashboardItems'] = request.dashboardItems;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelAddOrUpdateMonitorDashboardItems',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelAddOrUpdateMonitorDashboardItems(request: SentinelAddOrUpdateMonitorDashboardItemsRequest): SentinelAddOrUpdateMonitorDashboardItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelAddOrUpdateMonitorDashboardItemsWithOptions(request, runtime);
}

model SentinelAppEventsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  eventType?: long(name='EventType'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  queryLevel?: int32(name='QueryLevel'),
  startTime?: long(name='StartTime'),
}

model SentinelAppEventsResponseBody = {
  code?: string(name='Code'),
  data?: {
    datas?: [ 
      {
        app?: string(name='app'),
        eventDetails?: string(name='eventDetails'),
        eventLevel?: int32(name='eventLevel'),
        eventMsg?: string(name='eventMsg'),
        eventType?: int32(name='eventType'),
        gmtCreate?: long(name='gmtCreate'),
        gmtModified?: long(name='gmtModified'),
        namespace?: string(name='namespace'),
        resource?: string(name='resource'),
        ruleIds?: string(name='ruleIds'),
        userId?: string(name='userId'),
      }
    ](name='datas'),
    pageIndex?: long(name='pageIndex'),
    pageSize?: long(name='pageSize'),
    totalCount?: long(name='totalCount'),
    totalPage?: long(name='totalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelAppEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelAppEventsResponseBody(name='body'),
}

async function sentinelAppEventsWithOptions(request: SentinelAppEventsRequest, runtime: Util.RuntimeOptions): SentinelAppEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.eventType)) {
    query['EventType'] = request.eventType;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryLevel)) {
    query['QueryLevel'] = request.queryLevel;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelAppEvents',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelAppEvents(request: SentinelAppEventsRequest): SentinelAppEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelAppEventsWithOptions(request, runtime);
}

model SentinelAppEventsByTypeRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  queryLevel?: int32(name='QueryLevel'),
  startTime?: long(name='StartTime'),
  eventType?: long(name='eventType'),
}

model SentinelAppEventsByTypeResponseBody = {
  code?: string(name='Code'),
  data?: {
    datas?: [ 
      {
        app?: string(name='app'),
        eventLevel?: int32(name='eventLevel'),
        eventMsg?: string(name='eventMsg'),
        eventType?: int32(name='eventType'),
        gmtCreate?: long(name='gmtCreate'),
        gmtModified?: long(name='gmtModified'),
        namespace?: string(name='namespace'),
        resource?: string(name='resource'),
        userId?: string(name='userId'),
      }
    ](name='datas'),
    pageIndex?: long(name='pageIndex'),
    pageSize?: long(name='pageSize'),
    totalCount?: long(name='totalCount'),
    totalPage?: long(name='totalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelAppEventsByTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelAppEventsByTypeResponseBody(name='body'),
}

async function sentinelAppEventsByTypeWithOptions(request: SentinelAppEventsByTypeRequest, runtime: Util.RuntimeOptions): SentinelAppEventsByTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryLevel)) {
    query['QueryLevel'] = request.queryLevel;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.eventType)) {
    query['eventType'] = request.eventType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelAppEventsByType',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelAppEventsByType(request: SentinelAppEventsByTypeRequest): SentinelAppEventsByTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelAppEventsByTypeWithOptions(request, runtime);
}

model SentinelAppListByUserIdRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  authId?: string(name='AuthId'),
  namespace?: string(name='Namespace'),
}

model SentinelAppListByUserIdResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      ahasAppName?: string(name='ahasAppName'),
      appName?: string(name='appName'),
      appType?: int32(name='appType'),
      createTimestamp?: long(name='createTimestamp'),
      id?: long(name='id'),
      lastHealthPingTime?: long(name='lastHealthPingTime'),
      modifiedTimestamp?: long(name='modifiedTimestamp'),
      namespace?: string(name='namespace'),
      userId?: string(name='userId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelAppListByUserIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelAppListByUserIdResponseBody(name='body'),
}

async function sentinelAppListByUserIdWithOptions(request: SentinelAppListByUserIdRequest, runtime: Util.RuntimeOptions): SentinelAppListByUserIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.authId)) {
    query['AuthId'] = request.authId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelAppListByUserId',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelAppListByUserId(request: SentinelAppListByUserIdRequest): SentinelAppListByUserIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelAppListByUserIdWithOptions(request, runtime);
}

model SentinelAppListSentinelAppsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appType?: int32(name='AppType'),
  minHeartBeat?: long(name='MinHeartBeat'),
  namespace?: string(name='Namespace'),
}

model SentinelAppListSentinelAppsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      ahasAppName?: string(name='ahasAppName'),
      appName?: string(name='appName'),
      appType?: int32(name='appType'),
      createTimestamp?: long(name='createTimestamp'),
      id?: long(name='id'),
      lastHealthPingTime?: long(name='lastHealthPingTime'),
      modifiedTimestamp?: long(name='modifiedTimestamp'),
      namespace?: string(name='namespace'),
      userId?: string(name='userId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelAppListSentinelAppsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelAppListSentinelAppsResponseBody(name='body'),
}

async function sentinelAppListSentinelAppsWithOptions(request: SentinelAppListSentinelAppsRequest, runtime: Util.RuntimeOptions): SentinelAppListSentinelAppsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appType)) {
    query['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.minHeartBeat)) {
    query['MinHeartBeat'] = request.minHeartBeat;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelAppListSentinelApps',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelAppListSentinelApps(request: SentinelAppListSentinelAppsRequest): SentinelAppListSentinelAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelAppListSentinelAppsWithOptions(request, runtime);
}

model SentinelAppMachineListRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelAppMachineListResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      health?: boolean(name='health'),
      hostname?: string(name='hostname'),
      id?: long(name='id'),
      ip?: string(name='ip'),
      pId?: string(name='pId'),
      privateIp?: string(name='privateIp'),
      processConfigurationId?: string(name='processConfigurationId'),
      timestamp?: long(name='timestamp'),
      version?: string(name='version'),
      vpcId?: string(name='vpcId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelAppMachineListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelAppMachineListResponseBody(name='body'),
}

async function sentinelAppMachineListWithOptions(request: SentinelAppMachineListRequest, runtime: Util.RuntimeOptions): SentinelAppMachineListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelAppMachineList',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelAppMachineList(request: SentinelAppMachineListRequest): SentinelAppMachineListResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelAppMachineListWithOptions(request, runtime);
}

model SentinelAppMachineListByPageRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model SentinelAppMachineListByPageResponseBody = {
  code?: string(name='Code'),
  data?: {
    datas?: [ 
      {
        clientType?: string(name='clientType'),
        health?: boolean(name='health'),
        hostname?: string(name='hostname'),
        id?: long(name='id'),
        ip?: string(name='ip'),
        pid?: int32(name='pid'),
        privateIp?: string(name='privateIp'),
        processConfigurationId?: string(name='processConfigurationId'),
        timestamp?: long(name='timestamp'),
        version?: string(name='version'),
        vpcId?: string(name='vpcId'),
      }
    ](name='Datas'),
    pageIndex?: long(name='PageIndex'),
    pageSize?: long(name='PageSize'),
    totalCount?: long(name='TotalCount'),
    totalPage?: long(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelAppMachineListByPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelAppMachineListByPageResponseBody(name='body'),
}

async function sentinelAppMachineListByPageWithOptions(request: SentinelAppMachineListByPageRequest, runtime: Util.RuntimeOptions): SentinelAppMachineListByPageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelAppMachineListByPage',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelAppMachineListByPage(request: SentinelAppMachineListByPageRequest): SentinelAppMachineListByPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelAppMachineListByPageWithOptions(request, runtime);
}

model SentinelAppMachineListByUserIdRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  authId?: string(name='AuthId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelAppMachineListByUserIdResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      health?: boolean(name='health'),
      hostname?: string(name='hostname'),
      id?: long(name='id'),
      ip?: string(name='ip'),
      pId?: string(name='pId'),
      privateIp?: string(name='privateIp'),
      processConfigurationId?: string(name='processConfigurationId'),
      timestamp?: long(name='timestamp'),
      version?: string(name='version'),
      vpcId?: string(name='vpcId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelAppMachineListByUserIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelAppMachineListByUserIdResponseBody(name='body'),
}

async function sentinelAppMachineListByUserIdWithOptions(request: SentinelAppMachineListByUserIdRequest, runtime: Util.RuntimeOptions): SentinelAppMachineListByUserIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.authId)) {
    query['AuthId'] = request.authId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelAppMachineListByUserId',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelAppMachineListByUserId(request: SentinelAppMachineListByUserIdRequest): SentinelAppMachineListByUserIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelAppMachineListByUserIdWithOptions(request, runtime);
}

model SentinelAppResourceEventsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  resource?: string(name='Resource'),
  sourceType?: string(name='SourceType'),
  startTime?: long(name='StartTime'),
}

model SentinelAppResourceEventsResponseBody = {
  code?: string(name='Code'),
  data?: {
    datas?: [ 
      {
        app?: string(name='app'),
        eventDetails?: string(name='eventDetails'),
        eventLevel?: int32(name='eventLevel'),
        eventMsg?: string(name='eventMsg'),
        eventType?: int32(name='eventType'),
        gmtCreate?: long(name='gmtCreate'),
        gmtModified?: long(name='gmtModified'),
        namespace?: string(name='namespace'),
        resource?: string(name='resource'),
        ruleIds?: string(name='ruleIds'),
        userId?: string(name='userId'),
      }
    ](name='datas'),
    pageIndex?: long(name='pageIndex'),
    pageSize?: long(name='pageSize'),
    totalCount?: long(name='totalCount'),
    totalPage?: long(name='totalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelAppResourceEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelAppResourceEventsResponseBody(name='body'),
}

async function sentinelAppResourceEventsWithOptions(request: SentinelAppResourceEventsRequest, runtime: Util.RuntimeOptions): SentinelAppResourceEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelAppResourceEvents',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelAppResourceEvents(request: SentinelAppResourceEventsRequest): SentinelAppResourceEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelAppResourceEventsWithOptions(request, runtime);
}

model SentinelAppSummaryMetricListTopNAppsSummaryMetricRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appType?: int32(name='AppType'),
  desc?: boolean(name='Desc'),
  endTime?: long(name='EndTime'),
  minHeartBeat?: long(name='MinHeartBeat'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  searchKey?: string(name='SearchKey'),
  startTime?: long(name='StartTime'),
}

model SentinelAppSummaryMetricListTopNAppsSummaryMetricResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelAppSummaryMetricListTopNAppsSummaryMetricResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelAppSummaryMetricListTopNAppsSummaryMetricResponseBody(name='body'),
}

async function sentinelAppSummaryMetricListTopNAppsSummaryMetricWithOptions(request: SentinelAppSummaryMetricListTopNAppsSummaryMetricRequest, runtime: Util.RuntimeOptions): SentinelAppSummaryMetricListTopNAppsSummaryMetricResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appType)) {
    query['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.desc)) {
    query['Desc'] = request.desc;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.minHeartBeat)) {
    query['MinHeartBeat'] = request.minHeartBeat;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchKey)) {
    query['SearchKey'] = request.searchKey;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelAppSummaryMetricListTopNAppsSummaryMetric',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelAppSummaryMetricListTopNAppsSummaryMetric(request: SentinelAppSummaryMetricListTopNAppsSummaryMetricRequest): SentinelAppSummaryMetricListTopNAppsSummaryMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelAppSummaryMetricListTopNAppsSummaryMetricWithOptions(request, runtime);
}

model SentinelAppSummaryMetricQuerySummaryMetricsOfAppRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  namespace?: string(name='Namespace'),
  startTime?: long(name='StartTime'),
}

model SentinelAppSummaryMetricQuerySummaryMetricsOfAppResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appName?: string(name='appName'),
      blockedQps?: float(name='blockedQps'),
      count?: int32(name='count'),
      exception?: float(name='exception'),
      namespace?: string(name='namespace'),
      passedQps?: float(name='passedQps'),
      resource?: string(name='resource'),
      rt?: float(name='rt'),
      successQps?: float(name='successQps'),
      timestamp?: long(name='timestamp'),
      userId?: string(name='userId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelAppSummaryMetricQuerySummaryMetricsOfAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelAppSummaryMetricQuerySummaryMetricsOfAppResponseBody(name='body'),
}

async function sentinelAppSummaryMetricQuerySummaryMetricsOfAppWithOptions(request: SentinelAppSummaryMetricQuerySummaryMetricsOfAppRequest, runtime: Util.RuntimeOptions): SentinelAppSummaryMetricQuerySummaryMetricsOfAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelAppSummaryMetricQuerySummaryMetricsOfApp',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelAppSummaryMetricQuerySummaryMetricsOfApp(request: SentinelAppSummaryMetricQuerySummaryMetricsOfAppRequest): SentinelAppSummaryMetricQuerySummaryMetricsOfAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelAppSummaryMetricQuerySummaryMetricsOfAppWithOptions(request, runtime);
}

model SentinelChangeModelRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  newModel?: long(name='NewModel'),
  oldModel?: string(name='OldModel'),
}

model SentinelChangeModelResponseBody = {
  code?: string(name='Code'),
  data?: int32(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelChangeModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelChangeModelResponseBody(name='body'),
}

async function sentinelChangeModelWithOptions(request: SentinelChangeModelRequest, runtime: Util.RuntimeOptions): SentinelChangeModelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.newModel)) {
    query['NewModel'] = request.newModel;
  }
  if (!Util.isUnset(request.oldModel)) {
    query['OldModel'] = request.oldModel;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelChangeModel',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelChangeModel(request: SentinelChangeModelRequest): SentinelChangeModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelChangeModelWithOptions(request, runtime);
}

model SentinelCheckSubUserAuthRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
}

model SentinelCheckSubUserAuthResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelCheckSubUserAuthResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelCheckSubUserAuthResponseBody(name='body'),
}

async function sentinelCheckSubUserAuthWithOptions(request: SentinelCheckSubUserAuthRequest, runtime: Util.RuntimeOptions): SentinelCheckSubUserAuthResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelCheckSubUserAuth',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelCheckSubUserAuth(request: SentinelCheckSubUserAuthRequest): SentinelCheckSubUserAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelCheckSubUserAuthWithOptions(request, runtime);
}

model SentinelClusterAssignGetNewAssignPageDataRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelClusterAssignGetNewAssignPageDataResponseBody = {
  code?: string(name='Code'),
  data?: {
    unassignedSet?: [ 
      {
        appName?: string(name='appName'),
        deviceType?: int32(name='deviceType'),
        enable?: boolean(name='enable'),
        health?: boolean(name='health'),
        hostname?: string(name='hostname'),
        id?: long(name='id'),
        lastHealthPingTime?: long(name='lastHealthPingTime'),
        namespace?: string(name='namespace'),
        parentIp?: string(name='parentIp'),
        pid?: int32(name='pid'),
        pluginType?: string(name='pluginType'),
        privateIp?: string(name='privateIp'),
        processConfigurationId?: string(name='processConfigurationId'),
        status?: int32(name='status'),
        userId?: string(name='userId'),
        version?: string(name='version'),
        vpcId?: string(name='vpcId'),
      }
    ](name='unassignedSet'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelClusterAssignGetNewAssignPageDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelClusterAssignGetNewAssignPageDataResponseBody(name='body'),
}

async function sentinelClusterAssignGetNewAssignPageDataWithOptions(request: SentinelClusterAssignGetNewAssignPageDataRequest, runtime: Util.RuntimeOptions): SentinelClusterAssignGetNewAssignPageDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelClusterAssignGetNewAssignPageData',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelClusterAssignGetNewAssignPageData(request: SentinelClusterAssignGetNewAssignPageDataRequest): SentinelClusterAssignGetNewAssignPageDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelClusterAssignGetNewAssignPageDataWithOptions(request, runtime);
}

model SentinelClusterAssignMapListForAppRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelClusterAssignMapListForAppResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appMachine?: {
        health?: boolean(name='health'),
        id?: long(name='id'),
        pid?: int32(name='pid'),
        privateIp?: string(name='privateIp'),
        processConfigurationId?: string(name='processConfigurationId'),
        vpcId?: string(name='vpcId'),
      }(name='appMachine'),
      appName?: string(name='appName'),
      clientCount?: int32(name='clientCount'),
      clientSet?: [ string ](name='clientSet'),
      id?: long(name='id'),
      maxAllowedQps?: float(name='maxAllowedQps'),
      namespace?: string(name='namespace'),
      serverPort?: int32(name='serverPort'),
      userId?: string(name='userId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelClusterAssignMapListForAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelClusterAssignMapListForAppResponseBody(name='body'),
}

async function sentinelClusterAssignMapListForAppWithOptions(request: SentinelClusterAssignMapListForAppRequest, runtime: Util.RuntimeOptions): SentinelClusterAssignMapListForAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelClusterAssignMapListForApp',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelClusterAssignMapListForApp(request: SentinelClusterAssignMapListForAppRequest): SentinelClusterAssignMapListForAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelClusterAssignMapListForAppWithOptions(request, runtime);
}

model SentinelClusterAssignMapNewRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  clientSet?: string(name='ClientSet'),
  lang?: string(name='Lang'),
  maxAllowedQps?: float(name='MaxAllowedQps'),
  namespace?: string(name='Namespace'),
  pid?: int32(name='Pid'),
  processConfigurationId?: string(name='ProcessConfigurationId'),
  serverIp?: string(name='ServerIp'),
  serverMachineId?: long(name='ServerMachineId'),
  serverPort?: int32(name='ServerPort'),
  vpcId?: string(name='VpcId'),
}

model SentinelClusterAssignMapNewResponseBody = {
  code?: string(name='Code'),
  data?: {
    appMachine?: {
      health?: boolean(name='health'),
      id?: long(name='id'),
      pid?: int32(name='pid'),
      privateIp?: string(name='privateIp'),
      processConfigurationId?: string(name='processConfigurationId'),
      vpcId?: string(name='vpcId'),
    }(name='appMachine'),
    appName?: string(name='appName'),
    clientCount?: int32(name='clientCount'),
    clientSet?: [ string ](name='clientSet'),
    id?: long(name='id'),
    maxAllowedQps?: float(name='maxAllowedQps'),
    namespace?: string(name='namespace'),
    serverPort?: int32(name='serverPort'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelClusterAssignMapNewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelClusterAssignMapNewResponseBody(name='body'),
}

async function sentinelClusterAssignMapNewWithOptions(request: SentinelClusterAssignMapNewRequest, runtime: Util.RuntimeOptions): SentinelClusterAssignMapNewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.clientSet)) {
    query['ClientSet'] = request.clientSet;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.maxAllowedQps)) {
    query['MaxAllowedQps'] = request.maxAllowedQps;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pid)) {
    query['Pid'] = request.pid;
  }
  if (!Util.isUnset(request.processConfigurationId)) {
    query['ProcessConfigurationId'] = request.processConfigurationId;
  }
  if (!Util.isUnset(request.serverIp)) {
    query['ServerIp'] = request.serverIp;
  }
  if (!Util.isUnset(request.serverMachineId)) {
    query['ServerMachineId'] = request.serverMachineId;
  }
  if (!Util.isUnset(request.serverPort)) {
    query['ServerPort'] = request.serverPort;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelClusterAssignMapNew',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelClusterAssignMapNew(request: SentinelClusterAssignMapNewRequest): SentinelClusterAssignMapNewResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelClusterAssignMapNewWithOptions(request, runtime);
}

model SentinelClusterAssignMapUnbindSingleRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  assignId?: long(name='AssignId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelClusterAssignMapUnbindSingleResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelClusterAssignMapUnbindSingleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelClusterAssignMapUnbindSingleResponseBody(name='body'),
}

async function sentinelClusterAssignMapUnbindSingleWithOptions(request: SentinelClusterAssignMapUnbindSingleRequest, runtime: Util.RuntimeOptions): SentinelClusterAssignMapUnbindSingleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.assignId)) {
    query['AssignId'] = request.assignId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelClusterAssignMapUnbindSingle',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelClusterAssignMapUnbindSingle(request: SentinelClusterAssignMapUnbindSingleRequest): SentinelClusterAssignMapUnbindSingleResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelClusterAssignMapUnbindSingleWithOptions(request, runtime);
}

model SentinelClusterAssignMapUpdateRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  assignId?: long(name='AssignId'),
  clientSet?: string(name='ClientSet'),
  lang?: string(name='Lang'),
  maxAllowedQps?: float(name='MaxAllowedQps'),
  namespace?: string(name='Namespace'),
  serverPort?: int32(name='ServerPort'),
}

model SentinelClusterAssignMapUpdateResponseBody = {
  code?: string(name='Code'),
  data?: {
    appMachine?: {
      health?: boolean(name='health'),
      id?: long(name='id'),
      pid?: int32(name='pid'),
      privateIp?: string(name='privateIp'),
      processConfigurationId?: string(name='processConfigurationId'),
      vpcId?: string(name='vpcId'),
    }(name='appMachine'),
    appName?: string(name='appName'),
    clientCount?: int32(name='clientCount'),
    clientSet?: [ string ](name='clientSet'),
    id?: long(name='id'),
    maxAllowedQps?: float(name='maxAllowedQps'),
    namespace?: string(name='namespace'),
    serverPort?: int32(name='serverPort'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelClusterAssignMapUpdateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelClusterAssignMapUpdateResponseBody(name='body'),
}

async function sentinelClusterAssignMapUpdateWithOptions(request: SentinelClusterAssignMapUpdateRequest, runtime: Util.RuntimeOptions): SentinelClusterAssignMapUpdateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.assignId)) {
    query['AssignId'] = request.assignId;
  }
  if (!Util.isUnset(request.clientSet)) {
    query['ClientSet'] = request.clientSet;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.maxAllowedQps)) {
    query['MaxAllowedQps'] = request.maxAllowedQps;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.serverPort)) {
    query['ServerPort'] = request.serverPort;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelClusterAssignMapUpdate',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelClusterAssignMapUpdate(request: SentinelClusterAssignMapUpdateRequest): SentinelClusterAssignMapUpdateResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelClusterAssignMapUpdateWithOptions(request, runtime);
}

model SentinelClusterV2AliyunAgwDeleteFlowRuleRequest {
  id?: long(name='Id'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelClusterV2AliyunAgwDeleteFlowRuleResponseBody = {
  code?: string(name='Code'),
  data?: int32(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelClusterV2AliyunAgwDeleteFlowRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelClusterV2AliyunAgwDeleteFlowRuleResponseBody(name='body'),
}

async function sentinelClusterV2AliyunAgwDeleteFlowRuleWithOptions(request: SentinelClusterV2AliyunAgwDeleteFlowRuleRequest, runtime: Util.RuntimeOptions): SentinelClusterV2AliyunAgwDeleteFlowRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelClusterV2AliyunAgwDeleteFlowRule',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelClusterV2AliyunAgwDeleteFlowRule(request: SentinelClusterV2AliyunAgwDeleteFlowRuleRequest): SentinelClusterV2AliyunAgwDeleteFlowRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelClusterV2AliyunAgwDeleteFlowRuleWithOptions(request, runtime);
}

model SentinelClusterV2AliyunAgwGetAllFlowRulesForPushRequest {
  lang?: string(name='Lang'),
}

model SentinelClusterV2AliyunAgwGetAllFlowRulesForPushResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      burstCount?: int32(name='BurstCount'),
      clusterConfig?: {
        fallbackToLocalWhenFail?: boolean(name='FallbackToLocalWhenFail'),
        flowId?: long(name='FlowId'),
        sampleCount?: int32(name='SampleCount'),
        thresholdType?: int32(name='ThresholdType'),
        windowIntervalMs?: long(name='WindowIntervalMs'),
      }(name='ClusterConfig'),
      clusterMode?: boolean(name='ClusterMode'),
      controlBehavior?: int32(name='ControlBehavior'),
      count?: float(name='Count'),
      durationInSec?: long(name='DurationInSec'),
      grade?: int32(name='Grade'),
      maxQueueingTimeMs?: int32(name='MaxQueueingTimeMs'),
      paramFlowItemList?: [ 
        {
          classType?: string(name='ClassType'),
          clusterFallbackCount?: float(name='ClusterFallbackCount'),
          count?: float(name='Count'),
          object?: string(name='Object'),
        }
      ](name='ParamFlowItemList'),
      paramIdx?: int32(name='ParamIdx'),
      resource?: string(name='Resource'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelClusterV2AliyunAgwGetAllFlowRulesForPushResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelClusterV2AliyunAgwGetAllFlowRulesForPushResponseBody(name='body'),
}

async function sentinelClusterV2AliyunAgwGetAllFlowRulesForPushWithOptions(request: SentinelClusterV2AliyunAgwGetAllFlowRulesForPushRequest, runtime: Util.RuntimeOptions): SentinelClusterV2AliyunAgwGetAllFlowRulesForPushResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelClusterV2AliyunAgwGetAllFlowRulesForPush',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelClusterV2AliyunAgwGetAllFlowRulesForPush(request: SentinelClusterV2AliyunAgwGetAllFlowRulesForPushRequest): SentinelClusterV2AliyunAgwGetAllFlowRulesForPushResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelClusterV2AliyunAgwGetAllFlowRulesForPushWithOptions(request, runtime);
}

model SentinelClusterV2AliyunAgwGetAssignListRequest {
  lang?: string(name='Lang'),
}

model SentinelClusterV2AliyunAgwGetAssignListResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      id?: long(name='id'),
      serverEntity?: {
        alive?: boolean(name='alive'),
        id?: long(name='id'),
        lastHbTimestamp?: long(name='lastHbTimestamp'),
        maxAllowedQps?: float(name='maxAllowedQps'),
        privateIp?: string(name='privateIp'),
        publicIp?: string(name='publicIp'),
        serverHost?: string(name='serverHost'),
        serverPort?: int32(name='serverPort'),
        serverType?: int32(name='serverType'),
        vpcId?: string(name='vpcId'),
      }(name='serverEntity'),
      shardIdx?: int32(name='shardIdx'),
      tsNamespace?: string(name='tsNamespace'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelClusterV2AliyunAgwGetAssignListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelClusterV2AliyunAgwGetAssignListResponseBody(name='body'),
}

async function sentinelClusterV2AliyunAgwGetAssignListWithOptions(request: SentinelClusterV2AliyunAgwGetAssignListRequest, runtime: Util.RuntimeOptions): SentinelClusterV2AliyunAgwGetAssignListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelClusterV2AliyunAgwGetAssignList',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelClusterV2AliyunAgwGetAssignList(request: SentinelClusterV2AliyunAgwGetAssignListRequest): SentinelClusterV2AliyunAgwGetAssignListResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelClusterV2AliyunAgwGetAssignListWithOptions(request, runtime);
}

model SentinelClusterV2AliyunAgwNewFlowRuleRequest {
  apiGroupId?: string(name='ApiGroupId'),
  apiId?: string(name='ApiId'),
  apiThreshold?: float(name='ApiThreshold'),
  description?: string(name='Description'),
  enabled?: boolean(name='Enabled'),
  envId?: string(name='EnvId'),
  interval?: int32(name='Interval'),
  intervalUnit?: int32(name='IntervalUnit'),
  lang?: string(name='Lang'),
}

model SentinelClusterV2AliyunAgwNewFlowRuleResponseBody = {
  code?: string(name='Code'),
  data?: {
    apiGroupId?: string(name='ApiGroupId'),
    apiId?: string(name='ApiId'),
    apiThreshold?: float(name='ApiThreshold'),
    description?: string(name='Description'),
    enabled?: boolean(name='Enabled'),
    envId?: string(name='EnvId'),
    id?: long(name='Id'),
    interval?: int32(name='Interval'),
    intervalUnit?: int32(name='IntervalUnit'),
    userId?: string(name='UserId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelClusterV2AliyunAgwNewFlowRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelClusterV2AliyunAgwNewFlowRuleResponseBody(name='body'),
}

async function sentinelClusterV2AliyunAgwNewFlowRuleWithOptions(request: SentinelClusterV2AliyunAgwNewFlowRuleRequest, runtime: Util.RuntimeOptions): SentinelClusterV2AliyunAgwNewFlowRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiGroupId)) {
    query['ApiGroupId'] = request.apiGroupId;
  }
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.apiThreshold)) {
    query['ApiThreshold'] = request.apiThreshold;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.enabled)) {
    query['Enabled'] = request.enabled;
  }
  if (!Util.isUnset(request.envId)) {
    query['EnvId'] = request.envId;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.intervalUnit)) {
    query['IntervalUnit'] = request.intervalUnit;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelClusterV2AliyunAgwNewFlowRule',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelClusterV2AliyunAgwNewFlowRule(request: SentinelClusterV2AliyunAgwNewFlowRuleRequest): SentinelClusterV2AliyunAgwNewFlowRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelClusterV2AliyunAgwNewFlowRuleWithOptions(request, runtime);
}

model SentinelClusterV2AliyunAgwUpdateFlowRuleRequest {
  apiGroupId?: string(name='ApiGroupId'),
  apiId?: string(name='ApiId'),
  apiThreshold?: float(name='ApiThreshold'),
  description?: string(name='Description'),
  envId?: string(name='EnvId'),
  id?: long(name='Id'),
  interval?: int32(name='Interval'),
  intervalUnit?: int32(name='IntervalUnit'),
  lang?: string(name='Lang'),
}

model SentinelClusterV2AliyunAgwUpdateFlowRuleResponseBody = {
  code?: string(name='Code'),
  data?: {
    apiGroupId?: string(name='ApiGroupId'),
    apiId?: string(name='ApiId'),
    apiThreshold?: float(name='ApiThreshold'),
    description?: string(name='Description'),
    enabled?: boolean(name='Enabled'),
    envId?: string(name='EnvId'),
    id?: long(name='Id'),
    interval?: int32(name='Interval'),
    intervalUnit?: int32(name='IntervalUnit'),
    userId?: string(name='UserId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelClusterV2AliyunAgwUpdateFlowRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelClusterV2AliyunAgwUpdateFlowRuleResponseBody(name='body'),
}

async function sentinelClusterV2AliyunAgwUpdateFlowRuleWithOptions(request: SentinelClusterV2AliyunAgwUpdateFlowRuleRequest, runtime: Util.RuntimeOptions): SentinelClusterV2AliyunAgwUpdateFlowRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiGroupId)) {
    query['ApiGroupId'] = request.apiGroupId;
  }
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.apiThreshold)) {
    query['ApiThreshold'] = request.apiThreshold;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.envId)) {
    query['EnvId'] = request.envId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.intervalUnit)) {
    query['IntervalUnit'] = request.intervalUnit;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelClusterV2AliyunAgwUpdateFlowRule',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelClusterV2AliyunAgwUpdateFlowRule(request: SentinelClusterV2AliyunAgwUpdateFlowRuleRequest): SentinelClusterV2AliyunAgwUpdateFlowRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelClusterV2AliyunAgwUpdateFlowRuleWithOptions(request, runtime);
}

model SentinelClusterV2AliyunAgwUpdateRuleOffRequest {
  id?: long(name='Id'),
  lang?: string(name='Lang'),
}

model SentinelClusterV2AliyunAgwUpdateRuleOffResponseBody = {
  code?: string(name='Code'),
  data?: int32(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelClusterV2AliyunAgwUpdateRuleOffResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelClusterV2AliyunAgwUpdateRuleOffResponseBody(name='body'),
}

async function sentinelClusterV2AliyunAgwUpdateRuleOffWithOptions(request: SentinelClusterV2AliyunAgwUpdateRuleOffRequest, runtime: Util.RuntimeOptions): SentinelClusterV2AliyunAgwUpdateRuleOffResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelClusterV2AliyunAgwUpdateRuleOff',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelClusterV2AliyunAgwUpdateRuleOff(request: SentinelClusterV2AliyunAgwUpdateRuleOffRequest): SentinelClusterV2AliyunAgwUpdateRuleOffResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelClusterV2AliyunAgwUpdateRuleOffWithOptions(request, runtime);
}

model SentinelClusterV2AliyunAgwUpdateRuleOffBatchRequest {
  ids?: string(name='Ids'),
  lang?: string(name='Lang'),
}

model SentinelClusterV2AliyunAgwUpdateRuleOffBatchResponseBody = {
  code?: string(name='Code'),
  data?: int32(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelClusterV2AliyunAgwUpdateRuleOffBatchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelClusterV2AliyunAgwUpdateRuleOffBatchResponseBody(name='body'),
}

async function sentinelClusterV2AliyunAgwUpdateRuleOffBatchWithOptions(request: SentinelClusterV2AliyunAgwUpdateRuleOffBatchRequest, runtime: Util.RuntimeOptions): SentinelClusterV2AliyunAgwUpdateRuleOffBatchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelClusterV2AliyunAgwUpdateRuleOffBatch',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelClusterV2AliyunAgwUpdateRuleOffBatch(request: SentinelClusterV2AliyunAgwUpdateRuleOffBatchRequest): SentinelClusterV2AliyunAgwUpdateRuleOffBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelClusterV2AliyunAgwUpdateRuleOffBatchWithOptions(request, runtime);
}

model SentinelClusterV2AliyunAgwUpdateRuleOnRequest {
  id?: long(name='Id'),
  lang?: string(name='Lang'),
}

model SentinelClusterV2AliyunAgwUpdateRuleOnResponseBody = {
  code?: string(name='Code'),
  data?: int32(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelClusterV2AliyunAgwUpdateRuleOnResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelClusterV2AliyunAgwUpdateRuleOnResponseBody(name='body'),
}

async function sentinelClusterV2AliyunAgwUpdateRuleOnWithOptions(request: SentinelClusterV2AliyunAgwUpdateRuleOnRequest, runtime: Util.RuntimeOptions): SentinelClusterV2AliyunAgwUpdateRuleOnResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelClusterV2AliyunAgwUpdateRuleOn',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelClusterV2AliyunAgwUpdateRuleOn(request: SentinelClusterV2AliyunAgwUpdateRuleOnRequest): SentinelClusterV2AliyunAgwUpdateRuleOnResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelClusterV2AliyunAgwUpdateRuleOnWithOptions(request, runtime);
}

model SentinelClusterV2AliyunAgwUpdateRuleOnBatchRequest {
  ids?: string(name='Ids'),
  lang?: string(name='Lang'),
}

model SentinelClusterV2AliyunAgwUpdateRuleOnBatchResponseBody = {
  code?: string(name='Code'),
  data?: int32(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelClusterV2AliyunAgwUpdateRuleOnBatchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelClusterV2AliyunAgwUpdateRuleOnBatchResponseBody(name='body'),
}

async function sentinelClusterV2AliyunAgwUpdateRuleOnBatchWithOptions(request: SentinelClusterV2AliyunAgwUpdateRuleOnBatchRequest, runtime: Util.RuntimeOptions): SentinelClusterV2AliyunAgwUpdateRuleOnBatchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelClusterV2AliyunAgwUpdateRuleOnBatch',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelClusterV2AliyunAgwUpdateRuleOnBatch(request: SentinelClusterV2AliyunAgwUpdateRuleOnBatchRequest): SentinelClusterV2AliyunAgwUpdateRuleOnBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelClusterV2AliyunAgwUpdateRuleOnBatchWithOptions(request, runtime);
}

model SentinelClusterV2UpdateManagedTokenServerRequest {
  hbTimestamp?: long(name='HbTimestamp'),
  lang?: string(name='Lang'),
  privateIp?: string(name='PrivateIp'),
  publicIp?: string(name='PublicIp'),
  serverHost?: string(name='ServerHost'),
  serverPort?: int32(name='ServerPort'),
  serverType?: int32(name='ServerType'),
  vpcId?: string(name='VpcId'),
}

model SentinelClusterV2UpdateManagedTokenServerResponseBody = {
  code?: string(name='Code'),
  data?: {
    alive?: boolean(name='Alive'),
    id?: long(name='Id'),
    lastHbTimestamp?: long(name='LastHbTimestamp'),
    maxAllowedQps?: float(name='MaxAllowedQps'),
    privateIp?: string(name='PrivateIp'),
    publicIp?: string(name='PublicIp'),
    serverHost?: string(name='ServerHost'),
    serverPort?: int32(name='ServerPort'),
    serverType?: int32(name='ServerType'),
    vpcId?: string(name='VpcId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelClusterV2UpdateManagedTokenServerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelClusterV2UpdateManagedTokenServerResponseBody(name='body'),
}

async function sentinelClusterV2UpdateManagedTokenServerWithOptions(request: SentinelClusterV2UpdateManagedTokenServerRequest, runtime: Util.RuntimeOptions): SentinelClusterV2UpdateManagedTokenServerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.hbTimestamp)) {
    query['HbTimestamp'] = request.hbTimestamp;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.privateIp)) {
    query['PrivateIp'] = request.privateIp;
  }
  if (!Util.isUnset(request.publicIp)) {
    query['PublicIp'] = request.publicIp;
  }
  if (!Util.isUnset(request.serverHost)) {
    query['ServerHost'] = request.serverHost;
  }
  if (!Util.isUnset(request.serverPort)) {
    query['ServerPort'] = request.serverPort;
  }
  if (!Util.isUnset(request.serverType)) {
    query['ServerType'] = request.serverType;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelClusterV2UpdateManagedTokenServer',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelClusterV2UpdateManagedTokenServer(request: SentinelClusterV2UpdateManagedTokenServerRequest): SentinelClusterV2UpdateManagedTokenServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelClusterV2UpdateManagedTokenServerWithOptions(request, runtime);
}

model SentinelCreateMultiModelRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  modelName?: string(name='ModelName'),
  namespace?: string(name='Namespace'),
}

model SentinelCreateMultiModelResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelCreateMultiModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelCreateMultiModelResponseBody(name='body'),
}

async function sentinelCreateMultiModelWithOptions(request: SentinelCreateMultiModelRequest, runtime: Util.RuntimeOptions): SentinelCreateMultiModelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.modelName)) {
    query['ModelName'] = request.modelName;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelCreateMultiModel',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelCreateMultiModel(request: SentinelCreateMultiModelRequest): SentinelCreateMultiModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelCreateMultiModelWithOptions(request, runtime);
}

model SentinelDegradeRuleDeleteRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  id?: long(name='Id'),
  namespace?: string(name='Namespace'),
}

model SentinelDegradeRuleDeleteResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelDegradeRuleDeleteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelDegradeRuleDeleteResponseBody(name='body'),
}

async function sentinelDegradeRuleDeleteWithOptions(request: SentinelDegradeRuleDeleteRequest, runtime: Util.RuntimeOptions): SentinelDegradeRuleDeleteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelDegradeRuleDelete',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelDegradeRuleDelete(request: SentinelDegradeRuleDeleteRequest): SentinelDegradeRuleDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelDegradeRuleDeleteWithOptions(request, runtime);
}

model SentinelDegradeRuleEditRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  count?: float(name='Count'),
  grade?: int32(name='Grade'),
  halfOpenBaseAmountPerStep?: int32(name='HalfOpenBaseAmountPerStep'),
  halfOpenRecoveryStepNum?: int32(name='HalfOpenRecoveryStepNum'),
  id?: long(name='Id'),
  minRequestAmount?: int32(name='MinRequestAmount'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
  slowRatioThreshold?: float(name='SlowRatioThreshold'),
  statIntervalMs?: int32(name='StatIntervalMs'),
  timeWindow?: int32(name='TimeWindow'),
}

model SentinelDegradeRuleEditResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    count?: float(name='count'),
    createTimestamp?: long(name='createTimestamp'),
    enable?: boolean(name='enable'),
    grade?: int32(name='grade'),
    halfOpenBaseAmountPerStep?: int32(name='halfOpenBaseAmountPerStep'),
    halfOpenRecoveryStepNum?: int32(name='halfOpenRecoveryStepNum'),
    id?: long(name='id'),
    limitApp?: string(name='limitApp'),
    minRequestAmount?: int32(name='minRequestAmount'),
    modifiedTimestamp?: long(name='modifiedTimestamp'),
    namespace?: string(name='namespace'),
    resource?: string(name='resource'),
    slowRatioThreshold?: float(name='slowRatioThreshold'),
    statIntervalMs?: int32(name='statIntervalMs'),
    timeWindow?: int32(name='timeWindow'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelDegradeRuleEditResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelDegradeRuleEditResponseBody(name='body'),
}

async function sentinelDegradeRuleEditWithOptions(request: SentinelDegradeRuleEditRequest, runtime: Util.RuntimeOptions): SentinelDegradeRuleEditResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.count)) {
    query['Count'] = request.count;
  }
  if (!Util.isUnset(request.grade)) {
    query['Grade'] = request.grade;
  }
  if (!Util.isUnset(request.halfOpenBaseAmountPerStep)) {
    query['HalfOpenBaseAmountPerStep'] = request.halfOpenBaseAmountPerStep;
  }
  if (!Util.isUnset(request.halfOpenRecoveryStepNum)) {
    query['HalfOpenRecoveryStepNum'] = request.halfOpenRecoveryStepNum;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.minRequestAmount)) {
    query['MinRequestAmount'] = request.minRequestAmount;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.slowRatioThreshold)) {
    query['SlowRatioThreshold'] = request.slowRatioThreshold;
  }
  if (!Util.isUnset(request.statIntervalMs)) {
    query['StatIntervalMs'] = request.statIntervalMs;
  }
  if (!Util.isUnset(request.timeWindow)) {
    query['TimeWindow'] = request.timeWindow;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelDegradeRuleEdit',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelDegradeRuleEdit(request: SentinelDegradeRuleEditRequest): SentinelDegradeRuleEditResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelDegradeRuleEditWithOptions(request, runtime);
}

model SentinelDegradeRuleListAllRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  model?: long(name='Model'),
  namespace?: string(name='Namespace'),
}

model SentinelDegradeRuleListAllResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appName?: string(name='appName'),
      count?: float(name='count'),
      createTimestamp?: long(name='createTimestamp'),
      enable?: boolean(name='enable'),
      grade?: int32(name='grade'),
      halfOpenBaseAmountPerStep?: int32(name='halfOpenBaseAmountPerStep'),
      halfOpenRecoveryStepNum?: int32(name='halfOpenRecoveryStepNum'),
      id?: long(name='id'),
      limitApp?: string(name='limitApp'),
      minRequestAmount?: int32(name='minRequestAmount'),
      modifiedTimestamp?: long(name='modifiedTimestamp'),
      namespace?: string(name='namespace'),
      resource?: string(name='resource'),
      slowRatioThreshold?: float(name='slowRatioThreshold'),
      statIntervalMs?: int32(name='statIntervalMs'),
      timeWindow?: int32(name='timeWindow'),
      userId?: string(name='userId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelDegradeRuleListAllResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelDegradeRuleListAllResponseBody(name='body'),
}

async function sentinelDegradeRuleListAllWithOptions(request: SentinelDegradeRuleListAllRequest, runtime: Util.RuntimeOptions): SentinelDegradeRuleListAllResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.model)) {
    query['Model'] = request.model;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelDegradeRuleListAll',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelDegradeRuleListAll(request: SentinelDegradeRuleListAllRequest): SentinelDegradeRuleListAllResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelDegradeRuleListAllWithOptions(request, runtime);
}

model SentinelDegradeRuleListByPageRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  model?: long(name='Model'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  resource?: string(name='Resource'),
  searchKey?: string(name='SearchKey'),
  tags?: string(name='Tags'),
}

model SentinelDegradeRuleListByPageResponseBody = {
  code?: string(name='Code'),
  data?: {
    datas?: [ 
      {
        appName?: string(name='appName'),
        count?: float(name='count'),
        enable?: boolean(name='enable'),
        fallbackObject?: string(name='fallbackObject'),
        grade?: int32(name='grade'),
        halfOpenBaseAmountPerStep?: int32(name='halfOpenBaseAmountPerStep'),
        halfOpenRecoveryStepNum?: int32(name='halfOpenRecoveryStepNum'),
        id?: long(name='id'),
        limitApp?: string(name='limitApp'),
        minRequestAmount?: int32(name='minRequestAmount'),
        model?: long(name='model'),
        namespace?: string(name='namespace'),
        resource?: string(name='resource'),
        slowRatioThreshold?: float(name='slowRatioThreshold'),
        statIntervalMs?: int32(name='statIntervalMs'),
        tags?: [ string ](name='tags'),
        timeWindow?: int32(name='timeWindow'),
        userId?: string(name='userId'),
      }
    ](name='Datas'),
    pageIndex?: long(name='PageIndex'),
    pageSize?: long(name='PageSize'),
    totalCount?: long(name='TotalCount'),
    totalPage?: long(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelDegradeRuleListByPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelDegradeRuleListByPageResponseBody(name='body'),
}

async function sentinelDegradeRuleListByPageWithOptions(request: SentinelDegradeRuleListByPageRequest, runtime: Util.RuntimeOptions): SentinelDegradeRuleListByPageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.model)) {
    query['Model'] = request.model;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.searchKey)) {
    query['SearchKey'] = request.searchKey;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelDegradeRuleListByPage',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelDegradeRuleListByPage(request: SentinelDegradeRuleListByPageRequest): SentinelDegradeRuleListByPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelDegradeRuleListByPageWithOptions(request, runtime);
}

model SentinelDegradeRuleListRulesOfResourceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
}

model SentinelDegradeRuleListRulesOfResourceResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appName?: string(name='appName'),
      count?: float(name='count'),
      createTimestamp?: long(name='createTimestamp'),
      enable?: boolean(name='enable'),
      grade?: int32(name='grade'),
      halfOpenBaseAmountPerStep?: int32(name='halfOpenBaseAmountPerStep'),
      halfOpenRecoveryStepNum?: int32(name='halfOpenRecoveryStepNum'),
      id?: long(name='id'),
      limitApp?: string(name='limitApp'),
      minRequestAmount?: int32(name='minRequestAmount'),
      modifiedTimestamp?: long(name='modifiedTimestamp'),
      namespace?: string(name='namespace'),
      resource?: string(name='resource'),
      slowRatioThreshold?: float(name='slowRatioThreshold'),
      statIntervalMs?: int32(name='statIntervalMs'),
      timeWindow?: int32(name='timeWindow'),
      userId?: string(name='userId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelDegradeRuleListRulesOfResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelDegradeRuleListRulesOfResourceResponseBody(name='body'),
}

async function sentinelDegradeRuleListRulesOfResourceWithOptions(request: SentinelDegradeRuleListRulesOfResourceRequest, runtime: Util.RuntimeOptions): SentinelDegradeRuleListRulesOfResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelDegradeRuleListRulesOfResource',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelDegradeRuleListRulesOfResource(request: SentinelDegradeRuleListRulesOfResourceRequest): SentinelDegradeRuleListRulesOfResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelDegradeRuleListRulesOfResourceWithOptions(request, runtime);
}

model SentinelDegradeRuleNewRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  count?: float(name='Count'),
  enable?: boolean(name='Enable'),
  grade?: int32(name='Grade'),
  halfOpenBaseAmountPerStep?: int32(name='HalfOpenBaseAmountPerStep'),
  halfOpenRecoveryStepNum?: int32(name='HalfOpenRecoveryStepNum'),
  minRequestAmount?: int32(name='MinRequestAmount'),
  model?: long(name='Model'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
  slowRatioThreshold?: float(name='SlowRatioThreshold'),
  statIntervalMs?: int32(name='StatIntervalMs'),
  timeWindow?: int32(name='TimeWindow'),
}

model SentinelDegradeRuleNewResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    count?: float(name='count'),
    createTimestamp?: long(name='createTimestamp'),
    enable?: boolean(name='enable'),
    grade?: int32(name='grade'),
    halfOpenBaseAmountPerStep?: int32(name='halfOpenBaseAmountPerStep'),
    halfOpenRecoveryStepNum?: int32(name='halfOpenRecoveryStepNum'),
    id?: long(name='id'),
    limitApp?: string(name='limitApp'),
    minRequestAmount?: int32(name='minRequestAmount'),
    modifiedTimestamp?: long(name='modifiedTimestamp'),
    namespace?: string(name='namespace'),
    resource?: string(name='resource'),
    slowRatioThreshold?: float(name='slowRatioThreshold'),
    statIntervalMs?: int32(name='statIntervalMs'),
    timeWindow?: int32(name='timeWindow'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelDegradeRuleNewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelDegradeRuleNewResponseBody(name='body'),
}

async function sentinelDegradeRuleNewWithOptions(request: SentinelDegradeRuleNewRequest, runtime: Util.RuntimeOptions): SentinelDegradeRuleNewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.count)) {
    query['Count'] = request.count;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.grade)) {
    query['Grade'] = request.grade;
  }
  if (!Util.isUnset(request.halfOpenBaseAmountPerStep)) {
    query['HalfOpenBaseAmountPerStep'] = request.halfOpenBaseAmountPerStep;
  }
  if (!Util.isUnset(request.halfOpenRecoveryStepNum)) {
    query['HalfOpenRecoveryStepNum'] = request.halfOpenRecoveryStepNum;
  }
  if (!Util.isUnset(request.minRequestAmount)) {
    query['MinRequestAmount'] = request.minRequestAmount;
  }
  if (!Util.isUnset(request.model)) {
    query['Model'] = request.model;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.slowRatioThreshold)) {
    query['SlowRatioThreshold'] = request.slowRatioThreshold;
  }
  if (!Util.isUnset(request.statIntervalMs)) {
    query['StatIntervalMs'] = request.statIntervalMs;
  }
  if (!Util.isUnset(request.timeWindow)) {
    query['TimeWindow'] = request.timeWindow;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelDegradeRuleNew',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelDegradeRuleNew(request: SentinelDegradeRuleNewRequest): SentinelDegradeRuleNewResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelDegradeRuleNewWithOptions(request, runtime);
}

model SentinelDegradeRuleOffRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  id?: long(name='Id'),
  namespace?: string(name='Namespace'),
}

model SentinelDegradeRuleOffResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    count?: float(name='count'),
    createTimestamp?: long(name='createTimestamp'),
    enable?: boolean(name='enable'),
    grade?: int32(name='grade'),
    id?: long(name='id'),
    limitApp?: string(name='limitApp'),
    modifiedTimestamp?: long(name='modifiedTimestamp'),
    namespace?: string(name='namespace'),
    resource?: string(name='resource'),
    timeWindow?: int32(name='timeWindow'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelDegradeRuleOffResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelDegradeRuleOffResponseBody(name='body'),
}

async function sentinelDegradeRuleOffWithOptions(request: SentinelDegradeRuleOffRequest, runtime: Util.RuntimeOptions): SentinelDegradeRuleOffResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelDegradeRuleOff',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelDegradeRuleOff(request: SentinelDegradeRuleOffRequest): SentinelDegradeRuleOffResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelDegradeRuleOffWithOptions(request, runtime);
}

model SentinelDegradeRuleOffBatchRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  ids?: string(name='Ids'),
  namespace?: string(name='Namespace'),
}

model SentinelDegradeRuleOffBatchResponseBody = {
  code?: string(name='Code'),
  data?: int32(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelDegradeRuleOffBatchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelDegradeRuleOffBatchResponseBody(name='body'),
}

async function sentinelDegradeRuleOffBatchWithOptions(request: SentinelDegradeRuleOffBatchRequest, runtime: Util.RuntimeOptions): SentinelDegradeRuleOffBatchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelDegradeRuleOffBatch',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelDegradeRuleOffBatch(request: SentinelDegradeRuleOffBatchRequest): SentinelDegradeRuleOffBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelDegradeRuleOffBatchWithOptions(request, runtime);
}

model SentinelDegradeRuleOnRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  id?: long(name='Id'),
  namespace?: string(name='Namespace'),
}

model SentinelDegradeRuleOnResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    count?: float(name='count'),
    createTimestamp?: long(name='createTimestamp'),
    enable?: boolean(name='enable'),
    grade?: int32(name='grade'),
    id?: long(name='id'),
    limitApp?: string(name='limitApp'),
    modifiedTimestamp?: long(name='modifiedTimestamp'),
    namespace?: string(name='namespace'),
    resource?: string(name='resource'),
    timeWindow?: int32(name='timeWindow'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelDegradeRuleOnResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelDegradeRuleOnResponseBody(name='body'),
}

async function sentinelDegradeRuleOnWithOptions(request: SentinelDegradeRuleOnRequest, runtime: Util.RuntimeOptions): SentinelDegradeRuleOnResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelDegradeRuleOn',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelDegradeRuleOn(request: SentinelDegradeRuleOnRequest): SentinelDegradeRuleOnResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelDegradeRuleOnWithOptions(request, runtime);
}

model SentinelDegradeRuleOnBatchRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  ids?: string(name='Ids'),
  namespace?: string(name='Namespace'),
}

model SentinelDegradeRuleOnBatchResponseBody = {
  code?: string(name='Code'),
  data?: int32(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelDegradeRuleOnBatchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelDegradeRuleOnBatchResponseBody(name='body'),
}

async function sentinelDegradeRuleOnBatchWithOptions(request: SentinelDegradeRuleOnBatchRequest, runtime: Util.RuntimeOptions): SentinelDegradeRuleOnBatchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelDegradeRuleOnBatch',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelDegradeRuleOnBatch(request: SentinelDegradeRuleOnBatchRequest): SentinelDegradeRuleOnBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelDegradeRuleOnBatchWithOptions(request, runtime);
}

model SentinelDegradeRuleOverviewRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  count?: float(name='Count'),
  enable?: boolean(name='Enable'),
  fallbackId?: long(name='FallbackId'),
  grade?: int32(name='Grade'),
  halfOpenBaseAmountPerStep?: int32(name='HalfOpenBaseAmountPerStep'),
  halfOpenRecoveryStepNum?: int32(name='HalfOpenRecoveryStepNum'),
  minRequestAmount?: int32(name='MinRequestAmount'),
  model?: long(name='Model'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
  slowRatioThreshold?: float(name='SlowRatioThreshold'),
  statIntervalMs?: int32(name='StatIntervalMs'),
  timeWindow?: int32(name='TimeWindow'),
}

model SentinelDegradeRuleOverviewResponseBody = {
  code?: string(name='Code'),
  data?: [ bytes ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelDegradeRuleOverviewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelDegradeRuleOverviewResponseBody(name='body'),
}

async function sentinelDegradeRuleOverviewWithOptions(request: SentinelDegradeRuleOverviewRequest, runtime: Util.RuntimeOptions): SentinelDegradeRuleOverviewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.count)) {
    query['Count'] = request.count;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.fallbackId)) {
    query['FallbackId'] = request.fallbackId;
  }
  if (!Util.isUnset(request.grade)) {
    query['Grade'] = request.grade;
  }
  if (!Util.isUnset(request.halfOpenBaseAmountPerStep)) {
    query['HalfOpenBaseAmountPerStep'] = request.halfOpenBaseAmountPerStep;
  }
  if (!Util.isUnset(request.halfOpenRecoveryStepNum)) {
    query['HalfOpenRecoveryStepNum'] = request.halfOpenRecoveryStepNum;
  }
  if (!Util.isUnset(request.minRequestAmount)) {
    query['MinRequestAmount'] = request.minRequestAmount;
  }
  if (!Util.isUnset(request.model)) {
    query['Model'] = request.model;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.slowRatioThreshold)) {
    query['SlowRatioThreshold'] = request.slowRatioThreshold;
  }
  if (!Util.isUnset(request.statIntervalMs)) {
    query['StatIntervalMs'] = request.statIntervalMs;
  }
  if (!Util.isUnset(request.timeWindow)) {
    query['TimeWindow'] = request.timeWindow;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelDegradeRuleOverview',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelDegradeRuleOverview(request: SentinelDegradeRuleOverviewRequest): SentinelDegradeRuleOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelDegradeRuleOverviewWithOptions(request, runtime);
}

model SentinelDeleteMonitorDashboardRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  dashboardId?: long(name='DashboardId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelDeleteMonitorDashboardResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelDeleteMonitorDashboardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelDeleteMonitorDashboardResponseBody(name='body'),
}

async function sentinelDeleteMonitorDashboardWithOptions(request: SentinelDeleteMonitorDashboardRequest, runtime: Util.RuntimeOptions): SentinelDeleteMonitorDashboardResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.dashboardId)) {
    query['DashboardId'] = request.dashboardId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelDeleteMonitorDashboard',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelDeleteMonitorDashboard(request: SentinelDeleteMonitorDashboardRequest): SentinelDeleteMonitorDashboardResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelDeleteMonitorDashboardWithOptions(request, runtime);
}

model SentinelDeleteMonitorDashboardItemsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  dashboardItemIds?: string(name='DashboardItemIds'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelDeleteMonitorDashboardItemsResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelDeleteMonitorDashboardItemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelDeleteMonitorDashboardItemsResponseBody(name='body'),
}

async function sentinelDeleteMonitorDashboardItemsWithOptions(request: SentinelDeleteMonitorDashboardItemsRequest, runtime: Util.RuntimeOptions): SentinelDeleteMonitorDashboardItemsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.dashboardItemIds)) {
    query['DashboardItemIds'] = request.dashboardItemIds;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelDeleteMonitorDashboardItems',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelDeleteMonitorDashboardItems(request: SentinelDeleteMonitorDashboardItemsRequest): SentinelDeleteMonitorDashboardItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelDeleteMonitorDashboardItemsWithOptions(request, runtime);
}

model SentinelDeleteMultiModelRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelDeleteMultiModelResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelDeleteMultiModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelDeleteMultiModelResponseBody(name='body'),
}

async function sentinelDeleteMultiModelWithOptions(request: SentinelDeleteMultiModelRequest, runtime: Util.RuntimeOptions): SentinelDeleteMultiModelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelDeleteMultiModel',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelDeleteMultiModel(request: SentinelDeleteMultiModelRequest): SentinelDeleteMultiModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelDeleteMultiModelWithOptions(request, runtime);
}

model SentinelEventsCountRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  beginTime?: long(name='BeginTime'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelEventsCountResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      count?: int32(name='count'),
      namespace?: string(name='namespace'),
      time?: string(name='time'),
      userId?: string(name='userId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelEventsCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelEventsCountResponseBody(name='body'),
}

async function sentinelEventsCountWithOptions(request: SentinelEventsCountRequest, runtime: Util.RuntimeOptions): SentinelEventsCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.beginTime)) {
    query['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelEventsCount',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelEventsCount(request: SentinelEventsCountRequest): SentinelEventsCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelEventsCountWithOptions(request, runtime);
}

model SentinelFavoriteAddFavoriteAppRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  appType?: int32(name='AppType'),
  namespace?: string(name='Namespace'),
}

model SentinelFavoriteAddFavoriteAppResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    appType?: int32(name='appType'),
    createTimestamp?: long(name='createTimestamp'),
    id?: long(name='id'),
    modifiedTimestamp?: long(name='modifiedTimestamp'),
    namespace?: string(name='namespace'),
    resource?: string(name='resource'),
    type?: int32(name='type'),
    userId?: string(name='userId'),
    vpcId?: string(name='vpcId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelFavoriteAddFavoriteAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelFavoriteAddFavoriteAppResponseBody(name='body'),
}

async function sentinelFavoriteAddFavoriteAppWithOptions(request: SentinelFavoriteAddFavoriteAppRequest, runtime: Util.RuntimeOptions): SentinelFavoriteAddFavoriteAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.appType)) {
    query['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelFavoriteAddFavoriteApp',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelFavoriteAddFavoriteApp(request: SentinelFavoriteAddFavoriteAppRequest): SentinelFavoriteAddFavoriteAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelFavoriteAddFavoriteAppWithOptions(request, runtime);
}

model SentinelFavoriteAddFavoriteResourceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
}

model SentinelFavoriteAddFavoriteResourceResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    createTimestamp?: long(name='createTimestamp'),
    id?: long(name='id'),
    modifiedTimestamp?: long(name='modifiedTimestamp'),
    namespace?: string(name='namespace'),
    resource?: string(name='resource'),
    type?: int32(name='type'),
    userId?: string(name='userId'),
    vpcId?: string(name='vpcId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelFavoriteAddFavoriteResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelFavoriteAddFavoriteResourceResponseBody(name='body'),
}

async function sentinelFavoriteAddFavoriteResourceWithOptions(request: SentinelFavoriteAddFavoriteResourceRequest, runtime: Util.RuntimeOptions): SentinelFavoriteAddFavoriteResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelFavoriteAddFavoriteResource',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelFavoriteAddFavoriteResource(request: SentinelFavoriteAddFavoriteResourceRequest): SentinelFavoriteAddFavoriteResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelFavoriteAddFavoriteResourceWithOptions(request, runtime);
}

model SentinelFavoriteDeleteFavoriteAppRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  appType?: int32(name='AppType'),
  namespace?: string(name='Namespace'),
}

model SentinelFavoriteDeleteFavoriteAppResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelFavoriteDeleteFavoriteAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelFavoriteDeleteFavoriteAppResponseBody(name='body'),
}

async function sentinelFavoriteDeleteFavoriteAppWithOptions(request: SentinelFavoriteDeleteFavoriteAppRequest, runtime: Util.RuntimeOptions): SentinelFavoriteDeleteFavoriteAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.appType)) {
    query['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelFavoriteDeleteFavoriteApp',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelFavoriteDeleteFavoriteApp(request: SentinelFavoriteDeleteFavoriteAppRequest): SentinelFavoriteDeleteFavoriteAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelFavoriteDeleteFavoriteAppWithOptions(request, runtime);
}

model SentinelFavoriteDeleteFavoriteResourceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
}

model SentinelFavoriteDeleteFavoriteResourceResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelFavoriteDeleteFavoriteResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelFavoriteDeleteFavoriteResourceResponseBody(name='body'),
}

async function sentinelFavoriteDeleteFavoriteResourceWithOptions(request: SentinelFavoriteDeleteFavoriteResourceRequest, runtime: Util.RuntimeOptions): SentinelFavoriteDeleteFavoriteResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelFavoriteDeleteFavoriteResource',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelFavoriteDeleteFavoriteResource(request: SentinelFavoriteDeleteFavoriteResourceRequest): SentinelFavoriteDeleteFavoriteResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelFavoriteDeleteFavoriteResourceWithOptions(request, runtime);
}

model SentinelFavoriteListFavoriteAppsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appTypes?: string(name='AppTypes'),
  namespace?: string(name='Namespace'),
}

model SentinelFavoriteListFavoriteAppsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appName?: string(name='appName'),
      appType?: int32(name='appType'),
      createTimestamp?: long(name='createTimestamp'),
      id?: long(name='id'),
      modifiedTimestamp?: long(name='modifiedTimestamp'),
      namespace?: string(name='namespace'),
      resource?: string(name='resource'),
      type?: int32(name='type'),
      userId?: string(name='userId'),
      vpcId?: string(name='vpcId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelFavoriteListFavoriteAppsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelFavoriteListFavoriteAppsResponseBody(name='body'),
}

async function sentinelFavoriteListFavoriteAppsWithOptions(request: SentinelFavoriteListFavoriteAppsRequest, runtime: Util.RuntimeOptions): SentinelFavoriteListFavoriteAppsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appTypes)) {
    query['AppTypes'] = request.appTypes;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelFavoriteListFavoriteApps',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelFavoriteListFavoriteApps(request: SentinelFavoriteListFavoriteAppsRequest): SentinelFavoriteListFavoriteAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelFavoriteListFavoriteAppsWithOptions(request, runtime);
}

model SentinelFavoriteListFavoriteResourcesRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  namespace?: string(name='Namespace'),
}

model SentinelFavoriteListFavoriteResourcesResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appName?: string(name='appName'),
      createTimestamp?: long(name='createTimestamp'),
      id?: long(name='id'),
      modifiedTimestamp?: long(name='modifiedTimestamp'),
      namespace?: string(name='namespace'),
      resource?: string(name='resource'),
      type?: int32(name='type'),
      userId?: string(name='userId'),
      vpcId?: string(name='vpcId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelFavoriteListFavoriteResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelFavoriteListFavoriteResourcesResponseBody(name='body'),
}

async function sentinelFavoriteListFavoriteResourcesWithOptions(request: SentinelFavoriteListFavoriteResourcesRequest, runtime: Util.RuntimeOptions): SentinelFavoriteListFavoriteResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelFavoriteListFavoriteResources',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelFavoriteListFavoriteResources(request: SentinelFavoriteListFavoriteResourcesRequest): SentinelFavoriteListFavoriteResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelFavoriteListFavoriteResourcesWithOptions(request, runtime);
}

model SentinelFlowRuleDeleteRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  id?: long(name='Id'),
  namespace?: string(name='Namespace'),
}

model SentinelFlowRuleDeleteResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelFlowRuleDeleteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelFlowRuleDeleteResponseBody(name='body'),
}

async function sentinelFlowRuleDeleteWithOptions(request: SentinelFlowRuleDeleteRequest, runtime: Util.RuntimeOptions): SentinelFlowRuleDeleteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelFlowRuleDelete',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelFlowRuleDelete(request: SentinelFlowRuleDeleteRequest): SentinelFlowRuleDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelFlowRuleDeleteWithOptions(request, runtime);
}

model SentinelFlowRuleEditRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  autoAdjustFallbackThresholdEnabled?: boolean(name='AutoAdjustFallbackThresholdEnabled'),
  clusterFallbackThreshold?: int32(name='ClusterFallbackThreshold'),
  clusterMode?: boolean(name='ClusterMode'),
  clusterRequestMode?: int32(name='ClusterRequestMode'),
  clusterThresholdType?: int32(name='ClusterThresholdType'),
  controlBehavior?: int32(name='ControlBehavior'),
  count?: float(name='Count'),
  estimatedMaxClusterQps?: float(name='EstimatedMaxClusterQps'),
  fallbackThresholdAdjustMargin?: int32(name='FallbackThresholdAdjustMargin'),
  fallbackToLocalWhenFail?: boolean(name='FallbackToLocalWhenFail'),
  grade?: int32(name='Grade'),
  id?: long(name='Id'),
  limitApp?: string(name='LimitApp'),
  maxQueueingTimeMs?: int32(name='MaxQueueingTimeMs'),
  namespace?: string(name='Namespace'),
  refResource?: string(name='RefResource'),
  sampleCount?: int32(name='SampleCount'),
  strategy?: int32(name='Strategy'),
  thresholdMode?: int32(name='ThresholdMode'),
  warmUpPeriodSec?: int32(name='WarmUpPeriodSec'),
  windowIntervalMs?: int32(name='WindowIntervalMs'),
}

model SentinelFlowRuleEditResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    autoAdjustFallbackThresholdEnabled?: boolean(name='autoAdjustFallbackThresholdEnabled'),
    clusterFallbackThreshold?: int32(name='clusterFallbackThreshold'),
    clusterMode?: boolean(name='clusterMode'),
    clusterRequestMode?: int32(name='clusterRequestMode'),
    clusterThresholdType?: int32(name='clusterThresholdType'),
    controlBehavior?: int32(name='controlBehavior'),
    count?: float(name='count'),
    createTimestamp?: long(name='createTimestamp'),
    enable?: boolean(name='enable'),
    estimatedMaxClusterQps?: float(name='estimatedMaxClusterQps'),
    fallbackThresholdAdjustMargin?: int32(name='fallbackThresholdAdjustMargin'),
    fallbackToLocalWhenFail?: boolean(name='fallbackToLocalWhenFail'),
    grade?: int32(name='grade'),
    id?: long(name='id'),
    limitApp?: string(name='limitApp'),
    maxQueueingTimeMs?: int32(name='maxQueueingTimeMs'),
    modifiedTimestamp?: long(name='modifiedTimestamp'),
    namespace?: string(name='namespace'),
    refResource?: string(name='refResource'),
    resource?: string(name='resource'),
    sampleCount?: int32(name='sampleCount'),
    strategy?: int32(name='strategy'),
    thresholdMode?: int32(name='thresholdMode'),
    userId?: string(name='userId'),
    warmUpPeriodSec?: int32(name='warmUpPeriodSec'),
    windowIntervalMs?: int32(name='windowIntervalMs'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelFlowRuleEditResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelFlowRuleEditResponseBody(name='body'),
}

async function sentinelFlowRuleEditWithOptions(request: SentinelFlowRuleEditRequest, runtime: Util.RuntimeOptions): SentinelFlowRuleEditResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.autoAdjustFallbackThresholdEnabled)) {
    query['AutoAdjustFallbackThresholdEnabled'] = request.autoAdjustFallbackThresholdEnabled;
  }
  if (!Util.isUnset(request.clusterFallbackThreshold)) {
    query['ClusterFallbackThreshold'] = request.clusterFallbackThreshold;
  }
  if (!Util.isUnset(request.clusterMode)) {
    query['ClusterMode'] = request.clusterMode;
  }
  if (!Util.isUnset(request.clusterRequestMode)) {
    query['ClusterRequestMode'] = request.clusterRequestMode;
  }
  if (!Util.isUnset(request.clusterThresholdType)) {
    query['ClusterThresholdType'] = request.clusterThresholdType;
  }
  if (!Util.isUnset(request.controlBehavior)) {
    query['ControlBehavior'] = request.controlBehavior;
  }
  if (!Util.isUnset(request.count)) {
    query['Count'] = request.count;
  }
  if (!Util.isUnset(request.estimatedMaxClusterQps)) {
    query['EstimatedMaxClusterQps'] = request.estimatedMaxClusterQps;
  }
  if (!Util.isUnset(request.fallbackThresholdAdjustMargin)) {
    query['FallbackThresholdAdjustMargin'] = request.fallbackThresholdAdjustMargin;
  }
  if (!Util.isUnset(request.fallbackToLocalWhenFail)) {
    query['FallbackToLocalWhenFail'] = request.fallbackToLocalWhenFail;
  }
  if (!Util.isUnset(request.grade)) {
    query['Grade'] = request.grade;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.limitApp)) {
    query['LimitApp'] = request.limitApp;
  }
  if (!Util.isUnset(request.maxQueueingTimeMs)) {
    query['MaxQueueingTimeMs'] = request.maxQueueingTimeMs;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.refResource)) {
    query['RefResource'] = request.refResource;
  }
  if (!Util.isUnset(request.sampleCount)) {
    query['SampleCount'] = request.sampleCount;
  }
  if (!Util.isUnset(request.strategy)) {
    query['Strategy'] = request.strategy;
  }
  if (!Util.isUnset(request.thresholdMode)) {
    query['ThresholdMode'] = request.thresholdMode;
  }
  if (!Util.isUnset(request.warmUpPeriodSec)) {
    query['WarmUpPeriodSec'] = request.warmUpPeriodSec;
  }
  if (!Util.isUnset(request.windowIntervalMs)) {
    query['WindowIntervalMs'] = request.windowIntervalMs;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelFlowRuleEdit',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelFlowRuleEdit(request: SentinelFlowRuleEditRequest): SentinelFlowRuleEditResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelFlowRuleEditWithOptions(request, runtime);
}

model SentinelFlowRuleListAllRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  grade?: int32(name='Grade'),
  model?: long(name='Model'),
  namespace?: string(name='Namespace'),
  tags?: string(name='Tags'),
}

model SentinelFlowRuleListAllResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appName?: string(name='appName'),
      clusterFallbackThreshold?: int32(name='clusterFallbackThreshold'),
      clusterMode?: boolean(name='clusterMode'),
      clusterRequestMode?: int32(name='clusterRequestMode'),
      clusterThresholdType?: int32(name='clusterThresholdType'),
      controlBehavior?: int32(name='controlBehavior'),
      count?: float(name='count'),
      createTimestamp?: long(name='createTimestamp'),
      enable?: boolean(name='enable'),
      estimatedMaxClusterQps?: float(name='estimatedMaxClusterQps'),
      fallbackToLocalWhenFail?: boolean(name='fallbackToLocalWhenFail'),
      grade?: int32(name='grade'),
      id?: long(name='id'),
      limitApp?: string(name='limitApp'),
      maxQueueingTimeMs?: int32(name='maxQueueingTimeMs'),
      model?: long(name='model'),
      modifiedTimestamp?: long(name='modifiedTimestamp'),
      namespace?: string(name='namespace'),
      refResource?: string(name='refResource'),
      resource?: string(name='resource'),
      sampleCount?: int32(name='sampleCount'),
      strategy?: int32(name='strategy'),
      userId?: string(name='userId'),
      warmUpPeriodSec?: int32(name='warmUpPeriodSec'),
      windowIntervalMs?: int32(name='windowIntervalMs'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelFlowRuleListAllResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelFlowRuleListAllResponseBody(name='body'),
}

async function sentinelFlowRuleListAllWithOptions(request: SentinelFlowRuleListAllRequest, runtime: Util.RuntimeOptions): SentinelFlowRuleListAllResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.grade)) {
    query['Grade'] = request.grade;
  }
  if (!Util.isUnset(request.model)) {
    query['Model'] = request.model;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelFlowRuleListAll',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelFlowRuleListAll(request: SentinelFlowRuleListAllRequest): SentinelFlowRuleListAllResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelFlowRuleListAllWithOptions(request, runtime);
}

model SentinelFlowRuleListByPageRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  grade?: int32(name='Grade'),
  lang?: string(name='Lang'),
  model?: long(name='Model'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  resource?: string(name='Resource'),
  searchKey?: string(name='SearchKey'),
  tags?: string(name='Tags'),
}

model SentinelFlowRuleListByPageResponseBody = {
  code?: string(name='Code'),
  data?: {
    datas?: [ 
      {
        appName?: string(name='appName'),
        autoAdjustFallbackThresholdEnabled?: boolean(name='autoAdjustFallbackThresholdEnabled'),
        clusterFallbackThreshold?: int32(name='clusterFallbackThreshold'),
        clusterMode?: boolean(name='clusterMode'),
        clusterRequestMode?: int32(name='clusterRequestMode'),
        clusterThresholdType?: int32(name='clusterThresholdType'),
        controlBehavior?: int32(name='controlBehavior'),
        count?: float(name='count'),
        enable?: boolean(name='enable'),
        estimatedMaxClusterQps?: float(name='estimatedMaxClusterQps'),
        fallbackObject?: string(name='fallbackObject'),
        fallbackThresholdAdjustMargin?: int32(name='fallbackThresholdAdjustMargin'),
        fallbackToLocalWhenFail?: boolean(name='fallbackToLocalWhenFail'),
        grade?: int32(name='grade'),
        id?: long(name='id'),
        limitApp?: string(name='limitApp'),
        maxQueueingTimeMs?: int32(name='maxQueueingTimeMs'),
        model?: long(name='model'),
        namespace?: string(name='namespace'),
        refResource?: string(name='refResource'),
        resource?: string(name='resource'),
        sampleCount?: int32(name='sampleCount'),
        strategy?: int32(name='strategy'),
        tags?: [ string ](name='tags'),
        userId?: string(name='userId'),
        warmUpPeriodSec?: int32(name='warmUpPeriodSec'),
        windowIntervalMs?: int32(name='windowIntervalMs'),
      }
    ](name='Datas'),
    pageIndex?: long(name='PageIndex'),
    pageSize?: long(name='PageSize'),
    totalCount?: long(name='TotalCount'),
    totalPage?: long(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelFlowRuleListByPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelFlowRuleListByPageResponseBody(name='body'),
}

async function sentinelFlowRuleListByPageWithOptions(request: SentinelFlowRuleListByPageRequest, runtime: Util.RuntimeOptions): SentinelFlowRuleListByPageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.grade)) {
    query['Grade'] = request.grade;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.model)) {
    query['Model'] = request.model;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.searchKey)) {
    query['SearchKey'] = request.searchKey;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelFlowRuleListByPage',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelFlowRuleListByPage(request: SentinelFlowRuleListByPageRequest): SentinelFlowRuleListByPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelFlowRuleListByPageWithOptions(request, runtime);
}

model SentinelFlowRuleListRulesOfResourceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  grade?: int32(name='Grade'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
}

model SentinelFlowRuleListRulesOfResourceResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appName?: string(name='appName'),
      clusterFallbackThreshold?: int32(name='clusterFallbackThreshold'),
      clusterMode?: boolean(name='clusterMode'),
      clusterRequestMode?: int32(name='clusterRequestMode'),
      clusterThresholdType?: int32(name='clusterThresholdType'),
      controlBehavior?: int32(name='controlBehavior'),
      count?: float(name='count'),
      createTimestamp?: long(name='createTimestamp'),
      enable?: boolean(name='enable'),
      estimatedMaxClusterQps?: float(name='estimatedMaxClusterQps'),
      fallbackToLocalWhenFail?: boolean(name='fallbackToLocalWhenFail'),
      grade?: int32(name='grade'),
      id?: long(name='id'),
      limitApp?: string(name='limitApp'),
      maxQueueingTimeMs?: int32(name='maxQueueingTimeMs'),
      modifiedTimestamp?: long(name='modifiedTimestamp'),
      namespace?: string(name='namespace'),
      refResource?: string(name='refResource'),
      resource?: string(name='resource'),
      sampleCount?: int32(name='sampleCount'),
      strategy?: int32(name='strategy'),
      userId?: string(name='userId'),
      warmUpPeriodSec?: int32(name='warmUpPeriodSec'),
      windowIntervalMs?: int32(name='windowIntervalMs'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelFlowRuleListRulesOfResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelFlowRuleListRulesOfResourceResponseBody(name='body'),
}

async function sentinelFlowRuleListRulesOfResourceWithOptions(request: SentinelFlowRuleListRulesOfResourceRequest, runtime: Util.RuntimeOptions): SentinelFlowRuleListRulesOfResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.grade)) {
    query['Grade'] = request.grade;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelFlowRuleListRulesOfResource',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelFlowRuleListRulesOfResource(request: SentinelFlowRuleListRulesOfResourceRequest): SentinelFlowRuleListRulesOfResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelFlowRuleListRulesOfResourceWithOptions(request, runtime);
}

model SentinelFlowRuleNewRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  autoAdjustFallbackThresholdEnabled?: boolean(name='AutoAdjustFallbackThresholdEnabled'),
  clusterFallbackThreshold?: int32(name='ClusterFallbackThreshold'),
  clusterMode?: boolean(name='ClusterMode'),
  clusterRequestMode?: int32(name='ClusterRequestMode'),
  clusterThresholdType?: int32(name='ClusterThresholdType'),
  controlBehavior?: int32(name='ControlBehavior'),
  count?: float(name='Count'),
  enable?: boolean(name='Enable'),
  estimatedMaxClusterQps?: float(name='EstimatedMaxClusterQps'),
  fallbackThresholdAdjustMargin?: int32(name='FallbackThresholdAdjustMargin'),
  fallbackToLocalWhenFail?: boolean(name='FallbackToLocalWhenFail'),
  grade?: int32(name='Grade'),
  limitApp?: string(name='LimitApp'),
  maxQueueingTimeMs?: int32(name='MaxQueueingTimeMs'),
  model?: long(name='Model'),
  namespace?: string(name='Namespace'),
  refResource?: string(name='RefResource'),
  resource?: string(name='Resource'),
  sampleCount?: int32(name='SampleCount'),
  strategy?: int32(name='Strategy'),
  thresholdMode?: int32(name='ThresholdMode'),
  warmUpPeriodSec?: int32(name='WarmUpPeriodSec'),
  windowIntervalMs?: int32(name='WindowIntervalMs'),
}

model SentinelFlowRuleNewResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    autoAdjustFallbackThresholdEnabled?: boolean(name='autoAdjustFallbackThresholdEnabled'),
    clusterFallbackThreshold?: int32(name='clusterFallbackThreshold'),
    clusterMode?: boolean(name='clusterMode'),
    clusterRequestMode?: int32(name='clusterRequestMode'),
    clusterThresholdType?: int32(name='clusterThresholdType'),
    controlBehavior?: int32(name='controlBehavior'),
    count?: float(name='count'),
    createTimestamp?: long(name='createTimestamp'),
    enable?: boolean(name='enable'),
    estimatedMaxClusterQps?: float(name='estimatedMaxClusterQps'),
    fallbackThresholdAdjustMargin?: int32(name='fallbackThresholdAdjustMargin'),
    fallbackToLocalWhenFail?: boolean(name='fallbackToLocalWhenFail'),
    grade?: int32(name='grade'),
    id?: long(name='id'),
    limitApp?: string(name='limitApp'),
    maxQueueingTimeMs?: int32(name='maxQueueingTimeMs'),
    modifiedTimestamp?: long(name='modifiedTimestamp'),
    namespace?: string(name='namespace'),
    refResource?: string(name='refResource'),
    resource?: string(name='resource'),
    sampleCount?: int32(name='sampleCount'),
    strategy?: int32(name='strategy'),
    thresholdMode?: int32(name='thresholdMode'),
    userId?: string(name='userId'),
    warmUpPeriodSec?: int32(name='warmUpPeriodSec'),
    windowIntervalMs?: int32(name='windowIntervalMs'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelFlowRuleNewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelFlowRuleNewResponseBody(name='body'),
}

async function sentinelFlowRuleNewWithOptions(request: SentinelFlowRuleNewRequest, runtime: Util.RuntimeOptions): SentinelFlowRuleNewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.autoAdjustFallbackThresholdEnabled)) {
    query['AutoAdjustFallbackThresholdEnabled'] = request.autoAdjustFallbackThresholdEnabled;
  }
  if (!Util.isUnset(request.clusterFallbackThreshold)) {
    query['ClusterFallbackThreshold'] = request.clusterFallbackThreshold;
  }
  if (!Util.isUnset(request.clusterMode)) {
    query['ClusterMode'] = request.clusterMode;
  }
  if (!Util.isUnset(request.clusterRequestMode)) {
    query['ClusterRequestMode'] = request.clusterRequestMode;
  }
  if (!Util.isUnset(request.clusterThresholdType)) {
    query['ClusterThresholdType'] = request.clusterThresholdType;
  }
  if (!Util.isUnset(request.controlBehavior)) {
    query['ControlBehavior'] = request.controlBehavior;
  }
  if (!Util.isUnset(request.count)) {
    query['Count'] = request.count;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.estimatedMaxClusterQps)) {
    query['EstimatedMaxClusterQps'] = request.estimatedMaxClusterQps;
  }
  if (!Util.isUnset(request.fallbackThresholdAdjustMargin)) {
    query['FallbackThresholdAdjustMargin'] = request.fallbackThresholdAdjustMargin;
  }
  if (!Util.isUnset(request.fallbackToLocalWhenFail)) {
    query['FallbackToLocalWhenFail'] = request.fallbackToLocalWhenFail;
  }
  if (!Util.isUnset(request.grade)) {
    query['Grade'] = request.grade;
  }
  if (!Util.isUnset(request.limitApp)) {
    query['LimitApp'] = request.limitApp;
  }
  if (!Util.isUnset(request.maxQueueingTimeMs)) {
    query['MaxQueueingTimeMs'] = request.maxQueueingTimeMs;
  }
  if (!Util.isUnset(request.model)) {
    query['Model'] = request.model;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.refResource)) {
    query['RefResource'] = request.refResource;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.sampleCount)) {
    query['SampleCount'] = request.sampleCount;
  }
  if (!Util.isUnset(request.strategy)) {
    query['Strategy'] = request.strategy;
  }
  if (!Util.isUnset(request.thresholdMode)) {
    query['ThresholdMode'] = request.thresholdMode;
  }
  if (!Util.isUnset(request.warmUpPeriodSec)) {
    query['WarmUpPeriodSec'] = request.warmUpPeriodSec;
  }
  if (!Util.isUnset(request.windowIntervalMs)) {
    query['WindowIntervalMs'] = request.windowIntervalMs;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelFlowRuleNew',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelFlowRuleNew(request: SentinelFlowRuleNewRequest): SentinelFlowRuleNewResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelFlowRuleNewWithOptions(request, runtime);
}

model SentinelFlowRuleOffRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  id?: long(name='Id'),
  namespace?: string(name='Namespace'),
}

model SentinelFlowRuleOffResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    controlBehavior?: int32(name='controlBehavior'),
    count?: float(name='count'),
    createTimestamp?: long(name='createTimestamp'),
    enable?: boolean(name='enable'),
    grade?: int32(name='grade'),
    id?: long(name='id'),
    limitApp?: string(name='limitApp'),
    maxQueueingTimeMs?: int32(name='maxQueueingTimeMs'),
    modifiedTimestamp?: long(name='modifiedTimestamp'),
    namespace?: string(name='namespace'),
    refResource?: string(name='refResource'),
    resource?: string(name='resource'),
    strategy?: int32(name='strategy'),
    userId?: string(name='userId'),
    warmUpPeriodSec?: int32(name='warmUpPeriodSec'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelFlowRuleOffResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelFlowRuleOffResponseBody(name='body'),
}

async function sentinelFlowRuleOffWithOptions(request: SentinelFlowRuleOffRequest, runtime: Util.RuntimeOptions): SentinelFlowRuleOffResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelFlowRuleOff',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelFlowRuleOff(request: SentinelFlowRuleOffRequest): SentinelFlowRuleOffResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelFlowRuleOffWithOptions(request, runtime);
}

model SentinelFlowRuleOffBatchRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  ids?: string(name='Ids'),
  namespace?: string(name='Namespace'),
}

model SentinelFlowRuleOffBatchResponseBody = {
  code?: string(name='Code'),
  data?: int32(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelFlowRuleOffBatchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelFlowRuleOffBatchResponseBody(name='body'),
}

async function sentinelFlowRuleOffBatchWithOptions(request: SentinelFlowRuleOffBatchRequest, runtime: Util.RuntimeOptions): SentinelFlowRuleOffBatchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelFlowRuleOffBatch',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelFlowRuleOffBatch(request: SentinelFlowRuleOffBatchRequest): SentinelFlowRuleOffBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelFlowRuleOffBatchWithOptions(request, runtime);
}

model SentinelFlowRuleOnRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  id?: long(name='Id'),
  namespace?: string(name='Namespace'),
}

model SentinelFlowRuleOnResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    controlBehavior?: int32(name='controlBehavior'),
    count?: float(name='count'),
    createTimestamp?: long(name='createTimestamp'),
    enable?: boolean(name='enable'),
    grade?: int32(name='grade'),
    id?: long(name='id'),
    limitApp?: string(name='limitApp'),
    maxQueueingTimeMs?: int32(name='maxQueueingTimeMs'),
    modifiedTimestamp?: long(name='modifiedTimestamp'),
    namespace?: string(name='namespace'),
    refResource?: string(name='refResource'),
    resource?: string(name='resource'),
    strategy?: int32(name='strategy'),
    userId?: string(name='userId'),
    warmUpPeriodSec?: int32(name='warmUpPeriodSec'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelFlowRuleOnResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelFlowRuleOnResponseBody(name='body'),
}

async function sentinelFlowRuleOnWithOptions(request: SentinelFlowRuleOnRequest, runtime: Util.RuntimeOptions): SentinelFlowRuleOnResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelFlowRuleOn',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelFlowRuleOn(request: SentinelFlowRuleOnRequest): SentinelFlowRuleOnResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelFlowRuleOnWithOptions(request, runtime);
}

model SentinelFlowRuleOnBatchRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  ids?: string(name='Ids'),
  namespace?: string(name='Namespace'),
}

model SentinelFlowRuleOnBatchResponseBody = {
  code?: string(name='Code'),
  data?: int32(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelFlowRuleOnBatchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelFlowRuleOnBatchResponseBody(name='body'),
}

async function sentinelFlowRuleOnBatchWithOptions(request: SentinelFlowRuleOnBatchRequest, runtime: Util.RuntimeOptions): SentinelFlowRuleOnBatchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelFlowRuleOnBatch',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelFlowRuleOnBatch(request: SentinelFlowRuleOnBatchRequest): SentinelFlowRuleOnBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelFlowRuleOnBatchWithOptions(request, runtime);
}

model SentinelGatewayApiDefinitionDeleteRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelGatewayApiDefinitionDeleteResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelGatewayApiDefinitionDeleteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelGatewayApiDefinitionDeleteResponseBody(name='body'),
}

async function sentinelGatewayApiDefinitionDeleteWithOptions(request: SentinelGatewayApiDefinitionDeleteRequest, runtime: Util.RuntimeOptions): SentinelGatewayApiDefinitionDeleteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelGatewayApiDefinitionDelete',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelGatewayApiDefinitionDelete(request: SentinelGatewayApiDefinitionDeleteRequest): SentinelGatewayApiDefinitionDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelGatewayApiDefinitionDeleteWithOptions(request, runtime);
}

model SentinelGatewayApiDefinitionNewRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  apiItems?: string(name='ApiItems'),
  apiName?: string(name='ApiName'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelGatewayApiDefinitionNewResponseBody = {
  code?: string(name='Code'),
  data?: {
    apiCount?: int32(name='apiCount'),
    apiItems?: [ 
      {
        matchStrategy?: int32(name='matchStrategy'),
        pattern?: string(name='pattern'),
      }
    ](name='apiItems'),
    apiName?: string(name='apiName'),
    appName?: string(name='appName'),
    id?: long(name='id'),
    namespace?: string(name='namespace'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelGatewayApiDefinitionNewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelGatewayApiDefinitionNewResponseBody(name='body'),
}

async function sentinelGatewayApiDefinitionNewWithOptions(request: SentinelGatewayApiDefinitionNewRequest, runtime: Util.RuntimeOptions): SentinelGatewayApiDefinitionNewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.apiItems)) {
    query['ApiItems'] = request.apiItems;
  }
  if (!Util.isUnset(request.apiName)) {
    query['ApiName'] = request.apiName;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelGatewayApiDefinitionNew',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelGatewayApiDefinitionNew(request: SentinelGatewayApiDefinitionNewRequest): SentinelGatewayApiDefinitionNewResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelGatewayApiDefinitionNewWithOptions(request, runtime);
}

model SentinelGatewayApiDefinitionUpdateRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  apiItems?: string(name='ApiItems'),
  appName?: string(name='AppName'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelGatewayApiDefinitionUpdateResponseBody = {
  code?: string(name='Code'),
  data?: {
    apiCount?: int32(name='apiCount'),
    apiItems?: [ 
      {
        matchStrategy?: int32(name='matchStrategy'),
        pattern?: string(name='pattern'),
      }
    ](name='apiItems'),
    apiName?: string(name='apiName'),
    appName?: string(name='appName'),
    id?: long(name='id'),
    namespace?: string(name='namespace'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelGatewayApiDefinitionUpdateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelGatewayApiDefinitionUpdateResponseBody(name='body'),
}

async function sentinelGatewayApiDefinitionUpdateWithOptions(request: SentinelGatewayApiDefinitionUpdateRequest, runtime: Util.RuntimeOptions): SentinelGatewayApiDefinitionUpdateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.apiItems)) {
    query['ApiItems'] = request.apiItems;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelGatewayApiDefinitionUpdate',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelGatewayApiDefinitionUpdate(request: SentinelGatewayApiDefinitionUpdateRequest): SentinelGatewayApiDefinitionUpdateResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelGatewayApiDefinitionUpdateWithOptions(request, runtime);
}

model SentinelGatewayApiDefinitionsListForAppRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelGatewayApiDefinitionsListForAppResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      apiCount?: int32(name='apiCount'),
      apiItems?: [ 
        {
          matchStrategy?: int32(name='matchStrategy'),
          pattern?: string(name='pattern'),
        }
      ](name='apiItems'),
      apiName?: string(name='apiName'),
      appName?: string(name='appName'),
      id?: long(name='id'),
      namespace?: string(name='namespace'),
      userId?: string(name='userId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelGatewayApiDefinitionsListForAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelGatewayApiDefinitionsListForAppResponseBody(name='body'),
}

async function sentinelGatewayApiDefinitionsListForAppWithOptions(request: SentinelGatewayApiDefinitionsListForAppRequest, runtime: Util.RuntimeOptions): SentinelGatewayApiDefinitionsListForAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelGatewayApiDefinitionsListForApp',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelGatewayApiDefinitionsListForApp(request: SentinelGatewayApiDefinitionsListForAppRequest): SentinelGatewayApiDefinitionsListForAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelGatewayApiDefinitionsListForAppWithOptions(request, runtime);
}

model SentinelGatewayFlowRuleDeleteRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelGatewayFlowRuleDeleteResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelGatewayFlowRuleDeleteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelGatewayFlowRuleDeleteResponseBody(name='body'),
}

async function sentinelGatewayFlowRuleDeleteWithOptions(request: SentinelGatewayFlowRuleDeleteRequest, runtime: Util.RuntimeOptions): SentinelGatewayFlowRuleDeleteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelGatewayFlowRuleDelete',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelGatewayFlowRuleDelete(request: SentinelGatewayFlowRuleDeleteRequest): SentinelGatewayFlowRuleDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelGatewayFlowRuleDeleteWithOptions(request, runtime);
}

model SentinelGatewayFlowRuleEditRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  burst?: int32(name='Burst'),
  controlBehavior?: int32(name='ControlBehavior'),
  count?: float(name='Count'),
  fieldName?: string(name='FieldName'),
  grade?: int32(name='Grade'),
  hasParam?: boolean(name='HasParam'),
  id?: long(name='Id'),
  intervalSec?: long(name='IntervalSec'),
  lang?: string(name='Lang'),
  matchStrategy?: int32(name='MatchStrategy'),
  maxQueueingTimeoutMs?: int32(name='MaxQueueingTimeoutMs'),
  namespace?: string(name='Namespace'),
  parseStrategy?: int32(name='ParseStrategy'),
  pattern?: string(name='Pattern'),
  resource?: string(name='Resource'),
  resourceMode?: int32(name='ResourceMode'),
}

model SentinelGatewayFlowRuleEditResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    burst?: int32(name='burst'),
    controlBehavior?: int32(name='controlBehavior'),
    count?: float(name='count'),
    enable?: boolean(name='enable'),
    grade?: int32(name='grade'),
    id?: long(name='id'),
    intervalSec?: long(name='intervalSec'),
    maxQueueingTimeoutMs?: int32(name='maxQueueingTimeoutMs'),
    namespace?: string(name='namespace'),
    paramItem?: map[string]any(name='paramItem'),
    resource?: string(name='resource'),
    resourceMode?: int32(name='resourceMode'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelGatewayFlowRuleEditResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelGatewayFlowRuleEditResponseBody(name='body'),
}

async function sentinelGatewayFlowRuleEditWithOptions(request: SentinelGatewayFlowRuleEditRequest, runtime: Util.RuntimeOptions): SentinelGatewayFlowRuleEditResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.burst)) {
    query['Burst'] = request.burst;
  }
  if (!Util.isUnset(request.controlBehavior)) {
    query['ControlBehavior'] = request.controlBehavior;
  }
  if (!Util.isUnset(request.count)) {
    query['Count'] = request.count;
  }
  if (!Util.isUnset(request.fieldName)) {
    query['FieldName'] = request.fieldName;
  }
  if (!Util.isUnset(request.grade)) {
    query['Grade'] = request.grade;
  }
  if (!Util.isUnset(request.hasParam)) {
    query['HasParam'] = request.hasParam;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.intervalSec)) {
    query['IntervalSec'] = request.intervalSec;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.matchStrategy)) {
    query['MatchStrategy'] = request.matchStrategy;
  }
  if (!Util.isUnset(request.maxQueueingTimeoutMs)) {
    query['MaxQueueingTimeoutMs'] = request.maxQueueingTimeoutMs;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.parseStrategy)) {
    query['ParseStrategy'] = request.parseStrategy;
  }
  if (!Util.isUnset(request.pattern)) {
    query['Pattern'] = request.pattern;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.resourceMode)) {
    query['ResourceMode'] = request.resourceMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelGatewayFlowRuleEdit',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelGatewayFlowRuleEdit(request: SentinelGatewayFlowRuleEditRequest): SentinelGatewayFlowRuleEditResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelGatewayFlowRuleEditWithOptions(request, runtime);
}

model SentinelGatewayFlowRuleListAllRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelGatewayFlowRuleListAllResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appName?: string(name='appName'),
      burst?: int32(name='burst'),
      controlBehavior?: int32(name='controlBehavior'),
      count?: float(name='count'),
      enable?: boolean(name='enable'),
      fallbackObject?: string(name='fallbackObject'),
      grade?: int32(name='grade'),
      hasParam?: boolean(name='hasParam'),
      id?: long(name='id'),
      intervalSec?: long(name='intervalSec'),
      maxQueueingTimeoutMs?: int32(name='maxQueueingTimeoutMs'),
      namespace?: string(name='namespace'),
      paramItem?: map[string]any(name='paramItem'),
      resource?: string(name='resource'),
      resourceMode?: int32(name='resourceMode'),
      userId?: string(name='userId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelGatewayFlowRuleListAllResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelGatewayFlowRuleListAllResponseBody(name='body'),
}

async function sentinelGatewayFlowRuleListAllWithOptions(request: SentinelGatewayFlowRuleListAllRequest, runtime: Util.RuntimeOptions): SentinelGatewayFlowRuleListAllResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelGatewayFlowRuleListAll',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelGatewayFlowRuleListAll(request: SentinelGatewayFlowRuleListAllRequest): SentinelGatewayFlowRuleListAllResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelGatewayFlowRuleListAllWithOptions(request, runtime);
}

model SentinelGatewayFlowRuleListRulesOfResourceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
}

model SentinelGatewayFlowRuleListRulesOfResourceResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appName?: string(name='appName'),
      burst?: int32(name='burst'),
      controlBehavior?: int32(name='controlBehavior'),
      count?: float(name='count'),
      enable?: boolean(name='enable'),
      grade?: int32(name='grade'),
      id?: long(name='id'),
      intervalSec?: long(name='intervalSec'),
      maxQueueingTimeoutMs?: int32(name='maxQueueingTimeoutMs'),
      namespace?: string(name='namespace'),
      paramItem?: map[string]any(name='paramItem'),
      resource?: string(name='resource'),
      resourceMode?: int32(name='resourceMode'),
      userId?: string(name='userId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelGatewayFlowRuleListRulesOfResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelGatewayFlowRuleListRulesOfResourceResponseBody(name='body'),
}

async function sentinelGatewayFlowRuleListRulesOfResourceWithOptions(request: SentinelGatewayFlowRuleListRulesOfResourceRequest, runtime: Util.RuntimeOptions): SentinelGatewayFlowRuleListRulesOfResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelGatewayFlowRuleListRulesOfResource',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelGatewayFlowRuleListRulesOfResource(request: SentinelGatewayFlowRuleListRulesOfResourceRequest): SentinelGatewayFlowRuleListRulesOfResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelGatewayFlowRuleListRulesOfResourceWithOptions(request, runtime);
}

model SentinelGatewayFlowRuleNewRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  burst?: int32(name='Burst'),
  controlBehavior?: int32(name='ControlBehavior'),
  count?: float(name='Count'),
  enable?: boolean(name='Enable'),
  fieldName?: string(name='FieldName'),
  grade?: int32(name='Grade'),
  hasParam?: boolean(name='HasParam'),
  intervalSec?: long(name='IntervalSec'),
  lang?: string(name='Lang'),
  matchStrategy?: int32(name='MatchStrategy'),
  maxQueueingTimeoutMs?: int32(name='MaxQueueingTimeoutMs'),
  namespace?: string(name='Namespace'),
  parseStrategy?: int32(name='ParseStrategy'),
  pattern?: string(name='Pattern'),
  resource?: string(name='Resource'),
  resourceMode?: int32(name='ResourceMode'),
}

model SentinelGatewayFlowRuleNewResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    burst?: int32(name='burst'),
    controlBehavior?: int32(name='controlBehavior'),
    count?: float(name='count'),
    enable?: boolean(name='enable'),
    grade?: int32(name='grade'),
    hasParam?: boolean(name='hasParam'),
    id?: long(name='id'),
    intervalSec?: long(name='intervalSec'),
    maxQueueingTimeoutMs?: int32(name='maxQueueingTimeoutMs'),
    namespace?: string(name='namespace'),
    paramItem?: map[string]any(name='paramItem'),
    resource?: string(name='resource'),
    resourceMode?: int32(name='resourceMode'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelGatewayFlowRuleNewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelGatewayFlowRuleNewResponseBody(name='body'),
}

async function sentinelGatewayFlowRuleNewWithOptions(request: SentinelGatewayFlowRuleNewRequest, runtime: Util.RuntimeOptions): SentinelGatewayFlowRuleNewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.burst)) {
    query['Burst'] = request.burst;
  }
  if (!Util.isUnset(request.controlBehavior)) {
    query['ControlBehavior'] = request.controlBehavior;
  }
  if (!Util.isUnset(request.count)) {
    query['Count'] = request.count;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.fieldName)) {
    query['FieldName'] = request.fieldName;
  }
  if (!Util.isUnset(request.grade)) {
    query['Grade'] = request.grade;
  }
  if (!Util.isUnset(request.hasParam)) {
    query['HasParam'] = request.hasParam;
  }
  if (!Util.isUnset(request.intervalSec)) {
    query['IntervalSec'] = request.intervalSec;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.matchStrategy)) {
    query['MatchStrategy'] = request.matchStrategy;
  }
  if (!Util.isUnset(request.maxQueueingTimeoutMs)) {
    query['MaxQueueingTimeoutMs'] = request.maxQueueingTimeoutMs;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.parseStrategy)) {
    query['ParseStrategy'] = request.parseStrategy;
  }
  if (!Util.isUnset(request.pattern)) {
    query['Pattern'] = request.pattern;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.resourceMode)) {
    query['ResourceMode'] = request.resourceMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelGatewayFlowRuleNew',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelGatewayFlowRuleNew(request: SentinelGatewayFlowRuleNewRequest): SentinelGatewayFlowRuleNewResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelGatewayFlowRuleNewWithOptions(request, runtime);
}

model SentinelGatewayFlowRuleOffRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelGatewayFlowRuleOffResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    burst?: int32(name='burst'),
    controlBehavior?: int32(name='controlBehavior'),
    count?: float(name='count'),
    enable?: boolean(name='enable'),
    grade?: int32(name='grade'),
    id?: long(name='id'),
    intervalSec?: long(name='intervalSec'),
    maxQueueingTimeoutMs?: int32(name='maxQueueingTimeoutMs'),
    namespace?: string(name='namespace'),
    paramItem?: map[string]any(name='paramItem'),
    resource?: string(name='resource'),
    resourceMode?: int32(name='resourceMode'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelGatewayFlowRuleOffResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelGatewayFlowRuleOffResponseBody(name='body'),
}

async function sentinelGatewayFlowRuleOffWithOptions(request: SentinelGatewayFlowRuleOffRequest, runtime: Util.RuntimeOptions): SentinelGatewayFlowRuleOffResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelGatewayFlowRuleOff',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelGatewayFlowRuleOff(request: SentinelGatewayFlowRuleOffRequest): SentinelGatewayFlowRuleOffResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelGatewayFlowRuleOffWithOptions(request, runtime);
}

model SentinelGatewayFlowRuleOffBatchRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  ids?: string(name='Ids'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelGatewayFlowRuleOffBatchResponseBody = {
  code?: string(name='Code'),
  data?: int32(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelGatewayFlowRuleOffBatchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelGatewayFlowRuleOffBatchResponseBody(name='body'),
}

async function sentinelGatewayFlowRuleOffBatchWithOptions(request: SentinelGatewayFlowRuleOffBatchRequest, runtime: Util.RuntimeOptions): SentinelGatewayFlowRuleOffBatchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelGatewayFlowRuleOffBatch',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelGatewayFlowRuleOffBatch(request: SentinelGatewayFlowRuleOffBatchRequest): SentinelGatewayFlowRuleOffBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelGatewayFlowRuleOffBatchWithOptions(request, runtime);
}

model SentinelGatewayFlowRuleOnRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelGatewayFlowRuleOnResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    burst?: int32(name='burst'),
    controlBehavior?: int32(name='controlBehavior'),
    count?: float(name='count'),
    enable?: boolean(name='enable'),
    grade?: int32(name='grade'),
    id?: long(name='id'),
    intervalSec?: long(name='intervalSec'),
    maxQueueingTimeoutMs?: int32(name='maxQueueingTimeoutMs'),
    namespace?: string(name='namespace'),
    paramItem?: map[string]any(name='paramItem'),
    resource?: string(name='resource'),
    resourceMode?: int32(name='resourceMode'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelGatewayFlowRuleOnResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelGatewayFlowRuleOnResponseBody(name='body'),
}

async function sentinelGatewayFlowRuleOnWithOptions(request: SentinelGatewayFlowRuleOnRequest, runtime: Util.RuntimeOptions): SentinelGatewayFlowRuleOnResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelGatewayFlowRuleOn',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelGatewayFlowRuleOn(request: SentinelGatewayFlowRuleOnRequest): SentinelGatewayFlowRuleOnResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelGatewayFlowRuleOnWithOptions(request, runtime);
}

model SentinelGatewayFlowRuleOnBatchRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  ids?: string(name='Ids'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelGatewayFlowRuleOnBatchResponseBody = {
  code?: string(name='Code'),
  data?: int32(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelGatewayFlowRuleOnBatchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelGatewayFlowRuleOnBatchResponseBody(name='body'),
}

async function sentinelGatewayFlowRuleOnBatchWithOptions(request: SentinelGatewayFlowRuleOnBatchRequest, runtime: Util.RuntimeOptions): SentinelGatewayFlowRuleOnBatchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelGatewayFlowRuleOnBatch',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelGatewayFlowRuleOnBatch(request: SentinelGatewayFlowRuleOnBatchRequest): SentinelGatewayFlowRuleOnBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelGatewayFlowRuleOnBatchWithOptions(request, runtime);
}

model SentinelGetAdapterSettingOfAppRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelGetAdapterSettingOfAppResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='AppName'),
    id?: long(name='Id'),
    namespace?: string(name='Namespace'),
    userId?: string(name='UserId'),
    webFallbackMode?: int32(name='WebFallbackMode'),
    webRedirectUrl?: string(name='WebRedirectUrl'),
    webRespContentType?: int32(name='WebRespContentType'),
    webRespMessage?: string(name='WebRespMessage'),
    webRespStatusCode?: int32(name='WebRespStatusCode'),
    webUrlPrefixCleanItems?: string(name='WebUrlPrefixCleanItems'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelGetAdapterSettingOfAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelGetAdapterSettingOfAppResponseBody(name='body'),
}

async function sentinelGetAdapterSettingOfAppWithOptions(request: SentinelGetAdapterSettingOfAppRequest, runtime: Util.RuntimeOptions): SentinelGetAdapterSettingOfAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelGetAdapterSettingOfApp',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelGetAdapterSettingOfApp(request: SentinelGetAdapterSettingOfAppRequest): SentinelGetAdapterSettingOfAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelGetAdapterSettingOfAppWithOptions(request, runtime);
}

model SentinelGetClusterClientDetailListForAssignRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  assignId?: long(name='AssignId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelGetClusterClientDetailListForAssignResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      machine?: {
        appName?: string(name='appName'),
        health?: boolean(name='health'),
        id?: long(name='id'),
        namespace?: string(name='namespace'),
        pid?: int32(name='pid'),
        privateIp?: string(name='privateIp'),
        processConfigurationId?: string(name='processConfigurationId'),
        userId?: string(name='userId'),
        vpcId?: string(name='vpcId'),
      }(name='machine'),
      state?: {
        clientState?: int32(name='clientState'),
        requestTimeout?: int32(name='requestTimeout'),
        targetIp?: string(name='targetIp'),
        targetPort?: int32(name='targetPort'),
      }(name='state'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelGetClusterClientDetailListForAssignResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelGetClusterClientDetailListForAssignResponseBody(name='body'),
}

async function sentinelGetClusterClientDetailListForAssignWithOptions(request: SentinelGetClusterClientDetailListForAssignRequest, runtime: Util.RuntimeOptions): SentinelGetClusterClientDetailListForAssignResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.assignId)) {
    query['AssignId'] = request.assignId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelGetClusterClientDetailListForAssign',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelGetClusterClientDetailListForAssign(request: SentinelGetClusterClientDetailListForAssignRequest): SentinelGetClusterClientDetailListForAssignResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelGetClusterClientDetailListForAssignWithOptions(request, runtime);
}

model SentinelGetClusterServerDetailForAssignRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  assignId?: long(name='AssignId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelGetClusterServerDetailForAssignResponseBody = {
  code?: string(name='Code'),
  data?: {
    assignGroup?: {
      appMachine?: {
        health?: boolean(name='health'),
        id?: long(name='id'),
        pid?: int32(name='pid'),
        privateIp?: string(name='privateIp'),
        processConfigurationId?: string(name='processConfigurationId'),
        userId?: string(name='userId'),
        vpcId?: string(name='vpcId'),
      }(name='appMachine'),
      appName?: string(name='appName'),
      clientCount?: int32(name='clientCount'),
      clientSet?: [ string ](name='clientSet'),
      id?: long(name='id'),
      maxAllowedQps?: float(name='maxAllowedQps'),
      namespace?: string(name='namespace'),
      serverPort?: int32(name='serverPort'),
      userId?: string(name='userId'),
    }(name='assignGroup'),
    state?: {
      connection?: [ 
        {
          connectedCount?: int32(name='connectedCount'),
          connectionSet?: [ 
            {
              address?: string(name='address'),
              host?: string(name='host'),
            }
          ](name='connectionSet'),
          namespace?: string(name='namespace'),
        }
      ](name='connection'),
      embedded?: boolean(name='embedded'),
      flow?: {
        exceedCount?: float(name='exceedCount'),
        intervalMs?: int32(name='intervalMs'),
        maxAllowedQps?: float(name='maxAllowedQps'),
        maxOccupyRatio?: float(name='maxOccupyRatio'),
        namespace?: string(name='namespace'),
        sampleCount?: int32(name='sampleCount'),
      }(name='flow'),
      namespaceSet?: [ string ](name='namespaceSet'),
      port?: int32(name='port'),
      requestLimitData?: [ 
        {
          currentQps?: float(name='currentQps'),
          maxAllowedQps?: float(name='maxAllowedQps'),
          namespace?: string(name='namespace'),
        }
      ](name='requestLimitData'),
      transport?: {
        idleSeconds?: int32(name='idleSeconds'),
        port?: int32(name='port'),
      }(name='transport'),
    }(name='state'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelGetClusterServerDetailForAssignResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelGetClusterServerDetailForAssignResponseBody(name='body'),
}

async function sentinelGetClusterServerDetailForAssignWithOptions(request: SentinelGetClusterServerDetailForAssignRequest, runtime: Util.RuntimeOptions): SentinelGetClusterServerDetailForAssignResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.assignId)) {
    query['AssignId'] = request.assignId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelGetClusterServerDetailForAssign',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelGetClusterServerDetailForAssign(request: SentinelGetClusterServerDetailForAssignRequest): SentinelGetClusterServerDetailForAssignResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelGetClusterServerDetailForAssignWithOptions(request, runtime);
}

model SentinelGetGeneralSettingOfAppRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelGetGeneralSettingOfAppResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='AppName'),
    id?: long(name='Id'),
    maxContextAmount?: int32(name='MaxContextAmount'),
    maxOriginAmount?: int32(name='MaxOriginAmount'),
    maxResourceAmount?: int32(name='MaxResourceAmount'),
    namespace?: string(name='Namespace'),
    statisticMaxRt?: int32(name='StatisticMaxRt'),
    userId?: string(name='UserId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelGetGeneralSettingOfAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelGetGeneralSettingOfAppResponseBody(name='body'),
}

async function sentinelGetGeneralSettingOfAppWithOptions(request: SentinelGetGeneralSettingOfAppRequest, runtime: Util.RuntimeOptions): SentinelGetGeneralSettingOfAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelGetGeneralSettingOfApp',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelGetGeneralSettingOfApp(request: SentinelGetGeneralSettingOfAppRequest): SentinelGetGeneralSettingOfAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelGetGeneralSettingOfAppWithOptions(request, runtime);
}

model SentinelGetModelDetailRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelGetModelDetailResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appId?: long(name='AppId'),
      appName?: string(name='AppName'),
      enable?: boolean(name='Enable'),
      modelId?: long(name='ModelId'),
      namespace?: string(name='Namespace'),
      userId?: string(name='UserId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelGetModelDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelGetModelDetailResponseBody(name='body'),
}

async function sentinelGetModelDetailWithOptions(request: SentinelGetModelDetailRequest, runtime: Util.RuntimeOptions): SentinelGetModelDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelGetModelDetail',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelGetModelDetail(request: SentinelGetModelDetailRequest): SentinelGetModelDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelGetModelDetailWithOptions(request, runtime);
}

model SentinelGetModelListRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelGetModelListResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appName?: string(name='AppName'),
      enable?: boolean(name='Enable'),
      id?: long(name='Id'),
      model?: long(name='Model'),
      modelName?: string(name='ModelName'),
      namespace?: string(name='Namespace'),
      userId?: string(name='UserId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelGetModelListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelGetModelListResponseBody(name='body'),
}

async function sentinelGetModelListWithOptions(request: SentinelGetModelListRequest, runtime: Util.RuntimeOptions): SentinelGetModelListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelGetModelList',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelGetModelList(request: SentinelGetModelListRequest): SentinelGetModelListResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelGetModelListWithOptions(request, runtime);
}

model SentinelGetMonitorDashboardItemsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  dashboardId?: long(name='DashboardId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model SentinelGetMonitorDashboardItemsResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelGetMonitorDashboardItemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelGetMonitorDashboardItemsResponseBody(name='body'),
}

async function sentinelGetMonitorDashboardItemsWithOptions(request: SentinelGetMonitorDashboardItemsRequest, runtime: Util.RuntimeOptions): SentinelGetMonitorDashboardItemsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.dashboardId)) {
    query['DashboardId'] = request.dashboardId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelGetMonitorDashboardItems',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelGetMonitorDashboardItems(request: SentinelGetMonitorDashboardItemsRequest): SentinelGetMonitorDashboardItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelGetMonitorDashboardItemsWithOptions(request, runtime);
}

model SentinelGetMonitorDashboardsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  metricName?: string(name='MetricName'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model SentinelGetMonitorDashboardsResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelGetMonitorDashboardsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelGetMonitorDashboardsResponseBody(name='body'),
}

async function sentinelGetMonitorDashboardsWithOptions(request: SentinelGetMonitorDashboardsRequest, runtime: Util.RuntimeOptions): SentinelGetMonitorDashboardsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.metricName)) {
    query['MetricName'] = request.metricName;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelGetMonitorDashboards',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelGetMonitorDashboards(request: SentinelGetMonitorDashboardsRequest): SentinelGetMonitorDashboardsResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelGetMonitorDashboardsWithOptions(request, runtime);
}

model SentinelGetResourceFallbackRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  blockType?: int32(name='BlockType'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
}

model SentinelGetResourceFallbackResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='AppName'),
    fallbackBehavior?: map[string]any(name='FallbackBehavior'),
    id?: long(name='Id'),
    name?: string(name='Name'),
    namespace?: string(name='Namespace'),
    resourceClassification?: int32(name='ResourceClassification'),
    userId?: string(name='UserId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelGetResourceFallbackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelGetResourceFallbackResponseBody(name='body'),
}

async function sentinelGetResourceFallbackWithOptions(request: SentinelGetResourceFallbackRequest, runtime: Util.RuntimeOptions): SentinelGetResourceFallbackResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.blockType)) {
    query['BlockType'] = request.blockType;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelGetResourceFallback',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelGetResourceFallback(request: SentinelGetResourceFallbackRequest): SentinelGetResourceFallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelGetResourceFallbackWithOptions(request, runtime);
}

model SentinelHotParamRuleDeleteRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelHotParamRuleDeleteResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelHotParamRuleDeleteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelHotParamRuleDeleteResponseBody(name='body'),
}

async function sentinelHotParamRuleDeleteWithOptions(request: SentinelHotParamRuleDeleteRequest, runtime: Util.RuntimeOptions): SentinelHotParamRuleDeleteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelHotParamRuleDelete',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelHotParamRuleDelete(request: SentinelHotParamRuleDeleteRequest): SentinelHotParamRuleDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelHotParamRuleDeleteWithOptions(request, runtime);
}

model SentinelHotParamRuleOffRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelHotParamRuleOffResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    burstCount?: int32(name='burstCount'),
    clusterFailFallback?: boolean(name='clusterFailFallback'),
    clusterMode?: boolean(name='clusterMode'),
    clusterThresholdType?: int32(name='clusterThresholdType'),
    controlBehavior?: int32(name='controlBehavior'),
    count?: float(name='count'),
    durationInSec?: long(name='durationInSec'),
    enable?: boolean(name='enable'),
    grade?: int32(name='grade'),
    id?: long(name='id'),
    limitApp?: string(name='limitApp'),
    maxQueueingTimeMs?: int32(name='maxQueueingTimeMs'),
    namespace?: string(name='namespace'),
    paramFlowItemList?: [ 
      {
        classType?: string(name='classType'),
        count?: int32(name='count'),
        object?: string(name='object'),
      }
    ](name='paramFlowItemList'),
    paramIdx?: int32(name='paramIdx'),
    resource?: string(name='resource'),
    sampleCount?: int32(name='sampleCount'),
    tags?: [ string ](name='tags'),
    userId?: string(name='userId'),
    windowIntervalMs?: int32(name='windowIntervalMs'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelHotParamRuleOffResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelHotParamRuleOffResponseBody(name='body'),
}

async function sentinelHotParamRuleOffWithOptions(request: SentinelHotParamRuleOffRequest, runtime: Util.RuntimeOptions): SentinelHotParamRuleOffResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelHotParamRuleOff',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelHotParamRuleOff(request: SentinelHotParamRuleOffRequest): SentinelHotParamRuleOffResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelHotParamRuleOffWithOptions(request, runtime);
}

model SentinelHotParamRuleOffBatchRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  ids?: string(name='Ids'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelHotParamRuleOffBatchResponseBody = {
  code?: string(name='Code'),
  data?: int32(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelHotParamRuleOffBatchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelHotParamRuleOffBatchResponseBody(name='body'),
}

async function sentinelHotParamRuleOffBatchWithOptions(request: SentinelHotParamRuleOffBatchRequest, runtime: Util.RuntimeOptions): SentinelHotParamRuleOffBatchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelHotParamRuleOffBatch',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelHotParamRuleOffBatch(request: SentinelHotParamRuleOffBatchRequest): SentinelHotParamRuleOffBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelHotParamRuleOffBatchWithOptions(request, runtime);
}

model SentinelHotParamRuleOnRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelHotParamRuleOnResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    burstCount?: int32(name='burstCount'),
    clusterFailFallback?: boolean(name='clusterFailFallback'),
    clusterMode?: boolean(name='clusterMode'),
    clusterThresholdType?: int32(name='clusterThresholdType'),
    controlBehavior?: int32(name='controlBehavior'),
    count?: float(name='count'),
    durationInSec?: long(name='durationInSec'),
    enable?: boolean(name='enable'),
    grade?: int32(name='grade'),
    id?: long(name='id'),
    limitApp?: string(name='limitApp'),
    maxQueueingTimeMs?: int32(name='maxQueueingTimeMs'),
    namespace?: string(name='namespace'),
    paramFlowItemList?: [ 
      {
        classType?: string(name='classType'),
        count?: int32(name='count'),
        object?: string(name='object'),
      }
    ](name='paramFlowItemList'),
    paramIdx?: int32(name='paramIdx'),
    resource?: string(name='resource'),
    sampleCount?: int32(name='sampleCount'),
    tags?: [ string ](name='tags'),
    userId?: string(name='userId'),
    windowIntervalMs?: int32(name='windowIntervalMs'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelHotParamRuleOnResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelHotParamRuleOnResponseBody(name='body'),
}

async function sentinelHotParamRuleOnWithOptions(request: SentinelHotParamRuleOnRequest, runtime: Util.RuntimeOptions): SentinelHotParamRuleOnResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelHotParamRuleOn',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelHotParamRuleOn(request: SentinelHotParamRuleOnRequest): SentinelHotParamRuleOnResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelHotParamRuleOnWithOptions(request, runtime);
}

model SentinelHotParamRuleOnBatchRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  ids?: string(name='Ids'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelHotParamRuleOnBatchResponseBody = {
  code?: string(name='Code'),
  data?: int32(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelHotParamRuleOnBatchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelHotParamRuleOnBatchResponseBody(name='body'),
}

async function sentinelHotParamRuleOnBatchWithOptions(request: SentinelHotParamRuleOnBatchRequest, runtime: Util.RuntimeOptions): SentinelHotParamRuleOnBatchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelHotParamRuleOnBatch',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelHotParamRuleOnBatch(request: SentinelHotParamRuleOnBatchRequest): SentinelHotParamRuleOnBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelHotParamRuleOnBatchWithOptions(request, runtime);
}

model SentinelHttpApiMatchDeleteRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelHttpApiMatchDeleteResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelHttpApiMatchDeleteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelHttpApiMatchDeleteResponseBody(name='body'),
}

async function sentinelHttpApiMatchDeleteWithOptions(request: SentinelHttpApiMatchDeleteRequest, runtime: Util.RuntimeOptions): SentinelHttpApiMatchDeleteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelHttpApiMatchDelete',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelHttpApiMatchDelete(request: SentinelHttpApiMatchDeleteRequest): SentinelHttpApiMatchDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelHttpApiMatchDeleteWithOptions(request, runtime);
}

model SentinelHttpApiMatchNewRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  httpApiMatch?: string(name='HttpApiMatch'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelHttpApiMatchNewResponseBody = {
  code?: string(name='Code'),
  data?: {
    apiName?: string(name='apiName'),
    appName?: string(name='appName'),
    enable?: boolean(name='enable'),
    gmtCreate?: long(name='gmtCreate'),
    gmtModified?: long(name='gmtModified'),
    hostMatch?: {
      pattern?: string(name='pattern'),
      type?: string(name='type'),
    }(name='hostMatch'),
    id?: long(name='id'),
    namespace?: string(name='namespace'),
    pathMatch?: {
      pattern?: string(name='pattern'),
      type?: string(name='type'),
      useClientRequestPath?: boolean(name='useClientRequestPath'),
    }(name='pathMatch'),
    resourceNameGenerator?: {
      pattern?: string(name='pattern'),
      strategy?: string(name='strategy'),
    }(name='resourceNameGenerator'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelHttpApiMatchNewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelHttpApiMatchNewResponseBody(name='body'),
}

async function sentinelHttpApiMatchNewWithOptions(request: SentinelHttpApiMatchNewRequest, runtime: Util.RuntimeOptions): SentinelHttpApiMatchNewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.httpApiMatch)) {
    query['HttpApiMatch'] = request.httpApiMatch;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelHttpApiMatchNew',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelHttpApiMatchNew(request: SentinelHttpApiMatchNewRequest): SentinelHttpApiMatchNewResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelHttpApiMatchNewWithOptions(request, runtime);
}

model SentinelHttpApiMatchQueryForAppRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelHttpApiMatchQueryForAppResponseBody = {
  code?: string(name='Code'),
  data?: {
    apiList?: [ 
      {
        apiName?: string(name='apiName'),
        enable?: boolean(name='enable'),
        gmtCreate?: long(name='gmtCreate'),
        gmtModified?: long(name='gmtModified'),
        hostMatch?: {
          pattern?: string(name='pattern'),
          type?: string(name='type'),
        }(name='hostMatch'),
        id?: long(name='id'),
        pathMatch?: {
          pattern?: string(name='pattern'),
          type?: string(name='type'),
          useClientRequestPath?: boolean(name='useClientRequestPath'),
        }(name='pathMatch'),
        resourceNameGenerator?: {
          pattern?: string(name='pattern'),
          strategy?: string(name='strategy'),
        }(name='resourceNameGenerator'),
      }
    ](name='apiList'),
    defaultResourceNameStrategy?: string(name='defaultResourceNameStrategy'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelHttpApiMatchQueryForAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelHttpApiMatchQueryForAppResponseBody(name='body'),
}

async function sentinelHttpApiMatchQueryForAppWithOptions(request: SentinelHttpApiMatchQueryForAppRequest, runtime: Util.RuntimeOptions): SentinelHttpApiMatchQueryForAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelHttpApiMatchQueryForApp',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelHttpApiMatchQueryForApp(request: SentinelHttpApiMatchQueryForAppRequest): SentinelHttpApiMatchQueryForAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelHttpApiMatchQueryForAppWithOptions(request, runtime);
}

model SentinelHttpApiMatchUpdateRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  httpApiMatch?: string(name='HttpApiMatch'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelHttpApiMatchUpdateResponseBody = {
  code?: string(name='Code'),
  data?: {
    apiName?: string(name='apiName'),
    appName?: string(name='appName'),
    enable?: boolean(name='enable'),
    gmtCreate?: long(name='gmtCreate'),
    gmtModified?: long(name='gmtModified'),
    hostMatch?: {
      pattern?: string(name='pattern'),
      type?: string(name='type'),
    }(name='hostMatch'),
    id?: long(name='id'),
    namespace?: string(name='namespace'),
    pathMatch?: {
      pattern?: string(name='pattern'),
      type?: string(name='type'),
      useClientRequestPath?: boolean(name='useClientRequestPath'),
    }(name='pathMatch'),
    resourceNameGenerator?: {
      pattern?: string(name='pattern'),
      strategy?: string(name='strategy'),
    }(name='resourceNameGenerator'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelHttpApiMatchUpdateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelHttpApiMatchUpdateResponseBody(name='body'),
}

async function sentinelHttpApiMatchUpdateWithOptions(request: SentinelHttpApiMatchUpdateRequest, runtime: Util.RuntimeOptions): SentinelHttpApiMatchUpdateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.httpApiMatch)) {
    query['HttpApiMatch'] = request.httpApiMatch;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelHttpApiMatchUpdate',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelHttpApiMatchUpdate(request: SentinelHttpApiMatchUpdateRequest): SentinelHttpApiMatchUpdateResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelHttpApiMatchUpdateWithOptions(request, runtime);
}

model SentinelHttpApiMatchUpdateDefaultRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  strategy?: string(name='Strategy'),
}

model SentinelHttpApiMatchUpdateDefaultResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelHttpApiMatchUpdateDefaultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelHttpApiMatchUpdateDefaultResponseBody(name='body'),
}

async function sentinelHttpApiMatchUpdateDefaultWithOptions(request: SentinelHttpApiMatchUpdateDefaultRequest, runtime: Util.RuntimeOptions): SentinelHttpApiMatchUpdateDefaultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.strategy)) {
    query['Strategy'] = request.strategy;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelHttpApiMatchUpdateDefault',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelHttpApiMatchUpdateDefault(request: SentinelHttpApiMatchUpdateDefaultRequest): SentinelHttpApiMatchUpdateDefaultResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelHttpApiMatchUpdateDefaultWithOptions(request, runtime);
}

model SentinelListAppsOfTypesRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appTypes?: string(name='AppTypes'),
  lang?: string(name='Lang'),
  minHeartBeat?: long(name='MinHeartBeat'),
  namespace?: string(name='Namespace'),
}

model SentinelListAppsOfTypesResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      ahasAppName?: string(name='ahasAppName'),
      appName?: string(name='appName'),
      appType?: int32(name='appType'),
      id?: long(name='id'),
      lastHealthPingTime?: long(name='lastHealthPingTime'),
      namespace?: string(name='namespace'),
      userId?: string(name='userId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelListAppsOfTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelListAppsOfTypesResponseBody(name='body'),
}

async function sentinelListAppsOfTypesWithOptions(request: SentinelListAppsOfTypesRequest, runtime: Util.RuntimeOptions): SentinelListAppsOfTypesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appTypes)) {
    query['AppTypes'] = request.appTypes;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.minHeartBeat)) {
    query['MinHeartBeat'] = request.minHeartBeat;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelListAppsOfTypes',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelListAppsOfTypes(request: SentinelListAppsOfTypesRequest): SentinelListAppsOfTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelListAppsOfTypesWithOptions(request, runtime);
}

model SentinelListTopNAppsSummaryMetricOfAppTypeRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appTypes?: string(name='AppTypes'),
  desc?: boolean(name='Desc'),
  endTime?: long(name='EndTime'),
  lang?: string(name='Lang'),
  minHeartBeat?: long(name='MinHeartBeat'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  searchKey?: string(name='SearchKey'),
  sourceType?: string(name='SourceType'),
  startTime?: long(name='StartTime'),
}

model SentinelListTopNAppsSummaryMetricOfAppTypeResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelListTopNAppsSummaryMetricOfAppTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelListTopNAppsSummaryMetricOfAppTypeResponseBody(name='body'),
}

async function sentinelListTopNAppsSummaryMetricOfAppTypeWithOptions(request: SentinelListTopNAppsSummaryMetricOfAppTypeRequest, runtime: Util.RuntimeOptions): SentinelListTopNAppsSummaryMetricOfAppTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appTypes)) {
    query['AppTypes'] = request.appTypes;
  }
  if (!Util.isUnset(request.desc)) {
    query['Desc'] = request.desc;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.minHeartBeat)) {
    query['MinHeartBeat'] = request.minHeartBeat;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchKey)) {
    query['SearchKey'] = request.searchKey;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelListTopNAppsSummaryMetricOfAppType',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelListTopNAppsSummaryMetricOfAppType(request: SentinelListTopNAppsSummaryMetricOfAppTypeRequest): SentinelListTopNAppsSummaryMetricOfAppTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelListTopNAppsSummaryMetricOfAppTypeWithOptions(request, runtime);
}

model SentinelMacTopNResourcesRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  ahasTimestamp?: long(name='AhasTimestamp'),
  appName?: string(name='AppName'),
  desc?: boolean(name='Desc'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  orderBy?: int32(name='OrderBy'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  processConfigurationId?: string(name='ProcessConfigurationId'),
  resourceType?: int32(name='ResourceType'),
  searchKey?: string(name='SearchKey'),
}

model SentinelMacTopNResourcesResponseBody = {
  code?: string(name='Code'),
  data?: {
    macMetrics?: [ 
      {
        deviceConfigurationId?: string(name='deviceConfigurationId'),
        deviceId?: string(name='deviceId'),
        hostname?: string(name='hostname'),
        parentIp?: string(name='parentIp'),
        pid?: int32(name='pid'),
        privateIp?: string(name='privateIp'),
        processConfigurationId?: string(name='processConfigurationId'),
        resource?: string(name='resource'),
        vpcId?: string(name='vpcId'),
      }
    ](name='macMetrics'),
    metrics?: [ 
      {
        favorite?: boolean(name='favorite'),
        hasRule?: boolean(name='hasRule'),
        resource?: string(name='resource'),
      }
    ](name='metrics'),
    pageIndex?: int32(name='pageIndex'),
    pageSize?: int32(name='pageSize'),
    totalCount?: int32(name='totalCount'),
    totalPage?: int32(name='totalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelMacTopNResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelMacTopNResourcesResponseBody(name='body'),
}

async function sentinelMacTopNResourcesWithOptions(request: SentinelMacTopNResourcesRequest, runtime: Util.RuntimeOptions): SentinelMacTopNResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.ahasTimestamp)) {
    query['AhasTimestamp'] = request.ahasTimestamp;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.desc)) {
    query['Desc'] = request.desc;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.processConfigurationId)) {
    query['ProcessConfigurationId'] = request.processConfigurationId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.searchKey)) {
    query['SearchKey'] = request.searchKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelMacTopNResources',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelMacTopNResources(request: SentinelMacTopNResourcesRequest): SentinelMacTopNResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelMacTopNResourcesWithOptions(request, runtime);
}

model SentinelMachineSecurityInfoListRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelMachineSecurityInfoListResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appName?: string(name='AppName'),
      hostname?: string(name='Hostname'),
      namespace?: string(name='Namespace'),
      parentIp?: string(name='ParentIp'),
      privateIp?: string(name='PrivateIp'),
      processConfigurationId?: string(name='ProcessConfigurationId'),
      regionId?: string(name='RegionId'),
      securityGroupId?: string(name='SecurityGroupId'),
      switchId?: string(name='SwitchId'),
      userId?: string(name='UserId'),
      vpcId?: string(name='VpcId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelMachineSecurityInfoListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelMachineSecurityInfoListResponseBody(name='body'),
}

async function sentinelMachineSecurityInfoListWithOptions(request: SentinelMachineSecurityInfoListRequest, runtime: Util.RuntimeOptions): SentinelMachineSecurityInfoListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelMachineSecurityInfoList',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelMachineSecurityInfoList(request: SentinelMachineSecurityInfoListRequest): SentinelMachineSecurityInfoListResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelMachineSecurityInfoListWithOptions(request, runtime);
}

model SentinelMetricListTopNResourceNameRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  ahasTimestamp?: long(name='AhasTimestamp'),
  appName?: string(name='AppName'),
  desc?: boolean(name='Desc'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  orderBy?: int32(name='OrderBy'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  resourceType?: int32(name='ResourceType'),
  searchKey?: string(name='SearchKey'),
  sourceType?: string(name='SourceType'),
  trafficType?: int32(name='TrafficType'),
}

model SentinelMetricListTopNResourceNameResponseBody = {
  code?: string(name='Code'),
  data?: {
    metrics?: [ 
      {
        blockedQps?: float(name='blockedQps'),
        exception?: float(name='exception'),
        favorite?: boolean(name='favorite'),
        hasRule?: boolean(name='hasRule'),
        passedQps?: float(name='passedQps'),
        resource?: string(name='resource'),
        rt?: float(name='rt'),
        trafficType?: string(name='trafficType'),
        type?: int32(name='type'),
      }
    ](name='metrics'),
    pageIndex?: int32(name='pageIndex'),
    pageSize?: int32(name='pageSize'),
    totalCount?: int32(name='totalCount'),
    totalPage?: int32(name='totalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelMetricListTopNResourceNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelMetricListTopNResourceNameResponseBody(name='body'),
}

async function sentinelMetricListTopNResourceNameWithOptions(request: SentinelMetricListTopNResourceNameRequest, runtime: Util.RuntimeOptions): SentinelMetricListTopNResourceNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.ahasTimestamp)) {
    query['AhasTimestamp'] = request.ahasTimestamp;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.desc)) {
    query['Desc'] = request.desc;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.searchKey)) {
    query['SearchKey'] = request.searchKey;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.trafficType)) {
    query['TrafficType'] = request.trafficType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelMetricListTopNResourceName',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelMetricListTopNResourceName(request: SentinelMetricListTopNResourceNameRequest): SentinelMetricListTopNResourceNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelMetricListTopNResourceNameWithOptions(request, runtime);
}

model SentinelMetricListTopNResourcesMetricRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  desc?: boolean(name='Desc'),
  endTime?: long(name='EndTime'),
  metricType?: int32(name='MetricType'),
  namespace?: string(name='Namespace'),
  orderBy?: int32(name='OrderBy'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  searchKey?: string(name='SearchKey'),
  startTime?: long(name='StartTime'),
}

model SentinelMetricListTopNResourcesMetricResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelMetricListTopNResourcesMetricResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelMetricListTopNResourcesMetricResponseBody(name='body'),
}

async function sentinelMetricListTopNResourcesMetricWithOptions(request: SentinelMetricListTopNResourcesMetricRequest, runtime: Util.RuntimeOptions): SentinelMetricListTopNResourcesMetricResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.desc)) {
    query['Desc'] = request.desc;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.metricType)) {
    query['MetricType'] = request.metricType;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchKey)) {
    query['SearchKey'] = request.searchKey;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelMetricListTopNResourcesMetric',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelMetricListTopNResourcesMetric(request: SentinelMetricListTopNResourcesMetricRequest): SentinelMetricListTopNResourcesMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelMetricListTopNResourcesMetricWithOptions(request, runtime);
}

model SentinelMetricListTopNResourcesMetricSimpleRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  ahasTimestamp?: long(name='AhasTimestamp'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  orderBy?: int32(name='OrderBy'),
  pageSize?: int32(name='PageSize'),
}

model SentinelMetricListTopNResourcesMetricSimpleResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelMetricListTopNResourcesMetricSimpleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelMetricListTopNResourcesMetricSimpleResponseBody(name='body'),
}

async function sentinelMetricListTopNResourcesMetricSimpleWithOptions(request: SentinelMetricListTopNResourcesMetricSimpleRequest, runtime: Util.RuntimeOptions): SentinelMetricListTopNResourcesMetricSimpleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.ahasTimestamp)) {
    query['AhasTimestamp'] = request.ahasTimestamp;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelMetricListTopNResourcesMetricSimple',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelMetricListTopNResourcesMetricSimple(request: SentinelMetricListTopNResourcesMetricSimpleRequest): SentinelMetricListTopNResourcesMetricSimpleResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelMetricListTopNResourcesMetricSimpleWithOptions(request, runtime);
}

model SentinelMetricQueryMachineResourceMetricRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  pid?: int32(name='Pid'),
  privateIp?: string(name='PrivateIp'),
  processConfigurationId?: string(name='ProcessConfigurationId'),
  resource?: string(name='Resource'),
  startTime?: long(name='StartTime'),
  vpcId?: string(name='VpcId'),
}

model SentinelMetricQueryMachineResourceMetricResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appName?: string(name='appName'),
      blockedQps?: float(name='blockedQps'),
      count?: int32(name='count'),
      exception?: float(name='exception'),
      namespace?: string(name='namespace'),
      passedQps?: float(name='passedQps'),
      resource?: string(name='resource'),
      rt?: float(name='rt'),
      successQps?: float(name='successQps'),
      timestamp?: long(name='timestamp'),
      userId?: string(name='userId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelMetricQueryMachineResourceMetricResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelMetricQueryMachineResourceMetricResponseBody(name='body'),
}

async function sentinelMetricQueryMachineResourceMetricWithOptions(request: SentinelMetricQueryMachineResourceMetricRequest, runtime: Util.RuntimeOptions): SentinelMetricQueryMachineResourceMetricResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pid)) {
    query['Pid'] = request.pid;
  }
  if (!Util.isUnset(request.privateIp)) {
    query['PrivateIp'] = request.privateIp;
  }
  if (!Util.isUnset(request.processConfigurationId)) {
    query['ProcessConfigurationId'] = request.processConfigurationId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelMetricQueryMachineResourceMetric',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelMetricQueryMachineResourceMetric(request: SentinelMetricQueryMachineResourceMetricRequest): SentinelMetricQueryMachineResourceMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelMetricQueryMachineResourceMetricWithOptions(request, runtime);
}

model SentinelMetricQueryMetricsOfResourceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
  startTime?: long(name='StartTime'),
}

model SentinelMetricQueryMetricsOfResourceResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appName?: string(name='appName'),
      blockedQps?: float(name='blockedQps'),
      count?: int32(name='count'),
      exception?: float(name='exception'),
      namespace?: string(name='namespace'),
      passedQps?: float(name='passedQps'),
      resource?: string(name='resource'),
      rt?: float(name='rt'),
      successQps?: float(name='successQps'),
      timestamp?: long(name='timestamp'),
      userId?: string(name='userId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelMetricQueryMetricsOfResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelMetricQueryMetricsOfResourceResponseBody(name='body'),
}

async function sentinelMetricQueryMetricsOfResourceWithOptions(request: SentinelMetricQueryMetricsOfResourceRequest, runtime: Util.RuntimeOptions): SentinelMetricQueryMetricsOfResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelMetricQueryMetricsOfResource',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelMetricQueryMetricsOfResource(request: SentinelMetricQueryMetricsOfResourceRequest): SentinelMetricQueryMetricsOfResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelMetricQueryMetricsOfResourceWithOptions(request, runtime);
}

model SentinelMetricQueryMetricsOfResourcesRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  startTime?: long(name='StartTime'),
}

model SentinelMetricQueryMetricsOfResourcesResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appName?: string(name='AppName'),
      innerMetrics?: [ 
        {
          blockedQps?: float(name='BlockedQps'),
          exception?: float(name='Exception'),
          passedQps?: float(name='PassedQps'),
          rt?: float(name='Rt'),
          successQps?: float(name='SuccessQps'),
          timestamp?: long(name='Timestamp'),
        }
      ](name='InnerMetrics'),
      namespace?: string(name='Namespace'),
      resource?: string(name='Resource'),
      userId?: string(name='UserId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelMetricQueryMetricsOfResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelMetricQueryMetricsOfResourcesResponseBody(name='body'),
}

async function sentinelMetricQueryMetricsOfResourcesWithOptions(request: SentinelMetricQueryMetricsOfResourcesRequest, runtime: Util.RuntimeOptions): SentinelMetricQueryMetricsOfResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelMetricQueryMetricsOfResources',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelMetricQueryMetricsOfResources(request: SentinelMetricQueryMetricsOfResourcesRequest): SentinelMetricQueryMetricsOfResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelMetricQueryMetricsOfResourcesWithOptions(request, runtime);
}

model SentinelModifyAppPriceLevelRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  priceLevel?: int32(name='PriceLevel'),
}

model SentinelModifyAppPriceLevelResponseBody = {
  code?: string(name='Code'),
  data?: {
    ahasAppName?: string(name='ahasAppName'),
    appName?: string(name='appName'),
    appType?: int32(name='appType'),
    currentLevel?: int32(name='currentLevel'),
    dirtyLevel?: int32(name='dirtyLevel'),
    id?: long(name='id'),
    lastHealthPingTime?: long(name='lastHealthPingTime'),
    levelModifyTime?: long(name='levelModifyTime'),
    namespace?: string(name='namespace'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelModifyAppPriceLevelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelModifyAppPriceLevelResponseBody(name='body'),
}

async function sentinelModifyAppPriceLevelWithOptions(request: SentinelModifyAppPriceLevelRequest, runtime: Util.RuntimeOptions): SentinelModifyAppPriceLevelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.priceLevel)) {
    query['PriceLevel'] = request.priceLevel;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelModifyAppPriceLevel',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelModifyAppPriceLevel(request: SentinelModifyAppPriceLevelRequest): SentinelModifyAppPriceLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelModifyAppPriceLevelWithOptions(request, runtime);
}

model SentinelNodeListSentinelMachineNodesRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  ip?: string(name='Ip'),
  key?: string(name='Key'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  pid?: int32(name='Pid'),
  processConfigurationId?: string(name='ProcessConfigurationId'),
  type?: string(name='Type'),
  vpcId?: string(name='VpcId'),
}

model SentinelNodeListSentinelMachineNodesResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      averageRt?: long(name='averageRt'),
      blockQps?: long(name='blockQps'),
      exceptionQps?: long(name='exceptionQps'),
      id?: string(name='id'),
      oneMinuteBlock?: long(name='oneMinuteBlock'),
      oneMinuteException?: long(name='oneMinuteException'),
      oneMinutePass?: long(name='oneMinutePass'),
      oneMinuteTotal?: long(name='oneMinuteTotal'),
      parentId?: string(name='parentId'),
      passQps?: long(name='passQps'),
      resource?: string(name='resource'),
      successQps?: long(name='successQps'),
      threadNum?: int32(name='threadNum'),
      timestamp?: long(name='timestamp'),
      totalQps?: long(name='totalQps'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelNodeListSentinelMachineNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelNodeListSentinelMachineNodesResponseBody(name='body'),
}

async function sentinelNodeListSentinelMachineNodesWithOptions(request: SentinelNodeListSentinelMachineNodesRequest, runtime: Util.RuntimeOptions): SentinelNodeListSentinelMachineNodesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.ip)) {
    query['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pid)) {
    query['Pid'] = request.pid;
  }
  if (!Util.isUnset(request.processConfigurationId)) {
    query['ProcessConfigurationId'] = request.processConfigurationId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelNodeListSentinelMachineNodes',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelNodeListSentinelMachineNodes(request: SentinelNodeListSentinelMachineNodesRequest): SentinelNodeListSentinelMachineNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelNodeListSentinelMachineNodesWithOptions(request, runtime);
}

model SentinelOperationLogListOpLogsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model SentinelOperationLogListOpLogsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appName?: string(name='appName'),
      createTimestamp?: long(name='createTimestamp'),
      id?: long(name='id'),
      modifiedTimestamp?: long(name='modifiedTimestamp'),
      namespace?: string(name='namespace'),
      newValue?: string(name='newValue'),
      oldValue?: string(name='oldValue'),
      opType?: string(name='opType'),
      opUserId?: string(name='opUserId'),
      resource?: string(name='resource'),
      ruleId?: long(name='ruleId'),
      ruleType?: string(name='ruleType'),
      timestamp?: long(name='timestamp'),
      userId?: string(name='userId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelOperationLogListOpLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelOperationLogListOpLogsResponseBody(name='body'),
}

async function sentinelOperationLogListOpLogsWithOptions(request: SentinelOperationLogListOpLogsRequest, runtime: Util.RuntimeOptions): SentinelOperationLogListOpLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelOperationLogListOpLogs',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelOperationLogListOpLogs(request: SentinelOperationLogListOpLogsRequest): SentinelOperationLogListOpLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelOperationLogListOpLogsWithOptions(request, runtime);
}

model SentinelPackageCanRefundRequest {
  data?: string(name='data'),
}

model SentinelPackageCanRefundResponseBody = {
  code?: string(name='code'),
  data?: string(name='data'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  synchro?: string(name='synchro'),
}

model SentinelPackageCanRefundResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelPackageCanRefundResponseBody(name='body'),
}

async function sentinelPackageCanRefundWithOptions(request: SentinelPackageCanRefundRequest, runtime: Util.RuntimeOptions): SentinelPackageCanRefundResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.data)) {
    query['data'] = request.data;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelPackageCanRefund',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelPackageCanRefund(request: SentinelPackageCanRefundRequest): SentinelPackageCanRefundResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelPackageCanRefundWithOptions(request, runtime);
}

model SentinelPackageRefundRequest {
  data?: string(name='data'),
}

model SentinelPackageRefundResponseBody = {
  code?: string(name='code'),
  data?: string(name='data'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  synchro?: string(name='synchro'),
}

model SentinelPackageRefundResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelPackageRefundResponseBody(name='body'),
}

async function sentinelPackageRefundWithOptions(request: SentinelPackageRefundRequest, runtime: Util.RuntimeOptions): SentinelPackageRefundResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.data)) {
    query['data'] = request.data;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelPackageRefund',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelPackageRefund(request: SentinelPackageRefundRequest): SentinelPackageRefundResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelPackageRefundWithOptions(request, runtime);
}

model SentinelParamRuleListByPageRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  model?: long(name='Model'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  resource?: string(name='Resource'),
  searchKey?: string(name='SearchKey'),
  tags?: string(name='Tags'),
}

model SentinelParamRuleListByPageResponseBody = {
  code?: string(name='Code'),
  data?: {
    datas?: [ 
      {
        appName?: string(name='appName'),
        burstCount?: int32(name='burstCount'),
        clusterFailFallback?: boolean(name='clusterFailFallback'),
        clusterFallbackThreshold?: int32(name='clusterFallbackThreshold'),
        clusterMode?: boolean(name='clusterMode'),
        clusterThresholdType?: int32(name='clusterThresholdType'),
        controlBehavior?: int32(name='controlBehavior'),
        count?: float(name='count'),
        durationInSec?: long(name='durationInSec'),
        enable?: boolean(name='enable'),
        estimatedMaxClusterQps?: float(name='estimatedMaxClusterQps'),
        fallbackObject?: string(name='fallbackObject'),
        grade?: int32(name='grade'),
        id?: long(name='id'),
        limitApp?: string(name='limitApp'),
        maxQueueingTimeMs?: int32(name='maxQueueingTimeMs'),
        model?: long(name='model'),
        namespace?: string(name='namespace'),
        paramFlowItemList?: [ 
          {
            classType?: string(name='classType'),
            clusterFallbackCount?: float(name='clusterFallbackCount'),
            count?: float(name='count'),
            object?: string(name='object'),
          }
        ](name='paramFlowItemList'),
        paramIdx?: int32(name='paramIdx'),
        resource?: string(name='resource'),
        sampleCount?: int32(name='sampleCount'),
        tags?: [ string ](name='tags'),
        userId?: string(name='userId'),
        windowIntervalMs?: int32(name='windowIntervalMs'),
      }
    ](name='Datas'),
    pageIndex?: long(name='PageIndex'),
    pageSize?: long(name='PageSize'),
    totalCount?: long(name='TotalCount'),
    totalPage?: long(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelParamRuleListByPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelParamRuleListByPageResponseBody(name='body'),
}

async function sentinelParamRuleListByPageWithOptions(request: SentinelParamRuleListByPageRequest, runtime: Util.RuntimeOptions): SentinelParamRuleListByPageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.model)) {
    query['Model'] = request.model;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.searchKey)) {
    query['SearchKey'] = request.searchKey;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelParamRuleListByPage',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelParamRuleListByPage(request: SentinelParamRuleListByPageRequest): SentinelParamRuleListByPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelParamRuleListByPageWithOptions(request, runtime);
}

model SentinelPayOrderCallbackRequest {
  data?: string(name='data'),
}

model SentinelPayOrderCallbackResponseBody = {
  code?: string(name='code'),
  data?: string(name='data'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  synchro?: string(name='synchro'),
}

model SentinelPayOrderCallbackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelPayOrderCallbackResponseBody(name='body'),
}

async function sentinelPayOrderCallbackWithOptions(request: SentinelPayOrderCallbackRequest, runtime: Util.RuntimeOptions): SentinelPayOrderCallbackResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.data)) {
    query['data'] = request.data;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelPayOrderCallback',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelPayOrderCallback(request: SentinelPayOrderCallbackRequest): SentinelPayOrderCallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelPayOrderCallbackWithOptions(request, runtime);
}

model SentinelProtectionModuleDeleteRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  fallbackId?: long(name='FallbackId'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelProtectionModuleDeleteResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  pageIndex?: long(name='PageIndex'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
  totalPage?: long(name='TotalPage'),
}

model SentinelProtectionModuleDeleteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelProtectionModuleDeleteResponseBody(name='body'),
}

async function sentinelProtectionModuleDeleteWithOptions(request: SentinelProtectionModuleDeleteRequest, runtime: Util.RuntimeOptions): SentinelProtectionModuleDeleteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.fallbackId)) {
    query['FallbackId'] = request.fallbackId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelProtectionModuleDelete',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelProtectionModuleDelete(request: SentinelProtectionModuleDeleteRequest): SentinelProtectionModuleDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelProtectionModuleDeleteWithOptions(request, runtime);
}

model SentinelProtectionModuleListAllByPageRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  model?: long(name='Model'),
  namespace?: string(name='Namespace'),
  pageIndex?: string(name='PageIndex'),
  pageSize?: string(name='PageSize'),
  resource?: string(name='Resource'),
  ruleType?: long(name='RuleType'),
  searchKey?: string(name='SearchKey'),
}

model SentinelProtectionModuleListAllByPageResponseBody = {
  code?: string(name='Code'),
  data?: {
    datas?: [ 
      {
        fallbackId?: long(name='fallbackId'),
        fallbackObject?: string(name='fallbackObject'),
        ruleId?: long(name='ruleId'),
        ruleObject?: string(name='ruleObject'),
        ruleType?: long(name='ruleType'),
      }
    ](name='Datas'),
    pageIndex?: long(name='PageIndex'),
    pageSize?: long(name='PageSize'),
    totalCount?: long(name='TotalCount'),
    totalPage?: long(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  pageIndex?: long(name='PageIndex'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
  totalPage?: long(name='TotalPage'),
}

model SentinelProtectionModuleListAllByPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelProtectionModuleListAllByPageResponseBody(name='body'),
}

async function sentinelProtectionModuleListAllByPageWithOptions(request: SentinelProtectionModuleListAllByPageRequest, runtime: Util.RuntimeOptions): SentinelProtectionModuleListAllByPageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.model)) {
    query['Model'] = request.model;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.ruleType)) {
    query['RuleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.searchKey)) {
    query['SearchKey'] = request.searchKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelProtectionModuleListAllByPage',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelProtectionModuleListAllByPage(request: SentinelProtectionModuleListAllByPageRequest): SentinelProtectionModuleListAllByPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelProtectionModuleListAllByPageWithOptions(request, runtime);
}

model SentinelProtectionModuleNewRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  apiType?: long(name='ApiType'),
  appName?: string(name='AppName'),
  fallbackId?: long(name='FallbackId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  ruleId?: long(name='RuleId'),
  ruleType?: long(name='RuleType'),
}

model SentinelProtectionModuleNewResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    fallbackId?: long(name='fallbackId'),
    id?: long(name='id'),
    namespace?: string(name='namespace'),
    resource?: string(name='resource'),
    ruleId?: long(name='ruleId'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelProtectionModuleNewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelProtectionModuleNewResponseBody(name='body'),
}

async function sentinelProtectionModuleNewWithOptions(request: SentinelProtectionModuleNewRequest, runtime: Util.RuntimeOptions): SentinelProtectionModuleNewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.apiType)) {
    query['ApiType'] = request.apiType;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.fallbackId)) {
    query['FallbackId'] = request.fallbackId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.ruleType)) {
    query['RuleType'] = request.ruleType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelProtectionModuleNew',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelProtectionModuleNew(request: SentinelProtectionModuleNewRequest): SentinelProtectionModuleNewResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelProtectionModuleNewWithOptions(request, runtime);
}

model SentinelProtectionModuleUpdateRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  fallbackId?: long(name='FallbackId'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelProtectionModuleUpdateResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    fallbackId?: long(name='fallbackId'),
    id?: long(name='id'),
    namespace?: string(name='namespace'),
    resource?: string(name='resource'),
    ruleId?: long(name='ruleId'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelProtectionModuleUpdateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelProtectionModuleUpdateResponseBody(name='body'),
}

async function sentinelProtectionModuleUpdateWithOptions(request: SentinelProtectionModuleUpdateRequest, runtime: Util.RuntimeOptions): SentinelProtectionModuleUpdateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.fallbackId)) {
    query['FallbackId'] = request.fallbackId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelProtectionModuleUpdate',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelProtectionModuleUpdate(request: SentinelProtectionModuleUpdateRequest): SentinelProtectionModuleUpdateResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelProtectionModuleUpdateWithOptions(request, runtime);
}

model SentinelQueryAppPriceLevelRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelQueryAppPriceLevelResponseBody = {
  code?: string(name='Code'),
  data?: {
    ahasAppName?: string(name='AhasAppName'),
    appName?: string(name='AppName'),
    appType?: int32(name='AppType'),
    currentLevel?: int32(name='CurrentLevel'),
    dirtyLevel?: int32(name='DirtyLevel'),
    id?: long(name='Id'),
    lastHealthPingTime?: long(name='LastHealthPingTime'),
    levelModifyTime?: long(name='LevelModifyTime'),
    namespace?: string(name='Namespace'),
    userId?: string(name='UserId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelQueryAppPriceLevelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelQueryAppPriceLevelResponseBody(name='body'),
}

async function sentinelQueryAppPriceLevelWithOptions(request: SentinelQueryAppPriceLevelRequest, runtime: Util.RuntimeOptions): SentinelQueryAppPriceLevelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelQueryAppPriceLevel',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelQueryAppPriceLevel(request: SentinelQueryAppPriceLevelRequest): SentinelQueryAppPriceLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelQueryAppPriceLevelWithOptions(request, runtime);
}

model SentinelResourceNameListByUserIdRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  authId?: string(name='AuthId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelResourceNameListByUserIdResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelResourceNameListByUserIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelResourceNameListByUserIdResponseBody(name='body'),
}

async function sentinelResourceNameListByUserIdWithOptions(request: SentinelResourceNameListByUserIdRequest, runtime: Util.RuntimeOptions): SentinelResourceNameListByUserIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.authId)) {
    query['AuthId'] = request.authId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelResourceNameListByUserId',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelResourceNameListByUserId(request: SentinelResourceNameListByUserIdRequest): SentinelResourceNameListByUserIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelResourceNameListByUserIdWithOptions(request, runtime);
}

model SentinelResourceTopNMacsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  ahasTimestamp?: long(name='AhasTimestamp'),
  appName?: string(name='AppName'),
  desc?: boolean(name='Desc'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  orderBy?: int32(name='OrderBy'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  resource?: string(name='Resource'),
  searchKey?: string(name='SearchKey'),
}

model SentinelResourceTopNMacsResponseBody = {
  code?: string(name='Code'),
  data?: {
    macMetrics?: [ 
      {
        blockedQps?: float(name='blockedQps'),
        deviceConfigurationId?: string(name='deviceConfigurationId'),
        deviceId?: string(name='deviceId'),
        exception?: float(name='exception'),
        hostname?: string(name='hostname'),
        parentIp?: string(name='parentIp'),
        passedQps?: float(name='passedQps'),
        pid?: int32(name='pid'),
        privateIp?: string(name='privateIp'),
        processConfigurationId?: string(name='processConfigurationId'),
        resource?: string(name='resource'),
        rt?: float(name='rt'),
        vpcId?: string(name='vpcId'),
      }
    ](name='macMetrics'),
    metrics?: [ 
      {
        favorite?: boolean(name='favorite'),
        hasRule?: boolean(name='hasRule'),
        resource?: string(name='resource'),
      }
    ](name='metrics'),
    pageIndex?: int32(name='pageIndex'),
    pageSize?: int32(name='pageSize'),
    totalCount?: int32(name='totalCount'),
    totalPage?: int32(name='totalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelResourceTopNMacsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelResourceTopNMacsResponseBody(name='body'),
}

async function sentinelResourceTopNMacsWithOptions(request: SentinelResourceTopNMacsRequest, runtime: Util.RuntimeOptions): SentinelResourceTopNMacsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.ahasTimestamp)) {
    query['AhasTimestamp'] = request.ahasTimestamp;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.desc)) {
    query['Desc'] = request.desc;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.searchKey)) {
    query['SearchKey'] = request.searchKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelResourceTopNMacs',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelResourceTopNMacs(request: SentinelResourceTopNMacsRequest): SentinelResourceTopNMacsResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelResourceTopNMacsWithOptions(request, runtime);
}

model SentinelResourceTopNMacsWithMetricsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  ahasTimestamp?: long(name='AhasTimestamp'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  orderBy?: int32(name='OrderBy'),
  pageSize?: int32(name='PageSize'),
  resource?: string(name='Resource'),
}

model SentinelResourceTopNMacsWithMetricsResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelResourceTopNMacsWithMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelResourceTopNMacsWithMetricsResponseBody(name='body'),
}

async function sentinelResourceTopNMacsWithMetricsWithOptions(request: SentinelResourceTopNMacsWithMetricsRequest, runtime: Util.RuntimeOptions): SentinelResourceTopNMacsWithMetricsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.ahasTimestamp)) {
    query['AhasTimestamp'] = request.ahasTimestamp;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelResourceTopNMacsWithMetrics',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelResourceTopNMacsWithMetrics(request: SentinelResourceTopNMacsWithMetricsRequest): SentinelResourceTopNMacsWithMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelResourceTopNMacsWithMetricsWithOptions(request, runtime);
}

model SentinelResourcesPercentageRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  endTime?: long(name='EndTime'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  orderBy?: int32(name='OrderBy'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  resourceType?: int32(name='ResourceType'),
  startTime?: long(name='StartTime'),
}

model SentinelResourcesPercentageResponseBody = {
  code?: string(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelResourcesPercentageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelResourcesPercentageResponseBody(name='body'),
}

async function sentinelResourcesPercentageWithOptions(request: SentinelResourcesPercentageRequest, runtime: Util.RuntimeOptions): SentinelResourcesPercentageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelResourcesPercentage',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelResourcesPercentage(request: SentinelResourcesPercentageRequest): SentinelResourcesPercentageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelResourcesPercentageWithOptions(request, runtime);
}

model SentinelSortMonitorDashboardItemsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  dashboardId?: long(name='DashboardId'),
  itemPosition?: string(name='ItemPosition'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelSortMonitorDashboardItemsResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelSortMonitorDashboardItemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelSortMonitorDashboardItemsResponseBody(name='body'),
}

async function sentinelSortMonitorDashboardItemsWithOptions(request: SentinelSortMonitorDashboardItemsRequest, runtime: Util.RuntimeOptions): SentinelSortMonitorDashboardItemsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.dashboardId)) {
    query['DashboardId'] = request.dashboardId;
  }
  if (!Util.isUnset(request.itemPosition)) {
    query['ItemPosition'] = request.itemPosition;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelSortMonitorDashboardItems',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelSortMonitorDashboardItems(request: SentinelSortMonitorDashboardItemsRequest): SentinelSortMonitorDashboardItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelSortMonitorDashboardItemsWithOptions(request, runtime);
}

model SentinelSystemRuleDeleteRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelSystemRuleDeleteResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelSystemRuleDeleteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelSystemRuleDeleteResponseBody(name='body'),
}

async function sentinelSystemRuleDeleteWithOptions(request: SentinelSystemRuleDeleteRequest, runtime: Util.RuntimeOptions): SentinelSystemRuleDeleteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelSystemRuleDelete',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelSystemRuleDelete(request: SentinelSystemRuleDeleteRequest): SentinelSystemRuleDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelSystemRuleDeleteWithOptions(request, runtime);
}

model SentinelSystemRuleEditRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  count?: float(name='Count'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelSystemRuleEditResponseBody = {
  code?: string(name='Code'),
  data?: {
    count?: float(name='count'),
    enable?: boolean(name='enable'),
    grade?: int32(name='grade'),
    id?: long(name='id'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelSystemRuleEditResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelSystemRuleEditResponseBody(name='body'),
}

async function sentinelSystemRuleEditWithOptions(request: SentinelSystemRuleEditRequest, runtime: Util.RuntimeOptions): SentinelSystemRuleEditResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.count)) {
    query['Count'] = request.count;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelSystemRuleEdit',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelSystemRuleEdit(request: SentinelSystemRuleEditRequest): SentinelSystemRuleEditResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelSystemRuleEditWithOptions(request, runtime);
}

model SentinelSystemRuleListAllRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelSystemRuleListAllResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      count?: float(name='count'),
      enable?: boolean(name='enable'),
      fallbackObject?: string(name='fallbackObject'),
      grade?: int32(name='grade'),
      id?: long(name='id'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelSystemRuleListAllResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelSystemRuleListAllResponseBody(name='body'),
}

async function sentinelSystemRuleListAllWithOptions(request: SentinelSystemRuleListAllRequest, runtime: Util.RuntimeOptions): SentinelSystemRuleListAllResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelSystemRuleListAll',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelSystemRuleListAll(request: SentinelSystemRuleListAllRequest): SentinelSystemRuleListAllResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelSystemRuleListAllWithOptions(request, runtime);
}

model SentinelSystemRuleNewRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  count?: float(name='Count'),
  enable?: boolean(name='Enable'),
  grade?: int32(name='Grade'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelSystemRuleNewResponseBody = {
  code?: string(name='Code'),
  data?: {
    count?: float(name='count'),
    enable?: boolean(name='enable'),
    grade?: int32(name='grade'),
    id?: long(name='id'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelSystemRuleNewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelSystemRuleNewResponseBody(name='body'),
}

async function sentinelSystemRuleNewWithOptions(request: SentinelSystemRuleNewRequest, runtime: Util.RuntimeOptions): SentinelSystemRuleNewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.count)) {
    query['Count'] = request.count;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.grade)) {
    query['Grade'] = request.grade;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelSystemRuleNew',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelSystemRuleNew(request: SentinelSystemRuleNewRequest): SentinelSystemRuleNewResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelSystemRuleNewWithOptions(request, runtime);
}

model SentinelSystemRuleOffRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelSystemRuleOffResponseBody = {
  code?: string(name='Code'),
  data?: {
    count?: float(name='count'),
    enable?: boolean(name='enable'),
    grade?: int32(name='grade'),
    id?: long(name='id'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelSystemRuleOffResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelSystemRuleOffResponseBody(name='body'),
}

async function sentinelSystemRuleOffWithOptions(request: SentinelSystemRuleOffRequest, runtime: Util.RuntimeOptions): SentinelSystemRuleOffResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelSystemRuleOff',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelSystemRuleOff(request: SentinelSystemRuleOffRequest): SentinelSystemRuleOffResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelSystemRuleOffWithOptions(request, runtime);
}

model SentinelSystemRuleOffBatchRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  ids?: string(name='Ids'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelSystemRuleOffBatchResponseBody = {
  code?: string(name='Code'),
  data?: int32(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelSystemRuleOffBatchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelSystemRuleOffBatchResponseBody(name='body'),
}

async function sentinelSystemRuleOffBatchWithOptions(request: SentinelSystemRuleOffBatchRequest, runtime: Util.RuntimeOptions): SentinelSystemRuleOffBatchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelSystemRuleOffBatch',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelSystemRuleOffBatch(request: SentinelSystemRuleOffBatchRequest): SentinelSystemRuleOffBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelSystemRuleOffBatchWithOptions(request, runtime);
}

model SentinelSystemRuleOnRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelSystemRuleOnResponseBody = {
  code?: string(name='Code'),
  data?: {
    count?: float(name='count'),
    enable?: boolean(name='enable'),
    grade?: int32(name='grade'),
    id?: long(name='id'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelSystemRuleOnResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelSystemRuleOnResponseBody(name='body'),
}

async function sentinelSystemRuleOnWithOptions(request: SentinelSystemRuleOnRequest, runtime: Util.RuntimeOptions): SentinelSystemRuleOnResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelSystemRuleOn',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelSystemRuleOn(request: SentinelSystemRuleOnRequest): SentinelSystemRuleOnResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelSystemRuleOnWithOptions(request, runtime);
}

model SentinelSystemRuleOnBatchRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  ids?: string(name='Ids'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SentinelSystemRuleOnBatchResponseBody = {
  code?: string(name='Code'),
  data?: int32(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelSystemRuleOnBatchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelSystemRuleOnBatchResponseBody(name='body'),
}

async function sentinelSystemRuleOnBatchWithOptions(request: SentinelSystemRuleOnBatchRequest, runtime: Util.RuntimeOptions): SentinelSystemRuleOnBatchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelSystemRuleOnBatch',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelSystemRuleOnBatch(request: SentinelSystemRuleOnBatchRequest): SentinelSystemRuleOnBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelSystemRuleOnBatchWithOptions(request, runtime);
}

model SentinelUpdateAdapterSettingOfAppRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  webFallbackMode?: int32(name='WebFallbackMode'),
  webRedirectUrl?: string(name='WebRedirectUrl'),
  webRespContentType?: int32(name='WebRespContentType'),
  webRespMessage?: string(name='WebRespMessage'),
  webRespStatusCode?: int32(name='WebRespStatusCode'),
  webUrlPrefixCleanItems?: string(name='WebUrlPrefixCleanItems'),
}

model SentinelUpdateAdapterSettingOfAppResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    id?: long(name='id'),
    namespace?: string(name='namespace'),
    userId?: string(name='userId'),
    webFallbackMode?: int32(name='webFallbackMode'),
    webRedirectUrl?: string(name='webRedirectUrl'),
    webRespContentType?: int32(name='webRespContentType'),
    webRespMessage?: string(name='webRespMessage'),
    webRespStatusCode?: int32(name='webRespStatusCode'),
    webUrlPrefixCleanItems?: string(name='webUrlPrefixCleanItems'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelUpdateAdapterSettingOfAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelUpdateAdapterSettingOfAppResponseBody(name='body'),
}

async function sentinelUpdateAdapterSettingOfAppWithOptions(request: SentinelUpdateAdapterSettingOfAppRequest, runtime: Util.RuntimeOptions): SentinelUpdateAdapterSettingOfAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.webFallbackMode)) {
    query['WebFallbackMode'] = request.webFallbackMode;
  }
  if (!Util.isUnset(request.webRedirectUrl)) {
    query['WebRedirectUrl'] = request.webRedirectUrl;
  }
  if (!Util.isUnset(request.webRespContentType)) {
    query['WebRespContentType'] = request.webRespContentType;
  }
  if (!Util.isUnset(request.webRespMessage)) {
    query['WebRespMessage'] = request.webRespMessage;
  }
  if (!Util.isUnset(request.webRespStatusCode)) {
    query['WebRespStatusCode'] = request.webRespStatusCode;
  }
  if (!Util.isUnset(request.webUrlPrefixCleanItems)) {
    query['WebUrlPrefixCleanItems'] = request.webUrlPrefixCleanItems;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelUpdateAdapterSettingOfApp',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelUpdateAdapterSettingOfApp(request: SentinelUpdateAdapterSettingOfAppRequest): SentinelUpdateAdapterSettingOfAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelUpdateAdapterSettingOfAppWithOptions(request, runtime);
}

model SentinelUpdateGeneralSettingOfAppRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  maxContextAmount?: int32(name='MaxContextAmount'),
  maxOriginAmount?: int32(name='MaxOriginAmount'),
  maxResourceAmount?: int32(name='MaxResourceAmount'),
  namespace?: string(name='Namespace'),
  statisticMaxRt?: int32(name='StatisticMaxRt'),
}

model SentinelUpdateGeneralSettingOfAppResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    id?: long(name='id'),
    maxContextAmount?: int32(name='maxContextAmount'),
    maxOriginAmount?: int32(name='maxOriginAmount'),
    maxResourceAmount?: int32(name='maxResourceAmount'),
    namespace?: string(name='namespace'),
    statisticMaxRt?: int32(name='statisticMaxRt'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelUpdateGeneralSettingOfAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelUpdateGeneralSettingOfAppResponseBody(name='body'),
}

async function sentinelUpdateGeneralSettingOfAppWithOptions(request: SentinelUpdateGeneralSettingOfAppRequest, runtime: Util.RuntimeOptions): SentinelUpdateGeneralSettingOfAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.maxContextAmount)) {
    query['MaxContextAmount'] = request.maxContextAmount;
  }
  if (!Util.isUnset(request.maxOriginAmount)) {
    query['MaxOriginAmount'] = request.maxOriginAmount;
  }
  if (!Util.isUnset(request.maxResourceAmount)) {
    query['MaxResourceAmount'] = request.maxResourceAmount;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.statisticMaxRt)) {
    query['StatisticMaxRt'] = request.statisticMaxRt;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelUpdateGeneralSettingOfApp',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelUpdateGeneralSettingOfApp(request: SentinelUpdateGeneralSettingOfAppRequest): SentinelUpdateGeneralSettingOfAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelUpdateGeneralSettingOfAppWithOptions(request, runtime);
}

model SentinelUpdateMultiModelRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  modelId?: long(name='ModelId'),
  modelName?: string(name='ModelName'),
  namespace?: string(name='Namespace'),
}

model SentinelUpdateMultiModelResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelUpdateMultiModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelUpdateMultiModelResponseBody(name='body'),
}

async function sentinelUpdateMultiModelWithOptions(request: SentinelUpdateMultiModelRequest, runtime: Util.RuntimeOptions): SentinelUpdateMultiModelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.modelId)) {
    query['ModelId'] = request.modelId;
  }
  if (!Util.isUnset(request.modelName)) {
    query['ModelName'] = request.modelName;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelUpdateMultiModel',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelUpdateMultiModel(request: SentinelUpdateMultiModelRequest): SentinelUpdateMultiModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelUpdateMultiModelWithOptions(request, runtime);
}

model SentinelWebFlowRuleDeleteRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  id?: long(name='Id'),
  namespace?: string(name='Namespace'),
}

model SentinelWebFlowRuleDeleteResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelWebFlowRuleDeleteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelWebFlowRuleDeleteResponseBody(name='body'),
}

async function sentinelWebFlowRuleDeleteWithOptions(request: SentinelWebFlowRuleDeleteRequest, runtime: Util.RuntimeOptions): SentinelWebFlowRuleDeleteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelWebFlowRuleDelete',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelWebFlowRuleDelete(request: SentinelWebFlowRuleDeleteRequest): SentinelWebFlowRuleDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelWebFlowRuleDeleteWithOptions(request, runtime);
}

model SentinelWebFlowRuleEditRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  burst?: int32(name='Burst'),
  controlBehavior?: int32(name='ControlBehavior'),
  count?: float(name='Count'),
  enable?: boolean(name='Enable'),
  fieldName?: string(name='FieldName'),
  grade?: int32(name='Grade'),
  hasParam?: boolean(name='HasParam'),
  id?: long(name='Id'),
  intervalSec?: long(name='IntervalSec'),
  lang?: string(name='Lang'),
  matchStrategy?: int32(name='MatchStrategy'),
  maxQueueingTimeoutMs?: int32(name='MaxQueueingTimeoutMs'),
  namespace?: string(name='Namespace'),
  parseStrategy?: int32(name='ParseStrategy'),
  pattern?: string(name='Pattern'),
  resource?: string(name='Resource'),
  resourceMode?: int32(name='ResourceMode'),
}

model SentinelWebFlowRuleEditResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    burst?: int32(name='burst'),
    controlBehavior?: int32(name='controlBehavior'),
    count?: float(name='count'),
    enable?: boolean(name='enable'),
    grade?: int32(name='grade'),
    hasParam?: boolean(name='hasParam'),
    id?: long(name='id'),
    intervalSec?: long(name='intervalSec'),
    maxQueueingTimeoutMs?: int32(name='maxQueueingTimeoutMs'),
    namespace?: string(name='namespace'),
    paramItem?: map[string]any(name='paramItem'),
    resource?: string(name='resource'),
    resourceMode?: int32(name='resourceMode'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelWebFlowRuleEditResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelWebFlowRuleEditResponseBody(name='body'),
}

async function sentinelWebFlowRuleEditWithOptions(request: SentinelWebFlowRuleEditRequest, runtime: Util.RuntimeOptions): SentinelWebFlowRuleEditResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.burst)) {
    query['Burst'] = request.burst;
  }
  if (!Util.isUnset(request.controlBehavior)) {
    query['ControlBehavior'] = request.controlBehavior;
  }
  if (!Util.isUnset(request.count)) {
    query['Count'] = request.count;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.fieldName)) {
    query['FieldName'] = request.fieldName;
  }
  if (!Util.isUnset(request.grade)) {
    query['Grade'] = request.grade;
  }
  if (!Util.isUnset(request.hasParam)) {
    query['HasParam'] = request.hasParam;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.intervalSec)) {
    query['IntervalSec'] = request.intervalSec;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.matchStrategy)) {
    query['MatchStrategy'] = request.matchStrategy;
  }
  if (!Util.isUnset(request.maxQueueingTimeoutMs)) {
    query['MaxQueueingTimeoutMs'] = request.maxQueueingTimeoutMs;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.parseStrategy)) {
    query['ParseStrategy'] = request.parseStrategy;
  }
  if (!Util.isUnset(request.pattern)) {
    query['Pattern'] = request.pattern;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.resourceMode)) {
    query['ResourceMode'] = request.resourceMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelWebFlowRuleEdit',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelWebFlowRuleEdit(request: SentinelWebFlowRuleEditRequest): SentinelWebFlowRuleEditResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelWebFlowRuleEditWithOptions(request, runtime);
}

model SentinelWebFlowRuleListAllRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  model?: long(name='Model'),
  namespace?: string(name='Namespace'),
}

model SentinelWebFlowRuleListAllResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appName?: string(name='appName'),
      count?: float(name='count'),
      createTimestamp?: long(name='createTimestamp'),
      enable?: boolean(name='enable'),
      grade?: int32(name='grade'),
      halfOpenBaseAmountPerStep?: int32(name='halfOpenBaseAmountPerStep'),
      halfOpenRecoveryStepNum?: int32(name='halfOpenRecoveryStepNum'),
      id?: long(name='id'),
      limitApp?: string(name='limitApp'),
      minRequestAmount?: int32(name='minRequestAmount'),
      modifiedTimestamp?: long(name='modifiedTimestamp'),
      namespace?: string(name='namespace'),
      resource?: string(name='resource'),
      slowRatioThreshold?: float(name='slowRatioThreshold'),
      statIntervalMs?: int32(name='statIntervalMs'),
      timeWindow?: int32(name='timeWindow'),
      userId?: string(name='userId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelWebFlowRuleListAllResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelWebFlowRuleListAllResponseBody(name='body'),
}

async function sentinelWebFlowRuleListAllWithOptions(request: SentinelWebFlowRuleListAllRequest, runtime: Util.RuntimeOptions): SentinelWebFlowRuleListAllResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.model)) {
    query['Model'] = request.model;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelWebFlowRuleListAll',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelWebFlowRuleListAll(request: SentinelWebFlowRuleListAllRequest): SentinelWebFlowRuleListAllResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelWebFlowRuleListAllWithOptions(request, runtime);
}

model SentinelWebFlowRuleListByPageRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  model?: long(name='Model'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  resource?: string(name='Resource'),
  searchKey?: string(name='SearchKey'),
  tags?: string(name='Tags'),
}

model SentinelWebFlowRuleListByPageResponseBody = {
  code?: string(name='Code'),
  data?: {
    datas?: [ 
      {
        appName?: string(name='appName'),
        burst?: int32(name='burst'),
        controlBehavior?: int32(name='controlBehavior'),
        count?: float(name='count'),
        enable?: boolean(name='enable'),
        fallbackObject?: string(name='fallbackObject'),
        grade?: int32(name='grade'),
        hasParam?: boolean(name='hasParam'),
        id?: long(name='id'),
        intervalSec?: long(name='intervalSec'),
        maxQueueingTimeoutMs?: int32(name='maxQueueingTimeoutMs'),
        model?: long(name='model'),
        namespace?: string(name='namespace'),
        paramItem?: map[string]any(name='paramItem'),
        resource?: string(name='resource'),
        resourceMode?: int32(name='resourceMode'),
        statIntervalMs?: int32(name='statIntervalMs'),
        tags?: [ string ](name='tags'),
        timeWindow?: int32(name='timeWindow'),
        userId?: string(name='userId'),
      }
    ](name='Datas'),
    pageIndex?: long(name='PageIndex'),
    pageSize?: long(name='PageSize'),
    totalCount?: long(name='TotalCount'),
    totalPage?: long(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelWebFlowRuleListByPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelWebFlowRuleListByPageResponseBody(name='body'),
}

async function sentinelWebFlowRuleListByPageWithOptions(request: SentinelWebFlowRuleListByPageRequest, runtime: Util.RuntimeOptions): SentinelWebFlowRuleListByPageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.model)) {
    query['Model'] = request.model;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.searchKey)) {
    query['SearchKey'] = request.searchKey;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelWebFlowRuleListByPage',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelWebFlowRuleListByPage(request: SentinelWebFlowRuleListByPageRequest): SentinelWebFlowRuleListByPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelWebFlowRuleListByPageWithOptions(request, runtime);
}

model SentinelWebFlowRuleListRulesOfResourceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
}

model SentinelWebFlowRuleListRulesOfResourceResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appName?: string(name='appName'),
      count?: float(name='count'),
      createTimestamp?: long(name='createTimestamp'),
      enable?: boolean(name='enable'),
      grade?: int32(name='grade'),
      halfOpenBaseAmountPerStep?: int32(name='halfOpenBaseAmountPerStep'),
      halfOpenRecoveryStepNum?: int32(name='halfOpenRecoveryStepNum'),
      id?: long(name='id'),
      limitApp?: string(name='limitApp'),
      minRequestAmount?: int32(name='minRequestAmount'),
      modifiedTimestamp?: long(name='modifiedTimestamp'),
      namespace?: string(name='namespace'),
      resource?: string(name='resource'),
      slowRatioThreshold?: float(name='slowRatioThreshold'),
      statIntervalMs?: int32(name='statIntervalMs'),
      timeWindow?: int32(name='timeWindow'),
      userId?: string(name='userId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelWebFlowRuleListRulesOfResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelWebFlowRuleListRulesOfResourceResponseBody(name='body'),
}

async function sentinelWebFlowRuleListRulesOfResourceWithOptions(request: SentinelWebFlowRuleListRulesOfResourceRequest, runtime: Util.RuntimeOptions): SentinelWebFlowRuleListRulesOfResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelWebFlowRuleListRulesOfResource',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelWebFlowRuleListRulesOfResource(request: SentinelWebFlowRuleListRulesOfResourceRequest): SentinelWebFlowRuleListRulesOfResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelWebFlowRuleListRulesOfResourceWithOptions(request, runtime);
}

model SentinelWebFlowRuleNewRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  burst?: int32(name='Burst'),
  controlBehavior?: int32(name='ControlBehavior'),
  count?: float(name='Count'),
  enable?: boolean(name='Enable'),
  fieldName?: string(name='FieldName'),
  grade?: int32(name='Grade'),
  hasParam?: boolean(name='HasParam'),
  intervalSec?: long(name='IntervalSec'),
  lang?: string(name='Lang'),
  matchStrategy?: int32(name='MatchStrategy'),
  maxQueueingTimeoutMs?: int32(name='MaxQueueingTimeoutMs'),
  namespace?: string(name='Namespace'),
  parseStrategy?: int32(name='ParseStrategy'),
  pattern?: string(name='Pattern'),
  resource?: string(name='Resource'),
  resourceMode?: int32(name='ResourceMode'),
}

model SentinelWebFlowRuleNewResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    burst?: int32(name='burst'),
    controlBehavior?: int32(name='controlBehavior'),
    count?: float(name='count'),
    enable?: boolean(name='enable'),
    grade?: int32(name='grade'),
    hasParam?: boolean(name='hasParam'),
    id?: long(name='id'),
    intervalSec?: long(name='intervalSec'),
    maxQueueingTimeoutMs?: int32(name='maxQueueingTimeoutMs'),
    namespace?: string(name='namespace'),
    paramItem?: map[string]any(name='paramItem'),
    resource?: string(name='resource'),
    resourceMode?: int32(name='resourceMode'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelWebFlowRuleNewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelWebFlowRuleNewResponseBody(name='body'),
}

async function sentinelWebFlowRuleNewWithOptions(request: SentinelWebFlowRuleNewRequest, runtime: Util.RuntimeOptions): SentinelWebFlowRuleNewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.burst)) {
    query['Burst'] = request.burst;
  }
  if (!Util.isUnset(request.controlBehavior)) {
    query['ControlBehavior'] = request.controlBehavior;
  }
  if (!Util.isUnset(request.count)) {
    query['Count'] = request.count;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.fieldName)) {
    query['FieldName'] = request.fieldName;
  }
  if (!Util.isUnset(request.grade)) {
    query['Grade'] = request.grade;
  }
  if (!Util.isUnset(request.hasParam)) {
    query['HasParam'] = request.hasParam;
  }
  if (!Util.isUnset(request.intervalSec)) {
    query['IntervalSec'] = request.intervalSec;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.matchStrategy)) {
    query['MatchStrategy'] = request.matchStrategy;
  }
  if (!Util.isUnset(request.maxQueueingTimeoutMs)) {
    query['MaxQueueingTimeoutMs'] = request.maxQueueingTimeoutMs;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.parseStrategy)) {
    query['ParseStrategy'] = request.parseStrategy;
  }
  if (!Util.isUnset(request.pattern)) {
    query['Pattern'] = request.pattern;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.resourceMode)) {
    query['ResourceMode'] = request.resourceMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelWebFlowRuleNew',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelWebFlowRuleNew(request: SentinelWebFlowRuleNewRequest): SentinelWebFlowRuleNewResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelWebFlowRuleNewWithOptions(request, runtime);
}

model SentinelWebFlowRuleOffRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  id?: long(name='Id'),
  namespace?: string(name='Namespace'),
}

model SentinelWebFlowRuleOffResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    count?: float(name='count'),
    createTimestamp?: long(name='createTimestamp'),
    enable?: boolean(name='enable'),
    grade?: int32(name='grade'),
    id?: long(name='id'),
    limitApp?: string(name='limitApp'),
    modifiedTimestamp?: long(name='modifiedTimestamp'),
    namespace?: string(name='namespace'),
    resource?: string(name='resource'),
    timeWindow?: int32(name='timeWindow'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelWebFlowRuleOffResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelWebFlowRuleOffResponseBody(name='body'),
}

async function sentinelWebFlowRuleOffWithOptions(request: SentinelWebFlowRuleOffRequest, runtime: Util.RuntimeOptions): SentinelWebFlowRuleOffResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelWebFlowRuleOff',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelWebFlowRuleOff(request: SentinelWebFlowRuleOffRequest): SentinelWebFlowRuleOffResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelWebFlowRuleOffWithOptions(request, runtime);
}

model SentinelWebFlowRuleOffBatchRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  ids?: string(name='Ids'),
  namespace?: string(name='Namespace'),
}

model SentinelWebFlowRuleOffBatchResponseBody = {
  code?: string(name='Code'),
  data?: int32(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelWebFlowRuleOffBatchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelWebFlowRuleOffBatchResponseBody(name='body'),
}

async function sentinelWebFlowRuleOffBatchWithOptions(request: SentinelWebFlowRuleOffBatchRequest, runtime: Util.RuntimeOptions): SentinelWebFlowRuleOffBatchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelWebFlowRuleOffBatch',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelWebFlowRuleOffBatch(request: SentinelWebFlowRuleOffBatchRequest): SentinelWebFlowRuleOffBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelWebFlowRuleOffBatchWithOptions(request, runtime);
}

model SentinelWebFlowRuleOnRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  id?: long(name='Id'),
  namespace?: string(name='Namespace'),
}

model SentinelWebFlowRuleOnResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='appName'),
    count?: float(name='count'),
    createTimestamp?: long(name='createTimestamp'),
    enable?: boolean(name='enable'),
    grade?: int32(name='grade'),
    id?: long(name='id'),
    limitApp?: string(name='limitApp'),
    modifiedTimestamp?: long(name='modifiedTimestamp'),
    namespace?: string(name='namespace'),
    resource?: string(name='resource'),
    timeWindow?: int32(name='timeWindow'),
    userId?: string(name='userId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelWebFlowRuleOnResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelWebFlowRuleOnResponseBody(name='body'),
}

async function sentinelWebFlowRuleOnWithOptions(request: SentinelWebFlowRuleOnRequest, runtime: Util.RuntimeOptions): SentinelWebFlowRuleOnResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelWebFlowRuleOn',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelWebFlowRuleOn(request: SentinelWebFlowRuleOnRequest): SentinelWebFlowRuleOnResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelWebFlowRuleOnWithOptions(request, runtime);
}

model SentinelWebFlowRuleOnBatchRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  ids?: string(name='Ids'),
  namespace?: string(name='Namespace'),
}

model SentinelWebFlowRuleOnBatchResponseBody = {
  code?: string(name='Code'),
  data?: int32(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelWebFlowRuleOnBatchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelWebFlowRuleOnBatchResponseBody(name='body'),
}

async function sentinelWebFlowRuleOnBatchWithOptions(request: SentinelWebFlowRuleOnBatchRequest, runtime: Util.RuntimeOptions): SentinelWebFlowRuleOnBatchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelWebFlowRuleOnBatch',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelWebFlowRuleOnBatch(request: SentinelWebFlowRuleOnBatchRequest): SentinelWebFlowRuleOnBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelWebFlowRuleOnBatchWithOptions(request, runtime);
}

model SentinelWebFlowRuleOverviewRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  burst?: int32(name='Burst'),
  controlBehavior?: int32(name='ControlBehavior'),
  count?: float(name='Count'),
  enable?: boolean(name='Enable'),
  fallbackId?: long(name='FallbackId'),
  fieldName?: string(name='FieldName'),
  grade?: int32(name='Grade'),
  hasParam?: boolean(name='HasParam'),
  intervalSec?: long(name='IntervalSec'),
  lang?: string(name='Lang'),
  matchStrategy?: int32(name='MatchStrategy'),
  maxQueueingTimeoutMs?: int32(name='MaxQueueingTimeoutMs'),
  namespace?: string(name='Namespace'),
  parseStrategy?: int32(name='ParseStrategy'),
  pattern?: string(name='Pattern'),
  resource?: string(name='Resource'),
  resourceMode?: int32(name='ResourceMode'),
}

model SentinelWebFlowRuleOverviewResponseBody = {
  code?: string(name='Code'),
  data?: [ bytes ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SentinelWebFlowRuleOverviewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SentinelWebFlowRuleOverviewResponseBody(name='body'),
}

async function sentinelWebFlowRuleOverviewWithOptions(request: SentinelWebFlowRuleOverviewRequest, runtime: Util.RuntimeOptions): SentinelWebFlowRuleOverviewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.burst)) {
    query['Burst'] = request.burst;
  }
  if (!Util.isUnset(request.controlBehavior)) {
    query['ControlBehavior'] = request.controlBehavior;
  }
  if (!Util.isUnset(request.count)) {
    query['Count'] = request.count;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.fallbackId)) {
    query['FallbackId'] = request.fallbackId;
  }
  if (!Util.isUnset(request.fieldName)) {
    query['FieldName'] = request.fieldName;
  }
  if (!Util.isUnset(request.grade)) {
    query['Grade'] = request.grade;
  }
  if (!Util.isUnset(request.hasParam)) {
    query['HasParam'] = request.hasParam;
  }
  if (!Util.isUnset(request.intervalSec)) {
    query['IntervalSec'] = request.intervalSec;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.matchStrategy)) {
    query['MatchStrategy'] = request.matchStrategy;
  }
  if (!Util.isUnset(request.maxQueueingTimeoutMs)) {
    query['MaxQueueingTimeoutMs'] = request.maxQueueingTimeoutMs;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.parseStrategy)) {
    query['ParseStrategy'] = request.parseStrategy;
  }
  if (!Util.isUnset(request.pattern)) {
    query['Pattern'] = request.pattern;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.resourceMode)) {
    query['ResourceMode'] = request.resourceMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SentinelWebFlowRuleOverview',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sentinelWebFlowRuleOverview(request: SentinelWebFlowRuleOverviewRequest): SentinelWebFlowRuleOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return sentinelWebFlowRuleOverviewWithOptions(request, runtime);
}

model StartPluginRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  configurationId?: string(name='ConfigurationId'),
  namespace?: string(name='Namespace'),
  pluginType?: string(name='PluginType'),
}

model StartPluginResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StartPluginResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartPluginResponseBody(name='body'),
}

async function startPluginWithOptions(request: StartPluginRequest, runtime: Util.RuntimeOptions): StartPluginResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.configurationId)) {
    query['ConfigurationId'] = request.configurationId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pluginType)) {
    query['PluginType'] = request.pluginType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartPlugin',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startPlugin(request: StartPluginRequest): StartPluginResponse {
  var runtime = new Util.RuntimeOptions{};
  return startPluginWithOptions(request, runtime);
}

model StartQuickExperimentRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model StartQuickExperimentResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StartQuickExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartQuickExperimentResponseBody(name='body'),
}

async function startQuickExperimentWithOptions(request: StartQuickExperimentRequest, runtime: Util.RuntimeOptions): StartQuickExperimentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartQuickExperiment',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startQuickExperiment(request: StartQuickExperimentRequest): StartQuickExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  return startQuickExperimentWithOptions(request, runtime);
}

model StopAllExperimentTasksRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model StopAllExperimentTasksResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StopAllExperimentTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopAllExperimentTasksResponseBody(name='body'),
}

async function stopAllExperimentTasksWithOptions(request: StopAllExperimentTasksRequest, runtime: Util.RuntimeOptions): StopAllExperimentTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopAllExperimentTasks',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopAllExperimentTasks(request: StopAllExperimentTasksRequest): StopAllExperimentTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopAllExperimentTasksWithOptions(request, runtime);
}

model StopExperimentTaskRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model StopExperimentTaskResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StopExperimentTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopExperimentTaskResponseBody(name='body'),
}

async function stopExperimentTaskWithOptions(request: StopExperimentTaskRequest, runtime: Util.RuntimeOptions): StopExperimentTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopExperimentTask',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopExperimentTask(request: StopExperimentTaskRequest): StopExperimentTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopExperimentTaskWithOptions(request, runtime);
}

model StopExperimentsByApplicationRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model StopExperimentsByApplicationResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StopExperimentsByApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopExperimentsByApplicationResponseBody(name='body'),
}

async function stopExperimentsByApplicationWithOptions(request: StopExperimentsByApplicationRequest, runtime: Util.RuntimeOptions): StopExperimentsByApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopExperimentsByApplication',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopExperimentsByApplication(request: StopExperimentsByApplicationRequest): StopExperimentsByApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopExperimentsByApplicationWithOptions(request, runtime);
}

model StopPluginRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  configurationId?: string(name='ConfigurationId'),
  namespace?: string(name='Namespace'),
  pluginType?: string(name='PluginType'),
}

model StopPluginResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StopPluginResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopPluginResponseBody(name='body'),
}

async function stopPluginWithOptions(request: StopPluginRequest, runtime: Util.RuntimeOptions): StopPluginResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.configurationId)) {
    query['ConfigurationId'] = request.configurationId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pluginType)) {
    query['PluginType'] = request.pluginType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopPlugin',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopPlugin(request: StopPluginRequest): StopPluginResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopPluginWithOptions(request, runtime);
}

model SubmitExperimentTaskFeedbackRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SubmitExperimentTaskFeedbackResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitExperimentTaskFeedbackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitExperimentTaskFeedbackResponseBody(name='body'),
}

async function submitExperimentTaskFeedbackWithOptions(request: SubmitExperimentTaskFeedbackRequest, runtime: Util.RuntimeOptions): SubmitExperimentTaskFeedbackResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitExperimentTaskFeedback',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitExperimentTaskFeedback(request: SubmitExperimentTaskFeedbackRequest): SubmitExperimentTaskFeedbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitExperimentTaskFeedbackWithOptions(request, runtime);
}

model SwitchFunctionAuthorizedStateRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SwitchFunctionAuthorizedStateResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SwitchFunctionAuthorizedStateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SwitchFunctionAuthorizedStateResponseBody(name='body'),
}

async function switchFunctionAuthorizedStateWithOptions(request: SwitchFunctionAuthorizedStateRequest, runtime: Util.RuntimeOptions): SwitchFunctionAuthorizedStateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SwitchFunctionAuthorizedState',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function switchFunctionAuthorizedState(request: SwitchFunctionAuthorizedStateRequest): SwitchFunctionAuthorizedStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchFunctionAuthorizedStateWithOptions(request, runtime);
}

model SyncExperimentScopeTasksRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model SyncExperimentScopeTasksResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SyncExperimentScopeTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SyncExperimentScopeTasksResponseBody(name='body'),
}

async function syncExperimentScopeTasksWithOptions(request: SyncExperimentScopeTasksRequest, runtime: Util.RuntimeOptions): SyncExperimentScopeTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SyncExperimentScopeTasks',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function syncExperimentScopeTasks(request: SyncExperimentScopeTasksRequest): SyncExperimentScopeTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncExperimentScopeTasksWithOptions(request, runtime);
}

model TerminatePublishOrderRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  publishOrderId?: long(name='PublishOrderId'),
}

model TerminatePublishOrderResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model TerminatePublishOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TerminatePublishOrderResponseBody(name='body'),
}

async function terminatePublishOrderWithOptions(request: TerminatePublishOrderRequest, runtime: Util.RuntimeOptions): TerminatePublishOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.publishOrderId)) {
    query['PublishOrderId'] = request.publishOrderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TerminatePublishOrder',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function terminatePublishOrder(request: TerminatePublishOrderRequest): TerminatePublishOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return terminatePublishOrderWithOptions(request, runtime);
}

model TestBlockFallbackDefinitionBehaviorRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  fallbackBehavior?: string(name='FallbackBehavior'),
  fallbackMode?: string(name='FallbackMode'),
  lang?: string(name='Lang'),
  method?: string(name='Method'),
  namespace?: string(name='Namespace'),
}

model TestBlockFallbackDefinitionBehaviorResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model TestBlockFallbackDefinitionBehaviorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TestBlockFallbackDefinitionBehaviorResponseBody(name='body'),
}

async function testBlockFallbackDefinitionBehaviorWithOptions(request: TestBlockFallbackDefinitionBehaviorRequest, runtime: Util.RuntimeOptions): TestBlockFallbackDefinitionBehaviorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.fallbackBehavior)) {
    query['FallbackBehavior'] = request.fallbackBehavior;
  }
  if (!Util.isUnset(request.fallbackMode)) {
    query['FallbackMode'] = request.fallbackMode;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.method)) {
    query['Method'] = request.method;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TestBlockFallbackDefinitionBehavior',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function testBlockFallbackDefinitionBehavior(request: TestBlockFallbackDefinitionBehaviorRequest): TestBlockFallbackDefinitionBehaviorResponse {
  var runtime = new Util.RuntimeOptions{};
  return testBlockFallbackDefinitionBehaviorWithOptions(request, runtime);
}

model TransWorkspaceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model TransWorkspaceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model TransWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TransWorkspaceResponseBody(name='body'),
}

async function transWorkspaceWithOptions(request: TransWorkspaceRequest, runtime: Util.RuntimeOptions): TransWorkspaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TransWorkspace',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function transWorkspace(request: TransWorkspaceRequest): TransWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return transWorkspaceWithOptions(request, runtime);
}

model UnbindSentinelBlockFallbackDefinitionRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  fallbackId?: long(name='FallbackId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  resource?: string(name='Resource'),
  targetType?: long(name='TargetType'),
}

model UnbindSentinelBlockFallbackDefinitionResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='AppName'),
    fallbackBehavior?: map[string]any(name='FallbackBehavior'),
    id?: long(name='Id'),
    name?: string(name='Name'),
    namespace?: string(name='Namespace'),
    resourceClassification?: int32(name='ResourceClassification'),
    userId?: string(name='UserId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UnbindSentinelBlockFallbackDefinitionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindSentinelBlockFallbackDefinitionResponseBody(name='body'),
}

async function unbindSentinelBlockFallbackDefinitionWithOptions(request: UnbindSentinelBlockFallbackDefinitionRequest, runtime: Util.RuntimeOptions): UnbindSentinelBlockFallbackDefinitionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.fallbackId)) {
    query['FallbackId'] = request.fallbackId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnbindSentinelBlockFallbackDefinition',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindSentinelBlockFallbackDefinition(request: UnbindSentinelBlockFallbackDefinitionRequest): UnbindSentinelBlockFallbackDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindSentinelBlockFallbackDefinitionWithOptions(request, runtime);
}

model UninstallPluginRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  configurationId?: string(name='ConfigurationId'),
  namespace?: string(name='Namespace'),
}

model UninstallPluginResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UninstallPluginResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UninstallPluginResponseBody(name='body'),
}

async function uninstallPluginWithOptions(request: UninstallPluginRequest, runtime: Util.RuntimeOptions): UninstallPluginResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.configurationId)) {
    query['ConfigurationId'] = request.configurationId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UninstallPlugin',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function uninstallPlugin(request: UninstallPluginRequest): UninstallPluginResponse {
  var runtime = new Util.RuntimeOptions{};
  return uninstallPluginWithOptions(request, runtime);
}

model UpdateAlarmRuleRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  alarmId?: long(name='AlarmId'),
  alarmOn?: boolean(name='AlarmOn'),
  alertLevel?: string(name='AlertLevel'),
  alertName?: string(name='AlertName'),
  andOr?: string(name='AndOr'),
  appName?: string(name='AppName'),
  conditions?: string(name='Conditions'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  repeatInterval?: string(name='RepeatInterval'),
}

model UpdateAlarmRuleResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateAlarmRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAlarmRuleResponseBody(name='body'),
}

async function updateAlarmRuleWithOptions(request: UpdateAlarmRuleRequest, runtime: Util.RuntimeOptions): UpdateAlarmRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.alarmId)) {
    query['AlarmId'] = request.alarmId;
  }
  if (!Util.isUnset(request.alarmOn)) {
    query['AlarmOn'] = request.alarmOn;
  }
  if (!Util.isUnset(request.alertLevel)) {
    query['AlertLevel'] = request.alertLevel;
  }
  if (!Util.isUnset(request.alertName)) {
    query['AlertName'] = request.alertName;
  }
  if (!Util.isUnset(request.andOr)) {
    query['AndOr'] = request.andOr;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.conditions)) {
    query['Conditions'] = request.conditions;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.repeatInterval)) {
    query['RepeatInterval'] = request.repeatInterval;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAlarmRule',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAlarmRule(request: UpdateAlarmRuleRequest): UpdateAlarmRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAlarmRuleWithOptions(request, runtime);
}

model UpdateAlarmStatusRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  alarmId?: long(name='AlarmId'),
  alarmOn?: boolean(name='AlarmOn'),
  appName?: string(name='AppName'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model UpdateAlarmStatusResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateAlarmStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAlarmStatusResponseBody(name='body'),
}

async function updateAlarmStatusWithOptions(request: UpdateAlarmStatusRequest, runtime: Util.RuntimeOptions): UpdateAlarmStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.alarmId)) {
    query['AlarmId'] = request.alarmId;
  }
  if (!Util.isUnset(request.alarmOn)) {
    query['AlarmOn'] = request.alarmOn;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAlarmStatus',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAlarmStatus(request: UpdateAlarmStatusRequest): UpdateAlarmStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAlarmStatusWithOptions(request, runtime);
}

model UpdateAppSwitchRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  nameSpace?: string(name='NameSpace'),
  switchName?: string(name='SwitchName'),
  switchNameSpace?: string(name='SwitchNameSpace'),
  switchValue?: string(name='SwitchValue'),
}

model UpdateAppSwitchResponseBody = {
  code?: string(name='Code'),
  data?: [ string ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateAppSwitchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAppSwitchResponseBody(name='body'),
}

async function updateAppSwitchWithOptions(request: UpdateAppSwitchRequest, runtime: Util.RuntimeOptions): UpdateAppSwitchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.nameSpace)) {
    query['NameSpace'] = request.nameSpace;
  }
  if (!Util.isUnset(request.switchName)) {
    query['SwitchName'] = request.switchName;
  }
  if (!Util.isUnset(request.switchNameSpace)) {
    query['SwitchNameSpace'] = request.switchNameSpace;
  }
  if (!Util.isUnset(request.switchValue)) {
    query['SwitchValue'] = request.switchValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAppSwitch',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAppSwitch(request: UpdateAppSwitchRequest): UpdateAppSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAppSwitchWithOptions(request, runtime);
}

model UpdateApplicationConfigurationRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model UpdateApplicationConfigurationResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateApplicationConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateApplicationConfigurationResponseBody(name='body'),
}

async function updateApplicationConfigurationWithOptions(request: UpdateApplicationConfigurationRequest, runtime: Util.RuntimeOptions): UpdateApplicationConfigurationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateApplicationConfiguration',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateApplicationConfiguration(request: UpdateApplicationConfigurationRequest): UpdateApplicationConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateApplicationConfigurationWithOptions(request, runtime);
}

model UpdateApplicationEmpIdRelationRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model UpdateApplicationEmpIdRelationResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateApplicationEmpIdRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateApplicationEmpIdRelationResponseBody(name='body'),
}

async function updateApplicationEmpIdRelationWithOptions(request: UpdateApplicationEmpIdRelationRequest, runtime: Util.RuntimeOptions): UpdateApplicationEmpIdRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateApplicationEmpIdRelation',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateApplicationEmpIdRelation(request: UpdateApplicationEmpIdRelationRequest): UpdateApplicationEmpIdRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateApplicationEmpIdRelationWithOptions(request, runtime);
}

model UpdateAttackSuiteRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  attackSuiteId?: string(name='AttackSuiteId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  scenarioDisplayVO?: string(name='ScenarioDisplayVO'),
}

model UpdateAttackSuiteResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateAttackSuiteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAttackSuiteResponseBody(name='body'),
}

async function updateAttackSuiteWithOptions(request: UpdateAttackSuiteRequest, runtime: Util.RuntimeOptions): UpdateAttackSuiteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.attackSuiteId)) {
    query['AttackSuiteId'] = request.attackSuiteId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.scenarioDisplayVO)) {
    query['ScenarioDisplayVO'] = request.scenarioDisplayVO;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAttackSuite',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAttackSuite(request: UpdateAttackSuiteRequest): UpdateAttackSuiteResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAttackSuiteWithOptions(request, runtime);
}

model UpdateCategoryRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model UpdateCategoryResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateCategoryResponseBody(name='body'),
}

async function updateCategoryWithOptions(request: UpdateCategoryRequest, runtime: Util.RuntimeOptions): UpdateCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCategory',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateCategory(request: UpdateCategoryRequest): UpdateCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCategoryWithOptions(request, runtime);
}

model UpdateCommercialSwitchRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  suspend?: int32(name='Suspend'),
}

model UpdateCommercialSwitchResponseBody = {
  code?: string(name='Code'),
  data?: int32(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateCommercialSwitchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateCommercialSwitchResponseBody(name='body'),
}

async function updateCommercialSwitchWithOptions(request: UpdateCommercialSwitchRequest, runtime: Util.RuntimeOptions): UpdateCommercialSwitchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.suspend)) {
    query['Suspend'] = request.suspend;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCommercialSwitch',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateCommercialSwitch(request: UpdateCommercialSwitchRequest): UpdateCommercialSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCommercialSwitchWithOptions(request, runtime);
}

model UpdateComponentLayoutsRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  userLayouts?: string(name='UserLayouts'),
}

model UpdateComponentLayoutsResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateComponentLayoutsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateComponentLayoutsResponseBody(name='body'),
}

async function updateComponentLayoutsWithOptions(request: UpdateComponentLayoutsRequest, runtime: Util.RuntimeOptions): UpdateComponentLayoutsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.userLayouts)) {
    query['UserLayouts'] = request.userLayouts;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateComponentLayouts',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateComponentLayouts(request: UpdateComponentLayoutsRequest): UpdateComponentLayoutsResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateComponentLayoutsWithOptions(request, runtime);
}

model UpdateExperimentRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model UpdateExperimentResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateExperimentResponseBody(name='body'),
}

async function updateExperimentWithOptions(request: UpdateExperimentRequest, runtime: Util.RuntimeOptions): UpdateExperimentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateExperiment',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateExperiment(request: UpdateExperimentRequest): UpdateExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateExperimentWithOptions(request, runtime);
}

model UpdateExperimentBasicInfoRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model UpdateExperimentBasicInfoResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateExperimentBasicInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateExperimentBasicInfoResponseBody(name='body'),
}

async function updateExperimentBasicInfoWithOptions(request: UpdateExperimentBasicInfoRequest, runtime: Util.RuntimeOptions): UpdateExperimentBasicInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateExperimentBasicInfo',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateExperimentBasicInfo(request: UpdateExperimentBasicInfoRequest): UpdateExperimentBasicInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateExperimentBasicInfoWithOptions(request, runtime);
}

model UpdateExperimentFlowDefinitionRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model UpdateExperimentFlowDefinitionResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateExperimentFlowDefinitionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateExperimentFlowDefinitionResponseBody(name='body'),
}

async function updateExperimentFlowDefinitionWithOptions(request: UpdateExperimentFlowDefinitionRequest, runtime: Util.RuntimeOptions): UpdateExperimentFlowDefinitionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateExperimentFlowDefinition',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateExperimentFlowDefinition(request: UpdateExperimentFlowDefinitionRequest): UpdateExperimentFlowDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateExperimentFlowDefinitionWithOptions(request, runtime);
}

model UpdateExperimentHostRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model UpdateExperimentHostResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateExperimentHostResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateExperimentHostResponseBody(name='body'),
}

async function updateExperimentHostWithOptions(request: UpdateExperimentHostRequest, runtime: Util.RuntimeOptions): UpdateExperimentHostResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateExperimentHost',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateExperimentHost(request: UpdateExperimentHostRequest): UpdateExperimentHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateExperimentHostWithOptions(request, runtime);
}

model UpdateExpertiseRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model UpdateExpertiseResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateExpertiseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateExpertiseResponseBody(name='body'),
}

async function updateExpertiseWithOptions(request: UpdateExpertiseRequest, runtime: Util.RuntimeOptions): UpdateExpertiseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateExpertise',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateExpertise(request: UpdateExpertiseRequest): UpdateExpertiseResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateExpertiseWithOptions(request, runtime);
}

model UpdateGeneralWorkspaceBaseInfoRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model UpdateGeneralWorkspaceBaseInfoResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateGeneralWorkspaceBaseInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGeneralWorkspaceBaseInfoResponseBody(name='body'),
}

async function updateGeneralWorkspaceBaseInfoWithOptions(request: UpdateGeneralWorkspaceBaseInfoRequest, runtime: Util.RuntimeOptions): UpdateGeneralWorkspaceBaseInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGeneralWorkspaceBaseInfo',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGeneralWorkspaceBaseInfo(request: UpdateGeneralWorkspaceBaseInfoRequest): UpdateGeneralWorkspaceBaseInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGeneralWorkspaceBaseInfoWithOptions(request, runtime);
}

model UpdateInspectJobRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  clusterId?: string(name='ClusterId'),
  clusterName?: string(name='ClusterName'),
  cron?: string(name='Cron'),
  date?: long(name='Date'),
  day?: string(name='Day'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  terminationDate?: long(name='TerminationDate'),
  terminationTime?: long(name='TerminationTime'),
  time?: long(name='Time'),
  type?: string(name='Type'),
  week?: string(name='Week'),
}

model UpdateInspectJobResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateInspectJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateInspectJobResponseBody(name='body'),
}

async function updateInspectJobWithOptions(request: UpdateInspectJobRequest, runtime: Util.RuntimeOptions): UpdateInspectJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.cron)) {
    query['Cron'] = request.cron;
  }
  if (!Util.isUnset(request.date)) {
    query['Date'] = request.date;
  }
  if (!Util.isUnset(request.day)) {
    query['Day'] = request.day;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.terminationDate)) {
    query['TerminationDate'] = request.terminationDate;
  }
  if (!Util.isUnset(request.terminationTime)) {
    query['TerminationTime'] = request.terminationTime;
  }
  if (!Util.isUnset(request.time)) {
    query['Time'] = request.time;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.week)) {
    query['Week'] = request.week;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateInspectJob',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateInspectJob(request: UpdateInspectJobRequest): UpdateInspectJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateInspectJobWithOptions(request, runtime);
}

model UpdateMachineSwitchRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  ips?: string(name='Ips'),
  nameSpace?: string(name='NameSpace'),
  switchName?: string(name='SwitchName'),
  switchNameSpace?: string(name='SwitchNameSpace'),
  switchValue?: string(name='SwitchValue'),
}

model UpdateMachineSwitchResponseBody = {
  code?: string(name='Code'),
  data?: [ string ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateMachineSwitchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMachineSwitchResponseBody(name='body'),
}

async function updateMachineSwitchWithOptions(request: UpdateMachineSwitchRequest, runtime: Util.RuntimeOptions): UpdateMachineSwitchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.ips)) {
    query['Ips'] = request.ips;
  }
  if (!Util.isUnset(request.nameSpace)) {
    query['NameSpace'] = request.nameSpace;
  }
  if (!Util.isUnset(request.switchName)) {
    query['SwitchName'] = request.switchName;
  }
  if (!Util.isUnset(request.switchNameSpace)) {
    query['SwitchNameSpace'] = request.switchNameSpace;
  }
  if (!Util.isUnset(request.switchValue)) {
    query['SwitchValue'] = request.switchValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMachineSwitch',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMachineSwitch(request: UpdateMachineSwitchRequest): UpdateMachineSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMachineSwitchWithOptions(request, runtime);
}

model UpdateMyWorkspaceBaseInfoRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model UpdateMyWorkspaceBaseInfoResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateMyWorkspaceBaseInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMyWorkspaceBaseInfoResponseBody(name='body'),
}

async function updateMyWorkspaceBaseInfoWithOptions(request: UpdateMyWorkspaceBaseInfoRequest, runtime: Util.RuntimeOptions): UpdateMyWorkspaceBaseInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMyWorkspaceBaseInfo',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMyWorkspaceBaseInfo(request: UpdateMyWorkspaceBaseInfoRequest): UpdateMyWorkspaceBaseInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMyWorkspaceBaseInfoWithOptions(request, runtime);
}

model UpdateSceneRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model UpdateSceneResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateSceneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSceneResponseBody(name='body'),
}

async function updateSceneWithOptions(request: UpdateSceneRequest, runtime: Util.RuntimeOptions): UpdateSceneResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateScene',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateScene(request: UpdateSceneRequest): UpdateSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSceneWithOptions(request, runtime);
}

model UpdateSceneFunctionRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model UpdateSceneFunctionResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateSceneFunctionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSceneFunctionResponseBody(name='body'),
}

async function updateSceneFunctionWithOptions(request: UpdateSceneFunctionRequest, runtime: Util.RuntimeOptions): UpdateSceneFunctionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSceneFunction',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSceneFunction(request: UpdateSceneFunctionRequest): UpdateSceneFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSceneFunctionWithOptions(request, runtime);
}

model UpdateSceneFunctionAuthorizedRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model UpdateSceneFunctionAuthorizedResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateSceneFunctionAuthorizedResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSceneFunctionAuthorizedResponseBody(name='body'),
}

async function updateSceneFunctionAuthorizedWithOptions(request: UpdateSceneFunctionAuthorizedRequest, runtime: Util.RuntimeOptions): UpdateSceneFunctionAuthorizedResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSceneFunctionAuthorized',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSceneFunctionAuthorized(request: UpdateSceneFunctionAuthorizedRequest): UpdateSceneFunctionAuthorizedResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSceneFunctionAuthorizedWithOptions(request, runtime);
}

model UpdateSceneFunctionParameterRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model UpdateSceneFunctionParameterResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateSceneFunctionParameterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSceneFunctionParameterResponseBody(name='body'),
}

async function updateSceneFunctionParameterWithOptions(request: UpdateSceneFunctionParameterRequest, runtime: Util.RuntimeOptions): UpdateSceneFunctionParameterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSceneFunctionParameter',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSceneFunctionParameter(request: UpdateSceneFunctionParameterRequest): UpdateSceneFunctionParameterResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSceneFunctionParameterWithOptions(request, runtime);
}

model UpdateScriptRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model UpdateScriptResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateScriptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateScriptResponseBody(name='body'),
}

async function updateScriptWithOptions(request: UpdateScriptRequest, runtime: Util.RuntimeOptions): UpdateScriptResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateScript',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateScript(request: UpdateScriptRequest): UpdateScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateScriptWithOptions(request, runtime);
}

model UpdateSentinelAdaptiveFlowSettingOfAppRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  appName?: string(name='AppName'),
  enableAutoSystemAdaptive?: boolean(name='EnableAutoSystemAdaptive'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model UpdateSentinelAdaptiveFlowSettingOfAppResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='AppName'),
    enableAutoSystemAdaptive?: boolean(name='EnableAutoSystemAdaptive'),
    namespace?: string(name='Namespace'),
    userId?: string(name='UserId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateSentinelAdaptiveFlowSettingOfAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSentinelAdaptiveFlowSettingOfAppResponseBody(name='body'),
}

async function updateSentinelAdaptiveFlowSettingOfAppWithOptions(request: UpdateSentinelAdaptiveFlowSettingOfAppRequest, runtime: Util.RuntimeOptions): UpdateSentinelAdaptiveFlowSettingOfAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.enableAutoSystemAdaptive)) {
    query['EnableAutoSystemAdaptive'] = request.enableAutoSystemAdaptive;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSentinelAdaptiveFlowSettingOfApp',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSentinelAdaptiveFlowSettingOfApp(request: UpdateSentinelAdaptiveFlowSettingOfAppRequest): UpdateSentinelAdaptiveFlowSettingOfAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSentinelAdaptiveFlowSettingOfAppWithOptions(request, runtime);
}

model UpdateSentinelBlockFallbackDefinitionRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  fallbackBehavior?: string(name='FallbackBehavior'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
  resourceClassification?: int32(name='ResourceClassification'),
}

model UpdateSentinelBlockFallbackDefinitionResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='AppName'),
    fallbackBehavior?: map[string]any(name='FallbackBehavior'),
    id?: long(name='Id'),
    name?: string(name='Name'),
    namespace?: string(name='Namespace'),
    resourceClassification?: int32(name='ResourceClassification'),
    userId?: string(name='UserId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateSentinelBlockFallbackDefinitionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSentinelBlockFallbackDefinitionResponseBody(name='body'),
}

async function updateSentinelBlockFallbackDefinitionWithOptions(request: UpdateSentinelBlockFallbackDefinitionRequest, runtime: Util.RuntimeOptions): UpdateSentinelBlockFallbackDefinitionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.fallbackBehavior)) {
    query['FallbackBehavior'] = request.fallbackBehavior;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceClassification)) {
    query['ResourceClassification'] = request.resourceClassification;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSentinelBlockFallbackDefinition',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSentinelBlockFallbackDefinition(request: UpdateSentinelBlockFallbackDefinitionRequest): UpdateSentinelBlockFallbackDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSentinelBlockFallbackDefinitionWithOptions(request, runtime);
}

model UpdateSentinelManualDegradeRuleRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  fallbackId?: long(name='FallbackId'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
}

model UpdateSentinelManualDegradeRuleResponseBody = {
  code?: string(name='Code'),
  data?: {
    appName?: string(name='AppName'),
    enabled?: boolean(name='Enabled'),
    id?: long(name='Id'),
    modelId?: long(name='ModelId'),
    namespace?: string(name='Namespace'),
    resource?: string(name='Resource'),
    resourceMatchMode?: int32(name='ResourceMatchMode'),
    userId?: string(name='UserId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateSentinelManualDegradeRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSentinelManualDegradeRuleResponseBody(name='body'),
}

async function updateSentinelManualDegradeRuleWithOptions(request: UpdateSentinelManualDegradeRuleRequest, runtime: Util.RuntimeOptions): UpdateSentinelManualDegradeRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.fallbackId)) {
    query['FallbackId'] = request.fallbackId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSentinelManualDegradeRule',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSentinelManualDegradeRule(request: UpdateSentinelManualDegradeRuleRequest): UpdateSentinelManualDegradeRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSentinelManualDegradeRuleWithOptions(request, runtime);
}

model UpdateUserAuthorityRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  displayName?: string(name='DisplayName'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
  roleType?: int32(name='RoleType'),
  subUid?: string(name='SubUid'),
  userName?: string(name='UserName'),
}

model UpdateUserAuthorityResponseBody = {
  code?: string(name='Code'),
  data?: {
    delete?: string(name='delete'),
    id?: long(name='id'),
    parentUid?: string(name='parentUid'),
    roleType?: int32(name='roleType'),
    subUserId?: string(name='subUserId'),
    userName?: string(name='userName'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateUserAuthorityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateUserAuthorityResponseBody(name='body'),
}

async function updateUserAuthorityWithOptions(request: UpdateUserAuthorityRequest, runtime: Util.RuntimeOptions): UpdateUserAuthorityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.roleType)) {
    query['RoleType'] = request.roleType;
  }
  if (!Util.isUnset(request.subUid)) {
    query['SubUid'] = request.subUid;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateUserAuthority',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateUserAuthority(request: UpdateUserAuthorityRequest): UpdateUserAuthorityResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUserAuthorityWithOptions(request, runtime);
}

model UpdateWorkspaceExperimentPermissionRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model UpdateWorkspaceExperimentPermissionResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateWorkspaceExperimentPermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateWorkspaceExperimentPermissionResponseBody(name='body'),
}

async function updateWorkspaceExperimentPermissionWithOptions(request: UpdateWorkspaceExperimentPermissionRequest, runtime: Util.RuntimeOptions): UpdateWorkspaceExperimentPermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWorkspaceExperimentPermission',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateWorkspaceExperimentPermission(request: UpdateWorkspaceExperimentPermissionRequest): UpdateWorkspaceExperimentPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateWorkspaceExperimentPermissionWithOptions(request, runtime);
}

model UpdateWorkspaceMemberRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model UpdateWorkspaceMemberResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateWorkspaceMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateWorkspaceMemberResponseBody(name='body'),
}

async function updateWorkspaceMemberWithOptions(request: UpdateWorkspaceMemberRequest, runtime: Util.RuntimeOptions): UpdateWorkspaceMemberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWorkspaceMember',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateWorkspaceMember(request: UpdateWorkspaceMemberRequest): UpdateWorkspaceMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateWorkspaceMemberWithOptions(request, runtime);
}

model UserCheckActivityTaskRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model UserCheckActivityTaskResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UserCheckActivityTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UserCheckActivityTaskResponseBody(name='body'),
}

async function userCheckActivityTaskWithOptions(request: UserCheckActivityTaskRequest, runtime: Util.RuntimeOptions): UserCheckActivityTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UserCheckActivityTask',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function userCheckActivityTask(request: UserCheckActivityTaskRequest): UserCheckActivityTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return userCheckActivityTaskWithOptions(request, runtime);
}

model UserLoginRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model UserLoginResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UserLoginResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UserLoginResponseBody(name='body'),
}

async function userLoginWithOptions(request: UserLoginRequest, runtime: Util.RuntimeOptions): UserLoginResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UserLogin',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function userLogin(request: UserLoginRequest): UserLoginResponse {
  var runtime = new Util.RuntimeOptions{};
  return userLoginWithOptions(request, runtime);
}

model UserNamespaceRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model UserNamespaceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UserNamespaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UserNamespaceResponseBody(name='body'),
}

async function userNamespaceWithOptions(request: UserNamespaceRequest, runtime: Util.RuntimeOptions): UserNamespaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UserNamespace',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function userNamespace(request: UserNamespaceRequest): UserNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return userNamespaceWithOptions(request, runtime);
}

model UserPayPackOverviewRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model UserPayPackOverviewResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UserPayPackOverviewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UserPayPackOverviewResponseBody(name='body'),
}

async function userPayPackOverviewWithOptions(request: UserPayPackOverviewRequest, runtime: Util.RuntimeOptions): UserPayPackOverviewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UserPayPackOverview',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function userPayPackOverview(request: UserPayPackOverviewRequest): UserPayPackOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return userPayPackOverviewWithOptions(request, runtime);
}

model UserScopeRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model UserScopeResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UserScopeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UserScopeResponseBody(name='body'),
}

async function userScopeWithOptions(request: UserScopeRequest, runtime: Util.RuntimeOptions): UserScopeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UserScope',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function userScope(request: UserScopeRequest): UserScopeResponse {
  var runtime = new Util.RuntimeOptions{};
  return userScopeWithOptions(request, runtime);
}

model QueryTopologyProcessOverviewRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  hostConfigurationId?: string(name='HostConfigurationId'),
  kubClusterId?: string(name='KubClusterId'),
  kubNamespace?: string(name='KubNamespace'),
  namespace?: string(name='Namespace'),
  requestTimestamp?: long(name='RequestTimestamp'),
  tierId?: int32(name='TierId'),
}

model QueryTopologyProcessOverviewResponseBody = {
  code?: string(name='Code'),
  data?: {
    process?: {
      applications?: [ 
        {
          appName?: string(name='appName'),
          blockQps?: long(name='blockQps'),
          commandLine?: string(name='commandLine'),
          cpu?: float(name='cpu'),
          exception?: long(name='exception'),
          flowLimitOpened?: boolean(name='flowLimitOpened'),
          id?: string(name='id'),
          mem?: float(name='mem'),
          passQps?: long(name='passQps'),
          rt?: float(name='rt'),
        }
      ](name='applications'),
      cloudComponents?: [ 
        {
          instances?: [ 
            {
              id?: string(name='id'),
              instanceId?: string(name='instanceId'),
              label?: string(name='label'),
            }
          ](name='instances'),
          label?: string(name='label'),
          requests?: [ 
            {
              commandLine?: string(name='commandLine'),
              id?: string(name='id'),
              label?: string(name='label'),
            }
          ](name='requests'),
          type?: string(name='type'),
        }
      ](name='cloudComponents'),
      componentTags?: [ 
        {
          ids?: [ string ](name='ids'),
          label?: string(name='label'),
        }
      ](name='componentTags'),
      thirdComponents?: [ 
        {
          commandLine?: string(name='commandLine'),
          cpu?: float(name='cpu'),
          id?: string(name='id'),
          label?: string(name='label'),
          mem?: float(name='mem'),
          type?: string(name='type'),
        }
      ](name='thirdComponents'),
    }(name='process'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTopologyProcessOverviewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTopologyProcessOverviewResponseBody(name='body'),
}

async function queryTopologyProcessOverviewWithOptions(request: QueryTopologyProcessOverviewRequest, runtime: Util.RuntimeOptions): QueryTopologyProcessOverviewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.hostConfigurationId)) {
    query['HostConfigurationId'] = request.hostConfigurationId;
  }
  if (!Util.isUnset(request.kubClusterId)) {
    query['KubClusterId'] = request.kubClusterId;
  }
  if (!Util.isUnset(request.kubNamespace)) {
    query['KubNamespace'] = request.kubNamespace;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.requestTimestamp)) {
    query['RequestTimestamp'] = request.requestTimestamp;
  }
  if (!Util.isUnset(request.tierId)) {
    query['TierId'] = request.tierId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'queryTopologyProcessOverview',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTopologyProcessOverview(request: QueryTopologyProcessOverviewRequest): QueryTopologyProcessOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTopologyProcessOverviewWithOptions(request, runtime);
}

model WorkspaceCloneExperimentRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model WorkspaceCloneExperimentResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model WorkspaceCloneExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: WorkspaceCloneExperimentResponseBody(name='body'),
}

async function workspaceCloneExperimentWithOptions(request: WorkspaceCloneExperimentRequest, runtime: Util.RuntimeOptions): WorkspaceCloneExperimentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'workspaceCloneExperiment',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function workspaceCloneExperiment(request: WorkspaceCloneExperimentRequest): WorkspaceCloneExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  return workspaceCloneExperimentWithOptions(request, runtime);
}

model WorkspaceCreateExperimentRequest {
  ahasRegionId?: string(name='AhasRegionId'),
  args?: string(name='Args'),
  lang?: string(name='Lang'),
  namespace?: string(name='Namespace'),
}

model WorkspaceCreateExperimentResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model WorkspaceCreateExperimentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: WorkspaceCreateExperimentResponseBody(name='body'),
}

async function workspaceCreateExperimentWithOptions(request: WorkspaceCreateExperimentRequest, runtime: Util.RuntimeOptions): WorkspaceCreateExperimentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ahasRegionId)) {
    query['AhasRegionId'] = request.ahasRegionId;
  }
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'workspaceCreateExperiment',
    version = '2018-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function workspaceCreateExperiment(request: WorkspaceCreateExperimentRequest): WorkspaceCreateExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  return workspaceCreateExperimentWithOptions(request, runtime);
}

model DataActivitiesRunParamArgumentsArgsComponentsValue = {
  type?: string(name='type'),
  required?: boolean(name='required'),
  defaultValue?: string(name='defaultValue'),
  unit?: string(name='unit'),
  requestUrl?: string(name='requestUrl'),
  opLevel?: int32(name='opLevel'),
  plainText?: string(name='plainText'),
  cipherText?: string(name='cipherText'),
  linkage?: {
    defaultState?: boolean(name='defaultState'),
    depends?: string(name='depends'),
    condition?: string(name='condition'),
  }(name='linkage'),
  constraint?: {
    range?: [ string ](name='range'),
    checker?: string(name='checker'),
    checkerTemplate?: string(name='checkerTemplate'),
  }(name='constraint'),
  options?: [  map[string]any ](name='options'),
}

