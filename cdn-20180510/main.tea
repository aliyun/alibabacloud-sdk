/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  @endpointMap = {
    ap-northeast-1 = 'cdn.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'cdn.ap-southeast-1.aliyuncs.com',
    ap-southeast-1 = 'cdn.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'cdn.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'cdn.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'cdn.ap-southeast-1.aliyuncs.com',
    eu-central-1 = 'cdn.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'cdn.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'cdn.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'cdn.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'cdn.ap-southeast-1.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('cdn', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddCdnDomainRequest {
  ownerId?: long(name='OwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  securityToken?: string(name='SecurityToken'),
  cdnType?: string(name='CdnType'),
  domainName?: string(name='DomainName'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sources?: string(name='Sources'),
  checkUrl?: string(name='CheckUrl'),
  scope?: string(name='Scope'),
  topLevelDomain?: string(name='TopLevelDomain'),
}

model AddCdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: AddCdnDomainResponseBody(name='body'),
}

async function addCdnDomainWithOptions(request: AddCdnDomainRequest, runtime: Util.RuntimeOptions): AddCdnDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddCdnDomain', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addCdnDomain(request: AddCdnDomainRequest): AddCdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCdnDomainWithOptions(request, runtime);
}

model AddFCTriggerRequest {
  ownerId?: long(name='OwnerId'),
  triggerARN?: string(name='TriggerARN'),
  eventMetaName?: string(name='EventMetaName'),
  eventMetaVersion?: string(name='EventMetaVersion'),
  sourceARN?: string(name='SourceARN'),
  functionARN?: string(name='FunctionARN'),
  roleARN?: string(name='RoleARN'),
  notes?: string(name='Notes'),
}

model AddFCTriggerResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddFCTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: AddFCTriggerResponseBody(name='body'),
}

async function addFCTriggerWithOptions(request: AddFCTriggerRequest, runtime: Util.RuntimeOptions): AddFCTriggerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddFCTrigger', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addFCTrigger(request: AddFCTriggerRequest): AddFCTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  return addFCTriggerWithOptions(request, runtime);
}

model BatchAddCdnDomainRequest {
  ownerId?: long(name='OwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  securityToken?: string(name='SecurityToken'),
  cdnType?: string(name='CdnType'),
  domainName?: string(name='DomainName'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sources?: string(name='Sources'),
  checkUrl?: string(name='CheckUrl'),
  scope?: string(name='Scope'),
  topLevelDomain?: string(name='TopLevelDomain'),
}

model BatchAddCdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchAddCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: BatchAddCdnDomainResponseBody(name='body'),
}

async function batchAddCdnDomainWithOptions(request: BatchAddCdnDomainRequest, runtime: Util.RuntimeOptions): BatchAddCdnDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchAddCdnDomain', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchAddCdnDomain(request: BatchAddCdnDomainRequest): BatchAddCdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchAddCdnDomainWithOptions(request, runtime);
}

model BatchSetCdnDomainConfigRequest {
  ownerId?: long(name='OwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  securityToken?: string(name='SecurityToken'),
  domainNames?: string(name='DomainNames'),
  functions?: string(name='Functions'),
}

model BatchSetCdnDomainConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchSetCdnDomainConfigResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSetCdnDomainConfigResponseBody(name='body'),
}

async function batchSetCdnDomainConfigWithOptions(request: BatchSetCdnDomainConfigRequest, runtime: Util.RuntimeOptions): BatchSetCdnDomainConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchSetCdnDomainConfig', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchSetCdnDomainConfig(request: BatchSetCdnDomainConfigRequest): BatchSetCdnDomainConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchSetCdnDomainConfigWithOptions(request, runtime);
}

model BatchSetCdnDomainServerCertificateRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  certName?: string(name='CertName'),
  certType?: string(name='CertType'),
  SSLProtocol?: string(name='SSLProtocol'),
  SSLPub?: string(name='SSLPub'),
  SSLPri?: string(name='SSLPri'),
  region?: string(name='Region'),
  forceSet?: string(name='ForceSet'),
}

model BatchSetCdnDomainServerCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchSetCdnDomainServerCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSetCdnDomainServerCertificateResponseBody(name='body'),
}

async function batchSetCdnDomainServerCertificateWithOptions(request: BatchSetCdnDomainServerCertificateRequest, runtime: Util.RuntimeOptions): BatchSetCdnDomainServerCertificateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchSetCdnDomainServerCertificate', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchSetCdnDomainServerCertificate(request: BatchSetCdnDomainServerCertificateRequest): BatchSetCdnDomainServerCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchSetCdnDomainServerCertificateWithOptions(request, runtime);
}

model BatchStartCdnDomainRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainNames?: string(name='DomainNames'),
}

model BatchStartCdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchStartCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: BatchStartCdnDomainResponseBody(name='body'),
}

async function batchStartCdnDomainWithOptions(request: BatchStartCdnDomainRequest, runtime: Util.RuntimeOptions): BatchStartCdnDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchStartCdnDomain', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchStartCdnDomain(request: BatchStartCdnDomainRequest): BatchStartCdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchStartCdnDomainWithOptions(request, runtime);
}

model BatchStopCdnDomainRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainNames?: string(name='DomainNames'),
}

model BatchStopCdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchStopCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: BatchStopCdnDomainResponseBody(name='body'),
}

async function batchStopCdnDomainWithOptions(request: BatchStopCdnDomainRequest, runtime: Util.RuntimeOptions): BatchStopCdnDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchStopCdnDomain', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchStopCdnDomain(request: BatchStopCdnDomainRequest): BatchStopCdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchStopCdnDomainWithOptions(request, runtime);
}

model BatchUpdateCdnDomainRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  sources?: string(name='Sources'),
  resourceGroupId?: string(name='ResourceGroupId'),
  topLevelDomain?: string(name='TopLevelDomain'),
}

model BatchUpdateCdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchUpdateCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUpdateCdnDomainResponseBody(name='body'),
}

async function batchUpdateCdnDomainWithOptions(request: BatchUpdateCdnDomainRequest, runtime: Util.RuntimeOptions): BatchUpdateCdnDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchUpdateCdnDomain', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchUpdateCdnDomain(request: BatchUpdateCdnDomainRequest): BatchUpdateCdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchUpdateCdnDomainWithOptions(request, runtime);
}

model CreateCdnCertificateSigningRequestRequest {
  ownerId?: long(name='OwnerId'),
  commonName?: string(name='CommonName'),
  SANs?: string(name='SANs'),
  organization?: string(name='Organization'),
  organizationUnit?: string(name='OrganizationUnit'),
  country?: string(name='Country'),
  state?: string(name='State'),
  city?: string(name='City'),
  email?: string(name='Email'),
}

model CreateCdnCertificateSigningRequestResponseBody = {
  requestId?: string(name='RequestId'),
  pubMd5?: string(name='PubMd5'),
  csr?: string(name='Csr'),
  commonName?: string(name='CommonName'),
}

model CreateCdnCertificateSigningRequestResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCdnCertificateSigningRequestResponseBody(name='body'),
}

async function createCdnCertificateSigningRequestWithOptions(request: CreateCdnCertificateSigningRequestRequest, runtime: Util.RuntimeOptions): CreateCdnCertificateSigningRequestResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCdnCertificateSigningRequest', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCdnCertificateSigningRequest(request: CreateCdnCertificateSigningRequestRequest): CreateCdnCertificateSigningRequestResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCdnCertificateSigningRequestWithOptions(request, runtime);
}

model CreateCdnDeliverTaskRequest {
  ownerId?: long(name='OwnerId'),
  name?: string(name='Name'),
  status?: string(name='Status'),
  reports?: string(name='Reports'),
  domainName?: string(name='DomainName'),
  deliver?: map[string]any(name='Deliver'),
  schedule?: map[string]any(name='Schedule'),
}

model CreateCdnDeliverTaskShrinkRequest {
  ownerId?: long(name='OwnerId'),
  name?: string(name='Name'),
  status?: string(name='Status'),
  reports?: string(name='Reports'),
  domainName?: string(name='DomainName'),
  deliverShrink?: string(name='Deliver'),
  scheduleShrink?: string(name='Schedule'),
}

model CreateCdnDeliverTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateCdnDeliverTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCdnDeliverTaskResponseBody(name='body'),
}

async function createCdnDeliverTaskWithOptions(tmpReq: CreateCdnDeliverTaskRequest, runtime: Util.RuntimeOptions): CreateCdnDeliverTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateCdnDeliverTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deliver)) {
    request.deliverShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deliver, 'Deliver', 'json');
  }
  if (!Util.isUnset(tmpReq.schedule)) {
    request.scheduleShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.schedule, 'Schedule', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCdnDeliverTask', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCdnDeliverTask(request: CreateCdnDeliverTaskRequest): CreateCdnDeliverTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCdnDeliverTaskWithOptions(request, runtime);
}

model CreateCdnSubTaskRequest {
  ownerId?: long(name='OwnerId'),
  status?: string(name='Status'),
  reportIds?: string(name='ReportIds'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model CreateCdnSubTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateCdnSubTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCdnSubTaskResponseBody(name='body'),
}

async function createCdnSubTaskWithOptions(request: CreateCdnSubTaskRequest, runtime: Util.RuntimeOptions): CreateCdnSubTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCdnSubTask', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCdnSubTask(request: CreateCdnSubTaskRequest): CreateCdnSubTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCdnSubTaskWithOptions(request, runtime);
}

model CreateIllegalUrlExportTaskRequest {
  ownerId?: long(name='OwnerId'),
  timePoint?: string(name='TimePoint'),
  taskName?: string(name='TaskName'),
}

model CreateIllegalUrlExportTaskResponseBody = {
  taskId?: string(name='TaskId'),
  requestId?: string(name='RequestId'),
}

model CreateIllegalUrlExportTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIllegalUrlExportTaskResponseBody(name='body'),
}

async function createIllegalUrlExportTaskWithOptions(request: CreateIllegalUrlExportTaskRequest, runtime: Util.RuntimeOptions): CreateIllegalUrlExportTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateIllegalUrlExportTask', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createIllegalUrlExportTask(request: CreateIllegalUrlExportTaskRequest): CreateIllegalUrlExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIllegalUrlExportTaskWithOptions(request, runtime);
}

model CreateRealTimeLogDeliveryRequest {
  ownerId?: long(name='OwnerId'),
  project?: string(name='Project'),
  logstore?: string(name='Logstore'),
  region?: string(name='Region'),
  domain?: string(name='Domain'),
}

model CreateRealTimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateRealTimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRealTimeLogDeliveryResponseBody(name='body'),
}

async function createRealTimeLogDeliveryWithOptions(request: CreateRealTimeLogDeliveryRequest, runtime: Util.RuntimeOptions): CreateRealTimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('CreateRealTimeLogDelivery', '2018-05-10', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function createRealTimeLogDelivery(request: CreateRealTimeLogDeliveryRequest): CreateRealTimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRealTimeLogDeliveryWithOptions(request, runtime);
}

model CreateUsageDetailDataExportTaskRequest {
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  group?: string(name='Group'),
  domainNames?: string(name='DomainNames'),
  type?: string(name='Type'),
  taskName?: string(name='TaskName'),
  language?: string(name='Language'),
}

model CreateUsageDetailDataExportTaskResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model CreateUsageDetailDataExportTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUsageDetailDataExportTaskResponseBody(name='body'),
}

async function createUsageDetailDataExportTaskWithOptions(request: CreateUsageDetailDataExportTaskRequest, runtime: Util.RuntimeOptions): CreateUsageDetailDataExportTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateUsageDetailDataExportTask', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createUsageDetailDataExportTask(request: CreateUsageDetailDataExportTaskRequest): CreateUsageDetailDataExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUsageDetailDataExportTaskWithOptions(request, runtime);
}

model CreateUserUsageDataExportTaskRequest {
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  taskName?: string(name='TaskName'),
  language?: string(name='Language'),
}

model CreateUserUsageDataExportTaskResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model CreateUserUsageDataExportTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserUsageDataExportTaskResponseBody(name='body'),
}

async function createUserUsageDataExportTaskWithOptions(request: CreateUserUsageDataExportTaskRequest, runtime: Util.RuntimeOptions): CreateUserUsageDataExportTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateUserUsageDataExportTask', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createUserUsageDataExportTask(request: CreateUserUsageDataExportTaskRequest): CreateUserUsageDataExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserUsageDataExportTaskWithOptions(request, runtime);
}

model DeleteCdnDeliverTaskRequest {
  ownerId?: long(name='OwnerId'),
  deliverId?: long(name='DeliverId'),
}

model DeleteCdnDeliverTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCdnDeliverTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCdnDeliverTaskResponseBody(name='body'),
}

async function deleteCdnDeliverTaskWithOptions(request: DeleteCdnDeliverTaskRequest, runtime: Util.RuntimeOptions): DeleteCdnDeliverTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteCdnDeliverTask', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteCdnDeliverTask(request: DeleteCdnDeliverTaskRequest): DeleteCdnDeliverTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCdnDeliverTaskWithOptions(request, runtime);
}

model DeleteCdnDomainRequest {
  ownerId?: long(name='OwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
}

model DeleteCdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCdnDomainResponseBody(name='body'),
}

async function deleteCdnDomainWithOptions(request: DeleteCdnDomainRequest, runtime: Util.RuntimeOptions): DeleteCdnDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteCdnDomain', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteCdnDomain(request: DeleteCdnDomainRequest): DeleteCdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCdnDomainWithOptions(request, runtime);
}

model DeleteCdnSubTaskRequest {
  ownerId?: long(name='OwnerId'),
}

model DeleteCdnSubTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCdnSubTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCdnSubTaskResponseBody(name='body'),
}

async function deleteCdnSubTaskWithOptions(request: DeleteCdnSubTaskRequest, runtime: Util.RuntimeOptions): DeleteCdnSubTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteCdnSubTask', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteCdnSubTask(request: DeleteCdnSubTaskRequest): DeleteCdnSubTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCdnSubTaskWithOptions(request, runtime);
}

model DeleteFCTriggerRequest {
  ownerId?: long(name='OwnerId'),
  triggerARN?: string(name='TriggerARN'),
}

model DeleteFCTriggerResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteFCTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFCTriggerResponseBody(name='body'),
}

async function deleteFCTriggerWithOptions(request: DeleteFCTriggerRequest, runtime: Util.RuntimeOptions): DeleteFCTriggerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteFCTrigger', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteFCTrigger(request: DeleteFCTriggerRequest): DeleteFCTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFCTriggerWithOptions(request, runtime);
}

model DeleteRealtimeLogDeliveryRequest {
  ownerId?: long(name='OwnerId'),
  domain?: string(name='Domain'),
  project?: string(name='Project'),
  logstore?: string(name='Logstore'),
  region?: string(name='Region'),
}

model DeleteRealtimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRealtimeLogDeliveryResponseBody(name='body'),
}

async function deleteRealtimeLogDeliveryWithOptions(request: DeleteRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): DeleteRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DeleteRealtimeLogDelivery', '2018-05-10', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function deleteRealtimeLogDelivery(request: DeleteRealtimeLogDeliveryRequest): DeleteRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRealtimeLogDeliveryWithOptions(request, runtime);
}

model DeleteSpecificConfigRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  configId?: string(name='ConfigId'),
}

model DeleteSpecificConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSpecificConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSpecificConfigResponseBody(name='body'),
}

async function deleteSpecificConfigWithOptions(request: DeleteSpecificConfigRequest, runtime: Util.RuntimeOptions): DeleteSpecificConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSpecificConfig', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSpecificConfig(request: DeleteSpecificConfigRequest): DeleteSpecificConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSpecificConfigWithOptions(request, runtime);
}

model DeleteSpecificStagingConfigRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  configId?: string(name='ConfigId'),
}

model DeleteSpecificStagingConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSpecificStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSpecificStagingConfigResponseBody(name='body'),
}

async function deleteSpecificStagingConfigWithOptions(request: DeleteSpecificStagingConfigRequest, runtime: Util.RuntimeOptions): DeleteSpecificStagingConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSpecificStagingConfig', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSpecificStagingConfig(request: DeleteSpecificStagingConfigRequest): DeleteSpecificStagingConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSpecificStagingConfigWithOptions(request, runtime);
}

model DeleteUsageDetailDataExportTaskRequest {
  ownerId?: long(name='OwnerId'),
  taskId?: string(name='TaskId'),
}

model DeleteUsageDetailDataExportTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteUsageDetailDataExportTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUsageDetailDataExportTaskResponseBody(name='body'),
}

async function deleteUsageDetailDataExportTaskWithOptions(request: DeleteUsageDetailDataExportTaskRequest, runtime: Util.RuntimeOptions): DeleteUsageDetailDataExportTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteUsageDetailDataExportTask', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteUsageDetailDataExportTask(request: DeleteUsageDetailDataExportTaskRequest): DeleteUsageDetailDataExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUsageDetailDataExportTaskWithOptions(request, runtime);
}

model DeleteUserUsageDataExportTaskRequest {
  ownerId?: long(name='OwnerId'),
  taskId?: string(name='TaskId'),
}

model DeleteUserUsageDataExportTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteUserUsageDataExportTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserUsageDataExportTaskResponseBody(name='body'),
}

async function deleteUserUsageDataExportTaskWithOptions(request: DeleteUserUsageDataExportTaskRequest, runtime: Util.RuntimeOptions): DeleteUserUsageDataExportTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteUserUsageDataExportTask', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteUserUsageDataExportTask(request: DeleteUserUsageDataExportTaskRequest): DeleteUserUsageDataExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserUsageDataExportTaskWithOptions(request, runtime);
}

model DescribeActiveVersionOfConfigGroupRequest {
  ownerId?: long(name='OwnerId'),
  configGroupId?: string(name='ConfigGroupId'),
  env?: string(name='Env'),
}

model DescribeActiveVersionOfConfigGroupResponseBody = {
  status?: string(name='Status'),
  updateTime?: string(name='UpdateTime'),
  requestId?: string(name='RequestId'),
  seqId?: long(name='SeqId'),
  description?: string(name='Description'),
  createTime?: string(name='CreateTime'),
  versionId?: string(name='VersionId'),
  configGroupId?: string(name='ConfigGroupId'),
  operator?: string(name='Operator'),
  baseVersionId?: string(name='BaseVersionId'),
}

model DescribeActiveVersionOfConfigGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeActiveVersionOfConfigGroupResponseBody(name='body'),
}

async function describeActiveVersionOfConfigGroupWithOptions(request: DescribeActiveVersionOfConfigGroupRequest, runtime: Util.RuntimeOptions): DescribeActiveVersionOfConfigGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeActiveVersionOfConfigGroup', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeActiveVersionOfConfigGroup(request: DescribeActiveVersionOfConfigGroupRequest): DescribeActiveVersionOfConfigGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeActiveVersionOfConfigGroupWithOptions(request, runtime);
}

model DescribeCdnCertificateDetailRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  certName?: string(name='CertName'),
}

model DescribeCdnCertificateDetailResponseBody = {
  certName?: string(name='CertName'),
  key?: string(name='Key'),
  cert?: string(name='Cert'),
  certId?: long(name='CertId'),
  requestId?: string(name='RequestId'),
}

model DescribeCdnCertificateDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnCertificateDetailResponseBody(name='body'),
}

async function describeCdnCertificateDetailWithOptions(request: DescribeCdnCertificateDetailRequest, runtime: Util.RuntimeOptions): DescribeCdnCertificateDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCdnCertificateDetail', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCdnCertificateDetail(request: DescribeCdnCertificateDetailRequest): DescribeCdnCertificateDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnCertificateDetailWithOptions(request, runtime);
}

model DescribeCdnCertificateListRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
}

model DescribeCdnCertificateListResponseBody = {
  requestId?: string(name='RequestId'),
  certificateListModel?: {
    count?: int32(name='Count'),
    certList?: {
      cert?: [ 
      {
        lastTime?: long(name='LastTime'),
        fingerprint?: string(name='Fingerprint'),
        certName?: string(name='CertName'),
        issuer?: string(name='Issuer'),
        certId?: long(name='CertId'),
        common?: string(name='Common'),
      }
    ](name='Cert')
    }(name='CertList'),
  }(name='CertificateListModel'),
}

model DescribeCdnCertificateListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnCertificateListResponseBody(name='body'),
}

async function describeCdnCertificateListWithOptions(request: DescribeCdnCertificateListRequest, runtime: Util.RuntimeOptions): DescribeCdnCertificateListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCdnCertificateList', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCdnCertificateList(request: DescribeCdnCertificateListRequest): DescribeCdnCertificateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnCertificateListWithOptions(request, runtime);
}

model DescribeCdnDeliverListRequest {
  ownerId?: long(name='OwnerId'),
  deliverId?: long(name='DeliverId'),
  status?: string(name='Status'),
}

model DescribeCdnDeliverListResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeCdnDeliverListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnDeliverListResponseBody(name='body'),
}

async function describeCdnDeliverListWithOptions(request: DescribeCdnDeliverListRequest, runtime: Util.RuntimeOptions): DescribeCdnDeliverListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCdnDeliverList', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCdnDeliverList(request: DescribeCdnDeliverListRequest): DescribeCdnDeliverListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnDeliverListWithOptions(request, runtime);
}

model DescribeCdnDomainByCertificateRequest {
  ownerId?: long(name='OwnerId'),
  SSLPub?: string(name='SSLPub'),
}

model DescribeCdnDomainByCertificateResponseBody = {
  requestId?: string(name='RequestId'),
  certInfos?: {
    certInfo?: [ 
    {
      certStartTime?: string(name='CertStartTime'),
      certExpireTime?: string(name='CertExpireTime'),
      certCaIsLegacy?: string(name='CertCaIsLegacy'),
      certSubjectCommonName?: string(name='CertSubjectCommonName'),
      certType?: string(name='CertType'),
      domainNames?: string(name='DomainNames'),
      certExpired?: string(name='CertExpired'),
      issuer?: string(name='Issuer'),
      domainList?: string(name='DomainList'),
    }
  ](name='CertInfo')
  }(name='CertInfos'),
}

model DescribeCdnDomainByCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnDomainByCertificateResponseBody(name='body'),
}

async function describeCdnDomainByCertificateWithOptions(request: DescribeCdnDomainByCertificateRequest, runtime: Util.RuntimeOptions): DescribeCdnDomainByCertificateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCdnDomainByCertificate', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCdnDomainByCertificate(request: DescribeCdnDomainByCertificateRequest): DescribeCdnDomainByCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnDomainByCertificateWithOptions(request, runtime);
}

model DescribeCdnDomainConfigsRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  functionNames?: string(name='FunctionNames'),
}

model DescribeCdnDomainConfigsResponseBody = {
  requestId?: string(name='RequestId'),
  domainConfigs?: {
    domainConfig?: [ 
    {
      status?: string(name='Status'),
      configId?: string(name='ConfigId'),
      functionName?: string(name='FunctionName'),
      functionArgs?: {
        functionArg?: [ 
        {
          argName?: string(name='ArgName'),
          argValue?: string(name='ArgValue'),
        }
      ](name='FunctionArg')
      }(name='FunctionArgs'),
    }
  ](name='DomainConfig')
  }(name='DomainConfigs'),
}

model DescribeCdnDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnDomainConfigsResponseBody(name='body'),
}

async function describeCdnDomainConfigsWithOptions(request: DescribeCdnDomainConfigsRequest, runtime: Util.RuntimeOptions): DescribeCdnDomainConfigsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCdnDomainConfigs', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCdnDomainConfigs(request: DescribeCdnDomainConfigsRequest): DescribeCdnDomainConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnDomainConfigsWithOptions(request, runtime);
}

model DescribeCdnDomainDetailRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
}

model DescribeCdnDomainDetailResponseBody = {
  requestId?: string(name='RequestId'),
  getDomainDetailModel?: {
    gmtCreated?: string(name='GmtCreated'),
    description?: string(name='Description'),
    httpsCname?: string(name='HttpsCname'),
    resourceGroupId?: string(name='ResourceGroupId'),
    serverCertificateStatus?: string(name='ServerCertificateStatus'),
    scope?: string(name='Scope'),
    domainStatus?: string(name='DomainStatus'),
    cname?: string(name='Cname'),
    gmtModified?: string(name='GmtModified'),
    cdnType?: string(name='CdnType'),
    domainName?: string(name='DomainName'),
    sourceModels?: {
      sourceModel?: [ 
      {
        type?: string(name='Type'),
        weight?: string(name='Weight'),
        enabled?: string(name='Enabled'),
        priority?: string(name='Priority'),
        port?: int32(name='Port'),
        content?: string(name='Content'),
      }
    ](name='SourceModel')
    }(name='SourceModels'),
  }(name='GetDomainDetailModel'),
}

model DescribeCdnDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnDomainDetailResponseBody(name='body'),
}

async function describeCdnDomainDetailWithOptions(request: DescribeCdnDomainDetailRequest, runtime: Util.RuntimeOptions): DescribeCdnDomainDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCdnDomainDetail', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCdnDomainDetail(request: DescribeCdnDomainDetailRequest): DescribeCdnDomainDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnDomainDetailWithOptions(request, runtime);
}

model DescribeCdnDomainLogsRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  pageSize?: long(name='PageSize'),
  pageNumber?: long(name='PageNumber'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeCdnDomainLogsResponseBody = {
  requestId?: string(name='RequestId'),
  domainLogDetails?: {
    domainLogDetail?: [ 
    {
      logCount?: long(name='LogCount'),
      domainName?: string(name='DomainName'),
      pageInfos?: {
        pageInfoDetail?: [ 
        {
          pageIndex?: long(name='PageIndex'),
          pageSize?: long(name='PageSize'),
          total?: long(name='Total'),
        }
      ](name='PageInfoDetail')
      }(name='PageInfos'),
      logInfos?: {
        logInfoDetail?: [ 
        {
          endTime?: string(name='EndTime'),
          logSize?: long(name='LogSize'),
          startTime?: string(name='StartTime'),
          logName?: string(name='LogName'),
          logPath?: string(name='LogPath'),
        }
      ](name='LogInfoDetail')
      }(name='LogInfos'),
    }
  ](name='DomainLogDetail')
  }(name='DomainLogDetails'),
}

model DescribeCdnDomainLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnDomainLogsResponseBody(name='body'),
}

async function describeCdnDomainLogsWithOptions(request: DescribeCdnDomainLogsRequest, runtime: Util.RuntimeOptions): DescribeCdnDomainLogsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCdnDomainLogs', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCdnDomainLogs(request: DescribeCdnDomainLogsRequest): DescribeCdnDomainLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnDomainLogsWithOptions(request, runtime);
}

model DescribeCdnDomainStagingConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  functionNames?: string(name='FunctionNames'),
}

model DescribeCdnDomainStagingConfigResponseBody = {
  requestId?: string(name='RequestId'),
  domainConfigs?: [ 
    {
      status?: string(name='Status'),
      configId?: string(name='ConfigId'),
      functionName?: string(name='FunctionName'),
      functionArgs?: [ 
        {
          argName?: string(name='ArgName'),
          argValue?: string(name='ArgValue'),
        }
      ](name='FunctionArgs'),
    }
  ](name='DomainConfigs'),
}

model DescribeCdnDomainStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnDomainStagingConfigResponseBody(name='body'),
}

async function describeCdnDomainStagingConfigWithOptions(request: DescribeCdnDomainStagingConfigRequest, runtime: Util.RuntimeOptions): DescribeCdnDomainStagingConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCdnDomainStagingConfig', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCdnDomainStagingConfig(request: DescribeCdnDomainStagingConfigRequest): DescribeCdnDomainStagingConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnDomainStagingConfigWithOptions(request, runtime);
}

model DescribeCdnHttpsDomainListRequest {
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  keyword?: string(name='Keyword'),
}

model DescribeCdnHttpsDomainListResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  certInfos?: {
    certInfo?: [ 
    {
      certStartTime?: string(name='CertStartTime'),
      certExpireTime?: string(name='CertExpireTime'),
      certUpdateTime?: string(name='CertUpdateTime'),
      certType?: string(name='CertType'),
      certName?: string(name='CertName'),
      certStatus?: string(name='CertStatus'),
      domainName?: string(name='DomainName'),
      certCommonName?: string(name='CertCommonName'),
    }
  ](name='CertInfo')
  }(name='CertInfos'),
}

model DescribeCdnHttpsDomainListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnHttpsDomainListResponseBody(name='body'),
}

async function describeCdnHttpsDomainListWithOptions(request: DescribeCdnHttpsDomainListRequest, runtime: Util.RuntimeOptions): DescribeCdnHttpsDomainListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCdnHttpsDomainList', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCdnHttpsDomainList(request: DescribeCdnHttpsDomainListRequest): DescribeCdnHttpsDomainListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnHttpsDomainListWithOptions(request, runtime);
}

model DescribeCdnRegionAndIspRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeCdnRegionAndIspResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: {
    region?: [ 
    {
      nameEn?: string(name='NameEn'),
      nameZh?: string(name='NameZh'),
    }
  ](name='Region')
  }(name='Regions'),
  isps?: {
    isp?: [ 
    {
      nameEn?: string(name='NameEn'),
      nameZh?: string(name='NameZh'),
    }
  ](name='Isp')
  }(name='Isps'),
}

model DescribeCdnRegionAndIspResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnRegionAndIspResponseBody(name='body'),
}

async function describeCdnRegionAndIspWithOptions(request: DescribeCdnRegionAndIspRequest, runtime: Util.RuntimeOptions): DescribeCdnRegionAndIspResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCdnRegionAndIsp', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCdnRegionAndIsp(request: DescribeCdnRegionAndIspRequest): DescribeCdnRegionAndIspResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnRegionAndIspWithOptions(request, runtime);
}

model DescribeCdnReportRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  reportId?: long(name='ReportId'),
  area?: string(name='Area'),
  isOverseas?: string(name='IsOverseas'),
  httpCode?: string(name='HttpCode'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeCdnReportResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeCdnReportResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnReportResponseBody(name='body'),
}

async function describeCdnReportWithOptions(request: DescribeCdnReportRequest, runtime: Util.RuntimeOptions): DescribeCdnReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCdnReport', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCdnReport(request: DescribeCdnReportRequest): DescribeCdnReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnReportWithOptions(request, runtime);
}

model DescribeCdnReportListRequest {
  ownerId?: long(name='OwnerId'),
  reportId?: long(name='ReportId'),
  status?: string(name='Status'),
  permission?: string(name='Permission'),
}

model DescribeCdnReportListResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeCdnReportListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnReportListResponseBody(name='body'),
}

async function describeCdnReportListWithOptions(request: DescribeCdnReportListRequest, runtime: Util.RuntimeOptions): DescribeCdnReportListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCdnReportList', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCdnReportList(request: DescribeCdnReportListRequest): DescribeCdnReportListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnReportListWithOptions(request, runtime);
}

model DescribeCdnServiceRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeCdnServiceResponseBody = {
  changingAffectTime?: string(name='ChangingAffectTime'),
  requestId?: string(name='RequestId'),
  changingChargeType?: string(name='ChangingChargeType'),
  openingTime?: string(name='OpeningTime'),
  internetChargeType?: string(name='InternetChargeType'),
  instanceId?: string(name='InstanceId'),
  operationLocks?: {
    lockReason?: [ 
    {
      lockReason?: string(name='LockReason'),
    }
  ](name='LockReason')
  }(name='OperationLocks'),
}

model DescribeCdnServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnServiceResponseBody(name='body'),
}

async function describeCdnServiceWithOptions(request: DescribeCdnServiceRequest, runtime: Util.RuntimeOptions): DescribeCdnServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCdnService', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCdnService(request: DescribeCdnServiceRequest): DescribeCdnServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnServiceWithOptions(request, runtime);
}

model DescribeCdnSubListRequest {
  ownerId?: long(name='OwnerId'),
  status?: string(name='Status'),
}

model DescribeCdnSubListResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeCdnSubListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnSubListResponseBody(name='body'),
}

async function describeCdnSubListWithOptions(request: DescribeCdnSubListRequest, runtime: Util.RuntimeOptions): DescribeCdnSubListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCdnSubList', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCdnSubList(request: DescribeCdnSubListRequest): DescribeCdnSubListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnSubListWithOptions(request, runtime);
}

model DescribeCdnUserBillHistoryRequest {
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeCdnUserBillHistoryResponseBody = {
  requestId?: string(name='RequestId'),
  billHistoryData?: {
    billHistoryDataItem?: [ 
    {
      dimension?: string(name='Dimension'),
      billType?: string(name='BillType'),
      billTime?: string(name='BillTime'),
      billingData?: {
        billingDataItem?: [ 
        {
          flow?: float(name='Flow'),
          bandwidth?: float(name='Bandwidth'),
          count?: float(name='Count'),
          cdnRegion?: string(name='CdnRegion'),
          chargeType?: string(name='ChargeType'),
        }
      ](name='BillingDataItem')
      }(name='BillingData'),
    }
  ](name='BillHistoryDataItem')
  }(name='BillHistoryData'),
}

model DescribeCdnUserBillHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnUserBillHistoryResponseBody(name='body'),
}

async function describeCdnUserBillHistoryWithOptions(request: DescribeCdnUserBillHistoryRequest, runtime: Util.RuntimeOptions): DescribeCdnUserBillHistoryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCdnUserBillHistory', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCdnUserBillHistory(request: DescribeCdnUserBillHistoryRequest): DescribeCdnUserBillHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnUserBillHistoryWithOptions(request, runtime);
}

model DescribeCdnUserBillPredictionRequest {
  ownerId?: long(name='OwnerId'),
  dimension?: string(name='Dimension'),
  area?: string(name='Area'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeCdnUserBillPredictionResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  billType?: string(name='BillType'),
  billPredictionData?: {
    billPredictionDataItem?: [ 
    {
      value?: float(name='Value'),
      timeStp?: string(name='TimeStp'),
      area?: string(name='Area'),
    }
  ](name='BillPredictionDataItem')
  }(name='BillPredictionData'),
}

model DescribeCdnUserBillPredictionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnUserBillPredictionResponseBody(name='body'),
}

async function describeCdnUserBillPredictionWithOptions(request: DescribeCdnUserBillPredictionRequest, runtime: Util.RuntimeOptions): DescribeCdnUserBillPredictionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCdnUserBillPrediction', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCdnUserBillPrediction(request: DescribeCdnUserBillPredictionRequest): DescribeCdnUserBillPredictionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnUserBillPredictionWithOptions(request, runtime);
}

model DescribeCdnUserBillTypeRequest {
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeCdnUserBillTypeResponseBody = {
  requestId?: string(name='RequestId'),
  billTypeData?: {
    billTypeDataItem?: [ 
    {
      endTime?: string(name='EndTime'),
      startTime?: string(name='StartTime'),
      billingCycle?: string(name='BillingCycle'),
      product?: string(name='Product'),
      billType?: string(name='BillType'),
      dimension?: string(name='Dimension'),
    }
  ](name='BillTypeDataItem')
  }(name='BillTypeData'),
}

model DescribeCdnUserBillTypeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnUserBillTypeResponseBody(name='body'),
}

async function describeCdnUserBillTypeWithOptions(request: DescribeCdnUserBillTypeRequest, runtime: Util.RuntimeOptions): DescribeCdnUserBillTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCdnUserBillType', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCdnUserBillType(request: DescribeCdnUserBillTypeRequest): DescribeCdnUserBillTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnUserBillTypeWithOptions(request, runtime);
}

model DescribeCdnUserConfigsRequest {
  ownerId?: long(name='OwnerId'),
  functionName?: string(name='FunctionName'),
}

model DescribeCdnUserConfigsResponseBody = {
  requestId?: string(name='RequestId'),
  configs?: [ 
    {
      argValue?: string(name='ArgValue'),
      argName?: string(name='ArgName'),
      functionName?: string(name='FunctionName'),
    }
  ](name='Configs'),
}

model DescribeCdnUserConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnUserConfigsResponseBody(name='body'),
}

async function describeCdnUserConfigsWithOptions(request: DescribeCdnUserConfigsRequest, runtime: Util.RuntimeOptions): DescribeCdnUserConfigsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCdnUserConfigs', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCdnUserConfigs(request: DescribeCdnUserConfigsRequest): DescribeCdnUserConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnUserConfigsWithOptions(request, runtime);
}

model DescribeCdnUserDomainsByFuncRequest {
  ownerId?: long(name='OwnerId'),
  funcId?: int32(name='FuncId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeCdnUserDomainsByFuncResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  totalCount?: long(name='TotalCount'),
  domains?: {
    pageData?: [ 
    {
      gmtCreated?: string(name='GmtCreated'),
      sslProtocol?: string(name='SslProtocol'),
      description?: string(name='Description'),
      resourceGroupId?: string(name='ResourceGroupId'),
      sandbox?: string(name='Sandbox'),
      domainStatus?: string(name='DomainStatus'),
      cname?: string(name='Cname'),
      gmtModified?: string(name='GmtModified'),
      cdnType?: string(name='CdnType'),
      domainName?: string(name='DomainName'),
      sources?: {
        source?: [ 
        {
          type?: string(name='Type'),
          weight?: string(name='Weight'),
          priority?: string(name='Priority'),
          port?: int32(name='Port'),
          content?: string(name='Content'),
        }
      ](name='Source')
      }(name='Sources'),
    }
  ](name='PageData')
  }(name='Domains'),
}

model DescribeCdnUserDomainsByFuncResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnUserDomainsByFuncResponseBody(name='body'),
}

async function describeCdnUserDomainsByFuncWithOptions(request: DescribeCdnUserDomainsByFuncRequest, runtime: Util.RuntimeOptions): DescribeCdnUserDomainsByFuncResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCdnUserDomainsByFunc', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCdnUserDomainsByFunc(request: DescribeCdnUserDomainsByFuncRequest): DescribeCdnUserDomainsByFuncResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnUserDomainsByFuncWithOptions(request, runtime);
}

model DescribeCdnUserQuotaRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeCdnUserQuotaResponseBody = {
  blockQuota?: int32(name='BlockQuota'),
  refreshUrlRemain?: int32(name='RefreshUrlRemain'),
  domainQuota?: int32(name='DomainQuota'),
  blockRemain?: int32(name='BlockRemain'),
  preloadRemain?: int32(name='PreloadRemain'),
  requestId?: string(name='RequestId'),
  refreshUrlQuota?: int32(name='RefreshUrlQuota'),
  preloadQuota?: int32(name='PreloadQuota'),
  refreshDirQuota?: int32(name='RefreshDirQuota'),
  refreshDirRemain?: int32(name='RefreshDirRemain'),
}

model DescribeCdnUserQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnUserQuotaResponseBody(name='body'),
}

async function describeCdnUserQuotaWithOptions(request: DescribeCdnUserQuotaRequest, runtime: Util.RuntimeOptions): DescribeCdnUserQuotaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCdnUserQuota', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCdnUserQuota(request: DescribeCdnUserQuotaRequest): DescribeCdnUserQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnUserQuotaWithOptions(request, runtime);
}

model DescribeCdnUserResourcePackageRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeCdnUserResourcePackageResponseBody = {
  requestId?: string(name='RequestId'),
  resourcePackageInfos?: {
    resourcePackageInfo?: [ 
    {
      endTime?: string(name='EndTime'),
      status?: string(name='Status'),
      displayName?: string(name='DisplayName'),
      startTime?: string(name='StartTime'),
      commodityCode?: string(name='CommodityCode'),
      currCapacity?: string(name='CurrCapacity'),
      initCapacity?: string(name='InitCapacity'),
      instanceId?: string(name='InstanceId'),
      templateName?: string(name='TemplateName'),
    }
  ](name='ResourcePackageInfo')
  }(name='ResourcePackageInfos'),
}

model DescribeCdnUserResourcePackageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnUserResourcePackageResponseBody(name='body'),
}

async function describeCdnUserResourcePackageWithOptions(request: DescribeCdnUserResourcePackageRequest, runtime: Util.RuntimeOptions): DescribeCdnUserResourcePackageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCdnUserResourcePackage', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCdnUserResourcePackage(request: DescribeCdnUserResourcePackageRequest): DescribeCdnUserResourcePackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnUserResourcePackageWithOptions(request, runtime);
}

model DescribeCdnWafDomainRequest {
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  domainName?: string(name='DomainName'),
}

model DescribeCdnWafDomainResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  outPutDomains?: [ 
    {
      aclStatus?: string(name='AclStatus'),
      status?: string(name='Status'),
      domain?: string(name='Domain'),
      ccStatus?: string(name='CcStatus'),
      wafStatus?: string(name='WafStatus'),
    }
  ](name='OutPutDomains'),
}

model DescribeCdnWafDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnWafDomainResponseBody(name='body'),
}

async function describeCdnWafDomainWithOptions(request: DescribeCdnWafDomainRequest, runtime: Util.RuntimeOptions): DescribeCdnWafDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCdnWafDomain', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCdnWafDomain(request: DescribeCdnWafDomainRequest): DescribeCdnWafDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnWafDomainWithOptions(request, runtime);
}

model DescribeCertificateInfoByIDRequest {
  ownerId?: long(name='OwnerId'),
  certId?: string(name='CertId'),
}

model DescribeCertificateInfoByIDResponseBody = {
  requestId?: string(name='RequestId'),
  certInfos?: {
    certInfo?: [ 
    {
      certExpireTime?: string(name='CertExpireTime'),
      createTime?: string(name='CreateTime'),
      certType?: string(name='CertType'),
      certName?: string(name='CertName'),
      certId?: string(name='CertId'),
      domainList?: string(name='DomainList'),
      httpsCrt?: string(name='HttpsCrt'),
    }
  ](name='CertInfo')
  }(name='CertInfos'),
}

model DescribeCertificateInfoByIDResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCertificateInfoByIDResponseBody(name='body'),
}

async function describeCertificateInfoByIDWithOptions(request: DescribeCertificateInfoByIDRequest, runtime: Util.RuntimeOptions): DescribeCertificateInfoByIDResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeCertificateInfoByID', '2018-05-10', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeCertificateInfoByID(request: DescribeCertificateInfoByIDRequest): DescribeCertificateInfoByIDResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCertificateInfoByIDWithOptions(request, runtime);
}

model DescribeConfigOfVersionRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  versionId?: string(name='VersionId'),
  functionId?: int32(name='FunctionId'),
  functionName?: string(name='FunctionName'),
  groupId?: long(name='GroupId'),
}

model DescribeConfigOfVersionResponseBody = {
  requestId?: string(name='RequestId'),
  versionConfigs?: {
    versionConfig?: [ 
    {
      status?: string(name='Status'),
      configId?: string(name='ConfigId'),
      functionName?: string(name='FunctionName'),
      functionArgs?: {
        functionArg?: [ 
        {
          argName?: string(name='ArgName'),
          argValue?: string(name='ArgValue'),
        }
      ](name='FunctionArg')
      }(name='FunctionArgs'),
    }
  ](name='VersionConfig')
  }(name='VersionConfigs'),
}

model DescribeConfigOfVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConfigOfVersionResponseBody(name='body'),
}

async function describeConfigOfVersionWithOptions(request: DescribeConfigOfVersionRequest, runtime: Util.RuntimeOptions): DescribeConfigOfVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeConfigOfVersion', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeConfigOfVersion(request: DescribeConfigOfVersionRequest): DescribeConfigOfVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeConfigOfVersionWithOptions(request, runtime);
}

model DescribeCustomLogConfigRequest {
  ownerId?: long(name='OwnerId'),
  configId?: string(name='ConfigId'),
}

model DescribeCustomLogConfigResponseBody = {
  tag?: string(name='Tag'),
  requestId?: string(name='RequestId'),
  remark?: string(name='Remark'),
  sample?: string(name='Sample'),
}

model DescribeCustomLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCustomLogConfigResponseBody(name='body'),
}

async function describeCustomLogConfigWithOptions(request: DescribeCustomLogConfigRequest, runtime: Util.RuntimeOptions): DescribeCustomLogConfigResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeCustomLogConfig', '2018-05-10', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeCustomLogConfig(request: DescribeCustomLogConfigRequest): DescribeCustomLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomLogConfigWithOptions(request, runtime);
}

model DescribeDomainAverageResponseTimeRequest {
  ownerId?: long(name='OwnerId'),
  timeMerge?: string(name='TimeMerge'),
  domainType?: string(name='DomainType'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
}

model DescribeDomainAverageResponseTimeResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  avgRTPerInterval?: {
    dataModule?: [ 
    {
      value?: string(name='Value'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='AvgRTPerInterval'),
}

model DescribeDomainAverageResponseTimeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainAverageResponseTimeResponseBody(name='body'),
}

async function describeDomainAverageResponseTimeWithOptions(request: DescribeDomainAverageResponseTimeRequest, runtime: Util.RuntimeOptions): DescribeDomainAverageResponseTimeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainAverageResponseTime', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainAverageResponseTime(request: DescribeDomainAverageResponseTimeRequest): DescribeDomainAverageResponseTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainAverageResponseTimeWithOptions(request, runtime);
}

model DescribeDomainBpsDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
}

model DescribeDomainBpsDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  bpsDataPerInterval?: {
    dataModule?: [ 
    {
      httpsDomesticValue?: string(name='HttpsDomesticValue'),
      value?: string(name='Value'),
      overseasValue?: string(name='OverseasValue'),
      httpsValue?: string(name='HttpsValue'),
      httpsOverseasValue?: string(name='HttpsOverseasValue'),
      timeStamp?: string(name='TimeStamp'),
      domesticValue?: string(name='DomesticValue'),
    }
  ](name='DataModule')
  }(name='BpsDataPerInterval'),
}

model DescribeDomainBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainBpsDataResponseBody(name='body'),
}

async function describeDomainBpsDataWithOptions(request: DescribeDomainBpsDataRequest, runtime: Util.RuntimeOptions): DescribeDomainBpsDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainBpsData', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainBpsData(request: DescribeDomainBpsDataRequest): DescribeDomainBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainBpsDataWithOptions(request, runtime);
}

model DescribeDomainBpsDataByLayerRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  layer?: string(name='Layer'),
}

model DescribeDomainBpsDataByLayerResponseBody = {
  dataInterval?: string(name='DataInterval'),
  requestId?: string(name='RequestId'),
  bpsDataInterval?: {
    dataModule?: [ 
    {
      value?: string(name='Value'),
      trafficValue?: string(name='TrafficValue'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='BpsDataInterval'),
}

model DescribeDomainBpsDataByLayerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainBpsDataByLayerResponseBody(name='body'),
}

async function describeDomainBpsDataByLayerWithOptions(request: DescribeDomainBpsDataByLayerRequest, runtime: Util.RuntimeOptions): DescribeDomainBpsDataByLayerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainBpsDataByLayer', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainBpsDataByLayer(request: DescribeDomainBpsDataByLayerRequest): DescribeDomainBpsDataByLayerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainBpsDataByLayerWithOptions(request, runtime);
}

model DescribeDomainBpsDataByTimeStampRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  timePoint?: string(name='TimePoint'),
  ispNames?: string(name='IspNames'),
  locationNames?: string(name='LocationNames'),
}

model DescribeDomainBpsDataByTimeStampResponseBody = {
  timeStamp?: string(name='TimeStamp'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  bpsDataList?: {
    bpsDataModel?: [ 
    {
      locationName?: string(name='LocationName'),
      timeStamp?: string(name='TimeStamp'),
      ispName?: string(name='IspName'),
      bps?: long(name='Bps'),
    }
  ](name='BpsDataModel')
  }(name='BpsDataList'),
}

model DescribeDomainBpsDataByTimeStampResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainBpsDataByTimeStampResponseBody(name='body'),
}

async function describeDomainBpsDataByTimeStampWithOptions(request: DescribeDomainBpsDataByTimeStampRequest, runtime: Util.RuntimeOptions): DescribeDomainBpsDataByTimeStampResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainBpsDataByTimeStamp', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainBpsDataByTimeStamp(request: DescribeDomainBpsDataByTimeStampRequest): DescribeDomainBpsDataByTimeStampResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainBpsDataByTimeStampWithOptions(request, runtime);
}

model DescribeDomainCcActivityLogRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  triggerObject?: string(name='TriggerObject'),
  value?: string(name='Value'),
  ruleName?: string(name='RuleName'),
  pageSize?: long(name='PageSize'),
  pageNumber?: long(name='PageNumber'),
}

model DescribeDomainCcActivityLogResponseBody = {
  pageIndex?: long(name='PageIndex'),
  requestId?: string(name='RequestId'),
  pageSize?: long(name='PageSize'),
  total?: long(name='Total'),
  activityLog?: [ 
    {
      value?: string(name='Value'),
      ttl?: long(name='Ttl'),
      action?: string(name='Action'),
      triggerObject?: string(name='TriggerObject'),
      timeStamp?: string(name='TimeStamp'),
      domainName?: string(name='DomainName'),
      ruleName?: string(name='RuleName'),
    }
  ](name='ActivityLog'),
}

model DescribeDomainCcActivityLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainCcActivityLogResponseBody(name='body'),
}

async function describeDomainCcActivityLogWithOptions(request: DescribeDomainCcActivityLogRequest, runtime: Util.RuntimeOptions): DescribeDomainCcActivityLogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainCcActivityLog', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainCcActivityLog(request: DescribeDomainCcActivityLogRequest): DescribeDomainCcActivityLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainCcActivityLogWithOptions(request, runtime);
}

model DescribeDomainCertificateInfoRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model DescribeDomainCertificateInfoResponseBody = {
  requestId?: string(name='RequestId'),
  certInfos?: {
    certInfo?: [ 
    {
      certExpireTime?: string(name='CertExpireTime'),
      certLife?: string(name='CertLife'),
      status?: string(name='Status'),
      certUpdateTime?: string(name='CertUpdateTime'),
      certDomainName?: string(name='CertDomainName'),
      serverCertificateStatus?: string(name='ServerCertificateStatus'),
      certOrg?: string(name='CertOrg'),
      domainName?: string(name='DomainName'),
      certStartTime?: string(name='CertStartTime'),
      certType?: string(name='CertType'),
      certName?: string(name='CertName'),
      domainCnameStatus?: string(name='DomainCnameStatus'),
      serverCertificate?: string(name='ServerCertificate'),
    }
  ](name='CertInfo')
  }(name='CertInfos'),
}

model DescribeDomainCertificateInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainCertificateInfoResponseBody(name='body'),
}

async function describeDomainCertificateInfoWithOptions(request: DescribeDomainCertificateInfoRequest, runtime: Util.RuntimeOptions): DescribeDomainCertificateInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainCertificateInfo', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainCertificateInfo(request: DescribeDomainCertificateInfoRequest): DescribeDomainCertificateInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainCertificateInfoWithOptions(request, runtime);
}

model DescribeDomainCustomLogConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model DescribeDomainCustomLogConfigResponseBody = {
  configId?: string(name='ConfigId'),
  tag?: string(name='Tag'),
  requestId?: string(name='RequestId'),
  remark?: string(name='Remark'),
  sample?: string(name='Sample'),
}

model DescribeDomainCustomLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainCustomLogConfigResponseBody(name='body'),
}

async function describeDomainCustomLogConfigWithOptions(request: DescribeDomainCustomLogConfigRequest, runtime: Util.RuntimeOptions): DescribeDomainCustomLogConfigResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeDomainCustomLogConfig', '2018-05-10', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeDomainCustomLogConfig(request: DescribeDomainCustomLogConfigRequest): DescribeDomainCustomLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainCustomLogConfigWithOptions(request, runtime);
}

model DescribeDomainDetailDataByLayerRequest {
  ownerId?: long(name='OwnerId'),
  field?: string(name='Field'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  layer?: string(name='Layer'),
}

model DescribeDomainDetailDataByLayerResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    dataModule?: [ 
    {
      traf?: long(name='Traf'),
      qps?: float(name='Qps'),
      ipv6Qps?: float(name='Ipv6Qps'),
      ipv6Bps?: float(name='Ipv6Bps'),
      acc?: long(name='Acc'),
      ipv6Traf?: long(name='Ipv6Traf'),
      ipv6Acc?: long(name='Ipv6Acc'),
      timeStamp?: string(name='TimeStamp'),
      httpCode?: string(name='HttpCode'),
      bps?: float(name='Bps'),
      domainName?: string(name='DomainName'),
    }
  ](name='DataModule')
  }(name='Data'),
}

model DescribeDomainDetailDataByLayerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainDetailDataByLayerResponseBody(name='body'),
}

async function describeDomainDetailDataByLayerWithOptions(request: DescribeDomainDetailDataByLayerRequest, runtime: Util.RuntimeOptions): DescribeDomainDetailDataByLayerResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeDomainDetailDataByLayer', '2018-05-10', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeDomainDetailDataByLayer(request: DescribeDomainDetailDataByLayerRequest): DescribeDomainDetailDataByLayerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainDetailDataByLayerWithOptions(request, runtime);
}

model DescribeDomainFileSizeProportionDataRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDomainFileSizeProportionDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  fileSizeProportionDataInterval?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: {
        fileSizeProportionData?: [ 
        {
          proportion?: string(name='Proportion'),
          fileSize?: string(name='FileSize'),
        }
      ](name='FileSizeProportionData')
      }(name='Value'),
    }
  ](name='UsageData')
  }(name='FileSizeProportionDataInterval'),
}

model DescribeDomainFileSizeProportionDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainFileSizeProportionDataResponseBody(name='body'),
}

async function describeDomainFileSizeProportionDataWithOptions(request: DescribeDomainFileSizeProportionDataRequest, runtime: Util.RuntimeOptions): DescribeDomainFileSizeProportionDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainFileSizeProportionData', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainFileSizeProportionData(request: DescribeDomainFileSizeProportionDataRequest): DescribeDomainFileSizeProportionDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainFileSizeProportionDataWithOptions(request, runtime);
}

model DescribeDomainHitRateDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
}

model DescribeDomainHitRateDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  hitRateInterval?: {
    dataModule?: [ 
    {
      value?: string(name='Value'),
      timeStamp?: string(name='TimeStamp'),
      httpsValue?: string(name='HttpsValue'),
    }
  ](name='DataModule')
  }(name='HitRateInterval'),
}

model DescribeDomainHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainHitRateDataResponseBody(name='body'),
}

async function describeDomainHitRateDataWithOptions(request: DescribeDomainHitRateDataRequest, runtime: Util.RuntimeOptions): DescribeDomainHitRateDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainHitRateData', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainHitRateData(request: DescribeDomainHitRateDataRequest): DescribeDomainHitRateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainHitRateDataWithOptions(request, runtime);
}

model DescribeDomainHttpCodeDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
}

model DescribeDomainHttpCodeDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  httpCodeData?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: {
        codeProportionData?: [ 
        {
          code?: string(name='Code'),
          proportion?: string(name='Proportion'),
          count?: string(name='Count'),
        }
      ](name='CodeProportionData')
      }(name='Value'),
    }
  ](name='UsageData')
  }(name='HttpCodeData'),
}

model DescribeDomainHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainHttpCodeDataResponseBody(name='body'),
}

async function describeDomainHttpCodeDataWithOptions(request: DescribeDomainHttpCodeDataRequest, runtime: Util.RuntimeOptions): DescribeDomainHttpCodeDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainHttpCodeData', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainHttpCodeData(request: DescribeDomainHttpCodeDataRequest): DescribeDomainHttpCodeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainHttpCodeDataWithOptions(request, runtime);
}

model DescribeDomainHttpCodeDataByLayerRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  layer?: string(name='Layer'),
}

model DescribeDomainHttpCodeDataByLayerResponseBody = {
  dataInterval?: string(name='DataInterval'),
  requestId?: string(name='RequestId'),
  httpCodeDataInterval?: {
    dataModule?: [ 
    {
      value?: string(name='Value'),
      timeStamp?: string(name='TimeStamp'),
      totalValue?: string(name='TotalValue'),
    }
  ](name='DataModule')
  }(name='HttpCodeDataInterval'),
}

model DescribeDomainHttpCodeDataByLayerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainHttpCodeDataByLayerResponseBody(name='body'),
}

async function describeDomainHttpCodeDataByLayerWithOptions(request: DescribeDomainHttpCodeDataByLayerRequest, runtime: Util.RuntimeOptions): DescribeDomainHttpCodeDataByLayerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainHttpCodeDataByLayer', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainHttpCodeDataByLayer(request: DescribeDomainHttpCodeDataByLayerRequest): DescribeDomainHttpCodeDataByLayerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainHttpCodeDataByLayerWithOptions(request, runtime);
}

model DescribeDomainISPDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDomainISPDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  value?: {
    ISPProportionData?: [ 
    {
      totalQuery?: string(name='TotalQuery'),
      totalBytes?: string(name='TotalBytes'),
      avgResponseRate?: string(name='AvgResponseRate'),
      avgResponseTime?: string(name='AvgResponseTime'),
      reqErrRate?: string(name='ReqErrRate'),
      avgObjectSize?: string(name='AvgObjectSize'),
      bps?: string(name='Bps'),
      qps?: string(name='Qps'),
      proportion?: string(name='Proportion'),
      ispEname?: string(name='IspEname'),
      ISP?: string(name='ISP'),
      bytesProportion?: string(name='BytesProportion'),
    }
  ](name='ISPProportionData')
  }(name='Value'),
}

model DescribeDomainISPDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainISPDataResponseBody(name='body'),
}

async function describeDomainISPDataWithOptions(request: DescribeDomainISPDataRequest, runtime: Util.RuntimeOptions): DescribeDomainISPDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainISPData', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainISPData(request: DescribeDomainISPDataRequest): DescribeDomainISPDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainISPDataWithOptions(request, runtime);
}

model DescribeDomainMax95BpsDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  timePoint?: string(name='TimePoint'),
  cycle?: string(name='Cycle'),
}

model DescribeDomainMax95BpsDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domesticMax95Bps?: string(name='DomesticMax95Bps'),
  overseasMax95Bps?: string(name='OverseasMax95Bps'),
  max95Bps?: string(name='Max95Bps'),
  domainName?: string(name='DomainName'),
}

model DescribeDomainMax95BpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainMax95BpsDataResponseBody(name='body'),
}

async function describeDomainMax95BpsDataWithOptions(request: DescribeDomainMax95BpsDataRequest, runtime: Util.RuntimeOptions): DescribeDomainMax95BpsDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainMax95BpsData', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainMax95BpsData(request: DescribeDomainMax95BpsDataRequest): DescribeDomainMax95BpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainMax95BpsDataWithOptions(request, runtime);
}

model DescribeDomainNamesOfVersionRequest {
  ownerId?: long(name='OwnerId'),
  versionId?: string(name='VersionId'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: string(name='PageSize'),
}

model DescribeDomainNamesOfVersionResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  contents?: [ 
    {
      domainName?: string(name='DomainName'),
      domainId?: string(name='DomainId'),
    }
  ](name='Contents'),
}

model DescribeDomainNamesOfVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainNamesOfVersionResponseBody(name='body'),
}

async function describeDomainNamesOfVersionWithOptions(request: DescribeDomainNamesOfVersionRequest, runtime: Util.RuntimeOptions): DescribeDomainNamesOfVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainNamesOfVersion', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainNamesOfVersion(request: DescribeDomainNamesOfVersionRequest): DescribeDomainNamesOfVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainNamesOfVersionWithOptions(request, runtime);
}

model DescribeDomainPathDataRequest {
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  path?: string(name='Path'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  domainName?: string(name='DomainName'),
}

model DescribeDomainPathDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  totalCount?: int32(name='TotalCount'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  pathDataPerInterval?: {
    usageData?: [ 
    {
      path?: string(name='Path'),
      time?: string(name='Time'),
      acc?: int32(name='Acc'),
      traffic?: int32(name='Traffic'),
    }
  ](name='UsageData')
  }(name='PathDataPerInterval'),
}

model DescribeDomainPathDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainPathDataResponseBody(name='body'),
}

async function describeDomainPathDataWithOptions(request: DescribeDomainPathDataRequest, runtime: Util.RuntimeOptions): DescribeDomainPathDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeDomainPathData', '2018-05-10', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeDomainPathData(request: DescribeDomainPathDataRequest): DescribeDomainPathDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainPathDataWithOptions(request, runtime);
}

model DescribeDomainPvDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDomainPvDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  pvDataInterval?: {
    usageData?: [ 
    {
      value?: string(name='Value'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='UsageData')
  }(name='PvDataInterval'),
}

model DescribeDomainPvDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainPvDataResponseBody(name='body'),
}

async function describeDomainPvDataWithOptions(request: DescribeDomainPvDataRequest, runtime: Util.RuntimeOptions): DescribeDomainPvDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainPvData', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainPvData(request: DescribeDomainPvDataRequest): DescribeDomainPvDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainPvDataWithOptions(request, runtime);
}

model DescribeDomainQpsDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
}

model DescribeDomainQpsDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  qpsDataInterval?: {
    dataModule?: [ 
    {
      accValue?: string(name='AccValue'),
      accDomesticValue?: string(name='AccDomesticValue'),
      accOverseasValue?: string(name='AccOverseasValue'),
      httpsValue?: string(name='HttpsValue'),
      httpsOverseasValue?: string(name='HttpsOverseasValue'),
      domesticValue?: string(name='DomesticValue'),
      httpsAccOverseasValue?: string(name='HttpsAccOverseasValue'),
      httpsDomesticValue?: string(name='HttpsDomesticValue'),
      httpsAccValue?: string(name='HttpsAccValue'),
      value?: string(name='Value'),
      overseasValue?: string(name='OverseasValue'),
      timeStamp?: string(name='TimeStamp'),
      httpsAccDomesticValue?: string(name='HttpsAccDomesticValue'),
    }
  ](name='DataModule')
  }(name='QpsDataInterval'),
}

model DescribeDomainQpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainQpsDataResponseBody(name='body'),
}

async function describeDomainQpsDataWithOptions(request: DescribeDomainQpsDataRequest, runtime: Util.RuntimeOptions): DescribeDomainQpsDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainQpsData', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainQpsData(request: DescribeDomainQpsDataRequest): DescribeDomainQpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainQpsDataWithOptions(request, runtime);
}

model DescribeDomainQpsDataByLayerRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  layer?: string(name='Layer'),
}

model DescribeDomainQpsDataByLayerResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  layer?: string(name='Layer'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  qpsDataInterval?: {
    dataModule?: [ 
    {
      value?: string(name='Value'),
      accValue?: string(name='AccValue'),
      accDomesticValue?: string(name='AccDomesticValue'),
      overseasValue?: string(name='OverseasValue'),
      accOverseasValue?: string(name='AccOverseasValue'),
      timeStamp?: string(name='TimeStamp'),
      domesticValue?: string(name='DomesticValue'),
    }
  ](name='DataModule')
  }(name='QpsDataInterval'),
}

model DescribeDomainQpsDataByLayerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainQpsDataByLayerResponseBody(name='body'),
}

async function describeDomainQpsDataByLayerWithOptions(request: DescribeDomainQpsDataByLayerRequest, runtime: Util.RuntimeOptions): DescribeDomainQpsDataByLayerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainQpsDataByLayer', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainQpsDataByLayer(request: DescribeDomainQpsDataByLayerRequest): DescribeDomainQpsDataByLayerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainQpsDataByLayerWithOptions(request, runtime);
}

model DescribeDomainRealTimeBpsDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDomainRealTimeBpsDataResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    bpsModel?: [ 
    {
      bps?: float(name='Bps'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='BpsModel')
  }(name='Data'),
}

model DescribeDomainRealTimeBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainRealTimeBpsDataResponseBody(name='body'),
}

async function describeDomainRealTimeBpsDataWithOptions(request: DescribeDomainRealTimeBpsDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeBpsDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeDomainRealTimeBpsData', '2018-05-10', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeDomainRealTimeBpsData(request: DescribeDomainRealTimeBpsDataRequest): DescribeDomainRealTimeBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeBpsDataWithOptions(request, runtime);
}

model DescribeDomainRealTimeByteHitRateDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDomainRealTimeByteHitRateDataResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    byteHitRateDataModel?: [ 
    {
      byteHitRate?: float(name='ByteHitRate'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='ByteHitRateDataModel')
  }(name='Data'),
}

model DescribeDomainRealTimeByteHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainRealTimeByteHitRateDataResponseBody(name='body'),
}

async function describeDomainRealTimeByteHitRateDataWithOptions(request: DescribeDomainRealTimeByteHitRateDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeByteHitRateDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeDomainRealTimeByteHitRateData', '2018-05-10', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeDomainRealTimeByteHitRateData(request: DescribeDomainRealTimeByteHitRateDataRequest): DescribeDomainRealTimeByteHitRateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeByteHitRateDataWithOptions(request, runtime);
}

model DescribeDomainRealTimeDetailDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  field?: string(name='Field'),
  locationNameEn?: string(name='LocationNameEn'),
  ispNameEn?: string(name='IspNameEn'),
  merge?: string(name='Merge'),
  mergeLocIsp?: string(name='MergeLocIsp'),
}

model DescribeDomainRealTimeDetailDataResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainRealTimeDetailDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainRealTimeDetailDataResponseBody(name='body'),
}

async function describeDomainRealTimeDetailDataWithOptions(request: DescribeDomainRealTimeDetailDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeDetailDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeDomainRealTimeDetailData', '2018-05-10', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeDomainRealTimeDetailData(request: DescribeDomainRealTimeDetailDataRequest): DescribeDomainRealTimeDetailDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeDetailDataWithOptions(request, runtime);
}

model DescribeDomainRealTimeHttpCodeDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
}

model DescribeDomainRealTimeHttpCodeDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  realTimeHttpCodeData?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: {
        realTimeCodeProportionData?: [ 
        {
          code?: string(name='Code'),
          proportion?: string(name='Proportion'),
          count?: string(name='Count'),
        }
      ](name='RealTimeCodeProportionData')
      }(name='Value'),
    }
  ](name='UsageData')
  }(name='RealTimeHttpCodeData'),
}

model DescribeDomainRealTimeHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainRealTimeHttpCodeDataResponseBody(name='body'),
}

async function describeDomainRealTimeHttpCodeDataWithOptions(request: DescribeDomainRealTimeHttpCodeDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeHttpCodeDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainRealTimeHttpCodeData', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainRealTimeHttpCodeData(request: DescribeDomainRealTimeHttpCodeDataRequest): DescribeDomainRealTimeHttpCodeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeHttpCodeDataWithOptions(request, runtime);
}

model DescribeDomainRealtimeLogDeliveryRequest {
  ownerId?: long(name='OwnerId'),
  domain?: string(name='Domain'),
}

model DescribeDomainRealtimeLogDeliveryResponseBody = {
  status?: string(name='Status'),
  logstore?: string(name='Logstore'),
  project?: string(name='Project'),
  requestId?: string(name='RequestId'),
  region?: string(name='Region'),
}

model DescribeDomainRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainRealtimeLogDeliveryResponseBody(name='body'),
}

async function describeDomainRealtimeLogDeliveryWithOptions(request: DescribeDomainRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): DescribeDomainRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeDomainRealtimeLogDelivery', '2018-05-10', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeDomainRealtimeLogDelivery(request: DescribeDomainRealtimeLogDeliveryRequest): DescribeDomainRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealtimeLogDeliveryWithOptions(request, runtime);
}

model DescribeDomainRealTimeQpsDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDomainRealTimeQpsDataResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    qpsModel?: [ 
    {
      qps?: float(name='Qps'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='QpsModel')
  }(name='Data'),
}

model DescribeDomainRealTimeQpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainRealTimeQpsDataResponseBody(name='body'),
}

async function describeDomainRealTimeQpsDataWithOptions(request: DescribeDomainRealTimeQpsDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeQpsDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeDomainRealTimeQpsData', '2018-05-10', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeDomainRealTimeQpsData(request: DescribeDomainRealTimeQpsDataRequest): DescribeDomainRealTimeQpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeQpsDataWithOptions(request, runtime);
}

model DescribeDomainRealTimeReqHitRateDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDomainRealTimeReqHitRateDataResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    reqHitRateDataModel?: [ 
    {
      reqHitRate?: float(name='ReqHitRate'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='ReqHitRateDataModel')
  }(name='Data'),
}

model DescribeDomainRealTimeReqHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainRealTimeReqHitRateDataResponseBody(name='body'),
}

async function describeDomainRealTimeReqHitRateDataWithOptions(request: DescribeDomainRealTimeReqHitRateDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeReqHitRateDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeDomainRealTimeReqHitRateData', '2018-05-10', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeDomainRealTimeReqHitRateData(request: DescribeDomainRealTimeReqHitRateDataRequest): DescribeDomainRealTimeReqHitRateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeReqHitRateDataWithOptions(request, runtime);
}

model DescribeDomainRealTimeSrcBpsDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDomainRealTimeSrcBpsDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  realTimeSrcBpsDataPerInterval?: {
    dataModule?: [ 
    {
      value?: string(name='Value'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='RealTimeSrcBpsDataPerInterval'),
}

model DescribeDomainRealTimeSrcBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainRealTimeSrcBpsDataResponseBody(name='body'),
}

async function describeDomainRealTimeSrcBpsDataWithOptions(request: DescribeDomainRealTimeSrcBpsDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeSrcBpsDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainRealTimeSrcBpsData', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainRealTimeSrcBpsData(request: DescribeDomainRealTimeSrcBpsDataRequest): DescribeDomainRealTimeSrcBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeSrcBpsDataWithOptions(request, runtime);
}

model DescribeDomainRealTimeSrcHttpCodeDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
}

model DescribeDomainRealTimeSrcHttpCodeDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  realTimeSrcHttpCodeData?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: {
        realTimeSrcCodeProportionData?: [ 
        {
          code?: string(name='Code'),
          proportion?: string(name='Proportion'),
          count?: string(name='Count'),
        }
      ](name='RealTimeSrcCodeProportionData')
      }(name='Value'),
    }
  ](name='UsageData')
  }(name='RealTimeSrcHttpCodeData'),
}

model DescribeDomainRealTimeSrcHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainRealTimeSrcHttpCodeDataResponseBody(name='body'),
}

async function describeDomainRealTimeSrcHttpCodeDataWithOptions(request: DescribeDomainRealTimeSrcHttpCodeDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeSrcHttpCodeDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainRealTimeSrcHttpCodeData', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainRealTimeSrcHttpCodeData(request: DescribeDomainRealTimeSrcHttpCodeDataRequest): DescribeDomainRealTimeSrcHttpCodeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeSrcHttpCodeDataWithOptions(request, runtime);
}

model DescribeDomainRealTimeSrcTrafficDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDomainRealTimeSrcTrafficDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  realTimeSrcTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      value?: string(name='Value'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='RealTimeSrcTrafficDataPerInterval'),
}

model DescribeDomainRealTimeSrcTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainRealTimeSrcTrafficDataResponseBody(name='body'),
}

async function describeDomainRealTimeSrcTrafficDataWithOptions(request: DescribeDomainRealTimeSrcTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeSrcTrafficDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainRealTimeSrcTrafficData', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainRealTimeSrcTrafficData(request: DescribeDomainRealTimeSrcTrafficDataRequest): DescribeDomainRealTimeSrcTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeSrcTrafficDataWithOptions(request, runtime);
}

model DescribeDomainRealTimeTrafficDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  endTime?: string(name='EndTime'),
}

model DescribeDomainRealTimeTrafficDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  realTimeTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      value?: string(name='Value'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='RealTimeTrafficDataPerInterval'),
}

model DescribeDomainRealTimeTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainRealTimeTrafficDataResponseBody(name='body'),
}

async function describeDomainRealTimeTrafficDataWithOptions(request: DescribeDomainRealTimeTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeTrafficDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainRealTimeTrafficData', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainRealTimeTrafficData(request: DescribeDomainRealTimeTrafficDataRequest): DescribeDomainRealTimeTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeTrafficDataWithOptions(request, runtime);
}

model DescribeDomainRegionDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDomainRegionDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  value?: {
    regionProportionData?: [ 
    {
      totalQuery?: string(name='TotalQuery'),
      totalBytes?: string(name='TotalBytes'),
      avgResponseRate?: string(name='AvgResponseRate'),
      avgResponseTime?: string(name='AvgResponseTime'),
      reqErrRate?: string(name='ReqErrRate'),
      avgObjectSize?: string(name='AvgObjectSize'),
      bps?: string(name='Bps'),
      qps?: string(name='Qps'),
      regionEname?: string(name='RegionEname'),
      region?: string(name='Region'),
      proportion?: string(name='Proportion'),
      bytesProportion?: string(name='BytesProportion'),
    }
  ](name='RegionProportionData')
  }(name='Value'),
}

model DescribeDomainRegionDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainRegionDataResponseBody(name='body'),
}

async function describeDomainRegionDataWithOptions(request: DescribeDomainRegionDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRegionDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainRegionData', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainRegionData(request: DescribeDomainRegionDataRequest): DescribeDomainRegionDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRegionDataWithOptions(request, runtime);
}

model DescribeDomainReqHitRateDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
}

model DescribeDomainReqHitRateDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  reqHitRateInterval?: {
    dataModule?: [ 
    {
      value?: string(name='Value'),
      timeStamp?: string(name='TimeStamp'),
      httpsValue?: string(name='HttpsValue'),
    }
  ](name='DataModule')
  }(name='ReqHitRateInterval'),
}

model DescribeDomainReqHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainReqHitRateDataResponseBody(name='body'),
}

async function describeDomainReqHitRateDataWithOptions(request: DescribeDomainReqHitRateDataRequest, runtime: Util.RuntimeOptions): DescribeDomainReqHitRateDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainReqHitRateData', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainReqHitRateData(request: DescribeDomainReqHitRateDataRequest): DescribeDomainReqHitRateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainReqHitRateDataWithOptions(request, runtime);
}

model DescribeDomainsBySourceRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  sources?: string(name='Sources'),
}

model DescribeDomainsBySourceResponseBody = {
  sources?: string(name='Sources'),
  requestId?: string(name='RequestId'),
  domainsList?: {
    domainsData?: [ 
    {
      source?: string(name='Source'),
      domainInfos?: {
        domainInfo?: [ 
        {
          status?: string(name='Status'),
          updateTime?: string(name='UpdateTime'),
          domainCname?: string(name='DomainCname'),
          domainName?: string(name='DomainName'),
          createTime?: string(name='CreateTime'),
        }
      ](name='domainInfo')
      }(name='DomainInfos'),
      domains?: {
        domainNames?: [ string ](name='domainNames')
      }(name='Domains'),
    }
  ](name='DomainsData')
  }(name='DomainsList'),
}

model DescribeDomainsBySourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainsBySourceResponseBody(name='body'),
}

async function describeDomainsBySourceWithOptions(request: DescribeDomainsBySourceRequest, runtime: Util.RuntimeOptions): DescribeDomainsBySourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainsBySource', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainsBySource(request: DescribeDomainsBySourceRequest): DescribeDomainsBySourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainsBySourceWithOptions(request, runtime);
}

model DescribeDomainSrcBpsDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
}

model DescribeDomainSrcBpsDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  srcBpsDataPerInterval?: {
    dataModule?: [ 
    {
      value?: string(name='Value'),
      timeStamp?: string(name='TimeStamp'),
      httpsValue?: string(name='HttpsValue'),
    }
  ](name='DataModule')
  }(name='SrcBpsDataPerInterval'),
}

model DescribeDomainSrcBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainSrcBpsDataResponseBody(name='body'),
}

async function describeDomainSrcBpsDataWithOptions(request: DescribeDomainSrcBpsDataRequest, runtime: Util.RuntimeOptions): DescribeDomainSrcBpsDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainSrcBpsData', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainSrcBpsData(request: DescribeDomainSrcBpsDataRequest): DescribeDomainSrcBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainSrcBpsDataWithOptions(request, runtime);
}

model DescribeDomainSrcHttpCodeDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
}

model DescribeDomainSrcHttpCodeDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  httpCodeData?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: {
        codeProportionData?: [ 
        {
          code?: string(name='Code'),
          proportion?: string(name='Proportion'),
          count?: string(name='Count'),
        }
      ](name='CodeProportionData')
      }(name='Value'),
    }
  ](name='UsageData')
  }(name='HttpCodeData'),
}

model DescribeDomainSrcHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainSrcHttpCodeDataResponseBody(name='body'),
}

async function describeDomainSrcHttpCodeDataWithOptions(request: DescribeDomainSrcHttpCodeDataRequest, runtime: Util.RuntimeOptions): DescribeDomainSrcHttpCodeDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainSrcHttpCodeData', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainSrcHttpCodeData(request: DescribeDomainSrcHttpCodeDataRequest): DescribeDomainSrcHttpCodeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainSrcHttpCodeDataWithOptions(request, runtime);
}

model DescribeDomainSrcQpsDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
}

model DescribeDomainSrcQpsDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  srcQpsDataPerInterval?: {
    dataModule?: [ 
    {
      value?: string(name='Value'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='SrcQpsDataPerInterval'),
}

model DescribeDomainSrcQpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainSrcQpsDataResponseBody(name='body'),
}

async function describeDomainSrcQpsDataWithOptions(request: DescribeDomainSrcQpsDataRequest, runtime: Util.RuntimeOptions): DescribeDomainSrcQpsDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainSrcQpsData', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainSrcQpsData(request: DescribeDomainSrcQpsDataRequest): DescribeDomainSrcQpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainSrcQpsDataWithOptions(request, runtime);
}

model DescribeDomainSrcTopUrlVisitRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  sortBy?: string(name='SortBy'),
}

model DescribeDomainSrcTopUrlVisitResponseBody = {
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  allUrlList?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      urlDetail?: string(name='UrlDetail'),
      flowProportion?: float(name='FlowProportion'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='AllUrlList'),
  url200List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      urlDetail?: string(name='UrlDetail'),
      flowProportion?: float(name='FlowProportion'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url200List'),
  url300List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      urlDetail?: string(name='UrlDetail'),
      flowProportion?: float(name='FlowProportion'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url300List'),
  url400List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      urlDetail?: string(name='UrlDetail'),
      flowProportion?: float(name='FlowProportion'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url400List'),
  url500List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      urlDetail?: string(name='UrlDetail'),
      flowProportion?: float(name='FlowProportion'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url500List'),
}

model DescribeDomainSrcTopUrlVisitResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainSrcTopUrlVisitResponseBody(name='body'),
}

async function describeDomainSrcTopUrlVisitWithOptions(request: DescribeDomainSrcTopUrlVisitRequest, runtime: Util.RuntimeOptions): DescribeDomainSrcTopUrlVisitResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainSrcTopUrlVisit', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainSrcTopUrlVisit(request: DescribeDomainSrcTopUrlVisitRequest): DescribeDomainSrcTopUrlVisitResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainSrcTopUrlVisitWithOptions(request, runtime);
}

model DescribeDomainSrcTrafficDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
}

model DescribeDomainSrcTrafficDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  srcTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      value?: string(name='Value'),
      timeStamp?: string(name='TimeStamp'),
      httpsValue?: string(name='HttpsValue'),
    }
  ](name='DataModule')
  }(name='SrcTrafficDataPerInterval'),
}

model DescribeDomainSrcTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainSrcTrafficDataResponseBody(name='body'),
}

async function describeDomainSrcTrafficDataWithOptions(request: DescribeDomainSrcTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeDomainSrcTrafficDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainSrcTrafficData', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainSrcTrafficData(request: DescribeDomainSrcTrafficDataRequest): DescribeDomainSrcTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainSrcTrafficDataWithOptions(request, runtime);
}

model DescribeDomainsUsageByDayRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDomainsUsageByDayResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  usageTotal?: {
    maxSrcBpsTime?: string(name='MaxSrcBpsTime'),
    requestHitRate?: string(name='RequestHitRate'),
    maxBps?: string(name='MaxBps'),
    totalAccess?: string(name='TotalAccess'),
    bytesHitRate?: string(name='BytesHitRate'),
    totalTraffic?: string(name='TotalTraffic'),
    maxBpsTime?: string(name='MaxBpsTime'),
    maxSrcBps?: string(name='MaxSrcBps'),
  }(name='UsageTotal'),
  usageByDays?: {
    usageByDay?: [ 
    {
      maxSrcBpsTime?: string(name='MaxSrcBpsTime'),
      qps?: string(name='Qps'),
      requestHitRate?: string(name='RequestHitRate'),
      maxBps?: string(name='MaxBps'),
      totalAccess?: string(name='TotalAccess'),
      timeStamp?: string(name='TimeStamp'),
      bytesHitRate?: string(name='BytesHitRate'),
      totalTraffic?: string(name='TotalTraffic'),
      maxSrcBps?: string(name='MaxSrcBps'),
      maxBpsTime?: string(name='MaxBpsTime'),
    }
  ](name='UsageByDay')
  }(name='UsageByDays'),
}

model DescribeDomainsUsageByDayResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainsUsageByDayResponseBody(name='body'),
}

async function describeDomainsUsageByDayWithOptions(request: DescribeDomainsUsageByDayRequest, runtime: Util.RuntimeOptions): DescribeDomainsUsageByDayResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainsUsageByDay', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainsUsageByDay(request: DescribeDomainsUsageByDayRequest): DescribeDomainsUsageByDayResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainsUsageByDayWithOptions(request, runtime);
}

model DescribeDomainTopClientIpVisitRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  locationNameEn?: string(name='LocationNameEn'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  sortBy?: string(name='SortBy'),
  limit?: string(name='Limit'),
}

model DescribeDomainTopClientIpVisitResponseBody = {
  requestId?: string(name='RequestId'),
  clientIpList?: [ 
    {
      rank?: int32(name='Rank'),
      clientIp?: string(name='ClientIp'),
      acc?: long(name='Acc'),
      traffic?: long(name='Traffic'),
    }
  ](name='ClientIpList'),
}

model DescribeDomainTopClientIpVisitResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainTopClientIpVisitResponseBody(name='body'),
}

async function describeDomainTopClientIpVisitWithOptions(request: DescribeDomainTopClientIpVisitRequest, runtime: Util.RuntimeOptions): DescribeDomainTopClientIpVisitResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainTopClientIpVisit', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainTopClientIpVisit(request: DescribeDomainTopClientIpVisitRequest): DescribeDomainTopClientIpVisitResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainTopClientIpVisitWithOptions(request, runtime);
}

model DescribeDomainTopReferVisitRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  sortBy?: string(name='SortBy'),
  percent?: string(name='Percent'),
}

model DescribeDomainTopReferVisitResponseBody = {
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  topReferList?: {
    referList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      visitData?: string(name='VisitData'),
      referDetail?: string(name='ReferDetail'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='ReferList')
  }(name='TopReferList'),
}

model DescribeDomainTopReferVisitResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainTopReferVisitResponseBody(name='body'),
}

async function describeDomainTopReferVisitWithOptions(request: DescribeDomainTopReferVisitRequest, runtime: Util.RuntimeOptions): DescribeDomainTopReferVisitResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainTopReferVisit', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainTopReferVisit(request: DescribeDomainTopReferVisitRequest): DescribeDomainTopReferVisitResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainTopReferVisitWithOptions(request, runtime);
}

model DescribeDomainTopUrlVisitRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  sortBy?: string(name='SortBy'),
}

model DescribeDomainTopUrlVisitResponseBody = {
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  allUrlList?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      urlDetail?: string(name='UrlDetail'),
      flowProportion?: float(name='FlowProportion'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='AllUrlList'),
  url200List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      urlDetail?: string(name='UrlDetail'),
      flowProportion?: float(name='FlowProportion'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url200List'),
  url300List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      urlDetail?: string(name='UrlDetail'),
      flowProportion?: float(name='FlowProportion'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url300List'),
  url400List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      urlDetail?: string(name='UrlDetail'),
      flowProportion?: float(name='FlowProportion'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url400List'),
  url500List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      urlDetail?: string(name='UrlDetail'),
      flowProportion?: float(name='FlowProportion'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url500List'),
}

model DescribeDomainTopUrlVisitResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainTopUrlVisitResponseBody(name='body'),
}

async function describeDomainTopUrlVisitWithOptions(request: DescribeDomainTopUrlVisitRequest, runtime: Util.RuntimeOptions): DescribeDomainTopUrlVisitResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainTopUrlVisit', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainTopUrlVisit(request: DescribeDomainTopUrlVisitRequest): DescribeDomainTopUrlVisitResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainTopUrlVisitWithOptions(request, runtime);
}

model DescribeDomainTrafficDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
}

model DescribeDomainTrafficDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  trafficDataPerInterval?: {
    dataModule?: [ 
    {
      httpsDomesticValue?: string(name='HttpsDomesticValue'),
      value?: string(name='Value'),
      overseasValue?: string(name='OverseasValue'),
      httpsValue?: string(name='HttpsValue'),
      httpsOverseasValue?: string(name='HttpsOverseasValue'),
      timeStamp?: string(name='TimeStamp'),
      domesticValue?: string(name='DomesticValue'),
    }
  ](name='DataModule')
  }(name='TrafficDataPerInterval'),
}

model DescribeDomainTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainTrafficDataResponseBody(name='body'),
}

async function describeDomainTrafficDataWithOptions(request: DescribeDomainTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeDomainTrafficDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainTrafficData', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainTrafficData(request: DescribeDomainTrafficDataRequest): DescribeDomainTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainTrafficDataWithOptions(request, runtime);
}

model DescribeDomainUsageDataRequest {
  ownerId?: long(name='OwnerId'),
  dataProtocol?: string(name='DataProtocol'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  area?: string(name='Area'),
  field?: string(name='Field'),
  interval?: string(name='Interval'),
}

model DescribeDomainUsageDataResponseBody = {
  endTime?: string(name='EndTime'),
  type?: string(name='Type'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  area?: string(name='Area'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  usageDataPerInterval?: {
    dataModule?: [ 
    {
      value?: string(name='Value'),
      timeStamp?: string(name='TimeStamp'),
      peakTime?: string(name='PeakTime'),
      specialValue?: string(name='SpecialValue'),
    }
  ](name='DataModule')
  }(name='UsageDataPerInterval'),
}

model DescribeDomainUsageDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainUsageDataResponseBody(name='body'),
}

async function describeDomainUsageDataWithOptions(request: DescribeDomainUsageDataRequest, runtime: Util.RuntimeOptions): DescribeDomainUsageDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainUsageData', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainUsageData(request: DescribeDomainUsageDataRequest): DescribeDomainUsageDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainUsageDataWithOptions(request, runtime);
}

model DescribeDomainUvDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDomainUvDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  uvDataInterval?: {
    usageData?: [ 
    {
      value?: string(name='Value'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='UsageData')
  }(name='UvDataInterval'),
}

model DescribeDomainUvDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainUvDataResponseBody(name='body'),
}

async function describeDomainUvDataWithOptions(request: DescribeDomainUvDataRequest, runtime: Util.RuntimeOptions): DescribeDomainUvDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainUvData', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainUvData(request: DescribeDomainUvDataRequest): DescribeDomainUvDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainUvDataWithOptions(request, runtime);
}

model DescribeEsExceptionDataRequest {
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  ruleId?: string(name='RuleId'),
}

model DescribeEsExceptionDataResponseBody = {
  requestId?: string(name='RequestId'),
  contents?: [ 
    {
      name?: string(name='Name'),
      points?: [ string ](name='Points'),
      columns?: [ string ](name='Columns'),
    }
  ](name='Contents'),
}

model DescribeEsExceptionDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEsExceptionDataResponseBody(name='body'),
}

async function describeEsExceptionDataWithOptions(request: DescribeEsExceptionDataRequest, runtime: Util.RuntimeOptions): DescribeEsExceptionDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEsExceptionData', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEsExceptionData(request: DescribeEsExceptionDataRequest): DescribeEsExceptionDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEsExceptionDataWithOptions(request, runtime);
}

model DescribeEsExecuteDataRequest {
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  ruleId?: string(name='RuleId'),
}

model DescribeEsExecuteDataResponseBody = {
  requestId?: string(name='RequestId'),
  contents?: [ 
    {
      name?: string(name='Name'),
      points?: [ string ](name='Points'),
      columns?: [ string ](name='Columns'),
    }
  ](name='Contents'),
}

model DescribeEsExecuteDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEsExecuteDataResponseBody(name='body'),
}

async function describeEsExecuteDataWithOptions(request: DescribeEsExecuteDataRequest, runtime: Util.RuntimeOptions): DescribeEsExecuteDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEsExecuteData', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEsExecuteData(request: DescribeEsExecuteDataRequest): DescribeEsExecuteDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEsExecuteDataWithOptions(request, runtime);
}

model DescribeFCTriggerRequest {
  ownerId?: long(name='OwnerId'),
  triggerARN?: string(name='TriggerARN'),
}

model DescribeFCTriggerResponseBody = {
  requestId?: string(name='RequestId'),
  FCTrigger?: {
    triggerARN?: string(name='TriggerARN'),
    roleARN?: string(name='RoleARN'),
    sourceArn?: string(name='SourceArn'),
    notes?: string(name='Notes'),
    eventMetaName?: string(name='EventMetaName'),
    eventMetaVersion?: string(name='EventMetaVersion'),
  }(name='FCTrigger'),
}

model DescribeFCTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFCTriggerResponseBody(name='body'),
}

async function describeFCTriggerWithOptions(request: DescribeFCTriggerRequest, runtime: Util.RuntimeOptions): DescribeFCTriggerResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeFCTrigger', '2018-05-10', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeFCTrigger(request: DescribeFCTriggerRequest): DescribeFCTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFCTriggerWithOptions(request, runtime);
}

model DescribeIllegalUrlExportTaskRequest {
  ownerId?: long(name='OwnerId'),
  taskId?: string(name='TaskId'),
}

model DescribeIllegalUrlExportTaskResponseBody = {
  status?: string(name='Status'),
  requestId?: string(name='RequestId'),
  downloadUrl?: string(name='DownloadUrl'),
}

model DescribeIllegalUrlExportTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIllegalUrlExportTaskResponseBody(name='body'),
}

async function describeIllegalUrlExportTaskWithOptions(request: DescribeIllegalUrlExportTaskRequest, runtime: Util.RuntimeOptions): DescribeIllegalUrlExportTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeIllegalUrlExportTask', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeIllegalUrlExportTask(request: DescribeIllegalUrlExportTaskRequest): DescribeIllegalUrlExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIllegalUrlExportTaskWithOptions(request, runtime);
}

model DescribeIpInfoRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  IP?: string(name='IP'),
}

model DescribeIpInfoResponseBody = {
  cdnIp?: string(name='CdnIp'),
  requestId?: string(name='RequestId'),
  regionEname?: string(name='RegionEname'),
  region?: string(name='Region'),
  ispEname?: string(name='IspEname'),
  ISP?: string(name='ISP'),
}

model DescribeIpInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIpInfoResponseBody(name='body'),
}

async function describeIpInfoWithOptions(request: DescribeIpInfoRequest, runtime: Util.RuntimeOptions): DescribeIpInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeIpInfo', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeIpInfo(request: DescribeIpInfoRequest): DescribeIpInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIpInfoWithOptions(request, runtime);
}

model DescribeL2VipsByDomainRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
}

model DescribeL2VipsByDomainResponseBody = {
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
  vips?: {
    vip?: [ string ](name='Vip')
  }(name='Vips'),
}

model DescribeL2VipsByDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeL2VipsByDomainResponseBody(name='body'),
}

async function describeL2VipsByDomainWithOptions(request: DescribeL2VipsByDomainRequest, runtime: Util.RuntimeOptions): DescribeL2VipsByDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeL2VipsByDomain', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeL2VipsByDomain(request: DescribeL2VipsByDomainRequest): DescribeL2VipsByDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeL2VipsByDomainWithOptions(request, runtime);
}

model DescribeRangeDataByLocateAndIspServiceRequest {
  ownerId?: long(name='OwnerId'),
  domainNames?: string(name='DomainNames'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  ispNames?: string(name='IspNames'),
  locationNames?: string(name='LocationNames'),
}

model DescribeRangeDataByLocateAndIspServiceResponseBody = {
  jsonResult?: string(name='JsonResult'),
  requestId?: string(name='RequestId'),
}

model DescribeRangeDataByLocateAndIspServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRangeDataByLocateAndIspServiceResponseBody(name='body'),
}

async function describeRangeDataByLocateAndIspServiceWithOptions(request: DescribeRangeDataByLocateAndIspServiceRequest, runtime: Util.RuntimeOptions): DescribeRangeDataByLocateAndIspServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRangeDataByLocateAndIspService', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRangeDataByLocateAndIspService(request: DescribeRangeDataByLocateAndIspServiceRequest): DescribeRangeDataByLocateAndIspServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRangeDataByLocateAndIspServiceWithOptions(request, runtime);
}

model DescribeRealtimeDeliveryAccRequest {
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  project?: string(name='Project'),
  logStore?: string(name='LogStore'),
}

model DescribeRealtimeDeliveryAccResponseBody = {
  requestId?: string(name='RequestId'),
  reatTimeDeliveryAccData?: {
    accData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      failedNum?: int32(name='FailedNum'),
      successNum?: int32(name='SuccessNum'),
    }
  ](name='AccData')
  }(name='ReatTimeDeliveryAccData'),
}

model DescribeRealtimeDeliveryAccResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRealtimeDeliveryAccResponseBody(name='body'),
}

async function describeRealtimeDeliveryAccWithOptions(request: DescribeRealtimeDeliveryAccRequest, runtime: Util.RuntimeOptions): DescribeRealtimeDeliveryAccResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRealtimeDeliveryAcc', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRealtimeDeliveryAcc(request: DescribeRealtimeDeliveryAccRequest): DescribeRealtimeDeliveryAccResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRealtimeDeliveryAccWithOptions(request, runtime);
}

model DescribeRefreshQuotaRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeRefreshQuotaResponseBody = {
  preloadRemain?: string(name='PreloadRemain'),
  blockRemain?: string(name='BlockRemain'),
  regexRemain?: string(name='RegexRemain'),
  urlRemain?: string(name='UrlRemain'),
  dirRemain?: string(name='DirRemain'),
  urlQuota?: string(name='UrlQuota'),
  blockQuota?: string(name='BlockQuota'),
  requestId?: string(name='RequestId'),
  dirQuota?: string(name='DirQuota'),
  preloadEdgeQuota?: string(name='PreloadEdgeQuota'),
  preloadEdgeRemain?: string(name='PreloadEdgeRemain'),
  preloadQuota?: string(name='PreloadQuota'),
  regexQuota?: string(name='RegexQuota'),
}

model DescribeRefreshQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRefreshQuotaResponseBody(name='body'),
}

async function describeRefreshQuotaWithOptions(request: DescribeRefreshQuotaRequest, runtime: Util.RuntimeOptions): DescribeRefreshQuotaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRefreshQuota', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRefreshQuota(request: DescribeRefreshQuotaRequest): DescribeRefreshQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRefreshQuotaWithOptions(request, runtime);
}

model DescribeRefreshTaskByIdRequest {
  ownerId?: long(name='OwnerId'),
  taskId?: string(name='TaskId'),
}

model DescribeRefreshTaskByIdResponseBody = {
  totalCount?: long(name='TotalCount'),
  requestId?: string(name='RequestId'),
  tasks?: [ 
    {
      status?: string(name='Status'),
      creationTime?: string(name='CreationTime'),
      objectType?: string(name='ObjectType'),
      process?: string(name='Process'),
      description?: string(name='Description'),
      objectPath?: string(name='ObjectPath'),
      taskId?: string(name='TaskId'),
    }
  ](name='Tasks'),
}

model DescribeRefreshTaskByIdResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRefreshTaskByIdResponseBody(name='body'),
}

async function describeRefreshTaskByIdWithOptions(request: DescribeRefreshTaskByIdRequest, runtime: Util.RuntimeOptions): DescribeRefreshTaskByIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRefreshTaskById', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRefreshTaskById(request: DescribeRefreshTaskByIdRequest): DescribeRefreshTaskByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRefreshTaskByIdWithOptions(request, runtime);
}

model DescribeRefreshTasksRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  taskId?: string(name='TaskId'),
  objectPath?: string(name='ObjectPath'),
  pageNumber?: int32(name='PageNumber'),
  objectType?: string(name='ObjectType'),
  domainName?: string(name='DomainName'),
  status?: string(name='Status'),
  pageSize?: int32(name='PageSize'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeRefreshTasksResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  totalCount?: long(name='TotalCount'),
  tasks?: {
    CDNTask?: [ 
    {
      status?: string(name='Status'),
      creationTime?: string(name='CreationTime'),
      objectType?: string(name='ObjectType'),
      process?: string(name='Process'),
      description?: string(name='Description'),
      objectPath?: string(name='ObjectPath'),
      taskId?: string(name='TaskId'),
    }
  ](name='CDNTask')
  }(name='Tasks'),
}

model DescribeRefreshTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRefreshTasksResponseBody(name='body'),
}

async function describeRefreshTasksWithOptions(request: DescribeRefreshTasksRequest, runtime: Util.RuntimeOptions): DescribeRefreshTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRefreshTasks', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRefreshTasks(request: DescribeRefreshTasksRequest): DescribeRefreshTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRefreshTasksWithOptions(request, runtime);
}

model DescribeStagingIpRequest {
  ownerId?: long(name='OwnerId'),
}

model DescribeStagingIpResponseBody = {
  requestId?: string(name='RequestId'),
  IPV4s?: {
    IPV4?: [ string ](name='IPV4')
  }(name='IPV4s'),
}

model DescribeStagingIpResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStagingIpResponseBody(name='body'),
}

async function describeStagingIpWithOptions(request: DescribeStagingIpRequest, runtime: Util.RuntimeOptions): DescribeStagingIpResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeStagingIp', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeStagingIp(request: DescribeStagingIpRequest): DescribeStagingIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStagingIpWithOptions(request, runtime);
}

model DescribeTagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceType?: string(name='ResourceType'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeTagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId'),
      tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag'),
    }
  ](name='TagResources'),
}

model DescribeTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTagResourcesResponseBody(name='body'),
}

async function describeTagResourcesWithOptions(request: DescribeTagResourcesRequest, runtime: Util.RuntimeOptions): DescribeTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTagResources', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTagResources(request: DescribeTagResourcesRequest): DescribeTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTagResourcesWithOptions(request, runtime);
}

model DescribeTopDomainsByFlowRequest {
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  limit?: long(name='Limit'),
}

model DescribeTopDomainsByFlowResponseBody = {
  domainOnlineCount?: long(name='DomainOnlineCount'),
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainCount?: long(name='DomainCount'),
  topDomains?: {
    topDomain?: [ 
    {
      maxBps?: float(name='MaxBps'),
      rank?: long(name='Rank'),
      totalAccess?: long(name='TotalAccess'),
      trafficPercent?: string(name='TrafficPercent'),
      domainName?: string(name='DomainName'),
      totalTraffic?: string(name='TotalTraffic'),
      maxBpsTime?: string(name='MaxBpsTime'),
    }
  ](name='TopDomain')
  }(name='TopDomains'),
}

model DescribeTopDomainsByFlowResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTopDomainsByFlowResponseBody(name='body'),
}

async function describeTopDomainsByFlowWithOptions(request: DescribeTopDomainsByFlowRequest, runtime: Util.RuntimeOptions): DescribeTopDomainsByFlowResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTopDomainsByFlow', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTopDomainsByFlow(request: DescribeTopDomainsByFlowRequest): DescribeTopDomainsByFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTopDomainsByFlowWithOptions(request, runtime);
}

model DescribeUserCertificateExpireCountRequest {
  ownerId?: long(name='OwnerId'),
}

model DescribeUserCertificateExpireCountResponseBody = {
  expireWithin30DaysCount?: int32(name='ExpireWithin30DaysCount'),
  requestId?: string(name='RequestId'),
  expiredCount?: int32(name='ExpiredCount'),
}

model DescribeUserCertificateExpireCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserCertificateExpireCountResponseBody(name='body'),
}

async function describeUserCertificateExpireCountWithOptions(request: DescribeUserCertificateExpireCountRequest, runtime: Util.RuntimeOptions): DescribeUserCertificateExpireCountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUserCertificateExpireCount', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUserCertificateExpireCount(request: DescribeUserCertificateExpireCountRequest): DescribeUserCertificateExpireCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserCertificateExpireCountWithOptions(request, runtime);
}

model DescribeUserConfigsRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  config?: string(name='Config'),
}

model DescribeUserConfigsResponseBody = {
  requestId?: string(name='RequestId'),
  configs?: {
    ossLogConfig?: {
      prefix?: string(name='Prefix'),
      enable?: string(name='Enable'),
      bucket?: string(name='Bucket'),
    }(name='OssLogConfig'),
    greenManagerConfig?: {
      ratio?: string(name='Ratio'),
      quota?: string(name='Quota'),
    }(name='GreenManagerConfig'),
    wafConfig?: {
      enable?: string(name='Enable'),
    }(name='WafConfig'),
  }(name='Configs'),
}

model DescribeUserConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserConfigsResponseBody(name='body'),
}

async function describeUserConfigsWithOptions(request: DescribeUserConfigsRequest, runtime: Util.RuntimeOptions): DescribeUserConfigsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUserConfigs', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUserConfigs(request: DescribeUserConfigsRequest): DescribeUserConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserConfigsWithOptions(request, runtime);
}

model DescribeUserDomainsRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  domainName?: string(name='DomainName'),
  domainStatus?: string(name='DomainStatus'),
  domainSearchType?: string(name='DomainSearchType'),
  cdnType?: string(name='CdnType'),
  checkDomainShow?: boolean(name='CheckDomainShow'),
  resourceGroupId?: string(name='ResourceGroupId'),
  changeStartTime?: string(name='ChangeStartTime'),
  changeEndTime?: string(name='ChangeEndTime'),
  coverage?: string(name='Coverage'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeUserDomainsResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  totalCount?: long(name='TotalCount'),
  domains?: {
    pageData?: [ 
    {
      gmtCreated?: string(name='GmtCreated'),
      sslProtocol?: string(name='SslProtocol'),
      description?: string(name='Description'),
      coverage?: string(name='Coverage'),
      resourceGroupId?: string(name='ResourceGroupId'),
      sandbox?: string(name='Sandbox'),
      domainStatus?: string(name='DomainStatus'),
      cname?: string(name='Cname'),
      gmtModified?: string(name='GmtModified'),
      cdnType?: string(name='CdnType'),
      domainName?: string(name='DomainName'),
      sources?: {
        source?: [ 
        {
          type?: string(name='Type'),
          weight?: string(name='Weight'),
          priority?: string(name='Priority'),
          port?: int32(name='Port'),
          content?: string(name='Content'),
        }
      ](name='Source')
      }(name='Sources'),
    }
  ](name='PageData')
  }(name='Domains'),
}

model DescribeUserDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserDomainsResponseBody(name='body'),
}

async function describeUserDomainsWithOptions(request: DescribeUserDomainsRequest, runtime: Util.RuntimeOptions): DescribeUserDomainsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUserDomains', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUserDomains(request: DescribeUserDomainsRequest): DescribeUserDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserDomainsWithOptions(request, runtime);
}

model DescribeUserTagsRequest {
  ownerId?: long(name='OwnerId'),
}

model DescribeUserTagsResponseBody = {
  requestId?: string(name='RequestId'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Tags'),
}

model DescribeUserTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserTagsResponseBody(name='body'),
}

async function describeUserTagsWithOptions(request: DescribeUserTagsRequest, runtime: Util.RuntimeOptions): DescribeUserTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUserTags', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUserTags(request: DescribeUserTagsRequest): DescribeUserTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserTagsWithOptions(request, runtime);
}

model DescribeUserUsageDataExportTaskRequest {
  ownerId?: long(name='OwnerId'),
  pageSize?: string(name='PageSize'),
  pageNumber?: string(name='PageNumber'),
}

model DescribeUserUsageDataExportTaskResponseBody = {
  requestId?: string(name='RequestId'),
  usageDataPerPage?: {
    pageSize?: int32(name='PageSize'),
    pageNumber?: int32(name='PageNumber'),
    totalCount?: int32(name='TotalCount'),
    data?: {
      dataItem?: [ 
      {
        status?: string(name='Status'),
        updateTime?: string(name='UpdateTime'),
        downloadUrl?: string(name='DownloadUrl'),
        createTime?: string(name='CreateTime'),
        taskName?: string(name='TaskName'),
        taskId?: string(name='TaskId'),
        taskConfig?: {
          endTime?: string(name='EndTime'),
          startTime?: string(name='StartTime'),
        }(name='TaskConfig'),
      }
    ](name='DataItem')
    }(name='Data'),
  }(name='UsageDataPerPage'),
}

model DescribeUserUsageDataExportTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserUsageDataExportTaskResponseBody(name='body'),
}

async function describeUserUsageDataExportTaskWithOptions(request: DescribeUserUsageDataExportTaskRequest, runtime: Util.RuntimeOptions): DescribeUserUsageDataExportTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUserUsageDataExportTask', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUserUsageDataExportTask(request: DescribeUserUsageDataExportTaskRequest): DescribeUserUsageDataExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserUsageDataExportTaskWithOptions(request, runtime);
}

model DescribeUserUsageDetailDataExportTaskRequest {
  ownerId?: long(name='OwnerId'),
  pageSize?: string(name='PageSize'),
  pageNumber?: string(name='PageNumber'),
}

model DescribeUserUsageDetailDataExportTaskResponseBody = {
  requestId?: string(name='RequestId'),
  usageDataPerPage?: {
    pageSize?: int32(name='PageSize'),
    pageNumber?: int32(name='PageNumber'),
    totalCount?: int32(name='TotalCount'),
    data?: {
      dataItem?: [ 
      {
        status?: string(name='Status'),
        updateTime?: string(name='UpdateTime'),
        downloadUrl?: string(name='DownloadUrl'),
        createTime?: string(name='CreateTime'),
        taskName?: string(name='TaskName'),
        taskId?: string(name='TaskId'),
        taskConfig?: {
          endTime?: string(name='EndTime'),
          startTime?: string(name='StartTime'),
        }(name='TaskConfig'),
      }
    ](name='DataItem')
    }(name='Data'),
  }(name='UsageDataPerPage'),
}

model DescribeUserUsageDetailDataExportTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserUsageDetailDataExportTaskResponseBody(name='body'),
}

async function describeUserUsageDetailDataExportTaskWithOptions(request: DescribeUserUsageDetailDataExportTaskRequest, runtime: Util.RuntimeOptions): DescribeUserUsageDetailDataExportTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUserUsageDetailDataExportTask', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUserUsageDetailDataExportTask(request: DescribeUserUsageDetailDataExportTaskRequest): DescribeUserUsageDetailDataExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserUsageDetailDataExportTaskWithOptions(request, runtime);
}

model DescribeUserVipsByDomainRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  available?: string(name='Available'),
}

model DescribeUserVipsByDomainResponseBody = {
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
  vips?: {
    vip?: [ string ](name='Vip')
  }(name='Vips'),
}

model DescribeUserVipsByDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserVipsByDomainResponseBody(name='body'),
}

async function describeUserVipsByDomainWithOptions(request: DescribeUserVipsByDomainRequest, runtime: Util.RuntimeOptions): DescribeUserVipsByDomainResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeUserVipsByDomain', '2018-05-10', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeUserVipsByDomain(request: DescribeUserVipsByDomainRequest): DescribeUserVipsByDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserVipsByDomainWithOptions(request, runtime);
}

model DescribeVerifyContentRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model DescribeVerifyContentResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeVerifyContentResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVerifyContentResponseBody(name='body'),
}

async function describeVerifyContentWithOptions(request: DescribeVerifyContentRequest, runtime: Util.RuntimeOptions): DescribeVerifyContentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVerifyContent', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVerifyContent(request: DescribeVerifyContentRequest): DescribeVerifyContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVerifyContentWithOptions(request, runtime);
}

model DisableRealtimeLogDeliveryRequest {
  ownerId?: long(name='OwnerId'),
  domain?: string(name='Domain'),
}

model DisableRealtimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: DisableRealtimeLogDeliveryResponseBody(name='body'),
}

async function disableRealtimeLogDeliveryWithOptions(request: DisableRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): DisableRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DisableRealtimeLogDelivery', '2018-05-10', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function disableRealtimeLogDelivery(request: DisableRealtimeLogDeliveryRequest): DisableRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableRealtimeLogDeliveryWithOptions(request, runtime);
}

model EnableRealtimeLogDeliveryRequest {
  ownerId?: long(name='OwnerId'),
  domain?: string(name='Domain'),
}

model EnableRealtimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: EnableRealtimeLogDeliveryResponseBody(name='body'),
}

async function enableRealtimeLogDeliveryWithOptions(request: EnableRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): EnableRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('EnableRealtimeLogDelivery', '2018-05-10', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function enableRealtimeLogDelivery(request: EnableRealtimeLogDeliveryRequest): EnableRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableRealtimeLogDeliveryWithOptions(request, runtime);
}

model ListDomainsByLogConfigIdRequest {
  ownerId?: long(name='OwnerId'),
  configId?: string(name='ConfigId'),
}

model ListDomainsByLogConfigIdResponseBody = {
  requestId?: string(name='RequestId'),
  domains?: {
    domain?: [ string ](name='Domain')
  }(name='Domains'),
}

model ListDomainsByLogConfigIdResponse = {
  headers: map[string]string(name='headers'),
  body: ListDomainsByLogConfigIdResponseBody(name='body'),
}

async function listDomainsByLogConfigIdWithOptions(request: ListDomainsByLogConfigIdRequest, runtime: Util.RuntimeOptions): ListDomainsByLogConfigIdResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListDomainsByLogConfigId', '2018-05-10', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listDomainsByLogConfigId(request: ListDomainsByLogConfigIdRequest): ListDomainsByLogConfigIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDomainsByLogConfigIdWithOptions(request, runtime);
}

model ListFCTriggerRequest {
  ownerId?: long(name='OwnerId'),
  eventMetaName?: string(name='EventMetaName'),
  eventMetaVersion?: string(name='EventMetaVersion'),
}

model ListFCTriggerResponseBody = {
  requestId?: string(name='RequestId'),
  FCTriggers?: [ 
    {
      triggerARN?: string(name='TriggerARN'),
      roleARN?: string(name='RoleARN'),
      sourceArn?: string(name='SourceArn'),
      notes?: string(name='Notes'),
      eventMetaName?: string(name='EventMetaName'),
      eventMetaVersion?: string(name='EventMetaVersion'),
    }
  ](name='FCTriggers'),
}

model ListFCTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: ListFCTriggerResponseBody(name='body'),
}

async function listFCTriggerWithOptions(request: ListFCTriggerRequest, runtime: Util.RuntimeOptions): ListFCTriggerResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListFCTrigger', '2018-05-10', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listFCTrigger(request: ListFCTriggerRequest): ListFCTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFCTriggerWithOptions(request, runtime);
}

model ListRealtimeLogDeliveryDomainsRequest {
  ownerId?: long(name='OwnerId'),
  project?: string(name='Project'),
  logstore?: string(name='Logstore'),
  region?: string(name='Region'),
}

model ListRealtimeLogDeliveryDomainsResponseBody = {
  requestId?: string(name='RequestId'),
  content?: {
    domains?: [ 
    {
      status?: string(name='Status'),
      domainName?: string(name='DomainName'),
    }
  ](name='Domains')
  }(name='Content'),
}

model ListRealtimeLogDeliveryDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRealtimeLogDeliveryDomainsResponseBody(name='body'),
}

async function listRealtimeLogDeliveryDomainsWithOptions(request: ListRealtimeLogDeliveryDomainsRequest, runtime: Util.RuntimeOptions): ListRealtimeLogDeliveryDomainsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListRealtimeLogDeliveryDomains', '2018-05-10', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listRealtimeLogDeliveryDomains(request: ListRealtimeLogDeliveryDomainsRequest): ListRealtimeLogDeliveryDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRealtimeLogDeliveryDomainsWithOptions(request, runtime);
}

model ListRealtimeLogDeliveryInfosRequest {
  ownerId?: long(name='OwnerId'),
}

model ListRealtimeLogDeliveryInfosResponseBody = {
  requestId?: string(name='RequestId'),
  content?: {
    realtimeLogDeliveryInfos?: [ 
    {
      logstore?: string(name='Logstore'),
      project?: string(name='Project'),
      region?: string(name='Region'),
    }
  ](name='RealtimeLogDeliveryInfos')
  }(name='Content'),
}

model ListRealtimeLogDeliveryInfosResponse = {
  headers: map[string]string(name='headers'),
  body: ListRealtimeLogDeliveryInfosResponseBody(name='body'),
}

async function listRealtimeLogDeliveryInfosWithOptions(request: ListRealtimeLogDeliveryInfosRequest, runtime: Util.RuntimeOptions): ListRealtimeLogDeliveryInfosResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListRealtimeLogDeliveryInfos', '2018-05-10', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listRealtimeLogDeliveryInfos(request: ListRealtimeLogDeliveryInfosRequest): ListRealtimeLogDeliveryInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRealtimeLogDeliveryInfosWithOptions(request, runtime);
}

model ListUserCustomLogConfigRequest {
  ownerId?: long(name='OwnerId'),
}

model ListUserCustomLogConfigResponseBody = {
  requestId?: string(name='RequestId'),
  configIds?: {
    configId?: [ string ](name='ConfigId')
  }(name='ConfigIds'),
}

model ListUserCustomLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserCustomLogConfigResponseBody(name='body'),
}

async function listUserCustomLogConfigWithOptions(request: ListUserCustomLogConfigRequest, runtime: Util.RuntimeOptions): ListUserCustomLogConfigResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListUserCustomLogConfig', '2018-05-10', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listUserCustomLogConfig(request: ListUserCustomLogConfigRequest): ListUserCustomLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserCustomLogConfigWithOptions(request, runtime);
}

model ModifyCdnDomainRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  sources?: string(name='Sources'),
  resourceGroupId?: string(name='ResourceGroupId'),
  topLevelDomain?: string(name='TopLevelDomain'),
}

model ModifyCdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCdnDomainResponseBody(name='body'),
}

async function modifyCdnDomainWithOptions(request: ModifyCdnDomainRequest, runtime: Util.RuntimeOptions): ModifyCdnDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyCdnDomain', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyCdnDomain(request: ModifyCdnDomainRequest): ModifyCdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCdnDomainWithOptions(request, runtime);
}

model ModifyCdnDomainSchdmByPropertyRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  property?: string(name='Property'),
}

model ModifyCdnDomainSchdmByPropertyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCdnDomainSchdmByPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCdnDomainSchdmByPropertyResponseBody(name='body'),
}

async function modifyCdnDomainSchdmByPropertyWithOptions(request: ModifyCdnDomainSchdmByPropertyRequest, runtime: Util.RuntimeOptions): ModifyCdnDomainSchdmByPropertyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyCdnDomainSchdmByProperty', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyCdnDomainSchdmByProperty(request: ModifyCdnDomainSchdmByPropertyRequest): ModifyCdnDomainSchdmByPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCdnDomainSchdmByPropertyWithOptions(request, runtime);
}

model ModifyDomainCustomLogConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  configId?: string(name='ConfigId'),
}

model ModifyDomainCustomLogConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDomainCustomLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDomainCustomLogConfigResponseBody(name='body'),
}

async function modifyDomainCustomLogConfigWithOptions(request: ModifyDomainCustomLogConfigRequest, runtime: Util.RuntimeOptions): ModifyDomainCustomLogConfigResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ModifyDomainCustomLogConfig', '2018-05-10', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function modifyDomainCustomLogConfig(request: ModifyDomainCustomLogConfigRequest): ModifyDomainCustomLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDomainCustomLogConfigWithOptions(request, runtime);
}

model ModifyRealtimeLogDeliveryRequest {
  ownerId?: long(name='OwnerId'),
  project?: string(name='Project'),
  logstore?: string(name='Logstore'),
  region?: string(name='Region'),
  domain?: string(name='Domain'),
}

model ModifyRealtimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyRealtimeLogDeliveryResponseBody(name='body'),
}

async function modifyRealtimeLogDeliveryWithOptions(request: ModifyRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): ModifyRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ModifyRealtimeLogDelivery', '2018-05-10', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function modifyRealtimeLogDelivery(request: ModifyRealtimeLogDeliveryRequest): ModifyRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRealtimeLogDeliveryWithOptions(request, runtime);
}

model ModifyUserCustomLogConfigRequest {
  ownerId?: long(name='OwnerId'),
  configId?: string(name='ConfigId'),
  tag?: string(name='Tag'),
}

model ModifyUserCustomLogConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyUserCustomLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyUserCustomLogConfigResponseBody(name='body'),
}

async function modifyUserCustomLogConfigWithOptions(request: ModifyUserCustomLogConfigRequest, runtime: Util.RuntimeOptions): ModifyUserCustomLogConfigResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ModifyUserCustomLogConfig', '2018-05-10', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function modifyUserCustomLogConfig(request: ModifyUserCustomLogConfigRequest): ModifyUserCustomLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyUserCustomLogConfigWithOptions(request, runtime);
}

model OpenCdnServiceRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  internetChargeType?: string(name='InternetChargeType'),
}

model OpenCdnServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model OpenCdnServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenCdnServiceResponseBody(name='body'),
}

async function openCdnServiceWithOptions(request: OpenCdnServiceRequest, runtime: Util.RuntimeOptions): OpenCdnServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OpenCdnService', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function openCdnService(request: OpenCdnServiceRequest): OpenCdnServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openCdnServiceWithOptions(request, runtime);
}

model PublishStagingConfigToProductionRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  functionName?: string(name='FunctionName'),
}

model PublishStagingConfigToProductionResponseBody = {
  requestId?: string(name='RequestId'),
}

model PublishStagingConfigToProductionResponse = {
  headers: map[string]string(name='headers'),
  body: PublishStagingConfigToProductionResponseBody(name='body'),
}

async function publishStagingConfigToProductionWithOptions(request: PublishStagingConfigToProductionRequest, runtime: Util.RuntimeOptions): PublishStagingConfigToProductionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PublishStagingConfigToProduction', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function publishStagingConfigToProduction(request: PublishStagingConfigToProductionRequest): PublishStagingConfigToProductionResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishStagingConfigToProductionWithOptions(request, runtime);
}

model PushObjectCacheRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  objectPath?: string(name='ObjectPath'),
  area?: string(name='Area'),
}

model PushObjectCacheResponseBody = {
  pushTaskId?: string(name='PushTaskId'),
  requestId?: string(name='RequestId'),
}

model PushObjectCacheResponse = {
  headers: map[string]string(name='headers'),
  body: PushObjectCacheResponseBody(name='body'),
}

async function pushObjectCacheWithOptions(request: PushObjectCacheRequest, runtime: Util.RuntimeOptions): PushObjectCacheResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PushObjectCache', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function pushObjectCache(request: PushObjectCacheRequest): PushObjectCacheResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushObjectCacheWithOptions(request, runtime);
}

model RefreshObjectCachesRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  objectPath?: string(name='ObjectPath'),
  objectType?: string(name='ObjectType'),
}

model RefreshObjectCachesResponseBody = {
  refreshTaskId?: string(name='RefreshTaskId'),
  requestId?: string(name='RequestId'),
}

model RefreshObjectCachesResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshObjectCachesResponseBody(name='body'),
}

async function refreshObjectCachesWithOptions(request: RefreshObjectCachesRequest, runtime: Util.RuntimeOptions): RefreshObjectCachesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RefreshObjectCaches', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function refreshObjectCaches(request: RefreshObjectCachesRequest): RefreshObjectCachesResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshObjectCachesWithOptions(request, runtime);
}

model RollbackStagingConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  functionName?: string(name='FunctionName'),
}

model RollbackStagingConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model RollbackStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: RollbackStagingConfigResponseBody(name='body'),
}

async function rollbackStagingConfigWithOptions(request: RollbackStagingConfigRequest, runtime: Util.RuntimeOptions): RollbackStagingConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RollbackStagingConfig', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function rollbackStagingConfig(request: RollbackStagingConfigRequest): RollbackStagingConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return rollbackStagingConfigWithOptions(request, runtime);
}

model SetCcConfigRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  allowIps?: string(name='AllowIps'),
  blockIps?: string(name='BlockIps'),
}

model SetCcConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetCcConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetCcConfigResponseBody(name='body'),
}

async function setCcConfigWithOptions(request: SetCcConfigRequest, runtime: Util.RuntimeOptions): SetCcConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetCcConfig', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setCcConfig(request: SetCcConfigRequest): SetCcConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setCcConfigWithOptions(request, runtime);
}

model SetCdnDomainCSRCertificateRequest {
  ownerId?: long(name='OwnerId'),
  serverCertificate?: string(name='ServerCertificate'),
  domainName?: string(name='DomainName'),
}

model SetCdnDomainCSRCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetCdnDomainCSRCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: SetCdnDomainCSRCertificateResponseBody(name='body'),
}

async function setCdnDomainCSRCertificateWithOptions(request: SetCdnDomainCSRCertificateRequest, runtime: Util.RuntimeOptions): SetCdnDomainCSRCertificateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetCdnDomainCSRCertificate', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setCdnDomainCSRCertificate(request: SetCdnDomainCSRCertificateRequest): SetCdnDomainCSRCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setCdnDomainCSRCertificateWithOptions(request, runtime);
}

model SetCdnDomainStagingConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  functions?: string(name='Functions'),
}

model SetCdnDomainStagingConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetCdnDomainStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetCdnDomainStagingConfigResponseBody(name='body'),
}

async function setCdnDomainStagingConfigWithOptions(request: SetCdnDomainStagingConfigRequest, runtime: Util.RuntimeOptions): SetCdnDomainStagingConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetCdnDomainStagingConfig', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setCdnDomainStagingConfig(request: SetCdnDomainStagingConfigRequest): SetCdnDomainStagingConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setCdnDomainStagingConfigWithOptions(request, runtime);
}

model SetConfigOfVersionRequest {
  ownerId?: long(name='OwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  securityToken?: string(name='SecurityToken'),
  versionId?: string(name='VersionId'),
  configId?: string(name='ConfigId'),
  functionId?: long(name='FunctionId'),
  functionName?: string(name='FunctionName'),
  functionArgs?: string(name='FunctionArgs'),
  functionMatches?: string(name='FunctionMatches'),
}

model SetConfigOfVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetConfigOfVersionResponse = {
  headers: map[string]string(name='headers'),
  body: SetConfigOfVersionResponseBody(name='body'),
}

async function setConfigOfVersionWithOptions(request: SetConfigOfVersionRequest, runtime: Util.RuntimeOptions): SetConfigOfVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetConfigOfVersion', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setConfigOfVersion(request: SetConfigOfVersionRequest): SetConfigOfVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return setConfigOfVersionWithOptions(request, runtime);
}

model SetDomainGreenManagerConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  enable?: string(name='Enable'),
}

model SetDomainGreenManagerConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDomainGreenManagerConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetDomainGreenManagerConfigResponseBody(name='body'),
}

async function setDomainGreenManagerConfigWithOptions(request: SetDomainGreenManagerConfigRequest, runtime: Util.RuntimeOptions): SetDomainGreenManagerConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetDomainGreenManagerConfig', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setDomainGreenManagerConfig(request: SetDomainGreenManagerConfigRequest): SetDomainGreenManagerConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDomainGreenManagerConfigWithOptions(request, runtime);
}

model SetDomainServerCertificateRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  certName?: string(name='CertName'),
  certType?: string(name='CertType'),
  serverCertificateStatus?: string(name='ServerCertificateStatus'),
  serverCertificate?: string(name='ServerCertificate'),
  privateKey?: string(name='PrivateKey'),
  forceSet?: string(name='ForceSet'),
}

model SetDomainServerCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDomainServerCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: SetDomainServerCertificateResponseBody(name='body'),
}

async function setDomainServerCertificateWithOptions(request: SetDomainServerCertificateRequest, runtime: Util.RuntimeOptions): SetDomainServerCertificateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetDomainServerCertificate', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setDomainServerCertificate(request: SetDomainServerCertificateRequest): SetDomainServerCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDomainServerCertificateWithOptions(request, runtime);
}

model SetErrorPageConfigRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  pageType?: string(name='PageType'),
  customPageUrl?: string(name='CustomPageUrl'),
}

model SetErrorPageConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetErrorPageConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetErrorPageConfigResponseBody(name='body'),
}

async function setErrorPageConfigWithOptions(request: SetErrorPageConfigRequest, runtime: Util.RuntimeOptions): SetErrorPageConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetErrorPageConfig', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setErrorPageConfig(request: SetErrorPageConfigRequest): SetErrorPageConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setErrorPageConfigWithOptions(request, runtime);
}

model SetFileCacheExpiredConfigRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  cacheContent?: string(name='CacheContent'),
  TTL?: string(name='TTL'),
  weight?: string(name='Weight'),
}

model SetFileCacheExpiredConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetFileCacheExpiredConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetFileCacheExpiredConfigResponseBody(name='body'),
}

async function setFileCacheExpiredConfigWithOptions(request: SetFileCacheExpiredConfigRequest, runtime: Util.RuntimeOptions): SetFileCacheExpiredConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetFileCacheExpiredConfig', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setFileCacheExpiredConfig(request: SetFileCacheExpiredConfigRequest): SetFileCacheExpiredConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setFileCacheExpiredConfigWithOptions(request, runtime);
}

model SetForceRedirectConfigRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  redirectType?: string(name='RedirectType'),
}

model SetForceRedirectConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetForceRedirectConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetForceRedirectConfigResponseBody(name='body'),
}

async function setForceRedirectConfigWithOptions(request: SetForceRedirectConfigRequest, runtime: Util.RuntimeOptions): SetForceRedirectConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetForceRedirectConfig', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setForceRedirectConfig(request: SetForceRedirectConfigRequest): SetForceRedirectConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setForceRedirectConfigWithOptions(request, runtime);
}

model SetForwardSchemeConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  configId?: long(name='ConfigId'),
  enable?: string(name='Enable'),
  schemeOrigin?: string(name='SchemeOrigin'),
  schemeOriginPort?: string(name='SchemeOriginPort'),
}

model SetForwardSchemeConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetForwardSchemeConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetForwardSchemeConfigResponseBody(name='body'),
}

async function setForwardSchemeConfigWithOptions(request: SetForwardSchemeConfigRequest, runtime: Util.RuntimeOptions): SetForwardSchemeConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetForwardSchemeConfig', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setForwardSchemeConfig(request: SetForwardSchemeConfigRequest): SetForwardSchemeConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setForwardSchemeConfigWithOptions(request, runtime);
}

model SetHttpErrorPageConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  errorCode?: string(name='ErrorCode'),
  pageUrl?: string(name='PageUrl'),
  configId?: long(name='ConfigId'),
}

model SetHttpErrorPageConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetHttpErrorPageConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetHttpErrorPageConfigResponseBody(name='body'),
}

async function setHttpErrorPageConfigWithOptions(request: SetHttpErrorPageConfigRequest, runtime: Util.RuntimeOptions): SetHttpErrorPageConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetHttpErrorPageConfig', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setHttpErrorPageConfig(request: SetHttpErrorPageConfigRequest): SetHttpErrorPageConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setHttpErrorPageConfigWithOptions(request, runtime);
}

model SetHttpHeaderConfigRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  headerKey?: string(name='HeaderKey'),
  headerValue?: string(name='HeaderValue'),
  configId?: long(name='ConfigId'),
}

model SetHttpHeaderConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetHttpHeaderConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetHttpHeaderConfigResponseBody(name='body'),
}

async function setHttpHeaderConfigWithOptions(request: SetHttpHeaderConfigRequest, runtime: Util.RuntimeOptions): SetHttpHeaderConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetHttpHeaderConfig', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setHttpHeaderConfig(request: SetHttpHeaderConfigRequest): SetHttpHeaderConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setHttpHeaderConfigWithOptions(request, runtime);
}

model SetHttpsOptionConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  configId?: long(name='ConfigId'),
  http2?: string(name='Http2'),
}

model SetHttpsOptionConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetHttpsOptionConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetHttpsOptionConfigResponseBody(name='body'),
}

async function setHttpsOptionConfigWithOptions(request: SetHttpsOptionConfigRequest, runtime: Util.RuntimeOptions): SetHttpsOptionConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetHttpsOptionConfig', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setHttpsOptionConfig(request: SetHttpsOptionConfigRequest): SetHttpsOptionConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setHttpsOptionConfigWithOptions(request, runtime);
}

model SetIgnoreQueryStringConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  configId?: long(name='ConfigId'),
  enable?: string(name='Enable'),
  hashKeyArgs?: string(name='HashKeyArgs'),
  keepOssArgs?: string(name='KeepOssArgs'),
}

model SetIgnoreQueryStringConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetIgnoreQueryStringConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetIgnoreQueryStringConfigResponseBody(name='body'),
}

async function setIgnoreQueryStringConfigWithOptions(request: SetIgnoreQueryStringConfigRequest, runtime: Util.RuntimeOptions): SetIgnoreQueryStringConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetIgnoreQueryStringConfig', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setIgnoreQueryStringConfig(request: SetIgnoreQueryStringConfigRequest): SetIgnoreQueryStringConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setIgnoreQueryStringConfigWithOptions(request, runtime);
}

model SetIpAllowListConfigRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  allowIps?: string(name='AllowIps'),
}

model SetIpAllowListConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetIpAllowListConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetIpAllowListConfigResponseBody(name='body'),
}

async function setIpAllowListConfigWithOptions(request: SetIpAllowListConfigRequest, runtime: Util.RuntimeOptions): SetIpAllowListConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetIpAllowListConfig', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setIpAllowListConfig(request: SetIpAllowListConfigRequest): SetIpAllowListConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setIpAllowListConfigWithOptions(request, runtime);
}

model SetIpBlackListConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  blockIps?: string(name='BlockIps'),
  configId?: long(name='ConfigId'),
}

model SetIpBlackListConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetIpBlackListConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetIpBlackListConfigResponseBody(name='body'),
}

async function setIpBlackListConfigWithOptions(request: SetIpBlackListConfigRequest, runtime: Util.RuntimeOptions): SetIpBlackListConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetIpBlackListConfig', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setIpBlackListConfig(request: SetIpBlackListConfigRequest): SetIpBlackListConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setIpBlackListConfigWithOptions(request, runtime);
}

model SetOptimizeConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  configId?: long(name='ConfigId'),
  enable?: string(name='Enable'),
}

model SetOptimizeConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetOptimizeConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetOptimizeConfigResponseBody(name='body'),
}

async function setOptimizeConfigWithOptions(request: SetOptimizeConfigRequest, runtime: Util.RuntimeOptions): SetOptimizeConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetOptimizeConfig', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setOptimizeConfig(request: SetOptimizeConfigRequest): SetOptimizeConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setOptimizeConfigWithOptions(request, runtime);
}

model SetPageCompressConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  configId?: long(name='ConfigId'),
  enable?: string(name='Enable'),
}

model SetPageCompressConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetPageCompressConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetPageCompressConfigResponseBody(name='body'),
}

async function setPageCompressConfigWithOptions(request: SetPageCompressConfigRequest, runtime: Util.RuntimeOptions): SetPageCompressConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetPageCompressConfig', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setPageCompressConfig(request: SetPageCompressConfigRequest): SetPageCompressConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setPageCompressConfigWithOptions(request, runtime);
}

model SetRangeConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  enable?: string(name='Enable'),
  configId?: long(name='ConfigId'),
}

model SetRangeConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetRangeConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetRangeConfigResponseBody(name='body'),
}

async function setRangeConfigWithOptions(request: SetRangeConfigRequest, runtime: Util.RuntimeOptions): SetRangeConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetRangeConfig', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setRangeConfig(request: SetRangeConfigRequest): SetRangeConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setRangeConfigWithOptions(request, runtime);
}

model SetRefererConfigRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  referType?: string(name='ReferType'),
  referList?: string(name='ReferList'),
  allowEmpty?: string(name='AllowEmpty'),
  disableAst?: string(name='DisableAst'),
}

model SetRefererConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetRefererConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetRefererConfigResponseBody(name='body'),
}

async function setRefererConfigWithOptions(request: SetRefererConfigRequest, runtime: Util.RuntimeOptions): SetRefererConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetRefererConfig', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setRefererConfig(request: SetRefererConfigRequest): SetRefererConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setRefererConfigWithOptions(request, runtime);
}

model SetRemoveQueryStringConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  configId?: long(name='ConfigId'),
  aliRemoveArgs?: string(name='AliRemoveArgs'),
  keepOssArgs?: string(name='KeepOssArgs'),
}

model SetRemoveQueryStringConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetRemoveQueryStringConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetRemoveQueryStringConfigResponseBody(name='body'),
}

async function setRemoveQueryStringConfigWithOptions(request: SetRemoveQueryStringConfigRequest, runtime: Util.RuntimeOptions): SetRemoveQueryStringConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetRemoveQueryStringConfig', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setRemoveQueryStringConfig(request: SetRemoveQueryStringConfigRequest): SetRemoveQueryStringConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setRemoveQueryStringConfigWithOptions(request, runtime);
}

model SetReqAuthConfigRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  authType?: string(name='AuthType'),
  key1?: string(name='Key1'),
  key2?: string(name='Key2'),
  timeOut?: string(name='TimeOut'),
  authRemoteDesc?: string(name='AuthRemoteDesc'),
}

model SetReqAuthConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetReqAuthConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetReqAuthConfigResponseBody(name='body'),
}

async function setReqAuthConfigWithOptions(request: SetReqAuthConfigRequest, runtime: Util.RuntimeOptions): SetReqAuthConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetReqAuthConfig', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setReqAuthConfig(request: SetReqAuthConfigRequest): SetReqAuthConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setReqAuthConfigWithOptions(request, runtime);
}

model SetReqHeaderConfigRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  key?: string(name='Key'),
  value?: string(name='Value'),
  configId?: long(name='ConfigId'),
}

model SetReqHeaderConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetReqHeaderConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetReqHeaderConfigResponseBody(name='body'),
}

async function setReqHeaderConfigWithOptions(request: SetReqHeaderConfigRequest, runtime: Util.RuntimeOptions): SetReqHeaderConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetReqHeaderConfig', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setReqHeaderConfig(request: SetReqHeaderConfigRequest): SetReqHeaderConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setReqHeaderConfigWithOptions(request, runtime);
}

model SetSourceHostConfigRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  enable?: string(name='Enable'),
  backSrcDomain?: string(name='BackSrcDomain'),
}

model SetSourceHostConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetSourceHostConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetSourceHostConfigResponseBody(name='body'),
}

async function setSourceHostConfigWithOptions(request: SetSourceHostConfigRequest, runtime: Util.RuntimeOptions): SetSourceHostConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetSourceHostConfig', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setSourceHostConfig(request: SetSourceHostConfigRequest): SetSourceHostConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setSourceHostConfigWithOptions(request, runtime);
}

model SetWaitingRoomConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  waitUri?: string(name='WaitUri'),
  allowPct?: int32(name='AllowPct'),
  maxTimeWait?: int32(name='MaxTimeWait'),
  gapTime?: int32(name='GapTime'),
  waitUrl?: string(name='WaitUrl'),
}

model SetWaitingRoomConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetWaitingRoomConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetWaitingRoomConfigResponseBody(name='body'),
}

async function setWaitingRoomConfigWithOptions(request: SetWaitingRoomConfigRequest, runtime: Util.RuntimeOptions): SetWaitingRoomConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetWaitingRoomConfig', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setWaitingRoomConfig(request: SetWaitingRoomConfigRequest): SetWaitingRoomConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setWaitingRoomConfigWithOptions(request, runtime);
}

model StartCdnDomainRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
}

model StartCdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: StartCdnDomainResponseBody(name='body'),
}

async function startCdnDomainWithOptions(request: StartCdnDomainRequest, runtime: Util.RuntimeOptions): StartCdnDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartCdnDomain', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startCdnDomain(request: StartCdnDomainRequest): StartCdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return startCdnDomainWithOptions(request, runtime);
}

model StopCdnDomainRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
}

model StopCdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: StopCdnDomainResponseBody(name='body'),
}

async function stopCdnDomainWithOptions(request: StopCdnDomainRequest, runtime: Util.RuntimeOptions): StopCdnDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopCdnDomain', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopCdnDomain(request: StopCdnDomainRequest): StopCdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopCdnDomainWithOptions(request, runtime);
}

model TagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceType?: string(name='ResourceType'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagResources', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceType?: string(name='ResourceType'),
  all?: boolean(name='All'),
  resourceId?: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UntagResources', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateCdnDeliverTaskRequest {
  ownerId?: long(name='OwnerId'),
  deliverId?: long(name='DeliverId'),
  name?: string(name='Name'),
  status?: string(name='Status'),
  reports?: string(name='Reports'),
  domainName?: string(name='DomainName'),
  deliver?: map[string]any(name='Deliver'),
  schedule?: map[string]any(name='Schedule'),
}

model UpdateCdnDeliverTaskShrinkRequest {
  ownerId?: long(name='OwnerId'),
  deliverId?: long(name='DeliverId'),
  name?: string(name='Name'),
  status?: string(name='Status'),
  reports?: string(name='Reports'),
  domainName?: string(name='DomainName'),
  deliverShrink?: string(name='Deliver'),
  scheduleShrink?: string(name='Schedule'),
}

model UpdateCdnDeliverTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateCdnDeliverTaskResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCdnDeliverTaskResponseBody(name='body'),
}

async function updateCdnDeliverTaskWithOptions(tmpReq: UpdateCdnDeliverTaskRequest, runtime: Util.RuntimeOptions): UpdateCdnDeliverTaskResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateCdnDeliverTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deliver)) {
    request.deliverShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deliver, 'Deliver', 'json');
  }
  if (!Util.isUnset(tmpReq.schedule)) {
    request.scheduleShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.schedule, 'Schedule', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateCdnDeliverTask', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateCdnDeliverTask(request: UpdateCdnDeliverTaskRequest): UpdateCdnDeliverTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCdnDeliverTaskWithOptions(request, runtime);
}

model UpdateCdnSubTaskRequest {
  ownerId?: long(name='OwnerId'),
  status?: string(name='Status'),
  reportIds?: string(name='ReportIds'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model UpdateCdnSubTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateCdnSubTaskResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCdnSubTaskResponseBody(name='body'),
}

async function updateCdnSubTaskWithOptions(request: UpdateCdnSubTaskRequest, runtime: Util.RuntimeOptions): UpdateCdnSubTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateCdnSubTask', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateCdnSubTask(request: UpdateCdnSubTaskRequest): UpdateCdnSubTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCdnSubTaskWithOptions(request, runtime);
}

model UpdateFCTriggerRequest {
  ownerId?: long(name='OwnerId'),
  triggerARN?: string(name='TriggerARN'),
  sourceARN?: string(name='SourceARN'),
  functionARN?: string(name='FunctionARN'),
  roleARN?: string(name='RoleARN'),
  notes?: string(name='Notes'),
}

model UpdateFCTriggerResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateFCTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFCTriggerResponseBody(name='body'),
}

async function updateFCTriggerWithOptions(request: UpdateFCTriggerRequest, runtime: Util.RuntimeOptions): UpdateFCTriggerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateFCTrigger', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateFCTrigger(request: UpdateFCTriggerRequest): UpdateFCTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFCTriggerWithOptions(request, runtime);
}

model VerifyDomainOwnerRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  verifyType?: string(name='VerifyType'),
}

model VerifyDomainOwnerResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model VerifyDomainOwnerResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyDomainOwnerResponseBody(name='body'),
}

async function verifyDomainOwnerWithOptions(request: VerifyDomainOwnerRequest, runtime: Util.RuntimeOptions): VerifyDomainOwnerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('VerifyDomainOwner', '2018-05-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function verifyDomainOwner(request: VerifyDomainOwnerRequest): VerifyDomainOwnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyDomainOwnerWithOptions(request, runtime);
}

