/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  @endpointMap = {
    ap-northeast-1 = 'cdn.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'cdn.ap-southeast-1.aliyuncs.com',
    ap-southeast-1 = 'cdn.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'cdn.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'cdn.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'cdn.ap-southeast-1.aliyuncs.com',
    eu-central-1 = 'cdn.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'cdn.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'cdn.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'cdn.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'cdn.ap-southeast-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('cdn', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddCdnDomainRequest {
  cdnType?: string(name='CdnType', description='The workload type of the domain name. Valid values:

*   **web**: images and small files.
*   **download**: large files.
*   **video**: on-demand video and audio streaming.', example='web'),
  checkUrl?: string(name='CheckUrl', description='The URL that is used for health checks.', example='www.example.com/test.html'),
  domainName?: string(name='DomainName', description='The domain names that you want to add to Alibaba Cloud CDN.

Wildcard domain names are supported.A wildcard domain name must start with a period (.), such as .example.com.', example='.example.com'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.

If you do not set this parameter, the system uses the ID of the default resource group.', example='rg-acfmyuji4b6r4**'),
  scope?: string(name='Scope', description='The accelerated region. Valid values:

*   **domestic**: regions in mainland China.
*   **overseas**: regions outside mainland China.
*   **global**: regions inside and outside mainland China.

Default value: **domestic**.', example='domestic'),
  securityToken?: string(name='SecurityToken'),
  sources?: string(name='Sources', description='The information about the origin address.', example='[{"content":"10.10.10.10","type":"ipaddr","priority":"20","port":80,"weight":"15"}]'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag.', example='env'),
      value?: string(name='Value', description='The value of tag.', example='value'),
    }
  ](name='Tag', description='The tags.'),
  topLevelDomain?: string(name='TopLevelDomain', description='The top-level domain name.', example='example.com'),
}

model AddCdnDomainResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model AddCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddCdnDomainResponseBody(name='body'),
}

/**
  * *   You must activate Alibaba Cloud CDN before you can add a domain name to it. For more information, see [Activate Alibaba Cloud CDN](~~27272~~).
  * *   The domain name that you want to add has a valid Internet Content Provider (ICP) number.
  * *   You can add only one domain name to Alibaba Cloud CDN in each call. Each Alibaba Cloud account can add a maximum of 50 domain names to Alibaba Cloud CDN.
  * *   If the content of the origin server is not stored on Alibaba Cloud, the content must be reviewed. The review will be completed by the end of the next business day after you submit the application.
  * *   The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request AddCdnDomainRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AddCdnDomainResponse
 */
async function addCdnDomainWithOptions(request: AddCdnDomainRequest, runtime: Util.RuntimeOptions): AddCdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdnType)) {
    query['CdnType'] = request.cdnType;
  }
  if (!Util.isUnset(request.checkUrl)) {
    query['CheckUrl'] = request.checkUrl;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sources)) {
    query['Sources'] = request.sources;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.topLevelDomain)) {
    query['TopLevelDomain'] = request.topLevelDomain;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddCdnDomain',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You must activate Alibaba Cloud CDN before you can add a domain name to it. For more information, see [Activate Alibaba Cloud CDN](~~27272~~).
  * *   The domain name that you want to add has a valid Internet Content Provider (ICP) number.
  * *   You can add only one domain name to Alibaba Cloud CDN in each call. Each Alibaba Cloud account can add a maximum of 50 domain names to Alibaba Cloud CDN.
  * *   If the content of the origin server is not stored on Alibaba Cloud, the content must be reviewed. The review will be completed by the end of the next business day after you submit the application.
  * *   The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request AddCdnDomainRequest
  * @return AddCdnDomainResponse
 */
async function addCdnDomain(request: AddCdnDomainRequest): AddCdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCdnDomainWithOptions(request, runtime);
}

model AddFCTriggerRequest {
  eventMetaName?: string(name='EventMetaName', description='The name of the event.', example='LogFileCreated'),
  eventMetaVersion?: string(name='EventMetaVersion', description='The version of the event.', example='1.0.0'),
  functionARN?: string(name='FunctionARN', description='The feature trigger.', example='acs:fc:1223455566666:123:services/myservice/functions/myfunction'),
  notes?: string(name='Notes', description='The remarks.', example='test'),
  roleARN?: string(name='RoleARN', description='The assigned Resource Access Management (RAM) role.', example='acs:ram:: 1234567890:role/aliyuncdneventnotificationrole'),
  sourceARN?: string(name='SourceARN', description='The resources and filters for event listening.', example='acs:cdn:*:1234567890:domain/example.com'),
  triggerARN?: string(name='TriggerARN', description='The trigger that corresponds to the Function Compute service.', example='acs:fc:cn-beijing: 1234567890:services/FCTestService/functions/printEvent/triggers/testtrigger'),
}

model AddFCTriggerResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC046C5D-8CB4-4B6B-B7F8-B335E51EF90'),
}

model AddFCTriggerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddFCTriggerResponseBody(name='body'),
}

async function addFCTriggerWithOptions(request: AddFCTriggerRequest, runtime: Util.RuntimeOptions): AddFCTriggerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.triggerARN)) {
    query['TriggerARN'] = request.triggerARN;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.eventMetaName)) {
    body['EventMetaName'] = request.eventMetaName;
  }
  if (!Util.isUnset(request.eventMetaVersion)) {
    body['EventMetaVersion'] = request.eventMetaVersion;
  }
  if (!Util.isUnset(request.functionARN)) {
    body['FunctionARN'] = request.functionARN;
  }
  if (!Util.isUnset(request.notes)) {
    body['Notes'] = request.notes;
  }
  if (!Util.isUnset(request.roleARN)) {
    body['RoleARN'] = request.roleARN;
  }
  if (!Util.isUnset(request.sourceARN)) {
    body['SourceARN'] = request.sourceARN;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddFCTrigger',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addFCTrigger(request: AddFCTriggerRequest): AddFCTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  return addFCTriggerWithOptions(request, runtime);
}

model BatchAddCdnDomainRequest {
  cdnType?: string(name='CdnType', description='The workload type of the domain name to be accelerated. Valid values:

*   **web**: images and small files.
*   **download**: large files.
*   **video**: on-demand video and audio streaming.', example='web'),
  checkUrl?: string(name='CheckUrl', description='The URL that is used for health checks.', example='url'),
  domainName?: string(name='DomainName', description='The domain names that you want to add to Alibaba Cloud CDN. Separate domain names with commas (,).', example='example.com,aliyundoc.com'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. If you do not set this parameter, the system uses the ID of the default resource group.', example='rg-acfmyuji4b6r4**'),
  scope?: string(name='Scope', description='The accelerated region. Valid values:

*   **domestic**: mainland China only
*   **overseas**: global (excluding mainland China)
*   **global**: global', example='domestic'),
  securityToken?: string(name='SecurityToken'),
  sources?: string(name='Sources', description='The information about the addresses of the origin servers.', example='[{"content":"1.1.1.1","type":"ipaddr","priority":"20","port":80,"weight":"15"}]'),
  topLevelDomain?: string(name='TopLevelDomain', description='The top-level domain name.', example='example.com'),
}

model BatchAddCdnDomainResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model BatchAddCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchAddCdnDomainResponseBody(name='body'),
}

/**
  * - You must activate Alibaba Cloud CDN before you can add a domain name to it. For more information, see [Activate Alibaba Cloud CDN](~~27272~~).
  * - The domain name that you want to add has a valid Internet Content Provider (ICP) number.
  * - If the content from the origin server is not stored on Alibaba Cloud, the content must be reviewed by Alibaba Cloud. The review will be completed by the end of the next business day after you submit the application.
  * - You can specify multiple domain names (no more than 50) and separate them with commas (,).
  * - The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request BatchAddCdnDomainRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchAddCdnDomainResponse
 */
async function batchAddCdnDomainWithOptions(request: BatchAddCdnDomainRequest, runtime: Util.RuntimeOptions): BatchAddCdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdnType)) {
    query['CdnType'] = request.cdnType;
  }
  if (!Util.isUnset(request.checkUrl)) {
    query['CheckUrl'] = request.checkUrl;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sources)) {
    query['Sources'] = request.sources;
  }
  if (!Util.isUnset(request.topLevelDomain)) {
    query['TopLevelDomain'] = request.topLevelDomain;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchAddCdnDomain',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - You must activate Alibaba Cloud CDN before you can add a domain name to it. For more information, see [Activate Alibaba Cloud CDN](~~27272~~).
  * - The domain name that you want to add has a valid Internet Content Provider (ICP) number.
  * - If the content from the origin server is not stored on Alibaba Cloud, the content must be reviewed by Alibaba Cloud. The review will be completed by the end of the next business day after you submit the application.
  * - You can specify multiple domain names (no more than 50) and separate them with commas (,).
  * - The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request BatchAddCdnDomainRequest
  * @return BatchAddCdnDomainResponse
 */
async function batchAddCdnDomain(request: BatchAddCdnDomainRequest): BatchAddCdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchAddCdnDomainWithOptions(request, runtime);
}

model BatchDeleteCdnDomainConfigRequest {
  domainNames?: string(name='DomainNames', description='The accelerated domain names whose configurations you want to delete. Separate accelerated domain names with commas (,).', example='example.com,example.org'),
  functionNames?: string(name='FunctionNames', description='The names of the features that you want to manage. Separate feature names with commas (,).', example='referer_white_list_set,https_force'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model BatchDeleteCdnDomainConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model BatchDeleteCdnDomainConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchDeleteCdnDomainConfigResponseBody(name='body'),
}

/**
  * > - You can configure features for at most 50 domain names in each API call.
  * - The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request BatchDeleteCdnDomainConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchDeleteCdnDomainConfigResponse
 */
async function batchDeleteCdnDomainConfigWithOptions(request: BatchDeleteCdnDomainConfigRequest, runtime: Util.RuntimeOptions): BatchDeleteCdnDomainConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainNames)) {
    query['DomainNames'] = request.domainNames;
  }
  if (!Util.isUnset(request.functionNames)) {
    query['FunctionNames'] = request.functionNames;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchDeleteCdnDomainConfig',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > - You can configure features for at most 50 domain names in each API call.
  * - The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request BatchDeleteCdnDomainConfigRequest
  * @return BatchDeleteCdnDomainConfigResponse
 */
async function batchDeleteCdnDomainConfig(request: BatchDeleteCdnDomainConfigRequest): BatchDeleteCdnDomainConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDeleteCdnDomainConfigWithOptions(request, runtime);
}

model BatchSetCdnDomainConfigRequest {
  domainNames?: string(name='DomainNames', description='The accelerated domain name. Separate multiple accelerated domain names with commas (,).', example='www.example.com'),
  functions?: string(name='Functions', description='The features that you want to configure. Format:

*   **functionName**: the name of the feature. This parameter is required. Separate multiple values with commas (,). For more information, see [A list of features](~~388460~~).
*   **argName**: the feature parameter for **functionName**. This parameter is required. You can specify multiple feature parameters.
*   **argValue**: the parameter value that is specified for **functionName**. This parameter is required.
*   **parentid**: the rule condition ID. This parameter is optional. You can use the **condition** rule engine to create a rule condition. For information, see [BatchSetCdnDomainConfig and SetCdnDomainStagingConfig](~~388460~~). A rule condition can identify parameters that are included in requests and filter requests based on the identified parameters. After you create a rule condition, a [configid](~~388994~~) is generated. configid can be used as parentId that is referenced by other features. This way, you can combine rule conditions and features for flexible configurations.

If you set **parentId** to **-1**, the existing rule conditions in the configurations are deleted.

    [{
       "functionArgs": [{
         "argName": "Parameter A", 
         "argValue": Value of parameter A"
        }, 
      {
        "argName": "Parameter B", 
        "argValue": "Value of parameter B"
         }], 
     "functionName": "Feature name"
     "parentId": "Optional, which corresponds to configid of the referenced rule condition"
    }]

The following code shows a sample configuration if **parentId** is not used.

In this example, the **origin_request_header** feature is used to add back-to-origin HTTP headers, and the rule condition whose configuration ID is **222728944812032** is referenced.

    [{
            "functionArgs": [{
                "argName": "header_operation_type",
                "argValue": "add"
            }, {
                "argName": "header_name",
                "argValue": "Accept-Encoding"
            }, {
                "argName": "header_value",
                "argValue": "gzip"
            }, {
                "argName": "duplicate",
                "argValue": "off"
            }],
            "functionName": "origin_request_header"
    }]

The following code shows a sample configuration if **parentId** is used.

In this example, the **origin_request_header** feature is used to add back-to-origin HTTP headers, and the rule condition whose configuration ID is **222728944812032** is referenced.

    [{
            "functionArgs": [{
                "argName": "header_operation_type",
                "argValue": "add"
            }, {
                "argName": "header_name",
                "argValue": "Accept-Encoding"
            }, {
                "argName": "header_value",
                "argValue": "gzip"
            }, {
                "argName": "duplicate",
                "argValue": "off"
            }],
            "functionName": "origin_request_header",
            "parentId": "222728944812032"
    }]', example='[{"functionArgs": [{"argName": "key","argValue": "Content-Encoding"},{"argName": "value","argValue": "gzip"}],"functionName": "set_resp_header"} ]'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model BatchSetCdnDomainConfigResponseBody = {
  domainConfigList?: {
    domainConfigModel?: [ 
    {
      configId?: long(name='ConfigId', description='The ID of the configuration.', example='1234567'),
      domainName?: string(name='DomainName', description='The domain name.', example='www.example.com'),
      functionName?: string(name='FunctionName', description='The name of the feature.', example='set_resp_header'),
    }
  ](name='DomainConfigModel')
  }(name='DomainConfigList', description='The list of domain configurations.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model BatchSetCdnDomainConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchSetCdnDomainConfigResponseBody(name='body'),
}

/**
  * > *   You can call this operation up to 30 times per second per account.
  * *   You can specify multiple domain names and must separate them with commas (,). You can specify up to 50 domain names in each call.
  * *   If the BatchSetCdnDomainConfig operation is successful, a unique configuration ID (ConfigId) is generated. You can use configuration IDs to update or delete configurations. For more information, see [Usage notes on ConfigId](~~388994~~).
  *
  * @param request BatchSetCdnDomainConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchSetCdnDomainConfigResponse
 */
async function batchSetCdnDomainConfigWithOptions(request: BatchSetCdnDomainConfigRequest, runtime: Util.RuntimeOptions): BatchSetCdnDomainConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainNames)) {
    query['DomainNames'] = request.domainNames;
  }
  if (!Util.isUnset(request.functions)) {
    query['Functions'] = request.functions;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchSetCdnDomainConfig',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > *   You can call this operation up to 30 times per second per account.
  * *   You can specify multiple domain names and must separate them with commas (,). You can specify up to 50 domain names in each call.
  * *   If the BatchSetCdnDomainConfig operation is successful, a unique configuration ID (ConfigId) is generated. You can use configuration IDs to update or delete configurations. For more information, see [Usage notes on ConfigId](~~388994~~).
  *
  * @param request BatchSetCdnDomainConfigRequest
  * @return BatchSetCdnDomainConfigResponse
 */
async function batchSetCdnDomainConfig(request: BatchSetCdnDomainConfigRequest): BatchSetCdnDomainConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchSetCdnDomainConfigWithOptions(request, runtime);
}

model BatchSetCdnDomainServerCertificateRequest {
  certName?: string(name='CertName', description='The name of the certificate.', example='yourCertName'),
  certType?: string(name='CertType', description='The type of the SSL certificate. Valid values:

*   **upload**: a user-uploaded SSL certificate.
*   **cas**: a certificate that is issued by SSL Certificates Service.', example='cas'),
  domainName?: string(name='DomainName', description='The accelerated domain name to which the SSL certificate belongs. The type of request supported by the accelerated domain name must be HTTPS. You can specify multiple accelerated domain names and separate them with commas (,).

>  You can manage the SSL certificates of up to 50 accelerated domain names in each call.', example='example.com'),
  forceSet?: string(name='ForceSet', description='Specifies whether to check the certificate name for duplicates. If you set the value to 1, the system does not perform the check and overwrites the information about the existing certificate that uses the same name.', example='1'),
  ownerId?: long(name='OwnerId'),
  region?: string(name='Region', description='The region.', example='your region'),
  SSLPri?: string(name='SSLPri', description='The private key. Specify the private key only if you enable the SSL certificate.', example='yourSSLPri'),
  SSLProtocol?: string(name='SSLProtocol', description='Specifies whether to enable the SSL certificate. Valid values:

*   **on**: enables the SSL certificate.
*   **off**: disables the SSL certificate. This is the default value.', example='on'),
  SSLPub?: string(name='SSLPub', description='The content of the SSL certificate. Specify the content of the certificate only if you want to enable the SSL certificate.', example='yourSSLPub'),
  securityToken?: string(name='SecurityToken'),
}

model BatchSetCdnDomainServerCertificateResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model BatchSetCdnDomainServerCertificateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchSetCdnDomainServerCertificateResponseBody(name='body'),
}

/**
  * > *   The maximum number of times that each user can call this operation per second is 10.
  * *   You can specify multiple domain names (no more than 50) and separate them with commas (,).
  *
  * @param request BatchSetCdnDomainServerCertificateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchSetCdnDomainServerCertificateResponse
 */
async function batchSetCdnDomainServerCertificateWithOptions(request: BatchSetCdnDomainServerCertificateRequest, runtime: Util.RuntimeOptions): BatchSetCdnDomainServerCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certName)) {
    query['CertName'] = request.certName;
  }
  if (!Util.isUnset(request.certType)) {
    query['CertType'] = request.certType;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.forceSet)) {
    query['ForceSet'] = request.forceSet;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.SSLPri)) {
    query['SSLPri'] = request.SSLPri;
  }
  if (!Util.isUnset(request.SSLProtocol)) {
    query['SSLProtocol'] = request.SSLProtocol;
  }
  if (!Util.isUnset(request.SSLPub)) {
    query['SSLPub'] = request.SSLPub;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchSetCdnDomainServerCertificate',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > *   The maximum number of times that each user can call this operation per second is 10.
  * *   You can specify multiple domain names (no more than 50) and separate them with commas (,).
  *
  * @param request BatchSetCdnDomainServerCertificateRequest
  * @return BatchSetCdnDomainServerCertificateResponse
 */
async function batchSetCdnDomainServerCertificate(request: BatchSetCdnDomainServerCertificateRequest): BatchSetCdnDomainServerCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchSetCdnDomainServerCertificateWithOptions(request, runtime);
}

model BatchStartCdnDomainRequest {
  domainNames?: string(name='DomainNames', description='The domain names that you want to enable. Separate multiple domain names with commas (,).', example='example.com'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model BatchStartCdnDomainResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model BatchStartCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchStartCdnDomainResponseBody(name='body'),
}

/**
  * - If the domain name is in an invalid state or your have an overdue payment in your account, the domain name cannot be enabled.
  * - The maximum number of times that each user can call this operation per second is 30.
  * - The maximum number of domain names configured at a time is 50.
  *
  * @param request BatchStartCdnDomainRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchStartCdnDomainResponse
 */
async function batchStartCdnDomainWithOptions(request: BatchStartCdnDomainRequest, runtime: Util.RuntimeOptions): BatchStartCdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainNames)) {
    query['DomainNames'] = request.domainNames;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchStartCdnDomain',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - If the domain name is in an invalid state or your have an overdue payment in your account, the domain name cannot be enabled.
  * - The maximum number of times that each user can call this operation per second is 30.
  * - The maximum number of domain names configured at a time is 50.
  *
  * @param request BatchStartCdnDomainRequest
  * @return BatchStartCdnDomainResponse
 */
async function batchStartCdnDomain(request: BatchStartCdnDomainRequest): BatchStartCdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchStartCdnDomainWithOptions(request, runtime);
}

model BatchStopCdnDomainRequest {
  domainNames?: string(name='DomainNames', description='You can specify one or more domain names and separate them with commas (,).', example='example.com'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model BatchStopCdnDomainResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='324AEFFF-308C-4DA7-8CD3-01B277B98F28'),
}

model BatchStopCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchStopCdnDomainResponseBody(name='body'),
}

/**
  * - After an accelerated domain name is disabled, Alibaba Cloud Content Delivery Network (CDN) retains the information about the accelerated domain name and automatically redirects requests to the origin server.
  * *   If you need to temporary disable CDN acceleration for a domain name, we recommend that you call the StopDomain operation.
  * *   The maximum number of domain names configured at a time is 50.
  * *   The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request BatchStopCdnDomainRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchStopCdnDomainResponse
 */
async function batchStopCdnDomainWithOptions(request: BatchStopCdnDomainRequest, runtime: Util.RuntimeOptions): BatchStopCdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainNames)) {
    query['DomainNames'] = request.domainNames;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchStopCdnDomain',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - After an accelerated domain name is disabled, Alibaba Cloud Content Delivery Network (CDN) retains the information about the accelerated domain name and automatically redirects requests to the origin server.
  * *   If you need to temporary disable CDN acceleration for a domain name, we recommend that you call the StopDomain operation.
  * *   The maximum number of domain names configured at a time is 50.
  * *   The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request BatchStopCdnDomainRequest
  * @return BatchStopCdnDomainResponse
 */
async function batchStopCdnDomain(request: BatchStopCdnDomainRequest): BatchStopCdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchStopCdnDomainWithOptions(request, runtime);
}

model BatchUpdateCdnDomainRequest {
  domainName?: string(name='DomainName', description='The accelerated domain names. You can specify one or more accelerated domain names. Separate domain names with commas (,).', example='example.com,example.org'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyuji4b6r4**'),
  securityToken?: string(name='SecurityToken'),
  sources?: string(name='Sources', description='The information about the addresses of origin servers.

>  You can set only one of **Sources** and **TopLevelDomain**. If you set both **Sources** and **TopLevelDomain**, **TopLevelDomain** does not take effect.', example='[{"content":"10.10.10.10","type":"ipaddr","priority":"20","port":80,"weight":"15"}]'),
  topLevelDomain?: string(name='TopLevelDomain', description='The top-level domain name.

>  You can set only one of **Sources** and **TopLevelDomain**. If you set both **Sources** and **TopLevelDomain**, **TopLevelDomain** does not take effect.', example='example.com'),
}

model BatchUpdateCdnDomainResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model BatchUpdateCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchUpdateCdnDomainResponseBody(name='body'),
}

/**
  * > - The maximum number of times that each user can call this operation per second is 30.
  * - You can specify multiple domain names (no more than 50) and separate them with commas (,).
  *
  * @param request BatchUpdateCdnDomainRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchUpdateCdnDomainResponse
 */
async function batchUpdateCdnDomainWithOptions(request: BatchUpdateCdnDomainRequest, runtime: Util.RuntimeOptions): BatchUpdateCdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sources)) {
    query['Sources'] = request.sources;
  }
  if (!Util.isUnset(request.topLevelDomain)) {
    query['TopLevelDomain'] = request.topLevelDomain;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchUpdateCdnDomain',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > - The maximum number of times that each user can call this operation per second is 30.
  * - You can specify multiple domain names (no more than 50) and separate them with commas (,).
  *
  * @param request BatchUpdateCdnDomainRequest
  * @return BatchUpdateCdnDomainResponse
 */
async function batchUpdateCdnDomain(request: BatchUpdateCdnDomainRequest): BatchUpdateCdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchUpdateCdnDomainWithOptions(request, runtime);
}

model CreateCdnCertificateSigningRequestRequest {
  city?: string(name='City', description='The city to which the organization belongs. Default value: Hangzhou.', example='Hangzhou'),
  commonName?: string(name='CommonName', description='The Common Name of the SSL certificate.', example='CommonName'),
  country?: string(name='Country', description='The country to which the organization belongs. Default value: CN.', example='CN'),
  email?: string(name='Email', description='The email address that can be used to contact the organization.', example='username@example.com'),
  organization?: string(name='Organization', description='The name of the organization. Default value: Alibaba Inc.', example='Alibaba Inc'),
  organizationUnit?: string(name='OrganizationUnit', description='The name of the organization unit. Default value: Aliyun CDN.', example='Aliyun CDN'),
  SANs?: string(name='SANs', description='The Subject Alternative Name (SAN) extension of the SSL certificate. This extension is used to add domain names to the certificate. Separate multiple domain names with commas (,).', example='example.com'),
  state?: string(name='State', description='The provincial district to which the organization belongs. Default value: Zhejiang.', example='Zhejiang'),
}

model CreateCdnCertificateSigningRequestResponseBody = {
  commonName?: string(name='CommonName', description='The Common Name of the certificate.', example='CommonName'),
  csr?: string(name='Csr', description='The content of the CSR.', example='CSRName'),
  pubMd5?: string(name='PubMd5', description='The MD5 value of the certificate public key.', example='629bf4fd8104eda171135bcb0f77****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model CreateCdnCertificateSigningRequestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCdnCertificateSigningRequestResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request CreateCdnCertificateSigningRequestRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateCdnCertificateSigningRequestResponse
 */
async function createCdnCertificateSigningRequestWithOptions(request: CreateCdnCertificateSigningRequestRequest, runtime: Util.RuntimeOptions): CreateCdnCertificateSigningRequestResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.city)) {
    query['City'] = request.city;
  }
  if (!Util.isUnset(request.commonName)) {
    query['CommonName'] = request.commonName;
  }
  if (!Util.isUnset(request.country)) {
    query['Country'] = request.country;
  }
  if (!Util.isUnset(request.email)) {
    query['Email'] = request.email;
  }
  if (!Util.isUnset(request.organization)) {
    query['Organization'] = request.organization;
  }
  if (!Util.isUnset(request.organizationUnit)) {
    query['OrganizationUnit'] = request.organizationUnit;
  }
  if (!Util.isUnset(request.SANs)) {
    query['SANs'] = request.SANs;
  }
  if (!Util.isUnset(request.state)) {
    query['State'] = request.state;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCdnCertificateSigningRequest',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request CreateCdnCertificateSigningRequestRequest
  * @return CreateCdnCertificateSigningRequestResponse
 */
async function createCdnCertificateSigningRequest(request: CreateCdnCertificateSigningRequestRequest): CreateCdnCertificateSigningRequestResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCdnCertificateSigningRequestWithOptions(request, runtime);
}

model CreateCdnDeliverTaskRequest {
  deliver?: string(name='Deliver', description='The method that is used to send operations reports. Operations reports are sent to you only by email. The settings must be escaped in JSON.', example='{\\"email\\":{\\"to\\":[\\"lyx@32hike.com\\"]}}'),
  domainName?: string(name='DomainName', description='The domain names to be tracked. Separate multiple domain names with commas (,). You can specify up to 500 domain names. If you want to specify more than 500 domain names, [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.2020520001.aliyun_topbar.18.dbd44bd3e4f845#/ticket/createIndex).  

>  If you do not specify a domain name, the custom operations reports are created for all domain names that belong to your Alibaba Cloud account.', example='www.example1.com,www.example2.com'),
  name?: string(name='Name', description='The name of the tracking task.', example='Daily'),
  reports?: string(name='Reports', description='The operations reports that are tracked by the task. The data must be escaped in JSON.', example='[{\\"reportId\\":1},{\\"reportId\\":13}]'),
  schedule?: string(name='Schedule', description='The parameters that specify the time interval at which the tracking task sends operations reports. The settings must be escaped in JSON.', example='{\\"crontab\\":\\"00 00 08 * * ?\\",\\"frequency\\":\\"d\\"}'),
}

model CreateCdnDeliverTaskResponseBody = {
  deliverId?: string(name='DeliverId', description='The ID of the tracking task.', example='1025'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model CreateCdnDeliverTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCdnDeliverTaskResponseBody(name='body'),
}

/**
  * > You can call this operation up to three times per second per account.
  *
  * @param request CreateCdnDeliverTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateCdnDeliverTaskResponse
 */
async function createCdnDeliverTaskWithOptions(request: CreateCdnDeliverTaskRequest, runtime: Util.RuntimeOptions): CreateCdnDeliverTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deliver)) {
    body['Deliver'] = request.deliver;
  }
  if (!Util.isUnset(request.domainName)) {
    body['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.reports)) {
    body['Reports'] = request.reports;
  }
  if (!Util.isUnset(request.schedule)) {
    body['Schedule'] = request.schedule;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateCdnDeliverTask',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can call this operation up to three times per second per account.
  *
  * @param request CreateCdnDeliverTaskRequest
  * @return CreateCdnDeliverTaskResponse
 */
async function createCdnDeliverTask(request: CreateCdnDeliverTaskRequest): CreateCdnDeliverTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCdnDeliverTaskWithOptions(request, runtime);
}

model CreateCdnSubTaskRequest {
  domainName?: string(name='DomainName', description='The domain names to be tracked. Separate multiple domain names with commas (,). You can specify up to 500 domain names. If you want to specify more than 500 domain names, [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.2020520001.aliyun_topbar.18.dbd44bd3e4f845#/ticket/createIndex).

>  If you do not specify a domain name, the custom operations reports are created for all domain names that belong to your Alibaba Cloud account.', example='www.example1.com,www.example2.com'),
  reportIds?: string(name='ReportIds', description='The IDs of the metrics that you want to include in the report. Separate multiple IDs with commas (,). Valid values:

*   **1**: frequently requested URLs (ranked by the number of requests)
*   **3**: frequently requested URLs (ranked by the amount of network traffic)
*   **5**: frequently used referer headers (ranked by the number of requests)
*   **7**: frequently used referer headers (ranked by the amount of network traffic)
*   **9**: frequently requested back-to-origin URLs (ranked by the number of requests)
*   **11**: frequently requested back-to-origin URLs (ranked by the amount of network traffic)
*   **13**: top client IP addresses (ranked by the number of requests)
*   **15**: top client IP addresses (ranked by the amount of network traffic)
*   **17**: domain names ranked by the amount of network traffic
*   **19**: page views and unique visitors
*   **21**: regions from which requests are initiated
*   **23**: distribution of Internet service providers (ISPs)', example='1,3,5'),
}

model CreateCdnSubTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model CreateCdnSubTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCdnSubTaskResponseBody(name='body'),
}

/**
  * > - This operation allows you to customize an operations report for a specific domain name. You can view the statistics about the domain name in the report.
  * - You can call this API operation up to three times per second per account.
  *
  * @param request CreateCdnSubTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateCdnSubTaskResponse
 */
async function createCdnSubTaskWithOptions(request: CreateCdnSubTaskRequest, runtime: Util.RuntimeOptions): CreateCdnSubTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.domainName)) {
    body['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.reportIds)) {
    body['ReportIds'] = request.reportIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateCdnSubTask',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > - This operation allows you to customize an operations report for a specific domain name. You can view the statistics about the domain name in the report.
  * - You can call this API operation up to three times per second per account.
  *
  * @param request CreateCdnSubTaskRequest
  * @return CreateCdnSubTaskResponse
 */
async function createCdnSubTask(request: CreateCdnSubTaskRequest): CreateCdnSubTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCdnSubTaskWithOptions(request, runtime);
}

model CreateIllegalUrlExportTaskRequest {
  taskName?: string(name='TaskName', description='The name of the export task.', example='exampleTask'),
  timePoint?: string(name='TimePoint', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-DDThh:mm:ssZ format. The finest granularity is one day.', example='2019-09-30T16:00:00Z'),
}

model CreateIllegalUrlExportTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='64D28B53-5902-409B-94F6-FD46680144FE'),
  taskId?: string(name='TaskId', description='The ID of the export task. You can use task IDs to query tasks.', example='tu_4b37ea97_a7fa_4d36_b363_061c1fxxxx'),
}

model CreateIllegalUrlExportTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateIllegalUrlExportTaskResponseBody(name='body'),
}

/**
  * > *   You can query data only by day. You can query data of the last month or later.
  * *   In most cases, a file that contains invalid URLs is generated five minutes after you create an export task. You can call the [DescribeIllegalUrlExportTask](~~156506~~) operation to query the URL where you can download the file.
  * *   The maximum number of times that each user can call this operation per second is 1.
  *
  * @param request CreateIllegalUrlExportTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateIllegalUrlExportTaskResponse
 */
async function createIllegalUrlExportTaskWithOptions(request: CreateIllegalUrlExportTaskRequest, runtime: Util.RuntimeOptions): CreateIllegalUrlExportTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.timePoint)) {
    query['TimePoint'] = request.timePoint;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateIllegalUrlExportTask',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > *   You can query data only by day. You can query data of the last month or later.
  * *   In most cases, a file that contains invalid URLs is generated five minutes after you create an export task. You can call the [DescribeIllegalUrlExportTask](~~156506~~) operation to query the URL where you can download the file.
  * *   The maximum number of times that each user can call this operation per second is 1.
  *
  * @param request CreateIllegalUrlExportTaskRequest
  * @return CreateIllegalUrlExportTaskResponse
 */
async function createIllegalUrlExportTask(request: CreateIllegalUrlExportTaskRequest): CreateIllegalUrlExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIllegalUrlExportTaskWithOptions(request, runtime);
}

model CreateRealTimeLogDeliveryRequest {
  domain?: string(name='Domain', description='The accelerated domain name for which you want to configure real-time log delivery. You can specify multiple domain names and separate them with commas (,).', example='example.com'),
  logstore?: string(name='Logstore', description='The name of the Logstore that collects log data from Alibaba Cloud Content Delivery Network (CDN) in real time.', example='LogstoreName'),
  project?: string(name='Project', description='The name of the Log Service project that is used for real-time log delivery.', example='ProjectName'),
  region?: string(name='Region', description='The ID of the region where the Log Service project is deployed. For more information, see [Regions that support real-time log delivery](~~144883~~).', example='cn-shanghai'),
}

model CreateRealTimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F32C57AA-7BF8-49AE-A2CC-9F42390F5A19'),
}

model CreateRealTimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRealTimeLogDeliveryResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request CreateRealTimeLogDeliveryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateRealTimeLogDeliveryResponse
 */
async function createRealTimeLogDeliveryWithOptions(request: CreateRealTimeLogDeliveryRequest, runtime: Util.RuntimeOptions): CreateRealTimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRealTimeLogDelivery',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request CreateRealTimeLogDeliveryRequest
  * @return CreateRealTimeLogDeliveryResponse
 */
async function createRealTimeLogDelivery(request: CreateRealTimeLogDeliveryRequest): CreateRealTimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRealTimeLogDeliveryWithOptions(request, runtime);
}

model CreateUsageDetailDataExportTaskRequest {
  domainNames?: string(name='DomainNames', description='The accelerated domain names based on which the resource usage details are generated. If you do not specify a domain name group, resource usage details are exported based on this parameter.

If you do not set this parameter, resource usage details are exported based on user accounts.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.

>  The end time must be later than the start time.', example='2019-12-10T21:00:00Z'),
  group?: string(name='Group', description='The group of accelerated domain names based on which the resource usage details are generated. If you set this parameter, ignore the **DomainNames** parameter.', example='xxx'),
  language?: string(name='Language', description='The language of the exported file. Valid values:

*   **zh-cn**: Chinese. This is the default value.
*   **en-us**: English', example='en-us'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.', example='2019-12-10T20:00:00Z'),
  taskName?: string(name='TaskName', description='The name of the task.', example='refresh'),
  type?: string(name='Type', description='The type of content based on which the data is generated. Valid values:

*   **flow**: network traffic and bandwidth
*   **vas**: requests', example='flow'),
}

model CreateUsageDetailDataExportTaskResponseBody = {
  endTime?: string(name='EndTime', description='The end of the time range that was queried.', example='2015-12-10T21:00:00Z'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ED61C6C3-8241-4187-AAA7-5157AE175CEC'),
  startTime?: string(name='StartTime', description='The beginning of the time range that was queried.', example='2015-12-10T20:00:00Z'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='123456'),
}

model CreateUsageDetailDataExportTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUsageDetailDataExportTaskResponseBody(name='body'),
}

/**
  * - You can create a task that queries data of up to the last year. The maximum time range that can be queried is one month.
  * - The maximum number of times that each Alibaba Cloud account can call this operation per second is 100.
  *
  * @param request CreateUsageDetailDataExportTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateUsageDetailDataExportTaskResponse
 */
async function createUsageDetailDataExportTaskWithOptions(request: CreateUsageDetailDataExportTaskRequest, runtime: Util.RuntimeOptions): CreateUsageDetailDataExportTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainNames)) {
    query['DomainNames'] = request.domainNames;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateUsageDetailDataExportTask',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - You can create a task that queries data of up to the last year. The maximum time range that can be queried is one month.
  * - The maximum number of times that each Alibaba Cloud account can call this operation per second is 100.
  *
  * @param request CreateUsageDetailDataExportTaskRequest
  * @return CreateUsageDetailDataExportTaskResponse
 */
async function createUsageDetailDataExportTask(request: CreateUsageDetailDataExportTaskRequest): CreateUsageDetailDataExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUsageDetailDataExportTaskWithOptions(request, runtime);
}

model CreateUserUsageDataExportTaskRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query. The end time must be later than the start time.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.', example='2015-12-10T21:00:00Z'),
  language?: string(name='Language', description='The language of the exported file.

*   **zh-cn**: Chinese. This is the default value.
*   **en-us**: English.', example='zh-cn'),
  startTime?: string(name='StartTime', description='The start of the time range to query. The time interval at which the specified data is collected is five minutes.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.', example='2015-12-10T20:00:00Z'),
  taskName?: string(name='TaskName', description='The name of the task.', example='refresh'),
}

model CreateUserUsageDataExportTaskResponseBody = {
  endTime?: string(name='EndTime', description='The end of the time range where the QPS data was queried.', example='2015-12-10T21:00:00Z'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ED61C6C3-8241-4187-AAA7-5157AE175CEC'),
  startTime?: string(name='StartTime', description='The beginning of the time range that was queried.', example='2015-12-10T20:00:00Z'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='129456'),
}

model CreateUserUsageDataExportTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUserUsageDataExportTaskResponseBody(name='body'),
}

/**
  * > *   You can create a task that queries data of up to the last one year. The maximum time range that can be queried is one month.
  * > *   The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request CreateUserUsageDataExportTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateUserUsageDataExportTaskResponse
 */
async function createUserUsageDataExportTaskWithOptions(request: CreateUserUsageDataExportTaskRequest, runtime: Util.RuntimeOptions): CreateUserUsageDataExportTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateUserUsageDataExportTask',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > *   You can create a task that queries data of up to the last one year. The maximum time range that can be queried is one month.
  * > *   The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request CreateUserUsageDataExportTaskRequest
  * @return CreateUserUsageDataExportTaskResponse
 */
async function createUserUsageDataExportTask(request: CreateUserUsageDataExportTaskRequest): CreateUserUsageDataExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserUsageDataExportTaskWithOptions(request, runtime);
}

model DeleteCdnDeliverTaskRequest {
  deliverId?: long(name='DeliverId', description='The IDs of the tracking tasks that you want to delete. You can call the [DescribeCdnDeliverList](~~270877~~) operation to query task IDs.', example='1'),
}

model DeleteCdnDeliverTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteCdnDeliverTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCdnDeliverTaskResponseBody(name='body'),
}

/**
  * >  You can call this operation up to three times per second per account.
  *
  * @param request DeleteCdnDeliverTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteCdnDeliverTaskResponse
 */
async function deleteCdnDeliverTaskWithOptions(request: DeleteCdnDeliverTaskRequest, runtime: Util.RuntimeOptions): DeleteCdnDeliverTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deliverId)) {
    query['DeliverId'] = request.deliverId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCdnDeliverTask',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  You can call this operation up to three times per second per account.
  *
  * @param request DeleteCdnDeliverTaskRequest
  * @return DeleteCdnDeliverTaskResponse
 */
async function deleteCdnDeliverTask(request: DeleteCdnDeliverTaskRequest): DeleteCdnDeliverTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCdnDeliverTaskWithOptions(request, runtime);
}

model DeleteCdnDomainRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name that you want to delete. You can specify only one domain name in each call.', example='example.com'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
}

model DeleteCdnDomainResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model DeleteCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCdnDomainResponseBody(name='body'),
}

/**
  * - We recommend that you add an A record for the domain name in the system of your DNS service provider before you delete the domain name from Alibaba Cloud CDN. Otherwise, the domain name may become inaccessible. Proceed with caution.
  * - After you successfully call the DeleteCdnDomain operation, all records of the deleted domain name are removed. If you need to only disable the domain name, we recommend that you call the StopCdnDomain operation.
  * - The maximum number of times that each user can call this operation per second is 10.
  *
  * @param request DeleteCdnDomainRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteCdnDomainResponse
 */
async function deleteCdnDomainWithOptions(request: DeleteCdnDomainRequest, runtime: Util.RuntimeOptions): DeleteCdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCdnDomain',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - We recommend that you add an A record for the domain name in the system of your DNS service provider before you delete the domain name from Alibaba Cloud CDN. Otherwise, the domain name may become inaccessible. Proceed with caution.
  * - After you successfully call the DeleteCdnDomain operation, all records of the deleted domain name are removed. If you need to only disable the domain name, we recommend that you call the StopCdnDomain operation.
  * - The maximum number of times that each user can call this operation per second is 10.
  *
  * @param request DeleteCdnDomainRequest
  * @return DeleteCdnDomainResponse
 */
async function deleteCdnDomain(request: DeleteCdnDomainRequest): DeleteCdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCdnDomainWithOptions(request, runtime);
}

model DeleteCdnSubTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteCdnSubTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCdnSubTaskResponseBody(name='body'),
}

/**
  * >  You can call this API operation up to three times per second per account.
  *
  * @param request DeleteCdnSubTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteCdnSubTaskResponse
 */
async function deleteCdnSubTaskWithOptions(runtime: Util.RuntimeOptions): DeleteCdnSubTaskResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DeleteCdnSubTask',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  You can call this API operation up to three times per second per account.
  *
  * @return DeleteCdnSubTaskResponse
 */
async function deleteCdnSubTask(): DeleteCdnSubTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCdnSubTaskWithOptions(runtime);
}

model DeleteFCTriggerRequest {
  triggerARN?: string(name='TriggerARN', description='The trigger that corresponds to the Function Compute service.', example='acs:cdn:{RegionID}:{AccountID}:{Filter}'),
}

model DeleteFCTriggerResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC046C5D-8CB4-4B6B-B7F8-B335E51EF90E'),
}

model DeleteFCTriggerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFCTriggerResponseBody(name='body'),
}

async function deleteFCTriggerWithOptions(request: DeleteFCTriggerRequest, runtime: Util.RuntimeOptions): DeleteFCTriggerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.triggerARN)) {
    query['TriggerARN'] = request.triggerARN;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFCTrigger',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFCTrigger(request: DeleteFCTriggerRequest): DeleteFCTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFCTriggerWithOptions(request, runtime);
}

model DeleteRealTimeLogLogstoreRequest {
  logstore?: string(name='Logstore', description='The name of the Logstore to which log entries are delivered.', example='LogstoreName'),
  project?: string(name='Project', description='The name of the Log Service project that is used for real-time log delivery.', example='ProjectName'),
  region?: string(name='Region', description='The ID of the region where the Log Service project is deployed. For more information, see [Regions that support real-time log delivery](~~144883~~).', example='cn-shanghai'),
}

model DeleteRealTimeLogLogstoreResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9732E117-8A37-49FD-A36F-ABBB87556CA7'),
}

model DeleteRealTimeLogLogstoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRealTimeLogLogstoreResponseBody(name='body'),
}

/**
  * >  You can call this operation up to 100 times per second per account.
  *
  * @param request DeleteRealTimeLogLogstoreRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteRealTimeLogLogstoreResponse
 */
async function deleteRealTimeLogLogstoreWithOptions(request: DeleteRealTimeLogLogstoreRequest, runtime: Util.RuntimeOptions): DeleteRealTimeLogLogstoreResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRealTimeLogLogstore',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  You can call this operation up to 100 times per second per account.
  *
  * @param request DeleteRealTimeLogLogstoreRequest
  * @return DeleteRealTimeLogLogstoreResponse
 */
async function deleteRealTimeLogLogstore(request: DeleteRealTimeLogLogstoreRequest): DeleteRealTimeLogLogstoreResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRealTimeLogLogstoreWithOptions(request, runtime);
}

model DeleteRealtimeLogDeliveryRequest {
  domain?: string(name='Domain', description='The acceleration domain name for which you want to disable real-time log delivery. You can specify multiple domain names and separate them with commas (,).', example='example.com'),
  logstore?: string(name='Logstore', description='The name of the Logstore that collects log data from Alibaba Cloud Content Delivery Network (CDN) in real time.', example='LogstoreName'),
  project?: string(name='Project', description='The name of the Log Service project that is used for real-time log delivery.', example='ProjectName'),
  region?: string(name='Region', description='The ID of the region where the Log Service project is deployed. For more information, see [Regions that support real-time log delivery](~~144883~~).', example='cn-shanghai'),
}

model DeleteRealtimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9732E117-8A37-49FD-A36F-ABBB87556CA7'),
}

model DeleteRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRealtimeLogDeliveryResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DeleteRealtimeLogDeliveryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteRealtimeLogDeliveryResponse
 */
async function deleteRealtimeLogDeliveryWithOptions(request: DeleteRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): DeleteRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRealtimeLogDelivery',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DeleteRealtimeLogDeliveryRequest
  * @return DeleteRealtimeLogDeliveryResponse
 */
async function deleteRealtimeLogDelivery(request: DeleteRealtimeLogDeliveryRequest): DeleteRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRealtimeLogDeliveryWithOptions(request, runtime);
}

model DeleteSpecificConfigRequest {
  configId?: string(name='ConfigId', description='The configuration IDs. Separate configuration IDs with commas (,). For more information about ConfigId, see [Usage notes on ConfigId](~~388994~~).', example='2317'),
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name.', example='example.com'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DeleteSpecificConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteSpecificConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSpecificConfigResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DeleteSpecificConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteSpecificConfigResponse
 */
async function deleteSpecificConfigWithOptions(request: DeleteSpecificConfigRequest, runtime: Util.RuntimeOptions): DeleteSpecificConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSpecificConfig',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DeleteSpecificConfigRequest
  * @return DeleteSpecificConfigResponse
 */
async function deleteSpecificConfig(request: DeleteSpecificConfigRequest): DeleteSpecificConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSpecificConfigWithOptions(request, runtime);
}

model DeleteSpecificStagingConfigRequest {
  configId?: string(name='ConfigId', description='The configuration IDs. Separate configuration IDs with commas (,). For more information about ConfigId, see [Usage notes on ConfigId](~~388994~~).', example='2317'),
  domainName?: string(name='DomainName', description='The accelerated domain names (no more than 50). Separate domain names with commas (,).', example='example.com'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DeleteSpecificStagingConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteSpecificStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSpecificStagingConfigResponseBody(name='body'),
}

/**
  * > The maximum number of times that each user can call this operation per second is 20.
  *
  * @param request DeleteSpecificStagingConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteSpecificStagingConfigResponse
 */
async function deleteSpecificStagingConfigWithOptions(request: DeleteSpecificStagingConfigRequest, runtime: Util.RuntimeOptions): DeleteSpecificStagingConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSpecificStagingConfig',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > The maximum number of times that each user can call this operation per second is 20.
  *
  * @param request DeleteSpecificStagingConfigRequest
  * @return DeleteSpecificStagingConfigResponse
 */
async function deleteSpecificStagingConfig(request: DeleteSpecificStagingConfigRequest): DeleteSpecificStagingConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSpecificStagingConfigWithOptions(request, runtime);
}

model DeleteUsageDetailDataExportTaskRequest {
  taskId?: string(name='TaskId', description='The ID of the task. You can call the [DescribeUserUsageDataExportTask](~~91062~~) operation to query the most recent task list.', example='10'),
}

model DeleteUsageDetailDataExportTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model DeleteUsageDetailDataExportTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteUsageDetailDataExportTaskResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DeleteUsageDetailDataExportTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteUsageDetailDataExportTaskResponse
 */
async function deleteUsageDetailDataExportTaskWithOptions(request: DeleteUsageDetailDataExportTaskRequest, runtime: Util.RuntimeOptions): DeleteUsageDetailDataExportTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUsageDetailDataExportTask',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DeleteUsageDetailDataExportTaskRequest
  * @return DeleteUsageDetailDataExportTaskResponse
 */
async function deleteUsageDetailDataExportTask(request: DeleteUsageDetailDataExportTaskRequest): DeleteUsageDetailDataExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUsageDetailDataExportTaskWithOptions(request, runtime);
}

model DeleteUserUsageDataExportTaskRequest {
  taskId?: string(name='TaskId', description='The ID of the export task that you want to delete.', example='10'),
}

model DeleteUserUsageDataExportTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model DeleteUserUsageDataExportTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteUserUsageDataExportTaskResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DeleteUserUsageDataExportTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteUserUsageDataExportTaskResponse
 */
async function deleteUserUsageDataExportTaskWithOptions(request: DeleteUserUsageDataExportTaskRequest, runtime: Util.RuntimeOptions): DeleteUserUsageDataExportTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUserUsageDataExportTask',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DeleteUserUsageDataExportTaskRequest
  * @return DeleteUserUsageDataExportTaskResponse
 */
async function deleteUserUsageDataExportTask(request: DeleteUserUsageDataExportTaskRequest): DeleteUserUsageDataExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserUsageDataExportTaskWithOptions(request, runtime);
}

model DescribeBlockedRegionsRequest {
  language?: string(name='Language', description='The language. Valid values:

- **zh**: simplified Chinese
- **en**: English
- **jp**: Japanese', example='zh'),
}

model DescribeBlockedRegionsResponseBody = {
  infoList?: {
    infoItem?: [ 
    {
      continent?: string(name='Continent', description='The district to which the country or region belongs.', example='亚洲'),
      countriesAndRegions?: string(name='CountriesAndRegions', description='The abbreviation of the name of the country or region.', example='AF'),
      countriesAndRegionsName?: string(name='CountriesAndRegionsName', description='The name of the country or region.', example='阿富汗'),
    }
  ](name='InfoItem')
  }(name='InfoList', description='A list of countries and regions.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BFFCDFAD-DACC-484E-9BE6-0AF3B3A0DD23'),
}

model DescribeBlockedRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBlockedRegionsResponseBody(name='body'),
}

/**
  * >  You can call this operation up to 50 times per second.
  *
  * @param request DescribeBlockedRegionsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeBlockedRegionsResponse
 */
async function describeBlockedRegionsWithOptions(request: DescribeBlockedRegionsRequest, runtime: Util.RuntimeOptions): DescribeBlockedRegionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBlockedRegions',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  You can call this operation up to 50 times per second.
  *
  * @param request DescribeBlockedRegionsRequest
  * @return DescribeBlockedRegionsResponse
 */
async function describeBlockedRegions(request: DescribeBlockedRegionsRequest): DescribeBlockedRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBlockedRegionsWithOptions(request, runtime);
}

model DescribeCdnCertificateDetailRequest {
  certName?: string(name='CertName', description='The ID of the SSL certificate. You can query only one certificate at a time.', example='cert-15480655xxxx'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeCdnCertificateDetailResponseBody = {
  cert?: string(name='Cert', description='The content of the SSL certificate.', example='-----BEGIN CERTIFICATE-----\\nMIIFzDCCBLSgAwIBxxxx'),
  certId?: long(name='CertId', description='The ID of the SSL certificate.', example='881049'),
  certName?: string(name='CertName', description='The name of the SSL certificate.', example='cert-15480655xxxx'),
  key?: string(name='Key', description='The key of the SSL certificate.', example='xxxx'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model DescribeCdnCertificateDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnCertificateDetailResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 20.
  *
  * @param request DescribeCdnCertificateDetailRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnCertificateDetailResponse
 */
async function describeCdnCertificateDetailWithOptions(request: DescribeCdnCertificateDetailRequest, runtime: Util.RuntimeOptions): DescribeCdnCertificateDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certName)) {
    query['CertName'] = request.certName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnCertificateDetail',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 20.
  *
  * @param request DescribeCdnCertificateDetailRequest
  * @return DescribeCdnCertificateDetailResponse
 */
async function describeCdnCertificateDetail(request: DescribeCdnCertificateDetailRequest): DescribeCdnCertificateDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnCertificateDetailWithOptions(request, runtime);
}

model DescribeCdnCertificateListRequest {
  domainName?: string(name='DomainName', description='The accelerated domain names. Separate multiple accelerated domain names with commas (,).

If you do not specify an ID, SSL certificates of all your accelerated domain names are queried.', example='example.com'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeCdnCertificateListResponseBody = {
  certificateListModel?: {
    certList?: {
      cert?: [ 
      {
        certId?: long(name='CertId', description='The ID of the SSL certificate.', example='1'),
        certName?: string(name='CertName', description='The name of the SSL certificate.', example='my_cert'),
        common?: string(name='Common', description='The Common Name (CN) attribute of the SSL certificate. In most cases, the value is a domain name.', example='example.com'),
        fingerprint?: string(name='Fingerprint', description='The fingerprint of the SSL certificate.', example='2ED68FD33786C5B42950D40A6C50353575BB****'),
        issuer?: string(name='Issuer', description='The certificate authority (CA) that issued the SSL certificate.', example='CO****'),
        lastTime?: long(name='LastTime', description='The timestamp when the SSL certificate was issued.', example='1512388610'),
      }
    ](name='Cert')
    }(name='CertList', description='The details about each SSL certificate.'),
    count?: int32(name='Count', description='The number of SSL certificates returned.', example='2'),
  }(name='CertificateListModel', description='The data type of the SSL certificate information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FC0E34AC-0239-44A7-AB0E-800DE522C8DA'),
}

model DescribeCdnCertificateListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnCertificateListResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeCdnCertificateListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnCertificateListResponse
 */
async function describeCdnCertificateListWithOptions(request: DescribeCdnCertificateListRequest, runtime: Util.RuntimeOptions): DescribeCdnCertificateListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnCertificateList',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeCdnCertificateListRequest
  * @return DescribeCdnCertificateListResponse
 */
async function describeCdnCertificateList(request: DescribeCdnCertificateListRequest): DescribeCdnCertificateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnCertificateListWithOptions(request, runtime);
}

model DescribeCdnDeletedDomainsRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page **1**. Valid values: **1** to **100000**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**. Valid values: **1** to **500**. The value must be an integer.', example='5'),
}

model DescribeCdnDeletedDomainsResponseBody = {
  domains?: {
    pageData?: [ 
    {
      domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
      gmtModified?: string(name='GmtModified', description='The last time when the accelerated domain name was modified. The time is in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC+0.', example='2015-10-28T11:05:52Z'),
    }
  ](name='PageData')
  }(name='Domains', description='The information about the accelerated domain names.'),
  pageNumber?: long(name='PageNumber', description='The page number of the returned page. It corresponds to the request parameter **PageNumber**.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries returned per page. It corresponds to the request parameter **PageSize**.', example='5'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AA75AADB-5E25-4970-B480-EAA1F5658483'),
  totalCount?: long(name='TotalCount', description='The total number of domain names returned.', example='16'),
}

model DescribeCdnDeletedDomainsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnDeletedDomainsResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 10.
  *
  * @param request DescribeCdnDeletedDomainsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnDeletedDomainsResponse
 */
async function describeCdnDeletedDomainsWithOptions(request: DescribeCdnDeletedDomainsRequest, runtime: Util.RuntimeOptions): DescribeCdnDeletedDomainsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnDeletedDomains',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 10.
  *
  * @param request DescribeCdnDeletedDomainsRequest
  * @return DescribeCdnDeletedDomainsResponse
 */
async function describeCdnDeletedDomains(request: DescribeCdnDeletedDomainsRequest): DescribeCdnDeletedDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnDeletedDomainsWithOptions(request, runtime);
}

model DescribeCdnDeliverListRequest {
  deliverId?: long(name='DeliverId', description='The ID of the tracking task that you want to query. If you do not specify an ID, all tracking tasks are queried.', example='3'),
  ownerId?: long(name='OwnerId'),
}

model DescribeCdnDeliverListResponseBody = {
  content?: string(name='Content', description='The information about the tracking task.', example='"data": [{"deliverId": 1,"status": "enable","createTime": "2020-10-14T11:19:26Z","crontab": "0 0 0 * * ?","frequency": "d","name": "domain subscribe","dmList": ["www.example.com"],"reports": [{"reportId": 1,"conditions": [{"op": "in","field": "prov"}]},{"reportId": 2}],"deliver": {"email": {"subject": "subject","to": ["example***@alibaba-inc.com"]}}}]}}'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='12345'),
}

model DescribeCdnDeliverListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnDeliverListResponseBody(name='body'),
}

/**
  * >  You can call this operation up to three times per second.
  *
  * @param request DescribeCdnDeliverListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnDeliverListResponse
 */
async function describeCdnDeliverListWithOptions(request: DescribeCdnDeliverListRequest, runtime: Util.RuntimeOptions): DescribeCdnDeliverListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deliverId)) {
    query['DeliverId'] = request.deliverId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnDeliverList',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  You can call this operation up to three times per second.
  *
  * @param request DescribeCdnDeliverListRequest
  * @return DescribeCdnDeliverListResponse
 */
async function describeCdnDeliverList(request: DescribeCdnDeliverListRequest): DescribeCdnDeliverListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnDeliverListWithOptions(request, runtime);
}

model DescribeCdnDomainByCertificateRequest {
  ownerId?: long(name='OwnerId'),
  SSLPub?: string(name='SSLPub', description='The public key of the SSL certificate. You must encode the public key in Base64 and then call the encodeURIComponent function to encode the public key again.

The public key must be in the PEM format.', example='******'),
  SSLStatus?: boolean(name='SSLStatus', description='Specifies whether the domain name list to return contains only domain names with HTTPS enabled or disabled.

- true: The domain name list contains only domain names with HTTPS enabled.
- false: The domain name list contains only domain names with HTTPS disabled.', example='true'),
}

model DescribeCdnDomainByCertificateResponseBody = {
  certInfos?: {
    certInfo?: [ 
    {
      certCaIsLegacy?: string(name='CertCaIsLegacy', description='Indicates whether the SSL certificate is obsolete. Valid values:

*   **yes**: The SSL certificate is obsolete.
*   **no**: The SSL certificate is working as expected.', example='yes'),
      certExpireTime?: string(name='CertExpireTime', description='The time when the SSL certificate expires.', example='Nov 29 00:00:00 2016 GMT'),
      certExpired?: string(name='CertExpired', description='Indicates whether the SSL certificate is expired. Valid values:

*   **yes**: The SSL certificate is expired.
*   **no**: The SSL certificate is not expired.', example='yes'),
      certStartTime?: string(name='CertStartTime', description='The time when the SSL certificate became effective.', example='Nov 29 23:59:59 2017 GMT'),
      certSubjectCommonName?: string(name='CertSubjectCommonName', description='The name of the SSL certificate owner.', example='owner'),
      certType?: string(name='CertType', description='The type of the certificate. Valid responses: **RSA**, **DSA**, and **ECDSA**.', example='RSA'),
      domainList?: string(name='DomainList', description='If a value is returned, the value matches the SSL certificate. Multiple domain names are separated with commas (,).', example='example.com,aliyundoc.com'),
      domainNames?: string(name='DomainNames', description='The domain names (DNS fields) that match the SSL certificate. Multiple domain names are separated with commas (,).', example='*.example.com,aliyundoc.com'),
      issuer?: string(name='Issuer', description='The certificate authority that issued the SSL certificate.', example='C=US, O=Symantec Corporation, OU=Symantec Trust Network, OU=Domain Validated SSL, CN=Symantec Basic DV SSL CA - G1'),
    }
  ](name='CertInfo')
  }(name='CertInfos', description='The information about the SSL certificate.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ASAF2FDS-12SADSA-DDSAE3D-DSADCD4C-CDADS2D'),
}

model DescribeCdnDomainByCertificateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnDomainByCertificateResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeCdnDomainByCertificateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnDomainByCertificateResponse
 */
async function describeCdnDomainByCertificateWithOptions(request: DescribeCdnDomainByCertificateRequest, runtime: Util.RuntimeOptions): DescribeCdnDomainByCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.SSLPub)) {
    query['SSLPub'] = request.SSLPub;
  }
  if (!Util.isUnset(request.SSLStatus)) {
    query['SSLStatus'] = request.SSLStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnDomainByCertificate',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeCdnDomainByCertificateRequest
  * @return DescribeCdnDomainByCertificateResponse
 */
async function describeCdnDomainByCertificate(request: DescribeCdnDomainByCertificateRequest): DescribeCdnDomainByCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnDomainByCertificateWithOptions(request, runtime);
}

model DescribeCdnDomainConfigsRequest {
  configId?: string(name='ConfigId', description='The ID of the configuration. For more information about ConfigId, see [Usage notes on ConfigId](~~388994~~).', example='6295'),
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name in each call.', example='example.com'),
  functionNames?: string(name='FunctionNames', description='The names of the features. Separate multiple feature names with commas (,). For more information, see [BatchSetCdnDomainConfig](~~388460~~).', example='aliauth'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeCdnDomainConfigsResponseBody = {
  domainConfigs?: {
    domainConfig?: [ 
    {
      configId?: string(name='ConfigId', description='The ID of the configuration.', example='6295'),
      functionArgs?: {
        functionArg?: [ 
        {
          argName?: string(name='ArgName', description='The parameter name, which is the configuration item of **functionName**. You can configure multiple configuration items.', example='auth_type'),
          argValue?: string(name='ArgValue', description='The parameter value, which is the value of the configuration item of **functionName**.', example='req_auth'),
        }
      ](name='FunctionArg')
      }(name='FunctionArgs', description='The configuration of each feature.'),
      functionName?: string(name='FunctionName', description='The name of the feature.', example='aliauth'),
      parentId?: string(name='ParentId', description='The ID of the rule condition. This parameter is optional. To create a rule condition, you can configure the **condition** feature that is described in the [BatchSetCdnDomainConfig and SetCdnDomainStagingConfig](~~388460~~) topic. A rule condition can identify parameters that are included in requests and filter requests based on the identified parameters. Each rule condition has a [ConfigId](~~388994~~). You can use ConfigId as ParentId that is referenced by other features. This way, you can combine rule conditions and features for flexible configurations.

For more information, see [BatchSetCdnDomainConfig](~~90915~~) or ParentId configuration example in this topic.', example='222728944812032'),
      status?: string(name='Status', description='The status of the configuration. Valid values:

*   **success**
*   **testing**
*   **failed**
*   **configuring**', example='success'),
    }
  ](name='DomainConfig')
  }(name='DomainConfigs', description='The configurations of the domain name.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C80705BF-0F76-41FA-BAD1-5B59296A4E59'),
}

model DescribeCdnDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnDomainConfigsResponseBody(name='body'),
}

/**
  * >  You can call this operation up to 100 times per second per account.
  *
  * @param request DescribeCdnDomainConfigsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnDomainConfigsResponse
 */
async function describeCdnDomainConfigsWithOptions(request: DescribeCdnDomainConfigsRequest, runtime: Util.RuntimeOptions): DescribeCdnDomainConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.functionNames)) {
    query['FunctionNames'] = request.functionNames;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnDomainConfigs',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  You can call this operation up to 100 times per second per account.
  *
  * @param request DescribeCdnDomainConfigsRequest
  * @return DescribeCdnDomainConfigsResponse
 */
async function describeCdnDomainConfigs(request: DescribeCdnDomainConfigsRequest): DescribeCdnDomainConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnDomainConfigsWithOptions(request, runtime);
}

model DescribeCdnDomainDetailRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name.', example='example.com'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeCdnDomainDetailResponseBody = {
  getDomainDetailModel?: {
    cdnType?: string(name='CdnType', description='The workload type of the accelerated domain name. Valid values:

*   **web**: images and small files.
*   **download**: large files.
*   **video**: on-demand video and audio streaming.', example='web'),
    cname?: string(name='Cname', description='The Canonical Name (CNAME) that is assigned to the accelerated domain name. You must add a CNAME record in the system of your DNS service provider to map the accelerated domain name to the CNAME.', example='example.com.w.kunlunle.com'),
    description?: string(name='Description', description='The remarks of the accelerated domain name.', example='The live domain'),
    domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
    domainStatus?: string(name='DomainStatus', description='The status of the accelerated domain name. Valid values:

*   **online**: The domain name is enabled.
*   **offline**: The domain is disabled.
*   **configuring**: The domain is being configured.
*   **configure_failed**: The domain failed to be configured.
*   **checking**: The domain name is under review.
*   **check_failed**: The domain name failed the review.', example='online'),
    gmtCreated?: string(name='GmtCreated', description='The time when the accelerated domain name was added to Alibaba Cloud CDN.', example='2015-06-25T03:30:50Z'),
    gmtModified?: string(name='GmtModified', description='The last time when the accelerated domain name was modified.', example='2017-06-25T03:30:50Z'),
    httpsCname?: string(name='HttpsCname', description='The CNAME for which HTTPS is enabled.', example='example.com.w.kunlunle.com'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='abcd1234abcd1234'),
    scope?: string(name='Scope', description='The accelerated region.', example='domestic'),
    serverCertificateStatus?: string(name='ServerCertificateStatus', description='Specifies whether to enable the Security Socket Layer (SSL) certificate. Valid values:

*   **on**: enables the SSL certificate.
*   **off**: disables the SSL certificate.', example='on'),
    sourceModels?: {
      sourceModel?: [ 
      {
        content?: string(name='Content', description='The address of the origin server.', example='example.com'),
        enabled?: string(name='Enabled', description='The status of the origin server.', example='online'),
        port?: int32(name='Port', description='The port over which requests are redirected to the origin server. Ports 443 and 80 are supported.', example='80'),
        priority?: string(name='Priority', description='The priority of the origin server if multiple origin servers are specified.', example='20'),
        type?: string(name='Type', description='The type of the origin server. Valid values:

*   **ipaddr**: IP address
*   **domain**: domain name
*   **oss**: Object Storage Service (OSS) bucket endpoint', example='domain'),
        weight?: string(name='Weight', description='The weight of the origin server if multiple origin servers are specified.', example='10'),
      }
    ](name='SourceModel')
    }(name='SourceModels', description='The information about the origin server.'),
  }(name='GetDomainDetailModel', description='The detailed information about the accelerated domain name.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='18CF38AA-1275-451D-A12B-4EC0BF1C5E30'),
}

model DescribeCdnDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnDomainDetailResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeCdnDomainDetailRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnDomainDetailResponse
 */
async function describeCdnDomainDetailWithOptions(request: DescribeCdnDomainDetailRequest, runtime: Util.RuntimeOptions): DescribeCdnDomainDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnDomainDetail',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeCdnDomainDetailRequest
  * @return DescribeCdnDomainDetailResponse
 */
async function describeCdnDomainDetail(request: DescribeCdnDomainDetailRequest): DescribeCdnDomainDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnDomainDetailWithOptions(request, runtime);
}

model DescribeCdnDomainLogsRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.

>  The end time must be later than the start time.', example='2017-12-22T08:00:00Z'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return. Pages start from page **1**.', example='2'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page. Default value: **300**. Maximum value: **1000**. Valid values: **1** to **1000**.', example='300'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.', example='2017-12-21T08:00:00Z'),
}

model DescribeCdnDomainLogsResponseBody = {
  domainLogDetails?: {
    domainLogDetail?: [ 
    {
      domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
      logCount?: long(name='LogCount', description='The total number of entries returned on the current page.', example='10'),
      logInfos?: {
        logInfoDetail?: [ 
        {
          endTime?: string(name='EndTime', description='The end of the time range where the QPS data was queried.', example='2015-05-23T14:00:00Z'),
          logName?: string(name='LogName', description='The name of the log file.', example='demo.aliyundoc.com_2015_05_23_2100_2200.gz'),
          logPath?: string(name='LogPath', description='The path of the log file.', example='guide.aliyundoc.com-hangzhou.xxx'),
          logSize?: long(name='LogSize', description='The size of the log file.', example='258'),
          startTime?: string(name='StartTime', description='The start of the time range that was queried.', example='2015-05-23T13:00:00Z'),
        }
      ](name='LogInfoDetail')
      }(name='LogInfos', description='The detailed log information, which is indicated by the LogInfoDetail parameter.'),
      pageInfos?: {
        pageIndex?: long(name='PageIndex', description='The page number of the returned page.', example='1'),
        pageSize?: long(name='PageSize', description='The number of entries returned per page.', example='20'),
        total?: long(name='Total', description='The total number of entries returned.', example='20'),
      }(name='PageInfos', description='The detailed log information, which is indicated by the PageInfoDetail parameter.'),
    }
  ](name='DomainLogDetail')
  }(name='DomainLogDetails', description='The detailed log information, which is indicated by the DomainLogDetail parameter.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model DescribeCdnDomainLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnDomainLogsResponseBody(name='body'),
}

/**
  * > *   If you do not set **StartTime** or **EndTime**, data collected within the last 24 hours is queried. If you set both **StartTime** and **EndTime**, data collected within the specified time range is queried.
  * *   The log data was collected at an interval of 1 hour.
  * *   The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeCdnDomainLogsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnDomainLogsResponse
 */
async function describeCdnDomainLogsWithOptions(request: DescribeCdnDomainLogsRequest, runtime: Util.RuntimeOptions): DescribeCdnDomainLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnDomainLogs',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > *   If you do not set **StartTime** or **EndTime**, data collected within the last 24 hours is queried. If you set both **StartTime** and **EndTime**, data collected within the specified time range is queried.
  * *   The log data was collected at an interval of 1 hour.
  * *   The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeCdnDomainLogsRequest
  * @return DescribeCdnDomainLogsResponse
 */
async function describeCdnDomainLogs(request: DescribeCdnDomainLogsRequest): DescribeCdnDomainLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnDomainLogsWithOptions(request, runtime);
}

model DescribeCdnDomainStagingConfigRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name in each call.', example='example.com'),
  functionNames?: string(name='FunctionNames', description='The list of feature names. Separate multiple values with commas (,). For more information, see [A list of features](~~388460~~).', example='aliauth'),
}

model DescribeCdnDomainStagingConfigResponseBody = {
  domainConfigs?: [ 
    {
      configId?: string(name='ConfigId', description='The ID of the configuration.', example='6xx5'),
      functionArgs?: [ 
        {
          argName?: string(name='ArgName', description='The name of the configuration.', example='auth_type'),
          argValue?: string(name='ArgValue', description='The value of the configuration.', example='req_auth'),
        }
      ](name='FunctionArgs', description='The description of each feature.'),
      functionName?: string(name='FunctionName', description='The name of the feature.', example='aliauth'),
      parentId?: string(name='ParentId', description='The ID of the rule condition. This parameter is optional. To create a rule condition, you can configure the **condition** feature that is described in the [BatchSetCdnDomainConfig and SetCdnDomainStagingConfig](~~388460~~) topic. A rule condition can identify parameters that are included in requests and filter requests based on the identified parameters. Each rule condition has a [ConfigId](~~388994~~). You can use ConfigId as ParentId that is referenced by other features. This way, you can combine rule conditions and features for flexible configurations.

For more information, see [BatchSetCdnDomainConfig](~~90915~~) or ParentId configuration example in this topic.', example='222728944812032'),
      status?: string(name='Status', description='The status of the configuration. Valid values:

*   **testing**: being verified
*   **configuring**: being configured
*   **success**: configured
*   **failed**: failed', example='success'),
    }
  ](name='DomainConfigs', description='The configurations of the domain name.'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C80705BF-0F76-41FA-BAD1-5B59296A4E59'),
}

model DescribeCdnDomainStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnDomainStagingConfigResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeCdnDomainStagingConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnDomainStagingConfigResponse
 */
async function describeCdnDomainStagingConfigWithOptions(request: DescribeCdnDomainStagingConfigRequest, runtime: Util.RuntimeOptions): DescribeCdnDomainStagingConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.functionNames)) {
    query['FunctionNames'] = request.functionNames;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnDomainStagingConfig',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeCdnDomainStagingConfigRequest
  * @return DescribeCdnDomainStagingConfigResponse
 */
async function describeCdnDomainStagingConfig(request: DescribeCdnDomainStagingConfigRequest): DescribeCdnDomainStagingConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnDomainStagingConfigWithOptions(request, runtime);
}

model DescribeCdnHttpsDomainListRequest {
  keyword?: string(name='Keyword', description='The keyword used for search.', example='com'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: **1** to **100000**.', example='5'),
  pageSize?: int32(name='PageSize', description='The maximum number of entries to return on each page. Default value: **20**.', example='20'),
}

model DescribeCdnHttpsDomainListResponseBody = {
  certInfos?: {
    certInfo?: [ 
    {
      certCommonName?: string(name='CertCommonName', description='The Common Name on the SSL certificate.', example='example.org'),
      certExpireTime?: string(name='CertExpireTime', description='The time when the SSL certificate expires.', example='2018-12-26 14:45:09'),
      certName?: string(name='CertName', description='The name of the SSL certificate.', example='test'),
      certStartTime?: string(name='CertStartTime', description='The time when the SSL certificate became effective.', example='2018-11-26 14:45:09'),
      certStatus?: string(name='CertStatus', description='The status of the SSL certificate. Valid values:

*   **ok**: The SSL certificate is working as expected.
*   **mismatch**: The SSL certificate does not match the specified domain name.
*   **expired**: The SSL certificate has expired.
*   **expire_soon**: The SSL certificate will expire soon.', example='mismatch'),
      certType?: string(name='CertType', description='The type of the SSL certificate. Valid values:

*   **free**: a free SSL certificate.
*   **cas**: an SSL certificate purchased from Alibaba Cloud SSL Certificates Service.
*   **upload**: a user uploaded certificate.', example='free'),
      certUpdateTime?: string(name='CertUpdateTime', description='The time when the certificate was renewed.', example='2019-01-08 18:33:16'),
      domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
    }
  ](name='CertInfo')
  }(name='CertInfos', description='The information about the SSL certificate.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F5E8DF64-7175-4186-9B06-F002C0BBD0C5'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='16'),
}

model DescribeCdnHttpsDomainListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnHttpsDomainListResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeCdnHttpsDomainListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnHttpsDomainListResponse
 */
async function describeCdnHttpsDomainListWithOptions(request: DescribeCdnHttpsDomainListRequest, runtime: Util.RuntimeOptions): DescribeCdnHttpsDomainListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnHttpsDomainList',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeCdnHttpsDomainListRequest
  * @return DescribeCdnHttpsDomainListResponse
 */
async function describeCdnHttpsDomainList(request: DescribeCdnHttpsDomainListRequest): DescribeCdnHttpsDomainListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnHttpsDomainListWithOptions(request, runtime);
}

model DescribeCdnOrderCommodityCodeRequest {
  commodityCode?: string(name='CommodityCode', description='The original commodity code.', example='xxx'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeCdnOrderCommodityCodeResponseBody = {
  orderCommodityCode?: string(name='OrderCommodityCode', description='The commodity code that includes the organization unit.', example='xxx'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BFFCDFAD-DACC-484E-9BE6-0AF3B3A0DD23'),
}

model DescribeCdnOrderCommodityCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnOrderCommodityCodeResponseBody(name='body'),
}

async function describeCdnOrderCommodityCodeWithOptions(request: DescribeCdnOrderCommodityCodeRequest, runtime: Util.RuntimeOptions): DescribeCdnOrderCommodityCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.commodityCode)) {
    query['CommodityCode'] = request.commodityCode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnOrderCommodityCode',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCdnOrderCommodityCode(request: DescribeCdnOrderCommodityCodeRequest): DescribeCdnOrderCommodityCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnOrderCommodityCodeWithOptions(request, runtime);
}

model DescribeCdnRegionAndIspRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeCdnRegionAndIspResponseBody = {
  isps?: {
    isp?: [ 
    {
      nameEn?: string(name='NameEn', description='The English name of the region.', example='unicom'),
      nameZh?: string(name='NameZh', description='The Chinese name of the ISP.', example='联通'),
    }
  ](name='Isp')
  }(name='Isps', description='A list of ISPs.'),
  regions?: {
    region?: [ 
    {
      nameEn?: string(name='NameEn', description='The English name of the region.', example='liaoning'),
      nameZh?: string(name='NameZh', description='The Chinese name of the region.', example='辽宁省'),
    }
  ](name='Region')
  }(name='Regions', description='A list of regions.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2387C335-932C-4E1E-862C-1C4363B6DE72'),
}

model DescribeCdnRegionAndIspResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnRegionAndIspResponseBody(name='body'),
}

/**
  * > *   The lists of ISPs and regions that are supported by Alibaba Cloud CDN are updated and published on the Alibaba Cloud International site.
  * *   The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeCdnRegionAndIspRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnRegionAndIspResponse
 */
async function describeCdnRegionAndIspWithOptions(request: DescribeCdnRegionAndIspRequest, runtime: Util.RuntimeOptions): DescribeCdnRegionAndIspResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnRegionAndIsp',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > *   The lists of ISPs and regions that are supported by Alibaba Cloud CDN are updated and published on the Alibaba Cloud International site.
  * *   The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeCdnRegionAndIspRequest
  * @return DescribeCdnRegionAndIspResponse
 */
async function describeCdnRegionAndIsp(request: DescribeCdnRegionAndIspRequest): DescribeCdnRegionAndIspResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnRegionAndIspWithOptions(request, runtime);
}

model DescribeCdnReportRequest {
  area?: string(name='Area', description='The region. You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query the most recent region list.

*   If you do not specify a region, all regions are queried.
*   If you specify a region, data in the specified region is returned. You can specify one or more regions. Separate regions with commas (,).', example='shanghai'),
  domainName?: string(name='DomainName', description='The domain names that you want to query. Separate domain names with commas (,).', example='www.example1.com,example2.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2020-09-17T01:00:00Z'),
  httpCode?: string(name='HttpCode', description='The HTTP status code. Valid values:

*   **2xx**: HTTP 2xx status codes
*   **3xx**: HTTP 3xx status codes
*   **4xx**: HTTP 4xx status codes
*   **5xx**: HTTP 5xx status codes

If you do not specify an HTTP status code, all HTTP status codes are queried.', example='2xx'),
  isOverseas?: string(name='IsOverseas', description='Specify whether the region is outside the Chinese mainland. Valid values:

*   **1**: outside the Chinese mainland
*   **0**: inside the Chinese mainland', example='0'),
  reportId?: long(name='ReportId', description='The ID of the operations report that you want to query. You can enter only one ID in each call. You can call the [DescribeCdnSubList](~~271655~~) operation to query the report ID.', example='1'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2020-09-17T00:00:00Z'),
}

model DescribeCdnReportResponseBody = {
  content?: map[string]any(name='Content', description='The content of the operations report.', example='"data":[{"deliver":{"report":{"title":"TopUrlByAcc","format":"table","shape":"","header":["url","traf","traf_rate","acc","acc_rate"]}},"data":[{"acc":440,"acc_rate":"0.200%","traf":22,"url":"http://demo.com","traf_rate":"0.100%"},{"acc":440,"acc_rate":"0.200%","traf":22,"url":"http://demo.com","traf_rate":"0.100%"}]}]}}'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DescribeCdnReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnReportResponseBody(name='body'),
}

/**
  * >  You can call this operation up to three times per second per account.
  *
  * @param request DescribeCdnReportRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnReportResponse
 */
async function describeCdnReportWithOptions(request: DescribeCdnReportRequest, runtime: Util.RuntimeOptions): DescribeCdnReportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.area)) {
    query['Area'] = request.area;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.httpCode)) {
    query['HttpCode'] = request.httpCode;
  }
  if (!Util.isUnset(request.isOverseas)) {
    query['IsOverseas'] = request.isOverseas;
  }
  if (!Util.isUnset(request.reportId)) {
    query['ReportId'] = request.reportId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnReport',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  You can call this operation up to three times per second per account.
  *
  * @param request DescribeCdnReportRequest
  * @return DescribeCdnReportResponse
 */
async function describeCdnReport(request: DescribeCdnReportRequest): DescribeCdnReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnReportWithOptions(request, runtime);
}

model DescribeCdnReportListRequest {
  reportId?: long(name='ReportId', description='The ID of the operations report that you want to query. If you do not specify an ID, all operations reports are queried.', example='1'),
}

model DescribeCdnReportListResponseBody = {
  content?: string(name='Content', description='The information about the operations report.', example='"data":[{"reportId":1,"deliver":{"report":{"title":"DomainPvUv","format":"chart","shape":"line","xAxis":"ds","yAxis":"cnt","legend":"cnt_type","header":["ds","cnt_type","cnt"]}}}'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DescribeCdnReportListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnReportListResponseBody(name='body'),
}

/**
  * > - This operation queries the metadata of all operations reports. The statistics in the reports are not returned.
  * - You can call this API operation up to three times per second per account.
  *
  * @param request DescribeCdnReportListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnReportListResponse
 */
async function describeCdnReportListWithOptions(request: DescribeCdnReportListRequest, runtime: Util.RuntimeOptions): DescribeCdnReportListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.reportId)) {
    query['ReportId'] = request.reportId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnReportList',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > - This operation queries the metadata of all operations reports. The statistics in the reports are not returned.
  * - You can call this API operation up to three times per second per account.
  *
  * @param request DescribeCdnReportListRequest
  * @return DescribeCdnReportListResponse
 */
async function describeCdnReportList(request: DescribeCdnReportListRequest): DescribeCdnReportListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnReportListWithOptions(request, runtime);
}

model DescribeCdnSMCertificateDetailRequest {
  certIdentifier?: string(name='CertIdentifier', description='The ID of the certificate.', example='648****-cn-hangzhou'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeCdnSMCertificateDetailResponseBody = {
  certExpireTime?: string(name='CertExpireTime', description='The time when the certificate expires. The time is displayed in UTC.', example='2022-08-31T09:42:28Z'),
  certIdentifier?: string(name='CertIdentifier', description='The ID of the certificate.', example='648****-cn-hangzhou'),
  certName?: string(name='CertName', description='The name of the certificate.', example='yourCertName'),
  certOrg?: string(name='CertOrg', description='The certificate authority (CA) that issued the certificate.', example='DigiCert Inc'),
  commonName?: string(name='CommonName', description='The top-level domain name.', example='example.com'),
  encryptCertificate?: string(name='EncryptCertificate', description='The content of the encryption certificate.', example='-BEGIN CERTIFICATE-----***-----END CERTIFICATE--'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A7C69682-7F88-40DD-A198-10D0309E439D'),
  sans?: string(name='Sans', description='The subdomain name.', example='***.example.com'),
  signCertificate?: string(name='SignCertificate', description='The content of the signature certificate.', example='--BEGIN CERTIFICATE-----***-----END CERTIFICATE--'),
}

model DescribeCdnSMCertificateDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnSMCertificateDetailResponseBody(name='body'),
}

/**
  * >  You can call this operation up to 20 times per second.
  *
  * @param request DescribeCdnSMCertificateDetailRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnSMCertificateDetailResponse
 */
async function describeCdnSMCertificateDetailWithOptions(request: DescribeCdnSMCertificateDetailRequest, runtime: Util.RuntimeOptions): DescribeCdnSMCertificateDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certIdentifier)) {
    query['CertIdentifier'] = request.certIdentifier;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnSMCertificateDetail',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  You can call this operation up to 20 times per second.
  *
  * @param request DescribeCdnSMCertificateDetailRequest
  * @return DescribeCdnSMCertificateDetailResponse
 */
async function describeCdnSMCertificateDetail(request: DescribeCdnSMCertificateDetailRequest): DescribeCdnSMCertificateDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnSMCertificateDetailWithOptions(request, runtime);
}

model DescribeCdnSMCertificateListRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name in each request.', example='example.com'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeCdnSMCertificateListResponseBody = {
  certificateListModel?: {
    certList?: {
      cert?: [ 
      {
        certIdentifier?: string(name='CertIdentifier', description='The ID of the certificate.', example='yourCertldentifier'),
        certName?: string(name='CertName', description='The name of the certificate.', example='yourCertName'),
        common?: string(name='Common', description='The common name of the certificate.', example='yourCertCommon'),
        issuer?: string(name='Issuer', description='The certificate authority (CA) that issued the certificate.', example='yourCertIssuer'),
      }
    ](name='Cert')
    }(name='CertList', description='A list of certificates.'),
    count?: int32(name='Count', description='The number of certificates that are returned.', example='2'),
  }(name='CertificateListModel', description='The type of the certificate information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DC0E34AC-0239-44A7-AB0E-800DE522C8DC'),
}

model DescribeCdnSMCertificateListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnSMCertificateListResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeCdnSMCertificateListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnSMCertificateListResponse
 */
async function describeCdnSMCertificateListWithOptions(request: DescribeCdnSMCertificateListRequest, runtime: Util.RuntimeOptions): DescribeCdnSMCertificateListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnSMCertificateList',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeCdnSMCertificateListRequest
  * @return DescribeCdnSMCertificateListResponse
 */
async function describeCdnSMCertificateList(request: DescribeCdnSMCertificateListRequest): DescribeCdnSMCertificateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnSMCertificateListWithOptions(request, runtime);
}

model DescribeCdnServiceRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeCdnServiceResponseBody = {
  changingAffectTime?: string(name='ChangingAffectTime', description='The time when the next billing method takes effect. The time is displayed in GMT.', example='2019-11-27T16:00:00Z'),
  changingChargeType?: string(name='ChangingChargeType', description='The next billing method that Alibaba Cloud CDN will use. Valid values:

*   **PayByTraffic**: pay-by-data-transfer.
*   **PayByBandwidth**: pay-by-bandwidth.', example='PayByTraffic'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='aliuidxx'),
  internetChargeType?: string(name='InternetChargeType', description='The current billing method of Alibaba Cloud CDN.

*   **PayByTraffic**: pay-by-data-transfer.
*   **PayByBandwidth**: pay-by-bandwidth.', example='PayByTraffic'),
  openingTime?: string(name='OpeningTime', description='The time when Alibaba Cloud CDN was activated. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mmZ format.', example='2019-02-28T13:11:49Z'),
  operationLocks?: {
    lockReason?: [ 
    {
      lockReason?: string(name='LockReason', description='The reason why Alibaba Cloud CDN is locked. A value of financial indicates that the service is locked due to overdue payments.', example='financial'),
    }
  ](name='LockReason')
  }(name='OperationLocks', description='The lock status of Alibaba Cloud CDN.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model DescribeCdnServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnServiceResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeCdnServiceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnServiceResponse
 */
async function describeCdnServiceWithOptions(request: DescribeCdnServiceRequest, runtime: Util.RuntimeOptions): DescribeCdnServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnService',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeCdnServiceRequest
  * @return DescribeCdnServiceResponse
 */
async function describeCdnService(request: DescribeCdnServiceRequest): DescribeCdnServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnServiceWithOptions(request, runtime);
}

model DescribeCdnSubListResponseBody = {
  content?: string(name='Content', description='The information about the tracking task.', example='{"RequestId":"3250A51D-C11D-46BA-B6B3-95348EEDE652","Description":"Success","Content":{"data":[{"subId":5,"reportId":[1,2,3],"createTime":"2020-09-25T09:39:33Z","domains"["www.example.com","www.example.com"],"effectiveFrom":"2020-09-17T00:00:00Z","effectiveEnd":"2020-11-17T00:00:00Z","status":"enable"}]}}'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3250A51D-C11D-46BA-B6B3-95348EEDE652'),
}

model DescribeCdnSubListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnSubListResponseBody(name='body'),
}

/**
  * > - By default, this operation queries all tracking tasks. However, only one tracking task can be displayed. Therefore, only one tracking task is returned.
  * - You can call this API operation up to three times per second per account.
  *
  * @param request DescribeCdnSubListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnSubListResponse
 */
async function describeCdnSubListWithOptions(runtime: Util.RuntimeOptions): DescribeCdnSubListResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeCdnSubList',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > - By default, this operation queries all tracking tasks. However, only one tracking task can be displayed. Therefore, only one tracking task is returned.
  * - You can call this API operation up to three times per second per account.
  *
  * @return DescribeCdnSubListResponse
 */
async function describeCdnSubList(): DescribeCdnSubListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnSubListWithOptions(runtime);
}

model DescribeCdnUserBillHistoryRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.

The end of the time range to query. The end time must be later than the start time.', example='2018-10-31T16:00:00Z'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.

The minimum data collection interval is 5 minutes.', example='2018-09-30T16:00:00Z'),
}

model DescribeCdnUserBillHistoryResponseBody = {
  billHistoryData?: {
    billHistoryDataItem?: [ 
    {
      billTime?: string(name='BillTime', description='The beginning of the time range that was queried.', example='2018-09-30T16:00:00Z'),
      billType?: string(name='BillType', description='The billing method.', example='month_4th_day_bandwidth'),
      billingData?: {
        billingDataItem?: [ 
        {
          bandwidth?: float(name='Bandwidth', description='The bandwidth. Unit: bit/s.', example='4041'),
          cdnRegion?: string(name='CdnRegion', description='The billable region. Valid values:

*   **CN**: mainland China
*   **OverSeas**: regions outside mainland China
*   **AP1**: Asia Pacific 1
*   **AP2**: Asia Pacific 2
*   **AP3**: Asia Pacific 3
*   **NA**: North America
*   **SA**: South America
*   **EU**: Europe
*   **MEAA**: Middle East and Africa', example='AP1'),
          chargeType?: string(name='ChargeType', description='The billable item. Valid values:

*   **StaticHttp**: static HTTP requests
*   **DynamicHttp**: dynamic HTTP requests
*   **DynamicHttps**: dynamic HTTPS requests', example='DynamicHttp'),
          count?: float(name='Count', description='The number of requests.', example='203601'),
          flow?: float(name='Flow', description='The amount of network traffic. Unit: bytes.', example='24567'),
        }
      ](name='BillingDataItem')
      }(name='BillingData', description='The billable items.'),
      dimension?: string(name='Dimension', description='The dimension.', example='flow'),
    }
  ](name='BillHistoryDataItem')
  }(name='BillHistoryData', description='The billing history returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ED61C6C3-8241-4187-AAA7-5157AE175CEC'),
}

model DescribeCdnUserBillHistoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnUserBillHistoryResponseBody(name='body'),
}

/**
  * - The maximum number of times that each user can call this operation per second is 100.
  * - You can query billing history up to the last one month.
  *
  * @param request DescribeCdnUserBillHistoryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnUserBillHistoryResponse
 */
async function describeCdnUserBillHistoryWithOptions(request: DescribeCdnUserBillHistoryRequest, runtime: Util.RuntimeOptions): DescribeCdnUserBillHistoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnUserBillHistory',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - The maximum number of times that each user can call this operation per second is 100.
  * - You can query billing history up to the last one month.
  *
  * @param request DescribeCdnUserBillHistoryRequest
  * @return DescribeCdnUserBillHistoryResponse
 */
async function describeCdnUserBillHistory(request: DescribeCdnUserBillHistoryRequest): DescribeCdnUserBillHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnUserBillHistoryWithOptions(request, runtime);
}

model DescribeCdnUserBillPredictionRequest {
  area?: string(name='Area', description='The billable region. Valid values:

*   **CN**: Chinese mainland
*   **OverSeas**: outside the Chinese mainland
*   **AP1**: Asia Pacific 1
*   **AP2**: Asia Pacific 2
*   **AP3**: Asia Pacific 3
*   **NA**: North America
*   **SA**: South America
*   **EU**: Europe
*   **MEAA**: Middle East and Africa

The default value is the current metering method. Regions inside and outside the Chinese mainland are classified into the **CN** or **OverSeas** billable regions. Billable regions inside the Chinese mainland include **CN**. Billable regions outside the Chinese mainland include **AP1**, **AP2**, **AP3**, **NA**, **SA**, **EU**, and **MEAA**.

>  For more information about billable regions, see [Billable regions](~~142221~~).', example='CN,OverSeas'),
  dimension?: string(name='Dimension', description='The billable item. A value of flow indicates bandwidth.', example='fiow'),
  endTime?: string(name='EndTime', description='The default value is the current time. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.

>  The end time must be later than the start time.', example='2018-10-25T10:00:00Z'),
  startTime?: string(name='StartTime', description='The default value is 00:00 on the first day of the current month. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.', example='2018-09-30T16:00:00Z'),
}

model DescribeCdnUserBillPredictionResponseBody = {
  billPredictionData?: {
    billPredictionDataItem?: [ 
    {
      area?: string(name='Area', description='The billable region.', example='CN'),
      timeStp?: string(name='TimeStp', description='The time when the value used as the estimated value is generated. This field is returned only if the metering method is pay by 95th percentile, pay by 95th percentile bandwidth with 50% off from 00:00 to 08:00, or pay by 4th peak bandwidth per month.', example='2018-10-15T16:00:00Z'),
      value?: float(name='Value', description='The estimated value.', example='10000'),
    }
  ](name='BillPredictionDataItem')
  }(name='BillPredictionData', description='The list of bill prediction data.'),
  billType?: string(name='BillType', description='The metering method.

>  If the metering method ends with **\\_overseas**, it indicates that the billable region is outside the Chinese mainland. For example, BillType": "month_avg_day_bandwidth_overseas specifies a billable region outside the Chinese mainland and that the metering method is pay by daily peak bandwidth per month.

Valid values:

*   hour_flow: pay by hourly data transfer.
*   day_bandwidth: pay by daily bandwidth.
*   month\\_95: pay by monthly 95th percentile bandwidth.
*   month_avg_day_bandwidth: pay by average daily peak bandwidth per month.
*   month\\_4th_day_bandwidth: pay by 4th peak bandwidth per month.
*   month_avg_day\\_95: pay by average daily 95th percentile bandwidth per month.
*   month\\_95\\_night_half: pay by 95th percentile bandwidth with 50% off from 00:00 to 08:00.
*   hour_vas: pay by value-added services on an hourly basis.
*   day_count: pay by the number of requests per day.', example='month_95_overseas'),
  endTime?: string(name='EndTime', description='The end time of the estimation.', example='2018-10-25T10:00:00Z'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C370DAF1-C838-4288-A1A0-9A87633D248E'),
  startTime?: string(name='StartTime', description='The start time of the estimation.', example='2018-09-30T16:00:00Z'),
}

model DescribeCdnUserBillPredictionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnUserBillPredictionResponseBody(name='body'),
}

/**
  * You can call this operation to estimate resource usage of the current month based on the metering method set on the first day of the current month. This operation can estimate resource usage only of the current month within your Alibaba Cloud account. The time range used for the estimation starts at 00:00 on the first day of the current month and ends 2 hours earlier than the current time.
  * *   Pay by monthly 95th percentile: The top 5% values between the start time and end time are excluded. The highest value among the remaining values is the estimated value.
  * *   Pay by average daily peak bandwidth per month: Estimated value = Sum of daily peak bandwidth values/Number of days. The current day is excluded.
  * *   Pay by 4th peak bandwidth per month: The 4th peak bandwidth value between the start time and end time is the estimated value. If the time range is less than 4 days, the estimated value is 0.
  * *   Pay by average daily 95th percentile bandwidth per month: Estimated value = Sum of daily 95th percentile bandwidth values/Number of days. The current day is excluded.
  * *   Pay by 95th percentile bandwidth with 50% off from 00:00 to 08:00: The top 5% values between the start time and end time are excluded. The highest value among the remaining values is the estimated value.
  * >  The maximum number of times that each user can call this operation per second is 1.
  *
  * @param request DescribeCdnUserBillPredictionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnUserBillPredictionResponse
 */
async function describeCdnUserBillPredictionWithOptions(request: DescribeCdnUserBillPredictionRequest, runtime: Util.RuntimeOptions): DescribeCdnUserBillPredictionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.area)) {
    query['Area'] = request.area;
  }
  if (!Util.isUnset(request.dimension)) {
    query['Dimension'] = request.dimension;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnUserBillPrediction',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to estimate resource usage of the current month based on the metering method set on the first day of the current month. This operation can estimate resource usage only of the current month within your Alibaba Cloud account. The time range used for the estimation starts at 00:00 on the first day of the current month and ends 2 hours earlier than the current time.
  * *   Pay by monthly 95th percentile: The top 5% values between the start time and end time are excluded. The highest value among the remaining values is the estimated value.
  * *   Pay by average daily peak bandwidth per month: Estimated value = Sum of daily peak bandwidth values/Number of days. The current day is excluded.
  * *   Pay by 4th peak bandwidth per month: The 4th peak bandwidth value between the start time and end time is the estimated value. If the time range is less than 4 days, the estimated value is 0.
  * *   Pay by average daily 95th percentile bandwidth per month: Estimated value = Sum of daily 95th percentile bandwidth values/Number of days. The current day is excluded.
  * *   Pay by 95th percentile bandwidth with 50% off from 00:00 to 08:00: The top 5% values between the start time and end time are excluded. The highest value among the remaining values is the estimated value.
  * >  The maximum number of times that each user can call this operation per second is 1.
  *
  * @param request DescribeCdnUserBillPredictionRequest
  * @return DescribeCdnUserBillPredictionResponse
 */
async function describeCdnUserBillPrediction(request: DescribeCdnUserBillPredictionRequest): DescribeCdnUserBillPredictionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnUserBillPredictionWithOptions(request, runtime);
}

model DescribeCdnUserBillTypeRequest {
  endTime?: string(name='EndTime', description='The end of the time range that was queried.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

Example: 2016-10-20T04:00:00Z.', example='2018-10-31T16:00:00Z'),
  startTime?: string(name='StartTime', description='The start of the time range that was queried.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

Example: 2016-10-20T04:00:00Z.', example='2018-09-30T16:00:00Z'),
}

model DescribeCdnUserBillTypeResponseBody = {
  billTypeData?: {
    billTypeDataItem?: [ 
    {
      billType?: string(name='BillType', example='month_avg_day_bandwidth_overseas'),
      billingCycle?: string(name='BillingCycle', example='month'),
      dimension?: string(name='Dimension', example='flow'),
      endTime?: string(name='EndTime', example='2018-10-31T16:00:00Z'),
      product?: string(name='Product', example='cdn'),
      startTime?: string(name='StartTime', example='2018-10-30T16:00:00Z'),
    }
  ](name='BillTypeDataItem')
  }(name='BillTypeData'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C370DAF1-C838-4288-A1A0-9A87633D248E'),
}

model DescribeCdnUserBillTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnUserBillTypeResponseBody(name='body'),
}

async function describeCdnUserBillTypeWithOptions(request: DescribeCdnUserBillTypeRequest, runtime: Util.RuntimeOptions): DescribeCdnUserBillTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnUserBillType',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCdnUserBillType(request: DescribeCdnUserBillTypeRequest): DescribeCdnUserBillTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnUserBillTypeWithOptions(request, runtime);
}

model DescribeCdnUserConfigsRequest {
  functionName?: string(name='FunctionName', description='The configuration item that you want to query. Valid values:

*   **domain\\_business\\_control**: Alibaba Cloud CDN configurations
*   **waf**: Web Application Firewall (WAF) configurations', example='domain_business_control'),
  ownerId?: long(name='OwnerId'),
}

model DescribeCdnUserConfigsResponseBody = {
  configs?: [ 
    {
      argName?: string(name='ArgName', description='The name of the parameter.

The configurations set by enterprise or government users.', example='allow_function'),
      argValue?: string(name='ArgValue', description='The value of the configuration. Valid values:

*   **cc_rule**: HTTP flood protection rules
*   **ddos_dispatch**: integration with Anti-DDoS
*   **edge_safe**: application security settings on edge nodes
*   **blocked_regions**: blocked regions
*   **http\\_acl\\_policy**: access control list (ACL) rules
*   **bot_manager**: bot traffic management
*   **ip_reputation**: IP reputation library', example='{\\"dcdn_allow\\":[\\"cc_rule\\",\\"ddos_dispatch\\"]}'),
      functionName?: string(name='FunctionName', description='The name of the feature.', example='domain_business_control'),
    }
  ](name='Configs', description='The configurations of Alibaba Cloud CDN.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='06D29681-B7CD-4034-A8CC-28AFFA213539'),
}

model DescribeCdnUserConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnUserConfigsResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeCdnUserConfigsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnUserConfigsResponse
 */
async function describeCdnUserConfigsWithOptions(request: DescribeCdnUserConfigsRequest, runtime: Util.RuntimeOptions): DescribeCdnUserConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.functionName)) {
    query['FunctionName'] = request.functionName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnUserConfigs',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeCdnUserConfigsRequest
  * @return DescribeCdnUserConfigsResponse
 */
async function describeCdnUserConfigs(request: DescribeCdnUserConfigsRequest): DescribeCdnUserConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnUserConfigsWithOptions(request, runtime);
}

model DescribeCdnUserDomainsByFuncRequest {
  funcId?: int32(name='FuncId', description='The ID of the feature.

For example, the ID of the origin host feature (set_req_host_header) is 18.', example='7'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.

Valid values: **1** to **100000**.', example='10'),
  pageSize?: int32(name='PageSize', description='The number of domain names to return on each page. Default value: **20**.

Valid values: **1** to **50**.', example='20'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-xxxxx'),
}

model DescribeCdnUserDomainsByFuncResponseBody = {
  domains?: {
    pageData?: [ 
    {
      cdnType?: string(name='CdnType', description='The type of workload accelerated by Alibaba Cloud CDN. Valid values:

*   **web**: image and small file distribution
*   **download**: large file distribution
*   **video**: on-demand video and audio streaming
*   **liveStream**: live streaming', example='web'),
      cname?: string(name='Cname', description='The CNAME assigned to the accelerated domain name.', example='example.com.w.alikunlun.com'),
      description?: string(name='Description', description='The description of the status.', example='audit failed'),
      domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
      domainStatus?: string(name='DomainStatus', description='The status of the accelerated domain name. Valid values:

*   **online**: The domain name is enabled.
*   **offline**: The domain is disabled.
*   **configuring**: The endpoint group is being configured.
*   **configure_failed**: The domain failed to be configured.
*   **checking**: The domain name is under review.
*   **check_failed**: The domain name failed the review.
*   **stopping**: The domain name is be disabled.
*   **deleting**: being deleted', example='configure_failed'),
      gmtCreated?: string(name='GmtCreated', description='The time when the accelerated domain name was added to Alibaba Cloud CDN.', example='2015-10-28T11:05:52Z'),
      gmtModified?: string(name='GmtModified', description='The last time when the accelerated domain was modified.', example='2015-10-29T10:15:31Z'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-xxxxx'),
      sources?: {
        source?: [ 
        {
          content?: string(name='Content', description='The address of the origin server.', example='1.1.1.1'),
          port?: int32(name='Port', description='The port of the origin server.', example='80'),
          priority?: string(name='Priority', description='The priority of the configuration item.', example='20'),
          type?: string(name='Type', description='The type of the origin server.', example='ipaddr'),
          weight?: string(name='Weight', description='The weight of the origin server if multiple origin servers have been specified.', example='10'),
        }
      ](name='Source')
      }(name='Sources', description='The information about the origin server.'),
      sslProtocol?: string(name='SslProtocol', description='The status of HTTPS. Valid values:

- **on**: enabled
- **off**: disabled', example='on'),
    }
  ](name='PageData')
  }(name='Domains', description='The configurations of the accelerated domain name.'),
  pageNumber?: long(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries returned per page.', example='5'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AA75AADB-5E25-4970-B480-EAA1F5658483'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='16'),
}

model DescribeCdnUserDomainsByFuncResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnUserDomainsByFuncResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeCdnUserDomainsByFuncRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnUserDomainsByFuncResponse
 */
async function describeCdnUserDomainsByFuncWithOptions(request: DescribeCdnUserDomainsByFuncRequest, runtime: Util.RuntimeOptions): DescribeCdnUserDomainsByFuncResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.funcId)) {
    query['FuncId'] = request.funcId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnUserDomainsByFunc',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeCdnUserDomainsByFuncRequest
  * @return DescribeCdnUserDomainsByFuncResponse
 */
async function describeCdnUserDomainsByFunc(request: DescribeCdnUserDomainsByFuncRequest): DescribeCdnUserDomainsByFuncResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnUserDomainsByFuncWithOptions(request, runtime);
}

model DescribeCdnUserQuotaRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeCdnUserQuotaResponseBody = {
  blockQuota?: int32(name='BlockQuota', description='The maximum number of URLs and directories that can be blocked.', example='100'),
  blockRemain?: int32(name='BlockRemain', description='The remaining number of URLs and directories that can be blocked.', example='100'),
  domainQuota?: int32(name='DomainQuota', description='The maximum number of accelerated domain names that can be added to Alibaba Cloud CDN.', example='50'),
  preloadQuota?: int32(name='PreloadQuota', description='The maximum number of URLs that can be prefetched.', example='500'),
  preloadRemain?: int32(name='PreloadRemain', description='The remaining number of URLs that can be prefetched.', example='100'),
  refreshDirQuota?: int32(name='RefreshDirQuota', description='The maximum number of directories that can be refreshed.', example='100'),
  refreshDirRemain?: int32(name='RefreshDirRemain', description='The remaining number of directories that can be refreshed.', example='500'),
  refreshUrlQuota?: int32(name='RefreshUrlQuota', description='The maximum number of URLs that can be refreshed.', example='2000'),
  refreshUrlRemain?: int32(name='RefreshUrlRemain', description='The remaining number of URLs that can be refreshed.', example='2000'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EF4F084A-2F49-4E1C-9CA0-DC85BCE7F391'),
}

model DescribeCdnUserQuotaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnUserQuotaResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeCdnUserQuotaRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnUserQuotaResponse
 */
async function describeCdnUserQuotaWithOptions(request: DescribeCdnUserQuotaRequest, runtime: Util.RuntimeOptions): DescribeCdnUserQuotaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnUserQuota',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeCdnUserQuotaRequest
  * @return DescribeCdnUserQuotaResponse
 */
async function describeCdnUserQuota(request: DescribeCdnUserQuotaRequest): DescribeCdnUserQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnUserQuotaWithOptions(request, runtime);
}

model DescribeCdnUserResourcePackageRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  status?: string(name='Status', description='Resource plan status:

*   **valid**: valid
*   **closed**: invalid', example='valid'),
}

model DescribeCdnUserResourcePackageResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='84839536-2B7E-457D-9D8C-82E6C7D4E1A3'),
  resourcePackageInfos?: {
    resourcePackageInfo?: [ 
    {
      commodityCode?: string(name='CommodityCode', description='The ID of the resource plan.', example='cdnflowbag'),
      currCapacity?: string(name='CurrCapacity', description='The remaining quota of the resource plan.

*   The total amount of data transfer provided by the resource plan. Unit: bytes.
*   The remaining number of requests provided by the resource plan.', example='10995089554629'),
      displayName?: string(name='DisplayName', description='The name of the resource plan.', example='my_plan'),
      endTime?: string(name='EndTime', description='The time when the resource plan expires.', example='2018-07-01T08:00:00Z'),
      initCapacity?: string(name='InitCapacity', description='The total quota of the resource plan.

*   The total amount of data transfer provided by the resource plan. Unit: bytes.
*   The total number of requests provided by the resource plan.', example='536870912000'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='FP-ilttxc23a'),
      startTime?: string(name='StartTime', description='The time when the resource plan took effect.', example='2017-12-05T19:10:58Z'),
      status?: string(name='Status', description='The status of the data transfer plan. Valid values:

*   **valid**: valid
*   **closed**: invalid', example='valid'),
      templateName?: string(name='TemplateName', description='The name of the template.', example='my_template'),
    }
  ](name='ResourcePackageInfo')
  }(name='ResourcePackageInfos', description='The details about each resource plan. The details are organized in an array. The array consists of the subparameter values of the ResourcePackageInfo parameter.'),
}

model DescribeCdnUserResourcePackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnUserResourcePackageResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeCdnUserResourcePackageRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnUserResourcePackageResponse
 */
async function describeCdnUserResourcePackageWithOptions(request: DescribeCdnUserResourcePackageRequest, runtime: Util.RuntimeOptions): DescribeCdnUserResourcePackageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnUserResourcePackage',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeCdnUserResourcePackageRequest
  * @return DescribeCdnUserResourcePackageResponse
 */
async function describeCdnUserResourcePackage(request: DescribeCdnUserResourcePackageRequest): DescribeCdnUserResourcePackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnUserResourcePackageWithOptions(request, runtime);
}

model DescribeCdnWafDomainRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='1234'),
}

model DescribeCdnWafDomainResponseBody = {
  outPutDomains?: [ 
    {
      aclStatus?: string(name='AclStatus', example='1'),
      ccStatus?: string(name='CcStatus', example='1'),
      domain?: string(name='Domain', description='The domain name.', example='example.com'),
      status?: string(name='Status', example='1'),
      wafStatus?: string(name='WafStatus', example='1'),
    }
  ](name='OutPutDomains'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CB1A380B-09F0-41BB-802B-72F8FD6DA2FE'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeCdnWafDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnWafDomainResponseBody(name='body'),
}

async function describeCdnWafDomainWithOptions(request: DescribeCdnWafDomainRequest, runtime: Util.RuntimeOptions): DescribeCdnWafDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnWafDomain',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCdnWafDomain(request: DescribeCdnWafDomainRequest): DescribeCdnWafDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnWafDomainWithOptions(request, runtime);
}

model DescribeCertificateInfoByIDRequest {
  certId?: string(name='CertId', description='The ID of the SSL certificate. You can query only one certificate in each call.', example='1644xx'),
}

model DescribeCertificateInfoByIDResponseBody = {
  certInfos?: {
    certInfo?: [ 
    {
      certExpireTime?: string(name='CertExpireTime', description='The expiration time of the certificate.', example='2098-02-08 08:02:07 +0000 UTC'),
      certId?: string(name='CertId', description='The ID of the certificate.', example='1644xx'),
      certName?: string(name='CertName', description='The name of the certificate.', example='example_cert'),
      certType?: string(name='CertType', description='The type of the certificate.

*   free: a free certificate.
*   cas: a certificate purchased by using Certificate Management Service.
*   upload: a user-uploaded certificate.', example='cas'),
      createTime?: string(name='CreateTime', description='The time when the certificate became effective.', example='2015-12-21 08:02:07 +0000 UTC'),
      domainList?: string(name='DomainList', description='A list of domain names that use the certificate.', example='["example.com"]'),
      httpsCrt?: string(name='HttpsCrt', description='The content of the certificate.', example='-----BEGIN CERTIFICATE-----\\nxxx-----END CERTIFICATE-----\\n'),
    }
  ](name='CertInfo')
  }(name='CertInfos', description='The information about the certificate.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5C1E43DC-9E51-4771-82C0-7D5ECEB547A1'),
}

model DescribeCertificateInfoByIDResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCertificateInfoByIDResponseBody(name='body'),
}

/**
  * > - The maximum number of times that each user can call this operation per second is 100.
  * - If a certificate is associated with a domain name but not enabled, the result of this operation shows that the certificate does not exist.
  *
  * @param request DescribeCertificateInfoByIDRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCertificateInfoByIDResponse
 */
async function describeCertificateInfoByIDWithOptions(request: DescribeCertificateInfoByIDRequest, runtime: Util.RuntimeOptions): DescribeCertificateInfoByIDResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCertificateInfoByID',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > - The maximum number of times that each user can call this operation per second is 100.
  * - If a certificate is associated with a domain name but not enabled, the result of this operation shows that the certificate does not exist.
  *
  * @param request DescribeCertificateInfoByIDRequest
  * @return DescribeCertificateInfoByIDResponse
 */
async function describeCertificateInfoByID(request: DescribeCertificateInfoByIDRequest): DescribeCertificateInfoByIDResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCertificateInfoByIDWithOptions(request, runtime);
}

model DescribeCustomLogConfigRequest {
  configId?: string(name='ConfigId', description='The ID of the custom configuration.', example='123'),
}

model DescribeCustomLogConfigResponseBody = {
  remark?: string(name='Remark', description='The format of the log configuration.', example='$time_iso8601_$request_method_$'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='94E3559F-7B6A-4A5E-AFFD-44E2A208A249'),
  sample?: string(name='Sample', description='A sample log configuration.', example='"[9/Jun/2015:01:58:09 +0800] 188.165.15.75 - 1542 \\"-\\" \\"GEThttp: //www.aliyun.com/index.html\\" 200'),
  tag?: string(name='Tag', description='The tag information about the log configuration.', example='img1'),
}

model DescribeCustomLogConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomLogConfigResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeCustomLogConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCustomLogConfigResponse
 */
async function describeCustomLogConfigWithOptions(request: DescribeCustomLogConfigRequest, runtime: Util.RuntimeOptions): DescribeCustomLogConfigResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCustomLogConfig',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeCustomLogConfigRequest
  * @return DescribeCustomLogConfigResponse
 */
async function describeCustomLogConfig(request: DescribeCustomLogConfigRequest): DescribeCustomLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomLogConfigWithOptions(request, runtime);
}

model DescribeDomainAverageResponseTimeRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. Separate multiple accelerated domain names with commas (,).

By default, this operation queries the bandwidth values during back-to-origin routing for all accelerated domain names that belong to your Alibaba Cloud account.', example='example.com'),
  domainType?: string(name='DomainType', description='The type of the query condition. Valid values: When you set the value to dynamic, this operation queries the average response time of dynamic resources and static resources. If you do not set this parameter, this operation queries the average response time of only static resources. By default, this parameter is not set.', example='domaintype'),
  endTime?: string(name='EndTime', description='The end of the time range queried. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

The end time must be later than the start time.', example='2019-11-30T05:40:00Z'),
  interval?: string(name='Interval', description='The time interval between the data entries. Unit: seconds. The value varies based on the values of the **StartTime** and **EndTime** parameters. Valid values:

*   If the time span between StartTime and EndTime is less than 3 days (3 days excluded), valid values are **300**, **3600**, and **86400**. Default value: **300**.
*   If the time span between StartTime and EndTime is from 3 to 31 days (31 days excluded), valid values are **3600** and **86400**. Default value: **3600**.
*   If the time range between StartTime and EndTime is 31 days or longer, the valid value is **86400**. Default value: **86400**.', example='300'),
  ispNameEn?: string(name='IspNameEn', description='The name of the Internet service provider (ISP) for your Alibaba Cloud CDN service. You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query ISPs. If you do not set this parameter, all ISPs are queried.', example='unicom'),
  locationNameEn?: string(name='LocationNameEn', description='The name of the region. You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query the most recent region list. If you do not set this parameter, all regions are queried.', example='beijing'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2019-11-30T05:33:00Z'),
  timeMerge?: string(name='TimeMerge', description='Specifies whether to automatically set the interval. If you set the value to 1, the value of the Interval parameter is automatically assigned based on the StartTime and EndTime parameters. You can set this parameter or the Interval parameter.', example='1'),
}

model DescribeDomainAverageResponseTimeResponseBody = {
  avgRTPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp', description='The timestamp of the returned data.', example='2015-12-10T20:00:00Z'),
      value?: string(name='Value', description='The average response time.', example='3'),
    }
  ](name='DataModule')
  }(name='AvgRTPerInterval', description='The average response time collected at each time interval.'),
  dataInterval?: string(name='DataInterval', description='The time interval between the data entries returned.', example='300'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range during which data was queried.', example='2019-11-30T05:40:00Z'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3C6CCEC4-6B88-4D4A-93E4-D47B3D92CF8F'),
  startTime?: string(name='StartTime', description='The beginning of the time range during which data was queried.', example='2019-11-30T05:33:00Z'),
}

model DescribeDomainAverageResponseTimeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainAverageResponseTimeResponseBody(name='body'),
}

/**
  * The statistical analytics feature of Alibaba Cloud CDN is discontinued. The API operations related to the statistical analytics feature are no longer maintained. We recommend that you do not use the API operations because data may be missing or inaccurate. You can use the [operations report](https://www.alibabacloud.com/help/en/alibaba-cloud-cdn/latest/customize-an-operations-report-template-and-create-a-tracking-task) feature to for data analysis.  
  * > - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * - You can call this operation up to 100 times per second per account.
  * - You can specify multiple domain names and separate them with commas (,). You can specify at most 50 domain names in each call.
  *
  * @param request DescribeDomainAverageResponseTimeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainAverageResponseTimeResponse
 */
async function describeDomainAverageResponseTimeWithOptions(request: DescribeDomainAverageResponseTimeRequest, runtime: Util.RuntimeOptions): DescribeDomainAverageResponseTimeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.domainType)) {
    query['DomainType'] = request.domainType;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.timeMerge)) {
    query['TimeMerge'] = request.timeMerge;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainAverageResponseTime',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The statistical analytics feature of Alibaba Cloud CDN is discontinued. The API operations related to the statistical analytics feature are no longer maintained. We recommend that you do not use the API operations because data may be missing or inaccurate. You can use the [operations report](https://www.alibabacloud.com/help/en/alibaba-cloud-cdn/latest/customize-an-operations-report-template-and-create-a-tracking-task) feature to for data analysis.  
  * > - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * - You can call this operation up to 100 times per second per account.
  * - You can specify multiple domain names and separate them with commas (,). You can specify at most 50 domain names in each call.
  *
  * @param request DescribeDomainAverageResponseTimeRequest
  * @return DescribeDomainAverageResponseTimeResponse
 */
async function describeDomainAverageResponseTime(request: DescribeDomainAverageResponseTimeRequest): DescribeDomainAverageResponseTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainAverageResponseTimeWithOptions(request, runtime);
}

model DescribeDomainBpsDataRequest {
  domainName?: string(name='DomainName', description='You can specify multiple domain names and separate them with commas (,). You can specify at most 500 domain names in each call.  

By default, this operation queries the bandwidth values during back-to-origin routing for all accelerated domain names that belong to your Alibaba Cloud account.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.  

>  The end time must be later than the start time.', example='2020-05-14T10:00:00Z'),
  interval?: string(name='Interval', description='The time interval between the data entries. Unit: seconds. 

The time granularity varies with the time range to query. Supported values: 300 (5 minutes), 3600 (1 hour), and 86400 (1 day). For more information, see **Usage notes**.', example='300'),
  ispNameEn?: string(name='IspNameEn', description='The name of the Internet service provider (ISP) for your Alibaba Cloud CDN service. You can call the [DescribeCdnRegionAndIsp](https://www.alibabacloud.com/help/en/alibaba-cloud-cdn/latest/describecdnregionandisp) operation to query ISP names.  

If you do not set this parameter, all ISPs are queried.', example='telecom'),
  locationNameEn?: string(name='LocationNameEn', description='The name of the region. You can call the [DescribeCdnRegionAndIsp](https://www.alibabacloud.com/help/en/alibaba-cloud-cdn/latest/describecdnregionandisp) operation to query the most recent region list.  

If you do not set this parameter, the bandwidth monitoring data of the accelerated domain names in all regions is returned.', example='beijing'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The start of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2020-05-14T09:50:00Z'),
}

model DescribeDomainBpsDataResponseBody = {
  bpsDataPerInterval?: {
    dataModule?: [ 
    {
      domesticValue?: string(name='DomesticValue', description='The bandwidth values in the Chinese mainland. When the bandwidth data is queried by ISP, no value is returned.', example='11286111'),
      httpsDomesticValue?: string(name='HttpsDomesticValue', description='The bandwidth values for HTTPS requests in the Chinese mainland. When the bandwidth data is queried by ISP, no value is returned.', example='11286111'),
      httpsOverseasValue?: string(name='HttpsOverseasValue', description='The bandwidth values for HTTPS requests in regions outside the Chinese mainland. When the bandwidth data is queried by ISP, no value is returned.', example='2000'),
      httpsValue?: string(name='HttpsValue', description='The bandwidth values for HTTPS requests. Unit: bit/s.', example='11288111'),
      overseasValue?: string(name='OverseasValue', description='The bandwidth values in regions outside the Chinese mainland. When the bandwidth data is queried by ISP, no value is returned.', example='2000'),
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data returned.', example='2015-12-10T20:00:00Z'),
      value?: string(name='Value', description='The bandwidth value. Unit: bit/s.', example='11288111'),
    }
  ](name='DataModule')
  }(name='BpsDataPerInterval', description='The bandwidth values collected at each interval.'),
  dataInterval?: string(name='DataInterval', description='The time interval between the returned entries. Unit: seconds.', example='300'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range that was queried.', example='2015-12-10T20:00Z'),
  ispNameEn?: string(name='IspNameEn', description='The name of the ISP for your Alibaba Cloud CDN service.', example='unicom'),
  locationNameEn?: string(name='LocationNameEn', description='The name of the region.', example='beijing'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3C6CCEC4-6B88-4D4A-93E4-D47B3D92CF8F'),
  startTime?: string(name='StartTime', description='The beginning of the time range that was queried.', example='2020-05-14T09:50:00Z'),
}

model DescribeDomainBpsDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainBpsDataResponseBody(name='body'),
}

/**
  * - The maximum number of times that each user can call this operation per second is 150.
  * - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity supported by the Interval parameter, the maximum time period within which historical data is available, and the data delay vary with the time range to query, as described in the following table. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 day | 366 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainBpsDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainBpsDataResponse
 */
async function describeDomainBpsDataWithOptions(request: DescribeDomainBpsDataRequest, runtime: Util.RuntimeOptions): DescribeDomainBpsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainBpsData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - The maximum number of times that each user can call this operation per second is 150.
  * - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity supported by the Interval parameter, the maximum time period within which historical data is available, and the data delay vary with the time range to query, as described in the following table. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 day | 366 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainBpsDataRequest
  * @return DescribeDomainBpsDataResponse
 */
async function describeDomainBpsData(request: DescribeDomainBpsDataRequest): DescribeDomainBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainBpsDataWithOptions(request, runtime);
}

model DescribeDomainBpsDataByLayerRequest {
  domainName?: string(name='DomainName', description='You can specify multiple domain names and separate them with commas (,). You can specify at most 500 domain names in each call.

>  If you do not specify an accelerated domain name, the bandwidth data of all the accelerated domain names that belong to your Alibaba Cloud account is queried.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2020-05-06T07:20:00Z'),
  interval?: string(name='Interval', description='The time interval between the data entries. Unit: seconds.

The time granularity varies with the time range to query. Supported values: 300 (5 minutes), 3600 (1 hour), and 86400 (1 day). For more information, see **Usage notes**.', example='300'),
  ispNameEn?: string(name='IspNameEn', description='The name of the Internet service provider (ISP). You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query the most recent ISP list. If you do not specify an ISP, data of all ISPs is queried.', example='unicom'),
  layer?: string(name='Layer', description='The layers at which you want to query the bandwidth data. Valid values:

*   Network layer: **IPv4** and **IPv6**.
*   Application layer: **http**, **https**, and **quic**.
*   **all**: specifies that both the network and application layers are included.

Default value: **all**.', example='IPv4'),
  locationNameEn?: string(name='LocationNameEn', description='The name of the region. You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query the most recent region list. If you do not specify a region, data in all regions is queried.', example='beijing'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2020-05-06T07:10:00Z'),
}

model DescribeDomainBpsDataByLayerResponseBody = {
  bpsDataInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data returned.', example='2020-05-06T07:10:00Z'),
      trafficValue?: string(name='TrafficValue', description='The total amount of network traffic. Unit: bytes.', example='2838'),
      value?: string(name='Value', description='The peak bandwidth value. Unit: bit/s.', example='75.68'),
    }
  ](name='DataModule')
  }(name='BpsDataInterval', description='The number of bytes per second collected at each time interval.'),
  dataInterval?: string(name='DataInterval', description='The time interval between the data entries. Unit: seconds.', example='300'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C565B910-BC3B-467B-9046-2A48566EA967'),
}

model DescribeDomainBpsDataByLayerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainBpsDataByLayerResponseBody(name='body'),
}

/**
  * - The number of times that each user can call this operation per second is 20.
  * - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity supported by the Interval parameter, the maximum time period within which historical data is available, and the data delay vary with the time range to query, as described in the following table. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 day | 366 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainBpsDataByLayerRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainBpsDataByLayerResponse
 */
async function describeDomainBpsDataByLayerWithOptions(request: DescribeDomainBpsDataByLayerRequest, runtime: Util.RuntimeOptions): DescribeDomainBpsDataByLayerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.layer)) {
    query['Layer'] = request.layer;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainBpsDataByLayer',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - The number of times that each user can call this operation per second is 20.
  * - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity supported by the Interval parameter, the maximum time period within which historical data is available, and the data delay vary with the time range to query, as described in the following table. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 day | 366 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainBpsDataByLayerRequest
  * @return DescribeDomainBpsDataByLayerResponse
 */
async function describeDomainBpsDataByLayer(request: DescribeDomainBpsDataByLayerRequest): DescribeDomainBpsDataByLayerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainBpsDataByLayerWithOptions(request, runtime);
}

model DescribeDomainBpsDataByTimeStampRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name in each query.', example='example.com'),
  ispNames?: string(name='IspNames', description='The names of the Internet service providers (ISPs). Separate multiple ISP names with commas (,).

You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query regions.', example='uni***,tele***'),
  locationNames?: string(name='LocationNames', description='The names of the regions. Separate multiple regions with commas (,).

You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query regions.', example='liaoning,guangxi'),
  ownerId?: long(name='OwnerId'),
  timePoint?: string(name='TimePoint', description='The beginning of the time range that was queried. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.

The data is collected at an interval of five minutes.', example='2019-11-30T05:40:00Z'),
}

model DescribeDomainBpsDataByTimeStampResponseBody = {
  bpsDataList?: {
    bpsDataModel?: [ 
    {
      bps?: long(name='Bps', description='The bandwidth value.', example='52119553'),
      ispName?: string(name='IspName', description='The name of the ISP for your Content Delivery Network (CDN) service.', example='unicom'),
      locationName?: string(name='LocationName', description='The name of the region.', example='Liaoning'),
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data.', example='2019-11-30T05:40:00Z'),
    }
  ](name='BpsDataModel')
  }(name='BpsDataList', description='A list of bandwidth values queried by ISP and region.'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
  timeStamp?: string(name='TimeStamp', description='The timestamp of the data.', example='2019-11-30T05:40:00Z'),
}

model DescribeDomainBpsDataByTimeStampResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainBpsDataByTimeStampResponseBody(name='body'),
}

/**
  * *   The bandwidth is measured in bit/s.
  * *   You can specify only one domain name in each query.
  * *   The data is collected at an interval of five minutes.
  * *   The maximum number of times that each user can call this operation per second is 20.
  *
  * @param request DescribeDomainBpsDataByTimeStampRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainBpsDataByTimeStampResponse
 */
async function describeDomainBpsDataByTimeStampWithOptions(request: DescribeDomainBpsDataByTimeStampRequest, runtime: Util.RuntimeOptions): DescribeDomainBpsDataByTimeStampResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ispNames)) {
    query['IspNames'] = request.ispNames;
  }
  if (!Util.isUnset(request.locationNames)) {
    query['LocationNames'] = request.locationNames;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.timePoint)) {
    query['TimePoint'] = request.timePoint;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainBpsDataByTimeStamp',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   The bandwidth is measured in bit/s.
  * *   You can specify only one domain name in each query.
  * *   The data is collected at an interval of five minutes.
  * *   The maximum number of times that each user can call this operation per second is 20.
  *
  * @param request DescribeDomainBpsDataByTimeStampRequest
  * @return DescribeDomainBpsDataByTimeStampResponse
 */
async function describeDomainBpsDataByTimeStamp(request: DescribeDomainBpsDataByTimeStampRequest): DescribeDomainBpsDataByTimeStampResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainBpsDataByTimeStampWithOptions(request, runtime);
}

model DescribeDomainCcActivityLogRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify multiple domain names and separate them with commas (,).

If you do not specify a domain name, data of all domain names is queried.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.

The end time must be later than the start time.', example='2018-12-10T21:00:00Z'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page. Default value: **30**.', example='30'),
  ruleName?: string(name='RuleName', description='A custom rule name. Valid values:

*   Default mode: default_normal.
*   Emergency mode: default_attack.

If you do not set this parameter, all events that triggered rate limiting are queried.', example='test2'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.

Data is collected every 5 minutes.

If you do not set this parameter, data within the last 24 hours is queried.', example='2018-12-10T20:00:00Z'),
  triggerObject?: string(name='TriggerObject', description='The object that triggered rate limiting.

If you do not set this parameter, all events that triggered rate limiting are queried.', example='IP'),
  value?: string(name='Value', description='The value of the object that triggered rate limiting.

If you do not set this parameter, the values of all events that triggered rate limiting are queried.', example='1.2.3.4'),
}

model DescribeDomainCcActivityLogResponseBody = {
  activityLog?: [ 
    {
      action?: string(name='Action', description='The action that was triggered.', example='deny'),
      domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
      ruleName?: string(name='RuleName', description='The name of the rule that was triggered', example='test'),
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data.', example='2015-12-10T20:00:00Z'),
      triggerObject?: string(name='TriggerObject', description='The object that triggered rate limiting.', example='Ip'),
      ttl?: long(name='Ttl', description='The period of time that rate limiting remains effective.', example='300'),
      value?: string(name='Value', description='The value of the object that triggered rate limiting.', example='1.2.3.4'),
    }
  ](name='ActivityLog', description='The log entry of the event that triggered rate limiting.'),
  pageIndex?: long(name='PageIndex', description='The page number of the returned page.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries returned per page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3C6CCEC4-6B88-4D4A-93E4-D47B3D92CF8F'),
  total?: long(name='Total', description='The total number of entries returned.', example='20'),
}

model DescribeDomainCcActivityLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainCcActivityLogResponseBody(name='body'),
}

/**
  * > *   If you do not set the StartTime or EndTime parameter, data within the last 24 hours is queried. If you set both the StartTime and EndTime parameters, data within the specified time range is queried. You must set both parameters or leave both of them empty.
  * *   You can specify multiple domain names (no more than 20) and separate them with commas (,).
  * *   You can query data within the last 30 days.
  * *   The maximum number of times that each user can call this operation per second is 50.
  *
  * @param request DescribeDomainCcActivityLogRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainCcActivityLogResponse
 */
async function describeDomainCcActivityLogWithOptions(request: DescribeDomainCcActivityLogRequest, runtime: Util.RuntimeOptions): DescribeDomainCcActivityLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.triggerObject)) {
    query['TriggerObject'] = request.triggerObject;
  }
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainCcActivityLog',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > *   If you do not set the StartTime or EndTime parameter, data within the last 24 hours is queried. If you set both the StartTime and EndTime parameters, data within the specified time range is queried. You must set both parameters or leave both of them empty.
  * *   You can specify multiple domain names (no more than 20) and separate them with commas (,).
  * *   You can query data within the last 30 days.
  * *   The maximum number of times that each user can call this operation per second is 50.
  *
  * @param request DescribeDomainCcActivityLogRequest
  * @return DescribeDomainCcActivityLogResponse
 */
async function describeDomainCcActivityLog(request: DescribeDomainCcActivityLogRequest): DescribeDomainCcActivityLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainCcActivityLogWithOptions(request, runtime);
}

model DescribeDomainCertificateInfoRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name in each query.', example='example.com'),
  ownerId?: long(name='OwnerId'),
}

model DescribeDomainCertificateInfoResponseBody = {
  certInfos?: {
    certInfo?: [ 
    {
      certDomainName?: string(name='CertDomainName', description='The domain name that matches the SSL certificate.', example='example.com'),
      certExpireTime?: string(name='CertExpireTime', description='The time when the SSL certificate expires.', example='2018-06-03T22:03:39Z'),
      certLife?: string(name='CertLife', description='The unit of the validity period of the SSL certificate.

*   **months**: The validity period is measured in months.
*   **years**: The validity period is measured in years.', example='months'),
      certName?: string(name='CertName', description='The name of the SSL certificate.', example='example.com'),
      certOrg?: string(name='CertOrg', description='The name of the certificate authority (CA) that issued the SSL certificate.', example='Let\\"s Encrypt'),
      certStartTime?: string(name='CertStartTime', description='The time when the SSL certificate became effective.', example='2018-06-03T22:03:39Z'),
      certType?: string(name='CertType', description='The type of the SSL certificate. Valid values:

*   **free**: a free SSL certificate.
*   **cas**: an SSL certificate purchased from Alibaba Cloud SSL Certificates Service.
*   **upload**: a user-uploaded SSL certificate.', example='free'),
      certUpdateTime?: string(name='CertUpdateTime', description='The time when the certificate was renewed.', example='2018-06-03T22:03:39Z'),
      domainCnameStatus?: string(name='DomainCnameStatus', description='The status of the CNAME of the domain name.

*   **ok**: The domain name points to the CNAME assigned from Alibaba Cloud Content Delivery Network (CDN).
*   **cname_error**: An error occurred and the domain name cannot point to the CNAME.
*   **top_domain_cname_error**: An error occurred to the CNAME of the top-level domain name. The domain name cannot point to the CNAME.
*   **unsupport_wildcard**: Wildcard domain names are not supported.', example='ok'),
      domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
      serverCertificate?: string(name='ServerCertificate', description='The public key of the SSL certificate.', example='asdadaxxxx'),
      serverCertificateStatus?: string(name='ServerCertificateStatus', description='The status of HTTPS.

*   **on**: enabled.
*   **off**: disabled.', example='on'),
      status?: string(name='Status', description='The status of the SSL certificate.

*   **success**: The SSL certificate is effective.
*   **checking**: The system is checking whether the domain name is accelerated by Alibaba Cloud CDN.
*   **cname_error**: The domain name is not accelerated by Alibaba Cloud CDN.
*   **top_domain_cname_error**: The top-level domain name is not an accelerated domain name.
*   **domain_invalid**: The domain name contains invalid characters.
*   **unsupport_wildcard**: Wildcard domain names are not supported.
*   **applying**: The application for a certificate is in progress.
*   **fget_token_timeout**: The application for a certificate timed out.
*   **check_token_timeout**: The verification timed out.
*   **get_cert_timeout**: The request to obtain the certificate timed out.
*   **failed**: The application for a certificate failed.', example='success'),
    }
  ](name='CertInfo')
  }(name='CertInfos', description='The information about the SSL certificate.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5C1E43DC-9E51-4771-82C0-7D5ECEB547A1'),
}

model DescribeDomainCertificateInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainCertificateInfoResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeDomainCertificateInfoRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainCertificateInfoResponse
 */
async function describeDomainCertificateInfoWithOptions(request: DescribeDomainCertificateInfoRequest, runtime: Util.RuntimeOptions): DescribeDomainCertificateInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainCertificateInfo',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeDomainCertificateInfoRequest
  * @return DescribeDomainCertificateInfoResponse
 */
async function describeDomainCertificateInfo(request: DescribeDomainCertificateInfoRequest): DescribeDomainCertificateInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainCertificateInfoWithOptions(request, runtime);
}

model DescribeDomainCnameRequest {
  domainName?: string(name='DomainName', example='pay.slci6c.mbolsos.com,mch.b7r2v7.mbolsos.com,p.h99e.mbolsos.com,p.xmko.mbolsos.com,p.f2kd.mbolsos.com'),
  ownerId?: long(name='OwnerId'),
}

model DescribeDomainCnameResponseBody = {
  cnameDatas?: {
    data?: [ 
    {
      cname?: string(name='Cname', example='a.com.w.alikunlun.net'),
      domain?: string(name='Domain', example='a.com'),
      status?: int32(name='Status', example='0'),
    }
  ](name='Data')
  }(name='CnameDatas'),
  requestId?: string(name='RequestId', example='06D29681-B7CD-4034-A8CC-28AFFA213539'),
}

model DescribeDomainCnameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainCnameResponseBody(name='body'),
}

async function describeDomainCnameWithOptions(request: DescribeDomainCnameRequest, runtime: Util.RuntimeOptions): DescribeDomainCnameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainCname',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainCname(request: DescribeDomainCnameRequest): DescribeDomainCnameResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainCnameWithOptions(request, runtime);
}

model DescribeDomainCustomLogConfigRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name.', example='example.com'),
}

model DescribeDomainCustomLogConfigResponseBody = {
  configId?: string(name='ConfigId', description='The ID of the log configuration.', example='123'),
  remark?: string(name='Remark', description='The format of the log configuration.', example='$time_iso8601_$request_method_$'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='94E3559F-7B6A-4A5E-AFFD-44E2A208A249'),
  sample?: string(name='Sample', description='The sample log configuration.', example='[9/Jun/2015:01:58:09+0800]188.165.15.75-1542\\"-\\"\\"GET http://www.aliyun.com/index.html\\'),
  tag?: string(name='Tag', description='The tag information about the log configuration.', example='book'),
}

model DescribeDomainCustomLogConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainCustomLogConfigResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeDomainCustomLogConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainCustomLogConfigResponse
 */
async function describeDomainCustomLogConfigWithOptions(request: DescribeDomainCustomLogConfigRequest, runtime: Util.RuntimeOptions): DescribeDomainCustomLogConfigResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainCustomLogConfig',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeDomainCustomLogConfigRequest
  * @return DescribeDomainCustomLogConfigResponse
 */
async function describeDomainCustomLogConfig(request: DescribeDomainCustomLogConfigRequest): DescribeDomainCustomLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainCustomLogConfigWithOptions(request, runtime);
}

model DescribeDomainDetailDataByLayerRequest {
  domainName?: string(name='DomainName', description='The domain name that you want to query. You can specify multiple domain names and separate them with commas (,). You can specify at most 30 domain names in each call.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2020-07-05T22:05:00Z'),
  field?: string(name='Field', description='The metric that you want to query. You can specify one or more metrics and separate them with commas (,). Valid values: **bps**, **qps**, **traf**, **acc**, **ipv6\\_traf**, **ipv6\\_bps**, **ipv6\\_acc**, **ipv6\\_qps**, and **http_code**.', example='bps,ipv6_traf,traf,http_code,qps'),
  ispNameEn?: string(name='IspNameEn', description='The name of the Internet service provider (ISP) for your Alibaba Cloud CDN service. You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query ISP names.

If you do not specify an ISP, data of all ISPs is queried.', example='telecom'),
  layer?: string(name='Layer', description='The protocol by which you want to query data. Valid values: **http**, **https**, **quic**, and **all**.

The default value is **all**.', example='all'),
  locationNameEn?: string(name='LocationNameEn', description='The name of the region. You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query regions.

If you do not specify a region, data in all regions is queried.', example='hangzhou'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2020-07-05T22:00:00Z'),
}

model DescribeDomainDetailDataByLayerResponseBody = {
  data?: {
    dataModule?: [ 
    {
      acc?: long(name='Acc', description='The number of requests.', example='2'),
      bps?: float(name='Bps', description='The bandwidth. Unit: bit/s.', example='21060178715.146667'),
      domainName?: string(name='DomainName', description='The domain name.', example='example.com'),
      httpCode?: string(name='HttpCode', description='The proportions of HTTP status codes.', example='200:44349|206:1753719|304:45|403:1095|416:1|499:332'),
      ipv6Acc?: long(name='Ipv6Acc', description='The number of IPv6 requests.', example='1'),
      ipv6Bps?: float(name='Ipv6Bps', description='The bandwidth of IPv6 requests. Unit: bit/s.', example='0'),
      ipv6Qps?: float(name='Ipv6Qps', description='The number of IPv6 requests per second.', example='0'),
      ipv6Traf?: long(name='Ipv6Traf', description='The amount of network traffic generated by IPv6 requests. Unit: bytes.', example='141718944482'),
      qps?: float(name='Qps', description='The number of queries per second.', example='5998.47'),
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data returned.', example='2020-07-05T22:00:00Z'),
      traf?: long(name='Traf', description='The amount of network traffic. Unit: bytes.', example='789756701818'),
    }
  ](name='DataModule')
  }(name='Data', description='The detailed data of the accelerated domain names.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model DescribeDomainDetailDataByLayerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainDetailDataByLayerResponseBody(name='body'),
}

/**
  * - You can call this operation up to 20 times per second per account.
  * - If you do not set the StartTime or EndTime parameter, the request returns the data collected in the last 24 hours. If you set both these parameters, the request returns the data collected within the specified time range.
  * **Time granularity**
  * The following table describes the time granularity, the time period within which historical data is available, and the data delay, which vary with the maximum time range per query. 
  * | Time granularity | Maximum time range per query | Historical data available | Data delay |
  * | ---------------- | ---------------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 days | 366 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainDetailDataByLayerRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainDetailDataByLayerResponse
 */
async function describeDomainDetailDataByLayerWithOptions(request: DescribeDomainDetailDataByLayerRequest, runtime: Util.RuntimeOptions): DescribeDomainDetailDataByLayerResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainDetailDataByLayer',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - You can call this operation up to 20 times per second per account.
  * - If you do not set the StartTime or EndTime parameter, the request returns the data collected in the last 24 hours. If you set both these parameters, the request returns the data collected within the specified time range.
  * **Time granularity**
  * The following table describes the time granularity, the time period within which historical data is available, and the data delay, which vary with the maximum time range per query. 
  * | Time granularity | Maximum time range per query | Historical data available | Data delay |
  * | ---------------- | ---------------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 days | 366 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainDetailDataByLayerRequest
  * @return DescribeDomainDetailDataByLayerResponse
 */
async function describeDomainDetailDataByLayer(request: DescribeDomainDetailDataByLayerRequest): DescribeDomainDetailDataByLayerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainDetailDataByLayerWithOptions(request, runtime);
}

model DescribeDomainHitRateDataRequest {
  domainName?: string(name='DomainName', description='You can specify multiple domain names and separate them with commas (,). You can specify at most 500 domain names in each call.

By default, this operation queries the byte hit ratios of all accelerated domain names that belong to your Alibaba Cloud account.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2019-12-30T08:10:00Z'),
  interval?: string(name='Interval', description='The time interval between the data entries. Unit: seconds.

The time granularity varies with the time range to query. Supported values: 300 (5 minutes), 3600 (1 hour), and 86400 (1 day). For more information, see **Usage notes**.', example='300'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The start of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2019-12-30T08:00:00Z'),
}

model DescribeDomainHitRateDataResponseBody = {
  dataInterval?: string(name='DataInterval', description='The time interval between the data entries returned. Unit: seconds.', example='300'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range that was queried.', example='2019-12-30T08:10:00Z'),
  hitRateInterval?: {
    dataModule?: [ 
    {
      httpsValue?: string(name='HttpsValue', description='The byte hit ratio of HTTPS requests.', example='50.0'),
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data returned.', example='2019-12-30T08:00:00Z'),
      value?: string(name='Value', description='The byte hit ratio.', example='100.0'),
    }
  ](name='DataModule')
  }(name='HitRateInterval', description='The byte hit ratio at each time interval. The byte hit ratio is measured in percentage.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
  startTime?: string(name='StartTime', description='The beginning of the time range that was queried.', example='2019-12-30T08:00:00Z'),
}

model DescribeDomainHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainHitRateDataResponseBody(name='body'),
}

/**
  * - The maximum number of times that each user can call this operation per second is 100.
  * - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity supported by the Interval parameter, the maximum time period within which historical data is available, and the data delay vary with the time range to query, as described in the following table. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 day | 366 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainHitRateDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainHitRateDataResponse
 */
async function describeDomainHitRateDataWithOptions(request: DescribeDomainHitRateDataRequest, runtime: Util.RuntimeOptions): DescribeDomainHitRateDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainHitRateData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - The maximum number of times that each user can call this operation per second is 100.
  * - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity supported by the Interval parameter, the maximum time period within which historical data is available, and the data delay vary with the time range to query, as described in the following table. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 day | 366 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainHitRateDataRequest
  * @return DescribeDomainHitRateDataResponse
 */
async function describeDomainHitRateData(request: DescribeDomainHitRateDataRequest): DescribeDomainHitRateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainHitRateDataWithOptions(request, runtime);
}

model DescribeDomainHttpCodeDataRequest {
  domainName?: string(name='DomainName', description='You can specify multiple domain names and separate them with commas (,). You can specify at most 500 domain names in each call.

By default, this operation queries the total number and proportions of HTTP status codes returned from all accelerated domain names that belong to your Alibaba Cloud account.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2021-06-29T05:45:00Z'),
  interval?: string(name='Interval', description='The time interval between the data entries. Unit: seconds.

The time granularity varies with the time range to query. Supported values: 300 (5 minutes), 3600 (1 hour), and 86400 (1 day). For more information, see **Usage notes**.', example='300'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The start of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2021-06-29T05:30:00Z'),
}

model DescribeDomainHttpCodeDataResponseBody = {
  dataInterval?: string(name='DataInterval', description='The interval at which the monitoring data is queried.', example='300'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range that was queried.', example='2021-06-29T05:45:00Z'),
  httpCodeData?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data returned.', example='2021-06-29T05:40:00Z'),
      value?: {
        codeProportionData?: [ 
        {
          code?: string(name='Code', description='The HTTP status code.', example='200'),
          count?: string(name='Count', description='The total number of HTTP status code returned.', example='300'),
          proportion?: string(name='Proportion', description='The proportion of the HTTP status code.', example='66.046511627907'),
        }
      ](name='CodeProportionData')
      }(name='Value', description='The proportions of HTTP status codes.'),
    }
  ](name='UsageData')
  }(name='HttpCodeData', description='The proportions of HTTP status codes at each time interval.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BC858082-736F-4A25-867B-E5B67C85ACF7'),
  startTime?: string(name='StartTime', description='The beginning of the time range that was queried.', example='2021-06-29T05:30:00Z'),
}

model DescribeDomainHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainHttpCodeDataResponseBody(name='body'),
}

/**
  * - The maximum number of times that each user can call this operation per second is 100.
  * - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity supported by the Interval parameter, the maximum time period within which historical data is available, and the data delay vary with the time range to query, as described in the following table. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 day | 366 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainHttpCodeDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainHttpCodeDataResponse
 */
async function describeDomainHttpCodeDataWithOptions(request: DescribeDomainHttpCodeDataRequest, runtime: Util.RuntimeOptions): DescribeDomainHttpCodeDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainHttpCodeData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - The maximum number of times that each user can call this operation per second is 100.
  * - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity supported by the Interval parameter, the maximum time period within which historical data is available, and the data delay vary with the time range to query, as described in the following table. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 day | 366 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainHttpCodeDataRequest
  * @return DescribeDomainHttpCodeDataResponse
 */
async function describeDomainHttpCodeData(request: DescribeDomainHttpCodeDataRequest): DescribeDomainHttpCodeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainHttpCodeDataWithOptions(request, runtime);
}

model DescribeDomainHttpCodeDataByLayerRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify multiple domain names and separate them with commas (,). You can specify at most 500 domain names in each call.

If you do not specify a domain name, data of all domain names is queried.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2020-07-06T22:00:00Z'),
  interval?: string(name='Interval', description='The time interval between the data entries. Unit: seconds.

The time granularity varies with the time range to query. Supported values: 300 (5 minutes), 3600 (1 hour), and 86400 (1 day). For more information, see **Usage notes**.', example='300'),
  ispNameEn?: string(name='IspNameEn', description='The name of the Internet service provider (ISP) for your Alibaba Cloud CDN service. You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query ISP names.

If you do not specify an ISP, data of all ISPs is queried.', example='telecom'),
  layer?: string(name='Layer', description='The protocol by which you want to query HTTP status codes. The network layer supports **IPv4** and **IPv6**. The application layer supports **http**, **https**, and **quic**. You can also set the value to **all**.

The default value is **all**.', example='all'),
  locationNameEn?: string(name='LocationNameEn', description='The name of the region. You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query the most recent region list.

If you do not specify a region, data in all regions is queried.', example='hangzhou'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2020-07-05T22:00:00Z'),
}

model DescribeDomainHttpCodeDataByLayerResponseBody = {
  dataInterval?: string(name='DataInterval', description='The time interval between the data entries returned. Unit: seconds.', example='300'),
  httpCodeDataInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data returned.', example='2015-12-10T20:35:00Z'),
      totalValue?: string(name='TotalValue', description='The total number of times that HTTP status codes were returned at each time interval.', example='110'),
      value?: string(name='Value', description='The number of times that the HTTP status code was returned.', example='"Value": { "200": 10, "206": 100}'),
    }
  ](name='DataModule')
  }(name='HttpCodeDataInterval', description='The number of HTTP status codes returned at each time interval.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model DescribeDomainHttpCodeDataByLayerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainHttpCodeDataByLayerResponseBody(name='body'),
}

/**
  * - You can call this operation up to 20 times per second.
  * - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity supported by the Interval parameter, the maximum time period within which historical data is available, and the data delay vary with the time range to query, as described in the following table. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 day | 366 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainHttpCodeDataByLayerRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainHttpCodeDataByLayerResponse
 */
async function describeDomainHttpCodeDataByLayerWithOptions(request: DescribeDomainHttpCodeDataByLayerRequest, runtime: Util.RuntimeOptions): DescribeDomainHttpCodeDataByLayerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.layer)) {
    query['Layer'] = request.layer;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainHttpCodeDataByLayer',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - You can call this operation up to 20 times per second.
  * - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity supported by the Interval parameter, the maximum time period within which historical data is available, and the data delay vary with the time range to query, as described in the following table. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 day | 366 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainHttpCodeDataByLayerRequest
  * @return DescribeDomainHttpCodeDataByLayerResponse
 */
async function describeDomainHttpCodeDataByLayer(request: DescribeDomainHttpCodeDataByLayerRequest): DescribeDomainHttpCodeDataByLayerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainHttpCodeDataByLayerWithOptions(request, runtime);
}

model DescribeDomainISPDataRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name in each call.

By default, this operation queries the proportions of data usage for all accelerated domain names.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

The end time must be later than the start time.', example='2019-11-30T05:40:00Z'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2019-11-29T05:33:00Z'),
}

model DescribeDomainISPDataResponseBody = {
  dataInterval?: string(name='DataInterval', description='The time interval between the data entries. Unit: seconds.', example='86400'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range that was queried.', example='2019-11-30T05:40:00Z'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DE81639B-DAC1-4C76-AB72-F34B836837D5'),
  startTime?: string(name='StartTime', description='The beginning of the time range that was queried.', example='2019-11-29T05:33:00Z'),
  value?: {
    ISPProportionData?: [ 
    {
      avgObjectSize?: string(name='AvgObjectSize', description='The average response size. Unit: bytes.', example='7081884.7'),
      avgResponseRate?: string(name='AvgResponseRate', description='The average response speed. Unit: byte/ms.', example='88.92594866772144'),
      avgResponseTime?: string(name='AvgResponseTime', description='The average response time. Unit: milliseconds.', example='79638.0'),
      bps?: string(name='Bps', description='The bandwidth value.', example='1311.4601296296296'),
      bytesProportion?: string(name='BytesProportion', description='The proportion of network traffic.', example='0.012220518530445479'),
      ISP?: string(name='ISP', description='The information about the ISP.', example='chinanet'),
      ispEname?: string(name='IspEname', description='The name of the ISP.', example='alibaba'),
      proportion?: string(name='Proportion', description='The proportion of the HTTP status code.', example='0.004509176173513099'),
      qps?: string(name='Qps', description='The number of queries per second.', example='2.3148148148148147E-5'),
      reqErrRate?: string(name='ReqErrRate', description='The request error rate.', example='0.0'),
      totalBytes?: string(name='TotalBytes', description='The total amount of network traffic.', example='7081884'),
      totalQuery?: string(name='TotalQuery', description='The total number of requests.', example='1'),
    }
  ](name='ISPProportionData')
  }(name='Value', description='The access statistics by ISP.'),
}

model DescribeDomainISPDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainISPDataResponseBody(name='body'),
}

/**
  * The statistical analytics feature of Alibaba Cloud CDN is discontinued. The API operations related to the statistical analytics feature are no longer maintained. We recommend that you do not use the API operations because data may be missing or inaccurate. You can use the [operations report](https://www.alibabacloud.com/help/en/alibaba-cloud-cdn/latest/customize-an-operations-report-template-and-create-a-tracking-task) feature to for data analysis.  
  * > - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * - This operation queries proportions of data usage of different ISPs only for a specific accelerated domain name, or for all accelerated domain names that belong your Alibaba Cloud account.
  * - You can call this operation up to 100 times per second per account.
  *
  * @param request DescribeDomainISPDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainISPDataResponse
 */
async function describeDomainISPDataWithOptions(request: DescribeDomainISPDataRequest, runtime: Util.RuntimeOptions): DescribeDomainISPDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainISPData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The statistical analytics feature of Alibaba Cloud CDN is discontinued. The API operations related to the statistical analytics feature are no longer maintained. We recommend that you do not use the API operations because data may be missing or inaccurate. You can use the [operations report](https://www.alibabacloud.com/help/en/alibaba-cloud-cdn/latest/customize-an-operations-report-template-and-create-a-tracking-task) feature to for data analysis.  
  * > - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * - This operation queries proportions of data usage of different ISPs only for a specific accelerated domain name, or for all accelerated domain names that belong your Alibaba Cloud account.
  * - You can call this operation up to 100 times per second per account.
  *
  * @param request DescribeDomainISPDataRequest
  * @return DescribeDomainISPDataResponse
 */
async function describeDomainISPData(request: DescribeDomainISPDataRequest): DescribeDomainISPDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainISPDataWithOptions(request, runtime);
}

model DescribeDomainMax95BpsDataRequest {
  cycle?: string(name='Cycle', example='month'),
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2017-12-22T08:00:00Z'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', example='2017-12-21T08:00:00Z'),
  timePoint?: string(name='TimePoint', example='2017-12-21T10:00:00Z'),
}

model DescribeDomainMax95BpsDataResponseBody = {
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  domesticMax95Bps?: string(name='DomesticMax95Bps', example='16777590.28'),
  endTime?: string(name='EndTime', example='2015-12-11T21:00:00Z'),
  max95Bps?: string(name='Max95Bps', example='16777590.28'),
  overseasMax95Bps?: string(name='OverseasMax95Bps', example='0'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3C6CCEC4-6B88-4D4A-93E4-D47B3D92CF8F'),
  startTime?: string(name='StartTime', example='2015-12-10T20:00:00Z'),
}

model DescribeDomainMax95BpsDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainMax95BpsDataResponseBody(name='body'),
}

async function describeDomainMax95BpsDataWithOptions(request: DescribeDomainMax95BpsDataRequest, runtime: Util.RuntimeOptions): DescribeDomainMax95BpsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cycle)) {
    query['Cycle'] = request.cycle;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.timePoint)) {
    query['TimePoint'] = request.timePoint;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainMax95BpsData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainMax95BpsData(request: DescribeDomainMax95BpsDataRequest): DescribeDomainMax95BpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainMax95BpsDataWithOptions(request, runtime);
}

model DescribeDomainMultiUsageDataRequest {
  domainName?: string(name='DomainName', description='The accelerated domain names. You can specify multiple accelerated domain names and separate domain names with commas (,).

> *   You can specify at most 30 accelerated domain names.
*   If you do not set this parameter, the data of all accelerated domain names that belong to your Alibaba Cloud account is queried.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2017-12-10T21:00:00Z'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2017-12-10T20:00:00Z'),
}

model DescribeDomainMultiUsageDataResponseBody = {
  endTime?: string(name='EndTime', description='The end of the time range that was queried.', example='2017-12-10T21:00:00Z'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3C6CCEC4-6B88-4D4A-93E4-D47B3D92CF8F'),
  requestPerInterval?: {
    requestDataModule?: [ 
    {
      domain?: string(name='Domain', description='The information about the accelerated domain name.', example='example.com'),
      request?: long(name='Request', description='The number of requests.', example='11288111'),
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data returned.', example='2017-12-10T20:00:00Z'),
      type?: string(name='Type', description='The type of data returned.

>  For Alibaba Cloud CDN, the valid value is Simple.', example='Simple'),
    }
  ](name='RequestDataModule')
  }(name='RequestPerInterval', description='The information about requests collected every 5 minutes.'),
  startTime?: string(name='StartTime', description='The beginning of the time range that was queried.', example='2017-12-10T20:00:00Z'),
  trafficPerInterval?: {
    trafficDataModule?: [ 
    {
      area?: string(name='Area', description='The name of the district.', example='CN'),
      bps?: float(name='Bps', description='The bandwidth. Unit: bit/s.', example='11288111.1'),
      domain?: string(name='Domain', description='The accelerated domain name.', example='example.com'),
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data returned.', example='2017-12-10T20:00:00Z'),
      type?: string(name='Type', description='The type of data returned. Valid values:

- **StaticHttps**: the number of HTTPS requests for static content.
- **DynamicHttps**: the number of HTTPS requests for dynamic content.
- **DynamicHttp**: the number of HTTP requests for dynamic content.
- **StaticQuic**: the number of QUIC requests for static content.
- **DynamicQuic**: the number of QUIC requests for dynamic content.', example='DynamicHttp'),
    }
  ](name='TrafficDataModule')
  }(name='TrafficPerInterval', description='The statistics about data transfer collected every 5 minutes.'),
}

model DescribeDomainMultiUsageDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainMultiUsageDataResponseBody(name='body'),
}

/**
  * > *   If you do not set StartTime or EndTime, data collected within the last 10 minutes is queried.
  * *   The maximum time range between StartTime and EndTime can be 1 hour.
  * *   You can query data within the last 90 days.
  * *   You can query the amount of data transfer and the number of requests for accelerated domain names that have been already removed from Alibaba Cloud CDN.
  * *   The maximum number of times that each user can call this operation per second is 50.
  *
  * @param request DescribeDomainMultiUsageDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainMultiUsageDataResponse
 */
async function describeDomainMultiUsageDataWithOptions(request: DescribeDomainMultiUsageDataRequest, runtime: Util.RuntimeOptions): DescribeDomainMultiUsageDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainMultiUsageData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > *   If you do not set StartTime or EndTime, data collected within the last 10 minutes is queried.
  * *   The maximum time range between StartTime and EndTime can be 1 hour.
  * *   You can query data within the last 90 days.
  * *   You can query the amount of data transfer and the number of requests for accelerated domain names that have been already removed from Alibaba Cloud CDN.
  * *   The maximum number of times that each user can call this operation per second is 50.
  *
  * @param request DescribeDomainMultiUsageDataRequest
  * @return DescribeDomainMultiUsageDataResponse
 */
async function describeDomainMultiUsageData(request: DescribeDomainMultiUsageDataRequest): DescribeDomainMultiUsageDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainMultiUsageDataWithOptions(request, runtime);
}

model DescribeDomainPathDataRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name.

>  You can specify only one domain name in each call.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. The interval between the start time and end time must be less than 30 days. Example: 2016-10-21T04:00:00Z.', example='2016-10-21T04:00:00Z'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: integers from **1** to **1000**.', example='20'),
  path?: string(name='Path', description='The paths that you want to query. Separate paths with forward slashes (/). If you do not set this parameter, all paths are queried. If you set the value to a directory, it must end with a forward slash (/).

>  Fuzzy match is not supported. If you want data to be collected based on a directory, you can specify a specific directory, for example, directory/path/. In this case, bandwidth data is collected based on directory/path/.', example='/path/'),
  startTime?: string(name='StartTime', description='Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

Example: 2016-10-20T04:00:00Z.', example='2016-10-20T04:00:00Z'),
}

model DescribeDomainPathDataResponseBody = {
  dataInterval?: string(name='DataInterval', description='The time interval between the data entries. Unit: seconds.', example='300'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range that was queried.', example='2017-09-30T17:00:00Z'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page. Pages start from page **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned on each page.', example='20'),
  pathDataPerInterval?: {
    usageData?: [ 
    {
      acc?: int32(name='Acc', description='The number of visits to the specified path.', example='10'),
      path?: string(name='Path', description='The path.', example='/path/'),
      time?: string(name='Time', description='The point in time.', example='2017-09-30T16:00:00Z'),
      traffic?: int32(name='Traffic', description='The amount of network traffic. Unit: bytes.', example='346'),
    }
  ](name='UsageData')
  }(name='PathDataPerInterval', description='A list of bandwidth values collected at each time interval.'),
  startTime?: string(name='StartTime', description='The start of the time range that was queried.', example='2017-09-30T16:00:00Z'),
  totalCount?: int32(name='TotalCount', description='The total count.', example='2'),
}

model DescribeDomainPathDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainPathDataResponseBody(name='body'),
}

/**
  * *   This operation is available only to users that are on the whitelist. If the daily peak bandwidth value of your workloads reaches 10 Gbit/s, you can [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.2020520001.aliyun_topbar.18.dbd44bd3e4f845#/ticket/createIndex) to apply to be included in the whitelist.
  * *   The maximum number of times that each user can call this operation per second is 6,000.
  * *   Data collection by directory is available only to specified domain names within your Alibaba Cloud account. It cannot be enabled for all domain names within your Alibaba Cloud account.
  * *   The average size of the files that belong to the domain name must be larger than 1 MB.
  * *   The number of directories specified for a single domain name cannot exceed 100. If the number of directories exceeds 100, the data accuracy reduces.
  * *   If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data within the specified time range is queried.
  * *   You can query data collected within the last 30 days.
  *
  * @param request DescribeDomainPathDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainPathDataResponse
 */
async function describeDomainPathDataWithOptions(request: DescribeDomainPathDataRequest, runtime: Util.RuntimeOptions): DescribeDomainPathDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainPathData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   This operation is available only to users that are on the whitelist. If the daily peak bandwidth value of your workloads reaches 10 Gbit/s, you can [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.2020520001.aliyun_topbar.18.dbd44bd3e4f845#/ticket/createIndex) to apply to be included in the whitelist.
  * *   The maximum number of times that each user can call this operation per second is 6,000.
  * *   Data collection by directory is available only to specified domain names within your Alibaba Cloud account. It cannot be enabled for all domain names within your Alibaba Cloud account.
  * *   The average size of the files that belong to the domain name must be larger than 1 MB.
  * *   The number of directories specified for a single domain name cannot exceed 100. If the number of directories exceeds 100, the data accuracy reduces.
  * *   If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data within the specified time range is queried.
  * *   You can query data collected within the last 30 days.
  *
  * @param request DescribeDomainPathDataRequest
  * @return DescribeDomainPathDataResponse
 */
async function describeDomainPathData(request: DescribeDomainPathDataRequest): DescribeDomainPathDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainPathDataWithOptions(request, runtime);
}

model DescribeDomainPvDataRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

The end time must be later than the start time.', example='2015-11-29T00:00:00Z'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2015-11-28T00:00:00Z'),
}

model DescribeDomainPvDataResponseBody = {
  dataInterval?: string(name='DataInterval', description='The time interval between the data entries. Unit: seconds.', example='3600'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range during which data was queried.', example='2015-11-28T04:00:00Z'),
  pvDataInterval?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp', description='The timestamp of the returned data.', example='2015-11-28T03:00:00Z'),
      value?: string(name='Value', description='The number of PVs.', example='9292'),
    }
  ](name='UsageData')
  }(name='PvDataInterval', description='The number of PVs at each interval.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BCD7D917-76F1-442F-BB75-C810DE34C761'),
  startTime?: string(name='StartTime', description='The beginning of the time range during which data was queried.', example='2015-11-28T03:00:00Z'),
}

model DescribeDomainPvDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainPvDataResponseBody(name='body'),
}

/**
  * The statistical analytics feature of Alibaba Cloud CDN is discontinued. The API operations related to the statistical analytics feature are no longer maintained. We recommend that you do not use the API operations because data may be missing or inaccurate. You can use the [operations report](https://www.alibabacloud.com/help/en/alibaba-cloud-cdn/latest/customize-an-operations-report-template-and-create-a-tracking-task) feature to for data analysis.  
  * > - If you do not set StartTime or EndTime, monitoring data within the last 24 hours is queried. If you set both StartTime and EndTime, monitoring data within the specified time range is queried.
  * - You can call this operation up to 50 times per second per account.
  *
  * @param request DescribeDomainPvDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainPvDataResponse
 */
async function describeDomainPvDataWithOptions(request: DescribeDomainPvDataRequest, runtime: Util.RuntimeOptions): DescribeDomainPvDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainPvData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The statistical analytics feature of Alibaba Cloud CDN is discontinued. The API operations related to the statistical analytics feature are no longer maintained. We recommend that you do not use the API operations because data may be missing or inaccurate. You can use the [operations report](https://www.alibabacloud.com/help/en/alibaba-cloud-cdn/latest/customize-an-operations-report-template-and-create-a-tracking-task) feature to for data analysis.  
  * > - If you do not set StartTime or EndTime, monitoring data within the last 24 hours is queried. If you set both StartTime and EndTime, monitoring data within the specified time range is queried.
  * - You can call this operation up to 50 times per second per account.
  *
  * @param request DescribeDomainPvDataRequest
  * @return DescribeDomainPvDataResponse
 */
async function describeDomainPvData(request: DescribeDomainPvDataRequest): DescribeDomainPvDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainPvDataWithOptions(request, runtime);
}

model DescribeDomainQpsDataRequest {
  domainName?: string(name='DomainName', description='You can specify multiple domain names and separate them with commas (,). You can specify at most 500 domain names in each call.

By default, this operation queries the number of queries per second for all accelerated domain names that belong to your Alibaba Cloud account.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

The end time must be later than the start time.', example='2019-11-30T05:40:00Z'),
  interval?: string(name='Interval', description='The time interval between the data entries. Unit: seconds.

The time granularity varies with the time range to query. Supported values: 300 (5 minutes), 3600 (1 hour), and 86400 (1 day). For more information, see **Usage notes**.', example='300'),
  ispNameEn?: string(name='IspNameEn', description='The name of the Internet service provider (ISP) for your Alibaba Cloud CDN service. You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query ISPs. If you do not set this parameter, all ISPs are queried.', example='unicom'),
  locationNameEn?: string(name='LocationNameEn', description='The name of the region. You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query the most recent region list. If you do not set this parameter, all regions are queried.', example='beijing'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2019-11-30T05:33:00Z'),
}

model DescribeDomainQpsDataResponseBody = {
  dataInterval?: string(name='DataInterval', description='The time interval between the data entries returned. Unit: seconds.', example='300'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range that was queried.', example='2019-11-30T05:40:00Z'),
  qpsDataInterval?: {
    dataModule?: [ 
    {
      accDomesticValue?: string(name='AccDomesticValue', description='The number of requests in the Chinese mainland.', example='0'),
      accOverseasValue?: string(name='AccOverseasValue', description='The number of requests outside the Chinese mainland.', example='0'),
      accValue?: string(name='AccValue', description='The total number of requests.', example='0'),
      domesticValue?: string(name='DomesticValue', description='The number of queries per second in the Chinese mainland.', example='0'),
      httpsAccDomesticValue?: string(name='HttpsAccDomesticValue', description='The number of HTTPS requests sent to L1 edge nodes in the Chinese mainland.', example='1'),
      httpsAccOverseasValue?: string(name='HttpsAccOverseasValue', description='The number of HTTPS requests sent to L1 edge nodes outside the Chinese mainland.', example='1'),
      httpsAccValue?: string(name='HttpsAccValue', description='The total number of HTTPS requests sent to L1 edge nodes.', example='1'),
      httpsDomesticValue?: string(name='HttpsDomesticValue', description='The number of queries per second that is calculated based on the HTTPS requests sent to L1 edge nodes in the Chinese mainland.', example='1'),
      httpsOverseasValue?: string(name='HttpsOverseasValue', description='The number of queries per second that is calculated based on the HTTPS requests sent to L1 edge nodes outside the Chinese mainland.', example='1'),
      httpsValue?: string(name='HttpsValue', description='The number of queries per second that is calculated based on the HTTPS requests sent to L1 edge nodes.', example='1'),
      overseasValue?: string(name='OverseasValue', description='The number of queries per second outside the Chinese mainland.', example='0'),
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data returned.', example='2019-11-30T05:40:00Z'),
      value?: string(name='Value', description='The total number of queries per second.', example='0'),
    }
  ](name='DataModule')
  }(name='QpsDataInterval', description='The number of queries per second at each time interval.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B8333EDB-4595-46E0-AFE9-29BAA290D0E0'),
  startTime?: string(name='StartTime', description='The beginning of the time range that was queried.', example='2019-11-30T05:33:00Z'),
}

model DescribeDomainQpsDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainQpsDataResponseBody(name='body'),
}

/**
  * - The maximum number of times that each user can call this operation per second is 100.
  * - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity supported by the Interval parameter, the maximum time period within which historical data is available, and the data delay vary with the time range to query, as described in the following table. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 day | 366 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainQpsDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainQpsDataResponse
 */
async function describeDomainQpsDataWithOptions(request: DescribeDomainQpsDataRequest, runtime: Util.RuntimeOptions): DescribeDomainQpsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainQpsData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - The maximum number of times that each user can call this operation per second is 100.
  * - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity supported by the Interval parameter, the maximum time period within which historical data is available, and the data delay vary with the time range to query, as described in the following table. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 day | 366 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainQpsDataRequest
  * @return DescribeDomainQpsDataResponse
 */
async function describeDomainQpsData(request: DescribeDomainQpsDataRequest): DescribeDomainQpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainQpsDataWithOptions(request, runtime);
}

model DescribeDomainQpsDataByLayerRequest {
  domainName?: string(name='DomainName', description='You can specify multiple domain names and separate them with commas (,). You can specify at most 500 domain names in each call.

By default, this operation queries the number of queries per second for all accelerated domain names that belong to your Alibaba Cloud account.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2019-11-30T05:40:00Z'),
  interval?: string(name='Interval', description='The time interval between the data entries. Unit: seconds.

The time granularity varies with the time range to query. Supported values: 300 (5 minutes), 3600 (1 hour), and 86400 (1 day). For more information, see **Usage notes**.', example='300'),
  ispNameEn?: string(name='IspNameEn', description='The name of the Internet service provider (ISP) for your Alibaba Cloud CDN service. You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query ISPs. If you do not set this parameter, all ISPs are queried.', example='unicom'),
  layer?: string(name='Layer', description='The layers at which you want to query the number of queries per second. Valid values:

*   **Network layer**: **IPv4**and **IPv6**.
*   **Application layer**: **http**, **https**, and **quic**.
*   **all**: The default value. Both the network and application layers are included.', example='all'),
  locationNameEn?: string(name='LocationNameEn', description='The name of the region. You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query the most recent region list. If you do not set this parameter, all regions are queried.', example='beijing'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2019-11-30T05:33:00Z'),
}

model DescribeDomainQpsDataByLayerResponseBody = {
  dataInterval?: string(name='DataInterval', description='The time interval between the data entries returned. Unit: seconds.', example='300'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range that was queried.', example='2019-11-30T05:40:00Z'),
  layer?: string(name='Layer', description='The layer at which the data was collected.', example='all'),
  qpsDataInterval?: {
    dataModule?: [ 
    {
      accDomesticValue?: string(name='AccDomesticValue', description='The number of requests in the Chinese mainland.', example='12'),
      accOverseasValue?: string(name='AccOverseasValue', description='The number of requests in the Chinese mainland.', example='44'),
      accValue?: string(name='AccValue', description='The total number of requests.', example='56'),
      domesticValue?: string(name='DomesticValue', description='The number of queries per second in the Chinese mainland.', example='0.12'),
      overseasValue?: string(name='OverseasValue', description='The number of queries per second outside the Chinese mainland.', example='0.44'),
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data returned.', example='2015-12-10T21:00:00Z'),
      value?: string(name='Value', description='The total number of queries per second in all regions.', example='0.56'),
    }
  ](name='DataModule')
  }(name='QpsDataInterval', description='The number of queries per second at each time interval.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  startTime?: string(name='StartTime', description='The beginning of the time range that was queried.', example='2019-11-30T05:33:00Z'),
}

model DescribeDomainQpsDataByLayerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainQpsDataByLayerResponseBody(name='body'),
}

/**
  * - The maximum number of times that each user can call this operation per second is 20.
  * - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity supported by the Interval parameter, the maximum time period within which historical data is available, and the data delay vary with the time range to query, as described in the following table. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 day | 366 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainQpsDataByLayerRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainQpsDataByLayerResponse
 */
async function describeDomainQpsDataByLayerWithOptions(request: DescribeDomainQpsDataByLayerRequest, runtime: Util.RuntimeOptions): DescribeDomainQpsDataByLayerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.layer)) {
    query['Layer'] = request.layer;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainQpsDataByLayer',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - The maximum number of times that each user can call this operation per second is 20.
  * - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity supported by the Interval parameter, the maximum time period within which historical data is available, and the data delay vary with the time range to query, as described in the following table. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 day | 366 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainQpsDataByLayerRequest
  * @return DescribeDomainQpsDataByLayerResponse
 */
async function describeDomainQpsDataByLayer(request: DescribeDomainQpsDataByLayerRequest): DescribeDomainQpsDataByLayerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainQpsDataByLayerWithOptions(request, runtime);
}

model DescribeDomainRealTimeBpsDataRequest {
  domainName?: string(name='DomainName', description='The accelerated domain names. You can specify multiple accelerated domain names and separate them with commas (,).

>  You can specify at most 500 accelerated domain names in each call.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2019-11-30T05:40:00Z'),
  ispNameEn?: string(name='IspNameEn', description='The name of the Internet service provider (ISP) for your Alibaba Cloud CDN service.

You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query the most recent ISP list. If you do not set this parameter, all ISPs are queried.', example='telecom'),
  locationNameEn?: string(name='LocationNameEn', description='The name of the region.

You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query the most recent region list. If you do not set this parameter, all regions are queried.', example='beijing'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2019-11-30T05:33:00Z'),
}

model DescribeDomainRealTimeBpsDataResponseBody = {
  data?: {
    bpsModel?: [ 
    {
      bps?: float(name='Bps', description='The bandwidth. Unit: bit/s.', example='16710625.733333332'),
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data entry. The time follows the ISO 8601 standard. The time is displayed in UTC.', example='2019-11-30T05:41:00Z'),
    }
  ](name='BpsModel')
  }(name='Data', description='The response parameters.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B49E6DDA-F413-422B-B58E-2FA23F286726'),
}

model DescribeDomainRealTimeBpsDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainRealTimeBpsDataResponseBody(name='body'),
}

/**
  * - The maximum number of times that each user can call this operation per second is 100.
  * - If you do not set StartTime or EndTime, data collected within the last hour is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity varies with the time range specified by the StartTime and EndTime parameters. The following table describes the time period within which historical data is available and the data delay. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 1 minute | 1 hour | 7 days | 5 minutes |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  *
  * @param request DescribeDomainRealTimeBpsDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainRealTimeBpsDataResponse
 */
async function describeDomainRealTimeBpsDataWithOptions(request: DescribeDomainRealTimeBpsDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeBpsDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainRealTimeBpsData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - The maximum number of times that each user can call this operation per second is 100.
  * - If you do not set StartTime or EndTime, data collected within the last hour is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity varies with the time range specified by the StartTime and EndTime parameters. The following table describes the time period within which historical data is available and the data delay. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 1 minute | 1 hour | 7 days | 5 minutes |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  *
  * @param request DescribeDomainRealTimeBpsDataRequest
  * @return DescribeDomainRealTimeBpsDataResponse
 */
async function describeDomainRealTimeBpsData(request: DescribeDomainRealTimeBpsDataRequest): DescribeDomainRealTimeBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeBpsDataWithOptions(request, runtime);
}

model DescribeDomainRealTimeByteHitRateDataRequest {
  domainName?: string(name='DomainName', description='You can specify multiple domain names and separate them with commas (,). You can specify at most 100 domain names in each call.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.  

>  The end time must be later than the start time.', example='2020-05-15T09:15:00Z'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2020-05-15T09:13:00Z'),
}

model DescribeDomainRealTimeByteHitRateDataResponseBody = {
  data?: {
    byteHitRateDataModel?: [ 
    {
      byteHitRate?: float(name='ByteHitRate', description='The byte hit ratio. The byte hit ratio is measured in percentage.', example='0.8956940476262277'),
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data returned. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-11-30T05:40:00Z'),
    }
  ](name='ByteHitRateDataModel')
  }(name='Data', description='The response parameters.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='70A26B11-3673-479C-AEA8-E03FC5D3496D'),
}

model DescribeDomainRealTimeByteHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainRealTimeByteHitRateDataResponseBody(name='body'),
}

/**
  * - The maximum number of times that each user can call this operation per second is 10.
  * - If you do not set StartTime or EndTime, data collected within the last hour is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * - The network traffic destined for different domain names may be redirected to the same origin server. Therefore, the byte hit ratios may be inaccurate. The accuracy of query results is based on the actual configurations.
  * **Time granularity**
  * The time granularity varies with the time range specified by the StartTime and EndTime parameters. The following table describes the time period within which historical data is available and the data delay. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 1 minute | 1 hour | 7 days | 5 minutes |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  *
  * @param request DescribeDomainRealTimeByteHitRateDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainRealTimeByteHitRateDataResponse
 */
async function describeDomainRealTimeByteHitRateDataWithOptions(request: DescribeDomainRealTimeByteHitRateDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeByteHitRateDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainRealTimeByteHitRateData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - The maximum number of times that each user can call this operation per second is 10.
  * - If you do not set StartTime or EndTime, data collected within the last hour is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * - The network traffic destined for different domain names may be redirected to the same origin server. Therefore, the byte hit ratios may be inaccurate. The accuracy of query results is based on the actual configurations.
  * **Time granularity**
  * The time granularity varies with the time range specified by the StartTime and EndTime parameters. The following table describes the time period within which historical data is available and the data delay. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 1 minute | 1 hour | 7 days | 5 minutes |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  *
  * @param request DescribeDomainRealTimeByteHitRateDataRequest
  * @return DescribeDomainRealTimeByteHitRateDataResponse
 */
async function describeDomainRealTimeByteHitRateData(request: DescribeDomainRealTimeByteHitRateDataRequest): DescribeDomainRealTimeByteHitRateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeByteHitRateDataWithOptions(request, runtime);
}

model DescribeDomainRealTimeDetailDataRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name for which you want to query data. You can specify multiple accelerated domain names and separate them with commas (,).', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. Example: 2019-11-30T05:40:00Z.

>  The end time must be later than the start time. The time range between the end time and the start time cannot exceed 10 minutes.', example='2019-11-30T05:40:00Z'),
  field?: string(name='Field', description='The metrics that you want to query. You can specify multiple metrics and separate them with commas (,). Valid values:

*   **qps**: the number of queries per second
*   **bps**: bandwidth values
*   **http_code**: HTTP status codes', example='qps'),
  ispNameEn?: string(name='IspNameEn', description='The name of the Internet service provider. You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query ISPs.', example='telecom'),
  locationNameEn?: string(name='LocationNameEn', description='The name of the region. You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query the most recent region list.', example='Guangdong'),
  merge?: string(name='Merge', description='Specifies whether to merge the results. Valid values:

*   **true**: merges the results.
*   **false**: does not merge the results. This is the default value.

Default value: **false**.', example='false'),
  mergeLocIsp?: string(name='MergeLocIsp', description='Specifies whether to merge the results. Valid values:

*   **true**: groups the results by domain name and merges the results by region and ISP.
*   **false**: groups the results by domain name.

Default value: **false**.', example='false'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. Example: 2019-11-30T05:33:00Z.', example='2019-11-30T05:33:00Z'),
}

model DescribeDomainRealTimeDetailDataResponseBody = {
  data?: string(name='Data', description='The data usage of each ISP and the number of visits in each region.', example='{         "2019-11-30T05:40:00Z": {             "example.com": {                 "Guangdong": {                     "telecom": {                         "qps": 10.0,                         "http_code": {"200": 1, "304": 2}                     }                 },                 "Jiangsu": {                     "unicom": {                         "qps": 11.1,                         "http_code": {"200": 1, "304": 2, "403": 3}                     }                 }             }         }    }'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B49E6DDA-F413-422B-B58E-2FA23F286726'),
}

model DescribeDomainRealTimeDetailDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainRealTimeDetailDataResponseBody(name='body'),
}

/**
  * - You can query data within the last seven days. Data is collected every minute.
  * - The maximum number of times that each user can call this operation per second is 10.
  *
  * @param request DescribeDomainRealTimeDetailDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainRealTimeDetailDataResponse
 */
async function describeDomainRealTimeDetailDataWithOptions(request: DescribeDomainRealTimeDetailDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeDetailDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainRealTimeDetailData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - You can query data within the last seven days. Data is collected every minute.
  * - The maximum number of times that each user can call this operation per second is 10.
  *
  * @param request DescribeDomainRealTimeDetailDataRequest
  * @return DescribeDomainRealTimeDetailDataResponse
 */
async function describeDomainRealTimeDetailData(request: DescribeDomainRealTimeDetailDataRequest): DescribeDomainRealTimeDetailDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeDetailDataWithOptions(request, runtime);
}

model DescribeDomainRealTimeHttpCodeDataRequest {
  domainName?: string(name='DomainName', description='The accelerated domain names. You can specify multiple accelerated domain names and separate them with commas (,).

>  You can specify at most 100 accelerated domain names in each call.', example='example.com,example.org'),
  endTime?: string(name='EndTime', description='The end of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2019-11-30T05:40:00Z'),
  ispNameEn?: string(name='IspNameEn', description='The name of the Internet service provider (ISP) for your Alibaba Cloud CDN service. You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query ISP names.', example='unicom'),
  locationNameEn?: string(name='LocationNameEn', description='The name of the region. If you do not set this parameter, all regions are queried. You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query the most recent region list.', example='beijing'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2019-11-30T05:39:00Z'),
}

model DescribeDomainRealTimeHttpCodeDataResponseBody = {
  dataInterval?: string(name='DataInterval', description='The time interval between the data entries returned. Unit: seconds.

The time granularity varies with the time range to query. Supported values: 60 (1 minute), 300 (5 minutes), and 3600(1 hour). For more information, see the usage notes.', example='60'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com,example.org'),
  endTime?: string(name='EndTime', description='The end of the time range that was queried.', example='2019-11-29T05:42:00Z'),
  realTimeHttpCodeData?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data returned.', example='2019-11-29T05:39:00Z'),
      value?: {
        realTimeCodeProportionData?: [ 
        {
          code?: string(name='Code', description='The HTTP status code.', example='500'),
          count?: string(name='Count', description='The total number of HTTP status codes returned.', example='100'),
          proportion?: string(name='Proportion', description='The proportion of the HTTP status code.', example='28.4496124031008'),
        }
      ](name='RealTimeCodeProportionData')
      }(name='Value', description='The proportions of the HTTP status codes.'),
    }
  ](name='UsageData')
  }(name='RealTimeHttpCodeData', description='The proportions of HTTP status codes at each time interval.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BC858082-736F-4A25-867B-E5B67C85ACF7'),
  startTime?: string(name='StartTime', description='The beginning of the time range that was queried.', example='2019-11-29T05:39:00Z'),
}

model DescribeDomainRealTimeHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainRealTimeHttpCodeDataResponseBody(name='body'),
}

/**
  * - The maximum number of times that each user can call this operation per second is 10.
  * - If you do not set StartTime or EndTime, data collected within the last hour is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity varies with the time range specified by the StartTime and EndTime parameters. The following table describes the time period within which historical data is available and the data delay. 
  * | Time granularity | Historical data available | Time range to query | Data delay |
  * | ---------------- | ------------------------- | ------------------- | ---------- |
  * | 1 minute | 1 hour | 7 days | 5 minutes |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  *
  * @param request DescribeDomainRealTimeHttpCodeDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainRealTimeHttpCodeDataResponse
 */
async function describeDomainRealTimeHttpCodeDataWithOptions(request: DescribeDomainRealTimeHttpCodeDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeHttpCodeDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainRealTimeHttpCodeData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - The maximum number of times that each user can call this operation per second is 10.
  * - If you do not set StartTime or EndTime, data collected within the last hour is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity varies with the time range specified by the StartTime and EndTime parameters. The following table describes the time period within which historical data is available and the data delay. 
  * | Time granularity | Historical data available | Time range to query | Data delay |
  * | ---------------- | ------------------------- | ------------------- | ---------- |
  * | 1 minute | 1 hour | 7 days | 5 minutes |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  *
  * @param request DescribeDomainRealTimeHttpCodeDataRequest
  * @return DescribeDomainRealTimeHttpCodeDataResponse
 */
async function describeDomainRealTimeHttpCodeData(request: DescribeDomainRealTimeHttpCodeDataRequest): DescribeDomainRealTimeHttpCodeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeHttpCodeDataWithOptions(request, runtime);
}

model DescribeDomainRealTimeQpsDataRequest {
  domainName?: string(name='DomainName', description='The accelerated domain names. You can specify multiple accelerated domain names and separate them with commas (,).

>  You can specify at most 500 accelerated domain names in each call.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2019-12-02T11:26:00Z'),
  ispNameEn?: string(name='IspNameEn', description='The name of the Internet service provider (ISP) for your Alibaba Cloud CDN service.

If you do not set this parameter, all ISPs are queried. You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query ISP names.', example='telecom'),
  locationNameEn?: string(name='LocationNameEn', description='The name of the region.

If you do not set this parameter, all regions are queried. You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query the most recent region list.', example='beijing'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2019-12-02T11:25:00Z'),
}

model DescribeDomainRealTimeQpsDataResponseBody = {
  data?: {
    qpsModel?: [ 
    {
      qps?: float(name='Qps', description='The number of queries per second.', example='1851.25'),
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data returned. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-12-02T11:25:00Z'),
    }
  ](name='QpsModel')
  }(name='Data', description='The response parameters.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='32DC9806-E9F9-4490-BBDC-B3A9E32FCC1D'),
}

model DescribeDomainRealTimeQpsDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainRealTimeQpsDataResponseBody(name='body'),
}

/**
  * - The maximum number of times that each user can call this operation per second is 10.
  * - If you do not set StartTime or EndTime, data collected within the last hour is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity varies with the time range specified by the StartTime and EndTime parameters. The following table describes the time period within which historical data is available and the data delay. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 1 minute | 1 hour | 7 days | 5 minutes |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  *
  * @param request DescribeDomainRealTimeQpsDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainRealTimeQpsDataResponse
 */
async function describeDomainRealTimeQpsDataWithOptions(request: DescribeDomainRealTimeQpsDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeQpsDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainRealTimeQpsData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - The maximum number of times that each user can call this operation per second is 10.
  * - If you do not set StartTime or EndTime, data collected within the last hour is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity varies with the time range specified by the StartTime and EndTime parameters. The following table describes the time period within which historical data is available and the data delay. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 1 minute | 1 hour | 7 days | 5 minutes |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  *
  * @param request DescribeDomainRealTimeQpsDataRequest
  * @return DescribeDomainRealTimeQpsDataResponse
 */
async function describeDomainRealTimeQpsData(request: DescribeDomainRealTimeQpsDataRequest): DescribeDomainRealTimeQpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeQpsDataWithOptions(request, runtime);
}

model DescribeDomainRealTimeReqHitRateDataRequest {
  domainName?: string(name='DomainName', description='You can specify multiple domain names and separate them with commas (,). You can specify at most 100 domain names in each call.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2018-01-02T11:26:00Z'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2018-01-02T11:23:00Z'),
}

model DescribeDomainRealTimeReqHitRateDataResponseBody = {
  data?: {
    reqHitRateDataModel?: [ 
    {
      reqHitRate?: float(name='ReqHitRate', description='The request hit ratio.', example='0.8956940476262277'),
      timeStamp?: string(name='TimeStamp', description='The timestamp. The time follows the ISO 8601 standard. The time is displayed in UTC.', example='2018-01-02T11:26:00Z'),
    }
  ](name='ReqHitRateDataModel')
  }(name='Data', description='The response parameters.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='70A26B11-3673-479C-AEA8-E03FC5D3496D'),
}

model DescribeDomainRealTimeReqHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainRealTimeReqHitRateDataResponseBody(name='body'),
}

/**
  * - The maximum number of times that each user can call this operation per second is 10.
  * - If you do not set StartTime or EndTime, data collected within the last hour is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * - By default, requests in the Go programming language use the POST request method. You must manually change the request method to GET by declaring: request.Method="GET".
  * - The network traffic destined for different domain names may be redirected to the same origin server. Therefore, the request hit ratios may be inaccurate. The accuracy of query results is based on the actual configurations.
  * **Time granularity**
  * The time granularity varies with the time range specified by the StartTime and EndTime parameters. The following table describes the time period within which historical data is available and the data delay. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 1 minute | 1 hour | 7 days | 5 minutes |
  * | 5 minutes | 3 Days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  *
  * @param request DescribeDomainRealTimeReqHitRateDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainRealTimeReqHitRateDataResponse
 */
async function describeDomainRealTimeReqHitRateDataWithOptions(request: DescribeDomainRealTimeReqHitRateDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeReqHitRateDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainRealTimeReqHitRateData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - The maximum number of times that each user can call this operation per second is 10.
  * - If you do not set StartTime or EndTime, data collected within the last hour is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * - By default, requests in the Go programming language use the POST request method. You must manually change the request method to GET by declaring: request.Method="GET".
  * - The network traffic destined for different domain names may be redirected to the same origin server. Therefore, the request hit ratios may be inaccurate. The accuracy of query results is based on the actual configurations.
  * **Time granularity**
  * The time granularity varies with the time range specified by the StartTime and EndTime parameters. The following table describes the time period within which historical data is available and the data delay. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 1 minute | 1 hour | 7 days | 5 minutes |
  * | 5 minutes | 3 Days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  *
  * @param request DescribeDomainRealTimeReqHitRateDataRequest
  * @return DescribeDomainRealTimeReqHitRateDataResponse
 */
async function describeDomainRealTimeReqHitRateData(request: DescribeDomainRealTimeReqHitRateDataRequest): DescribeDomainRealTimeReqHitRateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeReqHitRateDataWithOptions(request, runtime);
}

model DescribeDomainRealTimeSrcBpsDataRequest {
  domainName?: string(name='DomainName', description='You can specify multiple domain names and separate them with commas (,). You can specify at most 100 domain names in each call.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2019-12-10T20:01:00Z'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The start of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2019-12-10T20:00:00Z'),
}

model DescribeDomainRealTimeSrcBpsDataResponseBody = {
  dataInterval?: string(name='DataInterval', description='The time interval between the data entries returned. Unit: seconds.

The time granularity varies with the time range to query. Supported values: 60 (1 minute), 300 (5 minutes), and 3600(1 hour). For more information, see **Usage notes**.', example='60'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query.', example='2019-12-10T20:01:00Z'),
  realTimeSrcBpsDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data returned.', example='2019-12-10T20:01:00Z'),
      value?: string(name='Value', description='The bandwidth during back-to-origin routing. Unit: bit/s.', example='0'),
    }
  ](name='DataModule')
  }(name='RealTimeSrcBpsDataPerInterval', description='The back-to-origin bandwidth information at each interval.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7CBCD6AD-B016-42E5-AE0B-B3731DE8F755'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.', example='2019-12-10T20:00:00Z'),
}

model DescribeDomainRealTimeSrcBpsDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainRealTimeSrcBpsDataResponseBody(name='body'),
}

/**
  * - The maximum number of times that each user can call this operation per second is 10.
  * - If you do not set StartTime or EndTime, data collected within the last hour is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity varies with the time range specified by the StartTime and EndTime parameters. The following table describes the time period within which historical data is available and the data delay. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 1 minute | 1 hour | 7 days | 5 minutes |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  *
  * @param request DescribeDomainRealTimeSrcBpsDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainRealTimeSrcBpsDataResponse
 */
async function describeDomainRealTimeSrcBpsDataWithOptions(request: DescribeDomainRealTimeSrcBpsDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeSrcBpsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainRealTimeSrcBpsData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - The maximum number of times that each user can call this operation per second is 10.
  * - If you do not set StartTime or EndTime, data collected within the last hour is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity varies with the time range specified by the StartTime and EndTime parameters. The following table describes the time period within which historical data is available and the data delay. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 1 minute | 1 hour | 7 days | 5 minutes |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  *
  * @param request DescribeDomainRealTimeSrcBpsDataRequest
  * @return DescribeDomainRealTimeSrcBpsDataResponse
 */
async function describeDomainRealTimeSrcBpsData(request: DescribeDomainRealTimeSrcBpsDataRequest): DescribeDomainRealTimeSrcBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeSrcBpsDataWithOptions(request, runtime);
}

model DescribeDomainRealTimeSrcHttpCodeDataRequest {
  domainName?: string(name='DomainName', description='You can specify multiple domain names and separate them with commas (,). You can specify at most 100 domain names in each call.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2019-11-30T05:40:00Z'),
  ispNameEn?: string(name='IspNameEn', description='The name of the Internet Service Provider (ISP). You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query ISPs. If you do not set this parameter, all ISPs are queried.', example='unicom'),
  locationNameEn?: string(name='LocationNameEn', description='The name of the region. You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query regions. If you do not set this parameter, all regions are queried.', example='beijing'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The start of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2019-11-30T04:40:00Z'),
}

model DescribeDomainRealTimeSrcHttpCodeDataResponseBody = {
  dataInterval?: string(name='DataInterval', description='The time interval between the data entries returned. Unit: seconds.', example='60'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range that was queried.', example='2019-11-30T05:40:00Z'),
  realTimeSrcHttpCodeData?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data returned.', example='2015-11-30T05:40:00Z'),
      value?: {
        realTimeSrcCodeProportionData?: [ 
        {
          code?: string(name='Code', description='The HTTP status code.', example='200'),
          count?: string(name='Count', description='The total number of HTTP status codes returned.', example='100'),
          proportion?: string(name='Proportion', description='The proportion of the HTTP status code.', example='0.62015503875969'),
        }
      ](name='RealTimeSrcCodeProportionData')
      }(name='Value', description='The proportions of HTTP status codes.'),
    }
  ](name='UsageData')
  }(name='RealTimeSrcHttpCodeData', description='The proportions of HTTP status codes at each time interval.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BC858082-736F-4A25-867B-E5B67C85ACF7'),
  startTime?: string(name='StartTime', description='The beginning of the time range that was queried.', example='2019-11-30T05:33:00Z'),
}

model DescribeDomainRealTimeSrcHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainRealTimeSrcHttpCodeDataResponseBody(name='body'),
}

/**
  * - The maximum number of times that each user can call this operation per second is 10.
  * - If you do not set StartTime or EndTime, data collected within the last hour is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity varies with the time range specified by the StartTime and EndTime parameters. The following table describes the time period within which historical data is available and the data delay. 
  * | Time granularity | Historical data available | Time range to query | Data delay |
  * | ---------------- | ------------------------- | ------------------- | ---------- |
  * | 1 minute | 1 hour | 7 days | 5 minutes |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  *
  * @param request DescribeDomainRealTimeSrcHttpCodeDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainRealTimeSrcHttpCodeDataResponse
 */
async function describeDomainRealTimeSrcHttpCodeDataWithOptions(request: DescribeDomainRealTimeSrcHttpCodeDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeSrcHttpCodeDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainRealTimeSrcHttpCodeData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - The maximum number of times that each user can call this operation per second is 10.
  * - If you do not set StartTime or EndTime, data collected within the last hour is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity varies with the time range specified by the StartTime and EndTime parameters. The following table describes the time period within which historical data is available and the data delay. 
  * | Time granularity | Historical data available | Time range to query | Data delay |
  * | ---------------- | ------------------------- | ------------------- | ---------- |
  * | 1 minute | 1 hour | 7 days | 5 minutes |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  *
  * @param request DescribeDomainRealTimeSrcHttpCodeDataRequest
  * @return DescribeDomainRealTimeSrcHttpCodeDataResponse
 */
async function describeDomainRealTimeSrcHttpCodeData(request: DescribeDomainRealTimeSrcHttpCodeDataRequest): DescribeDomainRealTimeSrcHttpCodeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeSrcHttpCodeDataWithOptions(request, runtime);
}

model DescribeDomainRealTimeSrcTrafficDataRequest {
  domainName?: string(name='DomainName', description='You can specify multiple domain names and separate them with commas (,). You can specify at most 100 domain names in each call.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2019-12-10T20:01:00Z'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2019-12-10T20:00:00Z'),
}

model DescribeDomainRealTimeSrcTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval', description='The time interval between the data entries returned. Unit: seconds.

The time granularity varies with the time range to query. Supported values: 60, (1 minute), 300 (5 minutes), and 3600 (1 hour). For more information, see the usage notes.', example='60'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range that was queried.', example='2019-12-10T20:01:00Z'),
  realTimeSrcTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data returned.', example='2019-12-10T20:01:00Z'),
      value?: string(name='Value', description='The amount of back-to-origin network traffic.', example='0'),
    }
  ](name='DataModule')
  }(name='RealTimeSrcTrafficDataPerInterval', description='The amount of back-to-origin network traffic that was collected at each interval.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A666D44F-19D6-490E-97CF-1A64AB962C57'),
  startTime?: string(name='StartTime', description='The beginning of the time range that was queried.', example='2019-12-10T20:00:00Z'),
}

model DescribeDomainRealTimeSrcTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainRealTimeSrcTrafficDataResponseBody(name='body'),
}

/**
  * - The maximum number of times that each user can call this operation per second is 10.
  * - If you do not set StartTime or EndTime, data collected within the last hour is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity varies with the time range specified by the StartTime and EndTime parameters. The following table describes the time period within which historical data is available and the data delay. 
  * | Time granularity | Historical data available | Time range to query | Data delay |
  * | ---------------- | ------------------------- | ------------------- | ---------- |
  * | 1 minute | 1 hour | 7 days | 5 minutes |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  *
  * @param request DescribeDomainRealTimeSrcTrafficDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainRealTimeSrcTrafficDataResponse
 */
async function describeDomainRealTimeSrcTrafficDataWithOptions(request: DescribeDomainRealTimeSrcTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeSrcTrafficDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainRealTimeSrcTrafficData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - The maximum number of times that each user can call this operation per second is 10.
  * - If you do not set StartTime or EndTime, data collected within the last hour is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity varies with the time range specified by the StartTime and EndTime parameters. The following table describes the time period within which historical data is available and the data delay. 
  * | Time granularity | Historical data available | Time range to query | Data delay |
  * | ---------------- | ------------------------- | ------------------- | ---------- |
  * | 1 minute | 1 hour | 7 days | 5 minutes |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  *
  * @param request DescribeDomainRealTimeSrcTrafficDataRequest
  * @return DescribeDomainRealTimeSrcTrafficDataResponse
 */
async function describeDomainRealTimeSrcTrafficData(request: DescribeDomainRealTimeSrcTrafficDataRequest): DescribeDomainRealTimeSrcTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeSrcTrafficDataWithOptions(request, runtime);
}

model DescribeDomainRealTimeTrafficDataRequest {
  domainName?: string(name='DomainName', description='You can specify multiple domain names and separate them with commas (,). You can specify at most 100 domain names in each call.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2019-12-10T20:01:00Z'),
  ispNameEn?: string(name='IspNameEn', description='The name of the ISP for your Alibaba Cloud CDN service.

You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query the most recent region list. If you do not set this parameter, all regions are queried.', example='telecom'),
  locationNameEn?: string(name='LocationNameEn', description='The name of the region.

You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query the most recent region list. If you do not set this parameter, all regions are queried.', example='beijing'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2019-12-10T20:00:00Z'),
}

model DescribeDomainRealTimeTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval', description='The time interval between the data entries returned. Unit: seconds.

The time granularity varies with the time range to query. Supported values: 60 (1 minute), 300 (5 minutes), and 3600(1 hour). For more information, see the usage notes.', example='60'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range that was queried.', example='2019-12-10T20:01:00Z'),
  realTimeTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data returned.', example='2019-12-10T20:01:00Z'),
      value?: string(name='Value', description='The amount of network traffic.', example='0'),
    }
  ](name='DataModule')
  }(name='RealTimeTrafficDataPerInterval', description='The amount of network traffic at each time interval. Unit: bytes.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A666D44F-19D6-490E-97CF-1A64AB962C57'),
  startTime?: string(name='StartTime', description='The beginning of the time range that was queried.', example='2019-12-10T20:00:00Z'),
}

model DescribeDomainRealTimeTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainRealTimeTrafficDataResponseBody(name='body'),
}

/**
  * - The maximum number of times that each user can call this operation per second is 50.
  * - If you do not set StartTime or EndTime, data collected within the last hour is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity varies with the time range specified by the StartTime and EndTime parameters. The following table describes the time period within which historical data is available and the data delay. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 1 minute | 1 hour | 7 days | 5 minutes |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  *
  * @param request DescribeDomainRealTimeTrafficDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainRealTimeTrafficDataResponse
 */
async function describeDomainRealTimeTrafficDataWithOptions(request: DescribeDomainRealTimeTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeTrafficDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainRealTimeTrafficData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - The maximum number of times that each user can call this operation per second is 50.
  * - If you do not set StartTime or EndTime, data collected within the last hour is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity varies with the time range specified by the StartTime and EndTime parameters. The following table describes the time period within which historical data is available and the data delay. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 1 minute | 1 hour | 7 days | 5 minutes |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  *
  * @param request DescribeDomainRealTimeTrafficDataRequest
  * @return DescribeDomainRealTimeTrafficDataResponse
 */
async function describeDomainRealTimeTrafficData(request: DescribeDomainRealTimeTrafficDataRequest): DescribeDomainRealTimeTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeTrafficDataWithOptions(request, runtime);
}

model DescribeDomainRealtimeLogDeliveryRequest {
  domain?: string(name='Domain', description='The accelerated domain name for which real-time log delivery is enabled. Only one domain name is supported.', example='example.com'),
}

model DescribeDomainRealtimeLogDeliveryResponseBody = {
  logstore?: string(name='Logstore', description='The name of the Logstore where log entries are stored.', example='LogstoreName'),
  project?: string(name='Project', description='The name of the Log Service project that is used for real-time log delivery.', example='ProjectName'),
  region?: string(name='Region', description='The ID of the region where the Log Service project is deployed.', example='cn-shanghai'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2F8F3852-912F-42AC-80EB-F1CF4284DE93'),
  status?: string(name='Status', description='The status of the real-time log delivery feature. Valid values:

*   **online**
*   **offline**', example='online'),
}

model DescribeDomainRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainRealtimeLogDeliveryResponseBody(name='body'),
}

/**
  * >  You can call this API operation up to 100 times per second per account.
  *
  * @param request DescribeDomainRealtimeLogDeliveryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainRealtimeLogDeliveryResponse
 */
async function describeDomainRealtimeLogDeliveryWithOptions(request: DescribeDomainRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): DescribeDomainRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainRealtimeLogDelivery',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  You can call this API operation up to 100 times per second per account.
  *
  * @param request DescribeDomainRealtimeLogDeliveryRequest
  * @return DescribeDomainRealtimeLogDeliveryResponse
 */
async function describeDomainRealtimeLogDelivery(request: DescribeDomainRealtimeLogDeliveryRequest): DescribeDomainRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealtimeLogDeliveryWithOptions(request, runtime);
}

model DescribeDomainRegionDataRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. Separate multiple accelerated domain names with commas (,).  

By default, this operation queries the geographic distribution of users for all accelerated domain names.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.  

The end time must be later than the start time.', example='2015-12-07T12:00:00Z'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The start of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2015-12-05T12:00:00Z'),
}

model DescribeDomainRegionDataResponseBody = {
  dataInterval?: string(name='DataInterval', description='The time interval between the data entries returned. Unit: seconds.', example='86400'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range that was queried.', example='2015-12-07T12:00:00Z'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2E5AD83F-BD7B-462E-8319-2E30E305519A'),
  startTime?: string(name='StartTime', description='The beginning of the time range that was queried.', example='2015-12-05T12:00:00Z'),
  value?: {
    regionProportionData?: [ 
    {
      avgObjectSize?: string(name='AvgObjectSize', description='The average response size. Unit: bytes.', example='800019.0'),
      avgResponseRate?: string(name='AvgResponseRate', description='The average response speed. Unit: bit/s.', example='154.3345765545624'),
      avgResponseTime?: string(name='AvgResponseTime', description='The average response time. Unit: milliseconds.', example='5183.666666666667'),
      bps?: string(name='Bps', description='The bandwidth.', example='380.9614285714286'),
      bytesProportion?: string(name='BytesProportion', description='The proportion of bytes transferred from each region. For example, a value of 90 indicates that 90% of the bytes are transferred from the specified area.', example='0.003544181046236794'),
      proportion?: string(name='Proportion', description='The proportion of visits from each region. For example, a value of 90 indicates that 90% of the visits are from the specified area.', example='0.01155980271270037'),
      qps?: string(name='Qps', description='The number of queries per second.', example='5.9523809523809524E-5'),
      region?: string(name='Region', description='The information of the regions.', example='cn-shenzhen'),
      regionEname?: string(name='RegionEname', description='The name of the region.', example='japan'),
      reqErrRate?: string(name='ReqErrRate', description='The request error rate. A value of 90 indicates that 90% of the requests encountered errors.', example='0.0'),
      totalBytes?: string(name='TotalBytes', description='The total traffic. Unit: bytes.', example='2400057'),
      totalQuery?: string(name='TotalQuery', description='The total number of requests.', example='3'),
    }
  ](name='RegionProportionData')
  }(name='Value', description='The proportions of requests initiated from each area.'),
}

model DescribeDomainRegionDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainRegionDataResponseBody(name='body'),
}

/**
  * The statistical analytics feature of Alibaba Cloud CDN is discontinued. The API operations related to the statistical analytics feature are no longer maintained. We recommend that you do not use the API operations because data may be missing or inaccurate. You can use the [operations report](https://www.alibabacloud.com/help/en/alibaba-cloud-cdn/latest/customize-an-operations-report-template-and-create-a-tracking-task) feature to for data analysis.  
  * > - If you do not set **StartTime** or **EndTime**, data collected within the last **24** hours is queried. If you set both **StartTime** and **EndTime**, data collected within the specified time range is queried.
  * - You may fail to query the latest data. If you need to query data collected within the last day, we recommend that you query the data on the next day.
  * - You can call this operation up to 100 times per second per account.
  *
  * @param request DescribeDomainRegionDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainRegionDataResponse
 */
async function describeDomainRegionDataWithOptions(request: DescribeDomainRegionDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRegionDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainRegionData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The statistical analytics feature of Alibaba Cloud CDN is discontinued. The API operations related to the statistical analytics feature are no longer maintained. We recommend that you do not use the API operations because data may be missing or inaccurate. You can use the [operations report](https://www.alibabacloud.com/help/en/alibaba-cloud-cdn/latest/customize-an-operations-report-template-and-create-a-tracking-task) feature to for data analysis.  
  * > - If you do not set **StartTime** or **EndTime**, data collected within the last **24** hours is queried. If you set both **StartTime** and **EndTime**, data collected within the specified time range is queried.
  * - You may fail to query the latest data. If you need to query data collected within the last day, we recommend that you query the data on the next day.
  * - You can call this operation up to 100 times per second per account.
  *
  * @param request DescribeDomainRegionDataRequest
  * @return DescribeDomainRegionDataResponse
 */
async function describeDomainRegionData(request: DescribeDomainRegionDataRequest): DescribeDomainRegionDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRegionDataWithOptions(request, runtime);
}

model DescribeDomainReqHitRateDataRequest {
  domainName?: string(name='DomainName', description='You can specify multiple domain names and separate them with commas (,). You can specify at most 500 domain names in each call.

By default, this operation queries the bandwidth values of back-to-origin requests for all accelerated domain names that belong to your Alibaba Cloud account.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2017-12-22T08:00:00Z'),
  interval?: string(name='Interval', description='The time interval between the data entries. Unit: seconds.

The time granularity varies with the time range to query. Supported values: 300 (5 minutes), 3600 (1 hour), and 86400 (1 day). For more information, see **Usage notes**.', example='300'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The start of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2017-12-21T08:00:00Z'),
}

model DescribeDomainReqHitRateDataResponseBody = {
  dataInterval?: string(name='DataInterval', description='The time interval between the data entries returned. Unit: seconds.', example='300'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range that was queried.', example='2017-12-22T08:00:00Z'),
  reqHitRateInterval?: {
    dataModule?: [ 
    {
      httpsValue?: string(name='HttpsValue', description='The hit ratio of HTTPS requests.', example='50.0'),
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data returned.', example='2017-12-22T08:00:00:00Z'),
      value?: string(name='Value', description='The byte hit ratio.', example='100.0'),
    }
  ](name='DataModule')
  }(name='ReqHitRateInterval', description='The request hit ratio at each time interval. The hit ratio is measured in percentage.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
  startTime?: string(name='StartTime', description='The beginning of the time range that was queried.', example='2017-12-21T08:00:00Z'),
}

model DescribeDomainReqHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainReqHitRateDataResponseBody(name='body'),
}

/**
  * - The maximum number of times that each user can call this operation per second is 100.
  * - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity supported by the Interval parameter, the maximum time period within which historical data is available, and the data delay vary with the time range to query, as described in the following table. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 day | 366 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainReqHitRateDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainReqHitRateDataResponse
 */
async function describeDomainReqHitRateDataWithOptions(request: DescribeDomainReqHitRateDataRequest, runtime: Util.RuntimeOptions): DescribeDomainReqHitRateDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainReqHitRateData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - The maximum number of times that each user can call this operation per second is 100.
  * - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity supported by the Interval parameter, the maximum time period within which historical data is available, and the data delay vary with the time range to query, as described in the following table. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 day | 366 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainReqHitRateDataRequest
  * @return DescribeDomainReqHitRateDataResponse
 */
async function describeDomainReqHitRateData(request: DescribeDomainReqHitRateDataRequest): DescribeDomainReqHitRateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainReqHitRateDataWithOptions(request, runtime);
}

model DescribeDomainSrcBpsDataRequest {
  domainName?: string(name='DomainName', description='You can specify multiple domain names and separate them with commas (,). You can specify at most 500 domain names in each call.

By default, this operation queries the bandwidth values during back-to-origin routing for all accelerated domain names that belong to your Alibaba Cloud account.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2019-12-10T20:30:00Z'),
  interval?: string(name='Interval', description='The time interval between the data entries. Unit: seconds.

The time granularity varies with the time range to query. Supported values: 300 (5 minutes), 3600 (1 hour), and 86400 (1 day). For more information, see **Usage notes**.', example='300'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The start of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2019-12-10T20:00:00Z'),
}

model DescribeDomainSrcBpsDataResponseBody = {
  dataInterval?: string(name='DataInterval', description='The time interval between the data entries returned. Unit: seconds.', example='300'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range that was queried.', example='2019-12-10T20:30:00Z'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
  srcBpsDataPerInterval?: {
    dataModule?: [ 
    {
      httpsValue?: string(name='HttpsValue', description='The bandwidth values of HTTPS requests.', example='10'),
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data returned.', example='2019-12-10T20:00:00Z'),
      value?: string(name='Value', description='The bandwidth value.', example='500'),
    }
  ](name='DataModule')
  }(name='SrcBpsDataPerInterval', description='The bandwidth value at each time interval. Unit: bit/s.'),
  startTime?: string(name='StartTime', description='The beginning of the time range that was queried.', example='2019-12-10T20:00:00Z'),
}

model DescribeDomainSrcBpsDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainSrcBpsDataResponseBody(name='body'),
}

/**
  * - The maximum number of times that each user can call this operation per second is 100.
  * - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity supported by the Interval parameter, the maximum time period within which historical data is available, and the data delay vary with the time range to query, as described in the following table. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 day | 366 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainSrcBpsDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainSrcBpsDataResponse
 */
async function describeDomainSrcBpsDataWithOptions(request: DescribeDomainSrcBpsDataRequest, runtime: Util.RuntimeOptions): DescribeDomainSrcBpsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainSrcBpsData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - The maximum number of times that each user can call this operation per second is 100.
  * - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity supported by the Interval parameter, the maximum time period within which historical data is available, and the data delay vary with the time range to query, as described in the following table. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 day | 366 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainSrcBpsDataRequest
  * @return DescribeDomainSrcBpsDataResponse
 */
async function describeDomainSrcBpsData(request: DescribeDomainSrcBpsDataRequest): DescribeDomainSrcBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainSrcBpsDataWithOptions(request, runtime);
}

model DescribeDomainSrcHttpCodeDataRequest {
  domainName?: string(name='DomainName', description='You can specify multiple domain names and separate them with commas (,). You can specify at most 500 domain names in each call.', example='example.com,example.org'),
  endTime?: string(name='EndTime', description='The end of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. The time must be in UTC.

>  The end time must be later than the start time.', example='2019-11-30T05:40:00Z'),
  interval?: string(name='Interval', description='The time interval between the data entries. Unit: seconds.

The time granularity varies with the time range to query. Supported values: 300 (5 minutes), 3600 (1 hour), and 86400 (1 day). For more information, see **Usage notes**.', example='300'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The start of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2019-11-30T05:33:00Z'),
}

model DescribeDomainSrcHttpCodeDataResponseBody = {
  dataInterval?: string(name='DataInterval', description='The time interval between the data entries returned. Unit: seconds.', example='300'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com,example.org'),
  endTime?: string(name='EndTime', description='The end of the time range that was queried.', example='2015-11-30T05:40:00Z'),
  httpCodeData?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data returned.', example='2015-11-30T05:30:00Z'),
      value?: {
        codeProportionData?: [ 
        {
          code?: string(name='Code', description='The HTTP status code.', example='200'),
          count?: string(name='Count', description='The total number of HTTP status codes returned.', example='2300'),
          proportion?: string(name='Proportion', description='The proportion of the HTTP status code.', example='67.1458998935037'),
        }
      ](name='CodeProportionData')
      }(name='Value', description='The proportions of HTTP status codes.'),
    }
  ](name='UsageData')
  }(name='HttpCodeData', description='The proportions of HTTP status codes at each time interval.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BC858082-736F-4A25-867B-E5B67C85ACF7'),
  startTime?: string(name='StartTime', description='The beginning of the time range that was queried.', example='2015-11-30T05:33:00Z'),
}

model DescribeDomainSrcHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainSrcHttpCodeDataResponseBody(name='body'),
}

/**
  * - The maximum number of times that each user can call this operation per second is 100.
  * - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity supported by the Interval parameter, the maximum time period within which historical data is available, and the data delay vary with the time range to query, as described in the following table. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 day | 366 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainSrcHttpCodeDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainSrcHttpCodeDataResponse
 */
async function describeDomainSrcHttpCodeDataWithOptions(request: DescribeDomainSrcHttpCodeDataRequest, runtime: Util.RuntimeOptions): DescribeDomainSrcHttpCodeDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainSrcHttpCodeData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - The maximum number of times that each user can call this operation per second is 100.
  * - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity supported by the Interval parameter, the maximum time period within which historical data is available, and the data delay vary with the time range to query, as described in the following table. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 day | 366 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainSrcHttpCodeDataRequest
  * @return DescribeDomainSrcHttpCodeDataResponse
 */
async function describeDomainSrcHttpCodeData(request: DescribeDomainSrcHttpCodeDataRequest): DescribeDomainSrcHttpCodeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainSrcHttpCodeDataWithOptions(request, runtime);
}

model DescribeDomainSrcQpsDataRequest {
  domainName?: string(name='DomainName', description='You can specify multiple domain names and separate them with commas (,). You can specify at most 500 domain names in each call.

By default, this operation queries the number of back-to-origin requests per second for all accelerated domain names that belong to your Alibaba Cloud account.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2019-11-30T05:40:00Z'),
  interval?: string(name='Interval', description='The time granularity of the data entries. Unit: seconds.

The time granularity varies with the time range to query. Supported values: 300 (5 minutes), 3600 (1 hour), and 86400 (1 day). For more information, see **Usage notes**.', example='300'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The start of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

If you do not set this parameter, data collected within the last 24 hours is queried.', example='2019-11-30T05:33:00Z'),
}

model DescribeDomainSrcQpsDataResponseBody = {
  dataInterval?: string(name='DataInterval', description='The time interval between the data entries returned. Unit: seconds.', example='300'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range that was queried.', example='2019-11-30T05:40:00Z'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7CBCD6AD-B016-42E5-AE0B-B3731DE8F755'),
  srcQpsDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data returned.', example='2015-12-10T21:00:00Z'),
      value?: string(name='Value', description='The number of back-to-origin requests per second.', example='0'),
    }
  ](name='DataModule')
  }(name='SrcQpsDataPerInterval', description='The back-to-origin bandwidth information at each interval.'),
  startTime?: string(name='StartTime', description='The beginning of the time range that was queried.', example='2019-11-30T05:33:00Z'),
}

model DescribeDomainSrcQpsDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainSrcQpsDataResponseBody(name='body'),
}

/**
  * - The maximum number of times that each user can call this operation per second is 100.
  * - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity supported by the Interval parameter, the maximum time period within which historical data is available, and the data delay vary with the time range to query, as described in the following table. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 day | 366 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainSrcQpsDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainSrcQpsDataResponse
 */
async function describeDomainSrcQpsDataWithOptions(request: DescribeDomainSrcQpsDataRequest, runtime: Util.RuntimeOptions): DescribeDomainSrcQpsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainSrcQpsData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - The maximum number of times that each user can call this operation per second is 100.
  * - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity supported by the Interval parameter, the maximum time period within which historical data is available, and the data delay vary with the time range to query, as described in the following table. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 day | 366 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainSrcQpsDataRequest
  * @return DescribeDomainSrcQpsDataResponse
 */
async function describeDomainSrcQpsData(request: DescribeDomainSrcQpsDataRequest): DescribeDomainSrcQpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainSrcQpsDataWithOptions(request, runtime);
}

model DescribeDomainSrcTopUrlVisitRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. Separate multiple accelerated domain names with commas (,).', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time. The difference between the end time and the start time cannot exceed seven days.', example='2018-10-03T20:00:00Z'),
  sortBy?: string(name='SortBy', description='The method that is used to sort the returned URLs.**** Valid values:

*   **traf**: by network traffic.
*   **pv**: by the number of page views. This is the default value.', example='pv'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  If you do not set the StartTime parameter, the data within the previous day is queried.', example='2018-10-03T16:00:00Z'),
}

model DescribeDomainSrcTopUrlVisitResponseBody = {
  allUrlList?: {
    urlList?: [ 
    {
      flow?: string(name='Flow', description='The amount of network traffic. Unit: bytes.', example='460486880'),
      flowProportion?: float(name='FlowProportion', description='The proportion of network traffic consumed to access the URL.', example='0.35'),
      urlDetail?: string(name='UrlDetail', description='The complete URL.', example='http://example.com/nn_live/nn_x64/a0.m3u8'),
      visitData?: string(name='VisitData', description='The number of visits to the URL.', example='161673'),
      visitProportion?: float(name='VisitProportion', description='The proportion of visits to the URL.', example='0.35'),
    }
  ](name='UrlList')
  }(name='AllUrlList', description='A list of frequently requested URLs.'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='64D28B53-5902-409B-94F6-FD46680144FE'),
  startTime?: string(name='StartTime', description='The beginning of the time range that was queried.', example='2018-10-03T16:00:00Z'),
  url200List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow', description='The amount of network traffic. Unit: bytes.', example='460486880'),
      flowProportion?: float(name='FlowProportion', description='The proportion of network traffic consumed to access the URL.', example='0.35'),
      urlDetail?: string(name='UrlDetail', description='The complete URL.', example='http://example.com/nn_live/nn_x64/a0.m3u8'),
      visitData?: string(name='VisitData', description='The number of visits to the URL.', example='161673'),
      visitProportion?: float(name='VisitProportion', description='The proportion of visits to the URL.', example='0.35'),
    }
  ](name='UrlList')
  }(name='Url200List', description='A list of URLs for which 2xx status codes were returned.'),
  url300List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow', description='The amount of network traffic. Unit: bytes.', example='460486880'),
      flowProportion?: float(name='FlowProportion', description='The proportion of network traffic consumed to access the URL.', example='0.35'),
      urlDetail?: string(name='UrlDetail', description='The complete URL.', example='http://example.com/nn_live/nn_x64/a0.m3u8'),
      visitData?: string(name='VisitData', description='The number of visits to the URL.', example='161673'),
      visitProportion?: float(name='VisitProportion', description='The proportion of visits to the URL.', example='0.35'),
    }
  ](name='UrlList')
  }(name='Url300List', description='A list of URLs for which 3xx status codes were returned.'),
  url400List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow', description='The amount of network traffic. Unit: bytes.', example='460486880'),
      flowProportion?: float(name='FlowProportion', description='The proportion of network traffic consumed to access the URL.', example='0.35'),
      urlDetail?: string(name='UrlDetail', description='The complete URL.', example='http://example.com/nn_live/nn_x64/a0.m3u8'),
      visitData?: string(name='VisitData', description='The number of visits to the URL.', example='161673'),
      visitProportion?: float(name='VisitProportion', description='The proportion of visits to the URL.', example='0.35'),
    }
  ](name='UrlList')
  }(name='Url400List', description='A list of URLs for which 4xx status codes were returned.'),
  url500List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow', description='The network traffic consumed to visit the URL, in bytes.', example='460486880'),
      flowProportion?: float(name='FlowProportion', description='The proportion of network traffic consumed to access the URL.', example='0.35'),
      urlDetail?: string(name='UrlDetail', description='The complete URL.', example='http://example.com/nn_live/nn_x64/a0.m3u8'),
      visitData?: string(name='VisitData', description='The number of visits to the URL.', example='161673'),
      visitProportion?: float(name='VisitProportion', description='The proportion of visits to the URL.', example='0.35'),
    }
  ](name='UrlList')
  }(name='Url500List', description='A list of URLs for which 5xx status codes were returned.'),
}

model DescribeDomainSrcTopUrlVisitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainSrcTopUrlVisitResponseBody(name='body'),
}

/**
  * The statistical analysis feature of Alibaba Cloud CDN is no longer available. The API operations related to the statistical analysis feature are no longer maintained. We recommend that you do not use the API operations because data may be missing or inaccurate. You can use the [operations report](https://www.alibabacloud.com/help/en/alibaba-cloud-cdn/latest/customize-an-operations-report-template-and-create-a-tracking-task) feature to for data analysis.  
  * > - The data is collected at an interval of 5 minutes.
  * - You can call this operation up to 10 times per second per account.
  *
  * @param request DescribeDomainSrcTopUrlVisitRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainSrcTopUrlVisitResponse
 */
async function describeDomainSrcTopUrlVisitWithOptions(request: DescribeDomainSrcTopUrlVisitRequest, runtime: Util.RuntimeOptions): DescribeDomainSrcTopUrlVisitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainSrcTopUrlVisit',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The statistical analysis feature of Alibaba Cloud CDN is no longer available. The API operations related to the statistical analysis feature are no longer maintained. We recommend that you do not use the API operations because data may be missing or inaccurate. You can use the [operations report](https://www.alibabacloud.com/help/en/alibaba-cloud-cdn/latest/customize-an-operations-report-template-and-create-a-tracking-task) feature to for data analysis.  
  * > - The data is collected at an interval of 5 minutes.
  * - You can call this operation up to 10 times per second per account.
  *
  * @param request DescribeDomainSrcTopUrlVisitRequest
  * @return DescribeDomainSrcTopUrlVisitResponse
 */
async function describeDomainSrcTopUrlVisit(request: DescribeDomainSrcTopUrlVisitRequest): DescribeDomainSrcTopUrlVisitResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainSrcTopUrlVisitWithOptions(request, runtime);
}

model DescribeDomainSrcTrafficDataRequest {
  domainName?: string(name='DomainName', description='You can specify multiple domain names and separate them with commas (,). You can specify at most 500 domain names in each call.

By default, this operation queries back-to-origin network traffic for all accelerated domain names that belong to your Alibaba Cloud account.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2015-12-10T21:00:00Z'),
  interval?: string(name='Interval', description='The time interval between the data entries. Unit: seconds.

The time granularity varies with the time range to query. Supported values: 300 (5 minutes), 3600 (1 hour), and 86400 (1 day). For more information, see **Usage notes**.', example='300'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The start of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2015-12-10T20:00:00Z'),
}

model DescribeDomainSrcTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval', description='The time interval between the data entries returned. Unit: seconds.', example='300'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range that was queried.', example='2015-12-10T21:00:00Z'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A666D44F-19D6-490E-97CF-1A64AB962C57'),
  srcTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      httpsValue?: string(name='HttpsValue', description='The amount of traffic generated by back-to-origin HTTPS requests.', example='0'),
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data returned.', example='2015-12-10T20:35:00Z'),
      value?: string(name='Value', description='The amount of network traffic.', example='0'),
    }
  ](name='DataModule')
  }(name='SrcTrafficDataPerInterval', description='The amount of back-to-origin network traffic at each time interval. Unit: bytes.'),
  startTime?: string(name='StartTime', description='The beginning of the time range that was queried.', example='2015-12-10T20:00:00Z'),
}

model DescribeDomainSrcTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainSrcTrafficDataResponseBody(name='body'),
}

/**
  * - The maximum number of times that each user can call this operation per second is 100.
  * - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity supported by the Interval parameter, the maximum time period within which historical data is available, and the data delay vary with the time range to query, as described in the following table. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 day | 366 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainSrcTrafficDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainSrcTrafficDataResponse
 */
async function describeDomainSrcTrafficDataWithOptions(request: DescribeDomainSrcTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeDomainSrcTrafficDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainSrcTrafficData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - The maximum number of times that each user can call this operation per second is 100.
  * - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity supported by the Interval parameter, the maximum time period within which historical data is available, and the data delay vary with the time range to query, as described in the following table. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 day | 366 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainSrcTrafficDataRequest
  * @return DescribeDomainSrcTrafficDataResponse
 */
async function describeDomainSrcTrafficData(request: DescribeDomainSrcTrafficDataRequest): DescribeDomainSrcTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainSrcTrafficDataWithOptions(request, runtime);
}

model DescribeDomainTopClientIpVisitRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. Separate multiple accelerated domain names with commas (,).

By default, this operation queries client IP addresses for all accelerated domain names.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

The end time must be later than the start time.', example='2019-10-01T16:00:00Z'),
  limit?: string(name='Limit', description='The maximum number of entries to return. Maximum value: 100.

Default value: 20. The default value 20 specifies that the top 20 data entries are returned.', example='20'),
  locationNameEn?: string(name='LocationNameEn', description='The name of the region. Separate multiple region names with commas (,).

You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query regions.', example='beijing'),
  sortBy?: string(name='SortBy', description='The method that is used to sort the client IP addresses. Valid values:

*   **traf**: by network traffic. This is the default value.
*   **acc**: by the number of requests.', example='traf'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2019-09-30T16:00:00Z'),
}

model DescribeDomainTopClientIpVisitResponseBody = {
  clientIpList?: [ 
    {
      acc?: long(name='Acc', description='The total number of requests.', example='256'),
      clientIp?: string(name='ClientIp', description='The client IP address returned. Only IPv4 addressed are supported.', example='1.1.xxx'),
      rank?: int32(name='Rank', description='The ranking of the client IP address returned.', example='2'),
      traffic?: long(name='Traffic', description='The total amount of network traffic consumed. Unit: bytes.', example='1024'),
    }
  ](name='ClientIpList', description='A list of client IP addresses.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='64D28B53-5902-409B-94F6-FD46680144FE'),
}

model DescribeDomainTopClientIpVisitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainTopClientIpVisitResponseBody(name='body'),
}

/**
  * The statistical analysis feature of Alibaba Cloud CDN is no longer available. The API operations related to the statistical analysis feature are no longer maintained. We recommend that you do not use the API operations because data may be missing or inaccurate. You can use the [operations report](https://www.alibabacloud.com/help/en/alibaba-cloud-cdn/latest/customize-an-operations-report-template-and-create-a-tracking-task) feature to for data analysis.  
  * > - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * - Data is collected every hour.
  * - You can call this operation up to 10 times per second per account.
  *
  * @param request DescribeDomainTopClientIpVisitRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainTopClientIpVisitResponse
 */
async function describeDomainTopClientIpVisitWithOptions(request: DescribeDomainTopClientIpVisitRequest, runtime: Util.RuntimeOptions): DescribeDomainTopClientIpVisitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainTopClientIpVisit',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The statistical analysis feature of Alibaba Cloud CDN is no longer available. The API operations related to the statistical analysis feature are no longer maintained. We recommend that you do not use the API operations because data may be missing or inaccurate. You can use the [operations report](https://www.alibabacloud.com/help/en/alibaba-cloud-cdn/latest/customize-an-operations-report-template-and-create-a-tracking-task) feature to for data analysis.  
  * > - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * - Data is collected every hour.
  * - You can call this operation up to 10 times per second per account.
  *
  * @param request DescribeDomainTopClientIpVisitRequest
  * @return DescribeDomainTopClientIpVisitResponse
 */
async function describeDomainTopClientIpVisit(request: DescribeDomainTopClientIpVisitRequest): DescribeDomainTopClientIpVisitResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainTopClientIpVisitWithOptions(request, runtime);
}

model DescribeDomainTopReferVisitRequest {
  domainName?: string(name='DomainName', description='The accelerated domain names. Separate multiple accelerated domain names with commas (,).', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

The end time must be later than the start time.', example='2019-12-22T12:00:00Z'),
  sortBy?: string(name='SortBy', description='The sorting method. Valid values:

*   **traf**: by network traffic.
*   **pv**: by the number of page views. This is the default value.', example='pv'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2019-12-21T12:00:00Z'),
}

model DescribeDomainTopReferVisitResponseBody = {
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='95994621-8382-464B-8762-C708E73568D1'),
  startTime?: string(name='StartTime', description='The beginning of the time range that was queried.', example='2019-12-21T12:00:00Z'),
  topReferList?: {
    referList?: [ 
    {
      flow?: string(name='Flow', description='The amount of network traffic. Unit: bytes.', example='200'),
      flowProportion?: float(name='FlowProportion', description='The proportion of the amount of network traffic consumed for visiting the web page.', example='0.5'),
      referDetail?: string(name='ReferDetail', description='The URLs to the most frequently requested web pages.', example='learn.aliyundoc.com'),
      visitData?: string(name='VisitData', description='The number of visits to the web page.', example='3'),
      visitProportion?: float(name='VisitProportion', description='The proportion of visits to the web page.', example='0.5'),
    }
  ](name='ReferList')
  }(name='TopReferList', description='The most frequently requested web pages.'),
}

model DescribeDomainTopReferVisitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainTopReferVisitResponseBody(name='body'),
}

/**
  * The statistical analysis feature of Alibaba Cloud CDN is no longer available. The API operations related to the statistical analysis feature are no longer maintained. We recommend that you do not use the API operations because data may be missing or inaccurate. You can use the [operations report](https://www.alibabacloud.com/help/en/alibaba-cloud-cdn/latest/customize-an-operations-report-template-and-create-a-tracking-task) feature to analyze data.  
  * > - If you do not set StartTime or EndTime, data within the last 24 hours is queried. If you set both StartTime and EndTime, data within the specified time range is queried.
  * - Data is collected at an interval of five minutes.
  * - You can call this operation up to 10 times per second per account.
  *
  * @param request DescribeDomainTopReferVisitRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainTopReferVisitResponse
 */
async function describeDomainTopReferVisitWithOptions(request: DescribeDomainTopReferVisitRequest, runtime: Util.RuntimeOptions): DescribeDomainTopReferVisitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainTopReferVisit',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The statistical analysis feature of Alibaba Cloud CDN is no longer available. The API operations related to the statistical analysis feature are no longer maintained. We recommend that you do not use the API operations because data may be missing or inaccurate. You can use the [operations report](https://www.alibabacloud.com/help/en/alibaba-cloud-cdn/latest/customize-an-operations-report-template-and-create-a-tracking-task) feature to analyze data.  
  * > - If you do not set StartTime or EndTime, data within the last 24 hours is queried. If you set both StartTime and EndTime, data within the specified time range is queried.
  * - Data is collected at an interval of five minutes.
  * - You can call this operation up to 10 times per second per account.
  *
  * @param request DescribeDomainTopReferVisitRequest
  * @return DescribeDomainTopReferVisitResponse
 */
async function describeDomainTopReferVisit(request: DescribeDomainTopReferVisitRequest): DescribeDomainTopReferVisitResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainTopReferVisitWithOptions(request, runtime);
}

model DescribeDomainTopUrlVisitRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name for which you want to query data. If you do not set this parameter, frequently requested URLs of all accelerated domain names of your Alibaba Cloud account are queried.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.

>  The end time must be later than the start time. The difference between the end time and the start time cannot exceed seven days.', example='2019-10-04T16:00:00Z'),
  ownerId?: long(name='OwnerId'),
  sortBy?: string(name='SortBy', description='The method that is used to sort the returned URLs.**** Valid values:

*   **traf**: network traffic
*   **pv**: by the number of page views. This is the default value.', example='pv'),
  startTime?: string(name='StartTime', description='The start of the time range to query. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.

If you want to query data within a specific day, we recommend that you set the value in the yyyy-MM-ddT16:00:00Z format.', example='2019-10-04T00:00:00Z'),
}

model DescribeDomainTopUrlVisitResponseBody = {
  allUrlList?: {
    urlList?: [ 
    {
      flow?: string(name='Flow', description='The amount of network traffic. (Unit: bytes)', example='460486880'),
      flowProportion?: float(name='FlowProportion', description='The proportion of the amount of network traffic consumed for visiting the web page.', example='0.35'),
      urlDetail?: string(name='UrlDetail', description='The complete URL.', example='http://example.com/nn_live/nn_x64/a0.m3u8'),
      visitData?: string(name='VisitData', description='The number of visits to the specified path.', example='161673'),
      visitProportion?: float(name='VisitProportion', description='The proportion of visits to the web page.', example='0.35'),
    }
  ](name='UrlList')
  }(name='AllUrlList', description='A list of frequently requested URLs.'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='64D28B53-5902-409B-94F6-FD46680144FE'),
  startTime?: string(name='StartTime', description='The start of the time range that was queried.', example='2019-10-03T16:00:00Z'),
  url200List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow', description='The amount of network traffic. (Unit: bytes)', example='460486880'),
      flowProportion?: float(name='FlowProportion', description='The proportion of the amount of network traffic consumed for visiting the web page.', example='0.35'),
      urlDetail?: string(name='UrlDetail', description='The complete URL.', example='http://example.com/nn_live/nn_x64/aWQ9SE5KU0bGxfcGNfbGl2ZQ,,/HNJSMPP360.m3u8'),
      visitData?: string(name='VisitData', description='The number of visits to the specified path.', example='161673'),
      visitProportion?: float(name='VisitProportion', description='The proportion of visits to the web page.', example='0.35'),
    }
  ](name='UrlList')
  }(name='Url200List', description='A list of URLs for which 2xx status codes were returned.'),
  url300List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow', description='The amount of network traffic. (Unit: bytes)', example='460486880'),
      flowProportion?: float(name='FlowProportion', description='The proportion of the amount of network traffic consumed for visiting the web page.', example='0.35'),
      urlDetail?: string(name='UrlDetail', description='The complete URL.', example='http://example.com/nn_live/nn_x64/a0.m3u8'),
      visitData?: string(name='VisitData', description='The number of visits to the URL.', example='161673'),
      visitProportion?: float(name='VisitProportion', description='The proportion of visits to the web page.', example='0.35'),
    }
  ](name='UrlList')
  }(name='Url300List', description='A list of URLs for which 3xx status codes were returned.'),
  url400List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow', description='The amount of network traffic. (Unit: bytes)', example='460486880'),
      flowProportion?: float(name='FlowProportion', description='The proportion of the amount of network traffic consumed for visiting the web page.', example='0.35'),
      urlDetail?: string(name='UrlDetail', description='The complete URL.', example='http://example.com/nn_live/nn_x64/aWQ9SE5KU01QUhbGxfcGNfbGl2ZQ,,/HNJSMPP360.m3u8'),
      visitData?: string(name='VisitData', description='The number of visits to the URL.', example='1884'),
      visitProportion?: float(name='VisitProportion', description='The proportion of visits to the web page.', example='0.35'),
    }
  ](name='UrlList')
  }(name='Url400List', description='A list of URLs for which 4xx status codes were returned.'),
  url500List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow', description='The amount of network traffic. (Unit: bytes)', example='460486880'),
      flowProportion?: float(name='FlowProportion', description='The proportion of the amount of network traffic consumed for visiting the web page.', example='0.35'),
      urlDetail?: string(name='UrlDetail', description='The complete URL.', example='http://example.com/nn_live/nn_x64/aWQ9SE5KU0GNfbGl2ZQ,,/HNJSMPP360.m3u8'),
      visitData?: string(name='VisitData', description='The number of visits to the URL.', example='161673'),
      visitProportion?: float(name='VisitProportion', description='The proportion of visits to the web page.', example='0.35'),
    }
  ](name='UrlList')
  }(name='Url500List', description='A list of URLs for which 5xx status codes were returned.'),
}

model DescribeDomainTopUrlVisitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainTopUrlVisitResponseBody(name='body'),
}

/**
  * > - If you do not set StartTime or EndTime, data within the last 24 hours is queried. If you set both StartTime and EndTime, data within the specified time range is queried.
  * - You can query data collected within the last 90 days.
  * - You can specify only one domain name in each call.
  * - You can call this operation up to 10 times per second per account.
  *
  * @param request DescribeDomainTopUrlVisitRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainTopUrlVisitResponse
 */
async function describeDomainTopUrlVisitWithOptions(request: DescribeDomainTopUrlVisitRequest, runtime: Util.RuntimeOptions): DescribeDomainTopUrlVisitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainTopUrlVisit',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > - If you do not set StartTime or EndTime, data within the last 24 hours is queried. If you set both StartTime and EndTime, data within the specified time range is queried.
  * - You can query data collected within the last 90 days.
  * - You can specify only one domain name in each call.
  * - You can call this operation up to 10 times per second per account.
  *
  * @param request DescribeDomainTopUrlVisitRequest
  * @return DescribeDomainTopUrlVisitResponse
 */
async function describeDomainTopUrlVisit(request: DescribeDomainTopUrlVisitRequest): DescribeDomainTopUrlVisitResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainTopUrlVisitWithOptions(request, runtime);
}

model DescribeDomainTrafficDataRequest {
  domainName?: string(name='DomainName', description='You can specify multiple domain names and separate them with commas (,). You can specify at most 500 domain names in each call.

By default, this operation queries the monitoring data of network traffic for all accelerated domain names that belong to your Alibaba Cloud account.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2015-12-10T21:00:00Z'),
  interval?: string(name='Interval', description='The time interval between the data entries. Unit: seconds.

The time granularity varies with the time range to query. Supported values: 300 (5 minutes), 3600 (1 hour), and 86400 (1 day). For more information, see **Usage notes**.', example='300'),
  ispNameEn?: string(name='IspNameEn', description='The name of the Internet service provider (ISP) for your Alibaba Cloud CDN service. You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query ISP names.

If you do not specify an ISP, monitoring data of all ISPs is queried.', example='unicom'),
  locationNameEn?: string(name='LocationNameEn', description='The name of the region. You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query the most recent region list.

If you do not specify a region, monitoring data in all regions is queried.', example='beijing'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The start of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2015-12-10T20:00:00Z'),
}

model DescribeDomainTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval', description='The time interval between the data entries returned. Unit: seconds.', example='300'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range that was queried.', example='2015-12-10T21:00:00Z'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B955107D-E658-4E77-B913-E0AC3D31693E'),
  startTime?: string(name='StartTime', description='The beginning of the time range that was queried.', example='2015-12-10T20:00:00Z'),
  trafficDataPerInterval?: {
    dataModule?: [ 
    {
      domesticValue?: string(name='DomesticValue', description='The amount of network traffic in the Chinese mainland.', example='0'),
      httpsDomesticValue?: string(name='HttpsDomesticValue', description='The amount of HTTPS network traffic on L1 edge nodes in the Chinese mainland.', example='0'),
      httpsOverseasValue?: string(name='HttpsOverseasValue', description='The amount of HTTPS network traffic on L1 edge nodes outside the Chinese mainland.', example='0'),
      httpsValue?: string(name='HttpsValue', description='The total amount of HTTPS network traffic on L1 edge nodes.', example='423304182'),
      overseasValue?: string(name='OverseasValue', description='The amount of network traffic outside the Chinese mainland.', example='0'),
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data returned.', example='2015-12-10T20:00:00Z'),
      value?: string(name='Value', description='The total amount of network traffic.', example='423304182'),
    }
  ](name='DataModule')
  }(name='TrafficDataPerInterval', description='The amount of network traffic at each time interval. Unit: bytes.'),
}

model DescribeDomainTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainTrafficDataResponseBody(name='body'),
}

/**
  * - The maximum number of times that each user can call this operation per second is 100.
  * - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity supported by the Interval parameter, the maximum time period within which historical data is available, and the data delay vary with the time range to query, as described in the following table. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 day | 366 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainTrafficDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainTrafficDataResponse
 */
async function describeDomainTrafficDataWithOptions(request: DescribeDomainTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeDomainTrafficDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainTrafficData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - The maximum number of times that each user can call this operation per second is 100.
  * - If you do not set StartTime or EndTime, data collected within the last 24 hours is queried. If you set both StartTime and EndTime, data collected within the specified time range is queried.
  * **Time granularity**
  * The time granularity supported by the Interval parameter, the maximum time period within which historical data is available, and the data delay vary with the time range to query, as described in the following table. 
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 day | 366 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainTrafficDataRequest
  * @return DescribeDomainTrafficDataResponse
 */
async function describeDomainTrafficData(request: DescribeDomainTrafficDataRequest): DescribeDomainTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainTrafficDataWithOptions(request, runtime);
}

model DescribeDomainUsageDataRequest {
  area?: string(name='Area', description='The ID of the billable region. Valid values:

*   **CN** (default): the Chinese mainland
*   **OverSeas**: outside the Chinese mainland
*   **AP1**: Asia Pacific 1
*   **AP2**: Asia Pacific 2
*   **AP3**: Asia Pacific 3
*   **NA**: North America
*   **SA**: South America
*   **EU**: Europe
*   **MEAA**: Middle East and Africa
*   **all**: all billable regions

>  For more information about billable regions, see [Billable regions](~~142221~~).', example='CN'),
  dataProtocol?: string(name='DataProtocol', description='The protocol by which the data is queried. Valid values:

*   **http**: HTTP
*   **https**: HTTPS
*   **quic**: QUIC
*   **all** (default): HTTP, HTTPS, and QUIC', example='all'),
  domainName?: string(name='DomainName', description='The accelerated domain name. You can query the resource usage data for a maximum of 100 domain names in each call. Separate domain names with commas (,).

>  If you do not set this parameter, the usage data of all accelerated domain names within your Alibaba Cloud account is returned.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time. The maximum time range that can be queried is 31 days.', example='2015-12-10T22:00:00Z'),
  field?: string(name='Field', description='The type of data to be queried. Valid values:

*   **bps**: bandwidth
*   **traf**: network traffic
*   **acc**: requests

>  **acc** does not support the **Area** parameter.', example='bps'),
  interval?: string(name='Interval', description='The time interval between the data entries. Unit: seconds.

The time granularity varies with the time range to query. Supported values: 300 (5 minutes), 3600 (1 hour), and 86400 (1 day). For more information, see **Usage notes**.', example='300'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The data is collected every 5 minutes.', example='2015-12-10T20:00:00Z'),
  type?: string(name='Type', description='The type of content based on which the data is queried. Valid values:

*   **static**: static content
*   **dynamic**: dynamic content
*   **all** (default): both static and dynamic content', example='static'),
}

model DescribeDomainUsageDataResponseBody = {
  area?: string(name='Area', description='The billable region where the usage information was collected.', example='CN'),
  dataInterval?: string(name='DataInterval', description='The time interval between the data entries. Unit: seconds.', example='300'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range that was queried.', example='2015-12-10T22:00:00Z'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B955107D-E658-4E77-B913-E0AC3D31693E'),
  startTime?: string(name='StartTime', description='The beginning of the time range that was queried.', example='2015-12-10T20:00:00Z'),
  type?: string(name='Type', description='The type of content based on which the usage information was collected.', example='static'),
  usageDataPerInterval?: {
    dataModule?: [ 
    {
      peakTime?: string(name='PeakTime', description='If the **Field** parameter in the request is set to **bps**, this parameter returns the time of the peak bandwidth value. Otherwise, this parameter returns the same value as the **TimeStamp** parameter.', example='2015-12-10T21:30:00Z'),
      specialValue?: string(name='SpecialValue', description='The data usage in a specific scenario.

>  Indicates the data usage in a specific scenario. If no special billable item is specified, ignore this parameter.', example='423304182'),
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data returned.

>  The **TimeStamp** parameter may return multiple values.', example='2015-12-10T21:30:00Z'),
      value?: string(name='Value', description='The usage.

>  Usage data includes network traffic (measured in bytes), bandwidth values (measured in bits/s), and the number of requests.', example='423304182'),
    }
  ](name='DataModule')
  }(name='UsageDataPerInterval', description='The network traffic that was collected at each interval.'),
}

model DescribeDomainUsageDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainUsageDataResponseBody(name='body'),
}

/**
  * The maximum number of times that each user can call this operation per second is 10. 
  *  
  * The time granularity supported by the Interval parameter, the maximum time period within which historical data is available, and the data delay vary with the time range to query, as described in the following table. 
  *  
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 day | 90 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainUsageDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainUsageDataResponse
 */
async function describeDomainUsageDataWithOptions(request: DescribeDomainUsageDataRequest, runtime: Util.RuntimeOptions): DescribeDomainUsageDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.area)) {
    query['Area'] = request.area;
  }
  if (!Util.isUnset(request.dataProtocol)) {
    query['DataProtocol'] = request.dataProtocol;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.field)) {
    query['Field'] = request.field;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainUsageData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The maximum number of times that each user can call this operation per second is 10. 
  *  
  * The time granularity supported by the Interval parameter, the maximum time period within which historical data is available, and the data delay vary with the time range to query, as described in the following table. 
  *  
  * | Time granularity | Time range to query | Historical data available | Data delay |
  * | ---------------- | ------------------- | ------------------------- | ---------- |
  * | 5 minutes | 3 days | 93 days | 15 minutes |
  * | 1 hour | 31 days | 186 days | 4 hours |
  * | 1 day | 90 days | 366 days | 04:00 on the next day |
  *
  * @param request DescribeDomainUsageDataRequest
  * @return DescribeDomainUsageDataResponse
 */
async function describeDomainUsageData(request: DescribeDomainUsageDataRequest): DescribeDomainUsageDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainUsageDataWithOptions(request, runtime);
}

model DescribeDomainUvDataRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

The end time must be later than the start time.', example='2019-11-29T04:00:00Z'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2019-11-29T00:00:00Z'),
}

model DescribeDomainUvDataResponseBody = {
  dataInterval?: string(name='DataInterval', description='The time interval between the data entries. Unit: seconds.', example='3600'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range that was queried.', example='2019-11-29T04:00:00Z'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E9D3257A-1B7C-414C-90C1-8D07AC47BCAC'),
  startTime?: string(name='StartTime', description='The beginning of the time range that was queried.', example='2019-11-29T00:00:00Z'),
  uvDataInterval?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp', description='The timestamp of the returned data.', example='2019-11-29T00:00:00Z'),
      value?: string(name='Value', description='The number of UVs.', example='318'),
    }
  ](name='UsageData')
  }(name='UvDataInterval', description='The number of UVs at each interval.'),
}

model DescribeDomainUvDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainUvDataResponseBody(name='body'),
}

/**
  * The statistical analysis feature of Alibaba Cloud CDN is no longer available. The API operations related to the statistical analysis feature are no longer maintained. We recommend that you do not use the API operations because data may be missing or inaccurate. You can use the [operations report](https://www.alibabacloud.com/help/en/alibaba-cloud-cdn/latest/customize-an-operations-report-template-and-create-a-tracking-task) feature to for data analysis.  
  * > - If you do not set StartTime or EndTime, monitoring data within the last 24 hours is queried. If you set both StartTime and EndTime, monitoring data within the specified time range is queried.
  * - You can specify only one accelerated domain name or all accelerated domain names under your Alibaba Cloud account.
  * - You can call this operation up to 100 times per second per account.
  *
  * @param request DescribeDomainUvDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainUvDataResponse
 */
async function describeDomainUvDataWithOptions(request: DescribeDomainUvDataRequest, runtime: Util.RuntimeOptions): DescribeDomainUvDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainUvData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The statistical analysis feature of Alibaba Cloud CDN is no longer available. The API operations related to the statistical analysis feature are no longer maintained. We recommend that you do not use the API operations because data may be missing or inaccurate. You can use the [operations report](https://www.alibabacloud.com/help/en/alibaba-cloud-cdn/latest/customize-an-operations-report-template-and-create-a-tracking-task) feature to for data analysis.  
  * > - If you do not set StartTime or EndTime, monitoring data within the last 24 hours is queried. If you set both StartTime and EndTime, monitoring data within the specified time range is queried.
  * - You can specify only one accelerated domain name or all accelerated domain names under your Alibaba Cloud account.
  * - You can call this operation up to 100 times per second per account.
  *
  * @param request DescribeDomainUvDataRequest
  * @return DescribeDomainUvDataResponse
 */
async function describeDomainUvData(request: DescribeDomainUvDataRequest): DescribeDomainUvDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainUvDataWithOptions(request, runtime);
}

model DescribeDomainsBySourceRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  sources?: string(name='Sources', description='The origin servers. Separate origin servers with commas (,). Fuzzy match is not supported.', example='example.com'),
}

model DescribeDomainsBySourceResponseBody = {
  domainsList?: {
    domainsData?: [ 
    {
      domainInfos?: {
        domainInfo?: [ 
        {
          cdnType?: string(name='CdnType', description='The workload type of the accelerated domain name. Valid values:

*   **web**: images and small files.
*   **download**: large files.
*   **video**: on-demand video and audio streaming.', example='web'),
          createTime?: string(name='CreateTime', description='The time when the domain name was added to Alibaba Cloud CDN.', example='2016-07-12T11:53:19+08:00'),
          domainCname?: string(name='DomainCname', description='The CNAME assigned to the domain name.', example='***.alikunlun.com'),
          domainName?: string(name='DomainName', description='The domain name.', example='example.org'),
          status?: string(name='Status', description='The status of the accelerated domain name. Valid values:

*   **applying**: The domain name is under review.
*   **configure_failed**: The domain name failed the review.
*   **configuring**: The domain name is being configured.
*   **online**: The domain name is working as expected.
*   **stopping**: The domain name is being stopped.
*   **offline**: The domain name is disabled.
*   **disabling**: The domain name is being disabled.', example='online'),
          updateTime?: string(name='UpdateTime', description='The time when the configuration was updated.', example='2017-03-31T04:49:00+08:00'),
        }
      ](name='domainInfo')
      }(name='DomainInfos', description='The detailed information about the domain name. The data is indicated by the domainInfo parameter. Data type: array.'),
      domains?: {
        domainNames?: [ string ](name='domainNames')
      }(name='Domains', description='The domain names that correspond to each origin server. The domain name is indicated by the domainNames parameter.'),
      source?: string(name='Source', description='An origin server.', example='example.com'),
    }
  ](name='DomainsData')
  }(name='DomainsList', description='The domain names corresponding to each origin server. The data is indicated by the DomainsData parameter. Data type: array.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B0F074E5-A1AC-4B32-8EA2-6F450410D1E0'),
  sources?: string(name='Sources', description='The origin servers.', example='example.com,aliyundoc.com'),
}

model DescribeDomainsBySourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainsBySourceResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeDomainsBySourceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainsBySourceResponse
 */
async function describeDomainsBySourceWithOptions(request: DescribeDomainsBySourceRequest, runtime: Util.RuntimeOptions): DescribeDomainsBySourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sources)) {
    query['Sources'] = request.sources;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainsBySource',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeDomainsBySourceRequest
  * @return DescribeDomainsBySourceResponse
 */
async function describeDomainsBySource(request: DescribeDomainsBySourceRequest): DescribeDomainsBySourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainsBySourceWithOptions(request, runtime);
}

model DescribeDomainsUsageByDayRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name.

If you do not specify an accelerated domain name, the monitoring data of all accelerated domain names that belong to your account is queried.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.

>  The end time must be later than the start time.', example='2019-12-23T09:00:00Z'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The start of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.', example='2019-12-22T08:00:00Z'),
}

model DescribeDomainsUsageByDayResponseBody = {
  dataInterval?: string(name='DataInterval', description='The time interval between the data entries. Unit: seconds.', example='86400'),
  domainName?: string(name='DomainName', description='The information about the accelerated domain name.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range that was queried.', example='2019-12-23T09:00:00Z'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C88EF8ED-72F0-45EA-9E86-95114E224FC5'),
  startTime?: string(name='StartTime', description='The start of the time range that was queried.', example='2019-12-22T08:00:00Z'),
  usageByDays?: {
    usageByDay?: [ 
    {
      bytesHitRate?: string(name='BytesHitRate', description='The cache hit ratio that is calculated based on bytes. The cache hit ratio is measured in percentage.', example='97.46250599529726'),
      maxBps?: string(name='MaxBps', description='The peak bandwidth value. Unit: bit/s.', example='306747.76'),
      maxBpsTime?: string(name='MaxBpsTime', description='The time when the bandwidth reached the peak value.', example='2019-12-23 10:55:00'),
      maxSrcBps?: string(name='MaxSrcBps', description='The peak bandwidth value during back-to-origin routing. Unit: bit/s.', example='72584.072'),
      maxSrcBpsTime?: string(name='MaxSrcBpsTime', description='The time when the bandwidth during back-to-origin routing reached the peak value.', example='2019-12-23 11:45:00'),
      qps?: string(name='Qps', description='The number of queries per second (QPS).', example='7.466354166666667'),
      requestHitRate?: string(name='RequestHitRate', description='The cache hit ratio that is calculated based on requests. The cache hit ratio is measured in percentage.', example='70.24770071912111'),
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data returned.', example='2019-12-22'),
      totalAccess?: string(name='TotalAccess', description='The total amount of requests.', example='645093'),
      totalTraffic?: string(name='TotalTraffic', description='The total amount of network traffic. Unit: bytes.', example='564300099309'),
    }
  ](name='UsageByDay')
  }(name='UsageByDays', description='The monitoring data collected at each time interval.'),
  usageTotal?: {
    bytesHitRate?: string(name='BytesHitRate', description='The cache hit ratio that is calculated based on bytes. The cache hit ratio is measured in percentage.', example='97.03110726801242'),
    maxBps?: string(name='MaxBps', description='The peak bandwidth value. Unit: bit/s.', example='1.0747912780000001E8'),
    maxBpsTime?: string(name='MaxBpsTime', description='The time when the bandwidth reached the peak value.', example='2019-12-23 10:55:00'),
    maxSrcBps?: string(name='MaxSrcBps', description='The peak bandwidth value during back-to-origin routing. Unit: bit/s.', example='72584.072'),
    maxSrcBpsTime?: string(name='MaxSrcBpsTime', description='The time when the bandwidth during back-to-origin routing reached the peak value.', example='2019-12-23 11:45:00'),
    requestHitRate?: string(name='RequestHitRate', description='The cache hit ratio that is calculated based on requests. The cache hit ratio is measured in percentage.', example='69.92610837438424'),
    totalAccess?: string(name='TotalAccess', description='The total number of requests.', example='1319500'),
    totalTraffic?: string(name='TotalTraffic', description='The total amount of network traffic. Unit: bytes.', example='1117711832100'),
  }(name='UsageTotal', description='The summarized monitoring data.'),
}

model DescribeDomainsUsageByDayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainsUsageByDayResponseBody(name='body'),
}

/**
  * > - If you do not set StartTime or EndTime, data within the last 24 hours is queried. If you set both StartTime and EndTime, data within the specified time range is queried.
  * > - You can query the monitoring data of a specific accelerated domain name or all accelerated domain names that belong to your Alibaba Cloud account.
  *
  * @param request DescribeDomainsUsageByDayRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainsUsageByDayResponse
 */
async function describeDomainsUsageByDayWithOptions(request: DescribeDomainsUsageByDayRequest, runtime: Util.RuntimeOptions): DescribeDomainsUsageByDayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainsUsageByDay',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > - If you do not set StartTime or EndTime, data within the last 24 hours is queried. If you set both StartTime and EndTime, data within the specified time range is queried.
  * > - You can query the monitoring data of a specific accelerated domain name or all accelerated domain names that belong to your Alibaba Cloud account.
  *
  * @param request DescribeDomainsUsageByDayRequest
  * @return DescribeDomainsUsageByDayResponse
 */
async function describeDomainsUsageByDay(request: DescribeDomainsUsageByDayRequest): DescribeDomainsUsageByDayResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainsUsageByDayWithOptions(request, runtime);
}

model DescribeEsExceptionDataRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.

>  The end time must be later than the start time.', example='2021-02-18T20:00:00Z'),
  ruleId?: string(name='RuleId', description='The ID of the script that you want to query. You can call the [DescribeCdnDomainConfigs](~~90924~~) operation to query script IDs.', example='212896**'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.', example='2021-02-17T20:00:00Z'),
}

model DescribeEsExceptionDataResponseBody = {
  contents?: [ 
    {
      columns?: [ string ](name='Columns', description='The column names of the chart that shows the errors of the script and the time of each data entry.'),
      name?: string(name='Name', description='The name of the chart that shows the errors of the script.', example='401'),
      points?: [ 
        {
          points?: [ string ](name='Points'),
        }
      ](name='Points', description='The value of each time and the column of each data entry.'),
    }
  ](name='Contents', description='The content of the script.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='99D61AB3-6164-4CF2-A0DE-129C9B07618B'),
}

model DescribeEsExceptionDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEsExceptionDataResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeEsExceptionDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeEsExceptionDataResponse
 */
async function describeEsExceptionDataWithOptions(request: DescribeEsExceptionDataRequest, runtime: Util.RuntimeOptions): DescribeEsExceptionDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEsExceptionData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeEsExceptionDataRequest
  * @return DescribeEsExceptionDataResponse
 */
async function describeEsExceptionData(request: DescribeEsExceptionDataRequest): DescribeEsExceptionDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEsExceptionDataWithOptions(request, runtime);
}

model DescribeEsExecuteDataRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.

>  The end time must be later than the start time.', example='2021-02-18T20:00:00Z'),
  ruleId?: string(name='RuleId', description='The ID of the script that you want to query. You can call the [DescribeCdnDomainConfigs](~~90924~~) operation to query script IDs.', example='212896**'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.', example='2021-02-17T20:00:00Z'),
}

model DescribeEsExecuteDataResponseBody = {
  contents?: [ 
    {
      columns?: [ string ](name='Columns', description='The column names of the chart that shows the status of the script and the time of each data entry.'),
      name?: string(name='Name', description='The name of the chart that shows the status of the script.', example='Exception'),
      points?: [ string ](name='Points', description='The value of each time and the column of each data entry.'),
    }
  ](name='Contents', description='The content of the script.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='99D61AB3-6164-4CF2-A0DE-129C9B07618B'),
}

model DescribeEsExecuteDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEsExecuteDataResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeEsExecuteDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeEsExecuteDataResponse
 */
async function describeEsExecuteDataWithOptions(request: DescribeEsExecuteDataRequest, runtime: Util.RuntimeOptions): DescribeEsExecuteDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEsExecuteData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeEsExecuteDataRequest
  * @return DescribeEsExecuteDataResponse
 */
async function describeEsExecuteData(request: DescribeEsExecuteDataRequest): DescribeEsExecuteDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEsExecuteDataWithOptions(request, runtime);
}

model DescribeFCTriggerRequest {
  triggerARN?: string(name='TriggerARN', description='The trigger that corresponds to the Function Compute service.', example='acs:cdn:{RegionID}:{AccountID}:{Filter}'),
}

model DescribeFCTriggerResponseBody = {
  FCTrigger?: {
    eventMetaName?: string(name='EventMetaName', description='The name of the event.', example='LogFileCreated'),
    eventMetaVersion?: string(name='EventMetaVersion', description='The version of the event.', example='1.0.0'),
    notes?: string(name='Notes', description='The remarks.', example='test'),
    roleARN?: string(name='RoleARN', description='The assigned Resource Access Management (RAM) role.', example='acs:ram:: 1234567890:role/aliyuncdneventnotificationrole'),
    sourceArn?: string(name='SourceArn', description='The resources and filters for event listening.', example='acs:cdn:*:1234567890:domain/example.com'),
    triggerARN?: string(name='TriggerARN', description='The trigger that corresponds to the Function Compute service.', example='acs:fc:cn-beijing: 1234567890:services/FCTestService/functions/printEvent/triggers/testtrigger'),
  }(name='FCTrigger', description='The Function Compute trigger that you want to query.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC046C5D-8CB4-4B6B-B7F8-B335E51EF90E'),
}

model DescribeFCTriggerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFCTriggerResponseBody(name='body'),
}

async function describeFCTriggerWithOptions(request: DescribeFCTriggerRequest, runtime: Util.RuntimeOptions): DescribeFCTriggerResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFCTrigger',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFCTrigger(request: DescribeFCTriggerRequest): DescribeFCTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFCTriggerWithOptions(request, runtime);
}

model DescribeIllegalUrlExportTaskRequest {
  taskId?: string(name='TaskId', description='The ID of the task. You can call the [CreateIllegalUrlExportTask](~~156492~~) operation to query task IDs.', example='tu_4b37ea97_a7fa_4d36_b363_061c1f****'),
}

model DescribeIllegalUrlExportTaskResponseBody = {
  downloadUrl?: string(name='DownloadUrl', description='The URL where you can download the file that contains invalid URLs. This parameter is valid only if the export task is successful.', example='example.com/example_task.csv'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='64D28B53-5902-409B-94F6-FD46680144FE'),
  status?: string(name='Status', description='The status of the export task. A value of **complete** indicates that the task is successful.', example='complete'),
}

model DescribeIllegalUrlExportTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIllegalUrlExportTaskResponseBody(name='body'),
}

/**
  * > *   Invalid URLs are exported to a CSV file.
  * *   The maximum number of times that each user can call this operation per second is 1.
  *
  * @param request DescribeIllegalUrlExportTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeIllegalUrlExportTaskResponse
 */
async function describeIllegalUrlExportTaskWithOptions(request: DescribeIllegalUrlExportTaskRequest, runtime: Util.RuntimeOptions): DescribeIllegalUrlExportTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeIllegalUrlExportTask',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > *   Invalid URLs are exported to a CSV file.
  * *   The maximum number of times that each user can call this operation per second is 1.
  *
  * @param request DescribeIllegalUrlExportTaskRequest
  * @return DescribeIllegalUrlExportTaskResponse
 */
async function describeIllegalUrlExportTask(request: DescribeIllegalUrlExportTaskRequest): DescribeIllegalUrlExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIllegalUrlExportTaskWithOptions(request, runtime);
}

model DescribeIpInfoRequest {
  IP?: string(name='IP', description='The IP address that you want to query. You can specify only one IP address in each request.', example='192.168.0.1'),
}

model DescribeIpInfoResponseBody = {
  cdnIp?: string(name='CdnIp', description='Indicates whether the specified IP address is assigned to an Alibaba Cloud CDN node.

*   **True**: Yes
*   **False**: No', example='True'),
  ISP?: string(name='ISP', description='The Chinese name of the Internet service provider (ISP).', example='电信'),
  ispEname?: string(name='IspEname', description='The English name of the ISP.', example='telecom'),
  region?: string(name='Region', description='The Chinese name of the region.', example='中国-贵州省-贵阳市'),
  regionEname?: string(name='RegionEname', description='The English name of the region.', example='China-Guizhou-guiyang'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='123847FA-9A00-4426-83B8-B4B45D475930'),
}

model DescribeIpInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIpInfoResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 50.
  *
  * @param request DescribeIpInfoRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeIpInfoResponse
 */
async function describeIpInfoWithOptions(request: DescribeIpInfoRequest, runtime: Util.RuntimeOptions): DescribeIpInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.IP)) {
    query['IP'] = request.IP;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeIpInfo',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 50.
  *
  * @param request DescribeIpInfoRequest
  * @return DescribeIpInfoResponse
 */
async function describeIpInfo(request: DescribeIpInfoRequest): DescribeIpInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIpInfoWithOptions(request, runtime);
}

model DescribeIpStatusRequest {
  ips?: string(name='Ips', description='The IP addresses that you want to query. Separate IP addresses with underscores (\\_), such as Ips=ip1\\_ip2.', example='ip1_ip2'),
}

model DescribeIpStatusResponseBody = {
  ipStatus?: [ 
    {
      ip?: string(name='ip', description='The IP address of the node.', example='10.10.10.10'),
      status?: string(name='status', description='The status. Valid values:

*   **nonali**: The node is not an Alibaba Cloud CDN edge node.
*   **normal**: The node is an available Alibaba Cloud CDN edge node.
*   **abnormal**: The node is an unavailable Alibaba Cloud CDN edge node.', example='abnormal'),
    }
  ](name='IpStatus', description='The status of the node IP addresses.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F61CDR30-E83C-4FDA-BF73-9A94CDD44229'),
}

model DescribeIpStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIpStatusResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 50.
  *
  * @param request DescribeIpStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeIpStatusResponse
 */
async function describeIpStatusWithOptions(request: DescribeIpStatusRequest, runtime: Util.RuntimeOptions): DescribeIpStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeIpStatus',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 50.
  *
  * @param request DescribeIpStatusRequest
  * @return DescribeIpStatusResponse
 */
async function describeIpStatus(request: DescribeIpStatusRequest): DescribeIpStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIpStatusWithOptions(request, runtime);
}

model DescribeL2VipsByDomainRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name.', example='example.com'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeL2VipsByDomainResponseBody = {
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
  vips?: {
    vip?: [ string ](name='Vip')
  }(name='Vips', description='A list of virtual IP addresses.'),
}

model DescribeL2VipsByDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeL2VipsByDomainResponseBody(name='body'),
}

/**
  * > *   This operation is available only to users whose daily peak bandwidth value is higher than 1 Gbit/s. If you meet this requirement, you can [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.2020520001.aliyun_topbar.18.dbd44bd3e4f845#/ticket/createIndex) to apply for permissions to use this operation.
  * *   The maximum number of times that each user can call this operation per second is 40.
  *
  * @param request DescribeL2VipsByDomainRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeL2VipsByDomainResponse
 */
async function describeL2VipsByDomainWithOptions(request: DescribeL2VipsByDomainRequest, runtime: Util.RuntimeOptions): DescribeL2VipsByDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeL2VipsByDomain',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > *   This operation is available only to users whose daily peak bandwidth value is higher than 1 Gbit/s. If you meet this requirement, you can [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.2020520001.aliyun_topbar.18.dbd44bd3e4f845#/ticket/createIndex) to apply for permissions to use this operation.
  * *   The maximum number of times that each user can call this operation per second is 40.
  *
  * @param request DescribeL2VipsByDomainRequest
  * @return DescribeL2VipsByDomainResponse
 */
async function describeL2VipsByDomain(request: DescribeL2VipsByDomainRequest): DescribeL2VipsByDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeL2VipsByDomainWithOptions(request, runtime);
}

model DescribePreloadDetailByIdRequest {
  taskId?: string(name='TaskId', example='15423123921'),
}

model DescribePreloadDetailByIdResponseBody = {
  requestId?: string(name='RequestId', example='E9D3257A-1B7C-414C-90C1-8D07AC47BCAC'),
  totalCount?: long(name='TotalCount', example='1'),
  urlDetails?: [ 
    {
      creationTime?: string(name='CreationTime', example='2022-11-23T02:26:56Z'),
      domain?: string(name='Domain', example='example.com'),
      endTime?: string(name='EndTime', example='2022-11-23T02:27:00Z'),
      process?: string(name='Process', example='100%'),
      retCode?: string(name='RetCode', example='0'),
      status?: string(name='Status', example='Complete'),
      taskId?: string(name='TaskId', example='14286878547'),
      urls?: [ 
        {
          description?: string(name='Description', example='Successfully preloaded'),
          success?: string(name='Success', example='47%'),
          url?: string(name='Url', example='/abc.jpg'),
        }
      ](name='Urls'),
    }
  ](name='UrlDetails'),
}

model DescribePreloadDetailByIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePreloadDetailByIdResponseBody(name='body'),
}

async function describePreloadDetailByIdWithOptions(request: DescribePreloadDetailByIdRequest, runtime: Util.RuntimeOptions): DescribePreloadDetailByIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePreloadDetailById',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePreloadDetailById(request: DescribePreloadDetailByIdRequest): DescribePreloadDetailByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePreloadDetailByIdWithOptions(request, runtime);
}

model DescribeRangeDataByLocateAndIspServiceRequest {
  domainNames?: string(name='DomainNames', description='The accelerated domain name.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.

>  The end time must be later than the start time. The interval between the end time and the start time cannot exceed 1 hour.', example='2019-11-30T05:40:00Z'),
  ispNames?: string(name='IspNames', description='The name of the ISP. You can specify only one ISP name in each call.

You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query ISPs.', example='unicom'),
  locationNames?: string(name='LocationNames', description='The names of the regions. Separate regions with commas (,).

You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query the most recent region list.', example='liaoning,guangxi'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.', example='2019-11-30T05:33:00Z'),
}

model DescribeRangeDataByLocateAndIspServiceResponseBody = {
  jsonResult?: string(name='JsonResult', description='The response parameters in the JSON format.

These parameters indicate the following information in sequence: UNIX time, region, ISP, distribution of HTTP status codes, response time, bandwidth (bit/s), average response rate, page views, cache hit ratio, and request hit ratio.', example='{"1472659200":{"天津市":{"电信":{"http_codes":{"000":0,"200":6,"400":0},"rt":4183,"bandwidth":46639,"avg_speed":7773,"pv":6,"hit_rate":0.93,"request_hit_rate":0.66}}}}'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model DescribeRangeDataByLocateAndIspServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRangeDataByLocateAndIspServiceResponseBody(name='body'),
}

/**
  * *   The data is collected every 5 minutes.
  * *   The maximum number of times that each user can call this operation per second is 20.
  *
  * @param request DescribeRangeDataByLocateAndIspServiceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRangeDataByLocateAndIspServiceResponse
 */
async function describeRangeDataByLocateAndIspServiceWithOptions(request: DescribeRangeDataByLocateAndIspServiceRequest, runtime: Util.RuntimeOptions): DescribeRangeDataByLocateAndIspServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainNames)) {
    query['DomainNames'] = request.domainNames;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ispNames)) {
    query['IspNames'] = request.ispNames;
  }
  if (!Util.isUnset(request.locationNames)) {
    query['LocationNames'] = request.locationNames;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRangeDataByLocateAndIspService',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   The data is collected every 5 minutes.
  * *   The maximum number of times that each user can call this operation per second is 20.
  *
  * @param request DescribeRangeDataByLocateAndIspServiceRequest
  * @return DescribeRangeDataByLocateAndIspServiceResponse
 */
async function describeRangeDataByLocateAndIspService(request: DescribeRangeDataByLocateAndIspServiceRequest): DescribeRangeDataByLocateAndIspServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRangeDataByLocateAndIspServiceWithOptions(request, runtime);
}

model DescribeRealtimeDeliveryAccRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.

The end of the time range to query. The end time must be later than the start time.', example='2016-10-20T05:00:00Z'),
  interval?: string(name='Interval', description='The time interval between the data entries. Unit: seconds. The value varies based on the values of the **StartTime** and **EndTime** parameters. Valid values:

*   If the time span between StartTime and EndTime is less than 3 days, valid values are **300**, **3600**, and **86400**. Default value: **300**.
*   If the time span between StartTime and EndTime is from 3 to 31 days (31 days excluded), valid values are **3600** and **86400**. Default value: **3600**.
*   If the time span between StartTime and EndTime is 31 days or longer, the valid value is **86400**. Default value: **86400**.', example='300'),
  logStore?: string(name='LogStore', description='The name of the Logstore that collects log data from Alibaba Cloud Content Delivery Network (CDN) in real time. By default, all Logstores are queried.', example='LogStore'),
  project?: string(name='Project', description='The name of the Log Service project that is used for real-time log delivery. By default, all projects are queried.', example='Project'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.', example='2016-10-20T04:00:00Z'),
}

model DescribeRealtimeDeliveryAccResponseBody = {
  reatTimeDeliveryAccData?: {
    accData?: [ 
    {
      failedNum?: int32(name='FailedNum', description='The number of failed attempts to deliver log data to Log Service.', example='2'),
      successNum?: int32(name='SuccessNum', description='The number of successful deliveries of log data to Log Service.', example='2'),
      timeStamp?: string(name='TimeStamp', description='The timestamp of the data.', example='2018-09-03T06:00:00Z'),
    }
  ](name='AccData')
  }(name='ReatTimeDeliveryAccData', description='The information about real-time log delivery.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='684306D2-2511-4977-991D-CE97E91FD7C0'),
}

model DescribeRealtimeDeliveryAccResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRealtimeDeliveryAccResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeRealtimeDeliveryAccRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRealtimeDeliveryAccResponse
 */
async function describeRealtimeDeliveryAccWithOptions(request: DescribeRealtimeDeliveryAccRequest, runtime: Util.RuntimeOptions): DescribeRealtimeDeliveryAccResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.logStore)) {
    query['LogStore'] = request.logStore;
  }
  if (!Util.isUnset(request.project)) {
    query['Project'] = request.project;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRealtimeDeliveryAcc',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeRealtimeDeliveryAccRequest
  * @return DescribeRealtimeDeliveryAccResponse
 */
async function describeRealtimeDeliveryAcc(request: DescribeRealtimeDeliveryAccRequest): DescribeRealtimeDeliveryAccResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRealtimeDeliveryAccWithOptions(request, runtime);
}

model DescribeRefreshQuotaRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeRefreshQuotaResponseBody = {
  blockQuota?: string(name='BlockQuota', description='The maximum number of URLs and directories that can be blocked on the current day.', example='300'),
  blockRemain?: string(name='BlockRemain', description='The remaining number of URLs and directories that can be blocked on the current day.', example='100'),
  dirQuota?: string(name='DirQuota', description='The maximum number of directories that can be refreshed on the current day.', example='100'),
  dirRemain?: string(name='DirRemain', description='The remaining number of directories that can be refreshed on the current day.', example='99'),
  preloadEdgeQuota?: string(name='PreloadEdgeQuota', description='The maximum number of times that you can prefetch content to L1 nodes on the current day.', example='20'),
  preloadEdgeRemain?: string(name='PreloadEdgeRemain', description='The remaining number of times that you can prefetch content to L1 nodes on the current day.', example='20'),
  preloadQuota?: string(name='PreloadQuota', description='The maximum number of times that you can prefetch content to L2 nodes on the current day.', example='500'),
  preloadRemain?: string(name='PreloadRemain', description='The remaining number of times that you can prefetch content to L2 nodes on the current day.', example='400'),
  regexQuota?: string(name='RegexQuota', description='The maximum number of times that you can use regular expressions to refresh directories or URLs on the current day.', example='20'),
  regexRemain?: string(name='RegexRemain', description='The remaining number of times that you can use regular expressions to refresh directories or URLs on the current day.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request', example='42E0554B-80F4-4921-AED6-ACFB22CAAAD0'),
  urlQuota?: string(name='UrlQuota', description='The maximum number of URLs that can be refreshed on the current day.', example='2000'),
  urlRemain?: string(name='UrlRemain', description='The remaining number of URLs that can be refreshed on the current day.', example='1996'),
}

model DescribeRefreshQuotaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRefreshQuotaResponseBody(name='body'),
}

/**
  * > - You can call the RefreshObjectCaches operation to refresh content and call the PushObjectCache operation to prefetch content.
  * - The maximum number of times that each user can call this operation per second is 20.
  *
  * @param request DescribeRefreshQuotaRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRefreshQuotaResponse
 */
async function describeRefreshQuotaWithOptions(request: DescribeRefreshQuotaRequest, runtime: Util.RuntimeOptions): DescribeRefreshQuotaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRefreshQuota',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > - You can call the RefreshObjectCaches operation to refresh content and call the PushObjectCache operation to prefetch content.
  * - The maximum number of times that each user can call this operation per second is 20.
  *
  * @param request DescribeRefreshQuotaRequest
  * @return DescribeRefreshQuotaResponse
 */
async function describeRefreshQuota(request: DescribeRefreshQuotaRequest): DescribeRefreshQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRefreshQuotaWithOptions(request, runtime);
}

model DescribeRefreshTaskByIdRequest {
  taskId?: string(name='TaskId', description='The ID of the task that you want to query.

You can call the [RefreshObjectCaches](~~91164~~) operation to query task IDs. Then, you can use the task IDs to query task status.

You can specify up to 10 task IDs. Separate task IDs with commas (,).', example='12345678'),
}

model DescribeRefreshTaskByIdResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='E0C2EF95-B1EC-4C93-855E-2059A7DA2B7B'),
  tasks?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the task was created. The time is displayed in UTC.', example='2020-08-03T08:54:23Z'),
      description?: string(name='Description', description='The error returned when the refresh or prefetch task failed. Valid values:

*   **Internal Error**: An internal error occurred.
*   **Origin Timeout**: The response from the origin server timed out.
*   **Origin Return StatusCode 5XX**: The origin server returned a 5XX error.', example='Internal Error'),
      objectPath?: string(name='ObjectPath', description='The path of the object refreshed by the refresh task.', example='http://example.com/abc.jpg'),
      objectType?: string(name='ObjectType', description='The type of the task. Valid values:

*   **file**: refreshes an individual file.
*   **directory**: refreshes files under the specified directory.
*   **preload**: prefetches an individual file.
*   **regex**: refreshes content based on a regular expression.', example='file'),
      process?: string(name='Process', description='The progress of the task, in percentage.', example='100%'),
      status?: string(name='Status', description='The status of the task. Valid values:

*   **Complete**: The task is complete.
*   **Pending**: The task is pending.
*   **Refreshing**: The task is running.
*   **Failed**: The task failed.', example='Complete'),
      taskId?: string(name='TaskId', description='The ID of the task.', example='24840'),
    }
  ](name='Tasks', description='The tasks.'),
  totalCount?: long(name='TotalCount', description='The total number of tasks.', example='2'),
}

model DescribeRefreshTaskByIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRefreshTaskByIdResponseBody(name='body'),
}

/**
  * > - You can query data within the last three days.
  * - You can call this operation up to 30 times per second per account.
  *
  * @param request DescribeRefreshTaskByIdRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRefreshTaskByIdResponse
 */
async function describeRefreshTaskByIdWithOptions(request: DescribeRefreshTaskByIdRequest, runtime: Util.RuntimeOptions): DescribeRefreshTaskByIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRefreshTaskById',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > - You can query data within the last three days.
  * - You can call this operation up to 30 times per second per account.
  *
  * @param request DescribeRefreshTaskByIdRequest
  * @return DescribeRefreshTaskByIdResponse
 */
async function describeRefreshTaskById(request: DescribeRefreshTaskByIdRequest): DescribeRefreshTaskByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRefreshTaskByIdWithOptions(request, runtime);
}

model DescribeRefreshTasksRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one accelerated domain name in each call. By default, this operation queries the status of tasks for all accelerated domain names.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2017-12-22T08:00:00Z'),
  objectPath?: string(name='ObjectPath', description='The path of the object. The path is used as a condition for exact matching.', example='http://example.com/1.txt'),
  objectType?: string(name='ObjectType', description='The type of the task. Valid values:

*   **file**: refreshes one or more files.
*   **directory**: refreshes files under the specified directories.
*   **regex**: refreshes content based on a regular expression.
*   **preload**: prefetches one or more files.

>  If you set the **DomainName** or **Status** parameter, you must also set the **ObjectType** parameter.', example='file'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: **1** to **100000**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**. Maximum value: **100**. Valid values: **1** to **100**.', example='20'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyuji4b6r4**'),
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2017-12-21T08:00:00Z'),
  status?: string(name='Status', description='The status of the task. Valid values:

*   **Complete**: The task has completed.
*   **Refreshing**: The task is running.
*   **Failed**: The task failed.', example='Complete'),
  taskId?: string(name='TaskId', description='The ID of the task that you want to query.', example='1234321'),
}

model DescribeRefreshTasksResponseBody = {
  pageNumber?: long(name='PageNumber', description='The page number of the returned page.', example='10'),
  pageSize?: long(name='PageSize', description='The number of entries returned per page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='174F6032-AA26-470D-B90E-36F0EB205BEE'),
  tasks?: {
    CDNTask?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the task was created. The time is displayed in UTC.', example='2014-11-27T08:23:22Z'),
      description?: string(name='Description', description='The type of the error returned when the refresh or prefetch task failed. Valid values:

*   **InternalError**: An internal error occurred.
*   **OriginTimeout**: The response from the origin server timed out.
*   **OriginReturn StatusCode 5XX**: The origin server returned a 5XX error.', example='Internal Error'),
      objectPath?: string(name='ObjectPath', description='The URL of the object to be refreshed.', example='http://example.com/1.txt'),
      objectType?: string(name='ObjectType', description='The type of the task.

*   **file**: refreshes one or more files.
*   **directory**: refreshes files under the specified directories.
*   **regex**: refreshes content based on a regular expression.
*   **preload**: prefetches one or more files.', example='file'),
      process?: string(name='Process', description='The progress of the task, in percentage.', example='100%'),
      status?: string(name='Status', description='The status. Valid values:

*   **Complete**: The task has completed.
*   **Refreshing**: The task is running.
*   **Failed**: The task failed.
*   **Pending**: The task is pending.', example='Complete'),
      taskId?: string(name='TaskId', description='The ID of the task.', example='704225667'),
    }
  ](name='CDNTask')
  }(name='Tasks', description='The details about the task.'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model DescribeRefreshTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRefreshTasksResponseBody(name='body'),
}

/**
  * * You can query the status of tasks by task ID or URL.
  * * You can set both the **TaskId** and **ObjectPath** parameters. If you do not set the **TaskId** or **ObjectPath** parameter, data entries on the first page (20 entries) collected within the last three days are returned.
  * *   You can query data collected within the last three days.
  * *   If auto CDN cache update is enabled in the Object Storage Service (OSS) console, you cannot call the DescribeRefreshTasks operation to query automatic refresh tasks in OSS.
  * *   You can call this operation up to 10 times per second per account. If you want to query tasks at a higher frequency, call the [DescribeRefreshTaskById](~~187709~~) operation. This operation allows you to query tasks by task ID.
  *
  * @param request DescribeRefreshTasksRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRefreshTasksResponse
 */
async function describeRefreshTasksWithOptions(request: DescribeRefreshTasksRequest, runtime: Util.RuntimeOptions): DescribeRefreshTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.objectPath)) {
    query['ObjectPath'] = request.objectPath;
  }
  if (!Util.isUnset(request.objectType)) {
    query['ObjectType'] = request.objectType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRefreshTasks',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * * You can query the status of tasks by task ID or URL.
  * * You can set both the **TaskId** and **ObjectPath** parameters. If you do not set the **TaskId** or **ObjectPath** parameter, data entries on the first page (20 entries) collected within the last three days are returned.
  * *   You can query data collected within the last three days.
  * *   If auto CDN cache update is enabled in the Object Storage Service (OSS) console, you cannot call the DescribeRefreshTasks operation to query automatic refresh tasks in OSS.
  * *   You can call this operation up to 10 times per second per account. If you want to query tasks at a higher frequency, call the [DescribeRefreshTaskById](~~187709~~) operation. This operation allows you to query tasks by task ID.
  *
  * @param request DescribeRefreshTasksRequest
  * @return DescribeRefreshTasksResponse
 */
async function describeRefreshTasks(request: DescribeRefreshTasksRequest): DescribeRefreshTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRefreshTasksWithOptions(request, runtime);
}

model DescribeStagingIpResponseBody = {
  IPV4s?: {
    IPV4?: [ string ](name='IPV4')
  }(name='IPV4s', description='The IPv4 addresses of the nodes.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1B9E0E83-24AC-49F4-9EE0-BF5EB03E8381'),
}

model DescribeStagingIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeStagingIpResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeStagingIpRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeStagingIpResponse
 */
async function describeStagingIpWithOptions(runtime: Util.RuntimeOptions): DescribeStagingIpResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeStagingIp',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @return DescribeStagingIpResponse
 */
async function describeStagingIp(): DescribeStagingIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStagingIpWithOptions(runtime);
}

model DescribeTagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceId?: [ string ](name='ResourceId', description='The list of resource ID.', example='1'),
  resourceType?: string(name='ResourceType', description='The resource type. Set the value to **DOMAIN**.', example='DOMAIN'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag. Valid values of N: **1** to **20**.', example='key'),
      value?: string(name='Value', description='The value of the tag. Valid values of N: **1** to **20**.', example='value'),
    }
  ](name='Tag', description='The tags.'),
}

model DescribeTagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='34AB41F1-04A5-496F-8C8D-634BDBE6A9FB'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='example.com'),
      tag?: [ 
        {
          key?: string(name='Key', description='The key of the tag.', example='env'),
          value?: string(name='Value', description='The value of the tag.', example='product'),
        }
      ](name='Tag', description='The key-value pair of the tag.'),
    }
  ](name='TagResources', description='The tags that are attached to the specified resource.'),
}

model DescribeTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTagResourcesResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 10.
  *
  * @param request DescribeTagResourcesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeTagResourcesResponse
 */
async function describeTagResourcesWithOptions(request: DescribeTagResourcesRequest, runtime: Util.RuntimeOptions): DescribeTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTagResources',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 10.
  *
  * @param request DescribeTagResourcesRequest
  * @return DescribeTagResourcesResponse
 */
async function describeTagResources(request: DescribeTagResourcesRequest): DescribeTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTagResourcesWithOptions(request, runtime);
}

model DescribeTopDomainsByFlowRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2019-12-23T08:00:00Z'),
  limit?: long(name='Limit', description='The maximum number of domain names to query. Valid values: **1** to **100**. Default value: **20**.', example='20'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  Set StartTime to UTC time in the yyyy-MM-ddTHH:mm:ssZ format. For example, if the local time is 00:00, June 1, 2021, set StartTime to 2021-05-31T16:00:00Z.', example='2019-12-22T08:00:00Z'),
}

model DescribeTopDomainsByFlowResponseBody = {
  domainCount?: long(name='DomainCount', description='The total number of accelerated domain names that belong to the current Alibaba Cloud account.', example='68'),
  domainOnlineCount?: long(name='DomainOnlineCount', description='The total number of accelerated domain names that are in the **Enabled** state within the current Alibaba Cloud account.', example='68'),
  endTime?: string(name='EndTime', description='The end of the time range during which data was queried.', example='2019-12-23T08:00:00Z'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4E09C5D7-E1CF-4CAA-A45E-8727F4C8FD70'),
  startTime?: string(name='StartTime', description='The beginning of the time range during which data was queried.', example='2019-12-22T08:00:00Z'),
  topDomains?: {
    topDomain?: [ 
    {
      domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
      maxBps?: float(name='MaxBps', description='The peak bandwidth value.', example='22139626'),
      maxBpsTime?: string(name='MaxBpsTime', description='The time when the bandwidth reached the peak value.', example='1457111400'),
      rank?: long(name='Rank', description='The ranking of the accelerated domain name.', example='1'),
      totalAccess?: long(name='TotalAccess', description='The number of visits to the accelerated domain name.', example='107784230'),
      totalTraffic?: string(name='TotalTraffic', description='The total amount of network traffic.', example='2043859876683.9001'),
      trafficPercent?: string(name='TrafficPercent', description='The proportion of the amount of network traffic consumed for visiting the web page.', example='30.64191989360235'),
    }
  ](name='TopDomain')
  }(name='TopDomains', description='The top N domain names ranked by network traffic.'),
}

model DescribeTopDomainsByFlowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTopDomainsByFlowResponseBody(name='body'),
}

/**
  * The statistical analysis feature of Alibaba Cloud CDN is no longer available. The API operations related to the statistical analysis feature are no longer maintained. We recommend that you do not use the API operations because data may be missing or inaccurate. You can use the [operations report](https://www.alibabacloud.com/help/en/alibaba-cloud-cdn/latest/customize-an-operations-report-template-and-create-a-tracking-task) feature to analyze data.  
  * > - If you do not set **StartTime** or **EndTime**, data within the current month is queried. If you set both **StartTime** and **EndTime**, data within the specified time range is queried.
  * - You can call this operation up to 100 times per second per account.
  *
  * @param request DescribeTopDomainsByFlowRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeTopDomainsByFlowResponse
 */
async function describeTopDomainsByFlowWithOptions(request: DescribeTopDomainsByFlowRequest, runtime: Util.RuntimeOptions): DescribeTopDomainsByFlowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTopDomainsByFlow',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The statistical analysis feature of Alibaba Cloud CDN is no longer available. The API operations related to the statistical analysis feature are no longer maintained. We recommend that you do not use the API operations because data may be missing or inaccurate. You can use the [operations report](https://www.alibabacloud.com/help/en/alibaba-cloud-cdn/latest/customize-an-operations-report-template-and-create-a-tracking-task) feature to analyze data.  
  * > - If you do not set **StartTime** or **EndTime**, data within the current month is queried. If you set both **StartTime** and **EndTime**, data within the specified time range is queried.
  * - You can call this operation up to 100 times per second per account.
  *
  * @param request DescribeTopDomainsByFlowRequest
  * @return DescribeTopDomainsByFlowResponse
 */
async function describeTopDomainsByFlow(request: DescribeTopDomainsByFlowRequest): DescribeTopDomainsByFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTopDomainsByFlowWithOptions(request, runtime);
}

model DescribeUserCertificateExpireCountResponseBody = {
  expireWithin30DaysCount?: int32(name='ExpireWithin30DaysCount', description='The number of domain names whose SSL certificates are about to expires within 30 days.', example='0'),
  expiredCount?: int32(name='ExpiredCount', description='The number of domain names whose SSL certificates have already expired.', example='6'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F5E8DF64-7175-4186-9B06-F002C0BBD0C5'),
}

model DescribeUserCertificateExpireCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserCertificateExpireCountResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeUserCertificateExpireCountRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeUserCertificateExpireCountResponse
 */
async function describeUserCertificateExpireCountWithOptions(runtime: Util.RuntimeOptions): DescribeUserCertificateExpireCountResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeUserCertificateExpireCount',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @return DescribeUserCertificateExpireCountResponse
 */
async function describeUserCertificateExpireCount(): DescribeUserCertificateExpireCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserCertificateExpireCountWithOptions(runtime);
}

model DescribeUserConfigsRequest {
  config?: string(name='Config', example='oss'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeUserConfigsResponseBody = {
  configs?: {
    ossLogConfig?: {
      bucket?: string(name='Bucket', example='Buckettest'),
      enable?: string(name='Enable', example='off'),
      prefix?: string(name='Prefix', example='test'),
    }(name='OssLogConfig'),
    wafConfig?: {
      enable?: string(name='Enable', example='on'),
    }(name='WafConfig'),
  }(name='Configs'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9BCC7BAA-ACBE-45E5-83F0-98BF7E693E84'),
}

model DescribeUserConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserConfigsResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeUserConfigsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeUserConfigsResponse
 */
// Deprecated
async function describeUserConfigsWithOptions(request: DescribeUserConfigsRequest, runtime: Util.RuntimeOptions): DescribeUserConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserConfigs',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeUserConfigsRequest
  * @return DescribeUserConfigsResponse
 */
// Deprecated
async function describeUserConfigs(request: DescribeUserConfigsRequest): DescribeUserConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserConfigsWithOptions(request, runtime);
}

model DescribeUserDomainsRequest {
  cdnType?: string(name='CdnType', description='The type of workload accelerated by Alibaba Cloud CDN. Separate types with commas (,). Valid values:

*   **web**: images and small files
*   **download**: large files
*   **video**: on-demand video and audio streaming

If you do not set this parameter, all service types are queried.', example='download,web,video'),
  changeEndTime?: string(name='ChangeEndTime', description='The end of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2019-10-10T12:14:58Z'),
  changeStartTime?: string(name='ChangeStartTime', description='The beginning of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2019-10-10T12:14:55Z'),
  checkDomainShow?: boolean(name='CheckDomainShow', description='Specifies whether to display domain names that are under review, failed the review, or failed to be configured. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
  coverage?: string(name='Coverage', description='The accelerated region. By default, all accelerated regions are queried. Valid values:

*   **domestic**: Chinese mainland
*   **global**
*   **overseas**: global (excluding the Chinese mainland)', example='domestic'),
  domainName?: string(name='DomainName', description='The accelerated domain names. If you do not set this parameter, configurations of all domain names that match the conditions are returned.', example='example.com'),
  domainSearchType?: string(name='DomainSearchType', description='The search mode. Valid values:

*   **fuzzy_match**: fuzzy match
*   **pre_match**: prefix match
*   **suf_match**: suffix match
*   **full_match** (default): exact match

>  If you specify the domain names to query but do not set the DomainSearchType parameter, the exact match mode is used.', example='fuzzy_match'),
  domainStatus?: string(name='DomainStatus', description='The status of the domain name. You can filter domain names by status. Valid values:

*   **online**: enabled
*   **offline**: disabled
*   **configuring**: being configured
*   **configure_failed**: failed to be configured
*   **checking**: under review
*   **check_failed**: failed the review
*   **stopping**: being disabled
*   **deleting**: deleting

If you do not set this parameter, all states are queried.', example='configure_failed'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: **1** to **100000**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **1 to 50**. Default value: **20**. Maximum value: **50**.', example='5'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. By default, all IDs are queried.', example='abcd1234abcd1234'),
  securityToken?: string(name='SecurityToken'),
  source?: string(name='Source', description='The information about the origin server.', example='***'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag. Valid values of N: **1** to **20**.

By default, all tag keys are queried.', example='key'),
      value?: string(name='Value', description='The value of the tag. Valid values of N: **1** to **20**.

By default, all tag values are queried.', example='value'),
    }
  ](name='Tag', description='The tags.'),
}

model DescribeUserDomainsResponseBody = {
  domains?: {
    pageData?: [ 
    {
      cdnType?: string(name='CdnType', description='The type of workload accelerated by Alibaba Cloud CDN. Valid values:

*   **web**: images and small files
*   **download**: large files
*   **video**: on-demand video and audio streaming', example='download'),
      cname?: string(name='Cname', description='The CNAME assigned to the accelerated domain name.', example='example.com.w.alikunlun.net'),
      coverage?: string(name='Coverage', description='The acceleration region. Valid values:

*   **domestic**: Chinese mainland
*   **global**
*   **overseas**: global (excluding the Chinese mainland)', example='domestic'),
      description?: string(name='Description', description='The information about the Internet Content Provider (ICP) number.', example='filing description'),
      domainId?: long(name='DomainId', description='The ID of the accelerated domain name.', example='11223344'),
      domainName?: string(name='DomainName', description='The accelerated domain names.', example='example.com'),
      domainStatus?: string(name='DomainStatus', description='The status of the accelerated domain name. Valid values:

*   **online**: enabled
*   **offline**: disabled
*   **configuring**: being configured
*   **configure_failed**: failed to be configured
*   **checking**: under review
*   **check_failed**: failed the review
*   **stopping**: being disabled
*   **deleting**: deleting', example='configure_failed'),
      gmtCreated?: string(name='GmtCreated', description='The time when the accelerated domain name was added to Alibaba Cloud CDN.', example='2015-10-28T09:32:51Z'),
      gmtModified?: string(name='GmtModified', description='The time when the accelerated domain name was last modified.', example='2015-10-28T11:05:52Z'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='abcd1234abcd1234'),
      sandbox?: string(name='Sandbox', description='Indicates whether the accelerated domain name is in a sandbox.', example='normal'),
      sources?: {
        source?: [ 
        {
          content?: string(name='Content', description='The address of the origin server.', example='***.oss-cn-hangzhou.aliyuncs.com'),
          port?: int32(name='Port', description='The port of the origin server.', example='80'),
          priority?: string(name='Priority', description='The priority of the origin server.', example='20'),
          type?: string(name='Type', description='The type of the origin server.', example='oss'),
          weight?: string(name='Weight', description='The weight of the origin server if multiple origin servers are specified.', example='15'),
        }
      ](name='Source')
      }(name='Sources', description='The information about the origin server.'),
      sslProtocol?: string(name='SslProtocol', description='Indicates whether HTTPS is enabled. Valid values:

*   **on**: enabled
*   **off**: disabled', example='on'),
    }
  ](name='PageData')
  }(name='Domains', description='The information about the accelerated domain name.'),
  pageNumber?: long(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BDA62CE4-3477-439A-B52E-D2D7C829D7C1'),
  totalCount?: long(name='TotalCount', description='Indicates the total number of entries returned.', example='2'),
}

model DescribeUserDomainsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserDomainsResponseBody(name='body'),
}

/**
  * *   You can call this operation up to 100 times per second per account.
  * *   You can specify multiple domain names and separate them with commas (,). You can specify at most 50 domain names in each call.
  *
  * @param request DescribeUserDomainsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeUserDomainsResponse
 */
async function describeUserDomainsWithOptions(request: DescribeUserDomainsRequest, runtime: Util.RuntimeOptions): DescribeUserDomainsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdnType)) {
    query['CdnType'] = request.cdnType;
  }
  if (!Util.isUnset(request.changeEndTime)) {
    query['ChangeEndTime'] = request.changeEndTime;
  }
  if (!Util.isUnset(request.changeStartTime)) {
    query['ChangeStartTime'] = request.changeStartTime;
  }
  if (!Util.isUnset(request.checkDomainShow)) {
    query['CheckDomainShow'] = request.checkDomainShow;
  }
  if (!Util.isUnset(request.coverage)) {
    query['Coverage'] = request.coverage;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.domainSearchType)) {
    query['DomainSearchType'] = request.domainSearchType;
  }
  if (!Util.isUnset(request.domainStatus)) {
    query['DomainStatus'] = request.domainStatus;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserDomains',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can call this operation up to 100 times per second per account.
  * *   You can specify multiple domain names and separate them with commas (,). You can specify at most 50 domain names in each call.
  *
  * @param request DescribeUserDomainsRequest
  * @return DescribeUserDomainsResponse
 */
async function describeUserDomains(request: DescribeUserDomainsRequest): DescribeUserDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserDomainsWithOptions(request, runtime);
}

model DescribeUserTagsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='34AB41F1-04A5-496F-8C8D-634BDBE6A9FB'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='env'),
      value?: [ string ](name='Value', description='The list of tag value.'),
    }
  ](name='Tags', description='The list of tags returned.'),
}

model DescribeUserTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserTagsResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeUserTagsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeUserTagsResponse
 */
async function describeUserTagsWithOptions(runtime: Util.RuntimeOptions): DescribeUserTagsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeUserTags',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @return DescribeUserTagsResponse
 */
async function describeUserTags(): DescribeUserTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserTagsWithOptions(runtime);
}

model DescribeUserUsageDataExportTaskRequest {
  pageNumber?: string(name='PageNumber', description='The number of the page to return. Valid values: **1** to **100000**.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Default value: **20**. Maximum value: **50**.

Valid values: **1** to **50**.', example='20'),
}

model DescribeUserUsageDataExportTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A91BE91F-0B34-4CBF-8E0F-A2977E15AA52'),
  usageDataPerPage?: {
    data?: {
      dataItem?: [ 
      {
        createTime?: string(name='CreateTime', description='The time when the task was created.', example='2019-12-31T08:43:21Z'),
        downloadUrl?: string(name='DownloadUrl', description='The download URL.', example='https://cdn-polaris.xxxx'),
        status?: string(name='Status', description='The status of the task.

*   created: The task is being created.
*   success: The task has been created.
*   failed: The creation of the task failed.', example='success'),
        taskConfig?: {
          endTime?: string(name='EndTime', description='The end of the time range that was queried.', example='2019-12-30T15:59:59Z'),
          startTime?: string(name='StartTime', description='The start of the time range that was queried.', example='2019-12-29T16:00:00Z'),
        }(name='TaskConfig', description='The configurations of the task.'),
        taskId?: string(name='TaskId', description='The ID of the task.', example='A91BE91F-0B34-4CBF-8E0F-A2977'),
        taskName?: string(name='TaskName', description='The name of the task.', example='refresh'),
        updateTime?: string(name='UpdateTime', description='The last time when the task was modified.', example='2019-12-31T08:45:02Z'),
      }
    ](name='DataItem')
    }(name='Data', description='The description of the task.'),
    pageNumber?: int32(name='PageNumber', description='The number of the current page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='10'),
  }(name='UsageDataPerPage', description='The usage details returned per page.'),
}

model DescribeUserUsageDataExportTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserUsageDataExportTaskResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeUserUsageDataExportTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeUserUsageDataExportTaskResponse
 */
async function describeUserUsageDataExportTaskWithOptions(request: DescribeUserUsageDataExportTaskRequest, runtime: Util.RuntimeOptions): DescribeUserUsageDataExportTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserUsageDataExportTask',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeUserUsageDataExportTaskRequest
  * @return DescribeUserUsageDataExportTaskResponse
 */
async function describeUserUsageDataExportTask(request: DescribeUserUsageDataExportTaskRequest): DescribeUserUsageDataExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserUsageDataExportTaskWithOptions(request, runtime);
}

model DescribeUserUsageDetailDataExportTaskRequest {
  pageNumber?: string(name='PageNumber', description='The number of the page to return. Valid values: **1** to **100000**.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Default value: **20**. Maximum value: **50**.

Valid values: **1** to **50**.', example='10'),
}

model DescribeUserUsageDetailDataExportTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A91BE91F-0B34-4CBF-8E0F-A2977E15AA52'),
  usageDataPerPage?: {
    data?: {
      dataItem?: [ 
      {
        createTime?: string(name='CreateTime', description='The time when the task was created.', example='2018-10-09T06:33:38Z'),
        downloadUrl?: string(name='DownloadUrl', description='The download URL.', example='https://test.oss-cn-beijing.aliyuncs.com/billing_data/xxx'),
        status?: string(name='Status', description='The status of the task.', example='success'),
        taskConfig?: {
          endTime?: string(name='EndTime', description='The end of the time range that was queried.', example='2018-08-31T15:59:59Z'),
          startTime?: string(name='StartTime', description='The start of the time range that was queried.', example='2018-07-31T16:00:00Z'),
        }(name='TaskConfig', description='The configurations of the task.'),
        taskId?: string(name='TaskId', description='The ID of the task.', example='11'),
        taskName?: string(name='TaskName', description='The name of the task.', example='refresh'),
        updateTime?: string(name='UpdateTime', description='The last time when the task was modified.', example='2018-10-09T06:35:46Z'),
      }
    ](name='DataItem')
    }(name='Data', description='The description of the task.'),
    pageNumber?: int32(name='PageNumber', description='The number of the page returned.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of the entries returned per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  }(name='UsageDataPerPage', description='The usage details returned per page.'),
}

model DescribeUserUsageDetailDataExportTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserUsageDetailDataExportTaskResponseBody(name='body'),
}

/**
  * - This operation has been available since July 20, 2018. You can query information about resource usage collected within the last three months.
  * - The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeUserUsageDetailDataExportTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeUserUsageDetailDataExportTaskResponse
 */
async function describeUserUsageDetailDataExportTaskWithOptions(request: DescribeUserUsageDetailDataExportTaskRequest, runtime: Util.RuntimeOptions): DescribeUserUsageDetailDataExportTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserUsageDetailDataExportTask',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - This operation has been available since July 20, 2018. You can query information about resource usage collected within the last three months.
  * - The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeUserUsageDetailDataExportTaskRequest
  * @return DescribeUserUsageDetailDataExportTaskResponse
 */
async function describeUserUsageDetailDataExportTask(request: DescribeUserUsageDetailDataExportTaskRequest): DescribeUserUsageDetailDataExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserUsageDetailDataExportTaskWithOptions(request, runtime);
}

model DescribeUserVipsByDomainRequest {
  available?: string(name='Available', description='Specifies whether to query the virtual IP addresses of only healthy CDN edge nodes. Valid values: Valid values:

*   **on**: healthy CDN edge nodes
*   **off**: all CDN edge nodes', example='on'),
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name.', example='example.com'),
  ownerId?: long(name='OwnerId'),
}

model DescribeUserVipsByDomainResponseBody = {
  domainName?: string(name='DomainName', description='The domain name.', example='example.com'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='820E7900-5CA9-4AEF-B0DD-20ED5F64BE55'),
  vips?: {
    vip?: [ string ](name='Vip')
  }(name='Vips', description='A list of virtual IP addresses.'),
}

model DescribeUserVipsByDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserVipsByDomainResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeUserVipsByDomainRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeUserVipsByDomainResponse
 */
async function describeUserVipsByDomainWithOptions(request: DescribeUserVipsByDomainRequest, runtime: Util.RuntimeOptions): DescribeUserVipsByDomainResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserVipsByDomain',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeUserVipsByDomainRequest
  * @return DescribeUserVipsByDomainResponse
 */
async function describeUserVipsByDomain(request: DescribeUserVipsByDomainRequest): DescribeUserVipsByDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserVipsByDomainWithOptions(request, runtime);
}

model DescribeVerifyContentRequest {
  domainName?: string(name='DomainName', description='The domain name of which the ownership was verified. You can specify only one domain name.', example='example.com'),
}

model DescribeVerifyContentResponseBody = {
  content?: string(name='Content', description='The verification content.', example='verify_dffeb6610035dcb77b413a59c32cd91f'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34AB41F1-04A5-496F-8C8D-634BDBE6A9FB'),
}

model DescribeVerifyContentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVerifyContentResponseBody(name='body'),
}

/**
  * > The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeVerifyContentRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeVerifyContentResponse
 */
async function describeVerifyContentWithOptions(request: DescribeVerifyContentRequest, runtime: Util.RuntimeOptions): DescribeVerifyContentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVerifyContent',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeVerifyContentRequest
  * @return DescribeVerifyContentResponse
 */
async function describeVerifyContent(request: DescribeVerifyContentRequest): DescribeVerifyContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVerifyContentWithOptions(request, runtime);
}

model DisableRealtimeLogDeliveryRequest {
  domain?: string(name='Domain', description='The accelerated domain name for which you want to disable real-time log delivery. You can specify multiple domain names and separate them with commas (,).', example='example.com'),
}

model DisableRealtimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9732E117-8A37-49FD-A36F-ABBB87556CA7'),
}

model DisableRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableRealtimeLogDeliveryResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DisableRealtimeLogDeliveryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DisableRealtimeLogDeliveryResponse
 */
async function disableRealtimeLogDeliveryWithOptions(request: DisableRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): DisableRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableRealtimeLogDelivery',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DisableRealtimeLogDeliveryRequest
  * @return DisableRealtimeLogDeliveryResponse
 */
async function disableRealtimeLogDelivery(request: DisableRealtimeLogDeliveryRequest): DisableRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableRealtimeLogDeliveryWithOptions(request, runtime);
}

model EnableRealtimeLogDeliveryRequest {
  domain?: string(name='Domain', description='The accelerated domain name for which you want to enable real-time log delivery. You can specify multiple domain names and separate them with commas (,).', example='example.com'),
}

model EnableRealtimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9732E117-8A37-49FD-A36F-ABBB87556CA7'),
}

model EnableRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableRealtimeLogDeliveryResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request EnableRealtimeLogDeliveryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return EnableRealtimeLogDeliveryResponse
 */
async function enableRealtimeLogDeliveryWithOptions(request: EnableRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): EnableRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableRealtimeLogDelivery',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request EnableRealtimeLogDeliveryRequest
  * @return EnableRealtimeLogDeliveryResponse
 */
async function enableRealtimeLogDelivery(request: EnableRealtimeLogDeliveryRequest): EnableRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableRealtimeLogDeliveryWithOptions(request, runtime);
}

model ListDomainsByLogConfigIdRequest {
  configId?: string(name='ConfigId', description='The ID of the custom configuration.', example='123'),
}

model ListDomainsByLogConfigIdResponseBody = {
  domains?: {
    domain?: [ string ](name='Domain')
  }(name='Domains', description='The list of domain names.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9732E117-8A37-49FD-A36F-ABBB87556CA7'),
}

model ListDomainsByLogConfigIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDomainsByLogConfigIdResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request ListDomainsByLogConfigIdRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListDomainsByLogConfigIdResponse
 */
async function listDomainsByLogConfigIdWithOptions(request: ListDomainsByLogConfigIdRequest, runtime: Util.RuntimeOptions): ListDomainsByLogConfigIdResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDomainsByLogConfigId',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request ListDomainsByLogConfigIdRequest
  * @return ListDomainsByLogConfigIdResponse
 */
async function listDomainsByLogConfigId(request: ListDomainsByLogConfigIdRequest): ListDomainsByLogConfigIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDomainsByLogConfigIdWithOptions(request, runtime);
}

model ListFCTriggerRequest {
  eventMetaName?: string(name='EventMetaName', description='The name of the event for which the Function Compute trigger is set. You can specify only one name.', example='LogFileCreated'),
  eventMetaVersion?: string(name='EventMetaVersion', description='The version number of the event. You can specify only one version number.', example='1.0.0'),
}

model ListFCTriggerResponseBody = {
  FCTriggers?: [ 
    {
      eventMetaName?: string(name='EventMetaName', description='The name of the event for which the Function Compute trigger is set.', example='LogFileCreated'),
      eventMetaVersion?: string(name='EventMetaVersion', description='The version of the event for which the Function Compute trigger is set.', example='1.0.0'),
      notes?: string(name='Notes', description='The remarks for the event.', example='test'),
      roleARN?: string(name='RoleARN', description='The Resource Access Management (RAM) role.', example='acs:ram:: 1234567890:role/aliyuncdneventnotificationrole'),
      sourceArn?: string(name='SourceArn', description='The resources and filters for event listening.', example='acs:cdn:*:1234567890:domain/example.com'),
      triggerARN?: string(name='TriggerARN', description='The trigger corresponding to the Function Compute service.', example='acs:fc:cn-beijing: 1234567890:services/FCTestService/functions/printEvent/triggers/testtrigger'),
    }
  ](name='FCTriggers', description='The information about the Function Compute trigger returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC046C5D-8CB4-4B6B-B7F8-B335E51EF90E'),
}

model ListFCTriggerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFCTriggerResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request ListFCTriggerRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListFCTriggerResponse
 */
async function listFCTriggerWithOptions(request: ListFCTriggerRequest, runtime: Util.RuntimeOptions): ListFCTriggerResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFCTrigger',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request ListFCTriggerRequest
  * @return ListFCTriggerResponse
 */
async function listFCTrigger(request: ListFCTriggerRequest): ListFCTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFCTriggerWithOptions(request, runtime);
}

model ListRealtimeLogDeliveryDomainsRequest {
  logstore?: string(name='Logstore', description='The name of the Logstore that collects log data from Alibaba Cloud Content Delivery Network (CDN) in real time. You can specify multiple Logstore names and separate them with commas (,).', example='LogstoreName'),
  project?: string(name='Project', description='The name of the Log Service project that is used for real-time log delivery. You can specify multiple project names and separate them with commas (,).', example='ProjectName'),
  region?: string(name='Region', description='The ID of the region where the Log Service project is deployed. You can specify multiple region IDs and separate them with commas (,).

For more information about regions, see [Regions that support real-time log delivery](~~144883~~).', example='ch-shanghai'),
}

model ListRealtimeLogDeliveryDomainsResponseBody = {
  content?: {
    domains?: [ 
    {
      domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
      status?: string(name='Status', description='The status of the real-time log delivery feature. Valid values:

*   **online**: The feature is enabled.
*   **offline**: The feature is disabled.', example='online'),
    }
  ](name='Domains')
  }(name='Content', description='The information about the accelerated domain names.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='95D5B69F-8AEC-419B-8F3A-612B35032B0D'),
}

model ListRealtimeLogDeliveryDomainsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRealtimeLogDeliveryDomainsResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request ListRealtimeLogDeliveryDomainsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListRealtimeLogDeliveryDomainsResponse
 */
async function listRealtimeLogDeliveryDomainsWithOptions(request: ListRealtimeLogDeliveryDomainsRequest, runtime: Util.RuntimeOptions): ListRealtimeLogDeliveryDomainsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRealtimeLogDeliveryDomains',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request ListRealtimeLogDeliveryDomainsRequest
  * @return ListRealtimeLogDeliveryDomainsResponse
 */
async function listRealtimeLogDeliveryDomains(request: ListRealtimeLogDeliveryDomainsRequest): ListRealtimeLogDeliveryDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRealtimeLogDeliveryDomainsWithOptions(request, runtime);
}

model ListRealtimeLogDeliveryInfosResponseBody = {
  content?: {
    realtimeLogDeliveryInfos?: [ 
    {
      logstore?: string(name='Logstore', description='The name of the Logstore that collects log data from Alibaba Cloud Content Delivery Network (CDN) in real time.', example='LogstoreName'),
      project?: string(name='Project', description='The name of the Log Service project that is used for real-time log delivery.', example='ProjectName'),
      region?: string(name='Region', description='The ID of the region where the Log Service project is deployed. For more information, see [Regions that support real-time log delivery](~~144883~~).', example='ch-shanghai'),
    }
  ](name='RealtimeLogDeliveryInfos')
  }(name='Content', description='The content of the log entry.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='95D5B69F-8AEC-419B-8F3A-612B35032B0D'),
}

model ListRealtimeLogDeliveryInfosResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRealtimeLogDeliveryInfosResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request ListRealtimeLogDeliveryInfosRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListRealtimeLogDeliveryInfosResponse
 */
async function listRealtimeLogDeliveryInfosWithOptions(runtime: Util.RuntimeOptions): ListRealtimeLogDeliveryInfosResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListRealtimeLogDeliveryInfos',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @return ListRealtimeLogDeliveryInfosResponse
 */
async function listRealtimeLogDeliveryInfos(): ListRealtimeLogDeliveryInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRealtimeLogDeliveryInfosWithOptions(runtime);
}

model ListUserCustomLogConfigResponseBody = {
  configIds?: {
    configId?: [ string ](name='ConfigId')
  }(name='ConfigIds', description='The list of configuration ID.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='95D5B69F-8AEC-419B-8F3A-612B35032B0D'),
}

model ListUserCustomLogConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserCustomLogConfigResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request ListUserCustomLogConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListUserCustomLogConfigResponse
 */
async function listUserCustomLogConfigWithOptions(runtime: Util.RuntimeOptions): ListUserCustomLogConfigResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListUserCustomLogConfig',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @return ListUserCustomLogConfigResponse
 */
async function listUserCustomLogConfig(): ListUserCustomLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserCustomLogConfigWithOptions(runtime);
}

model ModifyCdnDomainRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name in each call.', example='example.com'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyuji4b6r4**'),
  securityToken?: string(name='SecurityToken'),
  sources?: string(name='Sources', description='The list of origin URLs.

>  You cannot set both the **Sources** and **TopLevelDomain** parameters in the same request. Otherwise, ********the **TopLevelDomain** parameter cannot take effect.', example='[{"content":"1.1.1.1","type":"ipaddr","priority":"20","port":80,"weight":"15"}]'),
  topLevelDomain?: string(name='TopLevelDomain', description='The top-level domain name. To add a top-level domain name, set the parameter CDN_TOP_LEVEL_DOMAIN_GREY_USER_LIST. This feature is available to only selected users.

>  You cannot set both the **Sources** and **TopLevelDomain** parameters in the same request. Otherwise, ****the **TopLevelDomain** parameter cannot take effect.', example='aliyundoc.com'),
}

model ModifyCdnDomainResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model ModifyCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCdnDomainResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request ModifyCdnDomainRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyCdnDomainResponse
 */
async function modifyCdnDomainWithOptions(request: ModifyCdnDomainRequest, runtime: Util.RuntimeOptions): ModifyCdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sources)) {
    query['Sources'] = request.sources;
  }
  if (!Util.isUnset(request.topLevelDomain)) {
    query['TopLevelDomain'] = request.topLevelDomain;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCdnDomain',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request ModifyCdnDomainRequest
  * @return ModifyCdnDomainResponse
 */
async function modifyCdnDomain(request: ModifyCdnDomainRequest): ModifyCdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCdnDomainWithOptions(request, runtime);
}

model ModifyCdnDomainSchdmByPropertyRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name for which you want to change the accelerated region. You can specify only one domain name.', example='example.com'),
  property?: string(name='Property', description='The accelerated region. Valid values for coverage:

*   **domestic**: Chinese mainland
*   **overseas**: global (excluding the Chinese mainland)
*   **global**: global', example='{"coverage":"overseas"}'),
}

model ModifyCdnDomainSchdmByPropertyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model ModifyCdnDomainSchdmByPropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCdnDomainSchdmByPropertyResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request ModifyCdnDomainSchdmByPropertyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyCdnDomainSchdmByPropertyResponse
 */
async function modifyCdnDomainSchdmByPropertyWithOptions(request: ModifyCdnDomainSchdmByPropertyRequest, runtime: Util.RuntimeOptions): ModifyCdnDomainSchdmByPropertyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.property)) {
    query['Property'] = request.property;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCdnDomainSchdmByProperty',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request ModifyCdnDomainSchdmByPropertyRequest
  * @return ModifyCdnDomainSchdmByPropertyResponse
 */
async function modifyCdnDomainSchdmByProperty(request: ModifyCdnDomainSchdmByPropertyRequest): ModifyCdnDomainSchdmByPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCdnDomainSchdmByPropertyWithOptions(request, runtime);
}

model ModifyRealtimeLogDeliveryRequest {
  domain?: string(name='Domain', description='The accelerated domain name for which you want to modify the configurations of real-time log delivery. Only one domain name is supported.', example='example.com'),
  logstore?: string(name='Logstore', description='The name of the Logstore.', example='TestLog'),
  project?: string(name='Project', description='The name of the Log Service project that is used for real-time log delivery.', example='testProject'),
  region?: string(name='Region', description='The ID of the region where the Log Service project is deployed. For more information, see [Regions that support real-time log delivery](~~144883~~).', example='ch-shanghai'),
}

model ModifyRealtimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9732E117-8A37-49FD-A36F-ABBB87556CA7'),
}

model ModifyRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyRealtimeLogDeliveryResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request ModifyRealtimeLogDeliveryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyRealtimeLogDeliveryResponse
 */
async function modifyRealtimeLogDeliveryWithOptions(request: ModifyRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): ModifyRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyRealtimeLogDelivery',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request ModifyRealtimeLogDeliveryRequest
  * @return ModifyRealtimeLogDeliveryResponse
 */
async function modifyRealtimeLogDelivery(request: ModifyRealtimeLogDeliveryRequest): ModifyRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRealtimeLogDeliveryWithOptions(request, runtime);
}

model OpenCdnServiceRequest {
  internetChargeType?: string(name='InternetChargeType', description='The metering method of Alibaba Cloud CDN. A value of **PayByTraffic** indicates that the metering method is pay-by-data-transfer.', example='PayByTraffic'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model OpenCdnServiceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='97C68796-EB7F-4D41-9D5B-12B909D76508'),
}

model OpenCdnServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenCdnServiceResponseBody(name='body'),
}

/**
  * > - Alibaba Cloud CDN can be activated only once per Alibaba Cloud account. The Alibaba Cloud account must pass real-name verification.
  * > - The maximum number of times that each user can call this operation per second is 5.
  *
  * @param request OpenCdnServiceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return OpenCdnServiceResponse
 */
async function openCdnServiceWithOptions(request: OpenCdnServiceRequest, runtime: Util.RuntimeOptions): OpenCdnServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenCdnService',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > - Alibaba Cloud CDN can be activated only once per Alibaba Cloud account. The Alibaba Cloud account must pass real-name verification.
  * > - The maximum number of times that each user can call this operation per second is 5.
  *
  * @param request OpenCdnServiceRequest
  * @return OpenCdnServiceResponse
 */
async function openCdnService(request: OpenCdnServiceRequest): OpenCdnServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openCdnServiceWithOptions(request, runtime);
}

model PublishStagingConfigToProductionRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name.', example='example.com'),
}

model PublishStagingConfigToProductionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model PublishStagingConfigToProductionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublishStagingConfigToProductionResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request PublishStagingConfigToProductionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return PublishStagingConfigToProductionResponse
 */
async function publishStagingConfigToProductionWithOptions(request: PublishStagingConfigToProductionRequest, runtime: Util.RuntimeOptions): PublishStagingConfigToProductionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PublishStagingConfigToProduction',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request PublishStagingConfigToProductionRequest
  * @return PublishStagingConfigToProductionResponse
 */
async function publishStagingConfigToProduction(request: PublishStagingConfigToProductionRequest): PublishStagingConfigToProductionResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishStagingConfigToProductionWithOptions(request, runtime);
}

model PushObjectCacheRequest {
  area?: string(name='Area', description='The accelerated region where content is to be prefetched. Valid values:

*   **domestic**: **Chinese Mainland Only**
*   **overseas**: **Global (Excluding the Chinese Mainland)**

If you do not set this parameter, content in the accelerated region of the domain name is prefetched. Content is prefetched based on the following rules:

*   If the accelerated region is set to ****Chinese Mainland Only****, content in regions in the Chinese mainland is prefetched.
*   If the accelerated region is set to **Global**, content in all regions is prefetched.
*   If the accelerated region is set to **Global (Excluding the Chinese Mainland)**, content in regions outside the Chinese mainland is prefetched.', example='domestic'),
  l2Preload?: boolean(name='L2Preload', description='Specifies whether to prefetch content to POPs. Valid values:

*   **true**: prefetch content to L2 edge nodes.
*   **false**: prefetch content to regular edge nodes. Regular edge nodes can be L2 edge nodes or L3 edge nodes. Default value: **false**.', example='true'),
  objectPath?: string(name='ObjectPath', description='The URLs based on which content is prefetched. Format: **accelerated domain name/files to be prefetched**.

>  Separate URLs with line feeds (\\n or \\r\\n). Each object path can be up to 1,024 characters in length.', example='example.com/image/1.png\\nexample.org/image/2.png'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  withHeader?: string(name='WithHeader'),
}

model PushObjectCacheResponseBody = {
  pushTaskId?: string(name='PushTaskId', description='The ID of the prefetch task. If multiple tasks are returned, the IDs are separated by commas (,). The task IDs are merged based on the following rules:

*   If the tasks are set for the same accelerated domain name, submitted within the same second, and prefetch content from URLs instead of directories, the tasks IDs are merged into the same task ID (RushTaskId).
*   If the number of tasks that are set for the same accelerated domain name, submitted within the same second, and prefetch content from URLs instead of directories exceeds 500, every 500 task IDs are merged into the same task ID (RushTaskId).', example='9524xxxx'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model PushObjectCacheResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PushObjectCacheResponseBody(name='body'),
}

/**
  * *   Alibaba Cloud CDN supports POST requests in which parameters are sent as a form.
  * *   You can call the [RefreshObjectCaches](~~91164~~) operation to refresh content and call the [PushObjectCache](~~91161~~) operation to prefetch content.
  * *   Each Alibaba Cloud account can submit at most 1,000 URLs per day. If your daily peak bandwidth exceeds 200 Mbit/s, you can [submit a ticket](https://account.alibabacloud.com/login/login.htm?oauth_callback=https%3A//ticket-intl.console.aliyun.com/%23/ticket/createIndex) to increase the upper limit. Alibaba Cloud will review your application and then increase the quota accordingly.
  * *   Each Alibaba Cloud account can submit up to 100 URLs at a time.
  * *   For each Alibaba Cloud account, the prefetch queue can contain up to 50,000 URLs. Content is prefetched based on the time when the URLs are submitted. The URL that is submitted the earliest has the highest priority. If the number of URLs in the queue reaches 50,000, you cannot submit more URLs until the number drops below 50,000.
  * *   You can call this operation up to 50 times per second per account.
  * *   For more information about how to automate refresh or prefetch tasks, see [Prefetch and refresh task scripts](~~151829~~).
  * ## Precautions
  * - After a refresh task is submitted and completed, the POPs immediately start to retrieve resources from the origin server. Therefore, a large number of refresh tasks cause a large number of concurrent download tasks. This increases the number of requests that are redirected to the origin server. The back-to-origin routing process consumes more bandwidth resources and the origin server may be overwhelmed.
  * - The time required for a prefetch task to complete is proportional to the size of the prefetched file. In actual practice, most prefetch tasks take 5 to 30 minutes to complete. A task with a smaller average file size takes less time.
  * - To allow Resource Access Management (RAM) users to perform this operation, you must first grant them the required permissions. For more information, see [Authorize a RAM user to prefetch and refresh resources](~~260300~~).
  *
  * @param request PushObjectCacheRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return PushObjectCacheResponse
 */
async function pushObjectCacheWithOptions(request: PushObjectCacheRequest, runtime: Util.RuntimeOptions): PushObjectCacheResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.area)) {
    query['Area'] = request.area;
  }
  if (!Util.isUnset(request.l2Preload)) {
    query['L2Preload'] = request.l2Preload;
  }
  if (!Util.isUnset(request.objectPath)) {
    query['ObjectPath'] = request.objectPath;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.withHeader)) {
    query['WithHeader'] = request.withHeader;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PushObjectCache',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   Alibaba Cloud CDN supports POST requests in which parameters are sent as a form.
  * *   You can call the [RefreshObjectCaches](~~91164~~) operation to refresh content and call the [PushObjectCache](~~91161~~) operation to prefetch content.
  * *   Each Alibaba Cloud account can submit at most 1,000 URLs per day. If your daily peak bandwidth exceeds 200 Mbit/s, you can [submit a ticket](https://account.alibabacloud.com/login/login.htm?oauth_callback=https%3A//ticket-intl.console.aliyun.com/%23/ticket/createIndex) to increase the upper limit. Alibaba Cloud will review your application and then increase the quota accordingly.
  * *   Each Alibaba Cloud account can submit up to 100 URLs at a time.
  * *   For each Alibaba Cloud account, the prefetch queue can contain up to 50,000 URLs. Content is prefetched based on the time when the URLs are submitted. The URL that is submitted the earliest has the highest priority. If the number of URLs in the queue reaches 50,000, you cannot submit more URLs until the number drops below 50,000.
  * *   You can call this operation up to 50 times per second per account.
  * *   For more information about how to automate refresh or prefetch tasks, see [Prefetch and refresh task scripts](~~151829~~).
  * ## Precautions
  * - After a refresh task is submitted and completed, the POPs immediately start to retrieve resources from the origin server. Therefore, a large number of refresh tasks cause a large number of concurrent download tasks. This increases the number of requests that are redirected to the origin server. The back-to-origin routing process consumes more bandwidth resources and the origin server may be overwhelmed.
  * - The time required for a prefetch task to complete is proportional to the size of the prefetched file. In actual practice, most prefetch tasks take 5 to 30 minutes to complete. A task with a smaller average file size takes less time.
  * - To allow Resource Access Management (RAM) users to perform this operation, you must first grant them the required permissions. For more information, see [Authorize a RAM user to prefetch and refresh resources](~~260300~~).
  *
  * @param request PushObjectCacheRequest
  * @return PushObjectCacheResponse
 */
async function pushObjectCache(request: PushObjectCacheRequest): PushObjectCacheResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushObjectCacheWithOptions(request, runtime);
}

model RefreshObjectCachesRequest {
  objectPath?: string(name='ObjectPath', description='The URLs from which content is refreshed. Format: **Accelerated domain name**/**Paths or directories of files that you want to refresh**.

Separate multiple URLs with line feed characters (\\n) or a pair of carriage return and line feed characters (\\r\\n).', example='http://example.com/image/1.png\\nhttp://aliyundoc.com/image/2.png'),
  objectType?: string(name='ObjectType', description='The type of the object that you want to refresh. Valid values:

*   **File**: refreshes one or more files.
*   **Directory**: refreshes the files in one or more directories.
*   **Regex**: refreshes content based on regular expressions.

If you set the ObjectType parameter to File or Directory, you can view [Refresh and prefetch resources](~~27140~~) to obtain more information. If you set the ObjectType parameter to Regex, you can view [Configure URL refresh rules that contain regular expressions](~~146195~~) to obtain more information.

If you set the ObjectType parameter to Directory, the resources in the directory that you want to refresh are marked as expired. You cannot delete the directory. If clients request resources on POPs that are marked as expired, Alibaba Cloud CDN checks whether the resources on your origin server are updated. If resources are updated, Alibaba Cloud CDN retrieves the most recent version of the resources and returns the resources to the clients. Otherwise, the origin server returns the 304 status code.', example='File'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model RefreshObjectCachesResponseBody = {
  refreshTaskId?: string(name='RefreshTaskId', description='The ID of the refresh task. If multiple tasks are returned, the IDs are separated by commas (,). The task IDs are merged based on the following rules:

*   If the tasks are specified for the same accelerated domain name, submitted within the same second, and run to refresh content based on URLs instead of directories, the task IDs are merged into one task ID.
*   If the number of tasks that are specified for the same accelerated domain name, submitted within the same second, and run to refresh content based on URLs instead of directories exceeds 2,000, every 2,000 task IDs are merged into one task ID.', example='704222904'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D61E4801-EAFF-4A63-AAE1-FBF6CE1CFD1C'),
}

model RefreshObjectCachesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefreshObjectCachesResponseBody(name='body'),
}

/**
  * *   Alibaba Cloud CDN supports POST requests in which parameters are sent as a form.
  * *   You can call the [RefreshObjectCaches](~~91164~~) operation to refresh content and call the [PushObjectCache](~~91161~~) operation to prefetch content.
  * *   You can call this operation up to 50 times per second per account.
  * *   For more information about how to automate refresh or prefetch tasks, see [Prefetch and refresh task scripts](~~151829~~).
  * ## Precautions
  * - After a refresh task is submitted and completed, specific resources are removed from POPs. When a POP receives a request for the removed resources, the POP forwards the request to the origin server to retrieve the resources. The retrieved resources are returned to the client and cached on the POP. Multiple refresh tasks may cause a large number of resources to be removed from the POPs. This increases the number of requests that are forwarded to the origin server. The back-to-origin routing process consumes more bandwidth resources and the origin server may be overwhelmed.
  * - A refresh task takes approximately five to six minutes to take effect. If the cache expiration time that you specified for the resources cached on POPs is less than five minutes, you do not need to perform the refresh operation. Wait until the cache expiration time ends.
  * - If you want to use RAM users to refresh or prefetch resources, you must grant the RAM users the permissions to prefetch and refresh resources. For more information, see [Authorize a RAM user to prefetch and refresh resources](~~260300~~).
  * **Refresh quota**- By default, each Alibaba Cloud account can refresh content from up to 10,000 URLs and 100 directories per day. The directories include subdirectories. If the daily peak bandwidth of your Alibaba Cloud account exceeds 200 Mbit/s, you can [submit a ticket](https://account.alibabacloud.com/login/login.htm?oauth_callback=https%3A//ticket-intl.console.aliyun.com/%23/ticket/createIndex) to request a quota increase. Alibaba Cloud reviews your request and then increases the quota based on your request.
  * - By default, each Alibaba Cloud account can submit up to 20 refresh rules that contain regular expressions per day. If the daily peak bandwidth of your Alibaba Cloud account exceeds 10 Gbit/s, you can [submit a ticket](https://workorder-intl.console.aliyun.com/#/ticket/createIndex) to request a quota increase.
  * - You can specify up to 1,000 URL refresh rules, 100 directory refresh rules, or 1 refresh rule that contains regular expressions in each call.
  * - You can refresh up to 1,000 URLs per minute for each domain name.
  *
  * @param request RefreshObjectCachesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RefreshObjectCachesResponse
 */
async function refreshObjectCachesWithOptions(request: RefreshObjectCachesRequest, runtime: Util.RuntimeOptions): RefreshObjectCachesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.objectPath)) {
    query['ObjectPath'] = request.objectPath;
  }
  if (!Util.isUnset(request.objectType)) {
    query['ObjectType'] = request.objectType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RefreshObjectCaches',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   Alibaba Cloud CDN supports POST requests in which parameters are sent as a form.
  * *   You can call the [RefreshObjectCaches](~~91164~~) operation to refresh content and call the [PushObjectCache](~~91161~~) operation to prefetch content.
  * *   You can call this operation up to 50 times per second per account.
  * *   For more information about how to automate refresh or prefetch tasks, see [Prefetch and refresh task scripts](~~151829~~).
  * ## Precautions
  * - After a refresh task is submitted and completed, specific resources are removed from POPs. When a POP receives a request for the removed resources, the POP forwards the request to the origin server to retrieve the resources. The retrieved resources are returned to the client and cached on the POP. Multiple refresh tasks may cause a large number of resources to be removed from the POPs. This increases the number of requests that are forwarded to the origin server. The back-to-origin routing process consumes more bandwidth resources and the origin server may be overwhelmed.
  * - A refresh task takes approximately five to six minutes to take effect. If the cache expiration time that you specified for the resources cached on POPs is less than five minutes, you do not need to perform the refresh operation. Wait until the cache expiration time ends.
  * - If you want to use RAM users to refresh or prefetch resources, you must grant the RAM users the permissions to prefetch and refresh resources. For more information, see [Authorize a RAM user to prefetch and refresh resources](~~260300~~).
  * **Refresh quota**- By default, each Alibaba Cloud account can refresh content from up to 10,000 URLs and 100 directories per day. The directories include subdirectories. If the daily peak bandwidth of your Alibaba Cloud account exceeds 200 Mbit/s, you can [submit a ticket](https://account.alibabacloud.com/login/login.htm?oauth_callback=https%3A//ticket-intl.console.aliyun.com/%23/ticket/createIndex) to request a quota increase. Alibaba Cloud reviews your request and then increases the quota based on your request.
  * - By default, each Alibaba Cloud account can submit up to 20 refresh rules that contain regular expressions per day. If the daily peak bandwidth of your Alibaba Cloud account exceeds 10 Gbit/s, you can [submit a ticket](https://workorder-intl.console.aliyun.com/#/ticket/createIndex) to request a quota increase.
  * - You can specify up to 1,000 URL refresh rules, 100 directory refresh rules, or 1 refresh rule that contains regular expressions in each call.
  * - You can refresh up to 1,000 URLs per minute for each domain name.
  *
  * @param request RefreshObjectCachesRequest
  * @return RefreshObjectCachesResponse
 */
async function refreshObjectCaches(request: RefreshObjectCachesRequest): RefreshObjectCachesResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshObjectCachesWithOptions(request, runtime);
}

model RollbackStagingConfigRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name in each call.', example='example.com'),
}

model RollbackStagingConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model RollbackStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RollbackStagingConfigResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request RollbackStagingConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RollbackStagingConfigResponse
 */
async function rollbackStagingConfigWithOptions(request: RollbackStagingConfigRequest, runtime: Util.RuntimeOptions): RollbackStagingConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RollbackStagingConfig',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request RollbackStagingConfigRequest
  * @return RollbackStagingConfigResponse
 */
async function rollbackStagingConfig(request: RollbackStagingConfigRequest): RollbackStagingConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return rollbackStagingConfigWithOptions(request, runtime);
}

model SetCdnDomainCSRCertificateRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name for which you want to configure an SSL certificate. The domain name must have HTTPS secure acceleration enabled.', example='example.com'),
  serverCertificate?: string(name='ServerCertificate', description='The content of the certificate. The certificate must match the certificate signing request (CSR) created by calling the [CreateCdnCertificateSigningRequest](~~144478~~) operation. Make sure that the certificate is in the PEM format, and the content of the certificate is encoded in Base64 and then encoded by encodeURIComponent.', example='----BEGIN CERTIFICATE----- MIIFz****-----END CERTIFICATE-----'),
}

model SetCdnDomainCSRCertificateResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model SetCdnDomainCSRCertificateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetCdnDomainCSRCertificateResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request SetCdnDomainCSRCertificateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetCdnDomainCSRCertificateResponse
 */
async function setCdnDomainCSRCertificateWithOptions(request: SetCdnDomainCSRCertificateRequest, runtime: Util.RuntimeOptions): SetCdnDomainCSRCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.serverCertificate)) {
    query['ServerCertificate'] = request.serverCertificate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetCdnDomainCSRCertificate',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request SetCdnDomainCSRCertificateRequest
  * @return SetCdnDomainCSRCertificateResponse
 */
async function setCdnDomainCSRCertificate(request: SetCdnDomainCSRCertificateRequest): SetCdnDomainCSRCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setCdnDomainCSRCertificateWithOptions(request, runtime);
}

model SetCdnDomainSMCertificateRequest {
  certIdentifier?: string(name='CertIdentifier', description='The ID of the SM certificate that you want to configure.', example='1234****'),
  domainName?: string(name='DomainName', description='The accelerated domain name for which you want to configure the SM certificate.

>  The domain name uses HTTPS secure acceleration.', example='example.com'),
  ownerId?: long(name='OwnerId'),
  SSLProtocol?: string(name='SSLProtocol', description='Specifies whether to enable the SSL certificate. Valid values:

*   **on**: enables the SSL certificate.
*   **off**: disables the SSL certificate.', example='on'),
  securityToken?: string(name='SecurityToken'),
}

model SetCdnDomainSMCertificateResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C8'),
}

model SetCdnDomainSMCertificateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetCdnDomainSMCertificateResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request SetCdnDomainSMCertificateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetCdnDomainSMCertificateResponse
 */
async function setCdnDomainSMCertificateWithOptions(request: SetCdnDomainSMCertificateRequest, runtime: Util.RuntimeOptions): SetCdnDomainSMCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certIdentifier)) {
    query['CertIdentifier'] = request.certIdentifier;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.SSLProtocol)) {
    query['SSLProtocol'] = request.SSLProtocol;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetCdnDomainSMCertificate',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request SetCdnDomainSMCertificateRequest
  * @return SetCdnDomainSMCertificateResponse
 */
async function setCdnDomainSMCertificate(request: SetCdnDomainSMCertificateRequest): SetCdnDomainSMCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setCdnDomainSMCertificateWithOptions(request, runtime);
}

model SetCdnDomainStagingConfigRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name.', example='example.com'),
  functions?: string(name='Functions', description='The features that you want to configure. Format:

> - **functionName**: The name of the feature. Separate multiple values with commas (,).
> - **argName**: The feature parameters for **functionName**.
> - **argValue**: The parameter values set for **functionName**.

```
        [
         {
           "functionArgs": [
            {
             "argName": "Parameter A", 
             "argValue": "Parameter value"
            }, 
          {
            "argName": "Parameter B", 
            "argValue": "Parameter value"
             }
         ], 
         "functionName": "Feature name"
            }
        ]
 ```', example='[{"functionArgs":[{"argName":"enable","argValue":"on"},{"argName":"pri","argValue":"1"},{"argName":"rule","argValue":"xxx"}],"functionName":"edge_function"}]'),
}

model SetCdnDomainStagingConfigResponseBody = {
  domainConfigList?: [ 
    {
      configId?: long(name='ConfigId', description='The ID of the configuration.', example='1234567'),
      domainName?: string(name='DomainName', description='The accelerated domain name.', example='www.example.com'),
      functionName?: string(name='FunctionName', description='The function name.', example='set_resp_header'),
    }
  ](name='DomainConfigList', description='The list of the domain configuration.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model SetCdnDomainStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetCdnDomainStagingConfigResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request SetCdnDomainStagingConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetCdnDomainStagingConfigResponse
 */
async function setCdnDomainStagingConfigWithOptions(request: SetCdnDomainStagingConfigRequest, runtime: Util.RuntimeOptions): SetCdnDomainStagingConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.functions)) {
    query['Functions'] = request.functions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetCdnDomainStagingConfig',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request SetCdnDomainStagingConfigRequest
  * @return SetCdnDomainStagingConfigResponse
 */
async function setCdnDomainStagingConfig(request: SetCdnDomainStagingConfigRequest): SetCdnDomainStagingConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setCdnDomainStagingConfigWithOptions(request, runtime);
}

model SetDomainServerCertificateRequest {
  certName?: string(name='CertName', description='The name of the SSL certificate. You can specify only one name.', example='myCert1'),
  certType?: string(name='CertType', description='The type of the SSL certificate. Valid values:

*   **upload**: a user-uploaded SSL certificate.
*   **cas**: an SSL certificate that is issued by Alibaba Cloud SSL Certificates Service.
*   **free**: a free SSL certificate.

>  If this parameter is set to **cas**, the **PrivateKey** parameter is optional.', example='cas'),
  domainName?: string(name='DomainName', description='The accelerated domain name for which you want to configure the SSL certificate. The type of request supported by the domain name must be HTTPS.

You can specify one domain name in each call.', example='example.com'),
  forceSet?: string(name='ForceSet', description='Specifies whether to check the certificate name for duplicates. If you set the value to 1, the system does not perform the check and overwrites the information of the existing certificate that uses the same name.', example='1'),
  ownerId?: long(name='OwnerId'),
  privateKey?: string(name='PrivateKey', description='The private key. Specify the private key only if you want to enable the SSL certificate.', example='----BEGIN RSA PRIVATE KEY-----QswCQ****----END RSA PRIVATE KEY-----'),
  securityToken?: string(name='SecurityToken'),
  serverCertificate?: string(name='ServerCertificate', description='The content of the SSL certificate. Specify the content of the SSL certificate only if you want to enable the SSL certificate.', example='----BEGIN CERTIFICATE----- MIIFz****-----END CERTIFICATE-----'),
  serverCertificateStatus?: string(name='ServerCertificateStatus', description='Specifies whether to enable the SSL certificate. Valid values:

*   **on**: enables the SSL certificate.
*   **off**: disables the SSL certificate. This is the default value.', example='on'),
}

model SetDomainServerCertificateResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model SetDomainServerCertificateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDomainServerCertificateResponseBody(name='body'),
}

/**
  * > *   The maximum number of times that each user can call this operation per second is 10.
  * *   Method: POST.
  *
  * @param request SetDomainServerCertificateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetDomainServerCertificateResponse
 */
async function setDomainServerCertificateWithOptions(request: SetDomainServerCertificateRequest, runtime: Util.RuntimeOptions): SetDomainServerCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certName)) {
    query['CertName'] = request.certName;
  }
  if (!Util.isUnset(request.certType)) {
    query['CertType'] = request.certType;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.forceSet)) {
    query['ForceSet'] = request.forceSet;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.privateKey)) {
    query['PrivateKey'] = request.privateKey;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverCertificate)) {
    query['ServerCertificate'] = request.serverCertificate;
  }
  if (!Util.isUnset(request.serverCertificateStatus)) {
    query['ServerCertificateStatus'] = request.serverCertificateStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDomainServerCertificate',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > *   The maximum number of times that each user can call this operation per second is 10.
  * *   Method: POST.
  *
  * @param request SetDomainServerCertificateRequest
  * @return SetDomainServerCertificateResponse
 */
async function setDomainServerCertificate(request: SetDomainServerCertificateRequest): SetDomainServerCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDomainServerCertificateWithOptions(request, runtime);
}

model SetReqHeaderConfigRequest {
  configId?: long(name='ConfigId', description='The ID of the configuration.', example='123'),
  domainName?: string(name='DomainName', description='The accelerated domain names. You can specify one or more domain names and separate them with commas (,).', example='example.com'),
  key?: string(name='Key', description='The parameter of the custom header.', example='testkey'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  value?: string(name='Value', description='The value of the custom parameter.', example='testvalue'),
}

model SetReqHeaderConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model SetReqHeaderConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetReqHeaderConfigResponseBody(name='body'),
}

async function setReqHeaderConfigWithOptions(request: SetReqHeaderConfigRequest, runtime: Util.RuntimeOptions): SetReqHeaderConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetReqHeaderConfig',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setReqHeaderConfig(request: SetReqHeaderConfigRequest): SetReqHeaderConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setReqHeaderConfigWithOptions(request, runtime);
}

model SetWaitingRoomConfigRequest {
  allowPct?: int32(name='AllowPct', description='The percentage of requests that are allowed to be redirected to the origin server. Valid values: **0** to **100**.', example='30'),
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name.', example='example.com'),
  gapTime?: int32(name='GapTime', description='The length of waiting time to skip after users exit the queue. Unit: seconds.', example='20'),
  maxTimeWait?: int32(name='MaxTimeWait', description='The maximum length of time that users need to wait in the queue. Unit: seconds.', example='30'),
  waitUri?: string(name='WaitUri', description='The regular expression that is used to match URI strings for which the virtual waiting room feature is enabled.', example='xxx'),
  waitUrl?: string(name='WaitUrl', description='The URL of the waiting page.', example='WaitUrl'),
}

model SetWaitingRoomConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model SetWaitingRoomConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetWaitingRoomConfigResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request SetWaitingRoomConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetWaitingRoomConfigResponse
 */
async function setWaitingRoomConfigWithOptions(request: SetWaitingRoomConfigRequest, runtime: Util.RuntimeOptions): SetWaitingRoomConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allowPct)) {
    query['AllowPct'] = request.allowPct;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.gapTime)) {
    query['GapTime'] = request.gapTime;
  }
  if (!Util.isUnset(request.maxTimeWait)) {
    query['MaxTimeWait'] = request.maxTimeWait;
  }
  if (!Util.isUnset(request.waitUri)) {
    query['WaitUri'] = request.waitUri;
  }
  if (!Util.isUnset(request.waitUrl)) {
    query['WaitUrl'] = request.waitUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetWaitingRoomConfig',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request SetWaitingRoomConfigRequest
  * @return SetWaitingRoomConfigResponse
 */
async function setWaitingRoomConfig(request: SetWaitingRoomConfigRequest): SetWaitingRoomConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setWaitingRoomConfigWithOptions(request, runtime);
}

model StartCdnDomainRequest {
  domainName?: string(name='DomainName', description='The domain name that you want to enable. You can specify only one domain name.', example='example.com'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model StartCdnDomainResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model StartCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartCdnDomainResponseBody(name='body'),
}

/**
  * - If the domain name is in an invalid state or your have an overdue payment in your account, the domain name cannot be enabled.
  * - The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request StartCdnDomainRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StartCdnDomainResponse
 */
async function startCdnDomainWithOptions(request: StartCdnDomainRequest, runtime: Util.RuntimeOptions): StartCdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartCdnDomain',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - If the domain name is in an invalid state or your have an overdue payment in your account, the domain name cannot be enabled.
  * - The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request StartCdnDomainRequest
  * @return StartCdnDomainResponse
 */
async function startCdnDomain(request: StartCdnDomainRequest): StartCdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return startCdnDomainWithOptions(request, runtime);
}

model StopCdnDomainRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name that you want to disable. You can specify only one domain name.', example='example.com'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model StopCdnDomainResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model StopCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopCdnDomainResponseBody(name='body'),
}

/**
  * - After an accelerated domain is disabled, the information about the domain name is retained. Requests destined for the domain name are automatically redirected to the origin server.
  * - The maximum number of times that each user can call this operation per second is 40.
  *
  * @param request StopCdnDomainRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StopCdnDomainResponse
 */
async function stopCdnDomainWithOptions(request: StopCdnDomainRequest, runtime: Util.RuntimeOptions): StopCdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopCdnDomain',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - After an accelerated domain is disabled, the information about the domain name is retained. Requests destined for the domain name are automatically redirected to the origin server.
  * - The maximum number of times that each user can call this operation per second is 40.
  *
  * @param request StopCdnDomainRequest
  * @return StopCdnDomainResponse
 */
async function stopCdnDomain(request: StopCdnDomainRequest): StopCdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopCdnDomainWithOptions(request, runtime);
}

model TagResourcesRequest {
  resourceId?: [ string ](name='ResourceId', description='The list of resource ID.', example='1'),
  resourceType?: string(name='ResourceType', description='The type of resource. The resource type. Set the value to **DOMAIN**.', example='DOMAIN'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag. Valid values of N: **1** to **20**.', example='env'),
      value?: string(name='Value', description='The value of the tag. Valid values of N: **1** to **20**.', example='value'),
    }
  ](name='Tag', description='The tags.'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='97C68796-EB7F-4D41-9D5B-12B909D76508'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request TagResourcesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return TagResourcesResponse
 */
async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request TagResourcesRequest
  * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to delete all tags. Valid values:

*   **true**: yes.
*   **false**: no.

Default value: **false**.', example='false'),
  resourceId?: [ string ](name='ResourceId', description='The list of resource ID. The max items count is up to 20.', example='example.com'),
  resourceType?: string(name='ResourceType', description='The type of resource. The resource type. Set the value to **DOMAIN**.', example='DOMAIN'),
  tagKey?: [ string ](name='TagKey', description='The list of tag key.', example='env'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='97C68796-EB7F-4D41-9D5B-12B909D76508'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request UntagResourcesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UntagResourcesResponse
 */
async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request UntagResourcesRequest
  * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateCdnDeliverTaskRequest {
  deliver?: string(name='Deliver', description='The method that is used to send operations reports. Operations reports are sent to you only by email. The settings must be escaped in JSON.', example='{\\"email\\":{\\"to\\":[\\"yewei@myhayo.com\\"]}}'),
  deliverId?: long(name='DeliverId', description='The ID of the tracking task that you want to update.', example='3'),
  domainName?: string(name='DomainName', description='The domain name that you want to track. You can specify multiple domain names and separate them with commas (,). You can specify at most 500 domain names in each call.

If you do not specify a domain name, the task collects data from all domain names that belong to your Alibaba Cloud account.', example='www.example.com'),
  name?: string(name='Name', description='The name of the tracking task.', example='subscribe'),
  reports?: string(name='Reports', description='The operations reports that are tracked by the task. The data must be escaped in JSON.', example='[{\\"reportId\\":3},{\\"reportId\\":1}]'),
  schedule?: string(name='Schedule', description='The parameters that specify the time interval at which the tracking task sends operations reports. The settings must be escaped in JSON.', example='{\\"crontab\\":\\"00 00 08 * * ?\\",\\"frequency\\":\\"d\\"}'),
}

model UpdateCdnDeliverTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model UpdateCdnDeliverTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateCdnDeliverTaskResponseBody(name='body'),
}

/**
  * >  You can call this operation up to three times per second per account.
  *
  * @param request UpdateCdnDeliverTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateCdnDeliverTaskResponse
 */
async function updateCdnDeliverTaskWithOptions(request: UpdateCdnDeliverTaskRequest, runtime: Util.RuntimeOptions): UpdateCdnDeliverTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deliver)) {
    body['Deliver'] = request.deliver;
  }
  if (!Util.isUnset(request.deliverId)) {
    body['DeliverId'] = request.deliverId;
  }
  if (!Util.isUnset(request.domainName)) {
    body['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.reports)) {
    body['Reports'] = request.reports;
  }
  if (!Util.isUnset(request.schedule)) {
    body['Schedule'] = request.schedule;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCdnDeliverTask',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  You can call this operation up to three times per second per account.
  *
  * @param request UpdateCdnDeliverTaskRequest
  * @return UpdateCdnDeliverTaskResponse
 */
async function updateCdnDeliverTask(request: UpdateCdnDeliverTaskRequest): UpdateCdnDeliverTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCdnDeliverTaskWithOptions(request, runtime);
}

model UpdateCdnSubTaskRequest {
  domainName?: string(name='DomainName', description='The domain names that you want to track. You can specify multiple domain names and separate them with commas (,). You can specify at most 500 domain names in each call.

If you do not specify a domain name, the task collects data from all domain names that belong to your Alibaba Cloud account.', example='www.example.com'),
  endTime?: string(name='EndTime', description='The end time of the operations report. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.', example='2020-11-17T00:00:00Z'),
  reportIds?: string(name='ReportIds', description='The IDs of operations reports that you want to update. Separate IDs with commas (,).', example='1,2,3'),
  startTime?: string(name='StartTime', description='The start time of the operations report. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.', example='2020-09-17T00:00:00Z'),
}

model UpdateCdnSubTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model UpdateCdnSubTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateCdnSubTaskResponseBody(name='body'),
}

/**
  * >  You can call this API operation up to three times per second per account.
  *
  * @param request UpdateCdnSubTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateCdnSubTaskResponse
 */
async function updateCdnSubTaskWithOptions(request: UpdateCdnSubTaskRequest, runtime: Util.RuntimeOptions): UpdateCdnSubTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.domainName)) {
    body['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.reportIds)) {
    body['ReportIds'] = request.reportIds;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCdnSubTask',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  You can call this API operation up to three times per second per account.
  *
  * @param request UpdateCdnSubTaskRequest
  * @return UpdateCdnSubTaskResponse
 */
async function updateCdnSubTask(request: UpdateCdnSubTaskRequest): UpdateCdnSubTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCdnSubTaskWithOptions(request, runtime);
}

model UpdateFCTriggerRequest {
  functionARN?: string(name='FunctionARN', description='The feature trigger.', example='acs:fc:1223455566666:123:services/myservice/functions/myfunction'),
  notes?: string(name='Notes', description='The remarks.', example='test'),
  roleARN?: string(name='RoleARN', description='The assigned Resource Access Management (RAM) role.', example='acs:ram:: 1234567890:role/aliyuncdneventnotificationrole'),
  sourceARN?: string(name='SourceARN', description='The resources and filters for event listening.', example='acs:cdn:*:1234567890:domain/example.com'),
  triggerARN?: string(name='TriggerARN', description='The trigger that corresponds to the Function Compute service.', example='acs:fc:cn-beijing: 1234567890:services/FCTestService/functions/printEvent/triggers/testtrigger'),
}

model UpdateFCTriggerResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC046C5D-8CB4-4B6B-B7F8-B335E51EF90E'),
}

model UpdateFCTriggerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFCTriggerResponseBody(name='body'),
}

async function updateFCTriggerWithOptions(request: UpdateFCTriggerRequest, runtime: Util.RuntimeOptions): UpdateFCTriggerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.triggerARN)) {
    query['TriggerARN'] = request.triggerARN;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.functionARN)) {
    body['FunctionARN'] = request.functionARN;
  }
  if (!Util.isUnset(request.notes)) {
    body['Notes'] = request.notes;
  }
  if (!Util.isUnset(request.roleARN)) {
    body['RoleARN'] = request.roleARN;
  }
  if (!Util.isUnset(request.sourceARN)) {
    body['SourceARN'] = request.sourceARN;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFCTrigger',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateFCTrigger(request: UpdateFCTriggerRequest): UpdateFCTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFCTriggerWithOptions(request, runtime);
}

model VerifyDomainOwnerRequest {
  domainName?: string(name='DomainName', description='The domain name of which you want to verify the ownership. You can specify only one domain name.', example='example.com'),
  ownerId?: long(name='OwnerId'),
  verifyType?: string(name='VerifyType', description='The verification method. Valid values:

*   **dnsCheck**: by DNS record
*   **fileCheck**: by verification file', example='dnsCheck'),
}

model VerifyDomainOwnerResponseBody = {
  content?: string(name='Content', description='The verification result.

>  This parameter is returned if the operation fails. The verification result is returned if the operation succeeds.', example='verify_dffeb6610035dcb77b413a59c32c****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34AB41F1-04A5-496F-8C8D-634BDBE6A9FB'),
}

model VerifyDomainOwnerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VerifyDomainOwnerResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request VerifyDomainOwnerRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return VerifyDomainOwnerResponse
 */
async function verifyDomainOwnerWithOptions(request: VerifyDomainOwnerRequest, runtime: Util.RuntimeOptions): VerifyDomainOwnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.verifyType)) {
    query['VerifyType'] = request.verifyType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VerifyDomainOwner',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request VerifyDomainOwnerRequest
  * @return VerifyDomainOwnerResponse
 */
async function verifyDomainOwner(request: VerifyDomainOwnerRequest): VerifyDomainOwnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyDomainOwnerWithOptions(request, runtime);
}

