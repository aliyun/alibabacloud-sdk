/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  @endpointMap = {
    ap-northeast-1 = 'cdn.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'cdn.ap-southeast-1.aliyuncs.com',
    ap-southeast-1 = 'cdn.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'cdn.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'cdn.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'cdn.ap-southeast-1.aliyuncs.com',
    eu-central-1 = 'cdn.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'cdn.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'cdn.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'cdn.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'cdn.ap-southeast-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('cdn', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddCdnDomainRequest {
  cdnType?: string(name='CdnType', example='web'),
  checkUrl?: string(name='CheckUrl', example='www.example.com/test.html'),
  domainName?: string(name='DomainName', example='.example.com'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmyuji4b6r4**'),
  scope?: string(name='Scope', example='domestic'),
  securityToken?: string(name='SecurityToken'),
  sources?: string(name='Sources', example='[
      {
            "content": "192.0.2.0",
            "type": "ipaddr",
            "priority": "20",
            "port": 80,
            "weight": "15"
      }
]'),
  tag?: [ 
    {
      key?: string(name='Key', example='env'),
      value?: string(name='Value', example='value'),
    }
  ](name='Tag'),
  topLevelDomain?: string(name='TopLevelDomain', example='example.com'),
}

model AddCdnDomainResponseBody = {
  requestId?: string(name='RequestId', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model AddCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddCdnDomainResponseBody(name='body'),
}

async function addCdnDomainWithOptions(request: AddCdnDomainRequest, runtime: Util.RuntimeOptions): AddCdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdnType)) {
    query['CdnType'] = request.cdnType;
  }
  if (!Util.isUnset(request.checkUrl)) {
    query['CheckUrl'] = request.checkUrl;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sources)) {
    query['Sources'] = request.sources;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.topLevelDomain)) {
    query['TopLevelDomain'] = request.topLevelDomain;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddCdnDomain',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addCdnDomain(request: AddCdnDomainRequest): AddCdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCdnDomainWithOptions(request, runtime);
}

model AddFCTriggerRequest {
  eventMetaName?: string(name='EventMetaName', description='The name of the event.', example='LogFileCreated'),
  eventMetaVersion?: string(name='EventMetaVersion', description='The version of the event.', example='1.0.0'),
  functionARN?: string(name='FunctionARN', description='The feature trigger.', example='acs:fc:1223455566666:123:services/myservice/functions/myfunction'),
  notes?: string(name='Notes', description='The remarks.', example='test'),
  roleARN?: string(name='RoleARN', description='The assigned Resource Access Management (RAM) role.', example='acs:ram:: 1234567890:role/aliyuncdneventnotificationrole'),
  sourceARN?: string(name='SourceARN', description='The resources and filters for event listening.', example='acs:cdn:*:1234567890:domain/example.com'),
  triggerARN?: string(name='TriggerARN', description='The trigger that corresponds to the Function Compute service.', example='acs:fc:cn-beijing: 1234567890:services/FCTestService/functions/printEvent/triggers/testtrigger'),
}

model AddFCTriggerResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC046C5D-8CB4-4B6B-B7F8-B335E51EF90'),
}

model AddFCTriggerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddFCTriggerResponseBody(name='body'),
}

async function addFCTriggerWithOptions(request: AddFCTriggerRequest, runtime: Util.RuntimeOptions): AddFCTriggerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.triggerARN)) {
    query['TriggerARN'] = request.triggerARN;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.eventMetaName)) {
    body['EventMetaName'] = request.eventMetaName;
  }
  if (!Util.isUnset(request.eventMetaVersion)) {
    body['EventMetaVersion'] = request.eventMetaVersion;
  }
  if (!Util.isUnset(request.functionARN)) {
    body['FunctionARN'] = request.functionARN;
  }
  if (!Util.isUnset(request.notes)) {
    body['Notes'] = request.notes;
  }
  if (!Util.isUnset(request.roleARN)) {
    body['RoleARN'] = request.roleARN;
  }
  if (!Util.isUnset(request.sourceARN)) {
    body['SourceARN'] = request.sourceARN;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddFCTrigger',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addFCTrigger(request: AddFCTriggerRequest): AddFCTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  return addFCTriggerWithOptions(request, runtime);
}

model BatchAddCdnDomainRequest {
  cdnType?: string(name='CdnType', example='web'),
  checkUrl?: string(name='CheckUrl', example='url'),
  domainName?: string(name='DomainName', example='example.com,aliyundoc.com'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmyuji4b6r4**'),
  scope?: string(name='Scope', example='domestic'),
  securityToken?: string(name='SecurityToken'),
  sources?: string(name='Sources', example='[
      {
            "content": "192.0.2.0",
            "type": "ipaddr",
            "priority": "20",
            "port": 80,
            "weight": "15"
      }
]'),
  topLevelDomain?: string(name='TopLevelDomain', example='example.com'),
}

model BatchAddCdnDomainResponseBody = {
  requestId?: string(name='RequestId', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model BatchAddCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchAddCdnDomainResponseBody(name='body'),
}

/**
  * The top-level domain.
  *
  * @param request BatchAddCdnDomainRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchAddCdnDomainResponse
 */
async function batchAddCdnDomainWithOptions(request: BatchAddCdnDomainRequest, runtime: Util.RuntimeOptions): BatchAddCdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdnType)) {
    query['CdnType'] = request.cdnType;
  }
  if (!Util.isUnset(request.checkUrl)) {
    query['CheckUrl'] = request.checkUrl;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sources)) {
    query['Sources'] = request.sources;
  }
  if (!Util.isUnset(request.topLevelDomain)) {
    query['TopLevelDomain'] = request.topLevelDomain;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchAddCdnDomain',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The top-level domain.
  *
  * @param request BatchAddCdnDomainRequest
  * @return BatchAddCdnDomainResponse
 */
async function batchAddCdnDomain(request: BatchAddCdnDomainRequest): BatchAddCdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchAddCdnDomainWithOptions(request, runtime);
}

model BatchDeleteCdnDomainConfigRequest {
  domainNames?: string(name='DomainNames', description='The operation that you want to perform. Set the value to **BatchDeleteCdnDomainConfig**.', example='example.com,example.org'),
  functionNames?: string(name='FunctionNames', description='The names of the features that you want to manage. Separate feature names with commas (,).', example='referer_white_list_set,https_force'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model BatchDeleteCdnDomainConfigResponseBody = {
  requestId?: string(name='RequestId', description='Deletes configurations of multiple accelerated domain names at a time.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model BatchDeleteCdnDomainConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchDeleteCdnDomainConfigResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request BatchDeleteCdnDomainConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchDeleteCdnDomainConfigResponse
 */
async function batchDeleteCdnDomainConfigWithOptions(request: BatchDeleteCdnDomainConfigRequest, runtime: Util.RuntimeOptions): BatchDeleteCdnDomainConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainNames)) {
    query['DomainNames'] = request.domainNames;
  }
  if (!Util.isUnset(request.functionNames)) {
    query['FunctionNames'] = request.functionNames;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchDeleteCdnDomainConfig',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @param request BatchDeleteCdnDomainConfigRequest
  * @return BatchDeleteCdnDomainConfigResponse
 */
async function batchDeleteCdnDomainConfig(request: BatchDeleteCdnDomainConfigRequest): BatchDeleteCdnDomainConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDeleteCdnDomainConfigWithOptions(request, runtime);
}

model BatchSetCdnDomainConfigRequest {
  domainNames?: string(name='DomainNames', description='The ID of the configuration.', example='www.example.com'),
  functions?: string(name='Functions', description='The domain name.', example='[{"functionArgs": [{"argName": "key","argValue": "Content-Encoding"},{"argName": "value","argValue": "gzip"}],"functionName": "set_resp_header"} ]'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model BatchSetCdnDomainConfigResponseBody = {
  domainConfigList?: {
    domainConfigModel?: [ 
    {
      configId?: long(name='ConfigId', description='The list of domain configurations.', example='1234567'),
      domainName?: string(name='DomainName', description='The accelerated domain name. Separate multiple accelerated domain names with commas (,).', example='www.example.com'),
      functionName?: string(name='FunctionName', description='The domain name.', example='set_resp_header'),
    }
  ](name='DomainConfigModel')
  }(name='DomainConfigList', description='> *   You can call this operation up to 30 times per second per account.
*   You can specify multiple domain names and must separate them with commas (,). You can specify up to 50 domain names in each call.
*   If the BatchSetCdnDomainConfig operation is successful, a unique configuration ID (ConfigId) is generated. You can use configuration IDs to update or delete configurations. For more information, see [Usage notes on ConfigId](~~388994~~).'),
  requestId?: string(name='RequestId', description='The name of the feature.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model BatchSetCdnDomainConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchSetCdnDomainConfigResponseBody(name='body'),
}

/**
  * The list of domain configurations.
  *
  * @param request BatchSetCdnDomainConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchSetCdnDomainConfigResponse
 */
async function batchSetCdnDomainConfigWithOptions(request: BatchSetCdnDomainConfigRequest, runtime: Util.RuntimeOptions): BatchSetCdnDomainConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainNames)) {
    query['DomainNames'] = request.domainNames;
  }
  if (!Util.isUnset(request.functions)) {
    query['Functions'] = request.functions;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchSetCdnDomainConfig',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The list of domain configurations.
  *
  * @param request BatchSetCdnDomainConfigRequest
  * @return BatchSetCdnDomainConfigResponse
 */
async function batchSetCdnDomainConfig(request: BatchSetCdnDomainConfigRequest): BatchSetCdnDomainConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchSetCdnDomainConfigWithOptions(request, runtime);
}

model BatchSetCdnDomainServerCertificateRequest {
  certName?: string(name='CertName', description='The region.', example='yourCertName'),
  certType?: string(name='CertType', description='Specifies whether to enable the SSL certificate. Valid values:

*   **on**: enables the SSL certificate.
*   **off**: disables the SSL certificate. This is the default value.', example='cas'),
  domainName?: string(name='DomainName', description='The type of the SSL certificate. Valid values:

*   **upload**: a user-uploaded SSL certificate.
*   **cas**: a certificate that is issued by SSL Certificates Service.', example='example.com'),
  forceSet?: string(name='ForceSet', example='1'),
  ownerId?: long(name='OwnerId'),
  region?: string(name='Region', example='your region'),
  SSLPri?: string(name='SSLPri', description='The content of the SSL certificate. Specify the content of the certificate only if you want to enable the SSL certificate.', example='yourSSLPri'),
  SSLProtocol?: string(name='SSLProtocol', description='The ID of the request.', example='on'),
  SSLPub?: string(name='SSLPub', description='The operation that you want to perform. Set the value to **BatchSetCdnDomainServerCertificate**.', example='yourSSLPub'),
  securityToken?: string(name='SecurityToken'),
}

model BatchSetCdnDomainServerCertificateResponseBody = {
  requestId?: string(name='RequestId', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model BatchSetCdnDomainServerCertificateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchSetCdnDomainServerCertificateResponseBody(name='body'),
}

/**
  * The name of the certificate.
  *
  * @param request BatchSetCdnDomainServerCertificateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchSetCdnDomainServerCertificateResponse
 */
async function batchSetCdnDomainServerCertificateWithOptions(request: BatchSetCdnDomainServerCertificateRequest, runtime: Util.RuntimeOptions): BatchSetCdnDomainServerCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certName)) {
    query['CertName'] = request.certName;
  }
  if (!Util.isUnset(request.certType)) {
    query['CertType'] = request.certType;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.forceSet)) {
    query['ForceSet'] = request.forceSet;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.SSLPri)) {
    query['SSLPri'] = request.SSLPri;
  }
  if (!Util.isUnset(request.SSLProtocol)) {
    query['SSLProtocol'] = request.SSLProtocol;
  }
  if (!Util.isUnset(request.SSLPub)) {
    query['SSLPub'] = request.SSLPub;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchSetCdnDomainServerCertificate',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The name of the certificate.
  *
  * @param request BatchSetCdnDomainServerCertificateRequest
  * @return BatchSetCdnDomainServerCertificateResponse
 */
async function batchSetCdnDomainServerCertificate(request: BatchSetCdnDomainServerCertificateRequest): BatchSetCdnDomainServerCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchSetCdnDomainServerCertificateWithOptions(request, runtime);
}

model BatchStartCdnDomainRequest {
  domainNames?: string(name='DomainNames', description='The ID of the request.', example='example.com'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model BatchStartCdnDomainResponseBody = {
  requestId?: string(name='RequestId', description='1.0.0', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model BatchStartCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchStartCdnDomainResponseBody(name='body'),
}

/**
  * The domain names that you want to enable. Separate multiple domain names with commas (,).
  *
  * @param request BatchStartCdnDomainRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchStartCdnDomainResponse
 */
async function batchStartCdnDomainWithOptions(request: BatchStartCdnDomainRequest, runtime: Util.RuntimeOptions): BatchStartCdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainNames)) {
    query['DomainNames'] = request.domainNames;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchStartCdnDomain',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The domain names that you want to enable. Separate multiple domain names with commas (,).
  *
  * @param request BatchStartCdnDomainRequest
  * @return BatchStartCdnDomainResponse
 */
async function batchStartCdnDomain(request: BatchStartCdnDomainRequest): BatchStartCdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchStartCdnDomainWithOptions(request, runtime);
}

model BatchStopCdnDomainRequest {
  domainNames?: string(name='DomainNames', description='*   After an accelerated domain name is disabled, Alibaba Cloud CDN retains its information and reroutes all the requests that are destined for the accelerated domain name to the origin.
*   If you need to temporarily disable CDN acceleration for a domain name, we recommend that you call the StopDomain operation.
*   You can call this operation up to 30 times per second per account.
*   You can specify up to 50 domain names in each request.', example='example.com'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model BatchStopCdnDomainResponseBody = {
  requestId?: string(name='RequestId', description='The names of the accelerated domain names. You can specify one or more domain names in each request. Separate multiple domain names with commas (,).', example='324AEFFF-308C-4DA7-8CD3-01B277B98F28'),
}

model BatchStopCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchStopCdnDomainResponseBody(name='body'),
}

/**
  * Disables one or more accelerated domain names at a time. After an accelerated domain name is disabled, the value of the DomainStatus parameter is changed to Offline.
  *
  * @param request BatchStopCdnDomainRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchStopCdnDomainResponse
 */
async function batchStopCdnDomainWithOptions(request: BatchStopCdnDomainRequest, runtime: Util.RuntimeOptions): BatchStopCdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainNames)) {
    query['DomainNames'] = request.domainNames;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchStopCdnDomain',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Disables one or more accelerated domain names at a time. After an accelerated domain name is disabled, the value of the DomainStatus parameter is changed to Offline.
  *
  * @param request BatchStopCdnDomainRequest
  * @return BatchStopCdnDomainResponse
 */
async function batchStopCdnDomain(request: BatchStopCdnDomainRequest): BatchStopCdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchStopCdnDomainWithOptions(request, runtime);
}

model BatchUpdateCdnDomainRequest {
  domainName?: string(name='DomainName', description='The top-level domain name.

>  You can set only one of **Sources** and **TopLevelDomain**. If you set both **Sources** and **TopLevelDomain**, **TopLevelDomain** does not take effect.', example='example.com,example.org'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the request.', example='rg-acfmyuji4b6r4**'),
  securityToken?: string(name='SecurityToken'),
  sources?: string(name='Sources', description='The accelerated domain names. You can specify one or more accelerated domain names. Separate domain names with commas (,).', example='[{"content":"10.10.10.10","type":"ipaddr","priority":"20","port":80,"weight":"15"}]'),
  topLevelDomain?: string(name='TopLevelDomain', description='The operation that you want to perform. Set the value to **BatchUpdateCdnDomain**.', example='example.com'),
}

model BatchUpdateCdnDomainResponseBody = {
  requestId?: string(name='RequestId', description='The information about the addresses of origin servers.

>  You can set only one of **Sources** and **TopLevelDomain**. If you set both **Sources** and **TopLevelDomain**, **TopLevelDomain** does not take effect.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model BatchUpdateCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchUpdateCdnDomainResponseBody(name='body'),
}

/**
  * > - The maximum number of times that each user can call this operation per second is 30.
  * - You can specify multiple domain names (no more than 50) and separate them with commas (,).
  *
  * @param request BatchUpdateCdnDomainRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchUpdateCdnDomainResponse
 */
async function batchUpdateCdnDomainWithOptions(request: BatchUpdateCdnDomainRequest, runtime: Util.RuntimeOptions): BatchUpdateCdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sources)) {
    query['Sources'] = request.sources;
  }
  if (!Util.isUnset(request.topLevelDomain)) {
    query['TopLevelDomain'] = request.topLevelDomain;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchUpdateCdnDomain',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > - The maximum number of times that each user can call this operation per second is 30.
  * - You can specify multiple domain names (no more than 50) and separate them with commas (,).
  *
  * @param request BatchUpdateCdnDomainRequest
  * @return BatchUpdateCdnDomainResponse
 */
async function batchUpdateCdnDomain(request: BatchUpdateCdnDomainRequest): BatchUpdateCdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchUpdateCdnDomainWithOptions(request, runtime);
}

model CreateCdnCertificateSigningRequestRequest {
  city?: string(name='City', description='The city to which the organization belongs. Default value: Hangzhou.', example='Hangzhou'),
  commonName?: string(name='CommonName', description='The email address that can be used to contact the organization.', example='CommonName'),
  country?: string(name='Country', description='The content of the CSR.', example='CN'),
  email?: string(name='Email', description='The operation that you want to perform. Set the value to **CreateCdnCertificateSigningRequest**.', example='username@example.com'),
  organization?: string(name='Organization', description='The Subject Alternative Name (SAN) extension of the SSL certificate. This extension is used to add domain names to the certificate. Separate multiple domain names with commas (,).', example='Alibaba Inc'),
  organizationUnit?: string(name='OrganizationUnit', description='The MD5 value of the certificate public key.', example='Aliyun CDN'),
  SANs?: string(name='SANs', description='The Common Name of the certificate.', example='example.com'),
  state?: string(name='State', description='The name of the organization. Default value: Alibaba Inc.', example='Zhejiang'),
}

model CreateCdnCertificateSigningRequestResponseBody = {
  commonName?: string(name='CommonName', description='The name of the organization unit. Default value: Aliyun CDN.', example='CommonName'),
  csr?: string(name='Csr', description='The Common Name of the SSL certificate.', example='CSRName'),
  pubMd5?: string(name='PubMd5', description='The provincial district to which the organization belongs. Default value: Zhejiang.', example='629bf4fd8104eda171135bcb0f77****'),
  requestId?: string(name='RequestId', description='The country to which the organization belongs. Default value: CN.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model CreateCdnCertificateSigningRequestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCdnCertificateSigningRequestResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request CreateCdnCertificateSigningRequestRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateCdnCertificateSigningRequestResponse
 */
async function createCdnCertificateSigningRequestWithOptions(request: CreateCdnCertificateSigningRequestRequest, runtime: Util.RuntimeOptions): CreateCdnCertificateSigningRequestResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.city)) {
    query['City'] = request.city;
  }
  if (!Util.isUnset(request.commonName)) {
    query['CommonName'] = request.commonName;
  }
  if (!Util.isUnset(request.country)) {
    query['Country'] = request.country;
  }
  if (!Util.isUnset(request.email)) {
    query['Email'] = request.email;
  }
  if (!Util.isUnset(request.organization)) {
    query['Organization'] = request.organization;
  }
  if (!Util.isUnset(request.organizationUnit)) {
    query['OrganizationUnit'] = request.organizationUnit;
  }
  if (!Util.isUnset(request.SANs)) {
    query['SANs'] = request.SANs;
  }
  if (!Util.isUnset(request.state)) {
    query['State'] = request.state;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCdnCertificateSigningRequest',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request CreateCdnCertificateSigningRequestRequest
  * @return CreateCdnCertificateSigningRequestResponse
 */
async function createCdnCertificateSigningRequest(request: CreateCdnCertificateSigningRequestRequest): CreateCdnCertificateSigningRequestResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCdnCertificateSigningRequestWithOptions(request, runtime);
}

model CreateCdnDeliverTaskRequest {
  deliver?: string(name='Deliver', description='The ID of the tracking task.', example='The ID of the request.'),
  domainName?: string(name='DomainName', description='The method that is used to send operations reports. Operations reports are sent to you only by email. The settings must be escaped in JSON.', example='www.example1.com,www.example2.com'),
  name?: string(name='Name', description='> You can call this operation up to three times per second per account.', example='The name of the tracking task.'),
  reports?: string(name='Reports', description='The operations reports that are tracked by the task. The data must be escaped in JSON.', example='The domain names to be tracked. Separate multiple domain names with commas (,). You can specify up to 500 domain names. If you want to specify more than 500 domain names, [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.2020520001.aliyun_topbar.18.dbd44bd3e4f845#/ticket/createIndex).  

>  If you do not specify a domain name, the custom operations reports are created for all domain names that belong to your Alibaba Cloud account.'),
  schedule?: string(name='Schedule', description='The parameters that specify the time interval at which the tracking task sends operations reports. The settings must be escaped in JSON.', example='The parameters that specify the time interval at which the tracking task sends operations reports. The settings must be escaped in JSON.'),
}

model CreateCdnDeliverTaskResponseBody = {
  deliverId?: string(name='DeliverId', description='**Fields of the ReDatas parameter**

| Parameter | Type | Required | Description |
| --------- | ---- | -------- | ----------- |
| reportId | String | Yes | The ID of the operations report. |
| conditions | ConDatas[] | No | The filter conditions for the operations report. |

**Fields of the ConDatas parameter**

| Parameter | Type | Required | Description |
| --------- | ---- | -------- | ----------- |
| field | String | No | The filter field. |
| op | String | No | The filter operation. |
| value | String[] | No | The array of field values. |

**Fields of the email parameter**

| Parameter | Type | Required | Description |
| --------- | ---- | -------- | ----------- |
| subject | String | Yes | The email subject. |
| to | String[] | Yes | The email addresses to which operations reports are sent. |

**Fields of the Deliver parameter**

| Parameter | Type | Required | Description |
| --------- | ---- | -------- | ----------- |
| subject | String | No | The email subject. |
| to | String[] | Yes | The email addresses to which operations reports are sent. |

**Fields of the Schedule parameter**

| Parameter | Type | Required | Description |
| --------- | ---- | -------- | ----------- |
| schedName | String | No | The name of the tracking task. |
| description | String | No | The description of the tracking task. |
| crontab | String | Yes | The period during which the operations reports are tracked. |
| frequency | String | Yes | The interval at which the reports are sent. Valid values:<br/>**h**: every hour <br/>**d**: every day <br/>**w**: every week |
| status | String | No | The status of the tracking task. Valid values:<br/>**enable**: enabled<br/>**disable**: disabled |
| effectiveFrom | String | No | The start time of the tracking task. |
| effectiveEnd | String | No | The end time of the tracking task. |', example='1025'),
  requestId?: string(name='RequestId', description='Creates a tracking task that generates operations reports. The tracking task sends operations reports to a specified email address based on a specified schedule.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model CreateCdnDeliverTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCdnDeliverTaskResponseBody(name='body'),
}

/**
  * The ID of the tracking task.
  *
  * @param request CreateCdnDeliverTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateCdnDeliverTaskResponse
 */
async function createCdnDeliverTaskWithOptions(request: CreateCdnDeliverTaskRequest, runtime: Util.RuntimeOptions): CreateCdnDeliverTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deliver)) {
    body['Deliver'] = request.deliver;
  }
  if (!Util.isUnset(request.domainName)) {
    body['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.reports)) {
    body['Reports'] = request.reports;
  }
  if (!Util.isUnset(request.schedule)) {
    body['Schedule'] = request.schedule;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateCdnDeliverTask',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the tracking task.
  *
  * @param request CreateCdnDeliverTaskRequest
  * @return CreateCdnDeliverTaskResponse
 */
async function createCdnDeliverTask(request: CreateCdnDeliverTaskRequest): CreateCdnDeliverTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCdnDeliverTaskWithOptions(request, runtime);
}

model CreateCdnSubTaskRequest {
  domainName?: string(name='DomainName', example='www.example1.com,www.example2.com'),
  reportIds?: string(name='ReportIds', example='1,3,5'),
}

model CreateCdnSubTaskResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model CreateCdnSubTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCdnSubTaskResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request CreateCdnSubTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateCdnSubTaskResponse
 */
async function createCdnSubTaskWithOptions(request: CreateCdnSubTaskRequest, runtime: Util.RuntimeOptions): CreateCdnSubTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.domainName)) {
    body['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.reportIds)) {
    body['ReportIds'] = request.reportIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateCdnSubTask',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @param request CreateCdnSubTaskRequest
  * @return CreateCdnSubTaskResponse
 */
async function createCdnSubTask(request: CreateCdnSubTaskRequest): CreateCdnSubTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCdnSubTaskWithOptions(request, runtime);
}

model CreateRealTimeLogDeliveryRequest {
  domain?: string(name='Domain', description='The accelerated domain name for which you want to configure real-time log delivery.', example='example.com'),
  logstore?: string(name='Logstore', description='The name of the Logstore where log entries are stored.', example='LogstoreName'),
  project?: string(name='Project', description='The name of the Log Service project that is used for real-time log delivery.', example='ProjectName'),
  region?: string(name='Region', description='The ID of the region where the Log Service project is deployed. For more information, see [Regions that support real-time log delivery](~~144883~~).', example='cn-shanghai'),
}

model CreateRealTimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F32C57AA-7BF8-49AE-A2CC-9F42390F5A19'),
}

model CreateRealTimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRealTimeLogDeliveryResponseBody(name='body'),
}

/**
  * >  You can call this API operation up to 100 times per second per account.
  *
  * @param request CreateRealTimeLogDeliveryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateRealTimeLogDeliveryResponse
 */
async function createRealTimeLogDeliveryWithOptions(request: CreateRealTimeLogDeliveryRequest, runtime: Util.RuntimeOptions): CreateRealTimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRealTimeLogDelivery',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  You can call this API operation up to 100 times per second per account.
  *
  * @param request CreateRealTimeLogDeliveryRequest
  * @return CreateRealTimeLogDeliveryResponse
 */
async function createRealTimeLogDelivery(request: CreateRealTimeLogDeliveryRequest): CreateRealTimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRealTimeLogDeliveryWithOptions(request, runtime);
}

model CreateUsageDetailDataExportTaskRequest {
  domainNames?: string(name='DomainNames', example='example.com'),
  endTime?: string(name='EndTime', example='2019-12-10T21:00:00Z'),
  group?: string(name='Group', example='xxx'),
  language?: string(name='Language', example='en-us'),
  startTime?: string(name='StartTime', example='2019-12-10T20:00:00Z'),
  taskName?: string(name='TaskName'),
  type?: string(name='Type', example='flow'),
}

model CreateUsageDetailDataExportTaskResponseBody = {
  endTime?: string(name='EndTime', example='2015-12-10T21:00:00Z'),
  requestId?: string(name='RequestId', example='ED61C6C3-8241-4187-AAA7-5157AE175CEC'),
  startTime?: string(name='StartTime', example='2015-12-10T20:00:00Z'),
  taskId?: string(name='TaskId', example='123456'),
}

model CreateUsageDetailDataExportTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUsageDetailDataExportTaskResponseBody(name='body'),
}

/**
  * The ID of the task.
  *
  * @param request CreateUsageDetailDataExportTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateUsageDetailDataExportTaskResponse
 */
async function createUsageDetailDataExportTaskWithOptions(request: CreateUsageDetailDataExportTaskRequest, runtime: Util.RuntimeOptions): CreateUsageDetailDataExportTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainNames)) {
    query['DomainNames'] = request.domainNames;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateUsageDetailDataExportTask',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the task.
  *
  * @param request CreateUsageDetailDataExportTaskRequest
  * @return CreateUsageDetailDataExportTaskResponse
 */
async function createUsageDetailDataExportTask(request: CreateUsageDetailDataExportTaskRequest): CreateUsageDetailDataExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUsageDetailDataExportTaskWithOptions(request, runtime);
}

model CreateUserUsageDataExportTaskRequest {
  endTime?: string(name='EndTime', example='2015-12-10T21:00:00Z'),
  language?: string(name='Language', example='zh-cn'),
  startTime?: string(name='StartTime', example='2015-12-10T20:00:00Z'),
  taskName?: string(name='TaskName'),
}

model CreateUserUsageDataExportTaskResponseBody = {
  endTime?: string(name='EndTime', example='2015-12-10T21:00:00Z'),
  requestId?: string(name='RequestId', example='ED61C6C3-8241-4187-AAA7-5157AE175CEC'),
  startTime?: string(name='StartTime', example='2015-12-10T20:00:00Z'),
  taskId?: string(name='TaskId', example='129456'),
}

model CreateUserUsageDataExportTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUserUsageDataExportTaskResponseBody(name='body'),
}

/**
  * The ID of the task.
  *
  * @param request CreateUserUsageDataExportTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateUserUsageDataExportTaskResponse
 */
async function createUserUsageDataExportTaskWithOptions(request: CreateUserUsageDataExportTaskRequest, runtime: Util.RuntimeOptions): CreateUserUsageDataExportTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateUserUsageDataExportTask',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the task.
  *
  * @param request CreateUserUsageDataExportTaskRequest
  * @return CreateUserUsageDataExportTaskResponse
 */
async function createUserUsageDataExportTask(request: CreateUserUsageDataExportTaskRequest): CreateUserUsageDataExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserUsageDataExportTaskWithOptions(request, runtime);
}

model DeleteCdnDeliverTaskRequest {
  deliverId?: long(name='DeliverId', description='The IDs of the tracking tasks that you want to delete. You can call the [DescribeCdnDeliverList](~~270877~~) operation to query task IDs.', example='1'),
}

model DeleteCdnDeliverTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteCdnDeliverTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCdnDeliverTaskResponseBody(name='body'),
}

/**
  * >  You can call this operation up to three times per second per account.
  *
  * @param request DeleteCdnDeliverTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteCdnDeliverTaskResponse
 */
async function deleteCdnDeliverTaskWithOptions(request: DeleteCdnDeliverTaskRequest, runtime: Util.RuntimeOptions): DeleteCdnDeliverTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deliverId)) {
    query['DeliverId'] = request.deliverId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCdnDeliverTask',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  You can call this operation up to three times per second per account.
  *
  * @param request DeleteCdnDeliverTaskRequest
  * @return DeleteCdnDeliverTaskResponse
 */
async function deleteCdnDeliverTask(request: DeleteCdnDeliverTaskRequest): DeleteCdnDeliverTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCdnDeliverTaskWithOptions(request, runtime);
}

model DeleteCdnDomainRequest {
  domainName?: string(name='DomainName', description='The ID of the request.', example='example.com'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
}

model DeleteCdnDomainResponseBody = {
  requestId?: string(name='RequestId', description='1.0.0', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model DeleteCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCdnDomainResponseBody(name='body'),
}

/**
  * The accelerated domain name that you want to delete. You can specify only one domain name in each call.
  *
  * @param request DeleteCdnDomainRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteCdnDomainResponse
 */
async function deleteCdnDomainWithOptions(request: DeleteCdnDomainRequest, runtime: Util.RuntimeOptions): DeleteCdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCdnDomain',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The accelerated domain name that you want to delete. You can specify only one domain name in each call.
  *
  * @param request DeleteCdnDomainRequest
  * @return DeleteCdnDomainResponse
 */
async function deleteCdnDomain(request: DeleteCdnDomainRequest): DeleteCdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCdnDomainWithOptions(request, runtime);
}

model DeleteCdnSubTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteCdnSubTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCdnSubTaskResponseBody(name='body'),
}

/**
  * >  You can call this API operation up to three times per second per account.
  *
  * @param request DeleteCdnSubTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteCdnSubTaskResponse
 */
async function deleteCdnSubTaskWithOptions(runtime: Util.RuntimeOptions): DeleteCdnSubTaskResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DeleteCdnSubTask',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  You can call this API operation up to three times per second per account.
  *
  * @return DeleteCdnSubTaskResponse
 */
async function deleteCdnSubTask(): DeleteCdnSubTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCdnSubTaskWithOptions(runtime);
}

model DeleteFCTriggerRequest {
  triggerARN?: string(name='TriggerARN', description='The trigger that corresponds to the Function Compute service.', example='acs:cdn:{RegionID}:{AccountID}:{Filter}'),
}

model DeleteFCTriggerResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC046C5D-8CB4-4B6B-B7F8-B335E51EF90E'),
}

model DeleteFCTriggerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFCTriggerResponseBody(name='body'),
}

async function deleteFCTriggerWithOptions(request: DeleteFCTriggerRequest, runtime: Util.RuntimeOptions): DeleteFCTriggerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.triggerARN)) {
    query['TriggerARN'] = request.triggerARN;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFCTrigger',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFCTrigger(request: DeleteFCTriggerRequest): DeleteFCTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFCTriggerWithOptions(request, runtime);
}

model DeleteRealTimeLogLogstoreRequest {
  logstore?: string(name='Logstore', description='The ID of the region where the Log Service project is deployed. For more information, see [Regions that support real-time log delivery](~~144883~~).', example='LogstoreName'),
  project?: string(name='Project', description='Deletes the Logstore that is used by a specified configuration record of real-time
                  log delivery.', example='ProjectName'),
  region?: string(name='Region', description='The name of the Log Service project that is used for real-time log delivery.', example='cn-shanghai'),
}

model DeleteRealTimeLogLogstoreResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9732E117-8A37-49FD-A36F-ABBB87556CA7'),
}

model DeleteRealTimeLogLogstoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRealTimeLogLogstoreResponseBody(name='body'),
}

/**
  * >  You can call this operation up to 100 times per second per account.
  *
  * @param request DeleteRealTimeLogLogstoreRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteRealTimeLogLogstoreResponse
 */
async function deleteRealTimeLogLogstoreWithOptions(request: DeleteRealTimeLogLogstoreRequest, runtime: Util.RuntimeOptions): DeleteRealTimeLogLogstoreResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRealTimeLogLogstore',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  You can call this operation up to 100 times per second per account.
  *
  * @param request DeleteRealTimeLogLogstoreRequest
  * @return DeleteRealTimeLogLogstoreResponse
 */
async function deleteRealTimeLogLogstore(request: DeleteRealTimeLogLogstoreRequest): DeleteRealTimeLogLogstoreResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRealTimeLogLogstoreWithOptions(request, runtime);
}

model DeleteRealtimeLogDeliveryRequest {
  domain?: string(name='Domain', description='The acceleration domain name for which you want to disable real-time log delivery. You can specify multiple domain names and separate them with commas (,).', example='example.com'),
  logstore?: string(name='Logstore', description='The name of the Logstore where log entries are stored.', example='LogstoreName'),
  project?: string(name='Project', description='The name of the Log Service project that is used for real-time log delivery.', example='ProjectName'),
  region?: string(name='Region', description='The ID of the region where the Log Service project is deployed. For more information, see [Regions that support real-time log delivery](~~144883~~).', example='cn-shanghai'),
}

model DeleteRealtimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9732E117-8A37-49FD-A36F-ABBB87556CA7'),
}

model DeleteRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRealtimeLogDeliveryResponseBody(name='body'),
}

/**
  * > You can call this operation up to 100 times per second per account.
  *
  * @param request DeleteRealtimeLogDeliveryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteRealtimeLogDeliveryResponse
 */
async function deleteRealtimeLogDeliveryWithOptions(request: DeleteRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): DeleteRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRealtimeLogDelivery',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can call this operation up to 100 times per second per account.
  *
  * @param request DeleteRealtimeLogDeliveryRequest
  * @return DeleteRealtimeLogDeliveryResponse
 */
async function deleteRealtimeLogDelivery(request: DeleteRealtimeLogDeliveryRequest): DeleteRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRealtimeLogDeliveryWithOptions(request, runtime);
}

model DeleteSpecificConfigRequest {
  configId?: string(name='ConfigId', description='The configuration IDs. Separate configuration IDs with commas (,). For more information about ConfigId, see [Usage notes on ConfigId](~~388994~~).', example='2317'),
  domainName?: string(name='DomainName', description='The operation that you want to perform. Set the value to **DeleteSpecificConfig**.', example='example.com'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DeleteSpecificConfigResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteSpecificConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSpecificConfigResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request DeleteSpecificConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteSpecificConfigResponse
 */
async function deleteSpecificConfigWithOptions(request: DeleteSpecificConfigRequest, runtime: Util.RuntimeOptions): DeleteSpecificConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSpecificConfig',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @param request DeleteSpecificConfigRequest
  * @return DeleteSpecificConfigResponse
 */
async function deleteSpecificConfig(request: DeleteSpecificConfigRequest): DeleteSpecificConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSpecificConfigWithOptions(request, runtime);
}

model DeleteSpecificStagingConfigRequest {
  configId?: string(name='ConfigId', description='The configuration IDs. Separate configuration IDs with commas (,). For more information about ConfigId, see [Usage notes on ConfigId](~~388994~~).', example='2317'),
  domainName?: string(name='DomainName', description='The operation that you want to perform. Set the value to **DeleteSpecificStagingConfig**.', example='example.com'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DeleteSpecificStagingConfigResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DeleteSpecificStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSpecificStagingConfigResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request DeleteSpecificStagingConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteSpecificStagingConfigResponse
 */
async function deleteSpecificStagingConfigWithOptions(request: DeleteSpecificStagingConfigRequest, runtime: Util.RuntimeOptions): DeleteSpecificStagingConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSpecificStagingConfig',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @param request DeleteSpecificStagingConfigRequest
  * @return DeleteSpecificStagingConfigResponse
 */
async function deleteSpecificStagingConfig(request: DeleteSpecificStagingConfigRequest): DeleteSpecificStagingConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSpecificStagingConfigWithOptions(request, runtime);
}

model DeleteUsageDetailDataExportTaskRequest {
  taskId?: string(name='TaskId', description='The ID of the task. You can call the [DescribeUserUsageDataExportTask](~~91062~~) operation to query the most recent task list.', example='10'),
}

model DeleteUsageDetailDataExportTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model DeleteUsageDetailDataExportTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteUsageDetailDataExportTaskResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DeleteUsageDetailDataExportTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteUsageDetailDataExportTaskResponse
 */
async function deleteUsageDetailDataExportTaskWithOptions(request: DeleteUsageDetailDataExportTaskRequest, runtime: Util.RuntimeOptions): DeleteUsageDetailDataExportTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUsageDetailDataExportTask',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DeleteUsageDetailDataExportTaskRequest
  * @return DeleteUsageDetailDataExportTaskResponse
 */
async function deleteUsageDetailDataExportTask(request: DeleteUsageDetailDataExportTaskRequest): DeleteUsageDetailDataExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUsageDetailDataExportTaskWithOptions(request, runtime);
}

model DeleteUserUsageDataExportTaskRequest {
  taskId?: string(name='TaskId', description='The ID of the export task that you want to delete.', example='10'),
}

model DeleteUserUsageDataExportTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model DeleteUserUsageDataExportTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteUserUsageDataExportTaskResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DeleteUserUsageDataExportTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteUserUsageDataExportTaskResponse
 */
async function deleteUserUsageDataExportTaskWithOptions(request: DeleteUserUsageDataExportTaskRequest, runtime: Util.RuntimeOptions): DeleteUserUsageDataExportTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUserUsageDataExportTask',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DeleteUserUsageDataExportTaskRequest
  * @return DeleteUserUsageDataExportTaskResponse
 */
async function deleteUserUsageDataExportTask(request: DeleteUserUsageDataExportTaskRequest): DeleteUserUsageDataExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserUsageDataExportTaskWithOptions(request, runtime);
}

model DescribeBlockedRegionsRequest {
  language?: string(name='Language', description='The language. Valid values:

*   **zh**: simplified Chinese
*   **en**: English
*   **jp**: Japanese', example='zh'),
}

model DescribeBlockedRegionsResponseBody = {
  infoList?: {
    infoItem?: [ 
    {
      continent?: string(name='Continent', description='The district to which the country or region belongs.', example='Asia'),
      countriesAndRegions?: string(name='CountriesAndRegions', description='The abbreviation of the name of the country or region.', example='AF'),
      countriesAndRegionsName?: string(name='CountriesAndRegionsName', description='The name of the country or region.', example='Afghanistan'),
    }
  ](name='InfoItem')
  }(name='InfoList', description='The information returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BFFCDFAD-DACC-484E-9BE6-0AF3B3A0DD23'),
}

model DescribeBlockedRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBlockedRegionsResponseBody(name='body'),
}

/**
  * > You can call this operation up to 50 times per second per account.
  *
  * @param request DescribeBlockedRegionsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeBlockedRegionsResponse
 */
async function describeBlockedRegionsWithOptions(request: DescribeBlockedRegionsRequest, runtime: Util.RuntimeOptions): DescribeBlockedRegionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBlockedRegions',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can call this operation up to 50 times per second per account.
  *
  * @param request DescribeBlockedRegionsRequest
  * @return DescribeBlockedRegionsResponse
 */
async function describeBlockedRegions(request: DescribeBlockedRegionsRequest): DescribeBlockedRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBlockedRegionsWithOptions(request, runtime);
}

model DescribeCdnCertificateDetailRequest {
  certName?: string(name='CertName', description='The ID of the SSL certificate. You can query only one certificate at a time.', example='cert-15480655xxxx'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeCdnCertificateDetailResponseBody = {
  cert?: string(name='Cert', description='The certificate.', example='-----BEGIN CERTIFICATE-----\\nMIIFzDCCBLSgAwIBxxxx'),
  certId?: long(name='CertId', description='The ID of the certificate.', example='881049'),
  certName?: string(name='CertName', description='The name of the certificate.', example='cert-15480655xxxx'),
  key?: string(name='Key', description='The key of the SSL certificate.', example='xxxx'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model DescribeCdnCertificateDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnCertificateDetailResponseBody(name='body'),
}

/**
  * > You can call this operation up to 20 times per second per account.
  *
  * @param request DescribeCdnCertificateDetailRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnCertificateDetailResponse
 */
async function describeCdnCertificateDetailWithOptions(request: DescribeCdnCertificateDetailRequest, runtime: Util.RuntimeOptions): DescribeCdnCertificateDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certName)) {
    query['CertName'] = request.certName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnCertificateDetail',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can call this operation up to 20 times per second per account.
  *
  * @param request DescribeCdnCertificateDetailRequest
  * @return DescribeCdnCertificateDetailResponse
 */
async function describeCdnCertificateDetail(request: DescribeCdnCertificateDetailRequest): DescribeCdnCertificateDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnCertificateDetailWithOptions(request, runtime);
}

model DescribeCdnCertificateListRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. Separate multiple accelerated domain names with commas (,).

If you do not specify an accelerated domain name, SSL certificates of all your accelerated domain names are queried.', example='example.com'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeCdnCertificateListResponseBody = {
  certificateListModel?: {
    certList?: {
      cert?: [ 
      {
        certId?: long(name='CertId', description='The ID of the certificate.', example='1'),
        certName?: string(name='CertName', description='The name of the certificate.', example='Certificate1'),
        common?: string(name='Common', description='The Common Name (CN) attribute of the certificate. In most cases, the CN is a domain name.', example='example.com'),
        fingerprint?: string(name='Fingerprint', description='The fingerprint of the certificate.', example='2ED68FD33786C5B42950D40A6C50353575BB****'),
        issuer?: string(name='Issuer', description='The certificate authority (CA) that issued the certificate.', example='CO****'),
        lastTime?: long(name='LastTime', description='The timestamp.', example='1512388610'),
      }
    ](name='Cert')
    }(name='CertList', description='The list of certificates.'),
    count?: int32(name='Count', description='The number of certificates that are returned.', example='2'),
  }(name='CertificateListModel', description='Details about certificates.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FC0E34AC-0239-44A7-AB0E-800DE522C8DA'),
}

model DescribeCdnCertificateListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnCertificateListResponseBody(name='body'),
}

/**
  * > You can call this operation up to 30 times per second per account.
  *
  * @param request DescribeCdnCertificateListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnCertificateListResponse
 */
async function describeCdnCertificateListWithOptions(request: DescribeCdnCertificateListRequest, runtime: Util.RuntimeOptions): DescribeCdnCertificateListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnCertificateList',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can call this operation up to 30 times per second per account.
  *
  * @param request DescribeCdnCertificateListRequest
  * @return DescribeCdnCertificateListResponse
 */
async function describeCdnCertificateList(request: DescribeCdnCertificateListRequest): DescribeCdnCertificateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnCertificateListWithOptions(request, runtime);
}

model DescribeCdnDeletedDomainsRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: **1** to **100000**. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of domain names to return per page. Valid values: an integer between **1** and **500**. Default value: **20**.', example='5'),
}

model DescribeCdnDeletedDomainsResponseBody = {
  domains?: {
    pageData?: [ 
    {
      domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
      gmtModified?: string(name='GmtModified', description='The time when the accelerated domain name was modified. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2015-10-28T11:05:52Z'),
    }
  ](name='PageData')
  }(name='Domains', description='The list of accelerated domain names and the time each domain name was last modified.'),
  pageNumber?: long(name='PageNumber', description='The page number of the returned page, which is the same as the **PageNumber** parameter in request parameters.', example='1'),
  pageSize?: long(name='PageSize', description='The number of domain names returned per page, which is the same as the **PageSize** parameter in request parameters.', example='5'),
  requestId?: string(name='RequestId', description='The request ID.', example='AA75AADB-5E25-4970-B480-EAA1F5658483'),
  totalCount?: long(name='TotalCount', description='The total number of domain names returned.', example='16'),
}

model DescribeCdnDeletedDomainsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnDeletedDomainsResponseBody(name='body'),
}

/**
  * > You can call this operation up to 10 times per second per account.
  *
  * @param request DescribeCdnDeletedDomainsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnDeletedDomainsResponse
 */
async function describeCdnDeletedDomainsWithOptions(request: DescribeCdnDeletedDomainsRequest, runtime: Util.RuntimeOptions): DescribeCdnDeletedDomainsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnDeletedDomains',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can call this operation up to 10 times per second per account.
  *
  * @param request DescribeCdnDeletedDomainsRequest
  * @return DescribeCdnDeletedDomainsResponse
 */
async function describeCdnDeletedDomains(request: DescribeCdnDeletedDomainsRequest): DescribeCdnDeletedDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnDeletedDomainsWithOptions(request, runtime);
}

model DescribeCdnDeliverListRequest {
  deliverId?: long(name='DeliverId', description='The ID of the tracking task that you want to query. If you do not specify an ID, all tracking tasks are queried.', example='3'),
}

model DescribeCdnDeliverListResponseBody = {
  content?: string(name='Content', description='The information about the tracking task.', example='"data": \\[{"deliverId": 1,"status": "enable","createTime": "2020-10-14T11:19:26Z","crontab": "0 0 0 \\* \\* ?","frequency": "d","name": "The name of the tracking task","dmList": \\["www.example.com"],"reports": \\[{"reportId": 1,"conditions": \\[{"op": "in","field": "prov","value": \\["Heilongjiang","Beijing"]}} },{"reportId": 2}],"deliver": {"email": {"subject": "subject","to": \\["example@alibaba-inc.com","example@alibaba-inc.com"]}}}]}'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='12345'),
}

model DescribeCdnDeliverListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnDeliverListResponseBody(name='body'),
}

/**
  * > You can call this operation up to 3 times per second per account.
  *
  * @param request DescribeCdnDeliverListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnDeliverListResponse
 */
async function describeCdnDeliverListWithOptions(request: DescribeCdnDeliverListRequest, runtime: Util.RuntimeOptions): DescribeCdnDeliverListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deliverId)) {
    query['DeliverId'] = request.deliverId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnDeliverList',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can call this operation up to 3 times per second per account.
  *
  * @param request DescribeCdnDeliverListRequest
  * @return DescribeCdnDeliverListResponse
 */
async function describeCdnDeliverList(request: DescribeCdnDeliverListRequest): DescribeCdnDeliverListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnDeliverListWithOptions(request, runtime);
}

model DescribeCdnDomainByCertificateRequest {
  SSLPub?: string(name='SSLPub', description='The public key of the SSL certificate. You must encode the public key in Base64 before you invoke the encodeURIComponent function to encode a URI component.

A public key in the Privacy Enhanced Mail (PEM) format is supported.', example='******'),
  SSLStatus?: boolean(name='SSLStatus', description='Specifies whether to return only domain names with HTTPS enabled or disabled.

*   true: returns only domain names with HTTPS enabled.
*   false: returns only domain names with HTTPS disabled.', example='true'),
}

model DescribeCdnDomainByCertificateResponseBody = {
  certInfos?: {
    certInfo?: [ 
    {
      certCaIsLegacy?: string(name='CertCaIsLegacy', description='Indicates whether the SSL certificate is obsolete. Valid values:

*   **yes**
*   **no**', example='yes'),
      certExpireTime?: string(name='CertExpireTime', description='The expiration time of the certificate.', example='Nov 29 00:00:00 2016 GMT'),
      certExpired?: string(name='CertExpired', description='Indicates whether the SSL certificate is expired. Valid values:

*   **yes**
*   **no**', example='yes'),
      certStartTime?: string(name='CertStartTime', description='The effective time of the certificate.', example='Nov 29 23:59:59 2017 GMT'),
      certSubjectCommonName?: string(name='CertSubjectCommonName', description='The name of the SSL certificate owner.', example='owner'),
      certType?: string(name='CertType', description='The type of the certificate. Valid values: **RSA**, **DSA**, and **ECDSA**.', example='RSA'),
      domainList?: string(name='DomainList', description='The list of domain names. If a value is returned, the value matches the SSL certificate. Multiple domain names are separated by commas (,).', example='example.com,aliyundoc.com'),
      domainNames?: string(name='DomainNames', description='The domain names (DNS fields) that match the SSL certificate. Multiple domain names are separated by commas (,).', example='*.example.com,aliyundoc.com'),
      issuer?: string(name='Issuer', description='The certificate authority (CA) that issued the certificate.', example='C=US, O=Symantec Corporation, OU=Symantec Trust Network, OU=Domain Validated SSL, CN=Symantec Basic DV SSL CA - G1'),
    }
  ](name='CertInfo')
  }(name='CertInfos', description='The certificate information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ASAF2FDS-12SADSA-DDSAE3D-DSADCD4C-CDADS2D'),
}

model DescribeCdnDomainByCertificateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnDomainByCertificateResponseBody(name='body'),
}

/**
  * > You can call this operation up to 100 times per second per account.
  *
  * @param request DescribeCdnDomainByCertificateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnDomainByCertificateResponse
 */
async function describeCdnDomainByCertificateWithOptions(request: DescribeCdnDomainByCertificateRequest, runtime: Util.RuntimeOptions): DescribeCdnDomainByCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.SSLPub)) {
    query['SSLPub'] = request.SSLPub;
  }
  if (!Util.isUnset(request.SSLStatus)) {
    query['SSLStatus'] = request.SSLStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnDomainByCertificate',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can call this operation up to 100 times per second per account.
  *
  * @param request DescribeCdnDomainByCertificateRequest
  * @return DescribeCdnDomainByCertificateResponse
 */
async function describeCdnDomainByCertificate(request: DescribeCdnDomainByCertificateRequest): DescribeCdnDomainByCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnDomainByCertificateWithOptions(request, runtime);
}

model DescribeCdnDomainConfigsRequest {
  configId?: string(name='ConfigId', description='The ID of the configuration. For more information about ConfigId, see [Usage notes on ConfigId](~~388994~~).', example='6295'),
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name in each request.', example='example.com'),
  functionNames?: string(name='FunctionNames', description='The names of the features. Separate multiple feature names with commas (,). For more information, see [Parameters for configuring features for domain names](~~388460~~).', example='aliauth'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeCdnDomainConfigsResponseBody = {
  domainConfigs?: {
    domainConfig?: [ 
    {
      configId?: string(name='ConfigId', description='The ID of the configuration.', example='6295'),
      functionArgs?: {
        functionArg?: [ 
        {
          argName?: string(name='ArgName', description='The parameter name, which is the configuration item of **functionName**. You can configure multiple configuration items.', example='auth_type'),
          argValue?: string(name='ArgValue', description='The parameter value, which is the value of the configuration item of **functionName**.', example='req_auth'),
        }
      ](name='FunctionArg')
      }(name='FunctionArgs', description='The configuration of each feature.'),
      functionName?: string(name='FunctionName', description='The name of the feature.', example='aliauth'),
      parentId?: string(name='ParentId', description='The ID of the rule condition. This parameter is optional.

To create a rule condition, you can configure the **condition** feature that is described in the [Parameters for configuring features for domain names](~~388460~~) topic. A rule condition can identify parameters that are included in requests and filter requests based on the identified parameters. Each rule condition has a [ConfigId](~~388994~~). You can use ConfigId as ParentId that is referenced by other features. This way, you can combine rule conditions and features for flexible configurations.

For more information, see [BatchSetCdnDomainConfig](~~90915~~) or ParentId configuration example in this topic.', example='222728944812032'),
      status?: string(name='Status', description='The status of the configuration. Valid values:

*   **success**
*   **testing**
*   **failed**
*   **configuring**', example='success'),
    }
  ](name='DomainConfig')
  }(name='DomainConfigs', description='The configurations of the domain name.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C80705BF-0F76-41FA-BAD1-5B59296A4E59'),
}

model DescribeCdnDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnDomainConfigsResponseBody(name='body'),
}

/**
  * > You can call this operation up to 100 times per second per account.
  *
  * @param request DescribeCdnDomainConfigsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnDomainConfigsResponse
 */
async function describeCdnDomainConfigsWithOptions(request: DescribeCdnDomainConfigsRequest, runtime: Util.RuntimeOptions): DescribeCdnDomainConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.functionNames)) {
    query['FunctionNames'] = request.functionNames;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnDomainConfigs',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can call this operation up to 100 times per second per account.
  *
  * @param request DescribeCdnDomainConfigsRequest
  * @return DescribeCdnDomainConfigsResponse
 */
async function describeCdnDomainConfigs(request: DescribeCdnDomainConfigsRequest): DescribeCdnDomainConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnDomainConfigsWithOptions(request, runtime);
}

model DescribeCdnDomainDetailRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name.', example='example.com'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeCdnDomainDetailResponseBody = {
  getDomainDetailModel?: {
    cdnType?: string(name='CdnType', description='The workload type of the accelerated domain name. Valid values:

*   **web**: images and small files
*   **download**: large files
*   **video**: on-demand video and audio streaming', example='web'),
    cname?: string(name='Cname', description='The CNAME that is assigned to the accelerated domain name. You must add the CNAME record in the system of your DNS service provider to map the accelerated domain name to the CNAME.', example='example.com.w.kunlunle.com'),
    description?: string(name='Description', description='The description of the domain name.', example='Streaming domain'),
    domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
    domainStatus?: string(name='DomainStatus', description='The status of the accelerated domain name. Valid values:

*   **online**
*   **offline**
*   **configuring**
*   **configure_failed**
*   **checking**
*   **check_failed**
*   **stopping**
*   **deleting**', example='online'),
    gmtCreated?: string(name='GmtCreated', description='The time when the domain name was created.', example='2015-06-25T03:30:50Z'),
    gmtModified?: string(name='GmtModified', description='The time when the domain name was last modified.', example='2017-06-25T03:30:50Z'),
    httpsCname?: string(name='HttpsCname', description='The CNAME for which HTTPS is enabled.', example='example.com.w.kunlunle.com'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='abcd1234abcd1234'),
    scope?: string(name='Scope', description='The acceleration region.', example='domestic'),
    serverCertificateStatus?: string(name='ServerCertificateStatus', description='Indicates whether the SSL certificate is enabled. Valid values:

*   **on**
*   **off**', example='on'),
    sourceModels?: {
      sourceModel?: [ 
      {
        content?: string(name='Content', description='The address of the origin server.', example='example.com'),
        enabled?: string(name='Enabled', description='The status.', example='online'),
        port?: int32(name='Port', description='The port over which requests are redirected to the origin server. Ports 443 and 80 are supported.', example='80'),
        priority?: string(name='Priority', description='The priority.', example='20'),
        type?: string(name='Type', description='The type of the origin server. Valid values:

*   **ipaddr**: an origin IP address
*   **domain**: an origin domain name
*   **oss**: the domain name of an Object Storage Service (OSS) bucket
*   **fc_domain:** a Function Compute domain name', example='domain'),
        weight?: string(name='Weight', description='The weight of the origin server if multiple origin servers have been specified.', example='10'),
      }
    ](name='SourceModel')
    }(name='SourceModels', description='The information about the origin server.'),
  }(name='GetDomainDetailModel', description='The details about the accelerated domain name.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='18CF38AA-1275-451D-A12B-4EC0BF1C5E30'),
}

model DescribeCdnDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnDomainDetailResponseBody(name='body'),
}

/**
  * > You can call this operation up to 30 times per second per account.
  *
  * @param request DescribeCdnDomainDetailRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnDomainDetailResponse
 */
async function describeCdnDomainDetailWithOptions(request: DescribeCdnDomainDetailRequest, runtime: Util.RuntimeOptions): DescribeCdnDomainDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnDomainDetail',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can call this operation up to 30 times per second per account.
  *
  * @param request DescribeCdnDomainDetailRequest
  * @return DescribeCdnDomainDetailResponse
 */
async function describeCdnDomainDetail(request: DescribeCdnDomainDetailRequest): DescribeCdnDomainDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnDomainDetailWithOptions(request, runtime);
}

model DescribeCdnDomainLogsRequest {
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2017-12-22T08:00:00Z'),
  pageNumber?: long(name='PageNumber', example='2'),
  pageSize?: long(name='PageSize', example='300'),
  startTime?: string(name='StartTime', example='2017-12-21T08:00:00Z'),
}

model DescribeCdnDomainLogsResponseBody = {
  domainLogDetails?: {
    domainLogDetail?: [ 
    {
      domainName?: string(name='DomainName', example='example.com'),
      logCount?: long(name='LogCount', example='10'),
      logInfos?: {
        logInfoDetail?: [ 
        {
          endTime?: string(name='EndTime', example='2015-05-23T14:00:00Z'),
          logName?: string(name='LogName', example='demo.aliyundoc.com_2015_05_23_2100_2200.gz'),
          logPath?: string(name='LogPath', example='guide.aliyundoc.com-hangzhou.xxx'),
          logSize?: long(name='LogSize', example='258'),
          startTime?: string(name='StartTime', example='2015-05-23T13:00:00Z'),
        }
      ](name='LogInfoDetail')
      }(name='LogInfos'),
      pageInfos?: {
        pageIndex?: long(name='PageIndex', example='1'),
        pageSize?: long(name='PageSize', example='20'),
        total?: long(name='Total', example='20'),
      }(name='PageInfos'),
    }
  ](name='DomainLogDetail')
  }(name='DomainLogDetails'),
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model DescribeCdnDomainLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnDomainLogsResponseBody(name='body'),
}

/**
  * The total number of entries returned.
  *
  * @param request DescribeCdnDomainLogsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnDomainLogsResponse
 */
async function describeCdnDomainLogsWithOptions(request: DescribeCdnDomainLogsRequest, runtime: Util.RuntimeOptions): DescribeCdnDomainLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnDomainLogs',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The total number of entries returned.
  *
  * @param request DescribeCdnDomainLogsRequest
  * @return DescribeCdnDomainLogsResponse
 */
async function describeCdnDomainLogs(request: DescribeCdnDomainLogsRequest): DescribeCdnDomainLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnDomainLogsWithOptions(request, runtime);
}

model DescribeCdnDomainStagingConfigRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name in each request.', example='example.com'),
  functionNames?: string(name='FunctionNames', description='The list of feature names. Separate multiple values with commas (,). For more information, see [A list of features](~~388460~~).', example='aliauth'),
}

model DescribeCdnDomainStagingConfigResponseBody = {
  domainConfigs?: [ 
    {
      configId?: string(name='ConfigId', description='The configuration ID.', example='6xx5'),
      functionArgs?: [ 
        {
          argName?: string(name='ArgName', description='The configuration name.', example='auth_type'),
          argValue?: string(name='ArgValue', description='The configuration value.', example='req_auth'),
        }
      ](name='FunctionArgs', description='The description of each feature.'),
      functionName?: string(name='FunctionName', description='The feature name.', example='aliauth'),
      parentId?: string(name='ParentId', description='The rule condition ID. This parameter is optional. To create a rule condition, you can configure the **condition** feature that is described in the [Parameters for configuring features for domain names](~~388460~~) topic. A rule condition can identify parameters that are included in requests and filter requests based on the identified parameters. Each rule condition has a [ConfigId](~~388994~~). You can reference ConfigId instead of ParentId in other features. This way, you can combine rule conditions and features for flexible configurations. For more information, see [BatchSetCdnDomainConfig](~~90915~~) or ParentId configuration example in this topic.', example='222728944812032'),
      status?: string(name='Status', description='The configuration status. Valid values:

*   **testing**
*   **configuring**
*   **success**
*   **failed**', example='success'),
    }
  ](name='DomainConfigs', description='The domain name configurations.'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  requestId?: string(name='RequestId', description='The request ID.', example='C80705BF-0F76-41FA-BAD1-5B59296A4E59'),
}

model DescribeCdnDomainStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnDomainStagingConfigResponseBody(name='body'),
}

/**
  * > You can call this operation up to 30 times per second per account.
  *
  * @param request DescribeCdnDomainStagingConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnDomainStagingConfigResponse
 */
async function describeCdnDomainStagingConfigWithOptions(request: DescribeCdnDomainStagingConfigRequest, runtime: Util.RuntimeOptions): DescribeCdnDomainStagingConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.functionNames)) {
    query['FunctionNames'] = request.functionNames;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnDomainStagingConfig',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can call this operation up to 30 times per second per account.
  *
  * @param request DescribeCdnDomainStagingConfigRequest
  * @return DescribeCdnDomainStagingConfigResponse
 */
async function describeCdnDomainStagingConfig(request: DescribeCdnDomainStagingConfigRequest): DescribeCdnDomainStagingConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnDomainStagingConfigWithOptions(request, runtime);
}

model DescribeCdnHttpsDomainListRequest {
  keyword?: string(name='Keyword', description='The keyword that is used to search for certificates.', example='com'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: **1** to **100000**.', example='5'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20'),
}

model DescribeCdnHttpsDomainListResponseBody = {
  certInfos?: {
    certInfo?: [ 
    {
      certCommonName?: string(name='CertCommonName', description='The returned primary domain name of the certificate.', example='example.org'),
      certExpireTime?: string(name='CertExpireTime', description='The time at which the certificate expires.', example='2018-12-26 14:45:09'),
      certName?: string(name='CertName', description='The name of the certificate.', example='test'),
      certStartTime?: string(name='CertStartTime', description='The time at which the certificate became effective.', example='2018-11-26 14:45:09'),
      certStatus?: string(name='CertStatus', description='The status of the certificate.

*   **ok**: The certificate is working as expected.
*   **mismatch**: The certificate does not match the specified domain name.
*   **expired**: The certificate has expired.
*   **expire_soon**: The certificate will expire soon.', example='mismatch'),
      certType?: string(name='CertType', description='The type of the certificate.

*   **free**: a free certificate.
*   **cas**: a certificate that is purchased from Alibaba Cloud SSL Certificates Service.
*   **upload**: a certificate that is uploaded by the user.', example='free'),
      certUpdateTime?: string(name='CertUpdateTime', description='The time at which the certificate was updated.', example='2019-01-08 18:33:16'),
      domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
    }
  ](name='CertInfo')
  }(name='CertInfos', description='The information about the certificate.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F5E8DF64-7175-4186-9B06-F002C0BBD0C5'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='16'),
}

model DescribeCdnHttpsDomainListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnHttpsDomainListResponseBody(name='body'),
}

/**
  * > You can call this operation up to 100 times per second per account.
  *
  * @param request DescribeCdnHttpsDomainListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnHttpsDomainListResponse
 */
async function describeCdnHttpsDomainListWithOptions(request: DescribeCdnHttpsDomainListRequest, runtime: Util.RuntimeOptions): DescribeCdnHttpsDomainListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnHttpsDomainList',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can call this operation up to 100 times per second per account.
  *
  * @param request DescribeCdnHttpsDomainListRequest
  * @return DescribeCdnHttpsDomainListResponse
 */
async function describeCdnHttpsDomainList(request: DescribeCdnHttpsDomainListRequest): DescribeCdnHttpsDomainListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnHttpsDomainListWithOptions(request, runtime);
}

model DescribeCdnOrderCommodityCodeRequest {
  commodityCode?: string(name='CommodityCode', description='The original commodity code.', example='xxx'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeCdnOrderCommodityCodeResponseBody = {
  orderCommodityCode?: string(name='OrderCommodityCode', description='The commodity code that includes the organization unit.', example='xxx'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BFFCDFAD-DACC-484E-9BE6-0AF3B3A0DD23'),
}

model DescribeCdnOrderCommodityCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnOrderCommodityCodeResponseBody(name='body'),
}

async function describeCdnOrderCommodityCodeWithOptions(request: DescribeCdnOrderCommodityCodeRequest, runtime: Util.RuntimeOptions): DescribeCdnOrderCommodityCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.commodityCode)) {
    query['CommodityCode'] = request.commodityCode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnOrderCommodityCode',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCdnOrderCommodityCode(request: DescribeCdnOrderCommodityCodeRequest): DescribeCdnOrderCommodityCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnOrderCommodityCodeWithOptions(request, runtime);
}

model DescribeCdnRegionAndIspRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeCdnRegionAndIspResponseBody = {
  isps?: {
    isp?: [ 
    {
      nameEn?: string(name='NameEn', description='The English name of the ISP.', example='unicom'),
      nameZh?: string(name='NameZh', description='The Chinese name of the ISP.'),
    }
  ](name='Isp')
  }(name='Isps', description='The list of ISPs.'),
  regions?: {
    region?: [ 
    {
      nameEn?: string(name='NameEn', description='The English name of the region.', example='liaoning'),
      nameZh?: string(name='NameZh', description='The Chinese name of the region.'),
    }
  ](name='Region')
  }(name='Regions', description='The list of regions.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2387C335-932C-4E1E-862C-1C4363B6DE72'),
}

model DescribeCdnRegionAndIspResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnRegionAndIspResponseBody(name='body'),
}

/**
  * *   The lists of ISPs and regions that are supported by Alibaba Cloud CDN are updated and published on the Alibaba Cloud International site.
  * *   You can call this operation up to 30 times per second per account.
  *
  * @param request DescribeCdnRegionAndIspRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnRegionAndIspResponse
 */
async function describeCdnRegionAndIspWithOptions(request: DescribeCdnRegionAndIspRequest, runtime: Util.RuntimeOptions): DescribeCdnRegionAndIspResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnRegionAndIsp',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   The lists of ISPs and regions that are supported by Alibaba Cloud CDN are updated and published on the Alibaba Cloud International site.
  * *   You can call this operation up to 30 times per second per account.
  *
  * @param request DescribeCdnRegionAndIspRequest
  * @return DescribeCdnRegionAndIspResponse
 */
async function describeCdnRegionAndIsp(request: DescribeCdnRegionAndIspRequest): DescribeCdnRegionAndIspResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnRegionAndIspWithOptions(request, runtime);
}

model DescribeCdnReportRequest {
  area?: string(name='Area', example='shanghai'),
  domainName?: string(name='DomainName', example='www.example1.com,example2.com'),
  endTime?: string(name='EndTime', example='2020-09-17T01:00:00Z'),
  httpCode?: string(name='HttpCode', example='2xx'),
  isOverseas?: string(name='IsOverseas', example='0'),
  reportId?: long(name='ReportId', example='1'),
  startTime?: string(name='StartTime', example='2020-09-17T00:00:00Z'),
}

model DescribeCdnReportResponseBody = {
  content?: map[string]any(name='Content', example='"data":[{"deliver":{"report":{"title":"TopUrlByAcc","format":"table","shape":"","header":["url","traf","traf_rate","acc","acc_rate"]}},"data":[{"acc":440,"acc_rate":"0.200%","traf":22,"url":"http://demo.com","traf_rate":"0.100%"},{"acc":440,"acc_rate":"0.200%","traf":22,"url":"http://demo.com","traf_rate":"0.100%"}]}]}}'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DescribeCdnReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnReportResponseBody(name='body'),
}

/**
  * The end of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
  *
  * @param request DescribeCdnReportRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnReportResponse
 */
async function describeCdnReportWithOptions(request: DescribeCdnReportRequest, runtime: Util.RuntimeOptions): DescribeCdnReportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.area)) {
    query['Area'] = request.area;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.httpCode)) {
    query['HttpCode'] = request.httpCode;
  }
  if (!Util.isUnset(request.isOverseas)) {
    query['IsOverseas'] = request.isOverseas;
  }
  if (!Util.isUnset(request.reportId)) {
    query['ReportId'] = request.reportId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnReport',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The end of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
  *
  * @param request DescribeCdnReportRequest
  * @return DescribeCdnReportResponse
 */
async function describeCdnReport(request: DescribeCdnReportRequest): DescribeCdnReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnReportWithOptions(request, runtime);
}

model DescribeCdnReportListRequest {
  reportId?: long(name='ReportId', description='The ID of the operations report that you want to query. If you do not specify an ID, all operations reports are queried.', example='1'),
}

model DescribeCdnReportListResponseBody = {
  content?: string(name='Content', description='The information about the report that is queried.', example='"data":[{"reportId":1,"deliver":{"report":{"title":"DomainPvUv","format":"chart","shape":"line","xAxis":"ds","yAxis":"cnt","legend":"cnt_type","header":["ds","cnt_type","cnt"]}}}'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DescribeCdnReportListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnReportListResponseBody(name='body'),
}

/**
  * *   This operation queries the metadata of all operations reports. The statistics in the reports are not returned.
  * *   You can call this operation up to three times per second per account.
  *
  * @param request DescribeCdnReportListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnReportListResponse
 */
async function describeCdnReportListWithOptions(request: DescribeCdnReportListRequest, runtime: Util.RuntimeOptions): DescribeCdnReportListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.reportId)) {
    query['ReportId'] = request.reportId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnReportList',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   This operation queries the metadata of all operations reports. The statistics in the reports are not returned.
  * *   You can call this operation up to three times per second per account.
  *
  * @param request DescribeCdnReportListRequest
  * @return DescribeCdnReportListResponse
 */
async function describeCdnReportList(request: DescribeCdnReportListRequest): DescribeCdnReportListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnReportListWithOptions(request, runtime);
}

model DescribeCdnSMCertificateDetailRequest {
  certIdentifier?: string(name='CertIdentifier', description='The ID of the certificate.', example='648****-cn-hangzhou'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeCdnSMCertificateDetailResponseBody = {
  certExpireTime?: string(name='CertExpireTime', description='The name of the certificate.', example='2022-08-31T09:42:28Z'),
  certIdentifier?: string(name='CertIdentifier', description='The ID of the certificate.', example='648****-cn-hangzhou'),
  certName?: string(name='CertName', description='The time when the certificate expires. The time is displayed in UTC.', example='yourCertName'),
  certOrg?: string(name='CertOrg', description='The certificate authority (CA) that issued the certificate.', example='DigiCert Inc'),
  commonName?: string(name='CommonName', description='The top-level domain name.', example='example.com'),
  encryptCertificate?: string(name='EncryptCertificate', description='The ID of the request.', example='-BEGIN CERTIFICATE-----***-----END CERTIFICATE--'),
  requestId?: string(name='RequestId', description='The content of the encryption certificate.', example='A7C69682-7F88-40DD-A198-10D0309E439D'),
  sans?: string(name='Sans', description='The subdomain name.', example='***.example.com'),
  signCertificate?: string(name='SignCertificate', description='The content of the signature certificate.', example='--BEGIN CERTIFICATE-----***-----END CERTIFICATE--'),
}

model DescribeCdnSMCertificateDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnSMCertificateDetailResponseBody(name='body'),
}

/**
  * >  You can call this operation up to 20 times per second.
  *
  * @param request DescribeCdnSMCertificateDetailRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnSMCertificateDetailResponse
 */
async function describeCdnSMCertificateDetailWithOptions(request: DescribeCdnSMCertificateDetailRequest, runtime: Util.RuntimeOptions): DescribeCdnSMCertificateDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certIdentifier)) {
    query['CertIdentifier'] = request.certIdentifier;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnSMCertificateDetail',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  You can call this operation up to 20 times per second.
  *
  * @param request DescribeCdnSMCertificateDetailRequest
  * @return DescribeCdnSMCertificateDetailResponse
 */
async function describeCdnSMCertificateDetail(request: DescribeCdnSMCertificateDetailRequest): DescribeCdnSMCertificateDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnSMCertificateDetailWithOptions(request, runtime);
}

model DescribeCdnSMCertificateListRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name in each request.', example='example.com'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeCdnSMCertificateListResponseBody = {
  certificateListModel?: {
    certList?: {
      cert?: [ 
      {
        certIdentifier?: string(name='CertIdentifier', description='The ID of the certificate.', example='yourCertldentifier'),
        certName?: string(name='CertName', description='The name of the certificate.', example='yourCertName'),
        common?: string(name='Common', description='The common name of the certificate.', example='yourCertCommon'),
        issuer?: string(name='Issuer', description='The certificate authority (CA) that issued the certificate.', example='yourCertIssuer'),
      }
    ](name='Cert')
    }(name='CertList', description='The list of certificates.'),
    count?: int32(name='Count', description='The number of certificates that are returned.', example='2'),
  }(name='CertificateListModel', description='The type of the certificate information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DC0E34AC-0239-44A7-AB0E-800DE522C8DC'),
}

model DescribeCdnSMCertificateListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnSMCertificateListResponseBody(name='body'),
}

/**
  * > You can call this operation up to 30 times per second per account.
  *
  * @param request DescribeCdnSMCertificateListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnSMCertificateListResponse
 */
async function describeCdnSMCertificateListWithOptions(request: DescribeCdnSMCertificateListRequest, runtime: Util.RuntimeOptions): DescribeCdnSMCertificateListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnSMCertificateList',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can call this operation up to 30 times per second per account.
  *
  * @param request DescribeCdnSMCertificateListRequest
  * @return DescribeCdnSMCertificateListResponse
 */
async function describeCdnSMCertificateList(request: DescribeCdnSMCertificateListRequest): DescribeCdnSMCertificateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnSMCertificateListWithOptions(request, runtime);
}

model DescribeCdnServiceRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeCdnServiceResponseBody = {
  changingAffectTime?: string(name='ChangingAffectTime', description='The time when the metering method for the next cycle takes effect. The time is displayed in GMT.', example='2019-11-27T16:00:00Z'),
  changingChargeType?: string(name='ChangingChargeType', description='The metering method for the next cycle. Valid values:

*   **PayByTraffic**: pay-by-data-transfer
*   **PayByBandwidth**: pay-by-bandwidth', example='PayByTraffic'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='aliuidxx'),
  internetChargeType?: string(name='InternetChargeType', description='The current metering method. Valid values:

*   **PayByTraffic**: pay-by-data-transfer
*   **PayByBandwidth**: pay-by-bandwidth', example='PayByTraffic'),
  openingTime?: string(name='OpeningTime', description='The time when the service was activated. The time follows the ISO 8601 standard.', example='2019-02-28T13:11:49Z'),
  operationLocks?: {
    lockReason?: [ 
    {
      lockReason?: string(name='LockReason', description='The reason why the service is locked. A value of financial indicates that the service is locked due to overdue payments.', example='financial'),
    }
  ](name='LockReason')
  }(name='OperationLocks', description='The lock status.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model DescribeCdnServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnServiceResponseBody(name='body'),
}

/**
  * > You can call this operation up to 30 times per second per account.
  *
  * @param request DescribeCdnServiceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnServiceResponse
 */
async function describeCdnServiceWithOptions(request: DescribeCdnServiceRequest, runtime: Util.RuntimeOptions): DescribeCdnServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnService',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can call this operation up to 30 times per second per account.
  *
  * @param request DescribeCdnServiceRequest
  * @return DescribeCdnServiceResponse
 */
async function describeCdnService(request: DescribeCdnServiceRequest): DescribeCdnServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnServiceWithOptions(request, runtime);
}

model DescribeCdnSubListResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId', example='3250A51D-C11D-46BA-B6B3-95348EEDE652'),
}

model DescribeCdnSubListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnSubListResponseBody(name='body'),
}

/**
  * {"RequestId":"3250A51D-C11D-46BA-B6B3-95348EEDE652","Description":"Successful","Content":{"data":\\[{"subId":5,"reportId":\\[1,2,3],"createTime":"2020-09-25T09:39:33Z","domains"\\["www.example.com","www.example.com"],"effectiveFrom":"2020-09-17T00:00:00Z","effectiveEnd":"2020-11-17T00:00:00Z","status":"enable"}]}}
  *
  * @param request DescribeCdnSubListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnSubListResponse
 */
async function describeCdnSubListWithOptions(runtime: Util.RuntimeOptions): DescribeCdnSubListResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeCdnSubList',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * {"RequestId":"3250A51D-C11D-46BA-B6B3-95348EEDE652","Description":"Successful","Content":{"data":\\[{"subId":5,"reportId":\\[1,2,3],"createTime":"2020-09-25T09:39:33Z","domains"\\["www.example.com","www.example.com"],"effectiveFrom":"2020-09-17T00:00:00Z","effectiveEnd":"2020-11-17T00:00:00Z","status":"enable"}]}}
  *
  * @return DescribeCdnSubListResponse
 */
async function describeCdnSubList(): DescribeCdnSubListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnSubListWithOptions(runtime);
}

model DescribeCdnUserBillHistoryRequest {
  endTime?: string(name='EndTime', description='InvalidParameterAliUid', example='2018-10-31T16:00:00Z'),
  startTime?: string(name='StartTime', description='InvalidParameter.', example='2018-09-30T16:00:00Z'),
}

model DescribeCdnUserBillHistoryResponseBody = {
  billHistoryData?: {
    billHistoryDataItem?: [ 
    {
      billTime?: string(name='BillTime', example='2018-09-30T16:00:00Z'),
      billType?: string(name='BillType', example='month_4th_day_bandwidth'),
      billingData?: {
        billingDataItem?: [ 
        {
          bandwidth?: float(name='Bandwidth', example='4041'),
          cdnRegion?: string(name='CdnRegion', example='AP1'),
          chargeType?: string(name='ChargeType', example='DynamicHttp'),
          count?: float(name='Count', example='203601'),
          flow?: float(name='Flow', example='24567'),
        }
      ](name='BillingDataItem')
      }(name='BillingData'),
      dimension?: string(name='Dimension', description='Invalid Parameter EndTime.', example='flow'),
    }
  ](name='BillHistoryDataItem')
  }(name='BillHistoryData', description='Invalid Parameter StartTime.'),
  requestId?: string(name='RequestId', description='Invalid Parameter AliUid.', example='ED61C6C3-8241-4187-AAA7-5157AE175CEC'),
}

model DescribeCdnUserBillHistoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnUserBillHistoryResponseBody(name='body'),
}

/**
  * The billing method. Valid values:
  * *   **StaticHttp**: static HTTP requests
  * *   **DynamicHttp**: dynamic HTTP requests
  * *   **DynamicHttps**: dynamic HTTPS requests
  *
  * @param request DescribeCdnUserBillHistoryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnUserBillHistoryResponse
 */
async function describeCdnUserBillHistoryWithOptions(request: DescribeCdnUserBillHistoryRequest, runtime: Util.RuntimeOptions): DescribeCdnUserBillHistoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnUserBillHistory',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The billing method. Valid values:
  * *   **StaticHttp**: static HTTP requests
  * *   **DynamicHttp**: dynamic HTTP requests
  * *   **DynamicHttps**: dynamic HTTPS requests
  *
  * @param request DescribeCdnUserBillHistoryRequest
  * @return DescribeCdnUserBillHistoryResponse
 */
async function describeCdnUserBillHistory(request: DescribeCdnUserBillHistoryRequest): DescribeCdnUserBillHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnUserBillHistoryWithOptions(request, runtime);
}

model DescribeCdnUserBillPredictionRequest {
  area?: string(name='Area', example='CN,OverSeas'),
  dimension?: string(name='Dimension', example='flow'),
  endTime?: string(name='EndTime', example='2018-10-25T10:00:00Z'),
  startTime?: string(name='StartTime', example='2018-09-30T16:00:00Z'),
}

model DescribeCdnUserBillPredictionResponseBody = {
  billPredictionData?: {
    billPredictionDataItem?: [ 
    {
      area?: string(name='Area', example='CN'),
      timeStp?: string(name='TimeStp', example='2018-10-15T16:00:00Z'),
      value?: float(name='Value', example='10000'),
    }
  ](name='BillPredictionDataItem')
  }(name='BillPredictionData'),
  billType?: string(name='BillType', example='month_95_overseas'),
  endTime?: string(name='EndTime', example='2018-10-25T10:00:00Z'),
  requestId?: string(name='RequestId', example='C370DAF1-C838-4288-A1A0-9A87633D248E'),
  startTime?: string(name='StartTime', example='2018-09-30T16:00:00Z'),
}

model DescribeCdnUserBillPredictionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnUserBillPredictionResponseBody(name='body'),
}

async function describeCdnUserBillPredictionWithOptions(request: DescribeCdnUserBillPredictionRequest, runtime: Util.RuntimeOptions): DescribeCdnUserBillPredictionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.area)) {
    query['Area'] = request.area;
  }
  if (!Util.isUnset(request.dimension)) {
    query['Dimension'] = request.dimension;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnUserBillPrediction',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCdnUserBillPrediction(request: DescribeCdnUserBillPredictionRequest): DescribeCdnUserBillPredictionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnUserBillPredictionWithOptions(request, runtime);
}

model DescribeCdnUserBillTypeRequest {
  endTime?: string(name='EndTime', example='2018-10-31T16:00:00Z'),
  startTime?: string(name='StartTime', example='2018-09-30T16:00:00Z'),
}

model DescribeCdnUserBillTypeResponseBody = {
  billTypeData?: {
    billTypeDataItem?: [ 
    {
      billType?: string(name='BillType', example='month_avg_day_bandwidth_overseas'),
      billingCycle?: string(name='BillingCycle', example='month'),
      dimension?: string(name='Dimension', example='flow'),
      endTime?: string(name='EndTime', example='2018-10-31T16:00:00Z'),
      product?: string(name='Product', example='cdn'),
      startTime?: string(name='StartTime', example='2018-10-30T16:00:00Z'),
    }
  ](name='BillTypeDataItem')
  }(name='BillTypeData'),
  requestId?: string(name='RequestId', example='C370DAF1-C838-4288-A1A0-9A87633D248E'),
}

model DescribeCdnUserBillTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnUserBillTypeResponseBody(name='body'),
}

/**
  * The dimension. Valid values:
  * *   flow: traffic and bandwidth
  * *   vas: value-added services (HTTPS and requests for dynamic content)
  * *   quic: the number of QUIC requests
  * *   websocket: the WebSocket communications protocol
  * *   rtlog2sls: log entries delivered to Log Service in real time
  * *   stationflow: traffic over the internal network
  *
  * @param request DescribeCdnUserBillTypeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnUserBillTypeResponse
 */
async function describeCdnUserBillTypeWithOptions(request: DescribeCdnUserBillTypeRequest, runtime: Util.RuntimeOptions): DescribeCdnUserBillTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnUserBillType',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The dimension. Valid values:
  * *   flow: traffic and bandwidth
  * *   vas: value-added services (HTTPS and requests for dynamic content)
  * *   quic: the number of QUIC requests
  * *   websocket: the WebSocket communications protocol
  * *   rtlog2sls: log entries delivered to Log Service in real time
  * *   stationflow: traffic over the internal network
  *
  * @param request DescribeCdnUserBillTypeRequest
  * @return DescribeCdnUserBillTypeResponse
 */
async function describeCdnUserBillType(request: DescribeCdnUserBillTypeRequest): DescribeCdnUserBillTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnUserBillTypeWithOptions(request, runtime);
}

model DescribeCdnUserConfigsRequest {
  functionName?: string(name='FunctionName', description='The name of the parameter.

The configurations set by enterprise or government users.', example='domain_business_control'),
}

model DescribeCdnUserConfigsResponseBody = {
  configs?: [ 
    {
      argName?: string(name='ArgName', description='The name of the feature.', example='allow_function'),
      argValue?: string(name='ArgValue', description='The value of the configuration. Valid values:

*   **cc_rule**: HTTP flood protection rules
*   **ddos_dispatch**: integration with Anti-DDoS
*   **edge_safe**: application security settings on edge nodes
*   **blocked_regions**: blocked regions
*   **http_acl_policy**: access control list (ACL) rules
*   **bot_manager**: bot traffic management
*   **ip_reputation**: IP reputation library', example='{\\"dcdn_allow\\":[\\"cc_rule\\",\\"ddos_dispatch\\"]}'),
      functionName?: string(name='FunctionName', description='The configuration item that you want to query. Valid values:

*   **domain_business_control**: Alibaba Cloud CDN configurations
*   **waf**: Web Application Firewall (WAF) configurations', example='domain_business_control'),
    }
  ](name='Configs', description='>  The maximum number of times that each user can call this operation per second is 30.'),
  requestId?: string(name='RequestId', description='The name of the feature.', example='06D29681-B7CD-4034-A8CC-28AFFA213539'),
}

model DescribeCdnUserConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnUserConfigsResponseBody(name='body'),
}

/**
  * The value of the configuration. Valid values:
  * *   **cc_rule**: HTTP flood protection rules
  * *   **ddos_dispatch**: integration with Anti-DDoS
  * *   **edge_safe**: application security settings on edge nodes
  * *   **blocked_regions**: blocked regions
  * *   **http\\_acl\\_policy**: access control list (ACL) rules
  * *   **bot_manager**: bot traffic management
  * *   **ip_reputation**: IP reputation library
  *
  * @param request DescribeCdnUserConfigsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnUserConfigsResponse
 */
async function describeCdnUserConfigsWithOptions(request: DescribeCdnUserConfigsRequest, runtime: Util.RuntimeOptions): DescribeCdnUserConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.functionName)) {
    query['FunctionName'] = request.functionName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnUserConfigs',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The value of the configuration. Valid values:
  * *   **cc_rule**: HTTP flood protection rules
  * *   **ddos_dispatch**: integration with Anti-DDoS
  * *   **edge_safe**: application security settings on edge nodes
  * *   **blocked_regions**: blocked regions
  * *   **http\\_acl\\_policy**: access control list (ACL) rules
  * *   **bot_manager**: bot traffic management
  * *   **ip_reputation**: IP reputation library
  *
  * @param request DescribeCdnUserConfigsRequest
  * @return DescribeCdnUserConfigsResponse
 */
async function describeCdnUserConfigs(request: DescribeCdnUserConfigsRequest): DescribeCdnUserConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnUserConfigsWithOptions(request, runtime);
}

model DescribeCdnUserDomainsByFuncRequest {
  funcId?: int32(name='FuncId', example='7'),
  pageNumber?: int32(name='PageNumber', example='10'),
  pageSize?: int32(name='PageSize', example='20'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-xxxxx'),
}

model DescribeCdnUserDomainsByFuncResponseBody = {
  domains?: {
    pageData?: [ 
    {
      cdnType?: string(name='CdnType', example='web'),
      cname?: string(name='Cname', example='example.com.w.alikunlun.com'),
      description?: string(name='Description', example='audit failed'),
      domainName?: string(name='DomainName', example='example.com'),
      domainStatus?: string(name='DomainStatus', example='configure_failed'),
      gmtCreated?: string(name='GmtCreated', example='2015-10-28T11:05:52Z'),
      gmtModified?: string(name='GmtModified', example='2015-10-29T10:15:31Z'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-xxxxx'),
      sources?: {
        source?: [ 
        {
          content?: string(name='Content', example='1.1.1.1'),
          port?: int32(name='Port', example='80'),
          priority?: string(name='Priority', example='20'),
          type?: string(name='Type', example='ipaddr'),
          weight?: string(name='Weight', example='10'),
        }
      ](name='Source')
      }(name='Sources'),
      sslProtocol?: string(name='SslProtocol', example='on'),
    }
  ](name='PageData')
  }(name='Domains'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='5'),
  requestId?: string(name='RequestId', example='AA75AADB-5E25-4970-B480-EAA1F5658483'),
  totalCount?: long(name='TotalCount', example='16'),
}

model DescribeCdnUserDomainsByFuncResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnUserDomainsByFuncResponseBody(name='body'),
}

async function describeCdnUserDomainsByFuncWithOptions(request: DescribeCdnUserDomainsByFuncRequest, runtime: Util.RuntimeOptions): DescribeCdnUserDomainsByFuncResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.funcId)) {
    query['FuncId'] = request.funcId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnUserDomainsByFunc',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCdnUserDomainsByFunc(request: DescribeCdnUserDomainsByFuncRequest): DescribeCdnUserDomainsByFuncResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnUserDomainsByFuncWithOptions(request, runtime);
}

model DescribeCdnUserQuotaRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeCdnUserQuotaResponseBody = {
  blockQuota?: int32(name='BlockQuota', description='The maximum number of URLs and directories that can be blocked.', example='100'),
  blockRemain?: int32(name='BlockRemain', description='The remaining number of URLs and directories that can be blocked.', example='100'),
  domainQuota?: int32(name='DomainQuota', description='The maximum number of accelerated domain names.', example='50'),
  ignoreParamsQuota?: int32(name='IgnoreParamsQuota'),
  ignoreParamsRemain?: int32(name='IgnoreParamsRemain'),
  preloadQuota?: int32(name='PreloadQuota', description='The maximum number of URLs that can be prefetched.', example='500'),
  preloadRemain?: int32(name='PreloadRemain', description='The remaining number of URLs that can be prefetched.', example='100'),
  refreshDirQuota?: int32(name='RefreshDirQuota', description='The maximum number of directories that can be refreshed.', example='100'),
  refreshDirRemain?: int32(name='RefreshDirRemain', description='The remaining number of directories that can be refreshed.', example='500'),
  refreshUrlQuota?: int32(name='RefreshUrlQuota', description='The maximum number of URLs that can be refreshed.', example='2000'),
  refreshUrlRemain?: int32(name='RefreshUrlRemain', description='The remaining number of URLs that can be refreshed.', example='2000'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EF4F084A-2F49-4E1C-9CA0-DC85BCE7F391'),
}

model DescribeCdnUserQuotaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnUserQuotaResponseBody(name='body'),
}

/**
  * > You can call this operation up to 30 times per second per account.
  *
  * @param request DescribeCdnUserQuotaRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnUserQuotaResponse
 */
async function describeCdnUserQuotaWithOptions(request: DescribeCdnUserQuotaRequest, runtime: Util.RuntimeOptions): DescribeCdnUserQuotaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnUserQuota',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can call this operation up to 30 times per second per account.
  *
  * @param request DescribeCdnUserQuotaRequest
  * @return DescribeCdnUserQuotaResponse
 */
async function describeCdnUserQuota(request: DescribeCdnUserQuotaRequest): DescribeCdnUserQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnUserQuotaWithOptions(request, runtime);
}

model DescribeCdnUserResourcePackageRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  status?: string(name='Status', description='The remaining quota of the resource plan.

*   The total amount of data transfer provided by the resource plan. Unit: bytes.
*   The remaining number of requests provided by the resource plan.', example='valid'),
}

model DescribeCdnUserResourcePackageResponseBody = {
  requestId?: string(name='RequestId', description='The name of the resource plan.', example='84839536-2B7E-457D-9D8C-82E6C7D4E1A3'),
  resourcePackageInfos?: {
    resourcePackageInfo?: [ 
    {
      commodityCode?: string(name='CommodityCode', description='The total quota of the resource plan.

*   The total amount of data transfer provided by the resource plan. Unit: bytes.
*   The total number of requests provided by the resource plan.', example='cdnflowbag'),
      currCapacity?: string(name='CurrCapacity', description='The ID of the instance.', example='10995089554629'),
      displayName?: string(name='DisplayName', description='The time when the resource plan took effect.', example='Resource plan status:

*   **valid**: valid
*   **closed**: invalid'),
      endTime?: string(name='EndTime', description='The operation that you want to perform. Set the value to **DescribeCdnUserResourcePackage**.', example='2018-07-01T08:00:00Z'),
      initCapacity?: string(name='InitCapacity', description='The ID of the resource plan.', example='536870912000'),
      instanceId?: string(name='InstanceId', description='The ID of the request.', example='FP-ilttxc23a'),
      startTime?: string(name='StartTime', description='The name of the template.', example='2017-12-05T19:10:58Z'),
      status?: string(name='Status', description='The status of the data transfer plan. Valid values:

*   **valid**: valid
*   **closed**: invalid', example='valid'),
      templateName?: string(name='TemplateName', description='The details about each resource plan. The details are organized in an array. The array consists of the subparameter values of the ResourcePackageInfo parameter.', example='Queries the resource plans that you have purchased for Alibaba Cloud CDN.'),
    }
  ](name='ResourcePackageInfo')
  }(name='ResourcePackageInfos', description='The time when the resource plan expires.'),
}

model DescribeCdnUserResourcePackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnUserResourcePackageResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeCdnUserResourcePackageRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnUserResourcePackageResponse
 */
async function describeCdnUserResourcePackageWithOptions(request: DescribeCdnUserResourcePackageRequest, runtime: Util.RuntimeOptions): DescribeCdnUserResourcePackageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnUserResourcePackage',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request DescribeCdnUserResourcePackageRequest
  * @return DescribeCdnUserResourcePackageResponse
 */
async function describeCdnUserResourcePackage(request: DescribeCdnUserResourcePackageRequest): DescribeCdnUserResourcePackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnUserResourcePackageWithOptions(request, runtime);
}

model DescribeCdnWafDomainRequest {
  domainName?: string(name='DomainName', description='The domain name that you want to query.

You can specify only one domain name in each request. You have three options to configure this parameter:

*   Specify an exact domain name. For example, if you set this parameter to example.com, configuration information of example.com is queried.
*   Specify a keyword. For example, if you set this parameter to example, configuration information about all domain names that contain example is queried.
*   Leave this parameter empty. If this parameter is left empty, all accelerated domain names for which WAF is configured are queried.', example='example.com'),
  regionId?: string(name='RegionId', description='The region where WAF is enabled. Valid values:

*   **cn-hangzhou**: inside the Chinese mainland
*   **ap-southeast-1**: outside the Chinese mainland

> ap-southeast-1 includes Hong Kong (China), Macao (China), Taiwan (China), and other countries and regions.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='1234'),
}

model DescribeCdnWafDomainResponseBody = {
  outPutDomains?: [ 
    {
      aclStatus?: string(name='AclStatus', description='The status of the access control list (ACL) feature. Valid values:

*   **0**: disabled
*   **1**: enabled', example='1'),
      ccStatus?: string(name='CcStatus', description='The status of protection against HTTP flood attacks. Valid values:

*   **0**: disabled
*   **1**: enabled', example='1'),
      domain?: string(name='Domain', description='The accelerated domain name.', example='example.com'),
      status?: string(name='Status', description='The WAF status of the domain name. Valid values:

*   **1**: The domain name is added to WAF or valid.
*   **10**: The domain name is being added to WAF.
*   **11**: The domain name failed to be added to WAF.', example='1'),
      wafStatus?: string(name='WafStatus', description='The status of WAF. Valid values:

*   **0**: disabled
*   **1**: enabled', example='1'),
    }
  ](name='OutPutDomains', description='The information about the accelerated domain name.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CB1A380B-09F0-41BB-802B-72F8FD6DA2FE'),
  totalCount?: int32(name='TotalCount', description='The number of accelerated domain names.', example='1'),
}

model DescribeCdnWafDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdnWafDomainResponseBody(name='body'),
}

/**
  * > You can call this operation up to 150 times per second per account.
  *
  * @param request DescribeCdnWafDomainRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCdnWafDomainResponse
 */
async function describeCdnWafDomainWithOptions(request: DescribeCdnWafDomainRequest, runtime: Util.RuntimeOptions): DescribeCdnWafDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdnWafDomain',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can call this operation up to 150 times per second per account.
  *
  * @param request DescribeCdnWafDomainRequest
  * @return DescribeCdnWafDomainResponse
 */
async function describeCdnWafDomain(request: DescribeCdnWafDomainRequest): DescribeCdnWafDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdnWafDomainWithOptions(request, runtime);
}

model DescribeCertificateInfoByIDRequest {
  certId?: string(name='CertId', description='The ID of the certificate. You can query only one certificate in each call.', example='1644xx'),
}

model DescribeCertificateInfoByIDResponseBody = {
  certInfos?: {
    certInfo?: [ 
    {
      certExpireTime?: string(name='CertExpireTime', description='The time at which the certificate expires.', example='2098-02-08 08:02:07 +0000 UTC'),
      certId?: string(name='CertId', description='The ID of the certificate.', example='1644xx'),
      certName?: string(name='CertName', description='The name of the certificate.', example='example_cert'),
      certType?: string(name='CertType', description='The type of the certificate.

*   free: a free certificate
*   cas: a certificate purchased by using Certificate Management Service
*   upload: a user-uploaded certificate', example='cas'),
      createTime?: string(name='CreateTime', description='The time when the certificate became effective.', example='2015-12-21 08:02:07 +0000 UTC'),
      domainList?: string(name='DomainList', description='The domain names that use the certificate.', example='["example.com"]'),
      httpsCrt?: string(name='HttpsCrt', description='The content of the certificate.', example='-----BEGIN CERTIFICATE-----\\nxxx-----END CERTIFICATE-----\\n'),
    }
  ](name='CertInfo')
  }(name='CertInfos', description='The information about the certificate.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5C1E43DC-9E51-4771-82C0-7D5ECEB547A1'),
}

model DescribeCertificateInfoByIDResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCertificateInfoByIDResponseBody(name='body'),
}

/**
  * *   You can call this operation up to 100 times per second per account.
  * *   If a certificate is associated with a domain name but the certificate is not enabled, the result of this operation shows that the certificate does not exist.
  *
  * @param request DescribeCertificateInfoByIDRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCertificateInfoByIDResponse
 */
async function describeCertificateInfoByIDWithOptions(request: DescribeCertificateInfoByIDRequest, runtime: Util.RuntimeOptions): DescribeCertificateInfoByIDResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCertificateInfoByID',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can call this operation up to 100 times per second per account.
  * *   If a certificate is associated with a domain name but the certificate is not enabled, the result of this operation shows that the certificate does not exist.
  *
  * @param request DescribeCertificateInfoByIDRequest
  * @return DescribeCertificateInfoByIDResponse
 */
async function describeCertificateInfoByID(request: DescribeCertificateInfoByIDRequest): DescribeCertificateInfoByIDResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCertificateInfoByIDWithOptions(request, runtime);
}

model DescribeCustomLogConfigRequest {
  configId?: string(name='ConfigId', description='A sample log configuration.', example='123'),
}

model DescribeCustomLogConfigResponseBody = {
  remark?: string(name='Remark', description='The format of the log configuration.', example='$time_iso8601_$request_method_$'),
  requestId?: string(name='RequestId', description='The ID of the custom configuration.', example='94E3559F-7B6A-4A5E-AFFD-44E2A208A249'),
  sample?: string(name='Sample', description='The ID of the request.', example='"[9/Jun/2015:01:58:09 +0800] 188.165.15.75 - 1542 \\"-\\" \\"GEThttp: //www.aliyun.com/index.html\\" 200'),
  tag?: string(name='Tag', description='>  The maximum number of times that each user can call this operation per second is 100.', example='img1'),
}

model DescribeCustomLogConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomLogConfigResponseBody(name='body'),
}

/**
  * The format of the log configuration.
  *
  * @param request DescribeCustomLogConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCustomLogConfigResponse
 */
async function describeCustomLogConfigWithOptions(request: DescribeCustomLogConfigRequest, runtime: Util.RuntimeOptions): DescribeCustomLogConfigResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCustomLogConfig',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The format of the log configuration.
  *
  * @param request DescribeCustomLogConfigRequest
  * @return DescribeCustomLogConfigResponse
 */
async function describeCustomLogConfig(request: DescribeCustomLogConfigRequest): DescribeCustomLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomLogConfigWithOptions(request, runtime);
}

model DescribeDomainAverageResponseTimeRequest {
  domainName?: string(name='DomainName', description='The operation that you want to perform. Set the value to **DescribeDomainAverageResponseTime**.', example='example.com'),
  domainType?: string(name='DomainType', description='The name of the Internet service provider (ISP) for your Alibaba Cloud CDN service. You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query ISPs. If you do not set this parameter, all ISPs are queried.', example='domaintype'),
  endTime?: string(name='EndTime', description='The end of the time range during which data was queried.', example='2019-11-30T05:40:00Z'),
  interval?: string(name='Interval', description='The time interval between the data entries. Unit: seconds. The value varies based on the values of the **StartTime** and **EndTime** parameters. Valid values:

*   If the time span between StartTime and EndTime is less than 3 days (3 days excluded), valid values are **300**, **3600**, and **86400**. Default value: **300**.
*   If the time span between StartTime and EndTime is from 3 to 31 days (31 days excluded), valid values are **3600** and **86400**. Default value: **3600**.
*   If the time range between StartTime and EndTime is 31 days or longer, the valid value is **86400**. Default value: **86400**.', example='300'),
  ispNameEn?: string(name='IspNameEn', description='Specifies whether to automatically set the interval. If you set the value to 1, the value of the Interval parameter is automatically assigned based on the StartTime and EndTime parameters. You can set this parameter or the Interval parameter.', example='unicom'),
  locationNameEn?: string(name='LocationNameEn', description='The average response time.', example='beijing'),
  startTime?: string(name='StartTime', description='The end of the time range queried. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

The end time must be later than the start time.', example='2019-11-30T05:33:00Z'),
  timeMerge?: string(name='TimeMerge', description='The accelerated domain name. Separate multiple accelerated domain names with commas (,).

By default, this operation queries the bandwidth values during back-to-origin routing for all accelerated domain names that belong to your Alibaba Cloud account.', example='1'),
}

model DescribeDomainAverageResponseTimeResponseBody = {
  avgRTPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp', example='2015-12-10T20:00:00Z'),
      value?: string(name='Value', description='Queries the average response time of one or more accelerated domain names. You can query data collected within the last 90 days.', example='3'),
    }
  ](name='DataModule')
  }(name='AvgRTPerInterval', description='The timestamp of the returned data.'),
  dataInterval?: string(name='DataInterval', description='The ID of the request.', example='300'),
  domainName?: string(name='DomainName', description='The average response time collected at each time interval.', example='example.com'),
  endTime?: string(name='EndTime', description='The beginning of the time range during which data was queried.', example='2019-11-30T05:40:00Z'),
  requestId?: string(name='RequestId', description='The time interval between the data entries returned.', example='3C6CCEC4-6B88-4D4A-93E4-D47B3D92CF8F'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2019-11-30T05:33:00Z'),
}

model DescribeDomainAverageResponseTimeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainAverageResponseTimeResponseBody(name='body'),
}

/**
  * The accelerated domain name.
  *
  * @param request DescribeDomainAverageResponseTimeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainAverageResponseTimeResponse
 */
async function describeDomainAverageResponseTimeWithOptions(request: DescribeDomainAverageResponseTimeRequest, runtime: Util.RuntimeOptions): DescribeDomainAverageResponseTimeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.domainType)) {
    query['DomainType'] = request.domainType;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.timeMerge)) {
    query['TimeMerge'] = request.timeMerge;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainAverageResponseTime',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The accelerated domain name.
  *
  * @param request DescribeDomainAverageResponseTimeRequest
  * @return DescribeDomainAverageResponseTimeResponse
 */
async function describeDomainAverageResponseTime(request: DescribeDomainAverageResponseTimeRequest): DescribeDomainAverageResponseTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainAverageResponseTimeWithOptions(request, runtime);
}

model DescribeDomainBpsDataRequest {
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2020-05-14T10:00:00Z'),
  interval?: string(name='Interval', example='300'),
  ispNameEn?: string(name='IspNameEn', example='telecom'),
  locationNameEn?: string(name='LocationNameEn', example='beijing'),
  startTime?: string(name='StartTime', example='2020-05-14T09:50:00Z'),
}

model DescribeDomainBpsDataResponseBody = {
  bpsDataPerInterval?: {
    dataModule?: [ 
    {
      domesticValue?: string(name='DomesticValue', example='11286111'),
      httpsDomesticValue?: string(name='HttpsDomesticValue', example='11286111'),
      httpsOverseasValue?: string(name='HttpsOverseasValue', example='2000'),
      httpsValue?: string(name='HttpsValue', example='11288111'),
      overseasValue?: string(name='OverseasValue', example='2000'),
      timeStamp?: string(name='TimeStamp', example='2015-12-10T20:00:00Z'),
      value?: string(name='Value', example='11288111'),
    }
  ](name='DataModule')
  }(name='BpsDataPerInterval'),
  dataInterval?: string(name='DataInterval', example='300'),
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2015-12-10T20:00Z'),
  ispNameEn?: string(name='IspNameEn', example='unicom'),
  locationNameEn?: string(name='LocationNameEn', example='beijing'),
  requestId?: string(name='RequestId', example='3C6CCEC4-6B88-4D4A-93E4-D47B3D92CF8F'),
  startTime?: string(name='StartTime', example='2020-05-14T09:50:00Z'),
}

model DescribeDomainBpsDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainBpsDataResponseBody(name='body'),
}

/**
  * The bandwidth value in the Chinese mainland. When the bandwidth data is queried by ISP, this parameter is empty.
  *
  * @param request DescribeDomainBpsDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainBpsDataResponse
 */
async function describeDomainBpsDataWithOptions(request: DescribeDomainBpsDataRequest, runtime: Util.RuntimeOptions): DescribeDomainBpsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainBpsData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The bandwidth value in the Chinese mainland. When the bandwidth data is queried by ISP, this parameter is empty.
  *
  * @param request DescribeDomainBpsDataRequest
  * @return DescribeDomainBpsDataResponse
 */
async function describeDomainBpsData(request: DescribeDomainBpsDataRequest): DescribeDomainBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainBpsDataWithOptions(request, runtime);
}

model DescribeDomainBpsDataByLayerRequest {
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2020-05-06T07:20:00Z'),
  interval?: string(name='Interval', example='300'),
  ispNameEn?: string(name='IspNameEn', example='unicom'),
  layer?: string(name='Layer', example='IPv4'),
  locationNameEn?: string(name='LocationNameEn', example='beijing'),
  startTime?: string(name='StartTime', example='2020-05-06T07:10:00Z'),
}

model DescribeDomainBpsDataByLayerResponseBody = {
  bpsDataInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp', example='2020-05-06T07:10:00Z'),
      trafficValue?: string(name='TrafficValue', example='2838'),
      value?: string(name='Value', example='75.68'),
    }
  ](name='DataModule')
  }(name='BpsDataInterval'),
  dataInterval?: string(name='DataInterval', example='300'),
  requestId?: string(name='RequestId', example='C565B910-BC3B-467B-9046-2A48566EA967'),
}

model DescribeDomainBpsDataByLayerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainBpsDataByLayerResponseBody(name='body'),
}

/**
  * The timestamp of the returned data.
  *
  * @param request DescribeDomainBpsDataByLayerRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainBpsDataByLayerResponse
 */
async function describeDomainBpsDataByLayerWithOptions(request: DescribeDomainBpsDataByLayerRequest, runtime: Util.RuntimeOptions): DescribeDomainBpsDataByLayerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.layer)) {
    query['Layer'] = request.layer;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainBpsDataByLayer',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The timestamp of the returned data.
  *
  * @param request DescribeDomainBpsDataByLayerRequest
  * @return DescribeDomainBpsDataByLayerResponse
 */
async function describeDomainBpsDataByLayer(request: DescribeDomainBpsDataByLayerRequest): DescribeDomainBpsDataByLayerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainBpsDataByLayerWithOptions(request, runtime);
}

model DescribeDomainBpsDataByTimeStampRequest {
  domainName?: string(name='DomainName', example='example.com'),
  ispNames?: string(name='IspNames', example='uni***,tele***'),
  locationNames?: string(name='LocationNames', example='liaoning,guangxi'),
  timePoint?: string(name='TimePoint', example='2019-11-30T05:40:00Z'),
}

model DescribeDomainBpsDataByTimeStampResponseBody = {
  bpsDataList?: {
    bpsDataModel?: [ 
    {
      bps?: long(name='Bps', example='52119553'),
      ispName?: string(name='IspName', example='unicom'),
      locationName?: string(name='LocationName', example='Liaoning'),
      timeStamp?: string(name='TimeStamp', example='2019-11-30T05:40:00Z'),
    }
  ](name='BpsDataModel')
  }(name='BpsDataList'),
  domainName?: string(name='DomainName', example='example.com'),
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
  timeStamp?: string(name='TimeStamp', example='2019-11-30T05:40:00Z'),
}

model DescribeDomainBpsDataByTimeStampResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainBpsDataByTimeStampResponseBody(name='body'),
}

/**
  * The bandwidth value.
  *
  * @param request DescribeDomainBpsDataByTimeStampRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainBpsDataByTimeStampResponse
 */
async function describeDomainBpsDataByTimeStampWithOptions(request: DescribeDomainBpsDataByTimeStampRequest, runtime: Util.RuntimeOptions): DescribeDomainBpsDataByTimeStampResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ispNames)) {
    query['IspNames'] = request.ispNames;
  }
  if (!Util.isUnset(request.locationNames)) {
    query['LocationNames'] = request.locationNames;
  }
  if (!Util.isUnset(request.timePoint)) {
    query['TimePoint'] = request.timePoint;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainBpsDataByTimeStamp',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The bandwidth value.
  *
  * @param request DescribeDomainBpsDataByTimeStampRequest
  * @return DescribeDomainBpsDataByTimeStampResponse
 */
async function describeDomainBpsDataByTimeStamp(request: DescribeDomainBpsDataByTimeStampRequest): DescribeDomainBpsDataByTimeStampResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainBpsDataByTimeStampWithOptions(request, runtime);
}

model DescribeDomainCcActivityLogRequest {
  domainName?: string(name='DomainName', description='The object that triggered rate limiting.', example='example.com'),
  endTime?: string(name='EndTime', description='The number of the page to return. Default value: **1**.', example='2018-12-10T21:00:00Z'),
  pageNumber?: long(name='PageNumber', description='The number of entries to return on each page. Default value: **30**.', example='1'),
  pageSize?: long(name='PageSize', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.

The end time must be later than the start time.', example='30'),
  ruleName?: string(name='RuleName', description='The accelerated domain name.', example='test2'),
  startTime?: string(name='StartTime', description='The value of the object that triggered rate limiting.', example='2018-12-10T20:00:00Z'),
  triggerObject?: string(name='TriggerObject', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.

Data is collected every 5 minutes.

If you do not set this parameter, data within the last 24 hours is queried.', example='IP'),
  value?: string(name='Value', description='The page number of the returned page.', example='1.2.3.4'),
}

model DescribeDomainCcActivityLogResponseBody = {
  activityLog?: [ 
    {
      action?: string(name='Action', description='The object that triggered rate limiting.

If you do not set this parameter, all events that triggered rate limiting are queried.', example='deny'),
      domainName?: string(name='DomainName', description='The ID of the request.', example='example.com'),
      ruleName?: string(name='RuleName', example='test'),
      timeStamp?: string(name='TimeStamp', description='The log entry of the event that triggered rate limiting.', example='2015-12-10T20:00:00Z'),
      triggerObject?: string(name='TriggerObject', description='The number of entries returned per page.', example='Ip'),
      ttl?: long(name='Ttl', description='The action that was triggered.', example='300'),
      value?: string(name='Value', description='The accelerated domain name. You can specify multiple domain names and separate them with commas (,).

If you do not specify a domain name, data of all domain names is queried.', example='1.2.3.4'),
    }
  ](name='ActivityLog', description='A custom rule name. Valid values:

*   Default mode: default_normal.
*   Emergency mode: default_attack.

If you do not set this parameter, all events that triggered rate limiting are queried.'),
  pageIndex?: long(name='PageIndex', description='The period of time that rate limiting remains effective.', example='1'),
  pageSize?: long(name='PageSize', description='Set the value to **DescribeDomainCcActivityLog**.', example='30'),
  requestId?: string(name='RequestId', description='The name of the rule that was triggered', example='3C6CCEC4-6B88-4D4A-93E4-D47B3D92CF8F'),
  total?: long(name='Total', description='The value of the object that triggered rate limiting.

If you do not set this parameter, the values of all events that triggered rate limiting are queried.', example='20'),
}

model DescribeDomainCcActivityLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainCcActivityLogResponseBody(name='body'),
}

/**
  * The timestamp of the data.
  *
  * @param request DescribeDomainCcActivityLogRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainCcActivityLogResponse
 */
async function describeDomainCcActivityLogWithOptions(request: DescribeDomainCcActivityLogRequest, runtime: Util.RuntimeOptions): DescribeDomainCcActivityLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.triggerObject)) {
    query['TriggerObject'] = request.triggerObject;
  }
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainCcActivityLog',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The timestamp of the data.
  *
  * @param request DescribeDomainCcActivityLogRequest
  * @return DescribeDomainCcActivityLogResponse
 */
async function describeDomainCcActivityLog(request: DescribeDomainCcActivityLogRequest): DescribeDomainCcActivityLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainCcActivityLogWithOptions(request, runtime);
}

model DescribeDomainCertificateInfoRequest {
  domainName?: string(name='DomainName', description='The information about the SSL certificate.', example='example.com'),
}

model DescribeDomainCertificateInfoResponseBody = {
  certInfos?: {
    certInfo?: [ 
    {
      certDomainName?: string(name='CertDomainName', description='The name of the certificate authority (CA) that issued the SSL certificate.', example='example.com'),
      certExpireTime?: string(name='CertExpireTime', description='The status of the SSL certificate.

*   **success**: The SSL certificate is effective.
*   **checking**: The system is checking whether the domain name is accelerated by Alibaba Cloud CDN.
*   **cname_error**: The domain name is not accelerated by Alibaba Cloud CDN.
*   **top_domain_cname_error**: The top-level domain name is not an accelerated domain name.
*   **domain_invalid**: The domain name contains invalid characters.
*   **unsupport_wildcard**: Wildcard domain names are not supported.
*   **applying**: The application for a certificate is in progress.
*   **fget_token_timeout**: The application for a certificate timed out.
*   **check_token_timeout**: The verification timed out.
*   **get_cert_timeout**: The request to obtain the certificate timed out.
*   **failed**: The application for a certificate failed.', example='2018-06-03T22:03:39Z'),
      certId?: string(name='CertId', description='The domain name that matches the SSL certificate.', example='9002448'),
      certLife?: string(name='CertLife', description='The time when the certificate was renewed.', example='months'),
      certName?: string(name='CertName', description='The public key of the SSL certificate.', example='example.com'),
      certOrg?: string(name='CertOrg', description='The time when the SSL certificate became effective.', example='Let\\"s Encrypt'),
      certRegion?: string(name='CertRegion', description='The status of HTTPS.

*   **on**: enabled.
*   **off**: disabled.', example='cn-hangzhou'),
      certStartTime?: string(name='CertStartTime', description='The name of the SSL certificate.', example='2018-06-03T22:03:39Z'),
      certType?: string(name='CertType', description='The status of the CNAME of the domain name.

*   **ok**: The domain name points to the CNAME assigned from Alibaba Cloud Content Delivery Network (CDN).
*   **cname_error**: An error occurred and the domain name cannot point to the CNAME.
*   **top_domain_cname_error**: An error occurred to the CNAME of the top-level domain name. The domain name cannot point to the CNAME.
*   **unsupport_wildcard**: Wildcard domain names are not supported.', example='free'),
      certUpdateTime?: string(name='CertUpdateTime', description='The status of HTTPS.

*   **on**: enabled.
*   **off**: disabled.', example='2018-06-03T22:03:39Z'),
      domainCnameStatus?: string(name='DomainCnameStatus', description='>  The maximum number of times that each user can call this operation per second is 100.', example='ok'),
      domainName?: string(name='DomainName', description='The type of the SSL certificate. Valid values:

*   **free**: a free SSL certificate.
*   **cas**: an SSL certificate purchased from Alibaba Cloud SSL Certificates Service.
*   **upload**: a user-uploaded SSL certificate.', example='example.com'),
      serverCertificate?: string(name='ServerCertificate', description='The public key of the SSL certificate.', example='asdadaxxxx'),
      serverCertificateStatus?: string(name='ServerCertificateStatus', description='The accelerated domain name.', example='on'),
      status?: string(name='Status', description='The domain name that matches the SSL certificate.', example='success'),
    }
  ](name='CertInfo')
  }(name='CertInfos', description='The unit of the validity period of the SSL certificate.

*   **months**: The validity period is measured in months.
*   **years**: The validity period is measured in years.'),
  requestId?: string(name='RequestId', description='The time when the SSL certificate expires.', example='5C1E43DC-9E51-4771-82C0-7D5ECEB547A1'),
}

model DescribeDomainCertificateInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainCertificateInfoResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request DescribeDomainCertificateInfoRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainCertificateInfoResponse
 */
async function describeDomainCertificateInfoWithOptions(request: DescribeDomainCertificateInfoRequest, runtime: Util.RuntimeOptions): DescribeDomainCertificateInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainCertificateInfo',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @param request DescribeDomainCertificateInfoRequest
  * @return DescribeDomainCertificateInfoResponse
 */
async function describeDomainCertificateInfo(request: DescribeDomainCertificateInfoRequest): DescribeDomainCertificateInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainCertificateInfoWithOptions(request, runtime);
}

model DescribeDomainCnameRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name that you want to query. Separate multiple domain names with commas (,). This parameter cannot be left empty.', example='pay.slci6c.mbolsos.com,mch.b7r2v7.mbolsos.com,p.h99e.mbolsos.com,p.xmko.mbolsos.com,p.f2kd.mbolsos.com'),
}

model DescribeDomainCnameResponseBody = {
  cnameDatas?: {
    data?: [ 
    {
      cname?: string(name='Cname', description='The CNAME assigned to the domain name by Alibaba Cloud CDN.', example='a.com.w.alikunlun.net'),
      domain?: string(name='Domain', description='The accelerated domain name.', example='a.com'),
      status?: int32(name='Status', description='The CNAME detection result. Valid values:

*   0: The DNS can detect the CNAME assigned to the domain name.
*   Value other than 0: The DNS cannot detect the CNAME assigned to the domain name.', example='0'),
    }
  ](name='Data')
  }(name='CnameDatas', description='Details about the CNAME detection results.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='06D29681-B7CD-4034-A8CC-28AFFA213539'),
}

model DescribeDomainCnameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainCnameResponseBody(name='body'),
}

async function describeDomainCnameWithOptions(request: DescribeDomainCnameRequest, runtime: Util.RuntimeOptions): DescribeDomainCnameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainCname',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainCname(request: DescribeDomainCnameRequest): DescribeDomainCnameResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainCnameWithOptions(request, runtime);
}

model DescribeDomainCustomLogConfigRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name.', example='example.com'),
}

model DescribeDomainCustomLogConfigResponseBody = {
  configId?: string(name='ConfigId', description='The sample log configuration.', example='123'),
  remark?: string(name='Remark', description='The ID of the request.', example='$time_iso8601_$request_method_$'),
  requestId?: string(name='RequestId', description='The format of the log configuration.', example='94E3559F-7B6A-4A5E-AFFD-44E2A208A249'),
  sample?: string(name='Sample', description='The operation that you want to perform. Set the value to **DescribeDomainCustomLogConfig**.', example='[9/Jun/2015:01:58:09+0800]188.165.15.75-1542\\"-\\"\\"GET http://www.aliyun.com/index.html\\'),
  tag?: string(name='Tag', description='The ID of the log configuration.', example='book'),
}

model DescribeDomainCustomLogConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainCustomLogConfigResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeDomainCustomLogConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainCustomLogConfigResponse
 */
async function describeDomainCustomLogConfigWithOptions(request: DescribeDomainCustomLogConfigRequest, runtime: Util.RuntimeOptions): DescribeDomainCustomLogConfigResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainCustomLogConfig',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeDomainCustomLogConfigRequest
  * @return DescribeDomainCustomLogConfigResponse
 */
async function describeDomainCustomLogConfig(request: DescribeDomainCustomLogConfigRequest): DescribeDomainCustomLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainCustomLogConfigWithOptions(request, runtime);
}

model DescribeDomainDetailDataByLayerRequest {
  domainName?: string(name='DomainName', description='The bandwidth. Unit: bit/s.', example='example.com'),
  endTime?: string(name='EndTime', description='The protocol by which you want to query data. Valid values: **http**, **https**, **quic**, and **all**.

The default value is **all**.', example='2020-07-05T22:05:00Z'),
  field?: string(name='Field', description='The number of queries per second.', example='bps,ipv6_traf,traf,http_code,qps'),
  ispNameEn?: string(name='IspNameEn', description='The amount of network traffic. Unit: bytes.', example='telecom'),
  layer?: string(name='Layer', description='The operation that you want to perform. Set the value to **DescribeDomainDetailDataByLayer**.', example='all'),
  locationNameEn?: string(name='LocationNameEn', description='The number of IPv6 requests per second.', example='hangzhou'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2020-07-05T22:00:00Z'),
}

model DescribeDomainDetailDataByLayerResponseBody = {
  data?: {
    dataModule?: [ 
    {
      acc?: long(name='Acc', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2'),
      bps?: float(name='Bps', description='Queries the detailed data of one or more accelerated domain names by protocol. Data is collected by domain name.', example='21060178715.146667'),
      domainName?: string(name='DomainName', description='DescribeDomainDetailDataByLayer', example='example.com'),
      httpCode?: string(name='HttpCode', description='The domain name.', example='200:44349|206:1753719|304:45|403:1095|416:1|499:332'),
      ipv6Acc?: long(name='Ipv6Acc', description='The detailed data of the accelerated domain names.', example='1'),
      ipv6Bps?: float(name='Ipv6Bps', description='The metric that you want to query. You can specify one or more metrics and separate them with commas (,). Valid values: **bps**, **qps**, **traf**, **acc**, **ipv6\\_traf**, **ipv6\\_bps**, **ipv6\\_acc**, **ipv6\\_qps**, and **http_code**.', example='0'),
      ipv6Qps?: float(name='Ipv6Qps', description='The proportions of HTTP status codes.', example='0'),
      ipv6Traf?: long(name='Ipv6Traf', description='The amount of network traffic generated by IPv6 requests. Unit: bytes.', example='141718944482'),
      qps?: float(name='Qps', description='The name of the region. You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query regions.

If you do not specify a region, data in all regions is queried.', example='5998.47'),
      timeStamp?: string(name='TimeStamp', description='The ID of the request.', example='2020-07-05T22:00:00Z'),
      traf?: long(name='Traf', description='The number of IPv6 requests.', example='789756701818'),
    }
  ](name='DataModule')
  }(name='Data', description='The name of the Internet service provider (ISP) for your Alibaba Cloud CDN service. You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query ISP names.

If you do not specify an ISP, data of all ISPs is queried.'),
  requestId?: string(name='RequestId', description='The timestamp of the data returned.', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model DescribeDomainDetailDataByLayerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainDetailDataByLayerResponseBody(name='body'),
}

/**
  * The domain name that you want to query. You can specify multiple domain names and separate them with commas (,). You can specify at most 30 domain names in each call.
  *
  * @param request DescribeDomainDetailDataByLayerRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainDetailDataByLayerResponse
 */
async function describeDomainDetailDataByLayerWithOptions(request: DescribeDomainDetailDataByLayerRequest, runtime: Util.RuntimeOptions): DescribeDomainDetailDataByLayerResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainDetailDataByLayer',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The domain name that you want to query. You can specify multiple domain names and separate them with commas (,). You can specify at most 30 domain names in each call.
  *
  * @param request DescribeDomainDetailDataByLayerRequest
  * @return DescribeDomainDetailDataByLayerResponse
 */
async function describeDomainDetailDataByLayer(request: DescribeDomainDetailDataByLayerRequest): DescribeDomainDetailDataByLayerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainDetailDataByLayerWithOptions(request, runtime);
}

model DescribeDomainHitRateDataRequest {
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2019-12-30T08:10:00Z'),
  interval?: string(name='Interval', example='300'),
  startTime?: string(name='StartTime', example='2019-12-30T08:00:00Z'),
}

model DescribeDomainHitRateDataResponseBody = {
  dataInterval?: string(name='DataInterval', example='300'),
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2019-12-30T08:10:00Z'),
  hitRateInterval?: {
    dataModule?: [ 
    {
      httpsValue?: string(name='HttpsValue', example='50.0'),
      timeStamp?: string(name='TimeStamp', example='2019-12-30T08:00:00Z'),
      value?: string(name='Value', example='100.0'),
    }
  ](name='DataModule')
  }(name='HitRateInterval'),
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
  startTime?: string(name='StartTime', example='2019-12-30T08:00:00Z'),
}

model DescribeDomainHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainHitRateDataResponseBody(name='body'),
}

/**
  * The byte hit ratio of HTTPS requests.
  *
  * @param request DescribeDomainHitRateDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainHitRateDataResponse
 */
async function describeDomainHitRateDataWithOptions(request: DescribeDomainHitRateDataRequest, runtime: Util.RuntimeOptions): DescribeDomainHitRateDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainHitRateData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The byte hit ratio of HTTPS requests.
  *
  * @param request DescribeDomainHitRateDataRequest
  * @return DescribeDomainHitRateDataResponse
 */
async function describeDomainHitRateData(request: DescribeDomainHitRateDataRequest): DescribeDomainHitRateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainHitRateDataWithOptions(request, runtime);
}

model DescribeDomainHttpCodeDataRequest {
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2021-06-29T05:45:00Z'),
  interval?: string(name='Interval', example='300'),
  ispNameEn?: string(name='IspNameEn', example='unicom'),
  locationNameEn?: string(name='LocationNameEn', example='beijing'),
  startTime?: string(name='StartTime', example='2021-06-29T05:30:00Z'),
}

model DescribeDomainHttpCodeDataResponseBody = {
  dataInterval?: string(name='DataInterval', example='300'),
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2021-06-29T05:45:00Z'),
  httpCodeData?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp', example='2021-06-29T05:40:00Z'),
      value?: {
        codeProportionData?: [ 
        {
          code?: string(name='Code', example='200'),
          count?: string(name='Count', example='300'),
          proportion?: string(name='Proportion', example='66.046511627907'),
        }
      ](name='CodeProportionData')
      }(name='Value'),
    }
  ](name='UsageData')
  }(name='HttpCodeData'),
  requestId?: string(name='RequestId', example='BC858082-736F-4A25-867B-E5B67C85ACF7'),
  startTime?: string(name='StartTime', example='2021-06-29T05:30:00Z'),
}

model DescribeDomainHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainHttpCodeDataResponseBody(name='body'),
}

async function describeDomainHttpCodeDataWithOptions(request: DescribeDomainHttpCodeDataRequest, runtime: Util.RuntimeOptions): DescribeDomainHttpCodeDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainHttpCodeData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainHttpCodeData(request: DescribeDomainHttpCodeDataRequest): DescribeDomainHttpCodeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainHttpCodeDataWithOptions(request, runtime);
}

model DescribeDomainHttpCodeDataByLayerRequest {
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2020-07-06T22:00:00Z'),
  interval?: string(name='Interval', example='300'),
  ispNameEn?: string(name='IspNameEn', example='telecom'),
  layer?: string(name='Layer', example='all'),
  locationNameEn?: string(name='LocationNameEn', example='hangzhou'),
  startTime?: string(name='StartTime', example='2020-07-05T22:00:00Z'),
}

model DescribeDomainHttpCodeDataByLayerResponseBody = {
  dataInterval?: string(name='DataInterval', example='300'),
  httpCodeDataInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp', example='2015-12-10T20:35:00Z'),
      totalValue?: string(name='TotalValue', example='110'),
      value?: string(name='Value', example='{ "200": 10, "206": 100}'),
    }
  ](name='DataModule')
  }(name='HttpCodeDataInterval'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
}

model DescribeDomainHttpCodeDataByLayerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainHttpCodeDataByLayerResponseBody(name='body'),
}

/**
  * The total number of times that HTTP status codes were returned.
  *
  * @param request DescribeDomainHttpCodeDataByLayerRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainHttpCodeDataByLayerResponse
 */
async function describeDomainHttpCodeDataByLayerWithOptions(request: DescribeDomainHttpCodeDataByLayerRequest, runtime: Util.RuntimeOptions): DescribeDomainHttpCodeDataByLayerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.layer)) {
    query['Layer'] = request.layer;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainHttpCodeDataByLayer',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The total number of times that HTTP status codes were returned.
  *
  * @param request DescribeDomainHttpCodeDataByLayerRequest
  * @return DescribeDomainHttpCodeDataByLayerResponse
 */
async function describeDomainHttpCodeDataByLayer(request: DescribeDomainHttpCodeDataByLayerRequest): DescribeDomainHttpCodeDataByLayerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainHttpCodeDataByLayerWithOptions(request, runtime);
}

model DescribeDomainISPDataRequest {
  domainName?: string(name='DomainName', description='The request error rate.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

The end time must be later than the start time.', example='2019-11-30T05:40:00Z'),
  startTime?: string(name='StartTime', description='The accelerated domain name.', example='2019-11-29T05:33:00Z'),
}

model DescribeDomainISPDataResponseBody = {
  dataInterval?: string(name='DataInterval', description='The accelerated domain name. You can specify only one domain name in each call.

By default, this operation queries the proportions of data usage for all accelerated domain names.', example='86400'),
  domainName?: string(name='DomainName', description='The end of the time range that was queried.', example='example.com'),
  endTime?: string(name='EndTime', description='The operation that you want to perform. Set the value to **DescribeDomainISPData**.', example='2019-11-30T05:40:00Z'),
  requestId?: string(name='RequestId', description='The number of queries per second.', example='DE81639B-DAC1-4C76-AB72-F34B836837D5'),
  startTime?: string(name='StartTime', description='The proportion of network traffic.', example='2019-11-29T05:33:00Z'),
  value?: {
    ISPProportionData?: [ 
    {
      avgObjectSize?: string(name='AvgObjectSize', description='The average response time. Unit: milliseconds.', example='7081884.7'),
      avgResponseRate?: string(name='AvgResponseRate', description='The access statistics by ISP.', example='88.92594866772144'),
      avgResponseTime?: string(name='AvgResponseTime', description='The total number of requests.', example='79638.0'),
      bps?: string(name='Bps', description='The time interval between the data entries. Unit: seconds.', example='1311.4601296296296'),
      bytesProportion?: string(name='BytesProportion', example='0.012220518530445479'),
      ISP?: string(name='ISP', description='Queries the proportions of data usage of different Internet service providers (ISPs). Data is collected every day. You can query data collected within the last 90 days.', example='DescribeDomainISPData'),
      ispEname?: string(name='IspEname', description='The ID of the request.', example='alibaba'),
      proportion?: string(name='Proportion', description='The average response size. Unit: bytes.', example='0.004509176173513099'),
      qps?: string(name='Qps', description='The bandwidth value.', example='2.3148148148148147E-5'),
      reqErrRate?: string(name='ReqErrRate', description='The beginning of the time range that was queried.', example='0.0'),
      totalBytes?: string(name='TotalBytes', description='The information about the ISP.', example='7081884'),
      totalQuery?: string(name='TotalQuery', description='The average response speed. Unit: byte/ms.', example='1'),
    }
  ](name='ISPProportionData')
  }(name='Value', description='The proportion of the HTTP status code.'),
}

model DescribeDomainISPDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainISPDataResponseBody(name='body'),
}

/**
  * The total amount of network traffic.
  *
  * @param request DescribeDomainISPDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainISPDataResponse
 */
async function describeDomainISPDataWithOptions(request: DescribeDomainISPDataRequest, runtime: Util.RuntimeOptions): DescribeDomainISPDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainISPData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The total amount of network traffic.
  *
  * @param request DescribeDomainISPDataRequest
  * @return DescribeDomainISPDataResponse
 */
async function describeDomainISPData(request: DescribeDomainISPDataRequest): DescribeDomainISPDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainISPDataWithOptions(request, runtime);
}

model DescribeDomainMax95BpsDataRequest {
  cycle?: string(name='Cycle', description='1001', example='month'),
  domainName?: string(name='DomainName', description='data.content.domesticMax95Bps', example='example.com'),
  endTime?: string(name='EndTime', description='The 95th percentile bandwidth.', example='2017-12-22T08:00:00Z'),
  startTime?: string(name='StartTime', description='data.content.overseasMax95Bps', example='2017-12-21T08:00:00Z'),
  timePoint?: string(name='TimePoint', description='data.content.max95Bps', example='2017-12-21T10:00:00Z'),
}

model DescribeDomainMax95BpsDataResponseBody = {
  detailData?: {
    max95Detail?: [ 
    {
      area?: string(name='Area'),
      max95Bps?: float(name='Max95Bps'),
      max95BpsPeakTime?: string(name='Max95BpsPeakTime'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='Max95Detail')
  }(name='DetailData'),
  domainName?: string(name='DomainName', description='http://inner.jing.alibaba-inc.com:1160/v2/api/rtlog/max95BpsData', example='example.com'),
  domesticMax95Bps?: string(name='DomesticMax95Bps', example='16777590.28'),
  endTime?: string(name='EndTime', description='domainName', example='2015-12-11T21:00:00Z'),
  max95Bps?: string(name='Max95Bps', example='16777590.28'),
  overseasMax95Bps?: string(name='OverseasMax95Bps', example='0'),
  requestId?: string(name='RequestId', description='Specified EndTime does not math the specified StartTime.', example='3C6CCEC4-6B88-4D4A-93E4-D47B3D92CF8F'),
  startTime?: string(name='StartTime', description='http://inner.jing.alibaba-inc.com:1160/v2/api/rtlog/max95BpsData', example='2015-12-10T20:00:00Z'),
}

model DescribeDomainMax95BpsDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainMax95BpsDataResponseBody(name='body'),
}

/**
  * The 95th percentile bandwidth in the Chinese mainland.
  *
  * @param request DescribeDomainMax95BpsDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainMax95BpsDataResponse
 */
async function describeDomainMax95BpsDataWithOptions(request: DescribeDomainMax95BpsDataRequest, runtime: Util.RuntimeOptions): DescribeDomainMax95BpsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cycle)) {
    query['Cycle'] = request.cycle;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.timePoint)) {
    query['TimePoint'] = request.timePoint;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainMax95BpsData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The 95th percentile bandwidth in the Chinese mainland.
  *
  * @param request DescribeDomainMax95BpsDataRequest
  * @return DescribeDomainMax95BpsDataResponse
 */
async function describeDomainMax95BpsData(request: DescribeDomainMax95BpsDataRequest): DescribeDomainMax95BpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainMax95BpsDataWithOptions(request, runtime);
}

model DescribeDomainMultiUsageDataRequest {
  domainName?: string(name='DomainName', description='The operation that you want to perform. Set the value to **DescribeDomainMultiUsageData**.', example='example.com'),
  endTime?: string(name='EndTime', description='The number of requests.', example='2017-12-10T21:00:00Z'),
  startTime?: string(name='StartTime', description='The information about requests collected every 5 minutes.', example='2017-12-10T20:00:00Z'),
}

model DescribeDomainMultiUsageDataResponseBody = {
  endTime?: string(name='EndTime', description='The end of the time range that was queried.', example='2017-12-10T21:00:00Z'),
  requestId?: string(name='RequestId', description='The type of data returned.

>  For Alibaba Cloud CDN, the valid value is Simple.', example='3C6CCEC4-6B88-4D4A-93E4-D47B3D92CF8F'),
  requestPerInterval?: {
    requestDataModule?: [ 
    {
      domain?: string(name='Domain', description='DescribeDomainMultiUsageData', example='example.com'),
      request?: long(name='Request', example='11288111'),
      timeStamp?: string(name='TimeStamp', description='Queries the amount of data transfer and the number of requests for one or more accelerated domain names at a time. Data is collected every 5 minutes.', example='2017-12-10T20:00:00Z'),
      type?: string(name='Type', description='The information about the accelerated domain name.', example='Simple'),
    }
  ](name='RequestDataModule')
  }(name='RequestPerInterval', description='The ID of the request.'),
  startTime?: string(name='StartTime', description='The accelerated domain names. You can specify multiple accelerated domain names and separate domain names with commas (,).

> *   You can specify at most 30 accelerated domain names.
*   If you do not set this parameter, the data of all accelerated domain names that belong to your Alibaba Cloud account is queried.', example='2017-12-10T20:00:00Z'),
  trafficPerInterval?: {
    trafficDataModule?: [ 
    {
      area?: string(name='Area', example='CN'),
      bps?: float(name='Bps', example='11288111.1'),
      domain?: string(name='Domain', example='example.com'),
      timeStamp?: string(name='TimeStamp', example='2017-12-10T20:00:00Z'),
      type?: string(name='Type', example='DynamicHttp'),
    }
  ](name='TrafficDataModule')
  }(name='TrafficPerInterval'),
}

model DescribeDomainMultiUsageDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainMultiUsageDataResponseBody(name='body'),
}

/**
  * The timestamp of the data returned.
  *
  * @param request DescribeDomainMultiUsageDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainMultiUsageDataResponse
 */
async function describeDomainMultiUsageDataWithOptions(request: DescribeDomainMultiUsageDataRequest, runtime: Util.RuntimeOptions): DescribeDomainMultiUsageDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainMultiUsageData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The timestamp of the data returned.
  *
  * @param request DescribeDomainMultiUsageDataRequest
  * @return DescribeDomainMultiUsageDataResponse
 */
async function describeDomainMultiUsageData(request: DescribeDomainMultiUsageDataRequest): DescribeDomainMultiUsageDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainMultiUsageDataWithOptions(request, runtime);
}

model DescribeDomainPathDataRequest {
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2016-10-21T04:00:00Z'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  path?: string(name='Path', example='/path/'),
  startTime?: string(name='StartTime', example='2016-10-20T04:00:00Z'),
}

model DescribeDomainPathDataResponseBody = {
  dataInterval?: string(name='DataInterval', example='300'),
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2017-09-30T17:00:00Z'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  pathDataPerInterval?: {
    usageData?: [ 
    {
      acc?: int32(name='Acc', example='10'),
      path?: string(name='Path', example='/path/'),
      time?: string(name='Time', example='2017-09-30T16:00:00Z'),
      traffic?: int32(name='Traffic', example='346'),
    }
  ](name='UsageData')
  }(name='PathDataPerInterval'),
  startTime?: string(name='StartTime', example='2017-09-30T16:00:00Z'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeDomainPathDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainPathDataResponseBody(name='body'),
}

/**
  * The amount of network traffic. Unit: bytes.
  *
  * @param request DescribeDomainPathDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainPathDataResponse
 */
async function describeDomainPathDataWithOptions(request: DescribeDomainPathDataRequest, runtime: Util.RuntimeOptions): DescribeDomainPathDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainPathData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The amount of network traffic. Unit: bytes.
  *
  * @param request DescribeDomainPathDataRequest
  * @return DescribeDomainPathDataResponse
 */
async function describeDomainPathData(request: DescribeDomainPathDataRequest): DescribeDomainPathDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainPathDataWithOptions(request, runtime);
}

model DescribeDomainPvDataRequest {
  domainName?: string(name='DomainName', description='The timestamp of the returned data.', example='example.com'),
  endTime?: string(name='EndTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2015-11-29T00:00:00Z'),
  startTime?: string(name='StartTime', description='The number of PVs at each interval.', example='2015-11-28T00:00:00Z'),
}

model DescribeDomainPvDataResponseBody = {
  dataInterval?: string(name='DataInterval', description='The ID of the request.', example='3600'),
  domainName?: string(name='DomainName', description='The time interval between the data entries. Unit: seconds.', example='example.com'),
  endTime?: string(name='EndTime', description='The accelerated domain name.', example='2015-11-28T04:00:00Z'),
  pvDataInterval?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp', example='2015-11-28T03:00:00Z'),
      value?: string(name='Value', description='Queries the page view (PV) data of an accelerated domain name. The data is collected at an interval of 1 hour. You can query data within the last 90 days.', example='9292'),
    }
  ](name='UsageData')
  }(name='PvDataInterval', description='The operation that you want to perform. Set the value to **DescribeDomainPvData**.'),
  requestId?: string(name='RequestId', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

The end time must be later than the start time.', example='BCD7D917-76F1-442F-BB75-C810DE34C761'),
  startTime?: string(name='StartTime', description='The beginning of the time range during which data was queried.', example='2015-11-28T03:00:00Z'),
}

model DescribeDomainPvDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainPvDataResponseBody(name='body'),
}

/**
  * The accelerated domain name. You can specify only one domain name.
  *
  * @param request DescribeDomainPvDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainPvDataResponse
 */
async function describeDomainPvDataWithOptions(request: DescribeDomainPvDataRequest, runtime: Util.RuntimeOptions): DescribeDomainPvDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainPvData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The accelerated domain name. You can specify only one domain name.
  *
  * @param request DescribeDomainPvDataRequest
  * @return DescribeDomainPvDataResponse
 */
async function describeDomainPvData(request: DescribeDomainPvDataRequest): DescribeDomainPvDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainPvDataWithOptions(request, runtime);
}

model DescribeDomainQpsDataRequest {
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2019-11-30T05:40:00Z'),
  interval?: string(name='Interval', example='300'),
  ispNameEn?: string(name='IspNameEn', example='unicom'),
  locationNameEn?: string(name='LocationNameEn', example='beijing'),
  startTime?: string(name='StartTime', example='2019-11-30T05:33:00Z'),
}

model DescribeDomainQpsDataResponseBody = {
  dataInterval?: string(name='DataInterval', example='300'),
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2019-11-30T05:40:00Z'),
  qpsDataInterval?: {
    dataModule?: [ 
    {
      accDomesticValue?: string(name='AccDomesticValue', example='0'),
      accOverseasValue?: string(name='AccOverseasValue', example='0'),
      accValue?: string(name='AccValue', example='0'),
      domesticValue?: string(name='DomesticValue', example='0'),
      httpsAccDomesticValue?: string(name='HttpsAccDomesticValue', example='1'),
      httpsAccOverseasValue?: string(name='HttpsAccOverseasValue', example='1'),
      httpsAccValue?: string(name='HttpsAccValue', example='1'),
      httpsDomesticValue?: string(name='HttpsDomesticValue', example='1'),
      httpsOverseasValue?: string(name='HttpsOverseasValue', example='1'),
      httpsValue?: string(name='HttpsValue', example='1'),
      overseasValue?: string(name='OverseasValue', example='0'),
      timeStamp?: string(name='TimeStamp', example='2019-11-30T05:40:00Z'),
      value?: string(name='Value', example='0'),
    }
  ](name='DataModule')
  }(name='QpsDataInterval'),
  requestId?: string(name='RequestId', example='B8333EDB-4595-46E0-AFE9-29BAA290D0E0'),
  startTime?: string(name='StartTime', example='2019-11-30T05:33:00Z'),
}

model DescribeDomainQpsDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainQpsDataResponseBody(name='body'),
}

/**
  * The number of HTTPS requests sent to POPs in the Chinese mainland.
  *
  * @param request DescribeDomainQpsDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainQpsDataResponse
 */
async function describeDomainQpsDataWithOptions(request: DescribeDomainQpsDataRequest, runtime: Util.RuntimeOptions): DescribeDomainQpsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainQpsData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The number of HTTPS requests sent to POPs in the Chinese mainland.
  *
  * @param request DescribeDomainQpsDataRequest
  * @return DescribeDomainQpsDataResponse
 */
async function describeDomainQpsData(request: DescribeDomainQpsDataRequest): DescribeDomainQpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainQpsDataWithOptions(request, runtime);
}

model DescribeDomainQpsDataByLayerRequest {
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2019-11-30T05:40:00Z'),
  interval?: string(name='Interval', example='300'),
  ispNameEn?: string(name='IspNameEn', example='unicom'),
  layer?: string(name='Layer', example='all'),
  locationNameEn?: string(name='LocationNameEn', example='beijing'),
  startTime?: string(name='StartTime', example='2019-11-30T05:33:00Z'),
}

model DescribeDomainQpsDataByLayerResponseBody = {
  dataInterval?: string(name='DataInterval', example='300'),
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2019-11-30T05:40:00Z'),
  layer?: string(name='Layer', example='all'),
  qpsDataInterval?: {
    dataModule?: [ 
    {
      accDomesticValue?: string(name='AccDomesticValue', example='12'),
      accOverseasValue?: string(name='AccOverseasValue', example='44'),
      accValue?: string(name='AccValue', example='56'),
      domesticValue?: string(name='DomesticValue', example='0.12'),
      overseasValue?: string(name='OverseasValue', example='0.44'),
      timeStamp?: string(name='TimeStamp', example='2015-12-10T21:00:00Z'),
      value?: string(name='Value', example='0.56'),
    }
  ](name='DataModule')
  }(name='QpsDataInterval'),
  requestId?: string(name='RequestId', example='BEA5625F-8FCF-48F4-851B-CA63946DA664'),
  startTime?: string(name='StartTime', example='2019-11-30T05:33:00Z'),
}

model DescribeDomainQpsDataByLayerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainQpsDataByLayerResponseBody(name='body'),
}

/**
  * The number of queries per second in the Chinese mainland.
  *
  * @param request DescribeDomainQpsDataByLayerRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainQpsDataByLayerResponse
 */
async function describeDomainQpsDataByLayerWithOptions(request: DescribeDomainQpsDataByLayerRequest, runtime: Util.RuntimeOptions): DescribeDomainQpsDataByLayerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.layer)) {
    query['Layer'] = request.layer;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainQpsDataByLayer',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The number of queries per second in the Chinese mainland.
  *
  * @param request DescribeDomainQpsDataByLayerRequest
  * @return DescribeDomainQpsDataByLayerResponse
 */
async function describeDomainQpsDataByLayer(request: DescribeDomainQpsDataByLayerRequest): DescribeDomainQpsDataByLayerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainQpsDataByLayerWithOptions(request, runtime);
}

model DescribeDomainRealTimeBpsDataRequest {
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2019-11-30T05:40:00Z'),
  ispNameEn?: string(name='IspNameEn', example='telecom'),
  locationNameEn?: string(name='LocationNameEn', example='beijing'),
  startTime?: string(name='StartTime', example='2019-11-30T05:33:00Z'),
}

model DescribeDomainRealTimeBpsDataResponseBody = {
  data?: {
    bpsModel?: [ 
    {
      bps?: float(name='Bps', example='16710625.733333332'),
      timeStamp?: string(name='TimeStamp', example='2019-11-30T05:41:00Z'),
    }
  ](name='BpsModel')
  }(name='Data'),
  requestId?: string(name='RequestId', example='B49E6DDA-F413-422B-B58E-2FA23F286726'),
}

model DescribeDomainRealTimeBpsDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainRealTimeBpsDataResponseBody(name='body'),
}

/**
  * The timestamp of the data returned. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
  *
  * @param request DescribeDomainRealTimeBpsDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainRealTimeBpsDataResponse
 */
async function describeDomainRealTimeBpsDataWithOptions(request: DescribeDomainRealTimeBpsDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeBpsDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainRealTimeBpsData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The timestamp of the data returned. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
  *
  * @param request DescribeDomainRealTimeBpsDataRequest
  * @return DescribeDomainRealTimeBpsDataResponse
 */
async function describeDomainRealTimeBpsData(request: DescribeDomainRealTimeBpsDataRequest): DescribeDomainRealTimeBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeBpsDataWithOptions(request, runtime);
}

model DescribeDomainRealTimeByteHitRateDataRequest {
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2020-05-15T09:15:00Z'),
  startTime?: string(name='StartTime', example='2020-05-15T09:13:00Z'),
}

model DescribeDomainRealTimeByteHitRateDataResponseBody = {
  data?: {
    byteHitRateDataModel?: [ 
    {
      byteHitRate?: float(name='ByteHitRate', example='0.8956940476262277'),
      timeStamp?: string(name='TimeStamp', example='2019-11-30T05:40:00Z'),
    }
  ](name='ByteHitRateDataModel')
  }(name='Data'),
  requestId?: string(name='RequestId', example='70A26B11-3673-479C-AEA8-E03FC5D3496D'),
}

model DescribeDomainRealTimeByteHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainRealTimeByteHitRateDataResponseBody(name='body'),
}

/**
  * The timestamp of the data returned. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
  *
  * @param request DescribeDomainRealTimeByteHitRateDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainRealTimeByteHitRateDataResponse
 */
async function describeDomainRealTimeByteHitRateDataWithOptions(request: DescribeDomainRealTimeByteHitRateDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeByteHitRateDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainRealTimeByteHitRateData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The timestamp of the data returned. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
  *
  * @param request DescribeDomainRealTimeByteHitRateDataRequest
  * @return DescribeDomainRealTimeByteHitRateDataResponse
 */
async function describeDomainRealTimeByteHitRateData(request: DescribeDomainRealTimeByteHitRateDataRequest): DescribeDomainRealTimeByteHitRateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeByteHitRateDataWithOptions(request, runtime);
}

model DescribeDomainRealTimeDetailDataRequest {
  domainName?: string(name='DomainName', description='The end of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. Example: 2019-11-30T05:40:00Z.

>  The end time must be later than the start time. The time range between the end time and the start time cannot exceed 10 minutes.', example='example.com'),
  endTime?: string(name='EndTime', description='The metrics that you want to query. You can specify multiple metrics and separate them with commas (,). Valid values:

*   **qps**: the number of queries per second
*   **bps**: bandwidth values
*   **http_code**: HTTP status codes', example='2019-11-30T05:40:00Z'),
  field?: string(name='Field', description='The data usage of each ISP and the number of visits in each region.', example='qps'),
  ispNameEn?: string(name='IspNameEn', description='The operation that you want to perform. Set the value to **DescribeDomainRealTimeDetailData**.', example='telecom'),
  locationNameEn?: string(name='LocationNameEn', description='The ID of the request.', example='Guangdong'),
  merge?: string(name='Merge', description='The name of the region. You can call the [DescribeCdnRegionAndIsp](~~91077~~) operation to query the most recent region list.', example='false'),
  mergeLocIsp?: string(name='MergeLocIsp', description='Queries detailed monitoring data of one or more accelerated domain names at a time.', example='false'),
  startTime?: string(name='StartTime', description='Specifies whether to merge the results. Valid values:

*   **true**: merges the results.
*   **false**: does not merge the results. This is the default value.

Default value: **false**.', example='2019-11-30T05:33:00Z'),
}

model DescribeDomainRealTimeDetailDataResponseBody = {
  data?: string(name='Data', description='DescribeDomainRealTimeDetailData', example='[
      {
            "time_stp": "2018-06-05T20:00:00Z",
            "domain_name": "example.com",
            "location": "Guangdong",
            "isp": "telecom",
            "qps": 10
      },
      {
            "time_stp": "2018-06-05T20:00:00Z",
            "domain_name": "example.com",
            "location": "Jiangsu",
            "isp": "unicom",
            "qps": 11.1
      }
]'),
  requestId?: string(name='RequestId', example='B49E6DDA-F413-422B-B58E-2FA23F286726'),
}

model DescribeDomainRealTimeDetailDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainRealTimeDetailDataResponseBody(name='body'),
}

/**
  * Specifies whether to merge the results. Valid values:
  * *   **true**: groups the results by domain name and merges the results by region and ISP.
  * *   **false**: groups the results by domain name.
  * Default value: **false**.
  *
  * @param request DescribeDomainRealTimeDetailDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainRealTimeDetailDataResponse
 */
async function describeDomainRealTimeDetailDataWithOptions(request: DescribeDomainRealTimeDetailDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeDetailDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainRealTimeDetailData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Specifies whether to merge the results. Valid values:
  * *   **true**: groups the results by domain name and merges the results by region and ISP.
  * *   **false**: groups the results by domain name.
  * Default value: **false**.
  *
  * @param request DescribeDomainRealTimeDetailDataRequest
  * @return DescribeDomainRealTimeDetailDataResponse
 */
async function describeDomainRealTimeDetailData(request: DescribeDomainRealTimeDetailDataRequest): DescribeDomainRealTimeDetailDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeDetailDataWithOptions(request, runtime);
}

model DescribeDomainRealTimeHttpCodeDataRequest {
  domainName?: string(name='DomainName', example='example.com,example.org'),
  endTime?: string(name='EndTime', example='2019-11-30T05:40:00Z'),
  ispNameEn?: string(name='IspNameEn', example='unicom'),
  locationNameEn?: string(name='LocationNameEn', example='beijing'),
  startTime?: string(name='StartTime', example='2019-11-30T05:39:00Z'),
}

model DescribeDomainRealTimeHttpCodeDataResponseBody = {
  dataInterval?: string(name='DataInterval', example='60'),
  domainName?: string(name='DomainName', example='example.com,example.org'),
  endTime?: string(name='EndTime', example='2019-11-29T05:42:00Z'),
  realTimeHttpCodeData?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp', example='2019-11-29T05:39:00Z'),
      value?: {
        realTimeCodeProportionData?: [ 
        {
          code?: string(name='Code', example='500'),
          count?: string(name='Count', example='100'),
          proportion?: string(name='Proportion', example='28.4496124031008'),
        }
      ](name='RealTimeCodeProportionData')
      }(name='Value'),
    }
  ](name='UsageData')
  }(name='RealTimeHttpCodeData'),
  requestId?: string(name='RequestId', example='BC858082-736F-4A25-867B-E5B67C85ACF7'),
  startTime?: string(name='StartTime', example='2019-11-29T05:39:00Z'),
}

model DescribeDomainRealTimeHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainRealTimeHttpCodeDataResponseBody(name='body'),
}

async function describeDomainRealTimeHttpCodeDataWithOptions(request: DescribeDomainRealTimeHttpCodeDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeHttpCodeDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainRealTimeHttpCodeData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainRealTimeHttpCodeData(request: DescribeDomainRealTimeHttpCodeDataRequest): DescribeDomainRealTimeHttpCodeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeHttpCodeDataWithOptions(request, runtime);
}

model DescribeDomainRealTimeQpsDataRequest {
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2019-12-02T11:26:00Z'),
  ispNameEn?: string(name='IspNameEn', example='telecom'),
  locationNameEn?: string(name='LocationNameEn', example='beijing'),
  startTime?: string(name='StartTime', example='2019-12-02T11:25:00Z'),
}

model DescribeDomainRealTimeQpsDataResponseBody = {
  data?: {
    qpsModel?: [ 
    {
      qps?: float(name='Qps', example='1851.25'),
      timeStamp?: string(name='TimeStamp', example='2019-12-02T11:25:00Z'),
    }
  ](name='QpsModel')
  }(name='Data'),
  requestId?: string(name='RequestId', example='32DC9806-E9F9-4490-BBDC-B3A9E32FCC1D'),
}

model DescribeDomainRealTimeQpsDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainRealTimeQpsDataResponseBody(name='body'),
}

/**
  * The timestamp of the data returned. The time follows the yyyy-MM-ddTHH:mm:ssZ format in the ISO 8601 standard and is in UTC.
  *
  * @param request DescribeDomainRealTimeQpsDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainRealTimeQpsDataResponse
 */
async function describeDomainRealTimeQpsDataWithOptions(request: DescribeDomainRealTimeQpsDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeQpsDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainRealTimeQpsData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The timestamp of the data returned. The time follows the yyyy-MM-ddTHH:mm:ssZ format in the ISO 8601 standard and is in UTC.
  *
  * @param request DescribeDomainRealTimeQpsDataRequest
  * @return DescribeDomainRealTimeQpsDataResponse
 */
async function describeDomainRealTimeQpsData(request: DescribeDomainRealTimeQpsDataRequest): DescribeDomainRealTimeQpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeQpsDataWithOptions(request, runtime);
}

model DescribeDomainRealTimeReqHitRateDataRequest {
  domainName?: string(name='DomainName', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='example.com'),
  endTime?: string(name='EndTime', description='The response parameters.', example='2018-01-02T11:26:00Z'),
  startTime?: string(name='StartTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2018-01-02T11:23:00Z'),
}

model DescribeDomainRealTimeReqHitRateDataResponseBody = {
  data?: {
    reqHitRateDataModel?: [ 
    {
      reqHitRate?: float(name='ReqHitRate', description='The timestamp. The time follows the ISO 8601 standard. The time is displayed in UTC.', example='0.8956940476262277'),
      timeStamp?: string(name='TimeStamp', description='Queries the request hit ratios for one or more accelerated domain names.', example='2018-01-02T11:26:00Z'),
    }
  ](name='ReqHitRateDataModel')
  }(name='Data', description='The operation that you want to perform. Set the value to **DescribeDomainRealTimeReqHitRateData**.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='70A26B11-3673-479C-AEA8-E03FC5D3496D'),
}

model DescribeDomainRealTimeReqHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainRealTimeReqHitRateDataResponseBody(name='body'),
}

/**
  * The request hit ratio.
  *
  * @param request DescribeDomainRealTimeReqHitRateDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainRealTimeReqHitRateDataResponse
 */
async function describeDomainRealTimeReqHitRateDataWithOptions(request: DescribeDomainRealTimeReqHitRateDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeReqHitRateDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainRealTimeReqHitRateData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The request hit ratio.
  *
  * @param request DescribeDomainRealTimeReqHitRateDataRequest
  * @return DescribeDomainRealTimeReqHitRateDataResponse
 */
async function describeDomainRealTimeReqHitRateData(request: DescribeDomainRealTimeReqHitRateDataRequest): DescribeDomainRealTimeReqHitRateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeReqHitRateDataWithOptions(request, runtime);
}

model DescribeDomainRealTimeSrcBpsDataRequest {
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2019-12-10T20:01:00Z'),
  startTime?: string(name='StartTime', example='2019-12-10T20:00:00Z'),
}

model DescribeDomainRealTimeSrcBpsDataResponseBody = {
  dataInterval?: string(name='DataInterval', example='60'),
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2019-12-10T20:01:00Z'),
  realTimeSrcBpsDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp', example='2019-12-10T20:01:00Z'),
      value?: string(name='Value', example='0'),
    }
  ](name='DataModule')
  }(name='RealTimeSrcBpsDataPerInterval'),
  requestId?: string(name='RequestId', example='7CBCD6AD-B016-42E5-AE0B-B3731DE8F755'),
  startTime?: string(name='StartTime', example='2019-12-10T20:00:00Z'),
}

model DescribeDomainRealTimeSrcBpsDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainRealTimeSrcBpsDataResponseBody(name='body'),
}

/**
  * The timestamp of the returned data.
  *
  * @param request DescribeDomainRealTimeSrcBpsDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainRealTimeSrcBpsDataResponse
 */
async function describeDomainRealTimeSrcBpsDataWithOptions(request: DescribeDomainRealTimeSrcBpsDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeSrcBpsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainRealTimeSrcBpsData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The timestamp of the returned data.
  *
  * @param request DescribeDomainRealTimeSrcBpsDataRequest
  * @return DescribeDomainRealTimeSrcBpsDataResponse
 */
async function describeDomainRealTimeSrcBpsData(request: DescribeDomainRealTimeSrcBpsDataRequest): DescribeDomainRealTimeSrcBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeSrcBpsDataWithOptions(request, runtime);
}

model DescribeDomainRealTimeSrcHttpCodeDataRequest {
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2019-11-30T05:40:00Z'),
  ispNameEn?: string(name='IspNameEn', example='unicom'),
  locationNameEn?: string(name='LocationNameEn', example='beijing'),
  startTime?: string(name='StartTime', example='2019-11-30T04:40:00Z'),
}

model DescribeDomainRealTimeSrcHttpCodeDataResponseBody = {
  dataInterval?: string(name='DataInterval', example='60'),
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2019-11-30T05:40:00Z'),
  realTimeSrcHttpCodeData?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp', example='2015-11-30T05:40:00Z'),
      value?: {
        realTimeSrcCodeProportionData?: [ 
        {
          code?: string(name='Code', example='200'),
          count?: string(name='Count', example='100'),
          proportion?: string(name='Proportion', example='0.62015503875969'),
        }
      ](name='RealTimeSrcCodeProportionData')
      }(name='Value'),
    }
  ](name='UsageData')
  }(name='RealTimeSrcHttpCodeData'),
  requestId?: string(name='RequestId', example='BC858082-736F-4A25-867B-E5B67C85ACF7'),
  startTime?: string(name='StartTime', example='2019-11-30T05:33:00Z'),
}

model DescribeDomainRealTimeSrcHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainRealTimeSrcHttpCodeDataResponseBody(name='body'),
}

/**
  * The count of each HTTP status code.
  *
  * @param request DescribeDomainRealTimeSrcHttpCodeDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainRealTimeSrcHttpCodeDataResponse
 */
async function describeDomainRealTimeSrcHttpCodeDataWithOptions(request: DescribeDomainRealTimeSrcHttpCodeDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeSrcHttpCodeDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainRealTimeSrcHttpCodeData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The count of each HTTP status code.
  *
  * @param request DescribeDomainRealTimeSrcHttpCodeDataRequest
  * @return DescribeDomainRealTimeSrcHttpCodeDataResponse
 */
async function describeDomainRealTimeSrcHttpCodeData(request: DescribeDomainRealTimeSrcHttpCodeDataRequest): DescribeDomainRealTimeSrcHttpCodeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeSrcHttpCodeDataWithOptions(request, runtime);
}

model DescribeDomainRealTimeSrcTrafficDataRequest {
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2019-12-10T20:01:00Z'),
  startTime?: string(name='StartTime', example='2019-12-10T20:00:00Z'),
}

model DescribeDomainRealTimeSrcTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval', example='60'),
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2019-12-10T20:01:00Z'),
  realTimeSrcTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp', example='2019-12-10T20:01:00Z'),
      value?: string(name='Value', example='0'),
    }
  ](name='DataModule')
  }(name='RealTimeSrcTrafficDataPerInterval'),
  requestId?: string(name='RequestId', example='A666D44F-19D6-490E-97CF-1A64AB962C57'),
  startTime?: string(name='StartTime', example='2019-12-10T20:00:00Z'),
}

model DescribeDomainRealTimeSrcTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainRealTimeSrcTrafficDataResponseBody(name='body'),
}

/**
  * The timestamp of the data returned.
  *
  * @param request DescribeDomainRealTimeSrcTrafficDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainRealTimeSrcTrafficDataResponse
 */
async function describeDomainRealTimeSrcTrafficDataWithOptions(request: DescribeDomainRealTimeSrcTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeSrcTrafficDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainRealTimeSrcTrafficData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The timestamp of the data returned.
  *
  * @param request DescribeDomainRealTimeSrcTrafficDataRequest
  * @return DescribeDomainRealTimeSrcTrafficDataResponse
 */
async function describeDomainRealTimeSrcTrafficData(request: DescribeDomainRealTimeSrcTrafficDataRequest): DescribeDomainRealTimeSrcTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeSrcTrafficDataWithOptions(request, runtime);
}

model DescribeDomainRealTimeTrafficDataRequest {
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2019-12-10T20:01:00Z'),
  ispNameEn?: string(name='IspNameEn', example='telecom'),
  locationNameEn?: string(name='LocationNameEn', example='beijing'),
  startTime?: string(name='StartTime', example='2019-12-10T20:00:00Z'),
}

model DescribeDomainRealTimeTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval', example='60'),
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2019-12-10T20:01:00Z'),
  realTimeTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp', example='2019-12-10T20:01:00Z'),
      value?: string(name='Value', example='0'),
    }
  ](name='DataModule')
  }(name='RealTimeTrafficDataPerInterval'),
  requestId?: string(name='RequestId', example='A666D44F-19D6-490E-97CF-1A64AB962C57'),
  startTime?: string(name='StartTime', example='2019-12-10T20:00:00Z'),
}

model DescribeDomainRealTimeTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainRealTimeTrafficDataResponseBody(name='body'),
}

/**
  * The timestamp of the returned data.
  *
  * @param request DescribeDomainRealTimeTrafficDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainRealTimeTrafficDataResponse
 */
async function describeDomainRealTimeTrafficDataWithOptions(request: DescribeDomainRealTimeTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRealTimeTrafficDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainRealTimeTrafficData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The timestamp of the returned data.
  *
  * @param request DescribeDomainRealTimeTrafficDataRequest
  * @return DescribeDomainRealTimeTrafficDataResponse
 */
async function describeDomainRealTimeTrafficData(request: DescribeDomainRealTimeTrafficDataRequest): DescribeDomainRealTimeTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealTimeTrafficDataWithOptions(request, runtime);
}

model DescribeDomainRealtimeLogDeliveryRequest {
  domain?: string(name='Domain', description='The ID of the request.', example='example.com'),
}

model DescribeDomainRealtimeLogDeliveryResponseBody = {
  logstore?: string(name='Logstore', example='LogstoreName'),
  project?: string(name='Project', example='ProjectName'),
  region?: string(name='Region', example='cn-shanghai'),
  requestId?: string(name='RequestId', example='2F8F3852-912F-42AC-80EB-F1CF4284DE93'),
  status?: string(name='Status', description='The ID of the region where the Log Service project is deployed.', example='online'),
}

model DescribeDomainRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainRealtimeLogDeliveryResponseBody(name='body'),
}

/**
  * The name of the Log Service project that is used for real-time log delivery.
  *
  * @param request DescribeDomainRealtimeLogDeliveryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainRealtimeLogDeliveryResponse
 */
async function describeDomainRealtimeLogDeliveryWithOptions(request: DescribeDomainRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): DescribeDomainRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainRealtimeLogDelivery',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The name of the Log Service project that is used for real-time log delivery.
  *
  * @param request DescribeDomainRealtimeLogDeliveryRequest
  * @return DescribeDomainRealtimeLogDeliveryResponse
 */
async function describeDomainRealtimeLogDelivery(request: DescribeDomainRealtimeLogDeliveryRequest): DescribeDomainRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRealtimeLogDeliveryWithOptions(request, runtime);
}

model DescribeDomainRegionDataRequest {
  domainName?: string(name='DomainName', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.  

The end time must be later than the start time.', example='example.com'),
  endTime?: string(name='EndTime', description='The proportion of bytes transferred from each region. For example, a value of 90 indicates that 90% of the bytes are transferred from the specified area.', example='2015-12-07T12:00:00Z'),
  startTime?: string(name='StartTime', description='The information of the regions.', example='2015-12-05T12:00:00Z'),
}

model DescribeDomainRegionDataResponseBody = {
  dataInterval?: string(name='DataInterval', description='The proportion of visits from each region. For example, a value of 90 indicates that 90% of the visits are from the specified area.', example='86400'),
  domainName?: string(name='DomainName', description='The accelerated domain name. Separate multiple accelerated domain names with commas (,).  

By default, this operation queries the geographic distribution of users for all accelerated domain names.', example='example.com'),
  endTime?: string(name='EndTime', description='The number of queries per second.', example='2015-12-07T12:00:00Z'),
  requestId?: string(name='RequestId', description='The name of the region.', example='2E5AD83F-BD7B-462E-8319-2E30E305519A'),
  startTime?: string(name='StartTime', description='The end of the time range that was queried.', example='2015-12-05T12:00:00Z'),
  value?: {
    regionProportionData?: [ 
    {
      avgObjectSize?: string(name='AvgObjectSize', description='The bandwidth.', example='800019.0'),
      avgResponseRate?: string(name='AvgResponseRate', description='The beginning of the time range that was queried.', example='154.3345765545624'),
      avgResponseTime?: string(name='AvgResponseTime', description='The average response time. Unit: milliseconds.', example='5183.666666666667'),
      bps?: string(name='Bps', description='The average response size. Unit: bytes.', example='380.9614285714286'),
      bytesProportion?: string(name='BytesProportion', example='0.003544181046236794'),
      proportion?: string(name='Proportion', example='0.01155980271270037'),
      qps?: string(name='Qps', description='The ID of the request.', example='5.9523809523809524E-5'),
      region?: string(name='Region', description='DescribeDomainRegionData'),
      regionEname?: string(name='RegionEname', description='Queries the geographic distribution of users. The data is collected at an interval of 1 day. You can query data collected within the last 90 days.', example='japan'),
      reqErrRate?: string(name='ReqErrRate', description='The time interval between the data entries returned. Unit: seconds.', example='0.0'),
      totalBytes?: string(name='TotalBytes', description='The total number of requests.', example='2400057'),
      totalQuery?: string(name='TotalQuery', description='The proportions of requests initiated from each area.', example='3'),
    }
  ](name='RegionProportionData')
  }(name='Value', description='The average response speed. Unit: bit/s.'),
}

model DescribeDomainRegionDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainRegionDataResponseBody(name='body'),
}

/**
  * The accelerated domain name.
  *
  * @param request DescribeDomainRegionDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainRegionDataResponse
 */
async function describeDomainRegionDataWithOptions(request: DescribeDomainRegionDataRequest, runtime: Util.RuntimeOptions): DescribeDomainRegionDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainRegionData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The accelerated domain name.
  *
  * @param request DescribeDomainRegionDataRequest
  * @return DescribeDomainRegionDataResponse
 */
async function describeDomainRegionData(request: DescribeDomainRegionDataRequest): DescribeDomainRegionDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRegionDataWithOptions(request, runtime);
}

model DescribeDomainReqHitRateDataRequest {
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2017-12-22T08:00:00Z'),
  interval?: string(name='Interval', example='300'),
  startTime?: string(name='StartTime', example='2017-12-21T08:00:00Z'),
}

model DescribeDomainReqHitRateDataResponseBody = {
  dataInterval?: string(name='DataInterval', example='300'),
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2017-12-22T08:00:00Z'),
  reqHitRateInterval?: {
    dataModule?: [ 
    {
      httpsValue?: string(name='HttpsValue', example='50.0'),
      timeStamp?: string(name='TimeStamp', example='2017-12-22T08:00:00:00Z'),
      value?: string(name='Value', example='100.0'),
    }
  ](name='DataModule')
  }(name='ReqHitRateInterval'),
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
  startTime?: string(name='StartTime', example='2017-12-21T08:00:00Z'),
}

model DescribeDomainReqHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainReqHitRateDataResponseBody(name='body'),
}

async function describeDomainReqHitRateDataWithOptions(request: DescribeDomainReqHitRateDataRequest, runtime: Util.RuntimeOptions): DescribeDomainReqHitRateDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainReqHitRateData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainReqHitRateData(request: DescribeDomainReqHitRateDataRequest): DescribeDomainReqHitRateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainReqHitRateDataWithOptions(request, runtime);
}

model DescribeDomainSrcBpsDataRequest {
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2019-12-10T20:30:00Z'),
  interval?: string(name='Interval', example='300'),
  startTime?: string(name='StartTime', example='2019-12-10T20:00:00Z'),
}

model DescribeDomainSrcBpsDataResponseBody = {
  dataInterval?: string(name='DataInterval', example='300'),
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2019-12-10T20:30:00Z'),
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
  srcBpsDataPerInterval?: {
    dataModule?: [ 
    {
      httpsValue?: string(name='HttpsValue', example='10'),
      timeStamp?: string(name='TimeStamp', example='2019-12-10T20:00:00Z'),
      value?: string(name='Value', example='500'),
    }
  ](name='DataModule')
  }(name='SrcBpsDataPerInterval'),
  startTime?: string(name='StartTime', example='2019-12-10T20:00:00Z'),
}

model DescribeDomainSrcBpsDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainSrcBpsDataResponseBody(name='body'),
}

/**
  * The bandwidth values of origin HTTPS requests.
  *
  * @param request DescribeDomainSrcBpsDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainSrcBpsDataResponse
 */
async function describeDomainSrcBpsDataWithOptions(request: DescribeDomainSrcBpsDataRequest, runtime: Util.RuntimeOptions): DescribeDomainSrcBpsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainSrcBpsData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The bandwidth values of origin HTTPS requests.
  *
  * @param request DescribeDomainSrcBpsDataRequest
  * @return DescribeDomainSrcBpsDataResponse
 */
async function describeDomainSrcBpsData(request: DescribeDomainSrcBpsDataRequest): DescribeDomainSrcBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainSrcBpsDataWithOptions(request, runtime);
}

model DescribeDomainSrcHttpCodeDataRequest {
  domainName?: string(name='DomainName', example='example.com,example.org'),
  endTime?: string(name='EndTime', example='2019-11-30T05:40:00Z'),
  interval?: string(name='Interval', example='300'),
  startTime?: string(name='StartTime', example='2019-11-30T05:33:00Z'),
}

model DescribeDomainSrcHttpCodeDataResponseBody = {
  dataInterval?: string(name='DataInterval', example='300'),
  domainName?: string(name='DomainName', example='example.com,example.org'),
  endTime?: string(name='EndTime', example='2015-11-30T05:40:00Z'),
  httpCodeData?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp', example='2015-11-30T05:30:00Z'),
      value?: {
        codeProportionData?: [ 
        {
          code?: string(name='Code', example='200'),
          count?: string(name='Count', example='2300'),
          proportion?: string(name='Proportion', example='67.1458998935037'),
        }
      ](name='CodeProportionData')
      }(name='Value'),
    }
  ](name='UsageData')
  }(name='HttpCodeData'),
  requestId?: string(name='RequestId', example='BC858082-736F-4A25-867B-E5B67C85ACF7'),
  startTime?: string(name='StartTime', example='2015-11-30T05:33:00Z'),
}

model DescribeDomainSrcHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainSrcHttpCodeDataResponseBody(name='body'),
}

/**
  * The total number of entries.
  *
  * @param request DescribeDomainSrcHttpCodeDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainSrcHttpCodeDataResponse
 */
async function describeDomainSrcHttpCodeDataWithOptions(request: DescribeDomainSrcHttpCodeDataRequest, runtime: Util.RuntimeOptions): DescribeDomainSrcHttpCodeDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainSrcHttpCodeData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The total number of entries.
  *
  * @param request DescribeDomainSrcHttpCodeDataRequest
  * @return DescribeDomainSrcHttpCodeDataResponse
 */
async function describeDomainSrcHttpCodeData(request: DescribeDomainSrcHttpCodeDataRequest): DescribeDomainSrcHttpCodeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainSrcHttpCodeDataWithOptions(request, runtime);
}

model DescribeDomainSrcQpsDataRequest {
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2019-11-30T05:40:00Z'),
  interval?: string(name='Interval', example='300'),
  startTime?: string(name='StartTime', example='2019-11-30T05:33:00Z'),
}

model DescribeDomainSrcQpsDataResponseBody = {
  dataInterval?: string(name='DataInterval', example='300'),
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2019-11-30T05:40:00Z'),
  requestId?: string(name='RequestId', example='7CBCD6AD-B016-42E5-AE0B-B3731DE8F755'),
  srcQpsDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp', example='2015-12-10T21:00:00Z'),
      value?: string(name='Value', example='0'),
    }
  ](name='DataModule')
  }(name='SrcQpsDataPerInterval'),
  startTime?: string(name='StartTime', example='2019-11-30T05:33:00Z'),
}

model DescribeDomainSrcQpsDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainSrcQpsDataResponseBody(name='body'),
}

/**
  * The timestamp of the data returned.
  *
  * @param request DescribeDomainSrcQpsDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainSrcQpsDataResponse
 */
async function describeDomainSrcQpsDataWithOptions(request: DescribeDomainSrcQpsDataRequest, runtime: Util.RuntimeOptions): DescribeDomainSrcQpsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainSrcQpsData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The timestamp of the data returned.
  *
  * @param request DescribeDomainSrcQpsDataRequest
  * @return DescribeDomainSrcQpsDataResponse
 */
async function describeDomainSrcQpsData(request: DescribeDomainSrcQpsDataRequest): DescribeDomainSrcQpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainSrcQpsDataWithOptions(request, runtime);
}

model DescribeDomainSrcTopUrlVisitRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. Separate multiple accelerated domain names with commas (,).', example='example.com'),
  endTime?: string(name='EndTime', description='The proportion of visits to the URL.', example='2018-10-03T20:00:00Z'),
  sortBy?: string(name='SortBy', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  If you do not set the StartTime parameter, the data within the previous day is queried.', example='pv'),
  startTime?: string(name='StartTime', description='A list of frequently requested URLs.', example='2018-10-03T16:00:00Z'),
}

model DescribeDomainSrcTopUrlVisitResponseBody = {
  allUrlList?: {
    urlList?: [ 
    {
      flow?: string(name='Flow', description='The complete URL.', example='460486880'),
      flowProportion?: float(name='FlowProportion', description='The method that is used to sort the returned URLs.**** Valid values:

*   **traf**: by network traffic.
*   **pv**: by the number of page views. This is the default value.', example='0.35'),
      urlDetail?: string(name='UrlDetail', description='The beginning of the time range that was queried.', example='http://example.com/nn_live/nn_x64/a0.m3u8'),
      visitData?: string(name='VisitData', description='The ID of the request.', example='161673'),
      visitProportion?: float(name='VisitProportion', description='Queries frequently requested back-to-origin URLs of one or more accelerated domain names.', example='0.35'),
    }
  ](name='UrlList')
  }(name='AllUrlList', description='The amount of network traffic. Unit: bytes.'),
  domainName?: string(name='DomainName', description='The proportion of network traffic consumed to access the URL.', example='example.com'),
  requestId?: string(name='RequestId', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time. The difference between the end time and the start time cannot exceed seven days.', example='64D28B53-5902-409B-94F6-FD46680144FE'),
  startTime?: string(name='StartTime', description='The accelerated domain name.', example='2018-10-03T16:00:00Z'),
  url200List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow', example='460486880'),
      flowProportion?: float(name='FlowProportion', example='0.35'),
      urlDetail?: string(name='UrlDetail', example='http://example.com/nn_live/nn_x64/a0.m3u8'),
      visitData?: string(name='VisitData', example='161673'),
      visitProportion?: float(name='VisitProportion', example='0.35'),
    }
  ](name='UrlList')
  }(name='Url200List'),
  url300List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow', example='460486880'),
      flowProportion?: float(name='FlowProportion', example='0.35'),
      urlDetail?: string(name='UrlDetail', example='http://example.com/nn_live/nn_x64/a0.m3u8'),
      visitData?: string(name='VisitData', example='161673'),
      visitProportion?: float(name='VisitProportion', example='0.35'),
    }
  ](name='UrlList')
  }(name='Url300List'),
  url400List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow', example='460486880'),
      flowProportion?: float(name='FlowProportion', example='0.35'),
      urlDetail?: string(name='UrlDetail', example='http://example.com/nn_live/nn_x64/a0.m3u8'),
      visitData?: string(name='VisitData', example='161673'),
      visitProportion?: float(name='VisitProportion', example='0.35'),
    }
  ](name='UrlList')
  }(name='Url400List'),
  url500List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow', example='460486880'),
      flowProportion?: float(name='FlowProportion', example='0.35'),
      urlDetail?: string(name='UrlDetail', example='http://example.com/nn_live/nn_x64/a0.m3u8'),
      visitData?: string(name='VisitData', example='161673'),
      visitProportion?: float(name='VisitProportion', example='0.35'),
    }
  ](name='UrlList')
  }(name='Url500List'),
}

model DescribeDomainSrcTopUrlVisitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainSrcTopUrlVisitResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to **DescribeDomainSrcTopUrlVisit**.
  *
  * @param request DescribeDomainSrcTopUrlVisitRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainSrcTopUrlVisitResponse
 */
async function describeDomainSrcTopUrlVisitWithOptions(request: DescribeDomainSrcTopUrlVisitRequest, runtime: Util.RuntimeOptions): DescribeDomainSrcTopUrlVisitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainSrcTopUrlVisit',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The operation that you want to perform. Set the value to **DescribeDomainSrcTopUrlVisit**.
  *
  * @param request DescribeDomainSrcTopUrlVisitRequest
  * @return DescribeDomainSrcTopUrlVisitResponse
 */
async function describeDomainSrcTopUrlVisit(request: DescribeDomainSrcTopUrlVisitRequest): DescribeDomainSrcTopUrlVisitResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainSrcTopUrlVisitWithOptions(request, runtime);
}

model DescribeDomainSrcTrafficDataRequest {
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2015-12-10T21:00:00Z'),
  interval?: string(name='Interval', example='300'),
  startTime?: string(name='StartTime', example='2015-12-10T20:00:00Z'),
}

model DescribeDomainSrcTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval', example='300'),
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2015-12-10T21:00:00Z'),
  requestId?: string(name='RequestId', example='A666D44F-19D6-490E-97CF-1A64AB962C57'),
  srcTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      httpsValue?: string(name='HttpsValue', example='0'),
      timeStamp?: string(name='TimeStamp', example='2015-12-10T20:35:00Z'),
      value?: string(name='Value', example='0'),
    }
  ](name='DataModule')
  }(name='SrcTrafficDataPerInterval'),
  startTime?: string(name='StartTime', example='2015-12-10T20:00:00Z'),
}

model DescribeDomainSrcTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainSrcTrafficDataResponseBody(name='body'),
}

/**
  * The amount of traffic generated by origin HTTPS requests.
  *
  * @param request DescribeDomainSrcTrafficDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainSrcTrafficDataResponse
 */
async function describeDomainSrcTrafficDataWithOptions(request: DescribeDomainSrcTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeDomainSrcTrafficDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainSrcTrafficData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The amount of traffic generated by origin HTTPS requests.
  *
  * @param request DescribeDomainSrcTrafficDataRequest
  * @return DescribeDomainSrcTrafficDataResponse
 */
async function describeDomainSrcTrafficData(request: DescribeDomainSrcTrafficDataRequest): DescribeDomainSrcTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainSrcTrafficDataWithOptions(request, runtime);
}

model DescribeDomainTopClientIpVisitRequest {
  domainName?: string(name='DomainName', description='The ranking of the client IP address returned.', example='example.com'),
  endTime?: string(name='EndTime', description='A list of client IP addresses.', example='2019-10-01T16:00:00Z'),
  limit?: string(name='Limit', description='The maximum number of entries to return. Maximum value: 100.

Default value: 20. The default value 20 specifies that the top 20 data entries are returned.', example='20'),
  locationNameEn?: string(name='LocationNameEn', description='The client IP address returned. Only IPv4 addressed are supported.', example='beijing'),
  sortBy?: string(name='SortBy', description='The method that is used to sort the client IP addresses. Valid values:

*   **traf**: by network traffic. This is the default value.
*   **acc**: by the number of requests.', example='traf'),
  startTime?: string(name='StartTime', description='The operation that you want to perform. Set the value to **DescribeDomainTopClientIpVisit**.', example='2019-09-30T16:00:00Z'),
}

model DescribeDomainTopClientIpVisitResponseBody = {
  clientIpList?: [ 
    {
      acc?: long(name='Acc', description='Queries client IP addresses that are ranked by the number of requests or the amount of network traffic within a specific time range for one or more accelerated domain names. You can query data collected within the last 90 days.', example='256'),
      clientIp?: string(name='ClientIp', description='The ID of the request.', example='1.1.xxx'),
      rank?: int32(name='Rank', description='The total amount of network traffic consumed. Unit: bytes.', example='2'),
      traffic?: long(name='Traffic', example='1024'),
    }
  ](name='ClientIpList', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

The end time must be later than the start time.'),
  requestId?: string(name='RequestId', description='The accelerated domain name. Separate multiple accelerated domain names with commas (,).

By default, this operation queries client IP addresses for all accelerated domain names.', example='64D28B53-5902-409B-94F6-FD46680144FE'),
}

model DescribeDomainTopClientIpVisitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainTopClientIpVisitResponseBody(name='body'),
}

/**
  * The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
  *
  * @param request DescribeDomainTopClientIpVisitRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainTopClientIpVisitResponse
 */
async function describeDomainTopClientIpVisitWithOptions(request: DescribeDomainTopClientIpVisitRequest, runtime: Util.RuntimeOptions): DescribeDomainTopClientIpVisitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainTopClientIpVisit',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
  *
  * @param request DescribeDomainTopClientIpVisitRequest
  * @return DescribeDomainTopClientIpVisitResponse
 */
async function describeDomainTopClientIpVisit(request: DescribeDomainTopClientIpVisitRequest): DescribeDomainTopClientIpVisitResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainTopClientIpVisitWithOptions(request, runtime);
}

model DescribeDomainTopReferVisitRequest {
  domainName?: string(name='DomainName', description='The operation that you want to perform. Set the value to **DescribeDomainTopReferVisit**.', example='example.com'),
  endTime?: string(name='EndTime', description='The accelerated domain names. Separate multiple accelerated domain names with commas (,).', example='2019-12-22T12:00:00Z'),
  sortBy?: string(name='SortBy', description='The most frequently requested web pages.', example='pv'),
  startTime?: string(name='StartTime', description='The number of visits to the web page.', example='2019-12-21T12:00:00Z'),
}

model DescribeDomainTopReferVisitResponseBody = {
  domainName?: string(name='DomainName', description='The sorting method. Valid values:

*   **traf**: by network traffic.
*   **pv**: by the number of page views. This is the default value.', example='example.com'),
  requestId?: string(name='RequestId', description='The URLs to the most frequently requested web pages.', example='95994621-8382-464B-8762-C708E73568D1'),
  startTime?: string(name='StartTime', description='The beginning of the time range that was queried.', example='2019-12-21T12:00:00Z'),
  topReferList?: {
    referList?: [ 
    {
      flow?: string(name='Flow', description='The ID of the request.', example='200'),
      flowProportion?: float(name='FlowProportion', description='The proportion of the amount of network traffic consumed for visiting the web page.', example='0.5'),
      referDetail?: string(name='ReferDetail', description='Queries frequently requested web pages of one or more accelerated domain names on a specified day and sorts the web pages. You can query data collected within the last 90 days.', example='learn.aliyundoc.com'),
      visitData?: string(name='VisitData', description='The proportion of visits to the web page.', example='3'),
      visitProportion?: float(name='VisitProportion', example='0.5'),
    }
  ](name='ReferList')
  }(name='TopReferList', description='The amount of network traffic. Unit: bytes.'),
}

model DescribeDomainTopReferVisitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainTopReferVisitResponseBody(name='body'),
}

/**
  * The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
  * The end time must be later than the start time.
  *
  * @param request DescribeDomainTopReferVisitRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainTopReferVisitResponse
 */
async function describeDomainTopReferVisitWithOptions(request: DescribeDomainTopReferVisitRequest, runtime: Util.RuntimeOptions): DescribeDomainTopReferVisitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainTopReferVisit',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
  * The end time must be later than the start time.
  *
  * @param request DescribeDomainTopReferVisitRequest
  * @return DescribeDomainTopReferVisitResponse
 */
async function describeDomainTopReferVisit(request: DescribeDomainTopReferVisitRequest): DescribeDomainTopReferVisitResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainTopReferVisitWithOptions(request, runtime);
}

model DescribeDomainTopUrlVisitRequest {
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2019-10-04T16:00:00Z'),
  sortBy?: string(name='SortBy', example='pv'),
  startTime?: string(name='StartTime', example='2019-10-04T00:00:00Z'),
}

model DescribeDomainTopUrlVisitResponseBody = {
  allUrlList?: {
    urlList?: [ 
    {
      flow?: string(name='Flow', example='460486880'),
      flowProportion?: float(name='FlowProportion', example='0.35'),
      urlDetail?: string(name='UrlDetail', example='http://example.com/nn_live/nn_x64/a0.m3u8'),
      visitData?: string(name='VisitData', example='161673'),
      visitProportion?: float(name='VisitProportion', example='0.35'),
    }
  ](name='UrlList')
  }(name='AllUrlList'),
  domainName?: string(name='DomainName', example='example.com'),
  requestId?: string(name='RequestId', example='64D28B53-5902-409B-94F6-FD46680144FE'),
  startTime?: string(name='StartTime', example='2019-10-03T16:00:00Z'),
  url200List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow', example='460486880'),
      flowProportion?: float(name='FlowProportion', example='0.35'),
      urlDetail?: string(name='UrlDetail', example='http://example.com/nn_live/nn_x64/aWQ9SE5KU0bGxfcGNfbGl2ZQ,,/HNJSMPP360.m3u8'),
      visitData?: string(name='VisitData', example='161673'),
      visitProportion?: float(name='VisitProportion', example='0.35'),
    }
  ](name='UrlList')
  }(name='Url200List'),
  url300List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow', example='460486880'),
      flowProportion?: float(name='FlowProportion', example='0.35'),
      urlDetail?: string(name='UrlDetail', example='http://example.com/nn_live/nn_x64/a0.m3u8'),
      visitData?: string(name='VisitData', example='161673'),
      visitProportion?: float(name='VisitProportion', example='0.35'),
    }
  ](name='UrlList')
  }(name='Url300List'),
  url400List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow', example='460486880'),
      flowProportion?: float(name='FlowProportion', example='0.35'),
      urlDetail?: string(name='UrlDetail', example='http://example.com/nn_live/nn_x64/aWQ9SE5KU01QUhbGxfcGNfbGl2ZQ,,/HNJSMPP360.m3u8'),
      visitData?: string(name='VisitData', example='1884'),
      visitProportion?: float(name='VisitProportion', example='0.35'),
    }
  ](name='UrlList')
  }(name='Url400List'),
  url500List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow', example='460486880'),
      flowProportion?: float(name='FlowProportion', example='0.35'),
      urlDetail?: string(name='UrlDetail', example='http://example.com/nn_live/nn_x64/aWQ9SE5KU0GNfbGl2ZQ,,/HNJSMPP360.m3u8'),
      visitData?: string(name='VisitData', example='161673'),
      visitProportion?: float(name='VisitProportion', example='0.35'),
    }
  ](name='UrlList')
  }(name='Url500List'),
}

model DescribeDomainTopUrlVisitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainTopUrlVisitResponseBody(name='body'),
}

/**
  * The proportion of visits to the URL.
  *
  * @param request DescribeDomainTopUrlVisitRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainTopUrlVisitResponse
 */
async function describeDomainTopUrlVisitWithOptions(request: DescribeDomainTopUrlVisitRequest, runtime: Util.RuntimeOptions): DescribeDomainTopUrlVisitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainTopUrlVisit',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The proportion of visits to the URL.
  *
  * @param request DescribeDomainTopUrlVisitRequest
  * @return DescribeDomainTopUrlVisitResponse
 */
async function describeDomainTopUrlVisit(request: DescribeDomainTopUrlVisitRequest): DescribeDomainTopUrlVisitResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainTopUrlVisitWithOptions(request, runtime);
}

model DescribeDomainTrafficDataRequest {
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2015-12-10T21:00:00Z'),
  interval?: string(name='Interval', example='300'),
  ispNameEn?: string(name='IspNameEn', example='unicom'),
  locationNameEn?: string(name='LocationNameEn', example='beijing'),
  startTime?: string(name='StartTime', example='2015-12-10T20:00:00Z'),
}

model DescribeDomainTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval', example='300'),
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2015-12-10T21:00:00Z'),
  requestId?: string(name='RequestId', example='B955107D-E658-4E77-B913-E0AC3D31693E'),
  startTime?: string(name='StartTime', example='2015-12-10T20:00:00Z'),
  trafficDataPerInterval?: {
    dataModule?: [ 
    {
      domesticValue?: string(name='DomesticValue', example='0'),
      httpsDomesticValue?: string(name='HttpsDomesticValue', example='0'),
      httpsOverseasValue?: string(name='HttpsOverseasValue', example='0'),
      httpsValue?: string(name='HttpsValue', example='423304182'),
      overseasValue?: string(name='OverseasValue', example='0'),
      timeStamp?: string(name='TimeStamp', example='2015-12-10T20:00:00Z'),
      value?: string(name='Value', example='423304182'),
    }
  ](name='DataModule')
  }(name='TrafficDataPerInterval'),
}

model DescribeDomainTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainTrafficDataResponseBody(name='body'),
}

/**
  * The amount of network traffic in the Chinese mainland.
  *
  * @param request DescribeDomainTrafficDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainTrafficDataResponse
 */
async function describeDomainTrafficDataWithOptions(request: DescribeDomainTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeDomainTrafficDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainTrafficData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The amount of network traffic in the Chinese mainland.
  *
  * @param request DescribeDomainTrafficDataRequest
  * @return DescribeDomainTrafficDataResponse
 */
async function describeDomainTrafficData(request: DescribeDomainTrafficDataRequest): DescribeDomainTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainTrafficDataWithOptions(request, runtime);
}

model DescribeDomainUsageDataRequest {
  area?: string(name='Area', description='The amount of resource usage.', example='CN'),
  dataProtocol?: string(name='DataProtocol', description='The information about resource usage that was collected at each interval.', example='all'),
  domainName?: string(name='DomainName', description='The type of content.', example='example.com'),
  endTime?: string(name='EndTime', description='The ID of the billable region where the data was collected.', example='2015-12-10T22:00:00Z'),
  field?: string(name='Field', description='The time interval between the data entries returned. Unit: seconds.', example='bps'),
  interval?: string(name='Interval', description='The timestamp of the data returned.

> **TimeStamp** indicates the timestamp of the data returned at each interval.', example='300'),
  startTime?: string(name='StartTime', description='static', example='2015-12-10T20:00:00Z'),
  type?: string(name='Type', description='The resource usage that was collected at each interval.', example='static'),
}

model DescribeDomainUsageDataResponseBody = {
  area?: string(name='Area', example='CN'),
  dataInterval?: string(name='DataInterval', example='300'),
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2015-12-10T22:00:00Z'),
  requestId?: string(name='RequestId', description='The resource usage in a specific scenario.

> SpecialValue indicates the data usage in a specific scenario. If no special billable item is specified, ignore this parameter.', example='B955107D-E658-4E77-B913-E0AC3D31693E'),
  startTime?: string(name='StartTime', example='2015-12-10T20:00:00Z'),
  type?: string(name='Type'),
  usageDataPerInterval?: {
    dataModule?: [ 
    {
      peakTime?: string(name='PeakTime', example='2015-12-10T21:30:00Z'),
      specialValue?: string(name='SpecialValue', example='423304182'),
      timeStamp?: string(name='TimeStamp', example='2015-12-10T21:30:00Z'),
      value?: string(name='Value', example='423304182'),
    }
  ](name='DataModule')
  }(name='UsageDataPerInterval'),
}

model DescribeDomainUsageDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainUsageDataResponseBody(name='body'),
}

/**
  * $.parameters[2].schema.enumValueTitles
  *
  * @param request DescribeDomainUsageDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainUsageDataResponse
 */
async function describeDomainUsageDataWithOptions(request: DescribeDomainUsageDataRequest, runtime: Util.RuntimeOptions): DescribeDomainUsageDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.area)) {
    query['Area'] = request.area;
  }
  if (!Util.isUnset(request.dataProtocol)) {
    query['DataProtocol'] = request.dataProtocol;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.field)) {
    query['Field'] = request.field;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainUsageData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * $.parameters[2].schema.enumValueTitles
  *
  * @param request DescribeDomainUsageDataRequest
  * @return DescribeDomainUsageDataResponse
 */
async function describeDomainUsageData(request: DescribeDomainUsageDataRequest): DescribeDomainUsageDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainUsageDataWithOptions(request, runtime);
}

model DescribeDomainUvDataRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

The end time must be later than the start time.', example='2019-11-29T04:00:00Z'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2019-11-29T00:00:00Z'),
}

model DescribeDomainUvDataResponseBody = {
  dataInterval?: string(name='DataInterval', description='The time interval. Unit: seconds.', example='3600'),
  domainName?: string(name='DomainName', description='The accelerated domain name.', example='example.com'),
  endTime?: string(name='EndTime', description='The end of the time range that was queried.', example='2019-11-29T04:00:00Z'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E9D3257A-1B7C-414C-90C1-8D07AC47BCAC'),
  startTime?: string(name='StartTime', description='The beginning of the time range that was queried.', example='2019-11-29T00:00:00Z'),
  uvDataInterval?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp', description='The timestamp of the returned data.', example='2019-11-29T00:00:00Z'),
      value?: string(name='Value', description='The number of UVs.', example='318'),
    }
  ](name='UsageData')
  }(name='UvDataInterval', description='The number of UVs at each interval.'),
}

model DescribeDomainUvDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainUvDataResponseBody(name='body'),
}

/**
  * The statistical analysis feature of Alibaba Cloud CDN is no longer available. The API operations related to the statistical analysis feature are no longer maintained. We recommend that you do not use the API operations because data may be missing or inaccurate. You can use the [operations report](~~279577~~) feature for data analysis.
  * > 
  * *   If you do not set the StartTime or EndTime parameter, the request returns the data collected in the last 24 hours. If you set both these parameters, the request returns the data collected within the specified time range.
  * *   You can specify only one accelerated domain name or all accelerated domain names in your Alibaba Cloud account.
  * *   You can call this operation up to 100 times per second per account.
  *
  * @param request DescribeDomainUvDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainUvDataResponse
 */
async function describeDomainUvDataWithOptions(request: DescribeDomainUvDataRequest, runtime: Util.RuntimeOptions): DescribeDomainUvDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainUvData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The statistical analysis feature of Alibaba Cloud CDN is no longer available. The API operations related to the statistical analysis feature are no longer maintained. We recommend that you do not use the API operations because data may be missing or inaccurate. You can use the [operations report](~~279577~~) feature for data analysis.
  * > 
  * *   If you do not set the StartTime or EndTime parameter, the request returns the data collected in the last 24 hours. If you set both these parameters, the request returns the data collected within the specified time range.
  * *   You can specify only one accelerated domain name or all accelerated domain names in your Alibaba Cloud account.
  * *   You can call this operation up to 100 times per second per account.
  *
  * @param request DescribeDomainUvDataRequest
  * @return DescribeDomainUvDataResponse
 */
async function describeDomainUvData(request: DescribeDomainUvDataRequest): DescribeDomainUvDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainUvDataWithOptions(request, runtime);
}

model DescribeDomainsBySourceRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  sources?: string(name='Sources', description='The origin servers. Separate multiple origin servers with commas (,). Fuzzy match is not supported.', example='example.com'),
}

model DescribeDomainsBySourceResponseBody = {
  domainsList?: {
    domainsData?: [ 
    {
      domainInfos?: {
        domainInfo?: [ 
        {
          cdnType?: string(name='CdnType', description='The workload type of the accelerated domain name. Valid values:

*   **web**: images and small files
*   **download**: large files
*   **video**: on-demand video and audio streaming', example='web'),
          createTime?: string(name='CreateTime', description='The creation time.', example='2016-07-12T11:53:19+08:00'),
          domainCname?: string(name='DomainCname', description='The CNAME record assigned to the domain name.', example='***.alikunlun.com'),
          domainName?: string(name='DomainName', description='The domain name.', example='example.org'),
          status?: string(name='Status', description='The status of the domain name. Valid values:

*   **applying**: The domain name is under review.
*   **configuring**: The domain name is being configured.
*   **online**: The domain name is working as expected.
*   **stopping**: The domain name is being stopped.
*   **offline**: The domain name is disabled.
*   **disabling**: The domain name is being removed.', example='online'),
          updateTime?: string(name='UpdateTime', description='The update time.', example='2017-03-31T04:49:00+08:00'),
        }
      ](name='domainInfo')
      }(name='DomainInfos', description='Information about the domain name.'),
      domains?: {
        domainNames?: [ string ](name='domainNames')
      }(name='Domains', description='The domain names that correspond to each origin server.'),
      source?: string(name='Source', description='The origin server.', example='example.com'),
    }
  ](name='DomainsData')
  }(name='DomainsList', description='The domain names corresponding to each origin server.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B0F074E5-A1AC-4B32-8EA2-6F450410D1E0'),
  sources?: string(name='Sources', description='The origin servers.', example='example.com,aliyundoc.com'),
}

model DescribeDomainsBySourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainsBySourceResponseBody(name='body'),
}

/**
  * > You can call this operation up to 30 times per second per account.
  *
  * @param request DescribeDomainsBySourceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainsBySourceResponse
 */
async function describeDomainsBySourceWithOptions(request: DescribeDomainsBySourceRequest, runtime: Util.RuntimeOptions): DescribeDomainsBySourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sources)) {
    query['Sources'] = request.sources;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainsBySource',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can call this operation up to 30 times per second per account.
  *
  * @param request DescribeDomainsBySourceRequest
  * @return DescribeDomainsBySourceResponse
 */
async function describeDomainsBySource(request: DescribeDomainsBySourceRequest): DescribeDomainsBySourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainsBySourceWithOptions(request, runtime);
}

model DescribeDomainsUsageByDayRequest {
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2019-12-23T09:00:00Z'),
  startTime?: string(name='StartTime', example='2019-12-22T08:00:00Z'),
}

model DescribeDomainsUsageByDayResponseBody = {
  dataInterval?: string(name='DataInterval', example='86400'),
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2019-12-23T09:00:00Z'),
  requestId?: string(name='RequestId', example='C88EF8ED-72F0-45EA-9E86-95114E224FC5'),
  startTime?: string(name='StartTime', example='2019-12-22T08:00:00Z'),
  usageByDays?: {
    usageByDay?: [ 
    {
      bytesHitRate?: string(name='BytesHitRate', example='97.46250599529726'),
      maxBps?: string(name='MaxBps', example='306747.76'),
      maxBpsTime?: string(name='MaxBpsTime', example='2019-12-23 10:55:00'),
      maxSrcBps?: string(name='MaxSrcBps', example='72584.072'),
      maxSrcBpsTime?: string(name='MaxSrcBpsTime', example='2019-12-23 11:45:00'),
      qps?: string(name='Qps', example='7.466354166666667'),
      requestHitRate?: string(name='RequestHitRate', example='70.24770071912111'),
      timeStamp?: string(name='TimeStamp', example='2019-12-22'),
      totalAccess?: string(name='TotalAccess', example='645093'),
      totalTraffic?: string(name='TotalTraffic', example='564300099309'),
    }
  ](name='UsageByDay')
  }(name='UsageByDays'),
  usageTotal?: {
    bytesHitRate?: string(name='BytesHitRate', example='97.03110726801242'),
    maxBps?: string(name='MaxBps', example='1.0747912780000001E8'),
    maxBpsTime?: string(name='MaxBpsTime', example='2019-12-23 10:55:00'),
    maxSrcBps?: string(name='MaxSrcBps', example='72584.072'),
    maxSrcBpsTime?: string(name='MaxSrcBpsTime', example='2019-12-23 11:45:00'),
    requestHitRate?: string(name='RequestHitRate', example='69.92610837438424'),
    totalAccess?: string(name='TotalAccess', example='1319500'),
    totalTraffic?: string(name='TotalTraffic', example='1117711832100'),
  }(name='UsageTotal'),
}

model DescribeDomainsUsageByDayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainsUsageByDayResponseBody(name='body'),
}

/**
  * The time when the bandwidth reached the peak value.
  *
  * @param request DescribeDomainsUsageByDayRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDomainsUsageByDayResponse
 */
async function describeDomainsUsageByDayWithOptions(request: DescribeDomainsUsageByDayRequest, runtime: Util.RuntimeOptions): DescribeDomainsUsageByDayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainsUsageByDay',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The time when the bandwidth reached the peak value.
  *
  * @param request DescribeDomainsUsageByDayRequest
  * @return DescribeDomainsUsageByDayResponse
 */
async function describeDomainsUsageByDay(request: DescribeDomainsUsageByDayRequest): DescribeDomainsUsageByDayResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainsUsageByDayWithOptions(request, runtime);
}

model DescribeEsExceptionDataRequest {
  endTime?: string(name='EndTime', description='The ID of the request.', example='2021-02-18T20:00:00Z'),
  ruleId?: string(name='RuleId', description='The operation that you want to perform. Set the value to **DescribeEsExceptionData**.', example='212896**'),
  startTime?: string(name='StartTime', description='The value of each time and the column of each data entry.', example='2021-02-17T20:00:00Z'),
}

model DescribeEsExceptionDataResponseBody = {
  contents?: [ 
    {
      columns?: [ string ](name='Columns'),
      name?: string(name='Name', example='401'),
      points?: [ 
        {
          points?: [ string ](name='Points'),
        }
      ](name='Points'),
    }
  ](name='Contents', description='Queries the executions errors of scripts in EdgeScript (ES).'),
  requestId?: string(name='RequestId', description='The content of the script.', example='99D61AB3-6164-4CF2-A0DE-129C9B07618B'),
}

model DescribeEsExceptionDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEsExceptionDataResponseBody(name='body'),
}

/**
  * The name of the chart that shows the errors of the script.
  *
  * @param request DescribeEsExceptionDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeEsExceptionDataResponse
 */
async function describeEsExceptionDataWithOptions(request: DescribeEsExceptionDataRequest, runtime: Util.RuntimeOptions): DescribeEsExceptionDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEsExceptionData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The name of the chart that shows the errors of the script.
  *
  * @param request DescribeEsExceptionDataRequest
  * @return DescribeEsExceptionDataResponse
 */
async function describeEsExceptionData(request: DescribeEsExceptionDataRequest): DescribeEsExceptionDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEsExceptionDataWithOptions(request, runtime);
}

model DescribeEsExecuteDataRequest {
  endTime?: string(name='EndTime', description='The name of the chart that shows the status of the script.', example='2021-02-18T20:00:00Z'),
  ruleId?: string(name='RuleId', description='The value of each time and the column of each data entry.', example='212896**'),
  startTime?: string(name='StartTime', description='The column names of the chart that shows the status of the script and the time of each data entry.', example='2021-02-17T20:00:00Z'),
}

model DescribeEsExecuteDataResponseBody = {
  contents?: [ 
    {
      columns?: [ string ](name='Columns'),
      name?: string(name='Name', description='The content of the script.', example='Exception'),
      points?: [ string ](name='Points', description='Queries the execution status of scripts in EdgeScript (ES).'),
    }
  ](name='Contents', description='The operation that you want to perform. Set the value to **DescribeEsExecuteData**.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='99D61AB3-6164-4CF2-A0DE-129C9B07618B'),
}

model DescribeEsExecuteDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEsExecuteDataResponseBody(name='body'),
}

/**
  * The ID of the script that you want to query. You can call the [DescribeCdnDomainConfigs](~~90924~~) operation to query script IDs.
  *
  * @param request DescribeEsExecuteDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeEsExecuteDataResponse
 */
async function describeEsExecuteDataWithOptions(request: DescribeEsExecuteDataRequest, runtime: Util.RuntimeOptions): DescribeEsExecuteDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEsExecuteData',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the script that you want to query. You can call the [DescribeCdnDomainConfigs](~~90924~~) operation to query script IDs.
  *
  * @param request DescribeEsExecuteDataRequest
  * @return DescribeEsExecuteDataResponse
 */
async function describeEsExecuteData(request: DescribeEsExecuteDataRequest): DescribeEsExecuteDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEsExecuteDataWithOptions(request, runtime);
}

model DescribeFCTriggerRequest {
  triggerARN?: string(name='TriggerARN', description='The trigger that corresponds to the Function Compute service.', example='acs:cdn:{RegionID}:{AccountID}:{Filter}'),
}

model DescribeFCTriggerResponseBody = {
  FCTrigger?: {
    eventMetaName?: string(name='EventMetaName', description='The name of the event.', example='LogFileCreated'),
    eventMetaVersion?: string(name='EventMetaVersion', description='The version of the event.', example='1.0.0'),
    notes?: string(name='Notes', description='The remarks of the Function Compute trigger.', example='test'),
    roleARN?: string(name='RoleARN', description='The assigned Resource Access Management (RAM) role.', example='acs:ram:: 1234567890:role/aliyuncdneventnotificationrole'),
    sourceArn?: string(name='SourceArn', description='The resources and filters for event listening.', example='acs:cdn:*:1234567890:domain/example.com'),
    triggerARN?: string(name='TriggerARN', description='The trigger that corresponds to the Function Compute service.', example='acs:fc:cn-beijing: 1234567890:services/FCTestService/functions/printEvent/triggers/testtrigger'),
  }(name='FCTrigger', description='The Function Compute trigger that you want to query.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC046C5D-8CB4-4B6B-B7F8-B335E51EF90E'),
}

model DescribeFCTriggerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFCTriggerResponseBody(name='body'),
}

async function describeFCTriggerWithOptions(request: DescribeFCTriggerRequest, runtime: Util.RuntimeOptions): DescribeFCTriggerResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFCTrigger',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFCTrigger(request: DescribeFCTriggerRequest): DescribeFCTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFCTriggerWithOptions(request, runtime);
}

model DescribeIpInfoRequest {
  IP?: string(name='IP', description='The IP address that you want to query. You can specify only one IP address in each request.', example='192.168.0.1'),
}

model DescribeIpInfoResponseBody = {
  cdnIp?: string(name='CdnIp', description='Indicates whether the IP address belongs to an Alibaba Cloud CDN POP.

*   **True**
*   **False**', example='True'),
  ISP?: string(name='ISP', description='The Chinese name of the ISP.'),
  ispEname?: string(name='IspEname', description='The English name of the Internet service provider (ISP).', example='telecom'),
  region?: string(name='Region', description='The Chinese name of the region.'),
  regionEname?: string(name='RegionEname', description='The English name of the region.', example='China-Guizhou-guiyang'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='123847FA-9A00-4426-83B8-B4B45D475930'),
}

model DescribeIpInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIpInfoResponseBody(name='body'),
}

/**
  * > You can call this operation up to 50 times per second per account.
  *
  * @param request DescribeIpInfoRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeIpInfoResponse
 */
async function describeIpInfoWithOptions(request: DescribeIpInfoRequest, runtime: Util.RuntimeOptions): DescribeIpInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.IP)) {
    query['IP'] = request.IP;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeIpInfo',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can call this operation up to 50 times per second per account.
  *
  * @param request DescribeIpInfoRequest
  * @return DescribeIpInfoResponse
 */
async function describeIpInfo(request: DescribeIpInfoRequest): DescribeIpInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIpInfoWithOptions(request, runtime);
}

model DescribeIpStatusRequest {
  ips?: string(name='Ips', description='The IP addresses that you want to query. Separate IP addresses with underscores (\\_), such as Ips=ip1\\_ip2.', example='ip1_ip2'),
}

model DescribeIpStatusResponseBody = {
  ipStatus?: [ 
    {
      ip?: string(name='ip', description='The IP address of the POP.', example='10.10.10.10'),
      status?: string(name='status', description='The status.

*   **nonali**: not an Alibaba Cloud CDN POP
*   **normal**: an available Alibaba Cloud CDN POP
*   **abnormal**: an unavailable Alibaba Cloud CDN POP', example='abnormal'),
    }
  ](name='IpStatus', description='The status of the IP addresses of the POPs.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F61CDR30-E83C-4FDA-BF73-9A94CDD44229'),
}

model DescribeIpStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIpStatusResponseBody(name='body'),
}

/**
  * > You can call this operation up to 50 times per second per account.
  *
  * @param request DescribeIpStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeIpStatusResponse
 */
async function describeIpStatusWithOptions(request: DescribeIpStatusRequest, runtime: Util.RuntimeOptions): DescribeIpStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeIpStatus',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can call this operation up to 50 times per second per account.
  *
  * @param request DescribeIpStatusRequest
  * @return DescribeIpStatusResponse
 */
async function describeIpStatus(request: DescribeIpStatusRequest): DescribeIpStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIpStatusWithOptions(request, runtime);
}

model DescribeL2VipsByDomainRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name in each request.', example='example.com'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeL2VipsByDomainResponseBody = {
  domainName?: string(name='DomainName', description='The domain name.', example='example.com'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
  vips?: {
    vip?: [ string ](name='Vip')
  }(name='Vips', description='The list of VIPs.'),
}

model DescribeL2VipsByDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeL2VipsByDomainResponseBody(name='body'),
}

/**
  * *   This operation is available only to users whose daily peak bandwidth value is higher than 1 Gbit/s. If you meet this requirement, you can [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.2020520001.aliyun_topbar.18.dbd44bd3e4f845#/ticket/createIndex) to apply for permissions to use this operation.
  * *   You can call this operation up to 40 times per second per account.
  *
  * @param request DescribeL2VipsByDomainRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeL2VipsByDomainResponse
 */
async function describeL2VipsByDomainWithOptions(request: DescribeL2VipsByDomainRequest, runtime: Util.RuntimeOptions): DescribeL2VipsByDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeL2VipsByDomain',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   This operation is available only to users whose daily peak bandwidth value is higher than 1 Gbit/s. If you meet this requirement, you can [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.2020520001.aliyun_topbar.18.dbd44bd3e4f845#/ticket/createIndex) to apply for permissions to use this operation.
  * *   You can call this operation up to 40 times per second per account.
  *
  * @param request DescribeL2VipsByDomainRequest
  * @return DescribeL2VipsByDomainResponse
 */
async function describeL2VipsByDomain(request: DescribeL2VipsByDomainRequest): DescribeL2VipsByDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeL2VipsByDomainWithOptions(request, runtime);
}

model DescribePreloadDetailByIdRequest {
  taskId?: string(name='TaskId', example='15423123921'),
}

model DescribePreloadDetailByIdResponseBody = {
  requestId?: string(name='RequestId', example='E9D3257A-1B7C-414C-90C1-8D07AC47BCAC'),
  totalCount?: long(name='TotalCount', example='1'),
  urlDetails?: [ 
    {
      creationTime?: string(name='CreationTime', example='2022-11-23T02:26:56Z'),
      domain?: string(name='Domain', example='example.com'),
      endTime?: string(name='EndTime', example='2022-11-23T02:27:00Z'),
      process?: string(name='Process', example='100%'),
      retCode?: string(name='RetCode', example='0'),
      status?: string(name='Status', example='Complete'),
      taskId?: string(name='TaskId', example='14286878547'),
      urls?: [ 
        {
          description?: string(name='Description', example='Successfully preloaded'),
          success?: string(name='Success', example='47%'),
          url?: string(name='Url', example='/abc.jpg'),
        }
      ](name='Urls'),
    }
  ](name='UrlDetails'),
}

model DescribePreloadDetailByIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePreloadDetailByIdResponseBody(name='body'),
}

async function describePreloadDetailByIdWithOptions(request: DescribePreloadDetailByIdRequest, runtime: Util.RuntimeOptions): DescribePreloadDetailByIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePreloadDetailById',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePreloadDetailById(request: DescribePreloadDetailByIdRequest): DescribePreloadDetailByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePreloadDetailByIdWithOptions(request, runtime);
}

model DescribeRangeDataByLocateAndIspServiceRequest {
  domainNames?: string(name='DomainNames', example='example.com'),
  endTime?: string(name='EndTime', example='2019-11-30T05:40:00Z'),
  ispNames?: string(name='IspNames', example='unicom'),
  locationNames?: string(name='LocationNames', example='liaoning,guangxi'),
  startTime?: string(name='StartTime', example='2019-11-30T05:33:00Z'),
}

model DescribeRangeDataByLocateAndIspServiceResponseBody = {
  jsonResult?: string(name='JsonResult'),
  requestId?: string(name='RequestId', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model DescribeRangeDataByLocateAndIspServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRangeDataByLocateAndIspServiceResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request DescribeRangeDataByLocateAndIspServiceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRangeDataByLocateAndIspServiceResponse
 */
async function describeRangeDataByLocateAndIspServiceWithOptions(request: DescribeRangeDataByLocateAndIspServiceRequest, runtime: Util.RuntimeOptions): DescribeRangeDataByLocateAndIspServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainNames)) {
    query['DomainNames'] = request.domainNames;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ispNames)) {
    query['IspNames'] = request.ispNames;
  }
  if (!Util.isUnset(request.locationNames)) {
    query['LocationNames'] = request.locationNames;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRangeDataByLocateAndIspService',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @param request DescribeRangeDataByLocateAndIspServiceRequest
  * @return DescribeRangeDataByLocateAndIspServiceResponse
 */
async function describeRangeDataByLocateAndIspService(request: DescribeRangeDataByLocateAndIspServiceRequest): DescribeRangeDataByLocateAndIspServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRangeDataByLocateAndIspServiceWithOptions(request, runtime);
}

model DescribeRealtimeDeliveryAccRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.

The end of the time range to query. The end time must be later than the start time.', example='2016-10-20T05:00:00Z'),
  interval?: string(name='Interval', description='The time interval between the data entries. Unit: seconds. The value varies based on the values of the **StartTime** and **EndTime** parameters. Valid values:

*   If the time span between StartTime and EndTime is less than 3 days, valid values are **300**, **3600**, and **86400**. Default value: **300**.
*   If the time span between StartTime and EndTime is from 3 to 31 days (31 days excluded), valid values are **3600** and **86400**. Default value: **3600**.
*   If the time span between StartTime and EndTime is 31 days or longer, the valid value is **86400**. Default value: **86400**.', example='300'),
  logStore?: string(name='LogStore', description='The timestamp of the data.', example='LogStore'),
  project?: string(name='Project', description='The name of the Log Service project that is used for real-time log delivery. By default, all projects are queried.', example='Project'),
  startTime?: string(name='StartTime', description='The information about real-time log delivery.', example='2016-10-20T04:00:00Z'),
}

model DescribeRealtimeDeliveryAccResponseBody = {
  reatTimeDeliveryAccData?: {
    accData?: [ 
    {
      failedNum?: int32(name='FailedNum', description='Queries the number of real-time log deliveries.', example='2'),
      successNum?: int32(name='SuccessNum', example='2'),
      timeStamp?: string(name='TimeStamp', description='The name of the Logstore that collects log data from Alibaba Cloud Content Delivery Network (CDN) in real time. By default, all Logstores are queried.', example='2018-09-03T06:00:00Z'),
    }
  ](name='AccData')
  }(name='ReatTimeDeliveryAccData', description='The operation that you want to perform. Set the value to **DescribeRealtimeDeliveryAcc**.'),
  requestId?: string(name='RequestId', description='The number of failed attempts to deliver log data to Log Service.', example='684306D2-2511-4977-991D-CE97E91FD7C0'),
}

model DescribeRealtimeDeliveryAccResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRealtimeDeliveryAccResponseBody(name='body'),
}

/**
  * The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.
  *
  * @param request DescribeRealtimeDeliveryAccRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRealtimeDeliveryAccResponse
 */
async function describeRealtimeDeliveryAccWithOptions(request: DescribeRealtimeDeliveryAccRequest, runtime: Util.RuntimeOptions): DescribeRealtimeDeliveryAccResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.logStore)) {
    query['LogStore'] = request.logStore;
  }
  if (!Util.isUnset(request.project)) {
    query['Project'] = request.project;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRealtimeDeliveryAcc',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.
  *
  * @param request DescribeRealtimeDeliveryAccRequest
  * @return DescribeRealtimeDeliveryAccResponse
 */
async function describeRealtimeDeliveryAcc(request: DescribeRealtimeDeliveryAccRequest): DescribeRealtimeDeliveryAccResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRealtimeDeliveryAccWithOptions(request, runtime);
}

model DescribeRefreshQuotaRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeRefreshQuotaResponseBody = {
  blockQuota?: string(name='BlockQuota', description='The maximum number of URLs that can be refreshed on the current day.', example='300'),
  blockRemain?: string(name='BlockRemain', description='The remaining number of times that you can prefetch content to L1 nodes on the current day.', example='100'),
  dirQuota?: string(name='DirQuota', description='The remaining number of directories that can be refreshed on the current day.', example='100'),
  dirRemain?: string(name='DirRemain', description='The operation that you want to perform. Set this parameter to **DescribeRefreshQuota**.', example='99'),
  ignoreParamsQuota?: string(name='IgnoreParamsQuota', description='当天忽略参数刷新数量上限。', example='100'),
  ignoreParamsRemain?: string(name='IgnoreParamsRemain', description='当天剩余忽略参数刷新数量。', example='10'),
  preloadEdgeQuota?: string(name='PreloadEdgeQuota', description='The maximum number of directories that can be refreshed on the current day.', example='20'),
  preloadEdgeRemain?: string(name='PreloadEdgeRemain', description='The maximum number of times that you can prefetch content to L2 nodes on the current day.', example='20'),
  preloadQuota?: string(name='PreloadQuota', description='The remaining number of times that you can use regular expressions to refresh directories or URLs on the current day.', example='500'),
  preloadRemain?: string(name='PreloadRemain', description='The maximum number of URLs and directories that can be blocked on the current day.', example='400'),
  regexQuota?: string(name='RegexQuota', description='The ID of the request', example='20'),
  regexRemain?: string(name='RegexRemain', description='The remaining number of times that you can prefetch content to L2 nodes on the current day.', example='10'),
  requestId?: string(name='RequestId', description='The remaining number of URLs that can be refreshed on the current day.', example='42E0554B-80F4-4921-AED6-ACFB22CAAAD0'),
  urlQuota?: string(name='UrlQuota', description='The maximum number of times that you can prefetch content to L1 nodes on the current day.', example='2000'),
  urlRemain?: string(name='UrlRemain', description='The maximum number of times that you can use regular expressions to refresh directories or URLs on the current day.', example='1996'),
}

model DescribeRefreshQuotaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRefreshQuotaResponseBody(name='body'),
}

/**
  * The remaining number of URLs and directories that can be blocked on the current day.
  *
  * @param request DescribeRefreshQuotaRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRefreshQuotaResponse
 */
async function describeRefreshQuotaWithOptions(request: DescribeRefreshQuotaRequest, runtime: Util.RuntimeOptions): DescribeRefreshQuotaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRefreshQuota',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The remaining number of URLs and directories that can be blocked on the current day.
  *
  * @param request DescribeRefreshQuotaRequest
  * @return DescribeRefreshQuotaResponse
 */
async function describeRefreshQuota(request: DescribeRefreshQuotaRequest): DescribeRefreshQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRefreshQuotaWithOptions(request, runtime);
}

model DescribeRefreshTaskByIdRequest {
  taskId?: string(name='TaskId', description='The path of the object refreshed by the refresh task.', example='12345678'),
}

model DescribeRefreshTaskByIdResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the task that you want to query.

You can call the [RefreshObjectCaches](~~91164~~) operation to query task IDs. Then, you can use the task IDs to query task status.

You can specify up to 10 task IDs. Separate task IDs with commas (,).', example='E0C2EF95-B1EC-4C93-855E-2059A7DA2B7B'),
  tasks?: [ 
    {
      creationTime?: string(name='CreationTime', description='The progress of the task, in percentage.', example='2020-08-03T08:54:23Z'),
      description?: string(name='Description', description='The ID of the task.', example='Internal Error'),
      objectPath?: string(name='ObjectPath', description='Queries the status of refresh or prefetch tasks by ID for an accelerated domain name.', example='http://example.com/abc.jpg'),
      objectType?: string(name='ObjectType', description='The ID of the request.', example='file'),
      process?: string(name='Process', description='The operation that you want to perform. Set the value to **DescribeRefreshTaskById**.', example='100%'),
      status?: string(name='Status', description='The time when the task was created. The time is displayed in UTC.', example='Complete'),
      taskId?: string(name='TaskId', example='24840'),
    }
  ](name='Tasks', description='The error returned when the refresh or prefetch task failed. Valid values:

*   **Internal Error**: An internal error occurred.
*   **Origin Timeout**: The response from the origin server timed out.
*   **Origin Return StatusCode 5XX**: The origin server returned a 5XX error.'),
  totalCount?: long(name='TotalCount', description='The total number of tasks.', example='2'),
}

model DescribeRefreshTaskByIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRefreshTaskByIdResponseBody(name='body'),
}

/**
  * The status of the task. Valid values:
  * *   **Complete**: The task is complete.
  * *   **Pending**: The task is pending.
  * *   **Refreshing**: The task is running.
  * *   **Failed**: The task failed.
  *
  * @param request DescribeRefreshTaskByIdRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRefreshTaskByIdResponse
 */
async function describeRefreshTaskByIdWithOptions(request: DescribeRefreshTaskByIdRequest, runtime: Util.RuntimeOptions): DescribeRefreshTaskByIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRefreshTaskById',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The status of the task. Valid values:
  * *   **Complete**: The task is complete.
  * *   **Pending**: The task is pending.
  * *   **Refreshing**: The task is running.
  * *   **Failed**: The task failed.
  *
  * @param request DescribeRefreshTaskByIdRequest
  * @return DescribeRefreshTaskByIdResponse
 */
async function describeRefreshTaskById(request: DescribeRefreshTaskByIdRequest): DescribeRefreshTaskByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRefreshTaskByIdWithOptions(request, runtime);
}

model DescribeRefreshTasksRequest {
  domainName?: string(name='DomainName', example='example.com'),
  endTime?: string(name='EndTime', example='2017-12-22T08:00:00Z'),
  objectPath?: string(name='ObjectPath', example='http://example.com/1.txt'),
  objectType?: string(name='ObjectType', example='file'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmyuji4b6r4**'),
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime', example='2017-12-21T08:00:00Z'),
  status?: string(name='Status', example='Complete'),
  taskId?: string(name='TaskId', example='1234321'),
}

model DescribeRefreshTasksResponseBody = {
  pageNumber?: long(name='PageNumber', example='10'),
  pageSize?: long(name='PageSize', example='1'),
  requestId?: string(name='RequestId', example='174F6032-AA26-470D-B90E-36F0EB205BEE'),
  tasks?: {
    CDNTask?: [ 
    {
      creationTime?: string(name='CreationTime', example='2014-11-27T08:23:22Z'),
      description?: string(name='Description', example='Internal Error'),
      objectPath?: string(name='ObjectPath', example='http://example.com/1.txt'),
      objectType?: string(name='ObjectType', example='file'),
      process?: string(name='Process', example='100%'),
      status?: string(name='Status', example='Complete'),
      taskId?: string(name='TaskId', example='704225667'),
    }
  ](name='CDNTask')
  }(name='Tasks'),
  totalCount?: long(name='TotalCount', example='2'),
}

model DescribeRefreshTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRefreshTasksResponseBody(name='body'),
}

async function describeRefreshTasksWithOptions(request: DescribeRefreshTasksRequest, runtime: Util.RuntimeOptions): DescribeRefreshTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.objectPath)) {
    query['ObjectPath'] = request.objectPath;
  }
  if (!Util.isUnset(request.objectType)) {
    query['ObjectType'] = request.objectType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRefreshTasks',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRefreshTasks(request: DescribeRefreshTasksRequest): DescribeRefreshTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRefreshTasksWithOptions(request, runtime);
}

model DescribeStagingIpResponseBody = {
  IPV4s?: {
    IPV4?: [ string ](name='IPV4')
  }(name='IPV4s'),
  requestId?: string(name='RequestId', description='Queries node IP addresses in the staging environment.', example='1B9E0E83-24AC-49F4-9EE0-BF5EB03E8381'),
}

model DescribeStagingIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeStagingIpResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to **DescribeStagingIp**.
  *
  * @param request DescribeStagingIpRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeStagingIpResponse
 */
async function describeStagingIpWithOptions(runtime: Util.RuntimeOptions): DescribeStagingIpResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeStagingIp',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The operation that you want to perform. Set the value to **DescribeStagingIp**.
  *
  * @return DescribeStagingIpResponse
 */
async function describeStagingIp(): DescribeStagingIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStagingIpWithOptions(runtime);
}

model DescribeTagResourcesRequest {
  resourceId?: [ string ](name='ResourceId', example='1'),
  resourceType?: string(name='ResourceType', example='DOMAIN'),
  tag?: [ 
    {
      key?: string(name='Key', example='key'),
      value?: string(name='Value', example='value'),
    }
  ](name='Tag'),
}

model DescribeTagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='34AB41F1-04A5-496F-8C8D-634BDBE6A9FB'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', example='example.com'),
      tag?: [ 
        {
          key?: string(name='Key', example='env'),
          value?: string(name='Value', example='product'),
        }
      ](name='Tag'),
    }
  ](name='TagResources'),
}

model DescribeTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTagResourcesResponseBody(name='body'),
}

async function describeTagResourcesWithOptions(request: DescribeTagResourcesRequest, runtime: Util.RuntimeOptions): DescribeTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTagResources',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTagResources(request: DescribeTagResourcesRequest): DescribeTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTagResourcesWithOptions(request, runtime);
}

model DescribeTopDomainsByFlowRequest {
  endTime?: string(name='EndTime', description='The maximum number of domain names to query. Valid values: **1** to **100**. Default value: **20**.', example='2019-12-23T08:00:00Z'),
  limit?: long(name='Limit', description='The total number of accelerated domain names that are in the **Enabled** state within the current Alibaba Cloud account.', example='20'),
  startTime?: string(name='StartTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  The end time must be later than the start time.', example='2019-12-22T08:00:00Z'),
}

model DescribeTopDomainsByFlowResponseBody = {
  domainCount?: long(name='DomainCount', description='The number of visits to the accelerated domain name.', example='68'),
  domainOnlineCount?: long(name='DomainOnlineCount', description='The ranking of the accelerated domain name.', example='68'),
  endTime?: string(name='EndTime', description='The operation that you want to perform. Set the value to **DescribeTopDomainsByFlow**.', example='2019-12-23T08:00:00Z'),
  requestId?: string(name='RequestId', description='The proportion of the amount of network traffic consumed for visiting the web page.', example='4E09C5D7-E1CF-4CAA-A45E-8727F4C8FD70'),
  startTime?: string(name='StartTime', description='The total amount of network traffic.', example='2019-12-22T08:00:00Z'),
  topDomains?: {
    topDomain?: [ 
    {
      domainName?: string(name='DomainName', description='The total number of accelerated domain names that belong to the current Alibaba Cloud account.', example='example.com'),
      maxBps?: float(name='MaxBps', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  Set StartTime to UTC time in the yyyy-MM-ddTHH:mm:ssZ format. For example, if the local time is 00:00, June 1, 2021, set StartTime to 2021-05-31T16:00:00Z.', example='22139626'),
      maxBpsTime?: string(name='MaxBpsTime', description='Queries the top N domain names ranked by network traffic. You can query data collected within the last 30 days.', example='1457111400'),
      rank?: long(name='Rank', description='The time when the bandwidth reached the peak value.', example='1'),
      totalAccess?: long(name='TotalAccess', description='The top N domain names ranked by network traffic.', example='107784230'),
      totalTraffic?: string(name='TotalTraffic', description='The ID of the request.', example='2043859876683.9001'),
      trafficPercent?: string(name='TrafficPercent', description='The beginning of the time range during which data was queried.', example='30.64191989360235'),
    }
  ](name='TopDomain')
  }(name='TopDomains', description='The end of the time range during which data was queried.'),
}

model DescribeTopDomainsByFlowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTopDomainsByFlowResponseBody(name='body'),
}

/**
  * The peak bandwidth value.
  *
  * @param request DescribeTopDomainsByFlowRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeTopDomainsByFlowResponse
 */
async function describeTopDomainsByFlowWithOptions(request: DescribeTopDomainsByFlowRequest, runtime: Util.RuntimeOptions): DescribeTopDomainsByFlowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTopDomainsByFlow',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The peak bandwidth value.
  *
  * @param request DescribeTopDomainsByFlowRequest
  * @return DescribeTopDomainsByFlowResponse
 */
async function describeTopDomainsByFlow(request: DescribeTopDomainsByFlowRequest): DescribeTopDomainsByFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTopDomainsByFlowWithOptions(request, runtime);
}

model DescribeUserCertificateExpireCountResponseBody = {
  expireWithin30DaysCount?: int32(name='ExpireWithin30DaysCount', description='The ID of the request.', example='0'),
  expiredCount?: int32(name='ExpiredCount', example='6'),
  requestId?: string(name='RequestId', description='The number of domain names whose SSL certificates have already expired.', example='F5E8DF64-7175-4186-9B06-F002C0BBD0C5'),
}

model DescribeUserCertificateExpireCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserCertificateExpireCountResponseBody(name='body'),
}

/**
  * The number of domain names whose SSL certificates are about to expire within 30 days.
  *
  * @param request DescribeUserCertificateExpireCountRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeUserCertificateExpireCountResponse
 */
async function describeUserCertificateExpireCountWithOptions(runtime: Util.RuntimeOptions): DescribeUserCertificateExpireCountResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeUserCertificateExpireCount',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The number of domain names whose SSL certificates are about to expire within 30 days.
  *
  * @return DescribeUserCertificateExpireCountResponse
 */
async function describeUserCertificateExpireCount(): DescribeUserCertificateExpireCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserCertificateExpireCountWithOptions(runtime);
}

model DescribeUserConfigsRequest {
  config?: string(name='Config', description='The feature whose configurations you want to query. You can specify only one feature in each request. Valid values: oss, green_manager, waf, cc_rule, ddos_dispatch, edge_safe, blocked_regions, http_acl_policy, bot_manager, and ip_reputation.', example='oss'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeUserConfigsResponseBody = {
  configs?: {
    ossLogConfig?: {
      bucket?: string(name='Bucket', description='The name of the bucket.', example='Buckettest'),
      enable?: string(name='Enable', description='Indicates whether the OSS bucket is enabled.', example='off'),
      prefix?: string(name='Prefix', description='The prefix.', example='test'),
    }(name='OssLogConfig', description='The configurations of Object Storage Service (OSS).'),
    wafConfig?: {
      enable?: string(name='Enable', description='Indicates whether WAF is enabled.', example='on'),
    }(name='WafConfig', description='The configurations of Web Application Firewall (WAF).'),
  }(name='Configs', description='The configurations of the specified feature.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9BCC7BAA-ACBE-45E5-83F0-98BF7E693E84'),
}

model DescribeUserConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserConfigsResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeUserConfigsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeUserConfigsResponse
 */
// Deprecated
async function describeUserConfigsWithOptions(request: DescribeUserConfigsRequest, runtime: Util.RuntimeOptions): DescribeUserConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserConfigs',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeUserConfigsRequest
  * @return DescribeUserConfigsResponse
 */
// Deprecated
async function describeUserConfigs(request: DescribeUserConfigsRequest): DescribeUserConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserConfigsWithOptions(request, runtime);
}

model DescribeUserDomainsRequest {
  cdnType?: string(name='CdnType', description='The type of workload accelerated by Alibaba Cloud CDN. Separate types with commas (,). Valid values:

*   **web**: images and small files
*   **download**: large files
*   **video**: on-demand video and audio streaming

If you do not set this parameter, all service types are queried.', example='download,web,video'),
  changeEndTime?: string(name='ChangeEndTime', description='The end of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

> The end time must be later than the start time.', example='2019-10-10T12:14:58Z'),
  changeStartTime?: string(name='ChangeStartTime', description='The beginning of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2019-10-10T12:14:55Z'),
  checkDomainShow?: boolean(name='CheckDomainShow', description='Specifies whether to display domain names that are under review, failed the review, or failed to be configured. Valid values:

*   **true**
*   **false**', example='false'),
  coverage?: string(name='Coverage', description='The acceleration region. By default, all acceleration regions are queried. Valid values:

*   **domestic**: Chinese mainland
*   **global**: global
*   **overseas**: outside the Chinese mainland', example='domestic'),
  domainName?: string(name='DomainName', description='The accelerated domain. If you do not set this parameter, all domain names that match the conditions are returned.', example='example.com'),
  domainSearchType?: string(name='DomainSearchType', description='The search mode. Valid values:

*   **fuzzy_match**: fuzzy match
*   **pre_match**: prefix match
*   **suf_match**: suffix match
*   **full_match** (default): exact match

> If you specify the domain names to query but do not set the DomainSearchType parameter, the exact match mode is used.', example='fuzzy_match'),
  domainStatus?: string(name='DomainStatus', description='The status of the domain name. Valid values:

*   **online**
*   **offline**
*   **configuring**
*   **configure_failed**
*   **checking**
*   **check_failed**
*   **stopping**
*   **deleting**

If you do not set this parameter, domain names in all states are queried.', example='configure_failed'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: **1** to **100000**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **1 to 50**. Default value: **20**. Maximum value: **50**.', example='5'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. By default, all IDs are queried.', example='abcd1234abcd1234'),
  securityToken?: string(name='SecurityToken'),
  source?: string(name='Source', description='The information about the origin server.', example='***'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of a tag.

By default, all tag keys are queried.', example='key'),
      value?: string(name='Value', description='The value of the tag.

By default, all tag values are queried.', example='value'),
    }
  ](name='Tag', description='The list of tags. Maximum number of elements in the list: 20'),
}

model DescribeUserDomainsResponseBody = {
  domains?: {
    pageData?: [ 
    {
      cdnType?: string(name='CdnType', description='The type of the workload accelerated by Alibaba Cloud CDN. Valid values:

*   **web**: images and small files
*   **download**: large files
*   **video**: on-demand video and audio streaming', example='download'),
      cname?: string(name='Cname', description='The CNAME assigned to the accelerated domain name.', example='example.com.w.alikunlun.net'),
      coverage?: string(name='Coverage', description='The acceleration region. Valid values:

*   **domestic**: Chinese mainland
*   **global**: global
*   **overseas**: outside the Chinese mainland', example='domestic'),
      description?: string(name='Description', description='The information about Internet Content Provider (ICP) filing.', example='filing description'),
      domainId?: long(name='DomainId', description='The ID of the accelerated domain name.', example='11223344'),
      domainName?: string(name='DomainName', description='The accelerated domain.', example='example.com'),
      domainStatus?: string(name='DomainStatus', description='The status of the accelerated domain name. Valid values:

*   **online**
*   **offline**
*   **configuring**
*   **configure_failed**
*   **checking**
*   **check_failed**
*   **stopping**
*   **deleting**', example='configure_failed'),
      gmtCreated?: string(name='GmtCreated', description='The time when the accelerated domain name was added.', example='2015-10-28T09:32:51Z'),
      gmtModified?: string(name='GmtModified', description='The time when the accelerated domain name was modified.', example='2015-10-28T11:05:52Z'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='abcd1234abcd1234'),
      sandbox?: string(name='Sandbox', description='Indicates whether the accelerated domain name is in a sandbox.', example='normal'),
      sources?: {
        source?: [ 
        {
          content?: string(name='Content', description='The address of the origin server.', example='***.oss-cn-hangzhou.aliyuncs.com'),
          port?: int32(name='Port', description='The port of the origin server.', example='80'),
          priority?: string(name='Priority', description='The priority.', example='20'),
          type?: string(name='Type', description='The type of the origin server.', example='oss'),
          weight?: string(name='Weight', description='The weight of the origin server if multiple origin servers have been specified.', example='15'),
        }
      ](name='Source')
      }(name='Sources', description='The information about the origin server.'),
      sslProtocol?: string(name='SslProtocol', description='Indicates whether HTTPS is enabled. Valid values:

*   **on**
*   **off**', example='on'),
    }
  ](name='PageData')
  }(name='Domains', description='The list of the accelerated domain names returned.'),
  pageNumber?: long(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BDA62CE4-3477-439A-B52E-D2D7C829D7C1'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model DescribeUserDomainsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserDomainsResponseBody(name='body'),
}

/**
  * *   You can call this operation up to 100 times per second per account.
  * *   You can specify up to 50 domain names in each request. Separate multiple domain names with commas (,).
  *
  * @param request DescribeUserDomainsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeUserDomainsResponse
 */
async function describeUserDomainsWithOptions(request: DescribeUserDomainsRequest, runtime: Util.RuntimeOptions): DescribeUserDomainsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdnType)) {
    query['CdnType'] = request.cdnType;
  }
  if (!Util.isUnset(request.changeEndTime)) {
    query['ChangeEndTime'] = request.changeEndTime;
  }
  if (!Util.isUnset(request.changeStartTime)) {
    query['ChangeStartTime'] = request.changeStartTime;
  }
  if (!Util.isUnset(request.checkDomainShow)) {
    query['CheckDomainShow'] = request.checkDomainShow;
  }
  if (!Util.isUnset(request.coverage)) {
    query['Coverage'] = request.coverage;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.domainSearchType)) {
    query['DomainSearchType'] = request.domainSearchType;
  }
  if (!Util.isUnset(request.domainStatus)) {
    query['DomainStatus'] = request.domainStatus;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserDomains',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can call this operation up to 100 times per second per account.
  * *   You can specify up to 50 domain names in each request. Separate multiple domain names with commas (,).
  *
  * @param request DescribeUserDomainsRequest
  * @return DescribeUserDomainsResponse
 */
async function describeUserDomains(request: DescribeUserDomainsRequest): DescribeUserDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserDomainsWithOptions(request, runtime);
}

model DescribeUserTagsResponseBody = {
  requestId?: string(name='RequestId', description='The list of tags returned.', example='34AB41F1-04A5-496F-8C8D-634BDBE6A9FB'),
  tags?: [ 
    {
      key?: string(name='Key', description='The value of the tag.', example='env'),
      value?: [ string ](name='Value', description='The ID of the request.'),
    }
  ](name='Tags', description='The key of the tag.'),
}

model DescribeUserTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserTagsResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeUserTagsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeUserTagsResponse
 */
async function describeUserTagsWithOptions(runtime: Util.RuntimeOptions): DescribeUserTagsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeUserTags',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @return DescribeUserTagsResponse
 */
async function describeUserTags(): DescribeUserTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserTagsWithOptions(runtime);
}

model DescribeUserUsageDataExportTaskRequest {
  pageNumber?: string(name='PageNumber', description='The name of the task.', example='1'),
  pageSize?: string(name='PageSize', description='The usage details returned per page.', example='20'),
}

model DescribeUserUsageDataExportTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the task.', example='A91BE91F-0B34-4CBF-8E0F-A2977E15AA52'),
  usageDataPerPage?: {
    data?: {
      dataItem?: [ 
      {
        createTime?: string(name='CreateTime', description='The download URL.', example='2019-12-31T08:43:21Z'),
        downloadUrl?: string(name='DownloadUrl', description='The configurations of the task.', example='https://cdn-polaris.xxxx'),
        status?: string(name='Status', description='The time when the task was created.', example='success'),
        taskConfig?: {
          endTime?: string(name='EndTime', description='The ID of the request.', example='2019-12-30T15:59:59Z'),
          startTime?: string(name='StartTime', description='The last time when the task was modified.', example='2019-12-29T16:00:00Z'),
        }(name='TaskConfig', description='The total number of entries returned.'),
        taskId?: string(name='TaskId', description='The number of the current page.', example='A91BE91F-0B34-4CBF-8E0F-A2977'),
        taskName?: string(name='TaskName', description='The number of entries to return on each page. Default value: **20**. Maximum value: **50**.

Valid values: **1** to **50**.', example='The number of entries returned per page.'),
        updateTime?: string(name='UpdateTime', description='The operation that you want to perform. Set the value to **DescribeUserUsageDataExportTask**.', example='2019-12-31T08:45:02Z'),
      }
    ](name='DataItem')
    }(name='Data', description='The status of the task.

*   created: The task is being created.
*   success: The task has been created.
*   failed: The creation of the task failed.'),
    pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: **1** to **100000**.', example='1'),
    pageSize?: int32(name='PageSize', description='The description of the task.', example='10'),
    totalCount?: int32(name='TotalCount', description='The start of the time range that was queried.', example='10'),
  }(name='UsageDataPerPage', description='The end of the time range that was queried.'),
}

model DescribeUserUsageDataExportTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserUsageDataExportTaskResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeUserUsageDataExportTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeUserUsageDataExportTaskResponse
 */
async function describeUserUsageDataExportTaskWithOptions(request: DescribeUserUsageDataExportTaskRequest, runtime: Util.RuntimeOptions): DescribeUserUsageDataExportTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserUsageDataExportTask',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeUserUsageDataExportTaskRequest
  * @return DescribeUserUsageDataExportTaskResponse
 */
async function describeUserUsageDataExportTask(request: DescribeUserUsageDataExportTaskRequest): DescribeUserUsageDataExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserUsageDataExportTaskWithOptions(request, runtime);
}

model DescribeUserUsageDetailDataExportTaskRequest {
  pageNumber?: string(name='PageNumber', description='The name of the task.', example='1'),
  pageSize?: string(name='PageSize', description='The usage details returned per page.', example='10'),
}

model DescribeUserUsageDetailDataExportTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the task.', example='A91BE91F-0B34-4CBF-8E0F-A2977E15AA52'),
  usageDataPerPage?: {
    data?: {
      dataItem?: [ 
      {
        createTime?: string(name='CreateTime', description='The download URL.', example='2018-10-09T06:33:38Z'),
        downloadUrl?: string(name='DownloadUrl', description='The configurations of the task.', example='https://test.oss-cn-beijing.aliyuncs.com/billing_data/xxx'),
        status?: string(name='Status', description='The time when the task was created.', example='success'),
        taskConfig?: {
          endTime?: string(name='EndTime', description='refresh', example='2018-08-31T15:59:59Z'),
          startTime?: string(name='StartTime', description='The ID of the request.', example='2018-07-31T16:00:00Z'),
        }(name='TaskConfig', description='The total number of entries returned.'),
        taskId?: string(name='TaskId', description='The number of the page returned.', example='11'),
        taskName?: string(name='TaskName', description='The number of entries to return on each page. Default value: **20**. Maximum value: **50**.

Valid values: **1** to **50**.', example='The number of the entries returned per page.'),
        updateTime?: string(name='UpdateTime', description='The operation that you want to perform. Set the value to **DescribeUserUsageDetailDataExportTask**.', example='2018-10-09T06:35:46Z'),
      }
    ](name='DataItem')
    }(name='Data', description='The status of the task.'),
    pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: **1** to **100000**.', example='1'),
    pageSize?: int32(name='PageSize', description='The description of the task.', example='10'),
    totalCount?: int32(name='TotalCount', description='The start of the time range that was queried.', example='1'),
  }(name='UsageDataPerPage', description='The end of the time range that was queried.'),
}

model DescribeUserUsageDetailDataExportTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserUsageDetailDataExportTaskResponseBody(name='body'),
}

/**
  * - This operation has been available since July 20, 2018. You can query information about resource usage collected within the last three months.
  * - The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeUserUsageDetailDataExportTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeUserUsageDetailDataExportTaskResponse
 */
async function describeUserUsageDetailDataExportTaskWithOptions(request: DescribeUserUsageDetailDataExportTaskRequest, runtime: Util.RuntimeOptions): DescribeUserUsageDetailDataExportTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserUsageDetailDataExportTask',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - This operation has been available since July 20, 2018. You can query information about resource usage collected within the last three months.
  * - The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DescribeUserUsageDetailDataExportTaskRequest
  * @return DescribeUserUsageDetailDataExportTaskResponse
 */
async function describeUserUsageDetailDataExportTask(request: DescribeUserUsageDetailDataExportTaskRequest): DescribeUserUsageDetailDataExportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserUsageDetailDataExportTaskWithOptions(request, runtime);
}

model DescribeUserVipsByDomainRequest {
  available?: string(name='Available', description='The virtual IP address.', example='on'),
  domainName?: string(name='DomainName', description='A list of virtual IP addresses.', example='example.com'),
}

model DescribeUserVipsByDomainResponseBody = {
  domainName?: string(name='DomainName', description='>  The maximum number of times that each user can call this operation per second is 30.', example='example.com'),
  requestId?: string(name='RequestId', description='A list of virtual IP addresses.', example='820E7900-5CA9-4AEF-B0DD-20ED5F64BE55'),
  vips?: {
    vip?: [ string ](name='Vip')
  }(name='Vips', description='The accelerated domain name. You can specify only one domain name.'),
}

model DescribeUserVipsByDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserVipsByDomainResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request DescribeUserVipsByDomainRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeUserVipsByDomainResponse
 */
async function describeUserVipsByDomainWithOptions(request: DescribeUserVipsByDomainRequest, runtime: Util.RuntimeOptions): DescribeUserVipsByDomainResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserVipsByDomain',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @param request DescribeUserVipsByDomainRequest
  * @return DescribeUserVipsByDomainResponse
 */
async function describeUserVipsByDomain(request: DescribeUserVipsByDomainRequest): DescribeUserVipsByDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserVipsByDomainWithOptions(request, runtime);
}

model DescribeVerifyContentRequest {
  domainName?: string(name='DomainName', example='example.com'),
}

model DescribeVerifyContentResponseBody = {
  content?: string(name='Content', example='verify_dffeb6610035dcb77b413a59c32cd91f'),
  requestId?: string(name='RequestId', example='34AB41F1-04A5-496F-8C8D-634BDBE6A9FB'),
}

model DescribeVerifyContentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVerifyContentResponseBody(name='body'),
}

async function describeVerifyContentWithOptions(request: DescribeVerifyContentRequest, runtime: Util.RuntimeOptions): DescribeVerifyContentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVerifyContent',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVerifyContent(request: DescribeVerifyContentRequest): DescribeVerifyContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVerifyContentWithOptions(request, runtime);
}

model DisableRealtimeLogDeliveryRequest {
  domain?: string(name='Domain', description='The accelerated domain name for which you want to disable real-time log delivery. You can specify multiple domain names and separate them with commas (,).', example='example.com'),
}

model DisableRealtimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9732E117-8A37-49FD-A36F-ABBB87556CA7'),
}

model DisableRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableRealtimeLogDeliveryResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DisableRealtimeLogDeliveryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DisableRealtimeLogDeliveryResponse
 */
async function disableRealtimeLogDeliveryWithOptions(request: DisableRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): DisableRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableRealtimeLogDelivery',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request DisableRealtimeLogDeliveryRequest
  * @return DisableRealtimeLogDeliveryResponse
 */
async function disableRealtimeLogDelivery(request: DisableRealtimeLogDeliveryRequest): DisableRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableRealtimeLogDeliveryWithOptions(request, runtime);
}

model EnableRealtimeLogDeliveryRequest {
  domain?: string(name='Domain', description='The accelerated domain name for which you want to enable real-time log delivery. You can specify multiple domain names and separate them with commas (,).', example='example.com'),
}

model EnableRealtimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9732E117-8A37-49FD-A36F-ABBB87556CA7'),
}

model EnableRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableRealtimeLogDeliveryResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request EnableRealtimeLogDeliveryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return EnableRealtimeLogDeliveryResponse
 */
async function enableRealtimeLogDeliveryWithOptions(request: EnableRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): EnableRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableRealtimeLogDelivery',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request EnableRealtimeLogDeliveryRequest
  * @return EnableRealtimeLogDeliveryResponse
 */
async function enableRealtimeLogDelivery(request: EnableRealtimeLogDeliveryRequest): EnableRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableRealtimeLogDeliveryWithOptions(request, runtime);
}

model ListDomainsByLogConfigIdRequest {
  configId?: string(name='ConfigId', description='>  The maximum number of times that each user can call this operation per second is 100.', example='123'),
}

model ListDomainsByLogConfigIdResponseBody = {
  domains?: {
    domain?: [ string ](name='Domain')
  }(name='Domains', description='The ID of the request.'),
  requestId?: string(name='RequestId', description='The ID of the custom configuration.', example='9732E117-8A37-49FD-A36F-ABBB87556CA7'),
}

model ListDomainsByLogConfigIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDomainsByLogConfigIdResponseBody(name='body'),
}

/**
  * The domain name.
  *
  * @param request ListDomainsByLogConfigIdRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListDomainsByLogConfigIdResponse
 */
async function listDomainsByLogConfigIdWithOptions(request: ListDomainsByLogConfigIdRequest, runtime: Util.RuntimeOptions): ListDomainsByLogConfigIdResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDomainsByLogConfigId',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The domain name.
  *
  * @param request ListDomainsByLogConfigIdRequest
  * @return ListDomainsByLogConfigIdResponse
 */
async function listDomainsByLogConfigId(request: ListDomainsByLogConfigIdRequest): ListDomainsByLogConfigIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDomainsByLogConfigIdWithOptions(request, runtime);
}

model ListFCTriggerRequest {
  eventMetaName?: string(name='EventMetaName', description='The name of the event. You can specify only one name.', example='LogFileCreated'),
  eventMetaVersion?: string(name='EventMetaVersion', description='The version number of the event. You can specify only one version number.', example='1.0.0'),
}

model ListFCTriggerResponseBody = {
  FCTriggers?: [ 
    {
      eventMetaName?: string(name='EventMetaName', description='The name of the event.', example='LogFileCreated'),
      eventMetaVersion?: string(name='EventMetaVersion', description='The version of the event.', example='1.0.0'),
      notes?: string(name='Notes', description='The remarks.', example='Test'),
      roleARN?: string(name='RoleARN', description='The Resource Access Management (RAM) role.', example='acs:ram:: 1234567890:role/aliyuncdneventnotificationrole'),
      sourceArn?: string(name='SourceArn', description='The resources and filters for event listening.', example='acs:cdn:*:1234567890:domain/example.com'),
      triggerARN?: string(name='TriggerARN', description='The trigger that corresponds to the Function Compute service.', example='acs:fc:cn-beijing: 1234567890:services/FCTestService/functions/printEvent/triggers/testtrigger'),
    }
  ](name='FCTriggers', description='The Function Compute triggers that are set for Alibaba Cloud CDN events.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC046C5D-8CB4-4B6B-B7F8-B335E51EF90E'),
}

model ListFCTriggerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFCTriggerResponseBody(name='body'),
}

/**
  * > You can call this operation up to 100 times per second per account.
  *
  * @param request ListFCTriggerRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListFCTriggerResponse
 */
async function listFCTriggerWithOptions(request: ListFCTriggerRequest, runtime: Util.RuntimeOptions): ListFCTriggerResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFCTrigger',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can call this operation up to 100 times per second per account.
  *
  * @param request ListFCTriggerRequest
  * @return ListFCTriggerResponse
 */
async function listFCTrigger(request: ListFCTriggerRequest): ListFCTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFCTriggerWithOptions(request, runtime);
}

model ListRealtimeLogDeliveryDomainsRequest {
  logstore?: string(name='Logstore', description='The name of the Logstore that collects log data from Alibaba Cloud CDN in real time. You can specify multiple Logstore names and separate them with commas (,).', example='LogstoreName'),
  project?: string(name='Project', description='The name of the Log Service project that is used for real-time log delivery. You can specify multiple project names and separate them with commas (,).', example='ProjectName'),
  region?: string(name='Region', description='The ID of the region where the Log Service project is deployed. You can specify multiple region IDs and separate them with commas (,).

For more information about regions, see [Regions that support real-time log delivery](~~144883~~).', example='ch-shanghai'),
}

model ListRealtimeLogDeliveryDomainsResponseBody = {
  content?: {
    domains?: [ 
    {
      domainName?: string(name='DomainName', description='The domain name.', example='example.com'),
      status?: string(name='Status', description='The status. Valid values:

*   **online**: enabled
*   **offline**: disabled', example='online'),
    }
  ](name='Domains')
  }(name='Content', description='The information about the accelerated domain names.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='95D5B69F-8AEC-419B-8F3A-612B35032B0D'),
}

model ListRealtimeLogDeliveryDomainsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRealtimeLogDeliveryDomainsResponseBody(name='body'),
}

/**
  * > You can call this operation up to 100 times per second per account.
  *
  * @param request ListRealtimeLogDeliveryDomainsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListRealtimeLogDeliveryDomainsResponse
 */
async function listRealtimeLogDeliveryDomainsWithOptions(request: ListRealtimeLogDeliveryDomainsRequest, runtime: Util.RuntimeOptions): ListRealtimeLogDeliveryDomainsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRealtimeLogDeliveryDomains',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can call this operation up to 100 times per second per account.
  *
  * @param request ListRealtimeLogDeliveryDomainsRequest
  * @return ListRealtimeLogDeliveryDomainsResponse
 */
async function listRealtimeLogDeliveryDomains(request: ListRealtimeLogDeliveryDomainsRequest): ListRealtimeLogDeliveryDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRealtimeLogDeliveryDomainsWithOptions(request, runtime);
}

model ListRealtimeLogDeliveryInfosResponseBody = {
  content?: {
    realtimeLogDeliveryInfos?: [ 
    {
      logstore?: string(name='Logstore', description='The name of the Logstore that collects log data from Alibaba Cloud CDN in real time.', example='LogstoreName'),
      project?: string(name='Project', description='The name of the Log Service project that is used for real-time log delivery.', example='ProjectName'),
      region?: string(name='Region', description='The ID of the region where the Log Service project is deployed. For more information, see [Regions that support real-time log delivery](~~144883~~).', example='ch-shanghai'),
    }
  ](name='RealtimeLogDeliveryInfos')
  }(name='Content', description='The information about real-time log delivery.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='95D5B69F-8AEC-419B-8F3A-612B35032B0D'),
}

model ListRealtimeLogDeliveryInfosResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRealtimeLogDeliveryInfosResponseBody(name='body'),
}

/**
  * > You can call this operation up to 100 times per second per account.
  *
  * @param request ListRealtimeLogDeliveryInfosRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListRealtimeLogDeliveryInfosResponse
 */
async function listRealtimeLogDeliveryInfosWithOptions(runtime: Util.RuntimeOptions): ListRealtimeLogDeliveryInfosResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListRealtimeLogDeliveryInfos',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can call this operation up to 100 times per second per account.
  *
  * @return ListRealtimeLogDeliveryInfosResponse
 */
async function listRealtimeLogDeliveryInfos(): ListRealtimeLogDeliveryInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRealtimeLogDeliveryInfosWithOptions(runtime);
}

model ListUserCustomLogConfigResponseBody = {
  configIds?: {
    configId?: [ string ](name='ConfigId')
  }(name='ConfigIds', description='The ID of the request.'),
  requestId?: string(name='RequestId', description='The ID of the log configuration.', example='95D5B69F-8AEC-419B-8F3A-612B35032B0D'),
}

model ListUserCustomLogConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserCustomLogConfigResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request ListUserCustomLogConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListUserCustomLogConfigResponse
 */
async function listUserCustomLogConfigWithOptions(runtime: Util.RuntimeOptions): ListUserCustomLogConfigResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListUserCustomLogConfig',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @return ListUserCustomLogConfigResponse
 */
async function listUserCustomLogConfig(): ListUserCustomLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserCustomLogConfigWithOptions(runtime);
}

model ModifyCdnDomainRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name in each request.', example='example.com'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyuji4b6r4**'),
  securityToken?: string(name='SecurityToken'),
  sources?: string(name='Sources', description='The information about the addresses of origin servers.

> Do not set **Sources** and **TopLevelDomain** at the same time. If you set **Sources** and **TopLevelDomain** at the same time, **TopLevelDomain** does not take effect.', example='[{"content":"1.1.1.1","type":"ipaddr","priority":"20","port":80,"weight":"15"}]'),
  topLevelDomain?: string(name='TopLevelDomain', description='The root domain. To add a root domain name, you must be added to the whitelist specified by the CDN_TOP_LEVEL_DOMAIN_GREY_USER_LIST parameter.

> Do not set **Sources** and **TopLevelDomain** at the same time. If you set **Sources** and **TopLevelDomain** at the same time, **TopLevelDomain** does not take effect.', example='aliyundoc.com'),
}

model ModifyCdnDomainResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model ModifyCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCdnDomainResponseBody(name='body'),
}

/**
  * > You can call this operation up to 30 times per second per account.
  *
  * @param request ModifyCdnDomainRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyCdnDomainResponse
 */
async function modifyCdnDomainWithOptions(request: ModifyCdnDomainRequest, runtime: Util.RuntimeOptions): ModifyCdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sources)) {
    query['Sources'] = request.sources;
  }
  if (!Util.isUnset(request.topLevelDomain)) {
    query['TopLevelDomain'] = request.topLevelDomain;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCdnDomain',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can call this operation up to 30 times per second per account.
  *
  * @param request ModifyCdnDomainRequest
  * @return ModifyCdnDomainResponse
 */
async function modifyCdnDomain(request: ModifyCdnDomainRequest): ModifyCdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCdnDomainWithOptions(request, runtime);
}

model ModifyCdnDomainSchdmByPropertyRequest {
  domainName?: string(name='DomainName', description='The operation that you want to perform. Set the value to **ModifyCdnDomainSchdmByProperty**.', example='example.com'),
  property?: string(name='Property', description='The accelerated region. Valid values for coverage:

*   **domestic**: Chinese mainland
*   **overseas**: global (excluding the Chinese mainland)
*   **global**: global', example='{"coverage":"overseas"}'),
}

model ModifyCdnDomainSchdmByPropertyResponseBody = {
  requestId?: string(name='RequestId', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model ModifyCdnDomainSchdmByPropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCdnDomainSchdmByPropertyResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request ModifyCdnDomainSchdmByPropertyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyCdnDomainSchdmByPropertyResponse
 */
async function modifyCdnDomainSchdmByPropertyWithOptions(request: ModifyCdnDomainSchdmByPropertyRequest, runtime: Util.RuntimeOptions): ModifyCdnDomainSchdmByPropertyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.property)) {
    query['Property'] = request.property;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCdnDomainSchdmByProperty',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @param request ModifyCdnDomainSchdmByPropertyRequest
  * @return ModifyCdnDomainSchdmByPropertyResponse
 */
async function modifyCdnDomainSchdmByProperty(request: ModifyCdnDomainSchdmByPropertyRequest): ModifyCdnDomainSchdmByPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCdnDomainSchdmByPropertyWithOptions(request, runtime);
}

model ModifyRealtimeLogDeliveryRequest {
  domain?: string(name='Domain', description='The ID of the request.', example='example.com'),
  logstore?: string(name='Logstore', description='The accelerated domain name for which you want to modify the configurations of real-time log delivery. Only one domain name is supported.', example='TestLog'),
  project?: string(name='Project', description='The ID of the region where the Log Service project is deployed. For more information, see [Regions that support real-time log delivery](~~144883~~).', example='testProject'),
  region?: string(name='Region', description='The name of the Log Service project that is used for real-time log delivery.', example='ch-shanghai'),
}

model ModifyRealtimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **ModifyRealtimeLogDelivery**.', example='9732E117-8A37-49FD-A36F-ABBB87556CA7'),
}

model ModifyRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyRealtimeLogDeliveryResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request ModifyRealtimeLogDeliveryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyRealtimeLogDeliveryResponse
 */
async function modifyRealtimeLogDeliveryWithOptions(request: ModifyRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): ModifyRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyRealtimeLogDelivery',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request ModifyRealtimeLogDeliveryRequest
  * @return ModifyRealtimeLogDeliveryResponse
 */
async function modifyRealtimeLogDelivery(request: ModifyRealtimeLogDeliveryRequest): ModifyRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRealtimeLogDeliveryWithOptions(request, runtime);
}

model OpenCdnServiceRequest {
  internetChargeType?: string(name='InternetChargeType', description='The metering method of Alibaba Cloud CDN. A value of **PayByTraffic** indicates that the metering method is pay-by-data-transfer.', example='PayByTraffic'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model OpenCdnServiceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='97C68796-EB7F-4D41-9D5B-12B909D76508'),
}

model OpenCdnServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenCdnServiceResponseBody(name='body'),
}

/**
  * *   Alibaba Cloud CDN can be activated only once per Alibaba Cloud account. The Alibaba Cloud account must complete real-name verification to activate Alibaba Cloud CDN.
  * *   You can call this operation up to five times per second per user.
  *
  * @param request OpenCdnServiceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return OpenCdnServiceResponse
 */
async function openCdnServiceWithOptions(request: OpenCdnServiceRequest, runtime: Util.RuntimeOptions): OpenCdnServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenCdnService',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   Alibaba Cloud CDN can be activated only once per Alibaba Cloud account. The Alibaba Cloud account must complete real-name verification to activate Alibaba Cloud CDN.
  * *   You can call this operation up to five times per second per user.
  *
  * @param request OpenCdnServiceRequest
  * @return OpenCdnServiceResponse
 */
async function openCdnService(request: OpenCdnServiceRequest): OpenCdnServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openCdnServiceWithOptions(request, runtime);
}

model PublishStagingConfigToProductionRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name.', example='example.com'),
}

model PublishStagingConfigToProductionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model PublishStagingConfigToProductionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublishStagingConfigToProductionResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request PublishStagingConfigToProductionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return PublishStagingConfigToProductionResponse
 */
async function publishStagingConfigToProductionWithOptions(request: PublishStagingConfigToProductionRequest, runtime: Util.RuntimeOptions): PublishStagingConfigToProductionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PublishStagingConfigToProduction',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 30.
  *
  * @param request PublishStagingConfigToProductionRequest
  * @return PublishStagingConfigToProductionResponse
 */
async function publishStagingConfigToProduction(request: PublishStagingConfigToProductionRequest): PublishStagingConfigToProductionResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishStagingConfigToProductionWithOptions(request, runtime);
}

model PushObjectCacheRequest {
  area?: string(name='Area', description='The accelerated region where content is to be prefetched. Valid values:

*   **domestic****: Chinese mainland**
*   **overseas****: regions outside the Chinese mainland**

If you do not set this parameter, content in the accelerated region of the domain name is prefetched.

*   If the accelerated region is set to **Mainland China Only**, content in regions in the Chinese mainland is prefetched.
*   If the accelerated region is set to **Global**, content in all regions is prefetched.
*   If the accelerated region is set to **Global (Excluding Mainland China)**, content in regions outside the Chinese mainland is prefetched.', example='domestic'),
  l2Preload?: boolean(name='L2Preload', description='Specifies whether to prefetch content to POPs. Valid values:

*   **true**: prefetches content to POPs.
*   **false**: prefetches content to regular POPs. Regular POPs can be L2 POPs or L3 POPs. Default value: **false**.', example='true'),
  objectPath?: string(name='ObjectPath', description='The URLs based on which content is prefetched. Format: **accelerated domain name/files to be prefetched**.

> Separate URLs with line feeds (\\n or \\r\\n). Each object path can be up to 1,024 characters in length.', example='example.com/image/1.png\\nexample.org/image/2.png'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  withHeader?: string(name='WithHeader', description='The custom header for prefetch in the JSON format.', example='{
      "Accept-Encoding": [
            "gzip"
      ]
}'),
}

model PushObjectCacheResponseBody = {
  pushTaskId?: string(name='PushTaskId', description='The ID of the prefetch task. If multiple tasks are returned, the IDs are separated by commas (,). The task IDs are merged based on the following rules:

*   If the tasks are set for the same accelerated domain name, submitted within the same second, and prefetch content from URLs instead of directories, the tasks IDs are merged into the same task ID (RushTaskId).
*   If the number of tasks that are set for the same accelerated domain name, submitted within the same second, and prefetch content from URLs instead of directories exceeds 500, every 500 task IDs are merged into the same task ID (RushTaskId).', example='9524xxxx'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model PushObjectCacheResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PushObjectCacheResponseBody(name='body'),
}

/**
  * *   Alibaba Cloud CDN supports POST requests in which parameters are sent as a form.
  * *   You can call the [RefreshObjectCaches](~~91164~~) operation to refresh content and call the [PushObjectCache](~~91161~~) operation to prefetch content.
  * *   By default, each Alibaba Cloud account can submit up to 1,000 URLs per day. If the daily peak bandwidth value of your workloads exceeds 200 Mbit/s, you can [submit a ticket](https://account.alibabacloud.com/login/login.htm?oauth_callback=https%3A//ticket-intl.console.aliyun.com/%23/ticket/createIndex) to increase your daily quota. Alibaba Cloud reviews your application and then increases the quota accordingly.
  * *   You can specify at most 100 URLs in each prefetch request.
  * *   For each Alibaba Cloud account, the prefetch queue can contain up to 50,000 URLs. Content is prefetched based on the time when the URLs are submitted. The URL that is submitted the earliest has the highest priority. If the number of URLs in the queue reaches 50,000, you cannot submit more URLs until the number drops below 50,000.
  * *   You can call this operation up to 50 times per second per account.
  * *   For more information about how to automate refresh or prefetch tasks, see [Run scripts to refresh and prefetch content](~~151829~~).
  * ## Precautions
  * *   After a prefetch task is submitted and completed, the POPs immediately start to retrieve resources from the origin server. Therefore, a large number of refresh tasks cause a large number of concurrent download tasks. This increases the number of requests that are redirected to the origin server. The back-to-origin routing process consumes more bandwidth resources and the origin server may be overwhelmed.
  * *   The time required for a prefetch task to complete is proportional to the size of the prefetched file. In actual practice, most prefetch tasks require 5 to 30 minutes to complete. A task with a smaller average file size requires less time.
  * *   To allow RAM users to perform this operation, you must first grant them the required permissions. For more information, see [Authorize a RAM user to prefetch and refresh resources](~~260300~~).
  *
  * @param request PushObjectCacheRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return PushObjectCacheResponse
 */
async function pushObjectCacheWithOptions(request: PushObjectCacheRequest, runtime: Util.RuntimeOptions): PushObjectCacheResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.area)) {
    query['Area'] = request.area;
  }
  if (!Util.isUnset(request.l2Preload)) {
    query['L2Preload'] = request.l2Preload;
  }
  if (!Util.isUnset(request.objectPath)) {
    query['ObjectPath'] = request.objectPath;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.withHeader)) {
    query['WithHeader'] = request.withHeader;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PushObjectCache',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   Alibaba Cloud CDN supports POST requests in which parameters are sent as a form.
  * *   You can call the [RefreshObjectCaches](~~91164~~) operation to refresh content and call the [PushObjectCache](~~91161~~) operation to prefetch content.
  * *   By default, each Alibaba Cloud account can submit up to 1,000 URLs per day. If the daily peak bandwidth value of your workloads exceeds 200 Mbit/s, you can [submit a ticket](https://account.alibabacloud.com/login/login.htm?oauth_callback=https%3A//ticket-intl.console.aliyun.com/%23/ticket/createIndex) to increase your daily quota. Alibaba Cloud reviews your application and then increases the quota accordingly.
  * *   You can specify at most 100 URLs in each prefetch request.
  * *   For each Alibaba Cloud account, the prefetch queue can contain up to 50,000 URLs. Content is prefetched based on the time when the URLs are submitted. The URL that is submitted the earliest has the highest priority. If the number of URLs in the queue reaches 50,000, you cannot submit more URLs until the number drops below 50,000.
  * *   You can call this operation up to 50 times per second per account.
  * *   For more information about how to automate refresh or prefetch tasks, see [Run scripts to refresh and prefetch content](~~151829~~).
  * ## Precautions
  * *   After a prefetch task is submitted and completed, the POPs immediately start to retrieve resources from the origin server. Therefore, a large number of refresh tasks cause a large number of concurrent download tasks. This increases the number of requests that are redirected to the origin server. The back-to-origin routing process consumes more bandwidth resources and the origin server may be overwhelmed.
  * *   The time required for a prefetch task to complete is proportional to the size of the prefetched file. In actual practice, most prefetch tasks require 5 to 30 minutes to complete. A task with a smaller average file size requires less time.
  * *   To allow RAM users to perform this operation, you must first grant them the required permissions. For more information, see [Authorize a RAM user to prefetch and refresh resources](~~260300~~).
  *
  * @param request PushObjectCacheRequest
  * @return PushObjectCacheResponse
 */
async function pushObjectCache(request: PushObjectCacheRequest): PushObjectCacheResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushObjectCacheWithOptions(request, runtime);
}

model RefreshObjectCachesRequest {
  objectPath?: string(name='ObjectPath', example='http://example.com/image/1.png\\nhttp://aliyundoc.com/image/2.png'),
  objectType?: string(name='ObjectType', example='File'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model RefreshObjectCachesResponseBody = {
  refreshTaskId?: string(name='RefreshTaskId', example='704222904'),
  requestId?: string(name='RequestId', example='D61E4801-EAFF-4A63-AAE1-FBF6CE1CFD1C'),
}

model RefreshObjectCachesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefreshObjectCachesResponseBody(name='body'),
}

/**
  * The request ID.
  *
  * @param request RefreshObjectCachesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RefreshObjectCachesResponse
 */
async function refreshObjectCachesWithOptions(request: RefreshObjectCachesRequest, runtime: Util.RuntimeOptions): RefreshObjectCachesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.objectPath)) {
    query['ObjectPath'] = request.objectPath;
  }
  if (!Util.isUnset(request.objectType)) {
    query['ObjectType'] = request.objectType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RefreshObjectCaches',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The request ID.
  *
  * @param request RefreshObjectCachesRequest
  * @return RefreshObjectCachesResponse
 */
async function refreshObjectCaches(request: RefreshObjectCachesRequest): RefreshObjectCachesResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshObjectCachesWithOptions(request, runtime);
}

model RollbackStagingConfigRequest {
  domainName?: string(name='DomainName', description='The ID of the request.', example='example.com'),
}

model RollbackStagingConfigResponseBody = {
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **RollbackStagingConfig**.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model RollbackStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RollbackStagingConfigResponseBody(name='body'),
}

/**
  * The accelerated domain name. You can specify only one domain name in each call.
  *
  * @param request RollbackStagingConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RollbackStagingConfigResponse
 */
async function rollbackStagingConfigWithOptions(request: RollbackStagingConfigRequest, runtime: Util.RuntimeOptions): RollbackStagingConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RollbackStagingConfig',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The accelerated domain name. You can specify only one domain name in each call.
  *
  * @param request RollbackStagingConfigRequest
  * @return RollbackStagingConfigResponse
 */
async function rollbackStagingConfig(request: RollbackStagingConfigRequest): RollbackStagingConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return rollbackStagingConfigWithOptions(request, runtime);
}

model SetCdnDomainCSRCertificateRequest {
  domainName?: string(name='DomainName', description='The ID of the request.', example='example.com'),
  serverCertificate?: string(name='ServerCertificate', description='The content of the certificate. The certificate must match the certificate signing request (CSR) created by calling the [CreateCdnCertificateSigningRequest](~~144478~~) operation. Make sure that the certificate is in the PEM format, and the content of the certificate is encoded in Base64 and then encoded by encodeURIComponent.', example='----BEGIN CERTIFICATE----- MIIFz****-----END CERTIFICATE-----'),
}

model SetCdnDomainCSRCertificateResponseBody = {
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **SetCdnDomainCSRCertificate**.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C9'),
}

model SetCdnDomainCSRCertificateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetCdnDomainCSRCertificateResponseBody(name='body'),
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request SetCdnDomainCSRCertificateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetCdnDomainCSRCertificateResponse
 */
async function setCdnDomainCSRCertificateWithOptions(request: SetCdnDomainCSRCertificateRequest, runtime: Util.RuntimeOptions): SetCdnDomainCSRCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.serverCertificate)) {
    query['ServerCertificate'] = request.serverCertificate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetCdnDomainCSRCertificate',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  The maximum number of times that each user can call this operation per second is 100.
  *
  * @param request SetCdnDomainCSRCertificateRequest
  * @return SetCdnDomainCSRCertificateResponse
 */
async function setCdnDomainCSRCertificate(request: SetCdnDomainCSRCertificateRequest): SetCdnDomainCSRCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setCdnDomainCSRCertificateWithOptions(request, runtime);
}

model SetCdnDomainSMCertificateRequest {
  certIdentifier?: string(name='CertIdentifier', description='The ID of the SM certificate that you want to configure. The identifier of the certificate. The value is Certificate ID-cn-hangzhou. For example, if the certificate ID is 123, set the value of this parameter to 123-cn-hangzhou.', example='1234****-cn-hangzhou'),
  domainName?: string(name='DomainName', description='The accelerated domain name for which you want to configure the SM certificate.

> The domain name must use HTTPS acceleration.', example='example.com'),
  ownerId?: long(name='OwnerId'),
  SSLProtocol?: string(name='SSLProtocol', description='Specifies whether to enable the SSL certificate. Valid values:

*   **on**
*   **off**', example='on'),
  securityToken?: string(name='SecurityToken'),
}

model SetCdnDomainSMCertificateResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0AEDAF20-4DDF-4165-8750-47FF9C1929C8'),
}

model SetCdnDomainSMCertificateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetCdnDomainSMCertificateResponseBody(name='body'),
}

/**
  * > You can call this operation up to 30 times per second per account.
  *
  * @param request SetCdnDomainSMCertificateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetCdnDomainSMCertificateResponse
 */
async function setCdnDomainSMCertificateWithOptions(request: SetCdnDomainSMCertificateRequest, runtime: Util.RuntimeOptions): SetCdnDomainSMCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certIdentifier)) {
    query['CertIdentifier'] = request.certIdentifier;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.SSLProtocol)) {
    query['SSLProtocol'] = request.SSLProtocol;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetCdnDomainSMCertificate',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can call this operation up to 30 times per second per account.
  *
  * @param request SetCdnDomainSMCertificateRequest
  * @return SetCdnDomainSMCertificateResponse
 */
async function setCdnDomainSMCertificate(request: SetCdnDomainSMCertificateRequest): SetCdnDomainSMCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setCdnDomainSMCertificateWithOptions(request, runtime);
}

model SetCdnDomainSSLCertificateRequest {
  certId?: long(name='CertId', example='8089870'),
  certName?: string(name='CertName', example='yourCertName'),
  certRegion?: string(name='CertRegion', example='cn-hangzhou'),
  certType?: string(name='CertType', example='upload'),
  domainName?: string(name='DomainName', example='example.com'),
  ownerId?: long(name='OwnerId'),
  SSLPri?: string(name='SSLPri', example='y****'),
  SSLProtocol?: string(name='SSLProtocol', example='off'),
  SSLPub?: string(name='SSLPub', example='xxx'),
  securityToken?: string(name='SecurityToken'),
}

model SetCdnDomainSSLCertificateResponseBody = {
  requestId?: string(name='RequestId', example='A7C69682-7F88-40DD-A198-10D0309E439D'),
}

model SetCdnDomainSSLCertificateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetCdnDomainSSLCertificateResponseBody(name='body'),
}

async function setCdnDomainSSLCertificateWithOptions(request: SetCdnDomainSSLCertificateRequest, runtime: Util.RuntimeOptions): SetCdnDomainSSLCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certId)) {
    query['CertId'] = request.certId;
  }
  if (!Util.isUnset(request.certName)) {
    query['CertName'] = request.certName;
  }
  if (!Util.isUnset(request.certRegion)) {
    query['CertRegion'] = request.certRegion;
  }
  if (!Util.isUnset(request.certType)) {
    query['CertType'] = request.certType;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.SSLPri)) {
    query['SSLPri'] = request.SSLPri;
  }
  if (!Util.isUnset(request.SSLProtocol)) {
    query['SSLProtocol'] = request.SSLProtocol;
  }
  if (!Util.isUnset(request.SSLPub)) {
    query['SSLPub'] = request.SSLPub;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetCdnDomainSSLCertificate',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setCdnDomainSSLCertificate(request: SetCdnDomainSSLCertificateRequest): SetCdnDomainSSLCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setCdnDomainSSLCertificateWithOptions(request, runtime);
}

model SetCdnDomainStagingConfigRequest {
  domainName?: string(name='DomainName', example='example.com'),
  functions?: string(name='Functions', example='[{"functionArgs":[{"argName":"enable","argValue":"on"},{"argName":"pri","argValue":"1"},{"argName":"rule","argValue":"xxx"}],"functionName":"edge_function"}]'),
}

model SetCdnDomainStagingConfigResponseBody = {
  domainConfigList?: [ 
    {
      configId?: long(name='ConfigId', example='1234567'),
      domainName?: string(name='DomainName', example='www.example.com'),
      functionName?: string(name='FunctionName', example='set_resp_header'),
    }
  ](name='DomainConfigList'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model SetCdnDomainStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetCdnDomainStagingConfigResponseBody(name='body'),
}

async function setCdnDomainStagingConfigWithOptions(request: SetCdnDomainStagingConfigRequest, runtime: Util.RuntimeOptions): SetCdnDomainStagingConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.functions)) {
    query['Functions'] = request.functions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetCdnDomainStagingConfig',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setCdnDomainStagingConfig(request: SetCdnDomainStagingConfigRequest): SetCdnDomainStagingConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setCdnDomainStagingConfigWithOptions(request, runtime);
}

model SetDomainServerCertificateRequest {
  certName?: string(name='CertName', description='Specifies whether to check the certificate name for duplicates. If you set the value to 1, the system does not perform the check and overwrites the information of the existing certificate that uses the same name.', example='myCert1'),
  certType?: string(name='CertType', description='The ID of the request.', example='cas'),
  domainName?: string(name='DomainName', description='The private key. Specify the private key only if you want to enable the SSL certificate.', example='example.com'),
  forceSet?: string(name='ForceSet', description='Specifies whether to enable the SSL certificate. Valid values:

*   **on**: enables the SSL certificate.
*   **off**: disables the SSL certificate. This is the default value.', example='1'),
  ownerId?: long(name='OwnerId'),
  privateKey?: string(name='PrivateKey', description='Specifies whether to check the certificate name for duplicates. If you set the value to 1, the system does not perform the check and overwrites the information of the existing certificate that uses the same name.', example='----BEGIN RSA PRIVATE KEY-----QswCQ****----END RSA PRIVATE KEY-----'),
  securityToken?: string(name='SecurityToken'),
  serverCertificate?: string(name='ServerCertificate', description='The type of the SSL certificate. Valid values:

*   **upload**: a user-uploaded SSL certificate.
*   **cas**: an SSL certificate that is issued by Alibaba Cloud SSL Certificates Service.
*   **free**: a free SSL certificate.

>  If this parameter is set to **cas**, the **PrivateKey** parameter is optional.', example='----BEGIN CERTIFICATE----- MIIFz****-----END CERTIFICATE-----'),
  serverCertificateStatus?: string(name='ServerCertificateStatus', description='The name of the SSL certificate. You can specify only one name.', example='on'),
}

model SetDomainServerCertificateResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model SetDomainServerCertificateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDomainServerCertificateResponseBody(name='body'),
}

/**
  * The content of the SSL certificate. Specify the content of the SSL certificate only if you want to enable the SSL certificate.
  *
  * @param request SetDomainServerCertificateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetDomainServerCertificateResponse
 */
async function setDomainServerCertificateWithOptions(request: SetDomainServerCertificateRequest, runtime: Util.RuntimeOptions): SetDomainServerCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certName)) {
    query['CertName'] = request.certName;
  }
  if (!Util.isUnset(request.certType)) {
    query['CertType'] = request.certType;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.forceSet)) {
    query['ForceSet'] = request.forceSet;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.privateKey)) {
    query['PrivateKey'] = request.privateKey;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverCertificate)) {
    query['ServerCertificate'] = request.serverCertificate;
  }
  if (!Util.isUnset(request.serverCertificateStatus)) {
    query['ServerCertificateStatus'] = request.serverCertificateStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDomainServerCertificate',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The content of the SSL certificate. Specify the content of the SSL certificate only if you want to enable the SSL certificate.
  *
  * @param request SetDomainServerCertificateRequest
  * @return SetDomainServerCertificateResponse
 */
async function setDomainServerCertificate(request: SetDomainServerCertificateRequest): SetDomainServerCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDomainServerCertificateWithOptions(request, runtime);
}

model SetReqHeaderConfigRequest {
  configId?: long(name='ConfigId', description='The ID of the configuration.', example='123'),
  domainName?: string(name='DomainName', description='The accelerated domain name. Separate multiple domain names with commas (,).', example='example.com'),
  key?: string(name='Key', description='The name of the custom header.', example='testkey'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  value?: string(name='Value', description='The value of the custom header.', example='testvalue'),
}

model SetReqHeaderConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model SetReqHeaderConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetReqHeaderConfigResponseBody(name='body'),
}

async function setReqHeaderConfigWithOptions(request: SetReqHeaderConfigRequest, runtime: Util.RuntimeOptions): SetReqHeaderConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetReqHeaderConfig',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setReqHeaderConfig(request: SetReqHeaderConfigRequest): SetReqHeaderConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setReqHeaderConfigWithOptions(request, runtime);
}

model SetWaitingRoomConfigRequest {
  allowPct?: int32(name='AllowPct', description='The percentage of requests that are allowed to be redirected to the origin server. Valid values: **0** to **100**.', example='30'),
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name.', example='example.com'),
  gapTime?: int32(name='GapTime', description='The length of waiting time to skip after an exit from the queue. Unit: seconds.', example='20'),
  maxTimeWait?: int32(name='MaxTimeWait', description='The maximum length of waiting time in the queue. Unit: seconds.', example='30'),
  waitUri?: string(name='WaitUri', description='The regular expression that is used to match URI strings for which the virtual waiting room feature is enabled.', example='xxx'),
  waitUrl?: string(name='WaitUrl', description='The URL of the waiting page.', example='WaitUrl'),
}

model SetWaitingRoomConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model SetWaitingRoomConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetWaitingRoomConfigResponseBody(name='body'),
}

/**
  * > You can call this operation up to 30 times per second per account.
  *
  * @param request SetWaitingRoomConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetWaitingRoomConfigResponse
 */
async function setWaitingRoomConfigWithOptions(request: SetWaitingRoomConfigRequest, runtime: Util.RuntimeOptions): SetWaitingRoomConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allowPct)) {
    query['AllowPct'] = request.allowPct;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.gapTime)) {
    query['GapTime'] = request.gapTime;
  }
  if (!Util.isUnset(request.maxTimeWait)) {
    query['MaxTimeWait'] = request.maxTimeWait;
  }
  if (!Util.isUnset(request.waitUri)) {
    query['WaitUri'] = request.waitUri;
  }
  if (!Util.isUnset(request.waitUrl)) {
    query['WaitUrl'] = request.waitUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetWaitingRoomConfig',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can call this operation up to 30 times per second per account.
  *
  * @param request SetWaitingRoomConfigRequest
  * @return SetWaitingRoomConfigResponse
 */
async function setWaitingRoomConfig(request: SetWaitingRoomConfigRequest): SetWaitingRoomConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setWaitingRoomConfigWithOptions(request, runtime);
}

model StartCdnDomainRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name. You can specify only one domain name in each request.', example='example.com'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model StartCdnDomainResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model StartCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartCdnDomainResponseBody(name='body'),
}

/**
  * *   If the domain name is in an invalid state or you have an overdue payment in your account, the domain name cannot be enabled.
  * *   You can call this operation up to 100 times per second per account.
  *
  * @param request StartCdnDomainRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StartCdnDomainResponse
 */
async function startCdnDomainWithOptions(request: StartCdnDomainRequest, runtime: Util.RuntimeOptions): StartCdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartCdnDomain',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   If the domain name is in an invalid state or you have an overdue payment in your account, the domain name cannot be enabled.
  * *   You can call this operation up to 100 times per second per account.
  *
  * @param request StartCdnDomainRequest
  * @return StartCdnDomainResponse
 */
async function startCdnDomain(request: StartCdnDomainRequest): StartCdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return startCdnDomainWithOptions(request, runtime);
}

model StopCdnDomainRequest {
  domainName?: string(name='DomainName', description='The accelerated domain name that you want to disable. You can specify only one domain name in each request.', example='example.com'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model StopCdnDomainResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='16A96B9A-F203-4EC5-8E43-CB92E68F4CD8'),
}

model StopCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopCdnDomainResponseBody(name='body'),
}

/**
  * *   After an accelerated domain is disabled, Alibaba Cloud CDN retains its information and routes all the requests that are destined for the accelerated domain to the origin server.
  * *   You can call this operation up to 40 times per second per account.
  *
  * @param request StopCdnDomainRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StopCdnDomainResponse
 */
async function stopCdnDomainWithOptions(request: StopCdnDomainRequest, runtime: Util.RuntimeOptions): StopCdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopCdnDomain',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   After an accelerated domain is disabled, Alibaba Cloud CDN retains its information and routes all the requests that are destined for the accelerated domain to the origin server.
  * *   You can call this operation up to 40 times per second per account.
  *
  * @param request StopCdnDomainRequest
  * @return StopCdnDomainResponse
 */
async function stopCdnDomain(request: StopCdnDomainRequest): StopCdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopCdnDomainWithOptions(request, runtime);
}

model TagResourcesRequest {
  resourceId?: [ string ](name='ResourceId', description='The ID of the resource. Valid values of N: **1** to **50**.', example='1'),
  resourceType?: string(name='ResourceType', description='>  The maximum number of times that each user can call this operation per second is 100.', example='DOMAIN'),
  tag?: [ 
    {
      key?: string(name='Key', description='The ID of the request.', example='env'),
      value?: string(name='Value', description='The operation that you want to perform. Set the value to **TagResources**.', example='value'),
    }
  ](name='Tag', description='The type of resource. The resource type. Set the value to **DOMAIN**.'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='Adds tags to a resource.', example='97C68796-EB7F-4D41-9D5B-12B909D76508'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request TagResourcesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return TagResourcesResponse
 */
async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @param request TagResourcesRequest
  * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='The operation that you want to perform. Set the value to **UntagResources**.', example='false'),
  resourceId?: [ string ](name='ResourceId', description='Removes tags from a resource.', example='example.com'),
  resourceType?: string(name='ResourceType', description='The ID of the request.', example='DOMAIN'),
  tagKey?: [ string ](name='TagKey', example='env'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='97C68796-EB7F-4D41-9D5B-12B909D76508'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

/**
  * The key of the tag. Valid values of N: **1** to **20**.
  *
  * @param request UntagResourcesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UntagResourcesResponse
 */
async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The key of the tag. Valid values of N: **1** to **20**.
  *
  * @param request UntagResourcesRequest
  * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateCdnDeliverTaskRequest {
  deliver?: string(name='Deliver', description='\\[{\\\\"reportId\\\\":1,\\\\"conditions\\\\":\\[{\\\\"field\\\\":\\\\"prov\\\\",\\\\"op\\\\":\\\\"in\\\\",\\\\"value\\\\":\\[\\\\"Heilongjiang\\\\",\\\\"Beijing\\\\"]}]}]', example='The domain name that you want to track. You can specify up to 500 domain names in each request. Separate multiple domain names with commas (,). If you do not specify a domain name, the task collects data from all domain names that belong to your Alibaba Cloud account.'),
  deliverId?: long(name='DeliverId', description='> You can call this operation up to three times per second per account.', example='3'),
  domainName?: string(name='DomainName', description='The operations reports that are tracked by the task. The data must be escaped in JSON.', example='www.example.com'),
  name?: string(name='Name', description='**Fields in the ReDatas parameter**

|Field|Type|Required|Description|
|---|---|---|---|
|reportId|String|Yes|The ID of the report.|
|conditions|ConDatas\\[\\]|No|The filter conditions for the report.|

**Fields in the ConDatas parameter**

|Field|Type|Required|Description|
|---|---|---|---|
|field|String|No|The filter field.|
|op|String|No|The filter operation.|
|value|String\\[\\]|No|The array of field values.|


**Fields in the email parameter**

|Field|Type|Required|Description|
|---|---|---|---|
|subject|String|Yes|The email subject.|
|to|String\\[\\]|Yes|The email addresses to which operations reports are sent.|


**Fields in the Deliver parameter**

|Field|Type|Required|Description|
|---|---|---|---|
|subject|String|No|The email subject.|
|to|String\\[\\]|Yes|The email addresses to which operations reports are sent.|


**Fields in the Schedule parameter**

|Field|Type|Required|Description|
|---|---|---|---|
|schedName|String|No|The name of the tracking task.|
|description|String|No|The description of the tracking task.|
|crontab|String|Yes|Specifies the cycle in which the tracking task is scheduled to run.|
|frequency|String|Yes|The interval at which the reports are sent. Valid values:<br />**h**: by hour<br />**d**: by day<br />**w**: by week|
|status|String|No|The status of the tracking task. Valid values:<br />**enable**<br />**disable**|
|effectiveFrom|String|No|The start time of the tracking task.|
|effectiveEnd|String|No|The end time of the tracking task.|', example='The ID of the tracking task that you want to update.'),
  reports?: string(name='Reports', description='The name of the tracking task.', example='Domain name report'),
  schedule?: string(name='Schedule', description='The method that is used to send operations reports. Operations reports are sent to you only by email. The settings must be escaped in JSON.', example='{\\\\"email\\\\":{\\\\"subject\\\\":\\\\"The email subject\\\\",\\\\"to\\\\":\\[\\\\"songmingyuan@alibaba-inc.com\\\\",\\\\"songmingyuan@alibaba-inc.com\\\\"]}}"'),
}

model UpdateCdnDeliverTaskResponseBody = {
  requestId?: string(name='RequestId', description='The parameters that specify the time interval at which the tracking task sends operations reports. The settings must be escaped in JSON.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model UpdateCdnDeliverTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateCdnDeliverTaskResponseBody(name='body'),
}

/**
  * UpdateCdnDeliverTask
  *
  * @param request UpdateCdnDeliverTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateCdnDeliverTaskResponse
 */
async function updateCdnDeliverTaskWithOptions(request: UpdateCdnDeliverTaskRequest, runtime: Util.RuntimeOptions): UpdateCdnDeliverTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deliver)) {
    body['Deliver'] = request.deliver;
  }
  if (!Util.isUnset(request.deliverId)) {
    body['DeliverId'] = request.deliverId;
  }
  if (!Util.isUnset(request.domainName)) {
    body['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.reports)) {
    body['Reports'] = request.reports;
  }
  if (!Util.isUnset(request.schedule)) {
    body['Schedule'] = request.schedule;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCdnDeliverTask',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * UpdateCdnDeliverTask
  *
  * @param request UpdateCdnDeliverTaskRequest
  * @return UpdateCdnDeliverTaskResponse
 */
async function updateCdnDeliverTask(request: UpdateCdnDeliverTaskRequest): UpdateCdnDeliverTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCdnDeliverTaskWithOptions(request, runtime);
}

model UpdateCdnSubTaskRequest {
  domainName?: string(name='DomainName', description='The ID of the request.', example='www.example.com'),
  endTime?: string(name='EndTime', description='The domain names that you want to track. You can specify multiple domain names and separate them with commas (,). You can specify at most 500 domain names in each call.

If you do not specify a domain name, the task collects data from all domain names that belong to your Alibaba Cloud account.', example='2020-11-17T00:00:00Z'),
  reportIds?: string(name='ReportIds', description='The IDs of operations reports that you want to update. Separate IDs with commas (,).', example='1,2,3'),
  startTime?: string(name='StartTime', description='The operation that you want to perform. Set the value to **UpdateCdnSubTask**.', example='2020-09-17T00:00:00Z'),
}

model UpdateCdnSubTaskResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model UpdateCdnSubTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateCdnSubTaskResponseBody(name='body'),
}

/**
  * The end time of the operations report. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.
  *
  * @param request UpdateCdnSubTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateCdnSubTaskResponse
 */
async function updateCdnSubTaskWithOptions(request: UpdateCdnSubTaskRequest, runtime: Util.RuntimeOptions): UpdateCdnSubTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.domainName)) {
    body['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.reportIds)) {
    body['ReportIds'] = request.reportIds;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCdnSubTask',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The end time of the operations report. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.
  *
  * @param request UpdateCdnSubTaskRequest
  * @return UpdateCdnSubTaskResponse
 */
async function updateCdnSubTask(request: UpdateCdnSubTaskRequest): UpdateCdnSubTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCdnSubTaskWithOptions(request, runtime);
}

model UpdateFCTriggerRequest {
  functionARN?: string(name='FunctionARN', description='The feature trigger.', example='acs:fc:1223455566666:123:services/myservice/functions/myfunction'),
  notes?: string(name='Notes', description='The remarks.', example='test'),
  roleARN?: string(name='RoleARN', description='The assigned RAM role.', example='acs:ram:: 1234567890:role/aliyuncdneventnotificationrole'),
  sourceARN?: string(name='SourceARN', description='The resources and filters for event listening.', example='acs:cdn:*:1234567890:domain/example.com'),
  triggerARN?: string(name='TriggerARN', description='The trigger that corresponds to the Function Compute service.', example='acs:fc:cn-beijing: 1234567890:services/FCTestService/functions/printEvent/triggers/testtrigger'),
}

model UpdateFCTriggerResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC046C5D-8CB4-4B6B-B7F8-B335E51EF90E'),
}

model UpdateFCTriggerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFCTriggerResponseBody(name='body'),
}

async function updateFCTriggerWithOptions(request: UpdateFCTriggerRequest, runtime: Util.RuntimeOptions): UpdateFCTriggerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.triggerARN)) {
    query['TriggerARN'] = request.triggerARN;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.functionARN)) {
    body['FunctionARN'] = request.functionARN;
  }
  if (!Util.isUnset(request.notes)) {
    body['Notes'] = request.notes;
  }
  if (!Util.isUnset(request.roleARN)) {
    body['RoleARN'] = request.roleARN;
  }
  if (!Util.isUnset(request.sourceARN)) {
    body['SourceARN'] = request.sourceARN;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFCTrigger',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateFCTrigger(request: UpdateFCTriggerRequest): UpdateFCTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFCTriggerWithOptions(request, runtime);
}

model VerifyDomainOwnerRequest {
  domainName?: string(name='DomainName', example='example.com'),
  globalResourcePlan?: string(name='GlobalResourcePlan'),
  verifyType?: string(name='VerifyType', example='dnsCheck'),
}

model VerifyDomainOwnerResponseBody = {
  content?: string(name='Content', example='verify_dffeb6610035dcb77b413a59c32c****'),
  requestId?: string(name='RequestId', example='34AB41F1-04A5-496F-8C8D-634BDBE6A9FB'),
}

model VerifyDomainOwnerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VerifyDomainOwnerResponseBody(name='body'),
}

async function verifyDomainOwnerWithOptions(request: VerifyDomainOwnerRequest, runtime: Util.RuntimeOptions): VerifyDomainOwnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.globalResourcePlan)) {
    query['GlobalResourcePlan'] = request.globalResourcePlan;
  }
  if (!Util.isUnset(request.verifyType)) {
    query['VerifyType'] = request.verifyType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VerifyDomainOwner',
    version = '2018-05-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function verifyDomainOwner(request: VerifyDomainOwnerRequest): VerifyDomainOwnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyDomainOwnerWithOptions(request, runtime);
}

