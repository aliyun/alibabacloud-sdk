/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Cdn';
  @version = '2018-05-10';
  @endpointRule = 'central';
  @endpointMap = {
    ap-northeast-1 = 'cdn.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'cdn.ap-southeast-1.aliyuncs.com',
    ap-southeast-1 = 'cdn.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'cdn.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'cdn.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'cdn.ap-southeast-1.aliyuncs.com',
    eu-central-1 = 'cdn.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'cdn.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'cdn.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'cdn.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'cdn.ap-southeast-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddCdnDomainRequest {
  cdnType: string(name='CdnType', position='Query'),
  checkUrl?: string(name='CheckUrl', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  scope?: string(name='Scope', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  sources: string(name='Sources', position='Query'),
  topLevelDomain?: string(name='TopLevelDomain', position='Query'),
}

model AddCdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: AddCdnDomainResponseBody(name='body'),
}

async function addCdnDomain(request: AddCdnDomainRequest): AddCdnDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCdnDomain', 'POST', '/', 'json', false, 'json', request);
}

model AddFCTriggerRequest {
  eventMetaName: string(name='EventMetaName', position='Body'),
  eventMetaVersion: string(name='EventMetaVersion', position='Body'),
  functionARN?: string(name='FunctionARN', position='Body'),
  notes: string(name='Notes', position='Body'),
  ownerId?: long(name='OwnerId', position='Query'),
  roleARN: string(name='RoleARN', position='Body'),
  sourceARN: string(name='SourceARN', position='Body'),
  triggerARN: string(name='TriggerARN', position='Query'),
}

model AddFCTriggerResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddFCTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: AddFCTriggerResponseBody(name='body'),
}

async function addFCTrigger(request: AddFCTriggerRequest): AddFCTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddFCTrigger', 'POST', '/', 'json', true, 'form', request);
}

model BatchAddCdnDomainRequest {
  cdnType: string(name='CdnType', position='Query'),
  checkUrl?: string(name='CheckUrl', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  scope?: string(name='Scope', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  sources: string(name='Sources', position='Query'),
  topLevelDomain?: string(name='TopLevelDomain', position='Query'),
}

model BatchAddCdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchAddCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: BatchAddCdnDomainResponseBody(name='body'),
}

async function batchAddCdnDomain(request: BatchAddCdnDomainRequest): BatchAddCdnDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchAddCdnDomain', 'POST', '/', 'json', false, 'json', request);
}

model BatchDeleteCdnDomainConfigRequest {
  domainNames: string(name='DomainNames', position='Query'),
  functionNames: string(name='FunctionNames', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model BatchDeleteCdnDomainConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchDeleteCdnDomainConfigResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteCdnDomainConfigResponseBody(name='body'),
}

async function batchDeleteCdnDomainConfig(request: BatchDeleteCdnDomainConfigRequest): BatchDeleteCdnDomainConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchDeleteCdnDomainConfig', 'POST', '/', 'json', false, 'json', request);
}

model BatchSetCdnDomainConfigRequest {
  domainNames: string(name='DomainNames', position='Query'),
  functions: string(name='Functions', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model BatchSetCdnDomainConfigResponseBody = {
  domainConfigList?: {
    domainConfigModel?: [ 
    {
      configId?: long(name='ConfigId'),
      domainName?: string(name='DomainName'),
      functionName?: string(name='FunctionName'),
    }
  ](name='DomainConfigModel')
  }(name='DomainConfigList'),
  requestId?: string(name='RequestId'),
}

model BatchSetCdnDomainConfigResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSetCdnDomainConfigResponseBody(name='body'),
}

async function batchSetCdnDomainConfig(request: BatchSetCdnDomainConfigRequest): BatchSetCdnDomainConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchSetCdnDomainConfig', 'POST', '/', 'json', false, 'json', request);
}

model BatchSetCdnDomainServerCertificateRequest {
  certName?: string(name='CertName', position='Query'),
  certType?: string(name='CertType', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  forceSet?: string(name='ForceSet', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  region?: string(name='Region', position='Query'),
  SSLPri?: string(name='SSLPri', position='Query'),
  SSLProtocol: string(name='SSLProtocol', position='Query'),
  SSLPub?: string(name='SSLPub', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model BatchSetCdnDomainServerCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchSetCdnDomainServerCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSetCdnDomainServerCertificateResponseBody(name='body'),
}

async function batchSetCdnDomainServerCertificate(request: BatchSetCdnDomainServerCertificateRequest): BatchSetCdnDomainServerCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchSetCdnDomainServerCertificate', 'POST', '/', 'json', false, 'json', request);
}

model BatchStartCdnDomainRequest {
  domainNames: string(name='DomainNames', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model BatchStartCdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchStartCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: BatchStartCdnDomainResponseBody(name='body'),
}

async function batchStartCdnDomain(request: BatchStartCdnDomainRequest): BatchStartCdnDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchStartCdnDomain', 'POST', '/', 'json', false, 'json', request);
}

model BatchStopCdnDomainRequest {
  domainNames: string(name='DomainNames', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model BatchStopCdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchStopCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: BatchStopCdnDomainResponseBody(name='body'),
}

async function batchStopCdnDomain(request: BatchStopCdnDomainRequest): BatchStopCdnDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchStopCdnDomain', 'POST', '/', 'json', false, 'json', request);
}

model BatchUpdateCdnDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  sources?: string(name='Sources', position='Query'),
  topLevelDomain?: string(name='TopLevelDomain', position='Query'),
}

model BatchUpdateCdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchUpdateCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUpdateCdnDomainResponseBody(name='body'),
}

async function batchUpdateCdnDomain(request: BatchUpdateCdnDomainRequest): BatchUpdateCdnDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchUpdateCdnDomain', 'POST', '/', 'json', false, 'json', request);
}

model CreateCdnCertificateSigningRequestRequest {
  city?: string(name='City', position='Query'),
  commonName: string(name='CommonName', position='Query'),
  country?: string(name='Country', position='Query'),
  email?: string(name='Email', position='Query'),
  organization?: string(name='Organization', position='Query'),
  organizationUnit?: string(name='OrganizationUnit', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  SANs?: string(name='SANs', position='Query'),
  state?: string(name='State', position='Query'),
}

model CreateCdnCertificateSigningRequestResponseBody = {
  commonName?: string(name='CommonName'),
  csr?: string(name='Csr'),
  pubMd5?: string(name='PubMd5'),
  requestId?: string(name='RequestId'),
}

model CreateCdnCertificateSigningRequestResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCdnCertificateSigningRequestResponseBody(name='body'),
}

async function createCdnCertificateSigningRequest(request: CreateCdnCertificateSigningRequestRequest): CreateCdnCertificateSigningRequestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCdnCertificateSigningRequest', 'POST', '/', 'json', false, 'json', request);
}

model CreateCdnComputeDomainRequest {
  coverage?: string(name='Coverage', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model CreateCdnComputeDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateCdnComputeDomainResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCdnComputeDomainResponseBody(name='body'),
}

async function createCdnComputeDomain(request: CreateCdnComputeDomainRequest): CreateCdnComputeDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCdnComputeDomain', 'POST', '/', 'json', false, 'json', request);
}

model CreateCdnDeliverTaskRequest {
  deliver: string(name='Deliver', position='Body'),
  domainName?: string(name='DomainName', position='Body'),
  name: string(name='Name', position='Body'),
  ownerId?: long(name='OwnerId', position='Query'),
  reports: string(name='Reports', position='Body'),
  schedule: string(name='Schedule', position='Body'),
}

model CreateCdnDeliverTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateCdnDeliverTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCdnDeliverTaskResponseBody(name='body'),
}

async function createCdnDeliverTask(request: CreateCdnDeliverTaskRequest): CreateCdnDeliverTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCdnDeliverTask', 'POST', '/', 'json', true, 'form', request);
}

model CreateCdnSubTaskRequest {
  domainName?: string(name='DomainName', maxLength=7000, position='Body'),
  ownerId?: long(name='OwnerId', position='Query'),
  reportIds: string(name='ReportIds', position='Body'),
}

model CreateCdnSubTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateCdnSubTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCdnSubTaskResponseBody(name='body'),
}

async function createCdnSubTask(request: CreateCdnSubTaskRequest): CreateCdnSubTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCdnSubTask', 'POST', '/', 'json', true, 'form', request);
}

model CreateIllegalUrlExportTaskRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  taskName: string(name='TaskName', position='Query'),
  timePoint: string(name='TimePoint', position='Query'),
}

model CreateIllegalUrlExportTaskResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model CreateIllegalUrlExportTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIllegalUrlExportTaskResponseBody(name='body'),
}

async function createIllegalUrlExportTask(request: CreateIllegalUrlExportTaskRequest): CreateIllegalUrlExportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIllegalUrlExportTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateRealTimeLogDeliveryRequest {
  domain: string(name='Domain', position='Query'),
  logstore: string(name='Logstore', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  project: string(name='Project', position='Query'),
  region: string(name='Region', position='Query'),
}

model CreateRealTimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateRealTimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRealTimeLogDeliveryResponseBody(name='body'),
}

async function createRealTimeLogDelivery(request: CreateRealTimeLogDeliveryRequest): CreateRealTimeLogDeliveryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRealTimeLogDelivery', 'GET', '/', 'json', false, 'json', request);
}

model CreateUsageDetailDataExportTaskRequest {
  domainNames?: string(name='DomainNames', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  group?: string(name='Group', position='Query'),
  language?: string(name='Language', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  taskName?: string(name='TaskName', position='Query'),
  type: string(name='Type', position='Query'),
}

model CreateUsageDetailDataExportTaskResponseBody = {
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  taskId?: string(name='TaskId'),
}

model CreateUsageDetailDataExportTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUsageDetailDataExportTaskResponseBody(name='body'),
}

async function createUsageDetailDataExportTask(request: CreateUsageDetailDataExportTaskRequest): CreateUsageDetailDataExportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUsageDetailDataExportTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateUserUsageDataExportTaskRequest {
  endTime: string(name='EndTime', position='Query'),
  language?: string(name='Language', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  taskName?: string(name='TaskName', position='Query'),
}

model CreateUserUsageDataExportTaskResponseBody = {
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  taskId?: string(name='TaskId'),
}

model CreateUserUsageDataExportTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserUsageDataExportTaskResponseBody(name='body'),
}

async function createUserUsageDataExportTask(request: CreateUserUsageDataExportTaskRequest): CreateUserUsageDataExportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUserUsageDataExportTask', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCdnDeliverTaskRequest {
  deliverId: long(name='DeliverId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteCdnDeliverTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCdnDeliverTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCdnDeliverTaskResponseBody(name='body'),
}

async function deleteCdnDeliverTask(request: DeleteCdnDeliverTaskRequest): DeleteCdnDeliverTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCdnDeliverTask', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCdnDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteCdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCdnDomainResponseBody(name='body'),
}

async function deleteCdnDomain(request: DeleteCdnDomainRequest): DeleteCdnDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCdnDomain', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCdnSubTaskRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteCdnSubTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCdnSubTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCdnSubTaskResponseBody(name='body'),
}

async function deleteCdnSubTask(request: DeleteCdnSubTaskRequest): DeleteCdnSubTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCdnSubTask', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFCTriggerRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  triggerARN: string(name='TriggerARN', position='Query'),
}

model DeleteFCTriggerResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteFCTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFCTriggerResponseBody(name='body'),
}

async function deleteFCTrigger(request: DeleteFCTriggerRequest): DeleteFCTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFCTrigger', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRealtimeLogDeliveryRequest {
  domain: string(name='Domain', position='Query'),
  logstore: string(name='Logstore', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  project: string(name='Project', position='Query'),
  region: string(name='Region', position='Query'),
}

model DeleteRealtimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRealtimeLogDeliveryResponseBody(name='body'),
}

async function deleteRealtimeLogDelivery(request: DeleteRealtimeLogDeliveryRequest): DeleteRealtimeLogDeliveryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRealtimeLogDelivery', 'GET', '/', 'json', false, 'json', request);
}

model DeleteSpecificConfigRequest {
  configId: string(name='ConfigId', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteSpecificConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSpecificConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSpecificConfigResponseBody(name='body'),
}

async function deleteSpecificConfig(request: DeleteSpecificConfigRequest): DeleteSpecificConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSpecificConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSpecificStagingConfigRequest {
  configId: string(name='ConfigId', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteSpecificStagingConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSpecificStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSpecificStagingConfigResponseBody(name='body'),
}

async function deleteSpecificStagingConfig(request: DeleteSpecificStagingConfigRequest): DeleteSpecificStagingConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSpecificStagingConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUsageDetailDataExportTaskRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  taskId: string(name='TaskId', position='Query'),
}

model DeleteUsageDetailDataExportTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteUsageDetailDataExportTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUsageDetailDataExportTaskResponseBody(name='body'),
}

async function deleteUsageDetailDataExportTask(request: DeleteUsageDetailDataExportTaskRequest): DeleteUsageDetailDataExportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUsageDetailDataExportTask', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserUsageDataExportTaskRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  taskId: string(name='TaskId', position='Query'),
}

model DeleteUserUsageDataExportTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteUserUsageDataExportTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserUsageDataExportTaskResponseBody(name='body'),
}

async function deleteUserUsageDataExportTask(request: DeleteUserUsageDataExportTaskRequest): DeleteUserUsageDataExportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserUsageDataExportTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeActiveVersionOfConfigGroupRequest {
  configGroupId: string(name='ConfigGroupId', position='Query'),
  env?: string(name='Env', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeActiveVersionOfConfigGroupResponseBody = {
  baseVersionId?: string(name='BaseVersionId'),
  configGroupId?: string(name='ConfigGroupId'),
  createTime?: string(name='CreateTime'),
  description?: string(name='Description'),
  operator?: string(name='Operator'),
  requestId?: string(name='RequestId'),
  seqId?: long(name='SeqId'),
  status?: string(name='Status'),
  updateTime?: string(name='UpdateTime'),
  versionId?: string(name='VersionId'),
}

model DescribeActiveVersionOfConfigGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeActiveVersionOfConfigGroupResponseBody(name='body'),
}

async function describeActiveVersionOfConfigGroup(request: DescribeActiveVersionOfConfigGroupRequest): DescribeActiveVersionOfConfigGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeActiveVersionOfConfigGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBlockedRegionsRequest {
  language: string(name='Language', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeBlockedRegionsResponseBody = {
  infoList?: {
    infoItem?: [ 
    {
      continent?: string(name='Continent'),
      countriesAndRegions?: string(name='CountriesAndRegions'),
      countriesAndRegionsName?: string(name='CountriesAndRegionsName'),
    }
  ](name='InfoItem')
  }(name='InfoList'),
  requestId?: string(name='RequestId'),
}

model DescribeBlockedRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBlockedRegionsResponseBody(name='body'),
}

async function describeBlockedRegions(request: DescribeBlockedRegionsRequest): DescribeBlockedRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBlockedRegions', 'GET', '/', 'json', false, 'json', request);
}

model DescribeCdnCertificateDetailRequest {
  certName: string(name='CertName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeCdnCertificateDetailResponseBody = {
  cert?: string(name='Cert'),
  certId?: long(name='CertId'),
  certName?: string(name='CertName'),
  key?: string(name='Key'),
  requestId?: string(name='RequestId'),
}

model DescribeCdnCertificateDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnCertificateDetailResponseBody(name='body'),
}

async function describeCdnCertificateDetail(request: DescribeCdnCertificateDetailRequest): DescribeCdnCertificateDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCdnCertificateDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCdnCertificateListRequest {
  domainName?: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeCdnCertificateListResponseBody = {
  certificateListModel?: {
    certList?: {
      cert?: [ 
      {
        certId?: long(name='CertId'),
        certName?: string(name='CertName'),
        common?: string(name='Common'),
        fingerprint?: string(name='Fingerprint'),
        issuer?: string(name='Issuer'),
        lastTime?: long(name='LastTime'),
      }
    ](name='Cert')
    }(name='CertList'),
    count?: int32(name='Count'),
  }(name='CertificateListModel'),
  requestId?: string(name='RequestId'),
}

model DescribeCdnCertificateListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnCertificateListResponseBody(name='body'),
}

async function describeCdnCertificateList(request: DescribeCdnCertificateListRequest): DescribeCdnCertificateListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCdnCertificateList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCdnComputeUserDomainRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=500, position='Query'),
}

model DescribeCdnComputeUserDomainResponseBody = {
  domains?: {
    pageData?: [ 
    {
      cname?: string(name='Cname'),
      domainName?: string(name='DomainName'),
      domainStatus?: string(name='DomainStatus'),
      gmtCreated?: string(name='GmtCreated'),
      gmtModified?: string(name='GmtModified'),
    }
  ](name='PageData')
  }(name='Domains'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeCdnComputeUserDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnComputeUserDomainResponseBody(name='body'),
}

async function describeCdnComputeUserDomain(request: DescribeCdnComputeUserDomainRequest): DescribeCdnComputeUserDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCdnComputeUserDomain', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCdnDeletedDomainsRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=100000, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=500, position='Query'),
}

model DescribeCdnDeletedDomainsResponseBody = {
  domains?: {
    pageData?: [ 
    {
      domainName?: string(name='DomainName'),
      gmtModified?: string(name='GmtModified'),
    }
  ](name='PageData')
  }(name='Domains'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeCdnDeletedDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnDeletedDomainsResponseBody(name='body'),
}

async function describeCdnDeletedDomains(request: DescribeCdnDeletedDomainsRequest): DescribeCdnDeletedDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCdnDeletedDomains', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCdnDeliverListRequest {
  deliverId?: long(name='DeliverId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeCdnDeliverListResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeCdnDeliverListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnDeliverListResponseBody(name='body'),
}

async function describeCdnDeliverList(request: DescribeCdnDeliverListRequest): DescribeCdnDeliverListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCdnDeliverList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCdnDomainByCertificateRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  SSLPub: string(name='SSLPub', position='Query'),
}

model DescribeCdnDomainByCertificateResponseBody = {
  certInfos?: {
    certInfo?: [ 
    {
      certCaIsLegacy?: string(name='CertCaIsLegacy'),
      certExpireTime?: string(name='CertExpireTime'),
      certExpired?: string(name='CertExpired'),
      certStartTime?: string(name='CertStartTime'),
      certSubjectCommonName?: string(name='CertSubjectCommonName'),
      certType?: string(name='CertType'),
      domainList?: string(name='DomainList'),
      domainNames?: string(name='DomainNames'),
      issuer?: string(name='Issuer'),
    }
  ](name='CertInfo')
  }(name='CertInfos'),
  requestId?: string(name='RequestId'),
}

model DescribeCdnDomainByCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnDomainByCertificateResponseBody(name='body'),
}

async function describeCdnDomainByCertificate(request: DescribeCdnDomainByCertificateRequest): DescribeCdnDomainByCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCdnDomainByCertificate', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCdnDomainConfigsRequest {
  configId?: string(name='ConfigId', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  functionNames?: string(name='FunctionNames', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeCdnDomainConfigsResponseBody = {
  domainConfigs?: {
    domainConfig?: [ 
    {
      configId?: string(name='ConfigId'),
      functionArgs?: {
        functionArg?: [ 
        {
          argName?: string(name='ArgName'),
          argValue?: string(name='ArgValue'),
        }
      ](name='FunctionArg')
      }(name='FunctionArgs'),
      functionName?: string(name='FunctionName'),
      status?: string(name='Status'),
    }
  ](name='DomainConfig')
  }(name='DomainConfigs'),
  requestId?: string(name='RequestId'),
}

model DescribeCdnDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnDomainConfigsResponseBody(name='body'),
}

async function describeCdnDomainConfigs(request: DescribeCdnDomainConfigsRequest): DescribeCdnDomainConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCdnDomainConfigs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCdnDomainDetailRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeCdnDomainDetailResponseBody = {
  getDomainDetailModel?: {
    cdnType?: string(name='CdnType'),
    cname?: string(name='Cname'),
    description?: string(name='Description'),
    domainName?: string(name='DomainName'),
    domainStatus?: string(name='DomainStatus'),
    gmtCreated?: string(name='GmtCreated'),
    gmtModified?: string(name='GmtModified'),
    httpsCname?: string(name='HttpsCname'),
    resourceGroupId?: string(name='ResourceGroupId'),
    scope?: string(name='Scope'),
    serverCertificateStatus?: string(name='ServerCertificateStatus'),
    sourceModels?: {
      sourceModel?: [ 
      {
        content?: string(name='Content'),
        enabled?: string(name='Enabled'),
        port?: int32(name='Port'),
        priority?: string(name='Priority'),
        type?: string(name='Type'),
        weight?: string(name='Weight'),
      }
    ](name='SourceModel')
    }(name='SourceModels'),
  }(name='GetDomainDetailModel'),
  requestId?: string(name='RequestId'),
}

model DescribeCdnDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnDomainDetailResponseBody(name='body'),
}

async function describeCdnDomainDetail(request: DescribeCdnDomainDetailRequest): DescribeCdnDomainDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCdnDomainDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCdnDomainLogsRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: long(name='PageNumber', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeCdnDomainLogsResponseBody = {
  domainLogDetails?: {
    domainLogDetail?: [ 
    {
      domainName?: string(name='DomainName'),
      logCount?: long(name='LogCount'),
      logInfos?: {
        logInfoDetail?: [ 
        {
          endTime?: string(name='EndTime'),
          logName?: string(name='LogName'),
          logPath?: string(name='LogPath'),
          logSize?: long(name='LogSize'),
          startTime?: string(name='StartTime'),
        }
      ](name='LogInfoDetail')
      }(name='LogInfos'),
      pageInfos?: {
        pageIndex?: long(name='PageIndex'),
        pageSize?: long(name='PageSize'),
        total?: long(name='Total'),
      }(name='PageInfos'),
    }
  ](name='DomainLogDetail')
  }(name='DomainLogDetails'),
  requestId?: string(name='RequestId'),
}

model DescribeCdnDomainLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnDomainLogsResponseBody(name='body'),
}

async function describeCdnDomainLogs(request: DescribeCdnDomainLogsRequest): DescribeCdnDomainLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCdnDomainLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCdnDomainStagingConfigRequest {
  domainName: string(name='DomainName', position='Query'),
  functionNames: string(name='FunctionNames', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeCdnDomainStagingConfigResponseBody = {
  domainConfigs?: [ 
    {
      configId?: string(name='ConfigId'),
      functionArgs?: [ 
        {
          argName?: string(name='ArgName'),
          argValue?: string(name='ArgValue'),
        }
      ](name='FunctionArgs'),
      functionName?: string(name='FunctionName'),
      status?: string(name='Status'),
    }
  ](name='DomainConfigs'),
  requestId?: string(name='RequestId'),
}

model DescribeCdnDomainStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnDomainStagingConfigResponseBody(name='body'),
}

async function describeCdnDomainStagingConfig(request: DescribeCdnDomainStagingConfigRequest): DescribeCdnDomainStagingConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCdnDomainStagingConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCdnHttpsDomainListRequest {
  keyword?: string(name='Keyword', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model DescribeCdnHttpsDomainListResponseBody = {
  certInfos?: {
    certInfo?: [ 
    {
      certCommonName?: string(name='CertCommonName'),
      certExpireTime?: string(name='CertExpireTime'),
      certName?: string(name='CertName'),
      certStartTime?: string(name='CertStartTime'),
      certStatus?: string(name='CertStatus'),
      certType?: string(name='CertType'),
      certUpdateTime?: string(name='CertUpdateTime'),
      domainName?: string(name='DomainName'),
    }
  ](name='CertInfo')
  }(name='CertInfos'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCdnHttpsDomainListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnHttpsDomainListResponseBody(name='body'),
}

async function describeCdnHttpsDomainList(request: DescribeCdnHttpsDomainListRequest): DescribeCdnHttpsDomainListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCdnHttpsDomainList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCdnRegionAndIspRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeCdnRegionAndIspResponseBody = {
  isps?: {
    isp?: [ 
    {
      nameEn?: string(name='NameEn'),
      nameZh?: string(name='NameZh'),
    }
  ](name='Isp')
  }(name='Isps'),
  regions?: {
    region?: [ 
    {
      nameEn?: string(name='NameEn'),
      nameZh?: string(name='NameZh'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeCdnRegionAndIspResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnRegionAndIspResponseBody(name='body'),
}

async function describeCdnRegionAndIsp(request: DescribeCdnRegionAndIspRequest): DescribeCdnRegionAndIspResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCdnRegionAndIsp', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCdnReportRequest {
  area?: string(name='Area', position='Query'),
  domainName?: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  httpCode?: string(name='HttpCode', position='Query'),
  isOverseas?: string(name='IsOverseas', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  reportId: long(name='ReportId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeCdnReportResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeCdnReportResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnReportResponseBody(name='body'),
}

async function describeCdnReport(request: DescribeCdnReportRequest): DescribeCdnReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCdnReport', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCdnReportListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  reportId?: long(name='ReportId', position='Query'),
}

model DescribeCdnReportListResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeCdnReportListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnReportListResponseBody(name='body'),
}

async function describeCdnReportList(request: DescribeCdnReportListRequest): DescribeCdnReportListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCdnReportList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCdnSMCertificateDetailRequest {
  certIdentifier: string(name='CertIdentifier', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeCdnSMCertificateDetailResponseBody = {
  certExpireTime?: string(name='CertExpireTime'),
  certIdentifier?: string(name='CertIdentifier'),
  certName?: string(name='CertName'),
  certOrg?: string(name='CertOrg'),
  commonName?: string(name='CommonName'),
  encryptCertificate?: string(name='EncryptCertificate'),
  requestId?: string(name='RequestId'),
  sans?: string(name='Sans'),
  signCertificate?: string(name='SignCertificate'),
}

model DescribeCdnSMCertificateDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnSMCertificateDetailResponseBody(name='body'),
}

async function describeCdnSMCertificateDetail(request: DescribeCdnSMCertificateDetailRequest): DescribeCdnSMCertificateDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCdnSMCertificateDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCdnSMCertificateListRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeCdnSMCertificateListResponseBody = {
  certificateListModel?: {
    certList?: {
      cert?: [ 
      {
        certIdentifier?: string(name='CertIdentifier'),
        certName?: string(name='CertName'),
        common?: string(name='Common'),
        issuer?: string(name='Issuer'),
      }
    ](name='Cert')
    }(name='CertList'),
    count?: int32(name='Count'),
  }(name='CertificateListModel'),
  requestId?: string(name='RequestId'),
}

model DescribeCdnSMCertificateListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnSMCertificateListResponseBody(name='body'),
}

async function describeCdnSMCertificateList(request: DescribeCdnSMCertificateListRequest): DescribeCdnSMCertificateListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCdnSMCertificateList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCdnServiceRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeCdnServiceResponseBody = {
  changingAffectTime?: string(name='ChangingAffectTime'),
  changingChargeType?: string(name='ChangingChargeType'),
  instanceId?: string(name='InstanceId'),
  internetChargeType?: string(name='InternetChargeType'),
  openingTime?: string(name='OpeningTime'),
  operationLocks?: {
    lockReason?: [ 
    {
      lockReason?: string(name='LockReason'),
    }
  ](name='LockReason')
  }(name='OperationLocks'),
  requestId?: string(name='RequestId'),
}

model DescribeCdnServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnServiceResponseBody(name='body'),
}

async function describeCdnService(request: DescribeCdnServiceRequest): DescribeCdnServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCdnService', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCdnSubListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeCdnSubListResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeCdnSubListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnSubListResponseBody(name='body'),
}

async function describeCdnSubList(request: DescribeCdnSubListRequest): DescribeCdnSubListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCdnSubList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCdnUserBillHistoryRequest {
  endTime: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeCdnUserBillHistoryResponseBody = {
  billHistoryData?: {
    billHistoryDataItem?: [ 
    {
      billTime?: string(name='BillTime'),
      billType?: string(name='BillType'),
      billingData?: {
        billingDataItem?: [ 
        {
          bandwidth?: float(name='Bandwidth'),
          cdnRegion?: string(name='CdnRegion'),
          chargeType?: string(name='ChargeType'),
          count?: float(name='Count'),
          flow?: float(name='Flow'),
        }
      ](name='BillingDataItem')
      }(name='BillingData'),
      dimension?: string(name='Dimension'),
    }
  ](name='BillHistoryDataItem')
  }(name='BillHistoryData'),
  requestId?: string(name='RequestId'),
}

model DescribeCdnUserBillHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnUserBillHistoryResponseBody(name='body'),
}

async function describeCdnUserBillHistory(request: DescribeCdnUserBillHistoryRequest): DescribeCdnUserBillHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCdnUserBillHistory', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCdnUserBillPredictionRequest {
  area?: string(name='Area', position='Query'),
  dimension: string(name='Dimension', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeCdnUserBillPredictionResponseBody = {
  billPredictionData?: {
    billPredictionDataItem?: [ 
    {
      area?: string(name='Area'),
      timeStp?: string(name='TimeStp'),
      value?: float(name='Value'),
    }
  ](name='BillPredictionDataItem')
  }(name='BillPredictionData'),
  billType?: string(name='BillType'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeCdnUserBillPredictionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnUserBillPredictionResponseBody(name='body'),
}

async function describeCdnUserBillPrediction(request: DescribeCdnUserBillPredictionRequest): DescribeCdnUserBillPredictionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCdnUserBillPrediction', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCdnUserBillTypeRequest {
  endTime: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeCdnUserBillTypeResponseBody = {
  billTypeData?: {
    billTypeDataItem?: [ 
    {
      billType?: string(name='BillType'),
      billingCycle?: string(name='BillingCycle'),
      dimension?: string(name='Dimension'),
      endTime?: string(name='EndTime'),
      product?: string(name='Product'),
      startTime?: string(name='StartTime'),
    }
  ](name='BillTypeDataItem')
  }(name='BillTypeData'),
  requestId?: string(name='RequestId'),
}

model DescribeCdnUserBillTypeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnUserBillTypeResponseBody(name='body'),
}

async function describeCdnUserBillType(request: DescribeCdnUserBillTypeRequest): DescribeCdnUserBillTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCdnUserBillType', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCdnUserConfigsRequest {
  functionName: string(name='FunctionName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeCdnUserConfigsResponseBody = {
  configs?: [ 
    {
      argName?: string(name='ArgName'),
      argValue?: string(name='ArgValue'),
      functionName?: string(name='FunctionName'),
    }
  ](name='Configs'),
  requestId?: string(name='RequestId'),
}

model DescribeCdnUserConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnUserConfigsResponseBody(name='body'),
}

async function describeCdnUserConfigs(request: DescribeCdnUserConfigsRequest): DescribeCdnUserConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCdnUserConfigs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCdnUserDomainsByFuncRequest {
  funcId: int32(name='FuncId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=500, position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeCdnUserDomainsByFuncResponseBody = {
  domains?: {
    pageData?: [ 
    {
      cdnType?: string(name='CdnType'),
      cname?: string(name='Cname'),
      description?: string(name='Description'),
      domainName?: string(name='DomainName'),
      domainStatus?: string(name='DomainStatus'),
      gmtCreated?: string(name='GmtCreated'),
      gmtModified?: string(name='GmtModified'),
      resourceGroupId?: string(name='ResourceGroupId'),
      sources?: {
        source?: [ 
        {
          content?: string(name='Content'),
          port?: int32(name='Port'),
          priority?: string(name='Priority'),
          type?: string(name='Type'),
          weight?: string(name='Weight'),
        }
      ](name='Source')
      }(name='Sources'),
      sslProtocol?: string(name='SslProtocol'),
    }
  ](name='PageData')
  }(name='Domains'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeCdnUserDomainsByFuncResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnUserDomainsByFuncResponseBody(name='body'),
}

async function describeCdnUserDomainsByFunc(request: DescribeCdnUserDomainsByFuncRequest): DescribeCdnUserDomainsByFuncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCdnUserDomainsByFunc', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCdnUserQuotaRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeCdnUserQuotaResponseBody = {
  blockQuota?: int32(name='BlockQuota'),
  blockRemain?: int32(name='BlockRemain'),
  domainQuota?: int32(name='DomainQuota'),
  preloadQuota?: int32(name='PreloadQuota'),
  preloadRemain?: int32(name='PreloadRemain'),
  refreshDirQuota?: int32(name='RefreshDirQuota'),
  refreshDirRemain?: int32(name='RefreshDirRemain'),
  refreshUrlQuota?: int32(name='RefreshUrlQuota'),
  refreshUrlRemain?: int32(name='RefreshUrlRemain'),
  requestId?: string(name='RequestId'),
}

model DescribeCdnUserQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnUserQuotaResponseBody(name='body'),
}

async function describeCdnUserQuota(request: DescribeCdnUserQuotaRequest): DescribeCdnUserQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCdnUserQuota', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCdnUserResourcePackageRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  status?: string(name='Status', position='Query'),
}

model DescribeCdnUserResourcePackageResponseBody = {
  requestId?: string(name='RequestId'),
  resourcePackageInfos?: {
    resourcePackageInfo?: [ 
    {
      commodityCode?: string(name='CommodityCode'),
      currCapacity?: string(name='CurrCapacity'),
      displayName?: string(name='DisplayName'),
      endTime?: string(name='EndTime'),
      initCapacity?: string(name='InitCapacity'),
      instanceId?: string(name='InstanceId'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
      templateName?: string(name='TemplateName'),
    }
  ](name='ResourcePackageInfo')
  }(name='ResourcePackageInfos'),
}

model DescribeCdnUserResourcePackageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnUserResourcePackageResponseBody(name='body'),
}

async function describeCdnUserResourcePackage(request: DescribeCdnUserResourcePackageRequest): DescribeCdnUserResourcePackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCdnUserResourcePackage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCdnWafDomainRequest {
  domainName?: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeCdnWafDomainResponseBody = {
  outPutDomains?: [ 
    {
      aclStatus?: string(name='AclStatus'),
      ccStatus?: string(name='CcStatus'),
      domain?: string(name='Domain'),
      status?: string(name='Status'),
      wafStatus?: string(name='WafStatus'),
    }
  ](name='OutPutDomains'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCdnWafDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCdnWafDomainResponseBody(name='body'),
}

async function describeCdnWafDomain(request: DescribeCdnWafDomainRequest): DescribeCdnWafDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCdnWafDomain', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCertificateInfoByIDRequest {
  certId: string(name='CertId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeCertificateInfoByIDResponseBody = {
  certInfos?: {
    certInfo?: [ 
    {
      certExpireTime?: string(name='CertExpireTime'),
      certId?: string(name='CertId'),
      certName?: string(name='CertName'),
      certType?: string(name='CertType'),
      createTime?: string(name='CreateTime'),
      domainList?: string(name='DomainList'),
      httpsCrt?: string(name='HttpsCrt'),
    }
  ](name='CertInfo')
  }(name='CertInfos'),
  requestId?: string(name='RequestId'),
}

model DescribeCertificateInfoByIDResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCertificateInfoByIDResponseBody(name='body'),
}

async function describeCertificateInfoByID(request: DescribeCertificateInfoByIDRequest): DescribeCertificateInfoByIDResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCertificateInfoByID', 'GET', '/', 'json', false, 'json', request);
}

model DescribeConfigGroupDetailRequest {
  configGroupId?: string(name='ConfigGroupId', position='Query'),
  configGroupName?: string(name='ConfigGroupName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeConfigGroupDetailResponseBody = {
  bizName?: string(name='BizName'),
  configGroupId?: string(name='ConfigGroupId'),
  configGroupName?: string(name='ConfigGroupName'),
  createTime?: string(name='CreateTime'),
  description?: string(name='Description'),
  requestId?: string(name='RequestId'),
  updateTime?: string(name='UpdateTime'),
}

model DescribeConfigGroupDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConfigGroupDetailResponseBody(name='body'),
}

async function describeConfigGroupDetail(request: DescribeConfigGroupDetailRequest): DescribeConfigGroupDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConfigGroupDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeConfigOfVersionRequest {
  functionId?: int32(name='FunctionId', position='Query'),
  functionName?: string(name='FunctionName', position='Query'),
  groupId?: long(name='GroupId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  versionId: string(name='VersionId', position='Query'),
}

model DescribeConfigOfVersionResponseBody = {
  requestId?: string(name='RequestId'),
  versionConfigs?: {
    versionConfig?: [ 
    {
      configId?: string(name='ConfigId'),
      functionArgs?: {
        functionArg?: [ 
        {
          argName?: string(name='ArgName'),
          argValue?: string(name='ArgValue'),
        }
      ](name='FunctionArg')
      }(name='FunctionArgs'),
      functionName?: string(name='FunctionName'),
      status?: string(name='Status'),
    }
  ](name='VersionConfig')
  }(name='VersionConfigs'),
}

model DescribeConfigOfVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConfigOfVersionResponseBody(name='body'),
}

async function describeConfigOfVersion(request: DescribeConfigOfVersionRequest): DescribeConfigOfVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConfigOfVersion', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCustomLogConfigRequest {
  configId: string(name='ConfigId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeCustomLogConfigResponseBody = {
  remark?: string(name='Remark'),
  requestId?: string(name='RequestId'),
  sample?: string(name='Sample'),
  tag?: string(name='Tag'),
}

model DescribeCustomLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCustomLogConfigResponseBody(name='body'),
}

async function describeCustomLogConfig(request: DescribeCustomLogConfigRequest): DescribeCustomLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomLogConfig', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDomainAverageResponseTimeRequest {
  domainName?: string(name='DomainName', position='Query'),
  domainType?: string(name='DomainType', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  timeMerge?: string(name='TimeMerge', position='Query'),
}

model DescribeDomainAverageResponseTimeResponseBody = {
  avgRTPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='AvgRTPerInterval'),
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDomainAverageResponseTimeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainAverageResponseTimeResponseBody(name='body'),
}

async function describeDomainAverageResponseTime(request: DescribeDomainAverageResponseTimeRequest): DescribeDomainAverageResponseTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainAverageResponseTime', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainBpsDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainBpsDataResponseBody = {
  bpsDataPerInterval?: {
    dataModule?: [ 
    {
      domesticValue?: string(name='DomesticValue'),
      httpsDomesticValue?: string(name='HttpsDomesticValue'),
      httpsOverseasValue?: string(name='HttpsOverseasValue'),
      httpsValue?: string(name='HttpsValue'),
      overseasValue?: string(name='OverseasValue'),
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='BpsDataPerInterval'),
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDomainBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainBpsDataResponseBody(name='body'),
}

async function describeDomainBpsData(request: DescribeDomainBpsDataRequest): DescribeDomainBpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainBpsData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainBpsDataByLayerRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  layer?: string(name='Layer', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainBpsDataByLayerResponseBody = {
  bpsDataInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      trafficValue?: string(name='TrafficValue'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='BpsDataInterval'),
  dataInterval?: string(name='DataInterval'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainBpsDataByLayerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainBpsDataByLayerResponseBody(name='body'),
}

async function describeDomainBpsDataByLayer(request: DescribeDomainBpsDataByLayerRequest): DescribeDomainBpsDataByLayerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainBpsDataByLayer', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainBpsDataByTimeStampRequest {
  domainName: string(name='DomainName', position='Query'),
  ispNames: string(name='IspNames', position='Query'),
  locationNames: string(name='LocationNames', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  timePoint: string(name='TimePoint', position='Query'),
}

model DescribeDomainBpsDataByTimeStampResponseBody = {
  bpsDataList?: {
    bpsDataModel?: [ 
    {
      bps?: long(name='Bps'),
      ispName?: string(name='IspName'),
      locationName?: string(name='LocationName'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='BpsDataModel')
  }(name='BpsDataList'),
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
  timeStamp?: string(name='TimeStamp'),
}

model DescribeDomainBpsDataByTimeStampResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainBpsDataByTimeStampResponseBody(name='body'),
}

async function describeDomainBpsDataByTimeStamp(request: DescribeDomainBpsDataByTimeStampRequest): DescribeDomainBpsDataByTimeStampResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainBpsDataByTimeStamp', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainCcActivityLogRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: long(name='PageNumber', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  ruleName?: string(name='RuleName', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  triggerObject?: string(name='TriggerObject', position='Query'),
  value?: string(name='Value', position='Query'),
}

model DescribeDomainCcActivityLogResponseBody = {
  activityLog?: [ 
    {
      action?: string(name='Action'),
      domainName?: string(name='DomainName'),
      ruleName?: string(name='RuleName'),
      timeStamp?: string(name='TimeStamp'),
      triggerObject?: string(name='TriggerObject'),
      ttl?: long(name='Ttl'),
      value?: string(name='Value'),
    }
  ](name='ActivityLog'),
  pageIndex?: long(name='PageIndex'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model DescribeDomainCcActivityLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainCcActivityLogResponseBody(name='body'),
}

async function describeDomainCcActivityLog(request: DescribeDomainCcActivityLogRequest): DescribeDomainCcActivityLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainCcActivityLog', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainCertificateInfoRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeDomainCertificateInfoResponseBody = {
  certInfos?: {
    certInfo?: [ 
    {
      certDomainName?: string(name='CertDomainName'),
      certExpireTime?: string(name='CertExpireTime'),
      certLife?: string(name='CertLife'),
      certName?: string(name='CertName'),
      certOrg?: string(name='CertOrg'),
      certStartTime?: string(name='CertStartTime'),
      certType?: string(name='CertType'),
      certUpdateTime?: string(name='CertUpdateTime'),
      domainCnameStatus?: string(name='DomainCnameStatus'),
      domainName?: string(name='DomainName'),
      serverCertificate?: string(name='ServerCertificate'),
      serverCertificateStatus?: string(name='ServerCertificateStatus'),
      status?: string(name='Status'),
    }
  ](name='CertInfo')
  }(name='CertInfos'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainCertificateInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainCertificateInfoResponseBody(name='body'),
}

async function describeDomainCertificateInfo(request: DescribeDomainCertificateInfoRequest): DescribeDomainCertificateInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainCertificateInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainCustomLogConfigRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeDomainCustomLogConfigResponseBody = {
  configId?: string(name='ConfigId'),
  remark?: string(name='Remark'),
  requestId?: string(name='RequestId'),
  sample?: string(name='Sample'),
  tag?: string(name='Tag'),
}

model DescribeDomainCustomLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainCustomLogConfigResponseBody(name='body'),
}

async function describeDomainCustomLogConfig(request: DescribeDomainCustomLogConfigRequest): DescribeDomainCustomLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainCustomLogConfig', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDomainDetailDataByLayerRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  field: string(name='Field', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  layer?: string(name='Layer', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeDomainDetailDataByLayerResponseBody = {
  data?: {
    dataModule?: [ 
    {
      acc?: long(name='Acc'),
      bps?: float(name='Bps'),
      domainName?: string(name='DomainName'),
      httpCode?: string(name='HttpCode'),
      ipv6Acc?: long(name='Ipv6Acc'),
      ipv6Bps?: float(name='Ipv6Bps'),
      ipv6Qps?: float(name='Ipv6Qps'),
      ipv6Traf?: long(name='Ipv6Traf'),
      qps?: float(name='Qps'),
      timeStamp?: string(name='TimeStamp'),
      traf?: long(name='Traf'),
    }
  ](name='DataModule')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainDetailDataByLayerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainDetailDataByLayerResponseBody(name='body'),
}

async function describeDomainDetailDataByLayer(request: DescribeDomainDetailDataByLayerRequest): DescribeDomainDetailDataByLayerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainDetailDataByLayer', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDomainFileSizeProportionDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainFileSizeProportionDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  fileSizeProportionDataInterval?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: {
        fileSizeProportionData?: [ 
        {
          fileSize?: string(name='FileSize'),
          proportion?: string(name='Proportion'),
        }
      ](name='FileSizeProportionData')
      }(name='Value'),
    }
  ](name='UsageData')
  }(name='FileSizeProportionDataInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDomainFileSizeProportionDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainFileSizeProportionDataResponseBody(name='body'),
}

async function describeDomainFileSizeProportionData(request: DescribeDomainFileSizeProportionDataRequest): DescribeDomainFileSizeProportionDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainFileSizeProportionData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainHitRateDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainHitRateDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  hitRateInterval?: {
    dataModule?: [ 
    {
      httpsValue?: string(name='HttpsValue'),
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='HitRateInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDomainHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainHitRateDataResponseBody(name='body'),
}

async function describeDomainHitRateData(request: DescribeDomainHitRateDataRequest): DescribeDomainHitRateDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainHitRateData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainHttpCodeDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainHttpCodeDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  httpCodeData?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: {
        codeProportionData?: [ 
        {
          code?: string(name='Code'),
          count?: string(name='Count'),
          proportion?: string(name='Proportion'),
        }
      ](name='CodeProportionData')
      }(name='Value'),
    }
  ](name='UsageData')
  }(name='HttpCodeData'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDomainHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainHttpCodeDataResponseBody(name='body'),
}

async function describeDomainHttpCodeData(request: DescribeDomainHttpCodeDataRequest): DescribeDomainHttpCodeDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainHttpCodeData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainHttpCodeDataByLayerRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  layer?: string(name='Layer', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainHttpCodeDataByLayerResponseBody = {
  dataInterval?: string(name='DataInterval'),
  httpCodeDataInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      totalValue?: string(name='TotalValue'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='HttpCodeDataInterval'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainHttpCodeDataByLayerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainHttpCodeDataByLayerResponseBody(name='body'),
}

async function describeDomainHttpCodeDataByLayer(request: DescribeDomainHttpCodeDataByLayerRequest): DescribeDomainHttpCodeDataByLayerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainHttpCodeDataByLayer', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainISPDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainISPDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  value?: {
    ISPProportionData?: [ 
    {
      avgObjectSize?: string(name='AvgObjectSize'),
      avgResponseRate?: string(name='AvgResponseRate'),
      avgResponseTime?: string(name='AvgResponseTime'),
      bps?: string(name='Bps'),
      bytesProportion?: string(name='BytesProportion'),
      ISP?: string(name='ISP'),
      ispEname?: string(name='IspEname'),
      proportion?: string(name='Proportion'),
      qps?: string(name='Qps'),
      reqErrRate?: string(name='ReqErrRate'),
      totalBytes?: string(name='TotalBytes'),
      totalQuery?: string(name='TotalQuery'),
    }
  ](name='ISPProportionData')
  }(name='Value'),
}

model DescribeDomainISPDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainISPDataResponseBody(name='body'),
}

async function describeDomainISPData(request: DescribeDomainISPDataRequest): DescribeDomainISPDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainISPData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainMax95BpsDataRequest {
  cycle?: string(name='Cycle', position='Query'),
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  timePoint?: string(name='TimePoint', position='Query'),
}

model DescribeDomainMax95BpsDataResponseBody = {
  domainName?: string(name='DomainName'),
  domesticMax95Bps?: string(name='DomesticMax95Bps'),
  endTime?: string(name='EndTime'),
  max95Bps?: string(name='Max95Bps'),
  overseasMax95Bps?: string(name='OverseasMax95Bps'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDomainMax95BpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainMax95BpsDataResponseBody(name='body'),
}

async function describeDomainMax95BpsData(request: DescribeDomainMax95BpsDataRequest): DescribeDomainMax95BpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainMax95BpsData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainMultiUsageDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainMultiUsageDataResponseBody = {
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  requestPerInterval?: {
    requestDataModule?: [ 
    {
      domain?: string(name='Domain'),
      request?: long(name='Request'),
      timeStamp?: string(name='TimeStamp'),
      type?: string(name='Type'),
    }
  ](name='RequestDataModule')
  }(name='RequestPerInterval'),
  startTime?: string(name='StartTime'),
  trafficPerInterval?: {
    trafficDataModule?: [ 
    {
      area?: string(name='Area'),
      bps?: float(name='Bps'),
      domain?: string(name='Domain'),
      timeStamp?: string(name='TimeStamp'),
      type?: string(name='Type'),
    }
  ](name='TrafficDataModule')
  }(name='TrafficPerInterval'),
}

model DescribeDomainMultiUsageDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainMultiUsageDataResponseBody(name='body'),
}

async function describeDomainMultiUsageData(request: DescribeDomainMultiUsageDataRequest): DescribeDomainMultiUsageDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainMultiUsageData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainNamesOfVersionRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageIndex?: int32(name='PageIndex', position='Query'),
  pageSize?: string(name='PageSize', position='Query'),
  versionId: string(name='VersionId', position='Query'),
}

model DescribeDomainNamesOfVersionResponseBody = {
  contents?: [ 
    {
      domainId?: string(name='DomainId'),
      domainName?: string(name='DomainName'),
    }
  ](name='Contents'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDomainNamesOfVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainNamesOfVersionResponseBody(name='body'),
}

async function describeDomainNamesOfVersion(request: DescribeDomainNamesOfVersionRequest): DescribeDomainNamesOfVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainNamesOfVersion', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainPathDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=1000, position='Query'),
  path?: string(name='Path', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainPathDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  pathDataPerInterval?: {
    usageData?: [ 
    {
      acc?: int32(name='Acc'),
      path?: string(name='Path'),
      time?: string(name='Time'),
      traffic?: int32(name='Traffic'),
    }
  ](name='UsageData')
  }(name='PathDataPerInterval'),
  startTime?: string(name='StartTime'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDomainPathDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainPathDataResponseBody(name='body'),
}

async function describeDomainPathData(request: DescribeDomainPathDataRequest): DescribeDomainPathDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainPathData', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDomainPvDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainPvDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  pvDataInterval?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='UsageData')
  }(name='PvDataInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDomainPvDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainPvDataResponseBody(name='body'),
}

async function describeDomainPvData(request: DescribeDomainPvDataRequest): DescribeDomainPvDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainPvData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainQpsDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainQpsDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  qpsDataInterval?: {
    dataModule?: [ 
    {
      accDomesticValue?: string(name='AccDomesticValue'),
      accOverseasValue?: string(name='AccOverseasValue'),
      accValue?: string(name='AccValue'),
      domesticValue?: string(name='DomesticValue'),
      httpsAccDomesticValue?: string(name='HttpsAccDomesticValue'),
      httpsAccOverseasValue?: string(name='HttpsAccOverseasValue'),
      httpsAccValue?: string(name='HttpsAccValue'),
      httpsDomesticValue?: string(name='HttpsDomesticValue'),
      httpsOverseasValue?: string(name='HttpsOverseasValue'),
      httpsValue?: string(name='HttpsValue'),
      overseasValue?: string(name='OverseasValue'),
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='QpsDataInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDomainQpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainQpsDataResponseBody(name='body'),
}

async function describeDomainQpsData(request: DescribeDomainQpsDataRequest): DescribeDomainQpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainQpsData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainQpsDataByLayerRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  layer?: string(name='Layer', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainQpsDataByLayerResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  layer?: string(name='Layer'),
  qpsDataInterval?: {
    dataModule?: [ 
    {
      accDomesticValue?: string(name='AccDomesticValue'),
      accOverseasValue?: string(name='AccOverseasValue'),
      accValue?: string(name='AccValue'),
      domesticValue?: string(name='DomesticValue'),
      overseasValue?: string(name='OverseasValue'),
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='QpsDataInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDomainQpsDataByLayerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainQpsDataByLayerResponseBody(name='body'),
}

async function describeDomainQpsDataByLayer(request: DescribeDomainQpsDataByLayerRequest): DescribeDomainQpsDataByLayerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainQpsDataByLayer', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainRealTimeBpsDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainRealTimeBpsDataResponseBody = {
  data?: {
    bpsModel?: [ 
    {
      bps?: float(name='Bps'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='BpsModel')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainRealTimeBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainRealTimeBpsDataResponseBody(name='body'),
}

async function describeDomainRealTimeBpsData(request: DescribeDomainRealTimeBpsDataRequest): DescribeDomainRealTimeBpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainRealTimeBpsData', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDomainRealTimeByteHitRateDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainRealTimeByteHitRateDataResponseBody = {
  data?: {
    byteHitRateDataModel?: [ 
    {
      byteHitRate?: float(name='ByteHitRate'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='ByteHitRateDataModel')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainRealTimeByteHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainRealTimeByteHitRateDataResponseBody(name='body'),
}

async function describeDomainRealTimeByteHitRateData(request: DescribeDomainRealTimeByteHitRateDataRequest): DescribeDomainRealTimeByteHitRateDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainRealTimeByteHitRateData', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDomainRealTimeDetailDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  field: string(name='Field', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  merge?: string(name='Merge', position='Query'),
  mergeLocIsp?: string(name='MergeLocIsp', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeDomainRealTimeDetailDataResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainRealTimeDetailDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainRealTimeDetailDataResponseBody(name='body'),
}

async function describeDomainRealTimeDetailData(request: DescribeDomainRealTimeDetailDataRequest): DescribeDomainRealTimeDetailDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainRealTimeDetailData', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDomainRealTimeHttpCodeDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainRealTimeHttpCodeDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  realTimeHttpCodeData?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: {
        realTimeCodeProportionData?: [ 
        {
          code?: string(name='Code'),
          count?: string(name='Count'),
          proportion?: string(name='Proportion'),
        }
      ](name='RealTimeCodeProportionData')
      }(name='Value'),
    }
  ](name='UsageData')
  }(name='RealTimeHttpCodeData'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDomainRealTimeHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainRealTimeHttpCodeDataResponseBody(name='body'),
}

async function describeDomainRealTimeHttpCodeData(request: DescribeDomainRealTimeHttpCodeDataRequest): DescribeDomainRealTimeHttpCodeDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainRealTimeHttpCodeData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainRealTimeQpsDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainRealTimeQpsDataResponseBody = {
  data?: {
    qpsModel?: [ 
    {
      qps?: float(name='Qps'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='QpsModel')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainRealTimeQpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainRealTimeQpsDataResponseBody(name='body'),
}

async function describeDomainRealTimeQpsData(request: DescribeDomainRealTimeQpsDataRequest): DescribeDomainRealTimeQpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainRealTimeQpsData', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDomainRealTimeReqHitRateDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainRealTimeReqHitRateDataResponseBody = {
  data?: {
    reqHitRateDataModel?: [ 
    {
      reqHitRate?: float(name='ReqHitRate'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='ReqHitRateDataModel')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainRealTimeReqHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainRealTimeReqHitRateDataResponseBody(name='body'),
}

async function describeDomainRealTimeReqHitRateData(request: DescribeDomainRealTimeReqHitRateDataRequest): DescribeDomainRealTimeReqHitRateDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainRealTimeReqHitRateData', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDomainRealTimeSrcBpsDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainRealTimeSrcBpsDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  realTimeSrcBpsDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='RealTimeSrcBpsDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDomainRealTimeSrcBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainRealTimeSrcBpsDataResponseBody(name='body'),
}

async function describeDomainRealTimeSrcBpsData(request: DescribeDomainRealTimeSrcBpsDataRequest): DescribeDomainRealTimeSrcBpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainRealTimeSrcBpsData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainRealTimeSrcHttpCodeDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainRealTimeSrcHttpCodeDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  realTimeSrcHttpCodeData?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: {
        realTimeSrcCodeProportionData?: [ 
        {
          code?: string(name='Code'),
          count?: string(name='Count'),
          proportion?: string(name='Proportion'),
        }
      ](name='RealTimeSrcCodeProportionData')
      }(name='Value'),
    }
  ](name='UsageData')
  }(name='RealTimeSrcHttpCodeData'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDomainRealTimeSrcHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainRealTimeSrcHttpCodeDataResponseBody(name='body'),
}

async function describeDomainRealTimeSrcHttpCodeData(request: DescribeDomainRealTimeSrcHttpCodeDataRequest): DescribeDomainRealTimeSrcHttpCodeDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainRealTimeSrcHttpCodeData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainRealTimeSrcTrafficDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainRealTimeSrcTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  realTimeSrcTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='RealTimeSrcTrafficDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDomainRealTimeSrcTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainRealTimeSrcTrafficDataResponseBody(name='body'),
}

async function describeDomainRealTimeSrcTrafficData(request: DescribeDomainRealTimeSrcTrafficDataRequest): DescribeDomainRealTimeSrcTrafficDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainRealTimeSrcTrafficData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainRealTimeTrafficDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainRealTimeTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  realTimeTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='RealTimeTrafficDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDomainRealTimeTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainRealTimeTrafficDataResponseBody(name='body'),
}

async function describeDomainRealTimeTrafficData(request: DescribeDomainRealTimeTrafficDataRequest): DescribeDomainRealTimeTrafficDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainRealTimeTrafficData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainRealtimeLogDeliveryRequest {
  domain: string(name='Domain', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeDomainRealtimeLogDeliveryResponseBody = {
  logstore?: string(name='Logstore'),
  project?: string(name='Project'),
  region?: string(name='Region'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeDomainRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainRealtimeLogDeliveryResponseBody(name='body'),
}

async function describeDomainRealtimeLogDelivery(request: DescribeDomainRealtimeLogDeliveryRequest): DescribeDomainRealtimeLogDeliveryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainRealtimeLogDelivery', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDomainRegionDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainRegionDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  value?: {
    regionProportionData?: [ 
    {
      avgObjectSize?: string(name='AvgObjectSize'),
      avgResponseRate?: string(name='AvgResponseRate'),
      avgResponseTime?: string(name='AvgResponseTime'),
      bps?: string(name='Bps'),
      bytesProportion?: string(name='BytesProportion'),
      proportion?: string(name='Proportion'),
      qps?: string(name='Qps'),
      region?: string(name='Region'),
      regionEname?: string(name='RegionEname'),
      reqErrRate?: string(name='ReqErrRate'),
      totalBytes?: string(name='TotalBytes'),
      totalQuery?: string(name='TotalQuery'),
    }
  ](name='RegionProportionData')
  }(name='Value'),
}

model DescribeDomainRegionDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainRegionDataResponseBody(name='body'),
}

async function describeDomainRegionData(request: DescribeDomainRegionDataRequest): DescribeDomainRegionDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainRegionData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainReqHitRateDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainReqHitRateDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  reqHitRateInterval?: {
    dataModule?: [ 
    {
      httpsValue?: string(name='HttpsValue'),
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='ReqHitRateInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDomainReqHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainReqHitRateDataResponseBody(name='body'),
}

async function describeDomainReqHitRateData(request: DescribeDomainReqHitRateDataRequest): DescribeDomainReqHitRateDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainReqHitRateData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainSrcBpsDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainSrcBpsDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  srcBpsDataPerInterval?: {
    dataModule?: [ 
    {
      httpsValue?: string(name='HttpsValue'),
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='SrcBpsDataPerInterval'),
  startTime?: string(name='StartTime'),
}

model DescribeDomainSrcBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainSrcBpsDataResponseBody(name='body'),
}

async function describeDomainSrcBpsData(request: DescribeDomainSrcBpsDataRequest): DescribeDomainSrcBpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainSrcBpsData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainSrcHttpCodeDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainSrcHttpCodeDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  httpCodeData?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: {
        codeProportionData?: [ 
        {
          code?: string(name='Code'),
          count?: string(name='Count'),
          proportion?: string(name='Proportion'),
        }
      ](name='CodeProportionData')
      }(name='Value'),
    }
  ](name='UsageData')
  }(name='HttpCodeData'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDomainSrcHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainSrcHttpCodeDataResponseBody(name='body'),
}

async function describeDomainSrcHttpCodeData(request: DescribeDomainSrcHttpCodeDataRequest): DescribeDomainSrcHttpCodeDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainSrcHttpCodeData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainSrcQpsDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainSrcQpsDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  srcQpsDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='SrcQpsDataPerInterval'),
  startTime?: string(name='StartTime'),
}

model DescribeDomainSrcQpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainSrcQpsDataResponseBody(name='body'),
}

async function describeDomainSrcQpsData(request: DescribeDomainSrcQpsDataRequest): DescribeDomainSrcQpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainSrcQpsData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainSrcTopUrlVisitRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  sortBy?: string(name='SortBy', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainSrcTopUrlVisitResponseBody = {
  allUrlList?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='AllUrlList'),
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  url200List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url200List'),
  url300List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url300List'),
  url400List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url400List'),
  url500List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url500List'),
}

model DescribeDomainSrcTopUrlVisitResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainSrcTopUrlVisitResponseBody(name='body'),
}

async function describeDomainSrcTopUrlVisit(request: DescribeDomainSrcTopUrlVisitRequest): DescribeDomainSrcTopUrlVisitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainSrcTopUrlVisit', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainSrcTrafficDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainSrcTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  srcTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      httpsValue?: string(name='HttpsValue'),
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='SrcTrafficDataPerInterval'),
  startTime?: string(name='StartTime'),
}

model DescribeDomainSrcTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainSrcTrafficDataResponseBody(name='body'),
}

async function describeDomainSrcTrafficData(request: DescribeDomainSrcTrafficDataRequest): DescribeDomainSrcTrafficDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainSrcTrafficData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainTopClientIpVisitRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  limit?: string(name='Limit', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  sortBy?: string(name='SortBy', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainTopClientIpVisitResponseBody = {
  clientIpList?: [ 
    {
      acc?: long(name='Acc'),
      clientIp?: string(name='ClientIp'),
      rank?: int32(name='Rank'),
      traffic?: long(name='Traffic'),
    }
  ](name='ClientIpList'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainTopClientIpVisitResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainTopClientIpVisitResponseBody(name='body'),
}

async function describeDomainTopClientIpVisit(request: DescribeDomainTopClientIpVisitRequest): DescribeDomainTopClientIpVisitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainTopClientIpVisit', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainTopReferVisitRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  percent?: string(name='Percent', position='Query'),
  sortBy?: string(name='SortBy', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainTopReferVisitResponseBody = {
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  topReferList?: {
    referList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      referDetail?: string(name='ReferDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='ReferList')
  }(name='TopReferList'),
}

model DescribeDomainTopReferVisitResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainTopReferVisitResponseBody(name='body'),
}

async function describeDomainTopReferVisit(request: DescribeDomainTopReferVisitRequest): DescribeDomainTopReferVisitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainTopReferVisit', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainTopUrlVisitRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  sortBy?: string(name='SortBy', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainTopUrlVisitResponseBody = {
  allUrlList?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='AllUrlList'),
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  url200List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url200List'),
  url300List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url300List'),
  url400List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url400List'),
  url500List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url500List'),
}

model DescribeDomainTopUrlVisitResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainTopUrlVisitResponseBody(name='body'),
}

async function describeDomainTopUrlVisit(request: DescribeDomainTopUrlVisitRequest): DescribeDomainTopUrlVisitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainTopUrlVisit', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainTrafficDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  trafficDataPerInterval?: {
    dataModule?: [ 
    {
      domesticValue?: string(name='DomesticValue'),
      httpsDomesticValue?: string(name='HttpsDomesticValue'),
      httpsOverseasValue?: string(name='HttpsOverseasValue'),
      httpsValue?: string(name='HttpsValue'),
      overseasValue?: string(name='OverseasValue'),
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='TrafficDataPerInterval'),
}

model DescribeDomainTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainTrafficDataResponseBody(name='body'),
}

async function describeDomainTrafficData(request: DescribeDomainTrafficDataRequest): DescribeDomainTrafficDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainTrafficData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainUsageDataRequest {
  area?: string(name='Area', position='Query'),
  dataProtocol?: string(name='DataProtocol', position='Query'),
  domainName?: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  field: string(name='Field', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  type?: string(name='Type', position='Query'),
}

model DescribeDomainUsageDataResponseBody = {
  area?: string(name='Area'),
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  type?: string(name='Type'),
  usageDataPerInterval?: {
    dataModule?: [ 
    {
      peakTime?: string(name='PeakTime'),
      specialValue?: string(name='SpecialValue'),
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='UsageDataPerInterval'),
}

model DescribeDomainUsageDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainUsageDataResponseBody(name='body'),
}

async function describeDomainUsageData(request: DescribeDomainUsageDataRequest): DescribeDomainUsageDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainUsageData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainUvDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainUvDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  uvDataInterval?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='UsageData')
  }(name='UvDataInterval'),
}

model DescribeDomainUvDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainUvDataResponseBody(name='body'),
}

async function describeDomainUvData(request: DescribeDomainUvDataRequest): DescribeDomainUvDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainUvData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainsBySourceRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  sources: string(name='Sources', position='Query'),
}

model DescribeDomainsBySourceResponseBody = {
  domainsList?: {
    domainsData?: [ 
    {
      domainInfos?: {
        domainInfo?: [ 
        {
          cdnType?: string(name='CdnType'),
          createTime?: string(name='CreateTime'),
          domainCname?: string(name='DomainCname'),
          domainName?: string(name='DomainName'),
          status?: string(name='Status'),
          updateTime?: string(name='UpdateTime'),
        }
      ](name='domainInfo')
      }(name='DomainInfos'),
      domains?: {
        domainNames?: [ string ](name='domainNames')
      }(name='Domains'),
      source?: string(name='Source'),
    }
  ](name='DomainsData')
  }(name='DomainsList'),
  requestId?: string(name='RequestId'),
  sources?: string(name='Sources'),
}

model DescribeDomainsBySourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainsBySourceResponseBody(name='body'),
}

async function describeDomainsBySource(request: DescribeDomainsBySourceRequest): DescribeDomainsBySourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainsBySource', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainsUsageByDayRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDomainsUsageByDayResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  usageByDays?: {
    usageByDay?: [ 
    {
      bytesHitRate?: string(name='BytesHitRate'),
      maxBps?: string(name='MaxBps'),
      maxBpsTime?: string(name='MaxBpsTime'),
      maxSrcBps?: string(name='MaxSrcBps'),
      maxSrcBpsTime?: string(name='MaxSrcBpsTime'),
      qps?: string(name='Qps'),
      requestHitRate?: string(name='RequestHitRate'),
      timeStamp?: string(name='TimeStamp'),
      totalAccess?: string(name='TotalAccess'),
      totalTraffic?: string(name='TotalTraffic'),
    }
  ](name='UsageByDay')
  }(name='UsageByDays'),
  usageTotal?: {
    bytesHitRate?: string(name='BytesHitRate'),
    maxBps?: string(name='MaxBps'),
    maxBpsTime?: string(name='MaxBpsTime'),
    maxSrcBps?: string(name='MaxSrcBps'),
    maxSrcBpsTime?: string(name='MaxSrcBpsTime'),
    requestHitRate?: string(name='RequestHitRate'),
    totalAccess?: string(name='TotalAccess'),
    totalTraffic?: string(name='TotalTraffic'),
  }(name='UsageTotal'),
}

model DescribeDomainsUsageByDayResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainsUsageByDayResponseBody(name='body'),
}

async function describeDomainsUsageByDay(request: DescribeDomainsUsageByDayRequest): DescribeDomainsUsageByDayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainsUsageByDay', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEsExceptionDataRequest {
  endTime: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  ruleId: string(name='RuleId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeEsExceptionDataResponseBody = {
  contents?: [ 
    {
      columns?: [ string ](name='Columns'),
      name?: string(name='Name'),
      points?: [ string ](name='Points'),
    }
  ](name='Contents'),
  requestId?: string(name='RequestId'),
}

model DescribeEsExceptionDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEsExceptionDataResponseBody(name='body'),
}

async function describeEsExceptionData(request: DescribeEsExceptionDataRequest): DescribeEsExceptionDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEsExceptionData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEsExecuteDataRequest {
  endTime: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  ruleId: string(name='RuleId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeEsExecuteDataResponseBody = {
  contents?: [ 
    {
      columns?: [ string ](name='Columns'),
      name?: string(name='Name'),
      points?: [ string ](name='Points'),
    }
  ](name='Contents'),
  requestId?: string(name='RequestId'),
}

model DescribeEsExecuteDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEsExecuteDataResponseBody(name='body'),
}

async function describeEsExecuteData(request: DescribeEsExecuteDataRequest): DescribeEsExecuteDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEsExecuteData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFCTriggerRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  triggerARN: string(name='TriggerARN', position='Query'),
}

model DescribeFCTriggerResponseBody = {
  FCTrigger?: {
    eventMetaName?: string(name='EventMetaName'),
    eventMetaVersion?: string(name='EventMetaVersion'),
    notes?: string(name='Notes'),
    roleARN?: string(name='RoleARN'),
    sourceArn?: string(name='SourceArn'),
    triggerARN?: string(name='TriggerARN'),
  }(name='FCTrigger'),
  requestId?: string(name='RequestId'),
}

model DescribeFCTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFCTriggerResponseBody(name='body'),
}

async function describeFCTrigger(request: DescribeFCTriggerRequest): DescribeFCTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFCTrigger', 'GET', '/', 'json', false, 'json', request);
}

model DescribeIllegalUrlExportTaskRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  taskId: string(name='TaskId', position='Query'),
}

model DescribeIllegalUrlExportTaskResponseBody = {
  downloadUrl?: string(name='DownloadUrl'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeIllegalUrlExportTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIllegalUrlExportTaskResponseBody(name='body'),
}

async function describeIllegalUrlExportTask(request: DescribeIllegalUrlExportTaskRequest): DescribeIllegalUrlExportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIllegalUrlExportTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIpInfoRequest {
  IP: string(name='IP', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeIpInfoResponseBody = {
  cdnIp?: string(name='CdnIp'),
  ISP?: string(name='ISP'),
  ispEname?: string(name='IspEname'),
  region?: string(name='Region'),
  regionEname?: string(name='RegionEname'),
  requestId?: string(name='RequestId'),
}

model DescribeIpInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIpInfoResponseBody(name='body'),
}

async function describeIpInfo(request: DescribeIpInfoRequest): DescribeIpInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIpInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeL2VipsByDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeL2VipsByDomainResponseBody = {
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
  vips?: {
    vip?: [ string ](name='Vip')
  }(name='Vips'),
}

model DescribeL2VipsByDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeL2VipsByDomainResponseBody(name='body'),
}

async function describeL2VipsByDomain(request: DescribeL2VipsByDomainRequest): DescribeL2VipsByDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeL2VipsByDomain', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRangeDataByLocateAndIspServiceRequest {
  domainNames: string(name='DomainNames', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ispNames?: string(name='IspNames', position='Query'),
  locationNames?: string(name='LocationNames', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeRangeDataByLocateAndIspServiceResponseBody = {
  jsonResult?: string(name='JsonResult'),
  requestId?: string(name='RequestId'),
}

model DescribeRangeDataByLocateAndIspServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRangeDataByLocateAndIspServiceResponseBody(name='body'),
}

async function describeRangeDataByLocateAndIspService(request: DescribeRangeDataByLocateAndIspServiceRequest): DescribeRangeDataByLocateAndIspServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRangeDataByLocateAndIspService', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRealtimeDeliveryAccRequest {
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  logStore?: string(name='LogStore', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  project?: string(name='Project', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeRealtimeDeliveryAccResponseBody = {
  reatTimeDeliveryAccData?: {
    accData?: [ 
    {
      failedNum?: int32(name='FailedNum'),
      successNum?: int32(name='SuccessNum'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='AccData')
  }(name='ReatTimeDeliveryAccData'),
  requestId?: string(name='RequestId'),
}

model DescribeRealtimeDeliveryAccResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRealtimeDeliveryAccResponseBody(name='body'),
}

async function describeRealtimeDeliveryAcc(request: DescribeRealtimeDeliveryAccRequest): DescribeRealtimeDeliveryAccResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRealtimeDeliveryAcc', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRefreshQuotaRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeRefreshQuotaResponseBody = {
  blockQuota?: string(name='BlockQuota'),
  blockRemain?: string(name='BlockRemain'),
  dirQuota?: string(name='DirQuota'),
  dirRemain?: string(name='DirRemain'),
  preloadEdgeQuota?: string(name='PreloadEdgeQuota'),
  preloadEdgeRemain?: string(name='PreloadEdgeRemain'),
  preloadQuota?: string(name='PreloadQuota'),
  preloadRemain?: string(name='PreloadRemain'),
  regexQuota?: string(name='RegexQuota'),
  regexRemain?: string(name='RegexRemain'),
  requestId?: string(name='RequestId'),
  urlQuota?: string(name='UrlQuota'),
  urlRemain?: string(name='UrlRemain'),
}

model DescribeRefreshQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRefreshQuotaResponseBody(name='body'),
}

async function describeRefreshQuota(request: DescribeRefreshQuotaRequest): DescribeRefreshQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRefreshQuota', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRefreshTaskByIdRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  taskId: string(name='TaskId', position='Query'),
}

model DescribeRefreshTaskByIdResponseBody = {
  requestId?: string(name='RequestId'),
  tasks?: [ 
    {
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      objectPath?: string(name='ObjectPath'),
      objectType?: string(name='ObjectType'),
      process?: string(name='Process'),
      status?: string(name='Status'),
      taskId?: string(name='TaskId'),
    }
  ](name='Tasks'),
  totalCount?: long(name='TotalCount'),
}

model DescribeRefreshTaskByIdResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRefreshTaskByIdResponseBody(name='body'),
}

async function describeRefreshTaskById(request: DescribeRefreshTaskByIdRequest): DescribeRefreshTaskByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRefreshTaskById', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRefreshTasksRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  objectPath?: string(name='ObjectPath', position='Query'),
  objectType?: string(name='ObjectType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=100000, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  status?: string(name='Status', position='Query'),
  taskId?: string(name='TaskId', position='Query'),
}

model DescribeRefreshTasksResponseBody = {
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  tasks?: {
    CDNTask?: [ 
    {
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      objectPath?: string(name='ObjectPath'),
      objectType?: string(name='ObjectType'),
      process?: string(name='Process'),
      status?: string(name='Status'),
      taskId?: string(name='TaskId'),
    }
  ](name='CDNTask')
  }(name='Tasks'),
  totalCount?: long(name='TotalCount'),
}

model DescribeRefreshTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRefreshTasksResponseBody(name='body'),
}

async function describeRefreshTasks(request: DescribeRefreshTasksRequest): DescribeRefreshTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRefreshTasks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeStagingIpRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeStagingIpResponseBody = {
  IPV4s?: {
    IPV4?: [ string ](name='IPV4')
  }(name='IPV4s'),
  requestId?: string(name='RequestId'),
}

model DescribeStagingIpResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStagingIpResponseBody(name='body'),
}

async function describeStagingIp(request: DescribeStagingIpRequest): DescribeStagingIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStagingIp', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagResourcesRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeTagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId'),
      tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag'),
    }
  ](name='TagResources'),
}

model DescribeTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTagResourcesResponseBody(name='body'),
}

async function describeTagResources(request: DescribeTagResourcesRequest): DescribeTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagResources', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTopDomainsByFlowRequest {
  endTime?: string(name='EndTime', position='Query'),
  limit?: long(name='Limit', minimum=1, maximum=100, position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeTopDomainsByFlowResponseBody = {
  domainCount?: long(name='DomainCount'),
  domainOnlineCount?: long(name='DomainOnlineCount'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  topDomains?: {
    topDomain?: [ 
    {
      domainName?: string(name='DomainName'),
      maxBps?: float(name='MaxBps'),
      maxBpsTime?: string(name='MaxBpsTime'),
      rank?: long(name='Rank'),
      totalAccess?: long(name='TotalAccess'),
      totalTraffic?: string(name='TotalTraffic'),
      trafficPercent?: string(name='TrafficPercent'),
    }
  ](name='TopDomain')
  }(name='TopDomains'),
}

model DescribeTopDomainsByFlowResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTopDomainsByFlowResponseBody(name='body'),
}

async function describeTopDomainsByFlow(request: DescribeTopDomainsByFlowRequest): DescribeTopDomainsByFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTopDomainsByFlow', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserCertificateExpireCountRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeUserCertificateExpireCountResponseBody = {
  expireWithin30DaysCount?: int32(name='ExpireWithin30DaysCount'),
  expiredCount?: int32(name='ExpiredCount'),
  requestId?: string(name='RequestId'),
}

model DescribeUserCertificateExpireCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserCertificateExpireCountResponseBody(name='body'),
}

async function describeUserCertificateExpireCount(request: DescribeUserCertificateExpireCountRequest): DescribeUserCertificateExpireCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserCertificateExpireCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserConfigsRequest {
  config: string(name='Config', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeUserConfigsResponseBody = {
  configs?: {
    ossLogConfig?: {
      bucket?: string(name='Bucket'),
      enable?: string(name='Enable'),
      prefix?: string(name='Prefix'),
    }(name='OssLogConfig'),
    wafConfig?: {
      enable?: string(name='Enable'),
    }(name='WafConfig'),
  }(name='Configs'),
  requestId?: string(name='RequestId'),
}

model DescribeUserConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserConfigsResponseBody(name='body'),
}

async function describeUserConfigs(request: DescribeUserConfigsRequest): DescribeUserConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserConfigs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserDomainsRequest {
  cdnType?: string(name='CdnType', position='Query'),
  changeEndTime?: string(name='ChangeEndTime', position='Query'),
  changeStartTime?: string(name='ChangeStartTime', position='Query'),
  checkDomainShow?: boolean(name='CheckDomainShow', position='Query'),
  coverage?: string(name='Coverage', position='Query'),
  domainName?: string(name='DomainName', position='Query'),
  domainSearchType?: string(name='DomainSearchType', position='Query'),
  domainStatus?: string(name='DomainStatus', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=500, position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  source?: string(name='Source', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeUserDomainsResponseBody = {
  domains?: {
    pageData?: [ 
    {
      cdnType?: string(name='CdnType'),
      cname?: string(name='Cname'),
      coverage?: string(name='Coverage'),
      description?: string(name='Description'),
      domainName?: string(name='DomainName'),
      domainStatus?: string(name='DomainStatus'),
      gmtCreated?: string(name='GmtCreated'),
      gmtModified?: string(name='GmtModified'),
      resourceGroupId?: string(name='ResourceGroupId'),
      sandbox?: string(name='Sandbox'),
      sources?: {
        source?: [ 
        {
          content?: string(name='Content'),
          port?: int32(name='Port'),
          priority?: string(name='Priority'),
          type?: string(name='Type'),
          weight?: string(name='Weight'),
        }
      ](name='Source')
      }(name='Sources'),
      sslProtocol?: string(name='SslProtocol'),
    }
  ](name='PageData')
  }(name='Domains'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeUserDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserDomainsResponseBody(name='body'),
}

async function describeUserDomains(request: DescribeUserDomainsRequest): DescribeUserDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserDomains', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserTagsRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeUserTagsResponseBody = {
  requestId?: string(name='RequestId'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Tags'),
}

model DescribeUserTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserTagsResponseBody(name='body'),
}

async function describeUserTags(request: DescribeUserTagsRequest): DescribeUserTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserTags', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserUsageDataExportTaskRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: string(name='PageNumber', position='Query'),
  pageSize?: string(name='PageSize', position='Query'),
}

model DescribeUserUsageDataExportTaskResponseBody = {
  requestId?: string(name='RequestId'),
  usageDataPerPage?: {
    data?: {
      dataItem?: [ 
      {
        createTime?: string(name='CreateTime'),
        downloadUrl?: string(name='DownloadUrl'),
        status?: string(name='Status'),
        taskConfig?: {
          endTime?: string(name='EndTime'),
          startTime?: string(name='StartTime'),
        }(name='TaskConfig'),
        taskId?: string(name='TaskId'),
        taskName?: string(name='TaskName'),
        updateTime?: string(name='UpdateTime'),
      }
    ](name='DataItem')
    }(name='Data'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='UsageDataPerPage'),
}

model DescribeUserUsageDataExportTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserUsageDataExportTaskResponseBody(name='body'),
}

async function describeUserUsageDataExportTask(request: DescribeUserUsageDataExportTaskRequest): DescribeUserUsageDataExportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserUsageDataExportTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserUsageDetailDataExportTaskRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: string(name='PageNumber', position='Query'),
  pageSize?: string(name='PageSize', position='Query'),
}

model DescribeUserUsageDetailDataExportTaskResponseBody = {
  requestId?: string(name='RequestId'),
  usageDataPerPage?: {
    data?: {
      dataItem?: [ 
      {
        createTime?: string(name='CreateTime'),
        downloadUrl?: string(name='DownloadUrl'),
        status?: string(name='Status'),
        taskConfig?: {
          endTime?: string(name='EndTime'),
          startTime?: string(name='StartTime'),
        }(name='TaskConfig'),
        taskId?: string(name='TaskId'),
        taskName?: string(name='TaskName'),
        updateTime?: string(name='UpdateTime'),
      }
    ](name='DataItem')
    }(name='Data'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='UsageDataPerPage'),
}

model DescribeUserUsageDetailDataExportTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserUsageDetailDataExportTaskResponseBody(name='body'),
}

async function describeUserUsageDetailDataExportTask(request: DescribeUserUsageDetailDataExportTaskRequest): DescribeUserUsageDetailDataExportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserUsageDetailDataExportTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserVipsByDomainRequest {
  available?: string(name='Available', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeUserVipsByDomainResponseBody = {
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
  vips?: {
    vip?: [ string ](name='Vip')
  }(name='Vips'),
}

model DescribeUserVipsByDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserVipsByDomainResponseBody(name='body'),
}

async function describeUserVipsByDomain(request: DescribeUserVipsByDomainRequest): DescribeUserVipsByDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserVipsByDomain', 'GET', '/', 'json', false, 'json', request);
}

model DescribeVerifyContentRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeVerifyContentResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeVerifyContentResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVerifyContentResponseBody(name='body'),
}

async function describeVerifyContent(request: DescribeVerifyContentRequest): DescribeVerifyContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVerifyContent', 'POST', '/', 'json', false, 'json', request);
}

model DisableRealtimeLogDeliveryRequest {
  domain: string(name='Domain', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DisableRealtimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: DisableRealtimeLogDeliveryResponseBody(name='body'),
}

async function disableRealtimeLogDelivery(request: DisableRealtimeLogDeliveryRequest): DisableRealtimeLogDeliveryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableRealtimeLogDelivery', 'GET', '/', 'json', false, 'json', request);
}

model EnableRealtimeLogDeliveryRequest {
  domain: string(name='Domain', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model EnableRealtimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: EnableRealtimeLogDeliveryResponseBody(name='body'),
}

async function enableRealtimeLogDelivery(request: EnableRealtimeLogDeliveryRequest): EnableRealtimeLogDeliveryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableRealtimeLogDelivery', 'GET', '/', 'json', false, 'json', request);
}

model ListDomainsByLogConfigIdRequest {
  configId: string(name='ConfigId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model ListDomainsByLogConfigIdResponseBody = {
  domains?: {
    domain?: [ string ](name='Domain')
  }(name='Domains'),
  requestId?: string(name='RequestId'),
}

model ListDomainsByLogConfigIdResponse = {
  headers: map[string]string(name='headers'),
  body: ListDomainsByLogConfigIdResponseBody(name='body'),
}

async function listDomainsByLogConfigId(request: ListDomainsByLogConfigIdRequest): ListDomainsByLogConfigIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDomainsByLogConfigId', 'GET', '/', 'json', false, 'json', request);
}

model ListFCTriggerRequest {
  eventMetaName: string(name='EventMetaName', position='Query'),
  eventMetaVersion: string(name='EventMetaVersion', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model ListFCTriggerResponseBody = {
  FCTriggers?: [ 
    {
      eventMetaName?: string(name='EventMetaName'),
      eventMetaVersion?: string(name='EventMetaVersion'),
      notes?: string(name='Notes'),
      roleARN?: string(name='RoleARN'),
      sourceArn?: string(name='SourceArn'),
      triggerARN?: string(name='TriggerARN'),
    }
  ](name='FCTriggers'),
  requestId?: string(name='RequestId'),
}

model ListFCTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: ListFCTriggerResponseBody(name='body'),
}

async function listFCTrigger(request: ListFCTriggerRequest): ListFCTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFCTrigger', 'GET', '/', 'json', false, 'json', request);
}

model ListRealtimeLogDeliveryDomainsRequest {
  logstore: string(name='Logstore', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  project: string(name='Project', position='Query'),
  region: string(name='Region', position='Query'),
}

model ListRealtimeLogDeliveryDomainsResponseBody = {
  content?: {
    domains?: [ 
    {
      domainName?: string(name='DomainName'),
      status?: string(name='Status'),
    }
  ](name='Domains')
  }(name='Content'),
  requestId?: string(name='RequestId'),
}

model ListRealtimeLogDeliveryDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRealtimeLogDeliveryDomainsResponseBody(name='body'),
}

async function listRealtimeLogDeliveryDomains(request: ListRealtimeLogDeliveryDomainsRequest): ListRealtimeLogDeliveryDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRealtimeLogDeliveryDomains', 'GET', '/', 'json', false, 'json', request);
}

model ListRealtimeLogDeliveryInfosRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model ListRealtimeLogDeliveryInfosResponseBody = {
  content?: {
    realtimeLogDeliveryInfos?: [ 
    {
      logstore?: string(name='Logstore'),
      project?: string(name='Project'),
      region?: string(name='Region'),
    }
  ](name='RealtimeLogDeliveryInfos')
  }(name='Content'),
  requestId?: string(name='RequestId'),
}

model ListRealtimeLogDeliveryInfosResponse = {
  headers: map[string]string(name='headers'),
  body: ListRealtimeLogDeliveryInfosResponseBody(name='body'),
}

async function listRealtimeLogDeliveryInfos(request: ListRealtimeLogDeliveryInfosRequest): ListRealtimeLogDeliveryInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRealtimeLogDeliveryInfos', 'GET', '/', 'json', false, 'json', request);
}

model ListUserCustomLogConfigRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model ListUserCustomLogConfigResponseBody = {
  configIds?: {
    configId?: [ string ](name='ConfigId')
  }(name='ConfigIds'),
  requestId?: string(name='RequestId'),
}

model ListUserCustomLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserCustomLogConfigResponseBody(name='body'),
}

async function listUserCustomLogConfig(request: ListUserCustomLogConfigRequest): ListUserCustomLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserCustomLogConfig', 'GET', '/', 'json', false, 'json', request);
}

model ModifyCdnDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  sources?: string(name='Sources', position='Query'),
  topLevelDomain?: string(name='TopLevelDomain', position='Query'),
}

model ModifyCdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCdnDomainResponseBody(name='body'),
}

async function modifyCdnDomain(request: ModifyCdnDomainRequest): ModifyCdnDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCdnDomain', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCdnDomainSchdmByPropertyRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  property: string(name='Property', position='Query'),
}

model ModifyCdnDomainSchdmByPropertyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCdnDomainSchdmByPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCdnDomainSchdmByPropertyResponseBody(name='body'),
}

async function modifyCdnDomainSchdmByProperty(request: ModifyCdnDomainSchdmByPropertyRequest): ModifyCdnDomainSchdmByPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCdnDomainSchdmByProperty', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDomainCustomLogConfigRequest {
  configId: string(name='ConfigId', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model ModifyDomainCustomLogConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDomainCustomLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDomainCustomLogConfigResponseBody(name='body'),
}

async function modifyDomainCustomLogConfig(request: ModifyDomainCustomLogConfigRequest): ModifyDomainCustomLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDomainCustomLogConfig', 'GET', '/', 'json', false, 'json', request);
}

model ModifyRealtimeLogDeliveryRequest {
  domain: string(name='Domain', position='Query'),
  logstore: string(name='Logstore', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  project: string(name='Project', position='Query'),
  region: string(name='Region', position='Query'),
}

model ModifyRealtimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyRealtimeLogDeliveryResponseBody(name='body'),
}

async function modifyRealtimeLogDelivery(request: ModifyRealtimeLogDeliveryRequest): ModifyRealtimeLogDeliveryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRealtimeLogDelivery', 'GET', '/', 'json', false, 'json', request);
}

model ModifyUserCustomLogConfigRequest {
  configId: string(name='ConfigId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  tag: string(name='Tag', position='Query'),
}

model ModifyUserCustomLogConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyUserCustomLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyUserCustomLogConfigResponseBody(name='body'),
}

async function modifyUserCustomLogConfig(request: ModifyUserCustomLogConfigRequest): ModifyUserCustomLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyUserCustomLogConfig', 'GET', '/', 'json', false, 'json', request);
}

model OpenCdnServiceRequest {
  internetChargeType: string(name='InternetChargeType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model OpenCdnServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model OpenCdnServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenCdnServiceResponseBody(name='body'),
}

async function openCdnService(request: OpenCdnServiceRequest): OpenCdnServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenCdnService', 'POST', '/', 'json', false, 'json', request);
}

model PublishStagingConfigToProductionRequest {
  domainName: string(name='DomainName', position='Query'),
  functionName: string(name='FunctionName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model PublishStagingConfigToProductionResponseBody = {
  requestId?: string(name='RequestId'),
}

model PublishStagingConfigToProductionResponse = {
  headers: map[string]string(name='headers'),
  body: PublishStagingConfigToProductionResponseBody(name='body'),
}

async function publishStagingConfigToProduction(request: PublishStagingConfigToProductionRequest): PublishStagingConfigToProductionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishStagingConfigToProduction', 'POST', '/', 'json', false, 'json', request);
}

model PushObjectCacheRequest {
  area?: string(name='Area', position='Query'),
  objectPath: string(name='ObjectPath', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model PushObjectCacheResponseBody = {
  pushTaskId?: string(name='PushTaskId'),
  requestId?: string(name='RequestId'),
}

model PushObjectCacheResponse = {
  headers: map[string]string(name='headers'),
  body: PushObjectCacheResponseBody(name='body'),
}

async function pushObjectCache(request: PushObjectCacheRequest): PushObjectCacheResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PushObjectCache', 'POST', '/', 'json', false, 'json', request);
}

model RefreshObjectCachesRequest {
  objectPath: string(name='ObjectPath', position='Query'),
  objectType?: string(name='ObjectType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model RefreshObjectCachesResponseBody = {
  refreshTaskId?: string(name='RefreshTaskId'),
  requestId?: string(name='RequestId'),
}

model RefreshObjectCachesResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshObjectCachesResponseBody(name='body'),
}

async function refreshObjectCaches(request: RefreshObjectCachesRequest): RefreshObjectCachesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshObjectCaches', 'POST', '/', 'json', false, 'json', request);
}

model RollbackStagingConfigRequest {
  domainName: string(name='DomainName', position='Query'),
  functionName: string(name='FunctionName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model RollbackStagingConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model RollbackStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: RollbackStagingConfigResponseBody(name='body'),
}

async function rollbackStagingConfig(request: RollbackStagingConfigRequest): RollbackStagingConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RollbackStagingConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetCcConfigRequest {
  allowIps?: string(name='AllowIps', position='Query'),
  blockIps?: string(name='BlockIps', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SetCcConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetCcConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetCcConfigResponseBody(name='body'),
}

async function setCcConfig(request: SetCcConfigRequest): SetCcConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetCcConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetCdnDomainCSRCertificateRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  serverCertificate: string(name='ServerCertificate', position='Query'),
}

model SetCdnDomainCSRCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetCdnDomainCSRCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: SetCdnDomainCSRCertificateResponseBody(name='body'),
}

async function setCdnDomainCSRCertificate(request: SetCdnDomainCSRCertificateRequest): SetCdnDomainCSRCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetCdnDomainCSRCertificate', 'POST', '/', 'json', false, 'json', request);
}

model SetCdnDomainSMCertificateRequest {
  certIdentifier: string(name='CertIdentifier', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  SSLProtocol: string(name='SSLProtocol', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SetCdnDomainSMCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetCdnDomainSMCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: SetCdnDomainSMCertificateResponseBody(name='body'),
}

async function setCdnDomainSMCertificate(request: SetCdnDomainSMCertificateRequest): SetCdnDomainSMCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetCdnDomainSMCertificate', 'POST', '/', 'json', false, 'json', request);
}

model SetCdnDomainStagingConfigRequest {
  domainName: string(name='DomainName', position='Query'),
  functions: string(name='Functions', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model SetCdnDomainStagingConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetCdnDomainStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetCdnDomainStagingConfigResponseBody(name='body'),
}

async function setCdnDomainStagingConfig(request: SetCdnDomainStagingConfigRequest): SetCdnDomainStagingConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetCdnDomainStagingConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetConfigOfVersionRequest {
  configId?: string(name='ConfigId', position='Query'),
  functionArgs: string(name='FunctionArgs', position='Query'),
  functionId?: long(name='FunctionId', position='Query'),
  functionMatches?: string(name='FunctionMatches', position='Query'),
  functionName?: string(name='FunctionName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  versionId: string(name='VersionId', position='Query'),
}

model SetConfigOfVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetConfigOfVersionResponse = {
  headers: map[string]string(name='headers'),
  body: SetConfigOfVersionResponseBody(name='body'),
}

async function setConfigOfVersion(request: SetConfigOfVersionRequest): SetConfigOfVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetConfigOfVersion', 'POST', '/', 'json', false, 'json', request);
}

model SetDomainGreenManagerConfigRequest {
  domainName: string(name='DomainName', position='Query'),
  enable: string(name='Enable', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model SetDomainGreenManagerConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDomainGreenManagerConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetDomainGreenManagerConfigResponseBody(name='body'),
}

async function setDomainGreenManagerConfig(request: SetDomainGreenManagerConfigRequest): SetDomainGreenManagerConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDomainGreenManagerConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetDomainServerCertificateRequest {
  certName?: string(name='CertName', position='Query'),
  certType?: string(name='CertType', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  forceSet?: string(name='ForceSet', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  privateKey?: string(name='PrivateKey', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  serverCertificate?: string(name='ServerCertificate', position='Query'),
  serverCertificateStatus: string(name='ServerCertificateStatus', position='Query'),
}

model SetDomainServerCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDomainServerCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: SetDomainServerCertificateResponseBody(name='body'),
}

async function setDomainServerCertificate(request: SetDomainServerCertificateRequest): SetDomainServerCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDomainServerCertificate', 'POST', '/', 'json', false, 'json', request);
}

model SetErrorPageConfigRequest {
  customPageUrl?: string(name='CustomPageUrl', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageType: string(name='PageType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SetErrorPageConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetErrorPageConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetErrorPageConfigResponseBody(name='body'),
}

async function setErrorPageConfig(request: SetErrorPageConfigRequest): SetErrorPageConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetErrorPageConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetFileCacheExpiredConfigRequest {
  cacheContent: string(name='CacheContent', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  TTL: string(name='TTL', position='Query'),
  weight?: string(name='Weight', position='Query'),
}

model SetFileCacheExpiredConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetFileCacheExpiredConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetFileCacheExpiredConfigResponseBody(name='body'),
}

async function setFileCacheExpiredConfig(request: SetFileCacheExpiredConfigRequest): SetFileCacheExpiredConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetFileCacheExpiredConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetForceRedirectConfigRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  redirectType: string(name='RedirectType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SetForceRedirectConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetForceRedirectConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetForceRedirectConfigResponseBody(name='body'),
}

async function setForceRedirectConfig(request: SetForceRedirectConfigRequest): SetForceRedirectConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetForceRedirectConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetForwardSchemeConfigRequest {
  configId?: long(name='ConfigId', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  enable: string(name='Enable', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  schemeOrigin: string(name='SchemeOrigin', position='Query'),
  schemeOriginPort: string(name='SchemeOriginPort', position='Query'),
}

model SetForwardSchemeConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetForwardSchemeConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetForwardSchemeConfigResponseBody(name='body'),
}

async function setForwardSchemeConfig(request: SetForwardSchemeConfigRequest): SetForwardSchemeConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetForwardSchemeConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetHttpErrorPageConfigRequest {
  configId?: long(name='ConfigId', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  errorCode: string(name='ErrorCode', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageUrl: string(name='PageUrl', position='Query'),
}

model SetHttpErrorPageConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetHttpErrorPageConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetHttpErrorPageConfigResponseBody(name='body'),
}

async function setHttpErrorPageConfig(request: SetHttpErrorPageConfigRequest): SetHttpErrorPageConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetHttpErrorPageConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetHttpHeaderConfigRequest {
  configId?: long(name='ConfigId', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  headerKey: string(name='HeaderKey', position='Query'),
  headerValue: string(name='HeaderValue', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SetHttpHeaderConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetHttpHeaderConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetHttpHeaderConfigResponseBody(name='body'),
}

async function setHttpHeaderConfig(request: SetHttpHeaderConfigRequest): SetHttpHeaderConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetHttpHeaderConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetHttpsOptionConfigRequest {
  configId?: long(name='ConfigId', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  http2: string(name='Http2', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model SetHttpsOptionConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetHttpsOptionConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetHttpsOptionConfigResponseBody(name='body'),
}

async function setHttpsOptionConfig(request: SetHttpsOptionConfigRequest): SetHttpsOptionConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetHttpsOptionConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetIgnoreQueryStringConfigRequest {
  configId?: long(name='ConfigId', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  enable: string(name='Enable', position='Query'),
  hashKeyArgs?: string(name='HashKeyArgs', position='Query'),
  keepOssArgs?: string(name='KeepOssArgs', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model SetIgnoreQueryStringConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetIgnoreQueryStringConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetIgnoreQueryStringConfigResponseBody(name='body'),
}

async function setIgnoreQueryStringConfig(request: SetIgnoreQueryStringConfigRequest): SetIgnoreQueryStringConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetIgnoreQueryStringConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetIpAllowListConfigRequest {
  allowIps: string(name='AllowIps', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SetIpAllowListConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetIpAllowListConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetIpAllowListConfigResponseBody(name='body'),
}

async function setIpAllowListConfig(request: SetIpAllowListConfigRequest): SetIpAllowListConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetIpAllowListConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetIpBlackListConfigRequest {
  blockIps: string(name='BlockIps', position='Query'),
  configId?: long(name='ConfigId', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model SetIpBlackListConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetIpBlackListConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetIpBlackListConfigResponseBody(name='body'),
}

async function setIpBlackListConfig(request: SetIpBlackListConfigRequest): SetIpBlackListConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetIpBlackListConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetOptimizeConfigRequest {
  configId?: long(name='ConfigId', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  enable: string(name='Enable', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model SetOptimizeConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetOptimizeConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetOptimizeConfigResponseBody(name='body'),
}

async function setOptimizeConfig(request: SetOptimizeConfigRequest): SetOptimizeConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetOptimizeConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetPageCompressConfigRequest {
  configId?: long(name='ConfigId', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  enable: string(name='Enable', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model SetPageCompressConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetPageCompressConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetPageCompressConfigResponseBody(name='body'),
}

async function setPageCompressConfig(request: SetPageCompressConfigRequest): SetPageCompressConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetPageCompressConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetRangeConfigRequest {
  configId?: long(name='ConfigId', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  enable: string(name='Enable', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model SetRangeConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetRangeConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetRangeConfigResponseBody(name='body'),
}

async function setRangeConfig(request: SetRangeConfigRequest): SetRangeConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetRangeConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetRefererConfigRequest {
  allowEmpty?: string(name='AllowEmpty', position='Query'),
  disableAst?: string(name='DisableAst', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  referList?: string(name='ReferList', position='Query'),
  referType: string(name='ReferType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SetRefererConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetRefererConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetRefererConfigResponseBody(name='body'),
}

async function setRefererConfig(request: SetRefererConfigRequest): SetRefererConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetRefererConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetRemoveQueryStringConfigRequest {
  aliRemoveArgs: string(name='AliRemoveArgs', position='Query'),
  configId?: long(name='ConfigId', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  keepOssArgs?: string(name='KeepOssArgs', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model SetRemoveQueryStringConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetRemoveQueryStringConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetRemoveQueryStringConfigResponseBody(name='body'),
}

async function setRemoveQueryStringConfig(request: SetRemoveQueryStringConfigRequest): SetRemoveQueryStringConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetRemoveQueryStringConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetReqAuthConfigRequest {
  authRemoteDesc?: string(name='AuthRemoteDesc', position='Query'),
  authType: string(name='AuthType', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  key1?: string(name='Key1', position='Query'),
  key2?: string(name='Key2', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  timeOut?: string(name='TimeOut', position='Query'),
}

model SetReqAuthConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetReqAuthConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetReqAuthConfigResponseBody(name='body'),
}

async function setReqAuthConfig(request: SetReqAuthConfigRequest): SetReqAuthConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetReqAuthConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetReqHeaderConfigRequest {
  configId?: long(name='ConfigId', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  key: string(name='Key', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  value: string(name='Value', position='Query'),
}

model SetReqHeaderConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetReqHeaderConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetReqHeaderConfigResponseBody(name='body'),
}

async function setReqHeaderConfig(request: SetReqHeaderConfigRequest): SetReqHeaderConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetReqHeaderConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetSourceHostConfigRequest {
  backSrcDomain?: string(name='BackSrcDomain', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  enable?: string(name='Enable', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SetSourceHostConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetSourceHostConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetSourceHostConfigResponseBody(name='body'),
}

async function setSourceHostConfig(request: SetSourceHostConfigRequest): SetSourceHostConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetSourceHostConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetUserGreenManagerConfigRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  quota: string(name='Quota', position='Query'),
  ratio: string(name='Ratio', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SetUserGreenManagerConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetUserGreenManagerConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetUserGreenManagerConfigResponseBody(name='body'),
}

async function setUserGreenManagerConfig(request: SetUserGreenManagerConfigRequest): SetUserGreenManagerConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetUserGreenManagerConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetWaitingRoomConfigRequest {
  allowPct: int32(name='AllowPct', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  gapTime: int32(name='GapTime', position='Query'),
  maxTimeWait: int32(name='MaxTimeWait', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  waitUri: string(name='WaitUri', position='Query'),
  waitUrl: string(name='WaitUrl', position='Query'),
}

model SetWaitingRoomConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetWaitingRoomConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetWaitingRoomConfigResponseBody(name='body'),
}

async function setWaitingRoomConfig(request: SetWaitingRoomConfigRequest): SetWaitingRoomConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetWaitingRoomConfig', 'POST', '/', 'json', false, 'json', request);
}

model StartCdnDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model StartCdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: StartCdnDomainResponseBody(name='body'),
}

async function startCdnDomain(request: StartCdnDomainRequest): StartCdnDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartCdnDomain', 'POST', '/', 'json', false, 'json', request);
}

model StopCdnDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model StopCdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopCdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: StopCdnDomainResponseBody(name='body'),
}

async function stopCdnDomain(request: StopCdnDomainRequest): StopCdnDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopCdnDomain', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag: [ 
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCdnDeliverTaskRequest {
  deliver?: string(name='Deliver', position='Body'),
  deliverId: long(name='DeliverId', position='Body'),
  domainName?: string(name='DomainName', position='Body'),
  name?: string(name='Name', position='Body'),
  ownerId?: long(name='OwnerId', position='Query'),
  reports?: string(name='Reports', position='Body'),
  schedule?: string(name='Schedule', position='Body'),
}

model UpdateCdnDeliverTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateCdnDeliverTaskResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCdnDeliverTaskResponseBody(name='body'),
}

async function updateCdnDeliverTask(request: UpdateCdnDeliverTaskRequest): UpdateCdnDeliverTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCdnDeliverTask', 'POST', '/', 'json', true, 'form', request);
}

model UpdateCdnSubTaskRequest {
  domainName?: string(name='DomainName', maxLength=7000, position='Body'),
  endTime?: string(name='EndTime', position='Body'),
  ownerId?: long(name='OwnerId', position='Query'),
  reportIds?: string(name='ReportIds', position='Body'),
  startTime?: string(name='StartTime', position='Body'),
}

model UpdateCdnSubTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateCdnSubTaskResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCdnSubTaskResponseBody(name='body'),
}

async function updateCdnSubTask(request: UpdateCdnSubTaskRequest): UpdateCdnSubTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCdnSubTask', 'POST', '/', 'json', true, 'form', request);
}

model UpdateFCTriggerRequest {
  functionARN?: string(name='FunctionARN', position='Body'),
  notes?: string(name='Notes', position='Body'),
  ownerId?: long(name='OwnerId', position='Query'),
  roleARN?: string(name='RoleARN', position='Body'),
  sourceARN?: string(name='SourceARN', position='Body'),
  triggerARN: string(name='TriggerARN', position='Query'),
}

model UpdateFCTriggerResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateFCTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFCTriggerResponseBody(name='body'),
}

async function updateFCTrigger(request: UpdateFCTriggerRequest): UpdateFCTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFCTrigger', 'POST', '/', 'json', true, 'form', request);
}

model VerifyDomainOwnerRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  verifyType: string(name='VerifyType', position='Query'),
}

model VerifyDomainOwnerResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model VerifyDomainOwnerResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyDomainOwnerResponseBody(name='body'),
}

async function verifyDomainOwner(request: VerifyDomainOwnerRequest): VerifyDomainOwnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyDomainOwner', 'POST', '/', 'json', false, 'json', request);
}

