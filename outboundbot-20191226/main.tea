/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('outboundbot', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AssignJobsRequest {
  instanceId?: string(name='InstanceId'),
  jobGroupId?: string(name='JobGroupId'),
  strategyJson?: string(name='StrategyJson'),
  callingNumber?: [ string ](name='CallingNumber'),
  jobsJson?: [ string ](name='JobsJson'),
}

model AssignJobsResponseBody = {
  jobGroupId?: string(name='JobGroupId'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model AssignJobsResponse = {
  headers: map[string]string(name='headers'),
  body: AssignJobsResponseBody(name='body'),
}

async function assignJobsWithOptions(request: AssignJobsRequest, runtime: Util.RuntimeOptions): AssignJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AssignJobs', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function assignJobs(request: AssignJobsRequest): AssignJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return assignJobsWithOptions(request, runtime);
}

model CancelJobsRequest {
  instanceId?: string(name='InstanceId'),
  all?: boolean(name='All'),
  scenarioId?: string(name='ScenarioId'),
  jobGroupId?: string(name='JobGroupId'),
  jobId?: [ string ](name='JobId'),
  jobReferenceId?: [ string ](name='JobReferenceId'),
}

model CancelJobsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CancelJobsResponse = {
  headers: map[string]string(name='headers'),
  body: CancelJobsResponseBody(name='body'),
}

async function cancelJobsWithOptions(request: CancelJobsRequest, runtime: Util.RuntimeOptions): CancelJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelJobs', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelJobs(request: CancelJobsRequest): CancelJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelJobsWithOptions(request, runtime);
}

model CreateBatchJobsRequest {
  instanceId?: string(name='InstanceId'),
  batchJobName?: string(name='BatchJobName'),
  batchJobDescription?: string(name='BatchJobDescription'),
  scenarioId?: string(name='ScenarioId'),
  scriptId?: string(name='ScriptId'),
  strategyJson?: string(name='StrategyJson'),
  jobFilePath?: string(name='JobFilePath'),
  submitted?: boolean(name='Submitted'),
  callingNumber?: [ string ](name='CallingNumber'),
}

model CreateBatchJobsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  batchJob?: {
    creationTime?: long(name='CreationTime'),
    scenarioId?: string(name='ScenarioId'),
    strategy?: {
      type?: string(name='Type'),
      strategyName?: string(name='StrategyName'),
      maxAttemptsPerDay?: int32(name='MaxAttemptsPerDay'),
      workingTime?: [ 
        {
          endTime?: string(name='EndTime'),
          beginTime?: string(name='BeginTime'),
        }
      ](name='WorkingTime'),
      followUpStrategy?: string(name='FollowUpStrategy'),
      endTime?: long(name='EndTime'),
      startTime?: long(name='StartTime'),
      isTemplate?: boolean(name='IsTemplate'),
      customized?: string(name='Customized'),
      strategyId?: string(name='StrategyId'),
      repeatDays?: [ string ](name='RepeatDays'),
      routingStrategy?: string(name='RoutingStrategy'),
      minAttemptInterval?: int32(name='MinAttemptInterval'),
      strategyDescription?: string(name='StrategyDescription'),
      repeatBy?: string(name='RepeatBy'),
    }(name='Strategy'),
    callingNumbers?: [ string ](name='CallingNumbers'),
    jobGroupName?: string(name='JobGroupName'),
    batchJobId?: string(name='BatchJobId'),
    jobFilePath?: string(name='JobFilePath'),
    jobGroupDescription?: string(name='JobGroupDescription'),
  }(name='BatchJob'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateBatchJobsResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBatchJobsResponseBody(name='body'),
}

async function createBatchJobsWithOptions(request: CreateBatchJobsRequest, runtime: Util.RuntimeOptions): CreateBatchJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateBatchJobs', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createBatchJobs(request: CreateBatchJobsRequest): CreateBatchJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBatchJobsWithOptions(request, runtime);
}

model CreateDialogueFlowRequest {
  instanceId?: string(name='InstanceId'),
  dialogueName?: string(name='DialogueName'),
  scriptId?: string(name='ScriptId'),
  dialogueFlowType?: string(name='DialogueFlowType'),
}

model CreateDialogueFlowResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  dialogueFlowId?: string(name='DialogueFlowId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateDialogueFlowResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDialogueFlowResponseBody(name='body'),
}

async function createDialogueFlowWithOptions(request: CreateDialogueFlowRequest, runtime: Util.RuntimeOptions): CreateDialogueFlowResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDialogueFlow', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDialogueFlow(request: CreateDialogueFlowRequest): CreateDialogueFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDialogueFlowWithOptions(request, runtime);
}

model CreateGlobalQuestionRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
  globalQuestionName?: string(name='GlobalQuestionName'),
  globalQuestionType?: string(name='GlobalQuestionType'),
  questions?: string(name='Questions'),
  answers?: string(name='Answers'),
}

model CreateGlobalQuestionResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  globalQuestionId?: string(name='GlobalQuestionId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateGlobalQuestionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGlobalQuestionResponseBody(name='body'),
}

async function createGlobalQuestionWithOptions(request: CreateGlobalQuestionRequest, runtime: Util.RuntimeOptions): CreateGlobalQuestionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateGlobalQuestion', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createGlobalQuestion(request: CreateGlobalQuestionRequest): CreateGlobalQuestionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createGlobalQuestionWithOptions(request, runtime);
}

model CreateInstanceRequest {
  instanceName?: string(name='InstanceName'),
  instanceDescription?: string(name='InstanceDescription'),
  maxConcurrentConversation?: int32(name='MaxConcurrentConversation'),
}

model CreateInstanceResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  instance?: {
    creationTime?: long(name='CreationTime'),
    instanceName?: string(name='InstanceName'),
    maxConcurrentConversation?: int32(name='MaxConcurrentConversation'),
    instanceId?: string(name='InstanceId'),
    instanceDescription?: string(name='InstanceDescription'),
  }(name='Instance'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstanceWithOptions(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateInstance', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

model CreateIntentRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
  intentName?: string(name='IntentName'),
  intentDescription?: string(name='IntentDescription'),
  utterances?: string(name='Utterances'),
  keywords?: string(name='Keywords'),
}

model CreateIntentResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  intentId?: string(name='IntentId'),
}

model CreateIntentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIntentResponseBody(name='body'),
}

async function createIntentWithOptions(request: CreateIntentRequest, runtime: Util.RuntimeOptions): CreateIntentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateIntent', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createIntent(request: CreateIntentRequest): CreateIntentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIntentWithOptions(request, runtime);
}

model CreateJobGroupRequest {
  instanceId?: string(name='InstanceId'),
  jobGroupName?: string(name='JobGroupName'),
  jobGroupDescription?: string(name='JobGroupDescription'),
  scenarioId?: string(name='ScenarioId'),
  scriptId?: string(name='ScriptId'),
  strategyJson?: string(name='StrategyJson'),
  callingNumber?: [ string ](name='CallingNumber'),
}

model CreateJobGroupResponseBody = {
  jobGroup?: {
    creationTime?: long(name='CreationTime'),
    jobGroupId?: string(name='JobGroupId'),
    scenarioId?: string(name='ScenarioId'),
    strategy?: {
      type?: string(name='Type'),
      strategyName?: string(name='StrategyName'),
      maxAttemptsPerDay?: int32(name='MaxAttemptsPerDay'),
      workingTime?: [ 
        {
          endTime?: string(name='EndTime'),
          beginTime?: string(name='BeginTime'),
        }
      ](name='WorkingTime'),
      followUpStrategy?: string(name='FollowUpStrategy'),
      endTime?: long(name='EndTime'),
      startTime?: long(name='StartTime'),
      isTemplate?: boolean(name='IsTemplate'),
      customized?: string(name='Customized'),
      strategyId?: string(name='StrategyId'),
      repeatDays?: [ string ](name='RepeatDays'),
      routingStrategy?: string(name='RoutingStrategy'),
      minAttemptInterval?: int32(name='MinAttemptInterval'),
      strategyDescription?: string(name='StrategyDescription'),
      repeatBy?: string(name='RepeatBy'),
    }(name='Strategy'),
    callingNumbers?: [ string ](name='CallingNumbers'),
    jobGroupName?: string(name='JobGroupName'),
    jobFilePath?: string(name='JobFilePath'),
    jobGroupDescription?: string(name='JobGroupDescription'),
  }(name='JobGroup'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateJobGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateJobGroupResponseBody(name='body'),
}

async function createJobGroupWithOptions(request: CreateJobGroupRequest, runtime: Util.RuntimeOptions): CreateJobGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateJobGroup', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createJobGroup(request: CreateJobGroupRequest): CreateJobGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createJobGroupWithOptions(request, runtime);
}

model CreateOutboundCallNumberRequest {
  instanceId?: string(name='InstanceId'),
  number?: string(name='Number'),
  rateLimitPeriod?: int32(name='RateLimitPeriod'),
  rateLimitCount?: int32(name='RateLimitCount'),
}

model CreateOutboundCallNumberResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  outboundCallNumberId?: string(name='OutboundCallNumberId'),
}

model CreateOutboundCallNumberResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOutboundCallNumberResponseBody(name='body'),
}

async function createOutboundCallNumberWithOptions(request: CreateOutboundCallNumberRequest, runtime: Util.RuntimeOptions): CreateOutboundCallNumberResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateOutboundCallNumber', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createOutboundCallNumber(request: CreateOutboundCallNumberRequest): CreateOutboundCallNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOutboundCallNumberWithOptions(request, runtime);
}

model CreateScriptRequest {
  instanceId?: string(name='InstanceId'),
  scriptName?: string(name='ScriptName'),
  scriptDescription?: string(name='ScriptDescription'),
  industry?: string(name='Industry'),
  scene?: string(name='Scene'),
}

model CreateScriptResponseBody = {
  script?: {
    status?: string(name='Status'),
    updateTime?: long(name='UpdateTime'),
    industry?: string(name='Industry'),
    scriptDescription?: string(name='ScriptDescription'),
    isDrafted?: boolean(name='IsDrafted'),
    debugStatus?: string(name='DebugStatus'),
    scriptId?: string(name='ScriptId'),
    isDebugDrafted?: boolean(name='IsDebugDrafted'),
    scriptName?: string(name='ScriptName'),
    scene?: string(name='Scene'),
  }(name='Script'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateScriptResponse = {
  headers: map[string]string(name='headers'),
  body: CreateScriptResponseBody(name='body'),
}

async function createScriptWithOptions(request: CreateScriptRequest, runtime: Util.RuntimeOptions): CreateScriptResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateScript', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createScript(request: CreateScriptRequest): CreateScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return createScriptWithOptions(request, runtime);
}

model CreateScriptWaveformRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
  scriptContent?: string(name='ScriptContent'),
  fileId?: string(name='FileId'),
  fileName?: string(name='FileName'),
}

model CreateScriptWaveformResponseBody = {
  scriptWaveformId?: string(name='ScriptWaveformId'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateScriptWaveformResponse = {
  headers: map[string]string(name='headers'),
  body: CreateScriptWaveformResponseBody(name='body'),
}

async function createScriptWaveformWithOptions(request: CreateScriptWaveformRequest, runtime: Util.RuntimeOptions): CreateScriptWaveformResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateScriptWaveform', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createScriptWaveform(request: CreateScriptWaveformRequest): CreateScriptWaveformResponse {
  var runtime = new Util.RuntimeOptions{};
  return createScriptWaveformWithOptions(request, runtime);
}

model CreateTagRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
  tagName?: string(name='TagName'),
  tagGroup?: string(name='TagGroup'),
}

model CreateTagResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  tagId?: string(name='TagId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateTagResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTagResponseBody(name='body'),
}

async function createTagWithOptions(request: CreateTagRequest, runtime: Util.RuntimeOptions): CreateTagResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateTag', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createTag(request: CreateTagRequest): CreateTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTagWithOptions(request, runtime);
}

model DeleteDialogueFlowRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
  dialogueFlowId?: string(name='DialogueFlowId'),
}

model DeleteDialogueFlowResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteDialogueFlowResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDialogueFlowResponseBody(name='body'),
}

async function deleteDialogueFlowWithOptions(request: DeleteDialogueFlowRequest, runtime: Util.RuntimeOptions): DeleteDialogueFlowResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDialogueFlow', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDialogueFlow(request: DeleteDialogueFlowRequest): DeleteDialogueFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDialogueFlowWithOptions(request, runtime);
}

model DeleteGlobalQuestionRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
  globalQuestionId?: string(name='GlobalQuestionId'),
}

model DeleteGlobalQuestionResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteGlobalQuestionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGlobalQuestionResponseBody(name='body'),
}

async function deleteGlobalQuestionWithOptions(request: DeleteGlobalQuestionRequest, runtime: Util.RuntimeOptions): DeleteGlobalQuestionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteGlobalQuestion', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteGlobalQuestion(request: DeleteGlobalQuestionRequest): DeleteGlobalQuestionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGlobalQuestionWithOptions(request, runtime);
}

model DeleteInstanceRequest {
  instanceId?: string(name='InstanceId'),
}

model DeleteInstanceResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstanceWithOptions(request: DeleteInstanceRequest, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteInstance', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstanceWithOptions(request, runtime);
}

model DeleteIntentRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
  intentId?: string(name='IntentId'),
}

model DeleteIntentResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteIntentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIntentResponseBody(name='body'),
}

async function deleteIntentWithOptions(request: DeleteIntentRequest, runtime: Util.RuntimeOptions): DeleteIntentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteIntent', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteIntent(request: DeleteIntentRequest): DeleteIntentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIntentWithOptions(request, runtime);
}

model DeleteJobGroupRequest {
  instanceId?: string(name='InstanceId'),
  jobGroupId?: string(name='JobGroupId'),
}

model DeleteJobGroupResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteJobGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteJobGroupResponseBody(name='body'),
}

async function deleteJobGroupWithOptions(request: DeleteJobGroupRequest, runtime: Util.RuntimeOptions): DeleteJobGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteJobGroup', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteJobGroup(request: DeleteJobGroupRequest): DeleteJobGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteJobGroupWithOptions(request, runtime);
}

model DeleteOutboundCallNumberRequest {
  instanceId?: string(name='InstanceId'),
  outboundCallNumberId?: string(name='OutboundCallNumberId'),
}

model DeleteOutboundCallNumberResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteOutboundCallNumberResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteOutboundCallNumberResponseBody(name='body'),
}

async function deleteOutboundCallNumberWithOptions(request: DeleteOutboundCallNumberRequest, runtime: Util.RuntimeOptions): DeleteOutboundCallNumberResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteOutboundCallNumber', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteOutboundCallNumber(request: DeleteOutboundCallNumberRequest): DeleteOutboundCallNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOutboundCallNumberWithOptions(request, runtime);
}

model DeleteScriptRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
}

model DeleteScriptResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteScriptResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteScriptResponseBody(name='body'),
}

async function deleteScriptWithOptions(request: DeleteScriptRequest, runtime: Util.RuntimeOptions): DeleteScriptResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteScript', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteScript(request: DeleteScriptRequest): DeleteScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteScriptWithOptions(request, runtime);
}

model DeleteScriptWaveformRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
  scriptWaveformId?: string(name='ScriptWaveformId'),
}

model DeleteScriptWaveformResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteScriptWaveformResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteScriptWaveformResponseBody(name='body'),
}

async function deleteScriptWaveformWithOptions(request: DeleteScriptWaveformRequest, runtime: Util.RuntimeOptions): DeleteScriptWaveformResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteScriptWaveform', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteScriptWaveform(request: DeleteScriptWaveformRequest): DeleteScriptWaveformResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteScriptWaveformWithOptions(request, runtime);
}

model DescribeGlobalQuestionRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
  globalQuestionId?: string(name='GlobalQuestionId'),
}

model DescribeGlobalQuestionResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  globalQuestion?: {
    globalQuestionId?: string(name='GlobalQuestionId'),
    answers?: string(name='Answers'),
    globalQuestionType?: string(name='GlobalQuestionType'),
    globalQuestionName?: string(name='GlobalQuestionName'),
    questions?: string(name='Questions'),
    scriptId?: string(name='ScriptId'),
  }(name='GlobalQuestion'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DescribeGlobalQuestionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGlobalQuestionResponseBody(name='body'),
}

async function describeGlobalQuestionWithOptions(request: DescribeGlobalQuestionRequest, runtime: Util.RuntimeOptions): DescribeGlobalQuestionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGlobalQuestion', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGlobalQuestion(request: DescribeGlobalQuestionRequest): DescribeGlobalQuestionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGlobalQuestionWithOptions(request, runtime);
}

model DescribeInstanceRequest {
  instanceId?: string(name='InstanceId'),
}

model DescribeInstanceResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  instance?: {
    creationTime?: long(name='CreationTime'),
    instanceName?: string(name='InstanceName'),
    maxConcurrentConversation?: int32(name='MaxConcurrentConversation'),
    instanceId?: string(name='InstanceId'),
    instanceDescription?: string(name='InstanceDescription'),
  }(name='Instance'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DescribeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceResponseBody(name='body'),
}

async function describeInstanceWithOptions(request: DescribeInstanceRequest, runtime: Util.RuntimeOptions): DescribeInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstance', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstance(request: DescribeInstanceRequest): DescribeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceWithOptions(request, runtime);
}

model DescribeIntentRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
  intentId?: string(name='IntentId'),
}

model DescribeIntentResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  intent?: {
    utterances?: string(name='Utterances'),
    intentDescription?: string(name='IntentDescription'),
    updateTime?: long(name='UpdateTime'),
    createTime?: long(name='CreateTime'),
    keywords?: string(name='Keywords'),
    scriptId?: string(name='ScriptId'),
    intentId?: string(name='IntentId'),
    intentName?: string(name='IntentName'),
  }(name='Intent'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DescribeIntentResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIntentResponseBody(name='body'),
}

async function describeIntentWithOptions(request: DescribeIntentRequest, runtime: Util.RuntimeOptions): DescribeIntentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeIntent', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeIntent(request: DescribeIntentRequest): DescribeIntentResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIntentWithOptions(request, runtime);
}

model DescribeJobRequest {
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
}

model DescribeJobResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  job?: {
    status?: string(name='Status'),
    callingNumbers?: [ string ](name='CallingNumbers'),
    summary?: [ 
      {
        summaryName?: string(name='SummaryName'),
        category?: string(name='Category'),
        content?: string(name='Content'),
      }
    ](name='Summary'),
    contacts?: [ 
      {
        phoneNumber?: string(name='PhoneNumber'),
        state?: string(name='State'),
        contactId?: string(name='ContactId'),
        honorific?: string(name='Honorific'),
        jobId?: string(name='JobId'),
        contactName?: string(name='ContactName'),
        role?: string(name='Role'),
        referenceId?: string(name='ReferenceId'),
      }
    ](name='Contacts'),
    priority?: int32(name='Priority'),
    systemPriority?: int32(name='SystemPriority'),
    failureReason?: string(name='FailureReason'),
    extras?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Extras'),
    referenceId?: string(name='ReferenceId'),
    scenarioId?: string(name='ScenarioId'),
    jobGroupId?: string(name='JobGroupId'),
    tasks?: [ 
      {
        status?: string(name='Status'),
        planedTime?: long(name='PlanedTime'),
        chatbotId?: string(name='ChatbotId'),
        actualTime?: long(name='ActualTime'),
        calledNumber?: string(name='CalledNumber'),
        scenarioId?: string(name='ScenarioId'),
        contact?: {
          phoneNumber?: string(name='PhoneNumber'),
          state?: string(name='State'),
          contactId?: string(name='ContactId'),
          honorific?: string(name='Honorific'),
          jobId?: string(name='JobId'),
          contactName?: string(name='ContactName'),
          role?: string(name='Role'),
          referenceId?: string(name='ReferenceId'),
        }(name='Contact'),
        jobId?: string(name='JobId'),
        callId?: string(name='CallId'),
        callingNumber?: string(name='CallingNumber'),
        brief?: string(name='Brief'),
        duration?: int32(name='Duration'),
        taskId?: string(name='TaskId'),
        conversation?: [ 
          {
            summary?: [ 
              {
                summaryName?: string(name='SummaryName'),
                category?: string(name='Category'),
                content?: string(name='Content'),
              }
            ](name='Summary'),
            speaker?: string(name='Speaker'),
            timestamp?: long(name='Timestamp'),
            script?: string(name='Script'),
          }
        ](name='Conversation'),
      }
    ](name='Tasks'),
    strategyId?: string(name='StrategyId'),
    jobId?: string(name='JobId'),
  }(name='Job'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DescribeJobResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeJobResponseBody(name='body'),
}

async function describeJobWithOptions(request: DescribeJobRequest, runtime: Util.RuntimeOptions): DescribeJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeJob', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeJob(request: DescribeJobRequest): DescribeJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeJobWithOptions(request, runtime);
}

model DescribeJobGroupRequest {
  instanceId?: string(name='InstanceId'),
  jobGroupId?: string(name='JobGroupId'),
  briefTypes?: [ string ](name='BriefTypes'),
}

model DescribeJobGroupResponseBody = {
  jobGroup?: {
    creationTime?: long(name='CreationTime'),
    jobGroupId?: string(name='JobGroupId'),
    scenarioId?: string(name='ScenarioId'),
    strategy?: {
      type?: string(name='Type'),
      strategyName?: string(name='StrategyName'),
      maxAttemptsPerDay?: int32(name='MaxAttemptsPerDay'),
      workingTime?: [ 
        {
          endTime?: string(name='EndTime'),
          beginTime?: string(name='BeginTime'),
        }
      ](name='WorkingTime'),
      followUpStrategy?: string(name='FollowUpStrategy'),
      endTime?: long(name='EndTime'),
      startTime?: long(name='StartTime'),
      isTemplate?: boolean(name='IsTemplate'),
      customized?: string(name='Customized'),
      strategyId?: string(name='StrategyId'),
      repeatDays?: [ string ](name='RepeatDays'),
      routingStrategy?: string(name='RoutingStrategy'),
      minAttemptInterval?: int32(name='MinAttemptInterval'),
      strategyDescription?: string(name='StrategyDescription'),
      repeatBy?: string(name='RepeatBy'),
    }(name='Strategy'),
    callingNumbers?: [ string ](name='CallingNumbers'),
    progress?: {
      status?: string(name='Status'),
      failed?: int32(name='Failed'),
      totalCompleted?: int32(name='TotalCompleted'),
      briefs?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Briefs'),
      paused?: int32(name='Paused'),
      cancelled?: int32(name='Cancelled'),
      totalNotAnswered?: int32(name='TotalNotAnswered'),
      startTime?: long(name='StartTime'),
      executing?: int32(name='Executing'),
      categories?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Categories'),
      totalJobs?: int32(name='TotalJobs'),
      duration?: int32(name='Duration'),
      scheduling?: int32(name='Scheduling'),
    }(name='Progress'),
    jobGroupName?: string(name='JobGroupName'),
    jobFilePath?: string(name='JobFilePath'),
    scriptId?: string(name='ScriptId'),
    jobGroupDescription?: string(name='JobGroupDescription'),
    scriptName?: string(name='ScriptName'),
  }(name='JobGroup'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DescribeJobGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeJobGroupResponseBody(name='body'),
}

async function describeJobGroupWithOptions(request: DescribeJobGroupRequest, runtime: Util.RuntimeOptions): DescribeJobGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeJobGroup', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeJobGroup(request: DescribeJobGroupRequest): DescribeJobGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeJobGroupWithOptions(request, runtime);
}

model DescribeScriptRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
}

model DescribeScriptResponseBody = {
  script?: {
    status?: string(name='Status'),
    updateTime?: long(name='UpdateTime'),
    industry?: string(name='Industry'),
    scriptDescription?: string(name='ScriptDescription'),
    isDrafted?: boolean(name='IsDrafted'),
    debugStatus?: string(name='DebugStatus'),
    scriptId?: string(name='ScriptId'),
    isDebugDrafted?: boolean(name='IsDebugDrafted'),
    scriptName?: string(name='ScriptName'),
    scene?: string(name='Scene'),
  }(name='Script'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DescribeScriptResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScriptResponseBody(name='body'),
}

async function describeScriptWithOptions(request: DescribeScriptRequest, runtime: Util.RuntimeOptions): DescribeScriptResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeScript', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeScript(request: DescribeScriptRequest): DescribeScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScriptWithOptions(request, runtime);
}

model DescribeScriptVoiceConfigRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
  scriptVoiceConfigId?: string(name='ScriptVoiceConfigId'),
}

model DescribeScriptVoiceConfigResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  scriptVoiceConfig?: {
    type?: string(name='Type'),
    scriptVoiceConfigId?: string(name='ScriptVoiceConfigId'),
    scriptContent?: string(name='ScriptContent'),
    instanceId?: string(name='InstanceId'),
    scriptId?: string(name='ScriptId'),
    scriptWaveformRelation?: string(name='ScriptWaveformRelation'),
    source?: string(name='Source'),
  }(name='ScriptVoiceConfig'),
}

model DescribeScriptVoiceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScriptVoiceConfigResponseBody(name='body'),
}

async function describeScriptVoiceConfigWithOptions(request: DescribeScriptVoiceConfigRequest, runtime: Util.RuntimeOptions): DescribeScriptVoiceConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeScriptVoiceConfig', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeScriptVoiceConfig(request: DescribeScriptVoiceConfigRequest): DescribeScriptVoiceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScriptVoiceConfigWithOptions(request, runtime);
}

model DescribeTagHitsSummaryRequest {
  instanceId?: string(name='InstanceId'),
  jobGroupId?: string(name='JobGroupId'),
}

model DescribeTagHitsSummaryResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  tagGroups?: [ 
    {
      tagGroup?: string(name='TagGroup'),
      tagGroupIndex?: int32(name='TagGroupIndex'),
      scriptId?: string(name='ScriptId'),
      id?: string(name='Id'),
    }
  ](name='TagGroups'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  tagHitsList?: [ 
    {
      hitCount?: int32(name='HitCount'),
      tagGroup?: string(name='TagGroup'),
      tagName?: string(name='TagName'),
    }
  ](name='TagHitsList'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DescribeTagHitsSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTagHitsSummaryResponseBody(name='body'),
}

async function describeTagHitsSummaryWithOptions(request: DescribeTagHitsSummaryRequest, runtime: Util.RuntimeOptions): DescribeTagHitsSummaryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTagHitsSummary', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTagHitsSummary(request: DescribeTagHitsSummaryRequest): DescribeTagHitsSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTagHitsSummaryWithOptions(request, runtime);
}

model DescribeTTSConfigRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
}

model DescribeTTSConfigResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  TTSConfig?: {
    voice?: string(name='Voice'),
    speechRate?: string(name='SpeechRate'),
    volume?: string(name='Volume'),
    instanceId?: string(name='InstanceId'),
    scriptId?: string(name='ScriptId'),
    id?: string(name='Id'),
  }(name='TTSConfig'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DescribeTTSConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTTSConfigResponseBody(name='body'),
}

async function describeTTSConfigWithOptions(request: DescribeTTSConfigRequest, runtime: Util.RuntimeOptions): DescribeTTSConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTTSConfig', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTTSConfig(request: DescribeTTSConfigRequest): DescribeTTSConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTTSConfigWithOptions(request, runtime);
}

model DescribeTTSDemoRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
  voice?: string(name='Voice'),
  text?: string(name='Text'),
  speechRate?: int32(name='SpeechRate'),
  volume?: int32(name='Volume'),
}

model DescribeTTSDemoResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  auditionUrl?: string(name='AuditionUrl'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DescribeTTSDemoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTTSDemoResponseBody(name='body'),
}

async function describeTTSDemoWithOptions(request: DescribeTTSDemoRequest, runtime: Util.RuntimeOptions): DescribeTTSDemoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTTSDemo', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTTSDemo(request: DescribeTTSDemoRequest): DescribeTTSDemoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTTSDemoWithOptions(request, runtime);
}

model DialogueRequest {
  instanceId?: string(name='InstanceId'),
  callId?: string(name='CallId'),
  callType?: string(name='CallType'),
  scenarioId?: string(name='ScenarioId'),
  taskId?: string(name='TaskId'),
  utterance?: string(name='Utterance'),
  actionKey?: string(name='ActionKey'),
  actionParams?: string(name='ActionParams'),
  callingNumber?: string(name='CallingNumber'),
  calledNumber?: string(name='CalledNumber'),
}

model DialogueResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  feedback?: {
    action?: string(name='Action'),
    interruptible?: boolean(name='Interruptible'),
    actionParams?: string(name='ActionParams'),
    content?: string(name='Content'),
  }(name='Feedback'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DialogueResponse = {
  headers: map[string]string(name='headers'),
  body: DialogueResponseBody(name='body'),
}

async function dialogueWithOptions(request: DialogueRequest, runtime: Util.RuntimeOptions): DialogueResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('Dialogue', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function dialogue(request: DialogueRequest): DialogueResponse {
  var runtime = new Util.RuntimeOptions{};
  return dialogueWithOptions(request, runtime);
}

model DownloadRecordingRequest {
  instanceId?: string(name='InstanceId'),
  taskId?: string(name='TaskId'),
}

model DownloadRecordingResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  downloadParams?: {
    signatureUrl?: string(name='SignatureUrl'),
    fileName?: string(name='FileName'),
  }(name='DownloadParams'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DownloadRecordingResponse = {
  headers: map[string]string(name='headers'),
  body: DownloadRecordingResponseBody(name='body'),
}

async function downloadRecordingWithOptions(request: DownloadRecordingRequest, runtime: Util.RuntimeOptions): DownloadRecordingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DownloadRecording', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function downloadRecording(request: DownloadRecordingRequest): DownloadRecordingResponse {
  var runtime = new Util.RuntimeOptions{};
  return downloadRecordingWithOptions(request, runtime);
}

model DuplicateScriptRequest {
  instanceId?: string(name='InstanceId'),
  sourceScriptId?: string(name='SourceScriptId'),
  name?: string(name='Name'),
}

model DuplicateScriptResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  scriptId?: string(name='ScriptId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DuplicateScriptResponse = {
  headers: map[string]string(name='headers'),
  body: DuplicateScriptResponseBody(name='body'),
}

async function duplicateScriptWithOptions(request: DuplicateScriptRequest, runtime: Util.RuntimeOptions): DuplicateScriptResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DuplicateScript', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function duplicateScript(request: DuplicateScriptRequest): DuplicateScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return duplicateScriptWithOptions(request, runtime);
}

model ExportScriptRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
}

model ExportScriptResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  downloadParams?: {
    signatureUrl?: string(name='SignatureUrl'),
  }(name='DownloadParams'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ExportScriptResponse = {
  headers: map[string]string(name='headers'),
  body: ExportScriptResponseBody(name='body'),
}

async function exportScriptWithOptions(request: ExportScriptRequest, runtime: Util.RuntimeOptions): ExportScriptResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExportScript', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function exportScript(request: ExportScriptRequest): ExportScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportScriptWithOptions(request, runtime);
}

model ImportScriptRequest {
  instanceId?: string(name='InstanceId'),
  signatureUrl?: string(name='SignatureUrl'),
}

model ImportScriptResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  scriptId?: string(name='ScriptId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ImportScriptResponse = {
  headers: map[string]string(name='headers'),
  body: ImportScriptResponseBody(name='body'),
}

async function importScriptWithOptions(request: ImportScriptRequest, runtime: Util.RuntimeOptions): ImportScriptResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ImportScript', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function importScript(request: ImportScriptRequest): ImportScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return importScriptWithOptions(request, runtime);
}

model InflightTaskTimeoutRequest {
  instanceId?: string(name='InstanceId'),
  taskId?: string(name='TaskId'),
  instanceOwnerId?: long(name='InstanceOwnerId'),
}

model InflightTaskTimeoutResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model InflightTaskTimeoutResponse = {
  headers: map[string]string(name='headers'),
  body: InflightTaskTimeoutResponseBody(name='body'),
}

async function inflightTaskTimeoutWithOptions(request: InflightTaskTimeoutRequest, runtime: Util.RuntimeOptions): InflightTaskTimeoutResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('InflightTaskTimeout', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function inflightTaskTimeout(request: InflightTaskTimeoutRequest): InflightTaskTimeoutResponse {
  var runtime = new Util.RuntimeOptions{};
  return inflightTaskTimeoutWithOptions(request, runtime);
}

model ListDialogueFlowsRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
}

model ListDialogueFlowsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  dialogueFlows?: [ 
    {
      dialogueFlowDefinition?: string(name='DialogueFlowDefinition'),
      dialogueFlowType?: string(name='DialogueFlowType'),
      dialogueFlowId?: string(name='DialogueFlowId'),
      dialogueFlowName?: string(name='DialogueFlowName'),
      scriptId?: string(name='ScriptId'),
      scriptVersion?: string(name='ScriptVersion'),
    }
  ](name='DialogueFlows'),
}

model ListDialogueFlowsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDialogueFlowsResponseBody(name='body'),
}

async function listDialogueFlowsWithOptions(request: ListDialogueFlowsRequest, runtime: Util.RuntimeOptions): ListDialogueFlowsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListDialogueFlows', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listDialogueFlows(request: ListDialogueFlowsRequest): ListDialogueFlowsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDialogueFlowsWithOptions(request, runtime);
}

model ListGlobalQuestionsRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListGlobalQuestionsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  globalQuestions?: {
    list?: [ 
      {
        globalQuestionId?: string(name='GlobalQuestionId'),
        answers?: string(name='Answers'),
        globalQuestionType?: string(name='GlobalQuestionType'),
        globalQuestionName?: string(name='GlobalQuestionName'),
        questions?: string(name='Questions'),
        scriptId?: string(name='ScriptId'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='GlobalQuestions'),
  success?: boolean(name='Success'),
}

model ListGlobalQuestionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListGlobalQuestionsResponseBody(name='body'),
}

async function listGlobalQuestionsWithOptions(request: ListGlobalQuestionsRequest, runtime: Util.RuntimeOptions): ListGlobalQuestionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListGlobalQuestions', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listGlobalQuestions(request: ListGlobalQuestionsRequest): ListGlobalQuestionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGlobalQuestionsWithOptions(request, runtime);
}

model ListInstancesResponseBody = {
  instances?: [ 
    {
      creationTime?: long(name='CreationTime'),
      instanceName?: string(name='InstanceName'),
      maxConcurrentConversation?: int32(name='MaxConcurrentConversation'),
      instanceId?: string(name='InstanceId'),
      instanceDescription?: string(name='InstanceDescription'),
    }
  ](name='Instances'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstancesWithOptions(runtime: Util.RuntimeOptions): ListInstancesResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('ListInstances', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listInstances(): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstancesWithOptions(runtime);
}

model ListIntentsRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
  keyword?: string(name='Keyword'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListIntentsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  intents?: {
    list?: [ 
      {
        utterances?: string(name='Utterances'),
        intentDescription?: string(name='IntentDescription'),
        updateTime?: long(name='UpdateTime'),
        createTime?: long(name='CreateTime'),
        keywords?: string(name='Keywords'),
        scriptId?: string(name='ScriptId'),
        intentId?: string(name='IntentId'),
        intentName?: string(name='IntentName'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Intents'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ListIntentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListIntentsResponseBody(name='body'),
}

async function listIntentsWithOptions(request: ListIntentsRequest, runtime: Util.RuntimeOptions): ListIntentsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListIntents', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listIntents(request: ListIntentsRequest): ListIntentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIntentsWithOptions(request, runtime);
}

model ListJobGroupsRequest {
  instanceId?: string(name='InstanceId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListJobGroupsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  jobGroups?: {
    list?: [ 
      {
        creationTime?: long(name='CreationTime'),
        jobGroupId?: string(name='JobGroupId'),
        strategy?: {
          endTime?: long(name='EndTime'),
          startTime?: long(name='StartTime'),
        }(name='Strategy'),
        progress?: {
          status?: string(name='Status'),
          totalNotAnswered?: int32(name='TotalNotAnswered'),
          startTime?: long(name='StartTime'),
          totalCompleted?: int32(name='TotalCompleted'),
          totalJobs?: int32(name='TotalJobs'),
          duration?: int32(name='Duration'),
        }(name='Progress'),
        jobGroupName?: string(name='JobGroupName'),
        jobGroupDescription?: string(name='JobGroupDescription'),
        scriptId?: string(name='ScriptId'),
        scriptName?: string(name='ScriptName'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='JobGroups'),
}

model ListJobGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListJobGroupsResponseBody(name='body'),
}

async function listJobGroupsWithOptions(request: ListJobGroupsRequest, runtime: Util.RuntimeOptions): ListJobGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListJobGroups', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listJobGroups(request: ListJobGroupsRequest): ListJobGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listJobGroupsWithOptions(request, runtime);
}

model ListJobsRequest {
  instanceId?: string(name='InstanceId'),
  jobId?: [ string ](name='JobId'),
}

model ListJobsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  jobs?: [ 
    {
      status?: string(name='Status'),
      callingNumbers?: [ string ](name='CallingNumbers'),
      summary?: [ 
        {
          summaryName?: string(name='SummaryName'),
          category?: string(name='Category'),
          content?: string(name='Content'),
        }
      ](name='Summary'),
      contacts?: [ 
        {
          phoneNumber?: string(name='PhoneNumber'),
          state?: string(name='State'),
          contactId?: string(name='ContactId'),
          honorific?: string(name='Honorific'),
          jobId?: string(name='JobId'),
          contactName?: string(name='ContactName'),
          role?: string(name='Role'),
          referenceId?: string(name='ReferenceId'),
        }
      ](name='Contacts'),
      priority?: int32(name='Priority'),
      systemPriority?: int32(name='SystemPriority'),
      failureReason?: string(name='FailureReason'),
      extras?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Extras'),
      referenceId?: string(name='ReferenceId'),
      scenarioId?: string(name='ScenarioId'),
      jobGroupId?: string(name='JobGroupId'),
      tasks?: [ 
        {
          status?: string(name='Status'),
          planedTime?: long(name='PlanedTime'),
          chatbotId?: string(name='ChatbotId'),
          actualTime?: long(name='ActualTime'),
          calledNumber?: string(name='CalledNumber'),
          scenarioId?: string(name='ScenarioId'),
          contact?: {
            phoneNumber?: string(name='PhoneNumber'),
            state?: string(name='State'),
            contactId?: string(name='ContactId'),
            honorific?: string(name='Honorific'),
            jobId?: string(name='JobId'),
            contactName?: string(name='ContactName'),
            role?: string(name='Role'),
            referenceId?: string(name='ReferenceId'),
          }(name='Contact'),
          jobId?: string(name='JobId'),
          callId?: string(name='CallId'),
          callingNumber?: string(name='CallingNumber'),
          brief?: string(name='Brief'),
          duration?: int32(name='Duration'),
          taskId?: string(name='TaskId'),
          conversation?: [ 
            {
              summary?: [ 
                {
                  summaryName?: string(name='SummaryName'),
                  category?: string(name='Category'),
                  content?: string(name='Content'),
                }
              ](name='Summary'),
              speaker?: string(name='Speaker'),
              timestamp?: long(name='Timestamp'),
              script?: string(name='Script'),
            }
          ](name='Conversation'),
        }
      ](name='Tasks'),
      strategyId?: string(name='StrategyId'),
      jobId?: string(name='JobId'),
    }
  ](name='Jobs'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ListJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListJobsResponseBody(name='body'),
}

async function listJobsWithOptions(request: ListJobsRequest, runtime: Util.RuntimeOptions): ListJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListJobs', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listJobs(request: ListJobsRequest): ListJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listJobsWithOptions(request, runtime);
}

model ListJobsByGroupRequest {
  instanceId?: string(name='InstanceId'),
  jobGroupId?: string(name='JobGroupId'),
  jobStatus?: string(name='JobStatus'),
  jobFailureReason?: string(name='JobFailureReason'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListJobsByGroupResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  jobs?: {
    list?: [ 
      {
        status?: string(name='Status'),
        callingNumbers?: [ string ](name='CallingNumbers'),
        summary?: [ 
          {
            summaryName?: string(name='SummaryName'),
            jobGroupId?: string(name='JobGroupId'),
            jobId?: string(name='JobId'),
            category?: string(name='Category'),
            taskId?: string(name='TaskId'),
            content?: string(name='Content'),
            conversationDetailId?: string(name='ConversationDetailId'),
            summaryId?: string(name='SummaryId'),
          }
        ](name='Summary'),
        contacts?: [ 
          {
            phoneNumber?: string(name='PhoneNumber'),
            state?: string(name='State'),
            contactId?: string(name='ContactId'),
            honorific?: string(name='Honorific'),
            jobId?: string(name='JobId'),
            contactName?: string(name='ContactName'),
            role?: string(name='Role'),
            referenceId?: string(name='ReferenceId'),
          }
        ](name='Contacts'),
        priority?: int32(name='Priority'),
        systemPriority?: int32(name='SystemPriority'),
        failureReason?: string(name='FailureReason'),
        extras?: [ 
          {
            key?: string(name='Key'),
            value?: string(name='Value'),
          }
        ](name='Extras'),
        referenceId?: string(name='ReferenceId'),
        scenarioId?: string(name='ScenarioId'),
        jobGroupId?: string(name='JobGroupId'),
        strategyId?: string(name='StrategyId'),
        jobId?: string(name='JobId'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Jobs'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ListJobsByGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListJobsByGroupResponseBody(name='body'),
}

async function listJobsByGroupWithOptions(request: ListJobsByGroupRequest, runtime: Util.RuntimeOptions): ListJobsByGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListJobsByGroup', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listJobsByGroup(request: ListJobsByGroupRequest): ListJobsByGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return listJobsByGroupWithOptions(request, runtime);
}

model ListMediaRequest {
  instanceId?: string(name='InstanceId'),
  namePrefix?: string(name='NamePrefix'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListMediaResponseBody = {
  mediaList?: [ 
    {
      name?: string(name='Name'),
      mediaId?: string(name='MediaId'),
    }
  ](name='MediaList'),
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ListMediaResponse = {
  headers: map[string]string(name='headers'),
  body: ListMediaResponseBody(name='body'),
}

async function listMediaWithOptions(request: ListMediaRequest, runtime: Util.RuntimeOptions): ListMediaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListMedia', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listMedia(request: ListMediaRequest): ListMediaResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMediaWithOptions(request, runtime);
}

model ListOutboundCallNumbersRequest {
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListOutboundCallNumbersResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  outboundCallNumbers?: {
    list?: [ 
      {
        rateLimitCount?: string(name='RateLimitCount'),
        number?: string(name='Number'),
        outboundCallNumberId?: string(name='OutboundCallNumberId'),
        rateLimitPeriod?: string(name='RateLimitPeriod'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='OutboundCallNumbers'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ListOutboundCallNumbersResponse = {
  headers: map[string]string(name='headers'),
  body: ListOutboundCallNumbersResponseBody(name='body'),
}

async function listOutboundCallNumbersWithOptions(request: ListOutboundCallNumbersRequest, runtime: Util.RuntimeOptions): ListOutboundCallNumbersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListOutboundCallNumbers', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listOutboundCallNumbers(request: ListOutboundCallNumbersRequest): ListOutboundCallNumbersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOutboundCallNumbersWithOptions(request, runtime);
}

model ListSchedulerInstancesRequest {
  instanceOwnerId?: long(name='InstanceOwnerId'),
}

model ListSchedulerInstancesResponseBody = {
  schedulerInstances?: [ 
    {
      business?: string(name='Business'),
      maxConcurrency?: int32(name='MaxConcurrency'),
      instanceId?: string(name='InstanceId'),
      ownerId?: string(name='OwnerId'),
    }
  ](name='SchedulerInstances'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ListSchedulerInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSchedulerInstancesResponseBody(name='body'),
}

async function listSchedulerInstancesWithOptions(request: ListSchedulerInstancesRequest, runtime: Util.RuntimeOptions): ListSchedulerInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSchedulerInstances', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSchedulerInstances(request: ListSchedulerInstancesRequest): ListSchedulerInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSchedulerInstancesWithOptions(request, runtime);
}

model ListScriptPublishHistoriesRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListScriptPublishHistoriesResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  scriptPublishHistories?: {
    list?: [ 
      {
        publishTime?: long(name='PublishTime'),
        description?: string(name='Description'),
        instanceId?: string(name='InstanceId'),
        scriptId?: string(name='ScriptId'),
        scriptVersion?: string(name='ScriptVersion'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='ScriptPublishHistories'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ListScriptPublishHistoriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListScriptPublishHistoriesResponseBody(name='body'),
}

async function listScriptPublishHistoriesWithOptions(request: ListScriptPublishHistoriesRequest, runtime: Util.RuntimeOptions): ListScriptPublishHistoriesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListScriptPublishHistories', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listScriptPublishHistories(request: ListScriptPublishHistoriesRequest): ListScriptPublishHistoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listScriptPublishHistoriesWithOptions(request, runtime);
}

model ListScriptsRequest {
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListScriptsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  scripts?: {
    list?: [ 
      {
        status?: string(name='Status'),
        updateTime?: long(name='UpdateTime'),
        scriptId?: string(name='ScriptId'),
        isDebugDrafted?: boolean(name='IsDebugDrafted'),
        industry?: string(name='Industry'),
        scriptDescription?: string(name='ScriptDescription'),
        isDrafted?: boolean(name='IsDrafted'),
        debugStatus?: string(name='DebugStatus'),
        rejectReason?: string(name='RejectReason'),
        scriptName?: string(name='ScriptName'),
        scene?: string(name='Scene'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Scripts'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ListScriptsResponse = {
  headers: map[string]string(name='headers'),
  body: ListScriptsResponseBody(name='body'),
}

async function listScriptsWithOptions(request: ListScriptsRequest, runtime: Util.RuntimeOptions): ListScriptsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListScripts', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listScripts(request: ListScriptsRequest): ListScriptsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listScriptsWithOptions(request, runtime);
}

model ListScriptVoiceConfigsRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListScriptVoiceConfigsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  scriptVoiceConfigs?: {
    list?: [ 
      {
        type?: string(name='Type'),
        scriptVoiceConfigId?: string(name='ScriptVoiceConfigId'),
        scriptContent?: string(name='ScriptContent'),
        instanceId?: string(name='InstanceId'),
        scriptId?: string(name='ScriptId'),
        scriptWaveformRelation?: string(name='ScriptWaveformRelation'),
        source?: string(name='Source'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='ScriptVoiceConfigs'),
}

model ListScriptVoiceConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: ListScriptVoiceConfigsResponseBody(name='body'),
}

async function listScriptVoiceConfigsWithOptions(request: ListScriptVoiceConfigsRequest, runtime: Util.RuntimeOptions): ListScriptVoiceConfigsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListScriptVoiceConfigs', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listScriptVoiceConfigs(request: ListScriptVoiceConfigsRequest): ListScriptVoiceConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listScriptVoiceConfigsWithOptions(request, runtime);
}

model ListTagsRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
}

model ListTagsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  tagGroups?: [ 
    {
      tagGroup?: string(name='TagGroup'),
      tagGroupId?: string(name='TagGroupId'),
      tagGroupIndex?: int32(name='TagGroupIndex'),
      scriptId?: string(name='ScriptId'),
    }
  ](name='TagGroups'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  tags?: [ 
    {
      tagGroup?: string(name='TagGroup'),
      tagName?: string(name='TagName'),
      tagIndex?: int32(name='TagIndex'),
      scriptId?: string(name='ScriptId'),
      tagId?: string(name='TagId'),
    }
  ](name='Tags'),
}

model ListTagsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagsResponseBody(name='body'),
}

async function listTagsWithOptions(request: ListTagsRequest, runtime: Util.RuntimeOptions): ListTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTags', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTags(request: ListTagsRequest): ListTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagsWithOptions(request, runtime);
}

model ModifyBatchJobsRequest {
  instanceId?: string(name='InstanceId'),
  jobGroupId?: string(name='JobGroupId'),
  batchJobName?: string(name='BatchJobName'),
  description?: string(name='Description'),
  scenarioId?: string(name='ScenarioId'),
  strategyJson?: string(name='StrategyJson'),
  jobFilePath?: string(name='JobFilePath'),
  submitted?: boolean(name='Submitted'),
  scriptId?: string(name='ScriptId'),
  callingNumber?: [ string ](name='CallingNumber'),
}

model ModifyBatchJobsResponseBody = {
  jobGroup?: {
    creationTime?: long(name='CreationTime'),
    jobGroupId?: string(name='JobGroupId'),
    scenarioId?: string(name='ScenarioId'),
    strategy?: {
      type?: string(name='Type'),
      strategyName?: string(name='StrategyName'),
      maxAttemptsPerDay?: int32(name='MaxAttemptsPerDay'),
      workingTime?: [ 
        {
          endTime?: string(name='EndTime'),
          beginTime?: string(name='BeginTime'),
        }
      ](name='WorkingTime'),
      followUpStrategy?: string(name='FollowUpStrategy'),
      endTime?: long(name='EndTime'),
      startTime?: long(name='StartTime'),
      isTemplate?: boolean(name='IsTemplate'),
      customized?: string(name='Customized'),
      strategyId?: string(name='StrategyId'),
      repeatDays?: [ string ](name='RepeatDays'),
      routingStrategy?: string(name='RoutingStrategy'),
      minAttemptInterval?: int32(name='MinAttemptInterval'),
      strategyDescription?: string(name='StrategyDescription'),
      repeatBy?: string(name='RepeatBy'),
    }(name='Strategy'),
    callingNumbers?: [ string ](name='CallingNumbers'),
    jobGroupName?: string(name='JobGroupName'),
    jobFilePath?: string(name='JobFilePath'),
    jobGroupDescription?: string(name='JobGroupDescription'),
  }(name='JobGroup'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ModifyBatchJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBatchJobsResponseBody(name='body'),
}

async function modifyBatchJobsWithOptions(request: ModifyBatchJobsRequest, runtime: Util.RuntimeOptions): ModifyBatchJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyBatchJobs', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyBatchJobs(request: ModifyBatchJobsRequest): ModifyBatchJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBatchJobsWithOptions(request, runtime);
}

model ModifyDialogueFlowRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
  dialogueFlowId?: string(name='DialogueFlowId'),
  dialogueFlowDefinition?: string(name='DialogueFlowDefinition'),
  isDrafted?: boolean(name='IsDrafted'),
}

model ModifyDialogueFlowResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  dialogueFlowId?: string(name='DialogueFlowId'),
  code?: string(name='Code'),
  dialogueFlowDefinition?: string(name='DialogueFlowDefinition'),
  success?: boolean(name='Success'),
}

model ModifyDialogueFlowResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDialogueFlowResponseBody(name='body'),
}

async function modifyDialogueFlowWithOptions(request: ModifyDialogueFlowRequest, runtime: Util.RuntimeOptions): ModifyDialogueFlowResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDialogueFlow', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDialogueFlow(request: ModifyDialogueFlowRequest): ModifyDialogueFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDialogueFlowWithOptions(request, runtime);
}

model ModifyGlobalQuestionRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
  globalQuestionId?: string(name='GlobalQuestionId'),
  globalQuestionName?: string(name='GlobalQuestionName'),
  globalQuestionType?: string(name='GlobalQuestionType'),
  questions?: string(name='Questions'),
  answers?: string(name='Answers'),
}

model ModifyGlobalQuestionResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  dialogueQuestionId?: string(name='DialogueQuestionId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ModifyGlobalQuestionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyGlobalQuestionResponseBody(name='body'),
}

async function modifyGlobalQuestionWithOptions(request: ModifyGlobalQuestionRequest, runtime: Util.RuntimeOptions): ModifyGlobalQuestionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyGlobalQuestion', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyGlobalQuestion(request: ModifyGlobalQuestionRequest): ModifyGlobalQuestionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyGlobalQuestionWithOptions(request, runtime);
}

model ModifyInstanceRequest {
  instanceId?: string(name='InstanceId'),
  instanceName?: string(name='InstanceName'),
  instanceDescription?: string(name='InstanceDescription'),
  maxConcurrentConversation?: int32(name='MaxConcurrentConversation'),
}

model ModifyInstanceResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  instance?: {
    creationTime?: long(name='CreationTime'),
    instanceName?: string(name='InstanceName'),
    maxConcurrentConversation?: int32(name='MaxConcurrentConversation'),
    instanceId?: string(name='InstanceId'),
    instanceDescription?: string(name='InstanceDescription'),
  }(name='Instance'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ModifyInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceResponseBody(name='body'),
}

async function modifyInstanceWithOptions(request: ModifyInstanceRequest, runtime: Util.RuntimeOptions): ModifyInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstance', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstance(request: ModifyInstanceRequest): ModifyInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceWithOptions(request, runtime);
}

model ModifyIntentRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
  intentId?: string(name='IntentId'),
  intentName?: string(name='IntentName'),
  intentDescription?: string(name='IntentDescription'),
  utterances?: string(name='Utterances'),
  keywords?: string(name='Keywords'),
}

model ModifyIntentResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  intentId?: string(name='IntentId'),
}

model ModifyIntentResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyIntentResponseBody(name='body'),
}

async function modifyIntentWithOptions(request: ModifyIntentRequest, runtime: Util.RuntimeOptions): ModifyIntentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyIntent', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyIntent(request: ModifyIntentRequest): ModifyIntentResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyIntentWithOptions(request, runtime);
}

model ModifyJobGroupRequest {
  instanceId?: string(name='InstanceId'),
  jobGroupId?: string(name='JobGroupId'),
  name?: string(name='Name'),
  scenarioId?: string(name='ScenarioId'),
  description?: string(name='Description'),
  strategyJson?: string(name='StrategyJson'),
  scriptId?: string(name='ScriptId'),
  callingNumber?: [ string ](name='CallingNumber'),
}

model ModifyJobGroupResponseBody = {
  jobGroup?: {
    creationTime?: long(name='CreationTime'),
    jobGroupId?: string(name='JobGroupId'),
    scenarioId?: string(name='ScenarioId'),
    strategy?: {
      type?: string(name='Type'),
      strategyName?: string(name='StrategyName'),
      maxAttemptsPerDay?: int32(name='MaxAttemptsPerDay'),
      workingTime?: [ 
        {
          endTime?: string(name='EndTime'),
          beginTime?: string(name='BeginTime'),
        }
      ](name='WorkingTime'),
      followUpStrategy?: string(name='FollowUpStrategy'),
      endTime?: long(name='EndTime'),
      startTime?: long(name='StartTime'),
      isTemplate?: boolean(name='IsTemplate'),
      customized?: string(name='Customized'),
      strategyId?: string(name='StrategyId'),
      repeatDays?: [ string ](name='RepeatDays'),
      routingStrategy?: string(name='RoutingStrategy'),
      minAttemptInterval?: int32(name='MinAttemptInterval'),
      strategyDescription?: string(name='StrategyDescription'),
      repeatBy?: string(name='RepeatBy'),
    }(name='Strategy'),
    callingNumbers?: [ string ](name='CallingNumbers'),
    jobGroupName?: string(name='JobGroupName'),
    jobFilePath?: string(name='JobFilePath'),
    jobGroupDescription?: string(name='JobGroupDescription'),
  }(name='JobGroup'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ModifyJobGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyJobGroupResponseBody(name='body'),
}

async function modifyJobGroupWithOptions(request: ModifyJobGroupRequest, runtime: Util.RuntimeOptions): ModifyJobGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyJobGroup', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyJobGroup(request: ModifyJobGroupRequest): ModifyJobGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyJobGroupWithOptions(request, runtime);
}

model ModifyOutboundCallNumberRequest {
  instanceId?: string(name='InstanceId'),
  number?: string(name='Number'),
  rateLimitPeriod?: int32(name='RateLimitPeriod'),
  rateLimitCount?: int32(name='RateLimitCount'),
  outboundCallNumberId?: string(name='OutboundCallNumberId'),
}

model ModifyOutboundCallNumberResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  outboundCallNumber?: {
    rateLimitCount?: string(name='RateLimitCount'),
    number?: string(name='Number'),
    outboundCallNumberId?: string(name='OutboundCallNumberId'),
    rateLimitPeriod?: string(name='RateLimitPeriod'),
  }(name='OutboundCallNumber'),
  success?: boolean(name='Success'),
}

model ModifyOutboundCallNumberResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyOutboundCallNumberResponseBody(name='body'),
}

async function modifyOutboundCallNumberWithOptions(request: ModifyOutboundCallNumberRequest, runtime: Util.RuntimeOptions): ModifyOutboundCallNumberResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyOutboundCallNumber', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyOutboundCallNumber(request: ModifyOutboundCallNumberRequest): ModifyOutboundCallNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyOutboundCallNumberWithOptions(request, runtime);
}

model ModifyScriptRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
  scriptName?: string(name='ScriptName'),
  scriptDescription?: string(name='ScriptDescription'),
  industry?: string(name='Industry'),
  scene?: string(name='Scene'),
}

model ModifyScriptResponseBody = {
  script?: {
    status?: string(name='Status'),
    updateTime?: long(name='UpdateTime'),
    industry?: string(name='Industry'),
    scriptDescription?: string(name='ScriptDescription'),
    isDrafted?: boolean(name='IsDrafted'),
    debugStatus?: string(name='DebugStatus'),
    scriptId?: string(name='ScriptId'),
    isDebugDrafted?: boolean(name='IsDebugDrafted'),
    scriptName?: string(name='ScriptName'),
    scene?: string(name='Scene'),
  }(name='Script'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ModifyScriptResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyScriptResponseBody(name='body'),
}

async function modifyScriptWithOptions(request: ModifyScriptRequest, runtime: Util.RuntimeOptions): ModifyScriptResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyScript', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyScript(request: ModifyScriptRequest): ModifyScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyScriptWithOptions(request, runtime);
}

model ModifyScriptVoiceConfigRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
  scriptVoiceConfigId?: string(name='ScriptVoiceConfigId'),
  type?: string(name='Type'),
  scriptWaveformRelation?: string(name='ScriptWaveformRelation'),
}

model ModifyScriptVoiceConfigResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  scriptVoiceConfig?: {
    type?: string(name='Type'),
    scriptVoiceConfigId?: string(name='ScriptVoiceConfigId'),
    scriptContent?: string(name='ScriptContent'),
    instanceId?: string(name='InstanceId'),
    scriptId?: string(name='ScriptId'),
    scriptWaveformRelation?: string(name='ScriptWaveformRelation'),
    source?: string(name='Source'),
  }(name='ScriptVoiceConfig'),
}

model ModifyScriptVoiceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyScriptVoiceConfigResponseBody(name='body'),
}

async function modifyScriptVoiceConfigWithOptions(request: ModifyScriptVoiceConfigRequest, runtime: Util.RuntimeOptions): ModifyScriptVoiceConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyScriptVoiceConfig', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyScriptVoiceConfig(request: ModifyScriptVoiceConfigRequest): ModifyScriptVoiceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyScriptVoiceConfigWithOptions(request, runtime);
}

model ModifyTagGroupsRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
  tags?: string(name='Tags'),
  tagGroups?: string(name='TagGroups'),
}

model ModifyTagGroupsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  tagGroups?: [ 
    {
      tagGroup?: string(name='TagGroup'),
      tagGroupId?: string(name='TagGroupId'),
      tagGroupIndex?: int32(name='TagGroupIndex'),
      scriptId?: string(name='ScriptId'),
    }
  ](name='TagGroups'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  tags?: [ 
    {
      tagGroup?: string(name='TagGroup'),
      tagName?: string(name='TagName'),
      tagIndex?: int32(name='TagIndex'),
      scriptId?: string(name='ScriptId'),
      tagId?: string(name='TagId'),
    }
  ](name='Tags'),
}

model ModifyTagGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTagGroupsResponseBody(name='body'),
}

async function modifyTagGroupsWithOptions(request: ModifyTagGroupsRequest, runtime: Util.RuntimeOptions): ModifyTagGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyTagGroups', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyTagGroups(request: ModifyTagGroupsRequest): ModifyTagGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTagGroupsWithOptions(request, runtime);
}

model ModifyTTSConfigRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
  voice?: string(name='Voice'),
  speechRate?: string(name='SpeechRate'),
  volume?: string(name='Volume'),
}

model ModifyTTSConfigResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  TTSConfig?: {
    voice?: string(name='Voice'),
    TTSConfigId?: string(name='TTSConfigId'),
    speechRate?: string(name='SpeechRate'),
    volume?: string(name='Volume'),
    instanceId?: string(name='InstanceId'),
    scriptId?: string(name='ScriptId'),
  }(name='TTSConfig'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ModifyTTSConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTTSConfigResponseBody(name='body'),
}

async function modifyTTSConfigWithOptions(request: ModifyTTSConfigRequest, runtime: Util.RuntimeOptions): ModifyTTSConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyTTSConfig', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyTTSConfig(request: ModifyTTSConfigRequest): ModifyTTSConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTTSConfigWithOptions(request, runtime);
}

model PublishScriptRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
  description?: string(name='Description'),
}

model PublishScriptResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model PublishScriptResponse = {
  headers: map[string]string(name='headers'),
  body: PublishScriptResponseBody(name='body'),
}

async function publishScriptWithOptions(request: PublishScriptRequest, runtime: Util.RuntimeOptions): PublishScriptResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PublishScript', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function publishScript(request: PublishScriptRequest): PublishScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishScriptWithOptions(request, runtime);
}

model PublishScriptForDebugRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
}

model PublishScriptForDebugResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model PublishScriptForDebugResponse = {
  headers: map[string]string(name='headers'),
  body: PublishScriptForDebugResponseBody(name='body'),
}

async function publishScriptForDebugWithOptions(request: PublishScriptForDebugRequest, runtime: Util.RuntimeOptions): PublishScriptForDebugResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PublishScriptForDebug', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function publishScriptForDebug(request: PublishScriptForDebugRequest): PublishScriptForDebugResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishScriptForDebugWithOptions(request, runtime);
}

model QueryJobsRequest {
  instanceId?: string(name='InstanceId'),
  scenarioId?: string(name='ScenarioId'),
  jobGroupId?: string(name='JobGroupId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  timeAlignment?: string(name='TimeAlignment'),
  contactName?: string(name='ContactName'),
  phoneNumber?: string(name='PhoneNumber'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model QueryJobsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  jobs?: {
    list?: [ 
      {
        status?: string(name='Status'),
        callingNumbers?: [ string ](name='CallingNumbers'),
        summary?: [ 
          {
            summaryName?: string(name='SummaryName'),
            groupId?: string(name='GroupId'),
            jobId?: string(name='JobId'),
            category?: string(name='Category'),
            taskId?: string(name='TaskId'),
            content?: string(name='Content'),
            conversationDetailId?: string(name='ConversationDetailId'),
            summaryId?: string(name='SummaryId'),
          }
        ](name='Summary'),
        contacts?: [ 
          {
            phoneNumber?: string(name='PhoneNumber'),
            state?: string(name='State'),
            contactId?: string(name='ContactId'),
            honorific?: string(name='Honorific'),
            jobId?: string(name='JobId'),
            contactName?: string(name='ContactName'),
            role?: string(name='Role'),
            referenceId?: string(name='ReferenceId'),
          }
        ](name='Contacts'),
        priority?: int32(name='Priority'),
        failureReason?: string(name='FailureReason'),
        extras?: [ 
          {
            key?: string(name='Key'),
            value?: string(name='Value'),
          }
        ](name='Extras'),
        referenceId?: string(name='ReferenceId'),
        jobGroupId?: string(name='JobGroupId'),
        scenarioId?: string(name='ScenarioId'),
        tasks?: [ 
          {
            status?: string(name='Status'),
            planedTime?: long(name='PlanedTime'),
            chatbotId?: string(name='ChatbotId'),
            actualTime?: long(name='ActualTime'),
            calledNumber?: string(name='CalledNumber'),
            scenarioId?: string(name='ScenarioId'),
            contact?: {
              phoneNumber?: string(name='PhoneNumber'),
              state?: string(name='State'),
              contactId?: string(name='ContactId'),
              honorific?: string(name='Honorific'),
              jobId?: string(name='JobId'),
              contactName?: string(name='ContactName'),
              role?: string(name='Role'),
              referenceId?: string(name='ReferenceId'),
            }(name='Contact'),
            jobId?: string(name='JobId'),
            callId?: string(name='CallId'),
            callingNumber?: string(name='CallingNumber'),
            brief?: string(name='Brief'),
            duration?: int32(name='Duration'),
            taskId?: string(name='TaskId'),
          }
        ](name='Tasks'),
        strategyId?: string(name='StrategyId'),
        jobId?: string(name='JobId'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Jobs'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryJobsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryJobsResponseBody(name='body'),
}

async function queryJobsWithOptions(request: QueryJobsRequest, runtime: Util.RuntimeOptions): QueryJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryJobs', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryJobs(request: QueryJobsRequest): QueryJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryJobsWithOptions(request, runtime);
}

model QueryScriptsByStatusRequest {
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  statusList?: [ string ](name='StatusList'),
}

model QueryScriptsByStatusResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  scripts?: {
    list?: [ 
      {
        status?: string(name='Status'),
        updateTime?: long(name='UpdateTime'),
        scriptId?: string(name='ScriptId'),
        isDebugDrafted?: boolean(name='IsDebugDrafted'),
        appliedVersion?: string(name='AppliedVersion'),
        industry?: string(name='Industry'),
        scriptDescription?: string(name='ScriptDescription'),
        isDrafted?: boolean(name='IsDrafted'),
        debugStatus?: string(name='DebugStatus'),
        debugVersion?: string(name='DebugVersion'),
        scriptName?: string(name='ScriptName'),
        scene?: string(name='Scene'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Scripts'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryScriptsByStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryScriptsByStatusResponseBody(name='body'),
}

async function queryScriptsByStatusWithOptions(request: QueryScriptsByStatusRequest, runtime: Util.RuntimeOptions): QueryScriptsByStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryScriptsByStatus', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryScriptsByStatus(request: QueryScriptsByStatusRequest): QueryScriptsByStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryScriptsByStatusWithOptions(request, runtime);
}

model QueryScriptWaveformsRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
  scriptContent?: string(name='ScriptContent'),
}

model QueryScriptWaveformsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  scriptWaveforms?: [ 
    {
      scriptContent?: string(name='ScriptContent'),
      scriptWaveformId?: string(name='ScriptWaveformId'),
      fileName?: string(name='FileName'),
      scriptId?: string(name='ScriptId'),
      fileId?: string(name='FileId'),
    }
  ](name='ScriptWaveforms'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryScriptWaveformsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryScriptWaveformsResponseBody(name='body'),
}

async function queryScriptWaveformsWithOptions(request: QueryScriptWaveformsRequest, runtime: Util.RuntimeOptions): QueryScriptWaveformsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryScriptWaveforms', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryScriptWaveforms(request: QueryScriptWaveformsRequest): QueryScriptWaveformsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryScriptWaveformsWithOptions(request, runtime);
}

model RecordFailureRequest {
  instanceId?: string(name='InstanceId'),
  callId?: string(name='CallId'),
  taskId?: string(name='TaskId'),
  actualTime?: long(name='ActualTime'),
  callingNumber?: string(name='CallingNumber'),
  calledNumber?: string(name='CalledNumber'),
  dispositionCode?: string(name='DispositionCode'),
}

model RecordFailureResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model RecordFailureResponse = {
  headers: map[string]string(name='headers'),
  body: RecordFailureResponseBody(name='body'),
}

async function recordFailureWithOptions(request: RecordFailureRequest, runtime: Util.RuntimeOptions): RecordFailureResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RecordFailure', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function recordFailure(request: RecordFailureRequest): RecordFailureResponse {
  var runtime = new Util.RuntimeOptions{};
  return recordFailureWithOptions(request, runtime);
}

model ResumeJobsRequest {
  instanceId?: string(name='InstanceId'),
  all?: boolean(name='All'),
  scenarioId?: string(name='ScenarioId'),
  jobGroupId?: string(name='JobGroupId'),
  jobId?: [ string ](name='JobId'),
  jobReferenceId?: [ string ](name='JobReferenceId'),
}

model ResumeJobsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ResumeJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeJobsResponseBody(name='body'),
}

async function resumeJobsWithOptions(request: ResumeJobsRequest, runtime: Util.RuntimeOptions): ResumeJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResumeJobs', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resumeJobs(request: ResumeJobsRequest): ResumeJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return resumeJobsWithOptions(request, runtime);
}

model RollbackScriptRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
  rollbackVersion?: string(name='RollbackVersion'),
}

model RollbackScriptResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model RollbackScriptResponse = {
  headers: map[string]string(name='headers'),
  body: RollbackScriptResponseBody(name='body'),
}

async function rollbackScriptWithOptions(request: RollbackScriptRequest, runtime: Util.RuntimeOptions): RollbackScriptResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RollbackScript', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function rollbackScript(request: RollbackScriptRequest): RollbackScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return rollbackScriptWithOptions(request, runtime);
}

model StartJobRequest {
  instanceId?: string(name='InstanceId'),
  jobGroupId?: string(name='JobGroupId'),
  scenarioId?: string(name='ScenarioId'),
  jobJson?: string(name='JobJson'),
  callingNumber?: [ string ](name='CallingNumber'),
}

model StartJobResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  taskIds?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='TaskIds'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model StartJobResponse = {
  headers: map[string]string(name='headers'),
  body: StartJobResponseBody(name='body'),
}

async function startJobWithOptions(request: StartJobRequest, runtime: Util.RuntimeOptions): StartJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartJob', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startJob(request: StartJobRequest): StartJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return startJobWithOptions(request, runtime);
}

model SubmitBatchJobsRequest {
  instanceId?: string(name='InstanceId'),
  jobGroupId?: string(name='JobGroupId'),
}

model SubmitBatchJobsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model SubmitBatchJobsResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitBatchJobsResponseBody(name='body'),
}

async function submitBatchJobsWithOptions(request: SubmitBatchJobsRequest, runtime: Util.RuntimeOptions): SubmitBatchJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitBatchJobs', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitBatchJobs(request: SubmitBatchJobsRequest): SubmitBatchJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitBatchJobsWithOptions(request, runtime);
}

model SubmitRecordingRequest {
  instanceId?: string(name='InstanceId'),
  taskId?: string(name='TaskId'),
  resourceRecording?: string(name='ResourceRecording'),
  mergedRecording?: string(name='MergedRecording'),
}

model SubmitRecordingResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model SubmitRecordingResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitRecordingResponseBody(name='body'),
}

async function submitRecordingWithOptions(request: SubmitRecordingRequest, runtime: Util.RuntimeOptions): SubmitRecordingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitRecording', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitRecording(request: SubmitRecordingRequest): SubmitRecordingResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitRecordingWithOptions(request, runtime);
}

model SubmitScriptReviewRequest {
  scriptId?: string(name='ScriptId'),
  instanceId?: string(name='InstanceId'),
  description?: string(name='Description'),
}

model SubmitScriptReviewResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model SubmitScriptReviewResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitScriptReviewResponseBody(name='body'),
}

async function submitScriptReviewWithOptions(request: SubmitScriptReviewRequest, runtime: Util.RuntimeOptions): SubmitScriptReviewResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitScriptReview', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitScriptReview(request: SubmitScriptReviewRequest): SubmitScriptReviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitScriptReviewWithOptions(request, runtime);
}

model SuspendJobsRequest {
  instanceId?: string(name='InstanceId'),
  all?: boolean(name='All'),
  scenarioId?: string(name='ScenarioId'),
  jobGroupId?: string(name='JobGroupId'),
  jobId?: [ string ](name='JobId'),
  jobReferenceId?: [ string ](name='JobReferenceId'),
}

model SuspendJobsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model SuspendJobsResponse = {
  headers: map[string]string(name='headers'),
  body: SuspendJobsResponseBody(name='body'),
}

async function suspendJobsWithOptions(request: SuspendJobsRequest, runtime: Util.RuntimeOptions): SuspendJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SuspendJobs', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function suspendJobs(request: SuspendJobsRequest): SuspendJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return suspendJobsWithOptions(request, runtime);
}

model TaskPreparingRequest {
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
  instanceOwnerId?: long(name='InstanceOwnerId'),
}

model TaskPreparingResponseBody = {
  taskId?: string(name='TaskId'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model TaskPreparingResponse = {
  headers: map[string]string(name='headers'),
  body: TaskPreparingResponseBody(name='body'),
}

async function taskPreparingWithOptions(request: TaskPreparingRequest, runtime: Util.RuntimeOptions): TaskPreparingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TaskPreparing', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function taskPreparing(request: TaskPreparingRequest): TaskPreparingResponse {
  var runtime = new Util.RuntimeOptions{};
  return taskPreparingWithOptions(request, runtime);
}

model WithdrawScriptReviewRequest {
  instanceId?: string(name='InstanceId'),
  scriptId?: string(name='ScriptId'),
}

model WithdrawScriptReviewResponseBody = {
  script?: {
    status?: string(name='Status'),
    updateTime?: long(name='UpdateTime'),
    industry?: string(name='Industry'),
    scriptDescription?: string(name='ScriptDescription'),
    isDrafted?: boolean(name='IsDrafted'),
    debugStatus?: string(name='DebugStatus'),
    scriptId?: string(name='ScriptId'),
    isDebugDrafted?: boolean(name='IsDebugDrafted'),
    scriptName?: string(name='ScriptName'),
    scene?: string(name='Scene'),
  }(name='Script'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model WithdrawScriptReviewResponse = {
  headers: map[string]string(name='headers'),
  body: WithdrawScriptReviewResponseBody(name='body'),
}

async function withdrawScriptReviewWithOptions(request: WithdrawScriptReviewRequest, runtime: Util.RuntimeOptions): WithdrawScriptReviewResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('WithdrawScriptReview', '2019-12-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function withdrawScriptReview(request: WithdrawScriptReviewRequest): WithdrawScriptReviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return withdrawScriptReviewWithOptions(request, runtime);
}

