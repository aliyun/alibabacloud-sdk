/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('appflow', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model GenerateUserSessionTokenRequest {
  chatbotId?: string(name='ChatbotId', description='AI Assistant ID', example='cb-069d508f9ab341b1****'),
  expireSecond?: long(name='ExpireSecond', description='Expiration Time, in seconds, default 24 hours', example='6000'),
  extraInfo?: string(name='ExtraInfo'),
  integrateId?: string(name='IntegrateId', description='Integration ID', example='cit-960f499au184m7****'),
  userAvatar?: string(name='UserAvatar', description='User Avatar (URL)', example='https://xxxx.com/xxx'),
  userId?: string(name='UserId', description='User ID

This parameter is required.', example='929293312213****'),
  userName?: string(name='UserName', description='User Nickname', example='testxxx'),
}

model GenerateUserSessionTokenResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='34C2713A-2270-5EEC-825E-115F9AD3BAC9'),
  userSessionToken?: string(name='UserSessionToken', description='Token.', example='960f499au184m7****'),
}

model GenerateUserSessionTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateUserSessionTokenResponseBody(name='body'),
}

/**
 * @summary Generate Login Session Token
 *
 * @param request GenerateUserSessionTokenRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GenerateUserSessionTokenResponse
 */
@context("generateUserSessionTokenWithContext")
async function generateUserSessionTokenWithOptions(request: GenerateUserSessionTokenRequest, runtime: $RuntimeOptions): GenerateUserSessionTokenResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.chatbotId)) {
    query['ChatbotId'] = request.chatbotId;
  }
  if (!$isNull(request.expireSecond)) {
    query['ExpireSecond'] = request.expireSecond;
  }
  if (!$isNull(request.extraInfo)) {
    query['ExtraInfo'] = request.extraInfo;
  }
  if (!$isNull(request.integrateId)) {
    query['IntegrateId'] = request.integrateId;
  }
  if (!$isNull(request.userAvatar)) {
    query['UserAvatar'] = request.userAvatar;
  }
  if (!$isNull(request.userId)) {
    query['UserId'] = request.userId;
  }
  if (!$isNull(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GenerateUserSessionToken',
    version = '2023-09-04',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Generate Login Session Token
 *
 * @param request GenerateUserSessionTokenRequest
 * @return GenerateUserSessionTokenResponse
 */
async function generateUserSessionToken(request: GenerateUserSessionTokenRequest): GenerateUserSessionTokenResponse {
  var runtime = new $RuntimeOptions{};
  return generateUserSessionTokenWithOptions(request, runtime);
}

