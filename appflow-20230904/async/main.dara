/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'appflow';
  @version = '2023-09-04';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model GenerateUserSessionTokenRequest {
  chatbotId?: string(name='ChatbotId', description='AI Assistant ID', example='cb-069d508f9ab341b1****', position='Query'),
  expireSecond?: long(name='ExpireSecond', description='Expiration Time, in seconds, default 24 hours', example='6000', position='Query'),
  integrateId?: string(name='IntegrateId', description='Integration ID', example='cit-960f499au184m7****', position='Query'),
  userAvatar?: string(name='UserAvatar', description='User Avatar (URL)', example='https://xxxx.com/xxx', position='Query'),
  userId: string(name='UserId', description='User ID

This parameter is required.', example='929293312213****', position='Query'),
  userName?: string(name='UserName', description='User Nickname', example='testxxx', position='Query'),
}

model GenerateUserSessionTokenResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='34C2713A-2270-5EEC-825E-115F9AD3BAC9'),
  userSessionToken?: string(name='UserSessionToken', description='Token.', example='960f499au184m7****'),
}

model GenerateUserSessionTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateUserSessionTokenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GenerateUserSessionToken  GenerateUserSessionTokenRequest
  * @return GenerateUserSessionTokenResponse
 */
async function generateUserSessionToken(request: GenerateUserSessionTokenRequest): GenerateUserSessionTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateUserSessionToken', 'POST', '/', 'json', false, 'json', request);
}

