/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'AiMiaoBi';
  @version = '2023-08-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateTokenRequest {
  agentKey: string(name='AgentKey', example='2daaa2e0c209xb26acb97009ea77bd4b_p_efm', position='Query'),
}

model CreateTokenResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    expiredTime?: long(name='ExpiredTime', example='1705388704855'),
    token?: string(name='Token', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model CreateTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTokenResponseBody(name='body'),
}

async function createToken(request: CreateTokenRequest): CreateTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateToken', 'POST', '/', 'json', false, 'json', request);
}

