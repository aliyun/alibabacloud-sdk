/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'AiMiaoBi';
  @version = '2023-08-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CancelAsyncTaskRequest {
  agentKey: string(name='AgentKey', example='c160c841c8e54295bf2f441432785944_p_efm', position='Query'),
  taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21', position='Body'),
}

model CancelAsyncTaskResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='FB698445-61DA-5361-BF73-1C5F1157E888'),
  success?: boolean(name='Success', example='True'),
}

model CancelAsyncTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelAsyncTaskResponseBody(name='body'),
}

async function cancelAsyncTask(request: CancelAsyncTaskRequest): CancelAsyncTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelAsyncTask', 'POST', '/', 'json', true, 'form', request);
}

model CreateGeneratedContentRequest {
  agentKey: string(name='AgentKey', example='xxx_efm', position='Query'),
  content: string(name='Content', position='Body'),
  contentDomain?: string(name='ContentDomain', example='government', position='Body'),
  contentText?: string(name='ContentText', position='Body'),
  keywords?: [ string ](name='Keywords', shrink='json', position='Body'),
  prompt?: string(name='Prompt', position='Body'),
  taskId: string(name='TaskId', example='xxx', minLength=6, maxLength=64, position='Body'),
  title: string(name='Title', minLength=2, maxLength=200, position='Body'),
  uuid?: string(name='Uuid', example='xxxx', position='Body'),
}

model CreateGeneratedContentResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: long(name='Data', example='42'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='false'),
}

model CreateGeneratedContentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateGeneratedContentResponseBody(name='body'),
}

async function createGeneratedContent(request: CreateGeneratedContentRequest): CreateGeneratedContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGeneratedContent', 'POST', '/', 'json', true, 'form', request);
}

model CreateTokenRequest {
  agentKey: string(name='AgentKey', example='2daaa2e0c209xb26acb97009ea77bd4b_p_efm', position='Query'),
}

model CreateTokenResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    expiredTime?: long(name='ExpiredTime', example='1705388704855'),
    token?: string(name='Token', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model CreateTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTokenResponseBody(name='body'),
}

async function createToken(request: CreateTokenRequest): CreateTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateToken', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGeneratedContentRequest {
  agentKey: string(name='AgentKey', example='xxxxx_p_efm', position='Query'),
  id: long(name='Id', example='99', position='Body'),
}

model DeleteGeneratedContentResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model DeleteGeneratedContentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGeneratedContentResponseBody(name='body'),
}

async function deleteGeneratedContent(request: DeleteGeneratedContentRequest): DeleteGeneratedContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGeneratedContent', 'POST', '/', 'json', true, 'form', request);
}

model DeleteMaterialByIdRequest {
  agentKey: string(name='AgentKey', example='cd327c3d5d5e44159cc716e23bfa530e_p_beebot_public', position='Query'),
  id: long(name='Id', example='10', position='Body'),
}

model DeleteMaterialByIdResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: boolean(name='Data', example='false'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='false'),
}

model DeleteMaterialByIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMaterialByIdResponseBody(name='body'),
}

async function deleteMaterialById(request: DeleteMaterialByIdRequest): DeleteMaterialByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMaterialById', 'POST', '/', 'json', true, 'form', request);
}

model ExportGeneratedContentRequest {
  agentKey: string(name='AgentKey', example='xxxxx_p_efm', position='Query'),
  id: long(name='Id', example='1', position='Body'),
}

model ExportGeneratedContentResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: string(name='Data', example='xxx'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model ExportGeneratedContentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportGeneratedContentResponseBody(name='body'),
}

async function exportGeneratedContent(request: ExportGeneratedContentRequest): ExportGeneratedContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportGeneratedContent', 'POST', '/', 'json', true, 'form', request);
}

model FeedbackDialogueRequest {
  agentKey: string(name='AgentKey', example='fcb14f25c9ee41ccad33a049de8f941b_p_outbound_public', position='Query'),
  customerResponse?: string(name='CustomerResponse', example='test', position='Body'),
  goodText?: string(name='GoodText', example='test', position='Body'),
  modifiedResponse?: string(name='ModifiedResponse', example='test', position='Body'),
  rating?: string(name='Rating', example='thumbsDown', position='Body'),
  ratingTags?: [ string ](name='RatingTags', shrink='json', position='Body'),
  sessionId: string(name='SessionId', example='75bf82fa-b71b-45d7-ae40-0b00e496cd9e', position='Body'),
  taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21', position='Body'),
}

model FeedbackDialogueResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='false'),
}

model FeedbackDialogueResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FeedbackDialogueResponseBody(name='body'),
}

async function feedbackDialogue(request: FeedbackDialogueRequest): FeedbackDialogueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FeedbackDialogue', 'POST', '/', 'json', true, 'form', request);
}

model FetchImageTaskRequest {
  agentKey: string(name='AgentKey', example='cd327c3d5d5e44159cc716e23bfa530e_p_beebot_public', position='Query'),
  articleTaskId: string(name='ArticleTaskId', example='e1be065b-adc3-435e-bd01-1c18c5ed75d3', position='Body'),
  taskIdList: [ string ](name='TaskIdList', example='["9d8c9185-3f75-4a20-aca1-c5bb53dd97b3"]', shrink='json', position='Body'),
}

model FetchImageTaskResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    taskInfoList?: [ 
      {
        id?: long(name='Id', example='1'),
        imageList?: [ 
          {
            code?: string(name='Code', example='NoData'),
            message?: string(name='Message'),
            url?: string(name='Url', example='https://a-hbr-temp-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/r-000aham3nsx9gc7a8r5l.csv?Expires=1678260131&OSSAccessKeyId=LTAIjGotF8wXIEjy&Signature=WpMfqBnjeR0w5UL1xFAd1J556Pw%3D'),
          }
        ](name='ImageList'),
        taskId?: string(name='TaskId', example='net-7eb32699000d4193a3c59fc64ae1e55f'),
        taskStatus?: string(name='TaskStatus', example='SUCCESSED'),
      }
    ](name='TaskInfoList'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='DD656AF9-0839-521A-A3D2-F320009F9C87'),
  success?: boolean(name='Success', example='true'),
}

model FetchImageTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FetchImageTaskResponseBody(name='body'),
}

async function fetchImageTask(request: FetchImageTaskRequest): FetchImageTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FetchImageTask', 'POST', '/', 'json', true, 'form', request);
}

model GenerateImageTaskRequest {
  agentKey: string(name='AgentKey', example='e1be065b-adc3-435e-bd01-1c18c5ed75d3', position='Query'),
  articleTaskId: string(name='ArticleTaskId', example='e1be065b-adc3-435e-bd01-1c18c5ed75d3', position='Body'),
  paragraphList: [ 
    {
      content: string(name='Content', example='一直忧伤的猫'),
      id: long(name='Id', example='1'),
      taskId?: string(name='TaskId', example='e1be065b-adc3-435e-bd01-1c18c5ed75d3'),
      taskStatus?: string(name='TaskStatus', example='SUCCESSED'),
    }
  ](name='ParagraphList', shrink='json', position='Body'),
  size: string(name='Size', example='1024*1024', position='Body'),
  style: string(name='Style', example='<auto>', position='Body'),
}

model GenerateImageTaskResponseBody = {
  code?: string(name='Code', example='successful'),
  data?: {
    taskList?: [ 
      {
        content?: string(name='Content', example='一直忧伤的猫'),
        id?: long(name='Id', example='1'),
        taskId?: string(name='TaskId', example='e1be065b-adc3-435e-bd01-1c18c5ed75d3'),
        taskStatus?: string(name='TaskStatus', example='SUCCESSED'),
      }
    ](name='TaskList'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='F2F366D6-E9FE-1006-BB70-2C650896AAB5'),
  success?: boolean(name='Success', example='true'),
}

model GenerateImageTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateImageTaskResponseBody(name='body'),
}

async function generateImageTask(request: GenerateImageTaskRequest): GenerateImageTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateImageTask', 'POST', '/', 'json', true, 'form', request);
}

model GenerateViewPointRequest {
  agentKey: string(name='AgentKey', example='c160c841c8e54295bf2f441432785944_p_efm', position='Query'),
  referenceData?: {
    miniDoc?: [ string ](name='MiniDoc'),
  }(name='ReferenceData', shrink='json', position='Body'),
}

model GenerateViewPointResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      point?: string(name='Point'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='94512A33-8EC1-5452-A793-5C91F18ED2F0'),
  success?: boolean(name='Success', example='true'),
}

model GenerateViewPointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateViewPointResponseBody(name='body'),
}

async function generateViewPoint(request: GenerateViewPointRequest): GenerateViewPointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateViewPoint', 'POST', '/', 'json', true, 'form', request);
}

model GetDataSourceOrderConfigRequest {
  agentKey: string(name='AgentKey', example='d9a1f6146a37446495d9985c2e7b267e_p_outbound_public', position='Query'),
  productCode: string(name='ProductCode', example='miaobi', position='Body'),
}

model GetDataSourceOrderConfigResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    userConfigDataSourceList?: [ 
      {
        code?: string(name='Code', example='QuarkCommonNews'),
        name?: string(name='Name'),
        number?: int32(name='Number', example='20'),
        type?: string(name='Type', example='SystemSearch'),
      }
    ](name='UserConfigDataSourceList'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='428DCC0D-3C63-5306-BD1B-124396AB97BE'),
  success?: boolean(name='Success', example='true'),
}

model GetDataSourceOrderConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataSourceOrderConfigResponseBody(name='body'),
}

async function getDataSourceOrderConfig(request: GetDataSourceOrderConfigRequest): GetDataSourceOrderConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataSourceOrderConfig', 'POST', '/', 'json', true, 'form', request);
}

model GetGeneratedContentRequest {
  agentKey: string(name='AgentKey', example='xxxxx_p_efm', position='Query'),
  id: long(name='Id', example='1', position='Body'),
}

model GetGeneratedContentResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    content?: string(name='Content'),
    contentDomain?: string(name='ContentDomain', example='media'),
    contentText?: string(name='ContentText'),
    createTime?: string(name='CreateTime', example='2024-01-04 11:46:07'),
    createUser?: string(name='CreateUser', example='1'),
    deviceId?: string(name='DeviceId', example='xxx'),
    id?: long(name='Id', example='86'),
    keywordList?: [ string ](name='KeywordList'),
    keywords?: string(name='Keywords'),
    prompt?: string(name='Prompt'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    title?: string(name='Title'),
    updateTime?: string(name='UpdateTime', example='2024-01-04 11:46:07'),
    updateUser?: string(name='UpdateUser', example='1'),
    uuid?: string(name='Uuid', example='0961a514-2e26-4aa6-b22b-f592d145fe47'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model GetGeneratedContentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetGeneratedContentResponseBody(name='body'),
}

async function getGeneratedContent(request: GetGeneratedContentRequest): GetGeneratedContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGeneratedContent', 'POST', '/', 'json', true, 'form', request);
}

model GetMaterialByIdRequest {
  agentKey: string(name='AgentKey', example='67c520d1fa43455ea44fb69fa402d54d_p_beebot_public', position='Query'),
  id: long(name='Id', example='60', position='Body'),
}

model GetMaterialByIdResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: {
    author?: string(name='Author'),
    createTime?: string(name='CreateTime', example='2023-03-21 11:34:19'),
    createUser?: string(name='CreateUser', example='1'),
    docKeywords?: [ string ](name='DocKeywords'),
    docType?: string(name='DocType', example='pdf'),
    externalUrl?: string(name='ExternalUrl', example='https://www.example.com'),
    htmlContent?: string(name='HtmlContent'),
    id?: long(name='Id', example='32'),
    pubTime?: string(name='PubTime', example='2023-04-11 06:14:07'),
    publicUrl?: string(name='PublicUrl', example='https://www.example.com'),
    shareAttr?: int32(name='ShareAttr', example='1'),
    srcFrom?: string(name='SrcFrom', example='user_upload'),
    summary?: string(name='Summary'),
    textContent?: string(name='TextContent'),
    thumbnailInBase64?: string(name='ThumbnailInBase64'),
    title?: string(name='Title'),
    updateTime?: string(name='UpdateTime', example='2022-04-08 19:33:01'),
    updateUser?: string(name='UpdateUser', example='1'),
    url?: string(name='Url', example='https://www.example.com'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='false'),
}

model GetMaterialByIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMaterialByIdResponseBody(name='body'),
}

async function getMaterialById(request: GetMaterialByIdRequest): GetMaterialByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMaterialById', 'POST', '/', 'json', true, 'form', request);
}

model GetPropertiesRequest {
  agentKey: string(name='AgentKey', example='xxx_efm', position='Query'),
}

model GetPropertiesResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: {
    chatConfig?: map[string]any(name='ChatConfig'),
    consoleConfig?: {
      tipContent?: string(name='TipContent', example='xx'),
      title?: string(name='Title'),
    }(name='ConsoleConfig'),
    generalConfigMap?: map[string]any(name='GeneralConfigMap'),
    intelligentSearchConfig?: {
      productDescription?: string(name='ProductDescription', example='xxx'),
      searchSamples?: [ 
        {
          articles?: [ 
            {
              select?: boolean(name='Select', example='true'),
              stared?: boolean(name='Stared', example='false'),
              title?: string(name='Title', example='xx'),
              url?: string(name='Url', example='http://xxx.com'),
            }
          ](name='Articles'),
          prompt?: string(name='Prompt', example='xx'),
          text?: string(name='Text', example='xxx'),
        }
      ](name='SearchSamples'),
      searchSources?: [ 
        {
          code?: string(name='Code', example='xx'),
          datasetName?: string(name='DatasetName', example='xx'),
          name?: string(name='Name', example='xx'),
        }
      ](name='SearchSources'),
    }(name='IntelligentSearchConfig'),
    searchSources?: [ 
      {
        label?: string(name='Label'),
        value?: string(name='Value', example='SystemSearch'),
      }
    ](name='SearchSources'),
    slrAuthorized?: boolean(name='SlrAuthorized', example='true'),
    userInfo?: {
      agentId?: string(name='AgentId', example='1'),
      tenantId?: string(name='TenantId', example='1'),
      userId?: string(name='UserId', example='1'),
      username?: string(name='Username', example='admin'),
    }(name='UserInfo'),
    wanxiangImageSizeConfig?: [ 
      {
        name?: string(name='Name', example='1:1'),
        value?: string(name='Value', example='1024*1024'),
      }
    ](name='WanxiangImageSizeConfig'),
    wanxiangImageStyleConfig?: [ 
      {
        name?: string(name='Name'),
        pic?: string(name='Pic', example='https://img.alicdn.com/imgextra/i4/O1CN01RzKicz1W0YWzYkWcK_!!6000000002726-2-tps-132-104.png'),
        value?: string(name='Value', example='<auto>'),
      }
    ](name='WanxiangImageStyleConfig'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model GetPropertiesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPropertiesResponseBody(name='body'),
}

async function getProperties(request: GetPropertiesRequest): GetPropertiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetProperties', 'POST', '/', 'json', false, 'json', request);
}

model ListAsyncTasksRequest {
  agentKey: string(name='AgentKey', example='cd327c3d5d5e44159cc716e23bfa530e_p_beebot_public', position='Query'),
  createTimeEnd?: string(name='CreateTimeEnd', example='2023-03-18 02:00:00', position='Body'),
  createTimeStart?: string(name='CreateTimeStart', example='2023-02-19 07:28:11', position='Body'),
  current?: int32(name='Current', example='1', position='Body'),
  size?: int32(name='Size', example='10', position='Body'),
  taskCode?: string(name='TaskCode', example='MaterialDocumentUpload', position='Body'),
  taskName?: string(name='TaskName', position='Body'),
  taskStatus?: int32(name='TaskStatus', example='1', position='Body'),
  taskStatusList?: [ int32 ](name='TaskStatusList', shrink='json', position='Body'),
  taskType?: string(name='TaskType', position='Body'),
  taskTypeList?: [ string ](name='TaskTypeList', shrink='json', position='Body'),
}

model ListAsyncTasksResponseBody = {
  code?: string(name='Code', example='200'),
  current?: int32(name='Current', example='1'),
  data?: [ 
    {
      createTime?: string(name='CreateTime', example='2020-12-23 15:41:58'),
      createUser?: string(name='CreateUser', example='1111'),
      id?: long(name='Id', example='1'),
      taskCode?: string(name='TaskCode', example='MaterialDocumentUpload'),
      taskDefinition?: string(name='TaskDefinition', example='{}'),
      taskEndTime?: string(name='TaskEndTime', example='2023-03-09 00:00:00'),
      taskErrorMessage?: string(name='TaskErrorMessage'),
      taskExecuteTime?: string(name='TaskExecuteTime', example='2023-10-14 14:30:00'),
      taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
      taskInnerErrorMessage?: string(name='TaskInnerErrorMessage'),
      taskIntermediateResult?: string(name='TaskIntermediateResult', example='{}'),
      taskName?: string(name='TaskName'),
      taskParam?: string(name='TaskParam', example='{}'),
      taskProgressMessage?: string(name='TaskProgressMessage', example='{}'),
      taskResult?: string(name='TaskResult', example='{}'),
      taskRetryCount?: string(name='TaskRetryCount', example='1'),
      taskStartTime?: string(name='TaskStartTime', example='2023-03-20 10:53:00'),
      taskStatus?: int32(name='TaskStatus', example='1'),
      taskType?: string(name='TaskType', example='test'),
      updateTime?: string(name='UpdateTime', example='2023-02-16 10:29:16'),
      updateUser?: string(name='UpdateUser', example='111'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='428DCC0D-3C63-5306-BD1B-124396AB97BE'),
  size?: int32(name='Size', example='10'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='20'),
}

model ListAsyncTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAsyncTasksResponseBody(name='body'),
}

async function listAsyncTasks(request: ListAsyncTasksRequest): ListAsyncTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAsyncTasks', 'POST', '/', 'json', true, 'form', request);
}

model ListBuildConfigsRequest {
  agentKey: string(name='AgentKey', example='cd327c3d5d5e44159cc716e23bfa530e_p_beebot_public', position='Query'),
  type?: string(name='Type', example='media', position='Body'),
}

model ListBuildConfigsResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      buildIn?: boolean(name='BuildIn', example='true'),
      createTime?: string(name='CreateTime', example='2023-04-11 06:14:07'),
      createUser?: string(name='CreateUser', example='1'),
      id?: long(name='Id'),
      keywords?: [ 
        {
          description?: string(name='Description'),
          key?: string(name='Key'),
        }
      ](name='Keywords'),
      tag?: string(name='Tag', example='writingStyle'),
      tagDescription?: string(name='TagDescription'),
      type?: string(name='Type', example='media'),
      updateTime?: string(name='UpdateTime', example='2023-04-11 06:14:07'),
      updateUser?: string(name='UpdateUser', example='1'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='DA021073-17CE-5CCF-9FEB-93226C766887'),
  success?: boolean(name='Success', example='true'),
}

model ListBuildConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBuildConfigsResponseBody(name='body'),
}

async function listBuildConfigs(request: ListBuildConfigsRequest): ListBuildConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBuildConfigs', 'POST', '/', 'json', true, 'form', request);
}

model ListDialoguesRequest {
  agentKey: string(name='AgentKey', example='xxxxx_p_efm', position='Query'),
  current?: int32(name='Current', example='1', position='Body'),
  dialogueType?: int32(name='DialogueType', example='2', position='Body'),
  endTime?: string(name='EndTime', example='2024-01-04 11:46:07', position='Body'),
  size?: int32(name='Size', example='10', position='Body'),
  startTime?: string(name='StartTime', example='2024-01-04 11:46:07', position='Body'),
  taskId?: string(name='TaskId', example='xxx', minLength=6, maxLength=64, position='Body'),
}

model ListDialoguesResponseBody = {
  code?: string(name='Code', example='NoData'),
  current?: int32(name='Current', example='1'),
  data?: [ 
    {
      bot?: string(name='Bot', example='xx'),
      createTime?: string(name='CreateTime', example='2024-01-04 11:46:07'),
      createUser?: string(name='CreateUser', example='xx'),
      dialogueType?: int32(name='DialogueType', example='2'),
      taskId?: string(name='TaskId', example='xx'),
      user?: string(name='User', example='x'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  size?: int32(name='Size', example='10'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='100'),
}

model ListDialoguesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDialoguesResponseBody(name='body'),
}

async function listDialogues(request: ListDialoguesRequest): ListDialoguesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDialogues', 'POST', '/', 'json', true, 'form', request);
}

model ListGeneratedContentsRequest {
  agentKey: string(name='AgentKey', example='xxxxx_p_efm', position='Query'),
  contentDomain?: string(name='ContentDomain', example='media', position='Body'),
  current?: int32(name='Current', example='1', position='Body'),
  endTime?: string(name='EndTime', example='2024-01-04 11:46:07', position='Body'),
  size?: int32(name='Size', example='10', position='Body'),
  startTime?: string(name='StartTime', example='2024-01-04 11:46:07', position='Body'),
  title?: string(name='Title', position='Body'),
}

model ListGeneratedContentsResponseBody = {
  code?: string(name='Code', example='NoData'),
  current?: int32(name='Current', example='1'),
  data?: [ 
    {
      content?: string(name='Content'),
      contentDomain?: string(name='ContentDomain', example='media'),
      contentText?: string(name='ContentText'),
      createTime?: string(name='CreateTime', example='2024-01-04 11:46:07'),
      createUser?: string(name='CreateUser', example='123'),
      deviceId?: string(name='DeviceId', example='xxx'),
      id?: long(name='Id', example='10'),
      keywordList?: [ string ](name='KeywordList'),
      keywords?: string(name='Keywords'),
      prompt?: string(name='Prompt'),
      taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
      title?: string(name='Title'),
      updateTime?: string(name='UpdateTime', example='2024-01-04 11:46:07'),
      updateUser?: string(name='UpdateUser', example='1111'),
      uuid?: string(name='Uuid', example='xxx'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  size?: int32(name='Size', example='10'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='100'),
}

model ListGeneratedContentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGeneratedContentsResponseBody(name='body'),
}

async function listGeneratedContents(request: ListGeneratedContentsRequest): ListGeneratedContentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGeneratedContents', 'POST', '/', 'json', true, 'form', request);
}

model ListHotNewsWithTypeRequest {
  agentKey: string(name='AgentKey', example='c160c841c8e54295bf2f441432785944_p_efm', position='Query'),
  current?: int32(name='Current', example='1', position='Body'),
  newsType?: string(name='NewsType', example='society', position='Body'),
  newsTypes?: [ string ](name='NewsTypes', shrink='json', position='Body'),
  size?: int32(name='Size', example='10', position='Body'),
}

model ListHotNewsWithTypeResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: [ 
    {
      news?: [ 
        {
          author?: string(name='Author'),
          content?: string(name='Content'),
          docUuid?: string(name='DocUuid', example='3f7045e099474ba28ceca1b4eb6d6e21'),
          imageUrls?: [ string ](name='ImageUrls'),
          pubTime?: string(name='PubTime', example='2023-04-11 06:14:07'),
          searchSource?: string(name='SearchSource'),
          searchSourceName?: string(name='SearchSourceName'),
          source?: string(name='Source'),
          summary?: string(name='Summary'),
          tag?: string(name='Tag'),
          title?: string(name='Title'),
          updateTime?: string(name='UpdateTime', example='2023-10-14 14:30:00'),
          url?: string(name='Url', example='http://xxxxx/xxx'),
        }
      ](name='News'),
      newsType?: string(name='NewsType', example='society'),
      newsTypeName?: string(name='NewsTypeName'),
      totalPages?: int32(name='TotalPages', example='77'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model ListHotNewsWithTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotNewsWithTypeResponseBody(name='body'),
}

async function listHotNewsWithType(request: ListHotNewsWithTypeRequest): ListHotNewsWithTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHotNewsWithType', 'POST', '/', 'json', true, 'form', request);
}

model ListMaterialDocumentsRequest {
  agentKey: string(name='AgentKey', example='33a2658aaabf4c24b45d50e575125311_p_beebot_public', position='Query'),
  content?: string(name='Content', position='Body'),
  createTimeEnd?: string(name='CreateTimeEnd', example='2023-03-18 02:00:00', position='Body'),
  createTimeStart?: string(name='CreateTimeStart', example='2023-02-19 07:28:11', position='Body'),
  current?: int32(name='Current', example='1', position='Body'),
  docType?: string(name='DocType', example='jsonLine', position='Body'),
  docTypeList?: [ string ](name='DocTypeList', example='excel', shrink='json', position='Body'),
  generatePublicUrl?: boolean(name='GeneratePublicUrl', example='true', position='Body'),
  id?: long(name='Id', example='69', position='Body'),
  keywords?: [ string ](name='Keywords', shrink='json', position='Body'),
  query?: string(name='Query', position='Body'),
  shareAttr?: int32(name='ShareAttr', example='1', position='Body'),
  size?: int32(name='Size', example='10', position='Body'),
  title?: string(name='Title', position='Body'),
  updateTimeEnd?: string(name='UpdateTimeEnd', example='2023-03-18 03:00:00', position='Body'),
  updateTimeStart?: string(name='UpdateTimeStart', example='2023-03-18 02:00:00', position='Body'),
}

model ListMaterialDocumentsResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  current?: int32(name='Current', example='1'),
  data?: [ 
    {
      author?: string(name='Author'),
      createTime?: string(name='CreateTime', example='2023-03-18 02:00:00'),
      createUser?: string(name='CreateUser', example='1'),
      createUserName?: string(name='CreateUserName'),
      docKeywords?: [ string ](name='DocKeywords'),
      docType?: string(name='DocType', example='pdf'),
      externalUrl?: string(name='ExternalUrl', example='https://www.example.com'),
      htmlContent?: string(name='HtmlContent'),
      id?: long(name='Id', example='35'),
      pubTime?: string(name='PubTime', example='2023-03-18 02:00:00'),
      publicUrl?: string(name='PublicUrl', example='https://www.example.com'),
      shareAttr?: int32(name='ShareAttr', example='1'),
      srcFrom?: string(name='SrcFrom', example='user_upload'),
      summary?: string(name='Summary'),
      textContent?: string(name='TextContent'),
      thumbnailInBase64?: string(name='ThumbnailInBase64'),
      title?: string(name='Title'),
      updateTime?: string(name='UpdateTime', example='2023-03-18 02:00:00'),
      updateUser?: string(name='UpdateUser', example='1'),
      updateUserName?: string(name='UpdateUserName'),
      url?: string(name='Url', example='https://www.example.com'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  size?: int32(name='Size', example='10'),
  success?: boolean(name='Success', example='false'),
  total?: int32(name='Total', example='100'),
}

model ListMaterialDocumentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMaterialDocumentsResponseBody(name='body'),
}

async function listMaterialDocuments(request: ListMaterialDocumentsRequest): ListMaterialDocumentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMaterialDocuments', 'POST', '/', 'json', true, 'form', request);
}

model ListVersionsRequest {
  agentKey: string(name='AgentKey', example='33a2658aaabf4c24b45d50e575125311_p_beebot_public', position='Query'),
}

model ListVersionsResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: [ 
    {
      concurrentCount?: int32(name='ConcurrentCount', example='43'),
      endTime?: string(name='EndTime', example='2023-04-23 02:00:34'),
      instanceCount?: int32(name='InstanceCount', example='55'),
      instanceId?: string(name='InstanceId', example='ga-bp12pismsw4v3tzhf62p1'),
      orderId?: long(name='OrderId', example='7'),
      productType?: string(name='ProductType', example='CUSTOMIZE'),
      quota?: int32(name='Quota', example='13'),
      startTime?: string(name='StartTime', example='2023-05-27 04:11:00'),
      useQuota?: int32(name='UseQuota', example='65'),
      versionDetail?: string(name='VersionDetail'),
      versionName?: string(name='VersionName', example='试用版'),
      versionStatus?: int32(name='VersionStatus', example='87'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model ListVersionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVersionsResponseBody(name='body'),
}

async function listVersions(request: ListVersionsRequest): ListVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVersions', 'POST', '/', 'json', false, 'json', request);
}

model QueryAsyncTaskRequest {
  agentKey: string(name='AgentKey', example='33a2658aaabf4c24b45d50e575125311_p_beebot_public', position='Query'),
  taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21', position='Body'),
}

model QueryAsyncTaskResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    createTime?: string(name='CreateTime', example='2021-07-25 14:34:33'),
    createUser?: string(name='CreateUser', example='12121'),
    taskCode?: string(name='TaskCode', example='MaterialDocumentUpload'),
    taskErrorMessage?: string(name='TaskErrorMessage', example='error'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    taskIntermediateResult?: string(name='TaskIntermediateResult', example='{}'),
    taskName?: string(name='TaskName'),
    taskParam?: string(name='TaskParam', example='{"fileKey":"oss://default/xxxx/xxxx/xxx","fileName":"xxxxx.doc"}'),
    taskProgressMessage?: string(name='TaskProgressMessage', example='{}'),
    taskResult?: string(name='TaskResult', example='{}'),
    taskRetryCount?: string(name='TaskRetryCount', example='3'),
    taskStatus?: int32(name='TaskStatus', example='1'),
    updateTime?: string(name='UpdateTime', example='2023-04-27 18:07:43'),
    updateUser?: string(name='UpdateUser', example='12121'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='867C4ABE-4381-5BC2-9810-5A5F334F71CF'),
  success?: boolean(name='Success', example='True'),
}

model QueryAsyncTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAsyncTaskResponseBody(name='body'),
}

async function queryAsyncTask(request: QueryAsyncTaskRequest): QueryAsyncTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAsyncTask', 'POST', '/', 'json', true, 'form', request);
}

model SaveDataSourceOrderConfigRequest {
  agentKey: string(name='AgentKey', example='c160c841c8e54295bf2f441432785944_p_efm', position='Query'),
  productCode: string(name='ProductCode', example='miaobi', position='Body'),
  userConfigDataSourceList: [ 
    {
      code: string(name='Code', example='QuarkCommonNews'),
      name?: string(name='Name'),
      number: int32(name='Number', example='20'),
      type: string(name='Type', example='SystemSearch'),
    }
  ](name='UserConfigDataSourceList', shrink='json', position='Body'),
}

model SaveDataSourceOrderConfigResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model SaveDataSourceOrderConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveDataSourceOrderConfigResponseBody(name='body'),
}

async function saveDataSourceOrderConfig(request: SaveDataSourceOrderConfigRequest): SaveDataSourceOrderConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveDataSourceOrderConfig', 'POST', '/', 'json', true, 'form', request);
}

model SaveMaterialDocumentRequest {
  agentKey: string(name='AgentKey', example='c160c841c8e54295bf2f441432785944_p_efm', position='Query'),
  author?: string(name='Author', position='Body'),
  bothSavePrivateAndShare?: boolean(name='BothSavePrivateAndShare', example='false', position='Body'),
  docKeywords?: [ string ](name='DocKeywords', shrink='json', position='Body'),
  docType: string(name='DocType', example='excel', position='Body'),
  externalUrl?: string(name='ExternalUrl', example='http://xxxxx/xxx', position='Body'),
  htmlContent?: string(name='HtmlContent', position='Body'),
  pubTime?: string(name='PubTime', example='2023-04-11 06:14:07', position='Body'),
  shareAttr?: int32(name='ShareAttr', example='1', position='Body'),
  srcFrom?: string(name='SrcFrom', example='IntellijSearch', position='Body'),
  summary?: string(name='Summary', position='Body'),
  textContent?: string(name='TextContent', position='Body'),
  title?: string(name='Title', position='Body'),
  url?: string(name='Url', example='http://xxxxx/xxx', position='Body'),
}

model SaveMaterialDocumentResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: long(name='Data', example='12'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='false'),
}

model SaveMaterialDocumentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveMaterialDocumentResponseBody(name='body'),
}

async function saveMaterialDocument(request: SaveMaterialDocumentRequest): SaveMaterialDocumentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveMaterialDocument', 'POST', '/', 'json', true, 'form', request);
}

model SubmitAsyncTaskRequest {
  agentKey: string(name='AgentKey', example='2daaa2e0c209xb26acb97009ea77bd4b_p_efm', position='Query'),
  taskCode: string(name='TaskCode', example='MaterialDocumentUpload', position='Body'),
  taskExecuteTime?: string(name='TaskExecuteTime', example='2023-10-14 14:30:00', position='Body'),
  taskName?: string(name='TaskName', example='任务名称', position='Body'),
  taskParam?: string(name='TaskParam', example='任务提交参数', position='Body'),
}

model SubmitAsyncTaskResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: {
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    taskIntermediateResult?: any(name='TaskIntermediateResult', example='{}'),
    taskName?: string(name='TaskName', example='任务名称'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model SubmitAsyncTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitAsyncTaskResponseBody(name='body'),
}

async function submitAsyncTask(request: SubmitAsyncTaskRequest): SubmitAsyncTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitAsyncTask', 'POST', '/', 'json', true, 'form', request);
}

model UpdateMaterialDocumentRequest {
  agentKey: string(name='AgentKey', example='67c520d1fa43455ea44fb69fa402d54d_p_beebot_public', position='Query'),
  author?: string(name='Author', position='Body'),
  docKeywords?: [ string ](name='DocKeywords', shrink='json', position='Body'),
  docType: string(name='DocType', example='image', position='Body'),
  externalUrl?: string(name='ExternalUrl', example='http://xxxxx/xxx', position='Body'),
  htmlContent?: string(name='HtmlContent', position='Body'),
  id: long(name='Id', example='44', position='Body'),
  pubTime?: string(name='PubTime', example='2023-04-11 06:14:07', position='Body'),
  shareAttr?: int32(name='ShareAttr', example='1', position='Body'),
  srcFrom?: string(name='SrcFrom', example='UserUpload', position='Body'),
  summary?: string(name='Summary', position='Body'),
  textContent?: string(name='TextContent', position='Body'),
  title?: string(name='Title', position='Body'),
  url?: string(name='Url', example='http://xxxxx/xxx', position='Body'),
}

model UpdateMaterialDocumentResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: long(name='Data', example='82'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='false'),
}

model UpdateMaterialDocumentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMaterialDocumentResponseBody(name='body'),
}

async function updateMaterialDocument(request: UpdateMaterialDocumentRequest): UpdateMaterialDocumentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMaterialDocument', 'POST', '/', 'json', true, 'form', request);
}

