/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'AiMiaoBi';
  @version = '2023-08-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddDatasetDocumentRequest {
  regionId?: string(name='RegionId', position='Host'),
  datasetId?: long(name='DatasetId', example='1', position='Body'),
  datasetName?: string(name='DatasetName', example='数据集名称', position='Body'),
  document: {
    content?: string(name='Content', example='xxx'),
    disableHandleMultimodalMedia?: boolean(name='DisableHandleMultimodalMedia', example='false'),
    docId?: string(name='DocId', example='业务文档唯一ID'),
    docType?: string(name='DocType', example='文档类型'),
    docUuid?: string(name='DocUuid', example='内部文档唯一ID'),
    extend1?: string(name='Extend1', example='扩展字段1'),
    extend2?: string(name='Extend2', example='扩展字段2'),
    extend3?: string(name='Extend3', example='扩展字段3'),
    multimodalIndexName?: string(name='MultimodalIndexName', example='模型名称 todo 商业化 仅个别账号可传入'),
    multimodalMedias?: [ 
      {
        fileUrl?: string(name='FileUrl', example='图片或视频文件地址'),
        mediaId?: string(name='MediaId', example='多模态数据唯一标识'),
        mediaType?: string(name='MediaType', example='多模态数据类型'),
      }
    ](name='MultimodalMedias'),
    pubTime?: string(name='PubTime', example='2024-12-09 13:35:40'),
    sourceFrom?: string(name='SourceFrom', example='来源'),
    summary?: string(name='Summary', example='文章摘要'),
    title?: string(name='Title', example='xxxxx@xxxxx.com'),
    url?: string(name='Url', example='xxx'),
  }(name='Document', description='This parameter is required.', shrink='json', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-xx', position='Body'),
}

model AddDatasetDocumentResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    docId?: string(name='DocId', example='文档业务唯一标识'),
    docUuid?: string(name='DocUuid', example='8df2d69d63a247b6b52ff455b2d426b6'),
    errorCode?: string(name='ErrorCode', example='Success'),
    errorMessage?: string(name='ErrorMessage'),
    status?: int32(name='Status', example='1'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model AddDatasetDocumentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddDatasetDocumentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddDatasetDocument  AddDatasetDocumentRequest
  * @return AddDatasetDocumentResponse
 */
async function addDatasetDocument(request: AddDatasetDocumentRequest): AddDatasetDocumentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDatasetDocument', 'POST', '/', 'json', true, 'form', request);
}

model CancelAsyncTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='c160c841c8e54295bf2f441432785944_p_efm', position='Query'),
  taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21', position='Body'),
}

model CancelAsyncTaskResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='FB698445-61DA-5361-BF73-1C5F1157E888'),
  success?: boolean(name='Success', example='True'),
}

model CancelAsyncTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelAsyncTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelAsyncTask  CancelAsyncTaskRequest
  * @return CancelAsyncTaskResponse
 */
async function cancelAsyncTask(request: CancelAsyncTaskRequest): CancelAsyncTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelAsyncTask', 'POST', '/', 'json', true, 'form', request);
}

model ClearIntervenesRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
}

model ClearIntervenesResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    failIdList?: [ string ](name='FailIdList'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model ClearIntervenesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ClearIntervenesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ClearIntervenes  ClearIntervenesRequest
  * @return ClearIntervenesResponse
 */
async function clearIntervenes(request: ClearIntervenesRequest): ClearIntervenesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ClearIntervenes', 'POST', '/', 'json', false, 'json', request);
}

model CreateDatasetRequest {
  regionId?: string(name='RegionId', position='Host'),
  datasetConfig?: {
    searchSourceConfigs?: [ 
      {
        demoQuery?: string(name='DemoQuery', example='可以搜索到的关键词，用来验证是否可用'),
        searchSourceRequestConfig?: {
          body?: string(name='Body', example='{}'),
          connectTimeout?: int32(name='ConnectTimeout', example='3000'),
          headers?: [ 
            {
              name?: string(name='Name', example='参数名称'),
              value?: string(name='Value', example='参数值'),
              valueFormat?: string(name='ValueFormat', example='valueType = time 时有效'),
              valueType?: string(name='ValueType', example='参数值数据类型: 默认string'),
            }
          ](name='Headers'),
          method?: string(name='Method', example='请求方式'),
          params?: [ 
            {
              name?: string(name='Name', example='参数名称'),
              value?: string(name='Value', example='参数值'),
              valueFormat?: string(name='ValueFormat', example='valueType = time 时有效'),
              valueType?: string(name='ValueType', example='参数值数据类型: 默认string'),
            }
          ](name='Params'),
          pathParamsEnable?: boolean(name='PathParamsEnable', example='true'),
          socketTimeout?: int32(name='SocketTimeout', example='3000'),
          url?: string(name='Url', example='api地址'),
        }(name='SearchSourceRequestConfig'),
        searchSourceResponseConfig?: {
          jqNodes?: [ 
            {
              jqNodes?: [ 
                {
                  jqNodes?: [ 
                    {
                      key?: string(name='Key', example='title'),
                      path?: string(name='Path'),
                      type?: string(name='Type', example='string'),
                    }
                  ](name='JqNodes'),
                  key?: string(name='Key', example='title'),
                  path?: string(name='Path'),
                  type?: string(name='Type', example='string'),
                }
              ](name='JqNodes'),
              key?: string(name='Key', example='节点key'),
              path?: string(name='Path', example='节点路径'),
              type?: string(name='Type', example='节点数据类型：string number list object base'),
            }
          ](name='JqNodes'),
        }(name='SearchSourceResponseConfig'),
        size?: int32(name='Size', example='10'),
      }
    ](name='SearchSourceConfigs'),
  }(name='DatasetConfig', shrink='json', position='Body'),
  datasetDescription?: string(name='DatasetDescription', example='企业自定义数据集', position='Body'),
  datasetName: string(name='DatasetName', description='This parameter is required.', example='businessDataset', position='Body'),
  datasetType?: string(name='DatasetType', example='CustomSemanticSearch', position='Body'),
  documentHandleConfig?: {
    disableHandleMultimodalMedia?: boolean(name='DisableHandleMultimodalMedia', example='false'),
  }(name='DocumentHandleConfig', shrink='json', position='Body'),
  invokeType?: string(name='InvokeType', example='portal', position='Body'),
  searchDatasetEnable?: int32(name='SearchDatasetEnable', example='3', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-xxx', position='Body'),
}

model CreateDatasetResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    createTime?: string(name='CreateTime', example='2024-11-12 21:46:24'),
    createUser?: string(name='CreateUser', example='xxx'),
    datasetDescription?: string(name='DatasetDescription', example='xxx'),
    datasetId?: long(name='DatasetId', example='1'),
    datasetName?: string(name='DatasetName', example='xxx'),
    datasetType?: string(name='DatasetType', example='CustomSemanticSearch'),
    searchDatasetEnable?: int32(name='SearchDatasetEnable', example='1'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model CreateDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatasetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDataset  CreateDatasetRequest
  * @return CreateDatasetResponse
 */
async function createDataset(request: CreateDatasetRequest): CreateDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataset', 'POST', '/', 'json', true, 'form', request);
}

model CreateGeneratedContentRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxx_efm', position='Query'),
  content: string(name='Content', description='This parameter is required.', position='Body'),
  contentDomain?: string(name='ContentDomain', example='government', position='Body'),
  contentText?: string(name='ContentText', position='Body'),
  keywords?: [ string ](name='Keywords', shrink='json', position='Body'),
  prompt?: string(name='Prompt', position='Body'),
  taskId: string(name='TaskId', description='This parameter is required.', example='xxx', minLength=6, maxLength=64, position='Body'),
  title: string(name='Title', description='This parameter is required.', minLength=2, maxLength=200, position='Body'),
  uuid?: string(name='Uuid', example='xxxx', position='Body'),
}

model CreateGeneratedContentResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: long(name='Data', example='42'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='false'),
}

model CreateGeneratedContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGeneratedContentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateGeneratedContent  CreateGeneratedContentRequest
  * @return CreateGeneratedContentResponse
 */
async function createGeneratedContent(request: CreateGeneratedContentRequest): CreateGeneratedContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGeneratedContent', 'POST', '/', 'json', true, 'form', request);
}

model CreateTokenRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='2daaa2e0c209xb26acb97009ea77bd4b_p_efm', position='Query'),
}

model CreateTokenResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    expiredTime?: long(name='ExpiredTime', example='1705388704855'),
    token?: string(name='Token', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model CreateTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTokenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateToken  CreateTokenRequest
  * @return CreateTokenResponse
 */
async function createToken(request: CreateTokenRequest): CreateTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateToken', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustomTextRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  commodityCode?: string(name='CommodityCode', position='Body'),
  id: long(name='Id', description='This parameter is required.', example='85', position='Body'),
}

model DeleteCustomTextResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: boolean(name='Data', example='false'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model DeleteCustomTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCustomTextResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCustomText  DeleteCustomTextRequest
  * @return DeleteCustomTextResponse
 */
async function deleteCustomText(request: DeleteCustomTextRequest): DeleteCustomTextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomText', 'POST', '/', 'json', true, 'form', request);
}

model DeleteCustomTopicByTopicRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  topic: string(name='Topic', description='This parameter is required.', example='话题', position='Body'),
}

model DeleteCustomTopicByTopicResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: int32(name='Data', example='33'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model DeleteCustomTopicByTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCustomTopicByTopicResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCustomTopicByTopic  DeleteCustomTopicByTopicRequest
  * @return DeleteCustomTopicByTopicResponse
 */
async function deleteCustomTopicByTopic(request: DeleteCustomTopicByTopicRequest): DeleteCustomTopicByTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomTopicByTopic', 'POST', '/', 'json', true, 'form', request);
}

model DeleteCustomTopicViewPointByIdRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  customViewPointId: string(name='CustomViewPointId', description='This parameter is required.', example='dfd73894e6a94fd79fe7ffbe865796fb', position='Body'),
}

model DeleteCustomTopicViewPointByIdResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: int32(name='Data', example='7'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model DeleteCustomTopicViewPointByIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCustomTopicViewPointByIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCustomTopicViewPointById  DeleteCustomTopicViewPointByIdRequest
  * @return DeleteCustomTopicViewPointByIdResponse
 */
async function deleteCustomTopicViewPointById(request: DeleteCustomTopicViewPointByIdRequest): DeleteCustomTopicViewPointByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomTopicViewPointById', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDatasetRequest {
  regionId?: string(name='RegionId', position='Host'),
  datasetId: long(name='DatasetId', description='This parameter is required.', example='1', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='xxxx', position='Body'),
}

model DeleteDatasetResponseBody = {
  code?: string(name='Code', example='NoData'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDataset  DeleteDatasetRequest
  * @return DeleteDatasetResponse
 */
async function deleteDataset(request: DeleteDatasetRequest): DeleteDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataset', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDatasetDocumentRequest {
  regionId?: string(name='RegionId', position='Host'),
  datasetId?: long(name='DatasetId', example='1', position='Body'),
  datasetName?: string(name='DatasetName', example='数据集名称', position='Body'),
  docId?: string(name='DocId', example='xxx', position='Body'),
  docUuid?: string(name='DocUuid', example='xxx', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-xx', position='Body'),
}

model DeleteDatasetDocumentResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: [ string ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDatasetDocumentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatasetDocumentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDatasetDocument  DeleteDatasetDocumentRequest
  * @return DeleteDatasetDocumentResponse
 */
async function deleteDatasetDocument(request: DeleteDatasetDocumentRequest): DeleteDatasetDocumentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDatasetDocument', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDocsRequest {
  regionId?: string(name='RegionId', position='Host'),
  docIds: [ string ](name='DocIds', description='This parameter is required.', shrink='json', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-2setzb9x4ewsd', position='Body'),
}

model DeleteDocsResponseBody = {
  code?: string(name='Code', example='successful'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='2C565EDD-E624-5FED-8565-0A9CB0C8CC46'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDocsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDocsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDocs  DeleteDocsRequest
  * @return DeleteDocsResponse
 */
async function deleteDocs(request: DeleteDocsRequest): DeleteDocsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDocs', 'POST', '/', 'json', true, 'form', request);
}

model DeleteGeneratedContentRequest {
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  id: long(name='Id', description='This parameter is required.', example='99', position='Body'),
  regionId?: string(name='RegionId', position='Query'),
}

model DeleteGeneratedContentResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model DeleteGeneratedContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGeneratedContentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteGeneratedContent  DeleteGeneratedContentRequest
  * @return DeleteGeneratedContentResponse
 */
async function deleteGeneratedContent(request: DeleteGeneratedContentRequest): DeleteGeneratedContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGeneratedContent', 'POST', '/', 'json', true, 'form', request);
}

model DeleteInterveneRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  ruleId?: long(name='RuleId', example='12345', position='Body'),
}

model DeleteInterveneRuleResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    failIdList?: [ string ](name='FailIdList'),
    taskId?: string(name='TaskId', example='dt-s50ntwtywb4y'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='94512A33-8EC1-5452-A793-5C91F18ED2F0'),
  success?: boolean(name='Success', example='true'),
}

model DeleteInterveneRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInterveneRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteInterveneRule  DeleteInterveneRuleRequest
  * @return DeleteInterveneRuleResponse
 */
async function deleteInterveneRule(request: DeleteInterveneRuleRequest): DeleteInterveneRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInterveneRule', 'POST', '/', 'json', true, 'form', request);
}

model DeleteMaterialByIdRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='cd327c3d5d5e44159cc716e23bfa530e_p_beebot_public', position='Query'),
  id: long(name='Id', description='This parameter is required.', example='10', position='Body'),
}

model DeleteMaterialByIdResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: boolean(name='Data', example='false'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='false'),
}

model DeleteMaterialByIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMaterialByIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteMaterialById  DeleteMaterialByIdRequest
  * @return DeleteMaterialByIdResponse
 */
async function deleteMaterialById(request: DeleteMaterialByIdRequest): DeleteMaterialByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMaterialById', 'POST', '/', 'json', true, 'form', request);
}

model DocumentExtractionRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  urls: [ string ](name='Urls', description='This parameter is required.', shrink='json', position='Body'),
}

model DocumentExtractionResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: [ 
    {
      author?: string(name='Author', example='作者'),
      content?: string(name='Content', example='文章内容'),
      docId?: string(name='DocId', example='文档-自定义的唯一ID'),
      docUuid?: string(name='DocUuid', example='8df2d69d63a247b6b52ff455b2d426b6'),
      pubTime?: string(name='PubTime', example='2024-05-14 08:54:33'),
      source?: string(name='Source', example='央视网'),
      summary?: string(name='Summary', example='文章摘要'),
      tag?: string(name='Tag', example='文章标签'),
      title?: string(name='Title', example='文章标题'),
      url?: string(name='Url', example='https://www.example.com/aaa.docx'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model DocumentExtractionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DocumentExtractionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DocumentExtraction  DocumentExtractionRequest
  * @return DocumentExtractionResponse
 */
async function documentExtraction(request: DocumentExtractionRequest): DocumentExtractionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DocumentExtraction', 'POST', '/', 'json', true, 'form', request);
}

model ExportAnalysisTagDetailByTaskIdRequest {
  regionId?: string(name='RegionId', position='Host'),
  categories?: [ string ](name='Categories', shrink='json', position='Body'),
  taskId: string(name='TaskId', description='This parameter is required.', example='xxx', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='xxxx', position='Body'),
}

model ExportAnalysisTagDetailByTaskIdResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: string(name='Data', example='http://www.example.com/xxx.xlsx'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model ExportAnalysisTagDetailByTaskIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportAnalysisTagDetailByTaskIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExportAnalysisTagDetailByTaskId  ExportAnalysisTagDetailByTaskIdRequest
  * @return ExportAnalysisTagDetailByTaskIdResponse
 */
async function exportAnalysisTagDetailByTaskId(request: ExportAnalysisTagDetailByTaskIdRequest): ExportAnalysisTagDetailByTaskIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportAnalysisTagDetailByTaskId', 'POST', '/', 'json', true, 'form', request);
}

model ExportGeneratedContentRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  id: long(name='Id', description='This parameter is required.', example='1', position='Body'),
}

model ExportGeneratedContentResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: string(name='Data', example='xxx'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model ExportGeneratedContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportGeneratedContentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExportGeneratedContent  ExportGeneratedContentRequest
  * @return ExportGeneratedContentResponse
 */
async function exportGeneratedContent(request: ExportGeneratedContentRequest): ExportGeneratedContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportGeneratedContent', 'POST', '/', 'json', true, 'form', request);
}

model ExportHotTopicPlanningProposalsRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  customViewPointIds?: [ string ](name='CustomViewPointIds', example='025c6cee437741368098b790c90166f8', shrink='json', position='Body'),
  exportType?: string(name='ExportType', example='导出文档类型，word:导出为word,xmind:导处为xmind', position='Body'),
  titles?: [ string ](name='Titles', shrink='json', position='Body'),
  topic: string(name='Topic', description='This parameter is required.', example='热榜主题', position='Body'),
  topicSource: string(name='TopicSource', description='This parameter is required.', example='热榜源', position='Body'),
  viewPointType?: string(name='ViewPointType', example='选题策划类型：CustomViewPoints:自定义视角，HotViewPoints:热门视角、TimedViewPoints:时效性视角、WebReviewPoints:网友视角、FreshViewPoints:新颖视角', position='Body'),
}

model ExportHotTopicPlanningProposalsResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: string(name='Data', example='业务数据'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model ExportHotTopicPlanningProposalsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportHotTopicPlanningProposalsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExportHotTopicPlanningProposals  ExportHotTopicPlanningProposalsRequest
  * @return ExportHotTopicPlanningProposalsResponse
 */
async function exportHotTopicPlanningProposals(request: ExportHotTopicPlanningProposalsRequest): ExportHotTopicPlanningProposalsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportHotTopicPlanningProposals', 'POST', '/', 'json', true, 'form', request);
}

model ExportIntervenesRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='fed6555ec9e24b92aeecc34be484b887_p_efm', position='Query'),
}

model ExportIntervenesResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    fileUrl?: string(name='FileUrl', example='http://xxx/xxx.xls'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model ExportIntervenesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportIntervenesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExportIntervenes  ExportIntervenesRequest
  * @return ExportIntervenesResponse
 */
async function exportIntervenes(request: ExportIntervenesRequest): ExportIntervenesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportIntervenes', 'POST', '/', 'json', false, 'json', request);
}

model FeedbackDialogueRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='fcb14f25c9ee41ccad33a049de8f941b_p_outbound_public', position='Query'),
  customerResponse?: string(name='CustomerResponse', example='test', position='Body'),
  goodText?: string(name='GoodText', example='test', position='Body'),
  modifiedResponse?: string(name='ModifiedResponse', example='test', position='Body'),
  rating?: string(name='Rating', example='thumbsDown', position='Body'),
  ratingTags?: [ string ](name='RatingTags', shrink='json', position='Body'),
  sessionId: string(name='SessionId', description='This parameter is required.', example='75bf82fa-b71b-45d7-ae40-0b00e496cd9e', position='Body'),
  taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21', position='Body'),
}

model FeedbackDialogueResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='false'),
}

model FeedbackDialogueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FeedbackDialogueResponseBody(name='body'),
}

/**
  * @param request  the request parameters of FeedbackDialogue  FeedbackDialogueRequest
  * @return FeedbackDialogueResponse
 */
async function feedbackDialogue(request: FeedbackDialogueRequest): FeedbackDialogueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FeedbackDialogue', 'POST', '/', 'json', true, 'form', request);
}

model FetchImageTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='cd327c3d5d5e44159cc716e23bfa530e_p_beebot_public', position='Query'),
  articleTaskId: string(name='ArticleTaskId', description='This parameter is required.', example='e1be065b-adc3-435e-bd01-1c18c5ed75d3', position='Body'),
  taskIdList: [ string ](name='TaskIdList', description='This parameter is required.', example='["9d8c9185-3f75-4a20-aca1-c5bb53dd97b3"]', shrink='json', position='Body'),
}

model FetchImageTaskResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    taskInfoList?: [ 
      {
        id?: long(name='Id', example='1'),
        imageList?: [ 
          {
            code?: string(name='Code', example='NoData'),
            message?: string(name='Message'),
            url?: string(name='Url', example='http://www.example.com/xxx.png'),
          }
        ](name='ImageList'),
        taskId?: string(name='TaskId', example='net-7eb32699000d4193a3c59fc64ae1e55f'),
        taskStatus?: string(name='TaskStatus', example='SUCCESSED'),
      }
    ](name='TaskInfoList'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='DD656AF9-0839-521A-A3D2-F320009F9C87'),
  success?: boolean(name='Success', example='true'),
}

model FetchImageTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FetchImageTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of FetchImageTask  FetchImageTaskRequest
  * @return FetchImageTaskResponse
 */
async function fetchImageTask(request: FetchImageTaskRequest): FetchImageTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FetchImageTask', 'POST', '/', 'json', true, 'form', request);
}

model GenerateFileUrlByKeyRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  fileKey?: string(name='FileKey', example='oss://default/oss-bucket-name/aimiaobi/2021/07/01/1625126400000/1.docx', position='Body'),
  fileName?: string(name='FileName', position='Body'),
}

model GenerateFileUrlByKeyResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: string(name='Data', example='https://www.example.com/a.txt'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model GenerateFileUrlByKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateFileUrlByKeyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GenerateFileUrlByKey  GenerateFileUrlByKeyRequest
  * @return GenerateFileUrlByKeyResponse
 */
async function generateFileUrlByKey(request: GenerateFileUrlByKeyRequest): GenerateFileUrlByKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateFileUrlByKey', 'POST', '/', 'json', true, 'form', request);
}

model GenerateImageTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='e1be065b-adc3-435e-bd01-1c18c5ed75d3', position='Query'),
  articleTaskId: string(name='ArticleTaskId', description='This parameter is required.', example='e1be065b-adc3-435e-bd01-1c18c5ed75d3', position='Body'),
  paragraphList: [ 
    {
      content: string(name='Content', description='This parameter is required.', example='一直忧伤的猫'),
      id: long(name='Id', description='This parameter is required.', example='1'),
      taskId?: string(name='TaskId', example='e1be065b-adc3-435e-bd01-1c18c5ed75d3'),
      taskStatus?: string(name='TaskStatus', example='SUCCESSED'),
    }
  ](name='ParagraphList', description='This parameter is required.', shrink='json', position='Body'),
  size: string(name='Size', description='This parameter is required.', example='1024*1024', position='Body'),
  style: string(name='Style', description='This parameter is required.', example='<auto>', position='Body'),
}

model GenerateImageTaskResponseBody = {
  code?: string(name='Code', example='successful'),
  data?: {
    taskList?: [ 
      {
        content?: string(name='Content', example='一直忧伤的猫'),
        id?: long(name='Id', example='1'),
        taskId?: string(name='TaskId', example='e1be065b-adc3-435e-bd01-1c18c5ed75d3'),
        taskStatus?: string(name='TaskStatus', example='SUCCESSED'),
      }
    ](name='TaskList'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='F2F366D6-E9FE-1006-BB70-2C650896AAB5'),
  success?: boolean(name='Success', example='true'),
}

model GenerateImageTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateImageTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GenerateImageTask  GenerateImageTaskRequest
  * @return GenerateImageTaskResponse
 */
async function generateImageTask(request: GenerateImageTaskRequest): GenerateImageTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateImageTask', 'POST', '/', 'json', true, 'form', request);
}

model GenerateUploadConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  fileName?: string(name='FileName', example='test.docx', position='Body'),
  parentDir: string(name='ParentDir', description='This parameter is required.', example='datasetUpload', position='Body'),
}

model GenerateUploadConfigResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    fileKey?: string(name='FileKey', example='oss://default/oss-bucket-name/aimiaobi/2021/07/01/1625126400000/1.docx'),
    formDatas?: map[string]any(name='FormDatas'),
    postUrl?: string(name='PostUrl', example='https://bucket-name.oss-cn-hangzhou.aliyuncs.com'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model GenerateUploadConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateUploadConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GenerateUploadConfig  GenerateUploadConfigRequest
  * @return GenerateUploadConfigResponse
 */
async function generateUploadConfig(request: GenerateUploadConfigRequest): GenerateUploadConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateUploadConfig', 'POST', '/', 'json', true, 'form', request);
}

model GenerateViewPointRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='c160c841c8e54295bf2f441432785944_p_efm', position='Query'),
  referenceData?: {
    miniDoc?: [ string ](name='MiniDoc'),
  }(name='ReferenceData', shrink='json', position='Body'),
}

model GenerateViewPointResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      point?: string(name='Point'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='94512A33-8EC1-5452-A793-5C91F18ED2F0'),
  success?: boolean(name='Success', example='true'),
}

model GenerateViewPointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateViewPointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GenerateViewPoint  GenerateViewPointRequest
  * @return GenerateViewPointResponse
 */
async function generateViewPoint(request: GenerateViewPointRequest): GenerateViewPointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateViewPoint', 'POST', '/', 'json', true, 'form', request);
}

model GetCategoriesByTaskIdRequest {
  regionId?: string(name='RegionId', position='Host'),
  taskId: string(name='TaskId', description='This parameter is required.', example='xxx', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='xxxx', position='Body'),
}

model GetCategoriesByTaskIdResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: [ 
    {
      category?: string(name='Category'),
      children?: [ 
        {
          category?: string(name='Category'),
        }
      ](name='Children'),
      count?: int32(name='Count', example='2'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model GetCategoriesByTaskIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCategoriesByTaskIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCategoriesByTaskId  GetCategoriesByTaskIdRequest
  * @return GetCategoriesByTaskIdResponse
 */
async function getCategoriesByTaskId(request: GetCategoriesByTaskIdRequest): GetCategoriesByTaskIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCategoriesByTaskId', 'POST', '/', 'json', true, 'form', request);
}

model GetCustomHotTopicBroadcastJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  taskId: string(name='TaskId', description='This parameter is required.', example='2e27abb32cb64f80a0c6e829b6c87a09', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='xxxx', position='Body'),
}

model GetCustomHotTopicBroadcastJobResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    errorMessage?: string(name='ErrorMessage', example='错误信息'),
    hotTopicVersion?: string(name='HotTopicVersion', example='热点话题版本号标识'),
    status?: string(name='Status', example='RUNNING'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model GetCustomHotTopicBroadcastJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCustomHotTopicBroadcastJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCustomHotTopicBroadcastJob  GetCustomHotTopicBroadcastJobRequest
  * @return GetCustomHotTopicBroadcastJobResponse
 */
async function getCustomHotTopicBroadcastJob(request: GetCustomHotTopicBroadcastJobRequest): GetCustomHotTopicBroadcastJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCustomHotTopicBroadcastJob', 'POST', '/', 'json', true, 'form', request);
}

model GetCustomTextRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  commodityCode?: string(name='CommodityCode', example='商品code', position='Body'),
  id: long(name='Id', description='This parameter is required.', example='63', position='Body'),
}

model GetCustomTextResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    content?: string(name='Content', example='内容'),
    createTime?: string(name='CreateTime', example='创建时间'),
    createUser?: string(name='CreateUser', example='创建用户'),
    id?: long(name='Id', example='34'),
    title?: string(name='Title', example='标题'),
    updateTime?: string(name='UpdateTime', example='修改时间'),
    updateUser?: string(name='UpdateUser', example='修改用户'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model GetCustomTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCustomTextResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCustomText  GetCustomTextRequest
  * @return GetCustomTextResponse
 */
async function getCustomText(request: GetCustomTextRequest): GetCustomTextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCustomText', 'POST', '/', 'json', true, 'form', request);
}

model GetCustomTopicSelectionPerspectiveAnalysisTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  taskId: string(name='TaskId', description='This parameter is required.', example='0dbf1055f8a2475d99904c3b76a0ffba', position='Body'),
}

model GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    customViewPointsResult?: {
      attitudes?: [ 
        {
          attitude?: string(name='Attitude', example='当前观点'),
          attitudeType?: string(name='AttitudeType', example='观点类型'),
          ratio?: string(name='Ratio', example='当前观点占比'),
          viewPoints?: [ 
            {
              outlines?: [ 
                {
                  outline?: string(name='Outline', example='大纲'),
                  summary?: string(name='Summary', example='大纲摘要'),
                }
              ](name='Outlines'),
              point?: string(name='Point', example='视角'),
              summary?: string(name='Summary', example='摘要'),
            }
          ](name='ViewPoints'),
        }
      ](name='Attitudes'),
      topic?: string(name='Topic', example='热点主题事件'),
    }(name='CustomViewPointsResult'),
    errorMessage?: string(name='ErrorMessage', example='错误信息'),
    status?: string(name='Status', example='FAILED'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model GetCustomTopicSelectionPerspectiveAnalysisTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCustomTopicSelectionPerspectiveAnalysisTask  GetCustomTopicSelectionPerspectiveAnalysisTaskRequest
  * @return GetCustomTopicSelectionPerspectiveAnalysisTaskResponse
 */
async function getCustomTopicSelectionPerspectiveAnalysisTask(request: GetCustomTopicSelectionPerspectiveAnalysisTaskRequest): GetCustomTopicSelectionPerspectiveAnalysisTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCustomTopicSelectionPerspectiveAnalysisTask', 'POST', '/', 'json', true, 'form', request);
}

model GetDataSourceOrderConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='d9a1f6146a37446495d9985c2e7b267e_p_outbound_public', position='Query'),
  productCode: string(name='ProductCode', description='This parameter is required.', example='miaobi', position='Body'),
}

model GetDataSourceOrderConfigResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    totalDocSize?: int32(name='TotalDocSize', example='1'),
    userConfigDataSourceList?: [ 
      {
        code?: string(name='Code', example='QuarkCommonNews'),
        enable?: boolean(name='Enable'),
        name?: string(name='Name'),
        number?: int32(name='Number', example='20'),
        type?: string(name='Type', example='SystemSearch'),
      }
    ](name='UserConfigDataSourceList'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='428DCC0D-3C63-5306-BD1B-124396AB97BE'),
  success?: boolean(name='Success', example='true'),
}

model GetDataSourceOrderConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataSourceOrderConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataSourceOrderConfig  GetDataSourceOrderConfigRequest
  * @return GetDataSourceOrderConfigResponse
 */
async function getDataSourceOrderConfig(request: GetDataSourceOrderConfigRequest): GetDataSourceOrderConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataSourceOrderConfig', 'POST', '/', 'json', true, 'form', request);
}

model GetDatasetRequest {
  regionId?: string(name='RegionId', position='Host'),
  datasetId?: long(name='DatasetId', example='1', position='Body'),
  datasetName?: string(name='DatasetName', example='businessDataset', minLength=3, maxLength=30, position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-xxx', position='Body'),
}

model GetDatasetResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    createTime?: string(name='CreateTime', example='2024-11-12 21:46:24'),
    createUser?: string(name='CreateUser', example='xxx'),
    datasetConfig?: {
      searchSourceConfigs?: [ 
        {
          demoQuery?: string(name='DemoQuery', example='可以搜索到的关键词，用来验证是否可用'),
          searchSourceRequestConfig?: {
            body?: string(name='Body', example='{}'),
            connectTimeout?: int32(name='ConnectTimeout', example='30'),
            headers?: [ 
              {
                name?: string(name='Name', example='参数名称'),
                value?: string(name='Value', example='参数值'),
                valueFormat?: string(name='ValueFormat', example='valueType = time 时有效'),
                valueType?: string(name='ValueType', example='参数值数据类型: 默认string'),
              }
            ](name='Headers'),
            method?: string(name='Method', example='请求方式'),
            params?: [ 
              {
                name?: string(name='Name', example='参数名称'),
                value?: string(name='Value', example='参数值'),
                valueFormat?: string(name='ValueFormat', example='valueType = time 时有效'),
                valueType?: string(name='ValueType', example='参数值数据类型: 默认string'),
              }
            ](name='Params'),
            pathParamsEnable?: boolean(name='PathParamsEnable', example='true'),
            socketTimeout?: int32(name='SocketTimeout', example='78'),
            url?: string(name='Url', example='api地址'),
          }(name='SearchSourceRequestConfig'),
          searchSourceResponseConfig?: {
            jqNodes?: [ 
              {
                jqNodes?: [ 
                  {
                    jqNodes?: [ 
                      {
                        key?: string(name='Key', example='title'),
                        path?: string(name='Path', example='.title'),
                        type?: string(name='Type', example='string'),
                      }
                    ](name='JqNodes'),
                    key?: string(name='Key', example='title'),
                    path?: string(name='Path', example='.title'),
                    type?: string(name='Type', example='string'),
                  }
                ](name='JqNodes'),
                key?: string(name='Key', example='节点key'),
                path?: string(name='Path', example='节点路径'),
                type?: string(name='Type', example='节点数据类型：string number list object base'),
              }
            ](name='JqNodes'),
          }(name='SearchSourceResponseConfig'),
          size?: int32(name='Size', example='10'),
        }
      ](name='SearchSourceConfigs'),
    }(name='DatasetConfig'),
    datasetDescription?: string(name='DatasetDescription', example='xxx'),
    datasetId?: long(name='DatasetId', example='1'),
    datasetName?: string(name='DatasetName', example='xxx'),
    datasetType?: string(name='DatasetType', example='CustomSemanticSearch'),
    documentHandleConfig?: {
      disableHandleMultimodalMedia?: boolean(name='DisableHandleMultimodalMedia', example='true'),
    }(name='DocumentHandleConfig'),
    searchDatasetEnable?: int32(name='SearchDatasetEnable', example='1'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model GetDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatasetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataset  GetDatasetRequest
  * @return GetDatasetResponse
 */
async function getDataset(request: GetDatasetRequest): GetDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataset', 'POST', '/', 'json', true, 'form', request);
}

model GetDatasetDocumentRequest {
  regionId?: string(name='RegionId', position='Host'),
  datasetId?: long(name='DatasetId', example='1', position='Body'),
  datasetName?: string(name='DatasetName', example='数据集名称', position='Body'),
  docId?: string(name='DocId', example='xxx', position='Body'),
  docUuid?: string(name='DocUuid', example='xxx', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='xxxx', position='Body'),
}

model GetDatasetDocumentResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    content?: string(name='Content'),
    disableHandleMultimodalMedia?: boolean(name='DisableHandleMultimodalMedia', example='true'),
    docId?: string(name='DocId', example='用户指定的文档唯一ID'),
    docUuid?: string(name='DocUuid', example='内部文档唯一ID'),
    pubTime?: string(name='PubTime', example='2024-05-14 08:54:33'),
    sourceFrom?: string(name='SourceFrom', example='来源'),
    summary?: string(name='Summary', example='文章摘要'),
    title?: string(name='Title'),
    url?: string(name='Url', example='https://www.aliyun.com'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model GetDatasetDocumentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatasetDocumentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDatasetDocument  GetDatasetDocumentRequest
  * @return GetDatasetDocumentResponse
 */
async function getDatasetDocument(request: GetDatasetDocumentRequest): GetDatasetDocumentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDatasetDocument', 'POST', '/', 'json', true, 'form', request);
}

model GetDocClusterTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  taskId: string(name='TaskId', description='This parameter is required.', example='93771c8e1142467fb1aedf1763feba1e', position='Body'),
}

model GetDocClusterTaskResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    errorMessage?: string(name='ErrorMessage', example='错误信息'),
    status?: string(name='Status', example='PENDING'),
    topics?: [ 
      {
        docIds?: [ string ](name='DocIds'),
        summary?: string(name='Summary', example='聚类主题摘要'),
        title?: string(name='Title', example='聚类主题名'),
      }
    ](name='Topics'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model GetDocClusterTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDocClusterTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDocClusterTask  GetDocClusterTaskRequest
  * @return GetDocClusterTaskResponse
 */
async function getDocClusterTask(request: GetDocClusterTaskRequest): GetDocClusterTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDocClusterTask', 'POST', '/', 'json', true, 'form', request);
}

model GetDocInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  categoryId?: string(name='CategoryId', example='default', position='Body'),
  docId: string(name='DocId', description='This parameter is required.', example='12345', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-xxx', position='Body'),
}

model GetDocInfoResponseBody = {
  code?: string(name='Code', example='successful'),
  data?: {
    categoryId?: string(name='CategoryId', example='default'),
    docName?: string(name='DocName'),
    docType?: string(name='DocType', example='pdf'),
    fileUrl?: string(name='FileUrl', example='http://xxx/xxx.pdf'),
    status?: int32(name='Status', example='0'),
    statusMessage?: string(name='StatusMessage'),
    videoContents?: [ string ](name='VideoContents'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model GetDocInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDocInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDocInfo  GetDocInfoRequest
  * @return GetDocInfoResponse
 */
async function getDocInfo(request: GetDocInfoRequest): GetDocInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDocInfo', 'POST', '/', 'json', true, 'form', request);
}

model GetEnterpriseVocAnalysisTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  taskId: string(name='TaskId', description='This parameter is required.', example='xxx', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='xxxx', position='Body'),
}

model GetEnterpriseVocAnalysisTaskResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    errorMessage?: string(name='ErrorMessage', example='error'),
    statisticsOverview?: {
      count?: int32(name='Count', example='100'),
      filterDimensionStatistics?: {
        tagValueCountStatistic?: [ 
          {
            tagName?: string(name='TagName', example='xxx'),
            tagTaskType?: string(name='TagTaskType', example='multiTagValues'),
            valueCount?: int32(name='ValueCount', example='100'),
          }
        ](name='TagValueCountStatistic'),
      }(name='FilterDimensionStatistics'),
      tagDimensionStatistics?: {
        tagValueCountStatistic?: [ 
          {
            tagName?: string(name='TagName', example='xxx'),
            tagTaskType?: string(name='TagTaskType', example='multiTagValues'),
            valueCount?: int32(name='ValueCount', example='100'),
          }
        ](name='TagValueCountStatistic'),
      }(name='TagDimensionStatistics'),
    }(name='StatisticsOverview'),
    status?: string(name='Status', example='SUCCESSED'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='200'),
      outputTokens?: long(name='OutputTokens', example='100'),
    }(name='Usage'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model GetEnterpriseVocAnalysisTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEnterpriseVocAnalysisTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetEnterpriseVocAnalysisTask  GetEnterpriseVocAnalysisTaskRequest
  * @return GetEnterpriseVocAnalysisTaskResponse
 */
async function getEnterpriseVocAnalysisTask(request: GetEnterpriseVocAnalysisTaskRequest): GetEnterpriseVocAnalysisTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEnterpriseVocAnalysisTask', 'POST', '/', 'json', true, 'form', request);
}

model GetGeneratedContentRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  id: long(name='Id', description='This parameter is required.', example='1', position='Body'),
}

model GetGeneratedContentResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    content?: string(name='Content'),
    contentDomain?: string(name='ContentDomain', example='media'),
    contentText?: string(name='ContentText'),
    createTime?: string(name='CreateTime', example='2024-01-04 11:46:07'),
    createUser?: string(name='CreateUser', example='1'),
    deviceId?: string(name='DeviceId', example='xxx'),
    id?: long(name='Id', example='86'),
    keywordList?: [ string ](name='KeywordList'),
    keywords?: string(name='Keywords'),
    prompt?: string(name='Prompt'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    title?: string(name='Title'),
    updateTime?: string(name='UpdateTime', example='2024-01-04 11:46:07'),
    updateUser?: string(name='UpdateUser', example='1'),
    uuid?: string(name='Uuid', example='0961a514-2e26-4aa6-b22b-f592d145fe47'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model GetGeneratedContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGeneratedContentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetGeneratedContent  GetGeneratedContentRequest
  * @return GetGeneratedContentResponse
 */
async function getGeneratedContent(request: GetGeneratedContentRequest): GetGeneratedContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGeneratedContent', 'POST', '/', 'json', true, 'form', request);
}

model GetHotTopicBroadcastRequest {
  regionId?: string(name='RegionId', position='Host'),
  calcTotalToken?: boolean(name='CalcTotalToken', example='false', position='Body'),
  category?: string(name='Category', example='分类筛选', position='Body'),
  current?: int32(name='Current', example='1', position='Body'),
  hotTopicVersion?: string(name='HotTopicVersion', example='2024-10-11_13', position='Body'),
  locationQuery?: string(name='LocationQuery', position='Body'),
  locations?: [ string ](name='Locations', shrink='json', position='Body'),
  query?: string(name='Query', position='Body'),
  size?: int32(name='Size', example='5', position='Body'),
  stepForCustomSummaryStyleConfig?: {
    summaryImageCount?: int32(name='SummaryImageCount', example='90'),
    summaryModel?: string(name='SummaryModel', example='摘要模型'),
    summaryPrompt?: string(name='SummaryPrompt', example='摘要-自定义Prompt'),
  }(name='StepForCustomSummaryStyleConfig', shrink='json', position='Body'),
  stepForNewsBroadcastContentConfig?: {
    categories?: [ string ](name='Categories', example='["科技","经济","时政","娱乐"]'),
    customHotValueWeights?: [ 
      {
        dimension?: string(name='Dimension', example='views'),
        weight?: int32(name='Weight', example='1'),
      }
    ](name='CustomHotValueWeights', deprecated='true'),
    topicCount?: int32(name='TopicCount', example='10'),
  }(name='StepForNewsBroadcastContentConfig', shrink='json', position='Body'),
  topics?: [ string ](name='Topics', example='["主题1","主题2"]', shrink='json', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='xxxx', position='Body'),
}

model GetHotTopicBroadcastResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    data?: [ 
      {
        category?: string(name='Category', example='热点话题分类'),
        createTime?: string(name='CreateTime', example='创建时间'),
        customHotValue?: double(name='CustomHotValue', example='34.7905341705522'),
        customTextSummary?: string(name='CustomTextSummary', example='自定义热点话题文本摘要'),
        hotTopic?: string(name='HotTopic', example='热点话题名称'),
        hotTopicVersion?: string(name='HotTopicVersion', example='热点话题摘要版本'),
        hotValue?: double(name='HotValue', example='1.4120480606282884'),
        id?: string(name='Id', example='热点话题ID'),
        images?: [ 
          {
            url?: string(name='Url', example='http://www.example.com/a.png'),
          }
        ](name='Images'),
        inputToken?: int32(name='InputToken', example='29'),
        locations?: [ string ](name='Locations'),
        news?: [ 
          {
            analysisCategory?: string(name='AnalysisCategory'),
            analysisTopic?: string(name='AnalysisTopic', example='聚合后热点名称'),
            author?: string(name='Author'),
            category?: [ string ](name='Category'),
            comments?: [ 
              {
                text?: string(name='Text', example='评论内容'),
                username?: string(name='Username', example='评论用户名'),
              }
            ](name='Comments'),
            content?: string(name='Content'),
            createTime?: string(name='CreateTime', example='2024-06-13 08:45:05'),
            domain?: string(name='Domain'),
            dt?: string(name='Dt', example='2024111110'),
            hotTopic?: string(name='HotTopic', example='原始热点名称'),
            imgList?: [ string ](name='ImgList'),
            logo?: string(name='Logo', description='logo', example='https://www.example.com/a.png'),
            pubTime?: string(name='PubTime', example='2024-10-10 12:12:00'),
            summary?: string(name='Summary', example='摘要'),
            title?: string(name='Title'),
            url?: string(name='Url', example='http://www.example.com/a.png'),
            uuid?: string(name='Uuid', example='主键ID'),
            website?: string(name='Website', example='网站'),
          }
        ](name='News'),
        outputToken?: int32(name='OutputToken', example='22'),
        summary?: {
          inputToken?: int32(name='InputToken', example='17'),
          outputToken?: int32(name='OutputToken', example='41'),
          summaries?: [ 
            {
              summary?: string(name='Summary', example='摘要'),
              title?: string(name='Title', example='标题'),
            }
          ](name='Summaries'),
        }(name='Summary'),
        textSummary?: string(name='TextSummary', example='热点话题文本摘要'),
      }
    ](name='Data'),
    totalCount?: int32(name='TotalCount', example='100'),
    totalTokenInfo?: {
      hotTopicCount?: int32(name='HotTopicCount', example='100'),
      inputTokens?: int32(name='InputTokens', example='100'),
      outputTokens?: int32(name='OutputTokens', example='100'),
      wordCount?: int32(name='WordCount', example='100'),
    }(name='TotalTokenInfo'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model GetHotTopicBroadcastResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHotTopicBroadcastResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetHotTopicBroadcast  GetHotTopicBroadcastRequest
  * @return GetHotTopicBroadcastResponse
 */
async function getHotTopicBroadcast(request: GetHotTopicBroadcastRequest): GetHotTopicBroadcastResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHotTopicBroadcast', 'POST', '/', 'json', true, 'form', request);
}

model GetInterveneGlobalReplyRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='fcb14f25c9ee41ccad33a049de8f941b_p_outbound_public', position='Query'),
}

model GetInterveneGlobalReplyResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    replyMessagList?: [ 
      {
        message?: string(name='Message', example='success'),
        replyType?: string(name='ReplyType', example='namespace_qa_query'),
      }
    ](name='ReplyMessagList'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model GetInterveneGlobalReplyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInterveneGlobalReplyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInterveneGlobalReply  GetInterveneGlobalReplyRequest
  * @return GetInterveneGlobalReplyResponse
 */
async function getInterveneGlobalReply(request: GetInterveneGlobalReplyRequest): GetInterveneGlobalReplyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInterveneGlobalReply', 'POST', '/', 'json', false, 'json', request);
}

model GetInterveneImportTaskInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='67c520d1fa43455ea44fb69fa402d54d_p_beebot_public', position='Query'),
  taskId?: string(name='TaskId', example='19162157', position='Body'),
}

model GetInterveneImportTaskInfoResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    status?: {
      msg?: string(name='Msg', example='success'),
      percentage?: int32(name='Percentage', example='80'),
      status?: int32(name='Status', example='0'),
      taskId?: string(name='TaskId', example='41405255'),
      taskName?: string(name='TaskName', example='ft-task-20190101m8rnK'),
    }(name='Status'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model GetInterveneImportTaskInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInterveneImportTaskInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInterveneImportTaskInfo  GetInterveneImportTaskInfoRequest
  * @return GetInterveneImportTaskInfoResponse
 */
async function getInterveneImportTaskInfo(request: GetInterveneImportTaskInfoRequest): GetInterveneImportTaskInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInterveneImportTaskInfo', 'POST', '/', 'json', true, 'form', request);
}

model GetInterveneRuleDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='2daaa2e0c209xb26acb97009ea77bd4b_p_efm', position='Query'),
  ruleId?: long(name='RuleId', example='12345', position='Body'),
}

model GetInterveneRuleDetailResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    interveneRuleDetail?: {
      answerConfig?: [ 
        {
          answerType?: int32(name='AnswerType', example='0'),
          message?: string(name='Message'),
          namespace?: string(name='Namespace', example='namespace_qa_query'),
        }
      ](name='AnswerConfig'),
      effectConfig?: {
        effectType?: int32(name='EffectType', example='0'),
        endTime?: string(name='EndTime', example='2023-11-25 14:21:15'),
        startTime?: string(name='StartTime', example='2023-11-25 14:21:15'),
      }(name='EffectConfig'),
      interveneType?: int32(name='InterveneType', example='0'),
      namespaceList?: [ string ](name='NamespaceList'),
      ruleId?: long(name='RuleId', example='100418'),
      ruleName?: string(name='RuleName'),
    }(name='InterveneRuleDetail'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='428DCC0D-3C63-5306-BD1B-124396AB97BE'),
  success?: boolean(name='Success', example='true'),
}

model GetInterveneRuleDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInterveneRuleDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInterveneRuleDetail  GetInterveneRuleDetailRequest
  * @return GetInterveneRuleDetailResponse
 */
async function getInterveneRuleDetail(request: GetInterveneRuleDetailRequest): GetInterveneRuleDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInterveneRuleDetail', 'POST', '/', 'json', true, 'form', request);
}

model GetInterveneTemplateFileUrlRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='c160c841c8e54295bf2f441432785944_p_efm', position='Query'),
}

model GetInterveneTemplateFileUrlResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    fileUrl?: string(name='FileUrl', example='http://xxx/xxx.xls'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='DA021073-17CE-5CCF-9FEB-93226C766887'),
  success?: boolean(name='Success', example='true'),
}

model GetInterveneTemplateFileUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInterveneTemplateFileUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInterveneTemplateFileUrl  GetInterveneTemplateFileUrlRequest
  * @return GetInterveneTemplateFileUrlResponse
 */
async function getInterveneTemplateFileUrl(request: GetInterveneTemplateFileUrlRequest): GetInterveneTemplateFileUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInterveneTemplateFileUrl', 'POST', '/', 'json', false, 'json', request);
}

model GetMaterialByIdRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='67c520d1fa43455ea44fb69fa402d54d_p_beebot_public', position='Query'),
  id: long(name='Id', description='This parameter is required.', example='60', position='Body'),
}

model GetMaterialByIdResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: {
    author?: string(name='Author'),
    createTime?: string(name='CreateTime', example='2023-03-21 11:34:19'),
    createUser?: string(name='CreateUser', example='1'),
    docKeywords?: [ string ](name='DocKeywords'),
    docType?: string(name='DocType', example='pdf'),
    externalUrl?: string(name='ExternalUrl', example='https://www.example.com'),
    htmlContent?: string(name='HtmlContent'),
    id?: long(name='Id', example='32'),
    pubTime?: string(name='PubTime', example='2023-04-11 06:14:07'),
    publicUrl?: string(name='PublicUrl', example='https://www.example.com'),
    shareAttr?: int32(name='ShareAttr', example='1'),
    srcFrom?: string(name='SrcFrom', example='user_upload'),
    summary?: string(name='Summary'),
    textContent?: string(name='TextContent'),
    thumbnailInBase64?: string(name='ThumbnailInBase64'),
    title?: string(name='Title'),
    updateTime?: string(name='UpdateTime', example='2022-04-08 19:33:01'),
    updateUser?: string(name='UpdateUser', example='1'),
    url?: string(name='Url', example='https://www.example.com'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='false'),
}

model GetMaterialByIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMaterialByIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMaterialById  GetMaterialByIdRequest
  * @return GetMaterialByIdResponse
 */
async function getMaterialById(request: GetMaterialByIdRequest): GetMaterialByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMaterialById', 'POST', '/', 'json', true, 'form', request);
}

model GetPropertiesRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxx_efm', position='Query'),
}

model GetPropertiesResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: {
    chatConfig?: map[string]any(name='ChatConfig'),
    consoleConfig?: {
      tipContent?: string(name='TipContent', example='xx'),
      title?: string(name='Title'),
    }(name='ConsoleConfig'),
    generalConfigMap?: map[string]any(name='GeneralConfigMap'),
    intelligentSearchConfig?: {
      productDescription?: string(name='ProductDescription', example='xxx'),
      searchSamples?: [ 
        {
          articles?: [ 
            {
              select?: boolean(name='Select', example='true'),
              stared?: boolean(name='Stared', example='false'),
              title?: string(name='Title', example='xx'),
              url?: string(name='Url', example='http://xxx.com'),
            }
          ](name='Articles'),
          prompt?: string(name='Prompt', example='xx'),
          text?: string(name='Text', example='xxx'),
        }
      ](name='SearchSamples'),
      searchSources?: [ 
        {
          code?: string(name='Code', example='xx'),
          datasetName?: string(name='DatasetName', example='xx'),
          name?: string(name='Name', example='xx'),
        }
      ](name='SearchSources'),
    }(name='IntelligentSearchConfig'),
    searchSources?: [ 
      {
        label?: string(name='Label'),
        value?: string(name='Value', example='SystemSearch'),
      }
    ](name='SearchSources'),
    slrAuthorized?: boolean(name='SlrAuthorized', example='true'),
    userInfo?: {
      agentId?: string(name='AgentId', example='1'),
      tenantId?: string(name='TenantId', example='1'),
      userId?: string(name='UserId', example='1'),
      username?: string(name='Username', example='admin'),
    }(name='UserInfo'),
    wanxiangImageSizeConfig?: [ 
      {
        name?: string(name='Name', example='1:1'),
        value?: string(name='Value', example='1024*1024'),
      }
    ](name='WanxiangImageSizeConfig'),
    wanxiangImageStyleConfig?: [ 
      {
        name?: string(name='Name'),
        pic?: string(name='Pic', example='https://img.alicdn.com/imgextra/i4/O1CN01RzKicz1W0YWzYkWcK_!!6000000002726-2-tps-132-104.png'),
        value?: string(name='Value', example='<auto>'),
      }
    ](name='WanxiangImageStyleConfig'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model GetPropertiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPropertiesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetProperties  GetPropertiesRequest
  * @return GetPropertiesResponse
 */
async function getProperties(request: GetPropertiesRequest): GetPropertiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetProperties', 'POST', '/', 'json', false, 'json', request);
}

model GetSmartClipTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  taskId: string(name='TaskId', description='This parameter is required.', example='task-03d46184ee7d8749', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='xxxx', position='Body'),
}

model GetSmartClipTaskResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    errorMessage?: string(name='ErrorMessage'),
    status?: string(name='Status', example='RUNNING'),
    subJobs?: [ 
      {
        errorMessage?: string(name='ErrorMessage', example='x\\"x\\"x\\"x'),
        fileAttr?: {
          duration?: double(name='Duration', example='120'),
          fileLength?: string(name='FileLength', example='290804'),
          fileName?: string(name='FileName', example='2024-12-12.mp4'),
          height?: int32(name='Height', example='1080'),
          tmpUrl?: string(name='TmpUrl', example='http://www.example.com/tmp.mp4'),
          width?: int32(name='Width', example='1920'),
        }(name='FileAttr'),
        fileKey?: string(name='FileKey', example='oss://default/bucket-name/path-xxx/xxx-1.mp4'),
        status?: string(name='Status', example='RUNNING'),
        subJobId?: string(name='SubJobId', example='xxxxx'),
      }
    ](name='SubJobs'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model GetSmartClipTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSmartClipTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSmartClipTask  GetSmartClipTaskRequest
  * @return GetSmartClipTaskResponse
 */
async function getSmartClipTask(request: GetSmartClipTaskRequest): GetSmartClipTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSmartClipTask', 'POST', '/', 'json', true, 'form', request);
}

model GetTopicByIdRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  id: string(name='Id', description='This parameter is required.', example='数据ID', position='Body'),
}

model GetTopicByIdResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    asyncTaskId?: string(name='AsyncTaskId', example='异步任务ID（自定义主题场景下使用）'),
    createUser?: string(name='CreateUser', example='创建用户ID（自定义主题场景下使用）'),
    hotValue?: long(name='HotValue', example='43'),
    id?: string(name='Id', example='热榜ID'),
    status?: string(name='Status', example='PENDING'),
    structureSummary?: [ 
      {
        docList?: [ 
          {
            source?: string(name='Source'),
            title?: string(name='Title'),
            url?: string(name='Url', example='http://www.example.com'),
          }
        ](name='DocList'),
        summary?: string(name='Summary', example='摘要'),
        title?: string(name='Title', example='标题'),
      }
    ](name='StructureSummary'),
    summary?: string(name='Summary', example='热榜摘要'),
    taskErrorMessage?: string(name='TaskErrorMessage', example='异步任务失败错误信息'),
    taskStatus?: int32(name='TaskStatus', example='14'),
    topic?: string(name='Topic', example='主题唯一名称'),
    topicSource?: string(name='TopicSource', example='热榜源，目前支持的热榜源: Toutiao：头条、Quark：夸克、Baidu：百度、Sina：新浪。Custom：自定义、Aggregation：热点话题榜'),
    version?: string(name='Version', example='数据版本'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model GetTopicByIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTopicByIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTopicById  GetTopicByIdRequest
  * @return GetTopicByIdResponse
 */
async function getTopicById(request: GetTopicByIdRequest): GetTopicByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTopicById', 'POST', '/', 'json', true, 'form', request);
}

model GetTopicSelectionPerspectiveAnalysisTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  taskId?: string(name='TaskId', example='c9f226b02cca4f42a84c5e955c39dfd2', position='Body'),
}

model GetTopicSelectionPerspectiveAnalysisTaskResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    errorMessage?: string(name='ErrorMessage', example='错误信息'),
    freshViewPointsResult?: {
      attitudes?: [ 
        {
          attitude?: string(name='Attitude', example='当前观点'),
          attitudeType?: string(name='AttitudeType', example='观点类型'),
          ratio?: string(name='Ratio', example='当前观点占比'),
          viewPoints?: [ 
            {
              outlines?: [ 
                {
                  outline?: string(name='Outline', example='大纲'),
                  summary?: string(name='Summary', example='大纲摘要'),
                }
              ](name='Outlines'),
              point?: string(name='Point', example='视角'),
              summary?: string(name='Summary', example='摘要'),
            }
          ](name='ViewPoints'),
        }
      ](name='Attitudes'),
    }(name='FreshViewPointsResult'),
    hotViewPointsResult?: {
      attitudes?: [ 
        {
          attitude?: string(name='Attitude', example='当前观点'),
          attitudeType?: string(name='AttitudeType', example='观点类型'),
          news?: [ 
            {
              content?: string(name='Content'),
              createTime?: string(name='CreateTime'),
              docId?: string(name='DocId', example='9957175DEDCF49C5ACF7A956B4FD67B2'),
              docUuid?: string(name='DocUuid', example='123456'),
              imageUrls?: [ string ](name='ImageUrls', example='https://www.example.com/aaa.png'),
              pubTime?: string(name='PubTime'),
              source?: string(name='Source'),
              summary?: string(name='Summary'),
              tags?: [ string ](name='Tags', example='["标签1","标签2"]'),
              title?: string(name='Title'),
              topic?: string(name='Topic', example='文章主题'),
              url?: string(name='Url'),
            }
          ](name='News'),
          ratio?: string(name='Ratio', example='当前观点占比'),
          viewPoints?: [ 
            {
              outlines?: [ 
                {
                  outline?: string(name='Outline', example='大纲'),
                  summary?: string(name='Summary', example='大纲摘要'),
                }
              ](name='Outlines'),
              point?: string(name='Point', example='视角'),
              summary?: string(name='Summary', example='摘要'),
            }
          ](name='ViewPoints'),
        }
      ](name='Attitudes'),
    }(name='HotViewPointsResult'),
    status?: string(name='Status', example='SUSPENDED'),
    timedViewPointsResult?: {
      attitudes?: [ 
        {
          attitude?: string(name='Attitude', example='当前观点'),
          attitudeType?: string(name='AttitudeType', example='观点类型'),
          pubTime?: string(name='PubTime', example='2024-01-22 10:29'),
          ratio?: string(name='Ratio', example='当前观点占比'),
          source?: string(name='Source', example='新浪'),
          title?: string(name='Title', example='标题'),
          url?: string(name='Url', example='http://www.example.com/news/1.html'),
          viewPoints?: [ 
            {
              outlines?: [ 
                {
                  outline?: string(name='Outline', example='大纲'),
                  summary?: string(name='Summary', example='大纲摘要'),
                }
              ](name='Outlines'),
              point?: string(name='Point', example='视角'),
              summary?: string(name='Summary', example='摘要'),
            }
          ](name='ViewPoints'),
        }
      ](name='Attitudes'),
    }(name='TimedViewPointsResult'),
    topic?: string(name='Topic', example='热点主题事件'),
    topicSummaryResult?: {
      summaries?: [ 
        {
          docList?: [ 
            {
              source?: string(name='Source'),
              title?: string(name='Title'),
              url?: string(name='Url', example='http://www.example.com'),
            }
          ](name='DocList'),
          summary?: string(name='Summary', example='摘要'),
          title?: string(name='Title', example='标题'),
        }
      ](name='Summaries'),
    }(name='TopicSummaryResult'),
    webReviewPointsResult?: {
      attitudes?: [ 
        {
          attitude?: string(name='Attitude', example='当前观点'),
          attitudeType?: string(name='AttitudeType', example='观点类型'),
          comments?: [ 
            {
              source?: string(name='Source', example='来源'),
              text?: string(name='Text', example='评论内容'),
              title?: string(name='Title', example='标题'),
              url?: string(name='Url', example='当前评论所属的URL'),
              username?: string(name='Username', example='评论用户名'),
            }
          ](name='Comments'),
          ratio?: string(name='Ratio', example='当前观点占比'),
          viewPoints?: [ 
            {
              outlines?: [ 
                {
                  outline?: string(name='Outline', example='大纲'),
                  summary?: string(name='Summary', example='大纲摘要'),
                }
              ](name='Outlines'),
              point?: string(name='Point', example='视角'),
              summary?: string(name='Summary', example='摘要'),
            }
          ](name='ViewPoints'),
        }
      ](name='Attitudes'),
    }(name='WebReviewPointsResult'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model GetTopicSelectionPerspectiveAnalysisTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTopicSelectionPerspectiveAnalysisTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTopicSelectionPerspectiveAnalysisTask  GetTopicSelectionPerspectiveAnalysisTaskRequest
  * @return GetTopicSelectionPerspectiveAnalysisTaskResponse
 */
async function getTopicSelectionPerspectiveAnalysisTask(request: GetTopicSelectionPerspectiveAnalysisTaskRequest): GetTopicSelectionPerspectiveAnalysisTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTopicSelectionPerspectiveAnalysisTask', 'POST', '/', 'json', true, 'form', request);
}

model ImportInterveneFileRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  docName?: string(name='DocName', example='import.xls', position='Body'),
  fileKey?: string(name='FileKey', example='import.xsl', position='Body'),
  fileUrl?: string(name='FileUrl', example='http://xxx/xxx.xls', position='Body'),
}

model ImportInterveneFileResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    failIdList?: [ string ](name='FailIdList'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model ImportInterveneFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportInterveneFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ImportInterveneFile  ImportInterveneFileRequest
  * @return ImportInterveneFileResponse
 */
async function importInterveneFile(request: ImportInterveneFileRequest): ImportInterveneFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportInterveneFile', 'POST', '/', 'json', true, 'form', request);
}

model ImportInterveneFileAsyncRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='c160c841c8e54295bf2f441432785944_p_efm', position='Query'),
  docName?: string(name='DocName', example='import.xls', position='Body'),
  fileKey?: string(name='FileKey', example='import.xls', position='Body'),
  fileUrl?: string(name='FileUrl', example='https://xxx/import.xls', position='Body'),
}

model ImportInterveneFileAsyncResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    failIdList?: [ string ](name='FailIdList'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='94512A33-8EC1-5452-A793-5C91F18ED2F0'),
  success?: boolean(name='Success', example='true'),
}

model ImportInterveneFileAsyncResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportInterveneFileAsyncResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ImportInterveneFileAsync  ImportInterveneFileAsyncRequest
  * @return ImportInterveneFileAsyncResponse
 */
async function importInterveneFileAsync(request: ImportInterveneFileAsyncRequest): ImportInterveneFileAsyncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportInterveneFileAsync', 'POST', '/', 'json', true, 'form', request);
}

model InsertInterveneGlobalReplyRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxx_efm', position='Query'),
  replyMessagList?: [ 
    {
      message?: string(name='Message'),
      replyType?: string(name='ReplyType'),
    }
  ](name='ReplyMessagList', shrink='json', position='Body'),
}

model InsertInterveneGlobalReplyResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    failIdList?: [ string ](name='FailIdList'),
    taskId?: string(name='TaskId', example='4829'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model InsertInterveneGlobalReplyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InsertInterveneGlobalReplyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of InsertInterveneGlobalReply  InsertInterveneGlobalReplyRequest
  * @return InsertInterveneGlobalReplyResponse
 */
async function insertInterveneGlobalReply(request: InsertInterveneGlobalReplyRequest): InsertInterveneGlobalReplyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InsertInterveneGlobalReply', 'POST', '/', 'json', true, 'form', request);
}

model InsertInterveneRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  interveneRuleConfig?: {
    answerConfig?: [ 
      {
        answerType?: int32(name='AnswerType', example='0'),
        message?: string(name='Message'),
        namespace?: string(name='Namespace', example='namespace_qa_query'),
      }
    ](name='AnswerConfig'),
    effectConfig?: {
      effectType?: int32(name='EffectType', example='0'),
      endTime?: string(name='EndTime', example='2023-03-28 06:04:29'),
      startTime?: string(name='StartTime', example='2023-03-28 06:04:29'),
    }(name='EffectConfig'),
    interveneConfigList?: [ 
      {
        id?: string(name='Id', description='id', example='37249'),
        operationType?: int32(name='OperationType', example='0'),
        query?: string(name='Query'),
      }
    ](name='InterveneConfigList'),
    interveneType?: int32(name='InterveneType', example='0'),
    namespaceList?: [ string ](name='NamespaceList'),
    ruleId?: long(name='RuleId', example='2'),
    ruleName?: string(name='RuleName', example='tf-test-rule'),
  }(name='InterveneRuleConfig', shrink='json', position='Body'),
}

model InsertInterveneRuleResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    ruleId?: long(name='RuleId', example='12345'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='DD656AF9-0839-521A-A3D2-F320009F9C87'),
  success?: boolean(name='Success', example='true'),
}

model InsertInterveneRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InsertInterveneRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of InsertInterveneRule  InsertInterveneRuleRequest
  * @return InsertInterveneRuleResponse
 */
async function insertInterveneRule(request: InsertInterveneRuleRequest): InsertInterveneRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InsertInterveneRule', 'POST', '/', 'json', true, 'form', request);
}

model ListAnalysisTagDetailByTaskIdRequest {
  regionId?: string(name='RegionId', position='Host'),
  categories?: [ string ](name='Categories', shrink='json', position='Body'),
  current?: int32(name='Current', example='1', position='Body'),
  maxResults?: int32(name='MaxResults', example='10', position='Body'),
  nextToken?: string(name='NextToken', example='token-xxxx', position='Body'),
  size?: int32(name='Size', example='3', position='Body'),
  taskId: string(name='TaskId', description='This parameter is required.', example='xxx', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='xxxx', position='Body'),
}

model ListAnalysisTagDetailByTaskIdResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: [ 
    {
      content?: string(name='Content', example='xxx'),
      contentTags?: [ 
        {
          summaryOverview?: string(name='SummaryOverview', example='xxx'),
          tagName?: string(name='TagName', example='xxx'),
          tags?: [ string ](name='Tags'),
        }
      ](name='ContentTags'),
      id?: long(name='Id', example='112'),
      tagTaskType?: string(name='TagTaskType', example='summaryAndOverview'),
      taskId?: string(name='TaskId', example='xxx'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  maxResults?: int32(name='MaxResults', example='10'),
  message?: string(name='Message', example='success'),
  nextToken?: string(name='NextToken', example='token-xxxx'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListAnalysisTagDetailByTaskIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAnalysisTagDetailByTaskIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAnalysisTagDetailByTaskId  ListAnalysisTagDetailByTaskIdRequest
  * @return ListAnalysisTagDetailByTaskIdResponse
 */
async function listAnalysisTagDetailByTaskId(request: ListAnalysisTagDetailByTaskIdRequest): ListAnalysisTagDetailByTaskIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAnalysisTagDetailByTaskId', 'POST', '/', 'json', true, 'form', request);
}

model ListAsyncTasksRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='cd327c3d5d5e44159cc716e23bfa530e_p_beebot_public', position='Query'),
  createTimeEnd?: string(name='CreateTimeEnd', example='2023-03-18 02:00:00', position='Body'),
  createTimeStart?: string(name='CreateTimeStart', example='2023-02-19 07:28:11', position='Body'),
  current?: int32(name='Current', example='1', position='Body'),
  size?: int32(name='Size', example='10', position='Body'),
  taskCode?: string(name='TaskCode', example='MaterialDocumentUpload', position='Body'),
  taskName?: string(name='TaskName', position='Body'),
  taskStatus?: int32(name='TaskStatus', example='1', position='Body'),
  taskStatusList?: [ int32 ](name='TaskStatusList', shrink='json', position='Body'),
  taskType?: string(name='TaskType', position='Body'),
  taskTypeList?: [ string ](name='TaskTypeList', shrink='json', position='Body'),
}

model ListAsyncTasksResponseBody = {
  code?: string(name='Code', example='200'),
  current?: int32(name='Current', example='1'),
  data?: [ 
    {
      createTime?: string(name='CreateTime', example='2020-12-23 15:41:58'),
      createUser?: string(name='CreateUser', example='1111'),
      id?: long(name='Id', example='1'),
      taskCode?: string(name='TaskCode', example='MaterialDocumentUpload'),
      taskDefinition?: string(name='TaskDefinition', example='{}'),
      taskEndTime?: string(name='TaskEndTime', example='2023-03-09 00:00:00'),
      taskErrorMessage?: string(name='TaskErrorMessage'),
      taskExecuteTime?: string(name='TaskExecuteTime', example='2023-10-14 14:30:00'),
      taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
      taskInnerErrorMessage?: string(name='TaskInnerErrorMessage'),
      taskIntermediateResult?: string(name='TaskIntermediateResult', example='{}'),
      taskName?: string(name='TaskName'),
      taskParam?: string(name='TaskParam', example='{}'),
      taskProgressMessage?: string(name='TaskProgressMessage', example='{}'),
      taskResult?: string(name='TaskResult', example='{}'),
      taskRetryCount?: string(name='TaskRetryCount', example='1'),
      taskStartTime?: string(name='TaskStartTime', example='2023-03-20 10:53:00'),
      taskStatus?: int32(name='TaskStatus', example='1'),
      taskType?: string(name='TaskType', example='test'),
      updateTime?: string(name='UpdateTime', example='2023-02-16 10:29:16'),
      updateUser?: string(name='UpdateUser', example='111'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='428DCC0D-3C63-5306-BD1B-124396AB97BE'),
  size?: int32(name='Size', example='10'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='20'),
}

model ListAsyncTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAsyncTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAsyncTasks  ListAsyncTasksRequest
  * @return ListAsyncTasksResponse
 */
async function listAsyncTasks(request: ListAsyncTasksRequest): ListAsyncTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAsyncTasks', 'POST', '/', 'json', true, 'form', request);
}

model ListBuildConfigsRequest {
  agentKey: string(name='AgentKey', description='This parameter is required.', example='cd327c3d5d5e44159cc716e23bfa530e_p_beebot_public', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  type?: string(name='Type', example='media', position='Body'),
}

model ListBuildConfigsResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      buildIn?: boolean(name='BuildIn', example='true'),
      createTime?: string(name='CreateTime', example='2023-04-11 06:14:07'),
      createUser?: string(name='CreateUser', example='1'),
      id?: long(name='Id'),
      keywords?: [ 
        {
          description?: string(name='Description'),
          key?: string(name='Key'),
        }
      ](name='Keywords'),
      tag?: string(name='Tag', example='writingStyle'),
      tagDescription?: string(name='TagDescription'),
      type?: string(name='Type', example='media'),
      updateTime?: string(name='UpdateTime', example='2023-04-11 06:14:07'),
      updateUser?: string(name='UpdateUser', example='1'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='DA021073-17CE-5CCF-9FEB-93226C766887'),
  success?: boolean(name='Success', example='true'),
}

model ListBuildConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBuildConfigsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListBuildConfigs  ListBuildConfigsRequest
  * @return ListBuildConfigsResponse
 */
async function listBuildConfigs(request: ListBuildConfigsRequest): ListBuildConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBuildConfigs', 'POST', '/', 'json', true, 'form', request);
}

model ListCustomTextRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  commodityCode?: string(name='CommodityCode', example='商品code', position='Body'),
}

model ListCustomTextResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: [ 
    {
      content?: string(name='Content', example='内容'),
      createTime?: string(name='CreateTime', example='创建时间'),
      createUser?: string(name='CreateUser', example='创建用户'),
      id?: long(name='Id', example='40'),
      title?: string(name='Title', example='标题'),
      updateTime?: string(name='UpdateTime', example='修改时间'),
      updateUser?: string(name='UpdateUser', example='修改用户'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model ListCustomTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCustomTextResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCustomText  ListCustomTextRequest
  * @return ListCustomTextResponse
 */
async function listCustomText(request: ListCustomTextRequest): ListCustomTextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCustomText', 'POST', '/', 'json', true, 'form', request);
}

model ListCustomViewPointsRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  attitude?: string(name='Attitude', example='观点', position='Body'),
  attitudes?: [ string ](name='Attitudes', example='观点
     *', shrink='json', position='Body'),
  customViewPointId?: string(name='CustomViewPointId', example='461591f4880747f890702c1b90494d1a', position='Body'),
  customViewPointIds?: [ string ](name='CustomViewPointIds', example='7ece3d1212e04c9ca716ae2486228f3f', shrink='json', position='Body'),
  maxResults?: int32(name='MaxResults', example='52', minimum=0, position='Body'),
  nextToken?: string(name='NextToken', example='下一页的token', position='Body'),
  topic?: string(name='Topic', example='热榜主题', position='Body'),
  topicId?: string(name='TopicId', example='1d20ed14db0840efb1c7eaaf4d46352b', position='Body'),
}

model ListCustomViewPointsResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: [ 
    {
      asyncTaskId?: string(name='AsyncTaskId', example='2323ac73e174428a98c91097a59c67e0'),
      attitude?: string(name='Attitude', example='观点'),
      createTime?: string(name='CreateTime', example='2024-08-15 16:18:59'),
      createUser?: string(name='CreateUser', example='1'),
      id?: string(name='Id', example='709806dd051042d5ab9de8bdbb3a64ca'),
      status?: string(name='Status', example='RUNNING'),
      taskErrorMessage?: string(name='TaskErrorMessage', example='参数校验失败'),
      taskStatus?: int32(name='TaskStatus', example='1'),
      viewPoints?: [ 
        {
          outlines?: [ 
            {
              outline?: string(name='Outline', example='大纲'),
              summary?: string(name='Summary', example='大纲摘要'),
            }
          ](name='Outlines'),
          point?: string(name='Point', example='视角'),
          summary?: string(name='Summary', example='摘要'),
        }
      ](name='ViewPoints'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  maxResults?: int32(name='MaxResults', example='60'),
  message?: string(name='Message', example='success'),
  nextToken?: string(name='NextToken', example='下一页的token'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='73'),
}

model ListCustomViewPointsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCustomViewPointsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCustomViewPoints  ListCustomViewPointsRequest
  * @return ListCustomViewPointsResponse
 */
async function listCustomViewPoints(request: ListCustomViewPointsRequest): ListCustomViewPointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCustomViewPoints', 'POST', '/', 'json', true, 'form', request);
}

model ListDatasetDocumentsRequest {
  regionId?: string(name='RegionId', position='Host'),
  datasetDescription?: string(name='DatasetDescription', example='xx', position='Body'),
  datasetId?: long(name='DatasetId', example='1', position='Body'),
  datasetName?: string(name='DatasetName', example='数据集名称', position='Body'),
  docType?: string(name='DocType', example='text', position='Body'),
  excludeFields?: [ string ](name='ExcludeFields', shrink='json', position='Body'),
  includeFields?: [ string ](name='IncludeFields', shrink='json', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=0, position='Body'),
  pageSize?: int32(name='PageSize', example='10', minimum=0, position='Body'),
  query?: string(name='Query', example='搜索条件', position='Body'),
  status?: int32(name='Status', example='100', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='xxxx', position='Body'),
}

model ListDatasetDocumentsResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: [ 
    {
      categoryUuid?: string(name='CategoryUuid', example='xx'),
      content?: string(name='Content', example='xx'),
      disableHandleMultimodalMedia?: boolean(name='DisableHandleMultimodalMedia', example='false'),
      docId?: string(name='DocId', example='xx'),
      docType?: string(name='DocType', example='text'),
      docUuid?: string(name='DocUuid', example='内部文档唯一ID'),
      extend1?: string(name='Extend1', example='xx'),
      extend2?: string(name='Extend2', example='xx'),
      extend3?: string(name='Extend3', example='xx'),
      multimodalMedias?: [ 
        {
          fileUrl?: string(name='FileUrl', example='图片或视频文件地址'),
          mediaId?: string(name='MediaId', example='多模态数据唯一标识'),
          mediaType?: string(name='MediaType', example='多模态数据类型'),
        }
      ](name='MultimodalMedias'),
      pubTime?: string(name='PubTime', example='2022-01-01 00:00:00'),
      sourceFrom?: string(name='SourceFrom', example='来源'),
      status?: int32(name='Status', example='100'),
      summary?: string(name='Summary', example='xx'),
      title?: string(name='Title', example='xx'),
      url?: string(name='Url', description='url', example='https://xxx/xx'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListDatasetDocumentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatasetDocumentsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDatasetDocuments  ListDatasetDocumentsRequest
  * @return ListDatasetDocumentsResponse
 */
async function listDatasetDocuments(request: ListDatasetDocumentsRequest): ListDatasetDocumentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDatasetDocuments', 'POST', '/', 'json', true, 'form', request);
}

model ListDatasetsRequest {
  regionId?: string(name='RegionId', position='Host'),
  datasetId?: long(name='DatasetId', example='1', position='Body'),
  datasetName?: string(name='DatasetName', example='businessDataset', position='Body'),
  datasetType?: string(name='DatasetType', example='CustomSemanticSearch', position='Body'),
  endTime?: string(name='EndTime', example='创建时间-结束', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: string(name='PageSize', example='10', position='Body'),
  searchDatasetEnable?: int32(name='SearchDatasetEnable', example='3', position='Body'),
  startTime?: string(name='StartTime', example='创建时间-开始', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-xxx', position='Body'),
}

model ListDatasetsResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: [ 
    {
      createTime?: string(name='CreateTime', example='2024-11-12 21:46:24'),
      createUser?: string(name='CreateUser', example='xxx'),
      datasetDescription?: string(name='DatasetDescription', example='xxx'),
      datasetId?: long(name='DatasetId', example='1'),
      datasetName?: string(name='DatasetName', example='xxx'),
      datasetType?: string(name='DatasetType', example='CustomSemanticSearch'),
      searchDatasetEnable?: int32(name='SearchDatasetEnable', example='1'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListDatasetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatasetsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDatasets  ListDatasetsRequest
  * @return ListDatasetsResponse
 */
async function listDatasets(request: ListDatasetsRequest): ListDatasetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDatasets', 'POST', '/', 'json', true, 'form', request);
}

model ListDialoguesRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  current?: int32(name='Current', example='1', position='Body'),
  dialogueType?: int32(name='DialogueType', example='2', position='Body'),
  endTime?: string(name='EndTime', example='2024-01-04 11:46:07', position='Body'),
  size?: int32(name='Size', example='10', position='Body'),
  startTime?: string(name='StartTime', example='2024-01-04 11:46:07', position='Body'),
  taskId?: string(name='TaskId', example='xxx', minLength=6, maxLength=64, position='Body'),
}

model ListDialoguesResponseBody = {
  code?: string(name='Code', example='NoData'),
  current?: int32(name='Current', example='1'),
  data?: [ 
    {
      bot?: string(name='Bot', example='xx'),
      createTime?: string(name='CreateTime', example='2024-01-04 11:46:07'),
      createUser?: string(name='CreateUser', example='xx'),
      dialogueType?: int32(name='DialogueType', example='2'),
      taskId?: string(name='TaskId', example='xx'),
      user?: string(name='User', example='x'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  size?: int32(name='Size', example='10'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='100'),
}

model ListDialoguesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDialoguesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDialogues  ListDialoguesRequest
  * @return ListDialoguesResponse
 */
async function listDialogues(request: ListDialoguesRequest): ListDialoguesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDialogues', 'POST', '/', 'json', true, 'form', request);
}

model ListDocsRequest {
  regionId?: string(name='RegionId', position='Host'),
  categoryId?: string(name='CategoryId', example='default', position='Body'),
  docName?: string(name='DocName', position='Body'),
  docType?: string(name='DocType', example='pdf', position='Body'),
  maxResults?: int32(name='MaxResults', example='20', position='Body'),
  nextToken?: string(name='NextToken', example='52a33dc83779f63641e16f5146cd7125', position='Body'),
  skip?: int32(name='Skip', example='10', position='Body'),
  statuses?: [ int32 ](name='Statuses', shrink='json', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-2setzb9x4ewsd', position='Body'),
}

model ListDocsResponseBody = {
  code?: string(name='Code', example='successful'),
  data?: [ 
    {
      categoryId?: string(name='CategoryId', example='default'),
      createTime?: long(name='CreateTime', example='2024-01-04 11:46:07'),
      docId?: string(name='DocId', example='12345'),
      docName?: string(name='DocName'),
      docType?: string(name='DocType', example='pdf'),
      status?: int32(name='Status', example='0'),
      statusMessage?: string(name='StatusMessage'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  maxResults?: int32(name='MaxResults', example='10'),
  message?: string(name='Message', example='successful'),
  nextToken?: string(name='NextToken', example='CAESGgoSChAKDGNvbXBsZXRlVGltZRABCgQiAggAGAAiQAoJANEQ4mYAAAAACjMDLgAAADFTNzMyZDMwMzAzMDM4NzA3MjZjN2E2NDYyNzUzODMxMzY3ODM0NmIzNTZkNjc='),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='70'),
}

model ListDocsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDocsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDocs  ListDocsRequest
  * @return ListDocsResponse
 */
async function listDocs(request: ListDocsRequest): ListDocsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDocs', 'POST', '/', 'json', true, 'form', request);
}

model ListFreshViewPointsRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  maxResults?: int32(name='MaxResults', example='6', minimum=0, position='Body'),
  nextToken?: string(name='NextToken', example='下一页的token', position='Body'),
  topic: string(name='Topic', description='This parameter is required.', example='热榜主题', position='Body'),
  topicSource: string(name='TopicSource', description='This parameter is required.', example='热榜源', position='Body'),
}

model ListFreshViewPointsResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: [ 
    {
      outlines?: [ 
        {
          outline?: string(name='Outline', example='大纲'),
          summary?: string(name='Summary', example='大纲摘要'),
        }
      ](name='Outlines'),
      point?: string(name='Point', example='视角'),
      summary?: string(name='Summary', example='摘要'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  maxResults?: int32(name='MaxResults', example='94'),
  message?: string(name='Message', example='success'),
  nextToken?: string(name='NextToken', example='下一页的token'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='26'),
}

model ListFreshViewPointsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFreshViewPointsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFreshViewPoints  ListFreshViewPointsRequest
  * @return ListFreshViewPointsResponse
 */
async function listFreshViewPoints(request: ListFreshViewPointsRequest): ListFreshViewPointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFreshViewPoints', 'POST', '/', 'json', true, 'form', request);
}

model ListGeneratedContentsRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  contentDomain?: string(name='ContentDomain', example='media', position='Body'),
  current?: int32(name='Current', example='1', position='Body'),
  endTime?: string(name='EndTime', example='2024-01-04 11:46:07', position='Body'),
  query?: string(name='Query', position='Body'),
  size?: int32(name='Size', example='10', position='Body'),
  startTime?: string(name='StartTime', example='2024-01-04 11:46:07', position='Body'),
  taskId?: string(name='TaskId', position='Body'),
  title?: string(name='Title', position='Body'),
}

model ListGeneratedContentsResponseBody = {
  code?: string(name='Code', example='NoData'),
  current?: int32(name='Current', example='1'),
  data?: [ 
    {
      content?: string(name='Content'),
      contentDomain?: string(name='ContentDomain', example='media'),
      contentText?: string(name='ContentText'),
      createTime?: string(name='CreateTime', example='2024-01-04 11:46:07'),
      createUser?: string(name='CreateUser', example='123'),
      deviceId?: string(name='DeviceId', example='xxx'),
      id?: long(name='Id', example='10'),
      keywordList?: [ string ](name='KeywordList'),
      keywords?: string(name='Keywords'),
      prompt?: string(name='Prompt'),
      taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
      title?: string(name='Title'),
      updateTime?: string(name='UpdateTime', example='2024-01-04 11:46:07'),
      updateUser?: string(name='UpdateUser', example='1111'),
      uuid?: string(name='Uuid', example='xxx'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  size?: int32(name='Size', example='10'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='100'),
}

model ListGeneratedContentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGeneratedContentsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListGeneratedContents  ListGeneratedContentsRequest
  * @return ListGeneratedContentsResponse
 */
async function listGeneratedContents(request: ListGeneratedContentsRequest): ListGeneratedContentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGeneratedContents', 'POST', '/', 'json', true, 'form', request);
}

model ListHotNewsWithTypeRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='c160c841c8e54295bf2f441432785944_p_efm', position='Query'),
  current?: int32(name='Current', example='1', position='Body'),
  newsType?: string(name='NewsType', example='society', position='Body'),
  newsTypes?: [ string ](name='NewsTypes', shrink='json', position='Body'),
  size?: int32(name='Size', example='10', position='Body'),
}

model ListHotNewsWithTypeResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: [ 
    {
      news?: [ 
        {
          author?: string(name='Author'),
          content?: string(name='Content'),
          docUuid?: string(name='DocUuid', example='3f7045e099474ba28ceca1b4eb6d6e21'),
          imageUrls?: [ string ](name='ImageUrls'),
          pubTime?: string(name='PubTime', example='2023-04-11 06:14:07'),
          searchSource?: string(name='SearchSource'),
          searchSourceName?: string(name='SearchSourceName'),
          source?: string(name='Source'),
          summary?: string(name='Summary'),
          tag?: string(name='Tag'),
          title?: string(name='Title'),
          updateTime?: string(name='UpdateTime', example='2023-10-14 14:30:00'),
          url?: string(name='Url', example='http://xxxxx/xxx'),
        }
      ](name='News'),
      newsType?: string(name='NewsType', example='society'),
      newsTypeName?: string(name='NewsTypeName'),
      totalPages?: int32(name='TotalPages', example='77'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model ListHotNewsWithTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHotNewsWithTypeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListHotNewsWithType  ListHotNewsWithTypeRequest
  * @return ListHotNewsWithTypeResponse
 */
async function listHotNewsWithType(request: ListHotNewsWithTypeRequest): ListHotNewsWithTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHotNewsWithType', 'POST', '/', 'json', true, 'form', request);
}

model ListHotSourcesRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  maxResults?: int32(name='MaxResults', example='66', minimum=0, position='Body'),
  nextToken?: string(name='NextToken', example='下一页的token', position='Body'),
}

model ListHotSourcesResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: [ 
    {
      description?: string(name='Description', example='热榜源描述'),
      show?: boolean(name='Show', example='true'),
      sort?: int32(name='Sort', example='86'),
      source?: string(name='Source', example='热榜源标识'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  maxResults?: int32(name='MaxResults', example='4'),
  message?: string(name='Message', example='success'),
  nextToken?: string(name='NextToken', example='xxxxxx'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='30'),
}

model ListHotSourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHotSourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListHotSources  ListHotSourcesRequest
  * @return ListHotSourcesResponse
 */
async function listHotSources(request: ListHotSourcesRequest): ListHotSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHotSources', 'POST', '/', 'json', true, 'form', request);
}

model ListHotTopicsRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  maxResults?: int32(name='MaxResults', example='1', minimum=0, position='Body'),
  nextToken?: string(name='NextToken', example='下一页的token', position='Body'),
  topicIds?: [ string ](name='TopicIds', shrink='json', position='Body'),
  topicQuery?: string(name='TopicQuery', example='根据热榜主题全文检索', position='Body'),
  topicSource?: string(name='TopicSource', example='热榜源筛选，支持的热榜源。热榜源详见API：ListHotSources', position='Body'),
  topicVersion?: string(name='TopicVersion', example='数据版本筛选', position='Body'),
  topics?: [ string ](name='Topics', shrink='json', position='Body'),
  withNews?: boolean(name='WithNews', example='true', position='Body'),
}

model ListHotTopicsResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: [ 
    {
      asyncTaskId?: string(name='AsyncTaskId', example='异步任务ID（自定义主题场景下使用）'),
      createUser?: string(name='CreateUser', example='创建用户ID（自定义主题场景下使用）'),
      hotValue?: long(name='HotValue', example='61'),
      id?: string(name='Id', example='热榜ID'),
      status?: string(name='Status', example='FAILED'),
      structureSummary?: [ 
        {
          docList?: [ 
            {
              source?: string(name='Source'),
              title?: string(name='Title', example='xxxxx'),
              url?: string(name='Url', example='http://www.example.com'),
            }
          ](name='DocList'),
          summary?: string(name='Summary', example='摘要'),
          title?: string(name='Title', example='标题'),
        }
      ](name='StructureSummary'),
      summary?: string(name='Summary', example='热榜摘要'),
      taskErrorMessage?: string(name='TaskErrorMessage', example='异步任务失败错误信息'),
      taskStatus?: int32(name='TaskStatus', example='26'),
      topic?: string(name='Topic', example='主题唯一名称'),
      topicSource?: string(name='TopicSource', example='热榜源，目前支持的热榜源: Toutiao：头条、Quark：夸克、Baidu：百度、Sina：新浪。Custom：自定义、Aggregation：热点话题榜'),
      version?: string(name='Version', example='数据版本'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  maxResults?: int32(name='MaxResults', example='94'),
  message?: string(name='Message', example='success'),
  nextToken?: string(name='NextToken', example='下一页的token'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='23'),
}

model ListHotTopicsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHotTopicsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListHotTopics  ListHotTopicsRequest
  * @return ListHotTopicsResponse
 */
async function listHotTopics(request: ListHotTopicsRequest): ListHotTopicsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHotTopics', 'POST', '/', 'json', true, 'form', request);
}

model ListHotViewPointsRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  maxResults?: int32(name='MaxResults', example='56', minimum=0, position='Body'),
  nextToken?: string(name='NextToken', example='下一页的token', position='Body'),
  topic: string(name='Topic', description='This parameter is required.', example='热榜主题', position='Body'),
  topicSource: string(name='TopicSource', description='This parameter is required.', example='热榜源', position='Body'),
}

model ListHotViewPointsResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: [ 
    {
      attitude?: string(name='Attitude', example='当前观点'),
      attitudeType?: string(name='AttitudeType', example='观点类型'),
      news?: [ 
        {
          author?: string(name='Author', example='作者'),
          content?: string(name='Content', example='文章内容'),
          docId?: string(name='DocId', example='xxxxx'),
          docUuid?: string(name='DocUuid', example='123456'),
          imageUrls?: [ string ](name='ImageUrls', example='https://www.example.com/aaa.png'),
          pubTime?: string(name='PubTime', example='2024-01-22 10:29:00'),
          source?: string(name='Source', example='新浪'),
          summary?: string(name='Summary', example='文章摘要'),
          tags?: [ string ](name='Tags', example='["标签1","标签2"]'),
          title?: string(name='Title', example='文章标题'),
          topic?: string(name='Topic', example='文章主题'),
          url?: string(name='Url', example='https://www.example.com/aaa.docx'),
        }
      ](name='News'),
      ratio?: string(name='Ratio', example='当前观点占比'),
      viewPoints?: [ 
        {
          outlines?: [ 
            {
              outline?: string(name='Outline', example='大纲'),
              summary?: string(name='Summary', example='大纲摘要'),
            }
          ](name='Outlines'),
          point?: string(name='Point', example='视角'),
          summary?: string(name='Summary', example='摘要'),
        }
      ](name='ViewPoints'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  maxResults?: int32(name='MaxResults', example='67'),
  message?: string(name='Message', example='success'),
  nextToken?: string(name='NextToken', example='下一页的token'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='70'),
}

model ListHotViewPointsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHotViewPointsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListHotViewPoints  ListHotViewPointsRequest
  * @return ListHotViewPointsResponse
 */
async function listHotViewPoints(request: ListHotViewPointsRequest): ListHotViewPointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHotViewPoints', 'POST', '/', 'json', true, 'form', request);
}

model ListInterveneCntRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='fcb14f25c9ee41ccad33a049de8f941b_p_outbound_public', position='Query'),
  pageIndex?: int32(name='PageIndex', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
}

model ListInterveneCntResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    cntList?: [ any ](name='CntList'),
    pageCnt?: int32(name='PageCnt', example='10'),
    pageIndex?: int32(name='PageIndex', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model ListInterveneCntResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInterveneCntResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInterveneCnt  ListInterveneCntRequest
  * @return ListInterveneCntResponse
 */
async function listInterveneCnt(request: ListInterveneCntRequest): ListInterveneCntResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInterveneCnt', 'POST', '/', 'json', true, 'form', request);
}

model ListInterveneImportTasksRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  pageIndex?: int32(name='PageIndex', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='20', position='Body'),
}

model ListInterveneImportTasksResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: {
    pageIndex?: int32(name='PageIndex', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    statusList?: [ 
      {
        msg?: string(name='Msg', example='Success'),
        percentage?: int32(name='Percentage', example='5'),
        status?: int32(name='Status', example='Success'),
        taskId?: string(name='TaskId', example='4854'),
        taskName?: string(name='TaskName', example='12344454'),
      }
    ](name='StatusList'),
    totalSize?: int32(name='TotalSize', example='0'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model ListInterveneImportTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInterveneImportTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInterveneImportTasks  ListInterveneImportTasksRequest
  * @return ListInterveneImportTasksResponse
 */
async function listInterveneImportTasks(request: ListInterveneImportTasksRequest): ListInterveneImportTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInterveneImportTasks', 'POST', '/', 'json', true, 'form', request);
}

model ListInterveneRulesRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='c160c841c8e54295bf2f441432785944_p_efm', position='Query'),
  pageIndex?: int32(name='PageIndex', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
}

model ListInterveneRulesResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    count?: long(name='Count', example='1'),
    interveneRuleList?: [ 
      {
        answerConfig?: [ 
          {
            answerType?: int32(name='AnswerType', example='0'),
            message?: string(name='Message'),
            namespace?: string(name='Namespace', example='namespace_qa_query'),
          }
        ](name='AnswerConfig'),
        createTime?: string(name='CreateTime', example='2023-06-05 15:17:01'),
        effectTime?: string(name='EffectTime', example='2023-04-03 02:42:01'),
        interveneType?: int32(name='InterveneType', example='0'),
        namespaceList?: [ string ](name='NamespaceList'),
        ruleId?: long(name='RuleId', example='mr-iuo9pi9w555phfbb'),
        ruleName?: string(name='RuleName', example='ruletest'),
      }
    ](name='InterveneRuleList'),
    pageIndex?: int32(name='PageIndex', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='DA021073-17CE-5CCF-9FEB-93226C766887'),
  success?: boolean(name='Success', example='true'),
}

model ListInterveneRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInterveneRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInterveneRules  ListInterveneRulesRequest
  * @return ListInterveneRulesResponse
 */
async function listInterveneRules(request: ListInterveneRulesRequest): ListInterveneRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInterveneRules', 'POST', '/', 'json', true, 'form', request);
}

model ListIntervenesRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='33a2658aaabf4c24b45d50e575125311_p_beebot_public', position='Query'),
  interveneType?: int32(name='InterveneType', position='Body'),
  pageIndex?: int32(name='PageIndex', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  query?: string(name='Query', position='Body'),
  ruleId?: long(name='RuleId', example='mqtt_outRule_1679019634514', position='Body'),
}

model ListIntervenesResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    interveneList?: [ 
      {
        id?: string(name='Id', description='id', example='36559'),
        query?: string(name='Query'),
      }
    ](name='InterveneList'),
    pageIndex?: int32(name='PageIndex', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalSize?: long(name='TotalSize', example='1'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='428DCC0D-3C63-5306-BD1B-124396AB97BE'),
  success?: boolean(name='Success', example='true'),
}

model ListIntervenesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIntervenesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListIntervenes  ListIntervenesRequest
  * @return ListIntervenesResponse
 */
async function listIntervenes(request: ListIntervenesRequest): ListIntervenesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIntervenes', 'POST', '/', 'json', true, 'form', request);
}

model ListMaterialDocumentsRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='33a2658aaabf4c24b45d50e575125311_p_beebot_public', position='Query'),
  content?: string(name='Content', position='Body'),
  createTimeEnd?: string(name='CreateTimeEnd', example='2023-03-18 02:00:00', position='Body'),
  createTimeStart?: string(name='CreateTimeStart', example='2023-02-19 07:28:11', position='Body'),
  current?: int32(name='Current', example='1', position='Body'),
  docType?: string(name='DocType', example='jsonLine', position='Body'),
  docTypeList?: [ string ](name='DocTypeList', example='excel', shrink='json', position='Body'),
  generatePublicUrl?: boolean(name='GeneratePublicUrl', example='true', position='Body'),
  id?: long(name='Id', example='69', position='Body'),
  keywords?: [ string ](name='Keywords', shrink='json', position='Body'),
  query?: string(name='Query', position='Body'),
  shareAttr?: int32(name='ShareAttr', example='1', position='Body'),
  size?: int32(name='Size', example='10', position='Body'),
  title?: string(name='Title', position='Body'),
  updateTimeEnd?: string(name='UpdateTimeEnd', example='2023-03-18 03:00:00', position='Body'),
  updateTimeStart?: string(name='UpdateTimeStart', example='2023-03-18 02:00:00', position='Body'),
}

model ListMaterialDocumentsResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  current?: int32(name='Current', example='1'),
  data?: [ 
    {
      author?: string(name='Author'),
      createTime?: string(name='CreateTime', example='2023-03-18 02:00:00'),
      createUser?: string(name='CreateUser', example='1'),
      createUserName?: string(name='CreateUserName'),
      docKeywords?: [ string ](name='DocKeywords'),
      docType?: string(name='DocType', example='pdf'),
      externalUrl?: string(name='ExternalUrl', example='https://www.example.com'),
      htmlContent?: string(name='HtmlContent'),
      id?: long(name='Id', example='35'),
      pubTime?: string(name='PubTime', example='2023-03-18 02:00:00'),
      publicUrl?: string(name='PublicUrl', example='https://www.example.com'),
      shareAttr?: int32(name='ShareAttr', example='1'),
      srcFrom?: string(name='SrcFrom', example='user_upload'),
      summary?: string(name='Summary'),
      textContent?: string(name='TextContent'),
      thumbnailInBase64?: string(name='ThumbnailInBase64'),
      title?: string(name='Title'),
      updateTime?: string(name='UpdateTime', example='2023-03-18 02:00:00'),
      updateUser?: string(name='UpdateUser', example='1'),
      updateUserName?: string(name='UpdateUserName'),
      url?: string(name='Url', example='https://www.example.com'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  size?: int32(name='Size', example='10'),
  success?: boolean(name='Success', example='false'),
  total?: int32(name='Total', example='100'),
}

model ListMaterialDocumentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMaterialDocumentsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMaterialDocuments  ListMaterialDocumentsRequest
  * @return ListMaterialDocumentsResponse
 */
async function listMaterialDocuments(request: ListMaterialDocumentsRequest): ListMaterialDocumentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMaterialDocuments', 'POST', '/', 'json', true, 'form', request);
}

model ListPlanningProposalRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  customViewPointId?: string(name='CustomViewPointId', example='e7b26a9e1211444db8f0a984361a5e0f', position='Body'),
  customViewPointIds?: [ string ](name='CustomViewPointIds', example='27971fc8f3ce4ed58c7e7fc4b503e432', shrink='json', position='Body'),
  maxResults?: int32(name='MaxResults', example='73', minimum=0, position='Body'),
  nextToken?: string(name='NextToken', example='下一页的token', position='Body'),
  titles?: [ string ](name='Titles', example='标题
     *', shrink='json', position='Body'),
  topic: string(name='Topic', description='This parameter is required.', example='热榜主题', position='Body'),
  topicSource: string(name='TopicSource', description='This parameter is required.', example='热榜源', position='Body'),
  topicVersion?: string(name='TopicVersion', example='2024-09-10_08', position='Body'),
  viewPointType: string(name='ViewPointType', description='This parameter is required.', example='CustomViewPoints', position='Body'),
}

model ListPlanningProposalResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: [ 
    {
      outlines?: [ 
        {
          outline?: string(name='Outline', example='大纲'),
          summary?: string(name='Summary', example='大纲摘要'),
        }
      ](name='Outlines'),
      summary?: string(name='Summary'),
      title?: string(name='Title'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  maxResults?: int32(name='MaxResults', example='77'),
  message?: string(name='Message', example='success'),
  nextToken?: string(name='NextToken', example='下一页的token'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='80'),
}

model ListPlanningProposalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPlanningProposalResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPlanningProposal  ListPlanningProposalRequest
  * @return ListPlanningProposalResponse
 */
async function listPlanningProposal(request: ListPlanningProposalRequest): ListPlanningProposalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPlanningProposal', 'POST', '/', 'json', true, 'form', request);
}

model ListSearchTaskDialogueDatasRequest {
  regionId?: string(name='RegionId', position='Host'),
  includeContent?: boolean(name='IncludeContent', example='true', position='Body'),
  multimodalSearchType?: string(name='MultimodalSearchType', example='text', position='Body'),
  originalSessionId?: string(name='OriginalSessionId', example='xx', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=0, position='Body'),
  pageSize?: int32(name='PageSize', example='10', minimum=0, position='Body'),
  query?: string(name='Query', example='xx', position='Body'),
  searchModel?: string(name='SearchModel', example='ClusterGenerate', position='Body'),
  searchModelDataValue?: string(name='SearchModelDataValue', example='xxx', position='Body'),
  sessionId: string(name='SessionId', description='This parameter is required.', example='xx', position='Body'),
  taskId?: string(name='TaskId', example='xxx', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='xxxx', position='Body'),
}

model ListSearchTaskDialogueDatasResponseBody = {
  articles?: [ 
    {
      author?: string(name='Author', example='作者'),
      categoryUuid?: string(name='CategoryUuid', example='xx'),
      content?: string(name='Content', example='文章内容'),
      docId?: string(name='DocId', example='文档-自定义的唯一ID'),
      docType?: string(name='DocType', example='text'),
      docUuid?: string(name='DocUuid', example='xxx'),
      extend1?: string(name='Extend1', example='xx'),
      extend2?: string(name='Extend2', example='xx'),
      extend3?: string(name='Extend3', example='xx'),
      multimodalMedias?: [ 
        {
          fileUrl?: string(name='FileUrl', example='图片或视频文件地址'),
          mediaId?: string(name='MediaId', example='多模态数据唯一标识'),
          mediaType?: string(name='MediaType', example='多模态数据类型'),
        }
      ](name='MultimodalMedias'),
      pubTime?: string(name='PubTime', example='2024-11-25 14:25:59'),
      source?: string(name='Source', example='新华社'),
      summary?: string(name='Summary', example='文章摘要'),
      title?: string(name='Title', example='文章标题'),
      url?: string(name='Url', example='https://www.example.com/aaa.docx'),
    }
  ](name='Articles'),
  code?: string(name='Code', example='NoData'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  images?: [ 
    {
      fileUrl?: string(name='FileUrl', example='图片或视频文件地址'),
      mediaId?: string(name='MediaId', example='多模态数据唯一标识'),
      mediaType?: string(name='MediaType', example='多模态数据类型'),
    }
  ](name='Images'),
  message?: string(name='Message', example='success'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  realtimeSearch?: boolean(name='RealtimeSearch', example='true'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  searchType?: string(name='SearchType', example='realtime'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='100'),
  videos?: [ 
    {
      fileUrl?: string(name='FileUrl', example='图片或视频文件地址'),
      mediaId?: string(name='MediaId', example='多模态数据唯一标识'),
      mediaType?: string(name='MediaType', example='多模态数据类型'),
    }
  ](name='Videos'),
}

model ListSearchTaskDialogueDatasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSearchTaskDialogueDatasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSearchTaskDialogueDatas  ListSearchTaskDialogueDatasRequest
  * @return ListSearchTaskDialogueDatasResponse
 */
async function listSearchTaskDialogueDatas(request: ListSearchTaskDialogueDatasRequest): ListSearchTaskDialogueDatasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSearchTaskDialogueDatas', 'POST', '/', 'json', true, 'form', request);
}

model ListSearchTaskDialoguesRequest {
  regionId?: string(name='RegionId', position='Host'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=0, position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  taskId?: string(name='TaskId', example='xxxx', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='xxxx', position='Body'),
}

model ListSearchTaskDialoguesResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: [ 
    {
      createTime?: string(name='CreateTime', example='2024-11-25 13:33:01'),
      dialogueType?: int32(name='DialogueType', example='24'),
      goodText?: string(name='GoodText', example='xxx'),
      originSessionId?: string(name='OriginSessionId', example='xxxx'),
      prompt?: string(name='Prompt', example='xxx'),
      rating?: string(name='Rating', example='thumbsUp'),
      responseBodyStr?: string(name='ResponseBodyStr', example='{}'),
      sessionId?: string(name='SessionId', example='xxxx'),
      tags?: [ string ](name='Tags'),
      taskId?: string(name='TaskId', example='xxxx'),
      text?: string(name='Text', example='xxx'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListSearchTaskDialoguesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSearchTaskDialoguesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSearchTaskDialogues  ListSearchTaskDialoguesRequest
  * @return ListSearchTaskDialoguesResponse
 */
async function listSearchTaskDialogues(request: ListSearchTaskDialoguesRequest): ListSearchTaskDialoguesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSearchTaskDialogues', 'POST', '/', 'json', true, 'form', request);
}

model ListSearchTasksRequest {
  regionId?: string(name='RegionId', position='Host'),
  dialogueTypes?: [ int32 ](name='DialogueTypes', example='24', shrink='json', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=0, position='Body'),
  pageSize?: int32(name='PageSize', example='10', minimum=0, position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-xx', position='Body'),
}

model ListSearchTasksResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: [ 
    {
      createTime?: string(name='CreateTime', example='2024-11-25 11:40:50'),
      dialogueType?: int32(name='DialogueType', example='24'),
      taskId?: string(name='TaskId', example='xxxx'),
      taskName?: string(name='TaskName', example='xxx'),
      updateTime?: string(name='UpdateTime', example='2024-11-25 11:40:50'),
      username?: string(name='Username', example='xxxx'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListSearchTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSearchTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSearchTasks  ListSearchTasksRequest
  * @return ListSearchTasksResponse
 */
async function listSearchTasks(request: ListSearchTasksRequest): ListSearchTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSearchTasks', 'POST', '/', 'json', true, 'form', request);
}

model ListStyleLearningResultRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  current?: int32(name='Current', example='1', position='Body'),
  size?: int32(name='Size', example='10', position='Body'),
}

model ListStyleLearningResultResponseBody = {
  code?: string(name='Code', example='NoData'),
  current?: int32(name='Current', example='1'),
  data?: [ 
    {
      aigcResult?: string(name='AigcResult', example='AIGC 生成的内容'),
      id?: long(name='Id', example='70'),
      rewriteResult?: string(name='RewriteResult', example='用户修订后内容'),
      styleName?: string(name='StyleName', example='文体风格名称'),
      taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  size?: int32(name='Size', example='10'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='100'),
}

model ListStyleLearningResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListStyleLearningResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListStyleLearningResult  ListStyleLearningResultRequest
  * @return ListStyleLearningResultResponse
 */
async function listStyleLearningResult(request: ListStyleLearningResultRequest): ListStyleLearningResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListStyleLearningResult', 'POST', '/', 'json', true, 'form', request);
}

model ListTimedViewAttitudeRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  maxResults?: int32(name='MaxResults', example='53', minimum=0, position='Body'),
  nextToken?: string(name='NextToken', example='下一页的token', position='Body'),
  topic: string(name='Topic', description='This parameter is required.', example='热榜主题', position='Body'),
  topicSource: string(name='TopicSource', description='This parameter is required.', example='热榜源', position='Body'),
}

model ListTimedViewAttitudeResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: [ 
    {
      attitude?: string(name='Attitude', example='当前观点'),
      attitudeType?: string(name='AttitudeType', example='观点类型'),
      pubTime?: string(name='PubTime', example='2024-01-22 10:29'),
      ratio?: string(name='Ratio', example='当前观点占比'),
      source?: string(name='Source', example='新浪'),
      title?: string(name='Title', example='标题'),
      url?: string(name='Url', example='http://www.example.com/news/1.html'),
      viewPoints?: [ 
        {
          outlines?: [ 
            {
              outline?: string(name='Outline', example='大纲'),
              summary?: string(name='Summary', example='大纲摘要'),
            }
          ](name='Outlines'),
          point?: string(name='Point', example='视角'),
          summary?: string(name='Summary', example='摘要'),
        }
      ](name='ViewPoints'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  maxResults?: int32(name='MaxResults', example='15'),
  message?: string(name='Message', example='success'),
  nextToken?: string(name='NextToken', example='下一页的token'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='58'),
}

model ListTimedViewAttitudeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTimedViewAttitudeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTimedViewAttitude  ListTimedViewAttitudeRequest
  * @return ListTimedViewAttitudeResponse
 */
async function listTimedViewAttitude(request: ListTimedViewAttitudeRequest): ListTimedViewAttitudeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTimedViewAttitude', 'POST', '/', 'json', true, 'form', request);
}

model ListTopicRecommendEventListRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  maxResults?: int32(name='MaxResults', example='72', minimum=0, position='Body'),
  nextToken?: string(name='NextToken', example='下一页的token', position='Body'),
}

model ListTopicRecommendEventListResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: [ string ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  maxResults?: int32(name='MaxResults', example='71'),
  message?: string(name='Message', example='success'),
  nextToken?: string(name='NextToken', example='x\\"x\\"x'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='60'),
}

model ListTopicRecommendEventListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTopicRecommendEventListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTopicRecommendEventList  ListTopicRecommendEventListRequest
  * @return ListTopicRecommendEventListResponse
 */
async function listTopicRecommendEventList(request: ListTopicRecommendEventListRequest): ListTopicRecommendEventListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTopicRecommendEventList', 'POST', '/', 'json', true, 'form', request);
}

model ListTopicViewPointRecommendEventListRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  id?: string(name='Id', example='xxx', position='Body'),
  maxResults?: int32(name='MaxResults', example='66', minimum=0, position='Body'),
  nextToken?: string(name='NextToken', example='下一页的token', position='Body'),
}

model ListTopicViewPointRecommendEventListResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: [ string ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  maxResults?: int32(name='MaxResults', example='8'),
  message?: string(name='Message', example='success'),
  nextToken?: string(name='NextToken', example='下一页的token'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='32'),
}

model ListTopicViewPointRecommendEventListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTopicViewPointRecommendEventListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTopicViewPointRecommendEventList  ListTopicViewPointRecommendEventListRequest
  * @return ListTopicViewPointRecommendEventListResponse
 */
async function listTopicViewPointRecommendEventList(request: ListTopicViewPointRecommendEventListRequest): ListTopicViewPointRecommendEventListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTopicViewPointRecommendEventList', 'POST', '/', 'json', true, 'form', request);
}

model ListVersionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='33a2658aaabf4c24b45d50e575125311_p_beebot_public', position='Query'),
}

model ListVersionsResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: [ 
    {
      concurrentCount?: int32(name='ConcurrentCount', example='43'),
      endTime?: string(name='EndTime', example='2023-04-23 02:00:34'),
      instanceCount?: int32(name='InstanceCount', example='55'),
      instanceId?: string(name='InstanceId', example='ga-bp12pismsw4v3tzhf62p1'),
      orderId?: long(name='OrderId', example='7'),
      productType?: string(name='ProductType', example='CUSTOMIZE'),
      quota?: int32(name='Quota', example='13'),
      startTime?: string(name='StartTime', example='2023-05-27 04:11:00'),
      useQuota?: int32(name='UseQuota', example='65'),
      versionDetail?: string(name='VersionDetail'),
      versionName?: string(name='VersionName', example='试用版'),
      versionStatus?: int32(name='VersionStatus', example='87'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model ListVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVersionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListVersions  ListVersionsRequest
  * @return ListVersionsResponse
 */
async function listVersions(request: ListVersionsRequest): ListVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVersions', 'POST', '/', 'json', false, 'json', request);
}

model ListWebReviewPointsRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  maxResults?: int32(name='MaxResults', example='81', minimum=0, position='Body'),
  nextToken?: string(name='NextToken', example='下一页的token', position='Body'),
  topic: string(name='Topic', description='This parameter is required.', example='热榜主题', position='Body'),
  topicSource: string(name='TopicSource', description='This parameter is required.', example='热榜源', position='Body'),
}

model ListWebReviewPointsResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: [ 
    {
      attitude?: string(name='Attitude', example='当前观点'),
      attitudeType?: string(name='AttitudeType', example='观点类型'),
      comments?: [ 
        {
          source?: string(name='Source', example='来源'),
          text?: string(name='Text', example='评论内容'),
          title?: string(name='Title', example='标题'),
          url?: string(name='Url', example='当前评论所属的URL'),
          username?: string(name='Username', example='评论用户名'),
        }
      ](name='Comments'),
      ratio?: string(name='Ratio', example='当前观点占比'),
      viewPoints?: [ 
        {
          outlines?: [ 
            {
              outline?: string(name='Outline', example='大纲'),
              summary?: string(name='Summary', example='大纲摘要'),
            }
          ](name='Outlines'),
          point?: string(name='Point', example='视角'),
          summary?: string(name='Summary', example='摘要'),
        }
      ](name='ViewPoints'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  maxResults?: int32(name='MaxResults', example='79'),
  message?: string(name='Message', example='success'),
  nextToken?: string(name='NextToken', example='下一页的token'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='32'),
}

model ListWebReviewPointsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWebReviewPointsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListWebReviewPoints  ListWebReviewPointsRequest
  * @return ListWebReviewPointsResponse
 */
async function listWebReviewPoints(request: ListWebReviewPointsRequest): ListWebReviewPointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWebReviewPoints', 'POST', '/', 'json', true, 'form', request);
}

model QueryAsyncTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='33a2658aaabf4c24b45d50e575125311_p_beebot_public', position='Query'),
  taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21', position='Body'),
}

model QueryAsyncTaskResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    createTime?: string(name='CreateTime', example='2021-07-25 14:34:33'),
    createUser?: string(name='CreateUser', example='12121'),
    taskCode?: string(name='TaskCode', example='MaterialDocumentUpload'),
    taskErrorMessage?: string(name='TaskErrorMessage', example='error'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    taskIntermediateResult?: string(name='TaskIntermediateResult', example='{}'),
    taskName?: string(name='TaskName'),
    taskParam?: string(name='TaskParam', example='{"fileKey":"oss://default/xxxx/xxxx/xxx","fileName":"xxxxx.doc"}'),
    taskProgressMessage?: string(name='TaskProgressMessage', example='{}'),
    taskResult?: string(name='TaskResult', example='{}'),
    taskRetryCount?: string(name='TaskRetryCount', example='3'),
    taskStatus?: int32(name='TaskStatus', example='1'),
    updateTime?: string(name='UpdateTime', example='2023-04-27 18:07:43'),
    updateUser?: string(name='UpdateUser', example='12121'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='867C4ABE-4381-5BC2-9810-5A5F334F71CF'),
  success?: boolean(name='Success', example='True'),
}

model QueryAsyncTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAsyncTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryAsyncTask  QueryAsyncTaskRequest
  * @return QueryAsyncTaskResponse
 */
async function queryAsyncTask(request: QueryAsyncTaskRequest): QueryAsyncTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAsyncTask', 'POST', '/', 'json', true, 'form', request);
}

model RunAbbreviationContentRequest {
  regionId?: string(name='RegionId', position='Host'),
  content: string(name='Content', description='This parameter is required.', example='创新政务社交媒体功能。鼓励各地区、各部门结合实际，开发政务社交媒体的特色功能，如在线咨询服务、政策解读、互动问答等，增强政务社交媒体的互动性和实用性，提升公众参与度。', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-2setzb9x4ewsd', position='Body'),
}

model RunAbbreviationContentResponseBody = {
  end?: boolean(name='End'),
  header?: {
    errorCode?: string(name='ErrorCode', example='403'),
    errorMessage?: string(name='ErrorMessage', example='Pop sign mismatch, please check.'),
    event?: string(name='Event', example='result-generated'),
    eventInfo?: string(name='EventInfo', example='模型生成事件'),
    sessionId?: string(name='SessionId', example='3cd10828-0e42-471c-8f1a-931cde20b035'),
    taskId?: string(name='TaskId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
    traceId?: string(name='TraceId', example='2150451a17191950923411783e2927'),
  }(name='Header'),
  payload?: {
    output?: {
      text?: string(name='Text', example='这是测试输出'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='100'),
      outputTokens?: long(name='OutputTokens', example='100'),
      totalTokens?: long(name='TotalTokens', example='200'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
}

model RunAbbreviationContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunAbbreviationContentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunAbbreviationContent  RunAbbreviationContentRequest
  * @return RunAbbreviationContentResponse
 */
async function runAbbreviationContent(request: RunAbbreviationContentRequest): RunAbbreviationContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunAbbreviationContent', 'POST', '/quanmiao/aimiaobi/runAbbreviationContent', 'json', true, 'form', request);
}

function runAbbreviationContentWithResponseIterable(request: RunAbbreviationContentRequest): iterator[RunAbbreviationContentResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunAbbreviationContent', 'POST', '/quanmiao/aimiaobi/runAbbreviationContent', 'json', true, 'form', request);
}

model RunBookIntroductionRequest {
  regionId?: string(name='RegionId', position='Host'),
  docId: string(name='DocId', description='This parameter is required.', example='3YQRatoe8phnpIsIE6z7DTPknhG8Fj', position='Body'),
  keyPointPrompt?: string(name='KeyPointPrompt', position='Body'),
  sessionId: string(name='SessionId', description='This parameter is required.', example='0f56f98a-f2d8-47ec-98e9-1cbdcffa9539', position='Body'),
  summaryPrompt?: string(name='SummaryPrompt', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-vtmox6g2bhq2qv5c', position='Body'),
}

model RunBookIntroductionResponseBody = {
  header?: {
    errorCode?: string(name='ErrorCode', example='success'),
    errorMessage?: string(name='ErrorMessage', example='success'),
    event?: string(name='Event', example='finished'),
    eventInfo?: string(name='EventInfo'),
    sessionId?: string(name='SessionId', example='411c4dfa-2168-4379-a902-675d67f453f8'),
    taskId?: string(name='TaskId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
    traceId?: string(name='TraceId', example='46e5c2b5-0877-4f09-bd91-ab0cf314e48b'),
  }(name='Header'),
  payload?: {
    output?: {
      keyPoint?: string(name='KeyPoint'),
      summary?: string(name='Summary'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='100'),
      outputTokens?: long(name='OutputTokens', example='100'),
      totalTokens?: long(name='TotalTokens', example='200'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', description='Id of the request', example='3f7045e099474ba28ceca1b4eb6d6e21'),
}

model RunBookIntroductionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunBookIntroductionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunBookIntroduction  RunBookIntroductionRequest
  * @return RunBookIntroductionResponse
 */
async function runBookIntroduction(request: RunBookIntroductionRequest): RunBookIntroductionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunBookIntroduction', 'POST', '/miaodu/stream/runBookIntroduction', 'json', true, 'form', request);
}

function runBookIntroductionWithResponseIterable(request: RunBookIntroductionRequest): iterator[RunBookIntroductionResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunBookIntroduction', 'POST', '/miaodu/stream/runBookIntroduction', 'json', true, 'form', request);
}

model RunBookSmartCardRequest {
  regionId?: string(name='RegionId', position='Host'),
  docId: string(name='DocId', description='This parameter is required.', example='84ufBYEeLMZOjRFo84HJ7ySL3Efr55', position='Body'),
  sessionId: string(name='SessionId', description='This parameter is required.', example='3f7045e099474ba28ceca1b4eb6d6e21', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-xxx', position='Body'),
}

model RunBookSmartCardResponseBody = {
  header?: {
    errorCode?: string(name='ErrorCode', example='success'),
    errorMessage?: string(name='ErrorMessage', example='success'),
    event?: string(name='Event', example='finished'),
    eventInfo?: string(name='EventInfo'),
    sessionId?: string(name='SessionId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    traceId?: string(name='TraceId', example='1a0e898717105546647125853d4f54'),
  }(name='Header'),
  payload?: {
    output?: {
      content?: string(name='Content'),
      tags?: [ string ](name='Tags'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='1'),
      outputTokens?: long(name='OutputTokens', example='100'),
      totalTokens?: long(name='TotalTokens', example='101'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', description='Id of the request', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
}

model RunBookSmartCardResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunBookSmartCardResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunBookSmartCard  RunBookSmartCardRequest
  * @return RunBookSmartCardResponse
 */
async function runBookSmartCard(request: RunBookSmartCardRequest): RunBookSmartCardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunBookSmartCard', 'POST', '/miaodu/stream/runBookSmartCard', 'json', true, 'form', request);
}

function runBookSmartCardWithResponseIterable(request: RunBookSmartCardRequest): iterator[RunBookSmartCardResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunBookSmartCard', 'POST', '/miaodu/stream/runBookSmartCard', 'json', true, 'form', request);
}

model RunCommentGenerationRequest {
  regionId?: string(name='RegionId', position='Host'),
  allowEmoji?: boolean(name='AllowEmoji', example='true', position='Body'),
  extraInfo?: string(name='ExtraInfo', position='Body'),
  length?: string(name='Length', example='20', position='Body'),
  lengthRange: map[string]any(name='LengthRange', description='This parameter is required.', example='{"short":"50","long":“50”}', shrink='json', position='Body'),
  numComments: string(name='NumComments', description='This parameter is required.', example='10', position='Body'),
  sentiment: map[string]any(name='Sentiment', description='This parameter is required.', example='{"positive":"50","negative":"50"}', shrink='json', position='Body'),
  sessionId?: string(name='SessionId', position='Body'),
  sourceMaterial: string(name='SourceMaterial', description='This parameter is required.', position='Body'),
  style?: string(name='Style', position='Body'),
  type: map[string]any(name='Type', description='This parameter is required.', example='{"emotion":"50","opinion":"50"}', shrink='json', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-3kcs1w3lltrtbfkr', position='Body'),
}

model RunCommentGenerationResponseBody = {
  end?: boolean(name='End'),
  header?: {
    event?: string(name='Event', example='result-generated'),
    eventInfo?: string(name='EventInfo'),
    requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
    sessionId?: string(name='SessionId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    traceId?: string(name='TraceId', example='0bd58ea2-dc38-45da-ac02-17f05cb9040b'),
  }(name='Header'),
  payload?: {
    output?: {
      text?: string(name='Text'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='1'),
      outputTokens?: long(name='OutputTokens', example='2'),
      totalTokens?: long(name='TotalTokens', example='3'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', description='Id of the request', example='3f7045e099474ba28ceca1b4eb6d6e21'),
}

model RunCommentGenerationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunCommentGenerationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunCommentGeneration  RunCommentGenerationRequest
  * @return RunCommentGenerationResponse
 */
async function runCommentGeneration(request: RunCommentGenerationRequest): RunCommentGenerationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunCommentGeneration', 'POST', '/quanmiao/aimiaobi/runCommentGeneration', 'json', true, 'form', request);
}

function runCommentGenerationWithResponseIterable(request: RunCommentGenerationRequest): iterator[RunCommentGenerationResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunCommentGeneration', 'POST', '/quanmiao/aimiaobi/runCommentGeneration', 'json', true, 'form', request);
}

model RunContinueContentRequest {
  regionId?: string(name='RegionId', position='Host'),
  content: string(name='Content', description='This parameter is required.', example='创新政务社交媒体功能。鼓励各地区、各部门结合实际，开发政务社交媒体的特色功能，如在线咨询服务、政策解读、互动问答等，增强政务社交媒体的互动性和实用性，提升公众参与度。', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-2setzb9x4ewsd', position='Body'),
}

model RunContinueContentResponseBody = {
  end?: boolean(name='End'),
  header?: {
    errorCode?: string(name='ErrorCode', example='403'),
    errorMessage?: string(name='ErrorMessage', example='Pop sign mismatch, please check.'),
    event?: string(name='Event', example='result-generated'),
    eventInfo?: string(name='EventInfo', example='模型生成事件'),
    sessionId?: string(name='SessionId', example='3cd10828-0e42-471c-8f1a-931cde20b035'),
    taskId?: string(name='TaskId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
    traceId?: string(name='TraceId', example='2150451a17191950923411783e2927'),
  }(name='Header'),
  payload?: {
    output?: {
      text?: string(name='Text', example='这是测试输出'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='100'),
      outputTokens?: long(name='OutputTokens', example='100'),
      totalTokens?: long(name='TotalTokens', example='200'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
}

model RunContinueContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunContinueContentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunContinueContent  RunContinueContentRequest
  * @return RunContinueContentResponse
 */
async function runContinueContent(request: RunContinueContentRequest): RunContinueContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunContinueContent', 'POST', '/quanmiao/aimiaobi/runContinueContent', 'json', true, 'form', request);
}

function runContinueContentWithResponseIterable(request: RunContinueContentRequest): iterator[RunContinueContentResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunContinueContent', 'POST', '/quanmiao/aimiaobi/runContinueContent', 'json', true, 'form', request);
}

model RunCustomHotTopicAnalysisRequest {
  regionId?: string(name='RegionId', position='Host'),
  askUser?: string(name='AskUser', example='模型反问', position='Body'),
  forceAnalysisExistsTopic?: boolean(name='ForceAnalysisExistsTopic', example='false', position='Body'),
  prompt: string(name='Prompt', description='This parameter is required.', example='用户输入Prompt', position='Body'),
  sessionId?: string(name='SessionId', example='3f7045e099474ba28ceca1b4eb6d6e21', position='Body'),
  taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21', position='Body'),
  userBack?: string(name='UserBack', example='用户针对模型反问的输入', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='xxxx', position='Body'),
}

model RunCustomHotTopicAnalysisResponseBody = {
  header?: {
    errorCode?: string(name='ErrorCode', example='错误码'),
    errorMessage?: string(name='ErrorMessage', example='错误信息'),
    event?: string(name='Event', example='task-started'),
    originSessionId?: string(name='OriginSessionId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    sessionId?: string(name='SessionId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    traceId?: string(name='TraceId', example='全链路ID'),
  }(name='Header'),
  payload?: {
    output?: {
      articles?: [ 
        {
          author?: string(name='Author', example='作者'),
          content?: string(name='Content', example='文章内容'),
          docId?: string(name='DocId', example='文档-自定义的唯一ID'),
          docUuid?: string(name='DocUuid', example='a2103fcfbd5441f1991c72f8834833e3'),
          pubTime?: string(name='PubTime', example='2024-08-27 14:50:47'),
          source?: string(name='Source', example='央视网'),
          summary?: string(name='Summary', example='文章摘要'),
          tag?: string(name='Tag', example='文章标签'),
          title?: string(name='Title', example='文章标题'),
          url?: string(name='Url', example='https://www.example.com/aaa.docx'),
        }
      ](name='Articles'),
      askUser?: [ string ](name='AskUser'),
      asyncTaskId?: string(name='AsyncTaskId', example='异步任务ID'),
      attitude?: string(name='Attitude', example='自定义选题视角'),
      searchQuery?: string(name='SearchQuery', example='大模型改变世界'),
      text?: string(name='Text', example='文本生成结果'),
      topicId?: string(name='TopicId', example='话题ID'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='60'),
      outputTokens?: long(name='OutputTokens', example='13'),
      totalTokens?: long(name='TotalTokens', example='73'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
}

model RunCustomHotTopicAnalysisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunCustomHotTopicAnalysisResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunCustomHotTopicAnalysis  RunCustomHotTopicAnalysisRequest
  * @return RunCustomHotTopicAnalysisResponse
 */
async function runCustomHotTopicAnalysis(request: RunCustomHotTopicAnalysisRequest): RunCustomHotTopicAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunCustomHotTopicAnalysis', 'POST', '/quanmiao/miaoce/runCustomHotTopicAnalysis', 'json', true, 'form', request);
}

function runCustomHotTopicAnalysisWithResponseIterable(request: RunCustomHotTopicAnalysisRequest): iterator[RunCustomHotTopicAnalysisResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunCustomHotTopicAnalysis', 'POST', '/quanmiao/miaoce/runCustomHotTopicAnalysis', 'json', true, 'form', request);
}

model RunCustomHotTopicViewPointAnalysisRequest {
  regionId?: string(name='RegionId', position='Host'),
  askUser?: string(name='AskUser', example='模型反问', position='Body'),
  prompt: string(name='Prompt', description='This parameter is required.', example='自定义选题视角的Prompt', position='Body'),
  searchQuery?: string(name='SearchQuery', example='改写后的Query', position='Body'),
  skipAskUser?: boolean(name='SkipAskUser', example='true', position='Body'),
  topic?: string(name='Topic', example='热点主题', position='Body'),
  topicId?: string(name='TopicId', example='热点主题ID', position='Body'),
  topicSource?: string(name='TopicSource', example='热点主题来源', position='Body'),
  topicVersion?: string(name='TopicVersion', example='热点主题版本', position='Body'),
  userBack?: string(name='UserBack', example='用户反馈', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='xxxx', position='Body'),
}

model RunCustomHotTopicViewPointAnalysisResponseBody = {
  header?: {
    errorCode?: string(name='ErrorCode', example='错误码'),
    errorMessage?: string(name='ErrorMessage', example='错误信息'),
    event?: string(name='Event', example='task-started'),
    originSessionId?: string(name='OriginSessionId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    sessionId?: string(name='SessionId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    traceId?: string(name='TraceId', example='全链路ID'),
  }(name='Header'),
  payload?: {
    output?: {
      askUser?: [ string ](name='AskUser'),
      asyncTaskId?: string(name='AsyncTaskId', example='异步任务ID'),
      attitude?: string(name='Attitude', example='模型生成的自定义选题视角的观点'),
      customViewPointId?: string(name='CustomViewPointId', example='xxxxxx'),
      text?: string(name='Text', example='文本生成结果'),
      topicId?: string(name='TopicId', example='话题ID'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='51'),
      outputTokens?: long(name='OutputTokens', example='79'),
      totalTokens?: long(name='TotalTokens', example='130'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
}

model RunCustomHotTopicViewPointAnalysisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunCustomHotTopicViewPointAnalysisResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunCustomHotTopicViewPointAnalysis  RunCustomHotTopicViewPointAnalysisRequest
  * @return RunCustomHotTopicViewPointAnalysisResponse
 */
async function runCustomHotTopicViewPointAnalysis(request: RunCustomHotTopicViewPointAnalysisRequest): RunCustomHotTopicViewPointAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunCustomHotTopicViewPointAnalysis', 'POST', '/quanmiao/miaoce/runCustomHotTopicViewPointAnalysis', 'json', true, 'form', request);
}

function runCustomHotTopicViewPointAnalysisWithResponseIterable(request: RunCustomHotTopicViewPointAnalysisRequest): iterator[RunCustomHotTopicViewPointAnalysisResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunCustomHotTopicViewPointAnalysis', 'POST', '/quanmiao/miaoce/runCustomHotTopicViewPointAnalysis', 'json', true, 'form', request);
}

model RunDocBrainmapRequest {
  regionId?: string(name='RegionId', position='Host'),
  cleanCache?: boolean(name='CleanCache', position='Body'),
  docId: string(name='DocId', description='This parameter is required.', example='12345', position='Body'),
  nodeNumber?: int32(name='NodeNumber', position='Body'),
  prompt?: string(name='Prompt', position='Body'),
  sessionId: string(name='SessionId', description='This parameter is required.', example='3f7045e099474ba28ceca1b4eb6d6e21', position='Body'),
  wordNumber?: int32(name='WordNumber', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-xxx', position='Body'),
  referenceContent?: string(name='referenceContent', position='Body'),
}

model RunDocBrainmapResponseBody = {
  header?: {
    errorCode?: string(name='ErrorCode', example='success'),
    errorMessage?: string(name='ErrorMessage', example='success'),
    event?: string(name='Event', example='task-failed'),
    eventInfo?: string(name='EventInfo'),
    sessionId?: string(name='SessionId', example='07181f55-2311-48af-8048-132a77dee020'),
    taskId?: string(name='TaskId', example='161816'),
    traceId?: string(name='TraceId', example='6427cdf4-2ffe-4d05-b0ef-c4adceea90f4'),
  }(name='Header'),
  payload?: {
    output?: {
      content?: string(name='Content', example='{"xxxx":"xxx"}'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='65'),
      outputTokens?: long(name='OutputTokens', example='100'),
      totalTokens?: long(name='TotalTokens', example='165'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
}

model RunDocBrainmapResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunDocBrainmapResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunDocBrainmap  RunDocBrainmapRequest
  * @return RunDocBrainmapResponse
 */
async function runDocBrainmap(request: RunDocBrainmapRequest): RunDocBrainmapResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunDocBrainmap', 'POST', '/miaodu/stream/runDocBrainmap', 'json', true, 'form', request);
}

function runDocBrainmapWithResponseIterable(request: RunDocBrainmapRequest): iterator[RunDocBrainmapResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunDocBrainmap', 'POST', '/miaodu/stream/runDocBrainmap', 'json', true, 'form', request);
}

model RunDocIntroductionRequest {
  regionId?: string(name='RegionId', position='Host'),
  cleanCache?: boolean(name='CleanCache', position='Body'),
  docId: string(name='DocId', description='This parameter is required.', example='12345', position='Body'),
  introductionPrompt?: string(name='IntroductionPrompt', position='Body'),
  keyPointPrompt?: string(name='KeyPointPrompt', position='Body'),
  sessionId: string(name='SessionId', description='This parameter is required.', example='a3b5eb35-6b28-4cf9-ac09-1dec25ab4df6', position='Body'),
  summaryPrompt?: string(name='SummaryPrompt', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='xxxx', position='Body'),
  referenceContent?: string(name='referenceContent', position='Body'),
}

model RunDocIntroductionResponseBody = {
  header?: {
    errorCode?: string(name='ErrorCode', example='success'),
    errorMessage?: string(name='ErrorMessage', example='success'),
    event?: string(name='Event', example='task-started'),
    eventInfo?: string(name='EventInfo'),
    sessionId?: string(name='SessionId', example='20247a52-23e2-46fb-943d-309cdee2bc6d'),
    taskId?: string(name='TaskId', example='8a9cecb7-6d20-32db-8823-5882c217b647'),
    traceId?: string(name='TraceId', example='0bd58ea2-dc38-45da-ac02-17f05cb9040b'),
  }(name='Header'),
  payload?: {
    output?: {
      introductions?: [ 
        {
          blocks?: [ 
            {
              beginTime?: long(name='BeginTime', example='0'),
              endTime?: long(name='EndTime', example='1200'),
              height?: int32(name='Height', example='600'),
              pageId?: int32(name='PageId', example='10'),
              width?: int32(name='Width', example='600'),
              x?: int32(name='X', example='10'),
              y?: int32(name='Y', example='10'),
            }
          ](name='Blocks'),
          startPageId?: int32(name='StartPageId', example='10'),
          summary?: string(name='Summary'),
          title?: string(name='Title'),
        }
      ](name='Introductions'),
      keyPoint?: string(name='KeyPoint'),
      summary?: string(name='Summary'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='100'),
      outputTokens?: long(name='OutputTokens', example='100'),
      totalTokens?: long(name='TotalTokens', example='200'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='C9B5BEA6-E8C4-5861-BE37-D906D516510E'),
}

model RunDocIntroductionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunDocIntroductionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunDocIntroduction  RunDocIntroductionRequest
  * @return RunDocIntroductionResponse
 */
async function runDocIntroduction(request: RunDocIntroductionRequest): RunDocIntroductionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunDocIntroduction', 'POST', '/miaodu/stream/runDocIntroduction', 'json', true, 'form', request);
}

function runDocIntroductionWithResponseIterable(request: RunDocIntroductionRequest): iterator[RunDocIntroductionResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunDocIntroduction', 'POST', '/miaodu/stream/runDocIntroduction', 'json', true, 'form', request);
}

model RunDocQaRequest {
  regionId?: string(name='RegionId', position='Host'),
  categoryIds?: [ string ](name='CategoryIds', shrink='json', position='Body'),
  conversationContexts?: [ 
    {
      content?: string(name='Content'),
      role?: string(name='Role', example='user'),
    }
  ](name='ConversationContexts', shrink='json', position='Body'),
  docIds?: [ string ](name='DocIds', shrink='json', position='Body'),
  query: string(name='Query', description='This parameter is required.', position='Body'),
  referenceContent?: string(name='ReferenceContent', position='Body'),
  searchSource: string(name='SearchSource', description='This parameter is required.', example='fromWeb', position='Body'),
  sessionId: string(name='SessionId', description='This parameter is required.', example='f486c4e2-b773-4d65-88f8-2ba540610456', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-dswd4003ny4gh9rw', position='Body'),
}

model RunDocQaResponseBody = {
  header?: {
    errorCode?: string(name='ErrorCode', example='success'),
    errorMessage?: string(name='ErrorMessage', example='success'),
    event?: string(name='Event', example='task-started'),
    eventInfo?: string(name='EventInfo'),
    sessionId?: string(name='SessionId', example='f5517ee8-dbec-4dc8-bd0a-af084b5e3db1'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    traceId?: string(name='TraceId', example='46e5c2b5-0877-4f09-bd91-ab0cf314e48b'),
  }(name='Header'),
  payload?: {
    output?: {
      content?: string(name='Content'),
      interveneContent?: string(name='InterveneContent'),
      isReject?: boolean(name='IsReject', example='false'),
      mediaUrlList?: [ 
        {
          clipInfos?: [ 
            {
              from?: double(name='From', example='0'),
              to?: double(name='To', example='30'),
            }
          ](name='ClipInfos'),
          fileUrl?: string(name='FileUrl', example='https://gw.alicdn.com/imgextra/i3/2775676850/O1CN01kdeffE20TM0E7wvpq_!!2775676850.jpg_q60.jpg'),
          mediaType?: string(name='MediaType', example='video'),
        }
      ](name='MediaUrlList'),
      recommends?: [ 
        {
          title?: string(name='Title'),
          url?: string(name='Url'),
        }
      ](name='Recommends'),
      references?: [ 
        {
          pubTime?: string(name='PubTime', example='2024-10-08 18:00'),
          source?: string(name='Source'),
          sourceDocId?: string(name='SourceDocId', example='123456'),
          title?: string(name='Title'),
          url?: string(name='Url', example='http://xxxxx'),
        }
      ](name='References'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='100'),
      outputTokens?: long(name='OutputTokens', example='100'),
      totalTokens?: long(name='TotalTokens', example='200'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
}

model RunDocQaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunDocQaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunDocQa  RunDocQaRequest
  * @return RunDocQaResponse
 */
async function runDocQa(request: RunDocQaRequest): RunDocQaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunDocQa', 'POST', '/miaodu/stream/runDocQA', 'json', true, 'form', request);
}

function runDocQaWithResponseIterable(request: RunDocQaRequest): iterator[RunDocQaResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunDocQa', 'POST', '/miaodu/stream/runDocQA', 'json', true, 'form', request);
}

model RunDocSmartCardRequest {
  regionId?: string(name='RegionId', position='Host'),
  docId: string(name='DocId', description='This parameter is required.', example='84ufBYEeLMZOjRFo84HJ7ySL3Efr55', position='Body'),
  sessionId: string(name='SessionId', description='This parameter is required.', example='3f7045e099474ba28ceca1b4eb6d6e21', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-2setzb9x4ewsd', position='Body'),
}

model RunDocSmartCardResponseBody = {
  header?: {
    errorCode?: string(name='ErrorCode', example='success'),
    errorMessage?: string(name='ErrorMessage', example='success'),
    event?: string(name='Event', example='finished'),
    eventInfo?: string(name='EventInfo'),
    sessionId?: string(name='SessionId', example='07181f55-2311-48af-8048-132a77dee020'),
    taskId?: string(name='TaskId', example='8d55b429d7c6d321fcff54823e8d317b'),
    traceId?: string(name='TraceId', example='0abb781c17337107444473701ed7c3'),
  }(name='Header'),
  payload?: {
    output?: {
      content?: string(name='Content'),
      tags?: [ string ](name='Tags'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='1'),
      outputTokens?: long(name='OutputTokens', example='100'),
      totalTokens?: long(name='TotalTokens', example='101'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', description='Id of the request', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
}

model RunDocSmartCardResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunDocSmartCardResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunDocSmartCard  RunDocSmartCardRequest
  * @return RunDocSmartCardResponse
 */
async function runDocSmartCard(request: RunDocSmartCardRequest): RunDocSmartCardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunDocSmartCard', 'POST', '/miaodu/stream/runDocSmartCard', 'json', true, 'form', request);
}

function runDocSmartCardWithResponseIterable(request: RunDocSmartCardRequest): iterator[RunDocSmartCardResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunDocSmartCard', 'POST', '/miaodu/stream/runDocSmartCard', 'json', true, 'form', request);
}

model RunDocSummaryRequest {
  regionId?: string(name='RegionId', position='Host'),
  cleanCache?: boolean(name='CleanCache', position='Body'),
  docId?: string(name='DocId', example='12345', position='Body'),
  query?: string(name='Query', position='Body'),
  recommendContent?: string(name='RecommendContent', position='Body'),
  sessionId: string(name='SessionId', description='This parameter is required.', example='0f56f98a-f2d8-47ec-98e9-1cbdcffa9539', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-2setzb9x4ewsd', position='Body'),
}

model RunDocSummaryResponseBody = {
  header?: {
    errorCode?: string(name='ErrorCode', example='success'),
    errorMessage?: string(name='ErrorMessage', example='success'),
    event?: string(name='Event', example='task-started'),
    eventInfo?: string(name='EventInfo'),
    sessionId?: string(name='SessionId', example='92e16ccb-92b6-4894-abbf-fc6e2929a0df'),
    taskId?: string(name='TaskId', example='b057f2fa-2277-477b-babf-cbc062307828'),
    traceId?: string(name='TraceId', example='2150451a17191950923411783e2927'),
  }(name='Header'),
  payload?: {
    output?: {
      content?: string(name='Content'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='100'),
      outputTokens?: long(name='OutputTokens', example='100'),
      totalTokens?: long(name='TotalTokens', example='200'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='3259D344-E871-5DE0-8FFE-CDA21F8D4382'),
}

model RunDocSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunDocSummaryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunDocSummary  RunDocSummaryRequest
  * @return RunDocSummaryResponse
 */
async function runDocSummary(request: RunDocSummaryRequest): RunDocSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunDocSummary', 'POST', '/miaodu/stream/runDocSummary', 'json', true, 'form', request);
}

function runDocSummaryWithResponseIterable(request: RunDocSummaryRequest): iterator[RunDocSummaryResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunDocSummary', 'POST', '/miaodu/stream/runDocSummary', 'json', true, 'form', request);
}

model RunDocTranslationRequest {
  regionId?: string(name='RegionId', position='Host'),
  cleanCache?: boolean(name='CleanCache', position='Body'),
  docId?: string(name='DocId', example='12345', position='Body'),
  recommendContent?: string(name='RecommendContent', position='Body'),
  sessionId: string(name='SessionId', description='This parameter is required.', example='2e6b3987-f743-4d4c-8326-d9c41a6af3ee', position='Body'),
  transType?: string(name='TransType', example='toChinese
toEnglish', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-xxx', position='Body'),
}

model RunDocTranslationResponseBody = {
  header?: {
    errorCode?: string(name='ErrorCode', example='success'),
    errorMessage?: string(name='ErrorMessage', example='success'),
    event?: string(name='Event', example='task-started'),
    eventInfo?: string(name='EventInfo'),
    sessionId?: string(name='SessionId', example='411c4dfa-2168-4379-a902-675d67f453f8'),
    taskId?: string(name='TaskId', example='50a1cc8e-717e-4a2b-a76b-dc9734a8564b'),
    traceId?: string(name='TraceId', example='ebd19b12-0cae-488f-9e41-5a1c825f545b'),
  }(name='Header'),
  payload?: {
    output?: {
      content?: string(name='Content'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='100'),
      outputTokens?: long(name='OutputTokens', example='100'),
      totalTokens?: long(name='TotalTokens', example='200'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
}

model RunDocTranslationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunDocTranslationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunDocTranslation  RunDocTranslationRequest
  * @return RunDocTranslationResponse
 */
async function runDocTranslation(request: RunDocTranslationRequest): RunDocTranslationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunDocTranslation', 'POST', '/miaodu/stream/runDocTranslation', 'json', true, 'form', request);
}

function runDocTranslationWithResponseIterable(request: RunDocTranslationRequest): iterator[RunDocTranslationResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunDocTranslation', 'POST', '/miaodu/stream/runDocTranslation', 'json', true, 'form', request);
}

model RunDocWashingRequest {
  regionId?: string(name='RegionId', position='Host'),
  prompt?: string(name='Prompt', position='Body'),
  referenceContent: string(name='ReferenceContent', description='This parameter is required.', position='Body'),
  sessionId?: string(name='SessionId', position='Body'),
  topic?: string(name='Topic', position='Body'),
  wordNumber?: int32(name='WordNumber', example='500', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-2setzb9x4ewsd', position='Body'),
  writingTypeName?: string(name='WritingTypeName', position='Body'),
  writingTypeRefDoc?: string(name='WritingTypeRefDoc', position='Body'),
}

model RunDocWashingResponseBody = {
  end?: boolean(name='End', example='false'),
  header?: {
    event?: string(name='Event', example='task-finished'),
    eventInfo?: string(name='EventInfo'),
    requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    sessionId?: string(name='SessionId', example='20247a52-23e2-46fb-943d-309cdee2bc6d'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    traceId?: string(name='TraceId', example='2150451a17191950923411783e2927'),
  }(name='Header'),
  payload?: {
    output?: {
      text?: string(name='Text'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='100'),
      outputTokens?: long(name='OutputTokens', example='100'),
      totalTokens?: long(name='TotalTokens', example='200'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', description='Id of the request', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
}

model RunDocWashingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunDocWashingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunDocWashing  RunDocWashingRequest
  * @return RunDocWashingResponse
 */
async function runDocWashing(request: RunDocWashingRequest): RunDocWashingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunDocWashing', 'POST', '/quanmiao/aimiaobi/runDocWashing', 'json', true, 'form', request);
}

function runDocWashingWithResponseIterable(request: RunDocWashingRequest): iterator[RunDocWashingResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunDocWashing', 'POST', '/quanmiao/aimiaobi/runDocWashing', 'json', true, 'form', request);
}

model RunExpandContentRequest {
  regionId?: string(name='RegionId', position='Host'),
  content: string(name='Content', description='This parameter is required.', example='创新政务社交媒体功能。鼓励各地区、各部门结合实际，开发政务社交媒体的特色功能，如在线咨询服务、政策解读、互动问答等，增强政务社交媒体的互动性和实用性，提升公众参与度。', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-2setzb9x4ewsd', position='Body'),
}

model RunExpandContentResponseBody = {
  end?: boolean(name='End'),
  header?: {
    errorCode?: string(name='ErrorCode', example='403'),
    errorMessage?: string(name='ErrorMessage', example='Pop sign mismatch, please check.'),
    event?: string(name='Event', example='result-generated'),
    eventInfo?: string(name='EventInfo', example='模型生成事件'),
    sessionId?: string(name='SessionId', example='3cd10828-0e42-471c-8f1a-931cde20b035'),
    taskId?: string(name='TaskId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
    traceId?: string(name='TraceId', example='2150451a17191950923411783e2927'),
  }(name='Header'),
  payload?: {
    output?: {
      text?: string(name='Text', example='这是测试输出'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='100'),
      outputTokens?: long(name='OutputTokens', example='100'),
      totalTokens?: long(name='TotalTokens', example='200'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
}

model RunExpandContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunExpandContentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunExpandContent  RunExpandContentRequest
  * @return RunExpandContentResponse
 */
async function runExpandContent(request: RunExpandContentRequest): RunExpandContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunExpandContent', 'POST', '/quanmiao/aimiaobi/runExpandContent', 'json', true, 'form', request);
}

function runExpandContentWithResponseIterable(request: RunExpandContentRequest): iterator[RunExpandContentResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunExpandContent', 'POST', '/quanmiao/aimiaobi/runExpandContent', 'json', true, 'form', request);
}

model RunGenerateQuestionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  docId?: string(name='DocId', example='oOgIwodFANW1u5MnqxysOh1rtld3xn', position='Body'),
  referenceContent?: string(name='ReferenceContent', position='Body'),
  sessionId?: string(name='SessionId', example='f486c4e2-b773-4d65-88f8-2ba540610456', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-w335gauzlbba2vze', position='Body'),
}

model RunGenerateQuestionsResponseBody = {
  header?: {
    errorCode?: string(name='ErrorCode', example='200'),
    errorMessage?: string(name='ErrorMessage', example='success'),
    event?: string(name='Event', example='finished'),
    eventInfo?: string(name='EventInfo'),
    sessionId?: string(name='SessionId', example='3cd10828-0e42-471c-8f1a-931cde20b035'),
    taskId?: string(name='TaskId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
    traceId?: string(name='TraceId', example='0bc3b4b417362160345997589e5f6e'),
  }(name='Header'),
  payload?: {
    output?: {
      content?: string(name='Content'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='100'),
      outputTokens?: long(name='OutputTokens', example='100'),
      totalTokens?: long(name='TotalTokens', example='200'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', description='Id of the request', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
}

model RunGenerateQuestionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunGenerateQuestionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunGenerateQuestions  RunGenerateQuestionsRequest
  * @return RunGenerateQuestionsResponse
 */
async function runGenerateQuestions(request: RunGenerateQuestionsRequest): RunGenerateQuestionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunGenerateQuestions', 'POST', '/miaodu/stream/runGenerateQuestions', 'json', true, 'form', request);
}

function runGenerateQuestionsWithResponseIterable(request: RunGenerateQuestionsRequest): iterator[RunGenerateQuestionsResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunGenerateQuestions', 'POST', '/miaodu/stream/runGenerateQuestions', 'json', true, 'form', request);
}

model RunHotwordRequest {
  regionId?: string(name='RegionId', position='Host'),
  docId?: string(name='DocId', example='84ufBYEeLMZOjRFo84HJ7ySL3Efr55', position='Body'),
  prompt?: string(name='Prompt', position='Body'),
  referenceContent?: string(name='ReferenceContent', position='Body'),
  sessionId?: string(name='SessionId', example='e32a1a3f-1f7e-41dd-b888-ef1d91b96d1e', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-baw8as25ll3wnzjr', position='Body'),
}

model RunHotwordResponseBody = {
  header?: {
    errorCode?: string(name='ErrorCode', example='200'),
    errorMessage?: string(name='ErrorMessage', example='success'),
    event?: string(name='Event', example='finished'),
    eventInfo?: string(name='EventInfo'),
    sessionId?: string(name='SessionId', example='92e16ccb-92b6-4894-abbf-fc6e2929a0df'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    traceId?: string(name='TraceId', example='0abb7e3217356108993888059ee72b'),
  }(name='Header'),
  payload?: {
    output?: {
      content?: string(name='Content'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='100'),
      outputTokens?: long(name='OutputTokens', example='1'),
      totalTokens?: long(name='TotalTokens', example='101'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', description='Id of the request', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
}

model RunHotwordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunHotwordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunHotword  RunHotwordRequest
  * @return RunHotwordResponse
 */
async function runHotword(request: RunHotwordRequest): RunHotwordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunHotword', 'POST', '/miaodu/stream/runHotword', 'json', true, 'form', request);
}

function runHotwordWithResponseIterable(request: RunHotwordRequest): iterator[RunHotwordResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunHotword', 'POST', '/miaodu/stream/runHotword', 'json', true, 'form', request);
}

model RunKeywordsExtractionGenerationRequest {
  regionId?: string(name='RegionId', position='Host'),
  referenceData: {
    contents: [ string ](name='Contents', description='This parameter is required.'),
  }(name='ReferenceData', description='This parameter is required.', shrink='json', position='Body'),
  taskId?: string(name='TaskId', example='xxx', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-xxx', position='Body'),
}

model RunKeywordsExtractionGenerationResponseBody = {
  header?: {
    errorCode?: string(name='ErrorCode', example='AccessForbid'),
    errorMessage?: string(name='ErrorMessage', example='xx'),
    event?: string(name='Event', example='task-failed'),
    sessionId?: string(name='SessionId', example='1a3d7c9f-3a6d-4e49-b176-2d8721a27397'),
    taskId?: string(name='TaskId', example='8d55b429d7c6d321fcff54823e8d317b'),
    traceId?: string(name='TraceId', example='210bc4e817219607963985396de8bd'),
  }(name='Header'),
  payload?: {
    output?: {
      text?: string(name='Text', example='xxx'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='1'),
      outputTokens?: long(name='OutputTokens', example='1'),
      totalTokens?: long(name='TotalTokens', example='2'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='419F3FBE-5C8D-5949-AC29-E9615235D15A'),
}

model RunKeywordsExtractionGenerationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunKeywordsExtractionGenerationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunKeywordsExtractionGeneration  RunKeywordsExtractionGenerationRequest
  * @return RunKeywordsExtractionGenerationResponse
 */
async function runKeywordsExtractionGeneration(request: RunKeywordsExtractionGenerationRequest): RunKeywordsExtractionGenerationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunKeywordsExtractionGeneration', 'POST', '/quanmiao/aimiaobi/runKeywordsExtractionGeneration', 'json', true, 'form', request);
}

function runKeywordsExtractionGenerationWithResponseIterable(request: RunKeywordsExtractionGenerationRequest): iterator[RunKeywordsExtractionGenerationResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunKeywordsExtractionGeneration', 'POST', '/quanmiao/aimiaobi/runKeywordsExtractionGeneration', 'json', true, 'form', request);
}

model RunMultiDocIntroductionRequest {
  regionId?: string(name='RegionId', position='Host'),
  docIds: [ string ](name='DocIds', description='This parameter is required.', shrink='json', position='Body'),
  keyPointPrompt?: string(name='KeyPointPrompt', position='Body'),
  sessionId: string(name='SessionId', description='This parameter is required.', example='75bf82fa-b71b-45d7-ae40-0b00e496cd9e', position='Body'),
  summaryPrompt?: string(name='SummaryPrompt', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-2setzb9x4ewsd', position='Body'),
}

model RunMultiDocIntroductionResponseBody = {
  header?: {
    errorCode?: string(name='ErrorCode', example='200'),
    errorMessage?: string(name='ErrorMessage', example='Message does not exist.'),
    event?: string(name='Event', example='finished'),
    eventInfo?: string(name='EventInfo'),
    sessionId?: string(name='SessionId', example='92e16ccb-92b6-4894-abbf-fc6e2929a0df'),
    taskId?: string(name='TaskId', example='b057f2fa-2277-477b-babf-cbc062307828'),
    traceId?: string(name='TraceId', example='46e5c2b5-0877-4f09-bd91-ab0cf314e48b'),
  }(name='Header'),
  payload?: {
    output?: {
      keyPoints?: [ 
        {
          keyPoint?: string(name='KeyPoint'),
          source?: string(name='Source'),
        }
      ](name='KeyPoints'),
      summary?: string(name='Summary'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='65'),
      outputTokens?: long(name='OutputTokens', example='100'),
      totalTokens?: long(name='TotalTokens', example='165'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', description='Id of the request', example='3f7045e099474ba28ceca1b4eb6d6e21'),
}

model RunMultiDocIntroductionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunMultiDocIntroductionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunMultiDocIntroduction  RunMultiDocIntroductionRequest
  * @return RunMultiDocIntroductionResponse
 */
async function runMultiDocIntroduction(request: RunMultiDocIntroductionRequest): RunMultiDocIntroductionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunMultiDocIntroduction', 'POST', '/miaodu/stream/runMultiDocIntroduction', 'json', true, 'form', request);
}

function runMultiDocIntroductionWithResponseIterable(request: RunMultiDocIntroductionRequest): iterator[RunMultiDocIntroductionResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunMultiDocIntroduction', 'POST', '/miaodu/stream/runMultiDocIntroduction', 'json', true, 'form', request);
}

model RunSearchGenerationRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentContext?: {
    bizContext?: {
      askUser?: string(name='AskUser'),
      askUserKeywords?: [ string ](name='AskUserKeywords'),
      currentStep?: string(name='CurrentStep'),
      multimodalMediaSelection?: {
        originalSessionId?: string(name='OriginalSessionId', example='原始会话唯一标识：搜索结果取这个会话中的全量，目前仅媒资搜索场景需要'),
        searchModel?: string(name='SearchModel', example='TextGenerate'),
        searchModelDataValue?: string(name='SearchModelDataValue', example='分类1'),
        selectionType?: string(name='SelectionType', example='all'),
        sessionId?: string(name='SessionId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
        textSearchResult?: {
          searchResult?: [ 
            {
              chunks?: [ string ](name='Chunks'),
              content?: string(name='Content', example='文章内容'),
              docId?: string(name='DocId', example='文档-自定义的唯一ID'),
              docUuid?: string(name='DocUuid', example='xxx'),
              pubTime?: string(name='PubTime', example='2024-11-25 14:25:59'),
              score?: float(name='Score', example='1'),
              searchSource?: string(name='SearchSource', example='QuarkCommonNews'),
              searchSourceName?: string(name='SearchSourceName', example='互联网搜索'),
              searchSourceType?: string(name='SearchSourceType', example='SystemSearch'),
              source?: string(name='Source', example='新华社'),
              summary?: string(name='Summary', example='文章摘要'),
              title?: string(name='Title', example='文章标题'),
              url?: string(name='Url', example='https://www.example.com/aaa.docx'),
            }
          ](name='SearchResult'),
        }(name='TextSearchResult'),
      }(name='MultimodalMediaSelection'),
      nextStep?: string(name='NextStep'),
      skipCurrentSupplement?: boolean(name='SkipCurrentSupplement'),
      supplementDataType?: string(name='SupplementDataType'),
      supplementEnable?: boolean(name='SupplementEnable'),
      userBack?: string(name='UserBack'),
      userBackKeywords?: [ string ](name='UserBackKeywords'),
    }(name='BizContext'),
  }(name='AgentContext', shrink='json', position='Body'),
  chatConfig?: {
    generateLevel?: string(name='GenerateLevel', example='concise'),
    generateTechnology?: string(name='GenerateTechnology', example='copilotPrecise'),
    searchModels?: [ string ](name='SearchModels'),
    searchParam?: {
      endTime?: long(name='EndTime', example='1725983999999'),
      multimodalSearchTypes?: [ string ](name='MultimodalSearchTypes'),
      searchSources?: [ 
        {
          code?: string(name='Code', example='SystemSearch'),
          datasetName?: string(name='DatasetName', example='QuarkCommonNews'),
        }
      ](name='SearchSources'),
      startTime?: long(name='StartTime', example='1725983999999'),
    }(name='SearchParam'),
  }(name='ChatConfig', example='xxx', shrink='json', position='Body'),
  modelId?: string(name='ModelId', example='qwen-max-latest', position='Body'),
  originalSessionId?: string(name='OriginalSessionId', example='xxx', position='Body'),
  prompt?: string(name='Prompt', example='xxx', position='Body'),
  taskId?: string(name='TaskId', example='7AA2AE16-D873-5C5F-9708-15396C382EB1', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-xxx', position='Body'),
}

model RunSearchGenerationResponseBody = {
  header?: {
    errorCode?: string(name='ErrorCode', example='AccessForbid'),
    errorMessage?: string(name='ErrorMessage', example='xx'),
    event?: string(name='Event', example='task-failed'),
    eventInfo?: string(name='EventInfo', example='xx'),
    originSessionId?: string(name='OriginSessionId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    responseTime?: long(name='ResponseTime', example='1'),
    sessionId?: string(name='SessionId', example='x'),
    taskId?: string(name='TaskId', example='x'),
    traceId?: string(name='TraceId', example='xx'),
  }(name='Header'),
  payload?: {
    output?: {
      agentContext?: {
        bizContext?: {
          askUser?: string(name='AskUser', example='您想了解关于xx的哪些信息？'),
          askUserKeywords?: [ string ](name='AskUserKeywords'),
          currentStep?: string(name='CurrentStep', example='start'),
          generatedContent?: {
            clusterTopicResult?: {
              clusterTopics?: [ 
                {
                  imageSearchResult?: {
                    current?: int32(name='Current', example='1'),
                    searchResult?: [ 
                      {
                        article?: {
                          docId?: string(name='DocId', example='xx'),
                          docUuid?: string(name='DocUuid', example='xx'),
                          searchSourceName?: string(name='SearchSourceName', example='互联网搜索'),
                          summary?: string(name='Summary', example='xx'),
                          title?: string(name='Title', example='xx'),
                          url?: string(name='Url', example='xx'),
                        }(name='Article'),
                        fileUrl?: string(name='FileUrl', example='xx'),
                        mediaId?: string(name='MediaId', example='xx'),
                      }
                    ](name='SearchResult'),
                    size?: int32(name='Size', example='1'),
                    total?: int32(name='Total', example='1'),
                  }(name='ImageSearchResult'),
                  textSearchResult?: {
                    current?: int32(name='Current', example='1'),
                    searchResult?: [ 
                      {
                        docId?: string(name='DocId', example='xx'),
                        docUuid?: string(name='DocUuid', example='xx'),
                        multimodalMedias?: [ 
                          {
                            fileUrl?: string(name='FileUrl', example='xx'),
                            mediaId?: string(name='MediaId', example='xx'),
                            mediaType?: string(name='MediaType', example='image'),
                          }
                        ](name='MultimodalMedias'),
                        pubTime?: string(name='PubTime', example='2023-04-04 08:39:09'),
                        searchSource?: string(name='SearchSource', example='QuarkCommonNews'),
                        searchSourceName?: string(name='SearchSourceName', example='互联网搜索'),
                        searchSourceType?: string(name='SearchSourceType', example='SystemSearch'),
                        summary?: string(name='Summary', example='xx'),
                        title?: string(name='Title', example='xx'),
                        url?: string(name='Url', example='xx'),
                      }
                    ](name='SearchResult'),
                    size?: int32(name='Size', example='1'),
                    total?: int32(name='Total', example='1'),
                  }(name='TextSearchResult'),
                  topic?: string(name='Topic', example='xx'),
                  videoSearchResult?: {
                    current?: int32(name='Current', example='1'),
                    searchResult?: [ 
                      {
                        article?: {
                          docId?: string(name='DocId', example='xx'),
                          docUuid?: string(name='DocUuid', example='xx'),
                          searchSourceName?: string(name='SearchSourceName', example='互联网搜索'),
                          summary?: string(name='Summary', example='xx'),
                          title?: string(name='Title', example='xx'),
                          url?: string(name='Url', example='xx'),
                        }(name='Article'),
                        clipInfos?: [ 
                          {
                            from?: double(name='From', example='1'),
                            score?: double(name='Score', example='0.9'),
                            text?: string(name='Text', example='xx'),
                            to?: double(name='To', example='1'),
                            type?: string(name='Type', example='asr'),
                          }
                        ](name='ClipInfos'),
                        fileUrl?: string(name='FileUrl', example='xx'),
                        mediaId?: string(name='MediaId', example='xx'),
                      }
                    ](name='SearchResult'),
                    size?: int32(name='Size', example='1'),
                    total?: int32(name='Total', example='1'),
                  }(name='VideoSearchResult'),
                }
              ](name='ClusterTopics'),
              generateFinished?: boolean(name='GenerateFinished', example='true'),
              textGenerate?: string(name='TextGenerate', example='xx'),
            }(name='ClusterTopicResult'),
            excerptResult?: {
              generateFinished?: boolean(name='GenerateFinished', example='true'),
              generateLevel?: string(name='GenerateLevel', example='concise'),
              reasonTextGenerate?: string(name='ReasonTextGenerate'),
              searchResult?: [ 
                {
                  chunks?: [ string ](name='Chunks'),
                  content?: string(name='Content', example='xx'),
                  docId?: string(name='DocId', example='xx'),
                  docUuid?: string(name='DocUuid', example='xx'),
                  excerpt?: string(name='Excerpt', example='xx'),
                  multimodalMedias?: [ 
                    {
                      fileUrl?: string(name='FileUrl', example='xx'),
                      mediaId?: string(name='MediaId', example='xx'),
                      mediaType?: string(name='MediaType', example='image'),
                    }
                  ](name='MultimodalMedias'),
                  pubTime?: string(name='PubTime', example='2023-04-04 08:39:09'),
                  score?: float(name='Score', example='0.99'),
                  searchSource?: string(name='SearchSource', example='QuarkCommonNews'),
                  searchSourceName?: string(name='SearchSourceName', example='互联网搜索'),
                  searchSourceType?: string(name='SearchSourceType', example='SystemSearch'),
                  select?: boolean(name='Select', example='true'),
                  summary?: string(name='Summary', example='xx'),
                  textGenerateMultimodalMediaList?: [ 
                    {
                      docUuid?: string(name='DocUuid', example='xx'),
                      end?: int32(name='End', example='1'),
                      multimodalMediaList?: [ 
                        {
                          article?: {
                            docId?: string(name='DocId', example='xx'),
                            docUuid?: string(name='DocUuid', example='xx'),
                            searchSourceName?: string(name='SearchSourceName', example='xxx'),
                            title?: string(name='Title', example='xx'),
                            url?: string(name='Url', example='xx'),
                          }(name='Article'),
                          fileUrl?: string(name='FileUrl', example='xx'),
                          mediaId?: string(name='MediaId', example='xx'),
                          mediaType?: string(name='MediaType', example='image'),
                        }
                      ](name='MultimodalMediaList'),
                      start?: int32(name='Start', example='1'),
                    }
                  ](name='TextGenerateMultimodalMediaList'),
                  title?: string(name='Title', example='xx'),
                  traceabilityId?: int32(name='TraceabilityId', example='1'),
                  url?: string(name='Url', example='xx'),
                }
              ](name='SearchResult'),
              textGenerate?: string(name='TextGenerate', example='xx'),
            }(name='ExcerptResult'),
            imageSearchResult?: {
              searchResult?: [ 
                {
                  article?: {
                    docId?: string(name='DocId', example='xx'),
                    docUuid?: string(name='DocUuid', example='xx'),
                    searchSourceName?: string(name='SearchSourceName', example='互联网搜索'),
                    summary?: string(name='Summary', example='xx'),
                    title?: string(name='Title', example='xx'),
                    url?: string(name='Url', example='xx'),
                  }(name='Article'),
                  fileUrl?: string(name='FileUrl', example='xx'),
                  mediaId?: string(name='MediaId', example='xx'),
                }
              ](name='SearchResult'),
            }(name='ImageSearchResult'),
            newsElementResult?: {
              generateFinished?: boolean(name='GenerateFinished', example='true'),
              newsElementArticleList?: [ 
                {
                  article?: {
                    content?: string(name='Content', example='xx'),
                    docId?: string(name='DocId', example='xx'),
                    docUuid?: string(name='DocUuid', example='xx'),
                    pubTime?: string(name='PubTime', example='2023-04-04 08:39:09'),
                    score?: float(name='Score', example='0.99'),
                    searchSource?: string(name='SearchSource', example='QuarkCommonNews'),
                    searchSourceName?: string(name='SearchSourceName', example='互联网搜索'),
                    searchSourceType?: string(name='SearchSourceType', example='SystemSearch'),
                    select?: boolean(name='Select', example='true'),
                    summary?: string(name='Summary', example='xx'),
                    title?: string(name='Title', example='xx'),
                    url?: string(name='Url', example='xx'),
                  }(name='Article'),
                  newsElementList?: [ 
                    {
                      event?: {
                        causeList?: [ string ](name='CauseList'),
                        processList?: [ string ](name='ProcessList'),
                        resultList?: [ string ](name='ResultList'),
                      }(name='Event', example='task-started'),
                      location?: string(name='Location', example='xx'),
                      people?: string(name='People', example='xx'),
                      time?: string(name='Time', example='时间'),
                    }
                  ](name='NewsElementList'),
                  textGenerate?: string(name='TextGenerate', example='xx'),
                }
              ](name='NewsElementArticleList'),
              textGenerate?: string(name='TextGenerate', example='x'),
            }(name='NewsElementResult'),
            textGenerateResult?: {
              generateFinished?: boolean(name='GenerateFinished', example='true'),
              generateLevel?: string(name='GenerateLevel', example='concise'),
              generateTraceability?: {
                coordinates?: [ 
                  {
                    generateCoordinate?: {
                      x?: int32(name='X', example='1'),
                      y?: int32(name='Y', example='1'),
                      z?: int32(name='Z', example='1'),
                    }(name='GenerateCoordinate'),
                    newsCoordinate?: {
                      x?: int32(name='X', example='1'),
                      y?: int32(name='Y', example='1'),
                      z?: int32(name='Z', example='1'),
                    }(name='NewsCoordinate'),
                  }
                ](name='Coordinates'),
                duplicate?: double(name='Duplicate', example='0.9'),
              }(name='GenerateTraceability'),
              multimodalSearchResultList?: [ 
                {
                  current?: int32(name='Current', example='1'),
                  searchQuery?: string(name='SearchQuery', example='xx'),
                  searchResult?: [ 
                    {
                      article?: {
                        docId?: string(name='DocId', example='xx'),
                        docUuid?: string(name='DocUuid', example='xx'),
                        searchSourceName?: string(name='SearchSourceName', example='xx'),
                        summary?: string(name='Summary', example='xx'),
                        title?: string(name='Title', example='xx'),
                        url?: string(name='Url', example='xx'),
                      }(name='Article'),
                      clipInfos?: [ 
                        {
                          from?: double(name='From', example='1'),
                          score?: double(name='Score', example='0.1'),
                          text?: string(name='Text', example='xx'),
                          to?: double(name='To', example='1'),
                          type?: string(name='Type', example='asr'),
                        }
                      ](name='ClipInfos'),
                      fileUrl?: string(name='FileUrl', example='xx'),
                      mediaId?: string(name='MediaId', example='xx'),
                      mediaType?: string(name='MediaType', example='image'),
                    }
                  ](name='SearchResult'),
                  searchType?: string(name='SearchType', example='realtime'),
                  size?: int32(name='Size', example='1'),
                  timelineDateStr?: string(name='TimelineDateStr', example='时间脉络-时间'),
                  total?: int32(name='Total', example='1'),
                }
              ](name='MultimodalSearchResultList'),
              reasonTextGenerate?: string(name='ReasonTextGenerate'),
              referenceList?: [ 
                {
                  chunks?: [ string ](name='Chunks'),
                  content?: string(name='Content', example='xx'),
                  docId?: string(name='DocId', example='xx'),
                  docUuid?: string(name='DocUuid', example='xx'),
                  pubTime?: string(name='PubTime', example='2023-04-04 08:39:09'),
                  score?: float(name='Score', example='0.99'),
                  searchSource?: string(name='SearchSource', example='QuarkCommonNews'),
                  searchSourceName?: string(name='SearchSourceName', example='互联网搜索'),
                  searchSourceType?: string(name='SearchSourceType', example='SystemSearch'),
                  select?: boolean(name='Select', example='true'),
                  source?: string(name='Source', example='新华社'),
                  summary?: string(name='Summary', example='xx'),
                  title?: string(name='Title', example='xx'),
                  traceabilityId?: int32(name='TraceabilityId', example='1'),
                  url?: string(name='Url', example='xx'),
                }
              ](name='ReferenceList'),
              textGenerate?: string(name='TextGenerate', example='xx'),
              textGenerateMultimodalMediaList?: [ 
                {
                  end?: int32(name='End', example='1'),
                  multimodalMediaList?: [ 
                    {
                      article?: {
                        docId?: string(name='DocId', example='xx'),
                        docUuid?: string(name='DocUuid', example='xx'),
                        searchSourceName?: string(name='SearchSourceName', example='xx'),
                        summary?: string(name='Summary', example='xx'),
                        title?: string(name='Title', example='xx'),
                        url?: string(name='Url', example='xx'),
                      }(name='Article'),
                      fileUrl?: string(name='FileUrl', example='xx'),
                      mediaId?: string(name='MediaId', example='xx'),
                      mediaType?: string(name='MediaType', example='image'),
                    }
                  ](name='MultimodalMediaList'),
                  start?: int32(name='Start', example='1'),
                }
              ](name='TextGenerateMultimodalMediaList'),
            }(name='TextGenerateResult'),
            textSearchResult?: {
              current?: int32(name='Current'),
              searchResult?: [ 
                {
                  content?: string(name='Content', example='xx'),
                  docId?: string(name='DocId', example='xx'),
                  docUuid?: string(name='DocUuid', example='xx'),
                  pubTime?: string(name='PubTime', example='2024-11-25 14:25:59'),
                  searchSource?: string(name='SearchSource', example='QuarkCommonNews'),
                  searchSourceName?: string(name='SearchSourceName', example='xxx'),
                  searchSourceType?: string(name='SearchSourceType', example='SystemSearch'),
                  summary?: string(name='Summary', example='xx'),
                  title?: string(name='Title', example='xx'),
                  url?: string(name='Url', example='xx'),
                }
              ](name='SearchResult'),
              size?: int32(name='Size'),
              total?: int32(name='Total'),
            }(name='TextSearchResult'),
            timelineResult?: {
              generateFinished?: boolean(name='GenerateFinished', example='true'),
              generateTraceability?: {
                coordinates?: [ 
                  {
                    generateCoordinate?: {
                      x?: int32(name='X', example='1'),
                      y?: int32(name='Y', example='1'),
                      z?: int32(name='Z', example='1'),
                    }(name='GenerateCoordinate'),
                    newsCoordinate?: {
                      x?: int32(name='X', example='1'),
                      y?: int32(name='Y', example='1'),
                      z?: int32(name='Z', example='1'),
                    }(name='NewsCoordinate'),
                  }
                ](name='Coordinates'),
                duplicate?: double(name='Duplicate', example='0.9'),
              }(name='GenerateTraceability'),
              multimodalSearchResultList?: [ 
                {
                  searchResult?: [ 
                    {
                      article?: {
                        docId?: string(name='DocId', example='xx'),
                        docUuid?: string(name='DocUuid', example='xx'),
                        searchSourceName?: string(name='SearchSourceName', example='互联网搜索'),
                        summary?: string(name='Summary', example='xx'),
                        title?: string(name='Title', example='xx'),
                        url?: string(name='Url', example='xx'),
                      }(name='Article'),
                      clipInfos?: [ 
                        {
                          from?: double(name='From', example='1'),
                          score?: double(name='Score', example='0.99'),
                          text?: string(name='Text', example='xx'),
                          to?: double(name='To', example='1'),
                          type?: string(name='Type', example='asr'),
                        }
                      ](name='ClipInfos'),
                      fileUrl?: string(name='FileUrl', example='xx'),
                      mediaId?: string(name='MediaId', example='xx'),
                      mediaType?: string(name='MediaType', example='image'),
                    }
                  ](name='SearchResult'),
                  timelineDateStr?: string(name='TimelineDateStr', example='2024-09-11'),
                }
              ](name='MultimodalSearchResultList'),
              reasonTextGenerate?: string(name='ReasonTextGenerate'),
              referenceList?: [ 
                {
                  chunks?: [ string ](name='Chunks'),
                  content?: string(name='Content', example='xx'),
                  docId?: string(name='DocId', example='xx'),
                  docUuid?: string(name='DocUuid', example='xx'),
                  pubTime?: string(name='PubTime', example='2023-04-04 08:39:09'),
                  score?: float(name='Score', example='0.99'),
                  searchSource?: string(name='SearchSource', example='QuarkCommonNews'),
                  searchSourceName?: string(name='SearchSourceName', example='互联网搜索'),
                  searchSourceType?: string(name='SearchSourceType', example='SystemSearch'),
                  select?: boolean(name='Select', example='true'),
                  source?: string(name='Source', example='新华社'),
                  summary?: string(name='Summary', example='xx'),
                  title?: string(name='Title', example='xx'),
                  traceabilityId?: int32(name='TraceabilityId', example='1'),
                  url?: string(name='Url', example='xx'),
                }
              ](name='ReferenceList'),
              textGenerate?: string(name='TextGenerate', example='xx'),
              textGenerateMultimodalMediaList?: [ 
                {
                  end?: int32(name='End', example='1'),
                  multimodalMediaList?: [ 
                    {
                      article?: {
                        docId?: string(name='DocId', example='xx'),
                        docUuid?: string(name='DocUuid', example='xx'),
                        searchSourceName?: string(name='SearchSourceName', example='互联网搜索'),
                        summary?: string(name='Summary', example='xx'),
                        title?: string(name='Title', example='xxxx'),
                        url?: string(name='Url', example='xx'),
                      }(name='Article'),
                      fileUrl?: string(name='FileUrl', example='xx'),
                      mediaId?: string(name='MediaId', example='xx'),
                      mediaType?: string(name='MediaType', example='image'),
                    }
                  ](name='MultimodalMediaList'),
                  start?: int32(name='Start', example='1'),
                }
              ](name='TextGenerateMultimodalMediaList'),
            }(name='TimelineResult'),
            videoSearchResult?: {
              searchResult?: [ 
                {
                  article?: {
                    docId?: string(name='DocId', example='xx'),
                    docUuid?: string(name='DocUuid', example='xx'),
                    searchSourceName?: string(name='SearchSourceName', example='互联网搜索'),
                    summary?: string(name='Summary', example='xx'),
                    title?: string(name='Title', example='xx'),
                    url?: string(name='Url', example='xx'),
                  }(name='Article'),
                  clipInfos?: [ 
                    {
                      from?: double(name='From', example='1'),
                      score?: double(name='Score', example='0.8'),
                      text?: string(name='Text', example='xx'),
                      to?: double(name='To', example='1'),
                      type?: string(name='Type', example='asr'),
                    }
                  ](name='ClipInfos'),
                  fileUrl?: string(name='FileUrl', example='xx'),
                  mediaId?: string(name='MediaId', example='xx'),
                }
              ](name='SearchResult'),
            }(name='VideoSearchResult'),
          }(name='GeneratedContent'),
          modelId?: string(name='ModelId'),
          nextStep?: string(name='NextStep', example='search'),
          recommendSearchQueryList?: [ string ](name='RecommendSearchQueryList'),
          searchKeywords?: [ string ](name='SearchKeywords'),
          searchQueryList?: [ string ](name='SearchQueryList'),
          supplementDataType?: string(name='SupplementDataType', example='searchQuery'),
          supplementEnable?: boolean(name='SupplementEnable', example='true'),
          tokenCalculate?: {
            firstTokenTime?: float(name='FirstTokenTime'),
            outputAvgTime?: float(name='OutputAvgTime'),
            searchTime?: float(name='SearchTime'),
            time?: float(name='Time'),
            totalTokens?: long(name='TotalTokens'),
          }(name='TokenCalculate'),
        }(name='BizContext'),
      }(name='AgentContext'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='1'),
      outputTokens?: long(name='OutputTokens', example='2'),
      totalTokens?: long(name='TotalTokens', example='3'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='xx'),
}

model RunSearchGenerationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunSearchGenerationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunSearchGeneration  RunSearchGenerationRequest
  * @return RunSearchGenerationResponse
 */
async function runSearchGeneration(request: RunSearchGenerationRequest): RunSearchGenerationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunSearchGeneration', 'POST', '/quanmiao/aimiaosou/runSearchGeneration', 'json', true, 'form', request);
}

function runSearchGenerationWithResponseIterable(request: RunSearchGenerationRequest): iterator[RunSearchGenerationResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunSearchGeneration', 'POST', '/quanmiao/aimiaosou/runSearchGeneration', 'json', true, 'form', request);
}

model RunSearchSimilarArticlesRequest {
  regionId?: string(name='RegionId', position='Host'),
  chatConfig?: {
    searchParam?: {
      searchSources?: [ 
        {
          code?: string(name='Code', example='SystemSearch'),
          datasetName?: string(name='DatasetName'),
          name?: string(name='Name'),
        }
      ](name='SearchSources'),
    }(name='SearchParam'),
  }(name='ChatConfig', shrink='json', position='Body'),
  docType?: string(name='DocType', example='html', position='Body'),
  title?: string(name='Title', position='Body'),
  url: string(name='Url', description='This parameter is required.', example='https://xxx/xxx', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='xxxx', position='Body'),
}

model RunSearchSimilarArticlesResponseBody = {
  header?: {
    errorCode?: string(name='ErrorCode', example='错误码'),
    errorMessage?: string(name='ErrorMessage', example='错误信息'),
    event?: string(name='Event', example='task-started'),
    sessionId?: string(name='SessionId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  }(name='Header'),
  payload?: {
    output?: {
      articles?: [ 
        {
          docId?: string(name='DocId'),
          docUuid?: string(name='DocUuid', example='a26c2c1'),
          pubTime?: string(name='PubTime', example='2025-01-16 18:07:22'),
          searchSourceName?: string(name='SearchSourceName'),
          source?: string(name='Source', example='xxx.com'),
          summary?: string(name='Summary', example='xxx'),
          title?: string(name='Title'),
          url?: string(name='Url', example='https://xxx'),
        }
      ](name='Articles'),
      text?: string(name='Text', example='文本生成结果'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='81'),
      outputTokens?: long(name='OutputTokens', example='9'),
      totalTokens?: long(name='TotalTokens', example='50'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
}

model RunSearchSimilarArticlesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunSearchSimilarArticlesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunSearchSimilarArticles  RunSearchSimilarArticlesRequest
  * @return RunSearchSimilarArticlesResponse
 */
async function runSearchSimilarArticles(request: RunSearchSimilarArticlesRequest): RunSearchSimilarArticlesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunSearchSimilarArticles', 'POST', '/quanmiao/aimiaosou/runSearchSimilarArticles', 'json', true, 'form', request);
}

function runSearchSimilarArticlesWithResponseIterable(request: RunSearchSimilarArticlesRequest): iterator[RunSearchSimilarArticlesResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunSearchSimilarArticles', 'POST', '/quanmiao/aimiaosou/runSearchSimilarArticles', 'json', true, 'form', request);
}

model RunStepByStepWritingRequest {
  regionId?: string(name='RegionId', position='Host'),
  originSessionId?: string(name='OriginSessionId', example='3f7045e099474ba28ceca1b4eb6d6e21', position='Body'),
  prompt: string(name='Prompt', description='This parameter is required.', example='提示词', position='Body'),
  referenceData?: {
    articles?: [ 
      {
        author?: string(name='Author', example='作者'),
        content?: string(name='Content', example='文章内容'),
        docId?: string(name='DocId', example='文档-自定义的唯一ID'),
        docUuid?: string(name='DocUuid', example='8a20e007a6174522af4d6a2657d5526f'),
        mediaUrl?: string(name='MediaUrl', example='http://www.example.com'),
        pubTime?: string(name='PubTime', example='2024-09-10 14:17:54'),
        source?: string(name='Source', example='央视网'),
        summary?: string(name='Summary', example='文章摘要'),
        tag?: string(name='Tag', example='文章标签'),
        title?: string(name='Title', example='文章标题'),
        url?: string(name='Url', example='https://www.example.com/aaa.docx'),
      }
    ](name='Articles'),
    miniDoc?: [ string ](name='MiniDoc'),
    outlines?: [ 
      {
        articles?: [ 
          {
            content?: string(name='Content', example='文章内容'),
            title?: string(name='Title', example='文章标题'),
            url?: string(name='Url', example='文章链接'),
          }
        ](name='Articles'),
        outline?: string(name='Outline', example='大纲'),
      }
    ](name='Outlines'),
    summarization?: [ string ](name='Summarization'),
  }(name='ReferenceData', shrink='json', position='Body'),
  sessionId?: string(name='SessionId', example='3f7045e099474ba28ceca1b4eb6d6e21', position='Body'),
  taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='xxxx', position='Body'),
  writingConfig?: {
    domain?: string(name='Domain', example='media'),
    keywords?: [ string ](name='Keywords'),
    promptTag?: {
      necessaryTips?: string(name='NecessaryTips', example='必要提示'),
      position?: string(name='Position', example='立场'),
      reverseWords?: string(name='ReverseWords', example='反向词'),
      theme?: string(name='Theme', example='主题'),
    }(name='PromptTag'),
    scene?: string(name='Scene', example='分步骤写作场景，传媒写作支持的写作场景:新闻写作(默认),新闻评论,通用文体，公文写作支持的写作场景:通知(默认),通告,通报,请示,决定,函,通用文体'),
    step?: string(name='Step', example='Writing'),
    summaryReturnType?: string(name='SummaryReturnType'),
    tags?: [ 
      {
        keyword?: string(name='Keyword', example='10'),
        tag?: string(name='Tag', example='gcNumberSizeTag'),
      }
    ](name='Tags'),
    useSearch?: boolean(name='UseSearch', example='true'),
  }(name='WritingConfig', shrink='json', position='Body'),
}

model RunStepByStepWritingResponseBody = {
  header?: {
    errorCode?: string(name='ErrorCode', example='错误码'),
    errorMessage?: string(name='ErrorMessage', example='错误信息'),
    event?: string(name='Event', example='task-started'),
    originSessionId?: string(name='OriginSessionId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    sessionId?: string(name='SessionId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    traceId?: string(name='TraceId', example='全链路ID'),
  }(name='Header'),
  payload?: {
    output?: {
      articles?: [ 
        {
          author?: string(name='Author', example='作者'),
          content?: string(name='Content', example='文章内容'),
          docId?: string(name='DocId', example='文档-自定义的唯一ID'),
          docUuid?: string(name='DocUuid', example='f1da53894e784759946d22e2cb2b522a'),
          mediaUrl?: string(name='MediaUrl', example='http://www.example.com'),
          pubTime?: string(name='PubTime', example='2024-09-10 14:17:53'),
          source?: string(name='Source', example='央视网'),
          summary?: string(name='Summary', example='文章摘要'),
          tag?: string(name='Tag', example='文章标签'),
          title?: string(name='Title', example='文章标题'),
          url?: string(name='Url', example='https://www.example.com/aaa.docx'),
        }
      ](name='Articles'),
      extraOutput?: {
        summarization?: [ string ](name='summarization'),
      }(name='ExtraOutput'),
      miniDoc?: [ string ](name='MiniDoc', example='文章精排之后的片段'),
      searchQuery?: string(name='SearchQuery', example='大模型改变世界'),
      text?: string(name='Text', example='文本生成结果'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='65'),
      outputTokens?: long(name='OutputTokens', example='80'),
      totalTokens?: long(name='TotalTokens', example='32'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
}

model RunStepByStepWritingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunStepByStepWritingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunStepByStepWriting  RunStepByStepWritingRequest
  * @return RunStepByStepWritingResponse
 */
async function runStepByStepWriting(request: RunStepByStepWritingRequest): RunStepByStepWritingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunStepByStepWriting', 'POST', '/quanmiao/miaobi/runStepByStepWriting', 'json', true, 'form', request);
}

function runStepByStepWritingWithResponseIterable(request: RunStepByStepWritingRequest): iterator[RunStepByStepWritingResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunStepByStepWriting', 'POST', '/quanmiao/miaobi/runStepByStepWriting', 'json', true, 'form', request);
}

model RunStyleFeatureAnalysisRequest {
  regionId?: string(name='RegionId', position='Host'),
  contents?: [ string ](name='Contents', shrink='json', position='Body'),
  materialIds?: [ long ](name='MaterialIds', shrink='json', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-2setzb9x4ewsd', position='Body'),
}

model RunStyleFeatureAnalysisResponseBody = {
  end?: boolean(name='End'),
  header?: {
    errorCode?: string(name='ErrorCode', example='403'),
    errorMessage?: string(name='ErrorMessage', example='Pop sign mismatch, please check.'),
    event?: string(name='Event', example='result-generated'),
    eventInfo?: string(name='EventInfo', example='模型生成事件'),
    sessionId?: string(name='SessionId', example='3cd10828-0e42-471c-8f1a-931cde20b035'),
    taskId?: string(name='TaskId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
    traceId?: string(name='TraceId', example='2150451a17191950923411783e2927'),
  }(name='Header'),
  payload?: {
    output?: {
      text?: string(name='Text', example='这是测试输出'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='100'),
      outputTokens?: long(name='OutputTokens', example='100'),
      totalTokens?: long(name='TotalTokens', example='200'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
}

model RunStyleFeatureAnalysisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunStyleFeatureAnalysisResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunStyleFeatureAnalysis  RunStyleFeatureAnalysisRequest
  * @return RunStyleFeatureAnalysisResponse
 */
async function runStyleFeatureAnalysis(request: RunStyleFeatureAnalysisRequest): RunStyleFeatureAnalysisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunStyleFeatureAnalysis', 'POST', '/quanmiao/aimiaobi/runStyleFeatureAnalysis', 'json', true, 'form', request);
}

function runStyleFeatureAnalysisWithResponseIterable(request: RunStyleFeatureAnalysisRequest): iterator[RunStyleFeatureAnalysisResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunStyleFeatureAnalysis', 'POST', '/quanmiao/aimiaobi/runStyleFeatureAnalysis', 'json', true, 'form', request);
}

model RunSummaryGenerateRequest {
  regionId?: string(name='RegionId', position='Host'),
  content: string(name='Content', description='This parameter is required.', example='创新政务社交媒体功能。鼓励各地区、各部门结合实际，开发政务社交媒体的特色功能，如在线咨询服务、政策解读、互动问答等，增强政务社交媒体的互动性和实用性，提升公众参与度。', position='Body'),
  prompt?: string(name='Prompt', example='请为上述内容生成一段摘要，字数在100~200字以内。', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-2setzb9x4ewsd', position='Body'),
}

model RunSummaryGenerateResponseBody = {
  end?: boolean(name='End'),
  header?: {
    errorCode?: string(name='ErrorCode', example='403'),
    errorMessage?: string(name='ErrorMessage', example='Pop sign mismatch, please check.'),
    event?: string(name='Event', example='result-generated'),
    eventInfo?: string(name='EventInfo', example='模型生成事件'),
    sessionId?: string(name='SessionId', example='3cd10828-0e42-471c-8f1a-931cde20b035'),
    taskId?: string(name='TaskId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
    traceId?: string(name='TraceId', example='2150451a17191950923411783e2927'),
  }(name='Header'),
  payload?: {
    output?: {
      text?: string(name='Text', example='这是测试输出'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='100'),
      outputTokens?: long(name='OutputTokens', example='100'),
      totalTokens?: long(name='TotalTokens', example='200'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
}

model RunSummaryGenerateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunSummaryGenerateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunSummaryGenerate  RunSummaryGenerateRequest
  * @return RunSummaryGenerateResponse
 */
async function runSummaryGenerate(request: RunSummaryGenerateRequest): RunSummaryGenerateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunSummaryGenerate', 'POST', '/quanmiao/aimiaobi/runSummaryGenerate', 'json', true, 'form', request);
}

function runSummaryGenerateWithResponseIterable(request: RunSummaryGenerateRequest): iterator[RunSummaryGenerateResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunSummaryGenerate', 'POST', '/quanmiao/aimiaobi/runSummaryGenerate', 'json', true, 'form', request);
}

model RunTextPolishingRequest {
  regionId?: string(name='RegionId', position='Host'),
  content: string(name='Content', description='This parameter is required.', example='文本内容', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='xxxx', position='Body'),
}

model RunTextPolishingResponseBody = {
  header?: {
    errorCode?: string(name='ErrorCode', example='错误码'),
    errorMessage?: string(name='ErrorMessage', example='错误信息'),
    event?: string(name='Event', example='task-started'),
    originSessionId?: string(name='OriginSessionId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    sessionId?: string(name='SessionId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    traceId?: string(name='TraceId', example='全链路ID'),
  }(name='Header'),
  payload?: {
    output?: {
      text?: string(name='Text', example='文本生成结果'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='1'),
      outputTokens?: long(name='OutputTokens', example='1'),
      totalTokens?: long(name='TotalTokens', example='2'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
}

model RunTextPolishingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunTextPolishingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunTextPolishing  RunTextPolishingRequest
  * @return RunTextPolishingResponse
 */
async function runTextPolishing(request: RunTextPolishingRequest): RunTextPolishingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunTextPolishing', 'POST', '/quanmiao/aimiaobi/runTextPolishing', 'json', true, 'form', request);
}

function runTextPolishingWithResponseIterable(request: RunTextPolishingRequest): iterator[RunTextPolishingResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunTextPolishing', 'POST', '/quanmiao/aimiaobi/runTextPolishing', 'json', true, 'form', request);
}

model RunTitleGenerationRequest {
  regionId?: string(name='RegionId', position='Host'),
  deduplicatedTitles?: [ string ](name='DeduplicatedTitles', shrink='json', position='Body'),
  referenceData: {
    contents: [ string ](name='Contents', description='This parameter is required.'),
  }(name='ReferenceData', description='This parameter is required.', shrink='json', position='Body'),
  taskId?: string(name='TaskId', example='xxxx', position='Body'),
  titleCount?: string(name='TitleCount', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-xxx', position='Body'),
}

model RunTitleGenerationResponseBody = {
  code?: string(name='Code'),
  header?: {
    errorCode?: string(name='ErrorCode', example='AccessForbid'),
    errorMessage?: string(name='ErrorMessage', example='xxx'),
    event?: string(name='Event', example='task-failed'),
    sessionId?: string(name='SessionId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    statusCode?: int32(name='StatusCode'),
    taskId?: string(name='TaskId', example='50a1cc8e-717e-4a2b-a76b-dc9734a8564b'),
    traceId?: string(name='TraceId', example='0a3d448f17000139741898287e0eb3'),
  }(name='Header'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  payload?: {
    output?: {
      text?: string(name='Text', example='xxx'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='1'),
      outputTokens?: long(name='OutputTokens', example='1'),
      totalTokens?: long(name='TotalTokens', example='2'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='94512A33-8EC1-5452-A793-5C91F18ED2F0'),
  success?: boolean(name='Success'),
}

model RunTitleGenerationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunTitleGenerationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunTitleGeneration  RunTitleGenerationRequest
  * @return RunTitleGenerationResponse
 */
async function runTitleGeneration(request: RunTitleGenerationRequest): RunTitleGenerationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunTitleGeneration', 'POST', '/quanmiao/aimiaobi/runTitleGeneration', 'json', true, 'form', request);
}

function runTitleGenerationWithResponseIterable(request: RunTitleGenerationRequest): iterator[RunTitleGenerationResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunTitleGeneration', 'POST', '/quanmiao/aimiaobi/runTitleGeneration', 'json', true, 'form', request);
}

model RunTranslateGenerationRequest {
  regionId?: string(name='RegionId', position='Host'),
  prompt: string(name='Prompt', description='This parameter is required.', example='toEnglish', position='Body'),
  referenceData: {
    contents: [ string ](name='Contents', description='This parameter is required.'),
  }(name='ReferenceData', description='This parameter is required.', shrink='json', position='Body'),
  taskId?: string(name='TaskId', example='xxx', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-xxx', position='Body'),
}

model RunTranslateGenerationResponseBody = {
  header?: {
    errorCode?: string(name='ErrorCode', example='AccessForbid'),
    errorMessage?: string(name='ErrorMessage', example='xx'),
    event?: string(name='Event', example='task-failed'),
    sessionId?: string(name='SessionId', example='91C2B2B8-7D12-4A8D-A724-1E576D30C096'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    traceId?: string(name='TraceId', example='0abb781d17146157564845243e20b5'),
  }(name='Header'),
  payload?: {
    output?: {
      text?: string(name='Text', example='xx'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='1'),
      outputTokens?: long(name='OutputTokens', example='1'),
      totalTokens?: long(name='TotalTokens', example='2'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='DA021073-17CE-5CCF-9FEB-93226C766887'),
}

model RunTranslateGenerationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunTranslateGenerationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunTranslateGeneration  RunTranslateGenerationRequest
  * @return RunTranslateGenerationResponse
 */
async function runTranslateGeneration(request: RunTranslateGenerationRequest): RunTranslateGenerationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunTranslateGeneration', 'POST', '/quanmiao/aimiaobi/runTranslateGeneration', 'json', true, 'form', request);
}

function runTranslateGenerationWithResponseIterable(request: RunTranslateGenerationRequest): iterator[RunTranslateGenerationResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunTranslateGeneration', 'POST', '/quanmiao/aimiaobi/runTranslateGeneration', 'json', true, 'form', request);
}

model RunWriteToneGenerationRequest {
  regionId?: string(name='RegionId', position='Host'),
  prompt: string(name='Prompt', description='This parameter is required.', position='Body'),
  referenceData: {
    contents: [ string ](name='Contents', description='This parameter is required.'),
  }(name='ReferenceData', description='This parameter is required.', shrink='json', position='Body'),
  taskId?: string(name='TaskId', example='7AA2AE16-D873-5C5F-9708-15396C382EB1', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-xxx', position='Body'),
}

model RunWriteToneGenerationResponseBody = {
  header?: {
    errorCode?: string(name='ErrorCode', example='AccessForbid'),
    errorMessage?: string(name='ErrorMessage', example='xxx'),
    event?: string(name='Event', example='task-failed'),
    sessionId?: string(name='SessionId', example='F1953EE6-157C-40DC-BBF1-87C98AC27C51'),
    taskId?: string(name='TaskId', example='F1953EE6-157C-40DC-BBF1-87C98AC27C51'),
    traceId?: string(name='TraceId', example='F1953EE6-157C-40DC-BBF1-87C98AC27C51'),
  }(name='Header'),
  payload?: {
    output?: {
      text?: string(name='Text', example='xxx'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='1'),
      outputTokens?: long(name='OutputTokens', example='1'),
      totalTokens?: long(name='TotalTokens', example='2'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='FB698445-61DA-5361-BF73-1C5F1157E888'),
}

model RunWriteToneGenerationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunWriteToneGenerationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunWriteToneGeneration  RunWriteToneGenerationRequest
  * @return RunWriteToneGenerationResponse
 */
async function runWriteToneGeneration(request: RunWriteToneGenerationRequest): RunWriteToneGenerationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunWriteToneGeneration', 'POST', '/quanmiao/aimiaobi/runWriteToneGeneration', 'json', true, 'form', request);
}

function runWriteToneGenerationWithResponseIterable(request: RunWriteToneGenerationRequest): iterator[RunWriteToneGenerationResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunWriteToneGeneration', 'POST', '/quanmiao/aimiaobi/runWriteToneGeneration', 'json', true, 'form', request);
}

model RunWritingRequest {
  regionId?: string(name='RegionId', position='Host'),
  originSessionId?: string(name='OriginSessionId', example='3f7045e099474ba28ceca1b4eb6d6e21', position='Body'),
  prompt: string(name='Prompt', description='This parameter is required.', example='提示词', position='Body'),
  referenceData?: {
    articles?: [ 
      {
        author?: string(name='Author', example='作者'),
        content?: string(name='Content', example='文章内容'),
        docId?: string(name='DocId', example='文档-自定义的唯一ID'),
        docUuid?: string(name='DocUuid', example='2124ca4d48a542d788aa86151e1a8c8b'),
        pubTime?: string(name='PubTime', example='2024-08-28 11:38:28'),
        source?: string(name='Source', example='央视网'),
        summary?: string(name='Summary', example='文章摘要'),
        tag?: string(name='Tag', example='文章标签'),
        title?: string(name='Title', example='文章标题'),
        url?: string(name='Url', example='https://www.example.com/aaa.docx'),
      }
    ](name='Articles'),
  }(name='ReferenceData', shrink='json', position='Body'),
  sessionId?: string(name='SessionId', example='3f7045e099474ba28ceca1b4eb6d6e21', position='Body'),
  taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='xxxx', position='Body'),
  writingConfig?: {
    domain?: string(name='Domain', example='写作领域，media:传媒,government:政务,market:营销'),
    promptTag?: {
      necessaryTips?: string(name='NecessaryTips', example='必要提示'),
      position?: string(name='Position', example='立场'),
      reverseWords?: string(name='ReverseWords', example='反向词'),
      theme?: string(name='Theme', example='主题'),
    }(name='PromptTag'),
    tags?: [ 
      {
        keyword?: string(name='Keyword', example='10'),
        tag?: string(name='Tag', example='gcNumberSizeTag'),
      }
    ](name='Tags'),
    useSearch?: boolean(name='UseSearch', example='true'),
  }(name='WritingConfig', shrink='json', position='Body'),
}

model RunWritingResponseBody = {
  end?: boolean(name='End'),
  header?: {
    errorCode?: string(name='ErrorCode', example='错误码'),
    errorMessage?: string(name='ErrorMessage', example='错误信息'),
    event?: string(name='Event', example='task-started'),
    originSessionId?: string(name='OriginSessionId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    sessionId?: string(name='SessionId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    statusCode?: int32(name='StatusCode', example='400'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    traceId?: string(name='TraceId', example='全链路ID'),
  }(name='Header'),
  payload?: {
    output?: {
      articles?: [ 
        {
          author?: string(name='Author', example='作者'),
          content?: string(name='Content', example='文章内容'),
          docId?: string(name='DocId', example='文档-自定义的唯一ID'),
          docUuid?: string(name='DocUuid', example='98229f6001cf4deeb1668191d4eccc75'),
          pubTime?: string(name='PubTime', example='2024-08-28 11:38:28'),
          source?: string(name='Source', example='央视网'),
          summary?: string(name='Summary', example='文章摘要'),
          tag?: string(name='Tag', example='文章标签'),
          title?: string(name='Title', example='文章标题'),
          url?: string(name='Url', example='https://www.example.com/aaa.docx'),
        }
      ](name='Articles'),
      miniDoc?: [ string ](name='MiniDoc', example='文章精排之后的片段'),
      searchQuery?: string(name='SearchQuery', example='大模型改变世界'),
      text?: string(name='Text', example='文本生成结果'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='1'),
      outputTokens?: long(name='OutputTokens', example='1'),
      tokenMap?: map[string]long(name='TokenMap'),
      totalTokens?: long(name='TotalTokens', example='2'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
}

model RunWritingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunWritingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunWriting  RunWritingRequest
  * @return RunWritingResponse
 */
async function runWriting(request: RunWritingRequest): RunWritingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunWriting', 'POST', '/quanmiao/aimiaobi/runWriting', 'json', true, 'form', request);
}

function runWritingWithResponseIterable(request: RunWritingRequest): iterator[RunWritingResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'RunWriting', 'POST', '/quanmiao/aimiaobi/runWriting', 'json', true, 'form', request);
}

model SaveCustomTextRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  commodityCode?: string(name='CommodityCode', example='商品code', position='Body'),
  content?: string(name='Content', example='内容', position='Body'),
  title?: string(name='Title', example='标题', position='Body'),
}

model SaveCustomTextResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: long(name='Data', example='5'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model SaveCustomTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveCustomTextResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SaveCustomText  SaveCustomTextRequest
  * @return SaveCustomTextResponse
 */
async function saveCustomText(request: SaveCustomTextRequest): SaveCustomTextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveCustomText', 'POST', '/', 'json', true, 'form', request);
}

model SaveDataSourceOrderConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='c160c841c8e54295bf2f441432785944_p_efm', position='Query'),
  productCode: string(name='ProductCode', description='This parameter is required.', example='miaobi', position='Body'),
  userConfigDataSourceList: [ 
    {
      code: string(name='Code', description='This parameter is required.', example='QuarkCommonNews'),
      name?: string(name='Name'),
      number: int32(name='Number', description='This parameter is required.', example='20'),
      type: string(name='Type', description='This parameter is required.', example='SystemSearch'),
    }
  ](name='UserConfigDataSourceList', description='This parameter is required.', shrink='json', position='Body'),
}

model SaveDataSourceOrderConfigResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model SaveDataSourceOrderConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveDataSourceOrderConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SaveDataSourceOrderConfig  SaveDataSourceOrderConfigRequest
  * @return SaveDataSourceOrderConfigResponse
 */
async function saveDataSourceOrderConfig(request: SaveDataSourceOrderConfigRequest): SaveDataSourceOrderConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveDataSourceOrderConfig', 'POST', '/', 'json', true, 'form', request);
}

model SaveMaterialDocumentRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='c160c841c8e54295bf2f441432785944_p_efm', position='Query'),
  author?: string(name='Author', position='Body'),
  bothSavePrivateAndShare?: boolean(name='BothSavePrivateAndShare', example='false', position='Body'),
  docKeywords?: [ string ](name='DocKeywords', shrink='json', position='Body'),
  docType: string(name='DocType', description='This parameter is required.', example='excel', position='Body'),
  externalUrl?: string(name='ExternalUrl', example='http://xxxxx/xxx', position='Body'),
  htmlContent?: string(name='HtmlContent', position='Body'),
  pubTime?: string(name='PubTime', example='2023-04-11 06:14:07', position='Body'),
  shareAttr?: int32(name='ShareAttr', example='1', position='Body'),
  srcFrom?: string(name='SrcFrom', example='IntellijSearch', position='Body'),
  summary?: string(name='Summary', position='Body'),
  textContent?: string(name='TextContent', position='Body'),
  title?: string(name='Title', position='Body'),
  url?: string(name='Url', example='http://xxxxx/xxx', position='Body'),
}

model SaveMaterialDocumentResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: long(name='Data', example='12'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='false'),
}

model SaveMaterialDocumentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveMaterialDocumentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SaveMaterialDocument  SaveMaterialDocumentRequest
  * @return SaveMaterialDocumentResponse
 */
async function saveMaterialDocument(request: SaveMaterialDocumentRequest): SaveMaterialDocumentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveMaterialDocument', 'POST', '/', 'json', true, 'form', request);
}

model SaveStyleLearningResultRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  agentKey?: string(name='AgentKey', example='xxxxx_p_efm', position='Body'),
  aigcResult?: string(name='AigcResult', position='Body'),
  customTextIdList?: [ long ](name='CustomTextIdList', shrink='json', position='Body'),
  materialIdList?: [ long ](name='MaterialIdList', shrink='json', position='Body'),
  rewriteResult?: string(name='RewriteResult', position='Body'),
  styleName?: string(name='StyleName', position='Body'),
  taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21', position='Body'),
}

model SaveStyleLearningResultResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model SaveStyleLearningResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveStyleLearningResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SaveStyleLearningResult  SaveStyleLearningResultRequest
  * @return SaveStyleLearningResultResponse
 */
async function saveStyleLearningResult(request: SaveStyleLearningResultRequest): SaveStyleLearningResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveStyleLearningResult', 'POST', '/', 'json', true, 'form', request);
}

model SearchDatasetDocumentsRequest {
  regionId?: string(name='RegionId', position='Host'),
  datasetId?: long(name='DatasetId', example='1', position='Body'),
  datasetName?: string(name='DatasetName', example='数据集名称', position='Body'),
  extend1?: string(name='Extend1', example='业务参数', position='Body'),
  includeContent?: boolean(name='IncludeContent', example='false', position='Body'),
  pageSize?: string(name='PageSize', example='10', position='Body'),
  query: string(name='Query', description='This parameter is required.', example='搜索内容', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='xx', position='Body'),
}

model SearchDatasetDocumentsResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    documents?: [ 
      {
        content?: string(name='Content', example='xx'),
        docId?: string(name='DocId', example='用户指定的文档唯一ID'),
        docUuid?: string(name='DocUuid', example='内部文档唯一ID'),
        pubTime?: string(name='PubTime', example='2024-12-09 17:09:40'),
        sourceFrom?: string(name='SourceFrom', example='来源'),
        summary?: string(name='Summary', example='文章摘要'),
        title?: string(name='Title', example='xx'),
        url?: string(name='Url', example='xx'),
      }
    ](name='Documents'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model SearchDatasetDocumentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchDatasetDocumentsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SearchDatasetDocuments  SearchDatasetDocumentsRequest
  * @return SearchDatasetDocumentsResponse
 */
async function searchDatasetDocuments(request: SearchDatasetDocumentsRequest): SearchDatasetDocumentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchDatasetDocuments', 'POST', '/', 'json', true, 'form', request);
}

model SearchNewsRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  filterNotNull?: boolean(name='FilterNotNull', example='false', position='Body'),
  includeContent?: boolean(name='IncludeContent', example='false', position='Body'),
  page?: int32(name='Page', example='81', position='Body'),
  pageSize?: int32(name='PageSize', example='35', position='Body'),
  query?: string(name='Query', example='检索Query', position='Body'),
  searchSources?: [ string ](name='SearchSources', shrink='json', position='Body'),
}

model SearchNewsResponseBody = {
  code?: string(name='Code', example='NoData'),
  current?: int32(name='Current', example='1'),
  data?: [ 
    {
      author?: string(name='Author', example='作者'),
      content?: string(name='Content', example='文章内容'),
      docUuid?: string(name='DocUuid', example='9a598b44c6444da5907b8ea68a5f82c4'),
      imageUrls?: [ string ](name='ImageUrls'),
      pubTime?: string(name='PubTime', example='2024-01-18 06:46:22'),
      searchSource?: string(name='SearchSource', example='QuarkCommonNews'),
      searchSourceName?: string(name='SearchSourceName', example='夸克检索'),
      source?: string(name='Source', example='央视网'),
      summary?: string(name='Summary', example='文章摘要'),
      tag?: string(name='Tag', example='文章标签'),
      title?: string(name='Title', example='文章标题'),
      updateTime?: string(name='UpdateTime', example='2024-01-18 06:46:22'),
      url?: string(name='Url', example='文章URL'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  size?: int32(name='Size', example='10'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='100'),
}

model SearchNewsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchNewsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SearchNews  SearchNewsRequest
  * @return SearchNewsResponse
 */
async function searchNews(request: SearchNewsRequest): SearchNewsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchNews', 'POST', '/', 'json', true, 'form', request);
}

model SubmitAsyncTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='2daaa2e0c209xb26acb97009ea77bd4b_p_efm', position='Query'),
  taskCode: string(name='TaskCode', description='This parameter is required.', example='MaterialDocumentUpload', position='Body'),
  taskExecuteTime?: string(name='TaskExecuteTime', example='2023-10-14 14:30:00', position='Body'),
  taskName?: string(name='TaskName', example='任务名称', position='Body'),
  taskParam?: string(name='TaskParam', example='任务提交参数', position='Body'),
}

model SubmitAsyncTaskResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: {
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    taskIntermediateResult?: any(name='TaskIntermediateResult', example='{}'),
    taskName?: string(name='TaskName', example='任务名称'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model SubmitAsyncTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitAsyncTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitAsyncTask  SubmitAsyncTaskRequest
  * @return SubmitAsyncTaskResponse
 */
async function submitAsyncTask(request: SubmitAsyncTaskRequest): SubmitAsyncTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitAsyncTask', 'POST', '/', 'json', true, 'form', request);
}

model SubmitCustomHotTopicBroadcastJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  hotTopicBroadcastConfig: {
    stepForCustomSummaryStyleConfig: {
      summaryImageCount?: int32(name='SummaryImageCount', example='3'),
      summaryModel?: string(name='SummaryModel', example='qwen-max'),
      summaryPrompt?: string(name='SummaryPrompt', example='xxxx'),
    }(name='StepForCustomSummaryStyleConfig', description='This parameter is required.'),
    stepForNewsBroadcastContentConfig: {
      categories?: [ string ](name='Categories', example='["科技","经济","时政","娱乐"]'),
      customHotValueWeights?: [ 
        {
          dimension?: string(name='Dimension', example='views'),
          dimensionName?: string(name='DimensionName', example='维度名称'),
          weight?: int32(name='Weight', example='1'),
        }
      ](name='CustomHotValueWeights'),
      topicCount?: int32(name='TopicCount', example='10'),
    }(name='StepForNewsBroadcastContentConfig', description='This parameter is required.'),
  }(name='HotTopicBroadcastConfig', description='This parameter is required.', shrink='json', position='Body'),
  hotTopicVersion?: string(name='HotTopicVersion', example='热点版本', position='Body'),
  topics?: [ string ](name='Topics', shrink='json', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='xxxx', position='Body'),
}

model SubmitCustomHotTopicBroadcastJobResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model SubmitCustomHotTopicBroadcastJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitCustomHotTopicBroadcastJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitCustomHotTopicBroadcastJob  SubmitCustomHotTopicBroadcastJobRequest
  * @return SubmitCustomHotTopicBroadcastJobResponse
 */
async function submitCustomHotTopicBroadcastJob(request: SubmitCustomHotTopicBroadcastJobRequest): SubmitCustomHotTopicBroadcastJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitCustomHotTopicBroadcastJob', 'POST', '/', 'json', true, 'form', request);
}

model SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  documents?: [ 
    {
      author?: string(name='Author', example='作者', maxLength=100),
      content: string(name='Content', description='This parameter is required.', example='文章内容', minLength=30, maxLength=3000),
      pubTime?: string(name='PubTime', example='2024-01-22 10:29:00', maxLength=19),
      source?: string(name='Source', example='新浪', maxLength=40),
      summary?: string(name='Summary', example='文章摘要', maxLength=200),
      title?: string(name='Title', example='文章标题', maxLength=100),
      url?: string(name='Url', example='https://www.example.com/aaa.docx', maxLength=1024),
    }
  ](name='Documents', shrink='json', position='Body'),
  prompt: string(name='Prompt', description='This parameter is required.', example='自定义观点的输入Prompt', maxLength=2000, position='Body'),
  topic?: string(name='Topic', example='待分析的主题名（documents与topic二者至少传一个）', maxLength=1000, position='Body'),
}

model SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitCustomTopicSelectionPerspectiveAnalysisTask  SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequest
  * @return SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponse
 */
async function submitCustomTopicSelectionPerspectiveAnalysisTask(request: SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequest): SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitCustomTopicSelectionPerspectiveAnalysisTask', 'POST', '/', 'json', true, 'form', request);
}

model SubmitDocClusterTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  documents: [ 
    {
      content: string(name='Content', description='This parameter is required.', example='文档内容', minLength=1, maxLength=3000),
      docId?: string(name='DocId', example='文档ID。用于在返回聚类文章时标识文章。如果文章列表中都不传则使用数组索引作为ID。如果部分传则会报错'),
      title?: string(name='Title', example='文档标题', maxLength=100),
    }
  ](name='Documents', description='This parameter is required.', shrink='json', position='Body'),
  summaryLength?: int32(name='SummaryLength', example='49', maximum=500, position='Body'),
  titleLength?: int32(name='TitleLength', example='69', maximum=200, position='Body'),
  topicCount?: int32(name='TopicCount', example='15', maximum=100, position='Body'),
}

model SubmitDocClusterTaskResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model SubmitDocClusterTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitDocClusterTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitDocClusterTask  SubmitDocClusterTaskRequest
  * @return SubmitDocClusterTaskResponse
 */
async function submitDocClusterTask(request: SubmitDocClusterTaskRequest): SubmitDocClusterTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitDocClusterTask', 'POST', '/', 'json', true, 'form', request);
}

model SubmitEnterpriseVocAnalysisTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  apiKey?: string(name='ApiKey', position='Body'),
  contentTags: [ 
    {
      tagDefinePrompt?: string(name='TagDefinePrompt', example='一级标签-二级标签'),
      tagName?: string(name='TagName', example='一级标签-二级标签'),
      tagTaskType?: string(name='TagTaskType', example='singleTagValue'),
      tagValueDefinePrompt?: string(name='TagValueDefinePrompt'),
    }
  ](name='ContentTags', description='This parameter is required.', shrink='json', position='Body'),
  contents?: [ 
    {
      extraInfo?: string(name='ExtraInfo'),
      text?: string(name='Text'),
    }
  ](name='Contents', shrink='json', position='Body'),
  fileKey?: string(name='FileKey', example='oss://default/bucket-name/materialDocument/tenant_agent/fileName', position='Body'),
  filterTags?: [ 
    {
      tagDefinePrompt?: string(name='TagDefinePrompt', example='一级标签-二级标签'),
      tagName?: string(name='TagName', example='一级标签-二级标签'),
      tagType?: string(name='TagType', example='singleTagValue'),
      tagValueDefinePrompt?: string(name='TagValueDefinePrompt'),
    }
  ](name='FilterTags', shrink='json', position='Body'),
  materialType?: string(name='MaterialType', example='shortContent', position='Body'),
  modelId: string(name='ModelId', description='This parameter is required.', example='qwen-max', position='Body'),
  positiveSample?: string(name='PositiveSample', position='Body'),
  positiveSampleFileKey?: string(name='PositiveSampleFileKey', example='oss://default/bucket-name/path/xxx.xlsx', position='Body'),
  taskType?: string(name='TaskType', example='lightAppSass', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='xxxx', position='Body'),
}

model SubmitEnterpriseVocAnalysisTaskResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    taskId?: string(name='TaskId', example='xxxxx'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model SubmitEnterpriseVocAnalysisTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitEnterpriseVocAnalysisTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitEnterpriseVocAnalysisTask  SubmitEnterpriseVocAnalysisTaskRequest
  * @return SubmitEnterpriseVocAnalysisTaskResponse
 */
async function submitEnterpriseVocAnalysisTask(request: SubmitEnterpriseVocAnalysisTaskRequest): SubmitEnterpriseVocAnalysisTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitEnterpriseVocAnalysisTask', 'POST', '/', 'json', true, 'form', request);
}

model SubmitSmartClipTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  editingConfig?: {
    backgroundMusicConfig?: {
      style?: string(name='Style'),
      volume?: double(name='Volume', example='0.2'),
    }(name='BackgroundMusicConfig'),
    mediaConfig?: {
      volume?: double(name='Volume'),
    }(name='MediaConfig'),
    speechConfig?: {
      asrConfig?: {
        alignment?: string(name='Alignment'),
        font?: string(name='Font', example='SimSun'),
        fontColor?: string(name='FontColor', example='#ffffff'),
        fontSize?: string(name='FontSize', example='0'),
        spacing?: string(name='Spacing', example='0'),
        x?: float(name='X'),
        y?: float(name='Y'),
      }(name='AsrConfig'),
      speechRate?: double(name='SpeechRate', example='0'),
      style?: string(name='Style'),
      voice?: string(name='Voice'),
      volume?: double(name='Volume', example='0.5'),
    }(name='SpeechConfig'),
    titleConfig?: {
      alignment?: string(name='Alignment', example='TopLeft'),
      timelineIn?: float(name='TimelineIn', example='2'),
      timelineOut?: float(name='TimelineOut', example='3'),
      x?: float(name='X', example='100'),
      y?: float(name='Y', example='100'),
    }(name='TitleConfig'),
  }(name='EditingConfig', shrink='json', position='Body'),
  extendParam?: string(name='ExtendParam', position='Body'),
  inputConfig: {
    backgroundMusics?: [ 
      {
        id: string(name='Id', description='This parameter is required.', example='oss://default/bucket-name/filepath/video.mp3'),
        type: string(name='Type', description='This parameter is required.', example='fileKey'),
      }
    ](name='BackgroundMusics'),
    speechTexts?: [ string ](name='SpeechTexts'),
    stickers?: [ 
      {
        height: double(name='Height', description='This parameter is required.', example='0.5'),
        stickerId: {
          id: string(name='Id', description='This parameter is required.', example='oss://default/bucket-name/filepath/sticker.png'),
          type: string(name='Type', description='This parameter is required.', example='fileKey'),
        }(name='StickerId', description='This parameter is required.'),
        width: double(name='Width', description='This parameter is required.', example='0.5'),
        x: double(name='X', description='This parameter is required.', example='0.5'),
        y: double(name='Y', description='This parameter is required.', example='0.5'),
      }
    ](name='Stickers'),
    titles?: [ string ](name='Titles'),
    videoIds: [ 
      {
        id: string(name='Id', description='This parameter is required.', example='oss://default/bucket-name/filepath/video.mp4'),
        type: string(name='Type', description='This parameter is required.', example='fileKey'),
      }
    ](name='VideoIds', description='This parameter is required.'),
  }(name='InputConfig', description='This parameter is required.', shrink='json', position='Body'),
  outputConfig?: {
    count?: int32(name='Count', example='1'),
    fileName?: string(name='FileName', example='test_{index}.mp4'),
    height?: int32(name='Height', example='1080'),
    maxDuration?: int32(name='MaxDuration', example='120'),
    saveToGeneratedContent?: boolean(name='SaveToGeneratedContent', example='true'),
    width?: int32(name='Width', example='1920'),
  }(name='OutputConfig', shrink='json', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', position='Body'),
}

model SubmitSmartClipTaskResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model SubmitSmartClipTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitSmartClipTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitSmartClipTask  SubmitSmartClipTaskRequest
  * @return SubmitSmartClipTaskResponse
 */
async function submitSmartClipTask(request: SubmitSmartClipTaskRequest): SubmitSmartClipTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitSmartClipTask', 'POST', '/', 'json', true, 'form', request);
}

model SubmitTopicSelectionPerspectiveAnalysisTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  documents?: [ 
    {
      author?: string(name='Author', example='作者', maxLength=100),
      comments?: [ 
        {
          text?: string(name='Text'),
          username?: string(name='Username'),
        }
      ](name='Comments'),
      content: string(name='Content', description='This parameter is required.', example='文章内容', minLength=30, maxLength=3000),
      pubTime?: string(name='PubTime', example='2024-01-22 10:29:00', maxLength=19),
      source?: string(name='Source', example='新浪', maxLength=40),
      summary?: string(name='Summary', example='文章摘要', maxLength=200),
      title?: string(name='Title', example='文章标题', maxLength=100),
      url?: string(name='Url', example='https://www.example.com/aaa.docx', maxLength=1024),
    }
  ](name='Documents', shrink='json', position='Body'),
  perspectiveTypes?: [ string ](name='PerspectiveTypes', example='TimedViewPoints', shrink='json', position='Body'),
  topic?: string(name='Topic', example='待分析的主题名（documents与topic二者至少传一个）', maxLength=1000, position='Body'),
}

model SubmitTopicSelectionPerspectiveAnalysisTaskResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    taskName?: string(name='TaskName', example='任务名称'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model SubmitTopicSelectionPerspectiveAnalysisTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitTopicSelectionPerspectiveAnalysisTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitTopicSelectionPerspectiveAnalysisTask  SubmitTopicSelectionPerspectiveAnalysisTaskRequest
  * @return SubmitTopicSelectionPerspectiveAnalysisTaskResponse
 */
async function submitTopicSelectionPerspectiveAnalysisTask(request: SubmitTopicSelectionPerspectiveAnalysisTaskRequest): SubmitTopicSelectionPerspectiveAnalysisTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitTopicSelectionPerspectiveAnalysisTask', 'POST', '/', 'json', true, 'form', request);
}

model UpdateCustomTextRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  commodityCode?: string(name='CommodityCode', example='商品code', position='Body'),
  content?: string(name='Content', example='内容', position='Body'),
  id: long(name='Id', description='This parameter is required.', example='96', position='Body'),
  title?: string(name='Title', example='标题', position='Body'),
}

model UpdateCustomTextResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: long(name='Data', example='48'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model UpdateCustomTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCustomTextResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateCustomText  UpdateCustomTextRequest
  * @return UpdateCustomTextResponse
 */
async function updateCustomText(request: UpdateCustomTextRequest): UpdateCustomTextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCustomText', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDatasetRequest {
  regionId?: string(name='RegionId', position='Host'),
  datasetConfig?: {
    searchSourceConfigs?: [ 
      {
        demoQuery?: string(name='DemoQuery', example='可以搜索到的关键词，用来验证是否可用'),
        searchSourceRequestConfig?: {
          body?: string(name='Body', example='{}'),
          connectTimeout?: int32(name='ConnectTimeout', example='3000'),
          headers?: [ 
            {
              name?: string(name='Name', example='参数名称'),
              value?: string(name='Value', example='参数值'),
              valueFormat?: string(name='ValueFormat', example='valueType = time 时有效'),
              valueType?: string(name='ValueType', example='参数值数据类型: 默认string'),
            }
          ](name='Headers'),
          method?: string(name='Method', example='请求方式'),
          params?: [ 
            {
              name?: string(name='Name', example='参数名称'),
              value?: string(name='Value', example='参数值'),
              valueFormat?: string(name='ValueFormat', example='valueType = time 时有效'),
              valueType?: string(name='ValueType', example='参数值数据类型: 默认string'),
            }
          ](name='Params'),
          pathParamsEnable?: boolean(name='PathParamsEnable', example='true'),
          socketTimeout?: int32(name='SocketTimeout', example='3000'),
          url?: string(name='Url', example='api地址'),
        }(name='SearchSourceRequestConfig'),
        searchSourceResponseConfig?: {
          jqNodes?: [ 
            {
              jqNodes?: [ 
                {
                  jqNodes?: [ 
                    {
                      key?: string(name='Key', example='title'),
                      path?: string(name='Path', example='.title'),
                      type?: string(name='Type', example='string'),
                    }
                  ](name='JqNodes'),
                  key?: string(name='Key', example='title'),
                  path?: string(name='Path', example='.title'),
                  type?: string(name='Type', example='string'),
                }
              ](name='JqNodes'),
              key?: string(name='Key', example='节点key'),
              path?: string(name='Path', example='节点路径'),
              type?: string(name='Type', example='节点数据类型：string number list object base'),
            }
          ](name='JqNodes'),
        }(name='SearchSourceResponseConfig'),
        size?: int32(name='Size', example='10'),
      }
    ](name='SearchSourceConfigs'),
  }(name='DatasetConfig', shrink='json', position='Body'),
  datasetDescription?: string(name='DatasetDescription', example='企业自定义数据集', maxLength=30, position='Body'),
  datasetId?: long(name='DatasetId', example='1', position='Body'),
  searchDatasetEnable?: int32(name='SearchDatasetEnable', example='3', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='xxxx', position='Body'),
}

model UpdateDatasetResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    createTime?: string(name='CreateTime', example='2024-11-12 21:46:24'),
    createUser?: string(name='CreateUser', example='xxx'),
    datasetDescription?: string(name='DatasetDescription', example='xxx'),
    datasetId?: long(name='DatasetId', example='1'),
    datasetName?: string(name='DatasetName', example='xxx'),
    datasetType?: string(name='DatasetType', example='CustomSemanticSearch'),
    newsArticleResults?: [ 
      {
        code?: string(name='Code', example='NoData'),
        current?: int32(name='Current', example='1'),
        data?: [ 
          {
            content?: string(name='Content', example='文章内容'),
            pubTime?: string(name='PubTime', example='2024-11-12 15:12:14'),
            source?: string(name='Source', example='央视网'),
            summary?: string(name='Summary', example='文章摘要'),
            title?: string(name='Title', example='文章标题'),
            url?: string(name='Url', example='https://www.example.com/aaa.docx'),
          }
        ](name='Data'),
        message?: string(name='Message', example='success'),
        size?: int32(name='Size', example='10'),
        total?: int32(name='Total', example='100'),
      }
    ](name='NewsArticleResults'),
    searchDatasetEnable?: int32(name='SearchDatasetEnable', example='1'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDatasetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDataset  UpdateDatasetRequest
  * @return UpdateDatasetResponse
 */
async function updateDataset(request: UpdateDatasetRequest): UpdateDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDataset', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDatasetDocumentRequest {
  regionId?: string(name='RegionId', position='Host'),
  datasetId?: long(name='DatasetId', example='1', position='Body'),
  datasetName?: string(name='DatasetName', example='数据集名称', position='Body'),
  document: {
    docId?: string(name='DocId', example='用户指定的文档唯一ID'),
    docUuid?: string(name='DocUuid', example='内部文档唯一ID'),
    title?: string(name='Title', example='xx'),
  }(name='Document', description='This parameter is required.', shrink='json', position='Body'),
  workspaceId?: string(name='WorkspaceId', example='xxxx', position='Body'),
}

model UpdateDatasetDocumentResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    docId?: string(name='DocId', example='用户指定的文档唯一ID'),
    docUuid?: string(name='DocUuid', example='内部文档唯一ID'),
    title?: string(name='Title'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDatasetDocumentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDatasetDocumentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDatasetDocument  UpdateDatasetDocumentRequest
  * @return UpdateDatasetDocumentResponse
 */
async function updateDatasetDocument(request: UpdateDatasetDocumentRequest): UpdateDatasetDocumentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDatasetDocument', 'POST', '/', 'json', true, 'form', request);
}

model UpdateGeneratedContentRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm', position='Query'),
  content?: string(name='Content', example='正文', position='Body'),
  contentText?: string(name='ContentText', example='正文', position='Body'),
  id: long(name='Id', description='This parameter is required.', example='36', position='Body'),
  keywords?: [ string ](name='Keywords', shrink='json', position='Body'),
  prompt?: string(name='Prompt', example='创作xx文章', position='Body'),
  title?: string(name='Title', example='评论类文章', minLength=2, maxLength=200, position='Body'),
}

model UpdateGeneratedContentResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: boolean(name='Data', example='false'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGeneratedContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGeneratedContentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateGeneratedContent  UpdateGeneratedContentRequest
  * @return UpdateGeneratedContentResponse
 */
async function updateGeneratedContent(request: UpdateGeneratedContentRequest): UpdateGeneratedContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGeneratedContent', 'POST', '/', 'json', true, 'form', request);
}

model UpdateMaterialDocumentRequest {
  agentKey: string(name='AgentKey', description='This parameter is required.', example='67c520d1fa43455ea44fb69fa402d54d_p_beebot_public', position='Query'),
  author?: string(name='Author', position='Body'),
  docKeywords?: [ string ](name='DocKeywords', shrink='json', position='Body'),
  docType: string(name='DocType', description='This parameter is required.', example='image', position='Body'),
  externalUrl?: string(name='ExternalUrl', example='http://xxxxx/xxx', position='Body'),
  htmlContent?: string(name='HtmlContent', position='Body'),
  id: long(name='Id', description='This parameter is required.', example='44', position='Body'),
  pubTime?: string(name='PubTime', example='2023-04-11 06:14:07', position='Body'),
  regionId?: string(name='RegionId', position='Query'),
  shareAttr?: int32(name='ShareAttr', example='1', position='Body'),
  srcFrom?: string(name='SrcFrom', example='UserUpload', position='Body'),
  summary?: string(name='Summary', position='Body'),
  textContent?: string(name='TextContent', position='Body'),
  title?: string(name='Title', position='Body'),
  url?: string(name='Url', example='http://xxxxx/xxx', position='Body'),
}

model UpdateMaterialDocumentResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: long(name='Data', example='82'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='false'),
}

model UpdateMaterialDocumentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMaterialDocumentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateMaterialDocument  UpdateMaterialDocumentRequest
  * @return UpdateMaterialDocumentResponse
 */
async function updateMaterialDocument(request: UpdateMaterialDocumentRequest): UpdateMaterialDocumentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMaterialDocument', 'POST', '/', 'json', true, 'form', request);
}

model UploadBookRequest {
  regionId?: string(name='RegionId', position='Host'),
  categoryId?: string(name='CategoryId', position='Body'),
  docs: [ 
    {
      docName?: string(name='DocName'),
      fileUrl?: string(name='FileUrl', example='http://xxx/ccc.pdf'),
    }
  ](name='Docs', description='This parameter is required.', shrink='json', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-ipe7d81yq4sl5jmk', position='Body'),
}

model UploadBookResponseBody = {
  code?: string(name='Code', example='successful'),
  data?: {
    docIds?: [ string ](name='DocIds'),
    existedIds?: [ string ](name='ExistedIds'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model UploadBookResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadBookResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UploadBook  UploadBookRequest
  * @return UploadBookResponse
 */
async function uploadBook(request: UploadBookRequest): UploadBookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadBook', 'POST', '/', 'json', true, 'form', request);
}

model UploadDocRequest {
  regionId?: string(name='RegionId', position='Host'),
  categoryId?: string(name='CategoryId', example='default', position='Body'),
  docs: [ 
    {
      docName: string(name='DocName', description='This parameter is required.'),
      fileUrl: string(name='FileUrl', description='This parameter is required.', example='http://xxx/ccc.pdf'),
    }
  ](name='Docs', description='This parameter is required.', shrink='json', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='llm-yigtrrjl377rcbab', position='Body'),
}

model UploadDocResponseBody = {
  code?: string(name='Code', example='successful'),
  data?: {
    docIds?: [ string ](name='DocIds'),
    existedIds?: [ string ](name='ExistedIds'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model UploadDocResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadDocResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UploadDoc  UploadDocRequest
  * @return UploadDocResponse
 */
async function uploadDoc(request: UploadDocRequest): UploadDocResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadDoc', 'POST', '/', 'json', true, 'form', request);
}

model ValidateUploadTemplateRequest {
  regionId?: string(name='RegionId', position='Host'),
  fileKey: string(name='FileKey', description='This parameter is required.', example='Content', position='Body'),
  taskType?: string(name='TaskType', example='lightAppSass', position='Body'),
  templateType: string(name='TemplateType', description='This parameter is required.', example='Content', position='Body'),
  workspaceId: string(name='WorkspaceId', description='This parameter is required.', example='xxxx', position='Body'),
}

model ValidateUploadTemplateResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    commentCount?: int32(name='CommentCount', example='50'),
    dialogueCount?: int32(name='DialogueCount', example='50'),
    totalCount?: int32(name='TotalCount', example='50'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model ValidateUploadTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ValidateUploadTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ValidateUploadTemplate  ValidateUploadTemplateRequest
  * @return ValidateUploadTemplateResponse
 */
async function validateUploadTemplate(request: ValidateUploadTemplateRequest): ValidateUploadTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ValidateUploadTemplate', 'POST', '/', 'json', true, 'form', request);
}

