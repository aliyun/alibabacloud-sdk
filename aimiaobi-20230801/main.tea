/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('aimiaobi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CancelAsyncTaskRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='c160c841c8e54295bf2f441432785944_p_efm'),
  taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
}

model CancelAsyncTaskResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='FB698445-61DA-5361-BF73-1C5F1157E888'),
  success?: boolean(name='Success', example='True'),
}

model CancelAsyncTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelAsyncTaskResponseBody(name='body'),
}

/**
 * @summary 取消异步任务
 *
 * @param request CancelAsyncTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CancelAsyncTaskResponse
 */
async function cancelAsyncTaskWithOptions(request: CancelAsyncTaskRequest, runtime: Util.RuntimeOptions): CancelAsyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CancelAsyncTask',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 取消异步任务
 *
 * @param request CancelAsyncTaskRequest
 * @return CancelAsyncTaskResponse
 */
async function cancelAsyncTask(request: CancelAsyncTaskRequest): CancelAsyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelAsyncTaskWithOptions(request, runtime);
}

model ClearIntervenesRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm'),
}

model ClearIntervenesResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    failIdList?: [ string ](name='FailIdList'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model ClearIntervenesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ClearIntervenesResponseBody(name='body'),
}

/**
 * @summary 清除所有干预内容
 *
 * @param request ClearIntervenesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ClearIntervenesResponse
 */
async function clearIntervenesWithOptions(request: ClearIntervenesRequest, runtime: Util.RuntimeOptions): ClearIntervenesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ClearIntervenes',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 清除所有干预内容
 *
 * @param request ClearIntervenesRequest
 * @return ClearIntervenesResponse
 */
async function clearIntervenes(request: ClearIntervenesRequest): ClearIntervenesResponse {
  var runtime = new Util.RuntimeOptions{};
  return clearIntervenesWithOptions(request, runtime);
}

model CreateGeneratedContentRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxx_efm'),
  content?: string(name='Content', description='This parameter is required.'),
  contentDomain?: string(name='ContentDomain', example='government'),
  contentText?: string(name='ContentText'),
  keywords?: [ string ](name='Keywords'),
  prompt?: string(name='Prompt'),
  taskId?: string(name='TaskId', description='This parameter is required.', example='xxx'),
  title?: string(name='Title', description='This parameter is required.'),
  uuid?: string(name='Uuid', example='xxxx'),
}

model CreateGeneratedContentShrinkRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxx_efm'),
  content?: string(name='Content', description='This parameter is required.'),
  contentDomain?: string(name='ContentDomain', example='government'),
  contentText?: string(name='ContentText'),
  keywordsShrink?: string(name='Keywords'),
  prompt?: string(name='Prompt'),
  taskId?: string(name='TaskId', description='This parameter is required.', example='xxx'),
  title?: string(name='Title', description='This parameter is required.'),
  uuid?: string(name='Uuid', example='xxxx'),
}

model CreateGeneratedContentResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: long(name='Data', example='42'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='false'),
}

model CreateGeneratedContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGeneratedContentResponseBody(name='body'),
}

/**
 * @summary 文档管理-创建
 *
 * @param tmpReq CreateGeneratedContentRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateGeneratedContentResponse
 */
async function createGeneratedContentWithOptions(tmpReq: CreateGeneratedContentRequest, runtime: Util.RuntimeOptions): CreateGeneratedContentResponse {
  Util.validateModel(tmpReq);
  var request = new CreateGeneratedContentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.keywords)) {
    request.keywordsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.keywords, 'Keywords', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.contentDomain)) {
    body['ContentDomain'] = request.contentDomain;
  }
  if (!Util.isUnset(request.contentText)) {
    body['ContentText'] = request.contentText;
  }
  if (!Util.isUnset(request.keywordsShrink)) {
    body['Keywords'] = request.keywordsShrink;
  }
  if (!Util.isUnset(request.prompt)) {
    body['Prompt'] = request.prompt;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }
  if (!Util.isUnset(request.uuid)) {
    body['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateGeneratedContent',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 文档管理-创建
 *
 * @param request CreateGeneratedContentRequest
 * @return CreateGeneratedContentResponse
 */
async function createGeneratedContent(request: CreateGeneratedContentRequest): CreateGeneratedContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createGeneratedContentWithOptions(request, runtime);
}

model CreateTokenRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='2daaa2e0c209xb26acb97009ea77bd4b_p_efm'),
}

model CreateTokenResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    expiredTime?: long(name='ExpiredTime', example='1705388704855'),
    token?: string(name='Token', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model CreateTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTokenResponseBody(name='body'),
}

/**
 * @summary 获取授权token
 *
 * @param request CreateTokenRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateTokenResponse
 */
async function createTokenWithOptions(request: CreateTokenRequest, runtime: Util.RuntimeOptions): CreateTokenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateToken',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取授权token
 *
 * @param request CreateTokenRequest
 * @return CreateTokenResponse
 */
async function createToken(request: CreateTokenRequest): CreateTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTokenWithOptions(request, runtime);
}

model DeleteCustomTextRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm'),
  commodityCode?: string(name='CommodityCode'),
  id?: long(name='Id', description='This parameter is required.', example='85'),
}

model DeleteCustomTextResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: boolean(name='Data', example='false'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model DeleteCustomTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCustomTextResponseBody(name='body'),
}

/**
 * @summary 删除自定义文本
 *
 * @param request DeleteCustomTextRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteCustomTextResponse
 */
async function deleteCustomTextWithOptions(request: DeleteCustomTextRequest, runtime: Util.RuntimeOptions): DeleteCustomTextResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.commodityCode)) {
    body['CommodityCode'] = request.commodityCode;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCustomText',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除自定义文本
 *
 * @param request DeleteCustomTextRequest
 * @return DeleteCustomTextResponse
 */
async function deleteCustomText(request: DeleteCustomTextRequest): DeleteCustomTextResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCustomTextWithOptions(request, runtime);
}

model DeleteGeneratedContentRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm'),
  id?: long(name='Id', description='This parameter is required.', example='99'),
  regionId?: string(name='RegionId'),
}

model DeleteGeneratedContentResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model DeleteGeneratedContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGeneratedContentResponseBody(name='body'),
}

/**
 * @summary 文档管理-删除。
 *
 * @param request DeleteGeneratedContentRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteGeneratedContentResponse
 */
async function deleteGeneratedContentWithOptions(request: DeleteGeneratedContentRequest, runtime: Util.RuntimeOptions): DeleteGeneratedContentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteGeneratedContent',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 文档管理-删除。
 *
 * @param request DeleteGeneratedContentRequest
 * @return DeleteGeneratedContentResponse
 */
async function deleteGeneratedContent(request: DeleteGeneratedContentRequest): DeleteGeneratedContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGeneratedContentWithOptions(request, runtime);
}

model DeleteInterveneRuleRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm'),
  ruleId?: long(name='RuleId', example='12345'),
}

model DeleteInterveneRuleResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    failIdList?: [ string ](name='FailIdList'),
    taskId?: string(name='TaskId', example='dt-s50ntwtywb4y'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='94512A33-8EC1-5452-A793-5C91F18ED2F0'),
  success?: boolean(name='Success', example='true'),
}

model DeleteInterveneRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInterveneRuleResponseBody(name='body'),
}

/**
 * @summary 删除干预规则
 *
 * @param request DeleteInterveneRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteInterveneRuleResponse
 */
async function deleteInterveneRuleWithOptions(request: DeleteInterveneRuleRequest, runtime: Util.RuntimeOptions): DeleteInterveneRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.ruleId)) {
    body['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteInterveneRule',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除干预规则
 *
 * @param request DeleteInterveneRuleRequest
 * @return DeleteInterveneRuleResponse
 */
async function deleteInterveneRule(request: DeleteInterveneRuleRequest): DeleteInterveneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInterveneRuleWithOptions(request, runtime);
}

model DeleteMaterialByIdRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='cd327c3d5d5e44159cc716e23bfa530e_p_beebot_public'),
  id?: long(name='Id', description='This parameter is required.', example='10'),
}

model DeleteMaterialByIdResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: boolean(name='Data', example='false'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='false'),
}

model DeleteMaterialByIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMaterialByIdResponseBody(name='body'),
}

/**
 * @summary 根据ID删除素材
 *
 * @param request DeleteMaterialByIdRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteMaterialByIdResponse
 */
async function deleteMaterialByIdWithOptions(request: DeleteMaterialByIdRequest, runtime: Util.RuntimeOptions): DeleteMaterialByIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMaterialById',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 根据ID删除素材
 *
 * @param request DeleteMaterialByIdRequest
 * @return DeleteMaterialByIdResponse
 */
async function deleteMaterialById(request: DeleteMaterialByIdRequest): DeleteMaterialByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMaterialByIdWithOptions(request, runtime);
}

model DocumentExtractionRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm'),
  urls?: [ string ](name='Urls', description='This parameter is required.'),
}

model DocumentExtractionShrinkRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm'),
  urlsShrink?: string(name='Urls', description='This parameter is required.'),
}

model DocumentExtractionResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: [ 
    {
      author?: string(name='Author', example='作者'),
      content?: string(name='Content', example='文章内容'),
      docId?: string(name='DocId', example='文档-自定义的唯一ID'),
      docUuid?: string(name='DocUuid', example='8df2d69d63a247b6b52ff455b2d426b6'),
      pubTime?: string(name='PubTime', example='2024-05-14 08:54:33'),
      source?: string(name='Source', example='央视网'),
      summary?: string(name='Summary', example='文章摘要'),
      tag?: string(name='Tag', example='文章标签'),
      title?: string(name='Title', example='文章标题'),
      url?: string(name='Url', example='https://www.example.com/aaa.docx'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model DocumentExtractionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DocumentExtractionResponseBody(name='body'),
}

/**
 * @summary 从链接中提取文档内容
 *
 * @param tmpReq DocumentExtractionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DocumentExtractionResponse
 */
async function documentExtractionWithOptions(tmpReq: DocumentExtractionRequest, runtime: Util.RuntimeOptions): DocumentExtractionResponse {
  Util.validateModel(tmpReq);
  var request = new DocumentExtractionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.urls)) {
    request.urlsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.urls, 'Urls', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.urlsShrink)) {
    body['Urls'] = request.urlsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DocumentExtraction',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 从链接中提取文档内容
 *
 * @param request DocumentExtractionRequest
 * @return DocumentExtractionResponse
 */
async function documentExtraction(request: DocumentExtractionRequest): DocumentExtractionResponse {
  var runtime = new Util.RuntimeOptions{};
  return documentExtractionWithOptions(request, runtime);
}

model ExportGeneratedContentRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm'),
  id?: long(name='Id', description='This parameter is required.', example='1'),
}

model ExportGeneratedContentResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: string(name='Data', example='xxx'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model ExportGeneratedContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportGeneratedContentResponseBody(name='body'),
}

/**
 * @summary 文档管理-导出。
 *
 * @param request ExportGeneratedContentRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExportGeneratedContentResponse
 */
async function exportGeneratedContentWithOptions(request: ExportGeneratedContentRequest, runtime: Util.RuntimeOptions): ExportGeneratedContentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ExportGeneratedContent',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 文档管理-导出。
 *
 * @param request ExportGeneratedContentRequest
 * @return ExportGeneratedContentResponse
 */
async function exportGeneratedContent(request: ExportGeneratedContentRequest): ExportGeneratedContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportGeneratedContentWithOptions(request, runtime);
}

model ExportIntervenesRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='fed6555ec9e24b92aeecc34be484b887_p_efm'),
}

model ExportIntervenesResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    fileUrl?: string(name='FileUrl', example='http://xxx/xxx.xls'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model ExportIntervenesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportIntervenesResponseBody(name='body'),
}

/**
 * @summary 导出所有干预内容
 *
 * @param request ExportIntervenesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExportIntervenesResponse
 */
async function exportIntervenesWithOptions(request: ExportIntervenesRequest, runtime: Util.RuntimeOptions): ExportIntervenesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportIntervenes',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 导出所有干预内容
 *
 * @param request ExportIntervenesRequest
 * @return ExportIntervenesResponse
 */
async function exportIntervenes(request: ExportIntervenesRequest): ExportIntervenesResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportIntervenesWithOptions(request, runtime);
}

model FeedbackDialogueRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='fcb14f25c9ee41ccad33a049de8f941b_p_outbound_public'),
  customerResponse?: string(name='CustomerResponse', example='test'),
  goodText?: string(name='GoodText', example='test'),
  modifiedResponse?: string(name='ModifiedResponse', example='test'),
  rating?: string(name='Rating', example='thumbsDown'),
  ratingTags?: [ string ](name='RatingTags'),
  sessionId?: string(name='SessionId', description='This parameter is required.', example='75bf82fa-b71b-45d7-ae40-0b00e496cd9e'),
  taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
}

model FeedbackDialogueShrinkRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='fcb14f25c9ee41ccad33a049de8f941b_p_outbound_public'),
  customerResponse?: string(name='CustomerResponse', example='test'),
  goodText?: string(name='GoodText', example='test'),
  modifiedResponse?: string(name='ModifiedResponse', example='test'),
  rating?: string(name='Rating', example='thumbsDown'),
  ratingTagsShrink?: string(name='RatingTags'),
  sessionId?: string(name='SessionId', description='This parameter is required.', example='75bf82fa-b71b-45d7-ae40-0b00e496cd9e'),
  taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
}

model FeedbackDialogueResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='false'),
}

model FeedbackDialogueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FeedbackDialogueResponseBody(name='body'),
}

/**
 * @summary 反馈某次生成的结果
 *
 * @param tmpReq FeedbackDialogueRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return FeedbackDialogueResponse
 */
async function feedbackDialogueWithOptions(tmpReq: FeedbackDialogueRequest, runtime: Util.RuntimeOptions): FeedbackDialogueResponse {
  Util.validateModel(tmpReq);
  var request = new FeedbackDialogueShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.ratingTags)) {
    request.ratingTagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ratingTags, 'RatingTags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.customerResponse)) {
    body['CustomerResponse'] = request.customerResponse;
  }
  if (!Util.isUnset(request.goodText)) {
    body['GoodText'] = request.goodText;
  }
  if (!Util.isUnset(request.modifiedResponse)) {
    body['ModifiedResponse'] = request.modifiedResponse;
  }
  if (!Util.isUnset(request.rating)) {
    body['Rating'] = request.rating;
  }
  if (!Util.isUnset(request.ratingTagsShrink)) {
    body['RatingTags'] = request.ratingTagsShrink;
  }
  if (!Util.isUnset(request.sessionId)) {
    body['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FeedbackDialogue',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 反馈某次生成的结果
 *
 * @param request FeedbackDialogueRequest
 * @return FeedbackDialogueResponse
 */
async function feedbackDialogue(request: FeedbackDialogueRequest): FeedbackDialogueResponse {
  var runtime = new Util.RuntimeOptions{};
  return feedbackDialogueWithOptions(request, runtime);
}

model FetchImageTaskRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='cd327c3d5d5e44159cc716e23bfa530e_p_beebot_public'),
  articleTaskId?: string(name='ArticleTaskId', description='This parameter is required.', example='e1be065b-adc3-435e-bd01-1c18c5ed75d3'),
  taskIdList?: [ string ](name='TaskIdList', description='This parameter is required.', example='["9d8c9185-3f75-4a20-aca1-c5bb53dd97b3"]'),
}

model FetchImageTaskShrinkRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='cd327c3d5d5e44159cc716e23bfa530e_p_beebot_public'),
  articleTaskId?: string(name='ArticleTaskId', description='This parameter is required.', example='e1be065b-adc3-435e-bd01-1c18c5ed75d3'),
  taskIdListShrink?: string(name='TaskIdList', description='This parameter is required.', example='["9d8c9185-3f75-4a20-aca1-c5bb53dd97b3"]'),
}

model FetchImageTaskResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    taskInfoList?: [ 
      {
        id?: long(name='Id', example='1'),
        imageList?: [ 
          {
            code?: string(name='Code', example='NoData'),
            message?: string(name='Message'),
            url?: string(name='Url', example='https://a-hbr-temp-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/r-000aham3nsx9gc7a8r5l.csv?Expires=1678260131&OSSAccessKeyId=LTAIjGotF8wXIEjy&Signature=WpMfqBnjeR0w5UL1xFAd1J556Pw%3D'),
          }
        ](name='ImageList'),
        taskId?: string(name='TaskId', example='net-7eb32699000d4193a3c59fc64ae1e55f'),
        taskStatus?: string(name='TaskStatus', example='SUCCESSED'),
      }
    ](name='TaskInfoList'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='DD656AF9-0839-521A-A3D2-F320009F9C87'),
  success?: boolean(name='Success', example='true'),
}

model FetchImageTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FetchImageTaskResponseBody(name='body'),
}

/**
 * @summary 获取图片任务执行结果
 *
 * @param tmpReq FetchImageTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return FetchImageTaskResponse
 */
async function fetchImageTaskWithOptions(tmpReq: FetchImageTaskRequest, runtime: Util.RuntimeOptions): FetchImageTaskResponse {
  Util.validateModel(tmpReq);
  var request = new FetchImageTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.taskIdList)) {
    request.taskIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.taskIdList, 'TaskIdList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.articleTaskId)) {
    body['ArticleTaskId'] = request.articleTaskId;
  }
  if (!Util.isUnset(request.taskIdListShrink)) {
    body['TaskIdList'] = request.taskIdListShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FetchImageTask',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取图片任务执行结果
 *
 * @param request FetchImageTaskRequest
 * @return FetchImageTaskResponse
 */
async function fetchImageTask(request: FetchImageTaskRequest): FetchImageTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return fetchImageTaskWithOptions(request, runtime);
}

model GenerateFileUrlByKeyRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm'),
  fileKey?: string(name='FileKey', example='oss://default/oss-bucket-name/aimiaobi/2021/07/01/1625126400000/1.docx'),
  fileName?: string(name='FileName'),
}

model GenerateFileUrlByKeyResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: string(name='Data', example='https://www.example.com/a.txt'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model GenerateFileUrlByKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateFileUrlByKeyResponseBody(name='body'),
}

/**
 * @summary 生成临时可访问的公开url
 *
 * @param request GenerateFileUrlByKeyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GenerateFileUrlByKeyResponse
 */
async function generateFileUrlByKeyWithOptions(request: GenerateFileUrlByKeyRequest, runtime: Util.RuntimeOptions): GenerateFileUrlByKeyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.fileKey)) {
    body['FileKey'] = request.fileKey;
  }
  if (!Util.isUnset(request.fileName)) {
    body['FileName'] = request.fileName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GenerateFileUrlByKey',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 生成临时可访问的公开url
 *
 * @param request GenerateFileUrlByKeyRequest
 * @return GenerateFileUrlByKeyResponse
 */
async function generateFileUrlByKey(request: GenerateFileUrlByKeyRequest): GenerateFileUrlByKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateFileUrlByKeyWithOptions(request, runtime);
}

model GenerateImageTaskRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='e1be065b-adc3-435e-bd01-1c18c5ed75d3'),
  articleTaskId?: string(name='ArticleTaskId', description='This parameter is required.', example='e1be065b-adc3-435e-bd01-1c18c5ed75d3'),
  paragraphList?: [ 
    {
      content?: string(name='Content', description='This parameter is required.', example='一直忧伤的猫'),
      id?: long(name='Id', description='This parameter is required.', example='1'),
      taskId?: string(name='TaskId', example='e1be065b-adc3-435e-bd01-1c18c5ed75d3'),
      taskStatus?: string(name='TaskStatus', example='SUCCESSED'),
    }
  ](name='ParagraphList', description='This parameter is required.'),
  size?: string(name='Size', description='This parameter is required.', example='1024*1024'),
  style?: string(name='Style', description='This parameter is required.', example='<auto>'),
}

model GenerateImageTaskShrinkRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='e1be065b-adc3-435e-bd01-1c18c5ed75d3'),
  articleTaskId?: string(name='ArticleTaskId', description='This parameter is required.', example='e1be065b-adc3-435e-bd01-1c18c5ed75d3'),
  paragraphListShrink?: string(name='ParagraphList', description='This parameter is required.'),
  size?: string(name='Size', description='This parameter is required.', example='1024*1024'),
  style?: string(name='Style', description='This parameter is required.', example='<auto>'),
}

model GenerateImageTaskResponseBody = {
  code?: string(name='Code', example='successful'),
  data?: {
    taskList?: [ 
      {
        content?: string(name='Content', example='一直忧伤的猫'),
        id?: long(name='Id', example='1'),
        taskId?: string(name='TaskId', example='e1be065b-adc3-435e-bd01-1c18c5ed75d3'),
        taskStatus?: string(name='TaskStatus', example='SUCCESSED'),
      }
    ](name='TaskList'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='F2F366D6-E9FE-1006-BB70-2C650896AAB5'),
  success?: boolean(name='Success', example='true'),
}

model GenerateImageTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateImageTaskResponseBody(name='body'),
}

/**
 * @summary 智能配图，图片生成任务
 *
 * @param tmpReq GenerateImageTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GenerateImageTaskResponse
 */
async function generateImageTaskWithOptions(tmpReq: GenerateImageTaskRequest, runtime: Util.RuntimeOptions): GenerateImageTaskResponse {
  Util.validateModel(tmpReq);
  var request = new GenerateImageTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.paragraphList)) {
    request.paragraphListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.paragraphList, 'ParagraphList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.articleTaskId)) {
    body['ArticleTaskId'] = request.articleTaskId;
  }
  if (!Util.isUnset(request.paragraphListShrink)) {
    body['ParagraphList'] = request.paragraphListShrink;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.style)) {
    body['Style'] = request.style;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GenerateImageTask',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 智能配图，图片生成任务
 *
 * @param request GenerateImageTaskRequest
 * @return GenerateImageTaskResponse
 */
async function generateImageTask(request: GenerateImageTaskRequest): GenerateImageTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateImageTaskWithOptions(request, runtime);
}

model GenerateUploadConfigRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm'),
  fileName?: string(name='FileName', example='test.docx'),
  parentDir?: string(name='ParentDir', description='This parameter is required.', example='datasetUpload'),
}

model GenerateUploadConfigResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    fileKey?: string(name='FileKey', example='oss://default/oss-bucket-name/aimiaobi/2021/07/01/1625126400000/1.docx'),
    formDatas?: map[string]any(name='FormDatas'),
    postUrl?: string(name='PostUrl', example='https://bucket-name.oss-cn-hangzhou.aliyuncs.com'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model GenerateUploadConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateUploadConfigResponseBody(name='body'),
}

/**
 * @summary 生成上传配置
 *
 * @param request GenerateUploadConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GenerateUploadConfigResponse
 */
async function generateUploadConfigWithOptions(request: GenerateUploadConfigRequest, runtime: Util.RuntimeOptions): GenerateUploadConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.fileName)) {
    body['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.parentDir)) {
    body['ParentDir'] = request.parentDir;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GenerateUploadConfig',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 生成上传配置
 *
 * @param request GenerateUploadConfigRequest
 * @return GenerateUploadConfigResponse
 */
async function generateUploadConfig(request: GenerateUploadConfigRequest): GenerateUploadConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateUploadConfigWithOptions(request, runtime);
}

model GenerateViewPointRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='c160c841c8e54295bf2f441432785944_p_efm'),
  referenceData?: {
    miniDoc?: [ string ](name='MiniDoc'),
  }(name='ReferenceData'),
}

model GenerateViewPointShrinkRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='c160c841c8e54295bf2f441432785944_p_efm'),
  referenceDataShrink?: string(name='ReferenceData'),
}

model GenerateViewPointResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      point?: string(name='Point'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='94512A33-8EC1-5452-A793-5C91F18ED2F0'),
  success?: boolean(name='Success', example='true'),
}

model GenerateViewPointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateViewPointResponseBody(name='body'),
}

/**
 * @summary 视角生成
 *
 * @param tmpReq GenerateViewPointRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GenerateViewPointResponse
 */
async function generateViewPointWithOptions(tmpReq: GenerateViewPointRequest, runtime: Util.RuntimeOptions): GenerateViewPointResponse {
  Util.validateModel(tmpReq);
  var request = new GenerateViewPointShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.referenceData)) {
    request.referenceDataShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.referenceData, 'ReferenceData', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.referenceDataShrink)) {
    body['ReferenceData'] = request.referenceDataShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GenerateViewPoint',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 视角生成
 *
 * @param request GenerateViewPointRequest
 * @return GenerateViewPointResponse
 */
async function generateViewPoint(request: GenerateViewPointRequest): GenerateViewPointResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateViewPointWithOptions(request, runtime);
}

model GetCustomTextRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm'),
  commodityCode?: string(name='CommodityCode', example='商品code'),
  id?: long(name='Id', description='This parameter is required.', example='63'),
}

model GetCustomTextResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    content?: string(name='Content', example='内容'),
    createTime?: string(name='CreateTime', example='创建时间'),
    createUser?: string(name='CreateUser', example='创建用户'),
    id?: long(name='Id', example='34'),
    title?: string(name='Title', example='标题'),
    updateTime?: string(name='UpdateTime', example='修改时间'),
    updateUser?: string(name='UpdateUser', example='修改用户'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model GetCustomTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCustomTextResponseBody(name='body'),
}

/**
 * @summary 获取自定义文本
 *
 * @param request GetCustomTextRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCustomTextResponse
 */
async function getCustomTextWithOptions(request: GetCustomTextRequest, runtime: Util.RuntimeOptions): GetCustomTextResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.commodityCode)) {
    body['CommodityCode'] = request.commodityCode;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetCustomText',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取自定义文本
 *
 * @param request GetCustomTextRequest
 * @return GetCustomTextResponse
 */
async function getCustomText(request: GetCustomTextRequest): GetCustomTextResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCustomTextWithOptions(request, runtime);
}

model GetDataSourceOrderConfigRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='d9a1f6146a37446495d9985c2e7b267e_p_outbound_public'),
  productCode?: string(name='ProductCode', description='This parameter is required.', example='miaobi'),
}

model GetDataSourceOrderConfigResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    userConfigDataSourceList?: [ 
      {
        code?: string(name='Code', example='QuarkCommonNews'),
        name?: string(name='Name'),
        number?: int32(name='Number', example='20'),
        type?: string(name='Type', example='SystemSearch'),
      }
    ](name='UserConfigDataSourceList'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='428DCC0D-3C63-5306-BD1B-124396AB97BE'),
  success?: boolean(name='Success', example='true'),
}

model GetDataSourceOrderConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataSourceOrderConfigResponseBody(name='body'),
}

/**
 * @summary 获取系统数据源配置和个人配置
 *
 * @param request GetDataSourceOrderConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDataSourceOrderConfigResponse
 */
async function getDataSourceOrderConfigWithOptions(request: GetDataSourceOrderConfigRequest, runtime: Util.RuntimeOptions): GetDataSourceOrderConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDataSourceOrderConfig',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取系统数据源配置和个人配置
 *
 * @param request GetDataSourceOrderConfigRequest
 * @return GetDataSourceOrderConfigResponse
 */
async function getDataSourceOrderConfig(request: GetDataSourceOrderConfigRequest): GetDataSourceOrderConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataSourceOrderConfigWithOptions(request, runtime);
}

model GetGeneratedContentRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm'),
  id?: long(name='Id', description='This parameter is required.', example='1'),
}

model GetGeneratedContentResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    content?: string(name='Content'),
    contentDomain?: string(name='ContentDomain', example='media'),
    contentText?: string(name='ContentText'),
    createTime?: string(name='CreateTime', example='2024-01-04 11:46:07'),
    createUser?: string(name='CreateUser', example='1'),
    deviceId?: string(name='DeviceId', example='xxx'),
    id?: long(name='Id', example='86'),
    keywordList?: [ string ](name='KeywordList'),
    keywords?: string(name='Keywords'),
    prompt?: string(name='Prompt'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    title?: string(name='Title'),
    updateTime?: string(name='UpdateTime', example='2024-01-04 11:46:07'),
    updateUser?: string(name='UpdateUser', example='1'),
    uuid?: string(name='Uuid', example='0961a514-2e26-4aa6-b22b-f592d145fe47'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model GetGeneratedContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGeneratedContentResponseBody(name='body'),
}

/**
 * @summary 文档管理-查询详情。
 *
 * @param request GetGeneratedContentRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetGeneratedContentResponse
 */
async function getGeneratedContentWithOptions(request: GetGeneratedContentRequest, runtime: Util.RuntimeOptions): GetGeneratedContentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetGeneratedContent',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 文档管理-查询详情。
 *
 * @param request GetGeneratedContentRequest
 * @return GetGeneratedContentResponse
 */
async function getGeneratedContent(request: GetGeneratedContentRequest): GetGeneratedContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGeneratedContentWithOptions(request, runtime);
}

model GetInterveneGlobalReplyRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='fcb14f25c9ee41ccad33a049de8f941b_p_outbound_public'),
}

model GetInterveneGlobalReplyResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    replyMessagList?: [ 
      {
        message?: string(name='Message', example='success'),
        replyType?: string(name='ReplyType', example='namespace_qa_query'),
      }
    ](name='ReplyMessagList'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model GetInterveneGlobalReplyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInterveneGlobalReplyResponseBody(name='body'),
}

/**
 * @summary 获得干预全局回复
 *
 * @param request GetInterveneGlobalReplyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetInterveneGlobalReplyResponse
 */
async function getInterveneGlobalReplyWithOptions(request: GetInterveneGlobalReplyRequest, runtime: Util.RuntimeOptions): GetInterveneGlobalReplyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetInterveneGlobalReply',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获得干预全局回复
 *
 * @param request GetInterveneGlobalReplyRequest
 * @return GetInterveneGlobalReplyResponse
 */
async function getInterveneGlobalReply(request: GetInterveneGlobalReplyRequest): GetInterveneGlobalReplyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInterveneGlobalReplyWithOptions(request, runtime);
}

model GetInterveneImportTaskInfoRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='67c520d1fa43455ea44fb69fa402d54d_p_beebot_public'),
  taskId?: string(name='TaskId', example='19162157'),
}

model GetInterveneImportTaskInfoResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    status?: {
      msg?: string(name='Msg', example='success'),
      percentage?: int32(name='Percentage', example='80'),
      status?: int32(name='Status', example='0'),
      taskId?: string(name='TaskId', example='41405255'),
      taskName?: string(name='TaskName', example='ft-task-20190101m8rnK'),
    }(name='Status'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model GetInterveneImportTaskInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInterveneImportTaskInfoResponseBody(name='body'),
}

/**
 * @summary 获得导入任务信息
 *
 * @param request GetInterveneImportTaskInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetInterveneImportTaskInfoResponse
 */
async function getInterveneImportTaskInfoWithOptions(request: GetInterveneImportTaskInfoRequest, runtime: Util.RuntimeOptions): GetInterveneImportTaskInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInterveneImportTaskInfo',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获得导入任务信息
 *
 * @param request GetInterveneImportTaskInfoRequest
 * @return GetInterveneImportTaskInfoResponse
 */
async function getInterveneImportTaskInfo(request: GetInterveneImportTaskInfoRequest): GetInterveneImportTaskInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInterveneImportTaskInfoWithOptions(request, runtime);
}

model GetInterveneRuleDetailRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='2daaa2e0c209xb26acb97009ea77bd4b_p_efm'),
  ruleId?: long(name='RuleId', example='12345'),
}

model GetInterveneRuleDetailResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    interveneRuleDetail?: {
      answerConfig?: [ 
        {
          answerType?: int32(name='AnswerType', example='0'),
          message?: string(name='Message'),
          namespace?: string(name='Namespace', example='namespace_qa_query'),
        }
      ](name='AnswerConfig'),
      effectConfig?: {
        effectType?: int32(name='EffectType', example='0'),
        endTime?: string(name='EndTime', example='2023-11-25 14:21:15'),
        startTime?: string(name='StartTime', example='2023-11-25 14:21:15'),
      }(name='EffectConfig'),
      interveneType?: int32(name='InterveneType', example='0'),
      namespaceList?: [ string ](name='NamespaceList'),
      ruleId?: long(name='RuleId', example='100418'),
      ruleName?: string(name='RuleName'),
    }(name='InterveneRuleDetail'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='428DCC0D-3C63-5306-BD1B-124396AB97BE'),
  success?: boolean(name='Success', example='true'),
}

model GetInterveneRuleDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInterveneRuleDetailResponseBody(name='body'),
}

/**
 * @summary 获得干预项规则详情
 *
 * @param request GetInterveneRuleDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetInterveneRuleDetailResponse
 */
async function getInterveneRuleDetailWithOptions(request: GetInterveneRuleDetailRequest, runtime: Util.RuntimeOptions): GetInterveneRuleDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.ruleId)) {
    body['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInterveneRuleDetail',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获得干预项规则详情
 *
 * @param request GetInterveneRuleDetailRequest
 * @return GetInterveneRuleDetailResponse
 */
async function getInterveneRuleDetail(request: GetInterveneRuleDetailRequest): GetInterveneRuleDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInterveneRuleDetailWithOptions(request, runtime);
}

model GetInterveneTemplateFileUrlRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='c160c841c8e54295bf2f441432785944_p_efm'),
}

model GetInterveneTemplateFileUrlResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    fileUrl?: string(name='FileUrl', example='http://xxx/xxx.xls'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='DA021073-17CE-5CCF-9FEB-93226C766887'),
  success?: boolean(name='Success', example='true'),
}

model GetInterveneTemplateFileUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInterveneTemplateFileUrlResponseBody(name='body'),
}

/**
 * @summary 获得干预导入模版文件下载地址
 *
 * @param request GetInterveneTemplateFileUrlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetInterveneTemplateFileUrlResponse
 */
async function getInterveneTemplateFileUrlWithOptions(request: GetInterveneTemplateFileUrlRequest, runtime: Util.RuntimeOptions): GetInterveneTemplateFileUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetInterveneTemplateFileUrl',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获得干预导入模版文件下载地址
 *
 * @param request GetInterveneTemplateFileUrlRequest
 * @return GetInterveneTemplateFileUrlResponse
 */
async function getInterveneTemplateFileUrl(request: GetInterveneTemplateFileUrlRequest): GetInterveneTemplateFileUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInterveneTemplateFileUrlWithOptions(request, runtime);
}

model GetMaterialByIdRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='67c520d1fa43455ea44fb69fa402d54d_p_beebot_public'),
  id?: long(name='Id', description='This parameter is required.', example='60'),
}

model GetMaterialByIdResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: {
    author?: string(name='Author'),
    createTime?: string(name='CreateTime', example='2023-03-21 11:34:19'),
    createUser?: string(name='CreateUser', example='1'),
    docKeywords?: [ string ](name='DocKeywords'),
    docType?: string(name='DocType', example='pdf'),
    externalUrl?: string(name='ExternalUrl', example='https://www.example.com'),
    htmlContent?: string(name='HtmlContent'),
    id?: long(name='Id', example='32'),
    pubTime?: string(name='PubTime', example='2023-04-11 06:14:07'),
    publicUrl?: string(name='PublicUrl', example='https://www.example.com'),
    shareAttr?: int32(name='ShareAttr', example='1'),
    srcFrom?: string(name='SrcFrom', example='user_upload'),
    summary?: string(name='Summary'),
    textContent?: string(name='TextContent'),
    thumbnailInBase64?: string(name='ThumbnailInBase64'),
    title?: string(name='Title'),
    updateTime?: string(name='UpdateTime', example='2022-04-08 19:33:01'),
    updateUser?: string(name='UpdateUser', example='1'),
    url?: string(name='Url', example='https://www.example.com'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='false'),
}

model GetMaterialByIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMaterialByIdResponseBody(name='body'),
}

/**
 * @summary 根据ID获取素材内容
 *
 * @param request GetMaterialByIdRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMaterialByIdResponse
 */
async function getMaterialByIdWithOptions(request: GetMaterialByIdRequest, runtime: Util.RuntimeOptions): GetMaterialByIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMaterialById',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 根据ID获取素材内容
 *
 * @param request GetMaterialByIdRequest
 * @return GetMaterialByIdResponse
 */
async function getMaterialById(request: GetMaterialByIdRequest): GetMaterialByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMaterialByIdWithOptions(request, runtime);
}

model GetPropertiesRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxx_efm'),
}

model GetPropertiesResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: {
    chatConfig?: map[string]any(name='ChatConfig'),
    consoleConfig?: {
      tipContent?: string(name='TipContent', example='xx'),
      title?: string(name='Title'),
    }(name='ConsoleConfig'),
    generalConfigMap?: map[string]any(name='GeneralConfigMap'),
    intelligentSearchConfig?: {
      productDescription?: string(name='ProductDescription', example='xxx'),
      searchSamples?: [ 
        {
          articles?: [ 
            {
              select?: boolean(name='Select', example='true'),
              stared?: boolean(name='Stared', example='false'),
              title?: string(name='Title', example='xx'),
              url?: string(name='Url', example='http://xxx.com'),
            }
          ](name='Articles'),
          prompt?: string(name='Prompt', example='xx'),
          text?: string(name='Text', example='xxx'),
        }
      ](name='SearchSamples'),
      searchSources?: [ 
        {
          code?: string(name='Code', example='xx'),
          datasetName?: string(name='DatasetName', example='xx'),
          name?: string(name='Name', example='xx'),
        }
      ](name='SearchSources'),
    }(name='IntelligentSearchConfig'),
    searchSources?: [ 
      {
        label?: string(name='Label'),
        value?: string(name='Value', example='SystemSearch'),
      }
    ](name='SearchSources'),
    slrAuthorized?: boolean(name='SlrAuthorized', example='true'),
    userInfo?: {
      agentId?: string(name='AgentId', example='1'),
      tenantId?: string(name='TenantId', example='1'),
      userId?: string(name='UserId', example='1'),
      username?: string(name='Username', example='admin'),
    }(name='UserInfo'),
    wanxiangImageSizeConfig?: [ 
      {
        name?: string(name='Name', example='1:1'),
        value?: string(name='Value', example='1024*1024'),
      }
    ](name='WanxiangImageSizeConfig'),
    wanxiangImageStyleConfig?: [ 
      {
        name?: string(name='Name'),
        pic?: string(name='Pic', example='https://img.alicdn.com/imgextra/i4/O1CN01RzKicz1W0YWzYkWcK_!!6000000002726-2-tps-132-104.png'),
        value?: string(name='Value', example='<auto>'),
      }
    ](name='WanxiangImageStyleConfig'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model GetPropertiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPropertiesResponseBody(name='body'),
}

/**
 * @summary 获取当前用户的配置
 *
 * @param request GetPropertiesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPropertiesResponse
 */
async function getPropertiesWithOptions(request: GetPropertiesRequest, runtime: Util.RuntimeOptions): GetPropertiesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProperties',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取当前用户的配置
 *
 * @param request GetPropertiesRequest
 * @return GetPropertiesResponse
 */
async function getProperties(request: GetPropertiesRequest): GetPropertiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPropertiesWithOptions(request, runtime);
}

model ImportInterveneFileRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm'),
  docName?: string(name='DocName', example='import.xls'),
  fileKey?: string(name='FileKey', example='import.xsl'),
  fileUrl?: string(name='FileUrl', example='http://xxx/xxx.xls'),
}

model ImportInterveneFileResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    failIdList?: [ string ](name='FailIdList'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model ImportInterveneFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportInterveneFileResponseBody(name='body'),
}

/**
 * @summary 导入干预文件
 *
 * @param request ImportInterveneFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ImportInterveneFileResponse
 */
async function importInterveneFileWithOptions(request: ImportInterveneFileRequest, runtime: Util.RuntimeOptions): ImportInterveneFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.docName)) {
    body['DocName'] = request.docName;
  }
  if (!Util.isUnset(request.fileKey)) {
    body['FileKey'] = request.fileKey;
  }
  if (!Util.isUnset(request.fileUrl)) {
    body['FileUrl'] = request.fileUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ImportInterveneFile',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 导入干预文件
 *
 * @param request ImportInterveneFileRequest
 * @return ImportInterveneFileResponse
 */
async function importInterveneFile(request: ImportInterveneFileRequest): ImportInterveneFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return importInterveneFileWithOptions(request, runtime);
}

model ImportInterveneFileAsyncRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='c160c841c8e54295bf2f441432785944_p_efm'),
  docName?: string(name='DocName', example='import.xls'),
  fileKey?: string(name='FileKey', example='import.xls'),
  fileUrl?: string(name='FileUrl', example='https://xxx/import.xls'),
}

model ImportInterveneFileAsyncResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    failIdList?: [ string ](name='FailIdList'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='94512A33-8EC1-5452-A793-5C91F18ED2F0'),
  success?: boolean(name='Success', example='true'),
}

model ImportInterveneFileAsyncResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportInterveneFileAsyncResponseBody(name='body'),
}

/**
 * @summary 异步导入干预文件
 *
 * @param request ImportInterveneFileAsyncRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ImportInterveneFileAsyncResponse
 */
async function importInterveneFileAsyncWithOptions(request: ImportInterveneFileAsyncRequest, runtime: Util.RuntimeOptions): ImportInterveneFileAsyncResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.docName)) {
    body['DocName'] = request.docName;
  }
  if (!Util.isUnset(request.fileKey)) {
    body['FileKey'] = request.fileKey;
  }
  if (!Util.isUnset(request.fileUrl)) {
    body['FileUrl'] = request.fileUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ImportInterveneFileAsync',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 异步导入干预文件
 *
 * @param request ImportInterveneFileAsyncRequest
 * @return ImportInterveneFileAsyncResponse
 */
async function importInterveneFileAsync(request: ImportInterveneFileAsyncRequest): ImportInterveneFileAsyncResponse {
  var runtime = new Util.RuntimeOptions{};
  return importInterveneFileAsyncWithOptions(request, runtime);
}

model InsertInterveneGlobalReplyRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxx_efm'),
  replyMessagList?: [ 
    {
      message?: string(name='Message'),
      replyType?: string(name='ReplyType'),
    }
  ](name='ReplyMessagList'),
}

model InsertInterveneGlobalReplyShrinkRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxx_efm'),
  replyMessagListShrink?: string(name='ReplyMessagList'),
}

model InsertInterveneGlobalReplyResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    failIdList?: [ string ](name='FailIdList'),
    taskId?: string(name='TaskId', example='4829'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model InsertInterveneGlobalReplyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InsertInterveneGlobalReplyResponseBody(name='body'),
}

/**
 * @summary 设置干预全局回复
 *
 * @param tmpReq InsertInterveneGlobalReplyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return InsertInterveneGlobalReplyResponse
 */
async function insertInterveneGlobalReplyWithOptions(tmpReq: InsertInterveneGlobalReplyRequest, runtime: Util.RuntimeOptions): InsertInterveneGlobalReplyResponse {
  Util.validateModel(tmpReq);
  var request = new InsertInterveneGlobalReplyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.replyMessagList)) {
    request.replyMessagListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.replyMessagList, 'ReplyMessagList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.replyMessagListShrink)) {
    body['ReplyMessagList'] = request.replyMessagListShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InsertInterveneGlobalReply',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 设置干预全局回复
 *
 * @param request InsertInterveneGlobalReplyRequest
 * @return InsertInterveneGlobalReplyResponse
 */
async function insertInterveneGlobalReply(request: InsertInterveneGlobalReplyRequest): InsertInterveneGlobalReplyResponse {
  var runtime = new Util.RuntimeOptions{};
  return insertInterveneGlobalReplyWithOptions(request, runtime);
}

model InsertInterveneRuleRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm'),
  interveneRuleConfig?: {
    answerConfig?: [ 
      {
        answerType?: int32(name='AnswerType', example='0'),
        message?: string(name='Message'),
        namespace?: string(name='Namespace', example='namespace_qa_query'),
      }
    ](name='AnswerConfig'),
    effectConfig?: {
      effectType?: int32(name='EffectType', example='0'),
      endTime?: string(name='EndTime', example='2023-03-28 06:04:29'),
      startTime?: string(name='StartTime', example='2023-03-28 06:04:29'),
    }(name='EffectConfig'),
    interveneConfigList?: [ 
      {
        id?: string(name='Id', description='id', example='37249'),
        operationType?: int32(name='OperationType', example='0'),
        query?: string(name='Query'),
      }
    ](name='InterveneConfigList'),
    interveneType?: int32(name='InterveneType', example='0'),
    namespaceList?: [ string ](name='NamespaceList'),
    ruleId?: long(name='RuleId', example='2'),
    ruleName?: string(name='RuleName', example='tf-test-rule'),
  }(name='InterveneRuleConfig'),
}

model InsertInterveneRuleShrinkRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm'),
  interveneRuleConfigShrink?: string(name='InterveneRuleConfig'),
}

model InsertInterveneRuleResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    ruleId?: long(name='RuleId', example='12345'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='DD656AF9-0839-521A-A3D2-F320009F9C87'),
  success?: boolean(name='Success', example='true'),
}

model InsertInterveneRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InsertInterveneRuleResponseBody(name='body'),
}

/**
 * @summary 插入干预规则
 *
 * @param tmpReq InsertInterveneRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return InsertInterveneRuleResponse
 */
async function insertInterveneRuleWithOptions(tmpReq: InsertInterveneRuleRequest, runtime: Util.RuntimeOptions): InsertInterveneRuleResponse {
  Util.validateModel(tmpReq);
  var request = new InsertInterveneRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.interveneRuleConfig)) {
    request.interveneRuleConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.interveneRuleConfig, 'InterveneRuleConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.interveneRuleConfigShrink)) {
    body['InterveneRuleConfig'] = request.interveneRuleConfigShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InsertInterveneRule',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 插入干预规则
 *
 * @param request InsertInterveneRuleRequest
 * @return InsertInterveneRuleResponse
 */
async function insertInterveneRule(request: InsertInterveneRuleRequest): InsertInterveneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return insertInterveneRuleWithOptions(request, runtime);
}

model ListAsyncTasksRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='cd327c3d5d5e44159cc716e23bfa530e_p_beebot_public'),
  createTimeEnd?: string(name='CreateTimeEnd', example='2023-03-18 02:00:00'),
  createTimeStart?: string(name='CreateTimeStart', example='2023-02-19 07:28:11'),
  current?: int32(name='Current', example='1'),
  size?: int32(name='Size', example='10'),
  taskCode?: string(name='TaskCode', example='MaterialDocumentUpload'),
  taskName?: string(name='TaskName'),
  taskStatus?: int32(name='TaskStatus', example='1'),
  taskStatusList?: [ int32 ](name='TaskStatusList'),
  taskType?: string(name='TaskType'),
  taskTypeList?: [ string ](name='TaskTypeList'),
}

model ListAsyncTasksShrinkRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='cd327c3d5d5e44159cc716e23bfa530e_p_beebot_public'),
  createTimeEnd?: string(name='CreateTimeEnd', example='2023-03-18 02:00:00'),
  createTimeStart?: string(name='CreateTimeStart', example='2023-02-19 07:28:11'),
  current?: int32(name='Current', example='1'),
  size?: int32(name='Size', example='10'),
  taskCode?: string(name='TaskCode', example='MaterialDocumentUpload'),
  taskName?: string(name='TaskName'),
  taskStatus?: int32(name='TaskStatus', example='1'),
  taskStatusListShrink?: string(name='TaskStatusList'),
  taskType?: string(name='TaskType'),
  taskTypeListShrink?: string(name='TaskTypeList'),
}

model ListAsyncTasksResponseBody = {
  code?: string(name='Code', example='200'),
  current?: int32(name='Current', example='1'),
  data?: [ 
    {
      createTime?: string(name='CreateTime', example='2020-12-23 15:41:58'),
      createUser?: string(name='CreateUser', example='1111'),
      id?: long(name='Id', example='1'),
      taskCode?: string(name='TaskCode', example='MaterialDocumentUpload'),
      taskDefinition?: string(name='TaskDefinition', example='{}'),
      taskEndTime?: string(name='TaskEndTime', example='2023-03-09 00:00:00'),
      taskErrorMessage?: string(name='TaskErrorMessage'),
      taskExecuteTime?: string(name='TaskExecuteTime', example='2023-10-14 14:30:00'),
      taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
      taskInnerErrorMessage?: string(name='TaskInnerErrorMessage'),
      taskIntermediateResult?: string(name='TaskIntermediateResult', example='{}'),
      taskName?: string(name='TaskName'),
      taskParam?: string(name='TaskParam', example='{}'),
      taskProgressMessage?: string(name='TaskProgressMessage', example='{}'),
      taskResult?: string(name='TaskResult', example='{}'),
      taskRetryCount?: string(name='TaskRetryCount', example='1'),
      taskStartTime?: string(name='TaskStartTime', example='2023-03-20 10:53:00'),
      taskStatus?: int32(name='TaskStatus', example='1'),
      taskType?: string(name='TaskType', example='test'),
      updateTime?: string(name='UpdateTime', example='2023-02-16 10:29:16'),
      updateUser?: string(name='UpdateUser', example='111'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='428DCC0D-3C63-5306-BD1B-124396AB97BE'),
  size?: int32(name='Size', example='10'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='20'),
}

model ListAsyncTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAsyncTasksResponseBody(name='body'),
}

/**
 * @summary 查询任务列表
 *
 * @param tmpReq ListAsyncTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAsyncTasksResponse
 */
async function listAsyncTasksWithOptions(tmpReq: ListAsyncTasksRequest, runtime: Util.RuntimeOptions): ListAsyncTasksResponse {
  Util.validateModel(tmpReq);
  var request = new ListAsyncTasksShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.taskStatusList)) {
    request.taskStatusListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.taskStatusList, 'TaskStatusList', 'json');
  }
  if (!Util.isUnset(tmpReq.taskTypeList)) {
    request.taskTypeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.taskTypeList, 'TaskTypeList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.createTimeEnd)) {
    body['CreateTimeEnd'] = request.createTimeEnd;
  }
  if (!Util.isUnset(request.createTimeStart)) {
    body['CreateTimeStart'] = request.createTimeStart;
  }
  if (!Util.isUnset(request.current)) {
    body['Current'] = request.current;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.taskCode)) {
    body['TaskCode'] = request.taskCode;
  }
  if (!Util.isUnset(request.taskName)) {
    body['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.taskStatus)) {
    body['TaskStatus'] = request.taskStatus;
  }
  if (!Util.isUnset(request.taskStatusListShrink)) {
    body['TaskStatusList'] = request.taskStatusListShrink;
  }
  if (!Util.isUnset(request.taskType)) {
    body['TaskType'] = request.taskType;
  }
  if (!Util.isUnset(request.taskTypeListShrink)) {
    body['TaskTypeList'] = request.taskTypeListShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListAsyncTasks',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询任务列表
 *
 * @param request ListAsyncTasksRequest
 * @return ListAsyncTasksResponse
 */
async function listAsyncTasks(request: ListAsyncTasksRequest): ListAsyncTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAsyncTasksWithOptions(request, runtime);
}

model ListBuildConfigsRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='cd327c3d5d5e44159cc716e23bfa530e_p_beebot_public'),
  regionId?: string(name='RegionId'),
  type?: string(name='Type', example='media'),
}

model ListBuildConfigsResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      buildIn?: boolean(name='BuildIn', example='true'),
      createTime?: string(name='CreateTime', example='2023-04-11 06:14:07'),
      createUser?: string(name='CreateUser', example='1'),
      id?: long(name='Id'),
      keywords?: [ 
        {
          description?: string(name='Description'),
          key?: string(name='Key'),
        }
      ](name='Keywords'),
      tag?: string(name='Tag', example='writingStyle'),
      tagDescription?: string(name='TagDescription'),
      type?: string(name='Type', example='media'),
      updateTime?: string(name='UpdateTime', example='2023-04-11 06:14:07'),
      updateUser?: string(name='UpdateUser', example='1'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='DA021073-17CE-5CCF-9FEB-93226C766887'),
  success?: boolean(name='Success', example='true'),
}

model ListBuildConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBuildConfigsResponseBody(name='body'),
}

/**
 * @summary 获取系统自定义预设
 *
 * @param request ListBuildConfigsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListBuildConfigsResponse
 */
async function listBuildConfigsWithOptions(request: ListBuildConfigsRequest, runtime: Util.RuntimeOptions): ListBuildConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListBuildConfigs',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取系统自定义预设
 *
 * @param request ListBuildConfigsRequest
 * @return ListBuildConfigsResponse
 */
async function listBuildConfigs(request: ListBuildConfigsRequest): ListBuildConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBuildConfigsWithOptions(request, runtime);
}

model ListCustomTextRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm'),
  commodityCode?: string(name='CommodityCode', example='商品code'),
}

model ListCustomTextResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: [ 
    {
      content?: string(name='Content', example='内容'),
      createTime?: string(name='CreateTime', example='创建时间'),
      createUser?: string(name='CreateUser', example='创建用户'),
      id?: long(name='Id', example='40'),
      title?: string(name='Title', example='标题'),
      updateTime?: string(name='UpdateTime', example='修改时间'),
      updateUser?: string(name='UpdateUser', example='修改用户'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model ListCustomTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCustomTextResponseBody(name='body'),
}

/**
 * @summary 自定义文本列表
 *
 * @param request ListCustomTextRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCustomTextResponse
 */
async function listCustomTextWithOptions(request: ListCustomTextRequest, runtime: Util.RuntimeOptions): ListCustomTextResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.commodityCode)) {
    body['CommodityCode'] = request.commodityCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListCustomText',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 自定义文本列表
 *
 * @param request ListCustomTextRequest
 * @return ListCustomTextResponse
 */
async function listCustomText(request: ListCustomTextRequest): ListCustomTextResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCustomTextWithOptions(request, runtime);
}

model ListDialoguesRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm'),
  current?: int32(name='Current', example='1'),
  dialogueType?: int32(name='DialogueType', example='2'),
  endTime?: string(name='EndTime', example='2024-01-04 11:46:07'),
  size?: int32(name='Size', example='10'),
  startTime?: string(name='StartTime', example='2024-01-04 11:46:07'),
  taskId?: string(name='TaskId', example='xxx'),
}

model ListDialoguesResponseBody = {
  code?: string(name='Code', example='NoData'),
  current?: int32(name='Current', example='1'),
  data?: [ 
    {
      bot?: string(name='Bot', example='xx'),
      createTime?: string(name='CreateTime', example='2024-01-04 11:46:07'),
      createUser?: string(name='CreateUser', example='xx'),
      dialogueType?: int32(name='DialogueType', example='2'),
      taskId?: string(name='TaskId', example='xx'),
      user?: string(name='User', example='x'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  size?: int32(name='Size', example='10'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='100'),
}

model ListDialoguesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDialoguesResponseBody(name='body'),
}

/**
 * @summary 生成历史列表
 *
 * @param request ListDialoguesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDialoguesResponse
 */
async function listDialoguesWithOptions(request: ListDialoguesRequest, runtime: Util.RuntimeOptions): ListDialoguesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.current)) {
    body['Current'] = request.current;
  }
  if (!Util.isUnset(request.dialogueType)) {
    body['DialogueType'] = request.dialogueType;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDialogues',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 生成历史列表
 *
 * @param request ListDialoguesRequest
 * @return ListDialoguesResponse
 */
async function listDialogues(request: ListDialoguesRequest): ListDialoguesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDialoguesWithOptions(request, runtime);
}

model ListGeneratedContentsRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm'),
  contentDomain?: string(name='ContentDomain', example='media'),
  current?: int32(name='Current', example='1'),
  endTime?: string(name='EndTime', example='2024-01-04 11:46:07'),
  query?: string(name='Query'),
  size?: int32(name='Size', example='10'),
  startTime?: string(name='StartTime', example='2024-01-04 11:46:07'),
  taskId?: string(name='TaskId'),
  title?: string(name='Title'),
}

model ListGeneratedContentsResponseBody = {
  code?: string(name='Code', example='NoData'),
  current?: int32(name='Current', example='1'),
  data?: [ 
    {
      content?: string(name='Content'),
      contentDomain?: string(name='ContentDomain', example='media'),
      contentText?: string(name='ContentText'),
      createTime?: string(name='CreateTime', example='2024-01-04 11:46:07'),
      createUser?: string(name='CreateUser', example='123'),
      deviceId?: string(name='DeviceId', example='xxx'),
      id?: long(name='Id', example='10'),
      keywordList?: [ string ](name='KeywordList'),
      keywords?: string(name='Keywords'),
      prompt?: string(name='Prompt'),
      taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
      title?: string(name='Title'),
      updateTime?: string(name='UpdateTime', example='2024-01-04 11:46:07'),
      updateUser?: string(name='UpdateUser', example='1111'),
      uuid?: string(name='Uuid', example='xxx'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  size?: int32(name='Size', example='10'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='100'),
}

model ListGeneratedContentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGeneratedContentsResponseBody(name='body'),
}

/**
 * @summary 文档管理-列表。
 *
 * @param request ListGeneratedContentsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListGeneratedContentsResponse
 */
async function listGeneratedContentsWithOptions(request: ListGeneratedContentsRequest, runtime: Util.RuntimeOptions): ListGeneratedContentsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.contentDomain)) {
    body['ContentDomain'] = request.contentDomain;
  }
  if (!Util.isUnset(request.current)) {
    body['Current'] = request.current;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.query)) {
    body['Query'] = request.query;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListGeneratedContents',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 文档管理-列表。
 *
 * @param request ListGeneratedContentsRequest
 * @return ListGeneratedContentsResponse
 */
async function listGeneratedContents(request: ListGeneratedContentsRequest): ListGeneratedContentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGeneratedContentsWithOptions(request, runtime);
}

model ListHotNewsWithTypeRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='c160c841c8e54295bf2f441432785944_p_efm'),
  current?: int32(name='Current', example='1'),
  newsType?: string(name='NewsType', example='society'),
  newsTypes?: [ string ](name='NewsTypes'),
  size?: int32(name='Size', example='10'),
}

model ListHotNewsWithTypeShrinkRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='c160c841c8e54295bf2f441432785944_p_efm'),
  current?: int32(name='Current', example='1'),
  newsType?: string(name='NewsType', example='society'),
  newsTypesShrink?: string(name='NewsTypes'),
  size?: int32(name='Size', example='10'),
}

model ListHotNewsWithTypeResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: [ 
    {
      news?: [ 
        {
          author?: string(name='Author'),
          content?: string(name='Content'),
          docUuid?: string(name='DocUuid', example='3f7045e099474ba28ceca1b4eb6d6e21'),
          imageUrls?: [ string ](name='ImageUrls'),
          pubTime?: string(name='PubTime', example='2023-04-11 06:14:07'),
          searchSource?: string(name='SearchSource'),
          searchSourceName?: string(name='SearchSourceName'),
          source?: string(name='Source'),
          summary?: string(name='Summary'),
          tag?: string(name='Tag'),
          title?: string(name='Title'),
          updateTime?: string(name='UpdateTime', example='2023-10-14 14:30:00'),
          url?: string(name='Url', example='http://xxxxx/xxx'),
        }
      ](name='News'),
      newsType?: string(name='NewsType', example='society'),
      newsTypeName?: string(name='NewsTypeName'),
      totalPages?: int32(name='TotalPages', example='77'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model ListHotNewsWithTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHotNewsWithTypeResponseBody(name='body'),
}

/**
 * @summary 获取分类的热点新闻
 *
 * @param tmpReq ListHotNewsWithTypeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListHotNewsWithTypeResponse
 */
async function listHotNewsWithTypeWithOptions(tmpReq: ListHotNewsWithTypeRequest, runtime: Util.RuntimeOptions): ListHotNewsWithTypeResponse {
  Util.validateModel(tmpReq);
  var request = new ListHotNewsWithTypeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.newsTypes)) {
    request.newsTypesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.newsTypes, 'NewsTypes', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.current)) {
    body['Current'] = request.current;
  }
  if (!Util.isUnset(request.newsType)) {
    body['NewsType'] = request.newsType;
  }
  if (!Util.isUnset(request.newsTypesShrink)) {
    body['NewsTypes'] = request.newsTypesShrink;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListHotNewsWithType',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取分类的热点新闻
 *
 * @param request ListHotNewsWithTypeRequest
 * @return ListHotNewsWithTypeResponse
 */
async function listHotNewsWithType(request: ListHotNewsWithTypeRequest): ListHotNewsWithTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHotNewsWithTypeWithOptions(request, runtime);
}

model ListInterveneCntRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='fcb14f25c9ee41ccad33a049de8f941b_p_outbound_public'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListInterveneCntResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    cntList?: [ any ](name='CntList'),
    pageCnt?: int32(name='PageCnt', example='10'),
    pageIndex?: int32(name='PageIndex', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model ListInterveneCntResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInterveneCntResponseBody(name='body'),
}

/**
 * @summary 获得干预项目数量列表
 *
 * @param request ListInterveneCntRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListInterveneCntResponse
 */
async function listInterveneCntWithOptions(request: ListInterveneCntRequest, runtime: Util.RuntimeOptions): ListInterveneCntResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageIndex)) {
    body['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListInterveneCnt',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获得干预项目数量列表
 *
 * @param request ListInterveneCntRequest
 * @return ListInterveneCntResponse
 */
async function listInterveneCnt(request: ListInterveneCntRequest): ListInterveneCntResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInterveneCntWithOptions(request, runtime);
}

model ListInterveneImportTasksRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
}

model ListInterveneImportTasksResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: {
    pageIndex?: int32(name='PageIndex', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    statusList?: [ 
      {
        msg?: string(name='Msg', example='Success'),
        percentage?: int32(name='Percentage', example='5'),
        status?: int32(name='Status', example='Success'),
        taskId?: string(name='TaskId', example='4854'),
        taskName?: string(name='TaskName', example='12344454'),
      }
    ](name='StatusList'),
    totalSize?: int32(name='TotalSize', example='0'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model ListInterveneImportTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInterveneImportTasksResponseBody(name='body'),
}

/**
 * @summary 获得导入任务列表
 *
 * @param request ListInterveneImportTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListInterveneImportTasksResponse
 */
async function listInterveneImportTasksWithOptions(request: ListInterveneImportTasksRequest, runtime: Util.RuntimeOptions): ListInterveneImportTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageIndex)) {
    body['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListInterveneImportTasks',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获得导入任务列表
 *
 * @param request ListInterveneImportTasksRequest
 * @return ListInterveneImportTasksResponse
 */
async function listInterveneImportTasks(request: ListInterveneImportTasksRequest): ListInterveneImportTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInterveneImportTasksWithOptions(request, runtime);
}

model ListInterveneRulesRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='c160c841c8e54295bf2f441432785944_p_efm'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListInterveneRulesResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    count?: long(name='Count', example='1'),
    interveneRuleList?: [ 
      {
        answerConfig?: [ 
          {
            answerType?: int32(name='AnswerType', example='0'),
            message?: string(name='Message'),
            namespace?: string(name='Namespace', example='namespace_qa_query'),
          }
        ](name='AnswerConfig'),
        createTime?: string(name='CreateTime', example='2023-06-05 15:17:01'),
        effectTime?: string(name='EffectTime', example='2023-04-03 02:42:01'),
        interveneType?: int32(name='InterveneType', example='0'),
        namespaceList?: [ string ](name='NamespaceList'),
        ruleId?: long(name='RuleId', example='mr-iuo9pi9w555phfbb'),
        ruleName?: string(name='RuleName', example='ruletest'),
      }
    ](name='InterveneRuleList'),
    pageIndex?: int32(name='PageIndex', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='DA021073-17CE-5CCF-9FEB-93226C766887'),
  success?: boolean(name='Success', example='true'),
}

model ListInterveneRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInterveneRulesResponseBody(name='body'),
}

/**
 * @summary 获得干预规则列表
 *
 * @param request ListInterveneRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListInterveneRulesResponse
 */
async function listInterveneRulesWithOptions(request: ListInterveneRulesRequest, runtime: Util.RuntimeOptions): ListInterveneRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageIndex)) {
    body['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListInterveneRules',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获得干预规则列表
 *
 * @param request ListInterveneRulesRequest
 * @return ListInterveneRulesResponse
 */
async function listInterveneRules(request: ListInterveneRulesRequest): ListInterveneRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInterveneRulesWithOptions(request, runtime);
}

model ListIntervenesRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='33a2658aaabf4c24b45d50e575125311_p_beebot_public'),
  interveneType?: int32(name='InterveneType'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  query?: string(name='Query'),
  ruleId?: long(name='RuleId', example='mqtt_outRule_1679019634514'),
}

model ListIntervenesResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    interveneList?: [ 
      {
        id?: string(name='Id', description='id', example='36559'),
        query?: string(name='Query'),
      }
    ](name='InterveneList'),
    pageIndex?: int32(name='PageIndex', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalSize?: long(name='TotalSize', example='1'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='428DCC0D-3C63-5306-BD1B-124396AB97BE'),
  success?: boolean(name='Success', example='true'),
}

model ListIntervenesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIntervenesResponseBody(name='body'),
}

/**
 * @summary 获得干预项列表
 *
 * @param request ListIntervenesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListIntervenesResponse
 */
async function listIntervenesWithOptions(request: ListIntervenesRequest, runtime: Util.RuntimeOptions): ListIntervenesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.interveneType)) {
    body['InterveneType'] = request.interveneType;
  }
  if (!Util.isUnset(request.pageIndex)) {
    body['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.query)) {
    body['Query'] = request.query;
  }
  if (!Util.isUnset(request.ruleId)) {
    body['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListIntervenes',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获得干预项列表
 *
 * @param request ListIntervenesRequest
 * @return ListIntervenesResponse
 */
async function listIntervenes(request: ListIntervenesRequest): ListIntervenesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIntervenesWithOptions(request, runtime);
}

model ListMaterialDocumentsRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='33a2658aaabf4c24b45d50e575125311_p_beebot_public'),
  content?: string(name='Content'),
  createTimeEnd?: string(name='CreateTimeEnd', example='2023-03-18 02:00:00'),
  createTimeStart?: string(name='CreateTimeStart', example='2023-02-19 07:28:11'),
  current?: int32(name='Current', example='1'),
  docType?: string(name='DocType', example='jsonLine'),
  docTypeList?: [ string ](name='DocTypeList', example='excel'),
  generatePublicUrl?: boolean(name='GeneratePublicUrl', example='true'),
  id?: long(name='Id', example='69'),
  keywords?: [ string ](name='Keywords'),
  query?: string(name='Query'),
  shareAttr?: int32(name='ShareAttr', example='1'),
  size?: int32(name='Size', example='10'),
  title?: string(name='Title'),
  updateTimeEnd?: string(name='UpdateTimeEnd', example='2023-03-18 03:00:00'),
  updateTimeStart?: string(name='UpdateTimeStart', example='2023-03-18 02:00:00'),
}

model ListMaterialDocumentsShrinkRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='33a2658aaabf4c24b45d50e575125311_p_beebot_public'),
  content?: string(name='Content'),
  createTimeEnd?: string(name='CreateTimeEnd', example='2023-03-18 02:00:00'),
  createTimeStart?: string(name='CreateTimeStart', example='2023-02-19 07:28:11'),
  current?: int32(name='Current', example='1'),
  docType?: string(name='DocType', example='jsonLine'),
  docTypeListShrink?: string(name='DocTypeList', example='excel'),
  generatePublicUrl?: boolean(name='GeneratePublicUrl', example='true'),
  id?: long(name='Id', example='69'),
  keywordsShrink?: string(name='Keywords'),
  query?: string(name='Query'),
  shareAttr?: int32(name='ShareAttr', example='1'),
  size?: int32(name='Size', example='10'),
  title?: string(name='Title'),
  updateTimeEnd?: string(name='UpdateTimeEnd', example='2023-03-18 03:00:00'),
  updateTimeStart?: string(name='UpdateTimeStart', example='2023-03-18 02:00:00'),
}

model ListMaterialDocumentsResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  current?: int32(name='Current', example='1'),
  data?: [ 
    {
      author?: string(name='Author'),
      createTime?: string(name='CreateTime', example='2023-03-18 02:00:00'),
      createUser?: string(name='CreateUser', example='1'),
      createUserName?: string(name='CreateUserName'),
      docKeywords?: [ string ](name='DocKeywords'),
      docType?: string(name='DocType', example='pdf'),
      externalUrl?: string(name='ExternalUrl', example='https://www.example.com'),
      htmlContent?: string(name='HtmlContent'),
      id?: long(name='Id', example='35'),
      pubTime?: string(name='PubTime', example='2023-03-18 02:00:00'),
      publicUrl?: string(name='PublicUrl', example='https://www.example.com'),
      shareAttr?: int32(name='ShareAttr', example='1'),
      srcFrom?: string(name='SrcFrom', example='user_upload'),
      summary?: string(name='Summary'),
      textContent?: string(name='TextContent'),
      thumbnailInBase64?: string(name='ThumbnailInBase64'),
      title?: string(name='Title'),
      updateTime?: string(name='UpdateTime', example='2023-03-18 02:00:00'),
      updateUser?: string(name='UpdateUser', example='1'),
      updateUserName?: string(name='UpdateUserName'),
      url?: string(name='Url', example='https://www.example.com'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  size?: int32(name='Size', example='10'),
  success?: boolean(name='Success', example='false'),
  total?: int32(name='Total', example='100'),
}

model ListMaterialDocumentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMaterialDocumentsResponseBody(name='body'),
}

/**
 * @summary 查询素材列表
 *
 * @param tmpReq ListMaterialDocumentsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListMaterialDocumentsResponse
 */
async function listMaterialDocumentsWithOptions(tmpReq: ListMaterialDocumentsRequest, runtime: Util.RuntimeOptions): ListMaterialDocumentsResponse {
  Util.validateModel(tmpReq);
  var request = new ListMaterialDocumentsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.docTypeList)) {
    request.docTypeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.docTypeList, 'DocTypeList', 'json');
  }
  if (!Util.isUnset(tmpReq.keywords)) {
    request.keywordsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.keywords, 'Keywords', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.createTimeEnd)) {
    body['CreateTimeEnd'] = request.createTimeEnd;
  }
  if (!Util.isUnset(request.createTimeStart)) {
    body['CreateTimeStart'] = request.createTimeStart;
  }
  if (!Util.isUnset(request.current)) {
    body['Current'] = request.current;
  }
  if (!Util.isUnset(request.docType)) {
    body['DocType'] = request.docType;
  }
  if (!Util.isUnset(request.docTypeListShrink)) {
    body['DocTypeList'] = request.docTypeListShrink;
  }
  if (!Util.isUnset(request.generatePublicUrl)) {
    body['GeneratePublicUrl'] = request.generatePublicUrl;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.keywordsShrink)) {
    body['Keywords'] = request.keywordsShrink;
  }
  if (!Util.isUnset(request.query)) {
    body['Query'] = request.query;
  }
  if (!Util.isUnset(request.shareAttr)) {
    body['ShareAttr'] = request.shareAttr;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }
  if (!Util.isUnset(request.updateTimeEnd)) {
    body['UpdateTimeEnd'] = request.updateTimeEnd;
  }
  if (!Util.isUnset(request.updateTimeStart)) {
    body['UpdateTimeStart'] = request.updateTimeStart;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListMaterialDocuments',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询素材列表
 *
 * @param request ListMaterialDocumentsRequest
 * @return ListMaterialDocumentsResponse
 */
async function listMaterialDocuments(request: ListMaterialDocumentsRequest): ListMaterialDocumentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMaterialDocumentsWithOptions(request, runtime);
}

model ListVersionsRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='33a2658aaabf4c24b45d50e575125311_p_beebot_public'),
}

model ListVersionsResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: [ 
    {
      concurrentCount?: int32(name='ConcurrentCount', example='43'),
      endTime?: string(name='EndTime', example='2023-04-23 02:00:34'),
      instanceCount?: int32(name='InstanceCount', example='55'),
      instanceId?: string(name='InstanceId', example='ga-bp12pismsw4v3tzhf62p1'),
      orderId?: long(name='OrderId', example='7'),
      productType?: string(name='ProductType', example='CUSTOMIZE'),
      quota?: int32(name='Quota', example='13'),
      startTime?: string(name='StartTime', example='2023-05-27 04:11:00'),
      useQuota?: int32(name='UseQuota', example='65'),
      versionDetail?: string(name='VersionDetail'),
      versionName?: string(name='VersionName', example='试用版'),
      versionStatus?: int32(name='VersionStatus', example='87'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model ListVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVersionsResponseBody(name='body'),
}

/**
 * @summary 获取系统所有实例信息
 *
 * @param request ListVersionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListVersionsResponse
 */
async function listVersionsWithOptions(request: ListVersionsRequest, runtime: Util.RuntimeOptions): ListVersionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVersions',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取系统所有实例信息
 *
 * @param request ListVersionsRequest
 * @return ListVersionsResponse
 */
async function listVersions(request: ListVersionsRequest): ListVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVersionsWithOptions(request, runtime);
}

model QueryAsyncTaskRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='33a2658aaabf4c24b45d50e575125311_p_beebot_public'),
  taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
}

model QueryAsyncTaskResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    createTime?: string(name='CreateTime', example='2021-07-25 14:34:33'),
    createUser?: string(name='CreateUser', example='12121'),
    taskCode?: string(name='TaskCode', example='MaterialDocumentUpload'),
    taskErrorMessage?: string(name='TaskErrorMessage', example='error'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    taskIntermediateResult?: string(name='TaskIntermediateResult', example='{}'),
    taskName?: string(name='TaskName'),
    taskParam?: string(name='TaskParam', example='{"fileKey":"oss://default/xxxx/xxxx/xxx","fileName":"xxxxx.doc"}'),
    taskProgressMessage?: string(name='TaskProgressMessage', example='{}'),
    taskResult?: string(name='TaskResult', example='{}'),
    taskRetryCount?: string(name='TaskRetryCount', example='3'),
    taskStatus?: int32(name='TaskStatus', example='1'),
    updateTime?: string(name='UpdateTime', example='2023-04-27 18:07:43'),
    updateUser?: string(name='UpdateUser', example='12121'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='867C4ABE-4381-5BC2-9810-5A5F334F71CF'),
  success?: boolean(name='Success', example='True'),
}

model QueryAsyncTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAsyncTaskResponseBody(name='body'),
}

/**
 * @summary 根据taskId查询异步任务状态
 *
 * @param request QueryAsyncTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryAsyncTaskResponse
 */
async function queryAsyncTaskWithOptions(request: QueryAsyncTaskRequest, runtime: Util.RuntimeOptions): QueryAsyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryAsyncTask',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 根据taskId查询异步任务状态
 *
 * @param request QueryAsyncTaskRequest
 * @return QueryAsyncTaskResponse
 */
async function queryAsyncTask(request: QueryAsyncTaskRequest): QueryAsyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAsyncTaskWithOptions(request, runtime);
}

model RunAbbreviationContentRequest {
  content?: string(name='Content', description='This parameter is required.', example='创新政务社交媒体功能。鼓励各地区、各部门结合实际，开发政务社交媒体的特色功能，如在线咨询服务、政策解读、互动问答等，增强政务社交媒体的互动性和实用性，提升公众参与度。'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='llm-2setzb9x4ewsd'),
}

model RunAbbreviationContentResponseBody = {
  end?: boolean(name='End'),
  header?: {
    errorCode?: string(name='ErrorCode', example='403'),
    errorMessage?: string(name='ErrorMessage', example='Pop sign mismatch, please check.'),
    event?: string(name='Event', example='result-generated'),
    eventInfo?: string(name='EventInfo', example='模型生成事件'),
    sessionId?: string(name='SessionId', example='3cd10828-0e42-471c-8f1a-931cde20b035'),
    taskId?: string(name='TaskId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
    traceId?: string(name='TraceId', example='2150451a17191950923411783e2927'),
  }(name='Header'),
  payload?: {
    output?: {
      text?: string(name='Text', example='这是测试输出'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='100'),
      outputTokens?: long(name='OutputTokens', example='100'),
      totalTokens?: long(name='TotalTokens', example='200'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
}

model RunAbbreviationContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunAbbreviationContentResponseBody(name='body'),
}

/**
 * @summary 内容缩写
 *
 * @param request RunAbbreviationContentRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RunAbbreviationContentResponse
 */
async function runAbbreviationContentWithOptions(request: RunAbbreviationContentRequest, runtime: Util.RuntimeOptions): RunAbbreviationContentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunAbbreviationContent',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 内容缩写
 *
 * @param request RunAbbreviationContentRequest
 * @return RunAbbreviationContentResponse
 */
async function runAbbreviationContent(request: RunAbbreviationContentRequest): RunAbbreviationContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return runAbbreviationContentWithOptions(request, runtime);
}

model RunContinueContentRequest {
  content?: string(name='Content', description='This parameter is required.', example='创新政务社交媒体功能。鼓励各地区、各部门结合实际，开发政务社交媒体的特色功能，如在线咨询服务、政策解读、互动问答等，增强政务社交媒体的互动性和实用性，提升公众参与度。'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='llm-2setzb9x4ewsd'),
}

model RunContinueContentResponseBody = {
  end?: boolean(name='End'),
  header?: {
    errorCode?: string(name='ErrorCode', example='403'),
    errorMessage?: string(name='ErrorMessage', example='Pop sign mismatch, please check.'),
    event?: string(name='Event', example='result-generated'),
    eventInfo?: string(name='EventInfo', example='模型生成事件'),
    sessionId?: string(name='SessionId', example='3cd10828-0e42-471c-8f1a-931cde20b035'),
    taskId?: string(name='TaskId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
    traceId?: string(name='TraceId', example='2150451a17191950923411783e2927'),
  }(name='Header'),
  payload?: {
    output?: {
      text?: string(name='Text', example='这是测试输出'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='100'),
      outputTokens?: long(name='OutputTokens', example='100'),
      totalTokens?: long(name='TotalTokens', example='200'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
}

model RunContinueContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunContinueContentResponseBody(name='body'),
}

/**
 * @summary 内容续写
 *
 * @param request RunContinueContentRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RunContinueContentResponse
 */
async function runContinueContentWithOptions(request: RunContinueContentRequest, runtime: Util.RuntimeOptions): RunContinueContentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunContinueContent',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 内容续写
 *
 * @param request RunContinueContentRequest
 * @return RunContinueContentResponse
 */
async function runContinueContent(request: RunContinueContentRequest): RunContinueContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return runContinueContentWithOptions(request, runtime);
}

model RunExpandContentRequest {
  content?: string(name='Content', description='This parameter is required.', example='创新政务社交媒体功能。鼓励各地区、各部门结合实际，开发政务社交媒体的特色功能，如在线咨询服务、政策解读、互动问答等，增强政务社交媒体的互动性和实用性，提升公众参与度。'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='llm-2setzb9x4ewsd'),
}

model RunExpandContentResponseBody = {
  end?: boolean(name='End'),
  header?: {
    errorCode?: string(name='ErrorCode', example='403'),
    errorMessage?: string(name='ErrorMessage', example='Pop sign mismatch, please check.'),
    event?: string(name='Event', example='result-generated'),
    eventInfo?: string(name='EventInfo', example='模型生成事件'),
    sessionId?: string(name='SessionId', example='3cd10828-0e42-471c-8f1a-931cde20b035'),
    taskId?: string(name='TaskId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
    traceId?: string(name='TraceId', example='2150451a17191950923411783e2927'),
  }(name='Header'),
  payload?: {
    output?: {
      text?: string(name='Text', example='这是测试输出'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='100'),
      outputTokens?: long(name='OutputTokens', example='100'),
      totalTokens?: long(name='TotalTokens', example='200'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
}

model RunExpandContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunExpandContentResponseBody(name='body'),
}

/**
 * @summary 内容扩写
 *
 * @param request RunExpandContentRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RunExpandContentResponse
 */
async function runExpandContentWithOptions(request: RunExpandContentRequest, runtime: Util.RuntimeOptions): RunExpandContentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunExpandContent',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 内容扩写
 *
 * @param request RunExpandContentRequest
 * @return RunExpandContentResponse
 */
async function runExpandContent(request: RunExpandContentRequest): RunExpandContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return runExpandContentWithOptions(request, runtime);
}

model RunKeywordsExtractionGenerationRequest {
  referenceData?: {
    contents?: [ string ](name='Contents', description='This parameter is required.'),
  }(name='ReferenceData', description='This parameter is required.'),
  taskId?: string(name='TaskId', example='xxx'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='llm-xxx'),
}

model RunKeywordsExtractionGenerationShrinkRequest {
  referenceDataShrink?: string(name='ReferenceData', description='This parameter is required.'),
  taskId?: string(name='TaskId', example='xxx'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='llm-xxx'),
}

model RunKeywordsExtractionGenerationResponseBody = {
  header?: {
    errorCode?: string(name='ErrorCode', example='AccessForbid'),
    errorMessage?: string(name='ErrorMessage', example='xx'),
    event?: string(name='Event', example='task-failed'),
    sessionId?: string(name='SessionId', example='1a3d7c9f-3a6d-4e49-b176-2d8721a27397'),
    taskId?: string(name='TaskId', example='8d55b429d7c6d321fcff54823e8d317b'),
    traceId?: string(name='TraceId', example='210bc4e817219607963985396de8bd'),
  }(name='Header'),
  payload?: {
    output?: {
      text?: string(name='Text', example='xxx'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='1'),
      outputTokens?: long(name='OutputTokens', example='1'),
      totalTokens?: long(name='TotalTokens', example='2'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='419F3FBE-5C8D-5949-AC29-E9615235D15A'),
}

model RunKeywordsExtractionGenerationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunKeywordsExtractionGenerationResponseBody(name='body'),
}

/**
 * @summary AI妙笔-创作-抽取关键词
 *
 * @param tmpReq RunKeywordsExtractionGenerationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RunKeywordsExtractionGenerationResponse
 */
async function runKeywordsExtractionGenerationWithOptions(tmpReq: RunKeywordsExtractionGenerationRequest, runtime: Util.RuntimeOptions): RunKeywordsExtractionGenerationResponse {
  Util.validateModel(tmpReq);
  var request = new RunKeywordsExtractionGenerationShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.referenceData)) {
    request.referenceDataShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.referenceData, 'ReferenceData', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.referenceDataShrink)) {
    body['ReferenceData'] = request.referenceDataShrink;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunKeywordsExtractionGeneration',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary AI妙笔-创作-抽取关键词
 *
 * @param request RunKeywordsExtractionGenerationRequest
 * @return RunKeywordsExtractionGenerationResponse
 */
async function runKeywordsExtractionGeneration(request: RunKeywordsExtractionGenerationRequest): RunKeywordsExtractionGenerationResponse {
  var runtime = new Util.RuntimeOptions{};
  return runKeywordsExtractionGenerationWithOptions(request, runtime);
}

model RunStyleFeatureAnalysisRequest {
  contents?: [ string ](name='Contents'),
  materialIds?: [ long ](name='MaterialIds'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='llm-2setzb9x4ewsd'),
}

model RunStyleFeatureAnalysisShrinkRequest {
  contentsShrink?: string(name='Contents'),
  materialIdsShrink?: string(name='MaterialIds'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='llm-2setzb9x4ewsd'),
}

model RunStyleFeatureAnalysisResponseBody = {
  end?: boolean(name='End'),
  header?: {
    errorCode?: string(name='ErrorCode', example='403'),
    errorMessage?: string(name='ErrorMessage', example='Pop sign mismatch, please check.'),
    event?: string(name='Event', example='result-generated'),
    eventInfo?: string(name='EventInfo', example='模型生成事件'),
    sessionId?: string(name='SessionId', example='3cd10828-0e42-471c-8f1a-931cde20b035'),
    taskId?: string(name='TaskId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
    traceId?: string(name='TraceId', example='2150451a17191950923411783e2927'),
  }(name='Header'),
  payload?: {
    output?: {
      text?: string(name='Text', example='这是测试输出'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='100'),
      outputTokens?: long(name='OutputTokens', example='100'),
      totalTokens?: long(name='TotalTokens', example='200'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
}

model RunStyleFeatureAnalysisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunStyleFeatureAnalysisResponseBody(name='body'),
}

/**
 * @summary 内容特点分析
 *
 * @param tmpReq RunStyleFeatureAnalysisRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RunStyleFeatureAnalysisResponse
 */
async function runStyleFeatureAnalysisWithOptions(tmpReq: RunStyleFeatureAnalysisRequest, runtime: Util.RuntimeOptions): RunStyleFeatureAnalysisResponse {
  Util.validateModel(tmpReq);
  var request = new RunStyleFeatureAnalysisShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.contents)) {
    request.contentsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.contents, 'Contents', 'json');
  }
  if (!Util.isUnset(tmpReq.materialIds)) {
    request.materialIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.materialIds, 'MaterialIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.contentsShrink)) {
    body['Contents'] = request.contentsShrink;
  }
  if (!Util.isUnset(request.materialIdsShrink)) {
    body['MaterialIds'] = request.materialIdsShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunStyleFeatureAnalysis',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 内容特点分析
 *
 * @param request RunStyleFeatureAnalysisRequest
 * @return RunStyleFeatureAnalysisResponse
 */
async function runStyleFeatureAnalysis(request: RunStyleFeatureAnalysisRequest): RunStyleFeatureAnalysisResponse {
  var runtime = new Util.RuntimeOptions{};
  return runStyleFeatureAnalysisWithOptions(request, runtime);
}

model RunSummaryGenerateRequest {
  content?: string(name='Content', description='This parameter is required.', example='创新政务社交媒体功能。鼓励各地区、各部门结合实际，开发政务社交媒体的特色功能，如在线咨询服务、政策解读、互动问答等，增强政务社交媒体的互动性和实用性，提升公众参与度。'),
  prompt?: string(name='Prompt', example='请为上述内容生成一段摘要，字数在100~200字以内。'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='llm-2setzb9x4ewsd'),
}

model RunSummaryGenerateResponseBody = {
  end?: boolean(name='End'),
  header?: {
    errorCode?: string(name='ErrorCode', example='403'),
    errorMessage?: string(name='ErrorMessage', example='Pop sign mismatch, please check.'),
    event?: string(name='Event', example='result-generated'),
    eventInfo?: string(name='EventInfo', example='模型生成事件'),
    sessionId?: string(name='SessionId', example='3cd10828-0e42-471c-8f1a-931cde20b035'),
    taskId?: string(name='TaskId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
    traceId?: string(name='TraceId', example='2150451a17191950923411783e2927'),
  }(name='Header'),
  payload?: {
    output?: {
      text?: string(name='Text', example='这是测试输出'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='100'),
      outputTokens?: long(name='OutputTokens', example='100'),
      totalTokens?: long(name='TotalTokens', example='200'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='d3be9981-ca2d-4e17-bf31-1c0a628e9f99'),
}

model RunSummaryGenerateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunSummaryGenerateResponseBody(name='body'),
}

/**
 * @summary 内容摘要生成
 *
 * @param request RunSummaryGenerateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RunSummaryGenerateResponse
 */
async function runSummaryGenerateWithOptions(request: RunSummaryGenerateRequest, runtime: Util.RuntimeOptions): RunSummaryGenerateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.prompt)) {
    body['Prompt'] = request.prompt;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunSummaryGenerate',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 内容摘要生成
 *
 * @param request RunSummaryGenerateRequest
 * @return RunSummaryGenerateResponse
 */
async function runSummaryGenerate(request: RunSummaryGenerateRequest): RunSummaryGenerateResponse {
  var runtime = new Util.RuntimeOptions{};
  return runSummaryGenerateWithOptions(request, runtime);
}

model RunTextPolishingRequest {
  content?: string(name='Content', description='This parameter is required.', example='文本内容'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='xxxx'),
}

model RunTextPolishingResponseBody = {
  header?: {
    errorCode?: string(name='ErrorCode', example='错误码'),
    errorMessage?: string(name='ErrorMessage', example='错误信息'),
    event?: string(name='Event', example='task-started'),
    originSessionId?: string(name='OriginSessionId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    sessionId?: string(name='SessionId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    traceId?: string(name='TraceId', example='全链路ID'),
  }(name='Header'),
  payload?: {
    output?: {
      text?: string(name='Text', example='文本生成结果'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='1'),
      outputTokens?: long(name='OutputTokens', example='1'),
      totalTokens?: long(name='TotalTokens', example='2'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
}

model RunTextPolishingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunTextPolishingResponseBody(name='body'),
}

/**
 * @summary 创作-文本润色
 *
 * @param request RunTextPolishingRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RunTextPolishingResponse
 */
async function runTextPolishingWithOptions(request: RunTextPolishingRequest, runtime: Util.RuntimeOptions): RunTextPolishingResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunTextPolishing',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创作-文本润色
 *
 * @param request RunTextPolishingRequest
 * @return RunTextPolishingResponse
 */
async function runTextPolishing(request: RunTextPolishingRequest): RunTextPolishingResponse {
  var runtime = new Util.RuntimeOptions{};
  return runTextPolishingWithOptions(request, runtime);
}

model RunTitleGenerationRequest {
  referenceData?: {
    contents?: [ string ](name='Contents', description='This parameter is required.'),
  }(name='ReferenceData', description='This parameter is required.'),
  taskId?: string(name='TaskId', example='xxxx'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='llm-xxx'),
}

model RunTitleGenerationShrinkRequest {
  referenceDataShrink?: string(name='ReferenceData', description='This parameter is required.'),
  taskId?: string(name='TaskId', example='xxxx'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='llm-xxx'),
}

model RunTitleGenerationResponseBody = {
  code?: string(name='Code'),
  header?: {
    errorCode?: string(name='ErrorCode', example='AccessForbid'),
    errorMessage?: string(name='ErrorMessage', example='xxx'),
    event?: string(name='Event', example='task-failed'),
    sessionId?: string(name='SessionId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    statusCode?: int32(name='StatusCode'),
    taskId?: string(name='TaskId', example='50a1cc8e-717e-4a2b-a76b-dc9734a8564b'),
    traceId?: string(name='TraceId', example='0a3d448f17000139741898287e0eb3'),
  }(name='Header'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  payload?: {
    output?: {
      text?: string(name='Text', example='xxx'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='1'),
      outputTokens?: long(name='OutputTokens', example='1'),
      totalTokens?: long(name='TotalTokens', example='2'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='94512A33-8EC1-5452-A793-5C91F18ED2F0'),
  success?: boolean(name='Success'),
}

model RunTitleGenerationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunTitleGenerationResponseBody(name='body'),
}

/**
 * @summary 妙笔：标题生成
 *
 * @param tmpReq RunTitleGenerationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RunTitleGenerationResponse
 */
async function runTitleGenerationWithOptions(tmpReq: RunTitleGenerationRequest, runtime: Util.RuntimeOptions): RunTitleGenerationResponse {
  Util.validateModel(tmpReq);
  var request = new RunTitleGenerationShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.referenceData)) {
    request.referenceDataShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.referenceData, 'ReferenceData', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.referenceDataShrink)) {
    body['ReferenceData'] = request.referenceDataShrink;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunTitleGeneration',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 妙笔：标题生成
 *
 * @param request RunTitleGenerationRequest
 * @return RunTitleGenerationResponse
 */
async function runTitleGeneration(request: RunTitleGenerationRequest): RunTitleGenerationResponse {
  var runtime = new Util.RuntimeOptions{};
  return runTitleGenerationWithOptions(request, runtime);
}

model RunTranslateGenerationRequest {
  prompt?: string(name='Prompt', description='This parameter is required.', example='toEnglish'),
  referenceData?: {
    contents?: [ string ](name='Contents', description='This parameter is required.'),
  }(name='ReferenceData', description='This parameter is required.'),
  taskId?: string(name='TaskId', example='xxx'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='llm-xxx'),
}

model RunTranslateGenerationShrinkRequest {
  prompt?: string(name='Prompt', description='This parameter is required.', example='toEnglish'),
  referenceDataShrink?: string(name='ReferenceData', description='This parameter is required.'),
  taskId?: string(name='TaskId', example='xxx'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='llm-xxx'),
}

model RunTranslateGenerationResponseBody = {
  header?: {
    errorCode?: string(name='ErrorCode', example='AccessForbid'),
    errorMessage?: string(name='ErrorMessage', example='xx'),
    event?: string(name='Event', example='task-failed'),
    sessionId?: string(name='SessionId', example='91C2B2B8-7D12-4A8D-A724-1E576D30C096'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    traceId?: string(name='TraceId', example='0abb781d17146157564845243e20b5'),
  }(name='Header'),
  payload?: {
    output?: {
      text?: string(name='Text', example='xx'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='1'),
      outputTokens?: long(name='OutputTokens', example='1'),
      totalTokens?: long(name='TotalTokens', example='2'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='DA021073-17CE-5CCF-9FEB-93226C766887'),
}

model RunTranslateGenerationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunTranslateGenerationResponseBody(name='body'),
}

/**
 * @summary AI妙笔-创作-中英文翻译
 *
 * @param tmpReq RunTranslateGenerationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RunTranslateGenerationResponse
 */
async function runTranslateGenerationWithOptions(tmpReq: RunTranslateGenerationRequest, runtime: Util.RuntimeOptions): RunTranslateGenerationResponse {
  Util.validateModel(tmpReq);
  var request = new RunTranslateGenerationShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.referenceData)) {
    request.referenceDataShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.referenceData, 'ReferenceData', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.prompt)) {
    body['Prompt'] = request.prompt;
  }
  if (!Util.isUnset(request.referenceDataShrink)) {
    body['ReferenceData'] = request.referenceDataShrink;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunTranslateGeneration',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary AI妙笔-创作-中英文翻译
 *
 * @param request RunTranslateGenerationRequest
 * @return RunTranslateGenerationResponse
 */
async function runTranslateGeneration(request: RunTranslateGenerationRequest): RunTranslateGenerationResponse {
  var runtime = new Util.RuntimeOptions{};
  return runTranslateGenerationWithOptions(request, runtime);
}

model RunWriteToneGenerationRequest {
  prompt?: string(name='Prompt', description='This parameter is required.'),
  referenceData?: {
    contents?: [ string ](name='Contents', description='This parameter is required.'),
  }(name='ReferenceData', description='This parameter is required.'),
  taskId?: string(name='TaskId', example='7AA2AE16-D873-5C5F-9708-15396C382EB1'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='llm-xxx'),
}

model RunWriteToneGenerationShrinkRequest {
  prompt?: string(name='Prompt', description='This parameter is required.'),
  referenceDataShrink?: string(name='ReferenceData', description='This parameter is required.'),
  taskId?: string(name='TaskId', example='7AA2AE16-D873-5C5F-9708-15396C382EB1'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='llm-xxx'),
}

model RunWriteToneGenerationResponseBody = {
  header?: {
    errorCode?: string(name='ErrorCode', example='AccessForbid'),
    errorMessage?: string(name='ErrorMessage', example='xxx'),
    event?: string(name='Event', example='task-failed'),
    sessionId?: string(name='SessionId', example='F1953EE6-157C-40DC-BBF1-87C98AC27C51'),
    taskId?: string(name='TaskId', example='F1953EE6-157C-40DC-BBF1-87C98AC27C51'),
    traceId?: string(name='TraceId', example='F1953EE6-157C-40DC-BBF1-87C98AC27C51'),
  }(name='Header'),
  payload?: {
    output?: {
      text?: string(name='Text', example='xxx'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='1'),
      outputTokens?: long(name='OutputTokens', example='1'),
      totalTokens?: long(name='TotalTokens', example='2'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='FB698445-61DA-5361-BF73-1C5F1157E888'),
}

model RunWriteToneGenerationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunWriteToneGenerationResponseBody(name='body'),
}

/**
 * @summary AI妙笔-创作-文风改写
 *
 * @param tmpReq RunWriteToneGenerationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RunWriteToneGenerationResponse
 */
async function runWriteToneGenerationWithOptions(tmpReq: RunWriteToneGenerationRequest, runtime: Util.RuntimeOptions): RunWriteToneGenerationResponse {
  Util.validateModel(tmpReq);
  var request = new RunWriteToneGenerationShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.referenceData)) {
    request.referenceDataShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.referenceData, 'ReferenceData', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.prompt)) {
    body['Prompt'] = request.prompt;
  }
  if (!Util.isUnset(request.referenceDataShrink)) {
    body['ReferenceData'] = request.referenceDataShrink;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunWriteToneGeneration',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary AI妙笔-创作-文风改写
 *
 * @param request RunWriteToneGenerationRequest
 * @return RunWriteToneGenerationResponse
 */
async function runWriteToneGeneration(request: RunWriteToneGenerationRequest): RunWriteToneGenerationResponse {
  var runtime = new Util.RuntimeOptions{};
  return runWriteToneGenerationWithOptions(request, runtime);
}

model RunWritingRequest {
  originSessionId?: string(name='OriginSessionId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  prompt?: string(name='Prompt', description='This parameter is required.', example='提示词'),
  referenceData?: {
    articles?: [ 
      {
        author?: string(name='Author', example='作者'),
        content?: string(name='Content', example='文章内容'),
        docId?: string(name='DocId', example='文档-自定义的唯一ID'),
        docUuid?: string(name='DocUuid', example='2124ca4d48a542d788aa86151e1a8c8b'),
        pubTime?: string(name='PubTime', example='2024-08-28 11:38:28'),
        source?: string(name='Source', example='央视网'),
        summary?: string(name='Summary', example='文章摘要'),
        tag?: string(name='Tag', example='文章标签'),
        title?: string(name='Title', example='文章标题'),
        url?: string(name='Url', example='https://www.example.com/aaa.docx'),
      }
    ](name='Articles'),
  }(name='ReferenceData'),
  sessionId?: string(name='SessionId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='xxxx'),
  writingConfig?: {
    domain?: string(name='Domain', example='写作领域，media:传媒,government:政务,market:营销'),
    promptTag?: {
      necessaryTips?: string(name='NecessaryTips', example='必要提示'),
      position?: string(name='Position', example='立场'),
      reverseWords?: string(name='ReverseWords', example='反向词'),
      theme?: string(name='Theme', example='主题'),
    }(name='PromptTag'),
    tags?: [ 
      {
        keyword?: string(name='Keyword', example='10'),
        tag?: string(name='Tag', example='gcNumberSizeTag'),
      }
    ](name='Tags'),
    useSearch?: boolean(name='UseSearch', example='true'),
  }(name='WritingConfig'),
}

model RunWritingShrinkRequest {
  originSessionId?: string(name='OriginSessionId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  prompt?: string(name='Prompt', description='This parameter is required.', example='提示词'),
  referenceDataShrink?: string(name='ReferenceData'),
  sessionId?: string(name='SessionId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  workspaceId?: string(name='WorkspaceId', description='This parameter is required.', example='xxxx'),
  writingConfigShrink?: string(name='WritingConfig'),
}

model RunWritingResponseBody = {
  header?: {
    errorCode?: string(name='ErrorCode', example='错误码'),
    errorMessage?: string(name='ErrorMessage', example='错误信息'),
    event?: string(name='Event', example='task-started'),
    originSessionId?: string(name='OriginSessionId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    sessionId?: string(name='SessionId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    statusCode?: int32(name='StatusCode', example='400'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    traceId?: string(name='TraceId', example='全链路ID'),
  }(name='Header'),
  payload?: {
    output?: {
      articles?: [ 
        {
          author?: string(name='Author', example='作者'),
          content?: string(name='Content', example='文章内容'),
          docId?: string(name='DocId', example='文档-自定义的唯一ID'),
          docUuid?: string(name='DocUuid', example='98229f6001cf4deeb1668191d4eccc75'),
          pubTime?: string(name='PubTime', example='2024-08-28 11:38:28'),
          source?: string(name='Source', example='央视网'),
          summary?: string(name='Summary', example='文章摘要'),
          tag?: string(name='Tag', example='文章标签'),
          title?: string(name='Title', example='文章标题'),
          url?: string(name='Url', example='https://www.example.com/aaa.docx'),
        }
      ](name='Articles'),
      miniDoc?: [ string ](name='MiniDoc', example='文章精排之后的片段'),
      searchQuery?: string(name='SearchQuery', example='大模型改变世界'),
      text?: string(name='Text', example='文本生成结果'),
    }(name='Output'),
    usage?: {
      inputTokens?: long(name='InputTokens', example='1'),
      outputTokens?: long(name='OutputTokens', example='1'),
      tokenMap?: map[string]long(name='TokenMap'),
      totalTokens?: long(name='TotalTokens', example='2'),
    }(name='Usage'),
  }(name='Payload'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
}

model RunWritingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunWritingResponseBody(name='body'),
}

/**
 * @summary 直接写作
 *
 * @param tmpReq RunWritingRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RunWritingResponse
 */
async function runWritingWithOptions(tmpReq: RunWritingRequest, runtime: Util.RuntimeOptions): RunWritingResponse {
  Util.validateModel(tmpReq);
  var request = new RunWritingShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.referenceData)) {
    request.referenceDataShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.referenceData, 'ReferenceData', 'json');
  }
  if (!Util.isUnset(tmpReq.writingConfig)) {
    request.writingConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.writingConfig, 'WritingConfig', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.originSessionId)) {
    body['OriginSessionId'] = request.originSessionId;
  }
  if (!Util.isUnset(request.prompt)) {
    body['Prompt'] = request.prompt;
  }
  if (!Util.isUnset(request.referenceDataShrink)) {
    body['ReferenceData'] = request.referenceDataShrink;
  }
  if (!Util.isUnset(request.sessionId)) {
    body['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }
  if (!Util.isUnset(request.writingConfigShrink)) {
    body['WritingConfig'] = request.writingConfigShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunWriting',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 直接写作
 *
 * @param request RunWritingRequest
 * @return RunWritingResponse
 */
async function runWriting(request: RunWritingRequest): RunWritingResponse {
  var runtime = new Util.RuntimeOptions{};
  return runWritingWithOptions(request, runtime);
}

model SaveCustomTextRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm'),
  commodityCode?: string(name='CommodityCode', example='商品code'),
  content?: string(name='Content', example='内容'),
  title?: string(name='Title', example='标题'),
}

model SaveCustomTextResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: long(name='Data', example='5'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model SaveCustomTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveCustomTextResponseBody(name='body'),
}

/**
 * @summary 保存自定义文本
 *
 * @param request SaveCustomTextRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SaveCustomTextResponse
 */
async function saveCustomTextWithOptions(request: SaveCustomTextRequest, runtime: Util.RuntimeOptions): SaveCustomTextResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.commodityCode)) {
    body['CommodityCode'] = request.commodityCode;
  }
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SaveCustomText',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 保存自定义文本
 *
 * @param request SaveCustomTextRequest
 * @return SaveCustomTextResponse
 */
async function saveCustomText(request: SaveCustomTextRequest): SaveCustomTextResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveCustomTextWithOptions(request, runtime);
}

model SaveDataSourceOrderConfigRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='c160c841c8e54295bf2f441432785944_p_efm'),
  productCode?: string(name='ProductCode', description='This parameter is required.', example='miaobi'),
  userConfigDataSourceList?: [ 
    {
      code?: string(name='Code', description='This parameter is required.', example='QuarkCommonNews'),
      name?: string(name='Name'),
      number?: int32(name='Number', description='This parameter is required.', example='20'),
      type?: string(name='Type', description='This parameter is required.', example='SystemSearch'),
    }
  ](name='UserConfigDataSourceList', description='This parameter is required.'),
}

model SaveDataSourceOrderConfigShrinkRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='c160c841c8e54295bf2f441432785944_p_efm'),
  productCode?: string(name='ProductCode', description='This parameter is required.', example='miaobi'),
  userConfigDataSourceListShrink?: string(name='UserConfigDataSourceList', description='This parameter is required.'),
}

model SaveDataSourceOrderConfigResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model SaveDataSourceOrderConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveDataSourceOrderConfigResponseBody(name='body'),
}

/**
 * @summary 保存用户的信源配置
 *
 * @param tmpReq SaveDataSourceOrderConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SaveDataSourceOrderConfigResponse
 */
async function saveDataSourceOrderConfigWithOptions(tmpReq: SaveDataSourceOrderConfigRequest, runtime: Util.RuntimeOptions): SaveDataSourceOrderConfigResponse {
  Util.validateModel(tmpReq);
  var request = new SaveDataSourceOrderConfigShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userConfigDataSourceList)) {
    request.userConfigDataSourceListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userConfigDataSourceList, 'UserConfigDataSourceList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.userConfigDataSourceListShrink)) {
    body['UserConfigDataSourceList'] = request.userConfigDataSourceListShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SaveDataSourceOrderConfig',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 保存用户的信源配置
 *
 * @param request SaveDataSourceOrderConfigRequest
 * @return SaveDataSourceOrderConfigResponse
 */
async function saveDataSourceOrderConfig(request: SaveDataSourceOrderConfigRequest): SaveDataSourceOrderConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveDataSourceOrderConfigWithOptions(request, runtime);
}

model SaveMaterialDocumentRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='c160c841c8e54295bf2f441432785944_p_efm'),
  author?: string(name='Author'),
  bothSavePrivateAndShare?: boolean(name='BothSavePrivateAndShare', example='false'),
  docKeywords?: [ string ](name='DocKeywords'),
  docType?: string(name='DocType', description='This parameter is required.', example='excel'),
  externalUrl?: string(name='ExternalUrl', example='http://xxxxx/xxx'),
  htmlContent?: string(name='HtmlContent'),
  pubTime?: string(name='PubTime', example='2023-04-11 06:14:07'),
  shareAttr?: int32(name='ShareAttr', example='1'),
  srcFrom?: string(name='SrcFrom', example='IntellijSearch'),
  summary?: string(name='Summary'),
  textContent?: string(name='TextContent'),
  title?: string(name='Title'),
  url?: string(name='Url', example='http://xxxxx/xxx'),
}

model SaveMaterialDocumentShrinkRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='c160c841c8e54295bf2f441432785944_p_efm'),
  author?: string(name='Author'),
  bothSavePrivateAndShare?: boolean(name='BothSavePrivateAndShare', example='false'),
  docKeywordsShrink?: string(name='DocKeywords'),
  docType?: string(name='DocType', description='This parameter is required.', example='excel'),
  externalUrl?: string(name='ExternalUrl', example='http://xxxxx/xxx'),
  htmlContent?: string(name='HtmlContent'),
  pubTime?: string(name='PubTime', example='2023-04-11 06:14:07'),
  shareAttr?: int32(name='ShareAttr', example='1'),
  srcFrom?: string(name='SrcFrom', example='IntellijSearch'),
  summary?: string(name='Summary'),
  textContent?: string(name='TextContent'),
  title?: string(name='Title'),
  url?: string(name='Url', example='http://xxxxx/xxx'),
}

model SaveMaterialDocumentResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: long(name='Data', example='12'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='false'),
}

model SaveMaterialDocumentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveMaterialDocumentResponseBody(name='body'),
}

/**
 * @summary 保存素材
 *
 * @param tmpReq SaveMaterialDocumentRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SaveMaterialDocumentResponse
 */
async function saveMaterialDocumentWithOptions(tmpReq: SaveMaterialDocumentRequest, runtime: Util.RuntimeOptions): SaveMaterialDocumentResponse {
  Util.validateModel(tmpReq);
  var request = new SaveMaterialDocumentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.docKeywords)) {
    request.docKeywordsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.docKeywords, 'DocKeywords', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.author)) {
    body['Author'] = request.author;
  }
  if (!Util.isUnset(request.bothSavePrivateAndShare)) {
    body['BothSavePrivateAndShare'] = request.bothSavePrivateAndShare;
  }
  if (!Util.isUnset(request.docKeywordsShrink)) {
    body['DocKeywords'] = request.docKeywordsShrink;
  }
  if (!Util.isUnset(request.docType)) {
    body['DocType'] = request.docType;
  }
  if (!Util.isUnset(request.externalUrl)) {
    body['ExternalUrl'] = request.externalUrl;
  }
  if (!Util.isUnset(request.htmlContent)) {
    body['HtmlContent'] = request.htmlContent;
  }
  if (!Util.isUnset(request.pubTime)) {
    body['PubTime'] = request.pubTime;
  }
  if (!Util.isUnset(request.shareAttr)) {
    body['ShareAttr'] = request.shareAttr;
  }
  if (!Util.isUnset(request.srcFrom)) {
    body['SrcFrom'] = request.srcFrom;
  }
  if (!Util.isUnset(request.summary)) {
    body['Summary'] = request.summary;
  }
  if (!Util.isUnset(request.textContent)) {
    body['TextContent'] = request.textContent;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }
  if (!Util.isUnset(request.url)) {
    body['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SaveMaterialDocument',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 保存素材
 *
 * @param request SaveMaterialDocumentRequest
 * @return SaveMaterialDocumentResponse
 */
async function saveMaterialDocument(request: SaveMaterialDocumentRequest): SaveMaterialDocumentResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveMaterialDocumentWithOptions(request, runtime);
}

model SearchNewsRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm'),
  filterNotNull?: boolean(name='FilterNotNull', example='false'),
  includeContent?: boolean(name='IncludeContent', example='false'),
  page?: int32(name='Page', example='81'),
  pageSize?: int32(name='PageSize', example='35'),
  query?: string(name='Query', example='检索Query'),
  searchSources?: [ string ](name='SearchSources'),
}

model SearchNewsShrinkRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm'),
  filterNotNull?: boolean(name='FilterNotNull', example='false'),
  includeContent?: boolean(name='IncludeContent', example='false'),
  page?: int32(name='Page', example='81'),
  pageSize?: int32(name='PageSize', example='35'),
  query?: string(name='Query', example='检索Query'),
  searchSourcesShrink?: string(name='SearchSources'),
}

model SearchNewsResponseBody = {
  code?: string(name='Code', example='NoData'),
  current?: int32(name='Current', example='1'),
  data?: [ 
    {
      author?: string(name='Author', example='作者'),
      content?: string(name='Content', example='文章内容'),
      docUuid?: string(name='DocUuid', example='9a598b44c6444da5907b8ea68a5f82c4'),
      imageUrls?: [ string ](name='ImageUrls'),
      pubTime?: string(name='PubTime', example='2024-01-18 06:46:22'),
      searchSource?: string(name='SearchSource', example='QuarkCommonNews'),
      searchSourceName?: string(name='SearchSourceName', example='夸克检索'),
      source?: string(name='Source', example='央视网'),
      summary?: string(name='Summary', example='文章摘要'),
      tag?: string(name='Tag', example='文章标签'),
      title?: string(name='Title', example='文章标题'),
      updateTime?: string(name='UpdateTime', example='2024-01-18 06:46:22'),
      url?: string(name='Url', example='文章URL'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  size?: int32(name='Size', example='10'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='100'),
}

model SearchNewsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchNewsResponseBody(name='body'),
}

/**
 * @summary 新闻检索
 *
 * @param tmpReq SearchNewsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SearchNewsResponse
 */
async function searchNewsWithOptions(tmpReq: SearchNewsRequest, runtime: Util.RuntimeOptions): SearchNewsResponse {
  Util.validateModel(tmpReq);
  var request = new SearchNewsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.searchSources)) {
    request.searchSourcesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.searchSources, 'SearchSources', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.filterNotNull)) {
    body['FilterNotNull'] = request.filterNotNull;
  }
  if (!Util.isUnset(request.includeContent)) {
    body['IncludeContent'] = request.includeContent;
  }
  if (!Util.isUnset(request.page)) {
    body['Page'] = request.page;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.query)) {
    body['Query'] = request.query;
  }
  if (!Util.isUnset(request.searchSourcesShrink)) {
    body['SearchSources'] = request.searchSourcesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SearchNews',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 新闻检索
 *
 * @param request SearchNewsRequest
 * @return SearchNewsResponse
 */
async function searchNews(request: SearchNewsRequest): SearchNewsResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchNewsWithOptions(request, runtime);
}

model SubmitAsyncTaskRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='2daaa2e0c209xb26acb97009ea77bd4b_p_efm'),
  taskCode?: string(name='TaskCode', description='This parameter is required.', example='MaterialDocumentUpload'),
  taskExecuteTime?: string(name='TaskExecuteTime', example='2023-10-14 14:30:00'),
  taskName?: string(name='TaskName', example='任务名称'),
  taskParam?: string(name='TaskParam', example='任务提交参数'),
}

model SubmitAsyncTaskResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: {
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    taskIntermediateResult?: any(name='TaskIntermediateResult', example='{}'),
    taskName?: string(name='TaskName', example='任务名称'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model SubmitAsyncTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitAsyncTaskResponseBody(name='body'),
}

/**
 * @summary 提交异步任务
 *
 * @param request SubmitAsyncTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitAsyncTaskResponse
 */
async function submitAsyncTaskWithOptions(request: SubmitAsyncTaskRequest, runtime: Util.RuntimeOptions): SubmitAsyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.taskCode)) {
    body['TaskCode'] = request.taskCode;
  }
  if (!Util.isUnset(request.taskExecuteTime)) {
    body['TaskExecuteTime'] = request.taskExecuteTime;
  }
  if (!Util.isUnset(request.taskName)) {
    body['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.taskParam)) {
    body['TaskParam'] = request.taskParam;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitAsyncTask',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交异步任务
 *
 * @param request SubmitAsyncTaskRequest
 * @return SubmitAsyncTaskResponse
 */
async function submitAsyncTask(request: SubmitAsyncTaskRequest): SubmitAsyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitAsyncTaskWithOptions(request, runtime);
}

model UpdateCustomTextRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm'),
  commodityCode?: string(name='CommodityCode', example='商品code'),
  content?: string(name='Content', example='内容'),
  id?: long(name='Id', description='This parameter is required.', example='96'),
  title?: string(name='Title', example='标题'),
}

model UpdateCustomTextResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: long(name='Data', example='48'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model UpdateCustomTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCustomTextResponseBody(name='body'),
}

/**
 * @summary 更新自定义文本
 *
 * @param request UpdateCustomTextRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateCustomTextResponse
 */
async function updateCustomTextWithOptions(request: UpdateCustomTextRequest, runtime: Util.RuntimeOptions): UpdateCustomTextResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.commodityCode)) {
    body['CommodityCode'] = request.commodityCode;
  }
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCustomText',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新自定义文本
 *
 * @param request UpdateCustomTextRequest
 * @return UpdateCustomTextResponse
 */
async function updateCustomText(request: UpdateCustomTextRequest): UpdateCustomTextResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCustomTextWithOptions(request, runtime);
}

model UpdateGeneratedContentRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm'),
  content?: string(name='Content', example='正文'),
  contentText?: string(name='ContentText', example='正文'),
  id?: long(name='Id', description='This parameter is required.', example='36'),
  keywords?: [ string ](name='Keywords'),
  prompt?: string(name='Prompt', example='创作xx文章'),
  title?: string(name='Title', example='评论类文章'),
}

model UpdateGeneratedContentShrinkRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='xxxxx_p_efm'),
  content?: string(name='Content', example='正文'),
  contentText?: string(name='ContentText', example='正文'),
  id?: long(name='Id', description='This parameter is required.', example='36'),
  keywordsShrink?: string(name='Keywords'),
  prompt?: string(name='Prompt', example='创作xx文章'),
  title?: string(name='Title', example='评论类文章'),
}

model UpdateGeneratedContentResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: boolean(name='Data', example='false'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGeneratedContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGeneratedContentResponseBody(name='body'),
}

/**
 * @summary 文档管理-更新。
 *
 * @param tmpReq UpdateGeneratedContentRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateGeneratedContentResponse
 */
async function updateGeneratedContentWithOptions(tmpReq: UpdateGeneratedContentRequest, runtime: Util.RuntimeOptions): UpdateGeneratedContentResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateGeneratedContentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.keywords)) {
    request.keywordsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.keywords, 'Keywords', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.contentText)) {
    body['ContentText'] = request.contentText;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.keywordsShrink)) {
    body['Keywords'] = request.keywordsShrink;
  }
  if (!Util.isUnset(request.prompt)) {
    body['Prompt'] = request.prompt;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGeneratedContent',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 文档管理-更新。
 *
 * @param request UpdateGeneratedContentRequest
 * @return UpdateGeneratedContentResponse
 */
async function updateGeneratedContent(request: UpdateGeneratedContentRequest): UpdateGeneratedContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGeneratedContentWithOptions(request, runtime);
}

model UpdateMaterialDocumentRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='67c520d1fa43455ea44fb69fa402d54d_p_beebot_public'),
  author?: string(name='Author'),
  docKeywords?: [ string ](name='DocKeywords'),
  docType?: string(name='DocType', description='This parameter is required.', example='image'),
  externalUrl?: string(name='ExternalUrl', example='http://xxxxx/xxx'),
  htmlContent?: string(name='HtmlContent'),
  id?: long(name='Id', description='This parameter is required.', example='44'),
  pubTime?: string(name='PubTime', example='2023-04-11 06:14:07'),
  regionId?: string(name='RegionId'),
  shareAttr?: int32(name='ShareAttr', example='1'),
  srcFrom?: string(name='SrcFrom', example='UserUpload'),
  summary?: string(name='Summary'),
  textContent?: string(name='TextContent'),
  title?: string(name='Title'),
  url?: string(name='Url', example='http://xxxxx/xxx'),
}

model UpdateMaterialDocumentShrinkRequest {
  agentKey?: string(name='AgentKey', description='This parameter is required.', example='67c520d1fa43455ea44fb69fa402d54d_p_beebot_public'),
  author?: string(name='Author'),
  docKeywordsShrink?: string(name='DocKeywords'),
  docType?: string(name='DocType', description='This parameter is required.', example='image'),
  externalUrl?: string(name='ExternalUrl', example='http://xxxxx/xxx'),
  htmlContent?: string(name='HtmlContent'),
  id?: long(name='Id', description='This parameter is required.', example='44'),
  pubTime?: string(name='PubTime', example='2023-04-11 06:14:07'),
  regionId?: string(name='RegionId'),
  shareAttr?: int32(name='ShareAttr', example='1'),
  srcFrom?: string(name='SrcFrom', example='UserUpload'),
  summary?: string(name='Summary'),
  textContent?: string(name='TextContent'),
  title?: string(name='Title'),
  url?: string(name='Url', example='http://xxxxx/xxx'),
}

model UpdateMaterialDocumentResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: long(name='Data', example='82'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='false'),
}

model UpdateMaterialDocumentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMaterialDocumentResponseBody(name='body'),
}

/**
 * @summary 根据ID更新素材
 *
 * @param tmpReq UpdateMaterialDocumentRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateMaterialDocumentResponse
 */
async function updateMaterialDocumentWithOptions(tmpReq: UpdateMaterialDocumentRequest, runtime: Util.RuntimeOptions): UpdateMaterialDocumentResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateMaterialDocumentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.docKeywords)) {
    request.docKeywordsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.docKeywords, 'DocKeywords', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.author)) {
    body['Author'] = request.author;
  }
  if (!Util.isUnset(request.docKeywordsShrink)) {
    body['DocKeywords'] = request.docKeywordsShrink;
  }
  if (!Util.isUnset(request.docType)) {
    body['DocType'] = request.docType;
  }
  if (!Util.isUnset(request.externalUrl)) {
    body['ExternalUrl'] = request.externalUrl;
  }
  if (!Util.isUnset(request.htmlContent)) {
    body['HtmlContent'] = request.htmlContent;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.pubTime)) {
    body['PubTime'] = request.pubTime;
  }
  if (!Util.isUnset(request.shareAttr)) {
    body['ShareAttr'] = request.shareAttr;
  }
  if (!Util.isUnset(request.srcFrom)) {
    body['SrcFrom'] = request.srcFrom;
  }
  if (!Util.isUnset(request.summary)) {
    body['Summary'] = request.summary;
  }
  if (!Util.isUnset(request.textContent)) {
    body['TextContent'] = request.textContent;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }
  if (!Util.isUnset(request.url)) {
    body['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMaterialDocument',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 根据ID更新素材
 *
 * @param request UpdateMaterialDocumentRequest
 * @return UpdateMaterialDocumentResponse
 */
async function updateMaterialDocument(request: UpdateMaterialDocumentRequest): UpdateMaterialDocumentResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMaterialDocumentWithOptions(request, runtime);
}

