/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('aimiaobi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CancelAsyncTaskRequest {
  agentKey?: string(name='AgentKey', example='c160c841c8e54295bf2f441432785944_p_efm'),
  taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
}

model CancelAsyncTaskResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='FB698445-61DA-5361-BF73-1C5F1157E888'),
  success?: boolean(name='Success', example='True'),
}

model CancelAsyncTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelAsyncTaskResponseBody(name='body'),
}

async function cancelAsyncTaskWithOptions(request: CancelAsyncTaskRequest, runtime: Util.RuntimeOptions): CancelAsyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CancelAsyncTask',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelAsyncTask(request: CancelAsyncTaskRequest): CancelAsyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelAsyncTaskWithOptions(request, runtime);
}

model CreateGeneratedContentRequest {
  agentKey?: string(name='AgentKey', example='xxx_efm'),
  content?: string(name='Content'),
  contentDomain?: string(name='ContentDomain', example='government'),
  contentText?: string(name='ContentText'),
  keywords?: [ string ](name='Keywords'),
  prompt?: string(name='Prompt'),
  taskId?: string(name='TaskId', example='xxx'),
  title?: string(name='Title'),
  uuid?: string(name='Uuid', example='xxxx'),
}

model CreateGeneratedContentShrinkRequest {
  agentKey?: string(name='AgentKey', example='xxx_efm'),
  content?: string(name='Content'),
  contentDomain?: string(name='ContentDomain', example='government'),
  contentText?: string(name='ContentText'),
  keywordsShrink?: string(name='Keywords'),
  prompt?: string(name='Prompt'),
  taskId?: string(name='TaskId', example='xxx'),
  title?: string(name='Title'),
  uuid?: string(name='Uuid', example='xxxx'),
}

model CreateGeneratedContentResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: long(name='Data', example='42'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='false'),
}

model CreateGeneratedContentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateGeneratedContentResponseBody(name='body'),
}

async function createGeneratedContentWithOptions(tmpReq: CreateGeneratedContentRequest, runtime: Util.RuntimeOptions): CreateGeneratedContentResponse {
  Util.validateModel(tmpReq);
  var request = new CreateGeneratedContentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.keywords)) {
    request.keywordsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.keywords, 'Keywords', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.contentDomain)) {
    body['ContentDomain'] = request.contentDomain;
  }
  if (!Util.isUnset(request.contentText)) {
    body['ContentText'] = request.contentText;
  }
  if (!Util.isUnset(request.keywordsShrink)) {
    body['Keywords'] = request.keywordsShrink;
  }
  if (!Util.isUnset(request.prompt)) {
    body['Prompt'] = request.prompt;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }
  if (!Util.isUnset(request.uuid)) {
    body['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateGeneratedContent',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createGeneratedContent(request: CreateGeneratedContentRequest): CreateGeneratedContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createGeneratedContentWithOptions(request, runtime);
}

model CreateTokenRequest {
  agentKey?: string(name='AgentKey', example='2daaa2e0c209xb26acb97009ea77bd4b_p_efm'),
}

model CreateTokenResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    expiredTime?: long(name='ExpiredTime', example='1705388704855'),
    token?: string(name='Token', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model CreateTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTokenResponseBody(name='body'),
}

async function createTokenWithOptions(request: CreateTokenRequest, runtime: Util.RuntimeOptions): CreateTokenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateToken',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createToken(request: CreateTokenRequest): CreateTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTokenWithOptions(request, runtime);
}

model DeleteGeneratedContentRequest {
  agentKey?: string(name='AgentKey', example='xxxxx_p_efm'),
  id?: long(name='Id', example='99'),
}

model DeleteGeneratedContentResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model DeleteGeneratedContentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGeneratedContentResponseBody(name='body'),
}

async function deleteGeneratedContentWithOptions(request: DeleteGeneratedContentRequest, runtime: Util.RuntimeOptions): DeleteGeneratedContentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteGeneratedContent',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteGeneratedContent(request: DeleteGeneratedContentRequest): DeleteGeneratedContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGeneratedContentWithOptions(request, runtime);
}

model DeleteMaterialByIdRequest {
  agentKey?: string(name='AgentKey', example='cd327c3d5d5e44159cc716e23bfa530e_p_beebot_public'),
  id?: long(name='Id', example='10'),
}

model DeleteMaterialByIdResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: boolean(name='Data', example='false'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='false'),
}

model DeleteMaterialByIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMaterialByIdResponseBody(name='body'),
}

async function deleteMaterialByIdWithOptions(request: DeleteMaterialByIdRequest, runtime: Util.RuntimeOptions): DeleteMaterialByIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMaterialById',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMaterialById(request: DeleteMaterialByIdRequest): DeleteMaterialByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMaterialByIdWithOptions(request, runtime);
}

model ExportGeneratedContentRequest {
  agentKey?: string(name='AgentKey', example='xxxxx_p_efm'),
  id?: long(name='Id', example='1'),
}

model ExportGeneratedContentResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: string(name='Data', example='xxx'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model ExportGeneratedContentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportGeneratedContentResponseBody(name='body'),
}

async function exportGeneratedContentWithOptions(request: ExportGeneratedContentRequest, runtime: Util.RuntimeOptions): ExportGeneratedContentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ExportGeneratedContent',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function exportGeneratedContent(request: ExportGeneratedContentRequest): ExportGeneratedContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportGeneratedContentWithOptions(request, runtime);
}

model FeedbackDialogueRequest {
  agentKey?: string(name='AgentKey', example='fcb14f25c9ee41ccad33a049de8f941b_p_outbound_public'),
  customerResponse?: string(name='CustomerResponse', example='test'),
  goodText?: string(name='GoodText', example='test'),
  modifiedResponse?: string(name='ModifiedResponse', example='test'),
  rating?: string(name='Rating', example='thumbsDown'),
  ratingTags?: [ string ](name='RatingTags'),
  sessionId?: string(name='SessionId', example='75bf82fa-b71b-45d7-ae40-0b00e496cd9e'),
  taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
}

model FeedbackDialogueShrinkRequest {
  agentKey?: string(name='AgentKey', example='fcb14f25c9ee41ccad33a049de8f941b_p_outbound_public'),
  customerResponse?: string(name='CustomerResponse', example='test'),
  goodText?: string(name='GoodText', example='test'),
  modifiedResponse?: string(name='ModifiedResponse', example='test'),
  rating?: string(name='Rating', example='thumbsDown'),
  ratingTagsShrink?: string(name='RatingTags'),
  sessionId?: string(name='SessionId', example='75bf82fa-b71b-45d7-ae40-0b00e496cd9e'),
  taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
}

model FeedbackDialogueResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='false'),
}

model FeedbackDialogueResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FeedbackDialogueResponseBody(name='body'),
}

async function feedbackDialogueWithOptions(tmpReq: FeedbackDialogueRequest, runtime: Util.RuntimeOptions): FeedbackDialogueResponse {
  Util.validateModel(tmpReq);
  var request = new FeedbackDialogueShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.ratingTags)) {
    request.ratingTagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ratingTags, 'RatingTags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.customerResponse)) {
    body['CustomerResponse'] = request.customerResponse;
  }
  if (!Util.isUnset(request.goodText)) {
    body['GoodText'] = request.goodText;
  }
  if (!Util.isUnset(request.modifiedResponse)) {
    body['ModifiedResponse'] = request.modifiedResponse;
  }
  if (!Util.isUnset(request.rating)) {
    body['Rating'] = request.rating;
  }
  if (!Util.isUnset(request.ratingTagsShrink)) {
    body['RatingTags'] = request.ratingTagsShrink;
  }
  if (!Util.isUnset(request.sessionId)) {
    body['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FeedbackDialogue',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function feedbackDialogue(request: FeedbackDialogueRequest): FeedbackDialogueResponse {
  var runtime = new Util.RuntimeOptions{};
  return feedbackDialogueWithOptions(request, runtime);
}

model FetchImageTaskRequest {
  agentKey?: string(name='AgentKey', example='cd327c3d5d5e44159cc716e23bfa530e_p_beebot_public'),
  articleTaskId?: string(name='ArticleTaskId', example='e1be065b-adc3-435e-bd01-1c18c5ed75d3'),
  taskIdList?: [ string ](name='TaskIdList', example='["9d8c9185-3f75-4a20-aca1-c5bb53dd97b3"]'),
}

model FetchImageTaskShrinkRequest {
  agentKey?: string(name='AgentKey', example='cd327c3d5d5e44159cc716e23bfa530e_p_beebot_public'),
  articleTaskId?: string(name='ArticleTaskId', example='e1be065b-adc3-435e-bd01-1c18c5ed75d3'),
  taskIdListShrink?: string(name='TaskIdList', example='["9d8c9185-3f75-4a20-aca1-c5bb53dd97b3"]'),
}

model FetchImageTaskResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    taskInfoList?: [ 
      {
        id?: long(name='Id', example='1'),
        imageList?: [ 
          {
            code?: string(name='Code', example='NoData'),
            message?: string(name='Message'),
            url?: string(name='Url', example='https://a-hbr-temp-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/r-000aham3nsx9gc7a8r5l.csv?Expires=1678260131&OSSAccessKeyId=LTAIjGotF8wXIEjy&Signature=WpMfqBnjeR0w5UL1xFAd1J556Pw%3D'),
          }
        ](name='ImageList'),
        taskId?: string(name='TaskId', example='net-7eb32699000d4193a3c59fc64ae1e55f'),
        taskStatus?: string(name='TaskStatus', example='SUCCESSED'),
      }
    ](name='TaskInfoList'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='DD656AF9-0839-521A-A3D2-F320009F9C87'),
  success?: boolean(name='Success', example='true'),
}

model FetchImageTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FetchImageTaskResponseBody(name='body'),
}

async function fetchImageTaskWithOptions(tmpReq: FetchImageTaskRequest, runtime: Util.RuntimeOptions): FetchImageTaskResponse {
  Util.validateModel(tmpReq);
  var request = new FetchImageTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.taskIdList)) {
    request.taskIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.taskIdList, 'TaskIdList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.articleTaskId)) {
    body['ArticleTaskId'] = request.articleTaskId;
  }
  if (!Util.isUnset(request.taskIdListShrink)) {
    body['TaskIdList'] = request.taskIdListShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FetchImageTask',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function fetchImageTask(request: FetchImageTaskRequest): FetchImageTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return fetchImageTaskWithOptions(request, runtime);
}

model GenerateImageTaskRequest {
  agentKey?: string(name='AgentKey', example='e1be065b-adc3-435e-bd01-1c18c5ed75d3'),
  articleTaskId?: string(name='ArticleTaskId', example='e1be065b-adc3-435e-bd01-1c18c5ed75d3'),
  paragraphList?: [ 
    {
      content?: string(name='Content', example='一直忧伤的猫'),
      id?: long(name='Id', example='1'),
      taskId?: string(name='TaskId', example='e1be065b-adc3-435e-bd01-1c18c5ed75d3'),
      taskStatus?: string(name='TaskStatus', example='SUCCESSED'),
    }
  ](name='ParagraphList'),
  size?: string(name='Size', example='1024*1024'),
  style?: string(name='Style', example='<auto>'),
}

model GenerateImageTaskShrinkRequest {
  agentKey?: string(name='AgentKey', example='e1be065b-adc3-435e-bd01-1c18c5ed75d3'),
  articleTaskId?: string(name='ArticleTaskId', example='e1be065b-adc3-435e-bd01-1c18c5ed75d3'),
  paragraphListShrink?: string(name='ParagraphList'),
  size?: string(name='Size', example='1024*1024'),
  style?: string(name='Style', example='<auto>'),
}

model GenerateImageTaskResponseBody = {
  code?: string(name='Code', example='successful'),
  data?: {
    taskList?: [ 
      {
        content?: string(name='Content', example='一直忧伤的猫'),
        id?: long(name='Id', example='1'),
        taskId?: string(name='TaskId', example='e1be065b-adc3-435e-bd01-1c18c5ed75d3'),
        taskStatus?: string(name='TaskStatus', example='SUCCESSED'),
      }
    ](name='TaskList'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='F2F366D6-E9FE-1006-BB70-2C650896AAB5'),
  success?: boolean(name='Success', example='true'),
}

model GenerateImageTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateImageTaskResponseBody(name='body'),
}

async function generateImageTaskWithOptions(tmpReq: GenerateImageTaskRequest, runtime: Util.RuntimeOptions): GenerateImageTaskResponse {
  Util.validateModel(tmpReq);
  var request = new GenerateImageTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.paragraphList)) {
    request.paragraphListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.paragraphList, 'ParagraphList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.articleTaskId)) {
    body['ArticleTaskId'] = request.articleTaskId;
  }
  if (!Util.isUnset(request.paragraphListShrink)) {
    body['ParagraphList'] = request.paragraphListShrink;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.style)) {
    body['Style'] = request.style;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GenerateImageTask',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateImageTask(request: GenerateImageTaskRequest): GenerateImageTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateImageTaskWithOptions(request, runtime);
}

model GenerateViewPointRequest {
  agentKey?: string(name='AgentKey', example='c160c841c8e54295bf2f441432785944_p_efm'),
  referenceData?: {
    miniDoc?: [ string ](name='MiniDoc'),
  }(name='ReferenceData'),
}

model GenerateViewPointShrinkRequest {
  agentKey?: string(name='AgentKey', example='c160c841c8e54295bf2f441432785944_p_efm'),
  referenceDataShrink?: string(name='ReferenceData'),
}

model GenerateViewPointResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      point?: string(name='Point'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='94512A33-8EC1-5452-A793-5C91F18ED2F0'),
  success?: boolean(name='Success', example='true'),
}

model GenerateViewPointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateViewPointResponseBody(name='body'),
}

async function generateViewPointWithOptions(tmpReq: GenerateViewPointRequest, runtime: Util.RuntimeOptions): GenerateViewPointResponse {
  Util.validateModel(tmpReq);
  var request = new GenerateViewPointShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.referenceData)) {
    request.referenceDataShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.referenceData, 'ReferenceData', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.referenceDataShrink)) {
    body['ReferenceData'] = request.referenceDataShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GenerateViewPoint',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateViewPoint(request: GenerateViewPointRequest): GenerateViewPointResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateViewPointWithOptions(request, runtime);
}

model GetDataSourceOrderConfigRequest {
  agentKey?: string(name='AgentKey', example='d9a1f6146a37446495d9985c2e7b267e_p_outbound_public'),
  productCode?: string(name='ProductCode', example='miaobi'),
}

model GetDataSourceOrderConfigResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    userConfigDataSourceList?: [ 
      {
        code?: string(name='Code', example='QuarkCommonNews'),
        name?: string(name='Name'),
        number?: int32(name='Number', example='20'),
        type?: string(name='Type', example='SystemSearch'),
      }
    ](name='UserConfigDataSourceList'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='428DCC0D-3C63-5306-BD1B-124396AB97BE'),
  success?: boolean(name='Success', example='true'),
}

model GetDataSourceOrderConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataSourceOrderConfigResponseBody(name='body'),
}

async function getDataSourceOrderConfigWithOptions(request: GetDataSourceOrderConfigRequest, runtime: Util.RuntimeOptions): GetDataSourceOrderConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDataSourceOrderConfig',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataSourceOrderConfig(request: GetDataSourceOrderConfigRequest): GetDataSourceOrderConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataSourceOrderConfigWithOptions(request, runtime);
}

model GetGeneratedContentRequest {
  agentKey?: string(name='AgentKey', example='xxxxx_p_efm'),
  id?: long(name='Id', example='1'),
}

model GetGeneratedContentResponseBody = {
  code?: string(name='Code', example='NoData'),
  data?: {
    content?: string(name='Content'),
    contentDomain?: string(name='ContentDomain', example='media'),
    contentText?: string(name='ContentText'),
    createTime?: string(name='CreateTime', example='2024-01-04 11:46:07'),
    createUser?: string(name='CreateUser', example='1'),
    deviceId?: string(name='DeviceId', example='xxx'),
    id?: long(name='Id', example='86'),
    keywordList?: [ string ](name='KeywordList'),
    keywords?: string(name='Keywords'),
    prompt?: string(name='Prompt'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    title?: string(name='Title'),
    updateTime?: string(name='UpdateTime', example='2024-01-04 11:46:07'),
    updateUser?: string(name='UpdateUser', example='1'),
    uuid?: string(name='Uuid', example='0961a514-2e26-4aa6-b22b-f592d145fe47'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model GetGeneratedContentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetGeneratedContentResponseBody(name='body'),
}

async function getGeneratedContentWithOptions(request: GetGeneratedContentRequest, runtime: Util.RuntimeOptions): GetGeneratedContentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetGeneratedContent',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGeneratedContent(request: GetGeneratedContentRequest): GetGeneratedContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGeneratedContentWithOptions(request, runtime);
}

model GetMaterialByIdRequest {
  agentKey?: string(name='AgentKey', example='67c520d1fa43455ea44fb69fa402d54d_p_beebot_public'),
  id?: long(name='Id', example='60'),
}

model GetMaterialByIdResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: {
    author?: string(name='Author'),
    createTime?: string(name='CreateTime', example='2023-03-21 11:34:19'),
    createUser?: string(name='CreateUser', example='1'),
    docKeywords?: [ string ](name='DocKeywords'),
    docType?: string(name='DocType', example='pdf'),
    externalUrl?: string(name='ExternalUrl', example='https://www.example.com'),
    htmlContent?: string(name='HtmlContent'),
    id?: long(name='Id', example='32'),
    pubTime?: string(name='PubTime', example='2023-04-11 06:14:07'),
    publicUrl?: string(name='PublicUrl', example='https://www.example.com'),
    shareAttr?: int32(name='ShareAttr', example='1'),
    srcFrom?: string(name='SrcFrom', example='user_upload'),
    summary?: string(name='Summary'),
    textContent?: string(name='TextContent'),
    thumbnailInBase64?: string(name='ThumbnailInBase64'),
    title?: string(name='Title'),
    updateTime?: string(name='UpdateTime', example='2022-04-08 19:33:01'),
    updateUser?: string(name='UpdateUser', example='1'),
    url?: string(name='Url', example='https://www.example.com'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='false'),
}

model GetMaterialByIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMaterialByIdResponseBody(name='body'),
}

async function getMaterialByIdWithOptions(request: GetMaterialByIdRequest, runtime: Util.RuntimeOptions): GetMaterialByIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMaterialById',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMaterialById(request: GetMaterialByIdRequest): GetMaterialByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMaterialByIdWithOptions(request, runtime);
}

model GetPropertiesRequest {
  agentKey?: string(name='AgentKey', example='xxx_efm'),
}

model GetPropertiesResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: {
    chatConfig?: map[string]any(name='ChatConfig'),
    consoleConfig?: {
      tipContent?: string(name='TipContent', example='xx'),
      title?: string(name='Title'),
    }(name='ConsoleConfig'),
    generalConfigMap?: map[string]any(name='GeneralConfigMap'),
    intelligentSearchConfig?: {
      productDescription?: string(name='ProductDescription', example='xxx'),
      searchSamples?: [ 
        {
          articles?: [ 
            {
              select?: boolean(name='Select', example='true'),
              stared?: boolean(name='Stared', example='false'),
              title?: string(name='Title', example='xx'),
              url?: string(name='Url', example='http://xxx.com'),
            }
          ](name='Articles'),
          prompt?: string(name='Prompt', example='xx'),
          text?: string(name='Text', example='xxx'),
        }
      ](name='SearchSamples'),
      searchSources?: [ 
        {
          code?: string(name='Code', example='xx'),
          datasetName?: string(name='DatasetName', example='xx'),
          name?: string(name='Name', example='xx'),
        }
      ](name='SearchSources'),
    }(name='IntelligentSearchConfig'),
    searchSources?: [ 
      {
        label?: string(name='Label'),
        value?: string(name='Value', example='SystemSearch'),
      }
    ](name='SearchSources'),
    slrAuthorized?: boolean(name='SlrAuthorized', example='true'),
    userInfo?: {
      agentId?: string(name='AgentId', example='1'),
      tenantId?: string(name='TenantId', example='1'),
      userId?: string(name='UserId', example='1'),
      username?: string(name='Username', example='admin'),
    }(name='UserInfo'),
    wanxiangImageSizeConfig?: [ 
      {
        name?: string(name='Name', example='1:1'),
        value?: string(name='Value', example='1024*1024'),
      }
    ](name='WanxiangImageSizeConfig'),
    wanxiangImageStyleConfig?: [ 
      {
        name?: string(name='Name'),
        pic?: string(name='Pic', example='https://img.alicdn.com/imgextra/i4/O1CN01RzKicz1W0YWzYkWcK_!!6000000002726-2-tps-132-104.png'),
        value?: string(name='Value', example='<auto>'),
      }
    ](name='WanxiangImageStyleConfig'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model GetPropertiesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPropertiesResponseBody(name='body'),
}

async function getPropertiesWithOptions(request: GetPropertiesRequest, runtime: Util.RuntimeOptions): GetPropertiesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProperties',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getProperties(request: GetPropertiesRequest): GetPropertiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPropertiesWithOptions(request, runtime);
}

model ListAsyncTasksRequest {
  agentKey?: string(name='AgentKey', example='cd327c3d5d5e44159cc716e23bfa530e_p_beebot_public'),
  createTimeEnd?: string(name='CreateTimeEnd', example='2023-03-18 02:00:00'),
  createTimeStart?: string(name='CreateTimeStart', example='2023-02-19 07:28:11'),
  current?: int32(name='Current', example='1'),
  size?: int32(name='Size', example='10'),
  taskCode?: string(name='TaskCode', example='MaterialDocumentUpload'),
  taskName?: string(name='TaskName'),
  taskStatus?: int32(name='TaskStatus', example='1'),
  taskStatusList?: [ int32 ](name='TaskStatusList'),
  taskType?: string(name='TaskType'),
  taskTypeList?: [ string ](name='TaskTypeList'),
}

model ListAsyncTasksShrinkRequest {
  agentKey?: string(name='AgentKey', example='cd327c3d5d5e44159cc716e23bfa530e_p_beebot_public'),
  createTimeEnd?: string(name='CreateTimeEnd', example='2023-03-18 02:00:00'),
  createTimeStart?: string(name='CreateTimeStart', example='2023-02-19 07:28:11'),
  current?: int32(name='Current', example='1'),
  size?: int32(name='Size', example='10'),
  taskCode?: string(name='TaskCode', example='MaterialDocumentUpload'),
  taskName?: string(name='TaskName'),
  taskStatus?: int32(name='TaskStatus', example='1'),
  taskStatusListShrink?: string(name='TaskStatusList'),
  taskType?: string(name='TaskType'),
  taskTypeListShrink?: string(name='TaskTypeList'),
}

model ListAsyncTasksResponseBody = {
  code?: string(name='Code', example='200'),
  current?: int32(name='Current', example='1'),
  data?: [ 
    {
      createTime?: string(name='CreateTime', example='2020-12-23 15:41:58'),
      createUser?: string(name='CreateUser', example='1111'),
      id?: long(name='Id', example='1'),
      taskCode?: string(name='TaskCode', example='MaterialDocumentUpload'),
      taskDefinition?: string(name='TaskDefinition', example='{}'),
      taskEndTime?: string(name='TaskEndTime', example='2023-03-09 00:00:00'),
      taskErrorMessage?: string(name='TaskErrorMessage'),
      taskExecuteTime?: string(name='TaskExecuteTime', example='2023-10-14 14:30:00'),
      taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
      taskInnerErrorMessage?: string(name='TaskInnerErrorMessage'),
      taskIntermediateResult?: string(name='TaskIntermediateResult', example='{}'),
      taskName?: string(name='TaskName'),
      taskParam?: string(name='TaskParam', example='{}'),
      taskProgressMessage?: string(name='TaskProgressMessage', example='{}'),
      taskResult?: string(name='TaskResult', example='{}'),
      taskRetryCount?: string(name='TaskRetryCount', example='1'),
      taskStartTime?: string(name='TaskStartTime', example='2023-03-20 10:53:00'),
      taskStatus?: int32(name='TaskStatus', example='1'),
      taskType?: string(name='TaskType', example='test'),
      updateTime?: string(name='UpdateTime', example='2023-02-16 10:29:16'),
      updateUser?: string(name='UpdateUser', example='111'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='428DCC0D-3C63-5306-BD1B-124396AB97BE'),
  size?: int32(name='Size', example='10'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='20'),
}

model ListAsyncTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAsyncTasksResponseBody(name='body'),
}

async function listAsyncTasksWithOptions(tmpReq: ListAsyncTasksRequest, runtime: Util.RuntimeOptions): ListAsyncTasksResponse {
  Util.validateModel(tmpReq);
  var request = new ListAsyncTasksShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.taskStatusList)) {
    request.taskStatusListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.taskStatusList, 'TaskStatusList', 'json');
  }
  if (!Util.isUnset(tmpReq.taskTypeList)) {
    request.taskTypeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.taskTypeList, 'TaskTypeList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.createTimeEnd)) {
    body['CreateTimeEnd'] = request.createTimeEnd;
  }
  if (!Util.isUnset(request.createTimeStart)) {
    body['CreateTimeStart'] = request.createTimeStart;
  }
  if (!Util.isUnset(request.current)) {
    body['Current'] = request.current;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.taskCode)) {
    body['TaskCode'] = request.taskCode;
  }
  if (!Util.isUnset(request.taskName)) {
    body['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.taskStatus)) {
    body['TaskStatus'] = request.taskStatus;
  }
  if (!Util.isUnset(request.taskStatusListShrink)) {
    body['TaskStatusList'] = request.taskStatusListShrink;
  }
  if (!Util.isUnset(request.taskType)) {
    body['TaskType'] = request.taskType;
  }
  if (!Util.isUnset(request.taskTypeListShrink)) {
    body['TaskTypeList'] = request.taskTypeListShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListAsyncTasks',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAsyncTasks(request: ListAsyncTasksRequest): ListAsyncTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAsyncTasksWithOptions(request, runtime);
}

model ListBuildConfigsRequest {
  agentKey?: string(name='AgentKey', example='cd327c3d5d5e44159cc716e23bfa530e_p_beebot_public'),
  type?: string(name='Type', example='media'),
}

model ListBuildConfigsResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      buildIn?: boolean(name='BuildIn', example='true'),
      createTime?: string(name='CreateTime', example='2023-04-11 06:14:07'),
      createUser?: string(name='CreateUser', example='1'),
      id?: long(name='Id'),
      keywords?: [ 
        {
          description?: string(name='Description'),
          key?: string(name='Key'),
        }
      ](name='Keywords'),
      tag?: string(name='Tag', example='writingStyle'),
      tagDescription?: string(name='TagDescription'),
      type?: string(name='Type', example='media'),
      updateTime?: string(name='UpdateTime', example='2023-04-11 06:14:07'),
      updateUser?: string(name='UpdateUser', example='1'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='DA021073-17CE-5CCF-9FEB-93226C766887'),
  success?: boolean(name='Success', example='true'),
}

model ListBuildConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBuildConfigsResponseBody(name='body'),
}

async function listBuildConfigsWithOptions(request: ListBuildConfigsRequest, runtime: Util.RuntimeOptions): ListBuildConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListBuildConfigs',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBuildConfigs(request: ListBuildConfigsRequest): ListBuildConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBuildConfigsWithOptions(request, runtime);
}

model ListDialoguesRequest {
  agentKey?: string(name='AgentKey', example='xxxxx_p_efm'),
  current?: int32(name='Current', example='1'),
  dialogueType?: int32(name='DialogueType', example='2'),
  endTime?: string(name='EndTime', example='2024-01-04 11:46:07'),
  size?: int32(name='Size', example='10'),
  startTime?: string(name='StartTime', example='2024-01-04 11:46:07'),
  taskId?: string(name='TaskId', example='xxx'),
}

model ListDialoguesResponseBody = {
  code?: string(name='Code', example='NoData'),
  current?: int32(name='Current', example='1'),
  data?: [ 
    {
      bot?: string(name='Bot', example='xx'),
      createTime?: string(name='CreateTime', example='2024-01-04 11:46:07'),
      createUser?: string(name='CreateUser', example='xx'),
      dialogueType?: int32(name='DialogueType', example='2'),
      taskId?: string(name='TaskId', example='xx'),
      user?: string(name='User', example='x'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  size?: int32(name='Size', example='10'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='100'),
}

model ListDialoguesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDialoguesResponseBody(name='body'),
}

async function listDialoguesWithOptions(request: ListDialoguesRequest, runtime: Util.RuntimeOptions): ListDialoguesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.current)) {
    body['Current'] = request.current;
  }
  if (!Util.isUnset(request.dialogueType)) {
    body['DialogueType'] = request.dialogueType;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDialogues',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDialogues(request: ListDialoguesRequest): ListDialoguesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDialoguesWithOptions(request, runtime);
}

model ListGeneratedContentsRequest {
  agentKey?: string(name='AgentKey', example='xxxxx_p_efm'),
  contentDomain?: string(name='ContentDomain', example='media'),
  current?: int32(name='Current', example='1'),
  endTime?: string(name='EndTime', example='2024-01-04 11:46:07'),
  size?: int32(name='Size', example='10'),
  startTime?: string(name='StartTime', example='2024-01-04 11:46:07'),
  title?: string(name='Title'),
}

model ListGeneratedContentsResponseBody = {
  code?: string(name='Code', example='NoData'),
  current?: int32(name='Current', example='1'),
  data?: [ 
    {
      content?: string(name='Content'),
      contentDomain?: string(name='ContentDomain', example='media'),
      contentText?: string(name='ContentText'),
      createTime?: string(name='CreateTime', example='2024-01-04 11:46:07'),
      createUser?: string(name='CreateUser', example='123'),
      deviceId?: string(name='DeviceId', example='xxx'),
      id?: long(name='Id', example='10'),
      keywordList?: [ string ](name='KeywordList'),
      keywords?: string(name='Keywords'),
      prompt?: string(name='Prompt'),
      taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
      title?: string(name='Title'),
      updateTime?: string(name='UpdateTime', example='2024-01-04 11:46:07'),
      updateUser?: string(name='UpdateUser', example='1111'),
      uuid?: string(name='Uuid', example='xxx'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  size?: int32(name='Size', example='10'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='100'),
}

model ListGeneratedContentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGeneratedContentsResponseBody(name='body'),
}

async function listGeneratedContentsWithOptions(request: ListGeneratedContentsRequest, runtime: Util.RuntimeOptions): ListGeneratedContentsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.contentDomain)) {
    body['ContentDomain'] = request.contentDomain;
  }
  if (!Util.isUnset(request.current)) {
    body['Current'] = request.current;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListGeneratedContents',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGeneratedContents(request: ListGeneratedContentsRequest): ListGeneratedContentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGeneratedContentsWithOptions(request, runtime);
}

model ListHotNewsWithTypeRequest {
  agentKey?: string(name='AgentKey', example='c160c841c8e54295bf2f441432785944_p_efm'),
  current?: int32(name='Current', example='1'),
  newsType?: string(name='NewsType', example='society'),
  newsTypes?: [ string ](name='NewsTypes'),
  size?: int32(name='Size', example='10'),
}

model ListHotNewsWithTypeShrinkRequest {
  agentKey?: string(name='AgentKey', example='c160c841c8e54295bf2f441432785944_p_efm'),
  current?: int32(name='Current', example='1'),
  newsType?: string(name='NewsType', example='society'),
  newsTypesShrink?: string(name='NewsTypes'),
  size?: int32(name='Size', example='10'),
}

model ListHotNewsWithTypeResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: [ 
    {
      news?: [ 
        {
          author?: string(name='Author'),
          content?: string(name='Content'),
          docUuid?: string(name='DocUuid', example='3f7045e099474ba28ceca1b4eb6d6e21'),
          imageUrls?: [ string ](name='ImageUrls'),
          pubTime?: string(name='PubTime', example='2023-04-11 06:14:07'),
          searchSource?: string(name='SearchSource'),
          searchSourceName?: string(name='SearchSourceName'),
          source?: string(name='Source'),
          summary?: string(name='Summary'),
          tag?: string(name='Tag'),
          title?: string(name='Title'),
          updateTime?: string(name='UpdateTime', example='2023-10-14 14:30:00'),
          url?: string(name='Url', example='http://xxxxx/xxx'),
        }
      ](name='News'),
      newsType?: string(name='NewsType', example='society'),
      newsTypeName?: string(name='NewsTypeName'),
      totalPages?: int32(name='TotalPages', example='77'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model ListHotNewsWithTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotNewsWithTypeResponseBody(name='body'),
}

async function listHotNewsWithTypeWithOptions(tmpReq: ListHotNewsWithTypeRequest, runtime: Util.RuntimeOptions): ListHotNewsWithTypeResponse {
  Util.validateModel(tmpReq);
  var request = new ListHotNewsWithTypeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.newsTypes)) {
    request.newsTypesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.newsTypes, 'NewsTypes', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.current)) {
    body['Current'] = request.current;
  }
  if (!Util.isUnset(request.newsType)) {
    body['NewsType'] = request.newsType;
  }
  if (!Util.isUnset(request.newsTypesShrink)) {
    body['NewsTypes'] = request.newsTypesShrink;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListHotNewsWithType',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHotNewsWithType(request: ListHotNewsWithTypeRequest): ListHotNewsWithTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHotNewsWithTypeWithOptions(request, runtime);
}

model ListMaterialDocumentsRequest {
  agentKey?: string(name='AgentKey', example='33a2658aaabf4c24b45d50e575125311_p_beebot_public'),
  content?: string(name='Content'),
  createTimeEnd?: string(name='CreateTimeEnd', example='2023-03-18 02:00:00'),
  createTimeStart?: string(name='CreateTimeStart', example='2023-02-19 07:28:11'),
  current?: int32(name='Current', example='1'),
  docType?: string(name='DocType', example='jsonLine'),
  docTypeList?: [ string ](name='DocTypeList', example='excel'),
  generatePublicUrl?: boolean(name='GeneratePublicUrl', example='true'),
  id?: long(name='Id', example='69'),
  keywords?: [ string ](name='Keywords'),
  query?: string(name='Query'),
  shareAttr?: int32(name='ShareAttr', example='1'),
  size?: int32(name='Size', example='10'),
  title?: string(name='Title'),
  updateTimeEnd?: string(name='UpdateTimeEnd', example='2023-03-18 03:00:00'),
  updateTimeStart?: string(name='UpdateTimeStart', example='2023-03-18 02:00:00'),
}

model ListMaterialDocumentsShrinkRequest {
  agentKey?: string(name='AgentKey', example='33a2658aaabf4c24b45d50e575125311_p_beebot_public'),
  content?: string(name='Content'),
  createTimeEnd?: string(name='CreateTimeEnd', example='2023-03-18 02:00:00'),
  createTimeStart?: string(name='CreateTimeStart', example='2023-02-19 07:28:11'),
  current?: int32(name='Current', example='1'),
  docType?: string(name='DocType', example='jsonLine'),
  docTypeListShrink?: string(name='DocTypeList', example='excel'),
  generatePublicUrl?: boolean(name='GeneratePublicUrl', example='true'),
  id?: long(name='Id', example='69'),
  keywordsShrink?: string(name='Keywords'),
  query?: string(name='Query'),
  shareAttr?: int32(name='ShareAttr', example='1'),
  size?: int32(name='Size', example='10'),
  title?: string(name='Title'),
  updateTimeEnd?: string(name='UpdateTimeEnd', example='2023-03-18 03:00:00'),
  updateTimeStart?: string(name='UpdateTimeStart', example='2023-03-18 02:00:00'),
}

model ListMaterialDocumentsResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  current?: int32(name='Current', example='1'),
  data?: [ 
    {
      author?: string(name='Author'),
      createTime?: string(name='CreateTime', example='2023-03-18 02:00:00'),
      createUser?: string(name='CreateUser', example='1'),
      createUserName?: string(name='CreateUserName'),
      docKeywords?: [ string ](name='DocKeywords'),
      docType?: string(name='DocType', example='pdf'),
      externalUrl?: string(name='ExternalUrl', example='https://www.example.com'),
      htmlContent?: string(name='HtmlContent'),
      id?: long(name='Id', example='35'),
      pubTime?: string(name='PubTime', example='2023-03-18 02:00:00'),
      publicUrl?: string(name='PublicUrl', example='https://www.example.com'),
      shareAttr?: int32(name='ShareAttr', example='1'),
      srcFrom?: string(name='SrcFrom', example='user_upload'),
      summary?: string(name='Summary'),
      textContent?: string(name='TextContent'),
      thumbnailInBase64?: string(name='ThumbnailInBase64'),
      title?: string(name='Title'),
      updateTime?: string(name='UpdateTime', example='2023-03-18 02:00:00'),
      updateUser?: string(name='UpdateUser', example='1'),
      updateUserName?: string(name='UpdateUserName'),
      url?: string(name='Url', example='https://www.example.com'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  size?: int32(name='Size', example='10'),
  success?: boolean(name='Success', example='false'),
  total?: int32(name='Total', example='100'),
}

model ListMaterialDocumentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMaterialDocumentsResponseBody(name='body'),
}

async function listMaterialDocumentsWithOptions(tmpReq: ListMaterialDocumentsRequest, runtime: Util.RuntimeOptions): ListMaterialDocumentsResponse {
  Util.validateModel(tmpReq);
  var request = new ListMaterialDocumentsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.docTypeList)) {
    request.docTypeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.docTypeList, 'DocTypeList', 'json');
  }
  if (!Util.isUnset(tmpReq.keywords)) {
    request.keywordsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.keywords, 'Keywords', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.createTimeEnd)) {
    body['CreateTimeEnd'] = request.createTimeEnd;
  }
  if (!Util.isUnset(request.createTimeStart)) {
    body['CreateTimeStart'] = request.createTimeStart;
  }
  if (!Util.isUnset(request.current)) {
    body['Current'] = request.current;
  }
  if (!Util.isUnset(request.docType)) {
    body['DocType'] = request.docType;
  }
  if (!Util.isUnset(request.docTypeListShrink)) {
    body['DocTypeList'] = request.docTypeListShrink;
  }
  if (!Util.isUnset(request.generatePublicUrl)) {
    body['GeneratePublicUrl'] = request.generatePublicUrl;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.keywordsShrink)) {
    body['Keywords'] = request.keywordsShrink;
  }
  if (!Util.isUnset(request.query)) {
    body['Query'] = request.query;
  }
  if (!Util.isUnset(request.shareAttr)) {
    body['ShareAttr'] = request.shareAttr;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }
  if (!Util.isUnset(request.updateTimeEnd)) {
    body['UpdateTimeEnd'] = request.updateTimeEnd;
  }
  if (!Util.isUnset(request.updateTimeStart)) {
    body['UpdateTimeStart'] = request.updateTimeStart;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListMaterialDocuments',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMaterialDocuments(request: ListMaterialDocumentsRequest): ListMaterialDocumentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMaterialDocumentsWithOptions(request, runtime);
}

model ListVersionsRequest {
  agentKey?: string(name='AgentKey', example='33a2658aaabf4c24b45d50e575125311_p_beebot_public'),
}

model ListVersionsResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: [ 
    {
      concurrentCount?: int32(name='ConcurrentCount', example='43'),
      endTime?: string(name='EndTime', example='2023-04-23 02:00:34'),
      instanceCount?: int32(name='InstanceCount', example='55'),
      instanceId?: string(name='InstanceId', example='ga-bp12pismsw4v3tzhf62p1'),
      orderId?: long(name='OrderId', example='7'),
      productType?: string(name='ProductType', example='CUSTOMIZE'),
      quota?: int32(name='Quota', example='13'),
      startTime?: string(name='StartTime', example='2023-05-27 04:11:00'),
      useQuota?: int32(name='UseQuota', example='65'),
      versionDetail?: string(name='VersionDetail'),
      versionName?: string(name='VersionName', example='试用版'),
      versionStatus?: int32(name='VersionStatus', example='87'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model ListVersionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVersionsResponseBody(name='body'),
}

async function listVersionsWithOptions(request: ListVersionsRequest, runtime: Util.RuntimeOptions): ListVersionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVersions',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVersions(request: ListVersionsRequest): ListVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVersionsWithOptions(request, runtime);
}

model QueryAsyncTaskRequest {
  agentKey?: string(name='AgentKey', example='33a2658aaabf4c24b45d50e575125311_p_beebot_public'),
  taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
}

model QueryAsyncTaskResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    createTime?: string(name='CreateTime', example='2021-07-25 14:34:33'),
    createUser?: string(name='CreateUser', example='12121'),
    taskCode?: string(name='TaskCode', example='MaterialDocumentUpload'),
    taskErrorMessage?: string(name='TaskErrorMessage', example='error'),
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    taskIntermediateResult?: string(name='TaskIntermediateResult', example='{}'),
    taskName?: string(name='TaskName'),
    taskParam?: string(name='TaskParam', example='{"fileKey":"oss://default/xxxx/xxxx/xxx","fileName":"xxxxx.doc"}'),
    taskProgressMessage?: string(name='TaskProgressMessage', example='{}'),
    taskResult?: string(name='TaskResult', example='{}'),
    taskRetryCount?: string(name='TaskRetryCount', example='3'),
    taskStatus?: int32(name='TaskStatus', example='1'),
    updateTime?: string(name='UpdateTime', example='2023-04-27 18:07:43'),
    updateUser?: string(name='UpdateUser', example='12121'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='867C4ABE-4381-5BC2-9810-5A5F334F71CF'),
  success?: boolean(name='Success', example='True'),
}

model QueryAsyncTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAsyncTaskResponseBody(name='body'),
}

async function queryAsyncTaskWithOptions(request: QueryAsyncTaskRequest, runtime: Util.RuntimeOptions): QueryAsyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryAsyncTask',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAsyncTask(request: QueryAsyncTaskRequest): QueryAsyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAsyncTaskWithOptions(request, runtime);
}

model SaveDataSourceOrderConfigRequest {
  agentKey?: string(name='AgentKey', example='c160c841c8e54295bf2f441432785944_p_efm'),
  productCode?: string(name='ProductCode', example='miaobi'),
  userConfigDataSourceList?: [ 
    {
      code?: string(name='Code', example='QuarkCommonNews'),
      name?: string(name='Name'),
      number?: int32(name='Number', example='20'),
      type?: string(name='Type', example='SystemSearch'),
    }
  ](name='UserConfigDataSourceList'),
}

model SaveDataSourceOrderConfigShrinkRequest {
  agentKey?: string(name='AgentKey', example='c160c841c8e54295bf2f441432785944_p_efm'),
  productCode?: string(name='ProductCode', example='miaobi'),
  userConfigDataSourceListShrink?: string(name='UserConfigDataSourceList'),
}

model SaveDataSourceOrderConfigResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='1813ceee-7fe5-41b4-87e5-982a4d18cca5'),
  success?: boolean(name='Success', example='true'),
}

model SaveDataSourceOrderConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveDataSourceOrderConfigResponseBody(name='body'),
}

async function saveDataSourceOrderConfigWithOptions(tmpReq: SaveDataSourceOrderConfigRequest, runtime: Util.RuntimeOptions): SaveDataSourceOrderConfigResponse {
  Util.validateModel(tmpReq);
  var request = new SaveDataSourceOrderConfigShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userConfigDataSourceList)) {
    request.userConfigDataSourceListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userConfigDataSourceList, 'UserConfigDataSourceList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.userConfigDataSourceListShrink)) {
    body['UserConfigDataSourceList'] = request.userConfigDataSourceListShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SaveDataSourceOrderConfig',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function saveDataSourceOrderConfig(request: SaveDataSourceOrderConfigRequest): SaveDataSourceOrderConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveDataSourceOrderConfigWithOptions(request, runtime);
}

model SaveMaterialDocumentRequest {
  agentKey?: string(name='AgentKey', example='c160c841c8e54295bf2f441432785944_p_efm'),
  author?: string(name='Author'),
  bothSavePrivateAndShare?: boolean(name='BothSavePrivateAndShare', example='false'),
  docKeywords?: [ string ](name='DocKeywords'),
  docType?: string(name='DocType', example='excel'),
  externalUrl?: string(name='ExternalUrl', example='http://xxxxx/xxx'),
  htmlContent?: string(name='HtmlContent'),
  pubTime?: string(name='PubTime', example='2023-04-11 06:14:07'),
  shareAttr?: int32(name='ShareAttr', example='1'),
  srcFrom?: string(name='SrcFrom', example='IntellijSearch'),
  summary?: string(name='Summary'),
  textContent?: string(name='TextContent'),
  title?: string(name='Title'),
  url?: string(name='Url', example='http://xxxxx/xxx'),
}

model SaveMaterialDocumentShrinkRequest {
  agentKey?: string(name='AgentKey', example='c160c841c8e54295bf2f441432785944_p_efm'),
  author?: string(name='Author'),
  bothSavePrivateAndShare?: boolean(name='BothSavePrivateAndShare', example='false'),
  docKeywordsShrink?: string(name='DocKeywords'),
  docType?: string(name='DocType', example='excel'),
  externalUrl?: string(name='ExternalUrl', example='http://xxxxx/xxx'),
  htmlContent?: string(name='HtmlContent'),
  pubTime?: string(name='PubTime', example='2023-04-11 06:14:07'),
  shareAttr?: int32(name='ShareAttr', example='1'),
  srcFrom?: string(name='SrcFrom', example='IntellijSearch'),
  summary?: string(name='Summary'),
  textContent?: string(name='TextContent'),
  title?: string(name='Title'),
  url?: string(name='Url', example='http://xxxxx/xxx'),
}

model SaveMaterialDocumentResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: long(name='Data', example='12'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='false'),
}

model SaveMaterialDocumentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveMaterialDocumentResponseBody(name='body'),
}

async function saveMaterialDocumentWithOptions(tmpReq: SaveMaterialDocumentRequest, runtime: Util.RuntimeOptions): SaveMaterialDocumentResponse {
  Util.validateModel(tmpReq);
  var request = new SaveMaterialDocumentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.docKeywords)) {
    request.docKeywordsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.docKeywords, 'DocKeywords', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.author)) {
    body['Author'] = request.author;
  }
  if (!Util.isUnset(request.bothSavePrivateAndShare)) {
    body['BothSavePrivateAndShare'] = request.bothSavePrivateAndShare;
  }
  if (!Util.isUnset(request.docKeywordsShrink)) {
    body['DocKeywords'] = request.docKeywordsShrink;
  }
  if (!Util.isUnset(request.docType)) {
    body['DocType'] = request.docType;
  }
  if (!Util.isUnset(request.externalUrl)) {
    body['ExternalUrl'] = request.externalUrl;
  }
  if (!Util.isUnset(request.htmlContent)) {
    body['HtmlContent'] = request.htmlContent;
  }
  if (!Util.isUnset(request.pubTime)) {
    body['PubTime'] = request.pubTime;
  }
  if (!Util.isUnset(request.shareAttr)) {
    body['ShareAttr'] = request.shareAttr;
  }
  if (!Util.isUnset(request.srcFrom)) {
    body['SrcFrom'] = request.srcFrom;
  }
  if (!Util.isUnset(request.summary)) {
    body['Summary'] = request.summary;
  }
  if (!Util.isUnset(request.textContent)) {
    body['TextContent'] = request.textContent;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }
  if (!Util.isUnset(request.url)) {
    body['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SaveMaterialDocument',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function saveMaterialDocument(request: SaveMaterialDocumentRequest): SaveMaterialDocumentResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveMaterialDocumentWithOptions(request, runtime);
}

model SubmitAsyncTaskRequest {
  agentKey?: string(name='AgentKey', example='2daaa2e0c209xb26acb97009ea77bd4b_p_efm'),
  taskCode?: string(name='TaskCode', example='MaterialDocumentUpload'),
  taskExecuteTime?: string(name='TaskExecuteTime', example='2023-10-14 14:30:00'),
  taskName?: string(name='TaskName', example='任务名称'),
  taskParam?: string(name='TaskParam', example='任务提交参数'),
}

model SubmitAsyncTaskResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: {
    taskId?: string(name='TaskId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
    taskIntermediateResult?: any(name='TaskIntermediateResult', example='{}'),
    taskName?: string(name='TaskName', example='任务名称'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='true'),
}

model SubmitAsyncTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitAsyncTaskResponseBody(name='body'),
}

async function submitAsyncTaskWithOptions(request: SubmitAsyncTaskRequest, runtime: Util.RuntimeOptions): SubmitAsyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.taskCode)) {
    body['TaskCode'] = request.taskCode;
  }
  if (!Util.isUnset(request.taskExecuteTime)) {
    body['TaskExecuteTime'] = request.taskExecuteTime;
  }
  if (!Util.isUnset(request.taskName)) {
    body['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.taskParam)) {
    body['TaskParam'] = request.taskParam;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitAsyncTask',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitAsyncTask(request: SubmitAsyncTaskRequest): SubmitAsyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitAsyncTaskWithOptions(request, runtime);
}

model UpdateMaterialDocumentRequest {
  agentKey?: string(name='AgentKey', example='67c520d1fa43455ea44fb69fa402d54d_p_beebot_public'),
  author?: string(name='Author'),
  docKeywords?: [ string ](name='DocKeywords'),
  docType?: string(name='DocType', example='image'),
  externalUrl?: string(name='ExternalUrl', example='http://xxxxx/xxx'),
  htmlContent?: string(name='HtmlContent'),
  id?: long(name='Id', example='44'),
  pubTime?: string(name='PubTime', example='2023-04-11 06:14:07'),
  shareAttr?: int32(name='ShareAttr', example='1'),
  srcFrom?: string(name='SrcFrom', example='UserUpload'),
  summary?: string(name='Summary'),
  textContent?: string(name='TextContent'),
  title?: string(name='Title'),
  url?: string(name='Url', example='http://xxxxx/xxx'),
}

model UpdateMaterialDocumentShrinkRequest {
  agentKey?: string(name='AgentKey', example='67c520d1fa43455ea44fb69fa402d54d_p_beebot_public'),
  author?: string(name='Author'),
  docKeywordsShrink?: string(name='DocKeywords'),
  docType?: string(name='DocType', example='image'),
  externalUrl?: string(name='ExternalUrl', example='http://xxxxx/xxx'),
  htmlContent?: string(name='HtmlContent'),
  id?: long(name='Id', example='44'),
  pubTime?: string(name='PubTime', example='2023-04-11 06:14:07'),
  shareAttr?: int32(name='ShareAttr', example='1'),
  srcFrom?: string(name='SrcFrom', example='UserUpload'),
  summary?: string(name='Summary'),
  textContent?: string(name='TextContent'),
  title?: string(name='Title'),
  url?: string(name='Url', example='http://xxxxx/xxx'),
}

model UpdateMaterialDocumentResponseBody = {
  code?: string(name='Code', example='DataNotExists'),
  data?: long(name='Data', example='82'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='数据不存在'),
  requestId?: string(name='RequestId', example='3f7045e099474ba28ceca1b4eb6d6e21'),
  success?: boolean(name='Success', example='false'),
}

model UpdateMaterialDocumentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMaterialDocumentResponseBody(name='body'),
}

async function updateMaterialDocumentWithOptions(tmpReq: UpdateMaterialDocumentRequest, runtime: Util.RuntimeOptions): UpdateMaterialDocumentResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateMaterialDocumentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.docKeywords)) {
    request.docKeywordsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.docKeywords, 'DocKeywords', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.author)) {
    body['Author'] = request.author;
  }
  if (!Util.isUnset(request.docKeywordsShrink)) {
    body['DocKeywords'] = request.docKeywordsShrink;
  }
  if (!Util.isUnset(request.docType)) {
    body['DocType'] = request.docType;
  }
  if (!Util.isUnset(request.externalUrl)) {
    body['ExternalUrl'] = request.externalUrl;
  }
  if (!Util.isUnset(request.htmlContent)) {
    body['HtmlContent'] = request.htmlContent;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.pubTime)) {
    body['PubTime'] = request.pubTime;
  }
  if (!Util.isUnset(request.shareAttr)) {
    body['ShareAttr'] = request.shareAttr;
  }
  if (!Util.isUnset(request.srcFrom)) {
    body['SrcFrom'] = request.srcFrom;
  }
  if (!Util.isUnset(request.summary)) {
    body['Summary'] = request.summary;
  }
  if (!Util.isUnset(request.textContent)) {
    body['TextContent'] = request.textContent;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }
  if (!Util.isUnset(request.url)) {
    body['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMaterialDocument',
    version = '2023-08-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMaterialDocument(request: UpdateMaterialDocumentRequest): UpdateMaterialDocumentResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMaterialDocumentWithOptions(request, runtime);
}

