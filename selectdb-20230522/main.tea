/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('selectdb', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AllocateInstancePublicConnectionRequest {
  connectionStringPrefix?: string(name='ConnectionStringPrefix', example='selectdb-cn-h033cn****-pub-i3'),
  DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
  netType?: string(name='NetType', example='Public'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AllocateInstancePublicConnectionResponseBody = {
  code?: string(name='Code', example='200'),
  instanceName?: string(name='InstanceName'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='5ED62C81-9948-5612-81E1-EA3853752306'),
  success?: boolean(name='Success', example='true'),
  taskId?: long(name='TaskId', example='498115273'),
}

model AllocateInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllocateInstancePublicConnectionResponseBody(name='body'),
}

async function allocateInstancePublicConnectionWithOptions(request: AllocateInstancePublicConnectionRequest, runtime: Util.RuntimeOptions): AllocateInstancePublicConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionStringPrefix)) {
    query['ConnectionStringPrefix'] = request.connectionStringPrefix;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.netType)) {
    query['NetType'] = request.netType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AllocateInstancePublicConnection',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function allocateInstancePublicConnection(request: AllocateInstancePublicConnectionRequest): AllocateInstancePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateInstancePublicConnectionWithOptions(request, runtime);
}

model CreateDBClusterRequest {
  cacheSize?: string(name='CacheSize', example='200'),
  chargeType?: string(name='ChargeType', example='Prepaid'),
  DBClusterClass?: string(name='DBClusterClass', example='selectdb.2xlarge'),
  DBClusterDescription?: string(name='DBClusterDescription', example='testdb'),
  DBInstanceId?: string(name='DBInstanceId', description='代表资源一级ID的资源属性字段', example='selectdb-cn-7213cjv****'),
  engine?: string(name='Engine', example='selectdb'),
  engineVersion?: string(name='EngineVersion', example='2.4'),
  period?: string(name='Period', example='Month'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='代表资源组的资源属性字段', example='rg-4690g37929****'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  storageSize?: string(name='StorageSize', example='32'),
  usedTime?: string(name='UsedTime', example='1'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1gzt31twhlo0sa5****'),
  vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-bp175iuvg8nxqraf2****'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-i'),
}

model CreateDBClusterResponseBody = {
  data?: {
    DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
    orderId?: long(name='OrderId', example='219543646290345'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F8900A96-67F7-5274-A41B-7722E1ECF8C9'),
}

model CreateDBClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDBClusterResponseBody(name='body'),
}

async function createDBClusterWithOptions(request: CreateDBClusterRequest, runtime: Util.RuntimeOptions): CreateDBClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cacheSize)) {
    query['CacheSize'] = request.cacheSize;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.DBClusterClass)) {
    query['DBClusterClass'] = request.DBClusterClass;
  }
  if (!Util.isUnset(request.DBClusterDescription)) {
    query['DBClusterDescription'] = request.DBClusterDescription;
  }
  if (!Util.isUnset(request.engine)) {
    query['Engine'] = request.engine;
  }
  if (!Util.isUnset(request.engineVersion)) {
    query['EngineVersion'] = request.engineVersion;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.storageSize)) {
    query['StorageSize'] = request.storageSize;
  }
  if (!Util.isUnset(request.usedTime)) {
    query['UsedTime'] = request.usedTime;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    body['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDBCluster',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDBCluster(request: CreateDBClusterRequest): CreateDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBClusterWithOptions(request, runtime);
}

model DeleteDBClusterRequest {
  DBClusterId?: string(name='DBClusterId', example='selectdb-xxxb9f2w-be'),
  DBInstanceId?: string(name='DBInstanceId', description='代表资源一级ID的资源属性字段', example='selectdb-cn-7213cjv****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='代表资源组的资源属性字段', example='rg-4690g37929****'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteDBClusterResponseBody = {
  data?: {
    DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
    orderId?: string(name='OrderId', example='220088764060782'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F203FA74-3041-589F-BE66-E570793A0C91'),
}

model DeleteDBClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDBClusterResponseBody(name='body'),
}

async function deleteDBClusterWithOptions(request: DeleteDBClusterRequest, runtime: Util.RuntimeOptions): DeleteDBClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    body['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDBCluster',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDBCluster(request: DeleteDBClusterRequest): DeleteDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBClusterWithOptions(request, runtime);
}

model ReleaseInstancePublicConnectionRequest {
  connectionString?: string(name='ConnectionString', example='selectdb-cn-7213c8y****-public.selectdbfe.pre.rds.aliyuncs.com'),
  DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ReleaseInstancePublicConnectionResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='4773E4EC-025D-509F-AEA9-D53123FDFB0F'),
  success?: boolean(name='Success', example='true'),
}

model ReleaseInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseInstancePublicConnectionResponseBody(name='body'),
}

async function releaseInstancePublicConnectionWithOptions(request: ReleaseInstancePublicConnectionRequest, runtime: Util.RuntimeOptions): ReleaseInstancePublicConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionString)) {
    query['ConnectionString'] = request.connectionString;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseInstancePublicConnection',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseInstancePublicConnection(request: ReleaseInstancePublicConnectionRequest): ReleaseInstancePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseInstancePublicConnectionWithOptions(request, runtime);
}

model ResetAccountPasswordRequest {
  accountName?: string(name='AccountName', example='admin'),
  accountPassword?: string(name='AccountPassword', example='a1b2c3d4@'),
  DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ResetAccountPasswordResponseBody = {
  requestId?: string(name='RequestId', example='58E21E11-90FF-50F8-A615-8DEB193676E0'),
}

model ResetAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetAccountPasswordResponseBody(name='body'),
}

async function resetAccountPasswordWithOptions(request: ResetAccountPasswordRequest, runtime: Util.RuntimeOptions): ResetAccountPasswordResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetAccountPassword',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAccountPasswordWithOptions(request, runtime);
}

model StartBEClusterRequest {
  DBClusterId?: string(name='DBClusterId', example='selectdb-cn-7213c8yvv09-be'),
  DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model StartBEClusterResponseBody = {
  requestId?: string(name='RequestId', example='F203FA74-3041-589F-BE66-E570793A0C91'),
}

model StartBEClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartBEClusterResponseBody(name='body'),
}

async function startBEClusterWithOptions(request: StartBEClusterRequest, runtime: Util.RuntimeOptions): StartBEClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartBECluster',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startBECluster(request: StartBEClusterRequest): StartBEClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return startBEClusterWithOptions(request, runtime);
}

model StopBEClusterRequest {
  DBClusterId?: string(name='DBClusterId', example='selectdb-cn-7213cjv****'),
  DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model StopBEClusterResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='BC854513-E85E-54F3-9842-B9CCD3308CDD'),
}

model StopBEClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopBEClusterResponseBody(name='body'),
}

async function stopBEClusterWithOptions(request: StopBEClusterRequest, runtime: Util.RuntimeOptions): StopBEClusterResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopBECluster',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopBECluster(request: StopBEClusterRequest): StopBEClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopBEClusterWithOptions(request, runtime);
}

model UpgradeDBInstanceEngineVersionRequest {
  DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
  engineVersion?: string(name='EngineVersion', example='2.4'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UpgradeDBInstanceEngineVersionResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='4773E4EC-025D-509F-AEA9-D53123FDFB0F'),
}

model UpgradeDBInstanceEngineVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpgradeDBInstanceEngineVersionResponseBody(name='body'),
}

async function upgradeDBInstanceEngineVersionWithOptions(request: UpgradeDBInstanceEngineVersionRequest, runtime: Util.RuntimeOptions): UpgradeDBInstanceEngineVersionResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeDBInstanceEngineVersion',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeDBInstanceEngineVersion(request: UpgradeDBInstanceEngineVersionRequest): UpgradeDBInstanceEngineVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeDBInstanceEngineVersionWithOptions(request, runtime);
}

