/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('selectdb', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AllocateInstancePublicConnectionRequest {
  connectionStringPrefix?: string(name='ConnectionStringPrefix', example='selectdb-cn-h033cn****-pub-i3'),
  DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
  netType?: string(name='NetType', example='Public'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AllocateInstancePublicConnectionResponseBody = {
  instanceName?: string(name='InstanceName'),
  requestId?: string(name='RequestId', example='5ED62C81-9948-5612-81E1-EA3853752306'),
  taskId?: long(name='TaskId', example='498115273'),
}

model AllocateInstancePublicConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AllocateInstancePublicConnectionResponseBody(name='body'),
}

async function allocateInstancePublicConnectionWithOptions(request: AllocateInstancePublicConnectionRequest, runtime: Util.RuntimeOptions): AllocateInstancePublicConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionStringPrefix)) {
    query['ConnectionStringPrefix'] = request.connectionStringPrefix;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.netType)) {
    query['NetType'] = request.netType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AllocateInstancePublicConnection',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function allocateInstancePublicConnection(request: AllocateInstancePublicConnectionRequest): AllocateInstancePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateInstancePublicConnectionWithOptions(request, runtime);
}

model CheckCreateDBInstanceRequest {
  cacheSize?: int32(name='CacheSize', example='200'),
  chargeType?: string(name='ChargeType', example='PrePaid'),
  clientToken?: string(name='ClientToken', example='AB'),
  connectionString?: string(name='ConnectionString', example='selectdb-cn-7213c8y****-public.selectdbfe.pre.rds.aliyuncs.com'),
  DBInstanceClass?: string(name='DBInstanceClass', example='selectdb.xlarge'),
  DBInstanceDescription?: string(name='DBInstanceDescription'),
  engine?: string(name='Engine', example='SelectDB'),
  engineVersion?: string(name='EngineVersion', example='2.4'),
  period?: string(name='Period', example='Month'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-4690g37929****'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityIPList?: string(name='SecurityIPList', example='172.16.XX.XX/12,192.168.XX.XX/22'),
  usedTime?: int32(name='UsedTime', example='1'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1gzt31twhlo0sa5****'),
  vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-bp175iuvg8nxqraf2****'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-i'),
}

model CheckCreateDBInstanceResponseBody = {
  requestId?: string(name='RequestId', example='ADF42B18-43FD-5100-83A9-BE81AB70C863'),
}

model CheckCreateDBInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckCreateDBInstanceResponseBody(name='body'),
}

async function checkCreateDBInstanceWithOptions(request: CheckCreateDBInstanceRequest, runtime: Util.RuntimeOptions): CheckCreateDBInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cacheSize)) {
    query['CacheSize'] = request.cacheSize;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.connectionString)) {
    query['ConnectionString'] = request.connectionString;
  }
  if (!Util.isUnset(request.DBInstanceClass)) {
    query['DBInstanceClass'] = request.DBInstanceClass;
  }
  if (!Util.isUnset(request.DBInstanceDescription)) {
    query['DBInstanceDescription'] = request.DBInstanceDescription;
  }
  if (!Util.isUnset(request.engine)) {
    query['Engine'] = request.engine;
  }
  if (!Util.isUnset(request.engineVersion)) {
    query['EngineVersion'] = request.engineVersion;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityIPList)) {
    query['SecurityIPList'] = request.securityIPList;
  }
  if (!Util.isUnset(request.usedTime)) {
    query['UsedTime'] = request.usedTime;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckCreateDBInstance',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkCreateDBInstance(request: CheckCreateDBInstanceRequest): CheckCreateDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkCreateDBInstanceWithOptions(request, runtime);
}

model CheckServiceLinkedRoleRequest {
  ownerAccount?: string(name='OwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CheckServiceLinkedRoleResponseBody = {
  hasServiceLinkedRole?: boolean(name='HasServiceLinkedRole', example='False'),
  requestId?: string(name='RequestId', example='1F455133-981E-5AD0-80EB-26EA1EF3C65F'),
}

model CheckServiceLinkedRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckServiceLinkedRoleResponseBody(name='body'),
}

async function checkServiceLinkedRoleWithOptions(request: CheckServiceLinkedRoleRequest, runtime: Util.RuntimeOptions): CheckServiceLinkedRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckServiceLinkedRole',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkServiceLinkedRole(request: CheckServiceLinkedRoleRequest): CheckServiceLinkedRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkServiceLinkedRoleWithOptions(request, runtime);
}

model CreateDBClusterRequest {
  cacheSize?: string(name='CacheSize', example='200'),
  chargeType?: string(name='ChargeType', example='Prepaid'),
  DBClusterClass?: string(name='DBClusterClass', example='selectdb.2xlarge'),
  DBClusterDescription?: string(name='DBClusterDescription', example='testdb'),
  DBInstanceId?: string(name='DBInstanceId', description='代表资源一级ID的资源属性字段', example='selectdb-cn-7213cjv****'),
  engine?: string(name='Engine', example='selectdb'),
  engineVersion?: string(name='EngineVersion', example='2.4'),
  period?: string(name='Period', example='Month'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='代表资源组的资源属性字段', example='rg-4690g37929****'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  usedTime?: string(name='UsedTime', example='1'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1gzt31twhlo0sa5****'),
  vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-bp175iuvg8nxqraf2****'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-i'),
}

model CreateDBClusterResponseBody = {
  data?: {
    DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
    orderId?: long(name='OrderId', example='219543646290345'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F8900A96-67F7-5274-A41B-7722E1ECF8C9'),
}

model CreateDBClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDBClusterResponseBody(name='body'),
}

async function createDBClusterWithOptions(request: CreateDBClusterRequest, runtime: Util.RuntimeOptions): CreateDBClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cacheSize)) {
    query['CacheSize'] = request.cacheSize;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.DBClusterClass)) {
    query['DBClusterClass'] = request.DBClusterClass;
  }
  if (!Util.isUnset(request.DBClusterDescription)) {
    query['DBClusterDescription'] = request.DBClusterDescription;
  }
  if (!Util.isUnset(request.engine)) {
    query['Engine'] = request.engine;
  }
  if (!Util.isUnset(request.engineVersion)) {
    query['EngineVersion'] = request.engineVersion;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.usedTime)) {
    query['UsedTime'] = request.usedTime;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    body['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDBCluster',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDBCluster(request: CreateDBClusterRequest): CreateDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBClusterWithOptions(request, runtime);
}

model CreateDBInstanceRequest {
  cacheSize?: int32(name='CacheSize', example='200GB'),
  chargeType?: string(name='ChargeType', example='PrePaid'),
  clientToken?: string(name='ClientToken', example='AB'),
  connectionString?: string(name='ConnectionString', example='selectdb-cn-7213c8y****-public.selectdbfe.pre.rds.aliyuncs.com'),
  DBInstanceClass?: string(name='DBInstanceClass', example='selectdb.xlarge'),
  DBInstanceDescription?: string(name='DBInstanceDescription'),
  engine?: string(name='Engine', example='selectdb'),
  engineVersion?: string(name='EngineVersion', example='2.4'),
  period?: string(name='Period', example='Month'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='代表资源组的资源属性字段', example='rg-aekzt2zaluvuvqa_fake'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityIPList?: string(name='SecurityIPList', example='192.168.1.1'),
  usedTime?: int32(name='UsedTime', example='1'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1gzt31twhlo0sa5****'),
  vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-bp175iuvg8nxqraf2****'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-e'),
}

model CreateDBInstanceResponseBody = {
  data?: {
    DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
    orderId?: long(name='OrderId', example='21137950671****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='4773E4EC-025D-509F-AEA9-D53123FDFB0F'),
}

model CreateDBInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDBInstanceResponseBody(name='body'),
}

async function createDBInstanceWithOptions(request: CreateDBInstanceRequest, runtime: Util.RuntimeOptions): CreateDBInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cacheSize)) {
    query['CacheSize'] = request.cacheSize;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.connectionString)) {
    query['ConnectionString'] = request.connectionString;
  }
  if (!Util.isUnset(request.DBInstanceClass)) {
    query['DBInstanceClass'] = request.DBInstanceClass;
  }
  if (!Util.isUnset(request.DBInstanceDescription)) {
    query['DBInstanceDescription'] = request.DBInstanceDescription;
  }
  if (!Util.isUnset(request.engine)) {
    query['Engine'] = request.engine;
  }
  if (!Util.isUnset(request.engineVersion)) {
    query['EngineVersion'] = request.engineVersion;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityIPList)) {
    query['SecurityIPList'] = request.securityIPList;
  }
  if (!Util.isUnset(request.usedTime)) {
    query['UsedTime'] = request.usedTime;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDBInstance',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDBInstance(request: CreateDBInstanceRequest): CreateDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBInstanceWithOptions(request, runtime);
}

model CreateServiceLinkedRoleForSelectDBRequest {
  ownerAccount?: string(name='OwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateServiceLinkedRoleForSelectDBResponseBody = {
  requestId?: string(name='RequestId', example='F203FA74-3041-589F-BE66-E570793A0C91'),
}

model CreateServiceLinkedRoleForSelectDBResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServiceLinkedRoleForSelectDBResponseBody(name='body'),
}

async function createServiceLinkedRoleForSelectDBWithOptions(request: CreateServiceLinkedRoleForSelectDBRequest, runtime: Util.RuntimeOptions): CreateServiceLinkedRoleForSelectDBResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateServiceLinkedRoleForSelectDB',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createServiceLinkedRoleForSelectDB(request: CreateServiceLinkedRoleForSelectDBRequest): CreateServiceLinkedRoleForSelectDBResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServiceLinkedRoleForSelectDBWithOptions(request, runtime);
}

model DeleteDBClusterRequest {
  DBClusterId?: string(name='DBClusterId', example='selectdb-xxxb9f2w-be'),
  DBInstanceId?: string(name='DBInstanceId', description='代表资源一级ID的资源属性字段', example='selectdb-cn-7213cjv****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='代表资源组的资源属性字段', example='rg-4690g37929****'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteDBClusterResponseBody = {
  data?: {
    DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
    orderId?: string(name='OrderId', example='220088764060782'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F203FA74-3041-589F-BE66-E570793A0C91'),
}

model DeleteDBClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDBClusterResponseBody(name='body'),
}

async function deleteDBClusterWithOptions(request: DeleteDBClusterRequest, runtime: Util.RuntimeOptions): DeleteDBClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    body['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDBCluster',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDBCluster(request: DeleteDBClusterRequest): DeleteDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBClusterWithOptions(request, runtime);
}

model DeleteDBInstanceRequest {
  DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteDBInstanceResponseBody = {
  requestId?: string(name='RequestId', example='BD0D0B17-C145-5B91-BFC2-6791927EE973'),
}

model DeleteDBInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDBInstanceResponseBody(name='body'),
}

async function deleteDBInstanceWithOptions(request: DeleteDBInstanceRequest, runtime: Util.RuntimeOptions): DeleteDBInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    body['DBInstanceId'] = request.DBInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDBInstance',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDBInstance(request: DeleteDBInstanceRequest): DeleteDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBInstanceWithOptions(request, runtime);
}

model DescribeDBInstanceAttributeRequest {
  DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeDBInstanceAttributeResponseBody = {
  canUpgradeVersions?: [ string ](name='CanUpgradeVersions'),
  chargeType?: string(name='ChargeType', example='Prepaid'),
  createTime?: string(name='CreateTime', example='2023-08-14T03:00:42Z'),
  DBClusterList?: [ 
    {
      cacheStorageSizeGB?: string(name='CacheStorageSizeGB', example='200'),
      cacheStorageType?: string(name='CacheStorageType', example='cloud_essd'),
      chargeType?: string(name='ChargeType', example='Prepaid'),
      cpuCores?: long(name='CpuCores', example='8'),
      createdTime?: string(name='CreatedTime', example='2023-08-14T09:24:13Z'),
      dbClusterClass?: string(name='DbClusterClass', example='selectdb.2xlarge'),
      dbClusterId?: string(name='DbClusterId', example='selectdb-cn-h033cjs****-be'),
      dbClusterName?: string(name='DbClusterName', example='test01'),
      dbInstanceName?: string(name='DbInstanceName'),
      memory?: long(name='Memory', example='64'),
      performanceLevel?: string(name='PerformanceLevel', example='PL1'),
      startTime?: string(name='StartTime', example='2023-08-14T09:24:13Z'),
      status?: string(name='Status', example='ACTIVATION'),
    }
  ](name='DBClusterList'),
  DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
  description?: string(name='Description', example='test'),
  engine?: string(name='Engine', example='selectdb'),
  engineMinorVersion?: string(name='EngineMinorVersion', example='3.0.1'),
  engineVersion?: string(name='EngineVersion', example='2.4'),
  expireTime?: string(name='ExpireTime', example='2023-09-17T00:00Z'),
  gmtModified?: string(name='GmtModified', example='2023-08-17T09:58Z'),
  lockMode?: long(name='LockMode', example='lock'),
  lockReason?: string(name='LockReason', example='nolock'),
  maintainEndtime?: string(name='MaintainEndtime'),
  maintainStarttime?: string(name='MaintainStarttime'),
  objectStoreSize?: long(name='ObjectStoreSize', example='0'),
  requestId?: string(name='RequestId', example='06758CAB-1204-5852-A471-29C87D5C1D0F'),
  resourceCpu?: long(name='ResourceCpu', example='8'),
  resourceGroupId?: string(name='ResourceGroupId'),
  status?: string(name='Status', example='ACTIVATION'),
  storageSize?: long(name='StorageSize', example='400'),
  subDomain?: string(name='SubDomain', example='cn-beijing-h-aliyun'),
}

model DescribeDBInstanceAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDBInstanceAttributeResponseBody(name='body'),
}

async function describeDBInstanceAttributeWithOptions(request: DescribeDBInstanceAttributeRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceAttribute',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceAttribute(request: DescribeDBInstanceAttributeRequest): DescribeDBInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceAttributeWithOptions(request, runtime);
}

model DescribeDBInstanceNetInfoRequest {
  DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeDBInstanceNetInfoResponseBody = {
  DBClustersNetInfos?: [ 
    {
      clusterId?: string(name='ClusterId'),
      connectionString?: string(name='ConnectionString'),
      ip?: string(name='Ip'),
      netType?: string(name='NetType'),
      portList?: [ 
        {
          port?: int32(name='Port'),
          protocol?: string(name='Protocol'),
        }
      ](name='PortList'),
      userVisible?: boolean(name='UserVisible'),
      vpcId?: string(name='VpcId'),
      vpcInstanceId?: string(name='VpcInstanceId'),
      vswitchId?: string(name='VswitchId'),
    }
  ](name='DBClustersNetInfos'),
  DBInstanceNetInfos?: [ 
    {
      clusterId?: string(name='ClusterId'),
      connectionString?: string(name='ConnectionString', example='selectdb-cn-h033cnd****-fe.selectdbfe.pre.rds.aliyuncs.com'),
      ip?: string(name='Ip', example='172.16.XX.XX'),
      netType?: string(name='NetType', example='VPC'),
      portList?: [ 
        {
          port?: int32(name='Port', example='MySQLPort'),
          protocol?: string(name='Protocol', example='9030'),
        }
      ](name='PortList'),
      userVisible?: boolean(name='UserVisible', example='true'),
      vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-wz90scxq6ods388ft****'),
      vpcInstanceId?: string(name='VpcInstanceId', example='selectdb-cn-h033cnd****-fe-20230816101006'),
      vswitchId?: string(name='VswitchId', example='vsw-uf6mlqti065rer6m0****'),
    }
  ](name='DBInstanceNetInfos'),
  requestId?: string(name='RequestId', example='ADF42B18-43FD-5100-83A9-BE81AB70C863'),
}

model DescribeDBInstanceNetInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDBInstanceNetInfoResponseBody(name='body'),
}

async function describeDBInstanceNetInfoWithOptions(request: DescribeDBInstanceNetInfoRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceNetInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceNetInfo',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceNetInfo(request: DescribeDBInstanceNetInfoRequest): DescribeDBInstanceNetInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceNetInfoWithOptions(request, runtime);
}

model DescribeDBInstancesRequest {
  DBInstanceDescription?: string(name='DBInstanceDescription'),
  DBInstanceIds?: string(name='DBInstanceIds', example='selectdb-cn-7213cjv****'),
  DBInstanceStatus?: string(name='DBInstanceStatus', example='ACTIVATION'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='30'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-4690g37929****'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeDBInstancesResponseBody = {
  items?: [ 
    {
      category?: string(name='Category', example='basic'),
      chargeType?: string(name='ChargeType', example='PrePaid'),
      clusterCount?: int32(name='ClusterCount', example='1'),
      DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
      description?: string(name='Description'),
      engine?: string(name='Engine', example='selectdb'),
      engineVersion?: string(name='EngineVersion', example='2.4'),
      expireTime?: string(name='ExpireTime', example='2024-03-29T03:47:05Z'),
      gmtCreated?: string(name='GmtCreated', example='2023-08-12T04:14Z'),
      gmtModified?: string(name='GmtModified', example='2023-08-12T19:05Z'),
      instanceUsedType?: string(name='InstanceUsedType', example='Instance'),
      isDeleted?: boolean(name='IsDeleted', example='false'),
      lockMode?: long(name='LockMode', example='0'),
      lockReason?: string(name='LockReason', example='nolock'),
      maintainEndTimeStr?: string(name='MaintainEndTimeStr'),
      maintainEndtime?: string(name='MaintainEndtime'),
      maintainStartTimeStr?: string(name='MaintainStartTimeStr'),
      maintainStarttime?: string(name='MaintainStarttime'),
      objectStoreSize?: long(name='ObjectStoreSize', example='200'),
      parentInstance?: string(name='ParentInstance'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceCpu?: long(name='ResourceCpu', example='8'),
      resourceGroupId?: string(name='ResourceGroupId'),
      resourceMemory?: long(name='ResourceMemory', example='64'),
      scaleMax?: long(name='ScaleMax', example='0'),
      scaleMin?: long(name='ScaleMin', example='0'),
      scaleReplica?: long(name='ScaleReplica'),
      status?: string(name='Status', example='ACTIVATION'),
      storageSize?: long(name='StorageSize', example='100'),
      storageType?: string(name='StorageType', example='cloud_essd'),
      tags?: [ 
        {
          key?: string(name='Key', example='department'),
          value?: string(name='Value', example='it'),
        }
      ](name='Tags'),
      tenantClusterId?: string(name='TenantClusterId'),
      tenantToken?: string(name='TenantToken'),
      tenantUserId?: string(name='TenantUserId'),
      vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-bp175iuvg8nxqraf2****'),
      vswitchId?: string(name='VswitchId', example='vsw-bp1gzt31twhlo0sa5****'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-i'),
      connectionString?: string(name='connectionString'),
    }
  ](name='Items'),
  pageNumber?: long(name='PageNumber', example='30'),
  pageSize?: long(name='PageSize', example='1'),
  requestId?: string(name='RequestId', example='BC854513-E85E-54F3-9842-B9CCD3308CDD'),
  totalRecordCount?: long(name='TotalRecordCount', example='2'),
}

model DescribeDBInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDBInstancesResponseBody(name='body'),
}

async function describeDBInstancesWithOptions(request: DescribeDBInstancesRequest, runtime: Util.RuntimeOptions): DescribeDBInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceDescription)) {
    query['DBInstanceDescription'] = request.DBInstanceDescription;
  }
  if (!Util.isUnset(request.DBInstanceIds)) {
    query['DBInstanceIds'] = request.DBInstanceIds;
  }
  if (!Util.isUnset(request.DBInstanceStatus)) {
    query['DBInstanceStatus'] = request.DBInstanceStatus;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstances',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstances(request: DescribeDBInstancesRequest): DescribeDBInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancesWithOptions(request, runtime);
}

model DescribeSecurityIPListRequest {
  DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeSecurityIPListResponseBody = {
  DBInstanceName?: string(name='DBInstanceName', example='selectdb-cn-7213cjv****'),
  groupItems?: [ 
    {
      aecurityIPType?: string(name='AecurityIPType', example='ipv4'),
      groupName?: string(name='GroupName', example='group1'),
      groupTag?: string(name='GroupTag', example='""'),
      securityIPList?: string(name='SecurityIPList', example='127.0.XX.XX'),
      whitelistNetType?: string(name='WhitelistNetType', example='mix'),
    }
  ](name='GroupItems'),
  requestId?: string(name='RequestId', example='5CBE044D-4594-525D-AC65-E988553D853E'),
}

model DescribeSecurityIPListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSecurityIPListResponseBody(name='body'),
}

async function describeSecurityIPListWithOptions(request: DescribeSecurityIPListRequest, runtime: Util.RuntimeOptions): DescribeSecurityIPListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecurityIPList',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSecurityIPList(request: DescribeSecurityIPListRequest): DescribeSecurityIPListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityIPListWithOptions(request, runtime);
}

model ModifyBEClusterAttributeRequest {
  DBClusterId?: string(name='DBClusterId', example='selectdb-xxxb9f2w-be'),
  DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
  instanceAttributeType?: string(name='InstanceAttributeType', example='DBInstanceDescription'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  value?: string(name='Value', example='testdb'),
}

model ModifyBEClusterAttributeResponseBody = {
  requestId?: string(name='RequestId', example='58E21E11-90FF-50F8-A615-8DEB193676E0'),
}

model ModifyBEClusterAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyBEClusterAttributeResponseBody(name='body'),
}

async function modifyBEClusterAttributeWithOptions(request: ModifyBEClusterAttributeRequest, runtime: Util.RuntimeOptions): ModifyBEClusterAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.instanceAttributeType)) {
    query['InstanceAttributeType'] = request.instanceAttributeType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyBEClusterAttribute',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyBEClusterAttribute(request: ModifyBEClusterAttributeRequest): ModifyBEClusterAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBEClusterAttributeWithOptions(request, runtime);
}

model ModifyDBClusterRequest {
  DBClusterClass?: string(name='DBClusterClass', example='selectdb.2xlarge'),
  DBClusterId?: string(name='DBClusterId', example='selectdb-xxxb9f2w-be'),
  DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
  engine?: string(name='Engine', example='selectdb'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyDBClusterResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='代表资源一级ID的资源属性字段', example='selectdb-cn-7213cjv****'),
  data?: {
    DBClusterId?: string(name='DBClusterId', example='selectdb-cn-7213cjv****'),
    DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
    orderId?: long(name='OrderId', example='219396937240838'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='0BF61F90-ACED-55DF-A6FE-56714B2BFCF6'),
}

model ModifyDBClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDBClusterResponseBody(name='body'),
}

async function modifyDBClusterWithOptions(request: ModifyDBClusterRequest, runtime: Util.RuntimeOptions): ModifyDBClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterClass)) {
    query['DBClusterClass'] = request.DBClusterClass;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.engine)) {
    query['Engine'] = request.engine;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBCluster',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBCluster(request: ModifyDBClusterRequest): ModifyDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterWithOptions(request, runtime);
}

model ModifyDBInstanceAttributeRequest {
  DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
  instanceAttributeType?: string(name='InstanceAttributeType', example='DBInstanceDescription'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  value?: string(name='Value', example='testdb01'),
}

model ModifyDBInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId', example='2DB29DEE-52E4-57EE-BF68-2C95C20E6658'),
}

model ModifyDBInstanceAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDBInstanceAttributeResponseBody(name='body'),
}

async function modifyDBInstanceAttributeWithOptions(request: ModifyDBInstanceAttributeRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.instanceAttributeType)) {
    query['InstanceAttributeType'] = request.instanceAttributeType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceAttribute',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBInstanceAttribute(request: ModifyDBInstanceAttributeRequest): ModifyDBInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceAttributeWithOptions(request, runtime);
}

model ModifySecurityIPListRequest {
  DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
  groupName?: string(name='GroupName', example='default'),
  modifyMode?: string(name='ModifyMode', example='0'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityIPList?: string(name='SecurityIPList', example='127.0.XX.XX,127.2.XX.XX'),
}

model ModifySecurityIPListResponseBody = {
  DBInstanceName?: string(name='DBInstanceName'),
  groupName?: string(name='GroupName', example='group1'),
  groupTag?: string(name='GroupTag', example='grouptag'),
  requestId?: string(name='RequestId', example='195F64C2-8F11-532B-A436-FC08A221D756'),
  securityIPList?: string(name='SecurityIPList', example='127.0.XX.XX,127.2.XX.XX'),
  securityIPType?: string(name='SecurityIPType', example='ipv4'),
  taskId?: long(name='TaskId', example='479095561'),
  whitelistNetType?: string(name='WhitelistNetType', example='mix'),
}

model ModifySecurityIPListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySecurityIPListResponseBody(name='body'),
}

async function modifySecurityIPListWithOptions(request: ModifySecurityIPListRequest, runtime: Util.RuntimeOptions): ModifySecurityIPListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySecurityIPList',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySecurityIPList(request: ModifySecurityIPListRequest): ModifySecurityIPListResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityIPListWithOptions(request, runtime);
}

model ReleaseInstancePublicConnectionRequest {
  connectionString?: string(name='ConnectionString', example='selectdb-cn-7213c8y****-public.selectdbfe.pre.rds.aliyuncs.com'),
  DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ReleaseInstancePublicConnectionResponseBody = {
  requestId?: string(name='RequestId', example='4773E4EC-025D-509F-AEA9-D53123FDFB0F'),
}

model ReleaseInstancePublicConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseInstancePublicConnectionResponseBody(name='body'),
}

async function releaseInstancePublicConnectionWithOptions(request: ReleaseInstancePublicConnectionRequest, runtime: Util.RuntimeOptions): ReleaseInstancePublicConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionString)) {
    query['ConnectionString'] = request.connectionString;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseInstancePublicConnection',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseInstancePublicConnection(request: ReleaseInstancePublicConnectionRequest): ReleaseInstancePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseInstancePublicConnectionWithOptions(request, runtime);
}

model ResetAccountPasswordRequest {
  accountName?: string(name='AccountName', example='admin'),
  accountPassword?: string(name='AccountPassword', example='a1b2c3d4@'),
  DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ResetAccountPasswordResponseBody = {
  requestId?: string(name='RequestId', example='58E21E11-90FF-50F8-A615-8DEB193676E0'),
}

model ResetAccountPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetAccountPasswordResponseBody(name='body'),
}

async function resetAccountPasswordWithOptions(request: ResetAccountPasswordRequest, runtime: Util.RuntimeOptions): ResetAccountPasswordResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetAccountPassword',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAccountPasswordWithOptions(request, runtime);
}

model RestartDBClusterRequest {
  DBClusterId?: string(name='DBClusterId', example='selectdb-cn-7213c8yvv09-be'),
  DBInstanceId?: string(name='DBInstanceId', description='代表资源一级ID的资源属性字段', example='selectdb-cn-7213cjv****'),
  regionId?: string(name='RegionId', description='地域', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组id', example='rg-4690g37929****'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model RestartDBClusterResponseBody = {
  data?: {
    DBClusterId?: string(name='DBClusterId', example='selectdb-cn-7213c8y****-be'),
    DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='BD0D0B17-C145-5B91-BFC2-6791927EE973'),
}

model RestartDBClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestartDBClusterResponseBody(name='body'),
}

async function restartDBClusterWithOptions(request: RestartDBClusterRequest, runtime: Util.RuntimeOptions): RestartDBClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    body['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RestartDBCluster',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function restartDBCluster(request: RestartDBClusterRequest): RestartDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartDBClusterWithOptions(request, runtime);
}

model StartBEClusterRequest {
  DBClusterId?: string(name='DBClusterId', example='selectdb-cn-7213c8yvv09-be'),
  DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model StartBEClusterResponseBody = {
  requestId?: string(name='RequestId', example='F203FA74-3041-589F-BE66-E570793A0C91'),
}

model StartBEClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartBEClusterResponseBody(name='body'),
}

async function startBEClusterWithOptions(request: StartBEClusterRequest, runtime: Util.RuntimeOptions): StartBEClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartBECluster',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startBECluster(request: StartBEClusterRequest): StartBEClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return startBEClusterWithOptions(request, runtime);
}

model StopBEClusterRequest {
  DBClusterId?: string(name='DBClusterId', example='selectdb-cn-7213cjv****'),
  DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model StopBEClusterResponseBody = {
  requestId?: string(name='RequestId', example='BC854513-E85E-54F3-9842-B9CCD3308CDD'),
}

model StopBEClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopBEClusterResponseBody(name='body'),
}

async function stopBEClusterWithOptions(request: StopBEClusterRequest, runtime: Util.RuntimeOptions): StopBEClusterResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopBECluster',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopBECluster(request: StopBEClusterRequest): StopBEClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopBEClusterWithOptions(request, runtime);
}

model UpgradeDBInstanceEngineVersionRequest {
  DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
  engineVersion?: string(name='EngineVersion', example='2.4'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  switchTimeMode?: string(name='SwitchTimeMode'),
}

model UpgradeDBInstanceEngineVersionResponseBody = {
  requestId?: string(name='RequestId', example='4773E4EC-025D-509F-AEA9-D53123FDFB0F'),
}

model UpgradeDBInstanceEngineVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeDBInstanceEngineVersionResponseBody(name='body'),
}

async function upgradeDBInstanceEngineVersionWithOptions(request: UpgradeDBInstanceEngineVersionRequest, runtime: Util.RuntimeOptions): UpgradeDBInstanceEngineVersionResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeDBInstanceEngineVersion',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeDBInstanceEngineVersion(request: UpgradeDBInstanceEngineVersionRequest): UpgradeDBInstanceEngineVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeDBInstanceEngineVersionWithOptions(request, runtime);
}

