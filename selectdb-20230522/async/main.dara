/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'selectdb';
  @version = '2023-05-22';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AllocateInstancePublicConnectionRequest {
  connectionStringPrefix: string(name='ConnectionStringPrefix', example='selectdb-cn-h033cn****-pub-i3', position='Query'),
  DBInstanceId: string(name='DBInstanceId', example='selectdb-cn-7213cjv****', position='Query'),
  netType: string(name='NetType', example='Public', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AllocateInstancePublicConnectionResponseBody = {
  code?: string(name='Code', example='200'),
  instanceName?: string(name='InstanceName'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='5ED62C81-9948-5612-81E1-EA3853752306'),
  success?: boolean(name='Success', example='true'),
  taskId?: long(name='TaskId', example='498115273'),
}

model AllocateInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllocateInstancePublicConnectionResponseBody(name='body'),
}

async function allocateInstancePublicConnection(request: AllocateInstancePublicConnectionRequest): AllocateInstancePublicConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateInstancePublicConnection', 'POST', '/', 'json', false, 'json', request);
}

model CheckCreateDBInstanceRequest {
  cacheSize?: int32(name='CacheSize', example='200', position='Query'),
  chargeType?: string(name='ChargeType', example='PrePaid', position='Query'),
  clientToken?: string(name='ClientToken', example='AB', position='Query'),
  connectionString?: string(name='ConnectionString', example='selectdb-cn-7213c8y****-public.selectdbfe.pre.rds.aliyuncs.com', position='Query'),
  DBInstanceClass?: string(name='DBInstanceClass', example='selectdb.xlarge', position='Query'),
  DBInstanceDescription?: string(name='DBInstanceDescription', position='Query'),
  engine?: string(name='Engine', example='SelectDB', position='Query'),
  engineVersion?: string(name='EngineVersion', example='2.4', position='Query'),
  period?: string(name='Period', example='Month', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-4690g37929****', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityIPList?: string(name='SecurityIPList', example='172.16.XX.XX/12,192.168.XX.XX/22', position='Query'),
  storageSize?: string(name='StorageSize', example='32', position='Query'),
  usedTime?: int32(name='UsedTime', example='1', position='Query'),
  vSwitchId: string(name='VSwitchId', example='vsw-bp1gzt31twhlo0sa5****', position='Query'),
  vpcId: string(name='VpcId', description='VPC ID。', example='vpc-bp175iuvg8nxqraf2****', position='Query'),
  zoneId: string(name='ZoneId', example='cn-hangzhou-i', position='Query'),
}

model CheckCreateDBInstanceResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='ADF42B18-43FD-5100-83A9-BE81AB70C863'),
  success?: string(name='Success', example='true'),
}

model CheckCreateDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckCreateDBInstanceResponseBody(name='body'),
}

async function checkCreateDBInstance(request: CheckCreateDBInstanceRequest): CheckCreateDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckCreateDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model CheckServiceLinkedRoleRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CheckServiceLinkedRoleResponseBody = {
  hasServiceLinkedRole?: boolean(name='HasServiceLinkedRole', example='False'),
  requestId?: string(name='RequestId', example='1F455133-981E-5AD0-80EB-26EA1EF3C65F'),
}

model CheckServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckServiceLinkedRoleResponseBody(name='body'),
}

async function checkServiceLinkedRole(request: CheckServiceLinkedRoleRequest): CheckServiceLinkedRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckServiceLinkedRole', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBClusterRequest {
  cacheSize?: string(name='CacheSize', example='200', position='Query'),
  chargeType?: string(name='ChargeType', example='Prepaid', position='Query'),
  DBClusterClass?: string(name='DBClusterClass', example='selectdb.2xlarge', position='Query'),
  DBClusterDescription?: string(name='DBClusterDescription', example='testdb', position='Query'),
  DBInstanceId?: string(name='DBInstanceId', description='代表资源一级ID的资源属性字段', example='selectdb-cn-7213cjv****', position='Body'),
  engine?: string(name='Engine', example='selectdb', position='Query'),
  engineVersion?: string(name='EngineVersion', example='2.4', position='Query'),
  period?: string(name='Period', example='Month', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='代表资源组的资源属性字段', example='rg-4690g37929****', position='Body'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  storageSize?: string(name='StorageSize', example='32', position='Query'),
  usedTime?: string(name='UsedTime', example='1', position='Query'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1gzt31twhlo0sa5****', position='Query'),
  vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-bp175iuvg8nxqraf2****', position='Query'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-i', position='Query'),
}

model CreateDBClusterResponseBody = {
  data?: {
    DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
    orderId?: long(name='OrderId', example='219543646290345'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F8900A96-67F7-5274-A41B-7722E1ECF8C9'),
}

model CreateDBClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDBClusterResponseBody(name='body'),
}

async function createDBCluster(request: CreateDBClusterRequest): CreateDBClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBCluster', 'POST', '/', 'json', true, 'form', request);
}

model CreateDBInstanceRequest {
  cacheSize?: int32(name='CacheSize', example='200GB', position='Query'),
  chargeType?: string(name='ChargeType', example='PrePaid', position='Query'),
  clientToken?: string(name='ClientToken', example='AB', position='Query'),
  connectionString?: string(name='ConnectionString', example='selectdb-cn-7213c8y****-public.selectdbfe.pre.rds.aliyuncs.com', position='Query'),
  DBInstanceClass?: string(name='DBInstanceClass', example='selectdb.xlarge', position='Query'),
  DBInstanceDescription?: string(name='DBInstanceDescription', position='Query'),
  engine?: string(name='Engine', example='selectdb', position='Query'),
  engineVersion?: string(name='EngineVersion', example='2.4', position='Query'),
  period?: string(name='Period', example='Month', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='代表资源组的资源属性字段', example='rg-aekzt2zaluvuvqa_fake', position='Body'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityIPList?: string(name='SecurityIPList', example='192.168.1.1', position='Query'),
  storageSize?: string(name='StorageSize', example='200', position='Query'),
  usedTime?: int32(name='UsedTime', example='1', position='Query'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1gzt31twhlo0sa5****', position='Query'),
  vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-bp175iuvg8nxqraf2****', position='Query'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-e', position='Query'),
}

model CreateDBInstanceResponseBody = {
  data?: {
    DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
    orderId?: long(name='OrderId', example='21137950671****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='4773E4EC-025D-509F-AEA9-D53123FDFB0F'),
}

model CreateDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDBInstanceResponseBody(name='body'),
}

async function createDBInstance(request: CreateDBInstanceRequest): CreateDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBInstance', 'POST', '/', 'json', true, 'form', request);
}

model CreateServiceLinkedRoleForSelectDBRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateServiceLinkedRoleForSelectDBResponseBody = {
  requestId?: string(name='RequestId', example='F203FA74-3041-589F-BE66-E570793A0C91'),
}

model CreateServiceLinkedRoleForSelectDBResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateServiceLinkedRoleForSelectDBResponseBody(name='body'),
}

async function createServiceLinkedRoleForSelectDB(request: CreateServiceLinkedRoleForSelectDBRequest): CreateServiceLinkedRoleForSelectDBResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServiceLinkedRoleForSelectDB', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDBClusterRequest {
  DBClusterId?: string(name='DBClusterId', example='selectdb-xxxb9f2w-be', position='Query'),
  DBInstanceId?: string(name='DBInstanceId', description='代表资源一级ID的资源属性字段', example='selectdb-cn-7213cjv****', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='代表资源组的资源属性字段', example='rg-4690g37929****', position='Body'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDBClusterResponseBody = {
  data?: {
    DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
    orderId?: string(name='OrderId', example='220088764060782'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F203FA74-3041-589F-BE66-E570793A0C91'),
}

model DeleteDBClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDBClusterResponseBody(name='body'),
}

async function deleteDBCluster(request: DeleteDBClusterRequest): DeleteDBClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDBCluster', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDBInstanceRequest {
  DBInstanceId: string(name='DBInstanceId', example='selectdb-cn-7213cjv****', position='Body'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDBInstanceResponseBody = {
  requestId?: string(name='RequestId', example='BD0D0B17-C145-5B91-BFC2-6791927EE973'),
}

model DeleteDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDBInstanceResponseBody(name='body'),
}

async function deleteDBInstance(request: DeleteDBInstanceRequest): DeleteDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDBInstance', 'POST', '/', 'json', true, 'form', request);
}

model DescribeDBInstanceAttributeRequest {
  DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBInstanceAttributeResponseBody = {
  canUpgradeVersions?: [ string ](name='CanUpgradeVersions'),
  chargeType?: string(name='ChargeType', example='Prepaid'),
  createTime?: string(name='CreateTime', example='2023-08-14T03:00:42Z'),
  DBClusterList?: [ 
    {
      cacheStorageSizeGB?: string(name='CacheStorageSizeGB', example='200'),
      cacheStorageSizeGiB?: long(name='CacheStorageSizeGiB', example='200'),
      cacheStorageType?: string(name='CacheStorageType', example='cloud_essd'),
      chargeType?: string(name='ChargeType', example='Prepaid'),
      cpuCores?: long(name='CpuCores', example='8'),
      createdTime?: string(name='CreatedTime', example='2023-08-14T09:24:13Z'),
      dbClusterClass?: string(name='DbClusterClass', example='selectdb.2xlarge'),
      dbClusterId?: string(name='DbClusterId', example='selectdb-cn-h033cjs****-be'),
      dbClusterName?: string(name='DbClusterName', example='test01'),
      dbInstanceName?: string(name='DbInstanceName'),
      memory?: long(name='Memory', example='64'),
      objectStoreSizeGiB?: long(name='ObjectStoreSizeGiB', example='0'),
      performanceLevel?: string(name='PerformanceLevel', example='PL1'),
      startTime?: string(name='StartTime', example='2023-08-14T09:24:13Z'),
      status?: string(name='Status', example='ACTIVATION'),
    }
  ](name='DBClusterList'),
  DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
  description?: string(name='Description', example='test'),
  engine?: string(name='Engine', example='selectdb'),
  engineMinorVersion?: string(name='EngineMinorVersion', example='3.0.1'),
  engineVersion?: string(name='EngineVersion', example='2.4'),
  expireTime?: string(name='ExpireTime', example='2023-09-17T00:00Z'),
  gmtModified?: string(name='GmtModified', example='2023-08-17T09:58Z'),
  lockMode?: long(name='LockMode', example='lock'),
  lockReason?: string(name='LockReason', example='nolock'),
  maintainEndtime?: string(name='MaintainEndtime'),
  maintainStarttime?: string(name='MaintainStarttime'),
  objectStoreSize?: long(name='ObjectStoreSize', example='0'),
  requestId?: string(name='RequestId', example='06758CAB-1204-5852-A471-29C87D5C1D0F'),
  resourceCpu?: long(name='ResourceCpu', example='8'),
  status?: string(name='Status', example='ACTIVATION'),
  storageSize?: long(name='StorageSize', example='400'),
  subDomain?: string(name='SubDomain', example='cn-beijing-h-aliyun'),
}

model DescribeDBInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceAttributeResponseBody(name='body'),
}

async function describeDBInstanceAttribute(request: DescribeDBInstanceAttributeRequest): DescribeDBInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceNetInfoRequest {
  DBInstanceId: string(name='DBInstanceId', example='selectdb-cn-7213cjv****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBInstanceNetInfoResponseBody = {
  DBInstanceNetInfos?: [ 
    {
      connectionString?: string(name='ConnectionString', example='selectdb-cn-h033cnd****-fe.selectdbfe.pre.rds.aliyuncs.com'),
      ip?: string(name='Ip', example='172.16.XX.XX'),
      netType?: string(name='NetType', example='VPC'),
      portList?: [ 
        {
          port?: int32(name='Port', example='MySQLPort'),
          protocol?: string(name='Protocol', example='9030'),
        }
      ](name='PortList'),
      userVisible?: boolean(name='UserVisible', example='true'),
      vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-wz90scxq6ods388ft****'),
      vpcInstanceId?: string(name='VpcInstanceId', example='selectdb-cn-h033cnd****-fe-20230816101006'),
      vswitchId?: string(name='VswitchId', example='vsw-uf6mlqti065rer6m0****'),
    }
  ](name='DBInstanceNetInfos'),
  requestId?: string(name='RequestId', example='ADF42B18-43FD-5100-83A9-BE81AB70C863'),
}

model DescribeDBInstanceNetInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceNetInfoResponseBody(name='body'),
}

async function describeDBInstanceNetInfo(request: DescribeDBInstanceNetInfoRequest): DescribeDBInstanceNetInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceNetInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstancesRequest {
  DBInstanceDescription?: string(name='DBInstanceDescription', position='Query'),
  DBInstanceIds?: string(name='DBInstanceIds', example='selectdb-cn-7213cjv****', position='Query'),
  DBInstanceStatus?: string(name='DBInstanceStatus', example='ACTIVATION', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='30', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-4690g37929****', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBInstancesResponseBody = {
  items?: [ 
    {
      category?: string(name='Category', example='basic'),
      chargeType?: string(name='ChargeType', example='PrePaid'),
      clusterCount?: int32(name='ClusterCount', example='1'),
      createTime?: string(name='CreateTime', example='2023-08-12T04:14Z'),
      DBClusterList?: [ 
        {
          cacheStorageSizeGiB?: long(name='CacheStorageSizeGiB', example='200'),
          cacheStorageType?: string(name='CacheStorageType', example='cloud_essd'),
          cpuCores?: long(name='CpuCores', example='8'),
          createdTime?: string(name='CreatedTime', example='2023-08-12T04:14Z'),
          DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
          dbClusterClass?: string(name='DbClusterClass', example='selectdb.4xlarge'),
          dbClusterId?: string(name='DbClusterId', example='selectdb-xxx8****-be'),
          dbClusterName?: string(name='DbClusterName', example='default_cluster'),
          memory?: long(name='Memory', example='64'),
          performanceLevel?: string(name='PerformanceLevel', example='PL1'),
          status?: string(name='Status', example='RESOURCE_CHANGING'),
          objectStoreSizeGiB?: long(name='objectStoreSizeGiB', example='0'),
        }
      ](name='DBClusterList'),
      DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
      description?: string(name='Description'),
      engine?: string(name='Engine', example='selectdb'),
      engineVersion?: string(name='EngineVersion', example='2.4'),
      expireTime?: string(name='ExpireTime', example='2024-03-29T03:47:05Z'),
      gmtCreated?: string(name='GmtCreated', example='2023-08-12T04:14Z'),
      gmtModified?: string(name='GmtModified', example='2023-08-12T19:05Z'),
      instanceClass?: string(name='InstanceClass', example='selectdb.2xlarge'),
      instanceUsedType?: string(name='InstanceUsedType', example='Instance'),
      isDeleted?: boolean(name='IsDeleted', example='false'),
      lockMode?: long(name='LockMode', example='0'),
      lockReason?: string(name='LockReason', example='nolock'),
      maintainEndTimeStr?: string(name='MaintainEndTimeStr'),
      maintainEndtime?: string(name='MaintainEndtime'),
      maintainStartTimeStr?: string(name='MaintainStartTimeStr'),
      maintainStarttime?: string(name='MaintainStarttime'),
      objectStoreSize?: long(name='ObjectStoreSize', example='200'),
      parentInstance?: string(name='ParentInstance'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceCpu?: long(name='ResourceCpu', example='8'),
      resourceGroupId?: string(name='ResourceGroupId'),
      resourceMemory?: long(name='ResourceMemory', example='64'),
      scaleMax?: long(name='ScaleMax', example='0'),
      scaleMin?: long(name='ScaleMin', example='0'),
      scaleReplica?: long(name='ScaleReplica'),
      status?: string(name='Status', example='ACTIVATION'),
      storageSize?: long(name='StorageSize', example='100'),
      storageType?: string(name='StorageType', example='cloud_essd'),
      tags?: [ 
        {
          key?: string(name='Key', example='department'),
          value?: string(name='Value', example='it'),
        }
      ](name='Tags'),
      tenantClusterId?: string(name='TenantClusterId'),
      tenantToken?: string(name='TenantToken'),
      tenantUserId?: string(name='TenantUserId'),
      vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-bp175iuvg8nxqraf2****'),
      vswitchId?: string(name='VswitchId', example='vsw-bp1gzt31twhlo0sa5****'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-i'),
      connectionString?: string(name='connectionString'),
    }
  ](name='Items'),
  pageNumber?: long(name='PageNumber', example='30'),
  pageSize?: long(name='PageSize', example='1'),
  requestId?: string(name='RequestId', example='BC854513-E85E-54F3-9842-B9CCD3308CDD'),
  totalRecordCount?: long(name='TotalRecordCount', example='2'),
}

model DescribeDBInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstancesResponseBody(name='body'),
}

async function describeDBInstances(request: DescribeDBInstancesRequest): DescribeDBInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecurityIPListRequest {
  DBInstanceId: string(name='DBInstanceId', example='selectdb-cn-7213cjv****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeSecurityIPListResponseBody = {
  code?: string(name='Code', example='200'),
  DBInstanceName?: string(name='DBInstanceName', example='selectdb-cn-7213cjv****'),
  groupItems?: [ 
    {
      aecurityIPType?: string(name='AecurityIPType', example='ipv4'),
      groupName?: string(name='GroupName', example='group1'),
      groupTag?: string(name='GroupTag', example='""'),
      securityIPList?: string(name='SecurityIPList', example='127.0.XX.XX'),
      whitelistNetType?: string(name='WhitelistNetType', example='mix'),
    }
  ](name='GroupItems'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='5CBE044D-4594-525D-AC65-E988553D853E'),
  success?: boolean(name='Success', example='True'),
}

model DescribeSecurityIPListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecurityIPListResponseBody(name='body'),
}

async function describeSecurityIPList(request: DescribeSecurityIPListRequest): DescribeSecurityIPListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecurityIPList', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBEClusterAttributeRequest {
  DBClusterId: string(name='DBClusterId', example='selectdb-xxxb9f2w-be', position='Query'),
  DBInstanceId: string(name='DBInstanceId', example='selectdb-cn-7213cjv****', position='Query'),
  instanceAttributeType: string(name='InstanceAttributeType', example='DBInstanceDescription', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  value: string(name='Value', example='testdb', position='Query'),
}

model ModifyBEClusterAttributeResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='58E21E11-90FF-50F8-A615-8DEB193676E0'),
  success?: string(name='Success', example='true'),
}

model ModifyBEClusterAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyBEClusterAttributeResponseBody(name='body'),
}

async function modifyBEClusterAttribute(request: ModifyBEClusterAttributeRequest): ModifyBEClusterAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBEClusterAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterRequest {
  DBClusterClass?: string(name='DBClusterClass', example='selectdb.2xlarge', position='Query'),
  DBClusterId?: string(name='DBClusterId', example='selectdb-xxxb9f2w-be', position='Query'),
  DBInstanceId: string(name='DBInstanceId', example='selectdb-cn-7213cjv****', position='Query'),
  engine?: string(name='Engine', example='selectdb', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBClusterResponseBody = {
  DBInstanceId?: string(name='DBInstanceId', description='代表资源一级ID的资源属性字段', example='selectdb-cn-7213cjv****'),
  data?: {
    DBClusterId?: string(name='DBClusterId', example='selectdb-cn-7213cjv****'),
    DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
    orderId?: long(name='OrderId', example='219396937240838'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='0BF61F90-ACED-55DF-A6FE-56714B2BFCF6'),
}

model ModifyDBClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBClusterResponseBody(name='body'),
}

async function modifyDBCluster(request: ModifyDBClusterRequest): ModifyDBClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBCluster', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceAttributeRequest {
  DBInstanceId: string(name='DBInstanceId', example='selectdb-cn-7213cjv****', position='Query'),
  instanceAttributeType: string(name='InstanceAttributeType', example='DBInstanceDescription', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  value: string(name='Value', example='testdb01', position='Query'),
}

model ModifyDBInstanceAttributeResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='2DB29DEE-52E4-57EE-BF68-2C95C20E6658'),
  success?: boolean(name='Success', example='true'),
}

model ModifyDBInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBInstanceAttributeResponseBody(name='body'),
}

async function modifyDBInstanceAttribute(request: ModifyDBInstanceAttributeRequest): ModifyDBInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifySecurityIPListRequest {
  DBInstanceId: string(name='DBInstanceId', example='selectdb-cn-7213cjv****', position='Query'),
  groupName: string(name='GroupName', example='default', position='Query'),
  modifyMode: string(name='ModifyMode', example='0', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityIPList: string(name='SecurityIPList', example='127.0.XX.XX,127.2.XX.XX', position='Query'),
}

model ModifySecurityIPListResponseBody = {
  code?: string(name='Code', example='200'),
  DBInstanceName?: string(name='DBInstanceName'),
  groupName?: string(name='GroupName', example='group1'),
  groupTag?: string(name='GroupTag', example='grouptag'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='195F64C2-8F11-532B-A436-FC08A221D756'),
  securityIPList?: string(name='SecurityIPList', example='127.0.XX.XX,127.2.XX.XX'),
  securityIPType?: string(name='SecurityIPType', example='ipv4'),
  success?: boolean(name='Success', example='true'),
  taskId?: long(name='TaskId', example='479095561'),
  whitelistNetType?: string(name='WhitelistNetType', example='mix'),
}

model ModifySecurityIPListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySecurityIPListResponseBody(name='body'),
}

async function modifySecurityIPList(request: ModifySecurityIPListRequest): ModifySecurityIPListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySecurityIPList', 'GET', '/', 'json', false, 'json', request);
}

model ReleaseInstancePublicConnectionRequest {
  connectionString: string(name='ConnectionString', example='selectdb-cn-7213c8y****-public.selectdbfe.pre.rds.aliyuncs.com', position='Query'),
  DBInstanceId: string(name='DBInstanceId', example='selectdb-cn-7213cjv****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ReleaseInstancePublicConnectionResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='4773E4EC-025D-509F-AEA9-D53123FDFB0F'),
  success?: boolean(name='Success', example='true'),
}

model ReleaseInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseInstancePublicConnectionResponseBody(name='body'),
}

async function releaseInstancePublicConnection(request: ReleaseInstancePublicConnectionRequest): ReleaseInstancePublicConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseInstancePublicConnection', 'POST', '/', 'json', false, 'json', request);
}

model ResetAccountPasswordRequest {
  accountName: string(name='AccountName', example='admin', position='Query'),
  accountPassword: string(name='AccountPassword', example='a1b2c3d4@', position='Query'),
  DBInstanceId: string(name='DBInstanceId', example='selectdb-cn-7213cjv****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ResetAccountPasswordResponseBody = {
  requestId?: string(name='RequestId', example='58E21E11-90FF-50F8-A615-8DEB193676E0'),
}

model ResetAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetAccountPasswordResponseBody(name='body'),
}

async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAccountPassword', 'GET', '/', 'json', false, 'json', request);
}

model RestartDBClusterRequest {
  DBClusterId?: string(name='DBClusterId', example='selectdb-cn-7213c8yvv09-be', position='Query'),
  DBInstanceId?: string(name='DBInstanceId', description='代表资源一级ID的资源属性字段', example='selectdb-cn-7213cjv****', position='Body'),
  regionId?: string(name='RegionId', description='地域', example='cn-hangzhou', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组id', example='rg-4690g37929****', position='Body'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RestartDBClusterResponseBody = {
  data?: {
    DBClusterId?: string(name='DBClusterId', example='selectdb-cn-7213c8y****-be'),
    DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='BD0D0B17-C145-5B91-BFC2-6791927EE973'),
}

model RestartDBClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RestartDBClusterResponseBody(name='body'),
}

async function restartDBCluster(request: RestartDBClusterRequest): RestartDBClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartDBCluster', 'POST', '/', 'json', true, 'form', request);
}

model StartBEClusterRequest {
  DBClusterId?: string(name='DBClusterId', example='selectdb-cn-7213c8yvv09-be', position='Query'),
  DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model StartBEClusterResponseBody = {
  requestId?: string(name='RequestId', example='F203FA74-3041-589F-BE66-E570793A0C91'),
}

model StartBEClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartBEClusterResponseBody(name='body'),
}

async function startBECluster(request: StartBEClusterRequest): StartBEClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartBECluster', 'POST', '/', 'json', false, 'json', request);
}

model StopBEClusterRequest {
  DBClusterId?: string(name='DBClusterId', example='selectdb-cn-7213cjv****', position='Query'),
  DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model StopBEClusterResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='BC854513-E85E-54F3-9842-B9CCD3308CDD'),
}

model StopBEClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopBEClusterResponseBody(name='body'),
}

async function stopBECluster(request: StopBEClusterRequest): StopBEClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopBECluster', 'GET', '/', 'json', false, 'json', request);
}

model UpgradeDBInstanceEngineVersionRequest {
  DBInstanceId: string(name='DBInstanceId', example='selectdb-cn-7213cjv****', position='Query'),
  engineVersion: string(name='EngineVersion', example='2.4', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpgradeDBInstanceEngineVersionResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='4773E4EC-025D-509F-AEA9-D53123FDFB0F'),
}

model UpgradeDBInstanceEngineVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpgradeDBInstanceEngineVersionResponseBody(name='body'),
}

async function upgradeDBInstanceEngineVersion(request: UpgradeDBInstanceEngineVersionRequest): UpgradeDBInstanceEngineVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeDBInstanceEngineVersion', 'GET', '/', 'json', false, 'json', request);
}

