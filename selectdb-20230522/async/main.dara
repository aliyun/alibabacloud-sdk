/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'selectdb';
  @version = '2023-05-22';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AllocateInstancePublicConnectionRequest {
  connectionStringPrefix: string(name='ConnectionStringPrefix', example='selectdb-cn-h033cn****-pub-i3', position='Query'),
  DBInstanceId: string(name='DBInstanceId', example='selectdb-cn-7213cjv****', position='Query'),
  netType: string(name='NetType', example='Public', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model AllocateInstancePublicConnectionResponseBody = {
  code?: string(name='Code', example='200'),
  instanceName?: string(name='InstanceName'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='5ED62C81-9948-5612-81E1-EA3853752306'),
  success?: boolean(name='Success', example='true'),
  taskId?: long(name='TaskId', example='498115273'),
}

model AllocateInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllocateInstancePublicConnectionResponseBody(name='body'),
}

async function allocateInstancePublicConnection(request: AllocateInstancePublicConnectionRequest): AllocateInstancePublicConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateInstancePublicConnection', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBClusterRequest {
  cacheSize?: string(name='CacheSize', example='200', position='Query'),
  chargeType?: string(name='ChargeType', example='Prepaid', position='Query'),
  DBClusterClass?: string(name='DBClusterClass', example='selectdb.2xlarge', position='Query'),
  DBClusterDescription?: string(name='DBClusterDescription', example='testdb', position='Query'),
  DBInstanceId?: string(name='DBInstanceId', description='代表资源一级ID的资源属性字段', example='selectdb-cn-7213cjv****', position='Body'),
  engine?: string(name='Engine', example='selectdb', position='Query'),
  engineVersion?: string(name='EngineVersion', example='2.4', position='Query'),
  period?: string(name='Period', example='Month', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='代表资源组的资源属性字段', example='rg-4690g37929****', position='Body'),
  storageSize?: string(name='StorageSize', example='32', position='Query'),
  usedTime?: string(name='UsedTime', example='1', position='Query'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1gzt31twhlo0sa5****', position='Query'),
  vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-bp175iuvg8nxqraf2****', position='Query'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-i', position='Query'),
}

model CreateDBClusterResponseBody = {
  data?: {
    DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
    orderId?: long(name='OrderId', example='219543646290345'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F8900A96-67F7-5274-A41B-7722E1ECF8C9'),
}

model CreateDBClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDBClusterResponseBody(name='body'),
}

async function createDBCluster(request: CreateDBClusterRequest): CreateDBClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBCluster', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDBClusterRequest {
  DBClusterId?: string(name='DBClusterId', example='selectdb-xxxb9f2w-be', position='Query'),
  DBInstanceId?: string(name='DBInstanceId', description='代表资源一级ID的资源属性字段', example='selectdb-cn-7213cjv****', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='代表资源组的资源属性字段', example='rg-4690g37929****', position='Body'),
}

model DeleteDBClusterResponseBody = {
  data?: {
    DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****'),
    orderId?: string(name='OrderId', example='220088764060782'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F203FA74-3041-589F-BE66-E570793A0C91'),
}

model DeleteDBClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDBClusterResponseBody(name='body'),
}

async function deleteDBCluster(request: DeleteDBClusterRequest): DeleteDBClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDBCluster', 'POST', '/', 'json', true, 'form', request);
}

model ReleaseInstancePublicConnectionRequest {
  connectionString: string(name='ConnectionString', example='selectdb-cn-7213c8y****-public.selectdbfe.pre.rds.aliyuncs.com', position='Query'),
  DBInstanceId: string(name='DBInstanceId', example='selectdb-cn-7213cjv****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ReleaseInstancePublicConnectionResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='4773E4EC-025D-509F-AEA9-D53123FDFB0F'),
  success?: boolean(name='Success', example='true'),
}

model ReleaseInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseInstancePublicConnectionResponseBody(name='body'),
}

async function releaseInstancePublicConnection(request: ReleaseInstancePublicConnectionRequest): ReleaseInstancePublicConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseInstancePublicConnection', 'POST', '/', 'json', false, 'json', request);
}

model ResetAccountPasswordRequest {
  accountName: string(name='AccountName', example='admin', position='Query'),
  accountPassword: string(name='AccountPassword', example='a1b2c3d4@', position='Query'),
  DBInstanceId: string(name='DBInstanceId', example='selectdb-cn-7213cjv****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ResetAccountPasswordResponseBody = {
  requestId?: string(name='RequestId', example='58E21E11-90FF-50F8-A615-8DEB193676E0'),
}

model ResetAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetAccountPasswordResponseBody(name='body'),
}

async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAccountPassword', 'GET', '/', 'json', false, 'json', request);
}

model StartBEClusterRequest {
  DBClusterId?: string(name='DBClusterId', example='selectdb-cn-7213c8yvv09-be', position='Query'),
  DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model StartBEClusterResponseBody = {
  requestId?: string(name='RequestId', example='F203FA74-3041-589F-BE66-E570793A0C91'),
}

model StartBEClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartBEClusterResponseBody(name='body'),
}

async function startBECluster(request: StartBEClusterRequest): StartBEClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartBECluster', 'POST', '/', 'json', false, 'json', request);
}

model StopBEClusterRequest {
  DBClusterId?: string(name='DBClusterId', example='selectdb-cn-7213cjv****', position='Query'),
  DBInstanceId?: string(name='DBInstanceId', example='selectdb-cn-7213cjv****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model StopBEClusterResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='BC854513-E85E-54F3-9842-B9CCD3308CDD'),
}

model StopBEClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopBEClusterResponseBody(name='body'),
}

async function stopBECluster(request: StopBEClusterRequest): StopBEClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopBECluster', 'GET', '/', 'json', false, 'json', request);
}

model UpgradeDBInstanceEngineVersionRequest {
  DBInstanceId: string(name='DBInstanceId', example='selectdb-cn-7213cjv****', position='Query'),
  engineVersion: string(name='EngineVersion', example='2.4', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model UpgradeDBInstanceEngineVersionResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='4773E4EC-025D-509F-AEA9-D53123FDFB0F'),
}

model UpgradeDBInstanceEngineVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpgradeDBInstanceEngineVersionResponseBody(name='body'),
}

async function upgradeDBInstanceEngineVersion(request: UpgradeDBInstanceEngineVersionRequest): UpgradeDBInstanceEngineVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeDBInstanceEngineVersion', 'GET', '/', 'json', false, 'json', request);
}

