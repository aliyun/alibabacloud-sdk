/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'waf-openapi';
  @version = '2021-10-01';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-beijing = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-chengdu = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-zhangjiakou = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-huhehaote = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-hangzhou = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shenzhen = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-heyuan = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-wulanchabu = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-hongkong = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    eu-central-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    cn-shanghai-finance-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shenzhen-finance-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-north-2-gov-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model ClearMajorProtectionBlackIpRequest {
  instanceId: string(name='InstanceId', position='Query'),
  ruleId: long(name='RuleId', position='Query'),
  templateId: long(name='TemplateId', position='Query'),
}

model ClearMajorProtectionBlackIpResponseBody = {
  requestId?: string(name='RequestId'),
}

model ClearMajorProtectionBlackIpResponse = {
  headers: map[string]string(name='headers'),
  body: ClearMajorProtectionBlackIpResponseBody(name='body'),
}

async function clearMajorProtectionBlackIp(request: ClearMajorProtectionBlackIpRequest): ClearMajorProtectionBlackIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ClearMajorProtectionBlackIp', 'POST', '/', 'json', false, 'json', request);
}

model CreateDefenseResourceGroupRequest {
  addList?: string(name='AddList', position='Query'),
  description?: string(name='Description', position='Query'),
  groupName: string(name='GroupName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model CreateDefenseResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDefenseResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDefenseResourceGroupResponseBody(name='body'),
}

async function createDefenseResourceGroup(request: CreateDefenseResourceGroupRequest): CreateDefenseResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDefenseResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateDefenseRuleRequest {
  defenseScene: string(name='DefenseScene', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  rules: string(name='Rules', position='Query'),
  templateId: long(name='TemplateId', position='Query'),
}

model CreateDefenseRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDefenseRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDefenseRuleResponseBody(name='body'),
}

async function createDefenseRule(request: CreateDefenseRuleRequest): CreateDefenseRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDefenseRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateDefenseTemplateRequest {
  defenseScene: string(name='DefenseScene', position='Query'),
  description?: string(name='Description', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  templateName: string(name='TemplateName', position='Query'),
  templateOrigin: string(name='TemplateOrigin', position='Query'),
  templateStatus: int32(name='TemplateStatus', position='Query'),
  templateType: string(name='TemplateType', position='Query'),
}

model CreateDefenseTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  templateId?: long(name='TemplateId'),
}

model CreateDefenseTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDefenseTemplateResponseBody(name='body'),
}

async function createDefenseTemplate(request: CreateDefenseTemplateRequest): CreateDefenseTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDefenseTemplate', 'POST', '/', 'json', false, 'json', request);
}

model CreateDomainRequest {
  accessType?: string(name='AccessType', position='Query'),
  domain: string(name='Domain', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  listen: {
    certId?: string(name='CertId'),
    cipherSuite?: int32(name='CipherSuite'),
    customCiphers?: [ string ](name='CustomCiphers'),
    enableTLSv3?: boolean(name='EnableTLSv3'),
    exclusiveIp?: boolean(name='ExclusiveIp'),
    focusHttps?: boolean(name='FocusHttps'),
    http2Enabled?: boolean(name='Http2Enabled'),
    httpPorts?: [ int32 ](name='HttpPorts'),
    httpsPorts?: [ int32 ](name='HttpsPorts'),
    iPv6Enabled?: boolean(name='IPv6Enabled'),
    protectionResource?: string(name='ProtectionResource'),
    TLSVersion?: string(name='TLSVersion'),
    xffHeaderMode?: int32(name='XffHeaderMode'),
    xffHeaders?: [ string ](name='XffHeaders'),
  }(name='Listen', shrink='json', position='Query'),
  redirect: {
    backends?: [ string ](name='Backends'),
    cnameEnabled?: boolean(name='CnameEnabled'),
    connectTimeout?: int32(name='ConnectTimeout', minimum=5, maximum=120),
    focusHttpBackend?: boolean(name='FocusHttpBackend'),
    keepalive?: boolean(name='Keepalive'),
    keepaliveRequests?: int32(name='KeepaliveRequests', minimum=60, maximum=1000),
    keepaliveTimeout?: int32(name='KeepaliveTimeout', minimum=1, maximum=60),
    loadbalance: string(name='Loadbalance'),
    readTimeout?: int32(name='ReadTimeout'),
    requestHeaders?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='RequestHeaders'),
    retry?: boolean(name='Retry'),
    routingRules?: string(name='RoutingRules'),
    sniEnabled?: boolean(name='SniEnabled'),
    sniHost?: string(name='SniHost'),
    writeTimeout?: int32(name='WriteTimeout'),
  }(name='Redirect', shrink='json', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model CreateDomainResponseBody = {
  domainInfo?: {
    cname?: string(name='Cname'),
    domain?: string(name='Domain'),
  }(name='DomainInfo'),
  requestId?: string(name='RequestId'),
}

model CreateDomainResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDomainResponseBody(name='body'),
}

async function createDomain(request: CreateDomainRequest): CreateDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDomain', 'POST', '/', 'json', false, 'json', request);
}

model CreateMajorProtectionBlackIpRequest {
  description?: string(name='Description', description='防护对象1domain 	描述信息。', position='Query'),
  expiredTime: long(name='ExpiredTime', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ipList: string(name='IpList', position='Query'),
  ruleId: long(name='RuleId', position='Query'),
  templateId: long(name='TemplateId', position='Query'),
}

model CreateMajorProtectionBlackIpResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateMajorProtectionBlackIpResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMajorProtectionBlackIpResponseBody(name='body'),
}

async function createMajorProtectionBlackIp(request: CreateMajorProtectionBlackIpRequest): CreateMajorProtectionBlackIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMajorProtectionBlackIp', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDefenseResourceGroupRequest {
  groupName: string(name='GroupName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model DeleteDefenseResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDefenseResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDefenseResourceGroupResponseBody(name='body'),
}

async function deleteDefenseResourceGroup(request: DeleteDefenseResourceGroupRequest): DeleteDefenseResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDefenseResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDefenseRuleRequest {
  instanceId: string(name='InstanceId', position='Query'),
  ruleIds: string(name='RuleIds', position='Query'),
  templateId: long(name='TemplateId', position='Query'),
}

model DeleteDefenseRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDefenseRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDefenseRuleResponseBody(name='body'),
}

async function deleteDefenseRule(request: DeleteDefenseRuleRequest): DeleteDefenseRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDefenseRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDefenseTemplateRequest {
  instanceId: string(name='InstanceId', position='Query'),
  templateId: long(name='TemplateId', position='Query'),
}

model DeleteDefenseTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDefenseTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDefenseTemplateResponseBody(name='body'),
}

async function deleteDefenseTemplate(request: DeleteDefenseTemplateRequest): DeleteDefenseTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDefenseTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDomainRequest {
  accessType?: string(name='AccessType', position='Query'),
  domain: string(name='Domain', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DeleteDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDomainResponseBody(name='body'),
}

async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDomain', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMajorProtectionBlackIpRequest {
  instanceId: string(name='InstanceId', position='Query'),
  ipList: string(name='IpList', description='防护对象来源， custom：来自用户自定义 access:   来自接入', position='Query'),
  ruleId: long(name='RuleId', position='Query'),
  templateId: long(name='TemplateId', position='Query'),
}

model DeleteMajorProtectionBlackIpResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteMajorProtectionBlackIpResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMajorProtectionBlackIpResponseBody(name='body'),
}

async function deleteMajorProtectionBlackIp(request: DeleteMajorProtectionBlackIpRequest): DeleteMajorProtectionBlackIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMajorProtectionBlackIp', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDefenseResourceGroupRequest {
  groupName: string(name='GroupName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model DescribeDefenseResourceGroupResponseBody = {
  group?: {
    description?: string(name='Description'),
    gmtCreate?: long(name='GmtCreate'),
    gmtModified?: long(name='GmtModified'),
    groupName?: string(name='GroupName'),
    resourceList?: string(name='ResourceList'),
  }(name='Group'),
  requestId?: string(name='RequestId'),
}

model DescribeDefenseResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDefenseResourceGroupResponseBody(name='body'),
}

async function describeDefenseResourceGroup(request: DescribeDefenseResourceGroupRequest): DescribeDefenseResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDefenseResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDefenseResourcesRequest {
  instanceId: string(name='InstanceId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  query?: string(name='Query', position='Query'),
}

model DescribeDefenseResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  resources?: [ 
    {
      customHeaders?: [ string ](name='CustomHeaders'),
      description?: string(name='Description'),
      detail?: map[string]any(name='Detail'),
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      pattern?: string(name='Pattern'),
      product?: string(name='Product'),
      resource?: string(name='Resource'),
      resourceGroup?: string(name='ResourceGroup'),
      resourceOrigin?: string(name='ResourceOrigin'),
      xffStatus?: int32(name='XffStatus'),
    }
  ](name='Resources'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDefenseResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDefenseResourcesResponseBody(name='body'),
}

async function describeDefenseResources(request: DescribeDefenseResourcesRequest): DescribeDefenseResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDefenseResources', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDefenseRuleRequest {
  instanceId: string(name='InstanceId', position='Query'),
  ruleId: long(name='RuleId', position='Query'),
  templateId: long(name='TemplateId', position='Query'),
}

model DescribeDefenseRuleResponseBody = {
  requestId?: string(name='RequestId'),
  rule?: {
    config?: string(name='Config'),
    defenseOrigin?: string(name='DefenseOrigin'),
    defenseScene?: string(name='DefenseScene'),
    gmtModified?: long(name='GmtModified'),
    ruleId?: long(name='RuleId'),
    ruleName?: string(name='RuleName'),
    status?: int32(name='Status'),
    templateId?: long(name='TemplateId'),
  }(name='Rule'),
}

model DescribeDefenseRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDefenseRuleResponseBody(name='body'),
}

async function describeDefenseRule(request: DescribeDefenseRuleRequest): DescribeDefenseRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDefenseRule', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDefenseRulesRequest {
  instanceId: string(name='InstanceId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  query?: string(name='Query', position='Query'),
  ruleType?: string(name='RuleType', position='Query'),
}

model DescribeDefenseRulesResponseBody = {
  requestId?: string(name='RequestId'),
  rules?: [ 
    {
      config?: string(name='Config'),
      defenseOrigin?: string(name='DefenseOrigin'),
      defenseScene?: string(name='DefenseScene'),
      gmtModified?: long(name='GmtModified'),
      ruleId?: long(name='RuleId'),
      ruleName?: string(name='RuleName'),
      status?: int32(name='Status'),
      templateId?: long(name='TemplateId'),
    }
  ](name='Rules'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDefenseRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDefenseRulesResponseBody(name='body'),
}

async function describeDefenseRules(request: DescribeDefenseRulesRequest): DescribeDefenseRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDefenseRules', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDefenseTemplateRequest {
  instanceId: string(name='InstanceId', position='Query'),
  templateId: long(name='TemplateId', position='Query'),
}

model DescribeDefenseTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  template?: {
    defenseScene?: string(name='DefenseScene'),
    description?: string(name='Description'),
    gmtModified?: long(name='GmtModified'),
    templateId?: long(name='TemplateId'),
    templateName?: string(name='TemplateName'),
    templateOrigin?: string(name='TemplateOrigin'),
    templateStatus?: int32(name='TemplateStatus'),
    templateType?: string(name='TemplateType'),
  }(name='Template'),
}

model DescribeDefenseTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDefenseTemplateResponseBody(name='body'),
}

async function describeDefenseTemplate(request: DescribeDefenseTemplateRequest): DescribeDefenseTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDefenseTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainDetailRequest {
  domain: string(name='Domain', description='域名', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model DescribeDomainDetailResponseBody = {
  cname?: string(name='Cname'),
  domain?: string(name='Domain', description='域名'),
  listen?: {
    certId?: long(name='CertId', description='证书ID'),
    cipherSuite?: long(name='CipherSuite'),
    customCiphers?: [ string ](name='CustomCiphers'),
    enableTLSv3?: boolean(name='EnableTLSv3', description='是否支持TLS1.3'),
    exclusiveIp?: boolean(name='ExclusiveIp', description='是否开启独享IP'),
    focusHttps?: boolean(name='FocusHttps'),
    http2Enabled?: boolean(name='Http2Enabled', description='是否开启HTTP2'),
    httpPorts?: [ long ](name='HttpPorts', description='HTTP端口'),
    httpsPorts?: [ long ](name='HttpsPorts', description='HTTPS端口'),
    iPv6Enabled?: boolean(name='IPv6Enabled', description='是否开启IPv6'),
    protectionResource?: string(name='ProtectionResource', description='防护资源'),
    TLSVersion?: string(name='TLSVersion', description='TLS版本'),
    xffHeaderMode?: long(name='XffHeaderMode'),
    xffHeaders?: [ string ](name='XffHeaders'),
  }(name='Listen', description='监听配置'),
  redirect?: {
    backends?: [ 
      {
        backend?: string(name='Backend'),
      }
    ](name='Backends'),
    connectTimeout?: int32(name='ConnectTimeout'),
    focusHttpBackend?: boolean(name='FocusHttpBackend'),
    keepalive?: boolean(name='Keepalive'),
    keepaliveRequests?: int32(name='KeepaliveRequests'),
    keepaliveTimeout?: int32(name='KeepaliveTimeout'),
    loadbalance?: string(name='Loadbalance', description='负载均衡算法'),
    readTimeout?: int32(name='ReadTimeout'),
    requestHeaders?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='RequestHeaders'),
    retry?: boolean(name='Retry'),
    sniEnabled?: boolean(name='SniEnabled', description='SNI'),
    sniHost?: string(name='SniHost'),
    writeTimeout?: int32(name='WriteTimeout'),
  }(name='Redirect', description='转发配置'),
  requestId?: string(name='RequestId'),
  status?: long(name='Status', description='状态'),
}

model DescribeDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainDetailResponseBody(name='body'),
}

async function describeDomainDetail(request: DescribeDomainDetailRequest): DescribeDomainDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainsRequest {
  backend?: string(name='Backend', description='回源地址', position='Query'),
  domain?: string(name='Domain', description='域名', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  pageNumber?: long(name='PageNumber', position='Query'),
  pageSize?: long(name='PageSize', maximum=50, position='Query'),
}

model DescribeDomainsResponseBody = {
  domains?: [ 
    {
      backeds?: {
        http?: [ 
          {
            backend?: string(name='Backend'),
          }
        ](name='Http'),
        https?: [ 
          {
            backend?: string(name='Backend'),
          }
        ](name='Https'),
      }(name='Backeds'),
      cname?: string(name='Cname', description='CNAME'),
      domain?: string(name='Domain', description='域名'),
      listenPorts?: {
        http?: [ long ](name='Http'),
        https?: [ long ](name='Https'),
      }(name='ListenPorts'),
      status?: int32(name='Status', description='域名状态'),
    }
  ](name='Domains'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainsResponseBody(name='body'),
}

async function describeDomains(request: DescribeDomainsRequest): DescribeDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomains', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFlowChartRequest {
  endTimestamp?: string(name='EndTimestamp', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  interval: string(name='Interval', position='Query'),
  resource?: string(name='Resource', position='Query'),
  startTimestamp: string(name='StartTimestamp', position='Query'),
}

model DescribeFlowChartResponseBody = {
  flowChart?: [ 
    {
      aclCustomBlockSum?: long(name='AclCustomBlockSum'),
      aclCustomReportsSum?: long(name='AclCustomReportsSum'),
      antiScanBlockSum?: long(name='AntiScanBlockSum'),
      antibotBlockSum?: long(name='AntibotBlockSum'),
      antibotReportSum?: string(name='AntibotReportSum'),
      antiscanReportsSum?: long(name='AntiscanReportsSum'),
      blacklistBlockSum?: string(name='BlacklistBlockSum'),
      blacklistReportsSum?: long(name='BlacklistReportsSum'),
      ccCustomBlockSum?: long(name='CcCustomBlockSum'),
      ccCustomReportsSum?: long(name='CcCustomReportsSum'),
      ccSystemBlocksSum?: long(name='CcSystemBlocksSum'),
      ccSystemReportsSum?: long(name='CcSystemReportsSum'),
      count?: long(name='Count'),
      inBytes?: long(name='InBytes'),
      index?: long(name='Index'),
      maxPv?: long(name='MaxPv'),
      outBytes?: long(name='OutBytes'),
      regionBlockBlocksSum?: long(name='RegionBlockBlocksSum'),
      regionBlockReportsSum?: long(name='RegionBlockReportsSum'),
      wafBlockSum?: long(name='WafBlockSum'),
      wafReportSum?: string(name='WafReportSum'),
    }
  ](name='FlowChart'),
  requestId?: string(name='RequestId'),
}

model DescribeFlowChartResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFlowChartResponseBody(name='body'),
}

async function describeFlowChart(request: DescribeFlowChartRequest): DescribeFlowChartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFlowChart', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFlowTopResourceRequest {
  endTimestamp?: string(name='EndTimestamp', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  startTimestamp: string(name='StartTimestamp', position='Query'),
}

model DescribeFlowTopResourceResponseBody = {
  requestId?: string(name='RequestId'),
  ruleHitsTopResource?: [ 
    {
      count?: long(name='Count'),
      resource?: string(name='Resource'),
    }
  ](name='RuleHitsTopResource'),
}

model DescribeFlowTopResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFlowTopResourceResponseBody(name='body'),
}

async function describeFlowTopResource(request: DescribeFlowTopResourceRequest): DescribeFlowTopResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFlowTopResource', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFlowTopUrlRequest {
  endTimestamp?: string(name='EndTimestamp', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  resource?: string(name='Resource', position='Query'),
  startTimestamp: string(name='StartTimestamp', position='Query'),
}

model DescribeFlowTopUrlResponseBody = {
  requestId?: string(name='RequestId'),
  ruleHitsTopUrl?: [ 
    {
      count?: long(name='Count'),
      url?: string(name='Url'),
    }
  ](name='RuleHitsTopUrl'),
}

model DescribeFlowTopUrlResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFlowTopUrlResponseBody(name='body'),
}

async function describeFlowTopUrl(request: DescribeFlowTopUrlRequest): DescribeFlowTopUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFlowTopUrl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceRequest {
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeInstanceResponseBody = {
  details?: {
    aclRuleMaxIpCount?: long(name='AclRuleMaxIpCount'),
    antiScan?: boolean(name='AntiScan', description='支持扫描防护'),
    antiScanTemplateMaxCount?: long(name='AntiScanTemplateMaxCount', description='扫描防护模板数'),
    backendMaxCount?: long(name='BackendMaxCount', description='最大回源数'),
    baseWafGroup?: boolean(name='BaseWafGroup', description='基础防护'),
    baseWafGroupRuleInTemplateMaxCount?: long(name='BaseWafGroupRuleInTemplateMaxCount', description='基础防护规则'),
    baseWafGroupRuleTemplateMaxCount?: long(name='BaseWafGroupRuleTemplateMaxCount', description='基础防护规则最大数量'),
    bot?: boolean(name='Bot'),
    botApp?: string(name='BotApp'),
    botTemplateMaxCount?: long(name='BotTemplateMaxCount'),
    botWeb?: string(name='BotWeb'),
    cnameResourceMaxCount?: long(name='CnameResourceMaxCount', description='最大可添加CNAME数'),
    customResponse?: boolean(name='CustomResponse', description='支持自定义响应'),
    customResponseRuleInTemplateMaxCount?: long(name='CustomResponseRuleInTemplateMaxCount', description='自定义响应模板包含规则数'),
    customResponseTemplateMaxCount?: long(name='CustomResponseTemplateMaxCount', description='自定义响应模板数'),
    customRule?: boolean(name='CustomRule', description='支持自定义规则'),
    customRuleAction?: string(name='CustomRuleAction', description='包含字符串'),
    customRuleCondition?: string(name='CustomRuleCondition', description='自定义规则匹配条件'),
    customRuleInTemplateMaxCount?: long(name='CustomRuleInTemplateMaxCount', description='自定义规则模板包含规则数'),
    customRuleRatelimitor?: string(name='CustomRuleRatelimitor', description='自定义规则限速对象'),
    customRuleTemplateMaxCount?: long(name='CustomRuleTemplateMaxCount', description='自定义规则模板数'),
    defenseGroupMaxCount?: long(name='DefenseGroupMaxCount', description='最大防护组数量'),
    defenseObjectInGroupMaxCount?: long(name='DefenseObjectInGroupMaxCount', description='一个防护组内最大包含对象数量'),
    defenseObjectInTemplateMaxCount?: long(name='DefenseObjectInTemplateMaxCount', description='一个模板内关联对象的最大数量'),
    defenseObjectMaxCount?: long(name='DefenseObjectMaxCount', description='最大防护对象数量'),
    dlp?: boolean(name='Dlp'),
    dlpRuleInTemplateMaxCount?: long(name='DlpRuleInTemplateMaxCount'),
    dlpTemplateMaxCount?: long(name='DlpTemplateMaxCount'),
    exclusiveIp?: boolean(name='ExclusiveIp', description='独享IP'),
    gslb?: boolean(name='Gslb', description='Gslb'),
    httpPorts?: string(name='HttpPorts', description='HTTP端口可用范围'),
    httpsPorts?: string(name='HttpsPorts', description='HTTPS端口可用范围'),
    ipBlacklist?: boolean(name='IpBlacklist', description='支持IP黑名单'),
    ipBlacklistIpInRuleMaxCount?: long(name='IpBlacklistIpInRuleMaxCount', description='IP黑名单规则包含IP数'),
    ipBlacklistRuleInTemplateMaxCount?: long(name='IpBlacklistRuleInTemplateMaxCount', description='IP黑名单模板包含规则数'),
    ipBlacklistTemplateMaxCount?: long(name='IpBlacklistTemplateMaxCount', description='/黑名单模板数'),
    ipv6?: boolean(name='Ipv6', description='Ipv6'),
    logService?: boolean(name='LogService', description='日志服务是否开启'),
    majorProtection?: boolean(name='MajorProtection', description='是否支持重保'),
    majorProtectionTemplateMaxCount?: long(name='MajorProtectionTemplateMaxCount', description='重保模板的最大数量'),
    tamperproof?: boolean(name='Tamperproof'),
    tamperproofRuleInTemplateMaxCount?: long(name='TamperproofRuleInTemplateMaxCount'),
    tamperproofTemplateMaxCount?: long(name='TamperproofTemplateMaxCount'),
    vastIpBlacklistInFileMaxCount?: long(name='VastIpBlacklistInFileMaxCount', description='海量IP单次上传文件IP的最大数量'),
    vastIpBlacklistInOperationMaxCount?: long(name='VastIpBlacklistInOperationMaxCount', description='海量IP单次页面操作的最大数量'),
    vastIpBlacklistMaxCount?: long(name='VastIpBlacklistMaxCount', description='海量IP的最大数量（单用户）'),
    whitelist?: boolean(name='Whitelist', description='是否支持白名单'),
    whitelistLogical?: string(name='WhitelistLogical', description='白名单规则匹配条件'),
    whitelistRuleCondition?: string(name='WhitelistRuleCondition', description='白名单规则匹配条件'),
    whitelistRuleInTemplateMaxCount?: long(name='WhitelistRuleInTemplateMaxCount', description='白名单模板包含规则数'),
    whitelistTemplateMaxCount?: long(name='WhitelistTemplateMaxCount', description='白名单模板数'),
  }(name='Details', description='实例详情'),
  edition?: string(name='Edition', description='套餐'),
  endTime?: long(name='EndTime'),
  inDebt?: string(name='InDebt'),
  instanceId?: string(name='InstanceId', description='实例ID'),
  payType?: string(name='PayType'),
  regionId?: string(name='RegionId', description='RegionId'),
  requestId?: string(name='RequestId'),
  startTime?: long(name='StartTime'),
  status?: int32(name='Status'),
}

model DescribeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceResponseBody(name='body'),
}

async function describeInstance(request: DescribeInstanceRequest): DescribeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMajorProtectionBlackIpsRequest {
  instanceId: string(name='InstanceId', position='Query'),
  ipLike?: string(name='IpLike', position='Query'),
  orderBy?: string(name='OrderBy', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  ruleId?: long(name='RuleId', position='Query'),
  templateId?: long(name='TemplateId', position='Query'),
}

model DescribeMajorProtectionBlackIpsResponseBody = {
  ipList?: [ 
    {
      description?: string(name='Description'),
      expiredTime?: long(name='ExpiredTime'),
      gmtModified?: long(name='GmtModified'),
      ip?: string(name='Ip'),
      ruleId?: long(name='RuleId'),
      templateId?: long(name='TemplateId'),
    }
  ](name='IpList'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeMajorProtectionBlackIpsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMajorProtectionBlackIpsResponseBody(name='body'),
}

async function describeMajorProtectionBlackIps(request: DescribeMajorProtectionBlackIpsRequest): DescribeMajorProtectionBlackIpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMajorProtectionBlackIps', 'POST', '/', 'json', false, 'json', request);
}

model DescribePeakTrendRequest {
  endTimestamp?: string(name='EndTimestamp', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  interval: string(name='Interval', position='Query'),
  resource?: string(name='Resource', position='Query'),
  startTimestamp: string(name='StartTimestamp', position='Query'),
}

model DescribePeakTrendResponseBody = {
  flowChart?: [ 
    {
      aclSum?: long(name='AclSum'),
      antiScanSum?: long(name='AntiScanSum'),
      ccSum?: long(name='CcSum'),
      count?: long(name='Count'),
      index?: long(name='Index'),
      wafSum?: long(name='WafSum'),
    }
  ](name='FlowChart'),
  requestId?: string(name='RequestId'),
}

model DescribePeakTrendResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePeakTrendResponseBody(name='body'),
}

async function describePeakTrend(request: DescribePeakTrendRequest): DescribePeakTrendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePeakTrend', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResourceLogStatusRequest {
  instanceId: string(name='InstanceId', position='Query'),
  resources: string(name='Resources', position='Query'),
}

model DescribeResourceLogStatusResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      resource?: string(name='Resource'),
      status?: boolean(name='Status'),
    }
  ](name='Result'),
}

model DescribeResourceLogStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourceLogStatusResponseBody(name='body'),
}

async function describeResourceLogStatus(request: DescribeResourceLogStatusRequest): DescribeResourceLogStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResourceLogStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResourcePortRequest {
  instanceId: string(name='InstanceId', position='Query'),
  resourceInstanceId: string(name='ResourceInstanceId', description='资源的实例ID', position='Query'),
}

model DescribeResourcePortResponseBody = {
  requestId?: string(name='RequestId'),
  resourcePorts?: [ string ](name='ResourcePorts'),
}

model DescribeResourcePortResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourcePortResponseBody(name='body'),
}

async function describeResourcePort(request: DescribeResourcePortRequest): DescribeResourcePortResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResourcePort', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResponseCodeTrendGraphRequest {
  endTimestamp?: string(name='EndTimestamp', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  interval: string(name='Interval', position='Query'),
  resource?: string(name='Resource', position='Query'),
  startTimestamp: string(name='StartTimestamp', position='Query'),
  type: string(name='Type', position='Query'),
}

model DescribeResponseCodeTrendGraphResponseBody = {
  requestId?: string(name='RequestId'),
  responseCodes?: [ 
    {
      code302Pv?: long(name='302Pv'),
      code405Pv?: long(name='405Pv'),
      code499Pv?: long(name='499Pv'),
      code5xxPv?: long(name='5xxPv'),
      index?: long(name='Index'),
    }
  ](name='ResponseCodes'),
}

model DescribeResponseCodeTrendGraphResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResponseCodeTrendGraphResponseBody(name='body'),
}

async function describeResponseCodeTrendGraph(request: DescribeResponseCodeTrendGraphRequest): DescribeResponseCodeTrendGraphResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResponseCodeTrendGraph', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRuleGroupsRequest {
  instanceId: string(name='InstanceId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  searchType?: string(name='SearchType', position='Query'),
  searchValue?: string(name='SearchValue', position='Query'),
}

model DescribeRuleGroupsResponseBody = {
  requestId?: string(name='RequestId'),
  ruleGroups?: [ 
    {
      gmtModified?: long(name='GmtModified'),
      ruleGroupId?: long(name='RuleGroupId'),
      ruleGroupName?: string(name='RuleGroupName'),
      ruleTotalCount?: int32(name='RuleTotalCount'),
    }
  ](name='RuleGroups'),
  totalCount?: long(name='TotalCount'),
}

model DescribeRuleGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRuleGroupsResponseBody(name='body'),
}

async function describeRuleGroups(request: DescribeRuleGroupsRequest): DescribeRuleGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRuleGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRuleHitsTopClientIpRequest {
  endTimestamp?: string(name='EndTimestamp', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  resource?: string(name='Resource', position='Query'),
  ruleType?: string(name='RuleType', position='Query'),
  startTimestamp: string(name='StartTimestamp', position='Query'),
}

model DescribeRuleHitsTopClientIpResponseBody = {
  requestId?: string(name='RequestId'),
  ruleHitsTopClientIp?: [ 
    {
      clientIp?: string(name='ClientIp'),
      count?: long(name='Count'),
    }
  ](name='RuleHitsTopClientIp'),
}

model DescribeRuleHitsTopClientIpResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRuleHitsTopClientIpResponseBody(name='body'),
}

async function describeRuleHitsTopClientIp(request: DescribeRuleHitsTopClientIpRequest): DescribeRuleHitsTopClientIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRuleHitsTopClientIp', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRuleHitsTopResourceRequest {
  endTimestamp?: string(name='EndTimestamp', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ruleType?: string(name='RuleType', position='Query'),
  startTimestamp: string(name='StartTimestamp', position='Query'),
}

model DescribeRuleHitsTopResourceResponseBody = {
  requestId?: string(name='RequestId'),
  ruleHitsTopResource?: [ 
    {
      count?: long(name='Count'),
      resource?: string(name='Resource'),
    }
  ](name='RuleHitsTopResource'),
}

model DescribeRuleHitsTopResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRuleHitsTopResourceResponseBody(name='body'),
}

async function describeRuleHitsTopResource(request: DescribeRuleHitsTopResourceRequest): DescribeRuleHitsTopResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRuleHitsTopResource', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRuleHitsTopRuleIdRequest {
  endTimestamp?: string(name='EndTimestamp', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  resource?: string(name='Resource', position='Query'),
  ruleType?: string(name='RuleType', position='Query'),
  startTimestamp: string(name='StartTimestamp', position='Query'),
}

model DescribeRuleHitsTopRuleIdResponseBody = {
  requestId?: string(name='RequestId'),
  ruleHitsTopRuleId?: [ 
    {
      count?: long(name='Count'),
      resource?: string(name='Resource'),
      ruleId?: string(name='RuleId'),
    }
  ](name='RuleHitsTopRuleId'),
}

model DescribeRuleHitsTopRuleIdResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRuleHitsTopRuleIdResponseBody(name='body'),
}

async function describeRuleHitsTopRuleId(request: DescribeRuleHitsTopRuleIdRequest): DescribeRuleHitsTopRuleIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRuleHitsTopRuleId', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRuleHitsTopTuleTypeRequest {
  endTimestamp?: string(name='EndTimestamp', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  resource?: string(name='Resource', position='Query'),
  startTimestamp: string(name='StartTimestamp', position='Query'),
}

model DescribeRuleHitsTopTuleTypeResponseBody = {
  requestId?: string(name='RequestId'),
  ruleHitsTopTuleType?: [ 
    {
      count?: long(name='Count'),
      ruleType?: string(name='RuleType'),
    }
  ](name='RuleHitsTopTuleType'),
}

model DescribeRuleHitsTopTuleTypeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRuleHitsTopTuleTypeResponseBody(name='body'),
}

async function describeRuleHitsTopTuleType(request: DescribeRuleHitsTopTuleTypeRequest): DescribeRuleHitsTopTuleTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRuleHitsTopTuleType', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRuleHitsTopUaRequest {
  endTimestamp?: string(name='EndTimestamp', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  resource?: string(name='Resource', position='Query'),
  startTimestamp: string(name='StartTimestamp', position='Query'),
}

model DescribeRuleHitsTopUaResponseBody = {
  requestId?: string(name='RequestId'),
  ruleHitsTopUa?: [ 
    {
      count?: long(name='Count'),
      ua?: string(name='Ua'),
    }
  ](name='RuleHitsTopUa'),
}

model DescribeRuleHitsTopUaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRuleHitsTopUaResponseBody(name='body'),
}

async function describeRuleHitsTopUa(request: DescribeRuleHitsTopUaRequest): DescribeRuleHitsTopUaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRuleHitsTopUa', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRuleHitsTopUrlRequest {
  endTimestamp?: string(name='EndTimestamp', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  resource: string(name='Resource', position='Query'),
  ruleType?: string(name='RuleType', position='Query'),
  startTimestamp: string(name='StartTimestamp', position='Query'),
}

model DescribeRuleHitsTopUrlResponseBody = {
  requestId?: string(name='RequestId'),
  ruleHitsTopUrl?: [ 
    {
      count?: long(name='Count'),
      url?: string(name='Url'),
    }
  ](name='RuleHitsTopUrl'),
}

model DescribeRuleHitsTopUrlResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRuleHitsTopUrlResponseBody(name='body'),
}

async function describeRuleHitsTopUrl(request: DescribeRuleHitsTopUrlRequest): DescribeRuleHitsTopUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRuleHitsTopUrl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTemplateResourcesRequest {
  instanceId: string(name='InstanceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  templateId: long(name='TemplateId', position='Query'),
}

model DescribeTemplateResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  resources?: [ string ](name='Resources'),
}

model DescribeTemplateResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTemplateResourcesResponseBody(name='body'),
}

async function describeTemplateResources(request: DescribeTemplateResourcesRequest): DescribeTemplateResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTemplateResources', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVisitTopIpRequest {
  endTimestamp?: string(name='EndTimestamp', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  resource?: string(name='Resource', position='Query'),
  startTimestamp: string(name='StartTimestamp', position='Query'),
}

model DescribeVisitTopIpResponseBody = {
  requestId?: string(name='RequestId'),
  topIp?: [ 
    {
      area?: string(name='Area'),
      count?: long(name='Count'),
      ip?: string(name='Ip'),
      isp?: string(name='Isp'),
    }
  ](name='TopIp'),
}

model DescribeVisitTopIpResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVisitTopIpResponseBody(name='body'),
}

async function describeVisitTopIp(request: DescribeVisitTopIpRequest): DescribeVisitTopIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVisitTopIp', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVisitUasRequest {
  endTimestamp?: string(name='EndTimestamp', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  resource?: string(name='Resource', position='Query'),
  startTimestamp: string(name='StartTimestamp', position='Query'),
}

model DescribeVisitUasResponseBody = {
  requestId?: string(name='RequestId'),
  uas?: [ 
    {
      count?: long(name='Count'),
      ua?: string(name='Ua'),
    }
  ](name='Uas'),
}

model DescribeVisitUasResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVisitUasResponseBody(name='body'),
}

async function describeVisitUas(request: DescribeVisitUasRequest): DescribeVisitUasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVisitUas', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWafSourceIpSegmentRequest {
  instanceId: string(name='InstanceId', position='Query'),
}

model DescribeWafSourceIpSegmentResponseBody = {
  requestId?: string(name='RequestId'),
  wafSourceIp?: {
    iPv4?: [ string ](name='IPv4'),
    iPv6?: [ string ](name='IPv6'),
  }(name='WafSourceIp'),
}

model DescribeWafSourceIpSegmentResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWafSourceIpSegmentResponseBody(name='body'),
}

async function describeWafSourceIpSegment(request: DescribeWafSourceIpSegmentRequest): DescribeWafSourceIpSegmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWafSourceIpSegment', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDefenseResourceGroupRequest {
  addList?: string(name='AddList', position='Query'),
  deleteList?: string(name='DeleteList', position='Query'),
  description?: string(name='Description', position='Query'),
  groupName: string(name='GroupName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model ModifyDefenseResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDefenseResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDefenseResourceGroupResponseBody(name='body'),
}

async function modifyDefenseResourceGroup(request: ModifyDefenseResourceGroupRequest): ModifyDefenseResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDefenseResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDefenseRuleRequest {
  defenseScene: string(name='DefenseScene', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  rules: string(name='Rules', position='Query'),
  templateId: long(name='TemplateId', position='Query'),
}

model ModifyDefenseRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDefenseRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDefenseRuleResponseBody(name='body'),
}

async function modifyDefenseRule(request: ModifyDefenseRuleRequest): ModifyDefenseRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDefenseRule', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDefenseRuleStatusRequest {
  instanceId: string(name='InstanceId', position='Query'),
  ruleId: long(name='RuleId', position='Query'),
  ruleStatus: int32(name='RuleStatus', position='Query'),
  templateId: long(name='TemplateId', position='Query'),
}

model ModifyDefenseRuleStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDefenseRuleStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDefenseRuleStatusResponseBody(name='body'),
}

async function modifyDefenseRuleStatus(request: ModifyDefenseRuleStatusRequest): ModifyDefenseRuleStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDefenseRuleStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDefenseTemplateRequest {
  description?: string(name='Description', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  templateId: long(name='TemplateId', position='Query'),
  templateName: string(name='TemplateName', position='Query'),
}

model ModifyDefenseTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDefenseTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDefenseTemplateResponseBody(name='body'),
}

async function modifyDefenseTemplate(request: ModifyDefenseTemplateRequest): ModifyDefenseTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDefenseTemplate', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDefenseTemplateStatusRequest {
  instanceId: string(name='InstanceId', position='Query'),
  templateId: long(name='TemplateId', position='Query'),
  templateStatus: int32(name='TemplateStatus', position='Query'),
}

model ModifyDefenseTemplateStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDefenseTemplateStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDefenseTemplateStatusResponseBody(name='body'),
}

async function modifyDefenseTemplateStatus(request: ModifyDefenseTemplateStatusRequest): ModifyDefenseTemplateStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDefenseTemplateStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDomainRequest {
  accessType?: string(name='AccessType', position='Query'),
  domain: string(name='Domain', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  listen: {
    certId?: string(name='CertId'),
    cipherSuite?: int32(name='CipherSuite'),
    customCiphers?: [ string ](name='CustomCiphers'),
    enableTLSv3?: boolean(name='EnableTLSv3'),
    exclusiveIp?: boolean(name='ExclusiveIp'),
    focusHttps?: boolean(name='FocusHttps'),
    http2Enabled?: boolean(name='Http2Enabled'),
    httpPorts?: [ int32 ](name='HttpPorts'),
    httpsPorts?: [ int32 ](name='HttpsPorts'),
    iPv6Enabled?: boolean(name='IPv6Enabled'),
    protectionResource?: string(name='ProtectionResource'),
    TLSVersion?: string(name='TLSVersion'),
    xffHeaderMode?: int32(name='XffHeaderMode'),
    xffHeaders?: [ string ](name='XffHeaders'),
  }(name='Listen', shrink='json', position='Query'),
  redirect: {
    backends?: [ string ](name='Backends'),
    connectTimeout?: int32(name='ConnectTimeout', minimum=5, maximum=120),
    focusHttpBackend?: boolean(name='FocusHttpBackend'),
    keepalive?: boolean(name='Keepalive'),
    keepaliveRequests?: int32(name='KeepaliveRequests', minimum=60, maximum=1000),
    keepaliveTimeout?: int32(name='KeepaliveTimeout', minimum=1, maximum=60),
    loadbalance: string(name='Loadbalance'),
    readTimeout?: int32(name='ReadTimeout'),
    requestHeaders?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='RequestHeaders'),
    retry?: boolean(name='Retry'),
    sniEnabled?: boolean(name='SniEnabled'),
    sniHost?: string(name='SniHost'),
    writeTimeout?: int32(name='WriteTimeout'),
  }(name='Redirect', shrink='json', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ModifyDomainResponseBody = {
  domainInfo?: {
    cname?: string(name='Cname'),
    domain?: string(name='Domain'),
  }(name='DomainInfo'),
  requestId?: string(name='RequestId'),
}

model ModifyDomainResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDomainResponseBody(name='body'),
}

async function modifyDomain(request: ModifyDomainRequest): ModifyDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDomain', 'POST', '/', 'json', false, 'json', request);
}

model ModifyMajorProtectionBlackIpRequest {
  description?: string(name='Description', description='防护对象1domain 	描述信息。', position='Query'),
  expiredTime: long(name='ExpiredTime', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ipList: string(name='IpList', description='防护对象来源， custom：来自用户自定义 access:   来自接入', position='Query'),
  ruleId: long(name='RuleId', position='Query'),
  templateId: long(name='TemplateId', position='Query'),
}

model ModifyMajorProtectionBlackIpResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyMajorProtectionBlackIpResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyMajorProtectionBlackIpResponseBody(name='body'),
}

async function modifyMajorProtectionBlackIp(request: ModifyMajorProtectionBlackIpRequest): ModifyMajorProtectionBlackIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyMajorProtectionBlackIp', 'POST', '/', 'json', false, 'json', request);
}

model ModifyResourceLogStatusRequest {
  instanceId: string(name='InstanceId', position='Query'),
  resource: string(name='Resource', position='Query'),
  status: boolean(name='Status', position='Query'),
}

model ModifyResourceLogStatusResponseBody = {
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model ModifyResourceLogStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyResourceLogStatusResponseBody(name='body'),
}

async function modifyResourceLogStatus(request: ModifyResourceLogStatusRequest): ModifyResourceLogStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyResourceLogStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyTemplateResourcesRequest {
  bindResourceGroups?: [ string ](name='BindResourceGroups', position='Query'),
  bindResources?: [ string ](name='BindResources', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  templateId: long(name='TemplateId', position='Query'),
  unbindResourceGroups?: [ string ](name='UnbindResourceGroups', position='Query'),
  unbindResources?: [ string ](name='UnbindResources', position='Query'),
}

model ModifyTemplateResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyTemplateResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTemplateResourcesResponseBody(name='body'),
}

async function modifyTemplateResources(request: ModifyTemplateResourcesRequest): ModifyTemplateResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTemplateResources', 'POST', '/', 'json', false, 'json', request);
}

