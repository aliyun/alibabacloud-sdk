/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-beijing = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-chengdu = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-zhangjiakou = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-huhehaote = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-hangzhou = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shenzhen = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-heyuan = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-wulanchabu = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-hongkong = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    eu-central-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    cn-shanghai-finance-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shenzhen-finance-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-north-2-gov-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('waf-openapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateMajorProtectionBlackIpRequest {
  description?: string(name='Description', description='防护对象1domain 	描述信息。'),
  expiredTime?: long(name='ExpiredTime'),
  instanceId?: string(name='InstanceId'),
  ipList?: string(name='IpList'),
  ruleId?: long(name='RuleId'),
  templateId?: long(name='TemplateId'),
}

model CreateMajorProtectionBlackIpResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateMajorProtectionBlackIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMajorProtectionBlackIpResponseBody(name='body'),
}

async function createMajorProtectionBlackIpWithOptions(request: CreateMajorProtectionBlackIpRequest, runtime: Util.RuntimeOptions): CreateMajorProtectionBlackIpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.expiredTime)) {
    query['ExpiredTime'] = request.expiredTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ipList)) {
    query['IpList'] = request.ipList;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateMajorProtectionBlackIp',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createMajorProtectionBlackIp(request: CreateMajorProtectionBlackIpRequest): CreateMajorProtectionBlackIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMajorProtectionBlackIpWithOptions(request, runtime);
}

model DescribeInstanceRequest {
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeInstanceResponseBody = {
  details?: {
    aclRuleMaxIpCount?: long(name='AclRuleMaxIpCount'),
    antiScan?: boolean(name='AntiScan', description='支持扫描防护'),
    antiScanTemplateMaxCount?: long(name='AntiScanTemplateMaxCount', description='扫描防护模板数'),
    backendMaxCount?: long(name='BackendMaxCount', description='最大回源数'),
    baseWafGroup?: boolean(name='BaseWafGroup', description='基础防护'),
    baseWafGroupRuleInTemplateMaxCount?: long(name='BaseWafGroupRuleInTemplateMaxCount', description='基础防护规则'),
    baseWafGroupRuleTemplateMaxCount?: long(name='BaseWafGroupRuleTemplateMaxCount', description='基础防护规则最大数量'),
    cnameResourceMaxCount?: long(name='CnameResourceMaxCount', description='最大可添加CNAME数'),
    customResponse?: boolean(name='CustomResponse', description='支持自定义响应'),
    customResponseRuleInTemplateMaxCount?: long(name='CustomResponseRuleInTemplateMaxCount', description='自定义响应模板包含规则数'),
    customResponseTemplateMaxCount?: long(name='CustomResponseTemplateMaxCount', description='自定义响应模板数'),
    customRule?: boolean(name='CustomRule', description='支持自定义规则'),
    customRuleAction?: string(name='CustomRuleAction', description='包含字符串'),
    customRuleCondition?: string(name='CustomRuleCondition', description='自定义规则匹配条件'),
    customRuleInTemplateMaxCount?: long(name='CustomRuleInTemplateMaxCount', description='自定义规则模板包含规则数'),
    customRuleRatelimitor?: string(name='CustomRuleRatelimitor', description='自定义规则限速对象'),
    customRuleTemplateMaxCount?: long(name='CustomRuleTemplateMaxCount', description='自定义规则模板数'),
    defenseGroupMaxCount?: long(name='DefenseGroupMaxCount', description='最大防护组数量'),
    defenseObjectInGroupMaxCount?: long(name='DefenseObjectInGroupMaxCount', description='一个防护组内最大包含对象数量'),
    defenseObjectInTemplateMaxCount?: long(name='DefenseObjectInTemplateMaxCount', description='一个模板内关联对象的最大数量'),
    defenseObjectMaxCount?: long(name='DefenseObjectMaxCount', description='最大防护对象数量'),
    exclusiveIp?: boolean(name='ExclusiveIp', description='独享IP'),
    gslb?: boolean(name='Gslb', description='Gslb'),
    httpPorts?: string(name='HttpPorts', description='HTTP端口可用范围'),
    httpsPorts?: string(name='HttpsPorts', description='HTTPS端口可用范围'),
    ipBlacklist?: boolean(name='IpBlacklist', description='支持IP黑名单'),
    ipBlacklistIpInRuleMaxCount?: long(name='IpBlacklistIpInRuleMaxCount', description='IP黑名单规则包含IP数'),
    ipBlacklistRuleInTemplateMaxCount?: long(name='IpBlacklistRuleInTemplateMaxCount', description='IP黑名单模板包含规则数'),
    ipBlacklistTemplateMaxCount?: long(name='IpBlacklistTemplateMaxCount', description='/黑名单模板数'),
    ipv6?: boolean(name='Ipv6', description='Ipv6'),
    logService?: boolean(name='LogService', description='日志服务是否开启'),
    majorProtection?: boolean(name='MajorProtection', description='是否支持重保'),
    majorProtectionTemplateMaxCount?: long(name='MajorProtectionTemplateMaxCount', description='重保模板的最大数量'),
    vastIpBlacklistInFileMaxCount?: long(name='VastIpBlacklistInFileMaxCount', description='海量IP单次上传文件IP的最大数量'),
    vastIpBlacklistInOperationMaxCount?: long(name='VastIpBlacklistInOperationMaxCount', description='海量IP单次页面操作的最大数量'),
    vastIpBlacklistMaxCount?: long(name='VastIpBlacklistMaxCount', description='海量IP的最大数量（单用户）'),
    whitelist?: boolean(name='Whitelist', description='是否支持白名单'),
    whitelistLogical?: string(name='WhitelistLogical', description='白名单规则匹配条件'),
    whitelistRuleCondition?: string(name='WhitelistRuleCondition', description='白名单规则匹配条件'),
    whitelistRuleInTemplateMaxCount?: long(name='WhitelistRuleInTemplateMaxCount', description='白名单模板包含规则数'),
    whitelistTemplateMaxCount?: long(name='WhitelistTemplateMaxCount', description='白名单模板数'),
  }(name='Details', description='实例详情'),
  edition?: string(name='Edition', description='套餐'),
  instanceId?: string(name='InstanceId', description='实例ID'),
  regionId?: string(name='RegionId', description='RegionId'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceResponseBody(name='body'),
}

async function describeInstanceWithOptions(request: DescribeInstanceRequest, runtime: Util.RuntimeOptions): DescribeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstance',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstance(request: DescribeInstanceRequest): DescribeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceWithOptions(request, runtime);
}

model DescribeInstanceCompatibleRequest {
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeInstanceCompatibleResponseBody = {
  commodityCode?: string(name='CommodityCode'),
  details?: {
    antiScan?: boolean(name='AntiScan', description='支持扫描防护'),
    antiScanTemplateMaxCount?: long(name='AntiScanTemplateMaxCount', description='扫描防护模板数'),
    backendMaxCount?: long(name='BackendMaxCount', description='最大回源数'),
    baseWafGroup?: boolean(name='BaseWafGroup', description='基础防护'),
    baseWafGroupRuleInTemplateMaxCount?: long(name='BaseWafGroupRuleInTemplateMaxCount', description='基础防护规则'),
    baseWafGroupRuleTemplateMaxCount?: long(name='BaseWafGroupRuleTemplateMaxCount', description='基础防护规则最大数量'),
    cnameResourceMaxCount?: long(name='CnameResourceMaxCount', description='最大可添加CNAME数'),
    customResponse?: boolean(name='CustomResponse', description='支持自定义响应'),
    customResponseRuleInTemplateMaxCount?: long(name='CustomResponseRuleInTemplateMaxCount', description='自定义响应模板包含规则数'),
    customResponseTemplateMaxCount?: long(name='CustomResponseTemplateMaxCount', description='自定义响应模板数'),
    customRule?: boolean(name='CustomRule', description='支持自定义规则'),
    customRuleAction?: string(name='CustomRuleAction', description='包含字符串'),
    customRuleCondition?: string(name='CustomRuleCondition', description='自定义规则匹配条件'),
    customRuleInTemplateMaxCount?: long(name='CustomRuleInTemplateMaxCount', description='自定义规则模板包含规则数'),
    customRuleRatelimitor?: string(name='CustomRuleRatelimitor', description='自定义规则限速对象'),
    customRuleTemplateMaxCount?: long(name='CustomRuleTemplateMaxCount', description='自定义规则模板数'),
    defenseGroupMaxCount?: long(name='DefenseGroupMaxCount', description='最大防护组数量'),
    defenseObjectInGroupMaxCount?: long(name='DefenseObjectInGroupMaxCount', description='一个防护组内最大包含对象数量'),
    defenseObjectInTemplateMaxCount?: long(name='DefenseObjectInTemplateMaxCount', description='一个模板内关联对象的最大数量'),
    defenseObjectMaxCount?: long(name='DefenseObjectMaxCount', description='最大防护对象数量'),
    exclusiveIp?: boolean(name='ExclusiveIp', description='独享IP'),
    gslb?: boolean(name='Gslb', description='Gslb'),
    ipBlacklist?: boolean(name='IpBlacklist', description='支持IP黑名单'),
    ipBlacklistIpInRuleMaxCount?: long(name='IpBlacklistIpInRuleMaxCount', description='IP黑名单规则包含IP数'),
    ipBlacklistRuleInTemplateMaxCount?: long(name='IpBlacklistRuleInTemplateMaxCount', description='IP黑名单模板包含规则数'),
    ipBlacklistTemplateMaxCount?: long(name='IpBlacklistTemplateMaxCount', description='/黑名单模板数'),
    ipv6?: boolean(name='Ipv6', description='Ipv6'),
    logService?: boolean(name='LogService', description='日志服务是否开启'),
    whitelist?: boolean(name='Whitelist', description='是否支持白名单'),
    whitelistLogical?: string(name='WhitelistLogical', description='白名单规则匹配条件'),
    whitelistRuleCondition?: string(name='WhitelistRuleCondition', description='白名单规则匹配条件'),
    whitelistRuleInTemplateMaxCount?: long(name='WhitelistRuleInTemplateMaxCount', description='白名单模板包含规则数'),
    whitelistTemplateMaxCount?: long(name='WhitelistTemplateMaxCount', description='白名单模板数'),
  }(name='Details', description='实例详情'),
  edition?: string(name='Edition', description='套餐'),
  instanceId?: string(name='InstanceId', description='实例ID'),
  payType?: string(name='PayType', description='付费类型'),
  regionId?: string(name='RegionId', description='RegionId'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceCompatibleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceCompatibleResponseBody(name='body'),
}

async function describeInstanceCompatibleWithOptions(request: DescribeInstanceCompatibleRequest, runtime: Util.RuntimeOptions): DescribeInstanceCompatibleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceCompatible',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceCompatible(request: DescribeInstanceCompatibleRequest): DescribeInstanceCompatibleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceCompatibleWithOptions(request, runtime);
}

model DescribeInstanceExtendRequest {
  edition?: string(name='Edition'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeInstanceExtendResponseBody = {
  instances?: [ 
    {
      expireTime?: long(name='ExpireTime'),
      instanceId?: string(name='InstanceId'),
      regionId?: string(name='RegionId'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceExtendResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceExtendResponseBody(name='body'),
}

async function describeInstanceExtendWithOptions(request: DescribeInstanceExtendRequest, runtime: Util.RuntimeOptions): DescribeInstanceExtendResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.edition)) {
    query['Edition'] = request.edition;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceExtend',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceExtend(request: DescribeInstanceExtendRequest): DescribeInstanceExtendResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceExtendWithOptions(request, runtime);
}

