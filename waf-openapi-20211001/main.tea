/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-beijing = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-chengdu = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-zhangjiakou = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-huhehaote = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-hangzhou = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shenzhen = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-heyuan = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-wulanchabu = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-hongkong = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    eu-central-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    cn-shanghai-finance-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shenzhen-finance-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-north-2-gov-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('waf-openapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ClearMajorProtectionBlackIpRequest {
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the Alibaba Cloud resource group.', example='rg-acfm***q'),
  ruleId?: long(name='RuleId', description='The ID of the IP address blacklist rule for major event protection.', example='20012033'),
  templateId?: long(name='TemplateId', description='The ID of the IP address blacklist rule template for major event protection.', example='5132'),
}

model ClearMajorProtectionBlackIpResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='66A98669-CC6E-4F3E-80A6-3014697B11AE'),
}

model ClearMajorProtectionBlackIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ClearMajorProtectionBlackIpResponseBody(name='body'),
}

async function clearMajorProtectionBlackIpWithOptions(request: ClearMajorProtectionBlackIpRequest, runtime: Util.RuntimeOptions): ClearMajorProtectionBlackIpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ClearMajorProtectionBlackIp',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function clearMajorProtectionBlackIp(request: ClearMajorProtectionBlackIpRequest): ClearMajorProtectionBlackIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return clearMajorProtectionBlackIpWithOptions(request, runtime);
}

model CreateDefenseResourceGroupRequest {
  addList?: string(name='AddList', description='The protected objects that you want to add to the protected object group. You can add multiple protected objects to a protected object group at the same time. You can specify multiple protected objects. Separate them with commas (,).', example='test1.aliyundoc.com,test2.aliyundoc.com'),
  description?: string(name='Description', description='The description of the protected object group.', example='test_domain'),
  groupName?: string(name='GroupName', description='The name of the protected object group that you want to create.', example='group221'),
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
}

model CreateDefenseResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5D69B341-4F97-58E7-9E16-1B17FE7A9E98'),
}

model CreateDefenseResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDefenseResourceGroupResponseBody(name='body'),
}

async function createDefenseResourceGroupWithOptions(request: CreateDefenseResourceGroupRequest, runtime: Util.RuntimeOptions): CreateDefenseResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addList)) {
    query['AddList'] = request.addList;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDefenseResourceGroup',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDefenseResourceGroup(request: CreateDefenseResourceGroupRequest): CreateDefenseResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDefenseResourceGroupWithOptions(request, runtime);
}

model CreateDefenseRuleRequest {
  defenseScene?: string(name='DefenseScene', description='The module to which the protection rule that you want to create belongs.

*   **waf_group:** the basic protection rule module.
*   **antiscan:** the scan protection module.
*   **ip_blacklist:** the IP address blacklist module.
*   **custom_acl:** the custom rule module.
*   **whitelist:** the whitelist module.
*   **region_block:** the region blacklist module.
*   **custom_response:** the custom response module.
*   **cc:** the HTTP flood protection module.
*   **tamperproof:** the website tamper-proofing module.
*   **dlp:** the data leakage prevention module.', example='waf_group'),
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_v2_public_cn-****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
  rules?: string(name='Rules', description='The configurations of the protection rule. Specify a string that contains multiple parameters in the JSON format.

>  The parameters vary based on the value of the **DefenseScene** parameter. For more information, see the "**Protection rule parameters**" section in this topic.', example='For more information, see the following section.'),
  templateId?: long(name='TemplateId', description='The ID of the protection rule template for which you want to create a protection rule.', example='1122'),
}

model CreateDefenseRuleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='26E46541-7AAB-5565-801D-F14DBDC5F186'),
}

model CreateDefenseRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDefenseRuleResponseBody(name='body'),
}

async function createDefenseRuleWithOptions(request: CreateDefenseRuleRequest, runtime: Util.RuntimeOptions): CreateDefenseRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defenseScene)) {
    query['DefenseScene'] = request.defenseScene;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.rules)) {
    query['Rules'] = request.rules;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDefenseRule',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDefenseRule(request: CreateDefenseRuleRequest): CreateDefenseRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDefenseRuleWithOptions(request, runtime);
}

model CreateDefenseTemplateRequest {
  defenseScene?: string(name='DefenseScene', description='The scenario in which you want to use the protection rule template. For more information, see the description of the **DefenseScene** parameter in the [CreateDefenseRule](~~CreateDefenseRule~~) topic.', example='waf_group'),
  description?: string(name='Description', description='The description of the protection rule template.', example='Test'),
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the Alibaba Cloud resource group.', example='rg-acfm***q'),
  templateName?: string(name='TemplateName', description='The name of the protection rule template.', example='test221'),
  templateOrigin?: string(name='TemplateOrigin', description='The origin of the protection rule template that you want to create. Set the value to **custom**. The value specifies that the protection rule template is a custom template.', example='custom'),
  templateStatus?: int32(name='TemplateStatus', description='The status of the protection rule template. Valid values:

*   **0:** disabled.
*   **1:** enabled.', example='1'),
  templateType?: string(name='TemplateType', description='The type of the protection rule template. Valid values:

*   **user_default:** default template.
*   **user_custom:** custom template.', example='user_default'),
}

model CreateDefenseTemplateResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F48ABDF7-D777-5F26-892A-57349765D7A9'),
  templateId?: long(name='TemplateId', description='The ID of the protection rule template.', example='2212'),
}

model CreateDefenseTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDefenseTemplateResponseBody(name='body'),
}

async function createDefenseTemplateWithOptions(request: CreateDefenseTemplateRequest, runtime: Util.RuntimeOptions): CreateDefenseTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defenseScene)) {
    query['DefenseScene'] = request.defenseScene;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  if (!Util.isUnset(request.templateOrigin)) {
    query['TemplateOrigin'] = request.templateOrigin;
  }
  if (!Util.isUnset(request.templateStatus)) {
    query['TemplateStatus'] = request.templateStatus;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDefenseTemplate',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDefenseTemplate(request: CreateDefenseTemplateRequest): CreateDefenseTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDefenseTemplateWithOptions(request, runtime);
}

model CreateDomainRequest {
  accessType?: string(name='AccessType', description='The mode in which you want to add the domain name to WAF. Valid values:

*   **share:** adds the domain name to WAF in CNAME record mode. This is the default value.
*   **hybrid_cloud_cname:** adds the domain name to WAF in hybrid cloud reverse proxy mode.', example='share'),
  domain?: string(name='Domain', description='The domain name that you want to add to WAF.', example='www.aliyundoc.com'),
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

> You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  listen?: {
    certId?: string(name='CertId', description='The ID of the certificate that you want to add. This parameter is available only if you specify **HttpsPorts**.', example='123'),
    cipherSuite?: int32(name='CipherSuite', description='The type of cipher suite that you want to add. This parameter is available only if you specify **HttpsPorts**. Valid values:

*   **1:** all cipher suites.
*   **2:** strong cipher suites. You can select this value only if you set **TLSVersion** to **tlsv1.2**.
*   **99:** custom cipher suites.', example='2'),
    customCiphers?: [ string ](name='CustomCiphers', description='The custom cipher suite that you want to add.'),
    enableTLSv3?: boolean(name='EnableTLSv3', description='Specifies whether to support TLS 1.3. This parameter is available only if you specify **HttpsPorts**. Valid values:

*   **true**
*   **false**', example='true'),
    exclusiveIp?: boolean(name='ExclusiveIp', description='Specifies whether to enable an exclusive IP address. This parameter is available only if you set **IPv6Enabled** to **false** and **ProtectionResource** to **share**. Valid values:

*   **true**
*   **false** (default)', example='true'),
    focusHttps?: boolean(name='FocusHttps', description='Specifies whether to enable HTTP to HTTPS redirection. This parameter is available only if you specify HttpsPorts and leave HttpPorts empty. Valid values:

*   **true**
*   **false**', example='true'),
    http2Enabled?: boolean(name='Http2Enabled', description='Specifies whether to enable HTTP/2. This parameter is available only if you specify **HttpsPorts**. Valid values:

*   **true**
*   **false** (default)', example='true'),
    httpPorts?: [ int32 ](name='HttpPorts', description='The HTTP listener port.'),
    httpsPorts?: [ int32 ](name='HttpsPorts', description='The HTTPS listener port.'),
    IPv6Enabled?: boolean(name='IPv6Enabled', description='Specifies whether to enable IPv6. Valid values:

*   **true**
*   **false** (default)', example='true'),
    protectionResource?: string(name='ProtectionResource', description='The type of the protection resource. Valid values:

*   **share:** a shared cluster. This is the default value.
*   **gslb:** shared cluster-based intelligent load balancing.', example='share'),
    SM2AccessOnly?: boolean(name='SM2AccessOnly', description='Specifies whether to allow access only from SM certificate-based clients. This parameter is available only if you set SM2Enabled to true.

*   true
*   false', example='true'),
    SM2CertId?: string(name='SM2CertId', description='The ID of the SM certificate that you want to add. This parameter is available only if you set SM2Enabled to true.', example='123-cn-hangzhou'),
    SM2Enabled?: boolean(name='SM2Enabled', description='Specifies whether to enable the ShangMi (SM) certificate.', example='true'),
    TLSVersion?: string(name='TLSVersion', description='The version of the Transport Layer Security (TLS) protocol. This parameter is available only if you specify **HttpsPorts**. Valid values:

*   **tlsv1**
*   **tlsv1.1**
*   **tlsv1.2**', example='tlsv1'),
    xffHeaderMode?: int32(name='XffHeaderMode', description='The method that you want WAF to use to obtain the actual IP address of a client. Valid values:

*   **0:** No Layer 7 proxies are deployed in front of WAF. This is the default value.
*   **1:** WAF reads the first value of the X-Forwarded-For (XFF) header field as the IP address of the client.
*   **2:** WAF reads the value of a custom header field as the IP address of the client.', example='1'),
    xffHeaders?: [ string ](name='XffHeaders', description='The custom header field that you want WAF to use to obtain the actual IP address of a client.'),
  }(name='Listen', description='The configurations of the listeners.'),
  redirect?: {
    backends?: [ string ](name='Backends', description='The IP addresses or domain names of the origin server.'),
    cnameEnabled?: boolean(name='CnameEnabled', description='Specifies whether to enable the public cloud disaster recovery feature. Valid values:

*   **true**
*   **false** (default)', example='true'),
    connectTimeout?: int32(name='ConnectTimeout', description='The connection timeout period. Unit: seconds. Valid values: 1 to 3600.', example='120'),
    focusHttpBackend?: boolean(name='FocusHttpBackend', description='Specifies whether to enable HTTPS to HTTP redirection for back-to-origin requests. This parameter is available only if you specify **HttpsPorts**. Valid values:

*   **true**
*   **false**', example='true'),
    keepalive?: boolean(name='Keepalive', description='Specifies whether to enable the persistent connection feature. Valid values:

*   **true** (default)
*   **false**', example='true'),
    keepaliveRequests?: int32(name='KeepaliveRequests', description='The number of reused persistent connections. Valid values: 60 to 1000.

> This parameter specifies the number of reused persistent connections after you enable the persistent connection feature.', example='1000'),
    keepaliveTimeout?: int32(name='KeepaliveTimeout', description='The timeout period of persistent connections that are in the Idle state. Valid values: 1 to 60. Default value: 15. Unit: seconds.

> This parameter specifies the period of time during which a reused persistent connection is allowed to remain in the Idle state before the persistent connection is released.', example='15'),
    loadbalance?: string(name='Loadbalance', description='The load balancing algorithm that you want WAF to use to forward requests to the origin server. Valid values:

*   **iphash**
*   **roundRobin**
*   **leastTime**. You can select this value only if you set **ProtectionResource** to **gslb**.', example='roundRobin'),
    readTimeout?: int32(name='ReadTimeout', description='The read timeout period. Unit: seconds. Valid values: 1 to 3600.', example='200'),
    requestHeaders?: [ 
      {
        key?: string(name='Key', description='The key of the custom header field.', example='aaa'),
        value?: string(name='Value', description='The value of the custom header field.', example='bbb'),
      }
    ](name='RequestHeaders', description='The key-value pairs that you want to use to label the requests that pass through the WAF instance.

WAF automatically adds the key-value pairs to request headers. This way, the backend service can identify requests that pass through WAF.'),
    retry?: boolean(name='Retry', description='Specifies whether WAF retries to forward requests when the requests fail to be forwarded to the origin server. Valid values:

*   **true** (default)
*   **false**', example='true'),
    routingRules?: string(name='RoutingRules', description='The forwarding rules that you want to configure for the domain name that you want to add to WAF in hybrid cloud mode. Set the value to a string that consists of JSON arrays. Each element in a JSON array is a JSON struct that contains the following fields:

*   **rs:** The back-to-origin IP addresses or CNAMEs. The value must be of the ARRAY type.
*   **location:** The name of the protection node. The value must be of the STRING type.
*   **locationId:** The ID of the protection node. The value must be of the LONG type.', example='[
      {
            "rs": [
                  "1.1.XX.XX"
            ],
            "locationId": 535,
            "location": "test1111"
      }
]'),
    sniEnabled?: boolean(name='SniEnabled', description='Specifies whether to enable origin Server Name Indication (SNI). This parameter is available only if you specify **HttpsPorts**. Valid values:

*   **true**
*   **false** (default)', example='true'),
    sniHost?: string(name='SniHost', description='The value of the SNI field. If you do not specify this parameter, the **Host** field value in the request header is used. If you want WAF to use an SNI field value that is different from the Host field value in back-to-origin requests, you can specify a custom value for the SNI field.

> You must specify this parameter only if you set **SniEnabled** to **true**.', example='www.aliyundoc.com'),
    writeTimeout?: int32(name='WriteTimeout', description='The write timeout period. Unit: seconds. Valid values: 1 to 3600.', example='200'),
  }(name='Redirect', description='The configurations of the forwarding rule.'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou**: the Chinese mainland
*   **ap-southeast-1**: outside the Chinese mainland', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request. You do not need to specify this parameter. It is automatically obtained by the system.', example='0.0.0.0'),
}

model CreateDomainShrinkRequest {
  accessType?: string(name='AccessType', description='The mode in which you want to add the domain name to WAF. Valid values:

*   **share:** adds the domain name to WAF in CNAME record mode. This is the default value.
*   **hybrid_cloud_cname:** adds the domain name to WAF in hybrid cloud reverse proxy mode.', example='share'),
  domain?: string(name='Domain', description='The domain name that you want to add to WAF.', example='www.aliyundoc.com'),
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

> You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  listenShrink?: string(name='Listen', description='The configurations of the listeners.'),
  redirectShrink?: string(name='Redirect', description='The configurations of the forwarding rule.'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou**: the Chinese mainland
*   **ap-southeast-1**: outside the Chinese mainland', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request. You do not need to specify this parameter. It is automatically obtained by the system.', example='0.0.0.0'),
}

model CreateDomainResponseBody = {
  domainInfo?: {
    cname?: string(name='Cname', description='The CNAME that is assigned by WAF to the domain name.', example='xxxxxwww.****.com'),
    domain?: string(name='Domain', description='The domain name that you added to WAF.', example='www.aliyundoc.com'),
  }(name='DomainInfo', description='The information about the domain name.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
}

model CreateDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDomainResponseBody(name='body'),
}

async function createDomainWithOptions(tmpReq: CreateDomainRequest, runtime: Util.RuntimeOptions): CreateDomainResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDomainShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.listen)) {
    request.listenShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.listen, 'Listen', 'json');
  }
  if (!Util.isUnset(tmpReq.redirect)) {
    request.redirectShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.redirect, 'Redirect', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.accessType)) {
    query['AccessType'] = request.accessType;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.listenShrink)) {
    query['Listen'] = request.listenShrink;
  }
  if (!Util.isUnset(request.redirectShrink)) {
    query['Redirect'] = request.redirectShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDomain',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDomain(request: CreateDomainRequest): CreateDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDomainWithOptions(request, runtime);
}

model CreateMajorProtectionBlackIpRequest {
  description?: string(name='Description', description='The description of the IP address blacklist.', example='Protection for major events'),
  expiredTime?: long(name='ExpiredTime', description='The time after which the IP address blacklist becomes invalid. Unit: seconds.

>  If you set the value to **0**, the blacklist is permanently valid.', example='1224123412432'),
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.', example='waf-cn-xx'),
  ipList?: string(name='IpList', description='The IP addresses that you want to add to the IP address blacklist. CIDR blocks and IP addresses are supported. IPv4 and IPv6 addresses are supported. Separate the CIDR blocks or IP addresses with commas (,). For more information, see [Protection for major events](~~425591~~).', example='192.0.XX.XX,192.0.XX.XX/24'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
  ruleId?: long(name='RuleId', description='The ID of the IP address blacklist rule for major event protection.', example='232324'),
  templateId?: long(name='TemplateId', description='The ID of the major event protection template.', example='2221'),
}

model CreateMajorProtectionBlackIpResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
}

model CreateMajorProtectionBlackIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMajorProtectionBlackIpResponseBody(name='body'),
}

/**
  * This operation is available only on the China site (aliyun.com).
  *
  * @param request CreateMajorProtectionBlackIpRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateMajorProtectionBlackIpResponse
 */
async function createMajorProtectionBlackIpWithOptions(request: CreateMajorProtectionBlackIpRequest, runtime: Util.RuntimeOptions): CreateMajorProtectionBlackIpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.expiredTime)) {
    query['ExpiredTime'] = request.expiredTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ipList)) {
    query['IpList'] = request.ipList;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateMajorProtectionBlackIp',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation is available only on the China site (aliyun.com).
  *
  * @param request CreateMajorProtectionBlackIpRequest
  * @return CreateMajorProtectionBlackIpResponse
 */
async function createMajorProtectionBlackIp(request: CreateMajorProtectionBlackIpRequest): CreateMajorProtectionBlackIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMajorProtectionBlackIpWithOptions(request, runtime);
}

model DeleteDefenseResourceGroupRequest {
  groupName?: string(name='GroupName', description='The name of the protected object group that you want to delete.', example='group221'),
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
}

model DeleteDefenseResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='25BE1169-9AE4-5D7D-8293-C33242ABB549'),
}

model DeleteDefenseResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDefenseResourceGroupResponseBody(name='body'),
}

async function deleteDefenseResourceGroupWithOptions(request: DeleteDefenseResourceGroupRequest, runtime: Util.RuntimeOptions): DeleteDefenseResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDefenseResourceGroup',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDefenseResourceGroup(request: DeleteDefenseResourceGroupRequest): DeleteDefenseResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDefenseResourceGroupWithOptions(request, runtime);
}

model DeleteDefenseRuleRequest {
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
  ruleIds?: string(name='RuleIds', description='The IDs of the protection rules that you want to delete. Separate the IDs with commas (,).', example='2223455,23354,465565'),
  templateId?: long(name='TemplateId', description='The ID of the protection rule template to which the protection rule that you want to delete belongs.', example='2221'),
}

model DeleteDefenseRuleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='2EC856FE-6D31-5861-8275-E5DEDB539089'),
}

model DeleteDefenseRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDefenseRuleResponseBody(name='body'),
}

async function deleteDefenseRuleWithOptions(request: DeleteDefenseRuleRequest, runtime: Util.RuntimeOptions): DeleteDefenseRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.ruleIds)) {
    query['RuleIds'] = request.ruleIds;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDefenseRule',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDefenseRule(request: DeleteDefenseRuleRequest): DeleteDefenseRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDefenseRuleWithOptions(request, runtime);
}

model DeleteDefenseTemplateRequest {
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
  templateId?: long(name='TemplateId', description='The ID of the protection rule template that you want to delete.', example='3155'),
}

model DeleteDefenseTemplateResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='E2DE6F11-6FED-5909-95F2-2520B58C5BC7'),
}

model DeleteDefenseTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDefenseTemplateResponseBody(name='body'),
}

async function deleteDefenseTemplateWithOptions(request: DeleteDefenseTemplateRequest, runtime: Util.RuntimeOptions): DeleteDefenseTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDefenseTemplate',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDefenseTemplate(request: DeleteDefenseTemplateRequest): DeleteDefenseTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDefenseTemplateWithOptions(request, runtime);
}

model DeleteDomainRequest {
  accessType?: string(name='AccessType', description='The mode in which the domain name is added to WAF. Valid values:

*   **share:** CNAME record mode. This is the default value.
*   **hybrid_cloud_cname:** hybrid cloud reverse proxy mode.', example='share'),
  domain?: string(name='Domain', description='The domain name that you want to delete.', example='www.aliyundoc.com'),
  domainId?: string(name='DomainId', description='The ID of the domain name.', example='www.aliyundoc.com-waf'),
  instanceId?: string(name='InstanceId', description='The ID of the WAF instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request. The value of this parameter is specified by the system.', example='0.0.XX.XX'),
}

model DeleteDomainResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
}

model DeleteDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDomainResponseBody(name='body'),
}

async function deleteDomainWithOptions(request: DeleteDomainRequest, runtime: Util.RuntimeOptions): DeleteDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessType)) {
    query['AccessType'] = request.accessType;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.domainId)) {
    query['DomainId'] = request.domainId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDomain',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDomainWithOptions(request, runtime);
}

model DeleteMajorProtectionBlackIpRequest {
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  ipList?: string(name='IpList', description='The IP address blacklist for major event protection that you want to delete. You can specify multiple CIDR blocks or IP addresses. IPv4 and IPv6 addresses are supported. Separate the CIDR blocks or IP addresses with commas (,). For more information, see [Protection for major events](~~425591~~).', example='192.0.XX.XX,192.0.XX.XX/24'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
  ruleId?: long(name='RuleId', description='The ID of the IP address blacklist rule for major event protection.', example='20013135'),
  templateId?: long(name='TemplateId', description='The ID of the IP address blacklist rule template for major event protection.', example='5332'),
}

model DeleteMajorProtectionBlackIpResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='66A98669-CC6E-4F3E-80A6-3014697B11AE'),
}

model DeleteMajorProtectionBlackIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMajorProtectionBlackIpResponseBody(name='body'),
}

async function deleteMajorProtectionBlackIpWithOptions(request: DeleteMajorProtectionBlackIpRequest, runtime: Util.RuntimeOptions): DeleteMajorProtectionBlackIpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ipList)) {
    query['IpList'] = request.ipList;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMajorProtectionBlackIp',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMajorProtectionBlackIp(request: DeleteMajorProtectionBlackIpRequest): DeleteMajorProtectionBlackIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMajorProtectionBlackIpWithOptions(request, runtime);
}

model DescribeDefenseResourceGroupRequest {
  groupName?: string(name='GroupName', description='The name of the protected object group whose information you want to query.', example='group221'),
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the Alibaba Cloud resource group.', example='rg-acfm***q'),
}

model DescribeDefenseResourceGroupResponseBody = {
  group?: {
    description?: string(name='Description', description='The description of the protected object group.', example='test'),
    gmtCreate?: long(name='GmtCreate', description='The time when the protected object group was created.', example='23242312312'),
    gmtModified?: long(name='GmtModified', description='The most recent time when the protected object group was modified.', example='23242312312'),
    groupName?: string(name='GroupName', description='The name of the protected object group.', example='group1'),
    resourceList?: string(name='ResourceList', description='The protected objects in the protected object group. The protected objects are separated with commas (,).', example='test1.aliyundoc.com,test2.aliyundoc.com'),
  }(name='Group', description='The information about the protected object group.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E67D21C6-5376-5F94-B745-70E08D03E3CB'),
}

model DescribeDefenseResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDefenseResourceGroupResponseBody(name='body'),
}

async function describeDefenseResourceGroupWithOptions(request: DescribeDefenseResourceGroupRequest, runtime: Util.RuntimeOptions): DescribeDefenseResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDefenseResourceGroup',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDefenseResourceGroup(request: DescribeDefenseResourceGroupRequest): DescribeDefenseResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDefenseResourceGroupWithOptions(request, runtime);
}

model DescribeDefenseResourcesRequest {
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10'),
  query?: string(name='Query', description='The query conditions. Specify the value of this parameter as a string in the JSON format.

>  The results vary based on the query condition. For more information, see the "**Query parameters**" section in this topic.', example='{\\"product\\":\\"waf\\"}'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request. The value of this parameter is specified by the system.', example='0.0.XX.XX'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='Tagkey1'),
      value?: string(name='Value', description='The value of the tag.', example='TagValue1'),
    }
  ](name='Tag', description='The tags of the resources that you want to query. You can specify up to 20 tags.'),
}

model DescribeDefenseResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='618F2626-DB27-5187-8C6C-4E61A491DF29'),
  resources?: [ 
    {
      acwCookieStatus?: int32(name='AcwCookieStatus', description='The status of the tracking cookie.

*   **0:** disabled.
*   **1:** enabled.', example='1'),
      acwSecureStatus?: int32(name='AcwSecureStatus', description='The status of the secure attribute of the tracking cookie.

*   **0:** disabled.
*   **1:** enabled.', example='0'),
      acwV3SecureStatus?: int32(name='AcwV3SecureStatus', description='The status of the secure attribute of the slider verification cookie.

*   **0:** disabled.
*   **1:** enabled.', example='0'),
      customHeaders?: [ string ](name='CustomHeaders', description='The custom XFF headers that are used to identify the originating IP addresses of clients. If the value of XffStatus is 1 and CustomHeaders is left empty, the first IP address in the XFF header is the originating IP address of the client.'),
      description?: string(name='Description', description='The description of the protected object.', example='test'),
      detail?: map[string]any(name='Detail', description='The details of the protected object. Different key-value pairs in a map indicate different properties of the protected object.'),
      gmtCreate?: long(name='GmtCreate', description='The creation time of the protected object. Unit: seconds.', example='1652149203187'),
      gmtModified?: long(name='GmtModified', description='The most recent modification time of the protected object. Unit: seconds.', example='1665633032000'),
      pattern?: string(name='Pattern', description='The protection pattern.', example='domain'),
      product?: string(name='Product', description='The name of the cloud service.', example='alb'),
      resource?: string(name='Resource', description='The name of the protected object.', example='alb-rencs***'),
      resourceGroup?: string(name='ResourceGroup', description='The name of the protected object group to which the protected object belongs.', example='test'),
      resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
      resourceOrigin?: string(name='ResourceOrigin', description='The origin of the protected object.', example='custom'),
      xffStatus?: int32(name='XffStatus', description='Indicates whether the X-Forwarded-For (XFF) header is used.', example='1'),
    }
  ](name='Resources', description='The protected objects.'),
  totalCount?: long(name='TotalCount', description='The total number of entries that are returned.', example='73'),
}

model DescribeDefenseResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDefenseResourcesResponseBody(name='body'),
}

async function describeDefenseResourcesWithOptions(request: DescribeDefenseResourcesRequest, runtime: Util.RuntimeOptions): DescribeDefenseResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.query)) {
    query['Query'] = request.query;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDefenseResources',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDefenseResources(request: DescribeDefenseResourcesRequest): DescribeDefenseResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDefenseResourcesWithOptions(request, runtime);
}

model DescribeDefenseRuleRequest {
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
  ruleId?: long(name='RuleId', description='The ID of the protection rule that you want to query.', example='20026192'),
  templateId?: long(name='TemplateId', description='The ID of the protection rule template to which the protection rule that you want to query belongs.', example='10318'),
}

model DescribeDefenseRuleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
  rule?: {
    config?: string(name='Config', description='The details of the protection rule. The value is a JSON string that contains multiple parameters. For more information, see the "**Protection rule parameters**" section of the [CreateDefenseRule](~~CreateDefenseRule~~) topic.', example='{\\"status\\":1,\\"policyId\\":1012,\\"action\\":\\"block\\"}'),
    defenseOrigin?: string(name='DefenseOrigin', description='The origin of the protection rule. Valid values:

*   **custom:** The protection rule is created by the user.
*   **system:** The protection rule is automatically generated by the system.', example='custom'),
    defenseScene?: string(name='DefenseScene', description='The scenario in which the protection rule is used. For more information, see the description of **DefenseScene** in the [CreateDefenseRule](~~CreateDefenseRule~~) topic.', example='waf_group'),
    gmtModified?: long(name='GmtModified', description='The most recent time when the protection rule was modified.', example='1665196746000'),
    ruleId?: long(name='RuleId', description='The ID of the protection rule.', example='2732975'),
    ruleName?: string(name='RuleName', description='The name of the protection rule.', example='test1'),
    status?: int32(name='Status', description='The status of the protection rule. Valid values:

*   **0:** disabled.
*   **1:** enabled.', example='1'),
    templateId?: long(name='TemplateId', description='The ID of the protection rule template.', example='9114'),
  }(name='Rule', description='The configurations of the protection rule. The value is a JSON string that contains multiple parameters.'),
}

model DescribeDefenseRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDefenseRuleResponseBody(name='body'),
}

async function describeDefenseRuleWithOptions(request: DescribeDefenseRuleRequest, runtime: Util.RuntimeOptions): DescribeDefenseRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDefenseRule',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDefenseRule(request: DescribeDefenseRuleRequest): DescribeDefenseRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDefenseRuleWithOptions(request, runtime);
}

model DescribeDefenseRulesRequest {
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10'),
  query?: string(name='Query', description='The query conditions. Specify a string that contains multiple parameters in the JSON format.

>  The results vary based on the query conditions. For more information, see the "**Query parameters**" section in this topic.', example='{\\\\"name\\\\":\\\\"IP address blocking\\_20220822\\_10\\\\",\\\\"scene\\\\":\\\\"custom_acl\\\\",\\\\"templateId\\\\":5327}'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
  ruleType?: string(name='RuleType', description='The type of protection rule that you want to query. Valid values:

*   **whitelist:** whitelist rule.
*   **defense:** defense rule. This is the default value.', example='whitelist'),
}

model DescribeDefenseRulesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='80736FA5-FA87-55F6-AA69-C5477C6FE6D0'),
  rules?: [ 
    {
      config?: string(name='Config', description='The details of the protection rule. The value is a string that contains multiple parameters in the JSON format. For more information, see the "**Rule parameters**" section in the [CreateDefenseRule](~~CreateDefenseRule~~) topic.', example='{\\"policyId\\":1012,\\"action\\":\\"block\\"}'),
      defenseOrigin?: string(name='DefenseOrigin', description='The origin of the protection rule. Valid values:

*   **custom:** The protection rule is created by the user.
*   **system:** The protection rule is automatically generated by the system.', example='custom'),
      defenseScene?: string(name='DefenseScene', description='The scenario in which the protection rule is used. For more information, see the description of the **DefenseScene** parameter in the [CreateDefenseRule](~~CreateDefenseRule~~) topic.', example='waf_group'),
      gmtModified?: long(name='GmtModified', description='The most recent time when the protection rule was modified.', example='1665460629000'),
      ruleId?: long(name='RuleId', description='The ID of the protection rule.', example='42755'),
      ruleName?: string(name='RuleName', description='The name of the protection rule.', example='rules_41'),
      status?: int32(name='Status', description='The status of the protection rule. Valid values:

*   **0:** disabled.
*   **1:** enabled.', example='1'),
      templateId?: long(name='TemplateId', description='The ID of the protection rule template.', example='5673'),
    }
  ](name='Rules', description='An array of protection rules.'),
  totalCount?: long(name='TotalCount', description='The total number of returned entries.', example='2'),
}

model DescribeDefenseRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDefenseRulesResponseBody(name='body'),
}

async function describeDefenseRulesWithOptions(request: DescribeDefenseRulesRequest, runtime: Util.RuntimeOptions): DescribeDefenseRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.query)) {
    query['Query'] = request.query;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.ruleType)) {
    query['RuleType'] = request.ruleType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDefenseRules',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDefenseRules(request: DescribeDefenseRulesRequest): DescribeDefenseRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDefenseRulesWithOptions(request, runtime);
}

model DescribeDefenseTemplateRequest {
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
  templateId?: long(name='TemplateId', description='The ID of the protection rule template.', example='1333'),
}

model DescribeDefenseTemplateResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
  template?: {
    defenseScene?: string(name='DefenseScene', description='The scenario in which the template is used. For more information, see the description of the **DefenseScene** parameter in the [CreateDefenseRule](~~CreateDefenseRule~~) topic.', example='waf_group'),
    defenseSubScene?: string(name='DefenseSubScene'),
    description?: string(name='Description', description='The description of the protection rule template.', example='test'),
    gmtModified?: long(name='GmtModified', description='The most recent time when the protection rule template was modified.', example='1665283642000'),
    templateId?: long(name='TemplateId', description='The ID of the protection rule template.', example='10097'),
    templateName?: string(name='TemplateName', description='The name of the protection rule template.', example='test0621'),
    templateOrigin?: string(name='TemplateOrigin', description='The origin of the protection rule template. If the value of this parameter is custom, the protection rule template is created by the user.', example='custom'),
    templateStatus?: int32(name='TemplateStatus', description='The status of the protection rule template. Valid values:

*   **0:** disabled.
*   **1:** enabled.', example='1'),
    templateType?: string(name='TemplateType', description='The type of the protection rule template. Valid values:

*   **user_default:** default template.
*   **user_custom:** custom template.', example='user_default'),
  }(name='Template', description='The information about the template.'),
}

model DescribeDefenseTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDefenseTemplateResponseBody(name='body'),
}

async function describeDefenseTemplateWithOptions(request: DescribeDefenseTemplateRequest, runtime: Util.RuntimeOptions): DescribeDefenseTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDefenseTemplate',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDefenseTemplate(request: DescribeDefenseTemplateRequest): DescribeDefenseTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDefenseTemplateWithOptions(request, runtime);
}

model DescribeDomainDetailRequest {
  domain?: string(name='Domain', description='The domain name that you want to query.', example='www.aliyundoc.com'),
  instanceId?: string(name='InstanceId', description='The ID of the WAF instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request. The value of this parameter is specified by the system.', example='0.0.XX.XX'),
}

model DescribeDomainDetailResponseBody = {
  certDetail?: {
    commonName?: string(name='CommonName', description='The domain name of your website.', example='test.aliyundoc.com'),
    endTime?: long(name='EndTime', description='The end of the validity period of the SSL certificate. The value is in the UNIX timestamp format. Unit: milliseconds.', example='1665590400000'),
    id?: string(name='Id', description='The ID of the SSL certificate.', example='123-cn-hangzhou'),
    name?: string(name='Name', description='The name of the SSL certificate.', example='test-cert-name'),
    sans?: [ string ](name='Sans', description='All domain names that are bound to the certificate.'),
    startTime?: long(name='StartTime', description='The beginning of the validity period of the SSL certificate. The value is in the UNIX timestamp format. Unit: milliseconds.', example='1677772800'),
  }(name='CertDetail', description='The details of the SSL certificate.'),
  cname?: string(name='Cname', description='The CNAME that is assigned by WAF to the domain name.', example='xxxxxcvdaf.****.com'),
  domain?: string(name='Domain', description='The domain name.', example='www.aliyundoc.com'),
  listen?: {
    certId?: long(name='CertId', description='The ID of the certificate.', example='123'),
    cipherSuite?: long(name='CipherSuite', description='The type of the cipher suites. Valid values:

*   **1:** all cipher suites.
*   **2:** strong cipher suites.
*   **99:** custom cipher suites.', example='2'),
    customCiphers?: [ string ](name='CustomCiphers', description='An array of custom cipher suites.'),
    enableTLSv3?: boolean(name='EnableTLSv3', description='Indicates whether TLS 1.3 is supported. Valid values:

*   **true:** TLS 1.3 is supported.
*   **false:** TLS 1.3 is not supported.', example='true'),
    exclusiveIp?: boolean(name='ExclusiveIp', description='Indicates whether an exclusive IP address is enabled. Valid values:

*   **true:** An exclusive IP address is enabled for the domain name.
*   **false:** No exclusive IP addresses are enabled for the domain name.', example='true'),
    focusHttps?: boolean(name='FocusHttps', description='Indicates whether HTTP to HTTPS redirection is enabled for the domain name. Valid values:

*   **true:** HTTP to HTTPS redirection is enabled.
*   **false:** HTTP to HTTPS redirection is disabled.', example='true'),
    http2Enabled?: boolean(name='Http2Enabled', description='Indicates whether HTTP/2 is enabled. Valid values:

*   **true:** HTTP/2 is enabled.
*   **false:** HTTP/2 is disabled.', example='true'),
    httpPorts?: [ long ](name='HttpPorts', description='An array of HTTP listener ports.'),
    httpsPorts?: [ long ](name='HttpsPorts', description='An array of HTTPS listener ports.'),
    IPv6Enabled?: boolean(name='IPv6Enabled', description='Indicates whether IPv6 is enabled. Valid values:

*   **true:** IPv6 is enabled.
*   **false:** IPv6 is disabled.', example='true'),
    protectionResource?: string(name='ProtectionResource', description='The type of protection resource that is used. Valid values:

*   **share:** shared cluster.
*   **gslb:** shared cluster-based intelligent load balancing.', example='share'),
    SM2AccessOnly?: boolean(name='SM2AccessOnly'),
    SM2CertId?: boolean(name='SM2CertId'),
    SM2Enabled?: boolean(name='SM2Enabled'),
    TLSVersion?: string(name='TLSVersion', description='The version of the Transport Layer Security (TLS) protocol. Valid values:

*   **tlsv1**
*   **tlsv1.1**
*   **tlsv1.2**', example='tlsv1.2'),
    xffHeaderMode?: long(name='XffHeaderMode', description='The method that WAF uses to obtain the actual IP address of a client. Valid values:

*   **0:** No Layer 7 proxies are deployed in front of WAF.
*   **1:** WAF reads the first value of the X-Forwarded-For (XFF) header field as the actual IP address of the client.
*   **2:** WAF reads the value of a custom header field as the actual IP address of the client.', example='2'),
    xffHeaders?: [ string ](name='XffHeaders', description='An array of custom header fields that are used to obtain the actual IP address of a client.'),
  }(name='Listen', description='The configurations of the listeners.'),
  redirect?: {
    backends?: [ 
      {
        backend?: string(name='Backend', description='The IP address or domain name of the origin server.', example='1.1.XX.XX'),
      }
    ](name='Backends', description='An array of addresses of origin servers.'),
    connectTimeout?: int32(name='ConnectTimeout', description='The timeout period of the connection. Unit: seconds. Valid values: 5 to 120.', example='120'),
    focusHttpBackend?: boolean(name='FocusHttpBackend', description='Indicates whether HTTPS to HTTP redirection is enabled for back-to-origin requests of the domain name. Valid values:

*   **true:** HTTPS to HTTP redirection for back-to-origin requests of the domain name is enabled.
*   **false:** HTTPS to HTTP redirection for back-to-origin requests of the domain name is disabled.', example='true'),
    keepalive?: boolean(name='Keepalive', description='Indicates whether the persistent connection feature is enabled. Valid values:

*   **true:** The persistent connection feature is enabled. This is the default value.
*   **false:** The persistent connection feature is disabled.', example='true'),
    keepaliveRequests?: int32(name='KeepaliveRequests', description='The number of reused persistent connections. Valid values: 60 to 1000.

>  This parameter specifies the number of reused persistent connections when you enable the persistent connection feature.', example='1000'),
    keepaliveTimeout?: int32(name='KeepaliveTimeout', description='The timeout period of persistent connections that are in the Idle state. Valid values: 1 to 60. Default value: 15. Unit: seconds.

>  This parameter specifies the period of time during which a reused persistent connection is allowed to remain in the Idle state before the persistent connection is released.', example='15'),
    loadbalance?: string(name='Loadbalance', description='The load balancing algorithm that is used when WAF forwards requests to the origin server. Valid values:

*   **ip_hash:** the IP hash algorithm.
*   **roundRobin:** the round-robin algorithm.
*   **leastTime:** the least response time algorithm.', example='iphash'),
    readTimeout?: int32(name='ReadTimeout', description='The read timeout period. Unit: seconds. Valid values: 5 to 1800.', example='200'),
    requestHeaders?: [ 
      {
        key?: string(name='Key', description='The key of the custom header field.', example='aaa'),
        value?: string(name='Value', description='The value of the custom header field.', example='bbb'),
      }
    ](name='RequestHeaders', description='An array of key-value pairs that are used to mark the requests that pass through the WAF instance.'),
    retry?: boolean(name='Retry', description='Indicates whether WAF retries to forward requests when requests fail to be forwarded to the origin server. Valid values:

*   **true:** WAF retries to forward requests. This is the default value.
*   **false:** WAF does not retry to forward requests.', example='true'),
    sniEnabled?: boolean(name='SniEnabled', description='Indicates whether origin Server Name Indication (SNI) is enabled. Valid values:

*   **true:** Origin SNI is enabled.
*   **false:** Origin SNI is disabled. This is the default value.', example='true'),
    sniHost?: string(name='SniHost', description='The value of the custom SNI field.', example='www.aliyundoc.com'),
    writeTimeout?: int32(name='WriteTimeout', description='The write timeout period. Unit: seconds. Valid values: 5 to 1800.', example='200'),
  }(name='Redirect', description='The configurations of the forwarding rule.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BAEF9CA9-66A0-533E-BD09-5D5D7AA8ADE7'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
  SM2CertDetail?: {
    commonName?: string(name='CommonName', description='The domain name of your website.', example='test.aliyundoc.com'),
    endTime?: long(name='EndTime', description='The end of the validity period of the SSL certificate. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1665590400000'),
    id?: string(name='Id', description='The ID of the SSL certificate.', example='123-cn-hangzhou'),
    name?: string(name='Name', description='The name of the SSL certificate.', example='test-sm2-cert-name'),
    sans?: [ string ](name='Sans', description='All domain names that are bound to the certificate.'),
    startTime?: long(name='StartTime', description='The beginning of the validity period of the SSL certificate. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1657551525000'),
  }(name='SM2CertDetail', description='The information about the SM certificate.'),
  status?: long(name='Status', description='The status of the domain name. Valid values:

*   **1:** The domain name is in a normal state.
*   **2:** The domain name is being created.
*   **3:** The domain name is being modified.
*   **4:** The domain name is being released.
*   **5:** WAF no longer forwards traffic of the domain name.', example='1'),
}

model DescribeDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainDetailResponseBody(name='body'),
}

async function describeDomainDetailWithOptions(request: DescribeDomainDetailRequest, runtime: Util.RuntimeOptions): DescribeDomainDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainDetail',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainDetail(request: DescribeDomainDetailRequest): DescribeDomainDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainDetailWithOptions(request, runtime);
}

model DescribeDomainsRequest {
  backend?: string(name='Backend', description='An array of HTTPS listener ports.', example='1.1.XX.XX'),
  domain?: string(name='Domain', description='The ID of the request.', example='www.aliyundoc.com'),
  instanceId?: string(name='InstanceId', description='The page number of the page to return. Default value: 1.', example='waf_cdnsdf3****'),
  pageNumber?: long(name='PageNumber', description='The HTTPS address of the origin server.', example='1'),
  pageSize?: long(name='PageSize', description='Queries the list of a domain name that is added to Web Application Firewall (WAF).', example='10'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
  sourceIp?: string(name='SourceIp', description='The source IP address. The value of this parameter is specified by the system.', example='1.1.X.X'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TagKey1'),
      value?: string(name='Value', description='The tag value.', example='TagValue1'),
    }
  ](name='Tag', description='The tag of the resource. You can specify up to 20 tags.'),
}

model DescribeDomainsResponseBody = {
  domains?: [ 
    {
      backeds?: {
        http?: [ 
          {
            backend?: string(name='Backend', description='The HTTP address of the origin server.', example='1.1.XX.XX'),
          }
        ](name='Http', description='The HTTP addresses of the origin server.'),
        https?: [ 
          {
            backend?: string(name='Backend', description='The HTTPS address of the origin server.', example='1.1.XX.XX'),
          }
        ](name='Https', description='The HTTPS addresses of the origin server.'),
      }(name='Backeds', description='The back-to-origin settings.'),
      cname?: string(name='Cname', description='The CNAME assigned by WAF to the domain name.', example='xxxxxcvdaf.****.com'),
      domain?: string(name='Domain', description='The domain name that is added to WAF in CNAME record mode.', example='www.aliyundoc.com'),
      listenPorts?: {
        http?: [ long ](name='Http', description='The HTTP listener ports.'),
        https?: [ long ](name='Https', description='The HTTPS listener ports.'),
      }(name='ListenPorts', description='The configurations of the listeners.'),
      resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfmvtc5z52****'),
      status?: int32(name='Status', description='The status of the domain name. Valid values:

*   **1:** The domain name is in a normal state.
*   **2:** The domain name is being created.
*   **3:** The domain name is being modified.
*   **4:** The domain name is being released.
*   **5:** WAF no longer forwards traffic that is sent to the domain name.', example='1'),
    }
  ](name='Domains', description='The domain names that are added to WAF in CNAME record mode.'),
  requestId?: string(name='RequestId', example='ABF68BB3-2C48-5FA4-9750-D5FE55700E36'),
  totalCount?: long(name='TotalCount', example='146'),
}

model DescribeDomainsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainsResponseBody(name='body'),
}

async function describeDomainsWithOptions(request: DescribeDomainsRequest, runtime: Util.RuntimeOptions): DescribeDomainsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backend)) {
    query['Backend'] = request.backend;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomains',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomains(request: DescribeDomainsRequest): DescribeDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainsWithOptions(request, runtime);
}

model DescribeFlowChartRequest {
  endTimestamp?: string(name='EndTimestamp', description='The end of the time range to query. Unit: seconds. If you do not specify this parameter, the current time is used.', example='1665386280'),
  instanceId?: string(name='InstanceId', description='The ID of the WAF instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  interval?: string(name='Interval', description='The time interval. Unit: seconds. The value must be an integral multiple of 60.', example='300'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resource?: string(name='Resource', description='The protected object.', example='www.aliyundoc.com'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the Alibaba Cloud resource group.', example='rg-acfm***q'),
  startTimestamp?: string(name='StartTimestamp', description='The beginning of the time range to query. Unit: seconds.', example='1665331200'),
}

model DescribeFlowChartResponseBody = {
  flowChart?: [ 
    {
      aclCustomBlockSum?: long(name='AclCustomBlockSum', description='The number of requests that are blocked by custom access control rules.', example='0'),
      aclCustomReportsSum?: long(name='AclCustomReportsSum', description='The number of requests that are monitored by custom access control rules.', example='0'),
      antiScanBlockSum?: long(name='AntiScanBlockSum', description='The number of requests that are blocked by scan protection rules.', example='0'),
      antibotBlockSum?: long(name='AntibotBlockSum', description='The number of requests that are blocked by bot management rules.', example='0'),
      antibotReportSum?: string(name='AntibotReportSum', description='The number of requests that are monitored by bot management rules.', example='0'),
      antiscanReportsSum?: long(name='AntiscanReportsSum', description='The number of requests that are monitored by scan protection rules.', example='0'),
      blacklistBlockSum?: string(name='BlacklistBlockSum', description='The number of requests that are blocked by IP address blacklist rules.', example='0'),
      blacklistReportsSum?: long(name='BlacklistReportsSum', description='The number of requests that are monitored by IP address blacklist rules.', example='0'),
      ccCustomBlockSum?: long(name='CcCustomBlockSum', description='The number of requests that are blocked by custom HTTP flood protection rules.', example='0'),
      ccCustomReportsSum?: long(name='CcCustomReportsSum', description='The number of requests that are monitored by custom HTTP flood protection rules.', example='0'),
      ccSystemBlocksSum?: long(name='CcSystemBlocksSum', description='The number of requests that are blocked by HTTP flood protection rules generated by the system.', example='0'),
      ccSystemReportsSum?: long(name='CcSystemReportsSum', description='The number of requests that are monitored by HTTP flood protection rules generated by the system.', example='0'),
      count?: long(name='Count', description='The total number of requests.', example='2932'),
      inBytes?: long(name='InBytes', description='The total number of requests that are forwarded to WAF.', example='121645464'),
      index?: long(name='Index', description='The serial number of the time interval. The serial numbers are arranged in chronological order.', example='10'),
      maxPv?: long(name='MaxPv', description='The maximum number of requests.', example='2932'),
      outBytes?: long(name='OutBytes', description='The total number of requests that are sent from WAF.', example='1200540464'),
      ratelimitBlockSum?: long(name='RatelimitBlockSum', example='0'),
      ratelimitReportSum?: long(name='RatelimitReportSum', example='0'),
      regionBlockBlocksSum?: long(name='RegionBlockBlocksSum', description='The number of requests that are blocked by region blacklist rules.', example='0'),
      regionBlockReportsSum?: long(name='RegionBlockReportsSum', description='The number of requests that are monitored by region blacklist rules.', example='0'),
      robotCount?: long(name='RobotCount', example='1110'),
      wafBlockSum?: long(name='WafBlockSum', description='The number of requests that are blocked by basic protection rules.', example='0'),
      wafReportSum?: string(name='WafReportSum', description='The number of requests that are monitored by basic protection rules.', example='0'),
    }
  ](name='FlowChart', description='The traffic statistics.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BFA71416-670E-585D-AAE6-E7BBEE248FAB'),
}

model DescribeFlowChartResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFlowChartResponseBody(name='body'),
}

async function describeFlowChartWithOptions(request: DescribeFlowChartRequest, runtime: Util.RuntimeOptions): DescribeFlowChartResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFlowChart',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFlowChart(request: DescribeFlowChartRequest): DescribeFlowChartResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFlowChartWithOptions(request, runtime);
}

model DescribeFlowTopResourceRequest {
  endTimestamp?: string(name='EndTimestamp', description='The end of the time range to query. Unit: seconds. If you do not specify this parameter, the current time is used.', example='1665386340'),
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the Alibaba Cloud resource group.', example='rg-acfm***q'),
  startTimestamp?: string(name='StartTimestamp', description='The beginning of the time range to query. Unit: seconds.', example='1665331200'),
}

model DescribeFlowTopResourceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='8F0E0B9A-B518-5C6D-BEFC-A373DDE4F652'),
  ruleHitsTopResource?: [ 
    {
      count?: long(name='Count', description='The total number of requests received by the protected object in a specified time range.', example='181174784'),
      resource?: string(name='Resource', description='The protected object.', example='www.aliyundoc.com'),
    }
  ](name='RuleHitsTopResource', description='The array of the top 10 protected objects that receive requests.'),
}

model DescribeFlowTopResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFlowTopResourceResponseBody(name='body'),
}

async function describeFlowTopResourceWithOptions(request: DescribeFlowTopResourceRequest, runtime: Util.RuntimeOptions): DescribeFlowTopResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFlowTopResource',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFlowTopResource(request: DescribeFlowTopResourceRequest): DescribeFlowTopResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFlowTopResourceWithOptions(request, runtime);
}

model DescribeFlowTopUrlRequest {
  endTimestamp?: string(name='EndTimestamp', description='The end of the time range to query. Unit: seconds. If you do not specify this parameter, the current time is used.', example='1665386340'),
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resource?: string(name='Resource', description='The protected object.', example='www.aliyundoc.com'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the Alibaba Cloud resource group.', example='rg-acfm***q'),
  startTimestamp?: string(name='StartTimestamp', description='The beginning of the time range to query. Unit: seconds.', example='1665331200'),
}

model DescribeFlowTopUrlResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='520D4E4C-B8EC-5602-ACB6-4D378ACBA28D'),
  ruleHitsTopUrl?: [ 
    {
      count?: long(name='Count', description='The total number of requests that are initiated by using the URL.', example='181174784'),
      url?: string(name='Url', description='The URL that is used to initiate requests.', example='www.aliyundoc.com/path1'),
    }
  ](name='RuleHitsTopUrl', description='The array of the top 10 URLs that are used to initiate requests.'),
}

model DescribeFlowTopUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFlowTopUrlResponseBody(name='body'),
}

async function describeFlowTopUrlWithOptions(request: DescribeFlowTopUrlRequest, runtime: Util.RuntimeOptions): DescribeFlowTopUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFlowTopUrl',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFlowTopUrl(request: DescribeFlowTopUrlRequest): DescribeFlowTopUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFlowTopUrlWithOptions(request, runtime);
}

model DescribeHybridCloudGroupsRequest {
  clusterId?: long(name='ClusterId', description='The ID of the hybrid cloud cluster.', example='428'),
  clusterProxyType?: string(name='ClusterProxyType', description='The type of proxy cluster that is used. Valid values:

*   **service**: service-based traffic mirroring.
*   **cname**: reverse proxy.', example='cname'),
  groupName?: int32(name='GroupName', description='The name of the hybrid cloud node group that you want to query.', example='groupName1'),
  groupType?: string(name='GroupType', description='The type of the node group. Valid values:

*   **protect**
*   **control**
*   **storage**
*   **controlStorage**', example='protect'),
  instanceId?: string(name='InstanceId', description='The ID of the WAF instance.

> You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_v3prepaid_public_cn-********w0b'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **10**.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the WAF instance. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
}

model DescribeHybridCloudGroupsResponseBody = {
  groups?: [ 
    {
      backSourceMark?: string(name='BackSourceMark'),
      continentsValue?: int32(name='ContinentsValue'),
      groupId?: int32(name='GroupId', description='The ID of the hybrid cloud node group.', example='123'),
      groupName?: string(name='GroupName', description='The name of the hybrid cloud node group.', example='StorageGroup'),
      groupType?: string(name='GroupType', description='The type of the hybrid cloud node group. Valid values:

*   **protect**
*   **control**
*   **storage**
*   **controlStorage**', example='protect'),
      loadBalanceIp?: string(name='LoadBalanceIp', description='The IP address of the server for load balancing.', example='1.1.XX.XX'),
      locationId?: long(name='LocationId', description='The ID of the protection node.', example='1312'),
      operatorValue?: int32(name='OperatorValue'),
      ports?: string(name='Ports', description='The port that is used by the hybrid cloud cluster. The value of this parameter is a string. If multiple ports are returned, the value is in the **port1,port2,port3** format.', example='80,9200,20018'),
      regionCodeValue?: int32(name='RegionCodeValue'),
      remark?: string(name='Remark', description='The description of the hybrid cloud node group.'),
    }
  ](name='Groups', description='The hybrid cloud node groups.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='045660E7-C4C6-5CD7-8182-7B337D95ADF4'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='146'),
}

model DescribeHybridCloudGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHybridCloudGroupsResponseBody(name='body'),
}

async function describeHybridCloudGroupsWithOptions(request: DescribeHybridCloudGroupsRequest, runtime: Util.RuntimeOptions): DescribeHybridCloudGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterProxyType)) {
    query['ClusterProxyType'] = request.clusterProxyType;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.groupType)) {
    query['GroupType'] = request.groupType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHybridCloudGroups',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHybridCloudGroups(request: DescribeHybridCloudGroupsRequest): DescribeHybridCloudGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHybridCloudGroupsWithOptions(request, runtime);
}

model DescribeHybridCloudResourcesRequest {
  backend?: string(name='Backend', description='The back-to-origin IP address or domain name.', example='1.1.XX.XX'),
  cnameEnabled?: boolean(name='CnameEnabled', description='Specifies whether the public cloud disaster recovery feature is enabled for the domain name. Valid values:

*   **true**
*   **false**', example='true'),
  domain?: string(name='Domain', description='The domain name that you want to query.', example='www.aliyundoc.com'),
  instanceId?: string(name='InstanceId', description='The ID of the WAF instance.

> You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_v3prepaid_public_cn-***********'),
  pageNumber?: long(name='PageNumber', description='The page number. Default value: **1**.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Default value: **10**.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the WAF instance. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfmvtc5z52****'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request. The system specifies this parameter.', example='0.0.XX.XX'),
}

model DescribeHybridCloudResourcesResponseBody = {
  domains?: [ 
    {
      cname?: string(name='Cname', description='The CNAME that is assigned by WAF to the domain name.

> This parameter is returned only if you set **CnameEnabled** to true.', example='50fqmu1ci7g0xtiyxnrhgx6qdhmn****.yundunwaf5.com'),
      domain?: string(name='Domain', description='The domain name.', example='www.aliyundoc.com'),
      id?: long(name='Id', description='The access ID.', example='1'),
      listen?: {
        certId?: string(name='CertId', description='The ID of the certificate.', example='72***76-cn-hangzhou'),
        cipherSuite?: int32(name='CipherSuite', description='The types of cipher suites that are added. Valid values:

*   **1:** all cipher suites.
*   **2:** strong cipher suites.
*   **99:** custom cipher suites.', example='1'),
        customCiphers?: [ string ](name='CustomCiphers', description='The custom cipher suites.

> This parameter is returned only if the value of **CipherSuite** is **99**.'),
        enableTLSv3?: boolean(name='EnableTLSv3', description='Indicates whether TLS 1.3 is supported. Valid values:

*   **true**
*   **false**', example='true'),
        exclusiveIp?: boolean(name='ExclusiveIp', description='Indicates whether exclusive IP addresses are supported. Valid values:

*   **true**
*   **false**', example='true'),
        focusHttps?: boolean(name='FocusHttps', description='Indicates whether the HTTP to HTTPS redirection feature is enabled for the domain name. Valid values:

*   **true**
*   **false**', example='false'),
        http2Enabled?: boolean(name='Http2Enabled', description='Indicates whether HTTP/2 is enabled. Valid values:

*   **true**
*   **false**', example='false'),
        httpPorts?: [ long ](name='HttpPorts', description='The HTTP listener ports.'),
        httpsPorts?: [ long ](name='HttpsPorts', description='The HTTPS listener ports.'),
        ipv6Enabled?: boolean(name='Ipv6Enabled', description='Indicates whether IPv6 is supported. Valid values:

*   **true**
*   **false**', example='true'),
        protectionResource?: string(name='ProtectionResource', description='The type of the protection resource. Valid values:

*   **share:** shared cluster.
*   **gslb:** shared cluster-based intelligent load balancing.', example='share'),
        TLSVersion?: string(name='TLSVersion', description='The version of the Transport Layer Security (TLS) protocol. Valid values:

*   **tlsv1**
*   **tlsv1.1**
*   **tlsv1.2**', example='tlsv1.2'),
        xffHeaderMode?: int32(name='XffHeaderMode', description='The method that is used to obtain the actual IP address of a client. Valid values:

*   **0:** No Layer 7 proxies are deployed in front of WAF.
*   **1:** WAF reads the first value of the X-Forwarded-For (XFF) header field as the actual IP address of the client.
*   **2:** WAF reads the value of a custom header field as the actual IP address of the client.', example='0'),
        xffHeaders?: [ string ](name='XffHeaders', description='The custom header fields that are used to obtain the actual IP address of a client. The value is in the \\["header1","header2",...] format.

> This parameter is returned only if the value of **XffHeaderMode** is 2.'),
      }(name='Listen', description='The configurations of the listeners.'),
      redirect?: {
        backends?: [ string ](name='Backends', description='The back-to-origin IP addresses or domain names.'),
        cnameEnabled?: boolean(name='CnameEnabled', description='Indicates whether the public cloud disaster recovery feature is enabled. Valid values:

*   **true**
*   **false**', example='true'),
        connectTimeout?: long(name='ConnectTimeout', description='The connection timeout period. Unit: seconds. Valid values: 5 to 120.', example='120'),
        focusHttpBackend?: boolean(name='FocusHttpBackend', description='Indicates whether the HTTPS to HTTP redirection feature is enabled for back-to-origin requests. Valid values:

*   **true**
*   **false**', example='true'),
        keepalive?: boolean(name='Keepalive', description='Indicates whether the persistent connection feature is enabled. Valid values:

*   **true**
*   **false**', example='true'),
        keepaliveRequests?: long(name='KeepaliveRequests', description='The number of reused persistent connections. Valid values: 60 to 1000.

> This parameter indicates the number of reused persistent connections after you enable the persistent connection feature.', example='1000'),
        keepaliveTimeout?: long(name='KeepaliveTimeout', description='The timeout period of persistent connections that are in the Idle state. Unit: seconds. Valid values: 1 to 60. Default value: 15.

> This parameter indicates the period of time during which a reused persistent connection is allowed to remain in the Idle state before the persistent connection is released.', example='15'),
        loadbalance?: string(name='Loadbalance', description='The load balancing algorithm that WAF uses to forward requests to the origin server. Valid values:

*   **ip_hash**
*   **roundRobin**
*   **leastTime**', example='iphash'),
        readTimeout?: long(name='ReadTimeout', description='The read timeout period. Unit: seconds. Valid values: 5 to 1800.', example='200'),
        requestHeaders?: [ 
          {
            key?: string(name='Key', description='The key of the custom header field.', example='aaa'),
            value?: string(name='Value', description='The value of the custom header field.', example='bbb'),
          }
        ](name='RequestHeaders', description='The key-value pair that is used to mark the requests that pass through the WAF instance.'),
        retry?: boolean(name='Retry', description='Indicates whether WAF retries to forward requests when requests fail to be forwarded to the origin server. Valid values:

*   **true**
*   **false**', example='true'),
        routingRules?: string(name='RoutingRules', description='The forwarding rules that you configured for the domain name that you added to WAF in hybrid cloud mode. The value is a string that consists of JSON arrays. Each element in a JSON array is a JSON struct that contains the following fields:

*   **rs:** The back-to-origin IP addresses or CNAMEs. The value is of the ARRAY type.
*   **location:** The name of the protection node. The value is of the STRING type.
*   **locationId:** The ID of the protection node. The value is of the LONG type.', example='[
      {
            "rs": [
                  "1.1.XX.XX"
            ],
            "locationId": 535,
            "location": "test1111"
      }
]'),
        sniEnabled?: boolean(name='SniEnabled', description='Indicates whether the origin Server Name Indication (SNI) feature is enabled. Valid values:

*   **true**
*   **false**', example='true'),
        sniHost?: string(name='SniHost', description='The value of the custom Server Name Indication (SNI) field. If the parameter is left empty, the value of the **Host** field in the request header is automatically used as the value of the SNI field.

> This parameter is returned only if the value of **SniEnabled** is **true**.', example='www.aliyundoc.com'),
        writeTimeout?: long(name='WriteTimeout', description='The write timeout period. Unit: seconds. Valid values: 5 to 1800.', example='200'),
      }(name='Redirect', description='The configurations of the forwarding rule.'),
      resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfmvtc5z52****'),
      status?: int32(name='Status', description='The status of the domain name. Valid values:

*   **1:** The domain name is normal.
*   **2:** The domain name is being created.
*   **3:** The domain name is being modified.
*   **4:** The domain name is being released.
*   **5:** WAF no longer forwards traffic of the domain name.', example='1'),
      uid?: string(name='Uid', description='The user ID.', example='130715431409****'),
    }
  ](name='Domains', description='The domain names.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='98D2AA9A-5959-5CCD-83E3-B6606232A2BE'),
  totalCount?: long(name='TotalCount', description='The total number of entries that are returned.', example='24'),
}

model DescribeHybridCloudResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHybridCloudResourcesResponseBody(name='body'),
}

async function describeHybridCloudResourcesWithOptions(request: DescribeHybridCloudResourcesRequest, runtime: Util.RuntimeOptions): DescribeHybridCloudResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backend)) {
    query['Backend'] = request.backend;
  }
  if (!Util.isUnset(request.cnameEnabled)) {
    query['CnameEnabled'] = request.cnameEnabled;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHybridCloudResources',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHybridCloudResources(request: DescribeHybridCloudResourcesRequest): DescribeHybridCloudResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHybridCloudResourcesWithOptions(request, runtime);
}

model DescribeHybridCloudUserRequest {
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

> You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_v3prepaid_public_cn-***********'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
}

model DescribeHybridCloudUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9178CB86-285F-5679-A30A-3B3F007E4206'),
  userInfo?: {
    httpPorts?: string(name='HttpPorts', description='The HTTP ports. The value is a string. If multiple ports are returned, the value is in the **port1,port2,port3** format.', example='80,8080'),
    httpsPorts?: string(name='HttpsPorts', description='The HTTPS ports. The value is a string. If multiple ports are returned, the value is in the **port1,port2,port3** format.', example='8443,443'),
  }(name='UserInfo', description='The information about the ports that can be used by a hybrid cloud cluster.'),
}

model DescribeHybridCloudUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHybridCloudUserResponseBody(name='body'),
}

async function describeHybridCloudUserWithOptions(request: DescribeHybridCloudUserRequest, runtime: Util.RuntimeOptions): DescribeHybridCloudUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHybridCloudUser',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHybridCloudUser(request: DescribeHybridCloudUserRequest): DescribeHybridCloudUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHybridCloudUserWithOptions(request, runtime);
}

model DescribeInstanceRequest {
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
}

model DescribeInstanceResponseBody = {
  details?: {
    aclRuleMaxIpCount?: long(name='AclRuleMaxIpCount', description='The maximum number of IP addresses that can be added to the match content of a match condition. For more information, see [Match conditions](~~374354~~).', example='100'),
    antiScan?: boolean(name='AntiScan', description='Indicates whether the scan protection module is supported. Valid values:

*   **true:** The scan protection module is supported.
*   **false:** The scan protection module is not supported.', example='true'),
    antiScanTemplateMaxCount?: long(name='AntiScanTemplateMaxCount', description='The maximum number of scan protection rule templates that can be configured.', example='20'),
    backendMaxCount?: long(name='BackendMaxCount', description='The maximum number of back-to-origin IP addresses that can be configured.', example='20'),
    baseWafGroup?: boolean(name='BaseWafGroup', description='Indicates whether the basic protection rule module is supported. Valid values:

*   **true:** The basic protection rule module is supported.
*   **false:** The basic protection rule module is not supported.', example='true'),
    baseWafGroupRuleInTemplateMaxCount?: long(name='BaseWafGroupRuleInTemplateMaxCount', description='The maximum number of protection rules that can be included in a basic protection rule template.', example='100'),
    baseWafGroupRuleTemplateMaxCount?: long(name='BaseWafGroupRuleTemplateMaxCount', description='The maximum number of basic protection rule templates that can be configured.', example='20'),
    bot?: boolean(name='Bot', description='Indicates whether the bot management module is supported. Valid values:

*   **true:** The bot management module is supported.
*   **false:** The bot management module is not supported.', example='true'),
    botApp?: string(name='BotApp', description='Indicates whether bot management for app protection is supported. Valid values:

*   **true:** Bot management for app protection is supported.
*   **false:** Bot management for app protection is not supported.', example='true'),
    botTemplateMaxCount?: long(name='BotTemplateMaxCount', description='The maximum number of bot management rule templates that can be configured.', example='50'),
    botWeb?: string(name='BotWeb', description='Indicates whether bot management for website protection is supported. Valid values:

*   **true:** Bot management for website protection is supported.
*   **false:** Bot management for website protection is not supported.', example='true'),
    cnameResourceMaxCount?: long(name='CnameResourceMaxCount', description='The maximum number of CNAMEs that can be added.', example='1000'),
    customResponse?: boolean(name='CustomResponse', description='Indicates whether the custom response module is supported. Valid values:

*   **true:** The custom response module is supported.
*   **false:** The custom response module is not supported.', example='true'),
    customResponseRuleInTemplateMaxCount?: long(name='CustomResponseRuleInTemplateMaxCount', description='The maximum number of rules that can be included in a custom response rule template.', example='100'),
    customResponseTemplateMaxCount?: long(name='CustomResponseTemplateMaxCount', description='The maximum number of custom response rule templates that can be configured.', example='20'),
    customRule?: boolean(name='CustomRule', description='Indicates whether the custom rule module is supported. Valid values:

*   **true:** The custom rule module is supported.
*   **false:** The custom rule module is not supported.', example='true'),
    customRuleAction?: string(name='CustomRuleAction', description='The action that can be included in a custom rule.', example='block'),
    customRuleCondition?: string(name='CustomRuleCondition', description='The match conditions that can be used in a custom rule. For more information, see **Match condition parameters** in the "**Parameters of custom rules (custom_acl)**" section in the [CreateDefenseRule](~~CreateDefenseRule~~) topic.', example='URL'),
    customRuleInTemplateMaxCount?: long(name='CustomRuleInTemplateMaxCount', description='The maximum number of rules that can be included in a custom rule template.', example='100'),
    customRuleRatelimitor?: string(name='CustomRuleRatelimitor', description='The statistical object for rate limiting in a custom rule.', example='header'),
    customRuleTemplateMaxCount?: long(name='CustomRuleTemplateMaxCount', description='The maximum number of custom rule templates that can be configured.', example='20'),
    defenseGroupMaxCount?: long(name='DefenseGroupMaxCount', description='The maximum number of protected object groups that can be configured.', example='100'),
    defenseObjectInGroupMaxCount?: long(name='DefenseObjectInGroupMaxCount', description='The maximum number of protected objects that can be included in a protected object group.', example='100'),
    defenseObjectInTemplateMaxCount?: long(name='DefenseObjectInTemplateMaxCount', description='The maximum number of protected objects to which a protection rule template can be applied.', example='100'),
    defenseObjectMaxCount?: long(name='DefenseObjectMaxCount', description='The maximum number of protected objects that can be configured.', example='20,000'),
    dlp?: boolean(name='Dlp', description='Indicates whether the data leakage prevention module is supported. Valid values:

*   **true:** The data leakage prevention module is supported.
*   **false:** The data leakage prevention module is not supported.', example='true'),
    dlpRuleInTemplateMaxCount?: long(name='DlpRuleInTemplateMaxCount', description='The maximum number of rules that can be included in a data leakage prevention rule template.', example='50'),
    dlpTemplateMaxCount?: long(name='DlpTemplateMaxCount', description='The maximum number of data leakage prevention rule templates that can be configured.', example='50'),
    exclusiveIp?: boolean(name='ExclusiveIp', description='Indicates whether exclusive IP addresses are supported. Valid values:

*   **true:** Exclusive IP addresses are supported.
*   **false:** Exclusive IP addresses are not supported.', example='true'),
    gslb?: boolean(name='Gslb', description='Indicates whether global server load balancing (GSLB) is supported. Valid values:

*   **true:** GSLB is supported.
*   **false:** GSLB is not supported.', example='true'),
    httpPorts?: string(name='HttpPorts', description='The HTTP port range that is supported. For more information, see [View supported ports](~~385578~~).', example='80'),
    httpsPorts?: string(name='HttpsPorts', description='The HTTPS port range that is supported. For more information, see [View supported ports](~~385578~~).', example='443'),
    ipBlacklist?: boolean(name='IpBlacklist', description='Indicates whether the IP address blacklist module is supported. Valid values:

*   **true:** The IP address blacklist module is supported.
*   **false:** The IP address blacklist module is not supported.', example='true'),
    ipBlacklistIpInRuleMaxCount?: long(name='IpBlacklistIpInRuleMaxCount', description='The maximum number of IP addresses that can be added to an IP address blacklist rule.', example='200'),
    ipBlacklistRuleInTemplateMaxCount?: long(name='IpBlacklistRuleInTemplateMaxCount', description='The maximum number of rules that can be included in an IP address blacklist rule template.', example='100'),
    ipBlacklistTemplateMaxCount?: long(name='IpBlacklistTemplateMaxCount', description='The maximum number of IP address blacklist rule templates that can be configured.', example='20'),
    ipv6?: boolean(name='Ipv6', description='Indicates whether IPv6 is supported. Valid values:

*   **true:** IPv6 is supported.
*   **false:** IPv6 is not supported.', example='true'),
    logService?: boolean(name='LogService', description='Indicates whether the log collection feature is supported. Valid values:

*   **true:** The log collection feature is supported.
*   **false:** The log collection feature is not supported.', example='true'),
    majorProtection?: boolean(name='MajorProtection', description='Indicates whether major event protection is supported. Valid values:

*   **true:** Major event protection is supported.
*   **false:** Major event protection is not supported.', example='true'),
    majorProtectionTemplateMaxCount?: long(name='MajorProtectionTemplateMaxCount', description='The maximum number of major event protection rule templates that can be configured.', example='20'),
    tamperproof?: boolean(name='Tamperproof', description='Indicates whether the website tamper-proofing module is supported. Valid values:

*   **true:** The website tamper-proofing module is supported.
*   **false:** The website tamper-proofing module is not supported.', example='true'),
    tamperproofRuleInTemplateMaxCount?: long(name='TamperproofRuleInTemplateMaxCount', description='The maximum number of rules that can be included in a website tamper-proofing rule template.', example='50'),
    tamperproofTemplateMaxCount?: long(name='TamperproofTemplateMaxCount', description='The maximum number of website tamper-proofing rule templates that can be configured.', example='50'),
    vastIpBlacklistInFileMaxCount?: long(name='VastIpBlacklistInFileMaxCount', description='The maximum number of IP addresses or CIDR blocks that can be added to an IP address blacklist in a batch.', example='2,000'),
    vastIpBlacklistInOperationMaxCount?: long(name='VastIpBlacklistInOperationMaxCount', description='The maximum number of IP addresses or CIDR blocks that can be added to an IP address blacklist on a page.', example='500'),
    vastIpBlacklistMaxCount?: long(name='VastIpBlacklistMaxCount', description='The maximum number of IP addresses or CIDR blocks that can be added to an IP address blacklist per Alibaba Cloud account.', example='50,000'),
    whitelist?: boolean(name='Whitelist', description='Indicates whether the whitelist module is supported. Valid values:

*   **true:** The whitelist module is supported.
*   **false:** The whitelist module is not supported.', example='true'),
    whitelistLogical?: string(name='WhitelistLogical', description='The logical operators that can be used in a whitelist rule. For more information, see **Match condition parameters** in the "**Parameters of whitelist rules (whitelist)**" section in the [CreateDefenseRule](~~CreateDefenseRule~~) topic.', example='contain'),
    whitelistRuleCondition?: string(name='WhitelistRuleCondition', description='The match fields that can be used in a whitelist rule. For more information, see **Match condition parameters** in the "**Parameters of whitelist rules (whitelist)**" section in the [CreateDefenseRule](~~CreateDefenseRule~~) topic.', example='URL'),
    whitelistRuleInTemplateMaxCount?: long(name='WhitelistRuleInTemplateMaxCount', description='The maximum number of rules that can be included in a whitelist rule template.', example='100'),
    whitelistTemplateMaxCount?: long(name='WhitelistTemplateMaxCount', description='The maximum number of whitelist rule templates that can be configured.', example='20'),
  }(name='Details', description='The details of the WAF instance.'),
  edition?: string(name='Edition', description='The edition of the WAF instance.', example='default_version'),
  endTime?: long(name='EndTime', description='The expiration time of the WAF instance.', example='4809859200000'),
  inDebt?: string(name='InDebt', description='Indicates whether the WAF instance has overdue payments. Valid values:

*   **0**: The WAF instance does not have overdue payments.
*   **1**: The WAF instance has overdue payments.', example='1'),
  instanceId?: string(name='InstanceId', description='The ID of the WAF instance.', example='waf-cn-xxx'),
  payType?: string(name='PayType', description='The billing method of the WAF instance. Valid values:

*   **POSTPAY:** The WAF instance uses the pay-as-you-go billing method.
*   **PREPAY:** The WAF instance uses the subscription billing method.', example='POSTPAY'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='66A98669-CC6E-4F3E-80A6-3014697B11AE'),
  startTime?: long(name='StartTime', description='The purchase time of the WAF instance. The time is in the UNIX timestamp format. The time is displayed in UTC. Unit: milliseconds.', example='1668496310000'),
  status?: int32(name='Status', description='The status of the WAF instance. Valid values:

*   **1:** The WAF instance is in a normal state.
*   **2:** The WAF instance has expired.
*   **3:** The WAF instance has been released.', example='1'),
}

model DescribeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceResponseBody(name='body'),
}

async function describeInstanceWithOptions(request: DescribeInstanceRequest, runtime: Util.RuntimeOptions): DescribeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstance',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstance(request: DescribeInstanceRequest): DescribeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceWithOptions(request, runtime);
}

model DescribeMajorProtectionBlackIpsRequest {
  instanceId?: string(name='InstanceId', description='The ID of the WAF instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  ipLike?: string(name='IpLike', description='The IP address that you want to query. You can specify this parameter to query an IP address in the IP address blacklist for major event protection by using fuzzy matching.', example='192.0.XX.XX'),
  orderBy?: string(name='OrderBy', description='The method that you want to use to sort the IP addresses **in descending order**. Valid values:

*   **gmtModified:** sorts the IP addresses by most recent modification time.
*   **ip:** sorts the IP addresses by IP address.
*   **templateId:** sorts the IP addresses by template ID.
*   **id:** sorts the IP addresses by primary key.', example='gmtModified'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
  ruleId?: long(name='RuleId', description='The ID of the IP address blacklist rule for major event protection.', example='20013199'),
  templateId?: long(name='TemplateId', description='The ID of the rule template for major event protection.', example='5673'),
}

model DescribeMajorProtectionBlackIpsResponseBody = {
  ipList?: [ 
    {
      description?: string(name='Description', description='The description of the IP address in the blacklist.', example='test0003asdffas'),
      expiredTime?: long(name='ExpiredTime', description='The time after which the IP address blacklist becomes invalid. Unit: seconds.

>  If the value of this parameter is **0**, the blacklist is permanently valid.', example='1662603328'),
      gmtModified?: long(name='GmtModified', description='The most recent time when the IP address blacklist was modified.', example='1665456202000'),
      ip?: string(name='Ip', description='The IP address in the IP address blacklist.', example='192.0.XX.XX'),
      ruleId?: long(name='RuleId', description='The ID of the IP address blacklist rule for major event protection.', example='8508970'),
      templateId?: long(name='TemplateId', description='The ID of the rule template for major event protection.', example='9684'),
    }
  ](name='IpList', description='An array of IP addresses in the IP address blacklist.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='41631674-EEB0-5B02-BEB4-40A758E9B841'),
  totalCount?: long(name='TotalCount', description='The total number of IP addresses in the blacklist.', example='63'),
}

model DescribeMajorProtectionBlackIpsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeMajorProtectionBlackIpsResponseBody(name='body'),
}

async function describeMajorProtectionBlackIpsWithOptions(request: DescribeMajorProtectionBlackIpsRequest, runtime: Util.RuntimeOptions): DescribeMajorProtectionBlackIpsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ipLike)) {
    query['IpLike'] = request.ipLike;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMajorProtectionBlackIps',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeMajorProtectionBlackIps(request: DescribeMajorProtectionBlackIpsRequest): DescribeMajorProtectionBlackIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMajorProtectionBlackIpsWithOptions(request, runtime);
}

model DescribePeakTrendRequest {
  endTimestamp?: string(name='EndTimestamp', description='The end of the time range to query. Unit: seconds. If you do not specify this parameter, the current time is used.', example='1665386340'),
  instanceId?: string(name='InstanceId', description='The ID of the WAF instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  interval?: string(name='Interval', description='The time interval. Unit: seconds. The value must be an integral multiple of 60.', example='300'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resource?: string(name='Resource', description='The protected object.', example='www.aliyundoc.com'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the Alibaba Cloud resource group.', example='rg-acfm***q'),
  startTimestamp?: string(name='StartTimestamp', description='The beginning of the time range to query. Unit: seconds.', example='1665331200'),
}

model DescribePeakTrendResponseBody = {
  flowChart?: [ 
    {
      aclSum?: long(name='AclSum', description='The number of requests that are monitored or blocked by the custom rule (access control) module.', example='0'),
      antiScanSum?: long(name='AntiScanSum', description='The number of requests that are monitored or blocked by the scan protection module.', example='0'),
      ccSum?: long(name='CcSum', description='The number of requests that are monitored or blocked by the HTTP flood protection module.', example='0'),
      count?: long(name='Count', description='The total number of requests.', example='2622'),
      index?: long(name='Index', description='The serial number of the time interval. The serial numbers are arranged in chronological order.', example='10'),
      wafSum?: long(name='WafSum', description='The number of requests that are monitored or blocked by the regular expression protection engine.', example='0'),
    }
  ](name='FlowChart', description='An array of the QPS statistics of the WAF instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9D11AC3A-A10C-56E7-A342-E87EC892BAE2'),
}

model DescribePeakTrendResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePeakTrendResponseBody(name='body'),
}

async function describePeakTrendWithOptions(request: DescribePeakTrendRequest, runtime: Util.RuntimeOptions): DescribePeakTrendResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePeakTrend',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePeakTrend(request: DescribePeakTrendRequest): DescribePeakTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePeakTrendWithOptions(request, runtime);
}

model DescribeResourceLogStatusRequest {
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf-cn-zz11zcl****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
  resources?: string(name='Resources', description='The protected object that you want to query. You can specify multiple protected objects. Separate the protected objects with commas (,).', example='alb-wewbb23dfsetetcic1242-0****,alb-wewbb23dfsetetcic1242-1****'),
}

model DescribeResourceLogStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0DABF8AB-2321-5F8D-A8D7-922D757FBFFE'),
  result?: [ 
    {
      resource?: string(name='Resource', description='The protected object.', example='alb-wewbb23dfsetetcic****'),
      status?: boolean(name='Status', description='Indicates whether the log collection feature is enabled for the protected object. Valid values:

*   **true:** The log collection feature is enabled.
*   **false:** The log collection feature is disabled.', example='true'),
    }
  ](name='Result', description='The returned result.'),
}

model DescribeResourceLogStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResourceLogStatusResponseBody(name='body'),
}

async function describeResourceLogStatusWithOptions(request: DescribeResourceLogStatusRequest, runtime: Util.RuntimeOptions): DescribeResourceLogStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.resources)) {
    query['Resources'] = request.resources;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResourceLogStatus',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeResourceLogStatus(request: DescribeResourceLogStatusRequest): DescribeResourceLogStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceLogStatusWithOptions(request, runtime);
}

model DescribeResourcePortRequest {
  instanceId?: string(name='InstanceId', description='The ID of the WAF instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceInstanceId?: string(name='ResourceInstanceId', description='The ID of the cloud service instance.', example='8vb40vj87znu3ai7l5lv4-80****'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the Alibaba Cloud resource group.', example='rg-acfm***q'),
}

model DescribeResourcePortResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='66A98669-CC6E-4F3E-80A6-3014697B11AE'),
  resourcePorts?: [ string ](name='ResourcePorts', description='An array of HTTP and HTTPS listener ports that are added to the WAF instance.'),
}

model DescribeResourcePortResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResourcePortResponseBody(name='body'),
}

async function describeResourcePortWithOptions(request: DescribeResourcePortRequest, runtime: Util.RuntimeOptions): DescribeResourcePortResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceInstanceId)) {
    query['ResourceInstanceId'] = request.resourceInstanceId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResourcePort',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeResourcePort(request: DescribeResourcePortRequest): DescribeResourcePortResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourcePortWithOptions(request, runtime);
}

model DescribeResponseCodeTrendGraphRequest {
  endTimestamp?: string(name='EndTimestamp', description='The end of the time range to query. Unit: seconds. If you do not specify this parameter, the current time is used.', example='1665386280'),
  instanceId?: string(name='InstanceId', description='The ID of the WAF instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  interval?: string(name='Interval', description='The time interval. Unit: seconds. The value must be an integral multiple of 60.', example='300'),
  regionId?: string(name='RegionId', description='The ID of the region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resource?: string(name='Resource', description='The protected object.', example='www.aliyundoc.com'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
  startTimestamp?: string(name='StartTimestamp', description='The beginning of the time range to query. Unit: seconds.', example='1665331200'),
  type?: string(name='Type', description='The type of the error codes. Valid values:

*   **waf:** error codes that are returned to clients from WAF.
*   **upstream:** error codes that are returned to WAF from the origin server.', example='waf'),
}

model DescribeResponseCodeTrendGraphResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='7D46493E-84DD-58CE-80A7-8643F2B09ECC'),
  responseCodes?: [ 
    {
      code302Pv?: long(name='302Pv', description='The number of 302 error codes that are returned.', example='0'),
      code405Pv?: long(name='405Pv', description='The number of 405 error codes that are returned.', example='121645464'),
      code499Pv?: long(name='499Pv', description='The number of 499 error codes that are returned.', example='0'),
      code5xxPv?: long(name='5xxPv', description='The number of 5xx error codes that are returned.', example='2932'),
      index?: long(name='Index', description='The serial number of the time interval. The serial numbers are arranged in chronological order.', example='10'),
    }
  ](name='ResponseCodes', description='The array of the statistics of the error codes.'),
}

model DescribeResponseCodeTrendGraphResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResponseCodeTrendGraphResponseBody(name='body'),
}

async function describeResponseCodeTrendGraphWithOptions(request: DescribeResponseCodeTrendGraphRequest, runtime: Util.RuntimeOptions): DescribeResponseCodeTrendGraphResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResponseCodeTrendGraph',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeResponseCodeTrendGraph(request: DescribeResponseCodeTrendGraphRequest): DescribeResponseCodeTrendGraphResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResponseCodeTrendGraphWithOptions(request, runtime);
}

model DescribeRuleGroupsRequest {
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
  searchType?: string(name='SearchType', description='The type of the query condition. Valid values:

*   **id:** queries regular expression rule groups by ID.
*   **name:** queries regular expression rule groups by name.', example='name'),
  searchValue?: string(name='SearchValue', description='The query condition.', example='test'),
}

model DescribeRuleGroupsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='02E9A4B8-90FB-5F41-A049-C82277EB82FB'),
  ruleGroups?: [ 
    {
      gmtModified?: long(name='GmtModified', description='The most recent time when the rule group was modified.', example='1664336364000'),
      isSubscribe?: int32(name='IsSubscribe', description='Indicates whether the automatic update feature is enabled for the rule group.

*   1: The automatic update feature is enabled for the rule group.
*   2: The automatic update feature is disabled for the rule group.', example='1'),
      parentRuleGroupId?: long(name='ParentRuleGroupId', description='The ID of the rule group.

*   0: The rule group is created from scratch.
*   1011: The rule group is a strict rule group.
*   1012: The rule group is a medium rule group.
*   1013: The rue group is a loose rule group.', example='1012'),
      ruleGroupId?: long(name='RuleGroupId', description='The ID of the regular expression rule group.', example='115361'),
      ruleGroupName?: string(name='RuleGroupName', description='The name of the rule group.', example='ssssss'),
      ruleTotalCount?: int32(name='RuleTotalCount', description='The number of built-in rules in the rule group.', example='4444'),
    }
  ](name='RuleGroups', description='An array of regular expression rule groups.'),
  totalCount?: long(name='TotalCount', description='The total number of entries that are returned.', example='24'),
}

model DescribeRuleGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRuleGroupsResponseBody(name='body'),
}

async function describeRuleGroupsWithOptions(request: DescribeRuleGroupsRequest, runtime: Util.RuntimeOptions): DescribeRuleGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.searchType)) {
    query['SearchType'] = request.searchType;
  }
  if (!Util.isUnset(request.searchValue)) {
    query['SearchValue'] = request.searchValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRuleGroups',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRuleGroups(request: DescribeRuleGroupsRequest): DescribeRuleGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRuleGroupsWithOptions(request, runtime);
}

model DescribeRuleHitsTopClientIpRequest {
  endTimestamp?: string(name='EndTimestamp', description='The end of the time range to query. Unit: seconds. If you do not specify this parameter, the current time is used.', example='1665386280'),
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resource?: string(name='Resource', description='The protected object.', example='www.aliyundoc.com'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
  ruleType?: string(name='RuleType', description='The type of rules that are triggered by the protected object. By default, this parameter is not specified and all types of rules are queried.

*   **blacklist:** IP address blacklist rules.
*   **custom:** custom rules.
*   **antiscan:** scan protection rules.
*   **cc_system:** HTTP flood protection rules.
*   **region_block:** region blacklist rules.', example='blacklist'),
  startTimestamp?: string(name='StartTimestamp', description='The beginning of the time range to query. Unit: seconds.', example='1665331200'),
}

model DescribeRuleHitsTopClientIpResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9F0F9AD6-62E2-50BB-A3E5-30FFB9410262'),
  ruleHitsTopClientIp?: [ 
    {
      clientIp?: string(name='ClientIp', description='The IP address of the service client.', example='3.3.XX.XX'),
      count?: long(name='Count', description='The number of attacks that are initiated from the IP address.', example='531'),
    }
  ](name='RuleHitsTopClientIp', description='The array of the top 10 IP addresses from which attacks are initiated.'),
}

model DescribeRuleHitsTopClientIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRuleHitsTopClientIpResponseBody(name='body'),
}

async function describeRuleHitsTopClientIpWithOptions(request: DescribeRuleHitsTopClientIpRequest, runtime: Util.RuntimeOptions): DescribeRuleHitsTopClientIpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.ruleType)) {
    query['RuleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRuleHitsTopClientIp',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRuleHitsTopClientIp(request: DescribeRuleHitsTopClientIpRequest): DescribeRuleHitsTopClientIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRuleHitsTopClientIpWithOptions(request, runtime);
}

model DescribeRuleHitsTopResourceRequest {
  endTimestamp?: string(name='EndTimestamp', description='The end of the time range to query. Unit: seconds. If you do not specify this parameter, the current time is used.', example='1665386340'),
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
  ruleType?: string(name='RuleType', description='The type of rules that are triggered by the protected object. By default, this parameter is not specified and all types of rules are queried.

*   **blacklist:** IP address blacklist rules.
*   **custom:** custom rules.
*   **antiscan:** scan protection rules.
*   **cc_system:** HTTP flood protection rules.
*   **region_block:** region blacklist rules.', example='blacklist'),
  startTimestamp?: string(name='StartTimestamp', description='The beginning of the time range to query. Unit: seconds.', example='1665331200'),
}

model DescribeRuleHitsTopResourceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='ADA11BC7-AA95-5C31-9095-5802C02ED1DC'),
  ruleHitsTopResource?: [ 
    {
      count?: long(name='Count', description='The number of requests that match protection rules.', example='14219'),
      resource?: string(name='Resource', description='The protected object.', example='www.aliyundoc.com'),
    }
  ](name='RuleHitsTopResource', description='The array of the top 10 protected objects that trigger protection rules.'),
}

model DescribeRuleHitsTopResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRuleHitsTopResourceResponseBody(name='body'),
}

async function describeRuleHitsTopResourceWithOptions(request: DescribeRuleHitsTopResourceRequest, runtime: Util.RuntimeOptions): DescribeRuleHitsTopResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.ruleType)) {
    query['RuleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRuleHitsTopResource',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRuleHitsTopResource(request: DescribeRuleHitsTopResourceRequest): DescribeRuleHitsTopResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRuleHitsTopResourceWithOptions(request, runtime);
}

model DescribeRuleHitsTopRuleIdRequest {
  endTimestamp?: string(name='EndTimestamp', description='The end of the time range to query. Unit: seconds. If you do not specify this parameter, the current time is used.', example='1665386280'),
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to query the ID of the WAF instance.', example='waf_cdnsdf3****'),
  isGroupResource?: string(name='IsGroupResource'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resource?: string(name='Resource', description='The protected object.', example='www.aliyundoc.com'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the Alibaba Cloud resource group.', example='rg-acfm***q'),
  ruleType?: string(name='RuleType', description='The type of rules that are triggered by the protected object. By default, this parameter is not specified and all types of rules are queried.

*   **blacklist:** IP address blacklist rules.
*   **custom:** custom rules.
*   **antiscan:** scan protection rules.
*   **cc_system:** HTTP flood protection rules.
*   **region_block:** region blacklist rules.', example='blacklist'),
  startTimestamp?: string(name='StartTimestamp', description='The beginning of the time range to query. Unit: seconds.', example='1665331200'),
}

model DescribeRuleHitsTopRuleIdResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F6334274-8870-5D2F-A1AD-D6EF885AC1ED'),
  ruleHitsTopRuleId?: [ 
    {
      count?: long(name='Count', description='The number of requests that match the rule.', example='181174784'),
      resource?: string(name='Resource', description='The protected object.', example='www.aliyundoc.com'),
      ruleId?: string(name='RuleId', description='The ID of the rule.', example='5465465'),
    }
  ](name='RuleHitsTopRuleId', description='The array of the IDs of the top 10 rules that are matched by requests.'),
}

model DescribeRuleHitsTopRuleIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRuleHitsTopRuleIdResponseBody(name='body'),
}

async function describeRuleHitsTopRuleIdWithOptions(request: DescribeRuleHitsTopRuleIdRequest, runtime: Util.RuntimeOptions): DescribeRuleHitsTopRuleIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.isGroupResource)) {
    query['IsGroupResource'] = request.isGroupResource;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.ruleType)) {
    query['RuleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRuleHitsTopRuleId',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRuleHitsTopRuleId(request: DescribeRuleHitsTopRuleIdRequest): DescribeRuleHitsTopRuleIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRuleHitsTopRuleIdWithOptions(request, runtime);
}

model DescribeRuleHitsTopTuleTypeRequest {
  endTimestamp?: string(name='EndTimestamp', description='The end point of the time period for which to query. Unit: seconds. If you do not specify this parameter, the current time is used.', example='1665386280'),
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to query the ID of the WAF instance.', example='waf_cdnsdf3****'),
  regionId?: string(name='RegionId', description='The ID of the region where the WAF instance resides. Valid values:

*   **cn-hangzhou**: the Chinese mainland.
*   **ap-southeast-1**: outside the Chinese mainland.', example='cn-hangzhou'),
  resource?: string(name='Resource', description='The protected object.', example='www.aliyundoc.com'),
  startTimestamp?: string(name='StartTimestamp', description='The start point of the time period for which to query. Unit: seconds.', example='1665331200'),
}

model DescribeRuleHitsTopTuleTypeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='45E377CE-0B04-578E-B653-EEA63CFE8DE0'),
  ruleHitsTopTuleType?: [ 
    {
      count?: long(name='Count', description='The number of requests that match protection rules.', example='698455'),
      ruleType?: string(name='RuleType', description='The type of rule that is matched. By default, this parameter is not returned. This indicates that all types of rules that are matched are returned.

*   **waf:** basic protection rules.
*   **blacklist:** IP address blacklist rules.
*   **custom:** custom rules.
*   **antiscan:** scan protection rules.
*   **cc_system:** HTTP flood protection rules.
*   **region_block:** region blacklist rules.
*   **scene:** bot management rules.
*   **dlp:** data leakage prevention rules.', example='major_protection'),
    }
  ](name='RuleHitsTopTuleType', description='The top 10 protection modules that are matched.'),
}

model DescribeRuleHitsTopTuleTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRuleHitsTopTuleTypeResponseBody(name='body'),
}

async function describeRuleHitsTopTuleTypeWithOptions(request: DescribeRuleHitsTopTuleTypeRequest, runtime: Util.RuntimeOptions): DescribeRuleHitsTopTuleTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRuleHitsTopTuleType',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRuleHitsTopTuleType(request: DescribeRuleHitsTopTuleTypeRequest): DescribeRuleHitsTopTuleTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRuleHitsTopTuleTypeWithOptions(request, runtime);
}

model DescribeRuleHitsTopUaRequest {
  endTimestamp?: string(name='EndTimestamp', description='The end of the time range to query. Unit: seconds. If you do not specify this parameter, the current time is used.', example='1665386280'),
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resource?: string(name='Resource', description='The protected object.', example='www.aliyundoc.com'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the Alibaba Cloud resource group.', example='rg-acfm***q'),
  startTimestamp?: string(name='StartTimestamp', description='The beginning of the time range to query. Unit: seconds.', example='1665331200'),
}

model DescribeRuleHitsTopUaResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='8E5C7ED7-503A-5986-A005-36F2511EB89F'),
  ruleHitsTopUa?: [ 
    {
      count?: long(name='Count', description='The number of attacks that are initiated from the IP address.', example='531'),
      ua?: string(name='Ua', description='The user agent.', example='android'),
    }
  ](name='RuleHitsTopUa', description='The array of the top 10 user agents that are used to initiate attacks.'),
}

model DescribeRuleHitsTopUaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRuleHitsTopUaResponseBody(name='body'),
}

async function describeRuleHitsTopUaWithOptions(request: DescribeRuleHitsTopUaRequest, runtime: Util.RuntimeOptions): DescribeRuleHitsTopUaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRuleHitsTopUa',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRuleHitsTopUa(request: DescribeRuleHitsTopUaRequest): DescribeRuleHitsTopUaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRuleHitsTopUaWithOptions(request, runtime);
}

model DescribeRuleHitsTopUrlRequest {
  endTimestamp?: string(name='EndTimestamp', description='The end of the time range to query. Unit: seconds. If you do not specify this parameter, the current time is used.', example='1665386280'),
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resource?: string(name='Resource', description='The protected object.', example='www.aliyundoc.com'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
  ruleType?: string(name='RuleType', description='The type of rules that are triggered by the protected object. By default, this parameter is not specified and all types of rules are queried.

*   **blacklist:** IP address blacklist rules.
*   **custom:** custom rules.
*   **antiscan:** scan protection rules.
*   **cc_system:** HTTP flood protection rules.
*   **region_block:** region blacklist rules.', example='blacklist'),
  startTimestamp?: string(name='StartTimestamp', description='The beginning of the time range to query. Unit: seconds.', example='1665331200'),
}

model DescribeRuleHitsTopUrlResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='3D8AF43B-08EB-51CE-B33A-93AAEF3F9B0C'),
  ruleHitsTopUrl?: [ 
    {
      count?: long(name='Count', description='The number of requests from the URL that match protection rules.', example='21862'),
      url?: string(name='Url', description='The request URL.', example='www.aliyundoc.com/path3'),
    }
  ](name='RuleHitsTopUrl', description='The array of the top 10 URLs that trigger protection rules.'),
}

model DescribeRuleHitsTopUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRuleHitsTopUrlResponseBody(name='body'),
}

async function describeRuleHitsTopUrlWithOptions(request: DescribeRuleHitsTopUrlRequest, runtime: Util.RuntimeOptions): DescribeRuleHitsTopUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.ruleType)) {
    query['RuleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRuleHitsTopUrl',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRuleHitsTopUrl(request: DescribeRuleHitsTopUrlRequest): DescribeRuleHitsTopUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRuleHitsTopUrlWithOptions(request, runtime);
}

model DescribeTemplateResourcesRequest {
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the Alibaba Cloud resource group.', example='rg-acfm***q'),
  resourceType?: string(name='ResourceType', description='The type of the protected resource. Valid values:

*   **single:** protected object.
*   **group:** protected object group.', example='single'),
  templateId?: long(name='TemplateId', description='The ID of the protection rule template.', example='1020'),
}

model DescribeTemplateResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C7BC9373-3960-53B0-8968-2B13454AE18F'),
  resources?: [ string ](name='Resources', description='An array of protected objects or protected object groups that are associated to the protection rule template.'),
}

model DescribeTemplateResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTemplateResourcesResponseBody(name='body'),
}

async function describeTemplateResourcesWithOptions(request: DescribeTemplateResourcesRequest, runtime: Util.RuntimeOptions): DescribeTemplateResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTemplateResources',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTemplateResources(request: DescribeTemplateResourcesRequest): DescribeTemplateResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTemplateResourcesWithOptions(request, runtime);
}

model DescribeVisitTopIpRequest {
  endTimestamp?: string(name='EndTimestamp', description='The end of the time range to query. Unit: seconds. If you do not specify this parameter, the current time is used.', example='1665386280'),
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resource?: string(name='Resource', description='The protected object.', example='www.aliyundoc.com'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the Alibaba Cloud resource group.', example='rg-acfm***q'),
  startTimestamp?: string(name='StartTimestamp', description='The beginning of the time range to query. Unit: seconds.', example='1665331200'),
}

model DescribeVisitTopIpResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5D2B8DAE-A761-58CB-A68D-74989E4831DA'),
  topIp?: [ 
    {
      area?: string(name='Area', description='The ordinal number of the area to which the IP address belongs.', example='310000'),
      count?: long(name='Count', description='The total number of requests that are sent from the IP address.', example='2622'),
      ip?: string(name='Ip', description='The IP address.', example='1.1.XX.XX'),
      isp?: string(name='Isp', description='The ISP.', example='AAA'),
    }
  ](name='TopIp', description='The array of the top 10 IP addresses from which requests are sent.'),
}

model DescribeVisitTopIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVisitTopIpResponseBody(name='body'),
}

async function describeVisitTopIpWithOptions(request: DescribeVisitTopIpRequest, runtime: Util.RuntimeOptions): DescribeVisitTopIpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVisitTopIp',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVisitTopIp(request: DescribeVisitTopIpRequest): DescribeVisitTopIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVisitTopIpWithOptions(request, runtime);
}

model DescribeVisitUasRequest {
  endTimestamp?: string(name='EndTimestamp', description='The end of the time range to query. Unit: seconds. If you do not specify this parameter, the current time is used.', example='1665386280'),
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resource?: string(name='Resource', description='The protected object.', example='www.aliyundoc.com'),
  startTimestamp?: string(name='StartTimestamp', description='The beginning of the time range to query. Unit: seconds.', example='1665331200'),
}

model DescribeVisitUasResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='2847CE98-AFAE-5A64-B80E-60461717F9DE'),
  uas?: [ 
    {
      count?: long(name='Count', description='The number of requests that use the user agent.', example='698455'),
      ua?: string(name='Ua', description='The user agent.', example='chrome'),
    }
  ](name='Uas', description='The array of the top 10 user agents that are used to initiate requests.'),
}

model DescribeVisitUasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVisitUasResponseBody(name='body'),
}

async function describeVisitUasWithOptions(request: DescribeVisitUasRequest, runtime: Util.RuntimeOptions): DescribeVisitUasResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVisitUas',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVisitUas(request: DescribeVisitUasRequest): DescribeVisitUasResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVisitUasWithOptions(request, runtime);
}

model DescribeWafSourceIpSegmentRequest {
  instanceId?: string(name='InstanceId', description='The ID of the WAF instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_v2_public_cn-*****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the Alibaba Cloud resource group.', example='rg-acfm***q'),
}

model DescribeWafSourceIpSegmentResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9087ADDC-9047-4D02-82A7-33021B58083C'),
  wafSourceIp?: {
    IPv4?: [ string ](name='IPv4', description='An array of back-to-origin IPv4 CIDR blocks.'),
    IPv6?: [ string ](name='IPv6', description='An array of back-to-origin IPv6 CIDR blocks.'),
  }(name='WafSourceIp', description='The back-to-origin CIDR blocks that are used by the protection cluster.'),
}

model DescribeWafSourceIpSegmentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWafSourceIpSegmentResponseBody(name='body'),
}

async function describeWafSourceIpSegmentWithOptions(request: DescribeWafSourceIpSegmentRequest, runtime: Util.RuntimeOptions): DescribeWafSourceIpSegmentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWafSourceIpSegment',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWafSourceIpSegment(request: DescribeWafSourceIpSegmentRequest): DescribeWafSourceIpSegmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWafSourceIpSegmentWithOptions(request, runtime);
}

model ModifyDefenseResourceGroupRequest {
  addList?: string(name='AddList', description='The protected objects that you want to add to the protected object group. Separate the protected objects with commas (,). If you leave this parameter empty, no protected objects are added to the protected object group.', example='test1.aliyundoc.com,test2.aliyundoc.com'),
  deleteList?: string(name='DeleteList', description='The protected objects that you want to remove from the protected object group. Separate the protected objects with commas (,). If you leave this parameter empty, no protected objects are removed from the protected object group.', example='test14.waf.com,test24.waf.com'),
  description?: string(name='Description', description='The description of the protected object group.', example='test'),
  groupName?: string(name='GroupName', description='The name of the protected object group whose configurations you want to modify.', example='test01'),
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
}

model ModifyDefenseResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='2CC1AFDE-BB31-5A2F-906E-92FCBDDE6B75'),
}

model ModifyDefenseResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDefenseResourceGroupResponseBody(name='body'),
}

async function modifyDefenseResourceGroupWithOptions(request: ModifyDefenseResourceGroupRequest, runtime: Util.RuntimeOptions): ModifyDefenseResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addList)) {
    query['AddList'] = request.addList;
  }
  if (!Util.isUnset(request.deleteList)) {
    query['DeleteList'] = request.deleteList;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDefenseResourceGroup',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDefenseResourceGroup(request: ModifyDefenseResourceGroupRequest): ModifyDefenseResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDefenseResourceGroupWithOptions(request, runtime);
}

model ModifyDefenseRuleRequest {
  defenseScene?: string(name='DefenseScene', example='waf_group'),
  instanceId?: string(name='InstanceId', example='waf_cdnsdf3****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', example='rg-acfm***q'),
  rules?: string(name='Rules', example='[{\\"id\\":2344,\\"policyId\\":1012,\\"action\\":\\"block\\"}]'),
  templateId?: long(name='TemplateId', example='5325'),
}

model ModifyDefenseRuleResponseBody = {
  requestId?: string(name='RequestId', example='1EEA9C98-F166-54FE-ADE3-08D82427BDFA'),
}

model ModifyDefenseRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDefenseRuleResponseBody(name='body'),
}

async function modifyDefenseRuleWithOptions(request: ModifyDefenseRuleRequest, runtime: Util.RuntimeOptions): ModifyDefenseRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defenseScene)) {
    query['DefenseScene'] = request.defenseScene;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.rules)) {
    query['Rules'] = request.rules;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDefenseRule',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDefenseRule(request: ModifyDefenseRuleRequest): ModifyDefenseRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDefenseRuleWithOptions(request, runtime);
}

model ModifyDefenseRuleStatusRequest {
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
  ruleId?: long(name='RuleId', description='The ID of the protection rule whose status you want to change.', example='20002615'),
  ruleStatus?: int32(name='RuleStatus', description='The new status of the protection rule. Valid values:

*   **0:** disabled.
*   **1:** enabled.', example='1'),
  templateId?: long(name='TemplateId', description='The ID of the protection rule template to which the protection rule whose status you want to change belongs.', example='7239'),
}

model ModifyDefenseRuleStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='BB305BF3-3C71-57A9-9704-E22F567689B0'),
}

model ModifyDefenseRuleStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDefenseRuleStatusResponseBody(name='body'),
}

async function modifyDefenseRuleStatusWithOptions(request: ModifyDefenseRuleStatusRequest, runtime: Util.RuntimeOptions): ModifyDefenseRuleStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.ruleStatus)) {
    query['RuleStatus'] = request.ruleStatus;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDefenseRuleStatus',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDefenseRuleStatus(request: ModifyDefenseRuleStatusRequest): ModifyDefenseRuleStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDefenseRuleStatusWithOptions(request, runtime);
}

model ModifyDefenseTemplateRequest {
  description?: string(name='Description', description='The description of the protection rule template whose configurations you want to modify.', example='test'),
  instanceId?: string(name='InstanceId', description='The ID of the WAF instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
  templateId?: long(name='TemplateId', description='The ID of the protection rule template whose configurations you want to modify.', example='7392'),
  templateName?: string(name='TemplateName', description='The name of the protection rule template whose configurations you want to modify.', example='test'),
}

model ModifyDefenseTemplateResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1A68C85D-7467-5BB1-9A7E-2E8A5D96D88A'),
}

model ModifyDefenseTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDefenseTemplateResponseBody(name='body'),
}

async function modifyDefenseTemplateWithOptions(request: ModifyDefenseTemplateRequest, runtime: Util.RuntimeOptions): ModifyDefenseTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDefenseTemplate',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDefenseTemplate(request: ModifyDefenseTemplateRequest): ModifyDefenseTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDefenseTemplateWithOptions(request, runtime);
}

model ModifyDefenseTemplateStatusRequest {
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
  templateId?: long(name='TemplateId', description='The ID of the protection rule template whose status you want to change.', example='2249'),
  templateStatus?: int32(name='TemplateStatus', description='The new status of the protection rule template. Valid values:

*   **0:** disabled.
*   **1:** enabled.', example='1'),
}

model ModifyDefenseTemplateStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='58007AE3-65D9-57BA-ABB4-1A544015FB50'),
}

model ModifyDefenseTemplateStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDefenseTemplateStatusResponseBody(name='body'),
}

async function modifyDefenseTemplateStatusWithOptions(request: ModifyDefenseTemplateStatusRequest, runtime: Util.RuntimeOptions): ModifyDefenseTemplateStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.templateStatus)) {
    query['TemplateStatus'] = request.templateStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDefenseTemplateStatus',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDefenseTemplateStatus(request: ModifyDefenseTemplateStatusRequest): ModifyDefenseTemplateStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDefenseTemplateStatusWithOptions(request, runtime);
}

model ModifyDomainRequest {
  accessType?: string(name='AccessType', description='The mode in which you want to add the domain name to WAF. Valid values:

*   **share:** adds the domain name to WAF in CNAME record mode. This is the default value.
*   **hybrid_cloud_cname:** adds the domain name to WAF in hybrid cloud reverse proxy mode.', example='share'),
  domain?: string(name='Domain', description='The domain name whose access configurations you want to modify.', example='www.aliyundoc.com'),
  instanceId?: string(name='InstanceId', description='The ID of the WAF instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  listen?: {
    certId?: string(name='CertId', description='The ID of the certificate that you want to add.', example='123'),
    cipherSuite?: int32(name='CipherSuite', description='The type of cipher suite that you want to add. This parameter is available only when you specify the **HttpsPorts** parameter. Valid values:

*   **1:** all cipher suites.
*   **2:** strong cipher suites. You can select this value only when you set the **TLSVersion** parameter to **tlsv1.2**.
*   **99:** custom cipher suites.', example='2'),
    customCiphers?: [ string ](name='CustomCiphers', description='The custom cipher suites that you want to add. This parameter is available only when you set the **CipherSuite** parameter to **99**.'),
    enableTLSv3?: boolean(name='EnableTLSv3', description='Specifies whether to support TLS 1.3. This parameter is available only when you specify the **HttpsPorts** parameter. Valid values:

*   **true:** supports TLS 1.3.
*   **false:** does not support TLS 1.3.', example='true'),
    exclusiveIp?: boolean(name='ExclusiveIp', description='Specifies whether to enable an exclusive IP address for the domain name. This parameter is available only when you set the **IPv6Enabled** parameter to false and the **ProtectionResource** parameter to **share**. Valid values:

*   **true:** enables an exclusive IP address for the domain name.
*   **false:** does not enable an exclusive IP address for the domain name. This is the default value.', example='true'),
    focusHttps?: boolean(name='FocusHttps', description='Specifies whether to enable HTTP to HTTPS redirection for the domain name. This parameter is available only when you specify the **HttpsPorts** parameter and leave the **HttpPorts** parameter empty. Valid values:

*   **true:** enables HTTP to HTTPS redirection.
*   **false:** disables HTTP to HTTPS redirection.', example='true'),
    http2Enabled?: boolean(name='Http2Enabled', description='Specifies whether to enable HTTP/2. This parameter is available only when you specify the **HttpsPorts** parameter. Valid values:

*   **true:** enables HTTP/2.
*   **false:** disables HTTP/2. This is the default value.', example='true'),
    httpPorts?: [ int32 ](name='HttpPorts', description='An array of HTTP listener ports. Specify the value of this parameter in the \\[port1,port2,...] format.'),
    httpsPorts?: [ int32 ](name='HttpsPorts', description='An array of HTTPS listener ports. Specify the value of this parameter in the \\[port1,port2,...] format.'),
    IPv6Enabled?: boolean(name='IPv6Enabled', description='Specifies whether to enable IPv6. Valid values:

*   **true:** enables IPv6.
*   **false:** disables IPv6. This is the default value.', example='true'),
    protectionResource?: string(name='ProtectionResource', description='The type of the protection resource that you want to use. Valid values:

*   **share:** shared cluster. This is the default value.
*   **gslb:** shared cluster-based intelligent load balancing.', example='share'),
    SM2AccessOnly?: boolean(name='SM2AccessOnly', description='是否仅客端访问。仅SM2Enable取值为true时，使用该参数。

- true：仅国密客户端才可以访问。

- false：国密和非国密均可以访问。', example='true'),
    SM2CertId?: string(name='SM2CertId', description='要添加的国密证书的ID。仅SM2Enable取值为true时，使用该参数。', example='123-cn-hangzhou'),
    SM2Enabled?: boolean(name='SM2Enabled', description='是否开启国密证书', example='true'),
    TLSVersion?: string(name='TLSVersion', description='The version of the Transport Layer Security (TLS) protocol. This parameter is available only when you specify the **HttpsPorts** parameter. Valid values:

*   **tlsv1**
*   **tlsv1.1**
*   **tlsv1.2**', example='tlsv1'),
    xffHeaderMode?: int32(name='XffHeaderMode', description='The method that you want WAF to use to obtain the actual IP address of a client. Valid values:

*   **0:** No Layer 7 proxies are deployed in front of WAF. This is the default value.
*   **1:** WAF reads the first value of the X-Forwarded-For (XFF) header field as the actual IP address of the client.
*   **2:** WAF reads the value of a custom header field as the actual IP address of the client.', example='2'),
    xffHeaders?: [ string ](name='XffHeaders', description='The custom header fields that you want to use to obtain the actual IP address of a client. Specify the value of this parameter in the \\["header1","header2",...] format.

>  If you set the **XffHeaderMode** parameter to 2, this parameter is required.'),
  }(name='Listen', description='The configurations of the listeners.'),
  redirect?: {
    backends?: [ string ](name='Backends', description='The back-to-origin IP addresses or domain names. You can specify only one type of address. If you use the domain name type, only IPv4 is supported.

*   If you use the IP address type, specify the value of this parameter in the \\["ip1","ip2",...] format. You can specify up to 20 IP addresses.
*   If you use the domain name type, specify the value of this parameter in the \\["domain"] format. You can specify up to 20 domain names.'),
    cnameEnabled?: boolean(name='CnameEnabled', description='Specifies whether to enable the public cloud disaster recovery feature. Valid values:

*   **true**
*   **false** (default)', example='true'),
    connectTimeout?: int32(name='ConnectTimeout', description='The connection timeout period. Unit: seconds. Valid values: 1 to 3600.', example='120'),
    focusHttpBackend?: boolean(name='FocusHttpBackend', description='Specifies whether to enable HTTPS to HTTP redirection for back-to-origin requests. This parameter is available only if you specify **HttpsPorts**. Valid values:

*   **true**
*   **false**', example='true'),
    keepalive?: boolean(name='Keepalive', description='Specifies whether to enable the persistent connection feature. Valid values:

*   **true** (default)
*   **false**', example='true'),
    keepaliveRequests?: int32(name='KeepaliveRequests', description='The number of reused persistent connections. Valid values: 60 to 1000.

> This parameter specifies the number of reused persistent connections after you enable the persistent connection feature.', example='1000'),
    keepaliveTimeout?: int32(name='KeepaliveTimeout', description='The timeout period of persistent connections that are in the Idle state. Valid values: 1 to 60. Default value: 15. Unit: seconds.

> This parameter specifies the period of time during which a reused persistent connection remains in the Idle state before the persistent connection is released.', example='15'),
    loadbalance?: string(name='Loadbalance', description='The load balancing algorithm that you want WAF to use to forward requests to the origin server. Valid values:

*   **ip_hash**
*   **roundRobin**
*   **leastTime**. You can select this value only if you set **ProtectionResource** to **gslb**.', example='iphash'),
    readTimeout?: int32(name='ReadTimeout', description='The read timeout period. Unit: seconds. Valid values: 1 to 3600.', example='200'),
    requestHeaders?: [ 
      {
        key?: string(name='Key', description='The key of the custom header field.', example='aaa'),
        value?: string(name='Value', description='The value of the custom header field.', example='bbb'),
      }
    ](name='RequestHeaders', description='The key-value pairs that you want to use to mark the requests that are processed by WAF.

WAF automatically adds the key-value pairs to the request headers. This way, the backend service can identify the requests that are processed by WAF.'),
    retry?: boolean(name='Retry', description='Specifies whether WAF retries to forward requests when requests fail to be forwarded to the origin server. Valid values:

*   **true** (default)
*   **false**', example='true'),
    routingRules?: string(name='RoutingRules', description='The forwarding rules that you want to configure for the domain name that you want to add to WAF in hybrid cloud mode. Set the value to a string that consists of JSON arrays. Each element in a JSON array must be a JSON struct that contains the following fields:

*   **rs:** The back-to-origin IP addresses or CNAMEs. The value must be of the ARRAY type.
*   **location:** The name of the protection node. The value must be of the STRING type.
*   **locationId:** The ID of the protection node. The value must be of the LONG type.', example='[
      {
            "rs": [
                  "1.1.XX.XX"
            ],
            "locationId": 535,
            "location": "test1111"
      }
]'),
    sniEnabled?: boolean(name='SniEnabled', description='Specifies whether to enable origin Server Name Indication (SNI). This parameter is available only if you specify **HttpsPorts**. Valid values:

*   **true**
*   **false** (default)', example='true'),
    sniHost?: string(name='SniHost', description='The value of the custom SNI field. If you do not specify this parameter, the value of the **Host** field in the request header is automatically used. If you want WAF to use an SNI field value that is different from the value of the Host field in back-to-origin requests, you can specify a custom value for the SNI field.

> This parameter is required only if you set **SniEnabled** to true.', example='www.aliyundoc.com'),
    writeTimeout?: int32(name='WriteTimeout', description='The write timeout period. Unit: seconds. Valid values: 1 to 3600.', example='200'),
  }(name='Redirect', description='The configurations of the forwarding rule.'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request. The value of this parameter is specified by the system.', example='0.0.XX.XX'),
}

model ModifyDomainShrinkRequest {
  accessType?: string(name='AccessType', description='The mode in which you want to add the domain name to WAF. Valid values:

*   **share:** adds the domain name to WAF in CNAME record mode. This is the default value.
*   **hybrid_cloud_cname:** adds the domain name to WAF in hybrid cloud reverse proxy mode.', example='share'),
  domain?: string(name='Domain', description='The domain name whose access configurations you want to modify.', example='www.aliyundoc.com'),
  instanceId?: string(name='InstanceId', description='The ID of the WAF instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  listenShrink?: string(name='Listen', description='The configurations of the listeners.'),
  redirectShrink?: string(name='Redirect', description='The configurations of the forwarding rule.'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request. The value of this parameter is specified by the system.', example='0.0.XX.XX'),
}

model ModifyDomainResponseBody = {
  domainInfo?: {
    cname?: string(name='Cname', description='The CNAME that is assigned by WAF to the domain name.', example='xxxxxcvdaf.****.com'),
    domain?: string(name='Domain', description='The domain name whose access configurations you modified.', example='www.aliyundoc.com'),
    domainId?: string(name='DomainId', description='The ID of the domain name.', example='www.aliyundoc.com-waf'),
  }(name='DomainInfo', description='The information about the domain name.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
}

model ModifyDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDomainResponseBody(name='body'),
}

async function modifyDomainWithOptions(tmpReq: ModifyDomainRequest, runtime: Util.RuntimeOptions): ModifyDomainResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyDomainShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.listen)) {
    request.listenShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.listen, 'Listen', 'json');
  }
  if (!Util.isUnset(tmpReq.redirect)) {
    request.redirectShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.redirect, 'Redirect', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.accessType)) {
    query['AccessType'] = request.accessType;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.listenShrink)) {
    query['Listen'] = request.listenShrink;
  }
  if (!Util.isUnset(request.redirectShrink)) {
    query['Redirect'] = request.redirectShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDomain',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDomain(request: ModifyDomainRequest): ModifyDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDomainWithOptions(request, runtime);
}

model ModifyHybridCloudClusterBypassStatusRequest {
  clusterResourceId?: string(name='ClusterResourceId', description='The ID of the hybrid cloud cluster.', example='hdbc_cluster_****'),
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

**

**You can call the **DescribeInstanceInfo[ operation to obtain the ID of the WAF instance.](~~140857~~)', example='waf_elasticity-cn-0xldbqt****'),
  ruleStatus?: string(name='RuleStatus', description='The status of manual bypass. Valid values:

*   **on**: enabled.
*   **off**: disabled. This is the default value.', example='on'),
}

model ModifyHybridCloudClusterBypassStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D7861F61-5B61-46CE-A47C-6B19160D5EB0'),
}

model ModifyHybridCloudClusterBypassStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyHybridCloudClusterBypassStatusResponseBody(name='body'),
}

async function modifyHybridCloudClusterBypassStatusWithOptions(request: ModifyHybridCloudClusterBypassStatusRequest, runtime: Util.RuntimeOptions): ModifyHybridCloudClusterBypassStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterResourceId)) {
    query['ClusterResourceId'] = request.clusterResourceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ruleStatus)) {
    query['RuleStatus'] = request.ruleStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyHybridCloudClusterBypassStatus',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyHybridCloudClusterBypassStatus(request: ModifyHybridCloudClusterBypassStatusRequest): ModifyHybridCloudClusterBypassStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyHybridCloudClusterBypassStatusWithOptions(request, runtime);
}

model ModifyMajorProtectionBlackIpRequest {
  description?: string(name='Description', description='The description of the IP address blacklist.', example='test'),
  expiredTime?: long(name='ExpiredTime', description='The time after which the IP address blacklist becomes invalid. Unit: seconds.

>  If you set this parameter to **0**, the blacklist is permanently valid.', example='1662603328'),
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  ipList?: string(name='IpList', description='The IP addresses that you want to add to the IP address blacklist. You can specify multiple CIDR blocks or IP addresses. IPv4 and IPv6 addresses are supported. Separate the CIDR blocks or IP addresses with commas (,). For more information, see [Protection for major events](~~425591~~).', example='12.XX.XX.2,3.XX.XX.3/24'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
  ruleId?: long(name='RuleId', description='The ID of the IP address blacklist rule for major event protection.', example='20012033'),
  templateId?: long(name='TemplateId', description='The ID of the IP address blacklist rule template for major event protection.', example='5132'),
}

model ModifyMajorProtectionBlackIpResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='66A98669-CC6E-4F3E-80A6-3014697B11AE'),
}

model ModifyMajorProtectionBlackIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyMajorProtectionBlackIpResponseBody(name='body'),
}

async function modifyMajorProtectionBlackIpWithOptions(request: ModifyMajorProtectionBlackIpRequest, runtime: Util.RuntimeOptions): ModifyMajorProtectionBlackIpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.expiredTime)) {
    query['ExpiredTime'] = request.expiredTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ipList)) {
    query['IpList'] = request.ipList;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyMajorProtectionBlackIp',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyMajorProtectionBlackIp(request: ModifyMajorProtectionBlackIpRequest): ModifyMajorProtectionBlackIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyMajorProtectionBlackIpWithOptions(request, runtime);
}

model ModifyResourceLogStatusRequest {
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf-cn-zz11zcl****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resource?: string(name='Resource', description='The protected object on which you want to manage the log collection feature.', example='alb-wewbb23dfsetetcic1242-0****'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the resource group.', example='rg-acfm***q'),
  status?: boolean(name='Status', description='Specifies whether to enable the log collection feature for the protected object. Valid values:

*   **true:** enables the log collection feature.
*   **false:** disables the log collection feature.', example='true'),
}

model ModifyResourceLogStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='7C55A3E5-638A-5D6E-9A2F-C3CE5A677EC5'),
  status?: boolean(name='Status', description='Indicates whether the log collection feature is enabled for the protected object. Valid values:

*   **true**
*   **false**', example='true'),
}

model ModifyResourceLogStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyResourceLogStatusResponseBody(name='body'),
}

async function modifyResourceLogStatusWithOptions(request: ModifyResourceLogStatusRequest, runtime: Util.RuntimeOptions): ModifyResourceLogStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyResourceLogStatus',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyResourceLogStatus(request: ModifyResourceLogStatusRequest): ModifyResourceLogStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyResourceLogStatusWithOptions(request, runtime);
}

model ModifyTemplateResourcesRequest {
  bindResourceGroups?: [ string ](name='BindResourceGroups', description='The protected object groups that you want to associate with the protection rule template. Specify the value of this parameter in the \\["group1","group2",...] format.'),
  bindResources?: [ string ](name='BindResources', description='The protected objects that you want to associate with the protection rule template. Specify the value of this parameter in the \\["XX1","XX2",...] format.'),
  instanceId?: string(name='InstanceId', description='The ID of the Web Application Firewall (WAF) instance.

>  You can call the [DescribeInstance](~~433756~~) operation to obtain the ID of the WAF instance.', example='waf_cdnsdf3****'),
  regionId?: string(name='RegionId', description='The region where the WAF instance resides. Valid values:

*   **cn-hangzhou:** the Chinese mainland.
*   **ap-southeast-1:** outside the Chinese mainland.', example='cn-hangzhou'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the Alibaba Cloud resource group.', example='rg-acfm***q'),
  templateId?: long(name='TemplateId', description='The ID of the protection rule template.', example='2291'),
  unbindResourceGroups?: [ string ](name='UnbindResourceGroups', description='The protected object groups that you want to disassociate from the protection rule template. Specify the value of this parameter in the \\["group1","group2",...] format.'),
  unbindResources?: [ string ](name='UnbindResources', description='The protected objects that you want to disassociate from the protection rule template. Specify the value of this parameter in the \\["XX1","XX2",...] format.'),
}

model ModifyTemplateResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CF708F2F-FFB0-54D4-B1E0-B84A7CEBFB60'),
}

model ModifyTemplateResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyTemplateResourcesResponseBody(name='body'),
}

async function modifyTemplateResourcesWithOptions(request: ModifyTemplateResourcesRequest, runtime: Util.RuntimeOptions): ModifyTemplateResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bindResourceGroups)) {
    query['BindResourceGroups'] = request.bindResourceGroups;
  }
  if (!Util.isUnset(request.bindResources)) {
    query['BindResources'] = request.bindResources;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.unbindResourceGroups)) {
    query['UnbindResourceGroups'] = request.unbindResourceGroups;
  }
  if (!Util.isUnset(request.unbindResources)) {
    query['UnbindResources'] = request.unbindResources;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyTemplateResources',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyTemplateResources(request: ModifyTemplateResourcesRequest): ModifyTemplateResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTemplateResourcesWithOptions(request, runtime);
}

