/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-beijing = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-chengdu = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-zhangjiakou = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-huhehaote = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-hangzhou = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shenzhen = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-heyuan = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-wulanchabu = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-hongkong = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    eu-central-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    cn-shanghai-finance-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shenzhen-finance-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-north-2-gov-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('waf-openapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ClearMajorProtectionBlackIpRequest {
  instanceId?: string(name='InstanceId'),
  ruleId?: long(name='RuleId'),
  templateId?: long(name='TemplateId'),
}

model ClearMajorProtectionBlackIpResponseBody = {
  requestId?: string(name='RequestId'),
}

model ClearMajorProtectionBlackIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ClearMajorProtectionBlackIpResponseBody(name='body'),
}

async function clearMajorProtectionBlackIpWithOptions(request: ClearMajorProtectionBlackIpRequest, runtime: Util.RuntimeOptions): ClearMajorProtectionBlackIpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ClearMajorProtectionBlackIp',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function clearMajorProtectionBlackIp(request: ClearMajorProtectionBlackIpRequest): ClearMajorProtectionBlackIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return clearMajorProtectionBlackIpWithOptions(request, runtime);
}

model CreateDefenseResourceGroupRequest {
  addList?: string(name='AddList'),
  description?: string(name='Description'),
  groupName?: string(name='GroupName'),
  instanceId?: string(name='InstanceId'),
}

model CreateDefenseResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDefenseResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDefenseResourceGroupResponseBody(name='body'),
}

async function createDefenseResourceGroupWithOptions(request: CreateDefenseResourceGroupRequest, runtime: Util.RuntimeOptions): CreateDefenseResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addList)) {
    query['AddList'] = request.addList;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDefenseResourceGroup',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDefenseResourceGroup(request: CreateDefenseResourceGroupRequest): CreateDefenseResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDefenseResourceGroupWithOptions(request, runtime);
}

model CreateDefenseRuleRequest {
  defenseScene?: string(name='DefenseScene'),
  instanceId?: string(name='InstanceId'),
  rules?: string(name='Rules'),
  templateId?: long(name='TemplateId'),
}

model CreateDefenseRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDefenseRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDefenseRuleResponseBody(name='body'),
}

async function createDefenseRuleWithOptions(request: CreateDefenseRuleRequest, runtime: Util.RuntimeOptions): CreateDefenseRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defenseScene)) {
    query['DefenseScene'] = request.defenseScene;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.rules)) {
    query['Rules'] = request.rules;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDefenseRule',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDefenseRule(request: CreateDefenseRuleRequest): CreateDefenseRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDefenseRuleWithOptions(request, runtime);
}

model CreateDefenseTemplateRequest {
  defenseScene?: string(name='DefenseScene'),
  description?: string(name='Description'),
  instanceId?: string(name='InstanceId'),
  templateName?: string(name='TemplateName'),
  templateOrigin?: string(name='TemplateOrigin'),
  templateStatus?: int32(name='TemplateStatus'),
  templateType?: string(name='TemplateType'),
}

model CreateDefenseTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  templateId?: long(name='TemplateId'),
}

model CreateDefenseTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDefenseTemplateResponseBody(name='body'),
}

async function createDefenseTemplateWithOptions(request: CreateDefenseTemplateRequest, runtime: Util.RuntimeOptions): CreateDefenseTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defenseScene)) {
    query['DefenseScene'] = request.defenseScene;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  if (!Util.isUnset(request.templateOrigin)) {
    query['TemplateOrigin'] = request.templateOrigin;
  }
  if (!Util.isUnset(request.templateStatus)) {
    query['TemplateStatus'] = request.templateStatus;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDefenseTemplate',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDefenseTemplate(request: CreateDefenseTemplateRequest): CreateDefenseTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDefenseTemplateWithOptions(request, runtime);
}

model CreateDomainRequest {
  accessType?: string(name='AccessType'),
  domain?: string(name='Domain'),
  instanceId?: string(name='InstanceId'),
  listen?: {
    certId?: string(name='CertId'),
    cipherSuite?: int32(name='CipherSuite'),
    customCiphers?: [ string ](name='CustomCiphers'),
    enableTLSv3?: boolean(name='EnableTLSv3'),
    exclusiveIp?: boolean(name='ExclusiveIp'),
    focusHttps?: boolean(name='FocusHttps'),
    http2Enabled?: boolean(name='Http2Enabled'),
    httpPorts?: [ int32 ](name='HttpPorts'),
    httpsPorts?: [ int32 ](name='HttpsPorts'),
    IPv6Enabled?: boolean(name='IPv6Enabled'),
    protectionResource?: string(name='ProtectionResource'),
    TLSVersion?: string(name='TLSVersion'),
    xffHeaderMode?: int32(name='XffHeaderMode'),
    xffHeaders?: [ string ](name='XffHeaders'),
  }(name='Listen'),
  redirect?: {
    backends?: [ string ](name='Backends'),
    connectTimeout?: int32(name='ConnectTimeout'),
    focusHttpBackend?: boolean(name='FocusHttpBackend'),
    loadbalance?: string(name='Loadbalance'),
    readTimeout?: int32(name='ReadTimeout'),
    requestHeaders?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='RequestHeaders'),
    sniEnabled?: boolean(name='SniEnabled'),
    sniHost?: string(name='SniHost'),
    writeTimeout?: int32(name='WriteTimeout'),
  }(name='Redirect'),
  regionId?: string(name='RegionId'),
}

model CreateDomainShrinkRequest {
  accessType?: string(name='AccessType'),
  domain?: string(name='Domain'),
  instanceId?: string(name='InstanceId'),
  listenShrink?: string(name='Listen'),
  redirectShrink?: string(name='Redirect'),
  regionId?: string(name='RegionId'),
}

model CreateDomainResponseBody = {
  domainInfo?: {
    cname?: string(name='Cname'),
    domain?: string(name='Domain'),
  }(name='DomainInfo'),
  requestId?: string(name='RequestId'),
}

model CreateDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDomainResponseBody(name='body'),
}

async function createDomainWithOptions(tmpReq: CreateDomainRequest, runtime: Util.RuntimeOptions): CreateDomainResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDomainShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.listen)) {
    request.listenShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.listen, 'Listen', 'json');
  }
  if (!Util.isUnset(tmpReq.redirect)) {
    request.redirectShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.redirect, 'Redirect', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.accessType)) {
    query['AccessType'] = request.accessType;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.listenShrink)) {
    query['Listen'] = request.listenShrink;
  }
  if (!Util.isUnset(request.redirectShrink)) {
    query['Redirect'] = request.redirectShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDomain',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDomain(request: CreateDomainRequest): CreateDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDomainWithOptions(request, runtime);
}

model CreateMajorProtectionBlackIpRequest {
  description?: string(name='Description'),
  expiredTime?: long(name='ExpiredTime'),
  instanceId?: string(name='InstanceId'),
  ipList?: string(name='IpList'),
  ruleId?: long(name='RuleId'),
  templateId?: long(name='TemplateId'),
}

model CreateMajorProtectionBlackIpResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateMajorProtectionBlackIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMajorProtectionBlackIpResponseBody(name='body'),
}

async function createMajorProtectionBlackIpWithOptions(request: CreateMajorProtectionBlackIpRequest, runtime: Util.RuntimeOptions): CreateMajorProtectionBlackIpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.expiredTime)) {
    query['ExpiredTime'] = request.expiredTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ipList)) {
    query['IpList'] = request.ipList;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateMajorProtectionBlackIp',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createMajorProtectionBlackIp(request: CreateMajorProtectionBlackIpRequest): CreateMajorProtectionBlackIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMajorProtectionBlackIpWithOptions(request, runtime);
}

model DeleteDefenseResourceGroupRequest {
  groupName?: string(name='GroupName'),
  instanceId?: string(name='InstanceId'),
}

model DeleteDefenseResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDefenseResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDefenseResourceGroupResponseBody(name='body'),
}

async function deleteDefenseResourceGroupWithOptions(request: DeleteDefenseResourceGroupRequest, runtime: Util.RuntimeOptions): DeleteDefenseResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDefenseResourceGroup',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDefenseResourceGroup(request: DeleteDefenseResourceGroupRequest): DeleteDefenseResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDefenseResourceGroupWithOptions(request, runtime);
}

model DeleteDefenseRuleRequest {
  instanceId?: string(name='InstanceId'),
  ruleIds?: string(name='RuleIds'),
  templateId?: long(name='TemplateId'),
}

model DeleteDefenseRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDefenseRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDefenseRuleResponseBody(name='body'),
}

async function deleteDefenseRuleWithOptions(request: DeleteDefenseRuleRequest, runtime: Util.RuntimeOptions): DeleteDefenseRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ruleIds)) {
    query['RuleIds'] = request.ruleIds;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDefenseRule',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDefenseRule(request: DeleteDefenseRuleRequest): DeleteDefenseRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDefenseRuleWithOptions(request, runtime);
}

model DeleteDefenseTemplateRequest {
  instanceId?: string(name='InstanceId'),
  templateId?: long(name='TemplateId'),
}

model DeleteDefenseTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDefenseTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDefenseTemplateResponseBody(name='body'),
}

async function deleteDefenseTemplateWithOptions(request: DeleteDefenseTemplateRequest, runtime: Util.RuntimeOptions): DeleteDefenseTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDefenseTemplate',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDefenseTemplate(request: DeleteDefenseTemplateRequest): DeleteDefenseTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDefenseTemplateWithOptions(request, runtime);
}

model DeleteDomainRequest {
  domain?: string(name='Domain'),
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
}

model DeleteDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDomainResponseBody(name='body'),
}

async function deleteDomainWithOptions(request: DeleteDomainRequest, runtime: Util.RuntimeOptions): DeleteDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDomain',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDomainWithOptions(request, runtime);
}

model DeleteMajorProtectionBlackIpRequest {
  instanceId?: string(name='InstanceId'),
  ipList?: string(name='IpList'),
  ruleId?: long(name='RuleId'),
  templateId?: long(name='TemplateId'),
}

model DeleteMajorProtectionBlackIpResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteMajorProtectionBlackIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMajorProtectionBlackIpResponseBody(name='body'),
}

async function deleteMajorProtectionBlackIpWithOptions(request: DeleteMajorProtectionBlackIpRequest, runtime: Util.RuntimeOptions): DeleteMajorProtectionBlackIpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ipList)) {
    query['IpList'] = request.ipList;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMajorProtectionBlackIp',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMajorProtectionBlackIp(request: DeleteMajorProtectionBlackIpRequest): DeleteMajorProtectionBlackIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMajorProtectionBlackIpWithOptions(request, runtime);
}

model DescribeDefenseResourceGroupRequest {
  groupName?: string(name='GroupName'),
  instanceId?: string(name='InstanceId'),
}

model DescribeDefenseResourceGroupResponseBody = {
  group?: {
    description?: string(name='Description'),
    gmtCreate?: long(name='GmtCreate'),
    gmtModified?: long(name='GmtModified'),
    groupName?: string(name='GroupName'),
    resourceList?: string(name='ResourceList'),
  }(name='Group'),
  requestId?: string(name='RequestId'),
}

model DescribeDefenseResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDefenseResourceGroupResponseBody(name='body'),
}

async function describeDefenseResourceGroupWithOptions(request: DescribeDefenseResourceGroupRequest, runtime: Util.RuntimeOptions): DescribeDefenseResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDefenseResourceGroup',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDefenseResourceGroup(request: DescribeDefenseResourceGroupRequest): DescribeDefenseResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDefenseResourceGroupWithOptions(request, runtime);
}

model DescribeDefenseResourcesRequest {
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  query?: string(name='Query'),
}

model DescribeDefenseResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  resources?: [ 
    {
      customHeaders?: [ string ](name='CustomHeaders'),
      description?: string(name='Description'),
      detail?: map[string]any(name='Detail'),
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      pattern?: string(name='Pattern'),
      product?: string(name='Product'),
      resource?: string(name='Resource'),
      resourceGroup?: string(name='ResourceGroup'),
      resourceOrigin?: string(name='ResourceOrigin'),
      xffStatus?: int32(name='XffStatus'),
    }
  ](name='Resources'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDefenseResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDefenseResourcesResponseBody(name='body'),
}

async function describeDefenseResourcesWithOptions(request: DescribeDefenseResourcesRequest, runtime: Util.RuntimeOptions): DescribeDefenseResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.query)) {
    query['Query'] = request.query;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDefenseResources',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDefenseResources(request: DescribeDefenseResourcesRequest): DescribeDefenseResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDefenseResourcesWithOptions(request, runtime);
}

model DescribeDefenseRuleRequest {
  instanceId?: string(name='InstanceId'),
  ruleId?: long(name='RuleId'),
  templateId?: long(name='TemplateId'),
}

model DescribeDefenseRuleResponseBody = {
  requestId?: string(name='RequestId'),
  rule?: {
    config?: string(name='Config'),
    defenseOrigin?: string(name='DefenseOrigin'),
    defenseScene?: string(name='DefenseScene'),
    gmtModified?: long(name='GmtModified'),
    ruleId?: long(name='RuleId'),
    ruleName?: string(name='RuleName'),
    status?: int32(name='Status'),
    templateId?: long(name='TemplateId'),
  }(name='Rule'),
}

model DescribeDefenseRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDefenseRuleResponseBody(name='body'),
}

async function describeDefenseRuleWithOptions(request: DescribeDefenseRuleRequest, runtime: Util.RuntimeOptions): DescribeDefenseRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDefenseRule',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDefenseRule(request: DescribeDefenseRuleRequest): DescribeDefenseRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDefenseRuleWithOptions(request, runtime);
}

model DescribeDefenseRulesRequest {
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  query?: string(name='Query'),
  ruleType?: string(name='RuleType'),
}

model DescribeDefenseRulesResponseBody = {
  requestId?: string(name='RequestId'),
  rules?: [ 
    {
      config?: string(name='Config'),
      defenseOrigin?: string(name='DefenseOrigin'),
      defenseScene?: string(name='DefenseScene'),
      gmtModified?: long(name='GmtModified'),
      ruleId?: long(name='RuleId'),
      ruleName?: string(name='RuleName'),
      status?: int32(name='Status'),
      templateId?: long(name='TemplateId'),
    }
  ](name='Rules'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDefenseRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDefenseRulesResponseBody(name='body'),
}

async function describeDefenseRulesWithOptions(request: DescribeDefenseRulesRequest, runtime: Util.RuntimeOptions): DescribeDefenseRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.query)) {
    query['Query'] = request.query;
  }
  if (!Util.isUnset(request.ruleType)) {
    query['RuleType'] = request.ruleType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDefenseRules',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDefenseRules(request: DescribeDefenseRulesRequest): DescribeDefenseRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDefenseRulesWithOptions(request, runtime);
}

model DescribeDefenseTemplateRequest {
  instanceId?: string(name='InstanceId'),
  templateId?: long(name='TemplateId'),
}

model DescribeDefenseTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  template?: {
    defenseScene?: string(name='DefenseScene'),
    description?: string(name='Description'),
    gmtModified?: long(name='GmtModified'),
    templateId?: long(name='TemplateId'),
    templateName?: string(name='TemplateName'),
    templateOrigin?: string(name='TemplateOrigin'),
    templateStatus?: int32(name='TemplateStatus'),
    templateType?: string(name='TemplateType'),
  }(name='Template'),
}

model DescribeDefenseTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDefenseTemplateResponseBody(name='body'),
}

async function describeDefenseTemplateWithOptions(request: DescribeDefenseTemplateRequest, runtime: Util.RuntimeOptions): DescribeDefenseTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDefenseTemplate',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDefenseTemplate(request: DescribeDefenseTemplateRequest): DescribeDefenseTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDefenseTemplateWithOptions(request, runtime);
}

model DescribeDomainDetailRequest {
  domain?: string(name='Domain'),
  instanceId?: string(name='InstanceId'),
}

model DescribeDomainDetailResponseBody = {
  cname?: string(name='Cname'),
  domain?: string(name='Domain'),
  listen?: {
    certId?: long(name='CertId'),
    cipherSuite?: long(name='CipherSuite'),
    customCiphers?: [ string ](name='CustomCiphers'),
    enableTLSv3?: boolean(name='EnableTLSv3'),
    exclusiveIp?: boolean(name='ExclusiveIp'),
    focusHttps?: boolean(name='FocusHttps'),
    http2Enabled?: boolean(name='Http2Enabled'),
    httpPorts?: [ long ](name='HttpPorts'),
    httpsPorts?: [ long ](name='HttpsPorts'),
    IPv6Enabled?: boolean(name='IPv6Enabled'),
    protectionResource?: string(name='ProtectionResource'),
    TLSVersion?: string(name='TLSVersion'),
    xffHeaderMode?: long(name='XffHeaderMode'),
    xffHeaders?: [ string ](name='XffHeaders'),
  }(name='Listen'),
  redirect?: {
    backends?: [ 
      {
        backend?: string(name='Backend'),
      }
    ](name='Backends'),
    connectTimeout?: int32(name='ConnectTimeout'),
    focusHttpBackend?: boolean(name='FocusHttpBackend'),
    loadbalance?: string(name='Loadbalance'),
    readTimeout?: int32(name='ReadTimeout'),
    requestHeaders?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='RequestHeaders'),
    sniEnabled?: boolean(name='SniEnabled'),
    sniHost?: string(name='SniHost'),
    writeTimeout?: int32(name='WriteTimeout'),
  }(name='Redirect'),
  requestId?: string(name='RequestId'),
  status?: long(name='Status'),
}

model DescribeDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainDetailResponseBody(name='body'),
}

async function describeDomainDetailWithOptions(request: DescribeDomainDetailRequest, runtime: Util.RuntimeOptions): DescribeDomainDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainDetail',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainDetail(request: DescribeDomainDetailRequest): DescribeDomainDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainDetailWithOptions(request, runtime);
}

model DescribeDomainsRequest {
  backend?: string(name='Backend'),
  domain?: string(name='Domain'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model DescribeDomainsResponseBody = {
  domains?: [ 
    {
      backeds?: {
        http?: [ 
          {
            backend?: string(name='Backend'),
          }
        ](name='Http'),
        https?: [ 
          {
            backend?: string(name='Backend'),
          }
        ](name='Https'),
      }(name='Backeds'),
      cname?: string(name='Cname'),
      domain?: string(name='Domain'),
      listenPorts?: {
        http?: [ long ](name='Http'),
        https?: [ long ](name='Https'),
      }(name='ListenPorts'),
      status?: int32(name='Status'),
    }
  ](name='Domains'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDomainsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainsResponseBody(name='body'),
}

async function describeDomainsWithOptions(request: DescribeDomainsRequest, runtime: Util.RuntimeOptions): DescribeDomainsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backend)) {
    query['Backend'] = request.backend;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomains',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomains(request: DescribeDomainsRequest): DescribeDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainsWithOptions(request, runtime);
}

model DescribeFlowChartRequest {
  endTimestamp?: string(name='EndTimestamp'),
  instanceId?: string(name='InstanceId'),
  interval?: string(name='Interval'),
  resource?: string(name='Resource'),
  startTimestamp?: string(name='StartTimestamp'),
}

model DescribeFlowChartResponseBody = {
  flowChart?: [ 
    {
      aclCustomBlockSum?: long(name='AclCustomBlockSum'),
      aclCustomReportsSum?: long(name='AclCustomReportsSum'),
      antiScanBlockSum?: long(name='AntiScanBlockSum'),
      antibotBlockSum?: long(name='AntibotBlockSum'),
      antibotReportSum?: string(name='AntibotReportSum'),
      antiscanReportsSum?: long(name='AntiscanReportsSum'),
      blacklistBlockSum?: string(name='BlacklistBlockSum'),
      blacklistReportsSum?: long(name='BlacklistReportsSum'),
      ccCustomBlockSum?: long(name='CcCustomBlockSum'),
      ccCustomReportsSum?: long(name='CcCustomReportsSum'),
      ccSystemBlocksSum?: long(name='CcSystemBlocksSum'),
      ccSystemReportsSum?: long(name='CcSystemReportsSum'),
      count?: long(name='Count'),
      inBytes?: long(name='InBytes'),
      index?: long(name='Index'),
      maxPv?: long(name='MaxPv'),
      outBytes?: long(name='OutBytes'),
      regionBlockBlocksSum?: long(name='RegionBlockBlocksSum'),
      regionBlockReportsSum?: long(name='RegionBlockReportsSum'),
      wafBlockSum?: long(name='WafBlockSum'),
      wafReportSum?: string(name='WafReportSum'),
    }
  ](name='FlowChart'),
  requestId?: string(name='RequestId'),
}

model DescribeFlowChartResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFlowChartResponseBody(name='body'),
}

async function describeFlowChartWithOptions(request: DescribeFlowChartRequest, runtime: Util.RuntimeOptions): DescribeFlowChartResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFlowChart',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFlowChart(request: DescribeFlowChartRequest): DescribeFlowChartResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFlowChartWithOptions(request, runtime);
}

model DescribeFlowTopResourceRequest {
  endTimestamp?: string(name='EndTimestamp'),
  instanceId?: string(name='InstanceId'),
  startTimestamp?: string(name='StartTimestamp'),
}

model DescribeFlowTopResourceResponseBody = {
  requestId?: string(name='RequestId'),
  ruleHitsTopResource?: [ 
    {
      count?: long(name='Count'),
      resource?: string(name='Resource'),
    }
  ](name='RuleHitsTopResource'),
}

model DescribeFlowTopResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFlowTopResourceResponseBody(name='body'),
}

async function describeFlowTopResourceWithOptions(request: DescribeFlowTopResourceRequest, runtime: Util.RuntimeOptions): DescribeFlowTopResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFlowTopResource',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFlowTopResource(request: DescribeFlowTopResourceRequest): DescribeFlowTopResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFlowTopResourceWithOptions(request, runtime);
}

model DescribeFlowTopUrlRequest {
  endTimestamp?: string(name='EndTimestamp'),
  instanceId?: string(name='InstanceId'),
  resource?: string(name='Resource'),
  startTimestamp?: string(name='StartTimestamp'),
}

model DescribeFlowTopUrlResponseBody = {
  requestId?: string(name='RequestId'),
  ruleHitsTopUrl?: [ 
    {
      count?: long(name='Count'),
      url?: string(name='Url'),
    }
  ](name='RuleHitsTopUrl'),
}

model DescribeFlowTopUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFlowTopUrlResponseBody(name='body'),
}

async function describeFlowTopUrlWithOptions(request: DescribeFlowTopUrlRequest, runtime: Util.RuntimeOptions): DescribeFlowTopUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFlowTopUrl',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFlowTopUrl(request: DescribeFlowTopUrlRequest): DescribeFlowTopUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFlowTopUrlWithOptions(request, runtime);
}

model DescribeInstanceRequest {
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeInstanceResponseBody = {
  details?: {
    aclRuleMaxIpCount?: long(name='AclRuleMaxIpCount'),
    antiScan?: boolean(name='AntiScan'),
    antiScanTemplateMaxCount?: long(name='AntiScanTemplateMaxCount'),
    backendMaxCount?: long(name='BackendMaxCount'),
    baseWafGroup?: boolean(name='BaseWafGroup'),
    baseWafGroupRuleInTemplateMaxCount?: long(name='BaseWafGroupRuleInTemplateMaxCount'),
    baseWafGroupRuleTemplateMaxCount?: long(name='BaseWafGroupRuleTemplateMaxCount'),
    bot?: boolean(name='Bot'),
    botApp?: string(name='BotApp'),
    botTemplateMaxCount?: long(name='BotTemplateMaxCount'),
    botWeb?: string(name='BotWeb'),
    cnameResourceMaxCount?: long(name='CnameResourceMaxCount'),
    customResponse?: boolean(name='CustomResponse'),
    customResponseRuleInTemplateMaxCount?: long(name='CustomResponseRuleInTemplateMaxCount'),
    customResponseTemplateMaxCount?: long(name='CustomResponseTemplateMaxCount'),
    customRule?: boolean(name='CustomRule'),
    customRuleAction?: string(name='CustomRuleAction'),
    customRuleCondition?: string(name='CustomRuleCondition'),
    customRuleInTemplateMaxCount?: long(name='CustomRuleInTemplateMaxCount'),
    customRuleRatelimitor?: string(name='CustomRuleRatelimitor'),
    customRuleTemplateMaxCount?: long(name='CustomRuleTemplateMaxCount'),
    defenseGroupMaxCount?: long(name='DefenseGroupMaxCount'),
    defenseObjectInGroupMaxCount?: long(name='DefenseObjectInGroupMaxCount'),
    defenseObjectInTemplateMaxCount?: long(name='DefenseObjectInTemplateMaxCount'),
    defenseObjectMaxCount?: long(name='DefenseObjectMaxCount'),
    dlp?: boolean(name='Dlp'),
    dlpRuleInTemplateMaxCount?: long(name='DlpRuleInTemplateMaxCount'),
    dlpTemplateMaxCount?: long(name='DlpTemplateMaxCount'),
    exclusiveIp?: boolean(name='ExclusiveIp'),
    gslb?: boolean(name='Gslb'),
    httpPorts?: string(name='HttpPorts'),
    httpsPorts?: string(name='HttpsPorts'),
    ipBlacklist?: boolean(name='IpBlacklist'),
    ipBlacklistIpInRuleMaxCount?: long(name='IpBlacklistIpInRuleMaxCount'),
    ipBlacklistRuleInTemplateMaxCount?: long(name='IpBlacklistRuleInTemplateMaxCount'),
    ipBlacklistTemplateMaxCount?: long(name='IpBlacklistTemplateMaxCount'),
    ipv6?: boolean(name='Ipv6'),
    logService?: boolean(name='LogService'),
    majorProtection?: boolean(name='MajorProtection'),
    majorProtectionTemplateMaxCount?: long(name='MajorProtectionTemplateMaxCount'),
    tamperproof?: boolean(name='Tamperproof'),
    tamperproofRuleInTemplateMaxCount?: long(name='TamperproofRuleInTemplateMaxCount'),
    tamperproofTemplateMaxCount?: long(name='TamperproofTemplateMaxCount'),
    vastIpBlacklistInFileMaxCount?: long(name='VastIpBlacklistInFileMaxCount'),
    vastIpBlacklistInOperationMaxCount?: long(name='VastIpBlacklistInOperationMaxCount'),
    vastIpBlacklistMaxCount?: long(name='VastIpBlacklistMaxCount'),
    whitelist?: boolean(name='Whitelist'),
    whitelistLogical?: string(name='WhitelistLogical'),
    whitelistRuleCondition?: string(name='WhitelistRuleCondition'),
    whitelistRuleInTemplateMaxCount?: long(name='WhitelistRuleInTemplateMaxCount'),
    whitelistTemplateMaxCount?: long(name='WhitelistTemplateMaxCount'),
  }(name='Details'),
  edition?: string(name='Edition'),
  endTime?: long(name='EndTime'),
  inDebt?: string(name='InDebt'),
  instanceId?: string(name='InstanceId'),
  payType?: string(name='PayType'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  startTime?: long(name='StartTime'),
  status?: int32(name='Status'),
}

model DescribeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceResponseBody(name='body'),
}

async function describeInstanceWithOptions(request: DescribeInstanceRequest, runtime: Util.RuntimeOptions): DescribeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstance',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstance(request: DescribeInstanceRequest): DescribeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceWithOptions(request, runtime);
}

model DescribeMajorProtectionBlackIpsRequest {
  instanceId?: string(name='InstanceId'),
  ipLike?: string(name='IpLike'),
  orderBy?: string(name='OrderBy'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  ruleId?: long(name='RuleId'),
  templateId?: long(name='TemplateId'),
}

model DescribeMajorProtectionBlackIpsResponseBody = {
  ipList?: [ 
    {
      description?: string(name='Description'),
      expiredTime?: long(name='ExpiredTime'),
      gmtModified?: long(name='GmtModified'),
      ip?: string(name='Ip'),
      ruleId?: long(name='RuleId'),
      templateId?: long(name='TemplateId'),
    }
  ](name='IpList'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeMajorProtectionBlackIpsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeMajorProtectionBlackIpsResponseBody(name='body'),
}

async function describeMajorProtectionBlackIpsWithOptions(request: DescribeMajorProtectionBlackIpsRequest, runtime: Util.RuntimeOptions): DescribeMajorProtectionBlackIpsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ipLike)) {
    query['IpLike'] = request.ipLike;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMajorProtectionBlackIps',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeMajorProtectionBlackIps(request: DescribeMajorProtectionBlackIpsRequest): DescribeMajorProtectionBlackIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMajorProtectionBlackIpsWithOptions(request, runtime);
}

model DescribePeakTrendRequest {
  endTimestamp?: string(name='EndTimestamp'),
  instanceId?: string(name='InstanceId'),
  interval?: string(name='Interval'),
  resource?: string(name='Resource'),
  startTimestamp?: string(name='StartTimestamp'),
}

model DescribePeakTrendResponseBody = {
  flowChart?: [ 
    {
      aclSum?: long(name='AclSum'),
      antiScanSum?: long(name='AntiScanSum'),
      ccSum?: long(name='CcSum'),
      count?: long(name='Count'),
      index?: long(name='Index'),
      wafSum?: long(name='WafSum'),
    }
  ](name='FlowChart'),
  requestId?: string(name='RequestId'),
}

model DescribePeakTrendResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePeakTrendResponseBody(name='body'),
}

async function describePeakTrendWithOptions(request: DescribePeakTrendRequest, runtime: Util.RuntimeOptions): DescribePeakTrendResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePeakTrend',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePeakTrend(request: DescribePeakTrendRequest): DescribePeakTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePeakTrendWithOptions(request, runtime);
}

model DescribeResourceLogStatusRequest {
  instanceId?: string(name='InstanceId'),
  resources?: string(name='Resources'),
}

model DescribeResourceLogStatusResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      resource?: string(name='Resource'),
      status?: boolean(name='Status'),
    }
  ](name='Result'),
}

model DescribeResourceLogStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResourceLogStatusResponseBody(name='body'),
}

async function describeResourceLogStatusWithOptions(request: DescribeResourceLogStatusRequest, runtime: Util.RuntimeOptions): DescribeResourceLogStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.resources)) {
    query['Resources'] = request.resources;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResourceLogStatus',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeResourceLogStatus(request: DescribeResourceLogStatusRequest): DescribeResourceLogStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceLogStatusWithOptions(request, runtime);
}

model DescribeResourcePortRequest {
  instanceId?: string(name='InstanceId'),
  resourceInstanceId?: string(name='ResourceInstanceId'),
}

model DescribeResourcePortResponseBody = {
  requestId?: string(name='RequestId'),
  resourcePorts?: [ string ](name='ResourcePorts'),
}

model DescribeResourcePortResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResourcePortResponseBody(name='body'),
}

async function describeResourcePortWithOptions(request: DescribeResourcePortRequest, runtime: Util.RuntimeOptions): DescribeResourcePortResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.resourceInstanceId)) {
    query['ResourceInstanceId'] = request.resourceInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResourcePort',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeResourcePort(request: DescribeResourcePortRequest): DescribeResourcePortResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourcePortWithOptions(request, runtime);
}

model DescribeResponseCodeTrendGraphRequest {
  endTimestamp?: string(name='EndTimestamp'),
  instanceId?: string(name='InstanceId'),
  interval?: string(name='Interval'),
  resource?: string(name='Resource'),
  startTimestamp?: string(name='StartTimestamp'),
  type?: string(name='Type'),
}

model DescribeResponseCodeTrendGraphResponseBody = {
  requestId?: string(name='RequestId'),
  responseCodes?: [ 
    {
      code302Pv?: long(name='302Pv'),
      code405Pv?: long(name='405Pv'),
      code499Pv?: long(name='499Pv'),
      code5xxPv?: long(name='5xxPv'),
      index?: long(name='Index'),
    }
  ](name='ResponseCodes'),
}

model DescribeResponseCodeTrendGraphResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResponseCodeTrendGraphResponseBody(name='body'),
}

async function describeResponseCodeTrendGraphWithOptions(request: DescribeResponseCodeTrendGraphRequest, runtime: Util.RuntimeOptions): DescribeResponseCodeTrendGraphResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResponseCodeTrendGraph',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeResponseCodeTrendGraph(request: DescribeResponseCodeTrendGraphRequest): DescribeResponseCodeTrendGraphResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResponseCodeTrendGraphWithOptions(request, runtime);
}

model DescribeRuleGroupsRequest {
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  searchType?: string(name='SearchType'),
  searchValue?: string(name='SearchValue'),
}

model DescribeRuleGroupsResponseBody = {
  requestId?: string(name='RequestId'),
  ruleGroups?: [ 
    {
      gmtModified?: long(name='GmtModified'),
      ruleGroupId?: long(name='RuleGroupId'),
      ruleGroupName?: string(name='RuleGroupName'),
      ruleTotalCount?: int32(name='RuleTotalCount'),
    }
  ](name='RuleGroups'),
  totalCount?: long(name='TotalCount'),
}

model DescribeRuleGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRuleGroupsResponseBody(name='body'),
}

async function describeRuleGroupsWithOptions(request: DescribeRuleGroupsRequest, runtime: Util.RuntimeOptions): DescribeRuleGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchType)) {
    query['SearchType'] = request.searchType;
  }
  if (!Util.isUnset(request.searchValue)) {
    query['SearchValue'] = request.searchValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRuleGroups',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRuleGroups(request: DescribeRuleGroupsRequest): DescribeRuleGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRuleGroupsWithOptions(request, runtime);
}

model DescribeRuleHitsTopClientIpRequest {
  endTimestamp?: string(name='EndTimestamp'),
  instanceId?: string(name='InstanceId'),
  resource?: string(name='Resource'),
  ruleType?: string(name='RuleType'),
  startTimestamp?: string(name='StartTimestamp'),
}

model DescribeRuleHitsTopClientIpResponseBody = {
  requestId?: string(name='RequestId'),
  ruleHitsTopClientIp?: [ 
    {
      clientIp?: string(name='ClientIp'),
      count?: long(name='Count'),
    }
  ](name='RuleHitsTopClientIp'),
}

model DescribeRuleHitsTopClientIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRuleHitsTopClientIpResponseBody(name='body'),
}

async function describeRuleHitsTopClientIpWithOptions(request: DescribeRuleHitsTopClientIpRequest, runtime: Util.RuntimeOptions): DescribeRuleHitsTopClientIpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.ruleType)) {
    query['RuleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRuleHitsTopClientIp',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRuleHitsTopClientIp(request: DescribeRuleHitsTopClientIpRequest): DescribeRuleHitsTopClientIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRuleHitsTopClientIpWithOptions(request, runtime);
}

model DescribeRuleHitsTopResourceRequest {
  endTimestamp?: string(name='EndTimestamp'),
  instanceId?: string(name='InstanceId'),
  ruleType?: string(name='RuleType'),
  startTimestamp?: string(name='StartTimestamp'),
}

model DescribeRuleHitsTopResourceResponseBody = {
  requestId?: string(name='RequestId'),
  ruleHitsTopResource?: [ 
    {
      count?: long(name='Count'),
      resource?: string(name='Resource'),
    }
  ](name='RuleHitsTopResource'),
}

model DescribeRuleHitsTopResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRuleHitsTopResourceResponseBody(name='body'),
}

async function describeRuleHitsTopResourceWithOptions(request: DescribeRuleHitsTopResourceRequest, runtime: Util.RuntimeOptions): DescribeRuleHitsTopResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ruleType)) {
    query['RuleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRuleHitsTopResource',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRuleHitsTopResource(request: DescribeRuleHitsTopResourceRequest): DescribeRuleHitsTopResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRuleHitsTopResourceWithOptions(request, runtime);
}

model DescribeRuleHitsTopRuleIdRequest {
  endTimestamp?: string(name='EndTimestamp'),
  instanceId?: string(name='InstanceId'),
  resource?: string(name='Resource'),
  ruleType?: string(name='RuleType'),
  startTimestamp?: string(name='StartTimestamp'),
}

model DescribeRuleHitsTopRuleIdResponseBody = {
  requestId?: string(name='RequestId'),
  ruleHitsTopRuleId?: [ 
    {
      count?: long(name='Count'),
      resource?: string(name='Resource'),
      ruleId?: string(name='RuleId'),
    }
  ](name='RuleHitsTopRuleId'),
}

model DescribeRuleHitsTopRuleIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRuleHitsTopRuleIdResponseBody(name='body'),
}

async function describeRuleHitsTopRuleIdWithOptions(request: DescribeRuleHitsTopRuleIdRequest, runtime: Util.RuntimeOptions): DescribeRuleHitsTopRuleIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.ruleType)) {
    query['RuleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRuleHitsTopRuleId',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRuleHitsTopRuleId(request: DescribeRuleHitsTopRuleIdRequest): DescribeRuleHitsTopRuleIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRuleHitsTopRuleIdWithOptions(request, runtime);
}

model DescribeRuleHitsTopTuleTypeRequest {
  endTimestamp?: string(name='EndTimestamp'),
  instanceId?: string(name='InstanceId'),
  resource?: string(name='Resource'),
  startTimestamp?: string(name='StartTimestamp'),
}

model DescribeRuleHitsTopTuleTypeResponseBody = {
  requestId?: string(name='RequestId'),
  ruleHitsTopTuleType?: [ 
    {
      count?: long(name='Count'),
      ruleType?: string(name='RuleType'),
    }
  ](name='RuleHitsTopTuleType'),
}

model DescribeRuleHitsTopTuleTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRuleHitsTopTuleTypeResponseBody(name='body'),
}

async function describeRuleHitsTopTuleTypeWithOptions(request: DescribeRuleHitsTopTuleTypeRequest, runtime: Util.RuntimeOptions): DescribeRuleHitsTopTuleTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRuleHitsTopTuleType',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRuleHitsTopTuleType(request: DescribeRuleHitsTopTuleTypeRequest): DescribeRuleHitsTopTuleTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRuleHitsTopTuleTypeWithOptions(request, runtime);
}

model DescribeRuleHitsTopUaRequest {
  endTimestamp?: string(name='EndTimestamp'),
  instanceId?: string(name='InstanceId'),
  resource?: string(name='Resource'),
  startTimestamp?: string(name='StartTimestamp'),
}

model DescribeRuleHitsTopUaResponseBody = {
  requestId?: string(name='RequestId'),
  ruleHitsTopUa?: [ 
    {
      count?: long(name='Count'),
      ua?: string(name='Ua'),
    }
  ](name='RuleHitsTopUa'),
}

model DescribeRuleHitsTopUaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRuleHitsTopUaResponseBody(name='body'),
}

async function describeRuleHitsTopUaWithOptions(request: DescribeRuleHitsTopUaRequest, runtime: Util.RuntimeOptions): DescribeRuleHitsTopUaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRuleHitsTopUa',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRuleHitsTopUa(request: DescribeRuleHitsTopUaRequest): DescribeRuleHitsTopUaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRuleHitsTopUaWithOptions(request, runtime);
}

model DescribeRuleHitsTopUrlRequest {
  endTimestamp?: string(name='EndTimestamp'),
  instanceId?: string(name='InstanceId'),
  resource?: string(name='Resource'),
  ruleType?: string(name='RuleType'),
  startTimestamp?: string(name='StartTimestamp'),
}

model DescribeRuleHitsTopUrlResponseBody = {
  requestId?: string(name='RequestId'),
  ruleHitsTopUrl?: [ 
    {
      count?: long(name='Count'),
      url?: string(name='Url'),
    }
  ](name='RuleHitsTopUrl'),
}

model DescribeRuleHitsTopUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRuleHitsTopUrlResponseBody(name='body'),
}

async function describeRuleHitsTopUrlWithOptions(request: DescribeRuleHitsTopUrlRequest, runtime: Util.RuntimeOptions): DescribeRuleHitsTopUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.ruleType)) {
    query['RuleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRuleHitsTopUrl',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRuleHitsTopUrl(request: DescribeRuleHitsTopUrlRequest): DescribeRuleHitsTopUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRuleHitsTopUrlWithOptions(request, runtime);
}

model DescribeTemplateResourcesRequest {
  instanceId?: string(name='InstanceId'),
  resourceType?: string(name='ResourceType'),
  templateId?: long(name='TemplateId'),
}

model DescribeTemplateResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  resources?: [ string ](name='Resources'),
}

model DescribeTemplateResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTemplateResourcesResponseBody(name='body'),
}

async function describeTemplateResourcesWithOptions(request: DescribeTemplateResourcesRequest, runtime: Util.RuntimeOptions): DescribeTemplateResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTemplateResources',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTemplateResources(request: DescribeTemplateResourcesRequest): DescribeTemplateResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTemplateResourcesWithOptions(request, runtime);
}

model DescribeVisitTopIpRequest {
  endTimestamp?: string(name='EndTimestamp'),
  instanceId?: string(name='InstanceId'),
  resource?: string(name='Resource'),
  startTimestamp?: string(name='StartTimestamp'),
}

model DescribeVisitTopIpResponseBody = {
  requestId?: string(name='RequestId'),
  topIp?: [ 
    {
      area?: string(name='Area'),
      count?: long(name='Count'),
      ip?: string(name='Ip'),
      isp?: string(name='Isp'),
    }
  ](name='TopIp'),
}

model DescribeVisitTopIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVisitTopIpResponseBody(name='body'),
}

async function describeVisitTopIpWithOptions(request: DescribeVisitTopIpRequest, runtime: Util.RuntimeOptions): DescribeVisitTopIpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVisitTopIp',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVisitTopIp(request: DescribeVisitTopIpRequest): DescribeVisitTopIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVisitTopIpWithOptions(request, runtime);
}

model DescribeVisitUasRequest {
  endTimestamp?: string(name='EndTimestamp'),
  instanceId?: string(name='InstanceId'),
  resource?: string(name='Resource'),
  startTimestamp?: string(name='StartTimestamp'),
}

model DescribeVisitUasResponseBody = {
  requestId?: string(name='RequestId'),
  uas?: [ 
    {
      count?: long(name='Count'),
      ua?: string(name='Ua'),
    }
  ](name='Uas'),
}

model DescribeVisitUasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVisitUasResponseBody(name='body'),
}

async function describeVisitUasWithOptions(request: DescribeVisitUasRequest, runtime: Util.RuntimeOptions): DescribeVisitUasResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVisitUas',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVisitUas(request: DescribeVisitUasRequest): DescribeVisitUasResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVisitUasWithOptions(request, runtime);
}

model DescribeWafSourceIpSegmentRequest {
  instanceId?: string(name='InstanceId'),
}

model DescribeWafSourceIpSegmentResponseBody = {
  requestId?: string(name='RequestId'),
  wafSourceIp?: {
    IPv4?: [ string ](name='IPv4'),
    IPv6?: [ string ](name='IPv6'),
  }(name='WafSourceIp'),
}

model DescribeWafSourceIpSegmentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWafSourceIpSegmentResponseBody(name='body'),
}

async function describeWafSourceIpSegmentWithOptions(request: DescribeWafSourceIpSegmentRequest, runtime: Util.RuntimeOptions): DescribeWafSourceIpSegmentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWafSourceIpSegment',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWafSourceIpSegment(request: DescribeWafSourceIpSegmentRequest): DescribeWafSourceIpSegmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWafSourceIpSegmentWithOptions(request, runtime);
}

model ModifyDefenseResourceGroupRequest {
  addList?: string(name='AddList'),
  deleteList?: string(name='DeleteList'),
  description?: string(name='Description'),
  groupName?: string(name='GroupName'),
  instanceId?: string(name='InstanceId'),
}

model ModifyDefenseResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDefenseResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDefenseResourceGroupResponseBody(name='body'),
}

async function modifyDefenseResourceGroupWithOptions(request: ModifyDefenseResourceGroupRequest, runtime: Util.RuntimeOptions): ModifyDefenseResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addList)) {
    query['AddList'] = request.addList;
  }
  if (!Util.isUnset(request.deleteList)) {
    query['DeleteList'] = request.deleteList;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDefenseResourceGroup',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDefenseResourceGroup(request: ModifyDefenseResourceGroupRequest): ModifyDefenseResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDefenseResourceGroupWithOptions(request, runtime);
}

model ModifyDefenseRuleRequest {
  defenseScene?: string(name='DefenseScene'),
  instanceId?: string(name='InstanceId'),
  rules?: string(name='Rules'),
  templateId?: long(name='TemplateId'),
}

model ModifyDefenseRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDefenseRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDefenseRuleResponseBody(name='body'),
}

async function modifyDefenseRuleWithOptions(request: ModifyDefenseRuleRequest, runtime: Util.RuntimeOptions): ModifyDefenseRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defenseScene)) {
    query['DefenseScene'] = request.defenseScene;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.rules)) {
    query['Rules'] = request.rules;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDefenseRule',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDefenseRule(request: ModifyDefenseRuleRequest): ModifyDefenseRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDefenseRuleWithOptions(request, runtime);
}

model ModifyDefenseRuleStatusRequest {
  instanceId?: string(name='InstanceId'),
  ruleId?: long(name='RuleId'),
  ruleStatus?: int32(name='RuleStatus'),
  templateId?: long(name='TemplateId'),
}

model ModifyDefenseRuleStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDefenseRuleStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDefenseRuleStatusResponseBody(name='body'),
}

async function modifyDefenseRuleStatusWithOptions(request: ModifyDefenseRuleStatusRequest, runtime: Util.RuntimeOptions): ModifyDefenseRuleStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.ruleStatus)) {
    query['RuleStatus'] = request.ruleStatus;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDefenseRuleStatus',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDefenseRuleStatus(request: ModifyDefenseRuleStatusRequest): ModifyDefenseRuleStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDefenseRuleStatusWithOptions(request, runtime);
}

model ModifyDefenseTemplateRequest {
  description?: string(name='Description'),
  instanceId?: string(name='InstanceId'),
  templateId?: long(name='TemplateId'),
  templateName?: string(name='TemplateName'),
}

model ModifyDefenseTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDefenseTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDefenseTemplateResponseBody(name='body'),
}

async function modifyDefenseTemplateWithOptions(request: ModifyDefenseTemplateRequest, runtime: Util.RuntimeOptions): ModifyDefenseTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDefenseTemplate',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDefenseTemplate(request: ModifyDefenseTemplateRequest): ModifyDefenseTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDefenseTemplateWithOptions(request, runtime);
}

model ModifyDefenseTemplateStatusRequest {
  instanceId?: string(name='InstanceId'),
  templateId?: long(name='TemplateId'),
  templateStatus?: int32(name='TemplateStatus'),
}

model ModifyDefenseTemplateStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDefenseTemplateStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDefenseTemplateStatusResponseBody(name='body'),
}

async function modifyDefenseTemplateStatusWithOptions(request: ModifyDefenseTemplateStatusRequest, runtime: Util.RuntimeOptions): ModifyDefenseTemplateStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.templateStatus)) {
    query['TemplateStatus'] = request.templateStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDefenseTemplateStatus',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDefenseTemplateStatus(request: ModifyDefenseTemplateStatusRequest): ModifyDefenseTemplateStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDefenseTemplateStatusWithOptions(request, runtime);
}

model ModifyDomainRequest {
  accessType?: string(name='AccessType'),
  domain?: string(name='Domain'),
  instanceId?: string(name='InstanceId'),
  listen?: {
    certId?: string(name='CertId'),
    cipherSuite?: int32(name='CipherSuite'),
    customCiphers?: [ string ](name='CustomCiphers'),
    enableTLSv3?: boolean(name='EnableTLSv3'),
    exclusiveIp?: boolean(name='ExclusiveIp'),
    focusHttps?: boolean(name='FocusHttps'),
    http2Enabled?: boolean(name='Http2Enabled'),
    httpPorts?: [ int32 ](name='HttpPorts'),
    httpsPorts?: [ int32 ](name='HttpsPorts'),
    IPv6Enabled?: boolean(name='IPv6Enabled'),
    protectionResource?: string(name='ProtectionResource'),
    TLSVersion?: string(name='TLSVersion'),
    xffHeaderMode?: int32(name='XffHeaderMode'),
    xffHeaders?: [ string ](name='XffHeaders'),
  }(name='Listen'),
  redirect?: {
    backends?: [ string ](name='Backends'),
    connectTimeout?: int32(name='ConnectTimeout'),
    focusHttpBackend?: boolean(name='FocusHttpBackend'),
    loadbalance?: string(name='Loadbalance'),
    readTimeout?: int32(name='ReadTimeout'),
    requestHeaders?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='RequestHeaders'),
    sniEnabled?: boolean(name='SniEnabled'),
    sniHost?: string(name='SniHost'),
    writeTimeout?: int32(name='WriteTimeout'),
  }(name='Redirect'),
  regionId?: string(name='RegionId'),
}

model ModifyDomainShrinkRequest {
  accessType?: string(name='AccessType'),
  domain?: string(name='Domain'),
  instanceId?: string(name='InstanceId'),
  listenShrink?: string(name='Listen'),
  redirectShrink?: string(name='Redirect'),
  regionId?: string(name='RegionId'),
}

model ModifyDomainResponseBody = {
  domainInfo?: {
    cname?: string(name='Cname'),
    domain?: string(name='Domain'),
  }(name='DomainInfo'),
  requestId?: string(name='RequestId'),
}

model ModifyDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDomainResponseBody(name='body'),
}

async function modifyDomainWithOptions(tmpReq: ModifyDomainRequest, runtime: Util.RuntimeOptions): ModifyDomainResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyDomainShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.listen)) {
    request.listenShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.listen, 'Listen', 'json');
  }
  if (!Util.isUnset(tmpReq.redirect)) {
    request.redirectShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.redirect, 'Redirect', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.accessType)) {
    query['AccessType'] = request.accessType;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.listenShrink)) {
    query['Listen'] = request.listenShrink;
  }
  if (!Util.isUnset(request.redirectShrink)) {
    query['Redirect'] = request.redirectShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDomain',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDomain(request: ModifyDomainRequest): ModifyDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDomainWithOptions(request, runtime);
}

model ModifyMajorProtectionBlackIpRequest {
  description?: string(name='Description'),
  expiredTime?: long(name='ExpiredTime'),
  instanceId?: string(name='InstanceId'),
  ipList?: string(name='IpList'),
  ruleId?: long(name='RuleId'),
  templateId?: long(name='TemplateId'),
}

model ModifyMajorProtectionBlackIpResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyMajorProtectionBlackIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyMajorProtectionBlackIpResponseBody(name='body'),
}

async function modifyMajorProtectionBlackIpWithOptions(request: ModifyMajorProtectionBlackIpRequest, runtime: Util.RuntimeOptions): ModifyMajorProtectionBlackIpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.expiredTime)) {
    query['ExpiredTime'] = request.expiredTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ipList)) {
    query['IpList'] = request.ipList;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyMajorProtectionBlackIp',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyMajorProtectionBlackIp(request: ModifyMajorProtectionBlackIpRequest): ModifyMajorProtectionBlackIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyMajorProtectionBlackIpWithOptions(request, runtime);
}

model ModifyResourceLogStatusRequest {
  instanceId?: string(name='InstanceId'),
  resource?: string(name='Resource'),
  status?: boolean(name='Status'),
}

model ModifyResourceLogStatusResponseBody = {
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model ModifyResourceLogStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyResourceLogStatusResponseBody(name='body'),
}

async function modifyResourceLogStatusWithOptions(request: ModifyResourceLogStatusRequest, runtime: Util.RuntimeOptions): ModifyResourceLogStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyResourceLogStatus',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyResourceLogStatus(request: ModifyResourceLogStatusRequest): ModifyResourceLogStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyResourceLogStatusWithOptions(request, runtime);
}

model ModifyTemplateResourcesRequest {
  bindResourceGroups?: [ string ](name='BindResourceGroups'),
  bindResources?: [ string ](name='BindResources'),
  instanceId?: string(name='InstanceId'),
  templateId?: long(name='TemplateId'),
  unbindResourceGroups?: [ string ](name='UnbindResourceGroups'),
  unbindResources?: [ string ](name='UnbindResources'),
}

model ModifyTemplateResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyTemplateResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyTemplateResourcesResponseBody(name='body'),
}

async function modifyTemplateResourcesWithOptions(request: ModifyTemplateResourcesRequest, runtime: Util.RuntimeOptions): ModifyTemplateResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bindResourceGroups)) {
    query['BindResourceGroups'] = request.bindResourceGroups;
  }
  if (!Util.isUnset(request.bindResources)) {
    query['BindResources'] = request.bindResources;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.unbindResourceGroups)) {
    query['UnbindResourceGroups'] = request.unbindResourceGroups;
  }
  if (!Util.isUnset(request.unbindResources)) {
    query['UnbindResources'] = request.unbindResources;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyTemplateResources',
    version = '2021-10-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyTemplateResources(request: ModifyTemplateResourcesRequest): ModifyTemplateResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTemplateResourcesWithOptions(request, runtime);
}

