/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Drds';
  @version = '2017-10-16';
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-1' = 'drds.ap-southeast-1.aliyuncs.com',
    'ap-northeast-2-pop' = 'drds.ap-southeast-1.aliyuncs.com',
    'ap-south-1' = 'drds.ap-southeast-1.aliyuncs.com',
    'ap-southeast-2' = 'drds.ap-southeast-1.aliyuncs.com',
    'ap-southeast-3' = 'drds.ap-southeast-1.aliyuncs.com',
    'ap-southeast-5' = 'drds.ap-southeast-1.aliyuncs.com',
    'cn-beijing-finance-1' = 'drds.aliyuncs.com',
    'cn-beijing-finance-pop' = 'drds.aliyuncs.com',
    'cn-beijing-gov-1' = 'drds.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'drds.aliyuncs.com',
    'cn-chengdu' = 'drds.aliyuncs.com',
    'cn-edge-1' = 'drds.aliyuncs.com',
    'cn-fujian' = 'drds.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'drds.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'drds.aliyuncs.com',
    'cn-hangzhou-finance' = 'drds.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'drds.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'drds.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'drds.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'drds.aliyuncs.com',
    'cn-hangzhou-test-306' = 'drds.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'drds.aliyuncs.com',
    'cn-qingdao-nebula' = 'drds.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'drds.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'drds.aliyuncs.com',
    'cn-shanghai-inner' = 'drds.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'drds.aliyuncs.com',
    'cn-shenzhen-inner' = 'drds.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'drds.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'drds.aliyuncs.com',
    'cn-wuhan' = 'drds.aliyuncs.com',
    'cn-yushanfang' = 'drds.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'drds.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'drds.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'drds.aliyuncs.com',
    'eu-central-1' = 'drds.ap-southeast-1.aliyuncs.com',
    'eu-west-1' = 'drds.ap-southeast-1.aliyuncs.com',
    'eu-west-1-oxs' = 'drds.ap-southeast-1.aliyuncs.com',
    'me-east-1' = 'drds.ap-southeast-1.aliyuncs.com',
    'rus-west-1-pop' = 'drds.ap-southeast-1.aliyuncs.com',
    'us-west-1' = 'drds.ap-southeast-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CreateDrdsAccountRequest {
  dbName?: string(name='DbName', example='testdb', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', example='drdsusrzimk2****', position='Query'),
  password?: string(name='Password', example='Test!123', position='Query'),
  userName: string(name='UserName', example='testaccount', position='Query'),
}

model CreateDrdsAccountResponseBody = {
  requestId?: string(name='RequestId', example='890BB376-5746-4145-A088-4E610EF3WERT'),
  success?: boolean(name='Success', example='true'),
}

model CreateDrdsAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDrdsAccountResponseBody(name='body'),
}

async function createDrdsAccount(request: CreateDrdsAccountRequest): CreateDrdsAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDrdsAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateDrdsDBRequest {
  dbName: string(name='DbName', example='test123', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', example='drdssen12****', position='Query'),
  encode: string(name='Encode', example='utf8', position='Query'),
  password: string(name='Password', example='*********', position='Query'),
  rdsInstances: string(name='RdsInstances', example='[“rdsId1”, “rdsId2”]', position='Query'),
}

model CreateDrdsDBResponseBody = {
  requestId?: string(name='RequestId', example='8734773E-7B21-4A22-9106-CBD245F8TG57'),
  success?: boolean(name='Success', example='true'),
}

model CreateDrdsDBResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDrdsDBResponseBody(name='body'),
}

async function createDrdsDB(request: CreateDrdsDBRequest): CreateDrdsDBResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDrdsDB', 'POST', '/', 'json', false, 'json', request);
}

model CreateDrdsInstanceRequest {
  clientToken?: string(name='ClientToken', example='DEWCEWQA', position='Query'),
  description?: string(name='Description', example='This is a test instance', position='Query'),
  duration?: int32(name='Duration', example='5', position='Query'),
  instanceSeries?: string(name='InstanceSeries', example='drds.sn2.4c16g', position='Query'),
  isAutoRenew?: boolean(name='IsAutoRenew', example='true', position='Query'),
  isHa?: boolean(name='IsHa', example='false', position='Query'),
  payType: string(name='PayType', example='drdsPre', position='Query'),
  pricingCycle?: string(name='PricingCycle', example='month', position='Query'),
  quantity: int32(name='Quantity', example='1', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  specification: string(name='Specification', example='drds.sn2.4c8g.8C16G', position='Query'),
  type: string(name='Type', example='PRIVATE', position='Query'),
  vpcId?: string(name='VpcId', example='vpc-en23cxsel1', position='Query'),
  vswitchId?: string(name='VswitchId', example='vsw-ewk32dsk', position='Query'),
  zoneId: string(name='ZoneId', example='cn-hangzhou-e', position='Query'),
}

model CreateDrdsInstanceResponseBody = {
  data?: {
    drdsInstanceIdList?: {
      drdsInstanceId?: [ string ](name='DrdsInstanceId')
    }(name='DrdsInstanceIdList'),
    orderId?: long(name='OrderId', example='2334632414'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='FF13E47D-4E38-4A5A-BA68-32A554RTY67H'),
  success?: boolean(name='Success', example='true'),
}

model CreateDrdsInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDrdsInstanceResponseBody(name='body'),
}

async function createDrdsInstance(request: CreateDrdsInstanceRequest): CreateDrdsInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDrdsInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateReadOnlyAccountRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  password: string(name='password', position='Query'),
}

model CreateReadOnlyAccountResponseBody = {
  data?: {
    accountName?: string(name='AccountName'),
    dbName?: string(name='DbName'),
    drdsInstanceId?: string(name='DrdsInstanceId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateReadOnlyAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateReadOnlyAccountResponseBody(name='body'),
}

async function createReadOnlyAccount(request: CreateReadOnlyAccountRequest): CreateReadOnlyAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateReadOnlyAccount', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDrdsDBRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model DeleteDrdsDBResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteDrdsDBResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDrdsDBResponseBody(name='body'),
}

async function deleteDrdsDB(request: DeleteDrdsDBRequest): DeleteDrdsDBResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDrdsDB', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFailedDrdsDBRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model DeleteFailedDrdsDBResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteFailedDrdsDBResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFailedDrdsDBResponseBody(name='body'),
}

async function deleteFailedDrdsDB(request: DeleteFailedDrdsDBRequest): DeleteFailedDrdsDBResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFailedDrdsDB', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCreateDrdsInstanceStatusRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model DescribeCreateDrdsInstanceStatusResponseBody = {
  data?: {
    status?: string(name='Status'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeCreateDrdsInstanceStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCreateDrdsInstanceStatusResponseBody(name='body'),
}

async function describeCreateDrdsInstanceStatus(request: DescribeCreateDrdsInstanceStatusRequest): DescribeCreateDrdsInstanceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCreateDrdsInstanceStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDrdsDBRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model DescribeDrdsDBResponseBody = {
  data?: {
    createTime?: string(name='CreateTime'),
    dbName?: string(name='DbName'),
    mode?: string(name='Mode'),
    msg?: string(name='Msg'),
    status?: int32(name='Status'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsDBResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDrdsDBResponseBody(name='body'),
}

async function describeDrdsDB(request: DescribeDrdsDBRequest): DescribeDrdsDBResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDrdsDB', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDrdsDBIpWhiteListRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  groupName?: string(name='GroupName', position='Query'),
}

model DescribeDrdsDBIpWhiteListResponseBody = {
  data?: {
    ipWhiteList?: {
      ip?: [ string ](name='Ip')
    }(name='IpWhiteList'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsDBIpWhiteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDrdsDBIpWhiteListResponseBody(name='body'),
}

async function describeDrdsDBIpWhiteList(request: DescribeDrdsDBIpWhiteListRequest): DescribeDrdsDBIpWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDrdsDBIpWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDrdsDBsRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model DescribeDrdsDBsResponseBody = {
  data?: {
    db?: [ 
    {
      createTime?: string(name='CreateTime'),
      dbName?: string(name='DbName'),
      mode?: string(name='Mode'),
      msg?: string(name='Msg'),
      status?: int32(name='Status'),
    }
  ](name='Db')
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsDBsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDrdsDBsResponseBody(name='body'),
}

async function describeDrdsDBs(request: DescribeDrdsDBsRequest): DescribeDrdsDBsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDrdsDBs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDrdsInstanceRequest {
  drdsInstanceId: string(name='DrdsInstanceId', example='drdshbga33pe****', position='Query'),
}

model DescribeDrdsInstanceResponseBody = {
  data?: {
    createTime?: long(name='CreateTime', example='1568620311000'),
    description?: string(name='Description', example='111111'),
    drdsInstanceId?: string(name='DrdsInstanceId', example='drdshbga33pe****'),
    networkType?: string(name='NetworkType', example='VPC'),
    regionId?: string(name='RegionId', example='China (Hangzhou)'),
    specification?: string(name='Specification', example='drds.sn1.4c8g.8C16G'),
    status?: string(name='Status', example='0'),
    type?: string(name='Type', example='0'),
    version?: long(name='Version', example='0'),
    vips?: {
      vip?: [ 
      {
        ip?: string(name='IP', example='1.2.XX.XX'),
        port?: string(name='Port', example='3306'),
        type?: string(name='Type', example='VPC'),
        vpcId?: string(name='VpcId', example='vpc-en23cx****'),
        vswitchId?: string(name='VswitchId', example='vsw-ewk3****'),
      }
    ](name='Vip')
    }(name='Vips'),
    vpcCloudInstanceId?: string(name='VpcCloudInstanceId', example='oogbx6c2atj****'),
    zoneId?: string(name='ZoneId', example='cn-hangzhou-e'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='B4F76641-BA45-4320-BE7C-9C62CFDAC9B2'),
  success?: boolean(name='Success', example='true'),
}

model DescribeDrdsInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDrdsInstanceResponseBody(name='body'),
}

async function describeDrdsInstance(request: DescribeDrdsInstanceRequest): DescribeDrdsInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDrdsInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDrdsInstanceDbMonitorRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  key: string(name='Key', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeDrdsInstanceDbMonitorResponseBody = {
  data?: {
    partialPerformanceData?: [ 
    {
      key?: string(name='Key'),
      unit?: string(name='Unit'),
      values?: {
        performanceValue?: [ 
        {
          date?: long(name='Date'),
          value?: string(name='Value'),
        }
      ](name='PerformanceValue')
      }(name='Values'),
    }
  ](name='PartialPerformanceData')
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsInstanceDbMonitorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDrdsInstanceDbMonitorResponseBody(name='body'),
}

async function describeDrdsInstanceDbMonitor(request: DescribeDrdsInstanceDbMonitorRequest): DescribeDrdsInstanceDbMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDrdsInstanceDbMonitor', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDrdsInstanceMonitorRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  key: string(name='Key', position='Query'),
  periodMultiple?: int32(name='PeriodMultiple', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeDrdsInstanceMonitorResponseBody = {
  data?: {
    partialPerformanceData?: [ 
    {
      key?: string(name='Key'),
      unit?: string(name='Unit'),
      values?: {
        performanceValue?: [ 
        {
          date?: long(name='Date'),
          value?: string(name='Value'),
        }
      ](name='PerformanceValue')
      }(name='Values'),
    }
  ](name='PartialPerformanceData')
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsInstanceMonitorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDrdsInstanceMonitorResponseBody(name='body'),
}

async function describeDrdsInstanceMonitor(request: DescribeDrdsInstanceMonitorRequest): DescribeDrdsInstanceMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDrdsInstanceMonitor', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDrdsInstanceNetInfoForInnerRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model DescribeDrdsInstanceNetInfoForInnerResponseBody = {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  netInfos?: {
    netInfo?: [ 
    {
      ip?: string(name='IP'),
      isForVpc?: boolean(name='IsForVpc'),
      port?: string(name='Port'),
      type?: string(name='Type'),
    }
  ](name='NetInfo')
  }(name='NetInfos'),
  networkType?: string(name='NetworkType'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsInstanceNetInfoForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDrdsInstanceNetInfoForInnerResponseBody(name='body'),
}

async function describeDrdsInstanceNetInfoForInner(request: DescribeDrdsInstanceNetInfoForInnerRequest): DescribeDrdsInstanceNetInfoForInnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDrdsInstanceNetInfoForInner', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDrdsInstancesRequest {
  regionId: string(name='RegionId', position='Query'),
  tags?: string(name='Tags', position='Query'),
  type?: string(name='Type', position='Query'),
}

model DescribeDrdsInstancesResponseBody = {
  data?: {
    instance?: [ 
    {
      createTime?: long(name='CreateTime'),
      description?: string(name='Description'),
      drdsInstanceId?: string(name='DrdsInstanceId'),
      instRole?: string(name='InstRole'),
      masterInstId?: string(name='MasterInstId'),
      networkType?: string(name='NetworkType'),
      regionId?: string(name='RegionId'),
      slaveInstId?: {
        instId?: [ string ](name='instId')
      }(name='SlaveInstId'),
      status?: string(name='Status'),
      type?: string(name='Type'),
      version?: long(name='Version'),
      vips?: {
        vip?: [ 
        {
          ip?: string(name='IP'),
          port?: string(name='Port'),
          type?: string(name='Type'),
          vpcId?: string(name='VpcId'),
          vswitchId?: string(name='VswitchId'),
        }
      ](name='Vip')
      }(name='Vips'),
      vpcCloudInstanceId?: string(name='VpcCloudInstanceId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Instance')
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDrdsInstancesResponseBody(name='body'),
}

async function describeDrdsInstances(request: DescribeDrdsInstancesRequest): DescribeDrdsInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDrdsInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRdsListRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeRdsListResponseBody = {
  data?: {
    rdsInstance?: [ 
    {
      connectUrl?: string(name='ConnectUrl'),
      dbType?: string(name='DbType'),
      instanceId?: int32(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      instanceStatus?: string(name='InstanceStatus'),
      port?: int32(name='Port'),
      readOnlyChildren?: {
        child?: [ 
        {
          connectUrl?: string(name='ConnectUrl'),
          dbType?: string(name='DbType'),
          instanceId?: string(name='InstanceId'),
          instanceName?: string(name='InstanceName'),
          instanceStatus?: string(name='InstanceStatus'),
          readWeight?: int32(name='ReadWeight'),
          port?: int32(name='port'),
        }
      ](name='Child')
      }(name='ReadOnlyChildren'),
      readWeight?: int32(name='ReadWeight'),
    }
  ](name='RdsInstance')
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRdsListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRdsListResponseBody(name='body'),
}

async function describeRdsList(request: DescribeRdsListRequest): DescribeRdsListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRdsList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeReadOnlyAccountRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model DescribeReadOnlyAccountResponseBody = {
  data?: {
    accountName?: string(name='AccountName'),
    dbName?: string(name='DbName'),
    drdsInstanceId?: string(name='DrdsInstanceId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeReadOnlyAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeReadOnlyAccountResponseBody(name='body'),
}

async function describeReadOnlyAccount(request: DescribeReadOnlyAccountRequest): DescribeReadOnlyAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeReadOnlyAccount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
}

model DescribeRegionsResponseBody = {
  drdsRegions?: {
    drdsRegion?: [ 
    {
      instanceSeriesList?: {
        instanceSeries?: [ 
        {
          seriesId?: string(name='SeriesId'),
          seriesName?: string(name='SeriesName'),
          specList?: {
            spec?: [ 
            {
              specId?: string(name='SpecId'),
              specName?: string(name='SpecName'),
            }
          ](name='Spec')
          }(name='SpecList'),
        }
      ](name='InstanceSeries')
      }(name='InstanceSeriesList'),
      regionId?: string(name='RegionId'),
      regionName?: string(name='RegionName'),
      zoneId?: string(name='ZoneId'),
      zoneName?: string(name='ZoneName'),
    }
  ](name='DrdsRegion')
  }(name='DrdsRegions'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeShardDBsRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model DescribeShardDBsResponseBody = {
  data?: {
    dbIntancePair?: [ 
    {
      groupName?: string(name='GroupName'),
      instanceName?: string(name='InstanceName'),
      subDbName?: string(name='SubDbName'),
    }
  ](name='DbIntancePair')
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeShardDBsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeShardDBsResponseBody(name='body'),
}

async function describeShardDBs(request: DescribeShardDBsRequest): DescribeShardDBsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeShardDBs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeShardDbConnectionInfoRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  subDbName: string(name='SubDbName', position='Query'),
}

model DescribeShardDbConnectionInfoResponseBody = {
  connectionInfo?: {
    instanceName?: string(name='InstanceName'),
    instanceUrl?: string(name='InstanceUrl'),
    blockingTimeout?: int32(name='blockingTimeout'),
    connectionProperties?: string(name='connectionProperties'),
    dbStatus?: string(name='dbStatus'),
    dbType?: string(name='dbType'),
    idleTimeOut?: int32(name='idleTimeOut'),
    maxPoolSize?: int32(name='maxPoolSize'),
    minPoolSize?: int32(name='minPoolSize'),
    preparedStatementCacheSize?: int32(name='preparedStatementCacheSize'),
    subDbName?: string(name='subDbName'),
    userName?: string(name='userName'),
  }(name='ConnectionInfo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeShardDbConnectionInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeShardDbConnectionInfoResponseBody(name='body'),
}

async function describeShardDbConnectionInfo(request: DescribeShardDbConnectionInfoRequest): DescribeShardDbConnectionInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeShardDbConnectionInfo', 'POST', '/', 'json', false, 'json', request);
}

model EnableInstanceRequest {
  backupId?: string(name='BackupId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  dbInstanceClass?: string(name='DbInstanceClass', position='Query'),
  drdsInstanceId?: string(name='DrdsInstanceId', position='Query'),
  engineVersion?: string(name='EngineVersion', position='Query'),
  restoreTime?: string(name='RestoreTime', position='Query'),
  sourceDbInstId: string(name='SourceDbInstId', position='Query'),
  switchId?: string(name='SwitchId', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model EnableInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model EnableInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableInstanceResponseBody(name='body'),
}

async function enableInstance(request: EnableInstanceRequest): EnableInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableInstance', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDrdsDBPasswdRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  newPasswd: string(name='NewPasswd', position='Query'),
}

model ModifyDrdsDBPasswdResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyDrdsDBPasswdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDrdsDBPasswdResponseBody(name='body'),
}

async function modifyDrdsDBPasswd(request: ModifyDrdsDBPasswdRequest): ModifyDrdsDBPasswdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDrdsDBPasswd', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDrdsInstanceDescriptionRequest {
  description: string(name='Description', example='This is a test instance.', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', example='drdshbga33pe****', position='Query'),
}

model ModifyDrdsInstanceDescriptionResponseBody = {
  requestId?: string(name='RequestId', example='B4F76641-BA45-4320-BE7C-9C62CFDAR56T'),
  success?: boolean(name='Success', example='true'),
}

model ModifyDrdsInstanceDescriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDrdsInstanceDescriptionResponseBody(name='body'),
}

async function modifyDrdsInstanceDescription(request: ModifyDrdsInstanceDescriptionRequest): ModifyDrdsInstanceDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDrdsInstanceDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDrdsIpWhiteListRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  groupAttribute?: string(name='GroupAttribute', position='Query'),
  groupName?: string(name='GroupName', position='Query'),
  ipWhiteList: string(name='IpWhiteList', position='Query'),
  mode?: boolean(name='Mode', position='Query'),
}

model ModifyDrdsIpWhiteListResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyDrdsIpWhiteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDrdsIpWhiteListResponseBody(name='body'),
}

async function modifyDrdsIpWhiteList(request: ModifyDrdsIpWhiteListRequest): ModifyDrdsIpWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDrdsIpWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model ModifyFullTableScanRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  fullTableScan: boolean(name='FullTableScan', position='Query'),
  tableNames: string(name='TableNames', position='Query'),
}

model ModifyFullTableScanResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyFullTableScanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyFullTableScanResponseBody(name='body'),
}

async function modifyFullTableScan(request: ModifyFullTableScanRequest): ModifyFullTableScanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyFullTableScan', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRdsReadWeightRequest {
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  instanceNames: string(name='InstanceNames', position='Query'),
  weights: string(name='Weights', position='Query'),
}

model ModifyRdsReadWeightResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyRdsReadWeightResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyRdsReadWeightResponseBody(name='body'),
}

async function modifyRdsReadWeight(request: ModifyRdsReadWeightRequest): ModifyRdsReadWeightResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRdsReadWeight', 'POST', '/', 'json', false, 'json', request);
}

model ModifyReadOnlyAccountPasswordRequest {
  accountName: string(name='AccountName', position='Query'),
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
  newPasswd: string(name='NewPasswd', position='Query'),
  originPassword: string(name='OriginPassword', position='Query'),
}

model ModifyReadOnlyAccountPasswordResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyReadOnlyAccountPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyReadOnlyAccountPasswordResponseBody(name='body'),
}

async function modifyReadOnlyAccountPassword(request: ModifyReadOnlyAccountPasswordRequest): ModifyReadOnlyAccountPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyReadOnlyAccountPassword', 'POST', '/', 'json', false, 'json', request);
}

model QueryInstanceInfoByConnRequest {
  host: string(name='Host', position='Query'),
  port: int32(name='Port', position='Query'),
  userName: string(name='UserName', position='Query'),
}

model QueryInstanceInfoByConnResponseBody = {
  data?: {
    createTime?: long(name='CreateTime'),
    description?: string(name='Description'),
    drdsInstanceId?: string(name='DrdsInstanceId'),
    networkType?: string(name='NetworkType'),
    regionId?: string(name='RegionId'),
    specTypeId?: string(name='SpecTypeId'),
    specTypeName?: string(name='SpecTypeName'),
    specification?: string(name='Specification'),
    status?: string(name='Status'),
    type?: string(name='Type'),
    version?: long(name='Version'),
    vips?: {
      vip?: [ 
      {
        ip?: string(name='IP'),
        port?: string(name='Port'),
        type?: string(name='Type'),
        vpcId?: string(name='VpcId'),
        vswitchId?: string(name='VswitchId'),
      }
    ](name='Vip')
    }(name='Vips'),
    vpcCloudInstanceId?: string(name='VpcCloudInstanceId'),
    zoneId?: string(name='ZoneId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryInstanceInfoByConnResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryInstanceInfoByConnResponseBody(name='body'),
}

async function queryInstanceInfoByConn(request: QueryInstanceInfoByConnRequest): QueryInstanceInfoByConnResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryInstanceInfoByConn', 'POST', '/', 'json', false, 'json', request);
}

model RemoveDrdsInstanceRequest {
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model RemoveDrdsInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveDrdsInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveDrdsInstanceResponseBody(name='body'),
}

async function removeDrdsInstance(request: RemoveDrdsInstanceRequest): RemoveDrdsInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveDrdsInstance', 'POST', '/', 'json', false, 'json', request);
}

model RemoveReadOnlyAccountRequest {
  accountName: string(name='AccountName', position='Query'),
  dbName: string(name='DbName', position='Query'),
  drdsInstanceId: string(name='DrdsInstanceId', position='Query'),
}

model RemoveReadOnlyAccountResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveReadOnlyAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveReadOnlyAccountResponseBody(name='body'),
}

async function removeReadOnlyAccount(request: RemoveReadOnlyAccountRequest): RemoveReadOnlyAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveReadOnlyAccount', 'POST', '/', 'json', false, 'json', request);
}

