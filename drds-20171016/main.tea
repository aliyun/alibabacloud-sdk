/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
@endpointMap = {
    ap-northeast-1 = 'drds.ap-southeast-1.aliyuncs.com',
    ap-northeast-2-pop = 'drds.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'drds.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'drds.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'drds.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'drds.ap-southeast-1.aliyuncs.com',
    cn-beijing-finance-1 = 'drds.aliyuncs.com',
    cn-beijing-finance-pop = 'drds.aliyuncs.com',
    cn-beijing-gov-1 = 'drds.aliyuncs.com',
    cn-beijing-nu16-b01 = 'drds.aliyuncs.com',
    cn-chengdu = 'drds.aliyuncs.com',
    cn-edge-1 = 'drds.aliyuncs.com',
    cn-fujian = 'drds.aliyuncs.com',
    cn-haidian-cm12-c01 = 'drds.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'drds.aliyuncs.com',
    cn-hangzhou-finance = 'drds.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'drds.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'drds.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'drds.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'drds.aliyuncs.com',
    cn-hangzhou-test-306 = 'drds.aliyuncs.com',
    cn-hongkong-finance-pop = 'drds.aliyuncs.com',
    cn-qingdao-nebula = 'drds.aliyuncs.com',
    cn-shanghai-et15-b01 = 'drds.aliyuncs.com',
    cn-shanghai-et2-b01 = 'drds.aliyuncs.com',
    cn-shanghai-inner = 'drds.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'drds.aliyuncs.com',
    cn-shenzhen-inner = 'drds.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'drds.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'drds.aliyuncs.com',
    cn-wuhan = 'drds.aliyuncs.com',
    cn-yushanfang = 'drds.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'drds.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'drds.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'drds.aliyuncs.com',
    eu-central-1 = 'drds.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'drds.ap-southeast-1.aliyuncs.com',
    eu-west-1-oxs = 'drds.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'drds.ap-southeast-1.aliyuncs.com',
    rus-west-1-pop = 'drds.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'drds.ap-southeast-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('drds', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateDrdsAccountRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  password?: string(name='Password'),
  userName?: string(name='UserName'),
}

model CreateDrdsAccountResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDrdsAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDrdsAccountResponseBody(name='body'),
}

async function createDrdsAccountWithOptions(request: CreateDrdsAccountRequest, runtime: Util.RuntimeOptions): CreateDrdsAccountResponse {
  Util.validateModel(request);
  var query = {};
  query["DbName"] = request.dbName;
  query["DrdsInstanceId"] = request.drdsInstanceId;
  query["Password"] = request.password;
  query["UserName"] = request.userName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateDrdsAccount',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDrdsAccount(request: CreateDrdsAccountRequest): CreateDrdsAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDrdsAccountWithOptions(request, runtime);
}

model CreateDrdsDBRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  encode?: string(name='Encode'),
  password?: string(name='Password'),
  rdsInstances?: string(name='RdsInstances'),
}

model CreateDrdsDBResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDrdsDBResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDrdsDBResponseBody(name='body'),
}

async function createDrdsDBWithOptions(request: CreateDrdsDBRequest, runtime: Util.RuntimeOptions): CreateDrdsDBResponse {
  Util.validateModel(request);
  var query = {};
  query["DbName"] = request.dbName;
  query["DrdsInstanceId"] = request.drdsInstanceId;
  query["Encode"] = request.encode;
  query["Password"] = request.password;
  query["RdsInstances"] = request.rdsInstances;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateDrdsDB',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDrdsDB(request: CreateDrdsDBRequest): CreateDrdsDBResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDrdsDBWithOptions(request, runtime);
}

model CreateDrdsInstanceRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  duration?: int32(name='Duration'),
  instanceSeries?: string(name='InstanceSeries'),
  isAutoRenew?: boolean(name='IsAutoRenew'),
  isHa?: boolean(name='IsHa'),
  payType?: string(name='PayType'),
  pricingCycle?: string(name='PricingCycle'),
  quantity?: int32(name='Quantity'),
  regionId?: string(name='RegionId'),
  specification?: string(name='Specification'),
  type?: string(name='Type'),
  vpcId?: string(name='VpcId'),
  vswitchId?: string(name='VswitchId'),
  zoneId?: string(name='ZoneId'),
}

model CreateDrdsInstanceResponseBody = {
  data?: {
    drdsInstanceIdList?: {
      drdsInstanceId?: [ string ](name='DrdsInstanceId')
    }(name='DrdsInstanceIdList'),
    orderId?: long(name='OrderId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDrdsInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDrdsInstanceResponseBody(name='body'),
}

async function createDrdsInstanceWithOptions(request: CreateDrdsInstanceRequest, runtime: Util.RuntimeOptions): CreateDrdsInstanceResponse {
  Util.validateModel(request);
  var query = {};
  query["ClientToken"] = request.clientToken;
  query["Description"] = request.description;
  query["Duration"] = request.duration;
  query["InstanceSeries"] = request.instanceSeries;
  query["IsAutoRenew"] = request.isAutoRenew;
  query["IsHa"] = request.isHa;
  query["PayType"] = request.payType;
  query["PricingCycle"] = request.pricingCycle;
  query["Quantity"] = request.quantity;
  query["RegionId"] = request.regionId;
  query["Specification"] = request.specification;
  query["Type"] = request.type;
  query["VpcId"] = request.vpcId;
  query["VswitchId"] = request.vswitchId;
  query["ZoneId"] = request.zoneId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateDrdsInstance',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDrdsInstance(request: CreateDrdsInstanceRequest): CreateDrdsInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDrdsInstanceWithOptions(request, runtime);
}

model CreateReadOnlyAccountRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  password?: string(name='password'),
}

model CreateReadOnlyAccountResponseBody = {
  data?: {
    accountName?: string(name='AccountName'),
    dbName?: string(name='DbName'),
    drdsInstanceId?: string(name='DrdsInstanceId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateReadOnlyAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateReadOnlyAccountResponseBody(name='body'),
}

async function createReadOnlyAccountWithOptions(request: CreateReadOnlyAccountRequest, runtime: Util.RuntimeOptions): CreateReadOnlyAccountResponse {
  Util.validateModel(request);
  var query = {};
  query["DbName"] = request.dbName;
  query["DrdsInstanceId"] = request.drdsInstanceId;
  query["password"] = request.password;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateReadOnlyAccount',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createReadOnlyAccount(request: CreateReadOnlyAccountRequest): CreateReadOnlyAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createReadOnlyAccountWithOptions(request, runtime);
}

model DeleteDrdsDBRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DeleteDrdsDBResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteDrdsDBResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDrdsDBResponseBody(name='body'),
}

async function deleteDrdsDBWithOptions(request: DeleteDrdsDBRequest, runtime: Util.RuntimeOptions): DeleteDrdsDBResponse {
  Util.validateModel(request);
  var query = {};
  query["DbName"] = request.dbName;
  query["DrdsInstanceId"] = request.drdsInstanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDrdsDB',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDrdsDB(request: DeleteDrdsDBRequest): DeleteDrdsDBResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDrdsDBWithOptions(request, runtime);
}

model DeleteFailedDrdsDBRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DeleteFailedDrdsDBResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteFailedDrdsDBResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFailedDrdsDBResponseBody(name='body'),
}

async function deleteFailedDrdsDBWithOptions(request: DeleteFailedDrdsDBRequest, runtime: Util.RuntimeOptions): DeleteFailedDrdsDBResponse {
  Util.validateModel(request);
  var query = {};
  query["DbName"] = request.dbName;
  query["DrdsInstanceId"] = request.drdsInstanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFailedDrdsDB',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFailedDrdsDB(request: DeleteFailedDrdsDBRequest): DeleteFailedDrdsDBResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFailedDrdsDBWithOptions(request, runtime);
}

model DescribeCreateDrdsInstanceStatusRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeCreateDrdsInstanceStatusResponseBody = {
  data?: {
    status?: string(name='Status'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeCreateDrdsInstanceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCreateDrdsInstanceStatusResponseBody(name='body'),
}

async function describeCreateDrdsInstanceStatusWithOptions(request: DescribeCreateDrdsInstanceStatusRequest, runtime: Util.RuntimeOptions): DescribeCreateDrdsInstanceStatusResponse {
  Util.validateModel(request);
  var query = {};
  query["DrdsInstanceId"] = request.drdsInstanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCreateDrdsInstanceStatus',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCreateDrdsInstanceStatus(request: DescribeCreateDrdsInstanceStatusRequest): DescribeCreateDrdsInstanceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCreateDrdsInstanceStatusWithOptions(request, runtime);
}

model DescribeDrdsDBRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeDrdsDBResponseBody = {
  data?: {
    createTime?: string(name='CreateTime'),
    dbName?: string(name='DbName'),
    mode?: string(name='Mode'),
    msg?: string(name='Msg'),
    status?: int32(name='Status'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsDBResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsDBResponseBody(name='body'),
}

async function describeDrdsDBWithOptions(request: DescribeDrdsDBRequest, runtime: Util.RuntimeOptions): DescribeDrdsDBResponse {
  Util.validateModel(request);
  var query = {};
  query["DbName"] = request.dbName;
  query["DrdsInstanceId"] = request.drdsInstanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDrdsDB',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDrdsDB(request: DescribeDrdsDBRequest): DescribeDrdsDBResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDBWithOptions(request, runtime);
}

model DescribeDrdsDBIpWhiteListRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  groupName?: string(name='GroupName'),
}

model DescribeDrdsDBIpWhiteListResponseBody = {
  data?: {
    ipWhiteList?: {
      ip?: [ string ](name='Ip')
    }(name='IpWhiteList'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsDBIpWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsDBIpWhiteListResponseBody(name='body'),
}

async function describeDrdsDBIpWhiteListWithOptions(request: DescribeDrdsDBIpWhiteListRequest, runtime: Util.RuntimeOptions): DescribeDrdsDBIpWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  query["DbName"] = request.dbName;
  query["DrdsInstanceId"] = request.drdsInstanceId;
  query["GroupName"] = request.groupName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDrdsDBIpWhiteList',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDrdsDBIpWhiteList(request: DescribeDrdsDBIpWhiteListRequest): DescribeDrdsDBIpWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDBIpWhiteListWithOptions(request, runtime);
}

model DescribeDrdsDBsRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeDrdsDBsResponseBody = {
  data?: {
    db?: [ 
    {
      createTime?: string(name='CreateTime'),
      dbName?: string(name='DbName'),
      mode?: string(name='Mode'),
      msg?: string(name='Msg'),
      status?: int32(name='Status'),
    }
  ](name='Db')
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsDBsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsDBsResponseBody(name='body'),
}

async function describeDrdsDBsWithOptions(request: DescribeDrdsDBsRequest, runtime: Util.RuntimeOptions): DescribeDrdsDBsResponse {
  Util.validateModel(request);
  var query = {};
  query["DrdsInstanceId"] = request.drdsInstanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDrdsDBs',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDrdsDBs(request: DescribeDrdsDBsRequest): DescribeDrdsDBsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsDBsWithOptions(request, runtime);
}

model DescribeDrdsInstanceRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeDrdsInstanceResponseBody = {
  data?: {
    createTime?: long(name='CreateTime'),
    description?: string(name='Description'),
    drdsInstanceId?: string(name='DrdsInstanceId'),
    networkType?: string(name='NetworkType'),
    regionId?: string(name='RegionId'),
    specification?: string(name='Specification'),
    status?: string(name='Status'),
    type?: string(name='Type'),
    version?: long(name='Version'),
    vips?: {
      vip?: [ 
      {
        IP?: string(name='IP'),
        port?: string(name='Port'),
        type?: string(name='Type'),
        vpcId?: string(name='VpcId'),
        vswitchId?: string(name='VswitchId'),
      }
    ](name='Vip')
    }(name='Vips'),
    vpcCloudInstanceId?: string(name='VpcCloudInstanceId'),
    zoneId?: string(name='ZoneId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsInstanceResponseBody(name='body'),
}

async function describeDrdsInstanceWithOptions(request: DescribeDrdsInstanceRequest, runtime: Util.RuntimeOptions): DescribeDrdsInstanceResponse {
  Util.validateModel(request);
  var query = {};
  query["DrdsInstanceId"] = request.drdsInstanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDrdsInstance',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDrdsInstance(request: DescribeDrdsInstanceRequest): DescribeDrdsInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsInstanceWithOptions(request, runtime);
}

model DescribeDrdsInstanceDbMonitorRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  endTime?: long(name='EndTime'),
  key?: string(name='Key'),
  startTime?: long(name='StartTime'),
}

model DescribeDrdsInstanceDbMonitorResponseBody = {
  data?: {
    partialPerformanceData?: [ 
    {
      key?: string(name='Key'),
      unit?: string(name='Unit'),
      values?: {
        performanceValue?: [ 
        {
          date?: long(name='Date'),
          value?: string(name='Value'),
        }
      ](name='PerformanceValue')
      }(name='Values'),
    }
  ](name='PartialPerformanceData')
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsInstanceDbMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsInstanceDbMonitorResponseBody(name='body'),
}

async function describeDrdsInstanceDbMonitorWithOptions(request: DescribeDrdsInstanceDbMonitorRequest, runtime: Util.RuntimeOptions): DescribeDrdsInstanceDbMonitorResponse {
  Util.validateModel(request);
  var query = {};
  query["DbName"] = request.dbName;
  query["DrdsInstanceId"] = request.drdsInstanceId;
  query["EndTime"] = request.endTime;
  query["Key"] = request.key;
  query["StartTime"] = request.startTime;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDrdsInstanceDbMonitor',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDrdsInstanceDbMonitor(request: DescribeDrdsInstanceDbMonitorRequest): DescribeDrdsInstanceDbMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsInstanceDbMonitorWithOptions(request, runtime);
}

model DescribeDrdsInstanceMonitorRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  endTime?: long(name='EndTime'),
  key?: string(name='Key'),
  periodMultiple?: int32(name='PeriodMultiple'),
  startTime?: long(name='StartTime'),
}

model DescribeDrdsInstanceMonitorResponseBody = {
  data?: {
    partialPerformanceData?: [ 
    {
      key?: string(name='Key'),
      unit?: string(name='Unit'),
      values?: {
        performanceValue?: [ 
        {
          date?: long(name='Date'),
          value?: string(name='Value'),
        }
      ](name='PerformanceValue')
      }(name='Values'),
    }
  ](name='PartialPerformanceData')
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsInstanceMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsInstanceMonitorResponseBody(name='body'),
}

async function describeDrdsInstanceMonitorWithOptions(request: DescribeDrdsInstanceMonitorRequest, runtime: Util.RuntimeOptions): DescribeDrdsInstanceMonitorResponse {
  Util.validateModel(request);
  var query = {};
  query["DrdsInstanceId"] = request.drdsInstanceId;
  query["EndTime"] = request.endTime;
  query["Key"] = request.key;
  query["PeriodMultiple"] = request.periodMultiple;
  query["StartTime"] = request.startTime;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDrdsInstanceMonitor',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDrdsInstanceMonitor(request: DescribeDrdsInstanceMonitorRequest): DescribeDrdsInstanceMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsInstanceMonitorWithOptions(request, runtime);
}

model DescribeDrdsInstanceNetInfoForInnerRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeDrdsInstanceNetInfoForInnerResponseBody = {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  netInfos?: {
    netInfo?: [ 
    {
      IP?: string(name='IP'),
      isForVpc?: boolean(name='IsForVpc'),
      port?: string(name='Port'),
      type?: string(name='Type'),
    }
  ](name='NetInfo')
  }(name='NetInfos'),
  networkType?: string(name='NetworkType'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsInstanceNetInfoForInnerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsInstanceNetInfoForInnerResponseBody(name='body'),
}

async function describeDrdsInstanceNetInfoForInnerWithOptions(request: DescribeDrdsInstanceNetInfoForInnerRequest, runtime: Util.RuntimeOptions): DescribeDrdsInstanceNetInfoForInnerResponse {
  Util.validateModel(request);
  var query = {};
  query["DrdsInstanceId"] = request.drdsInstanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDrdsInstanceNetInfoForInner',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDrdsInstanceNetInfoForInner(request: DescribeDrdsInstanceNetInfoForInnerRequest): DescribeDrdsInstanceNetInfoForInnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsInstanceNetInfoForInnerWithOptions(request, runtime);
}

model DescribeDrdsInstancesRequest {
  regionId?: string(name='RegionId'),
  tags?: string(name='Tags'),
  type?: string(name='Type'),
}

model DescribeDrdsInstancesResponseBody = {
  data?: {
    instance?: [ 
    {
      createTime?: long(name='CreateTime'),
      description?: string(name='Description'),
      drdsInstanceId?: string(name='DrdsInstanceId'),
      instRole?: string(name='InstRole'),
      masterInstId?: string(name='MasterInstId'),
      networkType?: string(name='NetworkType'),
      regionId?: string(name='RegionId'),
      slaveInstId?: {
        instId?: [ string ](name='instId')
      }(name='SlaveInstId'),
      status?: string(name='Status'),
      type?: string(name='Type'),
      version?: long(name='Version'),
      vips?: {
        vip?: [ 
        {
          IP?: string(name='IP'),
          port?: string(name='Port'),
          type?: string(name='Type'),
          vpcId?: string(name='VpcId'),
          vswitchId?: string(name='VswitchId'),
        }
      ](name='Vip')
      }(name='Vips'),
      vpcCloudInstanceId?: string(name='VpcCloudInstanceId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Instance')
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrdsInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrdsInstancesResponseBody(name='body'),
}

async function describeDrdsInstancesWithOptions(request: DescribeDrdsInstancesRequest, runtime: Util.RuntimeOptions): DescribeDrdsInstancesResponse {
  Util.validateModel(request);
  var query = {};
  query["RegionId"] = request.regionId;
  query["Tags"] = request.tags;
  query["Type"] = request.type;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDrdsInstances',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDrdsInstances(request: DescribeDrdsInstancesRequest): DescribeDrdsInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrdsInstancesWithOptions(request, runtime);
}

model DescribeRdsListRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  regionId?: string(name='RegionId'),
}

model DescribeRdsListResponseBody = {
  data?: {
    rdsInstance?: [ 
    {
      connectUrl?: string(name='ConnectUrl'),
      dbType?: string(name='DbType'),
      instanceId?: int32(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      instanceStatus?: string(name='InstanceStatus'),
      port?: int32(name='Port'),
      readOnlyChildren?: {
        child?: [ 
        {
          connectUrl?: string(name='ConnectUrl'),
          dbType?: string(name='DbType'),
          instanceId?: string(name='InstanceId'),
          instanceName?: string(name='InstanceName'),
          instanceStatus?: string(name='InstanceStatus'),
          readWeight?: int32(name='ReadWeight'),
          port?: int32(name='port'),
        }
      ](name='Child')
      }(name='ReadOnlyChildren'),
      readWeight?: int32(name='ReadWeight'),
    }
  ](name='RdsInstance')
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRdsListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRdsListResponseBody(name='body'),
}

async function describeRdsListWithOptions(request: DescribeRdsListRequest, runtime: Util.RuntimeOptions): DescribeRdsListResponse {
  Util.validateModel(request);
  var query = {};
  query["DbName"] = request.dbName;
  query["DrdsInstanceId"] = request.drdsInstanceId;
  query["RegionId"] = request.regionId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRdsList',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRdsList(request: DescribeRdsListRequest): DescribeRdsListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRdsListWithOptions(request, runtime);
}

model DescribeReadOnlyAccountRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeReadOnlyAccountResponseBody = {
  data?: {
    accountName?: string(name='AccountName'),
    dbName?: string(name='DbName'),
    drdsInstanceId?: string(name='DrdsInstanceId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeReadOnlyAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeReadOnlyAccountResponseBody(name='body'),
}

async function describeReadOnlyAccountWithOptions(request: DescribeReadOnlyAccountRequest, runtime: Util.RuntimeOptions): DescribeReadOnlyAccountResponse {
  Util.validateModel(request);
  var query = {};
  query["DbName"] = request.dbName;
  query["DrdsInstanceId"] = request.drdsInstanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeReadOnlyAccount',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeReadOnlyAccount(request: DescribeReadOnlyAccountRequest): DescribeReadOnlyAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeReadOnlyAccountWithOptions(request, runtime);
}

model DescribeRegionsResponseBody = {
  drdsRegions?: {
    drdsRegion?: [ 
    {
      instanceSeriesList?: {
        instanceSeries?: [ 
        {
          seriesId?: string(name='SeriesId'),
          seriesName?: string(name='SeriesName'),
          specList?: {
            spec?: [ 
            {
              specId?: string(name='SpecId'),
              specName?: string(name='SpecName'),
            }
          ](name='Spec')
          }(name='SpecList'),
        }
      ](name='InstanceSeries')
      }(name='InstanceSeriesList'),
      regionId?: string(name='RegionId'),
      regionName?: string(name='RegionName'),
      zoneId?: string(name='ZoneId'),
      zoneName?: string(name='ZoneName'),
    }
  ](name='DrdsRegion')
  }(name='DrdsRegions'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(runtime);
}

model DescribeShardDBsRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model DescribeShardDBsResponseBody = {
  data?: {
    dbIntancePair?: [ 
    {
      groupName?: string(name='GroupName'),
      instanceName?: string(name='InstanceName'),
      subDbName?: string(name='SubDbName'),
    }
  ](name='DbIntancePair')
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeShardDBsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeShardDBsResponseBody(name='body'),
}

async function describeShardDBsWithOptions(request: DescribeShardDBsRequest, runtime: Util.RuntimeOptions): DescribeShardDBsResponse {
  Util.validateModel(request);
  var query = {};
  query["DbName"] = request.dbName;
  query["DrdsInstanceId"] = request.drdsInstanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeShardDBs',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeShardDBs(request: DescribeShardDBsRequest): DescribeShardDBsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeShardDBsWithOptions(request, runtime);
}

model DescribeShardDbConnectionInfoRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  subDbName?: string(name='SubDbName'),
}

model DescribeShardDbConnectionInfoResponseBody = {
  connectionInfo?: {
    instanceName?: string(name='InstanceName'),
    instanceUrl?: string(name='InstanceUrl'),
    blockingTimeout?: int32(name='blockingTimeout'),
    connectionProperties?: string(name='connectionProperties'),
    dbStatus?: string(name='dbStatus'),
    dbType?: string(name='dbType'),
    idleTimeOut?: int32(name='idleTimeOut'),
    maxPoolSize?: int32(name='maxPoolSize'),
    minPoolSize?: int32(name='minPoolSize'),
    preparedStatementCacheSize?: int32(name='preparedStatementCacheSize'),
    subDbName?: string(name='subDbName'),
    userName?: string(name='userName'),
  }(name='ConnectionInfo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeShardDbConnectionInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeShardDbConnectionInfoResponseBody(name='body'),
}

async function describeShardDbConnectionInfoWithOptions(request: DescribeShardDbConnectionInfoRequest, runtime: Util.RuntimeOptions): DescribeShardDbConnectionInfoResponse {
  Util.validateModel(request);
  var query = {};
  query["DbName"] = request.dbName;
  query["DrdsInstanceId"] = request.drdsInstanceId;
  query["SubDbName"] = request.subDbName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeShardDbConnectionInfo',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeShardDbConnectionInfo(request: DescribeShardDbConnectionInfoRequest): DescribeShardDbConnectionInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeShardDbConnectionInfoWithOptions(request, runtime);
}

model EnableInstanceRequest {
  backupId?: string(name='BackupId'),
  clientToken?: string(name='ClientToken'),
  dbInstanceClass?: string(name='DbInstanceClass'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  engineVersion?: string(name='EngineVersion'),
  restoreTime?: string(name='RestoreTime'),
  sourceDbInstId?: string(name='SourceDbInstId'),
  switchId?: string(name='SwitchId'),
  vpcId?: string(name='VpcId'),
  zoneId?: string(name='ZoneId'),
}

model EnableInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model EnableInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: EnableInstanceResponseBody(name='body'),
}

async function enableInstanceWithOptions(request: EnableInstanceRequest, runtime: Util.RuntimeOptions): EnableInstanceResponse {
  Util.validateModel(request);
  var query = {};
  query["BackupId"] = request.backupId;
  query["ClientToken"] = request.clientToken;
  query["DbInstanceClass"] = request.dbInstanceClass;
  query["DrdsInstanceId"] = request.drdsInstanceId;
  query["EngineVersion"] = request.engineVersion;
  query["RestoreTime"] = request.restoreTime;
  query["SourceDbInstId"] = request.sourceDbInstId;
  query["SwitchId"] = request.switchId;
  query["VpcId"] = request.vpcId;
  query["ZoneId"] = request.zoneId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'EnableInstance',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableInstance(request: EnableInstanceRequest): EnableInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableInstanceWithOptions(request, runtime);
}

model ModifyDrdsDBPasswdRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  newPasswd?: string(name='NewPasswd'),
}

model ModifyDrdsDBPasswdResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyDrdsDBPasswdResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDrdsDBPasswdResponseBody(name='body'),
}

async function modifyDrdsDBPasswdWithOptions(request: ModifyDrdsDBPasswdRequest, runtime: Util.RuntimeOptions): ModifyDrdsDBPasswdResponse {
  Util.validateModel(request);
  var query = {};
  query["DbName"] = request.dbName;
  query["DrdsInstanceId"] = request.drdsInstanceId;
  query["NewPasswd"] = request.newPasswd;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDrdsDBPasswd',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDrdsDBPasswd(request: ModifyDrdsDBPasswdRequest): ModifyDrdsDBPasswdResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDrdsDBPasswdWithOptions(request, runtime);
}

model ModifyDrdsInstanceDescriptionRequest {
  description?: string(name='Description'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model ModifyDrdsInstanceDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyDrdsInstanceDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDrdsInstanceDescriptionResponseBody(name='body'),
}

async function modifyDrdsInstanceDescriptionWithOptions(request: ModifyDrdsInstanceDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDrdsInstanceDescriptionResponse {
  Util.validateModel(request);
  var query = {};
  query["Description"] = request.description;
  query["DrdsInstanceId"] = request.drdsInstanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDrdsInstanceDescription',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDrdsInstanceDescription(request: ModifyDrdsInstanceDescriptionRequest): ModifyDrdsInstanceDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDrdsInstanceDescriptionWithOptions(request, runtime);
}

model ModifyDrdsIpWhiteListRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  groupAttribute?: string(name='GroupAttribute'),
  groupName?: string(name='GroupName'),
  ipWhiteList?: string(name='IpWhiteList'),
  mode?: boolean(name='Mode'),
}

model ModifyDrdsIpWhiteListResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyDrdsIpWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDrdsIpWhiteListResponseBody(name='body'),
}

async function modifyDrdsIpWhiteListWithOptions(request: ModifyDrdsIpWhiteListRequest, runtime: Util.RuntimeOptions): ModifyDrdsIpWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  query["DbName"] = request.dbName;
  query["DrdsInstanceId"] = request.drdsInstanceId;
  query["GroupAttribute"] = request.groupAttribute;
  query["GroupName"] = request.groupName;
  query["IpWhiteList"] = request.ipWhiteList;
  query["Mode"] = request.mode;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDrdsIpWhiteList',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDrdsIpWhiteList(request: ModifyDrdsIpWhiteListRequest): ModifyDrdsIpWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDrdsIpWhiteListWithOptions(request, runtime);
}

model ModifyFullTableScanRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  fullTableScan?: boolean(name='FullTableScan'),
  tableNames?: string(name='TableNames'),
}

model ModifyFullTableScanResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyFullTableScanResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyFullTableScanResponseBody(name='body'),
}

async function modifyFullTableScanWithOptions(request: ModifyFullTableScanRequest, runtime: Util.RuntimeOptions): ModifyFullTableScanResponse {
  Util.validateModel(request);
  var query = {};
  query["DbName"] = request.dbName;
  query["DrdsInstanceId"] = request.drdsInstanceId;
  query["FullTableScan"] = request.fullTableScan;
  query["TableNames"] = request.tableNames;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyFullTableScan',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyFullTableScan(request: ModifyFullTableScanRequest): ModifyFullTableScanResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyFullTableScanWithOptions(request, runtime);
}

model ModifyRdsReadWeightRequest {
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  instanceNames?: string(name='InstanceNames'),
  weights?: string(name='Weights'),
}

model ModifyRdsReadWeightResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyRdsReadWeightResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyRdsReadWeightResponseBody(name='body'),
}

async function modifyRdsReadWeightWithOptions(request: ModifyRdsReadWeightRequest, runtime: Util.RuntimeOptions): ModifyRdsReadWeightResponse {
  Util.validateModel(request);
  var query = {};
  query["DbName"] = request.dbName;
  query["DrdsInstanceId"] = request.drdsInstanceId;
  query["InstanceNames"] = request.instanceNames;
  query["Weights"] = request.weights;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyRdsReadWeight',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyRdsReadWeight(request: ModifyRdsReadWeightRequest): ModifyRdsReadWeightResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRdsReadWeightWithOptions(request, runtime);
}

model ModifyReadOnlyAccountPasswordRequest {
  accountName?: string(name='AccountName'),
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
  newPasswd?: string(name='NewPasswd'),
  originPassword?: string(name='OriginPassword'),
}

model ModifyReadOnlyAccountPasswordResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyReadOnlyAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyReadOnlyAccountPasswordResponseBody(name='body'),
}

async function modifyReadOnlyAccountPasswordWithOptions(request: ModifyReadOnlyAccountPasswordRequest, runtime: Util.RuntimeOptions): ModifyReadOnlyAccountPasswordResponse {
  Util.validateModel(request);
  var query = {};
  query["AccountName"] = request.accountName;
  query["DbName"] = request.dbName;
  query["DrdsInstanceId"] = request.drdsInstanceId;
  query["NewPasswd"] = request.newPasswd;
  query["OriginPassword"] = request.originPassword;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyReadOnlyAccountPassword',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyReadOnlyAccountPassword(request: ModifyReadOnlyAccountPasswordRequest): ModifyReadOnlyAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyReadOnlyAccountPasswordWithOptions(request, runtime);
}

model QueryInstanceInfoByConnRequest {
  host?: string(name='Host'),
  port?: int32(name='Port'),
  userName?: string(name='UserName'),
}

model QueryInstanceInfoByConnResponseBody = {
  data?: {
    createTime?: long(name='CreateTime'),
    description?: string(name='Description'),
    drdsInstanceId?: string(name='DrdsInstanceId'),
    networkType?: string(name='NetworkType'),
    regionId?: string(name='RegionId'),
    specTypeId?: string(name='SpecTypeId'),
    specTypeName?: string(name='SpecTypeName'),
    specification?: string(name='Specification'),
    status?: string(name='Status'),
    type?: string(name='Type'),
    version?: long(name='Version'),
    vips?: {
      vip?: [ 
      {
        IP?: string(name='IP'),
        port?: string(name='Port'),
        type?: string(name='Type'),
        vpcId?: string(name='VpcId'),
        vswitchId?: string(name='VswitchId'),
      }
    ](name='Vip')
    }(name='Vips'),
    vpcCloudInstanceId?: string(name='VpcCloudInstanceId'),
    zoneId?: string(name='ZoneId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryInstanceInfoByConnResponse = {
  headers: map[string]string(name='headers'),
  body: QueryInstanceInfoByConnResponseBody(name='body'),
}

async function queryInstanceInfoByConnWithOptions(request: QueryInstanceInfoByConnRequest, runtime: Util.RuntimeOptions): QueryInstanceInfoByConnResponse {
  Util.validateModel(request);
  var query = {};
  query["Host"] = request.host;
  query["Port"] = request.port;
  query["UserName"] = request.userName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'QueryInstanceInfoByConn',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryInstanceInfoByConn(request: QueryInstanceInfoByConnRequest): QueryInstanceInfoByConnResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryInstanceInfoByConnWithOptions(request, runtime);
}

model RemoveDrdsInstanceRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model RemoveDrdsInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveDrdsInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveDrdsInstanceResponseBody(name='body'),
}

async function removeDrdsInstanceWithOptions(request: RemoveDrdsInstanceRequest, runtime: Util.RuntimeOptions): RemoveDrdsInstanceResponse {
  Util.validateModel(request);
  var query = {};
  query["DrdsInstanceId"] = request.drdsInstanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'RemoveDrdsInstance',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeDrdsInstance(request: RemoveDrdsInstanceRequest): RemoveDrdsInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeDrdsInstanceWithOptions(request, runtime);
}

model RemoveReadOnlyAccountRequest {
  accountName?: string(name='AccountName'),
  dbName?: string(name='DbName'),
  drdsInstanceId?: string(name='DrdsInstanceId'),
}

model RemoveReadOnlyAccountResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveReadOnlyAccountResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveReadOnlyAccountResponseBody(name='body'),
}

async function removeReadOnlyAccountWithOptions(request: RemoveReadOnlyAccountRequest, runtime: Util.RuntimeOptions): RemoveReadOnlyAccountResponse {
  Util.validateModel(request);
  var query = {};
  query["AccountName"] = request.accountName;
  query["DbName"] = request.dbName;
  query["DrdsInstanceId"] = request.drdsInstanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'RemoveReadOnlyAccount',
    version = '2017-10-16',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeReadOnlyAccount(request: RemoveReadOnlyAccountRequest): RemoveReadOnlyAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeReadOnlyAccountWithOptions(request, runtime);
}

