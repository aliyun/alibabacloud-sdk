/**
 *
 */
import Util;
import OSS;
import OpenPlatform;
import OSSUtil;
import FileForm;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'dataworks.ap-northeast-1.aliyuncs.com',
    ap-south-1 = 'dataworks.ap-south-1.aliyuncs.com',
    ap-southeast-1 = 'dataworks.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'dataworks.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'dataworks.ap-southeast-3.aliyuncs.com',
    ap-southeast-5 = 'dataworks.ap-southeast-5.aliyuncs.com',
    cn-beijing = 'dataworks.cn-beijing.aliyuncs.com',
    cn-chengdu = 'dataworks.cn-chengdu.aliyuncs.com',
    cn-hangzhou = 'dataworks.cn-hangzhou.aliyuncs.com',
    cn-hongkong = 'dataworks.cn-hongkong.aliyuncs.com',
    cn-huhehaote = 'dataworks.aliyuncs.com',
    cn-qingdao = 'dataworks.aliyuncs.com',
    cn-shanghai = 'dataworks.cn-shanghai.aliyuncs.com',
    cn-shenzhen = 'dataworks.cn-shenzhen.aliyuncs.com',
    cn-zhangjiakou = 'dataworks.aliyuncs.com',
    eu-central-1 = 'dataworks.eu-central-1.aliyuncs.com',
    eu-west-1 = 'dataworks.eu-west-1.aliyuncs.com',
    me-east-1 = 'dataworks.me-east-1.aliyuncs.com',
    us-east-1 = 'dataworks.us-east-1.aliyuncs.com',
    us-west-1 = 'dataworks.us-west-1.aliyuncs.com',
    cn-hangzhou-finance = 'dataworks.aliyuncs.com',
    cn-shenzhen-finance-1 = 'dataworks.aliyuncs.com',
    cn-shanghai-finance-1 = 'dataworks.aliyuncs.com',
    cn-north-2-gov-1 = 'dataworks.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('dataworks-public', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AbolishDataServiceApiRequest {
  apiId?: long(name='ApiId'),
  projectId?: long(name='ProjectId'),
  tenantId?: long(name='TenantId'),
}

model AbolishDataServiceApiResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AbolishDataServiceApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AbolishDataServiceApiResponseBody(name='body'),
}

async function abolishDataServiceApiWithOptions(request: AbolishDataServiceApiRequest, runtime: Util.RuntimeOptions): AbolishDataServiceApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AbolishDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function abolishDataServiceApi(request: AbolishDataServiceApiRequest): AbolishDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return abolishDataServiceApiWithOptions(request, runtime);
}

model AddProjectMemberToRoleRequest {
  clientToken?: string(name='ClientToken'),
  projectId?: long(name='ProjectId'),
  roleCode?: string(name='RoleCode'),
  userId?: string(name='UserId'),
}

model AddProjectMemberToRoleResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddProjectMemberToRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddProjectMemberToRoleResponseBody(name='body'),
}

async function addProjectMemberToRoleWithOptions(request: AddProjectMemberToRoleRequest, runtime: Util.RuntimeOptions): AddProjectMemberToRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.roleCode)) {
    query['RoleCode'] = request.roleCode;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddProjectMemberToRole',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addProjectMemberToRole(request: AddProjectMemberToRoleRequest): AddProjectMemberToRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return addProjectMemberToRoleWithOptions(request, runtime);
}

model AddToMetaCategoryRequest {
  categoryId?: long(name='CategoryId'),
  tableGuid?: string(name='TableGuid'),
}

model AddToMetaCategoryResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddToMetaCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddToMetaCategoryResponseBody(name='body'),
}

async function addToMetaCategoryWithOptions(request: AddToMetaCategoryRequest, runtime: Util.RuntimeOptions): AddToMetaCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddToMetaCategory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addToMetaCategory(request: AddToMetaCategoryRequest): AddToMetaCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return addToMetaCategoryWithOptions(request, runtime);
}

model ApprovePermissionApplyOrderRequest {
  approveAction?: int32(name='ApproveAction'),
  approveComment?: string(name='ApproveComment'),
  flowId?: string(name='FlowId'),
}

model ApprovePermissionApplyOrderResponseBody = {
  approveSuccess?: boolean(name='ApproveSuccess'),
  requestId?: string(name='RequestId'),
}

model ApprovePermissionApplyOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApprovePermissionApplyOrderResponseBody(name='body'),
}

async function approvePermissionApplyOrderWithOptions(request: ApprovePermissionApplyOrderRequest, runtime: Util.RuntimeOptions): ApprovePermissionApplyOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.approveAction)) {
    query['ApproveAction'] = request.approveAction;
  }
  if (!Util.isUnset(request.approveComment)) {
    query['ApproveComment'] = request.approveComment;
  }
  if (!Util.isUnset(request.flowId)) {
    query['FlowId'] = request.flowId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApprovePermissionApplyOrder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function approvePermissionApplyOrder(request: ApprovePermissionApplyOrderRequest): ApprovePermissionApplyOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return approvePermissionApplyOrderWithOptions(request, runtime);
}

model ChangeResourceManagerResourceGroupRequest {
  resourceId?: string(name='ResourceId'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId'),
  resourceType?: string(name='ResourceType'),
}

model ChangeResourceManagerResourceGroupResponseBody = {
  data?: boolean(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ChangeResourceManagerResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeResourceManagerResourceGroupResponseBody(name='body'),
}

async function changeResourceManagerResourceGroupWithOptions(request: ChangeResourceManagerResourceGroupRequest, runtime: Util.RuntimeOptions): ChangeResourceManagerResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeResourceManagerResourceGroup',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function changeResourceManagerResourceGroup(request: ChangeResourceManagerResourceGroupRequest): ChangeResourceManagerResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeResourceManagerResourceGroupWithOptions(request, runtime);
}

model CheckFileDeploymentRequest {
  checkDetailUrl?: string(name='CheckDetailUrl'),
  checkerInstanceId?: string(name='CheckerInstanceId'),
  status?: string(name='Status'),
}

model CheckFileDeploymentResponseBody = {
  requestId?: string(name='RequestId'),
}

model CheckFileDeploymentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckFileDeploymentResponseBody(name='body'),
}

async function checkFileDeploymentWithOptions(request: CheckFileDeploymentRequest, runtime: Util.RuntimeOptions): CheckFileDeploymentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.checkDetailUrl)) {
    body['CheckDetailUrl'] = request.checkDetailUrl;
  }
  if (!Util.isUnset(request.checkerInstanceId)) {
    body['CheckerInstanceId'] = request.checkerInstanceId;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CheckFileDeployment',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkFileDeployment(request: CheckFileDeploymentRequest): CheckFileDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkFileDeploymentWithOptions(request, runtime);
}

model CheckMetaPartitionRequest {
  clusterId?: string(name='ClusterId'),
  dataSourceType?: string(name='DataSourceType'),
  databaseName?: string(name='DatabaseName'),
  partition?: string(name='Partition'),
  tableGuid?: string(name='TableGuid'),
  tableName?: string(name='TableName'),
}

model CheckMetaPartitionResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckMetaPartitionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckMetaPartitionResponseBody(name='body'),
}

async function checkMetaPartitionWithOptions(request: CheckMetaPartitionRequest, runtime: Util.RuntimeOptions): CheckMetaPartitionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.partition)) {
    query['Partition'] = request.partition;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckMetaPartition',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkMetaPartition(request: CheckMetaPartitionRequest): CheckMetaPartitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkMetaPartitionWithOptions(request, runtime);
}

model CheckMetaTableRequest {
  clusterId?: string(name='ClusterId'),
  dataSourceType?: string(name='DataSourceType'),
  databaseName?: string(name='DatabaseName'),
  tableGuid?: string(name='TableGuid'),
  tableName?: string(name='TableName'),
}

model CheckMetaTableResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model CheckMetaTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckMetaTableResponseBody(name='body'),
}

async function checkMetaTableWithOptions(request: CheckMetaTableRequest, runtime: Util.RuntimeOptions): CheckMetaTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckMetaTable',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkMetaTable(request: CheckMetaTableRequest): CheckMetaTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkMetaTableWithOptions(request, runtime);
}

model CreateBaselineRequest {
  alertMarginThreshold?: int32(name='AlertMarginThreshold'),
  baselineName?: string(name='BaselineName'),
  baselineType?: string(name='BaselineType'),
  overtimeSettings?: [ 
    {
      cycle?: int32(name='Cycle'),
      time?: string(name='Time'),
    }
  ](name='OvertimeSettings'),
  owner?: string(name='Owner'),
  priority?: int32(name='Priority'),
  projectId?: long(name='ProjectId'),
  taskIds?: string(name='TaskIds'),
}

model CreateBaselineResponseBody = {
  data?: long(name='Data'),
  dynamicErrorCode?: string(name='DynamicErrorCode'),
  dynamicErrorMessage?: string(name='DynamicErrorMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateBaselineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBaselineResponseBody(name='body'),
}

async function createBaselineWithOptions(request: CreateBaselineRequest, runtime: Util.RuntimeOptions): CreateBaselineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertMarginThreshold)) {
    body['AlertMarginThreshold'] = request.alertMarginThreshold;
  }
  if (!Util.isUnset(request.baselineName)) {
    body['BaselineName'] = request.baselineName;
  }
  if (!Util.isUnset(request.baselineType)) {
    body['BaselineType'] = request.baselineType;
  }
  if (!Util.isUnset(request.overtimeSettings)) {
    body['OvertimeSettings'] = request.overtimeSettings;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskIds)) {
    body['TaskIds'] = request.taskIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateBaseline',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createBaseline(request: CreateBaselineRequest): CreateBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBaselineWithOptions(request, runtime);
}

model CreateBusinessRequest {
  businessName?: string(name='BusinessName'),
  description?: string(name='Description'),
  owner?: string(name='Owner'),
  projectId?: long(name='ProjectId'),
  projectIdentifier?: string(name='ProjectIdentifier'),
  useType?: string(name='UseType'),
}

model CreateBusinessResponseBody = {
  businessId?: long(name='BusinessId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateBusinessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBusinessResponseBody(name='body'),
}

async function createBusinessWithOptions(request: CreateBusinessRequest, runtime: Util.RuntimeOptions): CreateBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessName)) {
    body['BusinessName'] = request.businessName;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.useType)) {
    body['UseType'] = request.useType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateBusiness',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createBusiness(request: CreateBusinessRequest): CreateBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBusinessWithOptions(request, runtime);
}

model CreateConnectionRequest {
  connectionType?: string(name='ConnectionType'),
  content?: string(name='Content'),
  description?: string(name='Description'),
  envType?: int32(name='EnvType'),
  name?: string(name='Name'),
  projectId?: long(name='ProjectId'),
  subType?: string(name='SubType'),
}

model CreateConnectionResponseBody = {
  data?: long(name='Data'),
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateConnectionResponseBody(name='body'),
}

async function createConnectionWithOptions(request: CreateConnectionRequest, runtime: Util.RuntimeOptions): CreateConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionType)) {
    query['ConnectionType'] = request.connectionType;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.subType)) {
    query['SubType'] = request.subType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateConnection',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createConnection(request: CreateConnectionRequest): CreateConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConnectionWithOptions(request, runtime);
}

model CreateDISyncTaskRequest {
  clientToken?: string(name='ClientToken'),
  projectId?: long(name='ProjectId'),
  taskContent?: string(name='TaskContent'),
  taskName?: string(name='TaskName'),
  taskParam?: string(name='TaskParam'),
  taskType?: string(name='TaskType'),
}

model CreateDISyncTaskResponseBody = {
  data?: {
    fileId?: long(name='FileId'),
    message?: string(name='Message'),
    status?: string(name='Status'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDISyncTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDISyncTaskResponseBody(name='body'),
}

async function createDISyncTaskWithOptions(request: CreateDISyncTaskRequest, runtime: Util.RuntimeOptions): CreateDISyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskContent)) {
    query['TaskContent'] = request.taskContent;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.taskParam)) {
    query['TaskParam'] = request.taskParam;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDISyncTask',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDISyncTask(request: CreateDISyncTaskRequest): CreateDISyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDISyncTaskWithOptions(request, runtime);
}

model CreateDagComplementRequest {
  bizBeginTime?: string(name='BizBeginTime'),
  bizEndTime?: string(name='BizEndTime'),
  endBizDate?: string(name='EndBizDate'),
  excludeNodeIds?: string(name='ExcludeNodeIds'),
  includeNodeIds?: string(name='IncludeNodeIds'),
  name?: string(name='Name'),
  nodeParams?: string(name='NodeParams'),
  parallelism?: boolean(name='Parallelism'),
  projectEnv?: string(name='ProjectEnv'),
  rootNodeId?: long(name='RootNodeId'),
  startBizDate?: string(name='StartBizDate'),
}

model CreateDagComplementResponseBody = {
  data?: [ long ](name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDagComplementResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDagComplementResponseBody(name='body'),
}

async function createDagComplementWithOptions(request: CreateDagComplementRequest, runtime: Util.RuntimeOptions): CreateDagComplementResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizBeginTime)) {
    body['BizBeginTime'] = request.bizBeginTime;
  }
  if (!Util.isUnset(request.bizEndTime)) {
    body['BizEndTime'] = request.bizEndTime;
  }
  if (!Util.isUnset(request.endBizDate)) {
    body['EndBizDate'] = request.endBizDate;
  }
  if (!Util.isUnset(request.excludeNodeIds)) {
    body['ExcludeNodeIds'] = request.excludeNodeIds;
  }
  if (!Util.isUnset(request.includeNodeIds)) {
    body['IncludeNodeIds'] = request.includeNodeIds;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.nodeParams)) {
    body['NodeParams'] = request.nodeParams;
  }
  if (!Util.isUnset(request.parallelism)) {
    body['Parallelism'] = request.parallelism;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.rootNodeId)) {
    body['RootNodeId'] = request.rootNodeId;
  }
  if (!Util.isUnset(request.startBizDate)) {
    body['StartBizDate'] = request.startBizDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDagComplement',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDagComplement(request: CreateDagComplementRequest): CreateDagComplementResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDagComplementWithOptions(request, runtime);
}

model CreateDagTestRequest {
  bizdate?: string(name='Bizdate'),
  name?: string(name='Name'),
  nodeId?: long(name='NodeId'),
  nodeParams?: string(name='NodeParams'),
  projectEnv?: string(name='ProjectEnv'),
}

model CreateDagTestResponseBody = {
  data?: long(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDagTestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDagTestResponseBody(name='body'),
}

async function createDagTestWithOptions(request: CreateDagTestRequest, runtime: Util.RuntimeOptions): CreateDagTestResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.nodeParams)) {
    body['NodeParams'] = request.nodeParams;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDagTest',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDagTest(request: CreateDagTestRequest): CreateDagTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDagTestWithOptions(request, runtime);
}

model CreateDataServiceApiRequest {
  apiDescription?: string(name='ApiDescription'),
  apiMode?: int32(name='ApiMode'),
  apiName?: string(name='ApiName'),
  apiPath?: string(name='ApiPath'),
  folderId?: long(name='FolderId'),
  groupId?: string(name='GroupId'),
  projectId?: long(name='ProjectId'),
  protocols?: string(name='Protocols'),
  registrationDetails?: string(name='RegistrationDetails'),
  requestMethod?: int32(name='RequestMethod'),
  responseContentType?: int32(name='ResponseContentType'),
  scriptDetails?: string(name='ScriptDetails'),
  tenantId?: long(name='TenantId'),
  timeout?: int32(name='Timeout'),
  visibleRange?: int32(name='VisibleRange'),
  wizardDetails?: string(name='WizardDetails'),
}

model CreateDataServiceApiResponseBody = {
  data?: long(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDataServiceApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDataServiceApiResponseBody(name='body'),
}

async function createDataServiceApiWithOptions(request: CreateDataServiceApiRequest, runtime: Util.RuntimeOptions): CreateDataServiceApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiDescription)) {
    body['ApiDescription'] = request.apiDescription;
  }
  if (!Util.isUnset(request.apiMode)) {
    body['ApiMode'] = request.apiMode;
  }
  if (!Util.isUnset(request.apiName)) {
    body['ApiName'] = request.apiName;
  }
  if (!Util.isUnset(request.apiPath)) {
    body['ApiPath'] = request.apiPath;
  }
  if (!Util.isUnset(request.folderId)) {
    body['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.protocols)) {
    body['Protocols'] = request.protocols;
  }
  if (!Util.isUnset(request.registrationDetails)) {
    body['RegistrationDetails'] = request.registrationDetails;
  }
  if (!Util.isUnset(request.requestMethod)) {
    body['RequestMethod'] = request.requestMethod;
  }
  if (!Util.isUnset(request.responseContentType)) {
    body['ResponseContentType'] = request.responseContentType;
  }
  if (!Util.isUnset(request.scriptDetails)) {
    body['ScriptDetails'] = request.scriptDetails;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.timeout)) {
    body['Timeout'] = request.timeout;
  }
  if (!Util.isUnset(request.visibleRange)) {
    body['VisibleRange'] = request.visibleRange;
  }
  if (!Util.isUnset(request.wizardDetails)) {
    body['WizardDetails'] = request.wizardDetails;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDataServiceApi(request: CreateDataServiceApiRequest): CreateDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataServiceApiWithOptions(request, runtime);
}

model CreateDataServiceApiAuthorityRequest {
  apiId?: long(name='ApiId'),
  authorizedProjectId?: long(name='AuthorizedProjectId'),
  endTime?: long(name='EndTime'),
  projectId?: long(name='ProjectId'),
  tenantId?: long(name='TenantId'),
}

model CreateDataServiceApiAuthorityResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDataServiceApiAuthorityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDataServiceApiAuthorityResponseBody(name='body'),
}

async function createDataServiceApiAuthorityWithOptions(request: CreateDataServiceApiAuthorityRequest, runtime: Util.RuntimeOptions): CreateDataServiceApiAuthorityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.authorizedProjectId)) {
    body['AuthorizedProjectId'] = request.authorizedProjectId;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataServiceApiAuthority',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDataServiceApiAuthority(request: CreateDataServiceApiAuthorityRequest): CreateDataServiceApiAuthorityResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataServiceApiAuthorityWithOptions(request, runtime);
}

model CreateDataServiceFolderRequest {
  folderName?: string(name='FolderName'),
  groupId?: string(name='GroupId'),
  parentId?: long(name='ParentId'),
  projectId?: long(name='ProjectId'),
  tenantId?: long(name='TenantId'),
}

model CreateDataServiceFolderResponseBody = {
  folderId?: long(name='FolderId'),
  requestId?: string(name='RequestId'),
}

model CreateDataServiceFolderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDataServiceFolderResponseBody(name='body'),
}

async function createDataServiceFolderWithOptions(request: CreateDataServiceFolderRequest, runtime: Util.RuntimeOptions): CreateDataServiceFolderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderName)) {
    body['FolderName'] = request.folderName;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.parentId)) {
    body['ParentId'] = request.parentId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataServiceFolder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDataServiceFolder(request: CreateDataServiceFolderRequest): CreateDataServiceFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataServiceFolderWithOptions(request, runtime);
}

model CreateDataServiceGroupRequest {
  apiGatewayGroupId?: string(name='ApiGatewayGroupId'),
  description?: string(name='Description'),
  groupName?: string(name='GroupName'),
  projectId?: long(name='ProjectId'),
  tenantId?: long(name='TenantId'),
}

model CreateDataServiceGroupResponseBody = {
  groupId?: string(name='GroupId'),
  requestId?: string(name='RequestId'),
}

model CreateDataServiceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDataServiceGroupResponseBody(name='body'),
}

async function createDataServiceGroupWithOptions(request: CreateDataServiceGroupRequest, runtime: Util.RuntimeOptions): CreateDataServiceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiGatewayGroupId)) {
    body['ApiGatewayGroupId'] = request.apiGatewayGroupId;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupName)) {
    body['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataServiceGroup',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDataServiceGroup(request: CreateDataServiceGroupRequest): CreateDataServiceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataServiceGroupWithOptions(request, runtime);
}

model CreateDataSourceRequest {
  content?: string(name='Content'),
  dataSourceType?: string(name='DataSourceType'),
  description?: string(name='Description'),
  envType?: int32(name='EnvType'),
  name?: string(name='Name'),
  projectId?: long(name='ProjectId'),
  subType?: string(name='SubType'),
}

model CreateDataSourceResponseBody = {
  data?: long(name='Data'),
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDataSourceResponseBody(name='body'),
}

async function createDataSourceWithOptions(request: CreateDataSourceRequest, runtime: Util.RuntimeOptions): CreateDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.subType)) {
    query['SubType'] = request.subType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataSource',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDataSource(request: CreateDataSourceRequest): CreateDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataSourceWithOptions(request, runtime);
}

model CreateExportMigrationRequest {
  description?: string(name='Description'),
  exportMode?: string(name='ExportMode'),
  exportObjectStatus?: string(name='ExportObjectStatus'),
  incrementalSince?: long(name='IncrementalSince'),
  name?: string(name='Name'),
  projectId?: long(name='ProjectId'),
}

model CreateExportMigrationResponseBody = {
  data?: long(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateExportMigrationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateExportMigrationResponseBody(name='body'),
}

async function createExportMigrationWithOptions(request: CreateExportMigrationRequest, runtime: Util.RuntimeOptions): CreateExportMigrationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.exportMode)) {
    body['ExportMode'] = request.exportMode;
  }
  if (!Util.isUnset(request.exportObjectStatus)) {
    body['ExportObjectStatus'] = request.exportObjectStatus;
  }
  if (!Util.isUnset(request.incrementalSince)) {
    body['IncrementalSince'] = request.incrementalSince;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateExportMigration',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createExportMigration(request: CreateExportMigrationRequest): CreateExportMigrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createExportMigrationWithOptions(request, runtime);
}

model CreateFileRequest {
  advancedSettings?: string(name='AdvancedSettings'),
  autoParsing?: boolean(name='AutoParsing'),
  autoRerunIntervalMillis?: int32(name='AutoRerunIntervalMillis'),
  autoRerunTimes?: int32(name='AutoRerunTimes'),
  connectionName?: string(name='ConnectionName'),
  content?: string(name='Content'),
  cronExpress?: string(name='CronExpress'),
  cycleType?: string(name='CycleType'),
  dependentNodeIdList?: string(name='DependentNodeIdList'),
  dependentType?: string(name='DependentType'),
  endEffectDate?: long(name='EndEffectDate'),
  fileDescription?: string(name='FileDescription'),
  fileFolderPath?: string(name='FileFolderPath'),
  fileName?: string(name='FileName'),
  fileType?: int32(name='FileType'),
  inputList?: string(name='InputList'),
  inputParameters?: string(name='InputParameters'),
  outputParameters?: string(name='OutputParameters'),
  owner?: string(name='Owner'),
  paraValue?: string(name='ParaValue'),
  projectId?: long(name='ProjectId'),
  projectIdentifier?: string(name='ProjectIdentifier'),
  rerunMode?: string(name='RerunMode'),
  resourceGroupId?: long(name='ResourceGroupId'),
  resourceGroupIdentifier?: string(name='ResourceGroupIdentifier'),
  schedulerType?: string(name='SchedulerType'),
  startEffectDate?: long(name='StartEffectDate'),
  startImmediately?: boolean(name='StartImmediately'),
  stop?: boolean(name='Stop'),
}

model CreateFileResponseBody = {
  data?: long(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFileResponseBody(name='body'),
}

async function createFileWithOptions(request: CreateFileRequest, runtime: Util.RuntimeOptions): CreateFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.advancedSettings)) {
    body['AdvancedSettings'] = request.advancedSettings;
  }
  if (!Util.isUnset(request.autoParsing)) {
    body['AutoParsing'] = request.autoParsing;
  }
  if (!Util.isUnset(request.autoRerunIntervalMillis)) {
    body['AutoRerunIntervalMillis'] = request.autoRerunIntervalMillis;
  }
  if (!Util.isUnset(request.autoRerunTimes)) {
    body['AutoRerunTimes'] = request.autoRerunTimes;
  }
  if (!Util.isUnset(request.connectionName)) {
    body['ConnectionName'] = request.connectionName;
  }
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.cronExpress)) {
    body['CronExpress'] = request.cronExpress;
  }
  if (!Util.isUnset(request.cycleType)) {
    body['CycleType'] = request.cycleType;
  }
  if (!Util.isUnset(request.dependentNodeIdList)) {
    body['DependentNodeIdList'] = request.dependentNodeIdList;
  }
  if (!Util.isUnset(request.dependentType)) {
    body['DependentType'] = request.dependentType;
  }
  if (!Util.isUnset(request.endEffectDate)) {
    body['EndEffectDate'] = request.endEffectDate;
  }
  if (!Util.isUnset(request.fileDescription)) {
    body['FileDescription'] = request.fileDescription;
  }
  if (!Util.isUnset(request.fileFolderPath)) {
    body['FileFolderPath'] = request.fileFolderPath;
  }
  if (!Util.isUnset(request.fileName)) {
    body['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.fileType)) {
    body['FileType'] = request.fileType;
  }
  if (!Util.isUnset(request.inputList)) {
    body['InputList'] = request.inputList;
  }
  if (!Util.isUnset(request.inputParameters)) {
    body['InputParameters'] = request.inputParameters;
  }
  if (!Util.isUnset(request.outputParameters)) {
    body['OutputParameters'] = request.outputParameters;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.paraValue)) {
    body['ParaValue'] = request.paraValue;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.rerunMode)) {
    body['RerunMode'] = request.rerunMode;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceGroupIdentifier)) {
    body['ResourceGroupIdentifier'] = request.resourceGroupIdentifier;
  }
  if (!Util.isUnset(request.schedulerType)) {
    body['SchedulerType'] = request.schedulerType;
  }
  if (!Util.isUnset(request.startEffectDate)) {
    body['StartEffectDate'] = request.startEffectDate;
  }
  if (!Util.isUnset(request.startImmediately)) {
    body['StartImmediately'] = request.startImmediately;
  }
  if (!Util.isUnset(request.stop)) {
    body['Stop'] = request.stop;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFile(request: CreateFileRequest): CreateFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFileWithOptions(request, runtime);
}

model CreateFolderRequest {
  folderPath?: string(name='FolderPath'),
  projectId?: long(name='ProjectId'),
  projectIdentifier?: string(name='ProjectIdentifier'),
}

model CreateFolderResponseBody = {
  data?: string(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateFolderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFolderResponseBody(name='body'),
}

async function createFolderWithOptions(request: CreateFolderRequest, runtime: Util.RuntimeOptions): CreateFolderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderPath)) {
    body['FolderPath'] = request.folderPath;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateFolder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFolder(request: CreateFolderRequest): CreateFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFolderWithOptions(request, runtime);
}

model CreateImportMigrationRequest {
  calculateEngineMap?: string(name='CalculateEngineMap'),
  commitRule?: string(name='CommitRule'),
  description?: string(name='Description'),
  name?: string(name='Name'),
  packageFile?: string(name='PackageFile'),
  packageType?: string(name='PackageType'),
  projectId?: long(name='ProjectId'),
  resourceGroupMap?: string(name='ResourceGroupMap'),
  workspaceMap?: string(name='WorkspaceMap'),
}

model CreateImportMigrationAdvanceRequest {
  calculateEngineMap?: string(name='CalculateEngineMap'),
  commitRule?: string(name='CommitRule'),
  description?: string(name='Description'),
  name?: string(name='Name'),
  packageFileObject?: readable(name='PackageFile'),
  packageType?: string(name='PackageType'),
  projectId?: long(name='ProjectId'),
  resourceGroupMap?: string(name='ResourceGroupMap'),
  workspaceMap?: string(name='WorkspaceMap'),
}

model CreateImportMigrationResponseBody = {
  data?: long(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateImportMigrationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateImportMigrationResponseBody(name='body'),
}

async function createImportMigrationWithOptions(request: CreateImportMigrationRequest, runtime: Util.RuntimeOptions): CreateImportMigrationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.calculateEngineMap)) {
    body['CalculateEngineMap'] = request.calculateEngineMap;
  }
  if (!Util.isUnset(request.commitRule)) {
    body['CommitRule'] = request.commitRule;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.packageFile)) {
    body['PackageFile'] = request.packageFile;
  }
  if (!Util.isUnset(request.packageType)) {
    body['PackageType'] = request.packageType;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.resourceGroupMap)) {
    body['ResourceGroupMap'] = request.resourceGroupMap;
  }
  if (!Util.isUnset(request.workspaceMap)) {
    body['WorkspaceMap'] = request.workspaceMap;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateImportMigration',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createImportMigration(request: CreateImportMigrationRequest): CreateImportMigrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImportMigrationWithOptions(request, runtime);
}

async function createImportMigrationAdvance(request: CreateImportMigrationAdvanceRequest, runtime: Util.RuntimeOptions): CreateImportMigrationResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApi.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'dataworks-public',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var createImportMigrationReq = new CreateImportMigrationRequest{};
  OpenApiUtil.convert(request, createImportMigrationReq);

  if(!Util.isUnset(request.packageFileObject)) {
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.body.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.body.endpoint, authResponse.body.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.body.objectKey,
      content = request.packageFileObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.body.accessKeyId,
      policy = authResponse.body.encodedPolicy,
      signature = authResponse.body.signature,
      key = authResponse.body.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.body.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    createImportMigrationReq.packageFile = `http://${authResponse.body.bucket}.${authResponse.body.endpoint}/${authResponse.body.objectKey}`;
  }
  var createImportMigrationResp = createImportMigrationWithOptions(createImportMigrationReq, runtime);
  return createImportMigrationResp;
}

model CreateManualDagRequest {
  bizDate?: string(name='BizDate'),
  dagParameters?: string(name='DagParameters'),
  excludeNodeIds?: string(name='ExcludeNodeIds'),
  flowName?: string(name='FlowName'),
  includeNodeIds?: string(name='IncludeNodeIds'),
  nodeParameters?: string(name='NodeParameters'),
  projectEnv?: string(name='ProjectEnv'),
  projectName?: string(name='ProjectName'),
}

model CreateManualDagResponseBody = {
  dagId?: long(name='DagId'),
  requestId?: string(name='RequestId'),
}

model CreateManualDagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateManualDagResponseBody(name='body'),
}

async function createManualDagWithOptions(request: CreateManualDagRequest, runtime: Util.RuntimeOptions): CreateManualDagResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizDate)) {
    body['BizDate'] = request.bizDate;
  }
  if (!Util.isUnset(request.dagParameters)) {
    body['DagParameters'] = request.dagParameters;
  }
  if (!Util.isUnset(request.excludeNodeIds)) {
    body['ExcludeNodeIds'] = request.excludeNodeIds;
  }
  if (!Util.isUnset(request.flowName)) {
    body['FlowName'] = request.flowName;
  }
  if (!Util.isUnset(request.includeNodeIds)) {
    body['IncludeNodeIds'] = request.includeNodeIds;
  }
  if (!Util.isUnset(request.nodeParameters)) {
    body['NodeParameters'] = request.nodeParameters;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateManualDag',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createManualDag(request: CreateManualDagRequest): CreateManualDagResponse {
  var runtime = new Util.RuntimeOptions{};
  return createManualDagWithOptions(request, runtime);
}

model CreateMetaCategoryRequest {
  comment?: string(name='Comment'),
  name?: string(name='Name'),
  parentId?: long(name='ParentId'),
}

model CreateMetaCategoryResponseBody = {
  data?: {
    categoryId?: long(name='CategoryId'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateMetaCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMetaCategoryResponseBody(name='body'),
}

async function createMetaCategoryWithOptions(request: CreateMetaCategoryRequest, runtime: Util.RuntimeOptions): CreateMetaCategoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.parentId)) {
    body['ParentId'] = request.parentId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateMetaCategory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createMetaCategory(request: CreateMetaCategoryRequest): CreateMetaCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMetaCategoryWithOptions(request, runtime);
}

model CreatePermissionApplyOrderRequest {
  applyObject?: [ 
    {
      actions?: string(name='Actions'),
      columnMetaList?: [ 
        {
          name?: string(name='Name'),
        }
      ](name='ColumnMetaList'),
      name?: string(name='Name'),
    }
  ](name='ApplyObject'),
  applyReason?: string(name='ApplyReason'),
  applyUserIds?: string(name='ApplyUserIds'),
  deadline?: long(name='Deadline'),
  engineType?: string(name='EngineType'),
  maxComputeProjectName?: string(name='MaxComputeProjectName'),
  orderType?: int32(name='OrderType'),
  workspaceId?: int32(name='WorkspaceId'),
}

model CreatePermissionApplyOrderResponseBody = {
  flowId?: [ string ](name='FlowId'),
  requestId?: string(name='RequestId'),
}

model CreatePermissionApplyOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePermissionApplyOrderResponseBody(name='body'),
}

async function createPermissionApplyOrderWithOptions(request: CreatePermissionApplyOrderRequest, runtime: Util.RuntimeOptions): CreatePermissionApplyOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applyObject)) {
    query['ApplyObject'] = request.applyObject;
  }
  if (!Util.isUnset(request.applyReason)) {
    query['ApplyReason'] = request.applyReason;
  }
  if (!Util.isUnset(request.applyUserIds)) {
    query['ApplyUserIds'] = request.applyUserIds;
  }
  if (!Util.isUnset(request.deadline)) {
    query['Deadline'] = request.deadline;
  }
  if (!Util.isUnset(request.engineType)) {
    query['EngineType'] = request.engineType;
  }
  if (!Util.isUnset(request.maxComputeProjectName)) {
    query['MaxComputeProjectName'] = request.maxComputeProjectName;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreatePermissionApplyOrder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createPermissionApplyOrder(request: CreatePermissionApplyOrderRequest): CreatePermissionApplyOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPermissionApplyOrderWithOptions(request, runtime);
}

model CreateProjectMemberRequest {
  clientToken?: string(name='ClientToken'),
  projectId?: long(name='ProjectId'),
  roleCode?: string(name='RoleCode'),
  userId?: string(name='UserId'),
}

model CreateProjectMemberResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateProjectMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProjectMemberResponseBody(name='body'),
}

async function createProjectMemberWithOptions(request: CreateProjectMemberRequest, runtime: Util.RuntimeOptions): CreateProjectMemberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.roleCode)) {
    query['RoleCode'] = request.roleCode;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateProjectMember',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createProjectMember(request: CreateProjectMemberRequest): CreateProjectMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProjectMemberWithOptions(request, runtime);
}

model CreateQualityEntityRequest {
  entityLevel?: int32(name='EntityLevel'),
  envType?: string(name='EnvType'),
  matchExpression?: string(name='MatchExpression'),
  projectName?: string(name='ProjectName'),
  tableName?: string(name='TableName'),
}

model CreateQualityEntityResponseBody = {
  data?: int32(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateQualityEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateQualityEntityResponseBody(name='body'),
}

async function createQualityEntityWithOptions(request: CreateQualityEntityRequest, runtime: Util.RuntimeOptions): CreateQualityEntityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.entityLevel)) {
    body['EntityLevel'] = request.entityLevel;
  }
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.matchExpression)) {
    body['MatchExpression'] = request.matchExpression;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.tableName)) {
    body['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateQualityEntity',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createQualityEntity(request: CreateQualityEntityRequest): CreateQualityEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return createQualityEntityWithOptions(request, runtime);
}

model CreateQualityFollowerRequest {
  alarmMode?: int32(name='AlarmMode'),
  entityId?: long(name='EntityId'),
  follower?: string(name='Follower'),
  projectName?: string(name='ProjectName'),
}

model CreateQualityFollowerResponseBody = {
  data?: int32(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateQualityFollowerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateQualityFollowerResponseBody(name='body'),
}

async function createQualityFollowerWithOptions(request: CreateQualityFollowerRequest, runtime: Util.RuntimeOptions): CreateQualityFollowerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alarmMode)) {
    body['AlarmMode'] = request.alarmMode;
  }
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.follower)) {
    body['Follower'] = request.follower;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateQualityFollower',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createQualityFollower(request: CreateQualityFollowerRequest): CreateQualityFollowerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createQualityFollowerWithOptions(request, runtime);
}

model CreateQualityRelativeNodeRequest {
  envType?: string(name='EnvType'),
  matchExpression?: string(name='MatchExpression'),
  nodeId?: long(name='NodeId'),
  projectId?: long(name='ProjectId'),
  projectName?: string(name='ProjectName'),
  tableName?: string(name='TableName'),
  targetNodeProjectId?: long(name='TargetNodeProjectId'),
  targetNodeProjectName?: string(name='TargetNodeProjectName'),
}

model CreateQualityRelativeNodeResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateQualityRelativeNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateQualityRelativeNodeResponseBody(name='body'),
}

async function createQualityRelativeNodeWithOptions(request: CreateQualityRelativeNodeRequest, runtime: Util.RuntimeOptions): CreateQualityRelativeNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.matchExpression)) {
    body['MatchExpression'] = request.matchExpression;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.tableName)) {
    body['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.targetNodeProjectId)) {
    body['TargetNodeProjectId'] = request.targetNodeProjectId;
  }
  if (!Util.isUnset(request.targetNodeProjectName)) {
    body['TargetNodeProjectName'] = request.targetNodeProjectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateQualityRelativeNode',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createQualityRelativeNode(request: CreateQualityRelativeNodeRequest): CreateQualityRelativeNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createQualityRelativeNodeWithOptions(request, runtime);
}

model CreateQualityRuleRequest {
  blockType?: int32(name='BlockType'),
  checker?: int32(name='Checker'),
  comment?: string(name='Comment'),
  criticalThreshold?: string(name='CriticalThreshold'),
  entityId?: long(name='EntityId'),
  expectValue?: string(name='ExpectValue'),
  methodName?: string(name='MethodName'),
  operator?: string(name='Operator'),
  predictType?: int32(name='PredictType'),
  projectName?: string(name='ProjectName'),
  property?: string(name='Property'),
  propertyType?: string(name='PropertyType'),
  ruleName?: string(name='RuleName'),
  ruleType?: int32(name='RuleType'),
  templateId?: int32(name='TemplateId'),
  trend?: string(name='Trend'),
  warningThreshold?: string(name='WarningThreshold'),
  whereCondition?: string(name='WhereCondition'),
}

model CreateQualityRuleResponseBody = {
  data?: string(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateQualityRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateQualityRuleResponseBody(name='body'),
}

async function createQualityRuleWithOptions(request: CreateQualityRuleRequest, runtime: Util.RuntimeOptions): CreateQualityRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.blockType)) {
    body['BlockType'] = request.blockType;
  }
  if (!Util.isUnset(request.checker)) {
    body['Checker'] = request.checker;
  }
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.criticalThreshold)) {
    body['CriticalThreshold'] = request.criticalThreshold;
  }
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.expectValue)) {
    body['ExpectValue'] = request.expectValue;
  }
  if (!Util.isUnset(request.methodName)) {
    body['MethodName'] = request.methodName;
  }
  if (!Util.isUnset(request.operator)) {
    body['Operator'] = request.operator;
  }
  if (!Util.isUnset(request.predictType)) {
    body['PredictType'] = request.predictType;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.property)) {
    body['Property'] = request.property;
  }
  if (!Util.isUnset(request.propertyType)) {
    body['PropertyType'] = request.propertyType;
  }
  if (!Util.isUnset(request.ruleName)) {
    body['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.ruleType)) {
    body['RuleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.trend)) {
    body['Trend'] = request.trend;
  }
  if (!Util.isUnset(request.warningThreshold)) {
    body['WarningThreshold'] = request.warningThreshold;
  }
  if (!Util.isUnset(request.whereCondition)) {
    body['WhereCondition'] = request.whereCondition;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateQualityRule',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createQualityRule(request: CreateQualityRuleRequest): CreateQualityRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createQualityRuleWithOptions(request, runtime);
}

model CreateRemindRequest {
  alertInterval?: int32(name='AlertInterval'),
  alertMethods?: string(name='AlertMethods'),
  alertTargets?: string(name='AlertTargets'),
  alertUnit?: string(name='AlertUnit'),
  baselineIds?: string(name='BaselineIds'),
  bizProcessIds?: string(name='BizProcessIds'),
  detail?: string(name='Detail'),
  dndEnd?: string(name='DndEnd'),
  maxAlertTimes?: int32(name='MaxAlertTimes'),
  nodeIds?: string(name='NodeIds'),
  projectId?: long(name='ProjectId'),
  remindName?: string(name='RemindName'),
  remindType?: string(name='RemindType'),
  remindUnit?: string(name='RemindUnit'),
  robotUrls?: string(name='RobotUrls'),
  webhooks?: string(name='Webhooks'),
}

model CreateRemindResponseBody = {
  data?: long(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateRemindResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRemindResponseBody(name='body'),
}

async function createRemindWithOptions(request: CreateRemindRequest, runtime: Util.RuntimeOptions): CreateRemindResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertInterval)) {
    body['AlertInterval'] = request.alertInterval;
  }
  if (!Util.isUnset(request.alertMethods)) {
    body['AlertMethods'] = request.alertMethods;
  }
  if (!Util.isUnset(request.alertTargets)) {
    body['AlertTargets'] = request.alertTargets;
  }
  if (!Util.isUnset(request.alertUnit)) {
    body['AlertUnit'] = request.alertUnit;
  }
  if (!Util.isUnset(request.baselineIds)) {
    body['BaselineIds'] = request.baselineIds;
  }
  if (!Util.isUnset(request.bizProcessIds)) {
    body['BizProcessIds'] = request.bizProcessIds;
  }
  if (!Util.isUnset(request.detail)) {
    body['Detail'] = request.detail;
  }
  if (!Util.isUnset(request.dndEnd)) {
    body['DndEnd'] = request.dndEnd;
  }
  if (!Util.isUnset(request.maxAlertTimes)) {
    body['MaxAlertTimes'] = request.maxAlertTimes;
  }
  if (!Util.isUnset(request.nodeIds)) {
    body['NodeIds'] = request.nodeIds;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.remindName)) {
    body['RemindName'] = request.remindName;
  }
  if (!Util.isUnset(request.remindType)) {
    body['RemindType'] = request.remindType;
  }
  if (!Util.isUnset(request.remindUnit)) {
    body['RemindUnit'] = request.remindUnit;
  }
  if (!Util.isUnset(request.robotUrls)) {
    body['RobotUrls'] = request.robotUrls;
  }
  if (!Util.isUnset(request.webhooks)) {
    body['Webhooks'] = request.webhooks;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateRemind',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRemind(request: CreateRemindRequest): CreateRemindResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRemindWithOptions(request, runtime);
}

model CreateTableRequest {
  appGuid?: string(name='AppGuid'),
  categoryId?: long(name='CategoryId'),
  clientToken?: string(name='ClientToken'),
  columns?: [ 
    {
      columnName?: string(name='ColumnName'),
      columnNameCn?: string(name='ColumnNameCn'),
      columnType?: string(name='ColumnType'),
      comment?: string(name='Comment'),
      isPartitionCol?: boolean(name='IsPartitionCol'),
      length?: int32(name='Length'),
      seqNumber?: int32(name='SeqNumber'),
    }
  ](name='Columns'),
  comment?: string(name='Comment'),
  endpoint?: string(name='Endpoint'),
  envType?: int32(name='EnvType'),
  externalTableType?: string(name='ExternalTableType'),
  hasPart?: int32(name='HasPart'),
  isView?: int32(name='IsView'),
  lifeCycle?: int32(name='LifeCycle'),
  location?: string(name='Location'),
  logicalLevelId?: long(name='LogicalLevelId'),
  ownerId?: string(name='OwnerId'),
  physicsLevelId?: long(name='PhysicsLevelId'),
  projectId?: long(name='ProjectId'),
  schema?: string(name='Schema'),
  tableName?: string(name='TableName'),
  themes?: [ 
    {
      themeId?: long(name='ThemeId'),
      themeLevel?: int32(name='ThemeLevel'),
    }
  ](name='Themes'),
  visibility?: int32(name='Visibility'),
}

model CreateTableResponseBody = {
  requestId?: string(name='RequestId'),
  taskInfo?: {
    content?: string(name='Content'),
    nextTaskId?: string(name='NextTaskId'),
    status?: string(name='Status'),
    taskId?: string(name='TaskId'),
  }(name='TaskInfo'),
}

model CreateTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTableResponseBody(name='body'),
}

async function createTableWithOptions(request: CreateTableRequest, runtime: Util.RuntimeOptions): CreateTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appGuid)) {
    query['AppGuid'] = request.appGuid;
  }
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.externalTableType)) {
    query['ExternalTableType'] = request.externalTableType;
  }
  if (!Util.isUnset(request.hasPart)) {
    query['HasPart'] = request.hasPart;
  }
  if (!Util.isUnset(request.isView)) {
    query['IsView'] = request.isView;
  }
  if (!Util.isUnset(request.lifeCycle)) {
    query['LifeCycle'] = request.lifeCycle;
  }
  if (!Util.isUnset(request.location)) {
    query['Location'] = request.location;
  }
  if (!Util.isUnset(request.logicalLevelId)) {
    query['LogicalLevelId'] = request.logicalLevelId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.physicsLevelId)) {
    query['PhysicsLevelId'] = request.physicsLevelId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.visibility)) {
    query['Visibility'] = request.visibility;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.columns)) {
    body['Columns'] = request.columns;
  }
  if (!Util.isUnset(request.endpoint)) {
    body['Endpoint'] = request.endpoint;
  }
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.themes)) {
    body['Themes'] = request.themes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTable',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTable(request: CreateTableRequest): CreateTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTableWithOptions(request, runtime);
}

model CreateTableLevelRequest {
  description?: string(name='Description'),
  levelType?: int32(name='LevelType'),
  name?: string(name='Name'),
  projectId?: long(name='ProjectId'),
}

model CreateTableLevelResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  levelId?: long(name='LevelId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateTableLevelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTableLevelResponseBody(name='body'),
}

async function createTableLevelWithOptions(request: CreateTableLevelRequest, runtime: Util.RuntimeOptions): CreateTableLevelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.levelType)) {
    query['LevelType'] = request.levelType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTableLevel',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTableLevel(request: CreateTableLevelRequest): CreateTableLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTableLevelWithOptions(request, runtime);
}

model CreateTableThemeRequest {
  level?: int32(name='Level'),
  name?: string(name='Name'),
  parentId?: long(name='ParentId'),
  projectId?: long(name='ProjectId'),
}

model CreateTableThemeResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  themeId?: long(name='ThemeId'),
}

model CreateTableThemeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTableThemeResponseBody(name='body'),
}

async function createTableThemeWithOptions(request: CreateTableThemeRequest, runtime: Util.RuntimeOptions): CreateTableThemeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.level)) {
    query['Level'] = request.level;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.parentId)) {
    query['ParentId'] = request.parentId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTableTheme',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTableTheme(request: CreateTableThemeRequest): CreateTableThemeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTableThemeWithOptions(request, runtime);
}

model CreateUdfFileRequest {
  className?: string(name='ClassName'),
  cmdDescription?: string(name='CmdDescription'),
  example?: string(name='Example'),
  fileFolderPath?: string(name='FileFolderPath'),
  fileName?: string(name='FileName'),
  functionType?: string(name='FunctionType'),
  parameterDescription?: string(name='ParameterDescription'),
  projectId?: long(name='ProjectId'),
  projectIdentifier?: string(name='ProjectIdentifier'),
  resources?: string(name='Resources'),
  returnValue?: string(name='ReturnValue'),
  udfDescription?: string(name='UdfDescription'),
}

model CreateUdfFileResponseBody = {
  data?: long(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateUdfFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUdfFileResponseBody(name='body'),
}

async function createUdfFileWithOptions(request: CreateUdfFileRequest, runtime: Util.RuntimeOptions): CreateUdfFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.className)) {
    body['ClassName'] = request.className;
  }
  if (!Util.isUnset(request.cmdDescription)) {
    body['CmdDescription'] = request.cmdDescription;
  }
  if (!Util.isUnset(request.example)) {
    body['Example'] = request.example;
  }
  if (!Util.isUnset(request.fileFolderPath)) {
    body['FileFolderPath'] = request.fileFolderPath;
  }
  if (!Util.isUnset(request.fileName)) {
    body['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.functionType)) {
    body['FunctionType'] = request.functionType;
  }
  if (!Util.isUnset(request.parameterDescription)) {
    body['ParameterDescription'] = request.parameterDescription;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.resources)) {
    body['Resources'] = request.resources;
  }
  if (!Util.isUnset(request.returnValue)) {
    body['ReturnValue'] = request.returnValue;
  }
  if (!Util.isUnset(request.udfDescription)) {
    body['UdfDescription'] = request.udfDescription;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateUdfFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createUdfFile(request: CreateUdfFileRequest): CreateUdfFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUdfFileWithOptions(request, runtime);
}

model DeleteBaselineRequest {
  baselineId?: long(name='BaselineId'),
  projectId?: long(name='ProjectId'),
}

model DeleteBaselineResponseBody = {
  data?: boolean(name='Data'),
  dynamicErrorCode?: string(name='DynamicErrorCode'),
  dynamicErrorMessage?: string(name='DynamicErrorMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteBaselineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBaselineResponseBody(name='body'),
}

async function deleteBaselineWithOptions(request: DeleteBaselineRequest, runtime: Util.RuntimeOptions): DeleteBaselineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBaseline',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBaseline(request: DeleteBaselineRequest): DeleteBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBaselineWithOptions(request, runtime);
}

model DeleteBusinessRequest {
  businessId?: long(name='BusinessId'),
  projectId?: long(name='ProjectId'),
  projectIdentifier?: string(name='ProjectIdentifier'),
}

model DeleteBusinessResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteBusinessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBusinessResponseBody(name='body'),
}

async function deleteBusinessWithOptions(request: DeleteBusinessRequest, runtime: Util.RuntimeOptions): DeleteBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessId)) {
    body['BusinessId'] = request.businessId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBusiness',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBusiness(request: DeleteBusinessRequest): DeleteBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBusinessWithOptions(request, runtime);
}

model DeleteConnectionRequest {
  connectionId?: long(name='ConnectionId'),
}

model DeleteConnectionResponseBody = {
  data?: boolean(name='Data'),
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteConnectionResponseBody(name='body'),
}

async function deleteConnectionWithOptions(request: DeleteConnectionRequest, runtime: Util.RuntimeOptions): DeleteConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionId)) {
    query['ConnectionId'] = request.connectionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteConnection',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteConnection(request: DeleteConnectionRequest): DeleteConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteConnectionWithOptions(request, runtime);
}

model DeleteDISyncTaskRequest {
  fileId?: long(name='FileId'),
  projectId?: long(name='ProjectId'),
  taskType?: string(name='TaskType'),
}

model DeleteDISyncTaskResponseBody = {
  data?: {
    message?: string(name='Message'),
    status?: string(name='Status'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteDISyncTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDISyncTaskResponseBody(name='body'),
}

async function deleteDISyncTaskWithOptions(request: DeleteDISyncTaskRequest, runtime: Util.RuntimeOptions): DeleteDISyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDISyncTask',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDISyncTask(request: DeleteDISyncTaskRequest): DeleteDISyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDISyncTaskWithOptions(request, runtime);
}

model DeleteDataServiceApiRequest {
  apiId?: long(name='ApiId'),
  projectId?: long(name='ProjectId'),
  tenantId?: long(name='TenantId'),
}

model DeleteDataServiceApiResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteDataServiceApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDataServiceApiResponseBody(name='body'),
}

async function deleteDataServiceApiWithOptions(request: DeleteDataServiceApiRequest, runtime: Util.RuntimeOptions): DeleteDataServiceApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDataServiceApi(request: DeleteDataServiceApiRequest): DeleteDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataServiceApiWithOptions(request, runtime);
}

model DeleteDataServiceApiAuthorityRequest {
  apiId?: long(name='ApiId'),
  authorizedProjectId?: long(name='AuthorizedProjectId'),
  projectId?: long(name='ProjectId'),
  tenantId?: long(name='TenantId'),
}

model DeleteDataServiceApiAuthorityResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteDataServiceApiAuthorityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDataServiceApiAuthorityResponseBody(name='body'),
}

async function deleteDataServiceApiAuthorityWithOptions(request: DeleteDataServiceApiAuthorityRequest, runtime: Util.RuntimeOptions): DeleteDataServiceApiAuthorityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.authorizedProjectId)) {
    body['AuthorizedProjectId'] = request.authorizedProjectId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataServiceApiAuthority',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDataServiceApiAuthority(request: DeleteDataServiceApiAuthorityRequest): DeleteDataServiceApiAuthorityResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataServiceApiAuthorityWithOptions(request, runtime);
}

model DeleteDataSourceRequest {
  dataSourceId?: long(name='DataSourceId'),
}

model DeleteDataSourceResponseBody = {
  data?: boolean(name='Data'),
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDataSourceResponseBody(name='body'),
}

async function deleteDataSourceWithOptions(request: DeleteDataSourceRequest, runtime: Util.RuntimeOptions): DeleteDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataSourceId)) {
    query['DataSourceId'] = request.dataSourceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataSource',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataSourceWithOptions(request, runtime);
}

model DeleteFileRequest {
  fileId?: long(name='FileId'),
  projectId?: long(name='ProjectId'),
  projectIdentifier?: string(name='ProjectIdentifier'),
}

model DeleteFileResponseBody = {
  deploymentId?: long(name='DeploymentId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFileResponseBody(name='body'),
}

async function deleteFileWithOptions(request: DeleteFileRequest, runtime: Util.RuntimeOptions): DeleteFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFile(request: DeleteFileRequest): DeleteFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFileWithOptions(request, runtime);
}

model DeleteFolderRequest {
  folderId?: string(name='FolderId'),
  projectId?: long(name='ProjectId'),
  projectIdentifier?: string(name='ProjectIdentifier'),
}

model DeleteFolderResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteFolderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFolderResponseBody(name='body'),
}

async function deleteFolderWithOptions(request: DeleteFolderRequest, runtime: Util.RuntimeOptions): DeleteFolderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderId)) {
    body['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFolder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFolder(request: DeleteFolderRequest): DeleteFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFolderWithOptions(request, runtime);
}

model DeleteFromMetaCategoryRequest {
  categoryId?: long(name='CategoryId'),
  tableGuid?: string(name='TableGuid'),
}

model DeleteFromMetaCategoryResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteFromMetaCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFromMetaCategoryResponseBody(name='body'),
}

async function deleteFromMetaCategoryWithOptions(request: DeleteFromMetaCategoryRequest, runtime: Util.RuntimeOptions): DeleteFromMetaCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFromMetaCategory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFromMetaCategory(request: DeleteFromMetaCategoryRequest): DeleteFromMetaCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFromMetaCategoryWithOptions(request, runtime);
}

model DeleteMetaCategoryRequest {
  categoryId?: long(name='CategoryId'),
}

model DeleteMetaCategoryResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteMetaCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMetaCategoryResponseBody(name='body'),
}

async function deleteMetaCategoryWithOptions(request: DeleteMetaCategoryRequest, runtime: Util.RuntimeOptions): DeleteMetaCategoryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMetaCategory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMetaCategory(request: DeleteMetaCategoryRequest): DeleteMetaCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMetaCategoryWithOptions(request, runtime);
}

model DeleteProjectMemberRequest {
  projectId?: long(name='ProjectId'),
  userId?: string(name='UserId'),
}

model DeleteProjectMemberResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteProjectMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProjectMemberResponseBody(name='body'),
}

async function deleteProjectMemberWithOptions(request: DeleteProjectMemberRequest, runtime: Util.RuntimeOptions): DeleteProjectMemberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProjectMember',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteProjectMember(request: DeleteProjectMemberRequest): DeleteProjectMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProjectMemberWithOptions(request, runtime);
}

model DeleteQualityEntityRequest {
  entityId?: long(name='EntityId'),
  envType?: string(name='EnvType'),
  projectName?: string(name='ProjectName'),
}

model DeleteQualityEntityResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteQualityEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteQualityEntityResponseBody(name='body'),
}

async function deleteQualityEntityWithOptions(request: DeleteQualityEntityRequest, runtime: Util.RuntimeOptions): DeleteQualityEntityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteQualityEntity',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteQualityEntity(request: DeleteQualityEntityRequest): DeleteQualityEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteQualityEntityWithOptions(request, runtime);
}

model DeleteQualityFollowerRequest {
  followerId?: long(name='FollowerId'),
  projectName?: string(name='ProjectName'),
}

model DeleteQualityFollowerResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteQualityFollowerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteQualityFollowerResponseBody(name='body'),
}

async function deleteQualityFollowerWithOptions(request: DeleteQualityFollowerRequest, runtime: Util.RuntimeOptions): DeleteQualityFollowerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.followerId)) {
    body['FollowerId'] = request.followerId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteQualityFollower',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteQualityFollower(request: DeleteQualityFollowerRequest): DeleteQualityFollowerResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteQualityFollowerWithOptions(request, runtime);
}

model DeleteQualityRelativeNodeRequest {
  envType?: string(name='EnvType'),
  matchExpression?: string(name='MatchExpression'),
  nodeId?: long(name='NodeId'),
  projectId?: long(name='ProjectId'),
  projectName?: string(name='ProjectName'),
  tableName?: string(name='TableName'),
  targetNodeProjectId?: long(name='TargetNodeProjectId'),
  targetNodeProjectName?: string(name='TargetNodeProjectName'),
}

model DeleteQualityRelativeNodeResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteQualityRelativeNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteQualityRelativeNodeResponseBody(name='body'),
}

async function deleteQualityRelativeNodeWithOptions(request: DeleteQualityRelativeNodeRequest, runtime: Util.RuntimeOptions): DeleteQualityRelativeNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.matchExpression)) {
    body['MatchExpression'] = request.matchExpression;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.tableName)) {
    body['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.targetNodeProjectId)) {
    body['TargetNodeProjectId'] = request.targetNodeProjectId;
  }
  if (!Util.isUnset(request.targetNodeProjectName)) {
    body['TargetNodeProjectName'] = request.targetNodeProjectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteQualityRelativeNode',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteQualityRelativeNode(request: DeleteQualityRelativeNodeRequest): DeleteQualityRelativeNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteQualityRelativeNodeWithOptions(request, runtime);
}

model DeleteQualityRuleRequest {
  projectName?: string(name='ProjectName'),
  ruleId?: long(name='RuleId'),
}

model DeleteQualityRuleResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteQualityRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteQualityRuleResponseBody(name='body'),
}

async function deleteQualityRuleWithOptions(request: DeleteQualityRuleRequest, runtime: Util.RuntimeOptions): DeleteQualityRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.ruleId)) {
    body['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteQualityRule',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteQualityRule(request: DeleteQualityRuleRequest): DeleteQualityRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteQualityRuleWithOptions(request, runtime);
}

model DeleteRemindRequest {
  remindId?: long(name='RemindId'),
}

model DeleteRemindResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteRemindResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRemindResponseBody(name='body'),
}

async function deleteRemindWithOptions(request: DeleteRemindRequest, runtime: Util.RuntimeOptions): DeleteRemindResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.remindId)) {
    body['RemindId'] = request.remindId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRemind',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRemind(request: DeleteRemindRequest): DeleteRemindResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRemindWithOptions(request, runtime);
}

model DeleteTableRequest {
  appGuid?: string(name='AppGuid'),
  envType?: int32(name='EnvType'),
  projectId?: long(name='ProjectId'),
  schema?: string(name='Schema'),
  tableName?: string(name='TableName'),
}

model DeleteTableResponseBody = {
  requestId?: string(name='RequestId'),
  taskInfo?: {
    content?: string(name='Content'),
    nextTaskId?: string(name='NextTaskId'),
    status?: string(name='Status'),
    taskId?: string(name='TaskId'),
  }(name='TaskInfo'),
}

model DeleteTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTableResponseBody(name='body'),
}

async function deleteTableWithOptions(request: DeleteTableRequest, runtime: Util.RuntimeOptions): DeleteTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appGuid)) {
    query['AppGuid'] = request.appGuid;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTable',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTable(request: DeleteTableRequest): DeleteTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTableWithOptions(request, runtime);
}

model DeleteTableLevelRequest {
  levelId?: long(name='LevelId'),
  projectId?: long(name='ProjectId'),
}

model DeleteTableLevelResponseBody = {
  deleteResult?: boolean(name='DeleteResult'),
  requestId?: string(name='RequestId'),
}

model DeleteTableLevelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTableLevelResponseBody(name='body'),
}

async function deleteTableLevelWithOptions(request: DeleteTableLevelRequest, runtime: Util.RuntimeOptions): DeleteTableLevelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.levelId)) {
    query['LevelId'] = request.levelId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTableLevel',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTableLevel(request: DeleteTableLevelRequest): DeleteTableLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTableLevelWithOptions(request, runtime);
}

model DeleteTableThemeRequest {
  projectId?: long(name='ProjectId'),
  themeId?: long(name='ThemeId'),
}

model DeleteTableThemeResponseBody = {
  deleteResult?: boolean(name='DeleteResult'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteTableThemeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTableThemeResponseBody(name='body'),
}

async function deleteTableThemeWithOptions(request: DeleteTableThemeRequest, runtime: Util.RuntimeOptions): DeleteTableThemeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.themeId)) {
    query['ThemeId'] = request.themeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTableTheme',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTableTheme(request: DeleteTableThemeRequest): DeleteTableThemeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTableThemeWithOptions(request, runtime);
}

model DeployDISyncTaskRequest {
  fileId?: long(name='FileId'),
  projectId?: long(name='ProjectId'),
  taskType?: string(name='TaskType'),
}

model DeployDISyncTaskResponseBody = {
  data?: {
    message?: string(name='Message'),
    status?: string(name='Status'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeployDISyncTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeployDISyncTaskResponseBody(name='body'),
}

async function deployDISyncTaskWithOptions(request: DeployDISyncTaskRequest, runtime: Util.RuntimeOptions): DeployDISyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeployDISyncTask',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deployDISyncTask(request: DeployDISyncTaskRequest): DeployDISyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deployDISyncTaskWithOptions(request, runtime);
}

model DeployFileRequest {
  comment?: string(name='Comment'),
  fileId?: long(name='FileId'),
  nodeId?: long(name='NodeId'),
  projectId?: long(name='ProjectId'),
  projectIdentifier?: string(name='ProjectIdentifier'),
}

model DeployFileResponseBody = {
  data?: long(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeployFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeployFileResponseBody(name='body'),
}

async function deployFileWithOptions(request: DeployFileRequest, runtime: Util.RuntimeOptions): DeployFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeployFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deployFile(request: DeployFileRequest): DeployFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deployFileWithOptions(request, runtime);
}

model DesensitizeDataRequest {
  data?: string(name='Data'),
  sceneCode?: string(name='SceneCode'),
}

model DesensitizeDataResponseBody = {
  desensitizeData?: string(name='DesensitizeData'),
  requestId?: string(name='RequestId'),
}

model DesensitizeDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DesensitizeDataResponseBody(name='body'),
}

async function desensitizeDataWithOptions(request: DesensitizeDataRequest, runtime: Util.RuntimeOptions): DesensitizeDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DesensitizeData',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function desensitizeData(request: DesensitizeDataRequest): DesensitizeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return desensitizeDataWithOptions(request, runtime);
}

model EstablishRelationTableToBusinessRequest {
  businessId?: string(name='BusinessId'),
  folderId?: string(name='FolderId'),
  projectId?: long(name='ProjectId'),
  projectIdentifier?: string(name='ProjectIdentifier'),
  tableGuid?: string(name='TableGuid'),
}

model EstablishRelationTableToBusinessResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EstablishRelationTableToBusinessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EstablishRelationTableToBusinessResponseBody(name='body'),
}

async function establishRelationTableToBusinessWithOptions(request: EstablishRelationTableToBusinessRequest, runtime: Util.RuntimeOptions): EstablishRelationTableToBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessId)) {
    body['BusinessId'] = request.businessId;
  }
  if (!Util.isUnset(request.folderId)) {
    body['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.tableGuid)) {
    body['TableGuid'] = request.tableGuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EstablishRelationTableToBusiness',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function establishRelationTableToBusiness(request: EstablishRelationTableToBusinessRequest): EstablishRelationTableToBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return establishRelationTableToBusinessWithOptions(request, runtime);
}

model ExportDataSourcesRequest {
  dataSourceType?: string(name='DataSourceType'),
  envType?: int32(name='EnvType'),
  name?: string(name='Name'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  projectId?: long(name='ProjectId'),
  subType?: string(name='SubType'),
}

model ExportDataSourcesResponseBody = {
  data?: {
    dataSources?: [ 
      {
        bindingCalcEngineId?: int32(name='BindingCalcEngineId'),
        connectStatus?: int32(name='ConnectStatus'),
        content?: string(name='Content'),
        dataSourceType?: string(name='DataSourceType'),
        defaultEngine?: boolean(name='DefaultEngine'),
        description?: string(name='Description'),
        envType?: int32(name='EnvType'),
        gmtCreate?: string(name='GmtCreate'),
        gmtModified?: string(name='GmtModified'),
        id?: int32(name='Id'),
        name?: string(name='Name'),
        operator?: string(name='Operator'),
        projectId?: int32(name='ProjectId'),
        sequence?: int32(name='Sequence'),
        shared?: boolean(name='Shared'),
        status?: int32(name='Status'),
        subType?: string(name='SubType'),
        tenantId?: long(name='TenantId'),
      }
    ](name='DataSources'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ExportDataSourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportDataSourcesResponseBody(name='body'),
}

async function exportDataSourcesWithOptions(request: ExportDataSourcesRequest, runtime: Util.RuntimeOptions): ExportDataSourcesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportDataSources',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function exportDataSources(request: ExportDataSourcesRequest): ExportDataSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportDataSourcesWithOptions(request, runtime);
}

model GenerateDISyncTaskConfigForCreatingRequest {
  clientToken?: string(name='ClientToken'),
  projectId?: long(name='ProjectId'),
  taskParam?: string(name='TaskParam'),
  taskType?: string(name='TaskType'),
}

model GenerateDISyncTaskConfigForCreatingResponseBody = {
  data?: {
    message?: string(name='Message'),
    processId?: long(name='ProcessId'),
    status?: string(name='Status'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GenerateDISyncTaskConfigForCreatingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateDISyncTaskConfigForCreatingResponseBody(name='body'),
}

async function generateDISyncTaskConfigForCreatingWithOptions(request: GenerateDISyncTaskConfigForCreatingRequest, runtime: Util.RuntimeOptions): GenerateDISyncTaskConfigForCreatingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskParam)) {
    query['TaskParam'] = request.taskParam;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GenerateDISyncTaskConfigForCreating',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateDISyncTaskConfigForCreating(request: GenerateDISyncTaskConfigForCreatingRequest): GenerateDISyncTaskConfigForCreatingResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateDISyncTaskConfigForCreatingWithOptions(request, runtime);
}

model GenerateDISyncTaskConfigForUpdatingRequest {
  clientToken?: string(name='ClientToken'),
  projectId?: long(name='ProjectId'),
  taskId?: long(name='TaskId'),
  taskParam?: string(name='TaskParam'),
  taskType?: string(name='TaskType'),
}

model GenerateDISyncTaskConfigForUpdatingResponseBody = {
  data?: {
    message?: string(name='Message'),
    processId?: long(name='ProcessId'),
    status?: string(name='Status'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GenerateDISyncTaskConfigForUpdatingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateDISyncTaskConfigForUpdatingResponseBody(name='body'),
}

async function generateDISyncTaskConfigForUpdatingWithOptions(request: GenerateDISyncTaskConfigForUpdatingRequest, runtime: Util.RuntimeOptions): GenerateDISyncTaskConfigForUpdatingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.taskParam)) {
    query['TaskParam'] = request.taskParam;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GenerateDISyncTaskConfigForUpdating',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateDISyncTaskConfigForUpdating(request: GenerateDISyncTaskConfigForUpdatingRequest): GenerateDISyncTaskConfigForUpdatingResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateDISyncTaskConfigForUpdatingWithOptions(request, runtime);
}

model GetBaselineRequest {
  baselineId?: long(name='BaselineId'),
  projectId?: long(name='ProjectId'),
}

model GetBaselineResponseBody = {
  data?: {
    alertEnabled?: boolean(name='AlertEnabled'),
    alertMarginThreshold?: int32(name='AlertMarginThreshold'),
    alertSettings?: [ 
      {
        alertInterval?: int32(name='AlertInterval'),
        alertMaximum?: int32(name='AlertMaximum'),
        alertMethods?: [ string ](name='AlertMethods'),
        alertRecipient?: string(name='AlertRecipient'),
        alertRecipientType?: string(name='AlertRecipientType'),
        alertType?: string(name='AlertType'),
        baselineAlertEnabled?: boolean(name='BaselineAlertEnabled'),
        dingRobots?: [ 
          {
            atAll?: boolean(name='AtAll'),
            webUrl?: string(name='WebUrl'),
          }
        ](name='DingRobots'),
        silenceEndTime?: string(name='SilenceEndTime'),
        silenceStartTime?: string(name='SilenceStartTime'),
        topicTypes?: [ string ](name='TopicTypes'),
        webhooks?: [ string ](name='Webhooks'),
      }
    ](name='AlertSettings'),
    baselineId?: long(name='BaselineId'),
    baselineName?: string(name='BaselineName'),
    baselineType?: string(name='BaselineType'),
    enabled?: boolean(name='Enabled'),
    overTimeSettings?: [ 
      {
        cycle?: int32(name='Cycle'),
        time?: string(name='Time'),
      }
    ](name='OverTimeSettings'),
    owner?: string(name='Owner'),
    priority?: int32(name='Priority'),
    projectId?: long(name='ProjectId'),
    taskIds?: [ long ](name='TaskIds'),
  }(name='Data'),
  dynamicErrorCode?: string(name='DynamicErrorCode'),
  dynamicErrorMessage?: string(name='DynamicErrorMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetBaselineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBaselineResponseBody(name='body'),
}

async function getBaselineWithOptions(request: GetBaselineRequest, runtime: Util.RuntimeOptions): GetBaselineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetBaseline',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBaseline(request: GetBaselineRequest): GetBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBaselineWithOptions(request, runtime);
}

model GetBaselineConfigRequest {
  baselineId?: long(name='BaselineId'),
}

model GetBaselineConfigResponseBody = {
  data?: {
    baselineId?: long(name='BaselineId'),
    baselineName?: string(name='BaselineName'),
    baselineType?: string(name='BaselineType'),
    expHour?: int32(name='ExpHour'),
    expMinu?: int32(name='ExpMinu'),
    hourExpDetail?: string(name='HourExpDetail'),
    hourSlaDetail?: string(name='HourSlaDetail'),
    isDefault?: boolean(name='IsDefault'),
    owner?: string(name='Owner'),
    priority?: int32(name='Priority'),
    projectId?: long(name='ProjectId'),
    slaHour?: int32(name='SlaHour'),
    slaMinu?: int32(name='SlaMinu'),
    useFlag?: boolean(name='UseFlag'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetBaselineConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBaselineConfigResponseBody(name='body'),
}

async function getBaselineConfigWithOptions(request: GetBaselineConfigRequest, runtime: Util.RuntimeOptions): GetBaselineConfigResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetBaselineConfig',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBaselineConfig(request: GetBaselineConfigRequest): GetBaselineConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBaselineConfigWithOptions(request, runtime);
}

model GetBaselineKeyPathRequest {
  baselineId?: long(name='BaselineId'),
  bizdate?: string(name='Bizdate'),
  inGroupId?: int32(name='InGroupId'),
}

model GetBaselineKeyPathResponseBody = {
  data?: [ 
    {
      bizdate?: long(name='Bizdate'),
      inGroupId?: int32(name='InGroupId'),
      instanceId?: long(name='InstanceId'),
      nodeId?: long(name='NodeId'),
      nodeName?: string(name='NodeName'),
      owner?: string(name='Owner'),
      prgType?: int32(name='PrgType'),
      projectId?: long(name='ProjectId'),
      runs?: [ 
        {
          absTime?: long(name='AbsTime'),
          beginCast?: long(name='BeginCast'),
          beginRunningTime?: long(name='BeginRunningTime'),
          beginWaitResTime?: long(name='BeginWaitResTime'),
          beginWaitTimeTime?: long(name='BeginWaitTimeTime'),
          bizdate?: long(name='Bizdate'),
          cycTime?: long(name='CycTime'),
          endCast?: long(name='EndCast'),
          finishTime?: long(name='FinishTime'),
          inGroupId?: int32(name='InGroupId'),
          instanceId?: long(name='InstanceId'),
          nodeId?: long(name='NodeId'),
          nodeName?: string(name='NodeName'),
          owner?: string(name='Owner'),
          projectId?: long(name='ProjectId'),
          status?: string(name='Status'),
        }
      ](name='Runs'),
      topics?: [ 
        {
          addTime?: long(name='AddTime'),
          instanceId?: long(name='InstanceId'),
          topicId?: long(name='TopicId'),
          topicName?: long(name='TopicName'),
        }
      ](name='Topics'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetBaselineKeyPathResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBaselineKeyPathResponseBody(name='body'),
}

async function getBaselineKeyPathWithOptions(request: GetBaselineKeyPathRequest, runtime: Util.RuntimeOptions): GetBaselineKeyPathResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.inGroupId)) {
    body['InGroupId'] = request.inGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetBaselineKeyPath',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBaselineKeyPath(request: GetBaselineKeyPathRequest): GetBaselineKeyPathResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBaselineKeyPathWithOptions(request, runtime);
}

model GetBaselineStatusRequest {
  baselineId?: long(name='BaselineId'),
  bizdate?: string(name='Bizdate'),
  inGroupId?: int32(name='InGroupId'),
}

model GetBaselineStatusResponseBody = {
  data?: {
    baselineId?: long(name='BaselineId'),
    baselineName?: string(name='BaselineName'),
    bizdate?: long(name='Bizdate'),
    blockInstance?: {
      endCast?: long(name='EndCast'),
      finishTime?: long(name='FinishTime'),
      instanceId?: long(name='InstanceId'),
      nodeId?: long(name='NodeId'),
      nodeName?: string(name='NodeName'),
      owner?: string(name='Owner'),
      projectId?: long(name='ProjectId'),
      status?: string(name='Status'),
    }(name='BlockInstance'),
    buffer?: float(name='Buffer'),
    endCast?: long(name='EndCast'),
    expTime?: long(name='ExpTime'),
    finishStatus?: string(name='FinishStatus'),
    finishTime?: long(name='FinishTime'),
    inGroupId?: int32(name='InGroupId'),
    lastInstance?: {
      endCast?: long(name='EndCast'),
      finishTime?: long(name='FinishTime'),
      instanceId?: long(name='InstanceId'),
      nodeId?: long(name='NodeId'),
      nodeName?: string(name='NodeName'),
      owner?: string(name='Owner'),
      projectId?: long(name='ProjectId'),
      status?: string(name='Status'),
    }(name='LastInstance'),
    owner?: string(name='Owner'),
    priority?: int32(name='Priority'),
    projectId?: long(name='ProjectId'),
    slaTime?: long(name='SlaTime'),
    status?: string(name='Status'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetBaselineStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBaselineStatusResponseBody(name='body'),
}

async function getBaselineStatusWithOptions(request: GetBaselineStatusRequest, runtime: Util.RuntimeOptions): GetBaselineStatusResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.inGroupId)) {
    body['InGroupId'] = request.inGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetBaselineStatus',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBaselineStatus(request: GetBaselineStatusRequest): GetBaselineStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBaselineStatusWithOptions(request, runtime);
}

model GetBusinessRequest {
  businessId?: long(name='BusinessId'),
  projectId?: long(name='ProjectId'),
  projectIdentifier?: string(name='ProjectIdentifier'),
}

model GetBusinessResponseBody = {
  data?: {
    businessId?: long(name='BusinessId'),
    businessName?: string(name='BusinessName'),
    description?: string(name='Description'),
    owner?: string(name='Owner'),
    projectId?: string(name='ProjectId'),
    useType?: string(name='UseType'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetBusinessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBusinessResponseBody(name='body'),
}

async function getBusinessWithOptions(request: GetBusinessRequest, runtime: Util.RuntimeOptions): GetBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessId)) {
    body['BusinessId'] = request.businessId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetBusiness',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBusiness(request: GetBusinessRequest): GetBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBusinessWithOptions(request, runtime);
}

model GetDDLJobStatusRequest {
  taskId?: string(name='TaskId'),
}

model GetDDLJobStatusResponseBody = {
  data?: {
    content?: string(name='Content'),
    nextTaskId?: string(name='NextTaskId'),
    status?: string(name='Status'),
    taskId?: string(name='TaskId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetDDLJobStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDDLJobStatusResponseBody(name='body'),
}

async function getDDLJobStatusWithOptions(request: GetDDLJobStatusRequest, runtime: Util.RuntimeOptions): GetDDLJobStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDDLJobStatus',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDDLJobStatus(request: GetDDLJobStatusRequest): GetDDLJobStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDDLJobStatusWithOptions(request, runtime);
}

model GetDISyncInstanceInfoRequest {
  fileId?: long(name='FileId'),
  projectId?: long(name='ProjectId'),
  taskType?: string(name='TaskType'),
}

model GetDISyncInstanceInfoResponseBody = {
  data?: {
    message?: string(name='Message'),
    name?: string(name='Name'),
    solutionInfo?: {
      creatorName?: string(name='CreatorName'),
      id?: long(name='Id'),
      status?: string(name='Status'),
      stepDetail?: [ 
        {
          info?: string(name='Info'),
          status?: string(name='Status'),
          stepId?: long(name='StepId'),
          stepName?: string(name='StepName'),
        }
      ](name='StepDetail'),
    }(name='SolutionInfo'),
    status?: string(name='Status'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetDISyncInstanceInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDISyncInstanceInfoResponseBody(name='body'),
}

async function getDISyncInstanceInfoWithOptions(request: GetDISyncInstanceInfoRequest, runtime: Util.RuntimeOptions): GetDISyncInstanceInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDISyncInstanceInfo',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDISyncInstanceInfo(request: GetDISyncInstanceInfoRequest): GetDISyncInstanceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDISyncInstanceInfoWithOptions(request, runtime);
}

model GetDISyncTaskRequest {
  fileId?: long(name='FileId'),
  projectId?: long(name='ProjectId'),
  taskType?: string(name='TaskType'),
}

model GetDISyncTaskResponseBody = {
  data?: {
    code?: string(name='Code'),
    message?: string(name='Message'),
    solutionDetail?: {
      creatorName?: string(name='CreatorName'),
      id?: long(name='Id'),
      name?: string(name='Name'),
      processContent?: string(name='ProcessContent'),
      processExtra?: string(name='ProcessExtra'),
      projectId?: long(name='ProjectId'),
      sourceType?: string(name='SourceType'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
      submitTime?: string(name='SubmitTime'),
      type?: string(name='Type'),
    }(name='SolutionDetail'),
    status?: string(name='Status'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetDISyncTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDISyncTaskResponseBody(name='body'),
}

async function getDISyncTaskWithOptions(request: GetDISyncTaskRequest, runtime: Util.RuntimeOptions): GetDISyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDISyncTask',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDISyncTask(request: GetDISyncTaskRequest): GetDISyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDISyncTaskWithOptions(request, runtime);
}

model GetDagRequest {
  dagId?: long(name='DagId'),
  projectEnv?: string(name='ProjectEnv'),
}

model GetDagResponseBody = {
  data?: {
    bizdate?: long(name='Bizdate'),
    createTime?: long(name='CreateTime'),
    createUser?: string(name='CreateUser'),
    dagId?: long(name='DagId'),
    finishTime?: long(name='FinishTime'),
    gmtdate?: long(name='Gmtdate'),
    modifyTime?: long(name='ModifyTime'),
    name?: string(name='Name'),
    opSeq?: long(name='OpSeq'),
    projectId?: long(name='ProjectId'),
    startTime?: long(name='StartTime'),
    status?: string(name='Status'),
    type?: string(name='Type'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetDagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDagResponseBody(name='body'),
}

async function getDagWithOptions(request: GetDagRequest, runtime: Util.RuntimeOptions): GetDagResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.dagId)) {
    body['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDag',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDag(request: GetDagRequest): GetDagResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDagWithOptions(request, runtime);
}

model GetDataServiceApiRequest {
  apiId?: long(name='ApiId'),
  projectId?: long(name='ProjectId'),
  tenantId?: long(name='TenantId'),
}

model GetDataServiceApiResponseBody = {
  data?: {
    apiId?: long(name='ApiId'),
    apiMode?: int32(name='ApiMode'),
    apiName?: string(name='ApiName'),
    apiPath?: string(name='ApiPath'),
    createdTime?: string(name='CreatedTime'),
    creatorId?: string(name='CreatorId'),
    description?: string(name='Description'),
    folderId?: long(name='FolderId'),
    groupId?: string(name='GroupId'),
    modifiedTime?: string(name='ModifiedTime'),
    operatorId?: string(name='OperatorId'),
    projectId?: long(name='ProjectId'),
    protocols?: [ int32 ](name='Protocols'),
    registrationDetails?: {
      failedResultSample?: string(name='FailedResultSample'),
      registrationErrorCodes?: [ 
        {
          errorCode?: string(name='ErrorCode'),
          errorMessage?: string(name='ErrorMessage'),
          errorSolution?: string(name='ErrorSolution'),
        }
      ](name='RegistrationErrorCodes'),
      registrationRequestParameters?: [ 
        {
          columnName?: string(name='ColumnName'),
          defaultValue?: string(name='DefaultValue'),
          exampleValue?: string(name='ExampleValue'),
          isRequiredParameter?: boolean(name='IsRequiredParameter'),
          parameterDataType?: int32(name='ParameterDataType'),
          parameterDescription?: string(name='ParameterDescription'),
          parameterName?: string(name='ParameterName'),
          parameterOperator?: int32(name='ParameterOperator'),
          parameterPosition?: int32(name='ParameterPosition'),
        }
      ](name='RegistrationRequestParameters'),
      serviceContentType?: int32(name='ServiceContentType'),
      serviceHost?: string(name='ServiceHost'),
      servicePath?: string(name='ServicePath'),
      serviceRequestBodyDescription?: string(name='ServiceRequestBodyDescription'),
      successfulResultSample?: string(name='SuccessfulResultSample'),
    }(name='RegistrationDetails'),
    requestMethod?: int32(name='RequestMethod'),
    responseContentType?: int32(name='ResponseContentType'),
    scriptDetails?: {
      isPagedResponse?: boolean(name='IsPagedResponse'),
      script?: string(name='Script'),
      scriptConnection?: {
        connectionId?: long(name='ConnectionId'),
        tableName?: string(name='TableName'),
      }(name='ScriptConnection'),
      scriptRequestParameters?: [ 
        {
          columnName?: string(name='ColumnName'),
          defaultValue?: string(name='DefaultValue'),
          exampleValue?: string(name='ExampleValue'),
          isRequiredParameter?: boolean(name='IsRequiredParameter'),
          parameterDataType?: int32(name='ParameterDataType'),
          parameterDescription?: string(name='ParameterDescription'),
          parameterName?: string(name='ParameterName'),
          parameterOperator?: int32(name='ParameterOperator'),
          parameterPosition?: int32(name='ParameterPosition'),
        }
      ](name='ScriptRequestParameters'),
      scriptResponseParameters?: [ 
        {
          columnName?: string(name='ColumnName'),
          exampleValue?: string(name='ExampleValue'),
          parameterDataType?: int32(name='ParameterDataType'),
          parameterDescription?: string(name='ParameterDescription'),
          parameterName?: string(name='ParameterName'),
        }
      ](name='ScriptResponseParameters'),
    }(name='ScriptDetails'),
    status?: int32(name='Status'),
    tenantId?: long(name='TenantId'),
    timeout?: int32(name='Timeout'),
    visibleRange?: int32(name='VisibleRange'),
    wizardDetails?: {
      isPagedResponse?: boolean(name='IsPagedResponse'),
      wizardConnection?: {
        connectionId?: long(name='ConnectionId'),
        tableName?: string(name='TableName'),
      }(name='WizardConnection'),
      wizardRequestParameters?: [ 
        {
          columnName?: string(name='ColumnName'),
          defaultValue?: string(name='DefaultValue'),
          exampleValue?: string(name='ExampleValue'),
          isRequiredParameter?: boolean(name='IsRequiredParameter'),
          parameterDataType?: int32(name='ParameterDataType'),
          parameterDescription?: string(name='ParameterDescription'),
          parameterName?: string(name='ParameterName'),
          parameterOperator?: int32(name='ParameterOperator'),
          parameterPosition?: int32(name='ParameterPosition'),
        }
      ](name='WizardRequestParameters'),
      wizardResponseParameters?: [ 
        {
          columnName?: string(name='ColumnName'),
          exampleValue?: string(name='ExampleValue'),
          parameterDataType?: int32(name='ParameterDataType'),
          parameterDescription?: string(name='ParameterDescription'),
          parameterName?: string(name='ParameterName'),
        }
      ](name='WizardResponseParameters'),
    }(name='WizardDetails'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetDataServiceApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataServiceApiResponseBody(name='body'),
}

async function getDataServiceApiWithOptions(request: GetDataServiceApiRequest, runtime: Util.RuntimeOptions): GetDataServiceApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataServiceApi(request: GetDataServiceApiRequest): GetDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataServiceApiWithOptions(request, runtime);
}

model GetDataServiceApiTestRequest {
  testId?: long(name='TestId'),
}

model GetDataServiceApiTestResponseBody = {
  data?: {
    apiId?: long(name='ApiId'),
    costTime?: string(name='CostTime'),
    debugInfo?: string(name='DebugInfo'),
    nodesDebugInfo?: string(name='NodesDebugInfo'),
    paramMap?: string(name='ParamMap'),
    retCode?: long(name='RetCode'),
    retResult?: string(name='RetResult'),
    status?: string(name='Status'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetDataServiceApiTestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataServiceApiTestResponseBody(name='body'),
}

async function getDataServiceApiTestWithOptions(request: GetDataServiceApiTestRequest, runtime: Util.RuntimeOptions): GetDataServiceApiTestResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataServiceApiTest',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataServiceApiTest(request: GetDataServiceApiTestRequest): GetDataServiceApiTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataServiceApiTestWithOptions(request, runtime);
}

model GetDataServiceApplicationRequest {
  applicationId?: long(name='ApplicationId'),
  projectId?: long(name='ProjectId'),
  tenantId?: long(name='TenantId'),
}

model GetDataServiceApplicationResponseBody = {
  data?: {
    applicationCode?: string(name='ApplicationCode'),
    applicationId?: long(name='ApplicationId'),
    applicationKey?: string(name='ApplicationKey'),
    applicationName?: string(name='ApplicationName'),
    applicationSecret?: string(name='ApplicationSecret'),
    projectId?: long(name='ProjectId'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetDataServiceApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataServiceApplicationResponseBody(name='body'),
}

async function getDataServiceApplicationWithOptions(request: GetDataServiceApplicationRequest, runtime: Util.RuntimeOptions): GetDataServiceApplicationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.applicationId)) {
    body['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDataServiceApplication',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataServiceApplication(request: GetDataServiceApplicationRequest): GetDataServiceApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataServiceApplicationWithOptions(request, runtime);
}

model GetDataServiceFolderRequest {
  folderId?: long(name='FolderId'),
  projectId?: long(name='ProjectId'),
  tenantId?: long(name='TenantId'),
}

model GetDataServiceFolderResponseBody = {
  folder?: {
    createdTime?: string(name='CreatedTime'),
    folderId?: long(name='FolderId'),
    folderName?: string(name='FolderName'),
    groupId?: string(name='GroupId'),
    modifiedTime?: string(name='ModifiedTime'),
    parentId?: long(name='ParentId'),
    projectId?: long(name='ProjectId'),
    tenantId?: long(name='TenantId'),
  }(name='Folder'),
  requestId?: string(name='RequestId'),
}

model GetDataServiceFolderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataServiceFolderResponseBody(name='body'),
}

async function getDataServiceFolderWithOptions(request: GetDataServiceFolderRequest, runtime: Util.RuntimeOptions): GetDataServiceFolderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderId)) {
    body['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDataServiceFolder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataServiceFolder(request: GetDataServiceFolderRequest): GetDataServiceFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataServiceFolderWithOptions(request, runtime);
}

model GetDataServiceGroupRequest {
  groupId?: string(name='GroupId'),
  projectId?: long(name='ProjectId'),
  tenantId?: long(name='TenantId'),
}

model GetDataServiceGroupResponseBody = {
  group?: {
    apiGatewayGroupId?: string(name='ApiGatewayGroupId'),
    createdTime?: string(name='CreatedTime'),
    creatorId?: string(name='CreatorId'),
    description?: string(name='Description'),
    groupId?: string(name='GroupId'),
    groupName?: string(name='GroupName'),
    modifiedTime?: string(name='ModifiedTime'),
    projectId?: long(name='ProjectId'),
    tenantId?: long(name='TenantId'),
  }(name='Group'),
  requestId?: string(name='RequestId'),
}

model GetDataServiceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataServiceGroupResponseBody(name='body'),
}

async function getDataServiceGroupWithOptions(request: GetDataServiceGroupRequest, runtime: Util.RuntimeOptions): GetDataServiceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDataServiceGroup',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataServiceGroup(request: GetDataServiceGroupRequest): GetDataServiceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataServiceGroupWithOptions(request, runtime);
}

model GetDataServicePublishedApiRequest {
  apiId?: long(name='ApiId'),
  projectId?: long(name='ProjectId'),
  tenantId?: long(name='TenantId'),
}

model GetDataServicePublishedApiResponseBody = {
  data?: {
    apiId?: long(name='ApiId'),
    apiMode?: int32(name='ApiMode'),
    apiName?: string(name='ApiName'),
    apiPath?: string(name='ApiPath'),
    createdTime?: string(name='CreatedTime'),
    creatorId?: string(name='CreatorId'),
    description?: string(name='Description'),
    groupId?: string(name='GroupId'),
    modifiedTime?: string(name='ModifiedTime'),
    operatorId?: string(name='OperatorId'),
    projectId?: long(name='ProjectId'),
    protocols?: [ int32 ](name='Protocols'),
    registrationDetails?: {
      failedResultSample?: string(name='FailedResultSample'),
      registrationErrorCodes?: [ 
        {
          errorCode?: string(name='ErrorCode'),
          errorMessage?: string(name='ErrorMessage'),
          errorSolution?: string(name='ErrorSolution'),
        }
      ](name='RegistrationErrorCodes'),
      registrationRequestParameters?: [ 
        {
          defaultValue?: string(name='DefaultValue'),
          exampleValue?: string(name='ExampleValue'),
          isRequiredParameter?: boolean(name='IsRequiredParameter'),
          parameterDataType?: int32(name='ParameterDataType'),
          parameterDescription?: string(name='ParameterDescription'),
          parameterName?: string(name='ParameterName'),
          parameterOperator?: int32(name='ParameterOperator'),
          parameterPosition?: int32(name='ParameterPosition'),
        }
      ](name='RegistrationRequestParameters'),
      serviceContentType?: int32(name='ServiceContentType'),
      serviceHost?: string(name='ServiceHost'),
      servicePath?: string(name='ServicePath'),
      serviceRequestBodyDescription?: string(name='ServiceRequestBodyDescription'),
      successfulResultSample?: string(name='SuccessfulResultSample'),
    }(name='RegistrationDetails'),
    requestMethod?: int32(name='RequestMethod'),
    responseContentType?: int32(name='ResponseContentType'),
    scriptDetails?: {
      failedResultSample?: string(name='FailedResultSample'),
      isPagedResponse?: boolean(name='IsPagedResponse'),
      script?: string(name='Script'),
      scriptConnection?: {
        connectionId?: long(name='ConnectionId'),
        tableName?: string(name='TableName'),
      }(name='ScriptConnection'),
      scriptErrorCodes?: [ 
        {
          errorCode?: string(name='ErrorCode'),
          errorMessage?: string(name='ErrorMessage'),
          errorSolution?: string(name='ErrorSolution'),
        }
      ](name='ScriptErrorCodes'),
      scriptRequestParameters?: [ 
        {
          defaultValue?: string(name='DefaultValue'),
          exampleValue?: string(name='ExampleValue'),
          isRequiredParameter?: boolean(name='IsRequiredParameter'),
          parameterDataType?: int32(name='ParameterDataType'),
          parameterDescription?: string(name='ParameterDescription'),
          parameterName?: string(name='ParameterName'),
          parameterOperator?: int32(name='ParameterOperator'),
          parameterPosition?: int32(name='ParameterPosition'),
        }
      ](name='ScriptRequestParameters'),
      scriptResponseParameters?: [ 
        {
          exampleValue?: string(name='ExampleValue'),
          parameterDataType?: int32(name='ParameterDataType'),
          parameterDescription?: string(name='ParameterDescription'),
          parameterName?: string(name='ParameterName'),
        }
      ](name='ScriptResponseParameters'),
      successfulResultSample?: string(name='SuccessfulResultSample'),
    }(name='ScriptDetails'),
    status?: int32(name='Status'),
    tenantId?: long(name='TenantId'),
    timeout?: int32(name='Timeout'),
    visibleRange?: int32(name='VisibleRange'),
    wizardDetails?: {
      failedResultSample?: string(name='FailedResultSample'),
      isPagedResponse?: boolean(name='IsPagedResponse'),
      successfulResultSample?: string(name='SuccessfulResultSample'),
      wizardConnection?: {
        connectionId?: long(name='ConnectionId'),
        tableName?: string(name='TableName'),
      }(name='WizardConnection'),
      wizardErrorCodes?: [ 
        {
          errorCode?: string(name='ErrorCode'),
          errorMessage?: string(name='ErrorMessage'),
          errorSolution?: string(name='ErrorSolution'),
        }
      ](name='WizardErrorCodes'),
      wizardRequestParameters?: [ 
        {
          defaultValue?: string(name='DefaultValue'),
          exampleValue?: string(name='ExampleValue'),
          isRequiredParameter?: boolean(name='IsRequiredParameter'),
          parameterDataType?: int32(name='ParameterDataType'),
          parameterDescription?: string(name='ParameterDescription'),
          parameterName?: string(name='ParameterName'),
          parameterOperator?: int32(name='ParameterOperator'),
          parameterPosition?: int32(name='ParameterPosition'),
        }
      ](name='WizardRequestParameters'),
      wizardResponseParameters?: [ 
        {
          exampleValue?: string(name='ExampleValue'),
          parameterDataType?: int32(name='ParameterDataType'),
          parameterDescription?: string(name='ParameterDescription'),
          parameterName?: string(name='ParameterName'),
        }
      ](name='WizardResponseParameters'),
    }(name='WizardDetails'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetDataServicePublishedApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataServicePublishedApiResponseBody(name='body'),
}

async function getDataServicePublishedApiWithOptions(request: GetDataServicePublishedApiRequest, runtime: Util.RuntimeOptions): GetDataServicePublishedApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDataServicePublishedApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataServicePublishedApi(request: GetDataServicePublishedApiRequest): GetDataServicePublishedApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataServicePublishedApiWithOptions(request, runtime);
}

model GetDataSourceMetaRequest {
  datasourceName?: string(name='DatasourceName'),
  envType?: string(name='EnvType'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  projectId?: long(name='ProjectId'),
}

model GetDataSourceMetaResponseBody = {
  data?: {
    message?: string(name='Message'),
    meta?: string(name='Meta'),
    status?: string(name='Status'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetDataSourceMetaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataSourceMetaResponseBody(name='body'),
}

async function getDataSourceMetaWithOptions(request: GetDataSourceMetaRequest, runtime: Util.RuntimeOptions): GetDataSourceMetaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasourceName)) {
    query['DatasourceName'] = request.datasourceName;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataSourceMeta',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataSourceMeta(request: GetDataSourceMetaRequest): GetDataSourceMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataSourceMetaWithOptions(request, runtime);
}

model GetDeploymentRequest {
  deploymentId?: long(name='DeploymentId'),
  projectId?: long(name='ProjectId'),
  projectIdentifier?: string(name='ProjectIdentifier'),
}

model GetDeploymentResponseBody = {
  data?: {
    deployedItems?: [ 
      {
        fileId?: long(name='FileId'),
        fileVersion?: long(name='FileVersion'),
        status?: int32(name='Status'),
      }
    ](name='DeployedItems'),
    deployment?: {
      checkingStatus?: int32(name='CheckingStatus'),
      createTime?: long(name='CreateTime'),
      creatorId?: string(name='CreatorId'),
      errorMessage?: string(name='ErrorMessage'),
      executeTime?: long(name='ExecuteTime'),
      fromEnvironment?: int32(name='FromEnvironment'),
      handlerId?: string(name='HandlerId'),
      name?: string(name='Name'),
      status?: int32(name='Status'),
      toEnvironment?: int32(name='ToEnvironment'),
    }(name='Deployment'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetDeploymentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeploymentResponseBody(name='body'),
}

async function getDeploymentWithOptions(request: GetDeploymentRequest, runtime: Util.RuntimeOptions): GetDeploymentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deploymentId)) {
    body['DeploymentId'] = request.deploymentId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDeployment',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDeployment(request: GetDeploymentRequest): GetDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeploymentWithOptions(request, runtime);
}

model GetExtensionRequest {
  extensionCode?: string(name='ExtensionCode'),
}

model GetExtensionResponseBody = {
  extension?: {
    bindEventList?: [ 
      {
        eventCode?: string(name='EventCode'),
        eventName?: string(name='EventName'),
      }
    ](name='BindEventList'),
    detailUrl?: string(name='DetailUrl'),
    eventCategoryList?: [ 
      {
        categoryCode?: string(name='CategoryCode'),
        categoryName?: string(name='CategoryName'),
      }
    ](name='EventCategoryList'),
    extensionCode?: string(name='ExtensionCode'),
    extensionDesc?: string(name='ExtensionDesc'),
    extensionName?: string(name='ExtensionName'),
    helpDocUrl?: string(name='HelpDocUrl'),
    optionSetting?: string(name='OptionSetting'),
    parameterSetting?: string(name='ParameterSetting'),
    projectTesting?: long(name='ProjectTesting'),
    status?: int32(name='Status'),
  }(name='Extension'),
  requestId?: string(name='RequestId'),
}

model GetExtensionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetExtensionResponseBody(name='body'),
}

async function getExtensionWithOptions(request: GetExtensionRequest, runtime: Util.RuntimeOptions): GetExtensionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.extensionCode)) {
    query['ExtensionCode'] = request.extensionCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetExtension',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getExtension(request: GetExtensionRequest): GetExtensionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getExtensionWithOptions(request, runtime);
}

model GetFileRequest {
  fileId?: long(name='FileId'),
  nodeId?: long(name='NodeId'),
  projectId?: long(name='ProjectId'),
  projectIdentifier?: string(name='ProjectIdentifier'),
}

model GetFileResponseBody = {
  data?: {
    file?: {
      advancedSettings?: string(name='AdvancedSettings'),
      autoParsing?: boolean(name='AutoParsing'),
      bizId?: long(name='BizId'),
      businessId?: long(name='BusinessId'),
      commitStatus?: int32(name='CommitStatus'),
      connectionName?: string(name='ConnectionName'),
      content?: string(name='Content'),
      createTime?: long(name='CreateTime'),
      createUser?: string(name='CreateUser'),
      currentVersion?: int32(name='CurrentVersion'),
      deletedStatus?: string(name='DeletedStatus'),
      fileDescription?: string(name='FileDescription'),
      fileFolderId?: string(name='FileFolderId'),
      fileName?: string(name='FileName'),
      fileType?: int32(name='FileType'),
      isMaxCompute?: boolean(name='IsMaxCompute'),
      lastEditTime?: long(name='LastEditTime'),
      lastEditUser?: string(name='LastEditUser'),
      nodeId?: long(name='NodeId'),
      owner?: string(name='Owner'),
      parentId?: long(name='ParentId'),
      useType?: string(name='UseType'),
    }(name='File'),
    nodeConfiguration?: {
      autoRerunIntervalMillis?: int32(name='AutoRerunIntervalMillis'),
      autoRerunTimes?: int32(name='AutoRerunTimes'),
      cronExpress?: string(name='CronExpress'),
      cycleType?: string(name='CycleType'),
      dependentNodeIdList?: string(name='DependentNodeIdList'),
      dependentType?: string(name='DependentType'),
      endEffectDate?: long(name='EndEffectDate'),
      inputList?: [ 
        {
          input?: string(name='Input'),
          parseType?: string(name='ParseType'),
        }
      ](name='InputList'),
      inputParameters?: [ 
        {
          parameterName?: string(name='ParameterName'),
          valueSource?: string(name='ValueSource'),
        }
      ](name='InputParameters'),
      outputList?: [ 
        {
          output?: string(name='Output'),
          refTableName?: string(name='RefTableName'),
        }
      ](name='OutputList'),
      outputParameters?: [ 
        {
          description?: string(name='Description'),
          parameterName?: string(name='ParameterName'),
          type?: string(name='Type'),
          value?: string(name='Value'),
        }
      ](name='OutputParameters'),
      paraValue?: string(name='ParaValue'),
      rerunMode?: string(name='RerunMode'),
      resourceGroupId?: long(name='ResourceGroupId'),
      schedulerType?: string(name='SchedulerType'),
      startEffectDate?: long(name='StartEffectDate'),
      startImmediately?: boolean(name='StartImmediately'),
      stop?: boolean(name='Stop'),
    }(name='NodeConfiguration'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFileResponseBody(name='body'),
}

async function getFileWithOptions(request: GetFileRequest, runtime: Util.RuntimeOptions): GetFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFile(request: GetFileRequest): GetFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFileWithOptions(request, runtime);
}

model GetFileTypeStatisticRequest {
  projectEnv?: string(name='ProjectEnv'),
  projectId?: long(name='ProjectId'),
}

model GetFileTypeStatisticResponseBody = {
  programTypeAndCounts?: [ 
    {
      count?: int32(name='Count'),
      programType?: string(name='ProgramType'),
    }
  ](name='ProgramTypeAndCounts'),
  requestId?: string(name='RequestId'),
}

model GetFileTypeStatisticResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFileTypeStatisticResponseBody(name='body'),
}

async function getFileTypeStatisticWithOptions(request: GetFileTypeStatisticRequest, runtime: Util.RuntimeOptions): GetFileTypeStatisticResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetFileTypeStatistic',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFileTypeStatistic(request: GetFileTypeStatisticRequest): GetFileTypeStatisticResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFileTypeStatisticWithOptions(request, runtime);
}

model GetFileVersionRequest {
  fileId?: long(name='FileId'),
  fileVersion?: int32(name='FileVersion'),
  projectId?: long(name='ProjectId'),
  projectIdentifier?: string(name='ProjectIdentifier'),
}

model GetFileVersionResponseBody = {
  data?: {
    changeType?: string(name='ChangeType'),
    comment?: string(name='Comment'),
    commitTime?: long(name='CommitTime'),
    commitUser?: string(name='CommitUser'),
    fileContent?: string(name='FileContent'),
    fileName?: string(name='FileName'),
    filePropertyContent?: string(name='FilePropertyContent'),
    fileVersion?: int32(name='FileVersion'),
    isCurrentProd?: boolean(name='IsCurrentProd'),
    nodeContent?: string(name='NodeContent'),
    nodeId?: long(name='NodeId'),
    status?: string(name='Status'),
    useType?: string(name='UseType'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetFileVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFileVersionResponseBody(name='body'),
}

async function getFileVersionWithOptions(request: GetFileVersionRequest, runtime: Util.RuntimeOptions): GetFileVersionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.fileVersion)) {
    body['FileVersion'] = request.fileVersion;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetFileVersion',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFileVersion(request: GetFileVersionRequest): GetFileVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFileVersionWithOptions(request, runtime);
}

model GetFolderRequest {
  folderId?: string(name='FolderId'),
  folderPath?: string(name='FolderPath'),
  projectId?: long(name='ProjectId'),
  projectIdentifier?: string(name='ProjectIdentifier'),
}

model GetFolderResponseBody = {
  data?: {
    folderId?: string(name='FolderId'),
    folderPath?: string(name='FolderPath'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetFolderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFolderResponseBody(name='body'),
}

async function getFolderWithOptions(request: GetFolderRequest, runtime: Util.RuntimeOptions): GetFolderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderId)) {
    body['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.folderPath)) {
    body['FolderPath'] = request.folderPath;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetFolder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFolder(request: GetFolderRequest): GetFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFolderWithOptions(request, runtime);
}

model GetIDEEventDetailRequest {
  messageId?: string(name='MessageId'),
  projectId?: long(name='ProjectId'),
}

model GetIDEEventDetailResponseBody = {
  eventDetail?: {
    committedFile?: {
      changeType?: string(name='ChangeType'),
      comment?: string(name='Comment'),
      committor?: string(name='Committor'),
      content?: string(name='Content'),
      fileId?: long(name='FileId'),
      fileName?: string(name='FileName'),
      filePropertyContent?: {
        businessId?: long(name='BusinessId'),
        currentVersion?: long(name='CurrentVersion'),
        dataSourceName?: string(name='DataSourceName'),
        folderId?: string(name='FolderId'),
        owner?: string(name='Owner'),
        parentFileId?: long(name='ParentFileId'),
      }(name='FilePropertyContent'),
      fileType?: long(name='FileType'),
      nodeConfiguration?: {
        autoRerunIntervalMillis?: long(name='AutoRerunIntervalMillis'),
        autoRerunTimes?: long(name='AutoRerunTimes'),
        cronExpress?: string(name='CronExpress'),
        cycleType?: string(name='CycleType'),
        dependentNodeIdList?: string(name='DependentNodeIdList'),
        dependentType?: string(name='DependentType'),
        inputList?: [ 
          {
            input?: string(name='Input'),
            parseType?: string(name='ParseType'),
          }
        ](name='InputList'),
        outputList?: [ 
          {
            output?: string(name='Output'),
            refTableName?: string(name='RefTableName'),
          }
        ](name='OutputList'),
        paraValue?: string(name='ParaValue'),
        rerunMode?: string(name='RerunMode'),
        resourceGroupId?: long(name='ResourceGroupId'),
        schedulerType?: string(name='SchedulerType'),
      }(name='NodeConfiguration'),
      nodeId?: long(name='NodeId'),
      useType?: string(name='UseType'),
    }(name='CommittedFile'),
    deletedFile?: {
      businessId?: long(name='BusinessId'),
      content?: string(name='Content'),
      currentVersion?: long(name='CurrentVersion'),
      dataSourceName?: string(name='DataSourceName'),
      fileId?: long(name='FileId'),
      fileName?: string(name='FileName'),
      fileType?: long(name='FileType'),
      folderId?: string(name='FolderId'),
      nodeId?: long(name='NodeId'),
      owner?: string(name='Owner'),
      parentFileId?: long(name='ParentFileId'),
      useType?: string(name='UseType'),
    }(name='DeletedFile'),
    fileExecutionCommand?: {
      content?: string(name='Content'),
      dataSourceName?: string(name='DataSourceName'),
      fileId?: long(name='FileId'),
      fileType?: long(name='FileType'),
    }(name='FileExecutionCommand'),
    tableModel?: {
      columns?: [ 
        {
          columnName?: string(name='ColumnName'),
          columnType?: string(name='ColumnType'),
          comment?: string(name='Comment'),
          isPartitionColumn?: boolean(name='IsPartitionColumn'),
        }
      ](name='Columns'),
      comment?: string(name='Comment'),
      dataSourceName?: string(name='DataSourceName'),
      env?: string(name='Env'),
      lifeCycle?: long(name='LifeCycle'),
      location?: string(name='Location'),
      tableName?: string(name='TableName'),
    }(name='TableModel'),
  }(name='EventDetail'),
  requestId?: string(name='RequestId'),
}

model GetIDEEventDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetIDEEventDetailResponseBody(name='body'),
}

async function getIDEEventDetailWithOptions(request: GetIDEEventDetailRequest, runtime: Util.RuntimeOptions): GetIDEEventDetailResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.messageId)) {
    body['MessageId'] = request.messageId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetIDEEventDetail',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getIDEEventDetail(request: GetIDEEventDetailRequest): GetIDEEventDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getIDEEventDetailWithOptions(request, runtime);
}

model GetInstanceRequest {
  instanceId?: long(name='InstanceId'),
  projectEnv?: string(name='ProjectEnv'),
}

model GetInstanceResponseBody = {
  data?: {
    baselineId?: long(name='BaselineId'),
    beginRunningTime?: long(name='BeginRunningTime'),
    beginWaitResTime?: long(name='BeginWaitResTime'),
    beginWaitTimeTime?: long(name='BeginWaitTimeTime'),
    bizdate?: long(name='Bizdate'),
    businessId?: long(name='BusinessId'),
    connection?: string(name='Connection'),
    createTime?: long(name='CreateTime'),
    createUser?: string(name='CreateUser'),
    cycTime?: long(name='CycTime'),
    dagId?: long(name='DagId'),
    dagType?: string(name='DagType'),
    dqcDescription?: string(name='DqcDescription'),
    dqcType?: int32(name='DqcType'),
    finishTime?: long(name='FinishTime'),
    instanceId?: long(name='InstanceId'),
    modifyTime?: long(name='ModifyTime'),
    nodeId?: long(name='NodeId'),
    nodeName?: string(name='NodeName'),
    paramValues?: string(name='ParamValues'),
    priority?: int32(name='Priority'),
    relatedFlowId?: long(name='RelatedFlowId'),
    repeatInterval?: long(name='RepeatInterval'),
    repeatability?: boolean(name='Repeatability'),
    status?: string(name='Status'),
    taskRerunTime?: int32(name='TaskRerunTime'),
    taskType?: string(name='TaskType'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstanceWithOptions(request: GetInstanceRequest, runtime: Util.RuntimeOptions): GetInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceWithOptions(request, runtime);
}

model GetInstanceConsumeTimeRankRequest {
  bizdate?: string(name='Bizdate'),
  projectId?: long(name='ProjectId'),
}

model GetInstanceConsumeTimeRankResponseBody = {
  instanceConsumeTimeRank?: {
    consumeTimeRank?: [ 
      {
        bizdate?: long(name='Bizdate'),
        consumed?: long(name='Consumed'),
        instanceId?: long(name='InstanceId'),
        nodeId?: long(name='NodeId'),
        nodeName?: string(name='NodeName'),
        owner?: string(name='Owner'),
        prgType?: int32(name='PrgType'),
      }
    ](name='ConsumeTimeRank'),
    updateTime?: long(name='UpdateTime'),
  }(name='InstanceConsumeTimeRank'),
  requestId?: string(name='RequestId'),
}

model GetInstanceConsumeTimeRankResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceConsumeTimeRankResponseBody(name='body'),
}

async function getInstanceConsumeTimeRankWithOptions(request: GetInstanceConsumeTimeRankRequest, runtime: Util.RuntimeOptions): GetInstanceConsumeTimeRankResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceConsumeTimeRank',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstanceConsumeTimeRank(request: GetInstanceConsumeTimeRankRequest): GetInstanceConsumeTimeRankResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceConsumeTimeRankWithOptions(request, runtime);
}

model GetInstanceCountTrendRequest {
  beginDate?: string(name='BeginDate'),
  endDate?: string(name='EndDate'),
  projectId?: long(name='ProjectId'),
}

model GetInstanceCountTrendResponseBody = {
  instanceCounts?: [ 
    {
      count?: int32(name='Count'),
      date?: long(name='Date'),
    }
  ](name='InstanceCounts'),
  requestId?: string(name='RequestId'),
}

model GetInstanceCountTrendResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceCountTrendResponseBody(name='body'),
}

async function getInstanceCountTrendWithOptions(request: GetInstanceCountTrendRequest, runtime: Util.RuntimeOptions): GetInstanceCountTrendResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.beginDate)) {
    body['BeginDate'] = request.beginDate;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceCountTrend',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstanceCountTrend(request: GetInstanceCountTrendRequest): GetInstanceCountTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceCountTrendWithOptions(request, runtime);
}

model GetInstanceErrorRankRequest {
  projectId?: long(name='ProjectId'),
}

model GetInstanceErrorRankResponseBody = {
  instanceErrorRank?: {
    errorRank?: [ 
      {
        count?: int32(name='Count'),
        nodeId?: long(name='NodeId'),
        nodeName?: string(name='NodeName'),
        owner?: string(name='Owner'),
        prgType?: int32(name='PrgType'),
        projectId?: long(name='ProjectId'),
      }
    ](name='ErrorRank'),
    updateTime?: long(name='UpdateTime'),
  }(name='InstanceErrorRank'),
  requestId?: string(name='RequestId'),
}

model GetInstanceErrorRankResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceErrorRankResponseBody(name='body'),
}

async function getInstanceErrorRankWithOptions(request: GetInstanceErrorRankRequest, runtime: Util.RuntimeOptions): GetInstanceErrorRankResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceErrorRank',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstanceErrorRank(request: GetInstanceErrorRankRequest): GetInstanceErrorRankResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceErrorRankWithOptions(request, runtime);
}

model GetInstanceLogRequest {
  instanceHistoryId?: long(name='InstanceHistoryId'),
  instanceId?: long(name='InstanceId'),
  projectEnv?: string(name='ProjectEnv'),
}

model GetInstanceLogResponseBody = {
  data?: string(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetInstanceLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceLogResponseBody(name='body'),
}

async function getInstanceLogWithOptions(request: GetInstanceLogRequest, runtime: Util.RuntimeOptions): GetInstanceLogResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceHistoryId)) {
    body['InstanceHistoryId'] = request.instanceHistoryId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceLog',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstanceLog(request: GetInstanceLogRequest): GetInstanceLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceLogWithOptions(request, runtime);
}

model GetInstanceStatusCountRequest {
  bizDate?: string(name='BizDate'),
  projectEnv?: string(name='ProjectEnv'),
  projectId?: long(name='ProjectId'),
}

model GetInstanceStatusCountResponseBody = {
  requestId?: string(name='RequestId'),
  statusCount?: {
    failureCount?: int32(name='FailureCount'),
    notRunCount?: int32(name='NotRunCount'),
    runningCount?: int32(name='RunningCount'),
    successCount?: int32(name='SuccessCount'),
    totalCount?: int32(name='TotalCount'),
    waitResCount?: int32(name='WaitResCount'),
    waitTimeCount?: int32(name='WaitTimeCount'),
  }(name='StatusCount'),
}

model GetInstanceStatusCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceStatusCountResponseBody(name='body'),
}

async function getInstanceStatusCountWithOptions(request: GetInstanceStatusCountRequest, runtime: Util.RuntimeOptions): GetInstanceStatusCountResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizDate)) {
    body['BizDate'] = request.bizDate;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceStatusCount',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstanceStatusCount(request: GetInstanceStatusCountRequest): GetInstanceStatusCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceStatusCountWithOptions(request, runtime);
}

model GetInstanceStatusStatisticRequest {
  bizDate?: string(name='BizDate'),
  dagType?: string(name='DagType'),
  projectEnv?: string(name='ProjectEnv'),
  projectId?: long(name='ProjectId'),
  schedulerType?: string(name='SchedulerType'),
}

model GetInstanceStatusStatisticResponseBody = {
  requestId?: string(name='RequestId'),
  statusCount?: {
    failureCount?: int32(name='FailureCount'),
    notRunCount?: int32(name='NotRunCount'),
    runningCount?: int32(name='RunningCount'),
    successCount?: int32(name='SuccessCount'),
    totalCount?: int32(name='TotalCount'),
    waitResCount?: int32(name='WaitResCount'),
    waitTimeCount?: int32(name='WaitTimeCount'),
  }(name='StatusCount'),
}

model GetInstanceStatusStatisticResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceStatusStatisticResponseBody(name='body'),
}

async function getInstanceStatusStatisticWithOptions(request: GetInstanceStatusStatisticRequest, runtime: Util.RuntimeOptions): GetInstanceStatusStatisticResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizDate)) {
    body['BizDate'] = request.bizDate;
  }
  if (!Util.isUnset(request.dagType)) {
    body['DagType'] = request.dagType;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.schedulerType)) {
    body['SchedulerType'] = request.schedulerType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceStatusStatistic',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstanceStatusStatistic(request: GetInstanceStatusStatisticRequest): GetInstanceStatusStatisticResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceStatusStatisticWithOptions(request, runtime);
}

model GetManualDagInstancesRequest {
  dagId?: string(name='DagId'),
  projectEnv?: string(name='ProjectEnv'),
  projectName?: string(name='ProjectName'),
}

model GetManualDagInstancesResponseBody = {
  instances?: [ 
    {
      beginRunningTime?: long(name='BeginRunningTime'),
      beginWaitResTime?: long(name='BeginWaitResTime'),
      beginWaitTimeTime?: long(name='BeginWaitTimeTime'),
      bizDate?: long(name='BizDate'),
      createTime?: long(name='CreateTime'),
      createUser?: string(name='CreateUser'),
      cycTime?: long(name='CycTime'),
      dagId?: long(name='DagId'),
      dagType?: string(name='DagType'),
      finishTime?: long(name='FinishTime'),
      instanceId?: long(name='InstanceId'),
      modifyTime?: long(name='ModifyTime'),
      nodeId?: long(name='NodeId'),
      nodeName?: string(name='NodeName'),
      paramValues?: string(name='ParamValues'),
      status?: string(name='Status'),
      taskType?: string(name='TaskType'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId'),
}

model GetManualDagInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetManualDagInstancesResponseBody(name='body'),
}

async function getManualDagInstancesWithOptions(request: GetManualDagInstancesRequest, runtime: Util.RuntimeOptions): GetManualDagInstancesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.dagId)) {
    body['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetManualDagInstances',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getManualDagInstances(request: GetManualDagInstancesRequest): GetManualDagInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getManualDagInstancesWithOptions(request, runtime);
}

model GetMetaCategoryRequest {
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  parentCategoryId?: long(name='ParentCategoryId'),
}

model GetMetaCategoryResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        categoryId?: long(name='CategoryId'),
        comment?: string(name='Comment'),
        createTime?: long(name='CreateTime'),
        depth?: int32(name='Depth'),
        lastOperatorId?: string(name='LastOperatorId'),
        modifiedTime?: long(name='ModifiedTime'),
        name?: string(name='Name'),
        ownerId?: string(name='OwnerId'),
        parentCategoryId?: long(name='ParentCategoryId'),
      }
    ](name='DataEntityList'),
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMetaCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaCategoryResponseBody(name='body'),
}

async function getMetaCategoryWithOptions(request: GetMetaCategoryRequest, runtime: Util.RuntimeOptions): GetMetaCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentCategoryId)) {
    query['ParentCategoryId'] = request.parentCategoryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaCategory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaCategory(request: GetMetaCategoryRequest): GetMetaCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaCategoryWithOptions(request, runtime);
}

model GetMetaColumnLineageRequest {
  clusterId?: string(name='ClusterId'),
  columnGuid?: string(name='ColumnGuid'),
  columnName?: string(name='ColumnName'),
  dataSourceType?: string(name='DataSourceType'),
  databaseName?: string(name='DatabaseName'),
  direction?: string(name='Direction'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  tableName?: string(name='TableName'),
}

model GetMetaColumnLineageResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        clusterId?: string(name='ClusterId'),
        columnGuid?: string(name='ColumnGuid'),
        columnName?: string(name='ColumnName'),
        databaseName?: string(name='DatabaseName'),
        tableName?: string(name='TableName'),
      }
    ](name='DataEntityList'),
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMetaColumnLineageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaColumnLineageResponseBody(name='body'),
}

async function getMetaColumnLineageWithOptions(request: GetMetaColumnLineageRequest, runtime: Util.RuntimeOptions): GetMetaColumnLineageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.columnGuid)) {
    query['ColumnGuid'] = request.columnGuid;
  }
  if (!Util.isUnset(request.columnName)) {
    query['ColumnName'] = request.columnName;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaColumnLineage',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaColumnLineage(request: GetMetaColumnLineageRequest): GetMetaColumnLineageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaColumnLineageWithOptions(request, runtime);
}

model GetMetaDBInfoRequest {
  appGuid?: string(name='AppGuid'),
  clusterId?: string(name='ClusterId'),
  dataSourceType?: string(name='DataSourceType'),
  databaseName?: string(name='DatabaseName'),
}

model GetMetaDBInfoResponseBody = {
  data?: {
    appGuid?: string(name='AppGuid'),
    clusterBizId?: string(name='ClusterBizId'),
    comment?: string(name='Comment'),
    createTime?: long(name='CreateTime'),
    endpoint?: string(name='Endpoint'),
    envType?: int32(name='EnvType'),
    location?: string(name='Location'),
    modifyTime?: long(name='ModifyTime'),
    name?: string(name='Name'),
    ownerId?: string(name='OwnerId'),
    ownerName?: string(name='OwnerName'),
    projectId?: long(name='ProjectId'),
    projectName?: string(name='ProjectName'),
    projectNameCn?: string(name='ProjectNameCn'),
    tenantId?: long(name='TenantId'),
    type?: string(name='Type'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetMetaDBInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaDBInfoResponseBody(name='body'),
}

async function getMetaDBInfoWithOptions(request: GetMetaDBInfoRequest, runtime: Util.RuntimeOptions): GetMetaDBInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaDBInfo',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaDBInfo(request: GetMetaDBInfoRequest): GetMetaDBInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaDBInfoWithOptions(request, runtime);
}

model GetMetaDBTableListRequest {
  appGuid?: string(name='AppGuid'),
  clusterId?: string(name='ClusterId'),
  dataSourceType?: string(name='DataSourceType'),
  databaseName?: string(name='DatabaseName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model GetMetaDBTableListResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    tableEntityList?: [ 
      {
        databaseName?: string(name='DatabaseName'),
        tableGuid?: string(name='TableGuid'),
        tableName?: string(name='TableName'),
      }
    ](name='TableEntityList'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetMetaDBTableListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaDBTableListResponseBody(name='body'),
}

async function getMetaDBTableListWithOptions(request: GetMetaDBTableListRequest, runtime: Util.RuntimeOptions): GetMetaDBTableListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appGuid)) {
    query['AppGuid'] = request.appGuid;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaDBTableList',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaDBTableList(request: GetMetaDBTableListRequest): GetMetaDBTableListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaDBTableListWithOptions(request, runtime);
}

model GetMetaTableBasicInfoRequest {
  clusterId?: string(name='ClusterId'),
  dataSourceType?: string(name='DataSourceType'),
  databaseName?: string(name='DatabaseName'),
  extension?: boolean(name='Extension'),
  tableGuid?: string(name='TableGuid'),
  tableName?: string(name='TableName'),
}

model GetMetaTableBasicInfoResponseBody = {
  data?: {
    caption?: string(name='Caption'),
    clusterId?: string(name='ClusterId'),
    columnCount?: int32(name='ColumnCount'),
    comment?: string(name='Comment'),
    createTime?: long(name='CreateTime'),
    dataSize?: long(name='DataSize'),
    databaseName?: string(name='DatabaseName'),
    envType?: int32(name='EnvType'),
    favoriteCount?: long(name='FavoriteCount'),
    isPartitionTable?: boolean(name='IsPartitionTable'),
    isView?: boolean(name='IsView'),
    isVisible?: int32(name='IsVisible'),
    lastAccessTime?: long(name='LastAccessTime'),
    lastDdlTime?: long(name='LastDdlTime'),
    lastModifyTime?: long(name='LastModifyTime'),
    lifeCycle?: int32(name='LifeCycle'),
    location?: string(name='Location'),
    ownerId?: string(name='OwnerId'),
    partitionKeys?: string(name='PartitionKeys'),
    projectId?: long(name='ProjectId'),
    projectName?: string(name='ProjectName'),
    readCount?: long(name='ReadCount'),
    schema?: string(name='Schema'),
    tableGuid?: string(name='TableGuid'),
    tableName?: string(name='TableName'),
    tenantId?: long(name='TenantId'),
    viewCount?: long(name='ViewCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMetaTableBasicInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableBasicInfoResponseBody(name='body'),
}

async function getMetaTableBasicInfoWithOptions(request: GetMetaTableBasicInfoRequest, runtime: Util.RuntimeOptions): GetMetaTableBasicInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableBasicInfo',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableBasicInfo(request: GetMetaTableBasicInfoRequest): GetMetaTableBasicInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableBasicInfoWithOptions(request, runtime);
}

model GetMetaTableChangeLogRequest {
  changeType?: string(name='ChangeType'),
  endDate?: string(name='EndDate'),
  objectType?: string(name='ObjectType'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startDate?: string(name='StartDate'),
  tableGuid?: string(name='TableGuid'),
}

model GetMetaTableChangeLogResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        changeContent?: string(name='ChangeContent'),
        changeType?: string(name='ChangeType'),
        createTime?: long(name='CreateTime'),
        modifiedTime?: long(name='ModifiedTime'),
        objectType?: string(name='ObjectType'),
        operator?: string(name='Operator'),
      }
    ](name='DataEntityList'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMetaTableChangeLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableChangeLogResponseBody(name='body'),
}

async function getMetaTableChangeLogWithOptions(request: GetMetaTableChangeLogRequest, runtime: Util.RuntimeOptions): GetMetaTableChangeLogResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.changeType)) {
    body['ChangeType'] = request.changeType;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.objectType)) {
    body['ObjectType'] = request.objectType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.tableGuid)) {
    body['TableGuid'] = request.tableGuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableChangeLog',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableChangeLog(request: GetMetaTableChangeLogRequest): GetMetaTableChangeLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableChangeLogWithOptions(request, runtime);
}

model GetMetaTableColumnRequest {
  clusterId?: string(name='ClusterId'),
  dataSourceType?: string(name='DataSourceType'),
  databaseName?: string(name='DatabaseName'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  tableGuid?: string(name='TableGuid'),
  tableName?: string(name='TableName'),
}

model GetMetaTableColumnResponseBody = {
  data?: {
    columnList?: [ 
      {
        caption?: string(name='Caption'),
        columnGuid?: string(name='ColumnGuid'),
        columnName?: string(name='ColumnName'),
        columnType?: string(name='ColumnType'),
        comment?: string(name='Comment'),
        isForeignKey?: boolean(name='IsForeignKey'),
        isPartitionColumn?: boolean(name='IsPartitionColumn'),
        isPrimaryKey?: boolean(name='IsPrimaryKey'),
        position?: int32(name='Position'),
        relationCount?: long(name='RelationCount'),
      }
    ](name='ColumnList'),
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMetaTableColumnResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableColumnResponseBody(name='body'),
}

async function getMetaTableColumnWithOptions(request: GetMetaTableColumnRequest, runtime: Util.RuntimeOptions): GetMetaTableColumnResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableColumn',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableColumn(request: GetMetaTableColumnRequest): GetMetaTableColumnResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableColumnWithOptions(request, runtime);
}

model GetMetaTableFullInfoRequest {
  clusterId?: string(name='ClusterId'),
  dataSourceType?: string(name='DataSourceType'),
  databaseName?: string(name='DatabaseName'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  tableGuid?: string(name='TableGuid'),
  tableName?: string(name='TableName'),
}

model GetMetaTableFullInfoResponseBody = {
  data?: {
    clusterId?: string(name='ClusterId'),
    columnList?: [ 
      {
        caption?: string(name='Caption'),
        columnGuid?: string(name='ColumnGuid'),
        columnName?: string(name='ColumnName'),
        columnType?: string(name='ColumnType'),
        comment?: string(name='Comment'),
        isForeignKey?: boolean(name='IsForeignKey'),
        isPartitionColumn?: boolean(name='IsPartitionColumn'),
        isPrimaryKey?: boolean(name='IsPrimaryKey'),
        position?: int32(name='Position'),
      }
    ](name='ColumnList'),
    comment?: string(name='Comment'),
    createTime?: long(name='CreateTime'),
    dataSize?: long(name='DataSize'),
    databaseName?: string(name='DatabaseName'),
    envType?: int32(name='EnvType'),
    isVisible?: int32(name='IsVisible'),
    lastAccessTime?: long(name='LastAccessTime'),
    lastDdlTime?: long(name='LastDdlTime'),
    lastModifyTime?: long(name='LastModifyTime'),
    lifeCycle?: int32(name='LifeCycle'),
    location?: string(name='Location'),
    ownerId?: string(name='OwnerId'),
    partitionKeys?: string(name='PartitionKeys'),
    projectId?: long(name='ProjectId'),
    projectName?: string(name='ProjectName'),
    schema?: string(name='Schema'),
    tableGuid?: string(name='TableGuid'),
    tableName?: string(name='TableName'),
    tenantId?: long(name='TenantId'),
    totalColumnCount?: long(name='TotalColumnCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMetaTableFullInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableFullInfoResponseBody(name='body'),
}

async function getMetaTableFullInfoWithOptions(request: GetMetaTableFullInfoRequest, runtime: Util.RuntimeOptions): GetMetaTableFullInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableFullInfo',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableFullInfo(request: GetMetaTableFullInfoRequest): GetMetaTableFullInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableFullInfoWithOptions(request, runtime);
}

model GetMetaTableIntroWikiRequest {
  tableGuid?: string(name='TableGuid'),
  wikiVersion?: long(name='WikiVersion'),
}

model GetMetaTableIntroWikiResponseBody = {
  data?: {
    content?: string(name='Content'),
    createTime?: long(name='CreateTime'),
    creator?: string(name='Creator'),
    creatorName?: string(name='CreatorName'),
    modifiedTime?: long(name='ModifiedTime'),
    version?: long(name='Version'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMetaTableIntroWikiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableIntroWikiResponseBody(name='body'),
}

async function getMetaTableIntroWikiWithOptions(request: GetMetaTableIntroWikiRequest, runtime: Util.RuntimeOptions): GetMetaTableIntroWikiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.wikiVersion)) {
    query['WikiVersion'] = request.wikiVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableIntroWiki',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableIntroWiki(request: GetMetaTableIntroWikiRequest): GetMetaTableIntroWikiResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableIntroWikiWithOptions(request, runtime);
}

model GetMetaTableLineageRequest {
  clusterId?: string(name='ClusterId'),
  dataSourceType?: string(name='DataSourceType'),
  databaseName?: string(name='DatabaseName'),
  direction?: string(name='Direction'),
  nextPrimaryKey?: string(name='NextPrimaryKey'),
  pageSize?: int32(name='PageSize'),
  tableGuid?: string(name='TableGuid'),
  tableName?: string(name='TableName'),
}

model GetMetaTableLineageResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        createTimestamp?: long(name='CreateTimestamp'),
        tableGuid?: string(name='TableGuid'),
        tableName?: string(name='TableName'),
      }
    ](name='DataEntityList'),
    hasNext?: boolean(name='HasNext'),
    nextPrimaryKey?: string(name='NextPrimaryKey'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMetaTableLineageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableLineageResponseBody(name='body'),
}

async function getMetaTableLineageWithOptions(request: GetMetaTableLineageRequest, runtime: Util.RuntimeOptions): GetMetaTableLineageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.nextPrimaryKey)) {
    query['NextPrimaryKey'] = request.nextPrimaryKey;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableLineage',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableLineage(request: GetMetaTableLineageRequest): GetMetaTableLineageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableLineageWithOptions(request, runtime);
}

model GetMetaTableListByCategoryRequest {
  categoryId?: long(name='CategoryId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model GetMetaTableListByCategoryResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    tableGuidList?: [ string ](name='TableGuidList'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMetaTableListByCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableListByCategoryResponseBody(name='body'),
}

async function getMetaTableListByCategoryWithOptions(request: GetMetaTableListByCategoryRequest, runtime: Util.RuntimeOptions): GetMetaTableListByCategoryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableListByCategory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableListByCategory(request: GetMetaTableListByCategoryRequest): GetMetaTableListByCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableListByCategoryWithOptions(request, runtime);
}

model GetMetaTableOutputRequest {
  endDate?: string(name='EndDate'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startDate?: string(name='StartDate'),
  tableGuid?: string(name='TableGuid'),
}

model GetMetaTableOutputResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        endTime?: string(name='EndTime'),
        projectId?: long(name='ProjectId'),
        startTime?: string(name='StartTime'),
        tableGuid?: string(name='TableGuid'),
        taskId?: string(name='TaskId'),
        taskInstanceId?: long(name='TaskInstanceId'),
        waitTime?: string(name='WaitTime'),
      }
    ](name='DataEntityList'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMetaTableOutputResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableOutputResponseBody(name='body'),
}

async function getMetaTableOutputWithOptions(request: GetMetaTableOutputRequest, runtime: Util.RuntimeOptions): GetMetaTableOutputResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableOutput',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableOutput(request: GetMetaTableOutputRequest): GetMetaTableOutputResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableOutputWithOptions(request, runtime);
}

model GetMetaTablePartitionRequest {
  clusterId?: string(name='ClusterId'),
  dataSourceType?: string(name='DataSourceType'),
  databaseName?: string(name='DatabaseName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  sortCriterion?: {
    order?: string(name='Order'),
    sortField?: string(name='SortField'),
  }(name='SortCriterion'),
  tableGuid?: string(name='TableGuid'),
  tableName?: string(name='TableName'),
}

model GetMetaTablePartitionShrinkRequest {
  clusterId?: string(name='ClusterId'),
  dataSourceType?: string(name='DataSourceType'),
  databaseName?: string(name='DatabaseName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  sortCriterionShrink?: string(name='SortCriterion'),
  tableGuid?: string(name='TableGuid'),
  tableName?: string(name='TableName'),
}

model GetMetaTablePartitionResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        comment?: string(name='Comment'),
        createTime?: long(name='CreateTime'),
        dataSize?: long(name='DataSize'),
        modifiedTime?: long(name='ModifiedTime'),
        partitionGuid?: string(name='PartitionGuid'),
        partitionLocation?: string(name='PartitionLocation'),
        partitionName?: string(name='PartitionName'),
        partitionPath?: string(name='PartitionPath'),
        partitionType?: string(name='PartitionType'),
        recordCount?: long(name='RecordCount'),
        tableGuid?: string(name='TableGuid'),
      }
    ](name='DataEntityList'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMetaTablePartitionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTablePartitionResponseBody(name='body'),
}

async function getMetaTablePartitionWithOptions(tmpReq: GetMetaTablePartitionRequest, runtime: Util.RuntimeOptions): GetMetaTablePartitionResponse {
  Util.validateModel(tmpReq);
  var request = new GetMetaTablePartitionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.sortCriterion)) {
    request.sortCriterionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sortCriterion, 'SortCriterion', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortCriterionShrink)) {
    query['SortCriterion'] = request.sortCriterionShrink;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTablePartition',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTablePartition(request: GetMetaTablePartitionRequest): GetMetaTablePartitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTablePartitionWithOptions(request, runtime);
}

model GetMetaTableThemeLevelRequest {
  dataSourceType?: string(name='DataSourceType'),
  tableGuid?: string(name='TableGuid'),
}

model GetMetaTableThemeLevelResponseBody = {
  entity?: {
    level?: [ 
      {
        description?: string(name='Description'),
        levelId?: long(name='LevelId'),
        name?: string(name='Name'),
        type?: int32(name='Type'),
      }
    ](name='Level'),
    theme?: [ 
      {
        level?: int32(name='Level'),
        name?: string(name='Name'),
        parentId?: long(name='ParentId'),
        themeId?: long(name='ThemeId'),
      }
    ](name='Theme'),
  }(name='Entity'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMetaTableThemeLevelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableThemeLevelResponseBody(name='body'),
}

async function getMetaTableThemeLevelWithOptions(request: GetMetaTableThemeLevelRequest, runtime: Util.RuntimeOptions): GetMetaTableThemeLevelResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableThemeLevel',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableThemeLevel(request: GetMetaTableThemeLevelRequest): GetMetaTableThemeLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableThemeLevelWithOptions(request, runtime);
}

model GetMigrationProcessRequest {
  migrationId?: long(name='MigrationId'),
  projectId?: long(name='ProjectId'),
}

model GetMigrationProcessResponseBody = {
  data?: [ 
    {
      taskName?: string(name='TaskName'),
      taskStatus?: string(name='TaskStatus'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMigrationProcessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMigrationProcessResponseBody(name='body'),
}

async function getMigrationProcessWithOptions(request: GetMigrationProcessRequest, runtime: Util.RuntimeOptions): GetMigrationProcessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.migrationId)) {
    body['MigrationId'] = request.migrationId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMigrationProcess',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMigrationProcess(request: GetMigrationProcessRequest): GetMigrationProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMigrationProcessWithOptions(request, runtime);
}

model GetMigrationSummaryRequest {
  migrationId?: long(name='MigrationId'),
  projectId?: long(name='ProjectId'),
}

model GetMigrationSummaryResponseBody = {
  data?: {
    createUser?: string(name='CreateUser'),
    downloadUrl?: string(name='DownloadUrl'),
    gmtCreate?: long(name='GmtCreate'),
    gmtModified?: long(name='GmtModified'),
    migrationId?: long(name='MigrationId'),
    name?: string(name='Name'),
    opUser?: string(name='OpUser'),
    projectId?: long(name='ProjectId'),
    status?: string(name='Status'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMigrationSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMigrationSummaryResponseBody(name='body'),
}

async function getMigrationSummaryWithOptions(request: GetMigrationSummaryRequest, runtime: Util.RuntimeOptions): GetMigrationSummaryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.migrationId)) {
    body['MigrationId'] = request.migrationId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMigrationSummary',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMigrationSummary(request: GetMigrationSummaryRequest): GetMigrationSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMigrationSummaryWithOptions(request, runtime);
}

model GetNodeRequest {
  nodeId?: long(name='NodeId'),
  projectEnv?: string(name='ProjectEnv'),
}

model GetNodeResponseBody = {
  data?: {
    baselineId?: long(name='BaselineId'),
    businessId?: long(name='BusinessId'),
    connection?: string(name='Connection'),
    cronExpress?: string(name='CronExpress'),
    description?: string(name='Description'),
    dqcDescription?: string(name='DqcDescription'),
    dqcType?: int32(name='DqcType'),
    nodeId?: long(name='NodeId'),
    nodeName?: string(name='NodeName'),
    ownerId?: string(name='OwnerId'),
    paramValues?: string(name='ParamValues'),
    priority?: int32(name='Priority'),
    programType?: string(name='ProgramType'),
    projectId?: long(name='ProjectId'),
    relatedFlowId?: long(name='RelatedFlowId'),
    repeatInterval?: long(name='RepeatInterval'),
    repeatability?: string(name='Repeatability'),
    resGroupName?: string(name='ResGroupName'),
    schedulerType?: string(name='SchedulerType'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNodeResponseBody(name='body'),
}

async function getNodeWithOptions(request: GetNodeRequest, runtime: Util.RuntimeOptions): GetNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNode',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNode(request: GetNodeRequest): GetNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeWithOptions(request, runtime);
}

model GetNodeChildrenRequest {
  nodeId?: long(name='NodeId'),
  projectEnv?: string(name='ProjectEnv'),
}

model GetNodeChildrenResponseBody = {
  data?: {
    nodes?: [ 
      {
        baselineId?: long(name='BaselineId'),
        cronExpress?: string(name='CronExpress'),
        nodeId?: long(name='NodeId'),
        nodeName?: string(name='NodeName'),
        ownerId?: string(name='OwnerId'),
        priority?: int32(name='Priority'),
        programType?: string(name='ProgramType'),
        projectId?: long(name='ProjectId'),
        repeatability?: boolean(name='Repeatability'),
        schedulerType?: string(name='SchedulerType'),
      }
    ](name='Nodes'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetNodeChildrenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNodeChildrenResponseBody(name='body'),
}

async function getNodeChildrenWithOptions(request: GetNodeChildrenRequest, runtime: Util.RuntimeOptions): GetNodeChildrenResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeChildren',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNodeChildren(request: GetNodeChildrenRequest): GetNodeChildrenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeChildrenWithOptions(request, runtime);
}

model GetNodeCodeRequest {
  nodeId?: long(name='NodeId'),
  projectEnv?: string(name='ProjectEnv'),
}

model GetNodeCodeResponseBody = {
  data?: string(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetNodeCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNodeCodeResponseBody(name='body'),
}

async function getNodeCodeWithOptions(request: GetNodeCodeRequest, runtime: Util.RuntimeOptions): GetNodeCodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeCode',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNodeCode(request: GetNodeCodeRequest): GetNodeCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeCodeWithOptions(request, runtime);
}

model GetNodeOnBaselineRequest {
  baselineId?: long(name='BaselineId'),
}

model GetNodeOnBaselineResponseBody = {
  data?: [ 
    {
      nodeId?: long(name='NodeId'),
      nodeName?: string(name='NodeName'),
      owner?: string(name='Owner'),
      projectId?: long(name='ProjectId'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model GetNodeOnBaselineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNodeOnBaselineResponseBody(name='body'),
}

async function getNodeOnBaselineWithOptions(request: GetNodeOnBaselineRequest, runtime: Util.RuntimeOptions): GetNodeOnBaselineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeOnBaseline',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNodeOnBaseline(request: GetNodeOnBaselineRequest): GetNodeOnBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeOnBaselineWithOptions(request, runtime);
}

model GetNodeParentsRequest {
  nodeId?: long(name='NodeId'),
  projectEnv?: string(name='ProjectEnv'),
}

model GetNodeParentsResponseBody = {
  data?: {
    nodes?: [ 
      {
        baselineId?: long(name='BaselineId'),
        cronExpress?: string(name='CronExpress'),
        nodeId?: long(name='NodeId'),
        nodeName?: string(name='NodeName'),
        ownerId?: string(name='OwnerId'),
        priority?: int32(name='Priority'),
        programType?: string(name='ProgramType'),
        projectId?: long(name='ProjectId'),
        repeatability?: boolean(name='Repeatability'),
        schedulerType?: string(name='SchedulerType'),
      }
    ](name='Nodes'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetNodeParentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNodeParentsResponseBody(name='body'),
}

async function getNodeParentsWithOptions(request: GetNodeParentsRequest, runtime: Util.RuntimeOptions): GetNodeParentsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeParents',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNodeParents(request: GetNodeParentsRequest): GetNodeParentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeParentsWithOptions(request, runtime);
}

model GetNodeTypeListInfoRequest {
  keyword?: string(name='Keyword'),
  locale?: string(name='Locale'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  projectId?: long(name='ProjectId'),
  projectIdentifier?: string(name='ProjectIdentifier'),
}

model GetNodeTypeListInfoResponseBody = {
  nodeTypeInfoList?: {
    nodeTypeInfo?: [ 
      {
        nodeType?: int32(name='NodeType'),
        nodeTypeName?: string(name='NodeTypeName'),
      }
    ](name='NodeTypeInfo'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='NodeTypeInfoList'),
  requestId?: string(name='RequestId'),
}

model GetNodeTypeListInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNodeTypeListInfoResponseBody(name='body'),
}

async function getNodeTypeListInfoWithOptions(request: GetNodeTypeListInfoRequest, runtime: Util.RuntimeOptions): GetNodeTypeListInfoResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.locale)) {
    body['Locale'] = request.locale;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeTypeListInfo',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNodeTypeListInfo(request: GetNodeTypeListInfoRequest): GetNodeTypeListInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeTypeListInfoWithOptions(request, runtime);
}

model GetOpRiskDataRequest {
  date?: string(name='Date'),
  name?: string(name='Name'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  riskType?: string(name='RiskType'),
}

model GetOpRiskDataResponseBody = {
  requestId?: string(name='RequestId'),
  riskData?: string(name='RiskData'),
}

model GetOpRiskDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOpRiskDataResponseBody(name='body'),
}

async function getOpRiskDataWithOptions(request: GetOpRiskDataRequest, runtime: Util.RuntimeOptions): GetOpRiskDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOpRiskData',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOpRiskData(request: GetOpRiskDataRequest): GetOpRiskDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOpRiskDataWithOptions(request, runtime);
}

model GetOpSensitiveDataRequest {
  date?: string(name='Date'),
  name?: string(name='Name'),
  opType?: string(name='OpType'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
}

model GetOpSensitiveDataResponseBody = {
  opSensitiveData?: string(name='OpSensitiveData'),
  requestId?: string(name='RequestId'),
}

model GetOpSensitiveDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOpSensitiveDataResponseBody(name='body'),
}

async function getOpSensitiveDataWithOptions(request: GetOpSensitiveDataRequest, runtime: Util.RuntimeOptions): GetOpSensitiveDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOpSensitiveData',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOpSensitiveData(request: GetOpSensitiveDataRequest): GetOpSensitiveDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOpSensitiveDataWithOptions(request, runtime);
}

model GetOptionValueForProjectRequest {
  extensionCode?: string(name='ExtensionCode'),
  projectId?: string(name='ProjectId'),
}

model GetOptionValueForProjectResponseBody = {
  optionValue?: string(name='OptionValue'),
  requestId?: string(name='RequestId'),
}

model GetOptionValueForProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOptionValueForProjectResponseBody(name='body'),
}

async function getOptionValueForProjectWithOptions(request: GetOptionValueForProjectRequest, runtime: Util.RuntimeOptions): GetOptionValueForProjectResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.extensionCode)) {
    body['ExtensionCode'] = request.extensionCode;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetOptionValueForProject',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOptionValueForProject(request: GetOptionValueForProjectRequest): GetOptionValueForProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOptionValueForProjectWithOptions(request, runtime);
}

model GetPermissionApplyOrderDetailRequest {
  flowId?: string(name='FlowId'),
}

model GetPermissionApplyOrderDetailResponseBody = {
  applyOrderDetail?: {
    applyBaseId?: string(name='ApplyBaseId'),
    applyTimestamp?: long(name='ApplyTimestamp'),
    approveAccountList?: [ 
      {
        baseId?: string(name='BaseId'),
      }
    ](name='ApproveAccountList'),
    approveContent?: {
      applyReason?: string(name='ApplyReason'),
      deadline?: long(name='Deadline'),
      orderType?: int32(name='OrderType'),
      projectMeta?: {
        maxComputeProjectName?: string(name='MaxComputeProjectName'),
        objectMetaList?: [ 
          {
            columnMetaList?: [ 
              {
                columnComment?: string(name='ColumnComment'),
                columnName?: string(name='ColumnName'),
              }
            ](name='ColumnMetaList'),
            objectName?: string(name='ObjectName'),
          }
        ](name='ObjectMetaList'),
        workspaceId?: int32(name='WorkspaceId'),
      }(name='ProjectMeta'),
    }(name='ApproveContent'),
    flowId?: string(name='FlowId'),
    flowStatus?: int32(name='FlowStatus'),
    granteeObjectList?: [ 
      {
        granteeId?: string(name='GranteeId'),
        granteeName?: string(name='GranteeName'),
        granteeType?: int32(name='GranteeType'),
        granteeTypeSub?: int32(name='GranteeTypeSub'),
      }
    ](name='GranteeObjectList'),
  }(name='ApplyOrderDetail'),
  requestId?: string(name='RequestId'),
}

model GetPermissionApplyOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPermissionApplyOrderDetailResponseBody(name='body'),
}

async function getPermissionApplyOrderDetailWithOptions(request: GetPermissionApplyOrderDetailRequest, runtime: Util.RuntimeOptions): GetPermissionApplyOrderDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.flowId)) {
    query['FlowId'] = request.flowId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPermissionApplyOrderDetail',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPermissionApplyOrderDetail(request: GetPermissionApplyOrderDetailRequest): GetPermissionApplyOrderDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPermissionApplyOrderDetailWithOptions(request, runtime);
}

model GetProjectRequest {
  projectId?: long(name='ProjectId'),
}

model GetProjectResponseBody = {
  data?: {
    appkey?: string(name='Appkey'),
    baseProject?: boolean(name='BaseProject'),
    defaultDiResourceGroupIdentifier?: string(name='DefaultDiResourceGroupIdentifier'),
    destination?: int32(name='Destination'),
    devStorageQuota?: string(name='DevStorageQuota'),
    developmentType?: int32(name='DevelopmentType'),
    disableDevelopment?: boolean(name='DisableDevelopment'),
    envTypes?: [ string ](name='EnvTypes'),
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    isAllowDownload?: int32(name='IsAllowDownload'),
    isDefault?: int32(name='IsDefault'),
    maxFlowNode?: int32(name='MaxFlowNode'),
    prodStorageQuota?: string(name='ProdStorageQuota'),
    projectDescription?: string(name='ProjectDescription'),
    projectId?: int32(name='ProjectId'),
    projectIdentifier?: string(name='ProjectIdentifier'),
    projectMode?: int32(name='ProjectMode'),
    projectName?: string(name='ProjectName'),
    projectOwnerBaseId?: string(name='ProjectOwnerBaseId'),
    protectedMode?: int32(name='ProtectedMode'),
    residentArea?: string(name='ResidentArea'),
    resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId'),
    schedulerMaxRetryTimes?: int32(name='SchedulerMaxRetryTimes'),
    schedulerRetryInterval?: int32(name='SchedulerRetryInterval'),
    status?: int32(name='Status'),
    tablePrivacyMode?: int32(name='TablePrivacyMode'),
    tags?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Tags'),
    tenantId?: long(name='TenantId'),
    useProxyOdpsAccount?: boolean(name='UseProxyOdpsAccount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProjectResponseBody(name='body'),
}

async function getProjectWithOptions(request: GetProjectRequest, runtime: Util.RuntimeOptions): GetProjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProject',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getProject(request: GetProjectRequest): GetProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProjectWithOptions(request, runtime);
}

model GetProjectDetailRequest {
  projectId?: long(name='ProjectId'),
}

model GetProjectDetailResponseBody = {
  data?: {
    defaultDiResourceGroupIdentifier?: string(name='DefaultDiResourceGroupIdentifier'),
    developmentType?: int32(name='DevelopmentType'),
    disableDevelopment?: boolean(name='DisableDevelopment'),
    envTypes?: [ string ](name='EnvTypes'),
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    isAllowDownload?: int32(name='IsAllowDownload'),
    isDefault?: int32(name='IsDefault'),
    projectDescription?: string(name='ProjectDescription'),
    projectId?: int32(name='ProjectId'),
    projectIdentifier?: string(name='ProjectIdentifier'),
    projectMode?: int32(name='ProjectMode'),
    projectName?: string(name='ProjectName'),
    projectOwnerBaseId?: string(name='ProjectOwnerBaseId'),
    protectedMode?: int32(name='ProtectedMode'),
    residentArea?: string(name='ResidentArea'),
    resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId'),
    schedulerMaxRetryTimes?: int32(name='SchedulerMaxRetryTimes'),
    schedulerRetryInterval?: int32(name='SchedulerRetryInterval'),
    status?: int32(name='Status'),
    tablePrivacyMode?: int32(name='TablePrivacyMode'),
    tags?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Tags'),
    tenantId?: long(name='TenantId'),
    useProxyOdpsAccount?: boolean(name='UseProxyOdpsAccount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetProjectDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProjectDetailResponseBody(name='body'),
}

async function getProjectDetailWithOptions(request: GetProjectDetailRequest, runtime: Util.RuntimeOptions): GetProjectDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProjectDetail',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getProjectDetail(request: GetProjectDetailRequest): GetProjectDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProjectDetailWithOptions(request, runtime);
}

model GetQualityEntityRequest {
  envType?: string(name='EnvType'),
  matchExpression?: string(name='MatchExpression'),
  projectName?: string(name='ProjectName'),
  tableName?: string(name='TableName'),
}

model GetQualityEntityResponseBody = {
  data?: [ 
    {
      createTime?: long(name='CreateTime'),
      entityLevel?: int32(name='EntityLevel'),
      envType?: string(name='EnvType'),
      followers?: string(name='Followers'),
      hasRelativeNode?: boolean(name='HasRelativeNode'),
      id?: long(name='Id'),
      matchExpression?: string(name='MatchExpression'),
      modifyTime?: long(name='ModifyTime'),
      modifyUser?: string(name='ModifyUser'),
      onDuty?: string(name='OnDuty'),
      onDutyAccountName?: string(name='OnDutyAccountName'),
      projectName?: string(name='ProjectName'),
      relativeNode?: string(name='RelativeNode'),
      sql?: int32(name='Sql'),
      tableName?: string(name='TableName'),
      task?: int32(name='Task'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetQualityEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetQualityEntityResponseBody(name='body'),
}

async function getQualityEntityWithOptions(request: GetQualityEntityRequest, runtime: Util.RuntimeOptions): GetQualityEntityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.matchExpression)) {
    body['MatchExpression'] = request.matchExpression;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.tableName)) {
    body['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetQualityEntity',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getQualityEntity(request: GetQualityEntityRequest): GetQualityEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return getQualityEntityWithOptions(request, runtime);
}

model GetQualityFollowerRequest {
  entityId?: long(name='EntityId'),
  projectName?: string(name='ProjectName'),
}

model GetQualityFollowerResponseBody = {
  data?: [ 
    {
      alarmMode?: int32(name='AlarmMode'),
      entityId?: string(name='EntityId'),
      follower?: string(name='Follower'),
      followerAccountName?: string(name='FollowerAccountName'),
      id?: long(name='Id'),
      projectName?: string(name='ProjectName'),
      tableName?: string(name='TableName'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetQualityFollowerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetQualityFollowerResponseBody(name='body'),
}

async function getQualityFollowerWithOptions(request: GetQualityFollowerRequest, runtime: Util.RuntimeOptions): GetQualityFollowerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetQualityFollower',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getQualityFollower(request: GetQualityFollowerRequest): GetQualityFollowerResponse {
  var runtime = new Util.RuntimeOptions{};
  return getQualityFollowerWithOptions(request, runtime);
}

model GetQualityRuleRequest {
  projectName?: string(name='ProjectName'),
  ruleId?: long(name='RuleId'),
}

model GetQualityRuleResponseBody = {
  data?: {
    blockType?: int32(name='BlockType'),
    checker?: int32(name='Checker'),
    checkerName?: string(name='CheckerName'),
    comment?: string(name='Comment'),
    criticalThreshold?: string(name='CriticalThreshold'),
    entityId?: long(name='EntityId'),
    expectValue?: string(name='ExpectValue'),
    fixCheck?: boolean(name='FixCheck'),
    id?: long(name='Id'),
    methodId?: int32(name='MethodId'),
    methodName?: string(name='MethodName'),
    onDuty?: string(name='OnDuty'),
    onDutyAccountName?: string(name='OnDutyAccountName'),
    operator?: string(name='Operator'),
    predictType?: int32(name='PredictType'),
    property?: string(name='Property'),
    ruleName?: string(name='RuleName'),
    ruleType?: int32(name='RuleType'),
    templateId?: int32(name='TemplateId'),
    templateName?: string(name='TemplateName'),
    trend?: string(name='Trend'),
    warningThreshold?: string(name='WarningThreshold'),
    whereCondition?: string(name='WhereCondition'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetQualityRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetQualityRuleResponseBody(name='body'),
}

async function getQualityRuleWithOptions(request: GetQualityRuleRequest, runtime: Util.RuntimeOptions): GetQualityRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.ruleId)) {
    body['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetQualityRule',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getQualityRule(request: GetQualityRuleRequest): GetQualityRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getQualityRuleWithOptions(request, runtime);
}

model GetRemindRequest {
  remindId?: long(name='RemindId'),
}

model GetRemindResponseBody = {
  data?: {
    alertInterval?: int32(name='AlertInterval'),
    alertMethods?: [ string ](name='AlertMethods'),
    alertTargets?: [ string ](name='AlertTargets'),
    alertUnit?: string(name='AlertUnit'),
    baselines?: [ 
      {
        baselineId?: long(name='BaselineId'),
        baselineName?: string(name='BaselineName'),
      }
    ](name='Baselines'),
    bizProcesses?: [ 
      {
        bizId?: long(name='BizId'),
        bizProcessName?: string(name='BizProcessName'),
      }
    ](name='BizProcesses'),
    detail?: string(name='Detail'),
    dndEnd?: string(name='DndEnd'),
    dndStart?: string(name='DndStart'),
    founder?: string(name='Founder'),
    maxAlertTimes?: int32(name='MaxAlertTimes'),
    nodes?: [ 
      {
        nodeId?: long(name='NodeId'),
        nodeName?: string(name='NodeName'),
        owner?: string(name='Owner'),
        projectId?: long(name='ProjectId'),
      }
    ](name='Nodes'),
    projects?: [ 
      {
        projectId?: long(name='ProjectId'),
      }
    ](name='Projects'),
    remindId?: long(name='RemindId'),
    remindName?: string(name='RemindName'),
    remindType?: string(name='RemindType'),
    remindUnit?: string(name='RemindUnit'),
    robots?: [ 
      {
        atAll?: boolean(name='AtAll'),
        webUrl?: string(name='WebUrl'),
      }
    ](name='Robots'),
    useflag?: boolean(name='Useflag'),
    webhooks?: [ string ](name='Webhooks'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetRemindResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRemindResponseBody(name='body'),
}

async function getRemindWithOptions(request: GetRemindRequest, runtime: Util.RuntimeOptions): GetRemindResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.remindId)) {
    body['RemindId'] = request.remindId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetRemind',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRemind(request: GetRemindRequest): GetRemindResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRemindWithOptions(request, runtime);
}

model GetSensitiveDataRequest {
  name?: string(name='Name'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
}

model GetSensitiveDataResponseBody = {
  requestId?: string(name='RequestId'),
  sensitiveData?: map[string]any(name='SensitiveData'),
}

model GetSensitiveDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSensitiveDataResponseBody(name='body'),
}

async function getSensitiveDataWithOptions(request: GetSensitiveDataRequest, runtime: Util.RuntimeOptions): GetSensitiveDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSensitiveData',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSensitiveData(request: GetSensitiveDataRequest): GetSensitiveDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSensitiveDataWithOptions(request, runtime);
}

model GetSuccessInstanceTrendRequest {
  projectId?: long(name='ProjectId'),
}

model GetSuccessInstanceTrendResponseBody = {
  instanceStatusTrend?: {
    avgTrend?: [ 
      {
        count?: int32(name='Count'),
        timePoint?: string(name='TimePoint'),
      }
    ](name='AvgTrend'),
    todayTrend?: [ 
      {
        count?: int32(name='Count'),
        timePoint?: string(name='TimePoint'),
      }
    ](name='TodayTrend'),
    yesterdayTrend?: [ 
      {
        count?: int32(name='Count'),
        timePoint?: string(name='TimePoint'),
      }
    ](name='YesterdayTrend'),
  }(name='InstanceStatusTrend'),
  requestId?: string(name='RequestId'),
}

model GetSuccessInstanceTrendResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSuccessInstanceTrendResponseBody(name='body'),
}

async function getSuccessInstanceTrendWithOptions(request: GetSuccessInstanceTrendRequest, runtime: Util.RuntimeOptions): GetSuccessInstanceTrendResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSuccessInstanceTrend',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSuccessInstanceTrend(request: GetSuccessInstanceTrendRequest): GetSuccessInstanceTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSuccessInstanceTrendWithOptions(request, runtime);
}

model GetTopicRequest {
  topicId?: long(name='TopicId'),
}

model GetTopicResponseBody = {
  data?: {
    addTime?: long(name='AddTime'),
    alertTime?: long(name='AlertTime'),
    assigner?: string(name='Assigner'),
    baselineBuffer?: long(name='BaselineBuffer'),
    baselineId?: long(name='BaselineId'),
    baselineInGroupId?: int32(name='BaselineInGroupId'),
    baselineName?: string(name='BaselineName'),
    baselineStatus?: string(name='BaselineStatus'),
    buffer?: long(name='Buffer'),
    dealTime?: long(name='DealTime'),
    dealUser?: string(name='DealUser'),
    fixTime?: long(name='FixTime'),
    happenTime?: long(name='HappenTime'),
    instanceId?: long(name='InstanceId'),
    nextAlertTime?: long(name='NextAlertTime'),
    nodeId?: long(name='NodeId'),
    nodeName?: string(name='NodeName'),
    owner?: string(name='Owner'),
    projectId?: long(name='ProjectId'),
    topicId?: long(name='TopicId'),
    topicName?: string(name='TopicName'),
    topicStatus?: string(name='TopicStatus'),
    topicType?: string(name='TopicType'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTopicResponseBody(name='body'),
}

async function getTopicWithOptions(request: GetTopicRequest, runtime: Util.RuntimeOptions): GetTopicResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.topicId)) {
    body['TopicId'] = request.topicId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTopic',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTopic(request: GetTopicRequest): GetTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTopicWithOptions(request, runtime);
}

model GetTopicInfluenceRequest {
  topicId?: long(name='TopicId'),
}

model GetTopicInfluenceResponseBody = {
  data?: {
    influences?: [ 
      {
        baselineId?: long(name='BaselineId'),
        baselineName?: string(name='BaselineName'),
        bizdate?: long(name='Bizdate'),
        buffer?: long(name='Buffer'),
        inGroupId?: int32(name='InGroupId'),
        owner?: string(name='Owner'),
        priority?: int32(name='Priority'),
        projectId?: long(name='ProjectId'),
        status?: string(name='Status'),
      }
    ](name='Influences'),
    topicId?: long(name='TopicId'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetTopicInfluenceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTopicInfluenceResponseBody(name='body'),
}

async function getTopicInfluenceWithOptions(request: GetTopicInfluenceRequest, runtime: Util.RuntimeOptions): GetTopicInfluenceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.topicId)) {
    body['TopicId'] = request.topicId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTopicInfluence',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTopicInfluence(request: GetTopicInfluenceRequest): GetTopicInfluenceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTopicInfluenceWithOptions(request, runtime);
}

model ImportDataSourcesRequest {
  dataSources?: string(name='DataSources'),
  projectId?: long(name='ProjectId'),
}

model ImportDataSourcesResponseBody = {
  data?: {
    message?: string(name='Message'),
    status?: boolean(name='Status'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ImportDataSourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportDataSourcesResponseBody(name='body'),
}

async function importDataSourcesWithOptions(request: ImportDataSourcesRequest, runtime: Util.RuntimeOptions): ImportDataSourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataSources)) {
    query['DataSources'] = request.dataSources;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ImportDataSources',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function importDataSources(request: ImportDataSourcesRequest): ImportDataSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return importDataSourcesWithOptions(request, runtime);
}

model ListAlertMessagesRequest {
  alertMethods?: string(name='AlertMethods'),
  alertRuleTypes?: string(name='AlertRuleTypes'),
  alertUser?: string(name='AlertUser'),
  baselineId?: long(name='BaselineId'),
  beginTime?: string(name='BeginTime'),
  endTime?: string(name='EndTime'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  remindId?: long(name='RemindId'),
}

model ListAlertMessagesResponseBody = {
  data?: {
    alertMessages?: [ 
      {
        alertId?: long(name='AlertId'),
        alertMessageStatus?: string(name='AlertMessageStatus'),
        alertMethod?: string(name='AlertMethod'),
        alertTime?: long(name='AlertTime'),
        alertUser?: string(name='AlertUser'),
        content?: string(name='Content'),
        instances?: [ 
          {
            instanceId?: long(name='InstanceId'),
            nodeId?: long(name='NodeId'),
            nodeName?: string(name='NodeName'),
            projectId?: long(name='ProjectId'),
            status?: string(name='Status'),
          }
        ](name='Instances'),
        nodes?: [ 
          {
            nodeId?: long(name='NodeId'),
            nodeName?: string(name='NodeName'),
            owner?: string(name='Owner'),
            projectId?: long(name='ProjectId'),
          }
        ](name='Nodes'),
        remindId?: long(name='RemindId'),
        remindName?: string(name='RemindName'),
        slaAlert?: {
          baselineId?: long(name='BaselineId'),
          baselineName?: string(name='BaselineName'),
          baselineOwner?: string(name='BaselineOwner'),
          bizdate?: long(name='Bizdate'),
          inGroupId?: int32(name='InGroupId'),
          projectId?: long(name='ProjectId'),
          status?: string(name='Status'),
        }(name='SlaAlert'),
        source?: string(name='Source'),
        topics?: [ 
          {
            instanceId?: long(name='InstanceId'),
            nodeId?: long(name='NodeId'),
            topicId?: long(name='TopicId'),
            topicName?: string(name='TopicName'),
            topicOwner?: string(name='TopicOwner'),
            topicStatus?: string(name='TopicStatus'),
          }
        ](name='Topics'),
      }
    ](name='AlertMessages'),
    pageNumber?: string(name='PageNumber'),
    pageSize?: string(name='PageSize'),
    totalCount?: string(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListAlertMessagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAlertMessagesResponseBody(name='body'),
}

async function listAlertMessagesWithOptions(request: ListAlertMessagesRequest, runtime: Util.RuntimeOptions): ListAlertMessagesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertMethods)) {
    body['AlertMethods'] = request.alertMethods;
  }
  if (!Util.isUnset(request.alertRuleTypes)) {
    body['AlertRuleTypes'] = request.alertRuleTypes;
  }
  if (!Util.isUnset(request.alertUser)) {
    body['AlertUser'] = request.alertUser;
  }
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.beginTime)) {
    body['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.remindId)) {
    body['RemindId'] = request.remindId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListAlertMessages',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAlertMessages(request: ListAlertMessagesRequest): ListAlertMessagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAlertMessagesWithOptions(request, runtime);
}

model ListBaselineConfigsRequest {
  baselineTypes?: string(name='BaselineTypes'),
  owner?: string(name='Owner'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  priority?: string(name='Priority'),
  projectId?: long(name='ProjectId'),
  searchText?: string(name='SearchText'),
  useflag?: boolean(name='Useflag'),
}

model ListBaselineConfigsResponseBody = {
  data?: {
    baselines?: [ 
      {
        baselineId?: long(name='BaselineId'),
        baselineName?: string(name='BaselineName'),
        baselineType?: string(name='BaselineType'),
        expHour?: int32(name='ExpHour'),
        expMinu?: int32(name='ExpMinu'),
        hourExpDetail?: string(name='HourExpDetail'),
        hourSlaDetail?: string(name='HourSlaDetail'),
        isDefault?: boolean(name='IsDefault'),
        owner?: string(name='Owner'),
        priority?: int32(name='Priority'),
        projectId?: long(name='ProjectId'),
        slaHour?: int32(name='SlaHour'),
        slaMinu?: int32(name='SlaMinu'),
        useFlag?: boolean(name='UseFlag'),
      }
    ](name='Baselines'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListBaselineConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBaselineConfigsResponseBody(name='body'),
}

async function listBaselineConfigsWithOptions(request: ListBaselineConfigsRequest, runtime: Util.RuntimeOptions): ListBaselineConfigsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineTypes)) {
    body['BaselineTypes'] = request.baselineTypes;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.searchText)) {
    body['SearchText'] = request.searchText;
  }
  if (!Util.isUnset(request.useflag)) {
    body['Useflag'] = request.useflag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListBaselineConfigs',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBaselineConfigs(request: ListBaselineConfigsRequest): ListBaselineConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBaselineConfigsWithOptions(request, runtime);
}

model ListBaselineStatusesRequest {
  baselineTypes?: string(name='BaselineTypes'),
  bizdate?: string(name='Bizdate'),
  finishStatus?: string(name='FinishStatus'),
  owner?: string(name='Owner'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  priority?: string(name='Priority'),
  searchText?: string(name='SearchText'),
  status?: string(name='Status'),
  topicId?: long(name='TopicId'),
}

model ListBaselineStatusesResponseBody = {
  data?: {
    baselineStatuses?: [ 
      {
        baselineId?: long(name='BaselineId'),
        baselineName?: string(name='BaselineName'),
        bizdate?: long(name='Bizdate'),
        buffer?: long(name='Buffer'),
        endCast?: long(name='EndCast'),
        expTime?: long(name='ExpTime'),
        finishStatus?: string(name='FinishStatus'),
        finishTime?: long(name='FinishTime'),
        inGroupId?: int32(name='InGroupId'),
        owner?: string(name='Owner'),
        priority?: int32(name='Priority'),
        projectId?: long(name='ProjectId'),
        slaTime?: long(name='SlaTime'),
        status?: string(name='Status'),
      }
    ](name='BaselineStatuses'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListBaselineStatusesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBaselineStatusesResponseBody(name='body'),
}

async function listBaselineStatusesWithOptions(request: ListBaselineStatusesRequest, runtime: Util.RuntimeOptions): ListBaselineStatusesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineTypes)) {
    body['BaselineTypes'] = request.baselineTypes;
  }
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.finishStatus)) {
    body['FinishStatus'] = request.finishStatus;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.searchText)) {
    body['SearchText'] = request.searchText;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.topicId)) {
    body['TopicId'] = request.topicId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListBaselineStatuses',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBaselineStatuses(request: ListBaselineStatusesRequest): ListBaselineStatusesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBaselineStatusesWithOptions(request, runtime);
}

model ListBaselinesRequest {
  baselineTypes?: string(name='BaselineTypes'),
  enable?: boolean(name='Enable'),
  owner?: string(name='Owner'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  priority?: string(name='Priority'),
  projectId?: long(name='ProjectId'),
  searchText?: string(name='SearchText'),
}

model ListBaselinesResponseBody = {
  data?: {
    baselines?: [ 
      {
        alertEnabled?: boolean(name='AlertEnabled'),
        alertMarginThreshold?: int32(name='AlertMarginThreshold'),
        baselineId?: long(name='BaselineId'),
        baselineName?: string(name='BaselineName'),
        baselineType?: string(name='BaselineType'),
        enabled?: boolean(name='Enabled'),
        overTimeSettings?: [ 
          {
            cycle?: int32(name='Cycle'),
            time?: string(name='Time'),
          }
        ](name='OverTimeSettings'),
        owner?: string(name='Owner'),
        priority?: int32(name='Priority'),
        projectId?: long(name='ProjectId'),
      }
    ](name='Baselines'),
    pageNumber?: string(name='PageNumber'),
    pageSize?: string(name='PageSize'),
    totalCount?: string(name='TotalCount'),
  }(name='Data'),
  dynamicErrorCode?: string(name='DynamicErrorCode'),
  dynamicErrorMessage?: string(name='DynamicErrorMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListBaselinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBaselinesResponseBody(name='body'),
}

async function listBaselinesWithOptions(request: ListBaselinesRequest, runtime: Util.RuntimeOptions): ListBaselinesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineTypes)) {
    body['BaselineTypes'] = request.baselineTypes;
  }
  if (!Util.isUnset(request.enable)) {
    body['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.searchText)) {
    body['SearchText'] = request.searchText;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListBaselines',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBaselines(request: ListBaselinesRequest): ListBaselinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBaselinesWithOptions(request, runtime);
}

model ListBusinessRequest {
  keyword?: string(name='Keyword'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  projectId?: long(name='ProjectId'),
  projectIdentifier?: string(name='ProjectIdentifier'),
}

model ListBusinessResponseBody = {
  data?: {
    business?: [ 
      {
        businessId?: long(name='BusinessId'),
        businessName?: string(name='BusinessName'),
        description?: string(name='Description'),
        owner?: string(name='Owner'),
        projectId?: long(name='ProjectId'),
        useType?: string(name='UseType'),
      }
    ](name='Business'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListBusinessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBusinessResponseBody(name='body'),
}

async function listBusinessWithOptions(request: ListBusinessRequest, runtime: Util.RuntimeOptions): ListBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListBusiness',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBusiness(request: ListBusinessRequest): ListBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBusinessWithOptions(request, runtime);
}

model ListCalcEnginesRequest {
  calcEngineType?: string(name='CalcEngineType'),
  envType?: string(name='EnvType'),
  name?: string(name='Name'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  projectId?: long(name='ProjectId'),
}

model ListCalcEnginesResponseBody = {
  data?: {
    calcEngines?: [ 
      {
        bindingProjectId?: int32(name='BindingProjectId'),
        bindingProjectName?: string(name='BindingProjectName'),
        calcEngineType?: string(name='CalcEngineType'),
        dwRegion?: string(name='DwRegion'),
        engineId?: int32(name='EngineId'),
        engineInfo?: map[string]any(name='EngineInfo'),
        envType?: string(name='EnvType'),
        gmtCreate?: string(name='GmtCreate'),
        isDefault?: boolean(name='IsDefault'),
        name?: string(name='Name'),
        region?: string(name='Region'),
        taskAuthType?: string(name='TaskAuthType'),
        tenantId?: long(name='TenantId'),
      }
    ](name='CalcEngines'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListCalcEnginesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCalcEnginesResponseBody(name='body'),
}

async function listCalcEnginesWithOptions(request: ListCalcEnginesRequest, runtime: Util.RuntimeOptions): ListCalcEnginesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.calcEngineType)) {
    query['CalcEngineType'] = request.calcEngineType;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCalcEngines',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCalcEngines(request: ListCalcEnginesRequest): ListCalcEnginesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCalcEnginesWithOptions(request, runtime);
}

model ListConnectionsRequest {
  connectionType?: string(name='ConnectionType'),
  envType?: int32(name='EnvType'),
  name?: string(name='Name'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  projectId?: long(name='ProjectId'),
  status?: string(name='Status'),
  subType?: string(name='SubType'),
}

model ListConnectionsResponseBody = {
  data?: {
    connections?: [ 
      {
        bindingCalcEngineId?: int32(name='BindingCalcEngineId'),
        connectStatus?: int32(name='ConnectStatus'),
        connectionType?: string(name='ConnectionType'),
        content?: string(name='Content'),
        defaultEngine?: boolean(name='DefaultEngine'),
        description?: string(name='Description'),
        envType?: int32(name='EnvType'),
        gmtCreate?: string(name='GmtCreate'),
        gmtModified?: string(name='GmtModified'),
        id?: int32(name='Id'),
        name?: string(name='Name'),
        operator?: string(name='Operator'),
        projectId?: int32(name='ProjectId'),
        sequence?: int32(name='Sequence'),
        shared?: boolean(name='Shared'),
        status?: int32(name='Status'),
        subType?: string(name='SubType'),
        tenantId?: long(name='TenantId'),
      }
    ](name='Connections'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListConnectionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListConnectionsResponseBody(name='body'),
}

async function listConnectionsWithOptions(request: ListConnectionsRequest, runtime: Util.RuntimeOptions): ListConnectionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListConnections',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listConnections(request: ListConnectionsRequest): ListConnectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConnectionsWithOptions(request, runtime);
}

model ListDIProjectConfigRequest {
  destinationType?: string(name='DestinationType'),
  projectId?: long(name='ProjectId'),
  sourceType?: string(name='SourceType'),
}

model ListDIProjectConfigResponseBody = {
  data?: {
    config?: string(name='Config'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListDIProjectConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDIProjectConfigResponseBody(name='body'),
}

async function listDIProjectConfigWithOptions(request: ListDIProjectConfigRequest, runtime: Util.RuntimeOptions): ListDIProjectConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDIProjectConfig',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDIProjectConfig(request: ListDIProjectConfigRequest): ListDIProjectConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDIProjectConfigWithOptions(request, runtime);
}

model ListDagsRequest {
  opSeq?: long(name='OpSeq'),
  projectEnv?: string(name='ProjectEnv'),
}

model ListDagsResponseBody = {
  data?: {
    dags?: [ 
      {
        bizdate?: long(name='Bizdate'),
        createTime?: long(name='CreateTime'),
        createUser?: string(name='CreateUser'),
        dagId?: long(name='DagId'),
        finishTime?: long(name='FinishTime'),
        gmtdate?: long(name='Gmtdate'),
        modifyTime?: long(name='ModifyTime'),
        name?: string(name='Name'),
        opSeq?: long(name='OpSeq'),
        projectId?: long(name='ProjectId'),
        startTime?: long(name='StartTime'),
        status?: string(name='Status'),
        type?: string(name='Type'),
      }
    ](name='Dags'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListDagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDagsResponseBody(name='body'),
}

async function listDagsWithOptions(request: ListDagsRequest, runtime: Util.RuntimeOptions): ListDagsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.opSeq)) {
    body['OpSeq'] = request.opSeq;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDags',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDags(request: ListDagsRequest): ListDagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDagsWithOptions(request, runtime);
}

model ListDataServiceApiAuthoritiesRequest {
  apiNameKeyword?: string(name='ApiNameKeyword'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  projectId?: long(name='ProjectId'),
  tenantId?: long(name='TenantId'),
}

model ListDataServiceApiAuthoritiesResponseBody = {
  data?: {
    apiAuthorizationList?: [ 
      {
        apiId?: long(name='ApiId'),
        apiName?: string(name='ApiName'),
        apiPath?: string(name='ApiPath'),
        apiStatus?: int32(name='ApiStatus'),
        authorizationRecords?: [ 
          {
            createdTime?: string(name='CreatedTime'),
            creatorId?: string(name='CreatorId'),
            endTime?: string(name='EndTime'),
            projectId?: long(name='ProjectId'),
          }
        ](name='AuthorizationRecords'),
        createdTime?: string(name='CreatedTime'),
        creatorId?: string(name='CreatorId'),
        groupId?: string(name='GroupId'),
        modifiedTime?: string(name='ModifiedTime'),
        projectId?: long(name='ProjectId'),
        tenantId?: long(name='TenantId'),
      }
    ](name='ApiAuthorizationList'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListDataServiceApiAuthoritiesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataServiceApiAuthoritiesResponseBody(name='body'),
}

async function listDataServiceApiAuthoritiesWithOptions(request: ListDataServiceApiAuthoritiesRequest, runtime: Util.RuntimeOptions): ListDataServiceApiAuthoritiesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiNameKeyword)) {
    body['ApiNameKeyword'] = request.apiNameKeyword;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServiceApiAuthorities',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataServiceApiAuthorities(request: ListDataServiceApiAuthoritiesRequest): ListDataServiceApiAuthoritiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServiceApiAuthoritiesWithOptions(request, runtime);
}

model ListDataServiceApiTestRequest {
  apiId?: long(name='ApiId'),
  pageSize?: int32(name='PageSize'),
}

model ListDataServiceApiTestResponseBody = {
  data?: [ 
    {
      apiId?: long(name='ApiId'),
      costTime?: int32(name='CostTime'),
      createTime?: long(name='CreateTime'),
      paramMap?: string(name='ParamMap'),
      retCode?: long(name='RetCode'),
      retResult?: string(name='RetResult'),
      status?: string(name='Status'),
      testId?: long(name='TestId'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model ListDataServiceApiTestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataServiceApiTestResponseBody(name='body'),
}

async function listDataServiceApiTestWithOptions(request: ListDataServiceApiTestRequest, runtime: Util.RuntimeOptions): ListDataServiceApiTestResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServiceApiTest',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataServiceApiTest(request: ListDataServiceApiTestRequest): ListDataServiceApiTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServiceApiTestWithOptions(request, runtime);
}

model ListDataServiceApisRequest {
  apiNameKeyword?: string(name='ApiNameKeyword'),
  apiPathKeyword?: string(name='ApiPathKeyword'),
  creatorId?: string(name='CreatorId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  projectId?: long(name='ProjectId'),
  tenantId?: long(name='TenantId'),
}

model ListDataServiceApisResponseBody = {
  data?: {
    apis?: [ 
      {
        apiId?: long(name='ApiId'),
        apiMode?: int32(name='ApiMode'),
        apiName?: string(name='ApiName'),
        apiPath?: string(name='ApiPath'),
        createdTime?: string(name='CreatedTime'),
        creatorId?: string(name='CreatorId'),
        description?: string(name='Description'),
        folderId?: long(name='FolderId'),
        groupId?: string(name='GroupId'),
        modifiedTime?: string(name='ModifiedTime'),
        operatorId?: string(name='OperatorId'),
        projectId?: long(name='ProjectId'),
        protocols?: [ int32 ](name='Protocols'),
        registrationDetails?: {
          failedResultSample?: string(name='FailedResultSample'),
          registrationErrorCodes?: [ 
            {
              errorCode?: string(name='ErrorCode'),
              errorMessage?: string(name='ErrorMessage'),
              errorSolution?: string(name='ErrorSolution'),
            }
          ](name='RegistrationErrorCodes'),
          registrationRequestParameters?: [ 
            {
              columnName?: string(name='ColumnName'),
              defaultValue?: string(name='DefaultValue'),
              exampleValue?: string(name='ExampleValue'),
              isRequiredParameter?: boolean(name='IsRequiredParameter'),
              parameterDataType?: int32(name='ParameterDataType'),
              parameterDescription?: string(name='ParameterDescription'),
              parameterName?: string(name='ParameterName'),
              parameterOperator?: int32(name='ParameterOperator'),
              parameterPosition?: int32(name='ParameterPosition'),
            }
          ](name='RegistrationRequestParameters'),
          serviceContentType?: int32(name='ServiceContentType'),
          serviceHost?: string(name='ServiceHost'),
          servicePath?: string(name='ServicePath'),
          serviceRequestBodyDescription?: string(name='ServiceRequestBodyDescription'),
          successfulResultSample?: string(name='SuccessfulResultSample'),
        }(name='RegistrationDetails'),
        requestMethod?: int32(name='RequestMethod'),
        responseContentType?: int32(name='ResponseContentType'),
        scriptDetails?: {
          isPagedResponse?: boolean(name='IsPagedResponse'),
          script?: string(name='Script'),
          scriptConnection?: {
            connectionId?: long(name='ConnectionId'),
            tableName?: string(name='TableName'),
          }(name='ScriptConnection'),
          scriptRequestParameters?: [ 
            {
              columnName?: string(name='ColumnName'),
              defaultValue?: string(name='DefaultValue'),
              exampleValue?: string(name='ExampleValue'),
              isRequiredParameter?: boolean(name='IsRequiredParameter'),
              parameterDataType?: int32(name='ParameterDataType'),
              parameterDescription?: string(name='ParameterDescription'),
              parameterName?: string(name='ParameterName'),
              parameterOperator?: int32(name='ParameterOperator'),
              parameterPosition?: int32(name='ParameterPosition'),
            }
          ](name='ScriptRequestParameters'),
          scriptResponseParameters?: [ 
            {
              columnName?: string(name='ColumnName'),
              exampleValue?: string(name='ExampleValue'),
              parameterDataType?: int32(name='ParameterDataType'),
              parameterDescription?: string(name='ParameterDescription'),
              parameterName?: string(name='ParameterName'),
            }
          ](name='ScriptResponseParameters'),
        }(name='ScriptDetails'),
        status?: int32(name='Status'),
        tenantId?: long(name='TenantId'),
        timeout?: int32(name='Timeout'),
        visibleRange?: int32(name='VisibleRange'),
        wizardDetails?: {
          isPagedResponse?: boolean(name='IsPagedResponse'),
          wizardConnection?: {
            connectionId?: long(name='ConnectionId'),
            tableName?: string(name='TableName'),
          }(name='WizardConnection'),
          wizardRequestParameters?: [ 
            {
              columnName?: string(name='ColumnName'),
              defaultValue?: string(name='DefaultValue'),
              exampleValue?: string(name='ExampleValue'),
              isRequiredParameter?: boolean(name='IsRequiredParameter'),
              parameterDataType?: int32(name='ParameterDataType'),
              parameterDescription?: string(name='ParameterDescription'),
              parameterName?: string(name='ParameterName'),
              parameterOperator?: int32(name='ParameterOperator'),
              parameterPosition?: int32(name='ParameterPosition'),
            }
          ](name='WizardRequestParameters'),
          wizardResponseParameters?: [ 
            {
              columnName?: string(name='ColumnName'),
              exampleValue?: string(name='ExampleValue'),
              parameterDataType?: int32(name='ParameterDataType'),
              parameterDescription?: string(name='ParameterDescription'),
              parameterName?: string(name='ParameterName'),
            }
          ](name='WizardResponseParameters'),
        }(name='WizardDetails'),
      }
    ](name='Apis'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListDataServiceApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataServiceApisResponseBody(name='body'),
}

async function listDataServiceApisWithOptions(request: ListDataServiceApisRequest, runtime: Util.RuntimeOptions): ListDataServiceApisResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiNameKeyword)) {
    body['ApiNameKeyword'] = request.apiNameKeyword;
  }
  if (!Util.isUnset(request.apiPathKeyword)) {
    body['ApiPathKeyword'] = request.apiPathKeyword;
  }
  if (!Util.isUnset(request.creatorId)) {
    body['CreatorId'] = request.creatorId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServiceApis',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataServiceApis(request: ListDataServiceApisRequest): ListDataServiceApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServiceApisWithOptions(request, runtime);
}

model ListDataServiceApplicationsRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  projectIdList?: string(name='ProjectIdList'),
  tenantId?: long(name='TenantId'),
}

model ListDataServiceApplicationsResponseBody = {
  data?: {
    applications?: [ 
      {
        applicationId?: long(name='ApplicationId'),
        applicationName?: string(name='ApplicationName'),
        projectId?: long(name='ProjectId'),
      }
    ](name='Applications'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListDataServiceApplicationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataServiceApplicationsResponseBody(name='body'),
}

async function listDataServiceApplicationsWithOptions(request: ListDataServiceApplicationsRequest, runtime: Util.RuntimeOptions): ListDataServiceApplicationsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectIdList)) {
    body['ProjectIdList'] = request.projectIdList;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServiceApplications',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataServiceApplications(request: ListDataServiceApplicationsRequest): ListDataServiceApplicationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServiceApplicationsWithOptions(request, runtime);
}

model ListDataServiceAuthorizedApisRequest {
  apiNameKeyword?: string(name='ApiNameKeyword'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  projectId?: long(name='ProjectId'),
  tenantId?: long(name='TenantId'),
}

model ListDataServiceAuthorizedApisResponseBody = {
  data?: {
    apiAuthorizedList?: [ 
      {
        apiId?: long(name='ApiId'),
        apiName?: string(name='ApiName'),
        apiPath?: string(name='ApiPath'),
        apiStatus?: int32(name='ApiStatus'),
        createdTime?: string(name='CreatedTime'),
        creatorId?: string(name='CreatorId'),
        grantCreatedTime?: string(name='GrantCreatedTime'),
        grantEndTime?: string(name='GrantEndTime'),
        grantOperatorId?: string(name='GrantOperatorId'),
        groupId?: string(name='GroupId'),
        modifiedTime?: string(name='ModifiedTime'),
        projectId?: long(name='ProjectId'),
        tenantId?: long(name='TenantId'),
      }
    ](name='ApiAuthorizedList'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListDataServiceAuthorizedApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataServiceAuthorizedApisResponseBody(name='body'),
}

async function listDataServiceAuthorizedApisWithOptions(request: ListDataServiceAuthorizedApisRequest, runtime: Util.RuntimeOptions): ListDataServiceAuthorizedApisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiNameKeyword)) {
    body['ApiNameKeyword'] = request.apiNameKeyword;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServiceAuthorizedApis',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataServiceAuthorizedApis(request: ListDataServiceAuthorizedApisRequest): ListDataServiceAuthorizedApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServiceAuthorizedApisWithOptions(request, runtime);
}

model ListDataServiceFoldersRequest {
  folderNameKeyword?: string(name='FolderNameKeyword'),
  groupId?: string(name='GroupId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  projectId?: long(name='ProjectId'),
  tenantId?: long(name='TenantId'),
}

model ListDataServiceFoldersResponseBody = {
  folderPagingResult?: {
    folders?: [ 
      {
        createdTime?: string(name='CreatedTime'),
        folderId?: long(name='FolderId'),
        folderName?: string(name='FolderName'),
        groupId?: string(name='GroupId'),
        modifiedTime?: string(name='ModifiedTime'),
        parentId?: long(name='ParentId'),
        projectId?: long(name='ProjectId'),
        tenantId?: long(name='TenantId'),
      }
    ](name='Folders'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='FolderPagingResult'),
  requestId?: string(name='RequestId'),
}

model ListDataServiceFoldersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataServiceFoldersResponseBody(name='body'),
}

async function listDataServiceFoldersWithOptions(request: ListDataServiceFoldersRequest, runtime: Util.RuntimeOptions): ListDataServiceFoldersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderNameKeyword)) {
    body['FolderNameKeyword'] = request.folderNameKeyword;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServiceFolders',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataServiceFolders(request: ListDataServiceFoldersRequest): ListDataServiceFoldersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServiceFoldersWithOptions(request, runtime);
}

model ListDataServiceGroupsRequest {
  groupNameKeyword?: string(name='GroupNameKeyword'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  projectId?: long(name='ProjectId'),
  tenantId?: long(name='TenantId'),
}

model ListDataServiceGroupsResponseBody = {
  groupPagingResult?: {
    groups?: [ 
      {
        apiGatewayGroupId?: string(name='ApiGatewayGroupId'),
        createdTime?: string(name='CreatedTime'),
        creatorId?: string(name='CreatorId'),
        description?: string(name='Description'),
        groupId?: string(name='GroupId'),
        groupName?: string(name='GroupName'),
        modifiedTime?: string(name='ModifiedTime'),
        projectId?: long(name='ProjectId'),
        tenantId?: long(name='TenantId'),
      }
    ](name='Groups'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='GroupPagingResult'),
  requestId?: string(name='RequestId'),
}

model ListDataServiceGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataServiceGroupsResponseBody(name='body'),
}

async function listDataServiceGroupsWithOptions(request: ListDataServiceGroupsRequest, runtime: Util.RuntimeOptions): ListDataServiceGroupsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupNameKeyword)) {
    body['GroupNameKeyword'] = request.groupNameKeyword;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServiceGroups',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataServiceGroups(request: ListDataServiceGroupsRequest): ListDataServiceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServiceGroupsWithOptions(request, runtime);
}

model ListDataServicePublishedApisRequest {
  apiNameKeyword?: string(name='ApiNameKeyword'),
  apiPathKeyword?: string(name='ApiPathKeyword'),
  creatorId?: string(name='CreatorId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  projectId?: long(name='ProjectId'),
  tenantId?: long(name='TenantId'),
}

model ListDataServicePublishedApisResponseBody = {
  data?: {
    apis?: [ 
      {
        apiId?: long(name='ApiId'),
        apiMode?: int32(name='ApiMode'),
        apiName?: string(name='ApiName'),
        apiPath?: string(name='ApiPath'),
        createdTime?: string(name='CreatedTime'),
        creatorId?: string(name='CreatorId'),
        description?: string(name='Description'),
        groupId?: string(name='GroupId'),
        modifiedTime?: string(name='ModifiedTime'),
        operatorId?: string(name='OperatorId'),
        projectId?: long(name='ProjectId'),
        protocols?: [ int32 ](name='Protocols'),
        registrationDetails?: {
          failedResultSample?: string(name='FailedResultSample'),
          registrationErrorCodes?: [ 
            {
              errorCode?: string(name='ErrorCode'),
              errorMessage?: string(name='ErrorMessage'),
              errorSolution?: string(name='ErrorSolution'),
            }
          ](name='RegistrationErrorCodes'),
          registrationRequestParameters?: [ 
            {
              defaultValue?: string(name='DefaultValue'),
              exampleValue?: string(name='ExampleValue'),
              isRequiredParameter?: boolean(name='IsRequiredParameter'),
              parameterDataType?: int32(name='ParameterDataType'),
              parameterDescription?: string(name='ParameterDescription'),
              parameterName?: string(name='ParameterName'),
              parameterOperator?: int32(name='ParameterOperator'),
              parameterPosition?: int32(name='ParameterPosition'),
            }
          ](name='RegistrationRequestParameters'),
          serviceContentType?: int32(name='ServiceContentType'),
          serviceHost?: string(name='ServiceHost'),
          servicePath?: string(name='ServicePath'),
          serviceRequestBodyDescription?: string(name='ServiceRequestBodyDescription'),
          successfulResultSample?: string(name='SuccessfulResultSample'),
        }(name='RegistrationDetails'),
        requestMethod?: int32(name='RequestMethod'),
        responseContentType?: int32(name='ResponseContentType'),
        scriptDetails?: {
          failedResultSample?: string(name='FailedResultSample'),
          isPagedResponse?: boolean(name='IsPagedResponse'),
          script?: string(name='Script'),
          scriptConnection?: {
            connectionId?: long(name='ConnectionId'),
            tableName?: string(name='TableName'),
          }(name='ScriptConnection'),
          scriptErrorCodes?: [ 
            {
              errorCode?: string(name='ErrorCode'),
              errorMessage?: string(name='ErrorMessage'),
              errorSolution?: string(name='ErrorSolution'),
            }
          ](name='ScriptErrorCodes'),
          scriptRequestParameters?: [ 
            {
              defaultValue?: string(name='DefaultValue'),
              exampleValue?: string(name='ExampleValue'),
              isRequiredParameter?: boolean(name='IsRequiredParameter'),
              parameterDataType?: int32(name='ParameterDataType'),
              parameterDescription?: string(name='ParameterDescription'),
              parameterName?: string(name='ParameterName'),
              parameterOperator?: int32(name='ParameterOperator'),
              parameterPosition?: int32(name='ParameterPosition'),
            }
          ](name='ScriptRequestParameters'),
          scriptResponseParameters?: [ 
            {
              exampleValue?: string(name='ExampleValue'),
              parameterDataType?: int32(name='ParameterDataType'),
              parameterDescription?: string(name='ParameterDescription'),
              parameterName?: string(name='ParameterName'),
            }
          ](name='ScriptResponseParameters'),
          successfulResultSample?: string(name='SuccessfulResultSample'),
        }(name='ScriptDetails'),
        status?: int32(name='Status'),
        tenantId?: long(name='TenantId'),
        timeout?: int32(name='Timeout'),
        visibleRange?: int32(name='VisibleRange'),
        wizardDetails?: {
          failedResultSample?: string(name='FailedResultSample'),
          isPagedResponse?: boolean(name='IsPagedResponse'),
          successfulResultSample?: string(name='SuccessfulResultSample'),
          wizardConnection?: {
            connectionId?: long(name='ConnectionId'),
            tableName?: string(name='TableName'),
          }(name='WizardConnection'),
          wizardErrorCodes?: [ 
            {
              errorCode?: string(name='ErrorCode'),
              errorMessage?: string(name='ErrorMessage'),
              errorSolution?: string(name='ErrorSolution'),
            }
          ](name='WizardErrorCodes'),
          wizardRequestParameters?: [ 
            {
              defaultValue?: string(name='DefaultValue'),
              exampleValue?: string(name='ExampleValue'),
              isRequiredParameter?: boolean(name='IsRequiredParameter'),
              parameterDataType?: int32(name='ParameterDataType'),
              parameterDescription?: string(name='ParameterDescription'),
              parameterName?: string(name='ParameterName'),
              parameterOperator?: int32(name='ParameterOperator'),
              parameterPosition?: int32(name='ParameterPosition'),
            }
          ](name='WizardRequestParameters'),
          wizardResponseParameters?: [ 
            {
              exampleValue?: string(name='ExampleValue'),
              parameterDataType?: int32(name='ParameterDataType'),
              parameterDescription?: string(name='ParameterDescription'),
              parameterName?: string(name='ParameterName'),
            }
          ](name='WizardResponseParameters'),
        }(name='WizardDetails'),
      }
    ](name='Apis'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListDataServicePublishedApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataServicePublishedApisResponseBody(name='body'),
}

async function listDataServicePublishedApisWithOptions(request: ListDataServicePublishedApisRequest, runtime: Util.RuntimeOptions): ListDataServicePublishedApisResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiNameKeyword)) {
    body['ApiNameKeyword'] = request.apiNameKeyword;
  }
  if (!Util.isUnset(request.apiPathKeyword)) {
    body['ApiPathKeyword'] = request.apiPathKeyword;
  }
  if (!Util.isUnset(request.creatorId)) {
    body['CreatorId'] = request.creatorId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServicePublishedApis',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataServicePublishedApis(request: ListDataServicePublishedApisRequest): ListDataServicePublishedApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServicePublishedApisWithOptions(request, runtime);
}

model ListDataSourcesRequest {
  dataSourceType?: string(name='DataSourceType'),
  envType?: int32(name='EnvType'),
  name?: string(name='Name'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  projectId?: long(name='ProjectId'),
  status?: string(name='Status'),
  subType?: string(name='SubType'),
}

model ListDataSourcesResponseBody = {
  data?: {
    dataSources?: [ 
      {
        bindingCalcEngineId?: int32(name='BindingCalcEngineId'),
        connectStatus?: int32(name='ConnectStatus'),
        content?: string(name='Content'),
        dataSourceType?: string(name='DataSourceType'),
        defaultEngine?: boolean(name='DefaultEngine'),
        description?: string(name='Description'),
        envType?: int32(name='EnvType'),
        gmtCreate?: string(name='GmtCreate'),
        gmtModified?: string(name='GmtModified'),
        id?: int32(name='Id'),
        name?: string(name='Name'),
        operator?: string(name='Operator'),
        projectId?: int32(name='ProjectId'),
        sequence?: int32(name='Sequence'),
        shared?: boolean(name='Shared'),
        status?: int32(name='Status'),
        subType?: string(name='SubType'),
        tenantId?: long(name='TenantId'),
      }
    ](name='DataSources'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListDataSourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataSourcesResponseBody(name='body'),
}

async function listDataSourcesWithOptions(request: ListDataSourcesRequest, runtime: Util.RuntimeOptions): ListDataSourcesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataSources',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataSources(request: ListDataSourcesRequest): ListDataSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataSourcesWithOptions(request, runtime);
}

model ListDeploymentsRequest {
  creator?: string(name='Creator'),
  endCreateTime?: long(name='EndCreateTime'),
  endExecuteTime?: long(name='EndExecuteTime'),
  executor?: string(name='Executor'),
  keyword?: string(name='Keyword'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  projectId?: long(name='ProjectId'),
  projectIdentifier?: string(name='ProjectIdentifier'),
  status?: int32(name='Status'),
}

model ListDeploymentsResponseBody = {
  data?: {
    deployments?: [ 
      {
        createTime?: long(name='CreateTime'),
        creator?: string(name='Creator'),
        errorMessage?: string(name='ErrorMessage'),
        executeTime?: long(name='ExecuteTime'),
        executor?: string(name='Executor'),
        id?: long(name='Id'),
        name?: string(name='Name'),
        status?: int32(name='Status'),
      }
    ](name='Deployments'),
    pageNumber?: long(name='PageNumber'),
    pageSize?: long(name='PageSize'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model ListDeploymentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDeploymentsResponseBody(name='body'),
}

async function listDeploymentsWithOptions(request: ListDeploymentsRequest, runtime: Util.RuntimeOptions): ListDeploymentsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.creator)) {
    body['Creator'] = request.creator;
  }
  if (!Util.isUnset(request.endCreateTime)) {
    body['EndCreateTime'] = request.endCreateTime;
  }
  if (!Util.isUnset(request.endExecuteTime)) {
    body['EndExecuteTime'] = request.endExecuteTime;
  }
  if (!Util.isUnset(request.executor)) {
    body['Executor'] = request.executor;
  }
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDeployments',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDeployments(request: ListDeploymentsRequest): ListDeploymentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeploymentsWithOptions(request, runtime);
}

model ListEnabledExtensionsForProjectRequest {
  eventCode?: string(name='EventCode'),
  fileType?: string(name='FileType'),
  projectId?: long(name='ProjectId'),
}

model ListEnabledExtensionsForProjectResponseBody = {
  extensions?: [ 
    {
      createUser?: string(name='CreateUser'),
      extensionCode?: string(name='ExtensionCode'),
      extensionDesc?: string(name='ExtensionDesc'),
      extensionName?: string(name='ExtensionName'),
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      modifyUser?: string(name='ModifyUser'),
      owner?: string(name='Owner'),
      parameterSetting?: string(name='ParameterSetting'),
      tenantId?: long(name='TenantId'),
    }
  ](name='Extensions'),
  requestId?: string(name='RequestId'),
}

model ListEnabledExtensionsForProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEnabledExtensionsForProjectResponseBody(name='body'),
}

async function listEnabledExtensionsForProjectWithOptions(request: ListEnabledExtensionsForProjectRequest, runtime: Util.RuntimeOptions): ListEnabledExtensionsForProjectResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.eventCode)) {
    body['EventCode'] = request.eventCode;
  }
  if (!Util.isUnset(request.fileType)) {
    body['FileType'] = request.fileType;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListEnabledExtensionsForProject',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEnabledExtensionsForProject(request: ListEnabledExtensionsForProjectRequest): ListEnabledExtensionsForProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEnabledExtensionsForProjectWithOptions(request, runtime);
}

model ListExtensionsRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListExtensionsResponseBody = {
  pagingInfo?: {
    extensions?: [ 
      {
        bindEventList?: [ 
          {
            eventCode?: string(name='EventCode'),
            eventName?: string(name='EventName'),
          }
        ](name='BindEventList'),
        extensionCode?: string(name='ExtensionCode'),
        extensionDesc?: string(name='ExtensionDesc'),
        extensionName?: string(name='ExtensionName'),
        owner?: string(name='Owner'),
        status?: int32(name='Status'),
      }
    ](name='Extensions'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId'),
}

model ListExtensionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListExtensionsResponseBody(name='body'),
}

async function listExtensionsWithOptions(request: ListExtensionsRequest, runtime: Util.RuntimeOptions): ListExtensionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListExtensions',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listExtensions(request: ListExtensionsRequest): ListExtensionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listExtensionsWithOptions(request, runtime);
}

model ListFileTypeRequest {
  keyword?: string(name='Keyword'),
  locale?: string(name='Locale'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  projectId?: long(name='ProjectId'),
  projectIdentifier?: string(name='ProjectIdentifier'),
}

model ListFileTypeResponseBody = {
  nodeTypeInfoList?: {
    nodeTypeInfo?: [ 
      {
        nodeType?: int32(name='NodeType'),
        nodeTypeName?: string(name='NodeTypeName'),
      }
    ](name='NodeTypeInfo'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='NodeTypeInfoList'),
  requestId?: string(name='RequestId'),
}

model ListFileTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFileTypeResponseBody(name='body'),
}

async function listFileTypeWithOptions(request: ListFileTypeRequest, runtime: Util.RuntimeOptions): ListFileTypeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.locale)) {
    body['Locale'] = request.locale;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListFileType',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFileType(request: ListFileTypeRequest): ListFileTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFileTypeWithOptions(request, runtime);
}

model ListFileVersionsRequest {
  fileId?: long(name='FileId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  projectId?: long(name='ProjectId'),
  projectIdentifier?: string(name='ProjectIdentifier'),
}

model ListFileVersionsResponseBody = {
  data?: {
    fileVersions?: [ 
      {
        changeType?: string(name='ChangeType'),
        comment?: string(name='Comment'),
        commitTime?: long(name='CommitTime'),
        commitUser?: string(name='CommitUser'),
        fileContent?: string(name='FileContent'),
        fileName?: string(name='FileName'),
        filePropertyContent?: string(name='FilePropertyContent'),
        fileVersion?: int32(name='FileVersion'),
        isCurrentProd?: boolean(name='IsCurrentProd'),
        nodeContent?: string(name='NodeContent'),
        nodeId?: long(name='NodeId'),
        status?: string(name='Status'),
        useType?: string(name='UseType'),
      }
    ](name='FileVersions'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListFileVersionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFileVersionsResponseBody(name='body'),
}

async function listFileVersionsWithOptions(request: ListFileVersionsRequest, runtime: Util.RuntimeOptions): ListFileVersionsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListFileVersions',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFileVersions(request: ListFileVersionsRequest): ListFileVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFileVersionsWithOptions(request, runtime);
}

model ListFilesRequest {
  fileFolderPath?: string(name='FileFolderPath'),
  fileTypes?: string(name='FileTypes'),
  keyword?: string(name='Keyword'),
  nodeId?: long(name='NodeId'),
  owner?: string(name='Owner'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  projectId?: long(name='ProjectId'),
  projectIdentifier?: string(name='ProjectIdentifier'),
  useType?: string(name='UseType'),
}

model ListFilesResponseBody = {
  data?: {
    files?: [ 
      {
        autoParsing?: boolean(name='AutoParsing'),
        bizId?: long(name='BizId'),
        businessId?: long(name='BusinessId'),
        commitStatus?: int32(name='CommitStatus'),
        connectionName?: string(name='ConnectionName'),
        content?: string(name='Content'),
        createTime?: long(name='CreateTime'),
        createUser?: string(name='CreateUser'),
        currentVersion?: int32(name='CurrentVersion'),
        fileDescription?: string(name='FileDescription'),
        fileFolderId?: string(name='FileFolderId'),
        fileId?: long(name='FileId'),
        fileName?: string(name='FileName'),
        fileType?: int32(name='FileType'),
        isMaxCompute?: boolean(name='IsMaxCompute'),
        lastEditTime?: long(name='LastEditTime'),
        lastEditUser?: string(name='LastEditUser'),
        nodeId?: long(name='NodeId'),
        owner?: string(name='Owner'),
        parentId?: long(name='ParentId'),
        useType?: string(name='UseType'),
      }
    ](name='Files'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFilesResponseBody(name='body'),
}

async function listFilesWithOptions(request: ListFilesRequest, runtime: Util.RuntimeOptions): ListFilesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.fileFolderPath)) {
    body['FileFolderPath'] = request.fileFolderPath;
  }
  if (!Util.isUnset(request.fileTypes)) {
    body['FileTypes'] = request.fileTypes;
  }
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.useType)) {
    body['UseType'] = request.useType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListFiles',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFiles(request: ListFilesRequest): ListFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFilesWithOptions(request, runtime);
}

model ListFoldersRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  parentFolderPath?: string(name='ParentFolderPath'),
  projectId?: long(name='ProjectId'),
  projectIdentifier?: string(name='ProjectIdentifier'),
}

model ListFoldersResponseBody = {
  data?: {
    folders?: [ 
      {
        folderId?: string(name='FolderId'),
        folderPath?: string(name='FolderPath'),
      }
    ](name='Folders'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListFoldersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFoldersResponseBody(name='body'),
}

async function listFoldersWithOptions(request: ListFoldersRequest, runtime: Util.RuntimeOptions): ListFoldersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentFolderPath)) {
    body['ParentFolderPath'] = request.parentFolderPath;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListFolders',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFolders(request: ListFoldersRequest): ListFoldersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFoldersWithOptions(request, runtime);
}

model ListInnerNodesRequest {
  nodeName?: string(name='NodeName'),
  outerNodeId?: long(name='OuterNodeId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  programType?: string(name='ProgramType'),
  projectEnv?: string(name='ProjectEnv'),
  projectId?: long(name='ProjectId'),
}

model ListInnerNodesResponseBody = {
  paging?: {
    nodes?: [ 
      {
        baselineId?: long(name='BaselineId'),
        businessId?: long(name='BusinessId'),
        connection?: string(name='Connection'),
        cronExpress?: string(name='CronExpress'),
        description?: string(name='Description'),
        dqcDescription?: string(name='DqcDescription'),
        dqcType?: string(name='DqcType'),
        nodeId?: long(name='NodeId'),
        nodeName?: string(name='NodeName'),
        ownerId?: string(name='OwnerId'),
        paramValues?: string(name='ParamValues'),
        priority?: int32(name='Priority'),
        programType?: string(name='ProgramType'),
        projectId?: long(name='ProjectId'),
        repeatInterval?: long(name='RepeatInterval'),
        repeatability?: boolean(name='Repeatability'),
        resGroupName?: string(name='ResGroupName'),
        schedulerType?: string(name='SchedulerType'),
      }
    ](name='Nodes'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Paging'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListInnerNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInnerNodesResponseBody(name='body'),
}

async function listInnerNodesWithOptions(request: ListInnerNodesRequest, runtime: Util.RuntimeOptions): ListInnerNodesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeName)) {
    body['NodeName'] = request.nodeName;
  }
  if (!Util.isUnset(request.outerNodeId)) {
    body['OuterNodeId'] = request.outerNodeId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.programType)) {
    body['ProgramType'] = request.programType;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListInnerNodes',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInnerNodes(request: ListInnerNodesRequest): ListInnerNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInnerNodesWithOptions(request, runtime);
}

model ListInstanceAmountRequest {
  beginDate?: string(name='BeginDate'),
  endDate?: string(name='EndDate'),
  projectId?: long(name='ProjectId'),
}

model ListInstanceAmountResponseBody = {
  instanceCounts?: [ 
    {
      count?: int32(name='Count'),
      date?: long(name='Date'),
    }
  ](name='InstanceCounts'),
  requestId?: string(name='RequestId'),
}

model ListInstanceAmountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstanceAmountResponseBody(name='body'),
}

async function listInstanceAmountWithOptions(request: ListInstanceAmountRequest, runtime: Util.RuntimeOptions): ListInstanceAmountResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.beginDate)) {
    body['BeginDate'] = request.beginDate;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListInstanceAmount',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstanceAmount(request: ListInstanceAmountRequest): ListInstanceAmountResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstanceAmountWithOptions(request, runtime);
}

model ListInstanceHistoryRequest {
  instanceId?: long(name='InstanceId'),
  projectEnv?: string(name='ProjectEnv'),
}

model ListInstanceHistoryResponseBody = {
  instances?: [ 
    {
      beginRunningTime?: long(name='BeginRunningTime'),
      beginWaitResTime?: long(name='BeginWaitResTime'),
      beginWaitTimeTime?: long(name='BeginWaitTimeTime'),
      bizdate?: long(name='Bizdate'),
      createTime?: long(name='CreateTime'),
      cycTime?: long(name='CycTime'),
      dagId?: long(name='DagId'),
      dagType?: string(name='DagType'),
      errorMessage?: string(name='ErrorMessage'),
      finishTime?: long(name='FinishTime'),
      instanceHistoryId?: long(name='InstanceHistoryId'),
      instanceId?: long(name='InstanceId'),
      modifyTime?: long(name='ModifyTime'),
      nodeId?: long(name='NodeId'),
      nodeName?: string(name='NodeName'),
      status?: string(name='Status'),
      taskType?: string(name='TaskType'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListInstanceHistoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstanceHistoryResponseBody(name='body'),
}

async function listInstanceHistoryWithOptions(request: ListInstanceHistoryRequest, runtime: Util.RuntimeOptions): ListInstanceHistoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListInstanceHistory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstanceHistory(request: ListInstanceHistoryRequest): ListInstanceHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstanceHistoryWithOptions(request, runtime);
}

model ListInstancesRequest {
  beginBizdate?: string(name='BeginBizdate'),
  bizName?: string(name='BizName'),
  bizdate?: string(name='Bizdate'),
  dagId?: long(name='DagId'),
  endBizdate?: string(name='EndBizdate'),
  nodeId?: long(name='NodeId'),
  nodeName?: string(name='NodeName'),
  owner?: string(name='Owner'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  programType?: string(name='ProgramType'),
  projectEnv?: string(name='ProjectEnv'),
  projectId?: long(name='ProjectId'),
  status?: string(name='Status'),
}

model ListInstancesResponseBody = {
  data?: {
    instances?: [ 
      {
        baselineId?: long(name='BaselineId'),
        beginRunningTime?: long(name='BeginRunningTime'),
        beginWaitResTime?: long(name='BeginWaitResTime'),
        beginWaitTimeTime?: long(name='BeginWaitTimeTime'),
        bizdate?: long(name='Bizdate'),
        businessId?: long(name='BusinessId'),
        connection?: string(name='Connection'),
        createTime?: long(name='CreateTime'),
        createUser?: string(name='CreateUser'),
        cycTime?: long(name='CycTime'),
        dagId?: long(name='DagId'),
        dagType?: string(name='DagType'),
        dqcDescription?: string(name='DqcDescription'),
        dqcType?: int32(name='DqcType'),
        errorMessage?: string(name='ErrorMessage'),
        finishTime?: long(name='FinishTime'),
        instanceId?: long(name='InstanceId'),
        modifyTime?: long(name='ModifyTime'),
        nodeId?: long(name='NodeId'),
        nodeName?: string(name='NodeName'),
        paramValues?: string(name='ParamValues'),
        priority?: int32(name='Priority'),
        relatedFlowId?: long(name='RelatedFlowId'),
        repeatInterval?: long(name='RepeatInterval'),
        repeatability?: boolean(name='Repeatability'),
        status?: string(name='Status'),
        taskRerunTime?: int32(name='TaskRerunTime'),
        taskType?: string(name='TaskType'),
      }
    ](name='Instances'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstancesWithOptions(request: ListInstancesRequest, runtime: Util.RuntimeOptions): ListInstancesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.beginBizdate)) {
    body['BeginBizdate'] = request.beginBizdate;
  }
  if (!Util.isUnset(request.bizName)) {
    body['BizName'] = request.bizName;
  }
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.dagId)) {
    body['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.endBizdate)) {
    body['EndBizdate'] = request.endBizdate;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.nodeName)) {
    body['NodeName'] = request.nodeName;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.programType)) {
    body['ProgramType'] = request.programType;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListInstances',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstancesWithOptions(request, runtime);
}

model ListManualDagInstancesRequest {
  dagId?: string(name='DagId'),
  projectEnv?: string(name='ProjectEnv'),
  projectName?: string(name='ProjectName'),
}

model ListManualDagInstancesResponseBody = {
  instances?: [ 
    {
      beginRunningTime?: long(name='BeginRunningTime'),
      beginWaitResTime?: long(name='BeginWaitResTime'),
      beginWaitTimeTime?: long(name='BeginWaitTimeTime'),
      bizDate?: long(name='BizDate'),
      createTime?: long(name='CreateTime'),
      createUser?: string(name='CreateUser'),
      cycTime?: long(name='CycTime'),
      dagId?: long(name='DagId'),
      dagType?: string(name='DagType'),
      finishTime?: long(name='FinishTime'),
      instanceId?: long(name='InstanceId'),
      modifyTime?: long(name='ModifyTime'),
      nodeId?: long(name='NodeId'),
      nodeName?: string(name='NodeName'),
      paramValues?: string(name='ParamValues'),
      status?: string(name='Status'),
      taskType?: string(name='TaskType'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId'),
}

model ListManualDagInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListManualDagInstancesResponseBody(name='body'),
}

async function listManualDagInstancesWithOptions(request: ListManualDagInstancesRequest, runtime: Util.RuntimeOptions): ListManualDagInstancesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.dagId)) {
    body['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListManualDagInstances',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listManualDagInstances(request: ListManualDagInstancesRequest): ListManualDagInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listManualDagInstancesWithOptions(request, runtime);
}

model ListMetaDBRequest {
  clusterId?: string(name='ClusterId'),
  dataSourceType?: string(name='DataSourceType'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  projectId?: long(name='ProjectId'),
}

model ListMetaDBResponseBody = {
  databaseInfo?: {
    dbList?: [ 
      {
        createTimeStamp?: long(name='CreateTimeStamp'),
        location?: string(name='Location'),
        modifiedTimeStamp?: long(name='ModifiedTimeStamp'),
        name?: string(name='Name'),
        ownerId?: string(name='OwnerId'),
        type?: string(name='Type'),
        UUID?: string(name='UUID'),
      }
    ](name='DbList'),
    totalCount?: long(name='TotalCount'),
  }(name='DatabaseInfo'),
  requestId?: string(name='RequestId'),
}

model ListMetaDBResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMetaDBResponseBody(name='body'),
}

async function listMetaDBWithOptions(request: ListMetaDBRequest, runtime: Util.RuntimeOptions): ListMetaDBResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMetaDB',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMetaDB(request: ListMetaDBRequest): ListMetaDBResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMetaDBWithOptions(request, runtime);
}

model ListMigrationsRequest {
  migrationType?: string(name='MigrationType'),
  owner?: string(name='Owner'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  projectId?: long(name='ProjectId'),
}

model ListMigrationsResponseBody = {
  data?: {
    migrations?: [ 
      {
        createTime?: long(name='CreateTime'),
        createUser?: string(name='CreateUser'),
        createUserName?: string(name='CreateUserName'),
        description?: string(name='Description'),
        downloadUrl?: string(name='DownloadUrl'),
        id?: long(name='Id'),
        message?: string(name='Message'),
        migrationType?: string(name='MigrationType'),
        name?: string(name='Name'),
        packageType?: string(name='PackageType'),
        projectId?: long(name='ProjectId'),
        status?: string(name='Status'),
        tenantId?: long(name='TenantId'),
        updateTime?: long(name='UpdateTime'),
        updateUser?: string(name='UpdateUser'),
        updateUserName?: string(name='UpdateUserName'),
      }
    ](name='Migrations'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListMigrationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMigrationsResponseBody(name='body'),
}

async function listMigrationsWithOptions(request: ListMigrationsRequest, runtime: Util.RuntimeOptions): ListMigrationsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.migrationType)) {
    body['MigrationType'] = request.migrationType;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListMigrations',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMigrations(request: ListMigrationsRequest): ListMigrationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMigrationsWithOptions(request, runtime);
}

model ListNodeIORequest {
  ioType?: string(name='IoType'),
  nodeId?: long(name='NodeId'),
  projectEnv?: string(name='ProjectEnv'),
}

model ListNodeIOResponseBody = {
  data?: [ 
    {
      data?: string(name='Data'),
      nodeId?: long(name='NodeId'),
      tableName?: string(name='TableName'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListNodeIOResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNodeIOResponseBody(name='body'),
}

async function listNodeIOWithOptions(request: ListNodeIORequest, runtime: Util.RuntimeOptions): ListNodeIOResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.ioType)) {
    body['IoType'] = request.ioType;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListNodeIO',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNodeIO(request: ListNodeIORequest): ListNodeIOResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodeIOWithOptions(request, runtime);
}

model ListNodeInputOrOutputRequest {
  ioType?: string(name='IoType'),
  nodeId?: long(name='NodeId'),
  projectEnv?: string(name='ProjectEnv'),
}

model ListNodeInputOrOutputResponseBody = {
  data?: [ 
    {
      data?: string(name='Data'),
      nodeId?: long(name='NodeId'),
      tableName?: string(name='TableName'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListNodeInputOrOutputResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNodeInputOrOutputResponseBody(name='body'),
}

async function listNodeInputOrOutputWithOptions(request: ListNodeInputOrOutputRequest, runtime: Util.RuntimeOptions): ListNodeInputOrOutputResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.ioType)) {
    body['IoType'] = request.ioType;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListNodeInputOrOutput',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNodeInputOrOutput(request: ListNodeInputOrOutputRequest): ListNodeInputOrOutputResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodeInputOrOutputWithOptions(request, runtime);
}

model ListNodesRequest {
  bizName?: string(name='BizName'),
  nodeName?: string(name='NodeName'),
  owner?: string(name='Owner'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  programType?: string(name='ProgramType'),
  projectEnv?: string(name='ProjectEnv'),
  projectId?: long(name='ProjectId'),
}

model ListNodesResponseBody = {
  data?: {
    nodes?: [ 
      {
        baselineId?: long(name='BaselineId'),
        businessId?: long(name='BusinessId'),
        connection?: string(name='Connection'),
        cronExpress?: string(name='CronExpress'),
        description?: string(name='Description'),
        dqcDescription?: string(name='DqcDescription'),
        dqcType?: int32(name='DqcType'),
        nodeId?: long(name='NodeId'),
        nodeName?: string(name='NodeName'),
        ownerId?: string(name='OwnerId'),
        paramValues?: string(name='ParamValues'),
        priority?: int32(name='Priority'),
        programType?: string(name='ProgramType'),
        projectId?: long(name='ProjectId'),
        relatedFlowId?: long(name='RelatedFlowId'),
        repeatInterval?: long(name='RepeatInterval'),
        repeatability?: boolean(name='Repeatability'),
        resGroupName?: string(name='ResGroupName'),
        schedulerType?: string(name='SchedulerType'),
      }
    ](name='Nodes'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNodesResponseBody(name='body'),
}

async function listNodesWithOptions(request: ListNodesRequest, runtime: Util.RuntimeOptions): ListNodesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizName)) {
    body['BizName'] = request.bizName;
  }
  if (!Util.isUnset(request.nodeName)) {
    body['NodeName'] = request.nodeName;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.programType)) {
    body['ProgramType'] = request.programType;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListNodes',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNodes(request: ListNodesRequest): ListNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodesWithOptions(request, runtime);
}

model ListNodesByBaselineRequest {
  baselineId?: long(name='BaselineId'),
}

model ListNodesByBaselineResponseBody = {
  data?: [ 
    {
      nodeId?: long(name='NodeId'),
      nodeName?: string(name='NodeName'),
      owner?: string(name='Owner'),
      projectId?: long(name='ProjectId'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ListNodesByBaselineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNodesByBaselineResponseBody(name='body'),
}

async function listNodesByBaselineWithOptions(request: ListNodesByBaselineRequest, runtime: Util.RuntimeOptions): ListNodesByBaselineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListNodesByBaseline',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNodesByBaseline(request: ListNodesByBaselineRequest): ListNodesByBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodesByBaselineWithOptions(request, runtime);
}

model ListNodesByOutputRequest {
  outputs?: string(name='Outputs'),
  projectEnv?: string(name='ProjectEnv'),
}

model ListNodesByOutputResponseBody = {
  data?: [ 
    {
      nodeList?: [ 
        {
          baselineId?: long(name='BaselineId'),
          connection?: string(name='Connection'),
          cronExpress?: string(name='CronExpress'),
          description?: string(name='Description'),
          dqcDescription?: string(name='DqcDescription'),
          dqcType?: int32(name='DqcType'),
          fileType?: string(name='FileType'),
          nodeId?: long(name='NodeId'),
          nodeName?: string(name='NodeName'),
          ownerId?: string(name='OwnerId'),
          paramValues?: string(name='ParamValues'),
          priority?: int32(name='Priority'),
          programType?: string(name='ProgramType'),
          projectId?: long(name='ProjectId'),
          relatedFlowId?: long(name='RelatedFlowId'),
          repeatInterval?: int32(name='RepeatInterval'),
          repeatability?: boolean(name='Repeatability'),
          resGroupName?: string(name='ResGroupName'),
          schedulerType?: string(name='SchedulerType'),
        }
      ](name='NodeList'),
      output?: string(name='Output'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListNodesByOutputResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNodesByOutputResponseBody(name='body'),
}

async function listNodesByOutputWithOptions(request: ListNodesByOutputRequest, runtime: Util.RuntimeOptions): ListNodesByOutputResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.outputs)) {
    body['Outputs'] = request.outputs;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListNodesByOutput',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNodesByOutput(request: ListNodesByOutputRequest): ListNodesByOutputResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodesByOutputWithOptions(request, runtime);
}

model ListPermissionApplyOrdersRequest {
  endTime?: long(name='EndTime'),
  engineType?: string(name='EngineType'),
  flowStatus?: int32(name='FlowStatus'),
  maxComputeProjectName?: string(name='MaxComputeProjectName'),
  orderType?: int32(name='OrderType'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  queryType?: int32(name='QueryType'),
  startTime?: long(name='StartTime'),
  tableName?: string(name='TableName'),
  workspaceId?: int32(name='WorkspaceId'),
}

model ListPermissionApplyOrdersResponseBody = {
  applyOrders?: {
    applyOrder?: [ 
      {
        applyBaseId?: string(name='ApplyBaseId'),
        applyTimestamp?: long(name='ApplyTimestamp'),
        approveContent?: {
          applyReason?: string(name='ApplyReason'),
          orderType?: int32(name='OrderType'),
          projectMeta?: {
            objectMetaList?: [ 
              {
                actions?: [ string ](name='Actions'),
                objectName?: string(name='ObjectName'),
              }
            ](name='ObjectMetaList'),
            workspaceName?: string(name='WorkspaceName'),
          }(name='ProjectMeta'),
        }(name='ApproveContent'),
        flowId?: string(name='FlowId'),
        flowStatus?: int32(name='FlowStatus'),
      }
    ](name='ApplyOrder'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='ApplyOrders'),
  requestId?: string(name='RequestId'),
}

model ListPermissionApplyOrdersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPermissionApplyOrdersResponseBody(name='body'),
}

async function listPermissionApplyOrdersWithOptions(request: ListPermissionApplyOrdersRequest, runtime: Util.RuntimeOptions): ListPermissionApplyOrdersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.engineType)) {
    query['EngineType'] = request.engineType;
  }
  if (!Util.isUnset(request.flowStatus)) {
    query['FlowStatus'] = request.flowStatus;
  }
  if (!Util.isUnset(request.maxComputeProjectName)) {
    query['MaxComputeProjectName'] = request.maxComputeProjectName;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryType)) {
    query['QueryType'] = request.queryType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPermissionApplyOrders',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPermissionApplyOrders(request: ListPermissionApplyOrdersRequest): ListPermissionApplyOrdersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPermissionApplyOrdersWithOptions(request, runtime);
}

model ListProgramTypeCountRequest {
  projectEnv?: string(name='ProjectEnv'),
  projectId?: long(name='ProjectId'),
}

model ListProgramTypeCountResponseBody = {
  programTypeAndCounts?: [ 
    {
      count?: int32(name='Count'),
      programType?: string(name='ProgramType'),
    }
  ](name='ProgramTypeAndCounts'),
  requestId?: string(name='RequestId'),
}

model ListProgramTypeCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProgramTypeCountResponseBody(name='body'),
}

async function listProgramTypeCountWithOptions(request: ListProgramTypeCountRequest, runtime: Util.RuntimeOptions): ListProgramTypeCountResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListProgramTypeCount',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProgramTypeCount(request: ListProgramTypeCountRequest): ListProgramTypeCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProgramTypeCountWithOptions(request, runtime);
}

model ListProjectIdsRequest {
  userId?: string(name='UserId'),
}

model ListProjectIdsResponseBody = {
  projectIds?: [ long ](name='ProjectIds'),
  requestId?: string(name='RequestId'),
}

model ListProjectIdsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProjectIdsResponseBody(name='body'),
}

async function listProjectIdsWithOptions(request: ListProjectIdsRequest, runtime: Util.RuntimeOptions): ListProjectIdsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProjectIds',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProjectIds(request: ListProjectIdsRequest): ListProjectIdsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectIdsWithOptions(request, runtime);
}

model ListProjectMembersRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  projectId?: long(name='ProjectId'),
}

model ListProjectMembersResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    projectMemberList?: [ 
      {
        nick?: string(name='Nick'),
        projectMemberId?: string(name='ProjectMemberId'),
        projectMemberName?: string(name='ProjectMemberName'),
        projectMemberType?: string(name='ProjectMemberType'),
        projectRoleList?: [ 
          {
            projectRoleCode?: string(name='ProjectRoleCode'),
            projectRoleId?: int32(name='ProjectRoleId'),
            projectRoleName?: string(name='ProjectRoleName'),
            projectRoleType?: string(name='ProjectRoleType'),
          }
        ](name='ProjectRoleList'),
        status?: string(name='Status'),
      }
    ](name='ProjectMemberList'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model ListProjectMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProjectMembersResponseBody(name='body'),
}

async function listProjectMembersWithOptions(request: ListProjectMembersRequest, runtime: Util.RuntimeOptions): ListProjectMembersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProjectMembers',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProjectMembers(request: ListProjectMembersRequest): ListProjectMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectMembersWithOptions(request, runtime);
}

model ListProjectRolesRequest {
  projectId?: long(name='ProjectId'),
}

model ListProjectRolesResponseBody = {
  projectRoleList?: [ 
    {
      projectRoleCode?: string(name='ProjectRoleCode'),
      projectRoleId?: int32(name='ProjectRoleId'),
      projectRoleName?: string(name='ProjectRoleName'),
      projectRoleType?: string(name='ProjectRoleType'),
    }
  ](name='ProjectRoleList'),
  requestId?: string(name='RequestId'),
}

model ListProjectRolesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProjectRolesResponseBody(name='body'),
}

async function listProjectRolesWithOptions(request: ListProjectRolesRequest, runtime: Util.RuntimeOptions): ListProjectRolesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProjectRoles',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProjectRoles(request: ListProjectRolesRequest): ListProjectRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectRolesWithOptions(request, runtime);
}

model ListProjectsRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
}

model ListProjectsShrinkRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId'),
  tagsShrink?: string(name='Tags'),
}

model ListProjectsResponseBody = {
  pageResult?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    projectList?: [ 
      {
        disableDevelopment?: boolean(name='DisableDevelopment'),
        isDefault?: int32(name='IsDefault'),
        projectDescription?: string(name='ProjectDescription'),
        projectId?: long(name='ProjectId'),
        projectIdentifier?: string(name='ProjectIdentifier'),
        projectName?: string(name='ProjectName'),
        projectOwnerBaseId?: string(name='ProjectOwnerBaseId'),
        projectStatus?: int32(name='ProjectStatus'),
        projectStatusCode?: string(name='ProjectStatusCode'),
        resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId'),
        tablePrivacyMode?: int32(name='TablePrivacyMode'),
        tags?: [ 
          {
            key?: string(name='Key'),
            value?: string(name='Value'),
          }
        ](name='Tags'),
        useProxyOdpsAccount?: boolean(name='UseProxyOdpsAccount'),
      }
    ](name='ProjectList'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageResult'),
  requestId?: string(name='RequestId'),
}

model ListProjectsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProjectsResponseBody(name='body'),
}

async function listProjectsWithOptions(tmpReq: ListProjectsRequest, runtime: Util.RuntimeOptions): ListProjectsResponse {
  Util.validateModel(tmpReq);
  var request = new ListProjectsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProjects',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProjects(request: ListProjectsRequest): ListProjectsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectsWithOptions(request, runtime);
}

model ListQualityResultsByEntityRequest {
  endDate?: string(name='EndDate'),
  entityId?: int32(name='EntityId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  projectName?: string(name='ProjectName'),
  startDate?: string(name='StartDate'),
}

model ListQualityResultsByEntityResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    ruleChecks?: [ 
      {
        actualExpression?: string(name='ActualExpression'),
        beginTime?: long(name='BeginTime'),
        bizDate?: long(name='BizDate'),
        blockType?: int32(name='BlockType'),
        checkResult?: int32(name='CheckResult'),
        checkResultStatus?: int32(name='CheckResultStatus'),
        checkerId?: int32(name='CheckerId'),
        checkerName?: string(name='CheckerName'),
        checkerType?: int32(name='CheckerType'),
        comment?: string(name='Comment'),
        criticalThreshold?: float(name='CriticalThreshold'),
        dateType?: string(name='DateType'),
        discreteCheck?: boolean(name='DiscreteCheck'),
        endTime?: long(name='EndTime'),
        entityId?: int32(name='EntityId'),
        expectValue?: float(name='ExpectValue'),
        externalId?: string(name='ExternalId'),
        externalType?: string(name='ExternalType'),
        fixedCheck?: boolean(name='FixedCheck'),
        id?: int32(name='Id'),
        isPrediction?: boolean(name='IsPrediction'),
        lowerValue?: float(name='LowerValue'),
        matchExpression?: string(name='MatchExpression'),
        methodName?: string(name='MethodName'),
        op?: string(name='Op'),
        projectName?: string(name='ProjectName'),
        property?: string(name='Property'),
        referenceValue?: [ 
          {
            bizDate?: string(name='BizDate'),
            discreteProperty?: string(name='DiscreteProperty'),
            singleCheckResult?: int32(name='SingleCheckResult'),
            threshold?: float(name='Threshold'),
            value?: float(name='Value'),
          }
        ](name='ReferenceValue'),
        resultString?: string(name='ResultString'),
        ruleId?: int32(name='RuleId'),
        ruleName?: string(name='RuleName'),
        sampleValue?: [ 
          {
            bizDate?: string(name='BizDate'),
            discreteProperty?: string(name='DiscreteProperty'),
            value?: float(name='Value'),
          }
        ](name='SampleValue'),
        tableName?: string(name='TableName'),
        taskId?: string(name='TaskId'),
        templateId?: int32(name='TemplateId'),
        templateName?: string(name='TemplateName'),
        timeCost?: string(name='TimeCost'),
        trend?: string(name='Trend'),
        upperValue?: float(name='UpperValue'),
        warningThreshold?: float(name='WarningThreshold'),
        whereCondition?: string(name='WhereCondition'),
      }
    ](name='RuleChecks'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListQualityResultsByEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQualityResultsByEntityResponseBody(name='body'),
}

async function listQualityResultsByEntityWithOptions(request: ListQualityResultsByEntityRequest, runtime: Util.RuntimeOptions): ListQualityResultsByEntityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListQualityResultsByEntity',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listQualityResultsByEntity(request: ListQualityResultsByEntityRequest): ListQualityResultsByEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return listQualityResultsByEntityWithOptions(request, runtime);
}

model ListQualityResultsByRuleRequest {
  endDate?: string(name='EndDate'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  projectName?: string(name='ProjectName'),
  ruleId?: int32(name='RuleId'),
  startDate?: string(name='StartDate'),
}

model ListQualityResultsByRuleResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    ruleChecks?: [ 
      {
        actualExpression?: string(name='ActualExpression'),
        beginTime?: long(name='BeginTime'),
        bizDate?: long(name='BizDate'),
        blockType?: int32(name='BlockType'),
        checkResult?: int32(name='CheckResult'),
        checkResultStatus?: int32(name='CheckResultStatus'),
        checkerId?: int32(name='CheckerId'),
        checkerName?: string(name='CheckerName'),
        checkerType?: int32(name='CheckerType'),
        comment?: string(name='Comment'),
        criticalThreshold?: float(name='CriticalThreshold'),
        dateType?: string(name='DateType'),
        discreteCheck?: boolean(name='DiscreteCheck'),
        endTime?: long(name='EndTime'),
        entityId?: int32(name='EntityId'),
        expectValue?: float(name='ExpectValue'),
        externalId?: string(name='ExternalId'),
        externalType?: string(name='ExternalType'),
        fixedCheck?: boolean(name='FixedCheck'),
        id?: int32(name='Id'),
        isPrediction?: boolean(name='IsPrediction'),
        lowerValue?: float(name='LowerValue'),
        matchExpression?: string(name='MatchExpression'),
        methodName?: string(name='MethodName'),
        op?: string(name='Op'),
        projectName?: string(name='ProjectName'),
        property?: string(name='Property'),
        referenceValue?: [ 
          {
            bizDate?: string(name='BizDate'),
            discreteProperty?: string(name='DiscreteProperty'),
            singleCheckResult?: int32(name='SingleCheckResult'),
            threshold?: float(name='Threshold'),
            value?: float(name='Value'),
          }
        ](name='ReferenceValue'),
        resultString?: string(name='ResultString'),
        ruleId?: int32(name='RuleId'),
        ruleName?: string(name='RuleName'),
        sampleValue?: [ 
          {
            bizDate?: string(name='BizDate'),
            discreteProperty?: string(name='DiscreteProperty'),
            value?: float(name='Value'),
          }
        ](name='SampleValue'),
        tableName?: string(name='TableName'),
        taskId?: string(name='TaskId'),
        templateId?: int32(name='TemplateId'),
        templateName?: string(name='TemplateName'),
        timeCost?: string(name='TimeCost'),
        trend?: string(name='Trend'),
        upperValue?: float(name='UpperValue'),
        warningThreshold?: float(name='WarningThreshold'),
        whereCondition?: string(name='WhereCondition'),
      }
    ](name='RuleChecks'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListQualityResultsByRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQualityResultsByRuleResponseBody(name='body'),
}

async function listQualityResultsByRuleWithOptions(request: ListQualityResultsByRuleRequest, runtime: Util.RuntimeOptions): ListQualityResultsByRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.ruleId)) {
    body['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListQualityResultsByRule',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listQualityResultsByRule(request: ListQualityResultsByRuleRequest): ListQualityResultsByRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return listQualityResultsByRuleWithOptions(request, runtime);
}

model ListQualityRulesRequest {
  entityId?: long(name='EntityId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  projectName?: string(name='ProjectName'),
}

model ListQualityRulesResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    rules?: [ 
      {
        blockType?: int32(name='BlockType'),
        checkerId?: int32(name='CheckerId'),
        comment?: string(name='Comment'),
        criticalThreshold?: string(name='CriticalThreshold'),
        entityId?: int32(name='EntityId'),
        expectValue?: string(name='ExpectValue'),
        fixCheck?: boolean(name='FixCheck'),
        historyCriticalThreshold?: string(name='HistoryCriticalThreshold'),
        historyWarningThreshold?: string(name='HistoryWarningThreshold'),
        id?: int32(name='Id'),
        matchExpression?: string(name='MatchExpression'),
        methodId?: int32(name='MethodId'),
        methodName?: string(name='MethodName'),
        onDuty?: string(name='OnDuty'),
        onDutyAccountName?: string(name='OnDutyAccountName'),
        projectName?: string(name='ProjectName'),
        property?: string(name='Property'),
        propertyKey?: string(name='PropertyKey'),
        ruleCheckerRelationId?: int32(name='RuleCheckerRelationId'),
        ruleName?: string(name='RuleName'),
        ruleType?: int32(name='RuleType'),
        tableName?: string(name='TableName'),
        templateId?: int32(name='TemplateId'),
        templateName?: string(name='TemplateName'),
        trend?: string(name='Trend'),
        warningThreshold?: string(name='WarningThreshold'),
      }
    ](name='Rules'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListQualityRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQualityRulesResponseBody(name='body'),
}

async function listQualityRulesWithOptions(request: ListQualityRulesRequest, runtime: Util.RuntimeOptions): ListQualityRulesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListQualityRules',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listQualityRules(request: ListQualityRulesRequest): ListQualityRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listQualityRulesWithOptions(request, runtime);
}

model ListRefDISyncTasksRequest {
  datasourceName?: string(name='DatasourceName'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  projectId?: long(name='ProjectId'),
  refType?: string(name='RefType'),
  taskType?: string(name='TaskType'),
}

model ListRefDISyncTasksResponseBody = {
  data?: {
    DISyncTasks?: [ 
      {
        diDestinationDatasource?: string(name='DiDestinationDatasource'),
        diSourceDatasource?: string(name='DiSourceDatasource'),
        nodeId?: long(name='NodeId'),
        nodeName?: string(name='NodeName'),
        taskType?: string(name='TaskType'),
      }
    ](name='DISyncTasks'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListRefDISyncTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRefDISyncTasksResponseBody(name='body'),
}

async function listRefDISyncTasksWithOptions(request: ListRefDISyncTasksRequest, runtime: Util.RuntimeOptions): ListRefDISyncTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasourceName)) {
    query['DatasourceName'] = request.datasourceName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.refType)) {
    query['RefType'] = request.refType;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRefDISyncTasks',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRefDISyncTasks(request: ListRefDISyncTasksRequest): ListRefDISyncTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRefDISyncTasksWithOptions(request, runtime);
}

model ListRemindsRequest {
  alertTarget?: string(name='AlertTarget'),
  founder?: string(name='Founder'),
  nodeId?: long(name='NodeId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  remindTypes?: string(name='RemindTypes'),
  searchText?: string(name='SearchText'),
}

model ListRemindsResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    reminds?: [ 
      {
        alertMethods?: [ string ](name='AlertMethods'),
        alertTargets?: [ string ](name='AlertTargets'),
        alertUnit?: string(name='AlertUnit'),
        baselineIds?: [ long ](name='BaselineIds'),
        bizProcessIds?: [ long ](name='BizProcessIds'),
        dndEnd?: string(name='DndEnd'),
        dndStart?: string(name='DndStart'),
        founder?: string(name='Founder'),
        nodeIds?: [ long ](name='NodeIds'),
        projectIds?: [ long ](name='ProjectIds'),
        remindId?: long(name='RemindId'),
        remindName?: string(name='RemindName'),
        remindType?: string(name='RemindType'),
        remindUnit?: string(name='RemindUnit'),
        useflag?: boolean(name='Useflag'),
      }
    ](name='Reminds'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListRemindsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRemindsResponseBody(name='body'),
}

async function listRemindsWithOptions(request: ListRemindsRequest, runtime: Util.RuntimeOptions): ListRemindsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertTarget)) {
    body['AlertTarget'] = request.alertTarget;
  }
  if (!Util.isUnset(request.founder)) {
    body['Founder'] = request.founder;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.remindTypes)) {
    body['RemindTypes'] = request.remindTypes;
  }
  if (!Util.isUnset(request.searchText)) {
    body['SearchText'] = request.searchText;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListReminds',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listReminds(request: ListRemindsRequest): ListRemindsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRemindsWithOptions(request, runtime);
}

model ListResourceGroupsRequest {
  bizExtKey?: string(name='BizExtKey'),
  keyword?: string(name='Keyword'),
  resourceGroupType?: int32(name='ResourceGroupType'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
  typeNames?: string(name='TypeNames'),
}

model ListResourceGroupsShrinkRequest {
  bizExtKey?: string(name='BizExtKey'),
  keyword?: string(name='Keyword'),
  resourceGroupType?: int32(name='ResourceGroupType'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId'),
  tagsShrink?: string(name='Tags'),
  typeNames?: string(name='TypeNames'),
}

model ListResourceGroupsResponseBody = {
  data?: [ 
    {
      bizExtKey?: string(name='BizExtKey'),
      cluster?: string(name='Cluster'),
      createTime?: string(name='CreateTime'),
      enableKp?: boolean(name='EnableKp'),
      id?: long(name='Id'),
      identifier?: string(name='Identifier'),
      isDefault?: boolean(name='IsDefault'),
      mode?: string(name='Mode'),
      name?: string(name='Name'),
      resourceGroupType?: string(name='ResourceGroupType'),
      resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId'),
      sequence?: int32(name='Sequence'),
      specs?: map[string]any(name='Specs'),
      status?: int32(name='Status'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
      tenantId?: long(name='TenantId'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListResourceGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListResourceGroupsResponseBody(name='body'),
}

async function listResourceGroupsWithOptions(tmpReq: ListResourceGroupsRequest, runtime: Util.RuntimeOptions): ListResourceGroupsResponse {
  Util.validateModel(tmpReq);
  var request = new ListResourceGroupsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.bizExtKey)) {
    query['BizExtKey'] = request.bizExtKey;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.resourceGroupType)) {
    query['ResourceGroupType'] = request.resourceGroupType;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  if (!Util.isUnset(request.typeNames)) {
    query['TypeNames'] = request.typeNames;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListResourceGroups',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listResourceGroups(request: ListResourceGroupsRequest): ListResourceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResourceGroupsWithOptions(request, runtime);
}

model ListShiftPersonnelsRequest {
  beginTime?: long(name='BeginTime'),
  endTime?: long(name='EndTime'),
  shiftPersonUID?: string(name='ShiftPersonUID'),
  shiftScheduleIdentifier?: string(name='ShiftScheduleIdentifier'),
  userType?: string(name='UserType'),
}

model ListShiftPersonnelsResponseBody = {
  paging?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    shiftPersons?: [ 
      {
        beginTime?: long(name='BeginTime'),
        endTime?: long(name='EndTime'),
        shiftPersonName?: string(name='ShiftPersonName'),
        shiftPersonUID?: string(name='ShiftPersonUID'),
      }
    ](name='ShiftPersons'),
    totalCount?: int32(name='TotalCount'),
  }(name='Paging'),
  requestId?: string(name='RequestId'),
}

model ListShiftPersonnelsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListShiftPersonnelsResponseBody(name='body'),
}

async function listShiftPersonnelsWithOptions(request: ListShiftPersonnelsRequest, runtime: Util.RuntimeOptions): ListShiftPersonnelsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.beginTime)) {
    body['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.shiftPersonUID)) {
    body['ShiftPersonUID'] = request.shiftPersonUID;
  }
  if (!Util.isUnset(request.shiftScheduleIdentifier)) {
    body['ShiftScheduleIdentifier'] = request.shiftScheduleIdentifier;
  }
  if (!Util.isUnset(request.userType)) {
    body['UserType'] = request.userType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListShiftPersonnels',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listShiftPersonnels(request: ListShiftPersonnelsRequest): ListShiftPersonnelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listShiftPersonnelsWithOptions(request, runtime);
}

model ListShiftSchedulesRequest {
  owner?: string(name='Owner'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  shiftScheduleName?: string(name='ShiftScheduleName'),
}

model ListShiftSchedulesResponseBody = {
  paging?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    shiftSchedules?: [ 
      {
        shiftScheduleIdentifier?: string(name='ShiftScheduleIdentifier'),
        shiftScheduleName?: string(name='ShiftScheduleName'),
      }
    ](name='ShiftSchedules'),
    totalCount?: int32(name='TotalCount'),
  }(name='Paging'),
  requestId?: string(name='RequestId'),
}

model ListShiftSchedulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListShiftSchedulesResponseBody(name='body'),
}

async function listShiftSchedulesWithOptions(request: ListShiftSchedulesRequest, runtime: Util.RuntimeOptions): ListShiftSchedulesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.shiftScheduleName)) {
    body['ShiftScheduleName'] = request.shiftScheduleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListShiftSchedules',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listShiftSchedules(request: ListShiftSchedulesRequest): ListShiftSchedulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listShiftSchedulesWithOptions(request, runtime);
}

model ListSuccessInstanceAmountRequest {
  projectId?: long(name='ProjectId'),
}

model ListSuccessInstanceAmountResponseBody = {
  instanceStatusTrend?: {
    avgTrend?: [ 
      {
        count?: int32(name='Count'),
        timePoint?: string(name='TimePoint'),
      }
    ](name='AvgTrend'),
    todayTrend?: [ 
      {
        count?: int32(name='Count'),
        timePoint?: string(name='TimePoint'),
      }
    ](name='TodayTrend'),
    yesterdayTrend?: [ 
      {
        count?: int32(name='Count'),
        timePoint?: string(name='TimePoint'),
      }
    ](name='YesterdayTrend'),
  }(name='InstanceStatusTrend'),
  requestId?: string(name='RequestId'),
}

model ListSuccessInstanceAmountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSuccessInstanceAmountResponseBody(name='body'),
}

async function listSuccessInstanceAmountWithOptions(request: ListSuccessInstanceAmountRequest, runtime: Util.RuntimeOptions): ListSuccessInstanceAmountResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListSuccessInstanceAmount',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSuccessInstanceAmount(request: ListSuccessInstanceAmountRequest): ListSuccessInstanceAmountResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSuccessInstanceAmountWithOptions(request, runtime);
}

model ListTableLevelRequest {
  levelType?: int32(name='LevelType'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  projectId?: long(name='ProjectId'),
}

model ListTableLevelResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  tableLevelInfo?: {
    levelList?: [ 
      {
        description?: string(name='Description'),
        levelId?: long(name='LevelId'),
        levelType?: int32(name='LevelType'),
        name?: string(name='Name'),
        projectId?: long(name='ProjectId'),
      }
    ](name='LevelList'),
    totalCount?: long(name='TotalCount'),
  }(name='TableLevelInfo'),
}

model ListTableLevelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTableLevelResponseBody(name='body'),
}

async function listTableLevelWithOptions(request: ListTableLevelRequest, runtime: Util.RuntimeOptions): ListTableLevelResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTableLevel',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTableLevel(request: ListTableLevelRequest): ListTableLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTableLevelWithOptions(request, runtime);
}

model ListTableThemeRequest {
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  parentId?: long(name='ParentId'),
  projectId?: long(name='ProjectId'),
}

model ListTableThemeResponseBody = {
  data?: {
    themeList?: [ 
      {
        createTimeStamp?: long(name='CreateTimeStamp'),
        creator?: string(name='Creator'),
        level?: int32(name='Level'),
        name?: string(name='Name'),
        parentId?: long(name='ParentId'),
        projectId?: long(name='ProjectId'),
        themeId?: long(name='ThemeId'),
      }
    ](name='ThemeList'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListTableThemeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTableThemeResponseBody(name='body'),
}

async function listTableThemeWithOptions(request: ListTableThemeRequest, runtime: Util.RuntimeOptions): ListTableThemeResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTableTheme',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTableTheme(request: ListTableThemeRequest): ListTableThemeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTableThemeWithOptions(request, runtime);
}

model ListTopicsRequest {
  beginTime?: string(name='BeginTime'),
  endTime?: string(name='EndTime'),
  instanceId?: long(name='InstanceId'),
  nodeId?: long(name='NodeId'),
  owner?: string(name='Owner'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  topicStatuses?: string(name='TopicStatuses'),
  topicTypes?: string(name='TopicTypes'),
}

model ListTopicsResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    topics?: [ 
      {
        addTime?: long(name='AddTime'),
        fixTime?: long(name='FixTime'),
        happenTime?: long(name='HappenTime'),
        instanceId?: long(name='InstanceId'),
        nodeId?: long(name='NodeId'),
        nodeName?: string(name='NodeName'),
        nodeOwner?: string(name='NodeOwner'),
        projectId?: long(name='ProjectId'),
        topicId?: long(name='TopicId'),
        topicName?: string(name='TopicName'),
        topicStatus?: string(name='TopicStatus'),
        topicType?: string(name='TopicType'),
      }
    ](name='Topics'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListTopicsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTopicsResponseBody(name='body'),
}

async function listTopicsWithOptions(request: ListTopicsRequest, runtime: Util.RuntimeOptions): ListTopicsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.beginTime)) {
    body['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.topicStatuses)) {
    body['TopicStatuses'] = request.topicStatuses;
  }
  if (!Util.isUnset(request.topicTypes)) {
    body['TopicTypes'] = request.topicTypes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListTopics',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTopics(request: ListTopicsRequest): ListTopicsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTopicsWithOptions(request, runtime);
}

model OfflineNodeRequest {
  nodeId?: long(name='NodeId'),
  projectId?: long(name='ProjectId'),
}

model OfflineNodeResponseBody = {
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model OfflineNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OfflineNodeResponseBody(name='body'),
}

async function offlineNodeWithOptions(request: OfflineNodeRequest, runtime: Util.RuntimeOptions): OfflineNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'OfflineNode',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function offlineNode(request: OfflineNodeRequest): OfflineNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return offlineNodeWithOptions(request, runtime);
}

model PublishDataServiceApiRequest {
  apiId?: long(name='ApiId'),
  projectId?: long(name='ProjectId'),
  tenantId?: long(name='TenantId'),
}

model PublishDataServiceApiResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PublishDataServiceApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublishDataServiceApiResponseBody(name='body'),
}

async function publishDataServiceApiWithOptions(request: PublishDataServiceApiRequest, runtime: Util.RuntimeOptions): PublishDataServiceApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PublishDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function publishDataServiceApi(request: PublishDataServiceApiRequest): PublishDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishDataServiceApiWithOptions(request, runtime);
}

model QueryDISyncTaskConfigProcessResultRequest {
  asyncProcessId?: long(name='AsyncProcessId'),
  projectId?: long(name='ProjectId'),
  taskType?: string(name='TaskType'),
}

model QueryDISyncTaskConfigProcessResultResponseBody = {
  data?: {
    message?: string(name='Message'),
    status?: string(name='Status'),
    taskContent?: string(name='TaskContent'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDISyncTaskConfigProcessResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDISyncTaskConfigProcessResultResponseBody(name='body'),
}

async function queryDISyncTaskConfigProcessResultWithOptions(request: QueryDISyncTaskConfigProcessResultRequest, runtime: Util.RuntimeOptions): QueryDISyncTaskConfigProcessResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asyncProcessId)) {
    query['AsyncProcessId'] = request.asyncProcessId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDISyncTaskConfigProcessResult',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDISyncTaskConfigProcessResult(request: QueryDISyncTaskConfigProcessResultRequest): QueryDISyncTaskConfigProcessResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDISyncTaskConfigProcessResultWithOptions(request, runtime);
}

model QueryPublicModelEngineRequest {
  projectId?: string(name='ProjectId'),
  text?: string(name='Text'),
}

model QueryPublicModelEngineResponseBody = {
  requestId?: string(name='RequestId'),
  returnValue?: [  map[string]any ](name='ReturnValue'),
}

model QueryPublicModelEngineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPublicModelEngineResponseBody(name='body'),
}

async function queryPublicModelEngineWithOptions(request: QueryPublicModelEngineRequest, runtime: Util.RuntimeOptions): QueryPublicModelEngineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryPublicModelEngine',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPublicModelEngine(request: QueryPublicModelEngineRequest): QueryPublicModelEngineResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPublicModelEngineWithOptions(request, runtime);
}

model RemoveProjectMemberFromRoleRequest {
  projectId?: long(name='ProjectId'),
  roleCode?: string(name='RoleCode'),
  userId?: string(name='UserId'),
}

model RemoveProjectMemberFromRoleResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveProjectMemberFromRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveProjectMemberFromRoleResponseBody(name='body'),
}

async function removeProjectMemberFromRoleWithOptions(request: RemoveProjectMemberFromRoleRequest, runtime: Util.RuntimeOptions): RemoveProjectMemberFromRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.roleCode)) {
    query['RoleCode'] = request.roleCode;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveProjectMemberFromRole',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeProjectMemberFromRole(request: RemoveProjectMemberFromRoleRequest): RemoveProjectMemberFromRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeProjectMemberFromRoleWithOptions(request, runtime);
}

model RestartInstanceRequest {
  instanceId?: long(name='InstanceId'),
  projectEnv?: string(name='ProjectEnv'),
}

model RestartInstanceResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RestartInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RestartInstanceResponseBody(name='body'),
}

async function restartInstanceWithOptions(request: RestartInstanceRequest, runtime: Util.RuntimeOptions): RestartInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RestartInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function restartInstance(request: RestartInstanceRequest): RestartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartInstanceWithOptions(request, runtime);
}

model ResumeInstanceRequest {
  instanceId?: long(name='InstanceId'),
  projectEnv?: string(name='ProjectEnv'),
}

model ResumeInstanceResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ResumeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResumeInstanceResponseBody(name='body'),
}

async function resumeInstanceWithOptions(request: ResumeInstanceRequest, runtime: Util.RuntimeOptions): ResumeInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ResumeInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resumeInstance(request: ResumeInstanceRequest): ResumeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return resumeInstanceWithOptions(request, runtime);
}

model RevokeColumnPermissionRequest {
  columns?: string(name='Columns'),
  maxComputeProjectName?: string(name='MaxComputeProjectName'),
  revokeUserId?: string(name='RevokeUserId'),
  revokeUserName?: string(name='RevokeUserName'),
  tableName?: string(name='TableName'),
  workspaceId?: long(name='WorkspaceId'),
}

model RevokeColumnPermissionResponseBody = {
  requestId?: string(name='RequestId'),
  revokeSuccess?: boolean(name='RevokeSuccess'),
}

model RevokeColumnPermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevokeColumnPermissionResponseBody(name='body'),
}

async function revokeColumnPermissionWithOptions(request: RevokeColumnPermissionRequest, runtime: Util.RuntimeOptions): RevokeColumnPermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.columns)) {
    query['Columns'] = request.columns;
  }
  if (!Util.isUnset(request.maxComputeProjectName)) {
    query['MaxComputeProjectName'] = request.maxComputeProjectName;
  }
  if (!Util.isUnset(request.revokeUserId)) {
    query['RevokeUserId'] = request.revokeUserId;
  }
  if (!Util.isUnset(request.revokeUserName)) {
    query['RevokeUserName'] = request.revokeUserName;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeColumnPermission',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function revokeColumnPermission(request: RevokeColumnPermissionRequest): RevokeColumnPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeColumnPermissionWithOptions(request, runtime);
}

model RevokeTablePermissionRequest {
  actions?: string(name='Actions'),
  maxComputeProjectName?: string(name='MaxComputeProjectName'),
  revokeUserId?: string(name='RevokeUserId'),
  revokeUserName?: string(name='RevokeUserName'),
  tableName?: string(name='TableName'),
  workspaceId?: long(name='WorkspaceId'),
}

model RevokeTablePermissionResponseBody = {
  requestId?: string(name='RequestId'),
  revokeSuccess?: boolean(name='RevokeSuccess'),
}

model RevokeTablePermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevokeTablePermissionResponseBody(name='body'),
}

async function revokeTablePermissionWithOptions(request: RevokeTablePermissionRequest, runtime: Util.RuntimeOptions): RevokeTablePermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actions)) {
    query['Actions'] = request.actions;
  }
  if (!Util.isUnset(request.maxComputeProjectName)) {
    query['MaxComputeProjectName'] = request.maxComputeProjectName;
  }
  if (!Util.isUnset(request.revokeUserId)) {
    query['RevokeUserId'] = request.revokeUserId;
  }
  if (!Util.isUnset(request.revokeUserName)) {
    query['RevokeUserName'] = request.revokeUserName;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeTablePermission',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function revokeTablePermission(request: RevokeTablePermissionRequest): RevokeTablePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeTablePermissionWithOptions(request, runtime);
}

model RunCycleDagNodesRequest {
  bizBeginTime?: string(name='BizBeginTime'),
  bizEndTime?: string(name='BizEndTime'),
  endBizDate?: string(name='EndBizDate'),
  excludeNodeIds?: string(name='ExcludeNodeIds'),
  includeNodeIds?: string(name='IncludeNodeIds'),
  name?: string(name='Name'),
  nodeParams?: string(name='NodeParams'),
  parallelism?: boolean(name='Parallelism'),
  projectEnv?: string(name='ProjectEnv'),
  rootNodeId?: long(name='RootNodeId'),
  startBizDate?: string(name='StartBizDate'),
  startFutureInstanceImmediately?: boolean(name='StartFutureInstanceImmediately'),
}

model RunCycleDagNodesResponseBody = {
  data?: [ long ](name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RunCycleDagNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RunCycleDagNodesResponseBody(name='body'),
}

async function runCycleDagNodesWithOptions(request: RunCycleDagNodesRequest, runtime: Util.RuntimeOptions): RunCycleDagNodesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizBeginTime)) {
    body['BizBeginTime'] = request.bizBeginTime;
  }
  if (!Util.isUnset(request.bizEndTime)) {
    body['BizEndTime'] = request.bizEndTime;
  }
  if (!Util.isUnset(request.endBizDate)) {
    body['EndBizDate'] = request.endBizDate;
  }
  if (!Util.isUnset(request.excludeNodeIds)) {
    body['ExcludeNodeIds'] = request.excludeNodeIds;
  }
  if (!Util.isUnset(request.includeNodeIds)) {
    body['IncludeNodeIds'] = request.includeNodeIds;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.nodeParams)) {
    body['NodeParams'] = request.nodeParams;
  }
  if (!Util.isUnset(request.parallelism)) {
    body['Parallelism'] = request.parallelism;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.rootNodeId)) {
    body['RootNodeId'] = request.rootNodeId;
  }
  if (!Util.isUnset(request.startBizDate)) {
    body['StartBizDate'] = request.startBizDate;
  }
  if (!Util.isUnset(request.startFutureInstanceImmediately)) {
    body['StartFutureInstanceImmediately'] = request.startFutureInstanceImmediately;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunCycleDagNodes',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function runCycleDagNodes(request: RunCycleDagNodesRequest): RunCycleDagNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return runCycleDagNodesWithOptions(request, runtime);
}

model RunManualDagNodesRequest {
  bizDate?: string(name='BizDate'),
  dagParameters?: string(name='DagParameters'),
  excludeNodeIds?: string(name='ExcludeNodeIds'),
  flowName?: string(name='FlowName'),
  includeNodeIds?: string(name='IncludeNodeIds'),
  nodeParameters?: string(name='NodeParameters'),
  projectEnv?: string(name='ProjectEnv'),
  projectId?: long(name='ProjectId'),
  projectName?: string(name='ProjectName'),
}

model RunManualDagNodesResponseBody = {
  dagId?: long(name='DagId'),
  requestId?: string(name='RequestId'),
}

model RunManualDagNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RunManualDagNodesResponseBody(name='body'),
}

async function runManualDagNodesWithOptions(request: RunManualDagNodesRequest, runtime: Util.RuntimeOptions): RunManualDagNodesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizDate)) {
    body['BizDate'] = request.bizDate;
  }
  if (!Util.isUnset(request.dagParameters)) {
    body['DagParameters'] = request.dagParameters;
  }
  if (!Util.isUnset(request.excludeNodeIds)) {
    body['ExcludeNodeIds'] = request.excludeNodeIds;
  }
  if (!Util.isUnset(request.flowName)) {
    body['FlowName'] = request.flowName;
  }
  if (!Util.isUnset(request.includeNodeIds)) {
    body['IncludeNodeIds'] = request.includeNodeIds;
  }
  if (!Util.isUnset(request.nodeParameters)) {
    body['NodeParameters'] = request.nodeParameters;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunManualDagNodes',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function runManualDagNodes(request: RunManualDagNodesRequest): RunManualDagNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return runManualDagNodesWithOptions(request, runtime);
}

model RunSmokeTestRequest {
  bizdate?: string(name='Bizdate'),
  name?: string(name='Name'),
  nodeId?: long(name='NodeId'),
  nodeParams?: string(name='NodeParams'),
  projectEnv?: string(name='ProjectEnv'),
}

model RunSmokeTestResponseBody = {
  data?: long(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RunSmokeTestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RunSmokeTestResponseBody(name='body'),
}

async function runSmokeTestWithOptions(request: RunSmokeTestRequest, runtime: Util.RuntimeOptions): RunSmokeTestResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.nodeParams)) {
    body['NodeParams'] = request.nodeParams;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunSmokeTest',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function runSmokeTest(request: RunSmokeTestRequest): RunSmokeTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return runSmokeTestWithOptions(request, runtime);
}

model RunTriggerNodeRequest {
  appId?: long(name='AppId'),
  bizDate?: long(name='BizDate'),
  cycleTime?: long(name='CycleTime'),
  nodeId?: long(name='NodeId'),
}

model RunTriggerNodeResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RunTriggerNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RunTriggerNodeResponseBody(name='body'),
}

async function runTriggerNodeWithOptions(request: RunTriggerNodeRequest, runtime: Util.RuntimeOptions): RunTriggerNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.bizDate)) {
    body['BizDate'] = request.bizDate;
  }
  if (!Util.isUnset(request.cycleTime)) {
    body['CycleTime'] = request.cycleTime;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunTriggerNode',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function runTriggerNode(request: RunTriggerNodeRequest): RunTriggerNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return runTriggerNodeWithOptions(request, runtime);
}

model ScanSensitiveDataRequest {
  data?: string(name='Data'),
}

model ScanSensitiveDataResponseBody = {
  requestId?: string(name='RequestId'),
  sensitives?: map[string]any(name='Sensitives'),
}

model ScanSensitiveDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ScanSensitiveDataResponseBody(name='body'),
}

async function scanSensitiveDataWithOptions(request: ScanSensitiveDataRequest, runtime: Util.RuntimeOptions): ScanSensitiveDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ScanSensitiveData',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function scanSensitiveData(request: ScanSensitiveDataRequest): ScanSensitiveDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return scanSensitiveDataWithOptions(request, runtime);
}

model SearchMetaTablesRequest {
  appGuid?: string(name='AppGuid'),
  clusterId?: string(name='ClusterId'),
  dataSourceType?: string(name='DataSourceType'),
  entityType?: int32(name='EntityType'),
  keyword?: string(name='Keyword'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  schema?: string(name='Schema'),
}

model SearchMetaTablesResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        clusterId?: string(name='ClusterId'),
        databaseName?: string(name='DatabaseName'),
        entityType?: int32(name='EntityType'),
        envType?: int32(name='EnvType'),
        ownerId?: string(name='OwnerId'),
        projectId?: long(name='ProjectId'),
        projectName?: string(name='ProjectName'),
        schema?: string(name='Schema'),
        tableGuid?: string(name='TableGuid'),
        tableName?: string(name='TableName'),
        tenantId?: long(name='TenantId'),
      }
    ](name='DataEntityList'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SearchMetaTablesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchMetaTablesResponseBody(name='body'),
}

async function searchMetaTablesWithOptions(request: SearchMetaTablesRequest, runtime: Util.RuntimeOptions): SearchMetaTablesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appGuid)) {
    query['AppGuid'] = request.appGuid;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.entityType)) {
    query['EntityType'] = request.entityType;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchMetaTables',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchMetaTables(request: SearchMetaTablesRequest): SearchMetaTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchMetaTablesWithOptions(request, runtime);
}

model SearchNodesByOutputRequest {
  outputs?: string(name='Outputs'),
  projectEnv?: string(name='ProjectEnv'),
}

model SearchNodesByOutputResponseBody = {
  data?: map[string]any(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SearchNodesByOutputResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchNodesByOutputResponseBody(name='body'),
}

async function searchNodesByOutputWithOptions(request: SearchNodesByOutputRequest, runtime: Util.RuntimeOptions): SearchNodesByOutputResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.outputs)) {
    body['Outputs'] = request.outputs;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SearchNodesByOutput',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchNodesByOutput(request: SearchNodesByOutputRequest): SearchNodesByOutputResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchNodesByOutputWithOptions(request, runtime);
}

model SetDataSourceShareRequest {
  datasourceName?: string(name='DatasourceName'),
  envType?: string(name='EnvType'),
  projectId?: long(name='ProjectId'),
  projectPermissions?: string(name='ProjectPermissions'),
  userPermissions?: string(name='UserPermissions'),
}

model SetDataSourceShareResponseBody = {
  data?: {
    message?: string(name='Message'),
    status?: string(name='Status'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetDataSourceShareResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDataSourceShareResponseBody(name='body'),
}

async function setDataSourceShareWithOptions(request: SetDataSourceShareRequest, runtime: Util.RuntimeOptions): SetDataSourceShareResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasourceName)) {
    query['DatasourceName'] = request.datasourceName;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectPermissions)) {
    query['ProjectPermissions'] = request.projectPermissions;
  }
  if (!Util.isUnset(request.userPermissions)) {
    query['UserPermissions'] = request.userPermissions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDataSourceShare',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDataSourceShare(request: SetDataSourceShareRequest): SetDataSourceShareResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDataSourceShareWithOptions(request, runtime);
}

model SetSuccessInstanceRequest {
  instanceId?: long(name='InstanceId'),
  projectEnv?: string(name='ProjectEnv'),
}

model SetSuccessInstanceResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetSuccessInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetSuccessInstanceResponseBody(name='body'),
}

async function setSuccessInstanceWithOptions(request: SetSuccessInstanceRequest, runtime: Util.RuntimeOptions): SetSuccessInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SetSuccessInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setSuccessInstance(request: SetSuccessInstanceRequest): SetSuccessInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return setSuccessInstanceWithOptions(request, runtime);
}

model StartDISyncInstanceRequest {
  fileId?: long(name='FileId'),
  projectId?: long(name='ProjectId'),
  startParam?: string(name='StartParam'),
  taskType?: string(name='TaskType'),
}

model StartDISyncInstanceResponseBody = {
  data?: {
    message?: string(name='Message'),
    status?: string(name='Status'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StartDISyncInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartDISyncInstanceResponseBody(name='body'),
}

async function startDISyncInstanceWithOptions(request: StartDISyncInstanceRequest, runtime: Util.RuntimeOptions): StartDISyncInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.startParam)) {
    query['StartParam'] = request.startParam;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartDISyncInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startDISyncInstance(request: StartDISyncInstanceRequest): StartDISyncInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDISyncInstanceWithOptions(request, runtime);
}

model StartMigrationRequest {
  migrationId?: long(name='MigrationId'),
  projectId?: long(name='ProjectId'),
}

model StartMigrationResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StartMigrationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartMigrationResponseBody(name='body'),
}

async function startMigrationWithOptions(request: StartMigrationRequest, runtime: Util.RuntimeOptions): StartMigrationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.migrationId)) {
    body['MigrationId'] = request.migrationId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StartMigration',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startMigration(request: StartMigrationRequest): StartMigrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return startMigrationWithOptions(request, runtime);
}

model StopDISyncInstanceRequest {
  fileId?: long(name='FileId'),
  projectId?: long(name='ProjectId'),
  taskType?: string(name='TaskType'),
}

model StopDISyncInstanceResponseBody = {
  data?: {
    message?: string(name='Message'),
    status?: string(name='Status'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StopDISyncInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopDISyncInstanceResponseBody(name='body'),
}

async function stopDISyncInstanceWithOptions(request: StopDISyncInstanceRequest, runtime: Util.RuntimeOptions): StopDISyncInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopDISyncInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopDISyncInstance(request: StopDISyncInstanceRequest): StopDISyncInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDISyncInstanceWithOptions(request, runtime);
}

model StopInstanceRequest {
  instanceId?: long(name='InstanceId'),
  projectEnv?: string(name='ProjectEnv'),
}

model StopInstanceResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StopInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopInstanceResponseBody(name='body'),
}

async function stopInstanceWithOptions(request: StopInstanceRequest, runtime: Util.RuntimeOptions): StopInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StopInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopInstanceWithOptions(request, runtime);
}

model SubmitFileRequest {
  comment?: string(name='Comment'),
  fileId?: long(name='FileId'),
  projectId?: long(name='ProjectId'),
  projectIdentifier?: string(name='ProjectIdentifier'),
  skipAllDeployFileExtensions?: boolean(name='SkipAllDeployFileExtensions'),
}

model SubmitFileResponseBody = {
  data?: long(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitFileResponseBody(name='body'),
}

async function submitFileWithOptions(request: SubmitFileRequest, runtime: Util.RuntimeOptions): SubmitFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.skipAllDeployFileExtensions)) {
    body['SkipAllDeployFileExtensions'] = request.skipAllDeployFileExtensions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitFile(request: SubmitFileRequest): SubmitFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitFileWithOptions(request, runtime);
}

model SuspendInstanceRequest {
  instanceId?: long(name='InstanceId'),
  projectEnv?: string(name='ProjectEnv'),
}

model SuspendInstanceResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SuspendInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SuspendInstanceResponseBody(name='body'),
}

async function suspendInstanceWithOptions(request: SuspendInstanceRequest, runtime: Util.RuntimeOptions): SuspendInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SuspendInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function suspendInstance(request: SuspendInstanceRequest): SuspendInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return suspendInstanceWithOptions(request, runtime);
}

model TerminateDISyncInstanceRequest {
  fileId?: long(name='FileId'),
  projectId?: long(name='ProjectId'),
  taskType?: string(name='TaskType'),
}

model TerminateDISyncInstanceResponseBody = {
  data?: {
    message?: string(name='Message'),
    status?: string(name='Status'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model TerminateDISyncInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TerminateDISyncInstanceResponseBody(name='body'),
}

async function terminateDISyncInstanceWithOptions(request: TerminateDISyncInstanceRequest, runtime: Util.RuntimeOptions): TerminateDISyncInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TerminateDISyncInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function terminateDISyncInstance(request: TerminateDISyncInstanceRequest): TerminateDISyncInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return terminateDISyncInstanceWithOptions(request, runtime);
}

model TestDataServiceApiRequest {
  apiId?: long(name='ApiId'),
  bodyContent?: string(name='BodyContent'),
  bodyParams?: [ 
    {
      paramKey?: string(name='ParamKey'),
      paramValue?: string(name='ParamValue'),
    }
  ](name='BodyParams'),
  headParams?: [ 
    {
      paramKey?: string(name='ParamKey'),
      paramValue?: string(name='ParamValue'),
    }
  ](name='HeadParams'),
  pathParams?: [ 
    {
      paramKey?: string(name='ParamKey'),
      paramValue?: string(name='ParamValue'),
    }
  ](name='PathParams'),
  queryParam?: [ 
    {
      paramKey?: string(name='ParamKey'),
      paramValue?: string(name='ParamValue'),
    }
  ](name='QueryParam'),
}

model TestDataServiceApiResponseBody = {
  data?: {
    testId?: string(name='TestId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model TestDataServiceApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TestDataServiceApiResponseBody(name='body'),
}

async function testDataServiceApiWithOptions(request: TestDataServiceApiRequest, runtime: Util.RuntimeOptions): TestDataServiceApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.bodyContent)) {
    body['BodyContent'] = request.bodyContent;
  }
  if (!Util.isUnset(request.bodyParams)) {
    body['BodyParams'] = request.bodyParams;
  }
  if (!Util.isUnset(request.headParams)) {
    body['HeadParams'] = request.headParams;
  }
  if (!Util.isUnset(request.pathParams)) {
    body['PathParams'] = request.pathParams;
  }
  if (!Util.isUnset(request.queryParam)) {
    body['QueryParam'] = request.queryParam;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TestDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function testDataServiceApi(request: TestDataServiceApiRequest): TestDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return testDataServiceApiWithOptions(request, runtime);
}

model TestNetworkConnectionRequest {
  datasourceName?: string(name='DatasourceName'),
  envType?: string(name='EnvType'),
  projectId?: long(name='ProjectId'),
  resourceGroup?: string(name='ResourceGroup'),
}

model TestNetworkConnectionResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskList?: {
    connectMessage?: string(name='ConnectMessage'),
    connectStatus?: boolean(name='ConnectStatus'),
  }(name='TaskList'),
}

model TestNetworkConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TestNetworkConnectionResponseBody(name='body'),
}

async function testNetworkConnectionWithOptions(request: TestNetworkConnectionRequest, runtime: Util.RuntimeOptions): TestNetworkConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasourceName)) {
    query['DatasourceName'] = request.datasourceName;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.resourceGroup)) {
    query['ResourceGroup'] = request.resourceGroup;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TestNetworkConnection',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function testNetworkConnection(request: TestNetworkConnectionRequest): TestNetworkConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return testNetworkConnectionWithOptions(request, runtime);
}

model TopTenElapsedTimeInstanceRequest {
  projectId?: long(name='ProjectId'),
}

model TopTenElapsedTimeInstanceResponseBody = {
  instanceConsumeTimeRank?: {
    consumeTimeRank?: [ 
      {
        businessDate?: long(name='BusinessDate'),
        consumed?: long(name='Consumed'),
        instanceId?: long(name='InstanceId'),
        nodeId?: long(name='NodeId'),
        nodeName?: string(name='NodeName'),
        owner?: string(name='Owner'),
        programType?: int32(name='ProgramType'),
      }
    ](name='ConsumeTimeRank'),
    updateTime?: long(name='UpdateTime'),
  }(name='InstanceConsumeTimeRank'),
  requestId?: string(name='RequestId'),
}

model TopTenElapsedTimeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TopTenElapsedTimeInstanceResponseBody(name='body'),
}

async function topTenElapsedTimeInstanceWithOptions(request: TopTenElapsedTimeInstanceRequest, runtime: Util.RuntimeOptions): TopTenElapsedTimeInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TopTenElapsedTimeInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function topTenElapsedTimeInstance(request: TopTenElapsedTimeInstanceRequest): TopTenElapsedTimeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return topTenElapsedTimeInstanceWithOptions(request, runtime);
}

model TopTenErrorTimesInstanceRequest {
  projectId?: long(name='ProjectId'),
}

model TopTenErrorTimesInstanceResponseBody = {
  instanceErrorRank?: {
    errorRank?: [ 
      {
        count?: int32(name='Count'),
        nodeId?: long(name='NodeId'),
        nodeName?: string(name='NodeName'),
        owner?: string(name='Owner'),
        programType?: int32(name='ProgramType'),
        projectId?: long(name='ProjectId'),
      }
    ](name='ErrorRank'),
    updateTime?: long(name='UpdateTime'),
  }(name='InstanceErrorRank'),
  requestId?: string(name='RequestId'),
}

model TopTenErrorTimesInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TopTenErrorTimesInstanceResponseBody(name='body'),
}

async function topTenErrorTimesInstanceWithOptions(request: TopTenErrorTimesInstanceRequest, runtime: Util.RuntimeOptions): TopTenErrorTimesInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TopTenErrorTimesInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function topTenErrorTimesInstance(request: TopTenErrorTimesInstanceRequest): TopTenErrorTimesInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return topTenErrorTimesInstanceWithOptions(request, runtime);
}

model UpdateBaselineRequest {
  alertEnabled?: boolean(name='AlertEnabled'),
  alertMarginThreshold?: int32(name='AlertMarginThreshold'),
  alertSettings?: [ 
    {
      alertInterval?: int32(name='AlertInterval'),
      alertMaximum?: int32(name='AlertMaximum'),
      alertMethods?: [ string ](name='AlertMethods'),
      alertRecipient?: string(name='AlertRecipient'),
      alertRecipientType?: string(name='AlertRecipientType'),
      alertType?: string(name='AlertType'),
      baselineAlertEnabled?: boolean(name='BaselineAlertEnabled'),
      dingRobots?: [ 
        {
          atAll?: boolean(name='AtAll'),
          webUrl?: string(name='WebUrl'),
        }
      ](name='DingRobots'),
      silenceEndTime?: string(name='SilenceEndTime'),
      silenceStartTime?: string(name='SilenceStartTime'),
      topicTypes?: [ string ](name='TopicTypes'),
      webhooks?: [ string ](name='Webhooks'),
    }
  ](name='AlertSettings'),
  baselineId?: long(name='BaselineId'),
  baselineName?: string(name='BaselineName'),
  baselineType?: string(name='BaselineType'),
  enabled?: boolean(name='Enabled'),
  overtimeSettings?: [ 
    {
      cycle?: int32(name='Cycle'),
      time?: string(name='Time'),
    }
  ](name='OvertimeSettings'),
  owner?: string(name='Owner'),
  priority?: int32(name='Priority'),
  projectId?: long(name='ProjectId'),
  removeTaskIds?: string(name='RemoveTaskIds'),
  taskIds?: string(name='TaskIds'),
}

model UpdateBaselineShrinkRequest {
  alertEnabled?: boolean(name='AlertEnabled'),
  alertMarginThreshold?: int32(name='AlertMarginThreshold'),
  alertSettingsShrink?: string(name='AlertSettings'),
  baselineId?: long(name='BaselineId'),
  baselineName?: string(name='BaselineName'),
  baselineType?: string(name='BaselineType'),
  enabled?: boolean(name='Enabled'),
  overtimeSettingsShrink?: string(name='OvertimeSettings'),
  owner?: string(name='Owner'),
  priority?: int32(name='Priority'),
  projectId?: long(name='ProjectId'),
  removeTaskIds?: string(name='RemoveTaskIds'),
  taskIds?: string(name='TaskIds'),
}

model UpdateBaselineResponseBody = {
  data?: boolean(name='Data'),
  dynamicErrorCode?: string(name='DynamicErrorCode'),
  dynamicErrorMessage?: string(name='DynamicErrorMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateBaselineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateBaselineResponseBody(name='body'),
}

async function updateBaselineWithOptions(tmpReq: UpdateBaselineRequest, runtime: Util.RuntimeOptions): UpdateBaselineResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateBaselineShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.alertSettings)) {
    request.alertSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.alertSettings, 'AlertSettings', 'json');
  }
  if (!Util.isUnset(tmpReq.overtimeSettings)) {
    request.overtimeSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.overtimeSettings, 'OvertimeSettings', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertEnabled)) {
    body['AlertEnabled'] = request.alertEnabled;
  }
  if (!Util.isUnset(request.alertMarginThreshold)) {
    body['AlertMarginThreshold'] = request.alertMarginThreshold;
  }
  if (!Util.isUnset(request.alertSettingsShrink)) {
    body['AlertSettings'] = request.alertSettingsShrink;
  }
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.baselineName)) {
    body['BaselineName'] = request.baselineName;
  }
  if (!Util.isUnset(request.baselineType)) {
    body['BaselineType'] = request.baselineType;
  }
  if (!Util.isUnset(request.enabled)) {
    body['Enabled'] = request.enabled;
  }
  if (!Util.isUnset(request.overtimeSettingsShrink)) {
    body['OvertimeSettings'] = request.overtimeSettingsShrink;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.removeTaskIds)) {
    body['RemoveTaskIds'] = request.removeTaskIds;
  }
  if (!Util.isUnset(request.taskIds)) {
    body['TaskIds'] = request.taskIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateBaseline',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateBaseline(request: UpdateBaselineRequest): UpdateBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateBaselineWithOptions(request, runtime);
}

model UpdateBusinessRequest {
  businessId?: long(name='BusinessId'),
  businessName?: string(name='BusinessName'),
  description?: string(name='Description'),
  owner?: string(name='Owner'),
  projectId?: long(name='ProjectId'),
  projectIdentifier?: string(name='ProjectIdentifier'),
}

model UpdateBusinessResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateBusinessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateBusinessResponseBody(name='body'),
}

async function updateBusinessWithOptions(request: UpdateBusinessRequest, runtime: Util.RuntimeOptions): UpdateBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessId)) {
    body['BusinessId'] = request.businessId;
  }
  if (!Util.isUnset(request.businessName)) {
    body['BusinessName'] = request.businessName;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateBusiness',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateBusiness(request: UpdateBusinessRequest): UpdateBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateBusinessWithOptions(request, runtime);
}

model UpdateConnectionRequest {
  connectionId?: long(name='ConnectionId'),
  content?: string(name='Content'),
  description?: string(name='Description'),
  envType?: int32(name='EnvType'),
  status?: string(name='Status'),
}

model UpdateConnectionResponseBody = {
  data?: boolean(name='Data'),
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateConnectionResponseBody(name='body'),
}

async function updateConnectionWithOptions(request: UpdateConnectionRequest, runtime: Util.RuntimeOptions): UpdateConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionId)) {
    query['ConnectionId'] = request.connectionId;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateConnection',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'PUT',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateConnection(request: UpdateConnectionRequest): UpdateConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateConnectionWithOptions(request, runtime);
}

model UpdateDIProjectConfigRequest {
  destinationType?: string(name='DestinationType'),
  projectConfig?: string(name='ProjectConfig'),
  projectId?: long(name='ProjectId'),
  sourceType?: string(name='SourceType'),
}

model UpdateDIProjectConfigResponseBody = {
  data?: {
    status?: string(name='Status'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateDIProjectConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDIProjectConfigResponseBody(name='body'),
}

async function updateDIProjectConfigWithOptions(request: UpdateDIProjectConfigRequest, runtime: Util.RuntimeOptions): UpdateDIProjectConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.projectConfig)) {
    query['ProjectConfig'] = request.projectConfig;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDIProjectConfig',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDIProjectConfig(request: UpdateDIProjectConfigRequest): UpdateDIProjectConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDIProjectConfigWithOptions(request, runtime);
}

model UpdateDISyncTaskRequest {
  fileId?: long(name='FileId'),
  projectId?: long(name='ProjectId'),
  taskContent?: string(name='TaskContent'),
  taskParam?: string(name='TaskParam'),
  taskType?: string(name='TaskType'),
}

model UpdateDISyncTaskResponseBody = {
  data?: {
    message?: string(name='Message'),
    status?: string(name='Status'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateDISyncTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDISyncTaskResponseBody(name='body'),
}

async function updateDISyncTaskWithOptions(request: UpdateDISyncTaskRequest, runtime: Util.RuntimeOptions): UpdateDISyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskContent)) {
    query['TaskContent'] = request.taskContent;
  }
  if (!Util.isUnset(request.taskParam)) {
    query['TaskParam'] = request.taskParam;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDISyncTask',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDISyncTask(request: UpdateDISyncTaskRequest): UpdateDISyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDISyncTaskWithOptions(request, runtime);
}

model UpdateDataServiceApiRequest {
  apiDescription?: string(name='ApiDescription'),
  apiId?: long(name='ApiId'),
  apiPath?: string(name='ApiPath'),
  projectId?: long(name='ProjectId'),
  protocols?: string(name='Protocols'),
  registrationDetails?: string(name='RegistrationDetails'),
  requestMethod?: int32(name='RequestMethod'),
  responseContentType?: int32(name='ResponseContentType'),
  scriptDetails?: string(name='ScriptDetails'),
  tenantId?: long(name='TenantId'),
  timeout?: int32(name='Timeout'),
  visibleRange?: int32(name='VisibleRange'),
  wizardDetails?: string(name='WizardDetails'),
}

model UpdateDataServiceApiResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateDataServiceApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDataServiceApiResponseBody(name='body'),
}

async function updateDataServiceApiWithOptions(request: UpdateDataServiceApiRequest, runtime: Util.RuntimeOptions): UpdateDataServiceApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiDescription)) {
    body['ApiDescription'] = request.apiDescription;
  }
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.apiPath)) {
    body['ApiPath'] = request.apiPath;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.protocols)) {
    body['Protocols'] = request.protocols;
  }
  if (!Util.isUnset(request.registrationDetails)) {
    body['RegistrationDetails'] = request.registrationDetails;
  }
  if (!Util.isUnset(request.requestMethod)) {
    body['RequestMethod'] = request.requestMethod;
  }
  if (!Util.isUnset(request.responseContentType)) {
    body['ResponseContentType'] = request.responseContentType;
  }
  if (!Util.isUnset(request.scriptDetails)) {
    body['ScriptDetails'] = request.scriptDetails;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.timeout)) {
    body['Timeout'] = request.timeout;
  }
  if (!Util.isUnset(request.visibleRange)) {
    body['VisibleRange'] = request.visibleRange;
  }
  if (!Util.isUnset(request.wizardDetails)) {
    body['WizardDetails'] = request.wizardDetails;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDataServiceApi(request: UpdateDataServiceApiRequest): UpdateDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDataServiceApiWithOptions(request, runtime);
}

model UpdateDataSourceRequest {
  content?: string(name='Content'),
  dataSourceId?: long(name='DataSourceId'),
  description?: string(name='Description'),
  envType?: int32(name='EnvType'),
  status?: string(name='Status'),
}

model UpdateDataSourceResponseBody = {
  data?: boolean(name='Data'),
  httpStatusCode?: string(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDataSourceResponseBody(name='body'),
}

async function updateDataSourceWithOptions(request: UpdateDataSourceRequest, runtime: Util.RuntimeOptions): UpdateDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.dataSourceId)) {
    query['DataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDataSource',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'PUT',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDataSource(request: UpdateDataSourceRequest): UpdateDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDataSourceWithOptions(request, runtime);
}

model UpdateFileRequest {
  advancedSettings?: string(name='AdvancedSettings'),
  autoParsing?: boolean(name='AutoParsing'),
  autoRerunIntervalMillis?: int32(name='AutoRerunIntervalMillis'),
  autoRerunTimes?: int32(name='AutoRerunTimes'),
  connectionName?: string(name='ConnectionName'),
  content?: string(name='Content'),
  cronExpress?: string(name='CronExpress'),
  cycleType?: string(name='CycleType'),
  dependentNodeIdList?: string(name='DependentNodeIdList'),
  dependentType?: string(name='DependentType'),
  endEffectDate?: long(name='EndEffectDate'),
  fileDescription?: string(name='FileDescription'),
  fileFolderPath?: string(name='FileFolderPath'),
  fileId?: long(name='FileId'),
  fileName?: string(name='FileName'),
  inputList?: string(name='InputList'),
  inputParameters?: string(name='InputParameters'),
  outputList?: string(name='OutputList'),
  outputParameters?: string(name='OutputParameters'),
  owner?: string(name='Owner'),
  paraValue?: string(name='ParaValue'),
  projectId?: long(name='ProjectId'),
  projectIdentifier?: string(name='ProjectIdentifier'),
  rerunMode?: string(name='RerunMode'),
  resourceGroupIdentifier?: string(name='ResourceGroupIdentifier'),
  schedulerType?: string(name='SchedulerType'),
  startEffectDate?: long(name='StartEffectDate'),
  startImmediately?: boolean(name='StartImmediately'),
  stop?: boolean(name='Stop'),
}

model UpdateFileResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFileResponseBody(name='body'),
}

async function updateFileWithOptions(request: UpdateFileRequest, runtime: Util.RuntimeOptions): UpdateFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.advancedSettings)) {
    body['AdvancedSettings'] = request.advancedSettings;
  }
  if (!Util.isUnset(request.autoParsing)) {
    body['AutoParsing'] = request.autoParsing;
  }
  if (!Util.isUnset(request.autoRerunIntervalMillis)) {
    body['AutoRerunIntervalMillis'] = request.autoRerunIntervalMillis;
  }
  if (!Util.isUnset(request.autoRerunTimes)) {
    body['AutoRerunTimes'] = request.autoRerunTimes;
  }
  if (!Util.isUnset(request.connectionName)) {
    body['ConnectionName'] = request.connectionName;
  }
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.cronExpress)) {
    body['CronExpress'] = request.cronExpress;
  }
  if (!Util.isUnset(request.cycleType)) {
    body['CycleType'] = request.cycleType;
  }
  if (!Util.isUnset(request.dependentNodeIdList)) {
    body['DependentNodeIdList'] = request.dependentNodeIdList;
  }
  if (!Util.isUnset(request.dependentType)) {
    body['DependentType'] = request.dependentType;
  }
  if (!Util.isUnset(request.endEffectDate)) {
    body['EndEffectDate'] = request.endEffectDate;
  }
  if (!Util.isUnset(request.fileDescription)) {
    body['FileDescription'] = request.fileDescription;
  }
  if (!Util.isUnset(request.fileFolderPath)) {
    body['FileFolderPath'] = request.fileFolderPath;
  }
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.fileName)) {
    body['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.inputList)) {
    body['InputList'] = request.inputList;
  }
  if (!Util.isUnset(request.inputParameters)) {
    body['InputParameters'] = request.inputParameters;
  }
  if (!Util.isUnset(request.outputList)) {
    body['OutputList'] = request.outputList;
  }
  if (!Util.isUnset(request.outputParameters)) {
    body['OutputParameters'] = request.outputParameters;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.paraValue)) {
    body['ParaValue'] = request.paraValue;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.rerunMode)) {
    body['RerunMode'] = request.rerunMode;
  }
  if (!Util.isUnset(request.resourceGroupIdentifier)) {
    body['ResourceGroupIdentifier'] = request.resourceGroupIdentifier;
  }
  if (!Util.isUnset(request.schedulerType)) {
    body['SchedulerType'] = request.schedulerType;
  }
  if (!Util.isUnset(request.startEffectDate)) {
    body['StartEffectDate'] = request.startEffectDate;
  }
  if (!Util.isUnset(request.startImmediately)) {
    body['StartImmediately'] = request.startImmediately;
  }
  if (!Util.isUnset(request.stop)) {
    body['Stop'] = request.stop;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateFile(request: UpdateFileRequest): UpdateFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFileWithOptions(request, runtime);
}

model UpdateFolderRequest {
  folderId?: string(name='FolderId'),
  folderName?: string(name='FolderName'),
  projectId?: long(name='ProjectId'),
  projectIdentifier?: string(name='ProjectIdentifier'),
}

model UpdateFolderResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateFolderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFolderResponseBody(name='body'),
}

async function updateFolderWithOptions(request: UpdateFolderRequest, runtime: Util.RuntimeOptions): UpdateFolderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderId)) {
    body['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.folderName)) {
    body['FolderName'] = request.folderName;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFolder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateFolder(request: UpdateFolderRequest): UpdateFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFolderWithOptions(request, runtime);
}

model UpdateIDEEventResultRequest {
  checkResult?: string(name='CheckResult'),
  checkResultTip?: string(name='CheckResultTip'),
  extensionCode?: string(name='ExtensionCode'),
  messageId?: string(name='MessageId'),
}

model UpdateIDEEventResultResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateIDEEventResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateIDEEventResultResponseBody(name='body'),
}

async function updateIDEEventResultWithOptions(request: UpdateIDEEventResultRequest, runtime: Util.RuntimeOptions): UpdateIDEEventResultResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.checkResult)) {
    body['CheckResult'] = request.checkResult;
  }
  if (!Util.isUnset(request.checkResultTip)) {
    body['CheckResultTip'] = request.checkResultTip;
  }
  if (!Util.isUnset(request.extensionCode)) {
    body['ExtensionCode'] = request.extensionCode;
  }
  if (!Util.isUnset(request.messageId)) {
    body['MessageId'] = request.messageId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateIDEEventResult',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateIDEEventResult(request: UpdateIDEEventResultRequest): UpdateIDEEventResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateIDEEventResultWithOptions(request, runtime);
}

model UpdateMetaCategoryRequest {
  categoryId?: long(name='CategoryId'),
  comment?: string(name='Comment'),
  name?: string(name='Name'),
}

model UpdateMetaCategoryResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateMetaCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMetaCategoryResponseBody(name='body'),
}

async function updateMetaCategoryWithOptions(request: UpdateMetaCategoryRequest, runtime: Util.RuntimeOptions): UpdateMetaCategoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.categoryId)) {
    body['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMetaCategory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMetaCategory(request: UpdateMetaCategoryRequest): UpdateMetaCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMetaCategoryWithOptions(request, runtime);
}

model UpdateMetaTableRequest {
  addedLabels?: string(name='AddedLabels'),
  caption?: string(name='Caption'),
  categoryId?: long(name='CategoryId'),
  envType?: int32(name='EnvType'),
  newOwnerId?: string(name='NewOwnerId'),
  projectId?: long(name='ProjectId'),
  removedLabels?: string(name='RemovedLabels'),
  schema?: string(name='Schema'),
  tableGuid?: string(name='TableGuid'),
  tableName?: string(name='TableName'),
  visibility?: int32(name='Visibility'),
}

model UpdateMetaTableResponseBody = {
  requestId?: string(name='RequestId'),
  updateResult?: boolean(name='UpdateResult'),
}

model UpdateMetaTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMetaTableResponseBody(name='body'),
}

async function updateMetaTableWithOptions(request: UpdateMetaTableRequest, runtime: Util.RuntimeOptions): UpdateMetaTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.caption)) {
    query['Caption'] = request.caption;
  }
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.newOwnerId)) {
    query['NewOwnerId'] = request.newOwnerId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.visibility)) {
    query['Visibility'] = request.visibility;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.addedLabels)) {
    body['AddedLabels'] = request.addedLabels;
  }
  if (!Util.isUnset(request.removedLabels)) {
    body['RemovedLabels'] = request.removedLabels;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMetaTable',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMetaTable(request: UpdateMetaTableRequest): UpdateMetaTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMetaTableWithOptions(request, runtime);
}

model UpdateMetaTableIntroWikiRequest {
  content?: string(name='Content'),
  tableGuid?: string(name='TableGuid'),
}

model UpdateMetaTableIntroWikiResponseBody = {
  requestId?: string(name='RequestId'),
  updateResult?: boolean(name='UpdateResult'),
}

model UpdateMetaTableIntroWikiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMetaTableIntroWikiResponseBody(name='body'),
}

async function updateMetaTableIntroWikiWithOptions(request: UpdateMetaTableIntroWikiRequest, runtime: Util.RuntimeOptions): UpdateMetaTableIntroWikiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMetaTableIntroWiki',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMetaTableIntroWiki(request: UpdateMetaTableIntroWikiRequest): UpdateMetaTableIntroWikiResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMetaTableIntroWikiWithOptions(request, runtime);
}

model UpdateNodeOwnerRequest {
  nodeId?: long(name='NodeId'),
  projectEnv?: string(name='ProjectEnv'),
  userId?: string(name='UserId'),
}

model UpdateNodeOwnerResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateNodeOwnerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateNodeOwnerResponseBody(name='body'),
}

async function updateNodeOwnerWithOptions(request: UpdateNodeOwnerRequest, runtime: Util.RuntimeOptions): UpdateNodeOwnerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateNodeOwner',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateNodeOwner(request: UpdateNodeOwnerRequest): UpdateNodeOwnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNodeOwnerWithOptions(request, runtime);
}

model UpdateNodeRunModeRequest {
  nodeId?: long(name='NodeId'),
  projectEnv?: string(name='ProjectEnv'),
  schedulerType?: int32(name='SchedulerType'),
}

model UpdateNodeRunModeResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateNodeRunModeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateNodeRunModeResponseBody(name='body'),
}

async function updateNodeRunModeWithOptions(request: UpdateNodeRunModeRequest, runtime: Util.RuntimeOptions): UpdateNodeRunModeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.schedulerType)) {
    body['SchedulerType'] = request.schedulerType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateNodeRunMode',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateNodeRunMode(request: UpdateNodeRunModeRequest): UpdateNodeRunModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNodeRunModeWithOptions(request, runtime);
}

model UpdateQualityFollowerRequest {
  alarmMode?: int32(name='AlarmMode'),
  follower?: string(name='Follower'),
  followerId?: long(name='FollowerId'),
  projectName?: string(name='ProjectName'),
}

model UpdateQualityFollowerResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateQualityFollowerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateQualityFollowerResponseBody(name='body'),
}

async function updateQualityFollowerWithOptions(request: UpdateQualityFollowerRequest, runtime: Util.RuntimeOptions): UpdateQualityFollowerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alarmMode)) {
    body['AlarmMode'] = request.alarmMode;
  }
  if (!Util.isUnset(request.follower)) {
    body['Follower'] = request.follower;
  }
  if (!Util.isUnset(request.followerId)) {
    body['FollowerId'] = request.followerId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateQualityFollower',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateQualityFollower(request: UpdateQualityFollowerRequest): UpdateQualityFollowerResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateQualityFollowerWithOptions(request, runtime);
}

model UpdateQualityRuleRequest {
  blockType?: int32(name='BlockType'),
  checker?: int32(name='Checker'),
  comment?: string(name='Comment'),
  criticalThreshold?: string(name='CriticalThreshold'),
  entityId?: long(name='EntityId'),
  expectValue?: string(name='ExpectValue'),
  id?: long(name='Id'),
  methodName?: string(name='MethodName'),
  openSwitch?: boolean(name='OpenSwitch'),
  operator?: string(name='Operator'),
  predictType?: int32(name='PredictType'),
  projectName?: string(name='ProjectName'),
  property?: string(name='Property'),
  propertyType?: string(name='PropertyType'),
  ruleName?: string(name='RuleName'),
  ruleType?: int32(name='RuleType'),
  templateId?: int32(name='TemplateId'),
  trend?: string(name='Trend'),
  warningThreshold?: string(name='WarningThreshold'),
  whereCondition?: string(name='WhereCondition'),
}

model UpdateQualityRuleResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateQualityRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateQualityRuleResponseBody(name='body'),
}

async function updateQualityRuleWithOptions(request: UpdateQualityRuleRequest, runtime: Util.RuntimeOptions): UpdateQualityRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.blockType)) {
    body['BlockType'] = request.blockType;
  }
  if (!Util.isUnset(request.checker)) {
    body['Checker'] = request.checker;
  }
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.criticalThreshold)) {
    body['CriticalThreshold'] = request.criticalThreshold;
  }
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.expectValue)) {
    body['ExpectValue'] = request.expectValue;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.methodName)) {
    body['MethodName'] = request.methodName;
  }
  if (!Util.isUnset(request.openSwitch)) {
    body['OpenSwitch'] = request.openSwitch;
  }
  if (!Util.isUnset(request.operator)) {
    body['Operator'] = request.operator;
  }
  if (!Util.isUnset(request.predictType)) {
    body['PredictType'] = request.predictType;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.property)) {
    body['Property'] = request.property;
  }
  if (!Util.isUnset(request.propertyType)) {
    body['PropertyType'] = request.propertyType;
  }
  if (!Util.isUnset(request.ruleName)) {
    body['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.ruleType)) {
    body['RuleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.trend)) {
    body['Trend'] = request.trend;
  }
  if (!Util.isUnset(request.warningThreshold)) {
    body['WarningThreshold'] = request.warningThreshold;
  }
  if (!Util.isUnset(request.whereCondition)) {
    body['WhereCondition'] = request.whereCondition;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateQualityRule',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateQualityRule(request: UpdateQualityRuleRequest): UpdateQualityRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateQualityRuleWithOptions(request, runtime);
}

model UpdateRemindRequest {
  alertInterval?: int32(name='AlertInterval'),
  alertMethods?: string(name='AlertMethods'),
  alertTargets?: string(name='AlertTargets'),
  alertUnit?: string(name='AlertUnit'),
  baselineIds?: string(name='BaselineIds'),
  bizProcessIds?: string(name='BizProcessIds'),
  detail?: string(name='Detail'),
  dndEnd?: string(name='DndEnd'),
  maxAlertTimes?: int32(name='MaxAlertTimes'),
  nodeIds?: string(name='NodeIds'),
  projectId?: long(name='ProjectId'),
  remindId?: long(name='RemindId'),
  remindName?: string(name='RemindName'),
  remindType?: string(name='RemindType'),
  remindUnit?: string(name='RemindUnit'),
  robotUrls?: string(name='RobotUrls'),
  useFlag?: boolean(name='UseFlag'),
  webhooks?: string(name='Webhooks'),
}

model UpdateRemindResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateRemindResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateRemindResponseBody(name='body'),
}

async function updateRemindWithOptions(request: UpdateRemindRequest, runtime: Util.RuntimeOptions): UpdateRemindResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertInterval)) {
    body['AlertInterval'] = request.alertInterval;
  }
  if (!Util.isUnset(request.alertMethods)) {
    body['AlertMethods'] = request.alertMethods;
  }
  if (!Util.isUnset(request.alertTargets)) {
    body['AlertTargets'] = request.alertTargets;
  }
  if (!Util.isUnset(request.alertUnit)) {
    body['AlertUnit'] = request.alertUnit;
  }
  if (!Util.isUnset(request.baselineIds)) {
    body['BaselineIds'] = request.baselineIds;
  }
  if (!Util.isUnset(request.bizProcessIds)) {
    body['BizProcessIds'] = request.bizProcessIds;
  }
  if (!Util.isUnset(request.detail)) {
    body['Detail'] = request.detail;
  }
  if (!Util.isUnset(request.dndEnd)) {
    body['DndEnd'] = request.dndEnd;
  }
  if (!Util.isUnset(request.maxAlertTimes)) {
    body['MaxAlertTimes'] = request.maxAlertTimes;
  }
  if (!Util.isUnset(request.nodeIds)) {
    body['NodeIds'] = request.nodeIds;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.remindId)) {
    body['RemindId'] = request.remindId;
  }
  if (!Util.isUnset(request.remindName)) {
    body['RemindName'] = request.remindName;
  }
  if (!Util.isUnset(request.remindType)) {
    body['RemindType'] = request.remindType;
  }
  if (!Util.isUnset(request.remindUnit)) {
    body['RemindUnit'] = request.remindUnit;
  }
  if (!Util.isUnset(request.robotUrls)) {
    body['RobotUrls'] = request.robotUrls;
  }
  if (!Util.isUnset(request.useFlag)) {
    body['UseFlag'] = request.useFlag;
  }
  if (!Util.isUnset(request.webhooks)) {
    body['Webhooks'] = request.webhooks;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRemind',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateRemind(request: UpdateRemindRequest): UpdateRemindResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRemindWithOptions(request, runtime);
}

model UpdateTableRequest {
  appGuid?: string(name='AppGuid'),
  categoryId?: long(name='CategoryId'),
  columns?: [ 
    {
      columnName?: string(name='ColumnName'),
      columnNameCn?: string(name='ColumnNameCn'),
      columnType?: string(name='ColumnType'),
      comment?: string(name='Comment'),
      isPartitionCol?: boolean(name='IsPartitionCol'),
      length?: int32(name='Length'),
      seqNumber?: int32(name='SeqNumber'),
    }
  ](name='Columns'),
  comment?: string(name='Comment'),
  createIfNotExists?: boolean(name='CreateIfNotExists'),
  endpoint?: string(name='Endpoint'),
  envType?: int32(name='EnvType'),
  externalTableType?: string(name='ExternalTableType'),
  hasPart?: int32(name='HasPart'),
  isView?: int32(name='IsView'),
  lifeCycle?: int32(name='LifeCycle'),
  location?: string(name='Location'),
  logicalLevelId?: long(name='LogicalLevelId'),
  ownerId?: string(name='OwnerId'),
  physicsLevelId?: long(name='PhysicsLevelId'),
  projectId?: long(name='ProjectId'),
  schema?: string(name='Schema'),
  tableName?: string(name='TableName'),
  themes?: [ 
    {
      themeId?: long(name='ThemeId'),
      themeLevel?: int32(name='ThemeLevel'),
    }
  ](name='Themes'),
  visibility?: int32(name='Visibility'),
}

model UpdateTableResponseBody = {
  requestId?: string(name='RequestId'),
  taskInfo?: {
    content?: string(name='Content'),
    nextTaskId?: string(name='NextTaskId'),
    status?: string(name='Status'),
    taskId?: string(name='TaskId'),
  }(name='TaskInfo'),
}

model UpdateTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTableResponseBody(name='body'),
}

async function updateTableWithOptions(request: UpdateTableRequest, runtime: Util.RuntimeOptions): UpdateTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appGuid)) {
    query['AppGuid'] = request.appGuid;
  }
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.createIfNotExists)) {
    query['CreateIfNotExists'] = request.createIfNotExists;
  }
  if (!Util.isUnset(request.externalTableType)) {
    query['ExternalTableType'] = request.externalTableType;
  }
  if (!Util.isUnset(request.hasPart)) {
    query['HasPart'] = request.hasPart;
  }
  if (!Util.isUnset(request.isView)) {
    query['IsView'] = request.isView;
  }
  if (!Util.isUnset(request.lifeCycle)) {
    query['LifeCycle'] = request.lifeCycle;
  }
  if (!Util.isUnset(request.location)) {
    query['Location'] = request.location;
  }
  if (!Util.isUnset(request.logicalLevelId)) {
    query['LogicalLevelId'] = request.logicalLevelId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.physicsLevelId)) {
    query['PhysicsLevelId'] = request.physicsLevelId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.visibility)) {
    query['Visibility'] = request.visibility;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.columns)) {
    body['Columns'] = request.columns;
  }
  if (!Util.isUnset(request.endpoint)) {
    body['Endpoint'] = request.endpoint;
  }
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.themes)) {
    body['Themes'] = request.themes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTable',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTable(request: UpdateTableRequest): UpdateTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTableWithOptions(request, runtime);
}

model UpdateTableAddColumnRequest {
  column?: [ 
    {
      columnName?: string(name='ColumnName'),
      columnNameCn?: string(name='ColumnNameCn'),
      columnType?: string(name='ColumnType'),
      comment?: string(name='Comment'),
    }
  ](name='Column'),
  tableGuid?: string(name='TableGuid'),
}

model UpdateTableAddColumnResponseBody = {
  requestId?: string(name='RequestId'),
  taskInfo?: {
    content?: string(name='Content'),
    nextTaskId?: string(name='NextTaskId'),
    status?: string(name='Status'),
    taskId?: string(name='TaskId'),
  }(name='TaskInfo'),
}

model UpdateTableAddColumnResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTableAddColumnResponseBody(name='body'),
}

async function updateTableAddColumnWithOptions(request: UpdateTableAddColumnRequest, runtime: Util.RuntimeOptions): UpdateTableAddColumnResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.column)) {
    body['Column'] = request.column;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTableAddColumn',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTableAddColumn(request: UpdateTableAddColumnRequest): UpdateTableAddColumnResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTableAddColumnWithOptions(request, runtime);
}

model UpdateTableLevelRequest {
  description?: string(name='Description'),
  levelId?: long(name='LevelId'),
  levelType?: int32(name='LevelType'),
  name?: string(name='Name'),
  projectId?: long(name='ProjectId'),
}

model UpdateTableLevelResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  updateResult?: boolean(name='UpdateResult'),
}

model UpdateTableLevelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTableLevelResponseBody(name='body'),
}

async function updateTableLevelWithOptions(request: UpdateTableLevelRequest, runtime: Util.RuntimeOptions): UpdateTableLevelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.levelId)) {
    query['LevelId'] = request.levelId;
  }
  if (!Util.isUnset(request.levelType)) {
    query['LevelType'] = request.levelType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTableLevel',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTableLevel(request: UpdateTableLevelRequest): UpdateTableLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTableLevelWithOptions(request, runtime);
}

model UpdateTableModelInfoRequest {
  firstLevelThemeId?: long(name='FirstLevelThemeId'),
  levelId?: long(name='LevelId'),
  levelType?: int32(name='LevelType'),
  secondLevelThemeId?: long(name='SecondLevelThemeId'),
  tableGuid?: string(name='TableGuid'),
}

model UpdateTableModelInfoResponseBody = {
  requestId?: string(name='RequestId'),
  updateResult?: boolean(name='UpdateResult'),
}

model UpdateTableModelInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTableModelInfoResponseBody(name='body'),
}

async function updateTableModelInfoWithOptions(request: UpdateTableModelInfoRequest, runtime: Util.RuntimeOptions): UpdateTableModelInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.firstLevelThemeId)) {
    query['FirstLevelThemeId'] = request.firstLevelThemeId;
  }
  if (!Util.isUnset(request.levelId)) {
    query['LevelId'] = request.levelId;
  }
  if (!Util.isUnset(request.levelType)) {
    query['LevelType'] = request.levelType;
  }
  if (!Util.isUnset(request.secondLevelThemeId)) {
    query['SecondLevelThemeId'] = request.secondLevelThemeId;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTableModelInfo',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTableModelInfo(request: UpdateTableModelInfoRequest): UpdateTableModelInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTableModelInfoWithOptions(request, runtime);
}

model UpdateTableThemeRequest {
  name?: string(name='Name'),
  projectId?: long(name='ProjectId'),
  themeId?: long(name='ThemeId'),
}

model UpdateTableThemeResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  updateResult?: boolean(name='UpdateResult'),
}

model UpdateTableThemeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTableThemeResponseBody(name='body'),
}

async function updateTableThemeWithOptions(request: UpdateTableThemeRequest, runtime: Util.RuntimeOptions): UpdateTableThemeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.themeId)) {
    query['ThemeId'] = request.themeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTableTheme',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTableTheme(request: UpdateTableThemeRequest): UpdateTableThemeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTableThemeWithOptions(request, runtime);
}

model UpdateUdfFileRequest {
  className?: string(name='ClassName'),
  cmdDescription?: string(name='CmdDescription'),
  example?: string(name='Example'),
  fileFolderPath?: string(name='FileFolderPath'),
  fileId?: string(name='FileId'),
  functionType?: string(name='FunctionType'),
  parameterDescription?: string(name='ParameterDescription'),
  projectId?: long(name='ProjectId'),
  projectIdentifier?: string(name='ProjectIdentifier'),
  resources?: string(name='Resources'),
  returnValue?: string(name='ReturnValue'),
  udfDescription?: string(name='UdfDescription'),
}

model UpdateUdfFileResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateUdfFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateUdfFileResponseBody(name='body'),
}

async function updateUdfFileWithOptions(request: UpdateUdfFileRequest, runtime: Util.RuntimeOptions): UpdateUdfFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.className)) {
    body['ClassName'] = request.className;
  }
  if (!Util.isUnset(request.cmdDescription)) {
    body['CmdDescription'] = request.cmdDescription;
  }
  if (!Util.isUnset(request.example)) {
    body['Example'] = request.example;
  }
  if (!Util.isUnset(request.fileFolderPath)) {
    body['FileFolderPath'] = request.fileFolderPath;
  }
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.functionType)) {
    body['FunctionType'] = request.functionType;
  }
  if (!Util.isUnset(request.parameterDescription)) {
    body['ParameterDescription'] = request.parameterDescription;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.resources)) {
    body['Resources'] = request.resources;
  }
  if (!Util.isUnset(request.returnValue)) {
    body['ReturnValue'] = request.returnValue;
  }
  if (!Util.isUnset(request.udfDescription)) {
    body['UdfDescription'] = request.udfDescription;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateUdfFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateUdfFile(request: UpdateUdfFileRequest): UpdateUdfFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUdfFileWithOptions(request, runtime);
}

model UpdateWorkbenchEventResultRequest {
  checkResult?: string(name='CheckResult'),
  checkResultTip?: string(name='CheckResultTip'),
  extensionCode?: string(name='ExtensionCode'),
  messageId?: string(name='MessageId'),
}

model UpdateWorkbenchEventResultResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateWorkbenchEventResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateWorkbenchEventResultResponseBody(name='body'),
}

async function updateWorkbenchEventResultWithOptions(request: UpdateWorkbenchEventResultRequest, runtime: Util.RuntimeOptions): UpdateWorkbenchEventResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkResult)) {
    query['CheckResult'] = request.checkResult;
  }
  if (!Util.isUnset(request.checkResultTip)) {
    query['CheckResultTip'] = request.checkResultTip;
  }
  if (!Util.isUnset(request.extensionCode)) {
    query['ExtensionCode'] = request.extensionCode;
  }
  if (!Util.isUnset(request.messageId)) {
    query['MessageId'] = request.messageId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWorkbenchEventResult',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateWorkbenchEventResult(request: UpdateWorkbenchEventResultRequest): UpdateWorkbenchEventResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateWorkbenchEventResultWithOptions(request, runtime);
}

