/**
 *
 */
import Util;
import OSS;
import OpenPlatform;
import OSSUtil;
import FileForm;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-1' = 'dataworks.ap-northeast-1.aliyuncs.com',
    'ap-south-1' = 'dataworks.ap-south-1.aliyuncs.com',
    'ap-southeast-1' = 'dataworks.ap-southeast-1.aliyuncs.com',
    'ap-southeast-2' = 'dataworks.ap-southeast-2.aliyuncs.com',
    'ap-southeast-3' = 'dataworks.ap-southeast-3.aliyuncs.com',
    'ap-southeast-5' = 'dataworks.ap-southeast-5.aliyuncs.com',
    'cn-beijing' = 'dataworks.cn-beijing.aliyuncs.com',
    'cn-chengdu' = 'dataworks.cn-chengdu.aliyuncs.com',
    'cn-hangzhou' = 'dataworks.cn-hangzhou.aliyuncs.com',
    'cn-hongkong' = 'dataworks.cn-hongkong.aliyuncs.com',
    'cn-huhehaote' = 'dataworks.aliyuncs.com',
    'cn-qingdao' = 'dataworks.aliyuncs.com',
    'cn-shanghai' = 'dataworks.cn-shanghai.aliyuncs.com',
    'cn-shenzhen' = 'dataworks.cn-shenzhen.aliyuncs.com',
    'cn-zhangjiakou' = 'dataworks.aliyuncs.com',
    'eu-central-1' = 'dataworks.eu-central-1.aliyuncs.com',
    'eu-west-1' = 'dataworks.eu-west-1.aliyuncs.com',
    'me-east-1' = 'dataworks.me-east-1.aliyuncs.com',
    'us-east-1' = 'dataworks.us-east-1.aliyuncs.com',
    'us-west-1' = 'dataworks.us-west-1.aliyuncs.com',
    'cn-hangzhou-finance' = 'dataworks.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'dataworks.aliyuncs.com',
    'cn-shanghai-finance-1' = 'dataworks.aliyuncs.com',
    'cn-north-2-gov-1' = 'dataworks.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('dataworks-public', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model Cluster {
  clusterBizId?: string(name='ClusterBizId', description='This parameter is required.', example='c-d8a7523****'),
  clusterId?: long(name='ClusterId', description='This parameter is required.', example='1234'),
}

model ClusterConfig {
  configValue?: string(name='ConfigValue', example='{"spark.driver.memory":"1g"}'),
  enableOverwrite?: boolean(name='EnableOverwrite', example='false'),
  moduleName?: string(name='ModuleName', example='ide'),
}

model Collection {
  collectionType?: string(name='CollectionType', example='album'),
  comment?: string(name='Comment', example='comment'),
  createTime?: long(name='CreateTime', example='1668600147617'),
  level?: int32(name='Level', example='1'),
  name?: string(name='Name', example='collectionName'),
  ownerId?: string(name='OwnerId', example='1234444'),
  ownerName?: string(name='OwnerName', example='owner'),
  qualifiedName?: string(name='QualifiedName', example='album.12334'),
  updateTime?: long(name='UpdateTime', example='1668600148617'),
}

model Entity {
  entityContent?: map[string]any(name='EntityContent'),
  qualifiedName?: string(name='QualifiedName', example='maxcompute_table.563f0357118d05ef145d6bddf2966cc23e86ca8f2f013f915e565afdf09f7a23'),
  tenantId?: long(name='TenantId', example='12345'),
}

model LineageEntityVO {
  attributes?: map[string]string(name='Attributes', example='attribute map'),
  detailUrl?: string(name='DetailUrl', example='http://domain.test.url/entity'),
  entityType?: string(name='EntityType', example='maxcompute-table'),
  name?: string(name='Name', example='tableName'),
  owner?: string(name='Owner', example='owner'),
  parentName?: string(name='ParentName', example='dbName'),
  qualifiedName?: string(name='QualifiedName', example='maxcompute-table.projectName.tablename'),
}

model LineageRelationRegisterBulkVO {
  createTimestamp?: long(name='CreateTimestamp', example='1684327487964'),
  destEntities?: [
    LineageEntityVO
  ](name='DestEntities'),
  relationship?: RelationshipVO(name='Relationship'),
  srcEntities?: [
    LineageEntityVO
  ](name='SrcEntities'),
}

model LineageRelationRegisterTaskVO {
  attributes?: map[string]string(name='Attributes'),
  createTimestamp?: long(name='CreateTimestamp', example='1684327487964'),
  inputEntities?: [
    LineageEntityVO
  ](name='InputEntities'),
  name?: string(name='Name', example='pai-task name'),
  outputEntities?: [
    LineageEntityVO
  ](name='OutputEntities'),
  qualifiedName?: string(name='QualifiedName', example='pai_dlcjob-task.12304'),
}

model LineageRelationRegisterVO {
  createTimestamp?: long(name='CreateTimestamp', example='1684327487964'),
  destEntity?: LineageEntityVO(name='DestEntity'),
  relationship?: RelationshipVO(name='Relationship'),
  srcEntity?: LineageEntityVO(name='SrcEntity'),
}

model RelationshipVO {
  attributes?: map[string]string(name='Attributes'),
  relationshipGuid?: string(name='RelationshipGuid'),
  relationshipType?: string(name='RelationshipType', example='sql'),
}

model UserEntityTag {
  tagKey?: string(name='TagKey', example='priority'),
  tagValue?: string(name='TagValue', example='p1'),
}

model DataDesensPlanTemplateValue = {
  name?: string(name='Name', description='The name of the data masking method.', example='hash'),
  supportWaterMark?: boolean(name='SupportWaterMark', description='Indicates whether a watermark is added. Valid values:

*   true: allow
*   false: disallow', example='true'),
  extParamTemplate?: [ any ](name='ExtParamTemplate', description='The data masking parameters and their descriptions.'),
}

model AbolishDataServiceApiRequest {
  apiId?: long(name='ApiId', description='The ID of the DataService Studio API.

This parameter is required.', example='10000'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.

This parameter is required.', example='10001'),
  tenantId?: long(name='TenantId', description='The tenant ID. To obtain the tenant ID, perform the following steps: Log on to the [DataWorks console](https://workbench.data.aliyun.com/console). Find your workspace and go to the DataStudio page. On the DataStudio page, click the logon username in the upper-right corner and click User Info in the Menu section.', example='10002'),
}

model AbolishDataServiceApiResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the API is unpublished.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model AbolishDataServiceApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AbolishDataServiceApiResponseBody(name='body'),
}

/**
 * @summary Unpublishes a DataService Studio API.
 *
 * @param request AbolishDataServiceApiRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AbolishDataServiceApiResponse
 */
async function abolishDataServiceApiWithOptions(request: AbolishDataServiceApiRequest, runtime: Util.RuntimeOptions): AbolishDataServiceApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AbolishDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Unpublishes a DataService Studio API.
 *
 * @param request AbolishDataServiceApiRequest
 * @return AbolishDataServiceApiResponse
 */
async function abolishDataServiceApi(request: AbolishDataServiceApiRequest): AbolishDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return abolishDataServiceApiWithOptions(request, runtime);
}

model AddMetaCollectionEntityRequest {
  collectionQualifiedName?: string(name='CollectionQualifiedName', description='The unique identifier of the collection.

This parameter is required.', example='album.2222'),
  entityQualifiedName?: string(name='EntityQualifiedName', description='The unique identifier of the entity. Example: maxcompute-table.projectA.tableA.

This parameter is required.', example='maxcompute-table.projectA.tableB'),
  remark?: string(name='Remark', description='The remarks of the entity. Example: latest product table.', example='this is a remark'),
}

model AddMetaCollectionEntityResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='9999'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified product does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can use the request ID to query logs and troubleshoot issues.', example='0000-ABCD-E****'),
  status?: boolean(name='Status', description='The result of the operation. Valid values:

*   true: succeeded
*   false: failed', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

true false', example='true'),
}

model AddMetaCollectionEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddMetaCollectionEntityResponseBody(name='body'),
}

/**
 * @summary Adds an entity to a collection.
 *
 * @param request AddMetaCollectionEntityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddMetaCollectionEntityResponse
 */
async function addMetaCollectionEntityWithOptions(request: AddMetaCollectionEntityRequest, runtime: Util.RuntimeOptions): AddMetaCollectionEntityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.collectionQualifiedName)) {
    query['CollectionQualifiedName'] = request.collectionQualifiedName;
  }
  if (!Util.isUnset(request.entityQualifiedName)) {
    query['EntityQualifiedName'] = request.entityQualifiedName;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddMetaCollectionEntity',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Adds an entity to a collection.
 *
 * @param request AddMetaCollectionEntityRequest
 * @return AddMetaCollectionEntityResponse
 */
async function addMetaCollectionEntity(request: AddMetaCollectionEntityRequest): AddMetaCollectionEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return addMetaCollectionEntityWithOptions(request, runtime);
}

model AddProjectMemberToRoleRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. We recommend that you set this parameter to a UUID. This parameter is used to uniquely identify the API operation call.', example='1AFAE64E-D1BE-432B-A9*****'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can call the [ListProjects](https://help.aliyun.com/document_detail/2780068.html) operation to query the ID.

This parameter is required.', example='27'),
  roleCode?: string(name='RoleCode', description='The code of the role that you want to assign to a member of the DataWorks workspace. You can call the [ListProjectRoles](https://help.aliyun.com/document_detail/2780079.html) operation to query the codes of all roles in a DataWorks workspace.

This parameter is required.', example='role_project_guest'),
  userId?: string(name='UserId', description='The Alibaba Cloud account ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and move the pointer over the profile picture in the upper-right corner to view the ID.

This parameter is required.', example='1234'),
}

model AddProjectMemberToRoleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1AFAE64E-D1BE-432B-A9****'),
}

model AddProjectMemberToRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddProjectMemberToRoleResponseBody(name='body'),
}

/**
 * @summary Assigns a role to a member of a DataWorks workspace. Before you call this operation, you must add your account to a DataWorks workspace as a member.
 *
 * @description *   For information about how to add an account to a DataWorks workspace as a member, see [Add workspace members and assign roles to them](https://help.aliyun.com/document_detail/136941.html).
 * *   If you assign a built-in workspace-level role to a member of a DataWorks workspace, the member is automatically granted the permissions of the mapped role of the MaxCompute compute engine in the development environment. For more information, see [Appendix: Mappings between the built-in workspace-level roles of DataWorks and the roles of MaxCompute](https://help.aliyun.com/document_detail/449397.html).
 *
 * @param request AddProjectMemberToRoleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddProjectMemberToRoleResponse
 */
async function addProjectMemberToRoleWithOptions(request: AddProjectMemberToRoleRequest, runtime: Util.RuntimeOptions): AddProjectMemberToRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.roleCode)) {
    query['RoleCode'] = request.roleCode;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddProjectMemberToRole',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Assigns a role to a member of a DataWorks workspace. Before you call this operation, you must add your account to a DataWorks workspace as a member.
 *
 * @description *   For information about how to add an account to a DataWorks workspace as a member, see [Add workspace members and assign roles to them](https://help.aliyun.com/document_detail/136941.html).
 * *   If you assign a built-in workspace-level role to a member of a DataWorks workspace, the member is automatically granted the permissions of the mapped role of the MaxCompute compute engine in the development environment. For more information, see [Appendix: Mappings between the built-in workspace-level roles of DataWorks and the roles of MaxCompute](https://help.aliyun.com/document_detail/449397.html).
 *
 * @param request AddProjectMemberToRoleRequest
 * @return AddProjectMemberToRoleResponse
 */
async function addProjectMemberToRole(request: AddProjectMemberToRoleRequest): AddProjectMemberToRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return addProjectMemberToRoleWithOptions(request, runtime);
}

model AddRecognizeRuleRequest {
  accountName?: string(name='AccountName', description='The Alibaba Cloud account that is used to create a sensitive data identification rule. Enter the username of the Alibaba Cloud account.

This parameter is required.', example='dsg-uat'),
  colExclude?: string(name='ColExclude', description='Excludes fields. The system does not identify fields that are assigned with values.

*   The value must be in the ${Project name}.${Table name}.${Field name} or ${Project name}.${Schema name}.${Table name}.${Field name} format.
*   *Wildcards are supported. For example, the asterisk (\\\\*) in default.table.column1\\\\* can be used to match any content following default.table.column1, such as default.table.column10.', example='default.qujian.*6'),
  colScan?: string(name='ColScan', description='Scans fields. The system identifies only fields that are assigned with values.

*   The value must be in the ${Project name}.${Table name}.${Field name} or ${Project name}.${Schema name}.${Table name}.${Field name} format.
*   *Wildcards are supported. For example, the asterisk (\\\\*) in default.table.column1\\\\* can be used to match any content following default.table.column1, such as default.table.column10.', example='default.qujian.*'),
  commentScan?: string(name='CommentScan', description='Scans content. The value is the text of each field comment in your data asset. Fuzzy match is supported.', example='test'),
  contentScan?: string(name='ContentScan', description='Identifies content. You can call the [QuerySensNodeInfo](https://help.aliyun.com/document_detail/2747189.html) operation to query the value of the current parameter for a built-in sensitive field.', example='{"_clazz":"com.alipay.dsgclient.sdk.dsg.fastscan.engine.cond.NationalityCond"}'),
  hitThreshold?: int32(name='HitThreshold', description='The hit ratio threshold. If more than 60%, which is a sample hit ratio threshold, of all sample data records hit the Name Entity Recognition (NER) model, the sensitive field is hit. The value can be an integer from 0 to 100.', example='50'),
  level?: string(name='Level', description='The sensitivity level of the sensitive field. You can select one from all sensitivity levels that are defined in a template as the sensitivity level of the sensitive field, such as level 1 to level 10.

This parameter is required.', example='1'),
  levelName?: string(name='LevelName', description='The name of the sensitivity level. You can call the [QueryDefaultTemplate](https://help.aliyun.com/document_detail/2743948.html) operation to obtain the name of the sensitivity level in the related template.', example='Confidential'),
  nodeId?: string(name='NodeId', description='The ID of the data category. You can call the [QuerySensClassification](https://help.aliyun.com/document_detail/2746850.html) operation to query the ID of all data categories. Then, you can select a data category to create a sensitive field. Enter the ID of the selected data category.

This parameter is required.', example='0ce67949-0810-400f-a24a-cc5ffafe1024'),
  nodeParent?: string(name='NodeParent', description='The information about the parent data category of the current data category. You can call the [QuerySensClassification](https://help.aliyun.com/document_detail/2746850.html) operation to obtain the ID of a data category.

This parameter is required.', example='Customer/personal/personal_Natural _Information/personal basic_profile_information'),
  operationType?: int32(name='OperationType', description='The type of the arithmetic operation. Valid values:

*   0: OR
*   1: AND

This parameter is required.', example='0'),
  recognizeRules?: string(name='RecognizeRules', description='The content of the sensitive data identification rule. You can call the [QuerySensNodeInfo](https://help.aliyun.com/document_detail/2747189.html) operation to query the value of the current parameter for a built-in sensitive field.', example='{"contentRule":{"_clazz":"com.alipay.dsgclient.sdk.dsg.fastscan.engine.cond.GenderCond"},"_clazz":"com.alipay.dsg.dal.model.RuleContent"}'),
  recognizeRulesType?: string(name='RecognizeRulesType', description='The type of the sensitive data identification rule. Valid values:

*   1: regular expression
*   2: built-in rule
*   3: sample library
*   4: self-generated data identification model', example='1'),
  sensitiveDescription?: string(name='SensitiveDescription', description='The description of the sensitive field. Enter a string that is less than 128 characters in length.', example='This is a sensitive field that identifies the name.'),
  sensitiveName?: string(name='SensitiveName', description='The name of the custom sensitive field. Enter a string that is less than 128 characters in length.

This parameter is required.', example='name'),
  status?: int32(name='Status', description='The status of the sensitive field. Valid values:

*   0: draft
*   1: effective', example='0'),
  templateId?: string(name='TemplateId', description='The template ID. You can call the [QueryDefaultTemplate](https://help.aliyun.com/document_detail/2743948.html) operation to obtain the template ID.

This parameter is required.', example='e1970541-6cf5-4d23-b101-d5b66f6e1024'),
  tenantId?: string(name='TenantId', description='The tenant ID. To obtain the tenant ID, perform the following steps: Log on to the [DataWorks console](https://workbench.data.aliyun.com/console). Find your workspace and go to the DataStudio page. On the DataStudio page, click the logon username in the upper-right corner and click User Info in the Menu section.

This parameter is required.', example='10241024'),
}

model AddRecognizeRuleResponseBody = {
  data?: any(name='Data', description='The returned result in the JSON format.', example='{   "HttpStatusCode": 200,   "Success": true }'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='9990030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Missing parameter'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='10000001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

*   true
*   false', example='true'),
}

model AddRecognizeRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddRecognizeRuleResponseBody(name='body'),
}

/**
 * @summary Adds a sensitive field that is defined based on the category and sensitivity level of data in Data Security Guard.
 *
 * @param request AddRecognizeRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddRecognizeRuleResponse
 */
async function addRecognizeRuleWithOptions(request: AddRecognizeRuleRequest, runtime: Util.RuntimeOptions): AddRecognizeRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.colExclude)) {
    body['ColExclude'] = request.colExclude;
  }
  if (!Util.isUnset(request.colScan)) {
    body['ColScan'] = request.colScan;
  }
  if (!Util.isUnset(request.commentScan)) {
    body['CommentScan'] = request.commentScan;
  }
  if (!Util.isUnset(request.contentScan)) {
    body['ContentScan'] = request.contentScan;
  }
  if (!Util.isUnset(request.hitThreshold)) {
    body['HitThreshold'] = request.hitThreshold;
  }
  if (!Util.isUnset(request.level)) {
    body['Level'] = request.level;
  }
  if (!Util.isUnset(request.levelName)) {
    body['LevelName'] = request.levelName;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.nodeParent)) {
    body['NodeParent'] = request.nodeParent;
  }
  if (!Util.isUnset(request.operationType)) {
    body['OperationType'] = request.operationType;
  }
  if (!Util.isUnset(request.recognizeRules)) {
    body['RecognizeRules'] = request.recognizeRules;
  }
  if (!Util.isUnset(request.recognizeRulesType)) {
    body['RecognizeRulesType'] = request.recognizeRulesType;
  }
  if (!Util.isUnset(request.sensitiveDescription)) {
    body['SensitiveDescription'] = request.sensitiveDescription;
  }
  if (!Util.isUnset(request.sensitiveName)) {
    body['SensitiveName'] = request.sensitiveName;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddRecognizeRule',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Adds a sensitive field that is defined based on the category and sensitivity level of data in Data Security Guard.
 *
 * @param request AddRecognizeRuleRequest
 * @return AddRecognizeRuleResponse
 */
async function addRecognizeRule(request: AddRecognizeRuleRequest): AddRecognizeRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return addRecognizeRuleWithOptions(request, runtime);
}

model AddToMetaCategoryRequest {
  categoryId?: long(name='CategoryId', description='The ID of the category.

This parameter is required.', example='5'),
  tableGuid?: string(name='TableGuid', description='The GUID of the metatable.

This parameter is required.', example='odps.engine_name.table_name'),
}

model AddToMetaCategoryResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the metatable was added to the specified category.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model AddToMetaCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddToMetaCategoryResponseBody(name='body'),
}

/**
 * @summary Adds a metatable to a specified category.
 *
 * @param request AddToMetaCategoryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddToMetaCategoryResponse
 */
async function addToMetaCategoryWithOptions(request: AddToMetaCategoryRequest, runtime: Util.RuntimeOptions): AddToMetaCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddToMetaCategory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Adds a metatable to a specified category.
 *
 * @param request AddToMetaCategoryRequest
 * @return AddToMetaCategoryResponse
 */
async function addToMetaCategory(request: AddToMetaCategoryRequest): AddToMetaCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return addToMetaCategoryWithOptions(request, runtime);
}

model ApprovePermissionApplyOrderRequest {
  approveAction?: int32(name='ApproveAction', description='The action for the permission request order. Valid values:

*   1: approve
*   2: reject

<!---->

*   0
*   1
*   2\\\\.
*   3\\\\.
*   4
*   5

This parameter is required.', example='1'),
  approveComment?: string(name='ApproveComment', description='The comment on the order.

This parameter is required.', example='agree'),
  flowId?: string(name='FlowId', description='The ID of the permission request order. You can call the ListPermissionApplyOrders operation to obtain the order ID.

This parameter is required.', example='48f36729-05f9-4a40-9286-933fd940f30a'),
}

model ApprovePermissionApplyOrderResponseBody = {
  approveSuccess?: boolean(name='ApproveSuccess', description='Indicates whether the permission request order is processed.', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1ec92159376****'),
}

model ApprovePermissionApplyOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApprovePermissionApplyOrderResponseBody(name='body'),
}

/**
 * @summary Processes a permission request order.
 *
 * @param request ApprovePermissionApplyOrderRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ApprovePermissionApplyOrderResponse
 */
async function approvePermissionApplyOrderWithOptions(request: ApprovePermissionApplyOrderRequest, runtime: Util.RuntimeOptions): ApprovePermissionApplyOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.approveAction)) {
    query['ApproveAction'] = request.approveAction;
  }
  if (!Util.isUnset(request.approveComment)) {
    query['ApproveComment'] = request.approveComment;
  }
  if (!Util.isUnset(request.flowId)) {
    query['FlowId'] = request.flowId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApprovePermissionApplyOrder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Processes a permission request order.
 *
 * @param request ApprovePermissionApplyOrderRequest
 * @return ApprovePermissionApplyOrderResponse
 */
async function approvePermissionApplyOrder(request: ApprovePermissionApplyOrderRequest): ApprovePermissionApplyOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return approvePermissionApplyOrderWithOptions(request, runtime);
}

model CallbackExtensionRequest {
  checkMessage?: string(name='CheckMessage', description='The check message of the extension point event. If CheckResult is set to FAIL, you must provide the failure cause.', example='The xxx rule is hit. Modify it and try again.'),
  checkResult?: string(name='CheckResult', description='The check status of the extension point event. Valid values:

*   OK: The event passes the check.
*   FAIL: The event fails to pass the check. You must check and handle the reported error at the earliest opportunity to ensure that your program is run as expected.
*   WARN: The event passes the check, but an alert is reported.

This parameter is required.', example='FAIL'),
  extensionCode?: string(name='ExtensionCode', description='The unique code of the extension.

This parameter is required.', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
  messageId?: string(name='MessageId', description='The message ID in DataWorks OpenEvent. You can obtain the ID from a received message when an extension point event is triggered.

This parameter is required.', example='03400b03-b721-4c34-8727-2d6884077091'),
}

model CallbackExtensionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='7C352CB7-CD88-50CF-9D0D-E81BDF020E7F'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

true

false', example='true'),
}

model CallbackExtensionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CallbackExtensionResponseBody(name='body'),
}

/**
 * @summary Sends the processing result of an extension point event by an extension to DataWorks.
 *
 * @param request CallbackExtensionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CallbackExtensionResponse
 */
async function callbackExtensionWithOptions(request: CallbackExtensionRequest, runtime: Util.RuntimeOptions): CallbackExtensionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.checkMessage)) {
    body['CheckMessage'] = request.checkMessage;
  }
  if (!Util.isUnset(request.checkResult)) {
    body['CheckResult'] = request.checkResult;
  }
  if (!Util.isUnset(request.extensionCode)) {
    body['ExtensionCode'] = request.extensionCode;
  }
  if (!Util.isUnset(request.messageId)) {
    body['MessageId'] = request.messageId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CallbackExtension',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Sends the processing result of an extension point event by an extension to DataWorks.
 *
 * @param request CallbackExtensionRequest
 * @return CallbackExtensionResponse
 */
async function callbackExtension(request: CallbackExtensionRequest): CallbackExtensionResponse {
  var runtime = new Util.RuntimeOptions{};
  return callbackExtensionWithOptions(request, runtime);
}

model ChangeResourceManagerResourceGroupRequest {
  resourceId?: string(name='ResourceId', description='The ID of the resource type.

*   If you set ResourceType to project, set this parameter to the value of ProjectIdentifier. You can call the [ListProjects](https://help.aliyun.com/document_detail/2780068.html) operation to obtain the value of ProjectIdentifier.
*   If you set ResourceType to tenantresourcegroup, set this parameter to the value of ResourceGroupType. You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/2780075.html) operation to obtain the value of ResourceGroupType. Only the values 7, 8, and 9 are valid.

This parameter is required.', example='test_project'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of the new resource group.

This parameter is required.', example='rg-bp67acfmxazb4p****'),
  resourceType?: string(name='ResourceType', description='The resource type. Valid values:

*   project: workspace. If you want to change the resource group that you specify when you activate DataWorks, set the value to project.
*   tenantresourcegroup: exclusive resource group. If you want to change the resource group that you specify when you purchase a DataWorks exclusive resource group, set the value to tenantresourcegroup.

This parameter is required.', example='project'),
}

model ChangeResourceManagerResourceGroupResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the resource group is changed.', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='1AFAE64E-D1BE-432B-A9****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ChangeResourceManagerResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeResourceManagerResourceGroupResponseBody(name='body'),
}

/**
 * @summary Changes the resource group to which a resource belongs.
 *
 * @param request ChangeResourceManagerResourceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ChangeResourceManagerResourceGroupResponse
 */
async function changeResourceManagerResourceGroupWithOptions(request: ChangeResourceManagerResourceGroupRequest, runtime: Util.RuntimeOptions): ChangeResourceManagerResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeResourceManagerResourceGroup',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Changes the resource group to which a resource belongs.
 *
 * @param request ChangeResourceManagerResourceGroupRequest
 * @return ChangeResourceManagerResourceGroupResponse
 */
async function changeResourceManagerResourceGroup(request: ChangeResourceManagerResourceGroupRequest): ChangeResourceManagerResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeResourceManagerResourceGroupWithOptions(request, runtime);
}

model CheckFileDeploymentRequest {
  checkDetailUrl?: string(name='CheckDetailUrl', description='This parameter is deprecated.', example='https://result.aliyun.com/?checkerInstanceId='),
  checkerInstanceId?: string(name='CheckerInstanceId', description='The ID of the instance to which the file checker belongs. You can obtain the ID from the CheckerInstanceId parameter in the check event logs returned by DataWorks.

This parameter is required.', example='66_123455623_2'),
  status?: string(name='Status', description='The check status of the file that you want to deploy. Valid values:

*   OK: The file passes the check.
*   WARN: The file passes the check, but an alert is reported.
*   FAIL: The file fails the check.

This parameter is required.', example='OK'),
}

model CheckFileDeploymentResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to troubleshoot issues.', example='86d5a5ac-0cc0-4c5f-a374-a15713b252ab'),
}

model CheckFileDeploymentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckFileDeploymentResponseBody(name='body'),
}

/**
 * @summary Returns the check events of a file. After you commit your file that is created on the DataStudio page, the system checks the file and returns check events before the system deploys the file. You must determine whether the check can be continued based on the events. You can call this operation to return the check events for the file that you want to deploy to DataWorks.
 *
 * @param request CheckFileDeploymentRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckFileDeploymentResponse
 */
async function checkFileDeploymentWithOptions(request: CheckFileDeploymentRequest, runtime: Util.RuntimeOptions): CheckFileDeploymentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.checkDetailUrl)) {
    body['CheckDetailUrl'] = request.checkDetailUrl;
  }
  if (!Util.isUnset(request.checkerInstanceId)) {
    body['CheckerInstanceId'] = request.checkerInstanceId;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CheckFileDeployment',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Returns the check events of a file. After you commit your file that is created on the DataStudio page, the system checks the file and returns check events before the system deploys the file. You must determine whether the check can be continued based on the events. You can call this operation to return the check events for the file that you want to deploy to DataWorks.
 *
 * @param request CheckFileDeploymentRequest
 * @return CheckFileDeploymentResponse
 */
async function checkFileDeployment(request: CheckFileDeploymentRequest): CheckFileDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkFileDeploymentWithOptions(request, runtime);
}

model CheckMetaPartitionRequest {
  clusterId?: string(name='ClusterId', description='This parameter is deprecated.', example='abc'),
  dataSourceType?: string(name='DataSourceType', description='The type of the data source. Set the value to odps.', example='emr'),
  databaseName?: string(name='DatabaseName', description='The name of the metadatabase.', example='abc'),
  partition?: string(name='Partition', description='The name of the partition in the MaxCompute metatable.

This parameter is required.', example='ds=202005'),
  tableGuid?: string(name='TableGuid', description='The GUID of the MaxCompute metatable.', example='odps.engine_name.table_name'),
  tableName?: string(name='TableName', description='The name of the metatable.', example='abc'),
}

model CheckMetaPartitionResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the partition in the MaxCompute metatable exists. Valid values:

*   true
*   false', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CheckMetaPartitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckMetaPartitionResponseBody(name='body'),
}

/**
 * @summary Checks whether a partition in a MaxCompute metatable exists.
 *
 * @param request CheckMetaPartitionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckMetaPartitionResponse
 */
async function checkMetaPartitionWithOptions(request: CheckMetaPartitionRequest, runtime: Util.RuntimeOptions): CheckMetaPartitionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.partition)) {
    query['Partition'] = request.partition;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckMetaPartition',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Checks whether a partition in a MaxCompute metatable exists.
 *
 * @param request CheckMetaPartitionRequest
 * @return CheckMetaPartitionResponse
 */
async function checkMetaPartition(request: CheckMetaPartitionRequest): CheckMetaPartitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkMetaPartitionWithOptions(request, runtime);
}

model CheckMetaTableRequest {
  clusterId?: string(name='ClusterId', description='The E-MapReduce (EMR) cluster ID.', example='abc'),
  dataSourceType?: string(name='DataSourceType', description='The type of the data source. Valid values: odps and emr.', example='emr'),
  databaseName?: string(name='DatabaseName', description='The name of the metadatabase of the EMR cluster.', example='abc'),
  tableGuid?: string(name='TableGuid', description='The GUID of the metatable.', example='odps.engine_name.table_name'),
  tableName?: string(name='TableName', description='The name of the EMR metatable.', example='abc'),
}

model CheckMetaTableResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the metatable exists.', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1ec92159376'),
}

model CheckMetaTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckMetaTableResponseBody(name='body'),
}

/**
 * @summary Checks whether a metatable exists.
 *
 * @param request CheckMetaTableRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckMetaTableResponse
 */
async function checkMetaTableWithOptions(request: CheckMetaTableRequest, runtime: Util.RuntimeOptions): CheckMetaTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckMetaTable',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Checks whether a metatable exists.
 *
 * @param request CheckMetaTableRequest
 * @return CheckMetaTableResponse
 */
async function checkMetaTable(request: CheckMetaTableRequest): CheckMetaTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkMetaTableWithOptions(request, runtime);
}

model CreateBaselineRequest {
  alertMarginThreshold?: int32(name='AlertMarginThreshold', description='The alert margin threshold of the baseline. Unit: minutes.', example='30'),
  baselineName?: string(name='BaselineName', description='The name of the baseline.

This parameter is required.', example='BaselineName'),
  baselineType?: string(name='BaselineType', description='The type of the baseline. Valid values: DAILY and HOURLY.

This parameter is required.', example='DAILY'),
  nodeIds?: string(name='NodeIds', description='The ancestor nodes of nodes in the baseline.', example='210001233239,210001236482'),
  overtimeSettings?: [ 
    {
      cycle?: int32(name='Cycle', description='The cycle that corresponds to the committed completion time. For a day-level baseline, set this parameter to 1. For an hour-level baseline, set this parameter to a value that is no more than 24.', example='1'),
      time?: string(name='Time', description='The committed completion time in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].', example='00:00'),
    }
  ](name='OvertimeSettings', description='The settings of the committed completion time of the baseline.

This parameter is required.'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the baseline owner.

This parameter is required.', example='1000000000001'),
  priority?: int32(name='Priority', description='The priority of the baseline. Valid values: {1,3,5,7,8}.

This parameter is required.', example='1,3,5,7,8'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10000'),
}

model CreateBaselineResponseBody = {
  data?: long(name='Data', description='The baseline ID.', example='100003'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='401'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='F05080B0-CCE6-5D22-B284-34A51C5D4E28'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model CreateBaselineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateBaselineResponseBody(name='body'),
}

/**
 * @summary Creates a baseline.
 *
 * @param request CreateBaselineRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateBaselineResponse
 */
async function createBaselineWithOptions(request: CreateBaselineRequest, runtime: Util.RuntimeOptions): CreateBaselineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertMarginThreshold)) {
    body['AlertMarginThreshold'] = request.alertMarginThreshold;
  }
  if (!Util.isUnset(request.baselineName)) {
    body['BaselineName'] = request.baselineName;
  }
  if (!Util.isUnset(request.baselineType)) {
    body['BaselineType'] = request.baselineType;
  }
  if (!Util.isUnset(request.nodeIds)) {
    body['NodeIds'] = request.nodeIds;
  }
  if (!Util.isUnset(request.overtimeSettings)) {
    body['OvertimeSettings'] = request.overtimeSettings;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateBaseline',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a baseline.
 *
 * @param request CreateBaselineRequest
 * @return CreateBaselineResponse
 */
async function createBaseline(request: CreateBaselineRequest): CreateBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBaselineWithOptions(request, runtime);
}

model CreateBusinessRequest {
  businessName?: string(name='BusinessName', description='The name of the business process. The name of the business process in the same project must be unique.

This parameter is required.', example='My business process'),
  description?: string(name='Description', description='The description of the business process.', example='This is a business process created through an interface.'),
  owner?: string(name='Owner', description='The Alibaba Cloud account ID of the owner of the business process. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and hover over the user avatar on the right side of the top menu bar to view the account ID. If this parameter is empty, the caller\\\\"s Alibaba Cloud account ID is used by default.', example='1000000000001'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the workspace ID.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace Management page to obtain the workspace name. You must configure either this parameter or ProjectId parameter to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
  useType?: string(name='UseType', description='The module to which the workflow belongs. Valid values:

*   NORMAL: The workflow belongs to auto triggered workflows.
*   MANUAL_BIZ: The workflow belongs to manually triggered workflows.', example='NORMAL'),
}

model CreateBusinessResponseBody = {
  businessId?: long(name='BusinessId', description='The workflow ID.', example='100001'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateBusinessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateBusinessResponseBody(name='body'),
}

/**
 * @summary Creates a workflow in DataStudio.
 *
 * @param request CreateBusinessRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateBusinessResponse
 */
async function createBusinessWithOptions(request: CreateBusinessRequest, runtime: Util.RuntimeOptions): CreateBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessName)) {
    body['BusinessName'] = request.businessName;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.useType)) {
    body['UseType'] = request.useType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateBusiness',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a workflow in DataStudio.
 *
 * @param request CreateBusinessRequest
 * @return CreateBusinessResponse
 */
async function createBusiness(request: CreateBusinessRequest): CreateBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBusinessWithOptions(request, runtime);
}

model CreateConnectionRequest {
  connectionType?: string(name='ConnectionType', description='The type of the connection string. Valid values:

*   odps
*   mysql
*   rds
*   oss
*   sqlserver
*   polardb
*   oracle
*   mongodb
*   emr
*   postgresql
*   analyticdb_for_mysql
*   hybriddb_for_postgresql
*   holo

This parameter is required.', example='rds'),
  content?: string(name='Content', description='The details of the data source. Examples of details of some common data sources:

*   odps

<!---->

    {
      "accessId": "xssssss",
      "accessKey": "xsaxsaxsa",
      "authType": 2,
      "endpoint": "http://service.odps.aliyun.com/api",
      "project": "xsaxsax",
      "tag": "public"
    }

*   mysql

<!---->

    {
      "database": "xsaxsa",
      "instanceName": "rm-xsaxsa",
      "password": "xsaxsa",
      "rdsOwnerId": "xasxsa",
      "regionId": "cn-shanghai",
      "tag": "rds",
      "username": "xsaxsa"
    }

*   rds

<!---->

    {
      "configType": 1,
      "tag": "rds",
      "database": "xsaxsa",
      "username": "xsaxsa",
      "password": "xssaxsa$32050",
      "instanceName": "rm-xsaxs",
      "rdsOwnerId": "11111111"
    }

*   oss

<!---->

    {
      "accessId": "sssssxx",
      "accessKey": "xsaxaxsaxs",
      "bucket": "xsa-xs-xs",
      "endpoint": "http://oss-cn-shanghai.aliyuncs.com",
      "tag": "public"
    }

*   sqlserver

<!---->

    {
      "jdbcUrl": "jdbc:sqlserver://xsaxsa-xsaxsa.database.xxx.cn:123;DatabaseName=xsxs-xsxs",
      "password": "sdasda$fs",
      "tag": "public",
      "username": "sxaxacdacdd"
    }

*   polardb

<!---->

    {
      "clusterId": "pc-sdadsadsa",
      "database": "dsadsadsa",
      "ownerId": "121212122",
      "password": "sdasdafssa",
      "region": "cn-shanghai",
      "tag": "polardb",
      "username": "asdadsads"
    }

*   oracle

<!---->

    {
      "jdbcUrl": "jdbc:oracle:saaa:@xxxxx:1521:PROD",
      "password": "sxasaxsa",
      "tag": "public",
      "username": "sasfadfa"
    }

*   mongodb

<!---->

    {
      "address": "[\\\\"xsaxxsa.mongodb.rds.aliyuncs.com:3717\\\\"]",
      "database": "admin",
      "password": "sadsda@",
      "tag": "public",
      "username": "dsadsadas"
    }

*   emr

<!---->

    {
      "accessId": "xsaxsa",
      "emrClusterId": "C-dsads",
      "emrResourceQueueName": "default",
      "emrEndpoint": "emr.aliyuncs.com",
      "accessKey": "dsadsad",
      "emrUserId": "224833315798889783",
      "name": "sasdsadsa",
      "emrAccessMode": "simple",
      "region": "cn-shanghai",
      "authType": "2",
      "emrProjectId": "FP-sdadsad"
    }

*   postgresql

<!---->

    {
      "jdbcUrl": "jdbc:postgresql://xxxx:1921/ssss",
      "password": "sdadsads",
      "tag": "public",
      "username": "sdsasda"
    }

*   analyticdb_for_mysql

<!---->

    {
      "instanceId": "am-sadsada",
      "database": "xsxsx",
      "username": "xsxsa",
      "password": "asdadsa",
      "connectionString": "am-xssxsxs.ads.aliyuncs.com:3306"
    }

*   hybriddb_for_postgresql

<!---->

    {
      "connectionString": "gp-xsaxsaxa-master.gpdbmaster.rds.aliyuncs.com",
      "database": "xsaxsaxas",
      "password": "xsaxsaxsa@11",
      "instanceId": "gp-xsaxsaxsa",
      "port": "541132",
      "ownerId": "xsaxsaxsas",
      "username": "sadsad"
    }

*   holo

<!---->

    {
      "accessId": "xsaxsaxs",
      "accessKey": "xsaxsaxsa",
      "database": "xsaxsaxsa",
      "instanceId": "xsaxa",
      "tag": "aliyun"
    }

*   kafka

<!---->

    {
      "instanceId": "xsax-cn-xsaxsa",
      "regionId": "cn-shanghai",
      "tag": "aliyun",
      "ownerId": "1212121212112"
    }

This parameter is required.', example='{"database":"dbname","instanceName":"instancename","password":"password","rdsOwnerId":"123","username":"username"}'),
  description?: string(name='Description', description='The description of the connection string.', example='abc'),
  envType?: int32(name='EnvType', description='The environment in which the data source is used. Valid values: 0 and 1. The value 0 indicates the development environment. The value 1 indicates the production environment.

This parameter is required.', example='1'),
  name?: string(name='Name', description='The name of the data source.

This parameter is required.', example='abc'),
  projectId?: long(name='ProjectId', description='The ID of the workspace with which the data source is associated. You can call the [ListProjects](https://help.aliyun.com/document_detail/178393.html) operation to query the ID.

This parameter is required.', example='1'),
  subType?: string(name='SubType', description='The subtype of the connection string. This parameter is used for scenarios where a type includes subtypes. The following type and subtypes are supported:

*   Type: `rds`
*   Subtypes: `mysql`, `sqlserver`, and `postgresql`.', example='mysql'),
}

model CreateConnectionResponseBody = {
  data?: long(name='Data', description='The data source ID.', example='123'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc141151593763****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateConnectionResponseBody(name='body'),
}

/**
 * @deprecated OpenAPI CreateConnection is deprecated
 *
 * @summary Adds a data source.
 *
 * @param request CreateConnectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateConnectionResponse
 */
// Deprecated
async function createConnectionWithOptions(request: CreateConnectionRequest, runtime: Util.RuntimeOptions): CreateConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionType)) {
    query['ConnectionType'] = request.connectionType;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.subType)) {
    query['SubType'] = request.subType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateConnection',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @deprecated OpenAPI CreateConnection is deprecated
 *
 * @summary Adds a data source.
 *
 * @param request CreateConnectionRequest
 * @return CreateConnectionResponse
 */
// Deprecated
async function createConnection(request: CreateConnectionRequest): CreateConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConnectionWithOptions(request, runtime);
}

model CreateDIAlarmRuleRequest {
  DIJobId?: long(name='DIJobId', description='The ID of the task with which the alert rule is associated.

This parameter is required.', example='11265'),
  description?: string(name='Description', description='The description of the task.', example='mysql synchronizes to hologres heartbeat alert'),
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the alert rule. By default, the alert rule is disabled.', example='true'),
  metricType?: string(name='MetricType', description='The metric type in the alert rule. Valid values:

*   Heartbeat
*   FailoverCount
*   Delay

This parameter is required.', example='Heartbeat'),
  notificationSettings?: {
    inhibitionInterval?: int32(name='InhibitionInterval', description='The duration of the alert suppression interval. Default value: 5. Unit: minutes.', example='5'),
    notificationChannels?: [ 
      {
        channels?: [ string ](name='Channels', description='The alert notification methods.'),
        severity?: string(name='Severity', description='The severity level. Valid values:

*   Warning
*   Critical', example='Warning'),
      }
    ](name='NotificationChannels', description='The alert notification methods.

This parameter is required.'),
    notificationReceivers?: [ 
      {
        receiverType?: string(name='ReceiverType', description='The recipient type. Valid values: AliyunUid and DingToken.

*   If the alert notification method is Mail, Phone, or Sms, set this parameter to **AliyunUid**, which specifies the Alibaba Cloud account ID.
*   If the alert notification method is Ding, set this parameter to **DingToken**, which indicates the DingTalk chatbot token.', example='DingToken'),
        receiverValues?: [ string ](name='ReceiverValues', description='The recipients.'),
      }
    ](name='NotificationReceivers', description='The settings of alert notification recipients.

This parameter is required.'),
  }(name='NotificationSettings', description='The alert notification settings.

This parameter is required.'),
  triggerConditions?: [ 
    {
      duration?: long(name='Duration', description='The time interval for alert calculation. Unit: minutes.', example='15'),
      severity?: string(name='Severity', description='The severity level. Valid values:

*   Warning
*   Critical', example='Warning'),
      threshold?: long(name='Threshold', description='The alert threshold.

*   If the alert rule is for task status, you do not need to specify a threshold.
*   If the alert rule is for failovers, specify the number of failovers.
*   If the alert rule is for latency, the threshold is the latency duration, in seconds.', example='5'),
    }
  ](name='TriggerConditions', description='The conditions that are used to trigger the alert rule.

This parameter is required.'),
}

model CreateDIAlarmRuleShrinkRequest {
  DIJobId?: long(name='DIJobId', description='The ID of the task with which the alert rule is associated.

This parameter is required.', example='11265'),
  description?: string(name='Description', description='The description of the task.', example='mysql synchronizes to hologres heartbeat alert'),
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the alert rule. By default, the alert rule is disabled.', example='true'),
  metricType?: string(name='MetricType', description='The metric type in the alert rule. Valid values:

*   Heartbeat
*   FailoverCount
*   Delay

This parameter is required.', example='Heartbeat'),
  notificationSettingsShrink?: string(name='NotificationSettings', description='The alert notification settings.

This parameter is required.'),
  triggerConditionsShrink?: string(name='TriggerConditions', description='The conditions that are used to trigger the alert rule.

This parameter is required.'),
}

model CreateDIAlarmRuleResponseBody = {
  DIAlarmRuleId?: long(name='DIAlarmRuleId', description='The alert rule ID.', example='34988'),
  requestId?: string(name='RequestId', description='The request ID.', example='C636A747-7E4E-594D-94CD-2B4F8A9A9A63'),
}

model CreateDIAlarmRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDIAlarmRuleResponseBody(name='body'),
}

/**
 * @summary Creates an alert rule for a Data Integration task of a new version. Only the following type of task is supported: real-time data synchronization from a MySQL database to Hologres.
 *
 * @description You can configure alert rules only for tasks that can be used for real-time data synchronization.
 *
 * @param tmpReq CreateDIAlarmRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDIAlarmRuleResponse
 */
async function createDIAlarmRuleWithOptions(tmpReq: CreateDIAlarmRuleRequest, runtime: Util.RuntimeOptions): CreateDIAlarmRuleResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDIAlarmRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.notificationSettings)) {
    request.notificationSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notificationSettings, 'NotificationSettings', 'json');
  }
  if (!Util.isUnset(tmpReq.triggerConditions)) {
    request.triggerConditionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.triggerConditions, 'TriggerConditions', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.DIJobId)) {
    body['DIJobId'] = request.DIJobId;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.enabled)) {
    body['Enabled'] = request.enabled;
  }
  if (!Util.isUnset(request.metricType)) {
    body['MetricType'] = request.metricType;
  }
  if (!Util.isUnset(request.notificationSettingsShrink)) {
    body['NotificationSettings'] = request.notificationSettingsShrink;
  }
  if (!Util.isUnset(request.triggerConditionsShrink)) {
    body['TriggerConditions'] = request.triggerConditionsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDIAlarmRule',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates an alert rule for a Data Integration task of a new version. Only the following type of task is supported: real-time data synchronization from a MySQL database to Hologres.
 *
 * @description You can configure alert rules only for tasks that can be used for real-time data synchronization.
 *
 * @param request CreateDIAlarmRuleRequest
 * @return CreateDIAlarmRuleResponse
 */
async function createDIAlarmRule(request: CreateDIAlarmRuleRequest): CreateDIAlarmRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDIAlarmRuleWithOptions(request, runtime);
}

model CreateDIJobRequest {
  description?: string(name='Description', description='The description of the synchronization task.', example='Synchronize mysql to hologres'),
  destinationDataSourceSettings?: [ 
    {
      dataSourceName?: string(name='DataSourceName', description='The name of the data source.', example='holo_datasource_1'),
      dataSourceProperties?: map[string]string(name='DataSourceProperties', description='The properties of the data source.'),
    }
  ](name='DestinationDataSourceSettings', description='The settings of the destination. Only a single destination is supported.'),
  destinationDataSourceType?: string(name='DestinationDataSourceType', description='The destination type. Valid values: Hologres and Hive.', example='Hologres'),
  jobName?: string(name='JobName', description='The name of the synchronization task.', example='mysql_to_holo_sync_8772'),
  jobSettings?: {
    channelSettings?: string(name='ChannelSettings', description='The channel control settings for the synchronization task. The value of this parameter must be a JSON string.', example='{"structInfo":"MANAGED","storageType":"TEXTFILE","writeMode":"APPEND","partitionColumns":[{"columnName":"pt","columnType":"STRING","comment":""}],"fieldDelimiter":""}'),
    columnDataTypeSettings?: [ 
      {
        destinationDataType?: string(name='DestinationDataType', description='The data type of the destination field.', example='text'),
        sourceDataType?: string(name='SourceDataType', description='The data type of the source field.', example='bigint'),
      }
    ](name='ColumnDataTypeSettings', description='The settings for data type mappings between source fields and destination fields. The value of this parameter must be an array.'),
    cycleScheduleSettings?: {
      cycleMigrationType?: string(name='CycleMigrationType', description='The synchronization type that requires periodic scheduling. Valid values:

*   Full: full synchronization
*   OfflineIncremental: batch incremental synchronization', example='Full'),
      scheduleParameters?: string(name='ScheduleParameters', description='The scheduling parameters.', example='bizdate=$bizdate'),
    }(name='CycleScheduleSettings', description='The settings for periodic scheduling.'),
    ddlHandlingSettings?: [ 
      {
        action?: string(name='Action', description='The processing policy. Valid values:

*   Ignore: ignores a DDL message.
*   Critical: reports an error for a DDL message.
*   Normal: normally processes a DDL message.', example='Critical'),
        type?: string(name='Type', description='The type of the DDL operation. Valid values:

*   RenameColumn
*   ModifyColumn
*   CreateTable
*   TruncateTable
*   DropTable
*   DropColumn
*   AddColumn', example='AddColumn'),
      }
    ](name='DdlHandlingSettings', description='The processing settings for DDL messages.'),
    importRuleSettings?: {
      fileId?: string(name='FileId', description='The ID of the task to be imported.', example='10000'),
      source?: string(name='Source', description='The import source of the task. Set the value to Datastudio, which indicates synchronization tasks created in DataStudio.', example='Datastudio'),
    }(name='ImportRuleSettings', description='The import settings for the synchronization task.'),
    runtimeSettings?: [ 
      {
        name?: string(name='Name', description='The name of the configuration item. Valid values:

*   runtime.offline.speed.limit.mb: specifies the maximum transmission rate that is allowed for a batch synchronization task. This configuration item takes effect only when runtime.offline.speed.limit.enable is set to true.
*   runtime.offline.speed.limit.enable: specifies whether throttling is enabled for a batch synchronization task.
*   dst.offline.connection.max: specifies the maximum number of connections that are allowed for writing data to the destination of a batch synchronization task.
*   runtime.offline.concurrent: specifies the maximum number of parallel threads that are allowed for a batch synchronization task.
*   dst.realtime.connection.max: specifies the maximum number of connections that are allowed for writing data to the destination of a real-time synchronization task.
*   runtime.enable.auto.create.schema: specifies whether schemas are automatically created in the destination of a synchronization task.
*   src.offline.datasource.max.connection: specifies the maximum number of connections that are allowed for reading data from the source of a batch synchronization task.
*   runtime.realtime.concurrent: specifies the maximum number of parallel threads that are allowed for a real-time synchronization task.', example='runtime.offline.concurrent'),
        value?: string(name='Value', description='The value of the configuration item.', example='1'),
      }
    ](name='RuntimeSettings', description='The runtime settings. The value of this parameter must be an array.'),
  }(name='JobSettings', description='The settings for the dimension of the synchronization task. The settings include processing policies for DDL messages, policies for data type mappings between source fields and destination fields, and runtime parameters of the synchronization task.'),
  migrationType?: string(name='MigrationType', description='The synchronization type. Valid values:

*   FullAndRealtimeIncremental (one-time full synchronization and real-time incremental synchronization)
*   RealtimeIncremental (real-time incremental synchronization)
*   Full (full synchronization)
*   OfflineIncremental (batch incremental synchronization)
*   FullAndOfflineIncremental (one-time full synchronization and batch incremental synchronization)', example='FullAndRealtimeIncremental'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can call the [ListProjects](https://help.aliyun.com/document_detail/178393.html) operation to obtain the ID.', example='10000'),
  resourceSettings?: {
    offlineResourceSettings?: {
      resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', description='The identifier of the resource group for Data Integration used for batch synchronization.', example='S_res_group_111_222'),
    }(name='OfflineResourceSettings', description='The resource used for batch synchronization.'),
    realtimeResourceSettings?: {
      resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', description='The identifier of the resource group for Data Integration used for real-time synchronization.', example='S_res_group_111_222'),
    }(name='RealtimeResourceSettings', description='The resource used for real-time synchronization.'),
    requestedCu?: float(name='RequestedCu', description='The number of compute units (CUs) in the resource group that are used for incremental and full synchronization.', example='2.0'),
  }(name='ResourceSettings', description='The resource settings.'),
  sourceDataSourceSettings?: [ 
    {
      dataSourceName?: string(name='DataSourceName', description='The name of the data source.', example='mysql_datasource_1'),
      dataSourceProperties?: map[string]string(name='DataSourceProperties', description='The properties of the data source.'),
    }
  ](name='SourceDataSourceSettings', description='The settings of the source. Only a single source is supported.'),
  sourceDataSourceType?: string(name='SourceDataSourceType', description='The source type. Set this parameter to MySQL.', example='MySQL'),
  systemDebug?: string(name='SystemDebug', description='Specifies whether to perform system debugging. Valid values: true and false. Default value: false.', example='false'),
  tableMappings?: [ 
    {
      sourceObjectSelectionRules?: [ 
        {
          expression?: string(name='Expression', description='The expression.', example='mysql_table_1'),
          objectType?: string(name='ObjectType', description='The object type. Valid values:

*   Table
*   Database', example='Table'),
        }
      ](name='SourceObjectSelectionRules', description='The rules used to select synchronization objects in the source.'),
      transformationRules?: [ 
        {
          ruleActionType?: string(name='RuleActionType', description='The action type. Valid values:

*   DefinePrimaryKey
*   Rename
*   AddColumn
*   HandleDml
*   DefineIncrementalCondition
*   DefineCycleScheduleSettings
*   DefineRuntimeSettings
*   DefinePartitionKey', example='Rename'),
          ruleName?: string(name='RuleName', description='The name of the rule. If the values of the RuleActionType parameter and the RuleTargetType parameter are the same for multiple transformation rules, you must make sure that the transformation rule names are unique.', example='rename_rule_1'),
          ruleTargetType?: string(name='RuleTargetType', description='The type of the object on which you want to perform the action. Valid values:

*   Table
*   Schema', example='Table'),
        }
      ](name='TransformationRules', description='The list of transformation rules that you want to apply to the synchronization objects selected from the source.'),
    }
  ](name='TableMappings', description='The list of mappings between rules used to select synchronization objects in the source and transformation rules applied to the selected synchronization objects. Each entry in the list displays a mapping between a rule used to select synchronization objects and a transformation rule applied to the selected synchronization objects.'),
  transformationRules?: [ 
    {
      ruleActionType?: string(name='RuleActionType', description='The action type. Valid values:

*   DefinePrimaryKey
*   Rename
*   AddColumn
*   HandleDml
*   DefineIncrementalCondition
*   DefineCycleScheduleSettings
*   DefineRuntimeSettings
*   DefinePartitionKey', example='Rename'),
      ruleExpression?: string(name='RuleExpression', description='The expression of the rule. An expression must be a JSON string.

Example of a renaming rule: {"expression":"${srcDatasourceName}_${srcDatabaseName}_0922","variables":[{"variableName":"srcDatabaseName","variableRules":[{"from":"fromdb","to":"todb"}]}]}

*   expression: the expression of the renaming rule. You can use the following variables in an expression: ${srcDatasourceName}, ${srcDatabaseName}, and ${srcTableName}. ${srcDatasourceName} indicates the name of the source. ${srcDatabaseName} indicates the name of a source database. ${srcTableName} indicates the name of a source table.
*   variables: the generation rule for a variable used in the expression of the renaming rule. The default value of the specified variable is the original value of the object indicated by the variable. You can define a group of string replacement rules to change the original values based on your business requirements. variableName: the name of the variable. Do not enclose the variable name in ${}. variableRules: the string replacement rules for variables. The system runs the string replacement rules in sequence for string replacement. from specifies the original string. to specifies the new string.

Example of a rule used to add a specific field to the destination and assign a value to the field: {"columns":[{"columnName":"my_add_column","columnValueType":"Constant","columnValue":"123"}]}

*   If you do not configure such a rule, no fields are added to the destination and no values are assigned by default.
*   columnName: the name of the field that is added.
*   columnValueType: the type of the value of the field. Valid values: Constant and Variable.
*   columnValue: the value of the field that you want to add. If you set the valueType parameter to Constant, set the columnValue parameter to a custom constant of the STRING type. If you set the valueType parameter to Variable, set the columnValue to a built-in variable. The following built-in variables are supported: EXECUTE_TIME (LONG data type), DB_NAME_SRC (STRING data type), DATASOURCE_NAME_SRC (STRING data type), TABLE_NAME_SRC (STRING data type), DB_NAME_DEST (STRING data type), DATASOURCE_NAME_DEST (STRING data type), TABLE_NAME_DEST (STRING data type), and DB_NAME_SRC_TRANSED (STRING data type). EXECUTE_TIME specifies the execution time. DB_NAME_SRC specifies the name of a source database. DATASOURCE_NAME_SRC specifies the name of the source. TABLE_NAME_SRC specifies the name of a source table. DB_NAME_DEST specifies the name of a destination database. DATASOURCE_NAME_DEST specifies the name of the destination. TABLE_NAME_DEST specifies the name of a destination table. DB_NAME_SRC_TRANSED specifies the database name obtained after a transformation.

Example of a rule used to specify primary key fields for a destination table: {"columns":["ukcolumn1","ukcolumn2"]}

*   If you do not configure such a rule, the primary key fields in the mapped source table are used for the destination table by default.
*   If the destination table is an existing table, Data Integration does not modify the schema of the destination table. If the specified primary key fields do not exist in the destination table, an error is reported when the synchronization task starts to run.
*   If the destination table is automatically created by the system, Data Integration automatically creates the schema of the destination table. The schema contains the primary key fields that you specify. If the specified primary key fields do not exist in the destination table, an error is reported when the synchronization task starts to run.

Example of a rule used to process DML messages: {"dmlPolicies":[{"dmlType":"Delete","dmlAction":"Filter","filterCondition":"id > 1"}]}

*   If you do not configure such a rule, the default processing policy for messages generated for insert, update, and delete operations is Normal.
*   dmlType: the DML operation. Valid values: Insert, Update, and Delete.
*   dmlAction: the processing policy for DML messages. Valid values: Normal, Ignore, Filter, and LogicalDelete. Filter indicates conditional processing. You can set the dmlAction parameter to Filter only when the dmlType parameter is set to Update or Delete.
*   filterCondition: the condition used to filter DML messages. This parameter is required only when the dmlAction parameter is set to Filter.', example='{"expression":"${srcDatasoureName}_${srcDatabaseName}"}'),
      ruleName?: string(name='RuleName', description='The name of the rule. If the values of the RuleActionType parameter and the RuleTargetType parameter are the same for multiple transformation rules, you must make sure that the transformation rule names are unique.', example='rename_rule_1'),
      ruleTargetType?: string(name='RuleTargetType', description='The type of the object on which you want to perform the action. Valid values:

*   Table
*   Schema', example='Table'),
    }
  ](name='TransformationRules', description='The list of transformation rules that you want to apply to the synchronization objects selected from the source. Each entry in the list defines a transformation rule.'),
}

model CreateDIJobShrinkRequest {
  description?: string(name='Description', description='The description of the synchronization task.', example='Synchronize mysql to hologres'),
  destinationDataSourceSettingsShrink?: string(name='DestinationDataSourceSettings', description='The settings of the destination. Only a single destination is supported.'),
  destinationDataSourceType?: string(name='DestinationDataSourceType', description='The destination type. Valid values: Hologres and Hive.', example='Hologres'),
  jobName?: string(name='JobName', description='The name of the synchronization task.', example='mysql_to_holo_sync_8772'),
  jobSettingsShrink?: string(name='JobSettings', description='The settings for the dimension of the synchronization task. The settings include processing policies for DDL messages, policies for data type mappings between source fields and destination fields, and runtime parameters of the synchronization task.'),
  migrationType?: string(name='MigrationType', description='The synchronization type. Valid values:

*   FullAndRealtimeIncremental (one-time full synchronization and real-time incremental synchronization)
*   RealtimeIncremental (real-time incremental synchronization)
*   Full (full synchronization)
*   OfflineIncremental (batch incremental synchronization)
*   FullAndOfflineIncremental (one-time full synchronization and batch incremental synchronization)', example='FullAndRealtimeIncremental'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can call the [ListProjects](https://help.aliyun.com/document_detail/178393.html) operation to obtain the ID.', example='10000'),
  resourceSettingsShrink?: string(name='ResourceSettings', description='The resource settings.'),
  sourceDataSourceSettingsShrink?: string(name='SourceDataSourceSettings', description='The settings of the source. Only a single source is supported.'),
  sourceDataSourceType?: string(name='SourceDataSourceType', description='The source type. Set this parameter to MySQL.', example='MySQL'),
  systemDebug?: string(name='SystemDebug', description='Specifies whether to perform system debugging. Valid values: true and false. Default value: false.', example='false'),
  tableMappingsShrink?: string(name='TableMappings', description='The list of mappings between rules used to select synchronization objects in the source and transformation rules applied to the selected synchronization objects. Each entry in the list displays a mapping between a rule used to select synchronization objects and a transformation rule applied to the selected synchronization objects.'),
  transformationRulesShrink?: string(name='TransformationRules', description='The list of transformation rules that you want to apply to the synchronization objects selected from the source. Each entry in the list defines a transformation rule.'),
}

model CreateDIJobResponseBody = {
  DIJobId?: long(name='DIJobId', description='The synchronization task ID.', example='11792'),
  requestId?: string(name='RequestId', description='The request ID. You can use the request ID to query logs and troubleshoot issues.', example='4F6AB6B3-41FB-5EBB-AFB2-0C98D49DA2BB'),
}

model CreateDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDIJobResponseBody(name='body'),
}

/**
 * @summary Creates a new-version synchronization task. The following types of synchronization tasks are supported: real-time synchronization of all data in a MySQL database to Hologres and batch synchronization of all data in a MySQL database to Hive.
 *
 * @param tmpReq CreateDIJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDIJobResponse
 */
async function createDIJobWithOptions(tmpReq: CreateDIJobRequest, runtime: Util.RuntimeOptions): CreateDIJobResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDIJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.destinationDataSourceSettings)) {
    request.destinationDataSourceSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.destinationDataSourceSettings, 'DestinationDataSourceSettings', 'json');
  }
  if (!Util.isUnset(tmpReq.jobSettings)) {
    request.jobSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.jobSettings, 'JobSettings', 'json');
  }
  if (!Util.isUnset(tmpReq.resourceSettings)) {
    request.resourceSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceSettings, 'ResourceSettings', 'json');
  }
  if (!Util.isUnset(tmpReq.sourceDataSourceSettings)) {
    request.sourceDataSourceSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sourceDataSourceSettings, 'SourceDataSourceSettings', 'json');
  }
  if (!Util.isUnset(tmpReq.tableMappings)) {
    request.tableMappingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tableMappings, 'TableMappings', 'json');
  }
  if (!Util.isUnset(tmpReq.transformationRules)) {
    request.transformationRulesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.transformationRules, 'TransformationRules', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.systemDebug)) {
    query['SystemDebug'] = request.systemDebug;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.destinationDataSourceSettingsShrink)) {
    body['DestinationDataSourceSettings'] = request.destinationDataSourceSettingsShrink;
  }
  if (!Util.isUnset(request.destinationDataSourceType)) {
    body['DestinationDataSourceType'] = request.destinationDataSourceType;
  }
  if (!Util.isUnset(request.jobName)) {
    body['JobName'] = request.jobName;
  }
  if (!Util.isUnset(request.jobSettingsShrink)) {
    body['JobSettings'] = request.jobSettingsShrink;
  }
  if (!Util.isUnset(request.migrationType)) {
    body['MigrationType'] = request.migrationType;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.resourceSettingsShrink)) {
    body['ResourceSettings'] = request.resourceSettingsShrink;
  }
  if (!Util.isUnset(request.sourceDataSourceSettingsShrink)) {
    body['SourceDataSourceSettings'] = request.sourceDataSourceSettingsShrink;
  }
  if (!Util.isUnset(request.sourceDataSourceType)) {
    body['SourceDataSourceType'] = request.sourceDataSourceType;
  }
  if (!Util.isUnset(request.tableMappingsShrink)) {
    body['TableMappings'] = request.tableMappingsShrink;
  }
  if (!Util.isUnset(request.transformationRulesShrink)) {
    body['TransformationRules'] = request.transformationRulesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDIJob',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a new-version synchronization task. The following types of synchronization tasks are supported: real-time synchronization of all data in a MySQL database to Hologres and batch synchronization of all data in a MySQL database to Hive.
 *
 * @param request CreateDIJobRequest
 * @return CreateDIJobResponse
 */
async function createDIJob(request: CreateDIJobRequest): CreateDIJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDIJobWithOptions(request, runtime);
}

model CreateDISyncTaskRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. This parameter can be left empty.', example='0000-ABCD-EFG****'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10000'),
  taskContent?: string(name='TaskContent', description='This parameter is required.'),
  taskName?: string(name='TaskName', description='The name of the data synchronization task.', example='new_di_task'),
  taskParam?: string(name='TaskParam', description='The configuration parameters of the data synchronization task. The following parameters are supported:

*   FileFolderPath: the storage path of the data synchronization task.
*   ResourceGroup: the identifier of the resource group for Data Integration that is used by the data synchronization task. You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/173913.html) operation to query the identifier of the resource group.
*   Cu: the specifications occupied by the data synchronization task in the serverless resource group. The value of this parameter must be a multiple of 0.5.', example='{"FileFolderPath":"Business Flow/XXX/Data Integration","ResourceGroup":"S_res_group_XXX_XXXX"}'),
  taskType?: string(name='TaskType', description='The type of the data synchronization task. Valid values: DI_OFFLINE, DI_REALTIME, and DI_SOLUTION.

This parameter is required.', example='DI_OFFLINE'),
}

model CreateDISyncTaskResponseBody = {
  data?: {
    fileId?: long(name='FileId', description='The ID of the data synchronization task that is created.', example='1000001'),
    message?: string(name='Message', description='The error message that is returned if the data synchronization task fails to be created. If the data synchronization task is successfully created, this parameter is not returned. If the data synchronization task fails to be created, an error message in the "Invalid path: Workflow/xxxx/Data Integration" format is returned.', example='Invalid path: Business Flow/xxxx/Data Integration'),
    status?: string(name='Status', description='The creation status of the data synchronization task. Valid values:

*   success
*   fail', example='success'),
  }(name='Data', description='The information that indicates whether the data synchronization task is created.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateDISyncTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDISyncTaskResponseBody(name='body'),
}

/**
 * @summary Creates a data synchronization task.
 *
 * @param request CreateDISyncTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDISyncTaskResponse
 */
async function createDISyncTaskWithOptions(request: CreateDISyncTaskRequest, runtime: Util.RuntimeOptions): CreateDISyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.taskParam)) {
    query['TaskParam'] = request.taskParam;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.taskContent)) {
    body['TaskContent'] = request.taskContent;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDISyncTask',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a data synchronization task.
 *
 * @param request CreateDISyncTaskRequest
 * @return CreateDISyncTaskResponse
 */
async function createDISyncTask(request: CreateDISyncTaskRequest): CreateDISyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDISyncTaskWithOptions(request, runtime);
}

model CreateDagComplementRequest {
  bizBeginTime?: string(name='BizBeginTime', example='00:00:00'),
  bizEndTime?: string(name='BizEndTime', example='23:00:00'),
  endBizDate?: string(name='EndBizDate', description='This parameter is required.', example='2020-05-21 00:00:00'),
  excludeNodeIds?: string(name='ExcludeNodeIds', example='1234'),
  includeNodeIds?: string(name='IncludeNodeIds', description='This parameter is required.', example='74324,74325'),
  name?: string(name='Name', description='This parameter is required.', example='xm_test'),
  nodeParams?: string(name='NodeParams', example='{74324:"key1=val1 key2=val"}'),
  parallelism?: boolean(name='Parallelism', description='This parameter is required.', example='false'),
  projectEnv?: string(name='ProjectEnv', description='This parameter is required.', example='PROD'),
  rootNodeId?: long(name='RootNodeId', description='This parameter is required.', example='1234'),
  startBizDate?: string(name='StartBizDate', description='This parameter is required.', example='2020-05-20 00:00:00'),
}

model CreateDagComplementResponseBody = {
  data?: [ long ](name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', example='true'),
}

model CreateDagComplementResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDagComplementResponseBody(name='body'),
}

/**
 * @deprecated OpenAPI CreateDagComplement is deprecated
 *
 * @param request CreateDagComplementRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDagComplementResponse
 */
// Deprecated
async function createDagComplementWithOptions(request: CreateDagComplementRequest, runtime: Util.RuntimeOptions): CreateDagComplementResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizBeginTime)) {
    body['BizBeginTime'] = request.bizBeginTime;
  }
  if (!Util.isUnset(request.bizEndTime)) {
    body['BizEndTime'] = request.bizEndTime;
  }
  if (!Util.isUnset(request.endBizDate)) {
    body['EndBizDate'] = request.endBizDate;
  }
  if (!Util.isUnset(request.excludeNodeIds)) {
    body['ExcludeNodeIds'] = request.excludeNodeIds;
  }
  if (!Util.isUnset(request.includeNodeIds)) {
    body['IncludeNodeIds'] = request.includeNodeIds;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.nodeParams)) {
    body['NodeParams'] = request.nodeParams;
  }
  if (!Util.isUnset(request.parallelism)) {
    body['Parallelism'] = request.parallelism;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.rootNodeId)) {
    body['RootNodeId'] = request.rootNodeId;
  }
  if (!Util.isUnset(request.startBizDate)) {
    body['StartBizDate'] = request.startBizDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDagComplement',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @deprecated OpenAPI CreateDagComplement is deprecated
 *
 * @param request CreateDagComplementRequest
 * @return CreateDagComplementResponse
 */
// Deprecated
async function createDagComplement(request: CreateDagComplementRequest): CreateDagComplementResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDagComplementWithOptions(request, runtime);
}

model CreateDagTestRequest {
  bizdate?: string(name='Bizdate', description='This parameter is required.', example='2020-05-26 00:00:00'),
  name?: string(name='Name', description='This parameter is required.', example='xm_create_test'),
  nodeId?: long(name='NodeId', description='This parameter is required.', example='1234'),
  nodeParams?: string(name='NodeParams', example='bizdate=$bizdate tbods=$tbods'),
  projectEnv?: string(name='ProjectEnv', description='This parameter is required.', example='PROD'),
}

model CreateDagTestResponseBody = {
  data?: long(name='Data', example='3333333'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', example='true'),
}

model CreateDagTestResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDagTestResponseBody(name='body'),
}

/**
 * @deprecated OpenAPI CreateDagTest is deprecated
 *
 * @param request CreateDagTestRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDagTestResponse
 */
// Deprecated
async function createDagTestWithOptions(request: CreateDagTestRequest, runtime: Util.RuntimeOptions): CreateDagTestResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.nodeParams)) {
    body['NodeParams'] = request.nodeParams;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDagTest',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @deprecated OpenAPI CreateDagTest is deprecated
 *
 * @param request CreateDagTestRequest
 * @return CreateDagTestResponse
 */
// Deprecated
async function createDagTest(request: CreateDagTestRequest): CreateDagTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDagTestWithOptions(request, runtime);
}

model CreateDataServiceApiRequest {
  apiDescription?: string(name='ApiDescription', description='The description of the API.

This parameter is required.', example='Test API description'),
  apiMode?: int32(name='ApiMode', description='The type of the API. Valid values: 0, 1, and 2. The value 0 indicates that the API is generated in wizard mode. The value 1 indicates that the API is generated in script mode. The value 2 indicates that the API is generated by registration.

This parameter is required.', example='0'),
  apiName?: string(name='ApiName', description='The name of the API. The name must be 4 to 50 characters in length. The name can contain letters, digits, and underscores (_) and must start with a letter.

This parameter is required.', example='Test API name'),
  apiPath?: string(name='ApiPath', description='The path of the API. The path cannot exceed 200 characters in length. The path can contain letters, digits, underscores (_), and hyphens (-) and must start with a forward slash (/).

This parameter is required.', example='/test/1'),
  folderId?: long(name='FolderId', description='The ID of the folder used to store the API. The ID of the root folder in a business process is 0. The ID of the folder created by a user must be greater than 0.', example='0'),
  groupId?: string(name='GroupId', description='The business process ID.

This parameter is required.', example='Business process ID'),
  projectId?: long(name='ProjectId', description='The workspace ID.

This parameter is required.', example='10000'),
  protocols?: string(name='Protocols', description='The protocol used by the API. Valid values: 0 and 1. The value 0 indicates HTTP. The value 1 indicates HTTPS. You can specify multiple protocols. Separate them with commas (,).

This parameter is required.', example='0,1'),
  registrationDetails?: string(name='RegistrationDetails', description='The details of the API generated by registration. For more information, see the registrationDetails parameter returned by the [GetDataServiceApi](https://help.aliyun.com/document_detail/174013.html) operation.', example='{"failedResultSample":"fail","registrationErrorCodes":[{"errorCode":"e1","errorMessage":"msg1","errorSolution":"sol1"},{"errorCode":"e2","errorMessage":"msg2","errorSolution":"sol2"}],"registrationRequestParameters":[{"columnName":"","defaultValue":"","exampleValue":"","isRequiredParameter":true,"parameterDataType":0,"parameterDescription":"","parameterName":"id","parameterOperator":0,"parameterPosition":1},{"columnName":"","defaultValue":"xx","exampleValue":"","isRequiredParameter":true,"parameterDataType":0,"parameterDescription":"","parameterName":"cc","parameterOperator":2,"parameterPosition":2}],"serviceContentType":1,"serviceHost":"http://www.baidu.com","servicePath":"/[uid]","serviceRequestBodyDescription":"body","successfulResultSample":"success"}'),
  requestContentType?: int32(name='RequestContentType', description='The format of the data to be requested. Valid values:

*   0: XML format
*   1: JSON format
*   2: form format', example='0'),
  requestMethod?: int32(name='RequestMethod', description='The request method of the API. Valid values: 0, 1, 2, and 3. The value 0 indicates the GET method. The value 1 indicates the POST method. The value 2 indicates the PUT method. The value 3 indicates the DELETE method. APIs generated in wizard or script mode support the GET and POST methods. APIs generated by registration support the GET, POST, PUT, and DELETE methods.

This parameter is required.', example='0'),
  resourceGroupId?: long(name='ResourceGroupId', description='The ID of the exclusive resource group.', example='3242432423'),
  responseContentType?: int32(name='ResponseContentType', description='The format in which the response of the API request is returned. Valid values: 0 and 1. The value 0 indicates the JSON format. The value 1 indicates the XML format. APIs generated in wizard or script mode support the JSON format. APIs generated by registration support the JSON and XML formats.

This parameter is required.', example='0'),
  scriptDetails?: string(name='ScriptDetails', description='The details of the API generated in script mode. For more information, see the scriptDetails parameter returned by the [GetDataServiceApi](https://help.aliyun.com/document_detail/174013.html) operation.', example='{"isPagedResponse":false,"script":"select id as id1, name as name1 from person where id=${inputid}","scriptConnection":{"connectionId":122786,"tableName":"person"},"scriptRequestParameters":[{"defaultValue":"","exampleValue":"","isRequiredParameter":true,"parameterDataType":0,"parameterDescription":"","parameterName":"inputid","parameterOperator":0,"parameterPosition":1}],"scriptResponseParameters":[{"exampleValue":"","parameterDataType":0,"parameterDescription":"","parameterName":"id1"},{"exampleValue":"","parameterDataType":0,"parameterDescription":"","parameterName":"name1"}]}'),
  sqlMode?: long(name='SqlMode', description='*   The SQL mode. Valid values: 0: The basic mode is used.
*   1: Mybatis is used.', example='0'),
  tenantId?: long(name='TenantId', description='The tenant ID.', example='10001'),
  timeout?: int32(name='Timeout', description='The timeout period of the API request. Unit: milliseconds. Valid values: (0,30000].

This parameter is required.', example='10000'),
  visibleRange?: int32(name='VisibleRange', description='The scope in which the API is visible. Valid values: 0 and 1. The value 0 indicates that the API is visible to all members in the workspace. The value 1 indicates that the API is visible only to its owner.

This parameter is required.', example='0'),
  wizardDetails?: string(name='WizardDetails', description='The details of the API generated in wizard mode. For more information, see the WizardDetails parameter returned by the [GetDataServiceApi](https://help.aliyun.com/document_detail/174013.html) operation.', example='{"isPagedResponse":true,"wizardConnection":{"connectionId":122786,"tableName":"person"},"wizardRequestParameters":[{"columnName":"id","defaultValue":"","exampleValue":"1","isRequiredParameter":true,"parameterDataType":2,"parameterDescription":"","parameterName":"id","parameterOperator":0,"parameterPosition":0}],"wizardResponseParameters":[{"columnName":"id","exampleValue":"11","parameterDataType":2,"parameterDescription":"","parameterName":"id"}]}'),
}

model CreateDataServiceApiResponseBody = {
  data?: long(name='Data', description='The ID of the API.', example='100003'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateDataServiceApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataServiceApiResponseBody(name='body'),
}

/**
 * @summary Creates an API.
 *
 * @param request CreateDataServiceApiRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataServiceApiResponse
 */
async function createDataServiceApiWithOptions(request: CreateDataServiceApiRequest, runtime: Util.RuntimeOptions): CreateDataServiceApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiDescription)) {
    body['ApiDescription'] = request.apiDescription;
  }
  if (!Util.isUnset(request.apiMode)) {
    body['ApiMode'] = request.apiMode;
  }
  if (!Util.isUnset(request.apiName)) {
    body['ApiName'] = request.apiName;
  }
  if (!Util.isUnset(request.apiPath)) {
    body['ApiPath'] = request.apiPath;
  }
  if (!Util.isUnset(request.folderId)) {
    body['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.protocols)) {
    body['Protocols'] = request.protocols;
  }
  if (!Util.isUnset(request.registrationDetails)) {
    body['RegistrationDetails'] = request.registrationDetails;
  }
  if (!Util.isUnset(request.requestContentType)) {
    body['RequestContentType'] = request.requestContentType;
  }
  if (!Util.isUnset(request.requestMethod)) {
    body['RequestMethod'] = request.requestMethod;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.responseContentType)) {
    body['ResponseContentType'] = request.responseContentType;
  }
  if (!Util.isUnset(request.scriptDetails)) {
    body['ScriptDetails'] = request.scriptDetails;
  }
  if (!Util.isUnset(request.sqlMode)) {
    body['SqlMode'] = request.sqlMode;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.timeout)) {
    body['Timeout'] = request.timeout;
  }
  if (!Util.isUnset(request.visibleRange)) {
    body['VisibleRange'] = request.visibleRange;
  }
  if (!Util.isUnset(request.wizardDetails)) {
    body['WizardDetails'] = request.wizardDetails;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates an API.
 *
 * @param request CreateDataServiceApiRequest
 * @return CreateDataServiceApiResponse
 */
async function createDataServiceApi(request: CreateDataServiceApiRequest): CreateDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataServiceApiWithOptions(request, runtime);
}

model CreateDataServiceApiAuthorityRequest {
  apiId?: long(name='ApiId', description='The ID of the API.

This parameter is required.', example='10001'),
  authorizedProjectId?: long(name='AuthorizedProjectId', description='The ID of the workspace to which the access permissions on the API are granted.

This parameter is required.', example='10002'),
  endTime?: long(name='EndTime', description='The end time of the validity period of the access permissions. The time must be a UNIX timestamp. Unit: seconds. Example: 1600531564, which indicates 2020-09-20 00:06:04 (UTC+8).

This parameter is required.', example='1600531564'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.

This parameter is required.', example='10003'),
  tenantId?: long(name='TenantId', description='The tenant ID.', example='1004'),
}

model CreateDataServiceApiAuthorityResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EF****'),
  success?: boolean(name='Success', description='Indicates whether the authorization was successful.', example='true'),
}

model CreateDataServiceApiAuthorityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataServiceApiAuthorityResponseBody(name='body'),
}

/**
 * @summary Grants the access permissions on an API in DataService Studio.
 *
 * @param request CreateDataServiceApiAuthorityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataServiceApiAuthorityResponse
 */
async function createDataServiceApiAuthorityWithOptions(request: CreateDataServiceApiAuthorityRequest, runtime: Util.RuntimeOptions): CreateDataServiceApiAuthorityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.authorizedProjectId)) {
    body['AuthorizedProjectId'] = request.authorizedProjectId;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataServiceApiAuthority',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Grants the access permissions on an API in DataService Studio.
 *
 * @param request CreateDataServiceApiAuthorityRequest
 * @return CreateDataServiceApiAuthorityResponse
 */
async function createDataServiceApiAuthority(request: CreateDataServiceApiAuthorityRequest): CreateDataServiceApiAuthorityResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataServiceApiAuthorityWithOptions(request, runtime);
}

model CreateDataServiceFolderRequest {
  folderName?: string(name='FolderName', description='The name of the folder.

This parameter is required.', example='Test folder'),
  groupId?: string(name='GroupId', description='The ID of the desired workflow to which the folder belongs.

This parameter is required.', example='1000abcd'),
  parentId?: long(name='ParentId', description='The ID of the desired parent folder of the folder. The ID of the root folder in a workflow is 0. The ID of the folder created by users in a workflow is greater than 0.

This parameter is required.', example='0'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.

This parameter is required.', example='10001'),
  tenantId?: long(name='TenantId', description='The tenant ID.', example='10002'),
}

model CreateDataServiceFolderResponseBody = {
  folderId?: long(name='FolderId', description='The ID of the created folder.', example='123'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-E****'),
}

model CreateDataServiceFolderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataServiceFolderResponseBody(name='body'),
}

/**
 * @summary Creates a folder in DataService Studio.
 *
 * @param request CreateDataServiceFolderRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataServiceFolderResponse
 */
async function createDataServiceFolderWithOptions(request: CreateDataServiceFolderRequest, runtime: Util.RuntimeOptions): CreateDataServiceFolderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderName)) {
    body['FolderName'] = request.folderName;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.parentId)) {
    body['ParentId'] = request.parentId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataServiceFolder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a folder in DataService Studio.
 *
 * @param request CreateDataServiceFolderRequest
 * @return CreateDataServiceFolderResponse
 */
async function createDataServiceFolder(request: CreateDataServiceFolderRequest): CreateDataServiceFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataServiceFolderWithOptions(request, runtime);
}

model CreateDataServiceGroupRequest {
  apiGatewayGroupId?: string(name='ApiGatewayGroupId', description='The ID of the API group that is associated with the business process in the API Gateway console. You can log on to the API Gateway console and go to the Group Details page to view the ID.

This parameter is required.', example='1000abcd'),
  description?: string(name='Description', description='The description of the business process.', example='Test business process'),
  groupName?: string(name='GroupName', description='The name of the business process.

This parameter is required.', example='Business process name'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.

This parameter is required.', example='10001'),
  tenantId?: long(name='TenantId', description='The tenant ID. This parameter is deprecated.', example='10002'),
}

model CreateDataServiceGroupResponseBody = {
  groupId?: string(name='GroupId', description='The business process ID.', example='ds_12345'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EF****'),
}

model CreateDataServiceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataServiceGroupResponseBody(name='body'),
}

/**
 * @summary Creates a business process.
 *
 * @param request CreateDataServiceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataServiceGroupResponse
 */
async function createDataServiceGroupWithOptions(request: CreateDataServiceGroupRequest, runtime: Util.RuntimeOptions): CreateDataServiceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiGatewayGroupId)) {
    body['ApiGatewayGroupId'] = request.apiGatewayGroupId;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupName)) {
    body['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataServiceGroup',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a business process.
 *
 * @param request CreateDataServiceGroupRequest
 * @return CreateDataServiceGroupResponse
 */
async function createDataServiceGroup(request: CreateDataServiceGroupRequest): CreateDataServiceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataServiceGroupWithOptions(request, runtime);
}

model CreateDataSourceRequest {
  content?: string(name='Content', description='The details of the data source. Examples of details of some common data sources:

*   odps

        {
          "accessId": "xssssss",
          "accessKey": "xsaxsaxsa",
          "authType": 2,
          "endpoint": "http://service.odps.aliyun.com/api",
          "project": "xsaxsax",
          "tag": "public"
        }

*   mysql

        {
          "database": "xsaxsa",
          "instanceName": "rm-xsaxsa",
          "password": "xsaxsa",
          "rdsOwnerId": "xasxsa",
          "regionId": "cn-shanghai",
          "tag": "rds",
          "username": "xsaxsa"
        }

*   rds

        {
          "configType": 1,
          "tag": "rds",
          "database": "xsaxsa",
          "username": "xsaxsa",
          "password": "xssaxsa$32050",
          "instanceName": "rm-xsaxs",
          "rdsOwnerId": "11111111"
        }

*   oss

        {
          "accessId": "sssssxx",
          "accessKey": "xsaxaxsaxs",
          "bucket": "xsa-xs-xs",
          "endpoint": "http://oss-cn-shanghai.aliyuncs.com",
          "tag": "public"
        }

*   sqlserver

        {
          "jdbcUrl": "jdbc:sqlserver://xsaxsa-xsaxsa.database.xxx.cn:123;DatabaseName=xsxs-xsxs",
          "password": "sdasda$fs",
          "tag": "public",
          "username": "sxaxacdacdd"
        }

*   polardb

        {
          "clusterId": "pc-sdadsadsa",
          "database": "dsadsadsa",
          "ownerId": "121212122",
          "password": "sdasdafssa",
          "region": "cn-shanghai",
          "tag": "polardb",
          "username": "asdadsads"
        }

*   redis

        {    
        "password": "xxxxxx",   
         "address":"[{\\\\"host\\\\":\\\\"xxxxxxx.redis.rds.aliyuncs.com\\\\",\\\\"port\\\\":6379}]",    
        "tag": "public"
        }

*   oracle

        {
          "jdbcUrl": "jdbc:oracle:saaa:@xxxxx:1521:PROD",
          "password": "sxasaxsa",
          "tag": "public",
          "username": "sasfadfa"
        }

*   mongodb

        {
          "address": "[\\\\"xsaxxsa.mongodb.rds.aliyuncs.com:3717\\\\"]",
          "database": "admin",
          "password": "sadsda@",
          "tag": "public",
          "username": "dsadsadas"
        }

*   emr

        {
          "accessId": "xsaxsa",
          "emrClusterId": "C-dsads",
          "emrResourceQueueName": "default",
          "emrEndpoint": "emr.aliyuncs.com",
          "accessKey": "dsadsad",
          "emrUserId": "224833315798889783",
          "name": "sasdsadsa",
          "emrAccessMode": "simple",
          "region": "cn-shanghai",
          "authType": "2",
          "emrProjectId": "FP-sdadsad"
        }

*   postgresql

        {
          "jdbcUrl": "jdbc:postgresql://xxxx:1921/ssss",
          "password": "sdadsads",
          "tag": "public",
          "username": "sdsasda"
        }

*   analyticdb_for_mysql

        {
          "instanceId": "am-sadsada",
          "database": "xsxsx",
          "username": "xsxsa",
          "password": "asdadsa",
          "connectionString": "am-xssxsxs.ads.aliyuncs.com:3306"
        }

*   hybriddb_for_postgresql

        {
          "connectionString": "gp-xsaxsaxa-master.gpdbmaster.rds.aliyuncs.com",
          "database": "xsaxsaxas",
          "password": "xsaxsaxsa@11",
          "instanceId": "gp-xsaxsaxsa",
          "port": "541132",
          "ownerId": "xsaxsaxsas",
          "username": "sadsad"
        }

*   holo

        {
          "accessId": "xsaxsaxs",
          "accessKey": "xsaxsaxsa",
          "database": "xsaxsaxsa",
          "instanceId": "xsaxa",
          "tag": "aliyun"
        }

*   kafka

        {
          "instanceId": "xsax-cn-xsaxsa",
          "regionId": "cn-shanghai",
          "tag": "aliyun",
          "ownerId": "1212121212112"
        }

This parameter is required.', example='{"database":"dbname","instanceName":"instancename","password":"password","rdsOwnerId":"123","username":"username"}'),
  dataSourceType?: string(name='DataSourceType', description='The type of the data source. Valid values:

*   odps
*   mysql
*   rds
*   oss
*   sqlserver
*   polardb
*   oracle
*   mongodb
*   emr
*   postgresql
*   analyticdb_for_mysql
*   hybriddb_for_postgresql
*   holo

This parameter is required.', example='rds'),
  description?: string(name='Description', description='The description of the data source.', example='abc'),
  envType?: int32(name='EnvType', description='The environment in which the data source is used. Valid values: 0 and 1. The value 0 indicates the development environment. The value 1 indicates the production environment.

This parameter is required.', example='1'),
  name?: string(name='Name', description='The name of the data source.

This parameter is required.', example='abc'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace to which the data source belongs. You can call the [ListProjects](https://help.aliyun.com/document_detail/2780068.html) operation to query the ID.

This parameter is required.', example='1'),
  subType?: string(name='SubType', description='The subtype of the data source.

*   This parameter takes effect only if you set the DataSourceType parameter to rds.
*   If the DataSourceType parameter is set to rds, this parameter can be set to mysql, sqlserver, or postgresql.', example='mysql'),
}

model CreateDataSourceResponseBody = {
  data?: long(name='Data', description='The data source ID.', example='123'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc141151593763****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataSourceResponseBody(name='body'),
}

/**
 * @summary Adds a data source to DataWorks.
 *
 * @param request CreateDataSourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataSourceResponse
 */
async function createDataSourceWithOptions(request: CreateDataSourceRequest, runtime: Util.RuntimeOptions): CreateDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.subType)) {
    query['SubType'] = request.subType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataSource',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Adds a data source to DataWorks.
 *
 * @param request CreateDataSourceRequest
 * @return CreateDataSourceResponse
 */
async function createDataSource(request: CreateDataSourceRequest): CreateDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataSourceWithOptions(request, runtime);
}

model CreateExportMigrationRequest {
  description?: string(name='Description', description='The description of the export task.', example='test', nullable=true),
  exportMode?: string(name='ExportMode', description='The export mode of the export task. Valid values:

*   FULL: The export task is used to export all data objects.
*   INCREMENTAL: The export task is used to export data objects that were modified since the specified point in time. If you set this parameter to INCREMENTAL, you must configure the IncrementalSince parameter.

This parameter is required.', example='FULL'),
  exportObjectStatus?: string(name='ExportObjectStatus', description='The status of the data objects that you want to export in the export task. The system exports data objects in the state that is specified by this parameter. Valid values:

*   SAVED
*   SUBMITTED
*   DEPLOYED', example='SAVED', nullable=true),
  incrementalSince?: long(name='IncrementalSince', description='The start time of the incremental export task.

The IncrementalSince parameter takes effect only when the ExportMode parameter is set to INCREMENTAL.', example='1589904000000', nullable=true),
  name?: string(name='Name', description='The name of the export task.

The name of each export task must be unique. You must ensure that no duplicate export task exists in the current workspace.

This parameter is required.', example='test_export_01'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the workspace ID.

This parameter is required.', example='12345'),
}

model CreateExportMigrationResponseBody = {
  data?: long(name='Data', description='The export task ID.', example='1234'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='34267E2E-0335-1A60-A1F0-ADA530890CBA'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model CreateExportMigrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateExportMigrationResponseBody(name='body'),
}

/**
 * @summary Creates an export task. You can use this operation to create an export task but cannot use this operation to start the created export task.
 *
 * @param request CreateExportMigrationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateExportMigrationResponse
 */
async function createExportMigrationWithOptions(request: CreateExportMigrationRequest, runtime: Util.RuntimeOptions): CreateExportMigrationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.exportMode)) {
    body['ExportMode'] = request.exportMode;
  }
  if (!Util.isUnset(request.exportObjectStatus)) {
    body['ExportObjectStatus'] = request.exportObjectStatus;
  }
  if (!Util.isUnset(request.incrementalSince)) {
    body['IncrementalSince'] = request.incrementalSince;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateExportMigration',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates an export task. You can use this operation to create an export task but cannot use this operation to start the created export task.
 *
 * @param request CreateExportMigrationRequest
 * @return CreateExportMigrationResponse
 */
async function createExportMigration(request: CreateExportMigrationRequest): CreateExportMigrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createExportMigrationWithOptions(request, runtime);
}

model CreateFileRequest {
  advancedSettings?: string(name='AdvancedSettings', description='The advanced configurations of the node.

This parameter is valid only for an EMR Spark Streaming node or an EMR Streaming SQL node. This parameter corresponds to the Advanced Settings tab of the node in the [DataWorks console](https://workbench.data.aliyun.com/console).

The value of this parameter must be in the JSON format.', example='{"queue":"default","SPARK_CONF":"--conf spark.driver.memory=2g"}'),
  applyScheduleImmediately?: boolean(name='ApplyScheduleImmediately', description='Specifies whether scheduling configurations immediately take effect after the node is deployed.', example='true'),
  autoParsing?: boolean(name='AutoParsing', description='Specifies whether to enable the automatic parsing feature for the file. Valid values:

*   true
*   false

This parameter corresponds to the Analyze Code parameter that is displayed after Same Cycle is selected in the Dependencies section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='true'),
  autoRerunIntervalMillis?: int32(name='AutoRerunIntervalMillis', description='The interval between automatic reruns after an error occurs. Unit: milliseconds. Maximum value: 1800000 (30 minutes).

This parameter corresponds to the Rerun Interval parameter that is displayed after the Auto Rerun upon Error check box is selected in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).

The interval that you specify in the DataWorks console is measured in minutes. Pay attention to the conversion between the units of time when you call the operation.', example='120000'),
  autoRerunTimes?: int32(name='AutoRerunTimes', description='The number of automatic reruns that are allowed after an error occurs. Maximum value: 10.', example='3'),
  connectionName?: string(name='ConnectionName', description='The name of the data source for which the node is run.

You can call the [UpdateDataSource](https://help.aliyun.com/document_detail/211432.html) operation to query the available data sources in the workspace.', example='odps_first'),
  content?: string(name='Content', description='The code for the file. The code format varies based on the file type. To view the code format for a specific file type, go to Operation Center, right-click a node of the file type, and then select View Code.', example='SHOW TABLES;'),
  createFolderIfNotExists?: boolean(name='CreateFolderIfNotExists', description='Specifies whether to automatically create the directory that is specified by the FileFolderPath parameter if the directory does not exist. Valid values:

*   true: The system automatically creates the directory if the directory does not exist.
*   false: The system does not automatically create the directory if the directory does not exist. In this case, the call fails.', example='false'),
  cronExpress?: string(name='CronExpress', description='The CRON expression that represents the periodic scheduling policy of the node. This parameter corresponds to the Cron Expression parameter in the Schedule section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console). After you configure the Scheduling Cycle and Scheduled time parameters in the DataWorks console, DataWorks generates the value of the Cron Expression parameter.

Examples:

*   CRON expression for a node that is scheduled to run at 05:30 every day: `00 30 05 * * ?`
*   CRON expression for a node that is scheduled to run at the fifteenth minute of each hour: `00 15 00-23/1 * * ?`
*   CRON expression for a node that is scheduled to run every 10 minutes: `00 00/10 * * * ?`
*   CRON expression for a node that is scheduled to run every 10 minutes from 08:00 to 17:00 every day: `00 00-59/10 8-17 * * * ?`
*   CRON expression for a node that is scheduled to run at 00:20 on the first day of each month: `00 20 00 1 * ?`
*   CRON expression for a node that is scheduled to run every three months from 00:10 on January 1: `00 10 00 1 1-12/3 ?`
*   CRON expression for a node that is scheduled to run at 00:05 every Tuesday and Friday: `00 05 00 * * 2,5`

The scheduling system of DataWorks imposes the following limits on CRON expressions:

*   The minimum interval specified in a CRON expression to schedule a node is 5 minutes.
*   The earliest time specified in a CRON expression to schedule a node every day is 00:05.', example='00 05 00 * * ?'),
  cycleType?: string(name='CycleType', description='The type of the scheduling cycle of the node that corresponds to the file. Valid values: NOT_DAY and DAY. The value NOT_DAY indicates that the node is scheduled to run by minute or hour. The value DAY indicates that the node is scheduled to run by day, week, or month.

This parameter corresponds to the Scheduling Cycle parameter in the Schedule section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='DAY'),
  dependentNodeIdList?: string(name='DependentNodeIdList', description='The IDs of the nodes that generate instances in the previous cycle on which the current node depends.', example='abc'),
  dependentType?: string(name='DependentType', description='The type of the cross-cycle scheduling dependency of the node. Valid values:

*   SELF: The instance generated for the node in the current cycle depends on the instance generated for the node in the previous cycle.
*   CHILD: The instance generated for the node in the current cycle depends on the instances generated for the descendant nodes at the nearest level of the node in the previous cycle.
*   USER_DEFINE: The instance generated for the node in the current cycle depends on the instances generated for one or more specified nodes in the previous cycle.
*   NONE: No cross-cycle scheduling dependency type is selected for the node.
*   USER_DEFINE_AND_SELF: The instance generated for the node in the current cycle depends on the instance generated for the node in the previous cycle and the instances generated for one or more specified nodes in the previous cycle.
*   CHILD_AND_SELF: The instance generated for the node in the current cycle depends on the instances generated for the descendant nodes at the nearest level of the node in the previous cycle and the instance generated for the node in the previous cycle.', example='NONE'),
  endEffectDate?: long(name='EndEffectDate', description='The end time of automatic scheduling. Set the value to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.

This parameter corresponds to the Validity Period parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='1671694850000'),
  fileDescription?: string(name='FileDescription', description='The description of the file.', example='Here is the file description'),
  fileFolderPath?: string(name='FileFolderPath', description='The path of the file.', example='Business_process/First_Business_Process/MaxCompute/Folder_1/Folder_2'),
  fileName?: string(name='FileName', description='The name of the file.

This parameter is required.', example='File name'),
  fileType?: int32(name='FileType', description='The type of the code for the file. The code for files varies based on the file type. For more information, see [DataWorks nodes](https://help.aliyun.com/document_detail/600169.html).

You can call the [ListFileType](https://help.aliyun.com/document_detail/212428.html) operation to query the type of the code for the file.

This parameter is required.', example='10'),
  ignoreParentSkipRunningProperty?: boolean(name='IgnoreParentSkipRunningProperty', description='Whether to use the last cycle empty run attribute. The values are as follows:
- true: The empty run attribute of the previous cycle is used.
- false: The empty run attribute of the previous cycle is not used.', example='false'),
  inputList?: string(name='InputList', description='The output name of the parent file on which the current file depends. If you specify multiple output names, separate them with commas (,).

This parameter corresponds to the Output Name parameter under Parent Nodes in the Dependencies section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='project_root,project.file1,project.001_out'),
  inputParameters?: string(name='InputParameters', description='The input parameters of the node. The value of this parameter must be in the JSON format. For more information about the input parameters, see the InputContextParameterList parameter in the Response parameters section of the [GetFile](https://help.aliyun.com/document_detail/173954.html) operation.

This parameter corresponds to the Input Parameters table in the Input and Output Parameters section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='[{"ValueSource": "project_001.first_node:bizdate_param","ParameterName": "bizdate_input"}]'),
  outputParameters?: string(name='OutputParameters', description='The output parameters of the node. The value of this parameter must be in the JSON format. For more information about the output parameters, see the OutputContextParameterList parameter in the Response parameters section of the [GetFile](https://help.aliyun.com/document_detail/173954.html) operation.

This parameter corresponds to the Output Parameters table in the Input and Output Parameters section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='[{"Type": 1,"Value": "${bizdate}","ParameterName": "bizdate_param"}]'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the file owner. If this parameter is not configured, the ID of the Alibaba Cloud account of the user who calls the operation is used.', example='1000000000001'),
  paraValue?: string(name='ParaValue', description='The scheduling parameters of the node. Separate multiple parameters with spaces.

This parameter corresponds to the Parameters section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console). For more information about the configurations of the scheduling parameters, see [Configure scheduling parameters](https://help.aliyun.com/document_detail/137548.html).', example='a=x b=y'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace Management page to obtain the workspace ID.

You must configure this parameter or the ProjectIdentifier parameter to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace Management page to obtain the workspace name.

You must configure this parameter or the ProjectId parameter to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
  rerunMode?: string(name='RerunMode', description='Specifies whether the node that corresponds to the file can be rerun. Valid values:

*   ALL_ALLOWED: The node can be rerun regardless of whether it is successfully run or fails to run.
*   FAILURE_ALLOWED: The node can be rerun only after it fails to run.
*   ALL_DENIED: The node cannot be rerun regardless of whether it is successfully run or fails to run.

This parameter corresponds to the Rerun parameter in the Schedule section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='ALL_ALLOWED'),
  resourceGroupId?: long(name='ResourceGroupId', description='This parameter is deprecated. Do not use this parameter.

The identifier of the resource group that is used to run the node. This parameter corresponds to the Resource Group parameter in the Resource Group section of the Properties tab in the DataWorks console. You must configure one of the ResourceGroupId and ResourceGroupIdentifier parameters to determine the resource group that is used to run the node.

You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/173913.html) operation to query the available resource groups in the workspace. When you call the operation, set the ResourceGroupType parameter to 1. The response parameter Id indicates the ID of an available resource group.', example='375827434852437'),
  resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', description='The identifier of the resource group that is used to run the node. You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/173913.html) operation to query the available resource groups in the workspace. The **Identifier** parameter in the response of the operation indicates the identifier of an available resource group.

>  You must make sure that the available resource groups in the response of the ListResourceGroups operation are associated with the workspace for which you want to create a file by calling the CreateFile operation.', example='group_375827434852437'),
  schedulerType?: string(name='SchedulerType', description='The scheduling type of the node. Valid values:

*   NORMAL: The node is an auto triggered node.
*   MANUAL: The node is a manually triggered node. Manually triggered nodes cannot be automatically triggered. They correspond to the nodes in the Manually Triggered Workflows pane.
*   PAUSE: The node is a paused node.
*   SKIP: The node is a dry-run node. Dry-run nodes are started as scheduled, but the system sets the status of the nodes to successful when it starts to run them', example='NORMAL'),
  startEffectDate?: long(name='StartEffectDate', description='The start time of automatic scheduling. Set the value to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.

Configuring this parameter is equivalent to specifying a start time for the Validity Period parameter in the Schedule section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='1671608450000'),
  startImmediately?: boolean(name='StartImmediately', description='Specifies whether to immediately run a node after the node is deployed.

This parameter is valid only for an EMR Spark Streaming node or an EMR Streaming SQL node. This parameter corresponds to the Start Method parameter in the Schedule section of the Configure tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='true'),
  stop?: boolean(name='Stop', description='Specifies whether to suspend the scheduling of the node. Valid values:

*   true
*   false

This parameter corresponds to the Recurrence parameter in the Schedule section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='false'),
  timeout?: int32(name='Timeout', description='The timeout period.', example='1'),
}

model CreateFileResponseBody = {
  data?: long(name='Data', description='The ID of the file that was created.', example='1000001'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model CreateFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFileResponseBody(name='body'),
}

/**
 * @summary Creates a file in DataStudio. You cannot call this operation to create files for Data Integration nodes.
 *
 * @param request CreateFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateFileResponse
 */
async function createFileWithOptions(request: CreateFileRequest, runtime: Util.RuntimeOptions): CreateFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.advancedSettings)) {
    body['AdvancedSettings'] = request.advancedSettings;
  }
  if (!Util.isUnset(request.applyScheduleImmediately)) {
    body['ApplyScheduleImmediately'] = request.applyScheduleImmediately;
  }
  if (!Util.isUnset(request.autoParsing)) {
    body['AutoParsing'] = request.autoParsing;
  }
  if (!Util.isUnset(request.autoRerunIntervalMillis)) {
    body['AutoRerunIntervalMillis'] = request.autoRerunIntervalMillis;
  }
  if (!Util.isUnset(request.autoRerunTimes)) {
    body['AutoRerunTimes'] = request.autoRerunTimes;
  }
  if (!Util.isUnset(request.connectionName)) {
    body['ConnectionName'] = request.connectionName;
  }
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.createFolderIfNotExists)) {
    body['CreateFolderIfNotExists'] = request.createFolderIfNotExists;
  }
  if (!Util.isUnset(request.cronExpress)) {
    body['CronExpress'] = request.cronExpress;
  }
  if (!Util.isUnset(request.cycleType)) {
    body['CycleType'] = request.cycleType;
  }
  if (!Util.isUnset(request.dependentNodeIdList)) {
    body['DependentNodeIdList'] = request.dependentNodeIdList;
  }
  if (!Util.isUnset(request.dependentType)) {
    body['DependentType'] = request.dependentType;
  }
  if (!Util.isUnset(request.endEffectDate)) {
    body['EndEffectDate'] = request.endEffectDate;
  }
  if (!Util.isUnset(request.fileDescription)) {
    body['FileDescription'] = request.fileDescription;
  }
  if (!Util.isUnset(request.fileFolderPath)) {
    body['FileFolderPath'] = request.fileFolderPath;
  }
  if (!Util.isUnset(request.fileName)) {
    body['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.fileType)) {
    body['FileType'] = request.fileType;
  }
  if (!Util.isUnset(request.ignoreParentSkipRunningProperty)) {
    body['IgnoreParentSkipRunningProperty'] = request.ignoreParentSkipRunningProperty;
  }
  if (!Util.isUnset(request.inputList)) {
    body['InputList'] = request.inputList;
  }
  if (!Util.isUnset(request.inputParameters)) {
    body['InputParameters'] = request.inputParameters;
  }
  if (!Util.isUnset(request.outputParameters)) {
    body['OutputParameters'] = request.outputParameters;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.paraValue)) {
    body['ParaValue'] = request.paraValue;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.rerunMode)) {
    body['RerunMode'] = request.rerunMode;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceGroupIdentifier)) {
    body['ResourceGroupIdentifier'] = request.resourceGroupIdentifier;
  }
  if (!Util.isUnset(request.schedulerType)) {
    body['SchedulerType'] = request.schedulerType;
  }
  if (!Util.isUnset(request.startEffectDate)) {
    body['StartEffectDate'] = request.startEffectDate;
  }
  if (!Util.isUnset(request.startImmediately)) {
    body['StartImmediately'] = request.startImmediately;
  }
  if (!Util.isUnset(request.stop)) {
    body['Stop'] = request.stop;
  }
  if (!Util.isUnset(request.timeout)) {
    body['Timeout'] = request.timeout;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a file in DataStudio. You cannot call this operation to create files for Data Integration nodes.
 *
 * @param request CreateFileRequest
 * @return CreateFileResponse
 */
async function createFile(request: CreateFileRequest): CreateFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFileWithOptions(request, runtime);
}

model CreateFolderRequest {
  folderPath?: string(name='FolderPath', description='The path of the folder.

This parameter is required.', example='Business_process/System_Data/MaxCompute/import_layer'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the DataWorks console and go to the Workspace page to query the ID. You must configure either this parameter or the **ProjectIdentifier** parameter to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace page to obtain the workspace name. You must configure either this parameter or the **ProjectId** parameter to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model CreateFolderResponseBody = {
  data?: string(name='Data', description='The ID of the request. You can use the ID to troubleshoot issues.', example='bdfd68****'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='Indicates whether the request was successful.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The unique identifier of the folder.', example='200'),
  requestId?: string(name='RequestId', description='The error message returned.', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', description='The error code returned.', example='true'),
}

model CreateFolderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFolderResponseBody(name='body'),
}

/**
 * @summary The operation that you want to perform. Set the value to \\*\\*CreateFolder\\*\\*.
 *
 * @param request CreateFolderRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateFolderResponse
 */
async function createFolderWithOptions(request: CreateFolderRequest, runtime: Util.RuntimeOptions): CreateFolderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderPath)) {
    body['FolderPath'] = request.folderPath;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateFolder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary The operation that you want to perform. Set the value to \\*\\*CreateFolder\\*\\*.
 *
 * @param request CreateFolderRequest
 * @return CreateFolderResponse
 */
async function createFolder(request: CreateFolderRequest): CreateFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFolderWithOptions(request, runtime);
}

model CreateImportMigrationRequest {
  calculateEngineMap?: string(name='CalculateEngineMap', description='The mapping between the source compute engine instance and the destination compute engine instance. The following types of compute engine instances are supported: MaxCompute, E-MapReduce (EMR), Hadoop CDH, and Hologres.', example='{     "ODPS": {       "zxy_8221431_engine": "wzp_kaifazheban_engine"     },     "EMR": {         "aaaa": "bbb"     }   }'),
  commitRule?: string(name='CommitRule', description='The rule configured for automatically committing and deploying the import task. The rule contains the following parameters:

*   resourceAutoCommit: specifies whether resources are automatically committed. The value true indicates yes and the value false indicates no.
*   resourceAutoDeploy: specifies whether resources are automatically deployed. The value true indicates yes and the value false indicates no.
*   functionAutoCommit: specifies whether the function is automatically committed. The value true indicates yes and the value false indicates no.
*   functionAutoDeploy: specifies whether the function is automatically deployed. The value true indicates yes and the value false indicates no.
*   tableAutoCommitToDev: specifies whether the table is automatically committed to the development environment. The value true indicates yes and the value false indicates no.
*   tableAutoCommitToProd: specifies whether the table is automatically committed to the production environment. The value true indicates yes and the value false indicates no.
*   ignoreLock: specifies whether the lock is automatically ignored when an import task is locked. The value true indicates yes and the value false indicates no. If you set this parameter to true for an import task, you can forcefully update the task even if the task is locked.
*   fileAutoCommit: specifies whether the file is automatically committed. The value true indicates yes and the value false indicates no.
*   fileAutoDeploy: specifies whether the file is automatically deployed. The value true indicates yes and the value false indicates no.', example='{     "resourceAutoCommit": false,     "resourceAutoDeploy": false,     "functionAutoCommit": false,     "functionAutoDeploy": false,     "tableAutoCommitToDev": false,     "tableAutoCommitToProd": false,     "ignoreLock": false,     "fileAutoCommit": false,     "fileAutoDeploy": false   }'),
  description?: string(name='Description', description='The description of the import package.', example='test description'),
  name?: string(name='Name', description='The name of the import task. The name must be unique within the workspace.

This parameter is required.', example='test_import_001'),
  packageFile?: string(name='PackageFile', description='The path of the import package. **The import package must be uploaded. Example of the upload method:**

```java
        Config config = new Config();
        config.setAccessKeyId(accessId);
        config.setAccessKeySecret(accessKey);
        config.setEndpoint(popEndpoint);
        config.setRegionId(regionId);

        Client client = new Client(config);

        CreateImportMigrationAdvanceRequest request = new CreateImportMigrationAdvanceRequest();
        request.setName("test_migration_api_" + System.currentTimeMillis());
        request.setProjectId(123456L); 
        request.setPackageType("DATAWORKS_MODEL");
        request.setPackageFileObject(new FileInputStream("/home/admin/Downloads/test.zip"));

        RuntimeOptions runtime = new RuntimeOptions();
        CreateImportMigrationResponse response = client.createImportMigrationAdvance(request, runtime);
```

This parameter is required.', example='/home/admin/xxx/import.zip'),
  packageType?: string(name='PackageType', description='The type of the import package. Valid values:

*   DATAWORKS_MODEL (standard format)
*   DATAWORKS_V2 (Apsara Stack DataWorks V3.6.1 to V3.11)
*   DATAWORKS_V3 (Apsara Stack DataWorks V3.12 and later)

This parameter is required.', example='DATAWORKS_MODEL'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the DataWorks console and go to the Workspace page to obtain the workspace ID.

This parameter is required.', example='123456'),
  resourceGroupMap?: string(name='ResourceGroupMap', description='The mapping between the resource group for scheduling and the resource group for Data Integration. The keys and values in the mapping are the identifiers of the resource groups. Specify the mapping in the following format:

```json
{
    "SCHEDULER_RESOURCE_GROUP": {
        "xxx": "yyy"
    },
    "DI_RESOURCE_GROUP": {
        "ccc": "dfdd"
    }
}
```', example='{"SCHEDULER_RESOURCE_GROUP": {"xxx":"yyy"},"DI_RESOURCE_GROUP":{"ccc":"ddd"}}'),
  workspaceMap?: string(name='WorkspaceMap', description='The mapping between the prefixes for the names of the source and destination workspaces. When the system performs the import operation, the prefix for the name of the source workspace in the import package is replaced based on the mapping.', example='{"test_workspace_src": "test_workspace_target"}'),
}

model CreateImportMigrationAdvanceRequest {
  calculateEngineMap?: string(name='CalculateEngineMap', description='The mapping between the source compute engine instance and the destination compute engine instance. The following types of compute engine instances are supported: MaxCompute, E-MapReduce (EMR), Hadoop CDH, and Hologres.', example='{     "ODPS": {       "zxy_8221431_engine": "wzp_kaifazheban_engine"     },     "EMR": {         "aaaa": "bbb"     }   }'),
  commitRule?: string(name='CommitRule', description='The rule configured for automatically committing and deploying the import task. The rule contains the following parameters:

*   resourceAutoCommit: specifies whether resources are automatically committed. The value true indicates yes and the value false indicates no.
*   resourceAutoDeploy: specifies whether resources are automatically deployed. The value true indicates yes and the value false indicates no.
*   functionAutoCommit: specifies whether the function is automatically committed. The value true indicates yes and the value false indicates no.
*   functionAutoDeploy: specifies whether the function is automatically deployed. The value true indicates yes and the value false indicates no.
*   tableAutoCommitToDev: specifies whether the table is automatically committed to the development environment. The value true indicates yes and the value false indicates no.
*   tableAutoCommitToProd: specifies whether the table is automatically committed to the production environment. The value true indicates yes and the value false indicates no.
*   ignoreLock: specifies whether the lock is automatically ignored when an import task is locked. The value true indicates yes and the value false indicates no. If you set this parameter to true for an import task, you can forcefully update the task even if the task is locked.
*   fileAutoCommit: specifies whether the file is automatically committed. The value true indicates yes and the value false indicates no.
*   fileAutoDeploy: specifies whether the file is automatically deployed. The value true indicates yes and the value false indicates no.', example='{     "resourceAutoCommit": false,     "resourceAutoDeploy": false,     "functionAutoCommit": false,     "functionAutoDeploy": false,     "tableAutoCommitToDev": false,     "tableAutoCommitToProd": false,     "ignoreLock": false,     "fileAutoCommit": false,     "fileAutoDeploy": false   }'),
  description?: string(name='Description', description='The description of the import package.', example='test description'),
  name?: string(name='Name', description='The name of the import task. The name must be unique within the workspace.

This parameter is required.', example='test_import_001'),
  packageFileObject?: readable(name='PackageFile', description='The path of the import package. **The import package must be uploaded. Example of the upload method:**

```java
        Config config = new Config();
        config.setAccessKeyId(accessId);
        config.setAccessKeySecret(accessKey);
        config.setEndpoint(popEndpoint);
        config.setRegionId(regionId);

        Client client = new Client(config);

        CreateImportMigrationAdvanceRequest request = new CreateImportMigrationAdvanceRequest();
        request.setName("test_migration_api_" + System.currentTimeMillis());
        request.setProjectId(123456L); 
        request.setPackageType("DATAWORKS_MODEL");
        request.setPackageFileObject(new FileInputStream("/home/admin/Downloads/test.zip"));

        RuntimeOptions runtime = new RuntimeOptions();
        CreateImportMigrationResponse response = client.createImportMigrationAdvance(request, runtime);
```

This parameter is required.', example='/home/admin/xxx/import.zip'),
  packageType?: string(name='PackageType', description='The type of the import package. Valid values:

*   DATAWORKS_MODEL (standard format)
*   DATAWORKS_V2 (Apsara Stack DataWorks V3.6.1 to V3.11)
*   DATAWORKS_V3 (Apsara Stack DataWorks V3.12 and later)

This parameter is required.', example='DATAWORKS_MODEL'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the DataWorks console and go to the Workspace page to obtain the workspace ID.

This parameter is required.', example='123456'),
  resourceGroupMap?: string(name='ResourceGroupMap', description='The mapping between the resource group for scheduling and the resource group for Data Integration. The keys and values in the mapping are the identifiers of the resource groups. Specify the mapping in the following format:

```json
{
    "SCHEDULER_RESOURCE_GROUP": {
        "xxx": "yyy"
    },
    "DI_RESOURCE_GROUP": {
        "ccc": "dfdd"
    }
}
```', example='{"SCHEDULER_RESOURCE_GROUP": {"xxx":"yyy"},"DI_RESOURCE_GROUP":{"ccc":"ddd"}}'),
  workspaceMap?: string(name='WorkspaceMap', description='The mapping between the prefixes for the names of the source and destination workspaces. When the system performs the import operation, the prefix for the name of the source workspace in the import package is replaced based on the mapping.', example='{"test_workspace_src": "test_workspace_target"}'),
}

model CreateImportMigrationResponseBody = {
  data?: long(name='Data', description='The import task ID. The ID is used as an input parameter if you want the system to run the import task or you want to obtain the running progress of the import task.', example='123456'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='110001123456'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='test error message'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='ADFASDFASDFA-ADFASDF-ASDFADSDF-AFFADS'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateImportMigrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateImportMigrationResponseBody(name='body'),
}

/**
 * @summary Creates an import task. The import task contains the import packages of data sources, nodes, and tables.
 *
 * @description The import package must be uploaded. Example of the upload method:
 *         Config config = new Config();
 *         config.setAccessKeyId(accessId);
 *         config.setAccessKeySecret(accessKey);
 *         config.setEndpoint(popEndpoint);
 *         config.setRegionId(regionId);
 *         
 *         Client client = new Client(config);
 *         CreateImportMigrationAdvanceRequest request = new CreateImportMigrationAdvanceRequest();
 *         request.setName("test_migration_api_" + System.currentTimeMillis());
 *         request.setProjectId(123456L); 
 *         request.setPackageType("DATAWORKS_MODEL");
 *         request.setPackageFileObject(new FileInputStream("/home/admin/Downloads/test.zip"));
 *         RuntimeOptions runtime = new RuntimeOptions();
 *         CreateImportMigrationResponse response = client.createImportMigrationAdvance(request, runtime);
 *         ...
 *
 * @param request CreateImportMigrationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateImportMigrationResponse
 */
async function createImportMigrationWithOptions(request: CreateImportMigrationRequest, runtime: Util.RuntimeOptions): CreateImportMigrationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.calculateEngineMap)) {
    body['CalculateEngineMap'] = request.calculateEngineMap;
  }
  if (!Util.isUnset(request.commitRule)) {
    body['CommitRule'] = request.commitRule;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.packageFile)) {
    body['PackageFile'] = request.packageFile;
  }
  if (!Util.isUnset(request.packageType)) {
    body['PackageType'] = request.packageType;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.resourceGroupMap)) {
    body['ResourceGroupMap'] = request.resourceGroupMap;
  }
  if (!Util.isUnset(request.workspaceMap)) {
    body['WorkspaceMap'] = request.workspaceMap;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateImportMigration',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates an import task. The import task contains the import packages of data sources, nodes, and tables.
 *
 * @description The import package must be uploaded. Example of the upload method:
 *         Config config = new Config();
 *         config.setAccessKeyId(accessId);
 *         config.setAccessKeySecret(accessKey);
 *         config.setEndpoint(popEndpoint);
 *         config.setRegionId(regionId);
 *         
 *         Client client = new Client(config);
 *         CreateImportMigrationAdvanceRequest request = new CreateImportMigrationAdvanceRequest();
 *         request.setName("test_migration_api_" + System.currentTimeMillis());
 *         request.setProjectId(123456L); 
 *         request.setPackageType("DATAWORKS_MODEL");
 *         request.setPackageFileObject(new FileInputStream("/home/admin/Downloads/test.zip"));
 *         RuntimeOptions runtime = new RuntimeOptions();
 *         CreateImportMigrationResponse response = client.createImportMigrationAdvance(request, runtime);
 *         ...
 *
 * @param request CreateImportMigrationRequest
 * @return CreateImportMigrationResponse
 */
async function createImportMigration(request: CreateImportMigrationRequest): CreateImportMigrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImportMigrationWithOptions(request, runtime);
}

async function createImportMigrationAdvance(request: CreateImportMigrationAdvanceRequest, runtime: Util.RuntimeOptions): CreateImportMigrationResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.empty(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApi.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'dataworks-public',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var createImportMigrationReq = new CreateImportMigrationRequest{};
  OpenApiUtil.convert(request, createImportMigrationReq);

  if(!Util.isUnset(request.packageFileObject)) {
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.body.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.body.endpoint, authResponse.body.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.body.objectKey,
      content = request.packageFileObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.body.accessKeyId,
      policy = authResponse.body.encodedPolicy,
      signature = authResponse.body.signature,
      key = authResponse.body.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.body.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    createImportMigrationReq.packageFile = `http://${authResponse.body.bucket}.${authResponse.body.endpoint}/${authResponse.body.objectKey}`;
  }
  var createImportMigrationResp = createImportMigrationWithOptions(createImportMigrationReq, runtime);
  return createImportMigrationResp;
}

model CreateManualDagRequest {
  bizDate?: string(name='BizDate', description='The data timestamp. The value of the data timestamp must be one or more days before the current date. For example, if the current date is November 11, 2020, set the value to 2020-11-10 00:00:00 or earlier. Configure this parameter in the YYYY-MM-DD 00:00:00 format.

This parameter is required.', example='2020-11-11 00:00:00'),
  dagParameters?: string(name='DagParameters', description='The parameters of the manually triggered workflow, which are synchronized to all the instances in the directed acyclic graph (DAG) of the workflow. If a workflow parameter specified in DagParameters is referenced as a scheduling parameter of a node, the value of the scheduling parameter is replaced with the value of the workflow parameter.', example='{"kaaaa": "vaaaaa", "kbbbb": "vbbbbb"}'),
  excludeNodeIds?: string(name='ExcludeNodeIds', description='The IDs of the nodes that do not need to be run.', example='123,456'),
  flowName?: string(name='FlowName', description='The name of the manually triggered workflow.

This parameter is required.', example='test_workflow'),
  includeNodeIds?: string(name='IncludeNodeIds', description='The IDs of the nodes that you want to run.', example='74324,74325'),
  nodeParameters?: string(name='NodeParameters', description='The parameters transmitted between nodes in the manually triggered workflow. The parameters are in the following JSON format: `{ "<ID of a node in the manually triggered workflow>": "Scheduling parameter settings of the node, which are in the same format as the parameters in the Scheduling Parameter section on the Properties tab of the DataStudio page", "<ID of a node in the manually triggered workflow>": "Scheduling parameter settings of the node, which are in the same format as the parameters in the Scheduling Parameter section on the Properties tab of the DataStudio page" }`', example='{"20000123121": "key1=val2 key2=val2", "20000123124": "kkkk=vvvvv aaaa=bbbb"}'),
  projectEnv?: string(name='ProjectEnv', description='The environment type of Operation Center. Valid values: PROD and DEV.

This parameter is required.'),
  projectName?: string(name='ProjectName', description='The name of the workspace to which the manually triggered workflow belongs.

This parameter is required.', example='test_workspace'),
}

model CreateManualDagResponseBody = {
  dagId?: long(name='DagId', description='The ID of the DAG for the manually triggered workflow. You can call an operation with this parameter as a request parameter to query the details and states of the nodes in the manually triggered workflow.', example='700000123123141'),
  requestId?: string(name='RequestId', description='The request ID.', example='AASFDFSDFG-DFSDF-DFSDFD-SDFSDF'),
}

model CreateManualDagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateManualDagResponseBody(name='body'),
}

/**
 * @deprecated OpenAPI CreateManualDag is deprecated
 *
 * @summary Triggers a manually triggered workflow to run. Before you call this operation, make sure that the manually triggered workflow is committed and deployed. You can find the manually triggered workflow on the Operation Center page only after the manually triggered workflow is committed and deployed.
 *
 * @param request CreateManualDagRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateManualDagResponse
 */
// Deprecated
async function createManualDagWithOptions(request: CreateManualDagRequest, runtime: Util.RuntimeOptions): CreateManualDagResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizDate)) {
    body['BizDate'] = request.bizDate;
  }
  if (!Util.isUnset(request.dagParameters)) {
    body['DagParameters'] = request.dagParameters;
  }
  if (!Util.isUnset(request.excludeNodeIds)) {
    body['ExcludeNodeIds'] = request.excludeNodeIds;
  }
  if (!Util.isUnset(request.flowName)) {
    body['FlowName'] = request.flowName;
  }
  if (!Util.isUnset(request.includeNodeIds)) {
    body['IncludeNodeIds'] = request.includeNodeIds;
  }
  if (!Util.isUnset(request.nodeParameters)) {
    body['NodeParameters'] = request.nodeParameters;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateManualDag',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @deprecated OpenAPI CreateManualDag is deprecated
 *
 * @summary Triggers a manually triggered workflow to run. Before you call this operation, make sure that the manually triggered workflow is committed and deployed. You can find the manually triggered workflow on the Operation Center page only after the manually triggered workflow is committed and deployed.
 *
 * @param request CreateManualDagRequest
 * @return CreateManualDagResponse
 */
// Deprecated
async function createManualDag(request: CreateManualDagRequest): CreateManualDagResponse {
  var runtime = new Util.RuntimeOptions{};
  return createManualDagWithOptions(request, runtime);
}

model CreateMetaCategoryRequest {
  comment?: string(name='Comment', description='The remarks of the category.', example='category 1'),
  name?: string(name='Name', description='The name of the category.

This parameter is required.', example='category_name'),
  parentId?: long(name='ParentId', description='The ID of the parent category.', example='0'),
}

model CreateMetaCategoryResponseBody = {
  data?: {
    categoryId?: long(name='CategoryId', description='The category ID.', example='223'),
  }(name='Data', description='The information about the category.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateMetaCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMetaCategoryResponseBody(name='body'),
}

/**
 * @summary Creates a category.
 *
 * @param request CreateMetaCategoryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateMetaCategoryResponse
 */
async function createMetaCategoryWithOptions(request: CreateMetaCategoryRequest, runtime: Util.RuntimeOptions): CreateMetaCategoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.parentId)) {
    body['ParentId'] = request.parentId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateMetaCategory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a category.
 *
 * @param request CreateMetaCategoryRequest
 * @return CreateMetaCategoryResponse
 */
async function createMetaCategory(request: CreateMetaCategoryRequest): CreateMetaCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMetaCategoryWithOptions(request, runtime);
}

model CreateMetaCollectionRequest {
  collectionType?: string(name='CollectionType', description='The type of the collection.

This parameter is required.', example='ALBUM'),
  comment?: string(name='Comment', description='The comment of the collection. The comment must be 1 to 64 characters in length.', example='this is a comment'),
  name?: string(name='Name', description='The name of the collection. The name must be 1 to 32 characters in length.

This parameter is required.', example='collection_name'),
  parentQualifiedName?: string(name='ParentQualifiedName', description='The unique identifier of the parent collection.', example='album.333508'),
}

model CreateMetaCollectionResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='NoPermission'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified parameters are invalid.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  qualifiedName?: string(name='QualifiedName', description='The unique identifier of the collection.', example='album.11111'),
  requestId?: string(name='RequestId', description='The request ID.', example='E6F0DBDD-5AD****'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model CreateMetaCollectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMetaCollectionResponseBody(name='body'),
}

/**
 * @summary Creates a collection.
 *
 * @description Collections are classified into various types. The names of collections of the same type must be different.
 *
 * @param request CreateMetaCollectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateMetaCollectionResponse
 */
async function createMetaCollectionWithOptions(request: CreateMetaCollectionRequest, runtime: Util.RuntimeOptions): CreateMetaCollectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.collectionType)) {
    query['CollectionType'] = request.collectionType;
  }
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.parentQualifiedName)) {
    query['ParentQualifiedName'] = request.parentQualifiedName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateMetaCollection',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a collection.
 *
 * @description Collections are classified into various types. The names of collections of the same type must be different.
 *
 * @param request CreateMetaCollectionRequest
 * @return CreateMetaCollectionResponse
 */
async function createMetaCollection(request: CreateMetaCollectionRequest): CreateMetaCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMetaCollectionWithOptions(request, runtime);
}

model CreatePermissionApplyOrderRequest {
  applyObject?: [ 
    {
      actions?: string(name='Actions', description='The permission that you want to request. If you want to request multiple permissions at the same time, separate them with commas (,). You can request only the following permissions: Select, Describe, Drop, Alter, Update, and Download.

This parameter is required.', example='Select,Describe'),
      columnMetaList?: [ 
        {
          name?: string(name='Name', description='The field on which you want to request permissions. If you want to request permissions on an entire table, enter all fields in the table. You can request permissions on specific fields of a table in a MaxCompute project only after LabelSecurity is enabled for this project. If LabelSecurity is disabled, you can request permissions only on an entire table.

This parameter is required.', example='aColumnName'),
        }
      ](name='ColumnMetaList', description='The fields on which you want to request permissions.

This parameter is required.'),
      name?: string(name='Name', description='The name of the object on which you want to request permissions. You can request permissions only on MaxCompute tables. Set this parameter to the name of the table on which you want to request permissions.

This parameter is required.', example='aTableName'),
    }
  ](name='ApplyObject', description='The objects on which you want to request permissions.

This parameter is required.'),
  applyReason?: string(name='ApplyReason', description='The reason for your request. The administrator determines whether to approve the request based on the reason.

This parameter is required.', example='I need to use this table'),
  applyUserIds?: string(name='ApplyUserIds', description='The ID of the Alibaba Cloud account for which you want to request permissions. If you want to request permissions for multiple Alibaba Cloud accounts, separate the IDs of the accounts with commas (,).

This parameter is required.', example='267842600408993176,267842600408993177'),
  deadline?: long(name='Deadline', description='The expiration time of the permissions that you request. This value is a UNIX timestamp. The default value is January 1, 2065. If LabelSecurity is disabled for the MaxCompute project in which you want to request permissions on the fields of a table, or the security level of the fields is 0 or is lower than or equal to the security level of the Alibaba Cloud account for which you want to request permissions, you can request only permanent permissions. You can go to the Workspace Management page in the DataWorks console, click MaxCompute Management in the left-side navigation pane, and then check whether column-level access control is enabled. You can go to your DataWorks workspace, view the security level of the fields in Data Map, and then view the security level of the Alibaba Cloud account on the User Management page.', example='1617115071885'),
  engineType?: string(name='EngineType', description='The type of the compute engine in which you want to request permissions on the fields of a table. The parameter value is odps and cannot be changed. This value indicates that you can request permissions only on fields of tables in the MaxCompute compute engine.', example='odps'),
  maxComputeProjectName?: string(name='MaxComputeProjectName', description='The name of the MaxCompute project in which you request permissions on the fields of a table.

This parameter is required.', example='aMaxcomputeProjectName'),
  orderType?: int32(name='OrderType', description='The type of the permission request order. The parameter value is 1 and cannot be changed. This value indicates ACL-based authorization.', example='1'),
  workspaceId?: int32(name='WorkspaceId', description='The ID of the DataWorks workspace that is associated with the MaxCompute project in which you want to request permissions on the fields of a table. You can go to the SettingCenter page in the DataWorks console to view the workspace ID.

This parameter is required.', example='12345'),
}

model CreatePermissionApplyOrderResponseBody = {
  flowId?: [ string ](name='FlowId', description='The request order ID.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1ec92159376****'),
}

model CreatePermissionApplyOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePermissionApplyOrderResponseBody(name='body'),
}

/**
 * @summary Creates a permission request order.
 *
 * @param request CreatePermissionApplyOrderRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreatePermissionApplyOrderResponse
 */
async function createPermissionApplyOrderWithOptions(request: CreatePermissionApplyOrderRequest, runtime: Util.RuntimeOptions): CreatePermissionApplyOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applyObject)) {
    query['ApplyObject'] = request.applyObject;
  }
  if (!Util.isUnset(request.applyReason)) {
    query['ApplyReason'] = request.applyReason;
  }
  if (!Util.isUnset(request.applyUserIds)) {
    query['ApplyUserIds'] = request.applyUserIds;
  }
  if (!Util.isUnset(request.deadline)) {
    query['Deadline'] = request.deadline;
  }
  if (!Util.isUnset(request.engineType)) {
    query['EngineType'] = request.engineType;
  }
  if (!Util.isUnset(request.maxComputeProjectName)) {
    query['MaxComputeProjectName'] = request.maxComputeProjectName;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreatePermissionApplyOrder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a permission request order.
 *
 * @param request CreatePermissionApplyOrderRequest
 * @return CreatePermissionApplyOrderResponse
 */
async function createPermissionApplyOrder(request: CreatePermissionApplyOrderRequest): CreatePermissionApplyOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPermissionApplyOrderWithOptions(request, runtime);
}

model CreateProjectRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. This parameter can be left empty.', example='ABFUOEUOTRTRJKE'),
  disableDevelopment?: boolean(name='DisableDevelopment', description='Specifies whether to disable the Develop role. Valid values:

*   **false** (default)
*   **true**', example='false'),
  isAllowDownload?: int32(name='IsAllowDownload', description='Specifies whether to allow you to download the query result from DataStudio. Valid values:

*   **1** (default): allows you to download the query result from DataStudio.
*   **0**: does not allow you to download the query result from DataStudio.', example='1'),
  projectDescription?: string(name='ProjectDescription', description='The description of the workspace.', example='test_describe'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the workspace. The name can contain only letters, digits, and underscores (_) and must start with a letter or digit.

This parameter is required.', example='test_project'),
  projectMode?: int32(name='ProjectMode', description='The mode of the workspace. For more information about the differences between the modes of workspaces, see [Differences between workspaces in basic mode and workspaces in standard mode](https://help.aliyun.com/document_detail/85772.html).

Valid values:

*   **2** (default): basic mode
*   **3**: standard mode', example='3'),
  projectName?: string(name='ProjectName', description='The display name of the workspace.

This parameter is required.', example='test_project'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The resource group ID.', example='rg-acfmzbn7pti3****'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.

This parameter is required.', example='key'),
      value?: string(name='Value', description='The tag value.

This parameter is required.', example='value'),
    }
  ](name='Tags', description='The tags added to the workspace.'),
}

model CreateProjectShrinkRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. This parameter can be left empty.', example='ABFUOEUOTRTRJKE'),
  disableDevelopment?: boolean(name='DisableDevelopment', description='Specifies whether to disable the Develop role. Valid values:

*   **false** (default)
*   **true**', example='false'),
  isAllowDownload?: int32(name='IsAllowDownload', description='Specifies whether to allow you to download the query result from DataStudio. Valid values:

*   **1** (default): allows you to download the query result from DataStudio.
*   **0**: does not allow you to download the query result from DataStudio.', example='1'),
  projectDescription?: string(name='ProjectDescription', description='The description of the workspace.', example='test_describe'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the workspace. The name can contain only letters, digits, and underscores (_) and must start with a letter or digit.

This parameter is required.', example='test_project'),
  projectMode?: int32(name='ProjectMode', description='The mode of the workspace. For more information about the differences between the modes of workspaces, see [Differences between workspaces in basic mode and workspaces in standard mode](https://help.aliyun.com/document_detail/85772.html).

Valid values:

*   **2** (default): basic mode
*   **3**: standard mode', example='3'),
  projectName?: string(name='ProjectName', description='The display name of the workspace.

This parameter is required.', example='test_project'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The resource group ID.', example='rg-acfmzbn7pti3****'),
  tagsShrink?: string(name='Tags', description='The tags added to the workspace.'),
}

model CreateProjectResponseBody = {
  data?: long(name='Data', description='The workspace ID.', example='466230'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='1AFAE64E-D1BE-432B-A9****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model CreateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProjectResponseBody(name='body'),
}

/**
 * @summary Creates a DataWorks workspace.
 *
 * @param tmpReq CreateProjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateProjectResponse
 */
async function createProjectWithOptions(tmpReq: CreateProjectRequest, runtime: Util.RuntimeOptions): CreateProjectResponse {
  Util.validateModel(tmpReq);
  var request = new CreateProjectShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.disableDevelopment)) {
    query['DisableDevelopment'] = request.disableDevelopment;
  }
  if (!Util.isUnset(request.isAllowDownload)) {
    query['IsAllowDownload'] = request.isAllowDownload;
  }
  if (!Util.isUnset(request.projectDescription)) {
    query['ProjectDescription'] = request.projectDescription;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    query['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.projectMode)) {
    query['ProjectMode'] = request.projectMode;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateProject',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a DataWorks workspace.
 *
 * @param request CreateProjectRequest
 * @return CreateProjectResponse
 */
async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProjectWithOptions(request, runtime);
}

model CreateProjectMemberRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. We recommend that you set this parameter to a UUID.', example='1AFAE64E-D1BE-432B-A9****'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.

This parameter is required.', example='27'),
  roleCode?: string(name='RoleCode', description='The code of the role. This parameter is optional. If you configure the RoleCode parameter, the user is assigned the role.', example='role_project_guest'),
  userId?: string(name='UserId', description='The ID of the user to be added.

This parameter is required.', example='1234'),
}

model CreateProjectMemberResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1AFAE64E-D1BE-432B-A9****'),
}

model CreateProjectMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProjectMemberResponseBody(name='body'),
}

/**
 * @summary Adds a user to a DataWorks workspace.
 *
 * @param request CreateProjectMemberRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateProjectMemberResponse
 */
async function createProjectMemberWithOptions(request: CreateProjectMemberRequest, runtime: Util.RuntimeOptions): CreateProjectMemberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.roleCode)) {
    query['RoleCode'] = request.roleCode;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateProjectMember',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Adds a user to a DataWorks workspace.
 *
 * @param request CreateProjectMemberRequest
 * @return CreateProjectMemberResponse
 */
async function createProjectMember(request: CreateProjectMemberRequest): CreateProjectMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProjectMemberWithOptions(request, runtime);
}

model CreateQualityEntityRequest {
  entityLevel?: int32(name='EntityLevel', description='This parameter is deprecated.

The value 0 indicates that the partition filter expression is at the SQL level, and the system checks data quality after each SQL statement is executed.

* 0
* 1', example='0'),
  envType?: string(name='EnvType', description='The type of the compute engine or data source.

Valid values:

*   odps
*   emr
*   hadoop
*   cdh
*   analyticdb_for_mysql
*   hybriddb_for_postgresql
*   holodb

This parameter is required.', example='ODPS'),
  matchExpression?: string(name='MatchExpression', description='The partition filter expression.

This parameter is required.', example='dt=$[yyyymmdd]'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the DataWorks console to query the ID.', example='123'),
  projectName?: string(name='ProjectName', description='The name of the compute engine or data source.

This parameter is required.', example='autotest'),
  tableName?: string(name='TableName', description='The name of the table.

This parameter is required.', example='dual'),
}

model CreateQualityEntityResponseBody = {
  data?: int32(name='Data', description='The partition filter expression ID.', example='12345'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='401'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Your project is not relative with your account.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='011e1231u3****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateQualityEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateQualityEntityResponseBody(name='body'),
}

/**
 * @summary Creates a partition filter expression.
 *
 * @param request CreateQualityEntityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateQualityEntityResponse
 */
async function createQualityEntityWithOptions(request: CreateQualityEntityRequest, runtime: Util.RuntimeOptions): CreateQualityEntityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.entityLevel)) {
    body['EntityLevel'] = request.entityLevel;
  }
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.matchExpression)) {
    body['MatchExpression'] = request.matchExpression;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.tableName)) {
    body['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateQualityEntity',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a partition filter expression.
 *
 * @param request CreateQualityEntityRequest
 * @return CreateQualityEntityResponse
 */
async function createQualityEntity(request: CreateQualityEntityRequest): CreateQualityEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return createQualityEntityWithOptions(request, runtime);
}

model CreateQualityFollowerRequest {
  alarmMode?: int32(name='AlarmMode', description='The notification method. Valid values: 1, 2, 4, 5, 6, 7, 8, and 9. The value 1 indicates that the notification is sent by email. The value 2 indicates that the notification is sent by email and text message. The value 4 indicates that the notification is sent by a DingTalk chatbot. The value 5 indicates that the notification is sent by a DingTalk chatbot to all members in a DingTalk group. The value 6 indicates that the notification is sent by Lark. The value 7 indicates that the notification is sent by WeCom. The value 8 indicates that the notification is sent by webhook. The value 9 indicates that the notification is sent by phone call.

This parameter is required.', example='1'),
  entityId?: long(name='EntityId', description='The ID of the partition filter expression.

This parameter is required.', example='12345'),
  follower?: string(name='Follower', description='The account ID of the subscriber.

This parameter is required.', example='123'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the DataWorks console to query the ID.', example='123'),
  projectName?: string(name='ProjectName', description='The name of the compute engine or data source.

This parameter is required.', example='autotest'),
}

model CreateQualityFollowerResponseBody = {
  data?: int32(name='Data', description='The ID of the subscription relationship.', example='12345'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='401'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='ecb967ec-c137-48****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateQualityFollowerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateQualityFollowerResponseBody(name='body'),
}

/**
 * @summary Creates a subscriber for a partition filter expression.
 *
 * @param request CreateQualityFollowerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateQualityFollowerResponse
 */
async function createQualityFollowerWithOptions(request: CreateQualityFollowerRequest, runtime: Util.RuntimeOptions): CreateQualityFollowerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alarmMode)) {
    body['AlarmMode'] = request.alarmMode;
  }
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.follower)) {
    body['Follower'] = request.follower;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateQualityFollower',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a subscriber for a partition filter expression.
 *
 * @param request CreateQualityFollowerRequest
 * @return CreateQualityFollowerResponse
 */
async function createQualityFollower(request: CreateQualityFollowerRequest): CreateQualityFollowerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createQualityFollowerWithOptions(request, runtime);
}

model CreateQualityRelativeNodeRequest {
  envType?: string(name='EnvType', description='The type of the compute engine or data source.

This parameter is required.', example='ODPS'),
  matchExpression?: string(name='MatchExpression', description='The partition filter expression.

This parameter is required.', example='dt=$[yyyymmdd]'),
  nodeId?: long(name='NodeId', description='The node ID. You can call the [ListNodes](https://help.aliyun.com/document_detail/173979.html) operation to query the ID.

This parameter is required.', example='12321'),
  projectId?: long(name='ProjectId', description='The workspace ID.

This parameter is required.', example='123'),
  projectName?: string(name='ProjectName', description='The name of the compute engine or data source.

This parameter is required.', example='autotest'),
  tableName?: string(name='TableName', description='The name of the table.

This parameter is required.', example='dual'),
  targetNodeProjectId?: long(name='TargetNodeProjectId', description='The ID of the workspace to which the node belongs.

This parameter is required.', example='1234'),
  targetNodeProjectName?: string(name='TargetNodeProjectName', description='The name of the workspace to which the node to be associated with the partition filter expression belongs.

This parameter is required.', example='autotest'),
}

model CreateQualityRelativeNodeResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the node is associated with the partition filter expression.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='401'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='ecb967ec-c137-48****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateQualityRelativeNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateQualityRelativeNodeResponseBody(name='body'),
}

/**
 * @summary Associates a node with a partition filter expression.
 *
 * @param request CreateQualityRelativeNodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateQualityRelativeNodeResponse
 */
async function createQualityRelativeNodeWithOptions(request: CreateQualityRelativeNodeRequest, runtime: Util.RuntimeOptions): CreateQualityRelativeNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.matchExpression)) {
    body['MatchExpression'] = request.matchExpression;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.tableName)) {
    body['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.targetNodeProjectId)) {
    body['TargetNodeProjectId'] = request.targetNodeProjectId;
  }
  if (!Util.isUnset(request.targetNodeProjectName)) {
    body['TargetNodeProjectName'] = request.targetNodeProjectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateQualityRelativeNode',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Associates a node with a partition filter expression.
 *
 * @param request CreateQualityRelativeNodeRequest
 * @return CreateQualityRelativeNodeResponse
 */
async function createQualityRelativeNode(request: CreateQualityRelativeNodeRequest): CreateQualityRelativeNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createQualityRelativeNodeWithOptions(request, runtime);
}

model CreateQualityRuleRequest {
  blockType?: int32(name='BlockType', description='The strength type of the monitoring rule. Valid values:

*   0: The monitoring rule is a weak rule.
*   1: The monitoring rule is a strong rule.

This parameter is required.', example='0'),
  checker?: int32(name='Checker', description='The checker ID.', example='9'),
  comment?: string(name='Comment', description='The description of the rule.', example='Verification'),
  criticalThreshold?: string(name='CriticalThreshold', description='The threshold for a critical alert. The threshold indicates the deviation of the monitoring result from the expected value. You can customize this threshold based on your business requirements. If a strong rule is used and a critical alert is triggered, nodes are blocked.', example='20'),
  entityId?: long(name='EntityId', description='The ID of the partition filter expression.

This parameter is required.', example='15224'),
  expectValue?: string(name='ExpectValue', description='The expected value.', example='0'),
  methodName?: string(name='MethodName', description='The method used to collect sample data. If you want to use a custom SQL statement as a sampling method, set this parameter to user_defined.', example='count/table_count'),
  operator?: string(name='Operator', description='The comparison operator, such as >, >=, =, ≠, <, or <=.

> If you set the Checker parameter to 9, you must configure the Operator parameter.', example='>'),
  predictType?: int32(name='PredictType', description='Specifies whether the monitoring rule is a dynamic threshold rule. Valid values: 0 and 2. The value 0 indicates that the monitoring rule is not a dynamic threshold rule. The value 2 indicates that the monitoring rule is a dynamic threshold rule.

This parameter is required.', example='0'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.', example='10000'),
  projectName?: string(name='ProjectName', description='The name of the compute engine or data source.

This parameter is required.', example='autotest'),
  property?: string(name='Property', description='The fields that you want to monitor. If you want to monitor all fields in a table and check the table rows, set this parameter to table_count. If you want to monitor all fields in a table and check the table size, set this parameter to table_size.', example='table_id'),
  propertyType?: string(name='PropertyType', description='The data type of the fields that you want to monitor. If you want to monitor all fields in a table, set this parameter to table. If you want to monitor only a specific field, set this parameter to bigint.', example='bigint'),
  ruleName?: string(name='RuleName', description='The name of the monitoring rule.

This parameter is required.', example='1234'),
  ruleType?: int32(name='RuleType', description='The type of the monitoring rule. Valid values: 0, 1, and 2. The value 0 indicates that the monitoring rule is created by the system. The value 1 indicates that the monitoring rule is created by a user. The value 2 indicates that the monitoring rule is a workspace-level rule.

This parameter is required.', example='0'),
  taskSetting?: string(name='TaskSetting', description='The variable settings inserted before the custom rule. Format: x=a,y=b.', example='x=a,y=b'),
  templateId?: int32(name='TemplateId', description='The template ID.', example='7'),
  trend?: string(name='Trend', description='The trend of the monitoring result. Valid values:

*   up: increasing
*   down: decreasing
*   abs: absolute value', example='abs'),
  warningThreshold?: string(name='WarningThreshold', description='The threshold for a warning alert. The threshold indicates the deviation of the monitoring result from the expected value. You can customize this threshold based on your business requirements.', example='10'),
  whereCondition?: string(name='WhereCondition', description='The filter condition or custom SQL statement.', example='table_id>1'),
}

model CreateQualityRuleResponseBody = {
  data?: string(name='Data', description='The ID of the monitoring rule that you created.', example='12345'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='401'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='ecb967ec-c137-48****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateQualityRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateQualityRuleResponseBody(name='body'),
}

/**
 * @summary Creates a monitoring rule.
 *
 * @param request CreateQualityRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateQualityRuleResponse
 */
async function createQualityRuleWithOptions(request: CreateQualityRuleRequest, runtime: Util.RuntimeOptions): CreateQualityRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.blockType)) {
    body['BlockType'] = request.blockType;
  }
  if (!Util.isUnset(request.checker)) {
    body['Checker'] = request.checker;
  }
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.criticalThreshold)) {
    body['CriticalThreshold'] = request.criticalThreshold;
  }
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.expectValue)) {
    body['ExpectValue'] = request.expectValue;
  }
  if (!Util.isUnset(request.methodName)) {
    body['MethodName'] = request.methodName;
  }
  if (!Util.isUnset(request.operator)) {
    body['Operator'] = request.operator;
  }
  if (!Util.isUnset(request.predictType)) {
    body['PredictType'] = request.predictType;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.property)) {
    body['Property'] = request.property;
  }
  if (!Util.isUnset(request.propertyType)) {
    body['PropertyType'] = request.propertyType;
  }
  if (!Util.isUnset(request.ruleName)) {
    body['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.ruleType)) {
    body['RuleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.taskSetting)) {
    body['TaskSetting'] = request.taskSetting;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.trend)) {
    body['Trend'] = request.trend;
  }
  if (!Util.isUnset(request.warningThreshold)) {
    body['WarningThreshold'] = request.warningThreshold;
  }
  if (!Util.isUnset(request.whereCondition)) {
    body['WhereCondition'] = request.whereCondition;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateQualityRule',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a monitoring rule.
 *
 * @param request CreateQualityRuleRequest
 * @return CreateQualityRuleResponse
 */
async function createQualityRule(request: CreateQualityRuleRequest): CreateQualityRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createQualityRuleWithOptions(request, runtime);
}

model CreateRemindRequest {
  alertInterval?: int32(name='AlertInterval', description='The minimum interval at which alerts are reported. Unit: seconds. Minimum value: 1200. Default value: 1800.', example='1800'),
  alertMethods?: string(name='AlertMethods', description='The notification method. Valid values:

*   MAIL: Alert notifications are sent by email.
*   SMS: Alert notifications are sent by text message. Alert notifications can be sent by text message only in the Singapore, Malaysia (Kuala Lumpur), and Germany (Frankfurt) regions.
*   WEBHOOKS (WeCom or Lark chatbot): Alert notifications are sent by WeCom or Lark message. If you want to use this notification method, you must configure the Webhooks parameter.

You can specify multiple notification methods. Separate them with commas (,).

This parameter is required.', example='SMS,MAIL'),
  alertTargets?: string(name='AlertTargets', description='*   If the AlertUnit parameter is set to OWNER, leave this parameter empty.
*   If the AlertUnit parameter is set to OTHER, set this parameter to the ID of the Alibaba Cloud account used by the specified user. You can specify multiple IDs. Separate multiple IDs with commas (,). You can specify a maximum of 10 IDs.', example='9527952795279527'),
  alertUnit?: string(name='AlertUnit', description='The recipient of the alert. Valid values: OWNER and OTHER. The value OWNER indicates the node owner. The value OTHER indicates a specified user.

This parameter is required.', example='OWNER'),
  baselineIds?: string(name='BaselineIds', description='The ID of the baseline to which the custom alert rule is applied. This parameter takes effect when the RemindUnit parameter is set to BASELINE. You can specify multiple IDs. Separate multiple IDs with commas (,). A maximum of five baselines can be specified for a custom alert rule.', example='1,2,3'),
  bizProcessIds?: string(name='BizProcessIds', description='The ID of the workflow to which the custom alert rule is applied. This parameter takes effect when the RemindUnit parameter is set to BIZPROCESS. You can specify multiple IDs. Separate multiple IDs with commas (,). A maximum of five workflows can be specified for a custom alert rule.', example='1,2,3'),
  detail?: string(name='Detail', description='The details of the conditions that trigger an alert.

*   If the RemindType parameter is set to FINISHED, leave this parameter empty.
*   If the RemindType parameter is set to UNFINISHED, configure this parameter as key-value pairs. Example: {"hour":23,"minu":59}. Valid values of hour: [0,47]. Valid values of minu: [0,59].
*   If the RemindType parameter is set to ERROR, leave this parameter empty.
*   If the RemindType parameter is set to CYCLE_UNFINISHED, configure this parameter as key-value pairs. Example: {"1":"05:50","2":"06:50","3":"07:50","4":"08:50","5":"09:50","6":"10:50","7":"11:50","8":"12:50","9":"13:50","10":"14:50","11":"15:50","12":"16:50","13":"17:50","14":"18:50","15":"19:50","16":"20:50","17":"21:50","18":"22:50","19":"23:50","20":"24:50","21":"25:50"}. The key indicates the ID of the cycle. Valid values: [1,288]. The value indicates the timeout period of the node that is running in the cycle. Specify the value in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].
*   If the RemindType parameter is set to TIMEOUT, set this parameter to the timeout period. Unit: seconds. Example: 1800. This value indicates that an alert is reported if the node has run for more than 30 minutes.', example='{"hour":23,"minu":59}'),
  dndEnd?: string(name='DndEnd', description='The end time of the quiet hours. Specify the time in the hh:mm format. Valid values of hh: [0,23]. Valid values of mm: [0,59].', example='08:00'),
  maxAlertTimes?: int32(name='MaxAlertTimes', description='The maximum number of alerts. Valid values: 1 to 10. Default value: 3.', example='2'),
  nodeIds?: string(name='NodeIds', description='The ID of the node to which the custom alert rule is applied. This parameter takes effect when the RemindUnit parameter is set to NODE. You can specify multiple IDs. Separate multiple IDs with commas (,). A maximum of 50 nodes can be specified for a custom alert rule.', example='1,2,3'),
  projectId?: long(name='ProjectId', description='The ID of the workspace to which the custom alert rule is applied. This parameter takes effect when the RemindUnit parameter is set to PROJECT. You can specify only one workspace for a custom alert rule.', example='9527'),
  remindName?: string(name='RemindName', description='The name of the custom alert rule. The name cannot exceed 128 characters in length.

This parameter is required.', example='test_error_remind'),
  remindType?: string(name='RemindType', description='The conditions that trigger an alert. Valid values: FINISHED, UNFINISHED, ERROR, CYCLE_UNFINISHED, and TIMEOUT.

This parameter is required.', example='FINISHED'),
  remindUnit?: string(name='RemindUnit', description='The type of the object to which the custom alert rule is applied. Valid values: NODE, BASELINE, PROJECT, and BIZPROCESS. The value NODE indicates a node. The value BASELINE indicates a baseline. The value PROJECT indicates a workspace. The value BIZPROCESS indicates a workflow.

This parameter is required.', example='NODE'),
  robotUrls?: string(name='RobotUrls', description='The webhook URL of the DingTalk chatbot. You can specify multiple webhook URLs. Separate multiple webhook URLs with commas (,).', example='https://oapi.dingtalk.com/robot/send?access_token=******************************'),
  webhooks?: string(name='Webhooks', description='The webhook URL of the WeCom or Lark chatbot. You can specify multiple webhook URLs. Separate multiple webhook URLs with commas (,). You must specify WEBHOOKS for AlertMethods.

Only DataWorks Enterprise Edition supports this parameter. The webhook URL-based alerting feature is supported in the following regions: China (Shanghai), China (Chengdu), China (Zhangjiakou), China (Beijing), China (Hangzhou), China (Shenzhen), China (Hong Kong), Germany (Frankfurt), and Singapore.', example='https://open.feishu.cn/open-apis/bot/v2/hook/*******'),
}

model CreateRemindResponseBody = {
  data?: long(name='Data', description='The ID of the custom alert rule.', example='1234'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateRemindResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRemindResponseBody(name='body'),
}

/**
 * @summary Creates a custom alert rule.
 *
 * @param request CreateRemindRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateRemindResponse
 */
async function createRemindWithOptions(request: CreateRemindRequest, runtime: Util.RuntimeOptions): CreateRemindResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertInterval)) {
    body['AlertInterval'] = request.alertInterval;
  }
  if (!Util.isUnset(request.alertMethods)) {
    body['AlertMethods'] = request.alertMethods;
  }
  if (!Util.isUnset(request.alertTargets)) {
    body['AlertTargets'] = request.alertTargets;
  }
  if (!Util.isUnset(request.alertUnit)) {
    body['AlertUnit'] = request.alertUnit;
  }
  if (!Util.isUnset(request.baselineIds)) {
    body['BaselineIds'] = request.baselineIds;
  }
  if (!Util.isUnset(request.bizProcessIds)) {
    body['BizProcessIds'] = request.bizProcessIds;
  }
  if (!Util.isUnset(request.detail)) {
    body['Detail'] = request.detail;
  }
  if (!Util.isUnset(request.dndEnd)) {
    body['DndEnd'] = request.dndEnd;
  }
  if (!Util.isUnset(request.maxAlertTimes)) {
    body['MaxAlertTimes'] = request.maxAlertTimes;
  }
  if (!Util.isUnset(request.nodeIds)) {
    body['NodeIds'] = request.nodeIds;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.remindName)) {
    body['RemindName'] = request.remindName;
  }
  if (!Util.isUnset(request.remindType)) {
    body['RemindType'] = request.remindType;
  }
  if (!Util.isUnset(request.remindUnit)) {
    body['RemindUnit'] = request.remindUnit;
  }
  if (!Util.isUnset(request.robotUrls)) {
    body['RobotUrls'] = request.robotUrls;
  }
  if (!Util.isUnset(request.webhooks)) {
    body['Webhooks'] = request.webhooks;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateRemind',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a custom alert rule.
 *
 * @param request CreateRemindRequest
 * @return CreateRemindResponse
 */
async function createRemind(request: CreateRemindRequest): CreateRemindResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRemindWithOptions(request, runtime);
}

model CreateResourceFileRequest {
  content?: string(name='Content', description='The code for the file. The code format varies based on the file type. To view the code format for a specific file type, go to Operation Center, right-click a node of the file type, and then select View Code.', example='SHOW TABLES;'),
  fileDescription?: string(name='FileDescription', description='The description of the file.', example='This is a description'),
  fileFolderPath?: string(name='FileFolderPath', description='The path of the file.

This parameter is required.', example='Business_process/First_Business_Process/MaxCompute/Folder_1/Folder_2'),
  fileName?: string(name='FileName', description='The name of the file.

This parameter is required.', example='File name'),
  fileType?: int32(name='FileType', description='The type of the code for the file. The code for files varies based on the file type. For more information, see [DataWorks nodes](https://help.aliyun.com/document_detail/600169.html).

You can call the [ListFileType](https://help.aliyun.com/document_detail/212428.html) operation to query the type of the code for the file.

This parameter is required.', example='10'),
  originResourceName?: string(name='OriginResourceName', description='The name of the original resource file.

This parameter is required.', example='origin_file_name.sql'),
  owner?: string(name='Owner', description='The Alibaba Cloud User ID of the file owner. If this parameter is empty, the caller\\\\"s Alibaba cloud user ID is used by default.', example='1000000000001'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the DataWorks console and go to the Workspace page to query the ID. You must configure this parameter to specify the DataWorks workspace to which the operation is applied.

This parameter is required.', example='10000'),
  registerToCalcEngine?: boolean(name='RegisterToCalcEngine', description='Whether to synchronously Upload resources to the computing engine.

This parameter is required.', example='false'),
  resourceFile?: string(name='ResourceFile', description='The OSS URL for uploading files provided by POP.', example='http://bucketname1.oss-cn-shanghai.aliyuncs.com/example'),
  storageURL?: string(name='StorageURL', description='The storage path of the resource file on the computing engine. Currently, only EMR and CDH use this field. EMR format is [oss | hdfs]:// path/to/object. CDH must be/user/admin/lib by default.', example='oss://oss-cn-shanghai.aliyuncs.com/emr-test'),
  uploadMode?: boolean(name='UploadMode', description='File resource Upload mode. Currently, only files of the File type of MaxCompute are valid. The values are as follows:

- true: The Resource mode that can be downloaded.
- false: The text mode for online editing.', example='false'),
}

model CreateResourceFileAdvanceRequest {
  content?: string(name='Content', description='The code for the file. The code format varies based on the file type. To view the code format for a specific file type, go to Operation Center, right-click a node of the file type, and then select View Code.', example='SHOW TABLES;'),
  fileDescription?: string(name='FileDescription', description='The description of the file.', example='This is a description'),
  fileFolderPath?: string(name='FileFolderPath', description='The path of the file.

This parameter is required.', example='Business_process/First_Business_Process/MaxCompute/Folder_1/Folder_2'),
  fileName?: string(name='FileName', description='The name of the file.

This parameter is required.', example='File name'),
  fileType?: int32(name='FileType', description='The type of the code for the file. The code for files varies based on the file type. For more information, see [DataWorks nodes](https://help.aliyun.com/document_detail/600169.html).

You can call the [ListFileType](https://help.aliyun.com/document_detail/212428.html) operation to query the type of the code for the file.

This parameter is required.', example='10'),
  originResourceName?: string(name='OriginResourceName', description='The name of the original resource file.

This parameter is required.', example='origin_file_name.sql'),
  owner?: string(name='Owner', description='The Alibaba Cloud User ID of the file owner. If this parameter is empty, the caller\\\\"s Alibaba cloud user ID is used by default.', example='1000000000001'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the DataWorks console and go to the Workspace page to query the ID. You must configure this parameter to specify the DataWorks workspace to which the operation is applied.

This parameter is required.', example='10000'),
  registerToCalcEngine?: boolean(name='RegisterToCalcEngine', description='Whether to synchronously Upload resources to the computing engine.

This parameter is required.', example='false'),
  resourceFileObject?: readable(name='ResourceFile', description='The OSS URL for uploading files provided by POP.', example='http://bucketname1.oss-cn-shanghai.aliyuncs.com/example'),
  storageURL?: string(name='StorageURL', description='The storage path of the resource file on the computing engine. Currently, only EMR and CDH use this field. EMR format is [oss | hdfs]:// path/to/object. CDH must be/user/admin/lib by default.', example='oss://oss-cn-shanghai.aliyuncs.com/emr-test'),
  uploadMode?: boolean(name='UploadMode', description='File resource Upload mode. Currently, only files of the File type of MaxCompute are valid. The values are as follows:

- true: The Resource mode that can be downloaded.
- false: The text mode for online editing.', example='false'),
}

model CreateResourceFileResponseBody = {
  data?: long(name='Data', description='The ID of the file after it is created.', example='1000001'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='0000-ABCD-EFG'),
}

model CreateResourceFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateResourceFileResponseBody(name='body'),
}

/**
 * @summary Creates or uploads a resource file in DataStudio. The feature that is implemented by calling this operation is the same as the resource creation feature provided in the integrated development environment (IDE).
 *
 * @param request CreateResourceFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateResourceFileResponse
 */
async function createResourceFileWithOptions(request: CreateResourceFileRequest, runtime: Util.RuntimeOptions): CreateResourceFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.fileDescription)) {
    body['FileDescription'] = request.fileDescription;
  }
  if (!Util.isUnset(request.fileFolderPath)) {
    body['FileFolderPath'] = request.fileFolderPath;
  }
  if (!Util.isUnset(request.fileName)) {
    body['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.fileType)) {
    body['FileType'] = request.fileType;
  }
  if (!Util.isUnset(request.originResourceName)) {
    body['OriginResourceName'] = request.originResourceName;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.registerToCalcEngine)) {
    body['RegisterToCalcEngine'] = request.registerToCalcEngine;
  }
  if (!Util.isUnset(request.resourceFile)) {
    body['ResourceFile'] = request.resourceFile;
  }
  if (!Util.isUnset(request.storageURL)) {
    body['StorageURL'] = request.storageURL;
  }
  if (!Util.isUnset(request.uploadMode)) {
    body['UploadMode'] = request.uploadMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateResourceFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates or uploads a resource file in DataStudio. The feature that is implemented by calling this operation is the same as the resource creation feature provided in the integrated development environment (IDE).
 *
 * @param request CreateResourceFileRequest
 * @return CreateResourceFileResponse
 */
async function createResourceFile(request: CreateResourceFileRequest): CreateResourceFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return createResourceFileWithOptions(request, runtime);
}

async function createResourceFileAdvance(request: CreateResourceFileAdvanceRequest, runtime: Util.RuntimeOptions): CreateResourceFileResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.empty(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApi.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'dataworks-public',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var createResourceFileReq = new CreateResourceFileRequest{};
  OpenApiUtil.convert(request, createResourceFileReq);

  if(!Util.isUnset(request.resourceFileObject)) {
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.body.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.body.endpoint, authResponse.body.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.body.objectKey,
      content = request.resourceFileObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.body.accessKeyId,
      policy = authResponse.body.encodedPolicy,
      signature = authResponse.body.signature,
      key = authResponse.body.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.body.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    createResourceFileReq.resourceFile = `http://${authResponse.body.bucket}.${authResponse.body.endpoint}/${authResponse.body.objectKey}`;
  }
  var createResourceFileResp = createResourceFileWithOptions(createResourceFileReq, runtime);
  return createResourceFileResp;
}

model CreateTableRequest {
  appGuid?: string(name='AppGuid', description='The ID of the MaxCompute project. Specify the ID in the odps.{projectName} format.', example='odps.test'),
  categoryId?: long(name='CategoryId', description='The ID of the associated category. You can call the [GetMetaCategory](https://help.aliyun.com/document_detail/173932.html) operation to query the IDs of all categories that can be associated.', example='101'),
  clientToken?: string(name='ClientToken', description='A reserved parameter.', example='reserved'),
  columns?: [ 
    {
      columnName?: string(name='ColumnName', description='The name of the field. You can configure a maximum of 1,000 fields when you call the CreateTable operation to create a table.

This parameter is required.', example='columnName1'),
      columnNameCn?: string(name='ColumnNameCn', description='The display name of the field.', example='columnName in chinese'),
      columnType?: string(name='ColumnType', description='The data type of the field. For information about supported data types, see [Data type editions](https://help.aliyun.com/document_detail/27821.html) in MaxCompute documentation.

This parameter is required.', example='string'),
      comment?: string(name='Comment', description='The comment of the field.', example='comment'),
      isPartitionCol?: boolean(name='IsPartitionCol', description='Specifies whether the field is a partition field.', example='true'),
      length?: int32(name='Length', description='The length of the field. For more information, see [MaxCompute data type editions](https://help.aliyun.com/document_detail/159541.html).', example='10'),
      seqNumber?: int32(name='SeqNumber', description='The sequence number of the field. You can use this parameter to specify how fields are sorted in a table. By default, fields are sorted based on the order in which requests are created. If the field is a partition field, this parameter is not supported.', example='1'),
    }
  ](name='Columns', description='The list of fields. A maximum of 1,000 fields are supported.

This parameter is required.'),
  comment?: string(name='Comment', description='The comment.', example='comment'),
  endpoint?: string(name='Endpoint', description='The endpoint of MaxCompute.', example='odps://abc'),
  envType?: int32(name='EnvType', description='The environment type of the DataWorks workspace. Valid values:

*   0: development environment
*   1: production environment', example='1'),
  externalTableType?: string(name='ExternalTableType', description='The storage type of the external table. Valid values:

*   0: Object Storage Service (OSS)
*   1: Tablestore
*   2: Volume
*   3: MySQL', example='0'),
  hasPart?: int32(name='HasPart', description='Specifies whether to create a MaxCompute partitioned table. Valid values: 1 and 0. The value 1 indicates a partitioned table. The value 0 indicates a non-partitioned table. This parameter is deprecated. Do not use this parameter. The Column.N.isPartitionCol parameter is used to specify whether to create a MaxCompute partitioned table. If the Column.N.isPartitionCol parameter is set to true, a MaxCompute partitioned table is created.', example='0'),
  isView?: int32(name='IsView', description='Specifies whether to create a view or table. Valid values:

*   0: Create a table.
*   1: Create a view.', example='0'),
  lifeCycle?: int32(name='LifeCycle', description='The lifecycle of the table. Unit: days. By default, this parameter is left empty, which indicates that the table is permanently stored.', example='10'),
  location?: string(name='Location', description='The storage location of the external table.', example='location'),
  logicalLevelId?: long(name='LogicalLevelId', description='The ID of the logical level.', example='101'),
  ownerId?: string(name='OwnerId'),
  physicsLevelId?: long(name='PhysicsLevelId', description='The ID of the physical level.', example='101'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='23'),
  schema?: string(name='Schema', description='The schema information of the table. You need to enter the schema information of the table if you enable the table schema in MaxCompute.', example='default', nullable=true),
  tableName?: string(name='TableName', description='The name of the table.

This parameter is required.', example='tableName1'),
  themes?: [ 
    {
      themeId?: long(name='ThemeId', description='The theme ID.', example='101'),
      themeLevel?: int32(name='ThemeLevel', description='The level that corresponds to the theme ID.', example='101'),
    }
  ](name='Themes', description='The list of themes.'),
  visibility?: int32(name='Visibility', description='Specifies whether the table or workspace is visible. Valid values:

*   0: Both the table and workspace are invisible.
*   1: Both the table and workspace are visible.
*   2: Only the workspace is visible.', example='1'),
}

model CreateTableResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='abcdef'),
  taskInfo?: {
    content?: string(name='Content', description='The details about the status of the current subtask.

*   If the current subtask is successful, success is returned.
*   If the current subtask fails, the error details are displayed.', example='success'),
    nextTaskId?: string(name='NextTaskId', description='The ID of the subtask that you want to run. If this parameter is left empty, all subtasks are complete.', example='abc1'),
    status?: string(name='Status', description='The status of the current subtask. Valid values:

*   operating: The subtask is running.
*   success: The subtask succeeds.
*   failure: The subtask fails to run. For more information about the error details, see the Content parameter.', example='success'),
    taskId?: string(name='TaskId', description='The ID of the current subtask.', example='abc'),
  }(name='TaskInfo', description='The information about the request task. After a request task is submitted, it is divided into multiple subtasks that are run in sequence. After the current subtask is complete, the next subtask starts to run. After all subtasks are complete, the request task is complete.

If a request task is aborted due to one of the following issues, address the issue based on the error code and initiate the request task again:

*   The request task fails to be submitted.
*   After the request task is submitted, a subtask fails to run.'),
}

model CreateTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTableResponseBody(name='body'),
}

/**
 * @summary Creates a MaxCompute table or view.
 *
 * @param request CreateTableRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateTableResponse
 */
async function createTableWithOptions(request: CreateTableRequest, runtime: Util.RuntimeOptions): CreateTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appGuid)) {
    query['AppGuid'] = request.appGuid;
  }
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.externalTableType)) {
    query['ExternalTableType'] = request.externalTableType;
  }
  if (!Util.isUnset(request.hasPart)) {
    query['HasPart'] = request.hasPart;
  }
  if (!Util.isUnset(request.isView)) {
    query['IsView'] = request.isView;
  }
  if (!Util.isUnset(request.lifeCycle)) {
    query['LifeCycle'] = request.lifeCycle;
  }
  if (!Util.isUnset(request.location)) {
    query['Location'] = request.location;
  }
  if (!Util.isUnset(request.logicalLevelId)) {
    query['LogicalLevelId'] = request.logicalLevelId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.physicsLevelId)) {
    query['PhysicsLevelId'] = request.physicsLevelId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.visibility)) {
    query['Visibility'] = request.visibility;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.columns)) {
    body['Columns'] = request.columns;
  }
  if (!Util.isUnset(request.endpoint)) {
    body['Endpoint'] = request.endpoint;
  }
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.themes)) {
    body['Themes'] = request.themes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTable',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a MaxCompute table or view.
 *
 * @param request CreateTableRequest
 * @return CreateTableResponse
 */
async function createTable(request: CreateTableRequest): CreateTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTableWithOptions(request, runtime);
}

model CreateTableLevelRequest {
  description?: string(name='Description', description='The description of the table level.', example='The HTTP status code returned.'),
  levelType?: int32(name='LevelType', description='The type of the table level. Valid values: 1 and 2. The value 1 indicates the logical level. The value 2 indicates the physical level.

This parameter is required.', example='1'),
  name?: string(name='Name', description='The name of the table level.

This parameter is required.', example='The description of the table level.'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='123'),
}

model CreateTableLevelResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  levelId?: long(name='LevelId', description='The table level ID.', example='123'),
  requestId?: string(name='RequestId', description='The request ID.', example='The error message returned.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateTableLevelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTableLevelResponseBody(name='body'),
}

/**
 * @summary Creates a table level. This operation will be replaced soon. We recommend that you do not call this operation.
 *
 * @param request CreateTableLevelRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateTableLevelResponse
 */
async function createTableLevelWithOptions(request: CreateTableLevelRequest, runtime: Util.RuntimeOptions): CreateTableLevelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.levelType)) {
    query['LevelType'] = request.levelType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTableLevel',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a table level. This operation will be replaced soon. We recommend that you do not call this operation.
 *
 * @param request CreateTableLevelRequest
 * @return CreateTableLevelResponse
 */
async function createTableLevel(request: CreateTableLevelRequest): CreateTableLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTableLevelWithOptions(request, runtime);
}

model CreateTableThemeRequest {
  level?: int32(name='Level', description='The level of the table theme. Valid values: 1 and 2. The value 1 indicates the first level. The value 2 indicates the second level.

This parameter is required.', example='1'),
  name?: string(name='Name', description='The name of the table theme.

This parameter is required.', example='test'),
  parentId?: long(name='ParentId', description='The ID of the level of the parent table theme.', example='122'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='123'),
}

model CreateTableThemeResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='0'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='success'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='ABCd'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  themeId?: long(name='ThemeId', description='The table theme ID.', example='123'),
}

model CreateTableThemeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTableThemeResponseBody(name='body'),
}

/**
 * @summary Creates a table theme. This operation will be replaced soon. We recommend that you do not call this operation.
 *
 * @param request CreateTableThemeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateTableThemeResponse
 */
async function createTableThemeWithOptions(request: CreateTableThemeRequest, runtime: Util.RuntimeOptions): CreateTableThemeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.level)) {
    query['Level'] = request.level;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.parentId)) {
    query['ParentId'] = request.parentId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTableTheme',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a table theme. This operation will be replaced soon. We recommend that you do not call this operation.
 *
 * @param request CreateTableThemeRequest
 * @return CreateTableThemeResponse
 */
async function createTableTheme(request: CreateTableThemeRequest): CreateTableThemeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTableThemeWithOptions(request, runtime);
}

model CreateUdfFileRequest {
  className?: string(name='ClassName', description='The name of the class in which the function is defined. This parameter corresponds to the Class Name parameter in the Register Function section of the configuration tab of the function in the DataWorks console.

This parameter is required.', example='com.alibaba.DataWorks.api.udf.StringConcat'),
  cmdDescription?: string(name='CmdDescription', description='The syntax used for calling the function. This parameter corresponds to the Expression Syntax parameter in the Register Function section of the configuration tab of the function in the DataWorks console.', example='StringConcat(String... substrs)'),
  createFolderIfNotExists?: boolean(name='CreateFolderIfNotExists', description='Specifies whether to automatically create the directory that is specified by the FileFolderPath parameter if the directory does not exist. Valid values:

*   true: The system automatically creates the directory if the directory does not exist.
*   false: The system does not automatically create the directory if the directory does not exist. In this case, the call fails.', example='false'),
  example?: string(name='Example', description='The example for calling the function. This parameter corresponds to the Example parameter in the Register Function section of the configuration tab of the function in the DataWorks console.', example='StringConcat(\\\\"a\\\\", \\\\"b\\\\", \\\\"c\\\\")'),
  fileFolderPath?: string(name='FileFolderPath', description='The path of the folder in which the file for the function is stored.', example='Business_process/First_Business_Process/function/string_processing'),
  fileName?: string(name='FileName', description='The name of the file for the function.

This parameter is required.', example='StringConcat'),
  functionType?: string(name='FunctionType', description='The type of the function. Valid values: MATH, AGGREGATE, STRING, DATE, ANALYTIC, and OTHER. This parameter corresponds to the Function Type parameter in the Register Function section of the configuration tab of the function on the DataStudio page.

This parameter is required.', example='STRING'),
  parameterDescription?: string(name='ParameterDescription', description='The description of the input parameters of the function. This parameter corresponds to the Parameter Description parameter in the Register Function section of the configuration tab of the function on the DataStudio page.', example='List of strings to be connected'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can click the Workspace Manage icon in the upper-right corner of the DataStudio page to go to the Workspace Management page and view the workspace ID.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The unique identifier of the DataWorks workspace. You can click the identifier in the upper-left corner of the DataStudio page to switch to another workspace.

You must specify either this parameter or the projectId parameter to determine the DataWorks workspace to which the operation is called.', example='dw_project'),
  resources?: string(name='Resources', description='The names of the resources that are referenced by the function. This parameter corresponds to the Resources parameter in the Register Function section of the configuration tab of the function in the DataWorks console. Multiple resource names are separated by commas (,).

This parameter is required.', example='string-concat-1.0.0.jar,commons-lang-2.6.jar'),
  returnValue?: string(name='ReturnValue', description='The description of the return value of the function. This parameter corresponds to the Return Value parameter in the Register Function section of the configuration tab of the function on the DataStudio page.', example='New strings generated by concatenating all strings before and after the input order'),
  udfDescription?: string(name='UdfDescription', description='The description of the function. This parameter corresponds to the Description parameter in the Register Function section of the configuration tab of the function on the DataStudio page.', example='Concatenate several strings to generate a new string'),
}

model CreateUdfFileResponseBody = {
  data?: long(name='Data', description='The ID of the file that was created.', example='100000002'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can troubleshoot issues based on the ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model CreateUdfFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUdfFileResponseBody(name='body'),
}

/**
 * @summary Creates a file for a function in DataStudio.
 *
 * @param request CreateUdfFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateUdfFileResponse
 */
async function createUdfFileWithOptions(request: CreateUdfFileRequest, runtime: Util.RuntimeOptions): CreateUdfFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.className)) {
    body['ClassName'] = request.className;
  }
  if (!Util.isUnset(request.cmdDescription)) {
    body['CmdDescription'] = request.cmdDescription;
  }
  if (!Util.isUnset(request.createFolderIfNotExists)) {
    body['CreateFolderIfNotExists'] = request.createFolderIfNotExists;
  }
  if (!Util.isUnset(request.example)) {
    body['Example'] = request.example;
  }
  if (!Util.isUnset(request.fileFolderPath)) {
    body['FileFolderPath'] = request.fileFolderPath;
  }
  if (!Util.isUnset(request.fileName)) {
    body['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.functionType)) {
    body['FunctionType'] = request.functionType;
  }
  if (!Util.isUnset(request.parameterDescription)) {
    body['ParameterDescription'] = request.parameterDescription;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.resources)) {
    body['Resources'] = request.resources;
  }
  if (!Util.isUnset(request.returnValue)) {
    body['ReturnValue'] = request.returnValue;
  }
  if (!Util.isUnset(request.udfDescription)) {
    body['UdfDescription'] = request.udfDescription;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateUdfFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a file for a function in DataStudio.
 *
 * @param request CreateUdfFileRequest
 * @return CreateUdfFileResponse
 */
async function createUdfFile(request: CreateUdfFileRequest): CreateUdfFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUdfFileWithOptions(request, runtime);
}

model DeleteBaselineRequest {
  baselineId?: long(name='BaselineId', description='The baseline ID. You can call the [ListBaselines](https://help.aliyun.com/document_detail/2261507.html) operation to query the ID.

This parameter is required.', example='1234'),
  projectId?: long(name='ProjectId', description='The ID of the workspace to which the baseline belongs. You can call the ListBaselines operation to query the ID.

This parameter is required.', example='10000'),
}

model DeleteBaselineResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the deletion was successful.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1031203110000'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Baseline deletion failed with nodes dependent on baseline'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EF****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteBaselineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteBaselineResponseBody(name='body'),
}

/**
 * @summary Deletes a baseline based on its ID. You can delete a baseline only if the nodes in the baseline does not have ancestor nodes. You can call the UpdateBaseline operation to delete the relationships between the nodes and their ancestor nodes.
 *
 * @param request DeleteBaselineRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteBaselineResponse
 */
async function deleteBaselineWithOptions(request: DeleteBaselineRequest, runtime: Util.RuntimeOptions): DeleteBaselineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBaseline',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a baseline based on its ID. You can delete a baseline only if the nodes in the baseline does not have ancestor nodes. You can call the UpdateBaseline operation to delete the relationships between the nodes and their ancestor nodes.
 *
 * @param request DeleteBaselineRequest
 * @return DeleteBaselineResponse
 */
async function deleteBaseline(request: DeleteBaselineRequest): DeleteBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBaselineWithOptions(request, runtime);
}

model DeleteBusinessRequest {
  businessId?: long(name='BusinessId', description='The ID of the workflow. You can call the [ListBusiness](https://help.aliyun.com/document_detail/173945.html) operation to query the workflow ID.

This parameter is required.', example='1000001'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the ID. You must specify either this parameter or ProjectIdentifier to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Settings panel to obtain the name. You must specify either this parameter or ProjectId to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model DeleteBusinessResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DeleteBusinessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteBusinessResponseBody(name='body'),
}

/**
 * @param request DeleteBusinessRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteBusinessResponse
 */
async function deleteBusinessWithOptions(request: DeleteBusinessRequest, runtime: Util.RuntimeOptions): DeleteBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessId)) {
    body['BusinessId'] = request.businessId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBusiness',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @param request DeleteBusinessRequest
 * @return DeleteBusinessResponse
 */
async function deleteBusiness(request: DeleteBusinessRequest): DeleteBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBusinessWithOptions(request, runtime);
}

model DeleteConnectionRequest {
  connectionId?: long(name='ConnectionId', description='The data source ID. You can call the [ListConnection](https://help.aliyun.com/document_detail/173911.html) operation to query the ID.

This parameter is required.', example='1'),
}

model DeleteConnectionResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the data source was removed.', example='true'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1411515937635****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteConnectionResponseBody(name='body'),
}

/**
 * @deprecated OpenAPI DeleteConnection is deprecated
 *
 * @summary Removes a data source.
 *
 * @param request DeleteConnectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteConnectionResponse
 */
// Deprecated
async function deleteConnectionWithOptions(request: DeleteConnectionRequest, runtime: Util.RuntimeOptions): DeleteConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionId)) {
    query['ConnectionId'] = request.connectionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteConnection',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @deprecated OpenAPI DeleteConnection is deprecated
 *
 * @summary Removes a data source.
 *
 * @param request DeleteConnectionRequest
 * @return DeleteConnectionResponse
 */
// Deprecated
async function deleteConnection(request: DeleteConnectionRequest): DeleteConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteConnectionWithOptions(request, runtime);
}

model DeleteDIAlarmRuleRequest {
  DIAlarmRuleId?: long(name='DIAlarmRuleId', description='The alert rule ID.

This parameter is required.', example='34971'),
}

model DeleteDIAlarmRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C99E2BE6-9DEA-5C2E-8F51-1DDCFEADE490'),
}

model DeleteDIAlarmRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDIAlarmRuleResponseBody(name='body'),
}

/**
 * @summary Deletes an alert rule for a Data Integration task of a new version. Only the following type of task is supported: real-time data synchronization from a MySQL database to Hologres.
 *
 * @description You can configure alert rules only for tasks whose MigrationType is set to RealtimeIncremental.
 *
 * @param request DeleteDIAlarmRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDIAlarmRuleResponse
 */
async function deleteDIAlarmRuleWithOptions(request: DeleteDIAlarmRuleRequest, runtime: Util.RuntimeOptions): DeleteDIAlarmRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.DIAlarmRuleId)) {
    body['DIAlarmRuleId'] = request.DIAlarmRuleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDIAlarmRule',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes an alert rule for a Data Integration task of a new version. Only the following type of task is supported: real-time data synchronization from a MySQL database to Hologres.
 *
 * @description You can configure alert rules only for tasks whose MigrationType is set to RealtimeIncremental.
 *
 * @param request DeleteDIAlarmRuleRequest
 * @return DeleteDIAlarmRuleResponse
 */
async function deleteDIAlarmRule(request: DeleteDIAlarmRuleRequest): DeleteDIAlarmRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDIAlarmRuleWithOptions(request, runtime);
}

model DeleteDIJobRequest {
  DIJobId?: long(name='DIJobId', description='The task ID.

This parameter is required.', example='11126'),
}

model DeleteDIJobResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D33D4A51-5845-579A-B4BA-FAADD0F83D53'),
}

model DeleteDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDIJobResponseBody(name='body'),
}

/**
 * @summary Deletes a Data Integration task of a new version. Only the following type of task is supported: real-time data synchronization from a MySQL database to Hologres.
 *
 * @param request DeleteDIJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDIJobResponse
 */
async function deleteDIJobWithOptions(request: DeleteDIJobRequest, runtime: Util.RuntimeOptions): DeleteDIJobResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.DIJobId)) {
    body['DIJobId'] = request.DIJobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDIJob',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a Data Integration task of a new version. Only the following type of task is supported: real-time data synchronization from a MySQL database to Hologres.
 *
 * @param request DeleteDIJobRequest
 * @return DeleteDIJobResponse
 */
async function deleteDIJob(request: DeleteDIJobRequest): DeleteDIJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDIJobWithOptions(request, runtime);
}

model DeleteDISyncTaskRequest {
  fileId?: long(name='FileId', description='The ID of the real-time synchronization task. You can call the [ListFiles](https://help.aliyun.com/document_detail/173942.html) operation to query the ID.

This parameter is required.', example='100'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the workspace ID.

You must configure this parameter to specify the DataWorks workspace to which the operation is applied.

This parameter is required.', example='10000'),
  taskType?: string(name='TaskType', description='The type of the task. Set the value to DI_REALTIME, which indicates a real-time synchronization task.

This parameter is required.', example='DI_REALTIME'),
}

model DeleteDISyncTaskResponseBody = {
  data?: {
    message?: string(name='Message', description='The reason why the synchronization task fails to be deleted. If the synchronization task is deleted, the value null is returned for this parameter.', example='fileId:[100] is invalid.'),
    status?: string(name='Status', description='Indicates whether the synchronization task is deleted. Valid values:

*   success: The synchronization task is deleted.
*   fail: The synchronization task fails to be deleted. You can troubleshoot the issue based on the failure reason.', example='fail'),
  }(name='Data', description='The deletion result.'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteDISyncTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDISyncTaskResponseBody(name='body'),
}

/**
 * @summary Deletes a synchronization task. You can call this operation to delete only a real-time synchronization task.
 *
 * @description If you want to delete a batch synchronization task, call the DeleteFile operation. For more information, see [Delete a synchronization task](https://help.aliyun.com/document_detail/321443.html).
 *
 * @param request DeleteDISyncTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDISyncTaskResponse
 */
async function deleteDISyncTaskWithOptions(request: DeleteDISyncTaskRequest, runtime: Util.RuntimeOptions): DeleteDISyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDISyncTask',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a synchronization task. You can call this operation to delete only a real-time synchronization task.
 *
 * @description If you want to delete a batch synchronization task, call the DeleteFile operation. For more information, see [Delete a synchronization task](https://help.aliyun.com/document_detail/321443.html).
 *
 * @param request DeleteDISyncTaskRequest
 * @return DeleteDISyncTaskResponse
 */
async function deleteDISyncTask(request: DeleteDISyncTaskRequest): DeleteDISyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDISyncTaskWithOptions(request, runtime);
}

model DeleteDataServiceApiRequest {
  apiId?: long(name='ApiId', description='The ID of the API in DataService Studio.

This parameter is required.', example='10000'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.

This parameter is required.', example='10001'),
  tenantId?: long(name='TenantId', description='The tenant ID. To obtain the tenant ID, perform the following steps: Log on to the [DataWorks console](https://workbench.data.aliyun.com/console). Find your workspace and go to the DataStudio page. On the DataStudio page, click the logon username in the upper-right corner and click User Info in the Menu section.', example='10002'),
}

model DeleteDataServiceApiResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the API was deleted.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteDataServiceApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataServiceApiResponseBody(name='body'),
}

/**
 * @summary Deletes an API in DataService Studio.
 *
 * @param request DeleteDataServiceApiRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDataServiceApiResponse
 */
async function deleteDataServiceApiWithOptions(request: DeleteDataServiceApiRequest, runtime: Util.RuntimeOptions): DeleteDataServiceApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes an API in DataService Studio.
 *
 * @param request DeleteDataServiceApiRequest
 * @return DeleteDataServiceApiResponse
 */
async function deleteDataServiceApi(request: DeleteDataServiceApiRequest): DeleteDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataServiceApiWithOptions(request, runtime);
}

model DeleteDataServiceApiAuthorityRequest {
  apiId?: long(name='ApiId', description='The API ID.

This parameter is required.', example='10001'),
  authorizedProjectId?: long(name='AuthorizedProjectId', description='The ID of the workspace from which you want to revoke the access permissions on the API.

This parameter is required.', example='10002'),
  projectId?: long(name='ProjectId', description='The workspace ID.

This parameter is required.', example='10003'),
  tenantId?: long(name='TenantId', description='The tenant ID. This parameter is deprecated.', example='10004'),
}

model DeleteDataServiceApiAuthorityResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EF****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteDataServiceApiAuthorityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataServiceApiAuthorityResponseBody(name='body'),
}

/**
 * @summary Revokes the access permissions on an API.
 *
 * @param request DeleteDataServiceApiAuthorityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDataServiceApiAuthorityResponse
 */
async function deleteDataServiceApiAuthorityWithOptions(request: DeleteDataServiceApiAuthorityRequest, runtime: Util.RuntimeOptions): DeleteDataServiceApiAuthorityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.authorizedProjectId)) {
    body['AuthorizedProjectId'] = request.authorizedProjectId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataServiceApiAuthority',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Revokes the access permissions on an API.
 *
 * @param request DeleteDataServiceApiAuthorityRequest
 * @return DeleteDataServiceApiAuthorityResponse
 */
async function deleteDataServiceApiAuthority(request: DeleteDataServiceApiAuthorityRequest): DeleteDataServiceApiAuthorityResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataServiceApiAuthorityWithOptions(request, runtime);
}

model DeleteDataSourceRequest {
  dataSourceId?: long(name='DataSourceId', description='The data source ID. You can call the [ListDataSources](https://help.aliyun.com/document_detail/211431.html) operation to query the ID.

This parameter is required.', example='1'),
}

model DeleteDataSourceResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the data source was removed.', example='true'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1411515937635****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataSourceResponseBody(name='body'),
}

/**
 * @summary Removes a data source.
 *
 * @param request DeleteDataSourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDataSourceResponse
 */
async function deleteDataSourceWithOptions(request: DeleteDataSourceRequest, runtime: Util.RuntimeOptions): DeleteDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataSourceId)) {
    query['DataSourceId'] = request.dataSourceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataSource',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Removes a data source.
 *
 * @param request DeleteDataSourceRequest
 * @return DeleteDataSourceResponse
 */
async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataSourceWithOptions(request, runtime);
}

model DeleteFileRequest {
  fileId?: long(name='FileId', description='The file ID. You can call the [ListFiles](https://help.aliyun.com/document_detail/173942.html) operation to query the file ID.

This parameter is required.', example='10000001'),
  projectId?: long(name='ProjectId', description='The name of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace Management page to view the workspace name.

You must specify one of the ProjectId and ProjectIdentifier parameters to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The ID of the file. You can call the [ListFiles](https://help.aliyun.com/document_detail/173942.html) operation to query the ID of the file.', example='dw_project'),
}

model DeleteFileResponseBody = {
  deploymentId?: long(name='DeploymentId', description='The ID of the request. You can troubleshoot errors based on the ID.', example='1000000001'),
  errorCode?: string(name='ErrorCode', description='The ID of the file. You can use the ListFiles interface to query the ID of the corresponding file.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='Indicates whether the request is successful. Valid values:

*   true: The request is successful.
*   false: The request fails.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of the deployment task that deploys the file. If the file has been committed, an asynchronous process is triggered to delete the file in the scheduling system. The value of this parameter is used to call the GetDeployment operation to poll the status of the asynchronous process.

If this parameter is empty, the file is deleted and the polling is not required.', example='200'),
  requestId?: string(name='RequestId', description='The error message returned.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='The error code returned.', example='true'),
}

model DeleteFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFileResponseBody(name='body'),
}

/**
 * @summary Deletes a file from DataStudio. If the file has been committed, an asynchronous process is triggered to delete the file in the scheduling system. The value of the DeploymentId parameter returned is used to call the GetDeployment operation to poll the status of the asynchronous process.
 *
 * @param request DeleteFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteFileResponse
 */
async function deleteFileWithOptions(request: DeleteFileRequest, runtime: Util.RuntimeOptions): DeleteFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a file from DataStudio. If the file has been committed, an asynchronous process is triggered to delete the file in the scheduling system. The value of the DeploymentId parameter returned is used to call the GetDeployment operation to poll the status of the asynchronous process.
 *
 * @param request DeleteFileRequest
 * @return DeleteFileResponse
 */
async function deleteFile(request: DeleteFileRequest): DeleteFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFileWithOptions(request, runtime);
}

model DeleteFolderRequest {
  folderId?: string(name='FolderId', description='The ID of the folder. You can call the [ListFolders](https://help.aliyun.com/document_detail/173955.html) operation to query the ID.

This parameter is required.', example='2eb6f9****'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the ID. You must specify either this parameter or ProjectIdentifier to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Settings panel to obtain the name. You must specify either this parameter or ProjectId to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model DeleteFolderResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DeleteFolderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFolderResponseBody(name='body'),
}

/**
 * @param request DeleteFolderRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteFolderResponse
 */
async function deleteFolderWithOptions(request: DeleteFolderRequest, runtime: Util.RuntimeOptions): DeleteFolderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderId)) {
    body['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFolder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @param request DeleteFolderRequest
 * @return DeleteFolderResponse
 */
async function deleteFolder(request: DeleteFolderRequest): DeleteFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFolderWithOptions(request, runtime);
}

model DeleteFromMetaCategoryRequest {
  categoryId?: long(name='CategoryId', description='The ID of the category.

This parameter is required.', example='5'),
  tableGuid?: string(name='TableGuid', description='The GUID of the metatable.

This parameter is required.', example='odps.engine_name.table_name'),
}

model DeleteFromMetaCategoryResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the table was removed from the specified category.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteFromMetaCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFromMetaCategoryResponseBody(name='body'),
}

/**
 * @summary Removes a table from a specified category.
 *
 * @param request DeleteFromMetaCategoryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteFromMetaCategoryResponse
 */
async function deleteFromMetaCategoryWithOptions(request: DeleteFromMetaCategoryRequest, runtime: Util.RuntimeOptions): DeleteFromMetaCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFromMetaCategory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Removes a table from a specified category.
 *
 * @param request DeleteFromMetaCategoryRequest
 * @return DeleteFromMetaCategoryResponse
 */
async function deleteFromMetaCategory(request: DeleteFromMetaCategoryRequest): DeleteFromMetaCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFromMetaCategoryWithOptions(request, runtime);
}

model DeleteLineageRelationRequest {
  destEntityQualifiedName?: string(name='DestEntityQualifiedName', description='Destination entity unique identifier

This parameter is required.', example='custom-report.report123'),
  relationshipGuid?: string(name='RelationshipGuid', description='Lineage relationship unique identifier', example='dfazcdfdfccdedd'),
  relationshipType?: string(name='RelationshipType', description='Relationship type', example='sql'),
  srcEntityQualifiedName?: string(name='SrcEntityQualifiedName', description='Source entity unique identifier

This parameter is required.', example='maxcompute-table.project.table'),
}

model DeleteLineageRelationResponseBody = {
  errorCode?: string(name='ErrorCode', description='Error code', example='1010040007'),
  errorMessage?: string(name='ErrorMessage', description='Error message', example='qualifiedName should be in format as entity-table.entity-guid'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HTTP status code', example='200'),
  requestId?: string(name='RequestId', description='Request ID: used for locating logs and troubleshooting', example='64B-587A-8CED-969E1973887FXXX-TT'),
  status?: boolean(name='Status', description='Operation result:

true: Success

false: Failure', example='true'),
  success?: boolean(name='Success', description='Whether the call was successful. Values are as follows:

true: success

false: failed', example='true'),
}

model DeleteLineageRelationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLineageRelationResponseBody(name='body'),
}

/**
 * @summary Delete lineage, supports deleting user-defined lineage relationships
 *
 * @description This API is currently in the trial phase. Users who wish to experience it can apply, and after the administrator adds them to the trial list, they can call this API.
 *
 * @param request DeleteLineageRelationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteLineageRelationResponse
 */
async function deleteLineageRelationWithOptions(request: DeleteLineageRelationRequest, runtime: Util.RuntimeOptions): DeleteLineageRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destEntityQualifiedName)) {
    query['DestEntityQualifiedName'] = request.destEntityQualifiedName;
  }
  if (!Util.isUnset(request.relationshipGuid)) {
    query['RelationshipGuid'] = request.relationshipGuid;
  }
  if (!Util.isUnset(request.relationshipType)) {
    query['RelationshipType'] = request.relationshipType;
  }
  if (!Util.isUnset(request.srcEntityQualifiedName)) {
    query['SrcEntityQualifiedName'] = request.srcEntityQualifiedName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLineageRelation',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Delete lineage, supports deleting user-defined lineage relationships
 *
 * @description This API is currently in the trial phase. Users who wish to experience it can apply, and after the administrator adds them to the trial list, they can call this API.
 *
 * @param request DeleteLineageRelationRequest
 * @return DeleteLineageRelationResponse
 */
async function deleteLineageRelation(request: DeleteLineageRelationRequest): DeleteLineageRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLineageRelationWithOptions(request, runtime);
}

model DeleteMetaCategoryRequest {
  categoryId?: long(name='CategoryId', description='The ID of the category.

This parameter is required.', example='23'),
}

model DeleteMetaCategoryResponseBody = {
  data?: boolean(name='Data', description='The business data.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteMetaCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMetaCategoryResponseBody(name='body'),
}

/**
 * @summary Deletes a category.
 *
 * @param request DeleteMetaCategoryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteMetaCategoryResponse
 */
async function deleteMetaCategoryWithOptions(request: DeleteMetaCategoryRequest, runtime: Util.RuntimeOptions): DeleteMetaCategoryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMetaCategory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a category.
 *
 * @param request DeleteMetaCategoryRequest
 * @return DeleteMetaCategoryResponse
 */
async function deleteMetaCategory(request: DeleteMetaCategoryRequest): DeleteMetaCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMetaCategoryWithOptions(request, runtime);
}

model DeleteMetaCollectionRequest {
  qualifiedName?: string(name='QualifiedName', description='The unique identifier of the collection.

This parameter is required.', example='album.12333'),
}

model DeleteMetaCollectionResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='999999'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified product does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-E****'),
  status?: boolean(name='Status', description='The result of the operation. Valid values:

true: succeeded

false: failed', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

true

false', example='true'),
}

model DeleteMetaCollectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMetaCollectionResponseBody(name='body'),
}

/**
 * @summary Deletes a collection.
 *
 * @param request DeleteMetaCollectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteMetaCollectionResponse
 */
async function deleteMetaCollectionWithOptions(request: DeleteMetaCollectionRequest, runtime: Util.RuntimeOptions): DeleteMetaCollectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.qualifiedName)) {
    query['QualifiedName'] = request.qualifiedName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMetaCollection',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a collection.
 *
 * @param request DeleteMetaCollectionRequest
 * @return DeleteMetaCollectionResponse
 */
async function deleteMetaCollection(request: DeleteMetaCollectionRequest): DeleteMetaCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMetaCollectionWithOptions(request, runtime);
}

model DeleteMetaCollectionEntityRequest {
  collectionQualifiedName?: string(name='CollectionQualifiedName', description='The unique identifier of the collection.

This parameter is required.', example='album.12345'),
  entityQualifiedName?: string(name='EntityQualifiedName', description='The unique identifier of the entity.

This parameter is required.', example='maxcompute.projectA.tableB'),
}

model DeleteMetaCollectionEntityResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='999999'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='entity not exist'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='Id of the request', example='0000-ABCD-E****'),
  status?: boolean(name='Status', description='The result of the operation. Valid values:

true: succeeded

false: failed', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

true

false', example='true'),
}

model DeleteMetaCollectionEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMetaCollectionEntityResponseBody(name='body'),
}

/**
 * @summary Deletes an entity from a collection.
 *
 * @param request DeleteMetaCollectionEntityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteMetaCollectionEntityResponse
 */
async function deleteMetaCollectionEntityWithOptions(request: DeleteMetaCollectionEntityRequest, runtime: Util.RuntimeOptions): DeleteMetaCollectionEntityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.collectionQualifiedName)) {
    query['CollectionQualifiedName'] = request.collectionQualifiedName;
  }
  if (!Util.isUnset(request.entityQualifiedName)) {
    query['EntityQualifiedName'] = request.entityQualifiedName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMetaCollectionEntity',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes an entity from a collection.
 *
 * @param request DeleteMetaCollectionEntityRequest
 * @return DeleteMetaCollectionEntityResponse
 */
async function deleteMetaCollectionEntity(request: DeleteMetaCollectionEntityRequest): DeleteMetaCollectionEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMetaCollectionEntityWithOptions(request, runtime);
}

model DeleteProjectMemberRequest {
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the workspace ID.

This parameter is required.', example='27'),
  userId?: string(name='UserId', description='The user ID.

This parameter is required.', example='1234'),
}

model DeleteProjectMemberResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1AFAE64E-D1BE-432B-A9****'),
}

model DeleteProjectMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProjectMemberResponseBody(name='body'),
}

/**
 * @summary Removes a user from a DataWorks workspace.
 *
 * @param request DeleteProjectMemberRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteProjectMemberResponse
 */
async function deleteProjectMemberWithOptions(request: DeleteProjectMemberRequest, runtime: Util.RuntimeOptions): DeleteProjectMemberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProjectMember',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Removes a user from a DataWorks workspace.
 *
 * @param request DeleteProjectMemberRequest
 * @return DeleteProjectMemberResponse
 */
async function deleteProjectMember(request: DeleteProjectMemberRequest): DeleteProjectMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProjectMemberWithOptions(request, runtime);
}

model DeleteQualityEntityRequest {
  entityId?: long(name='EntityId', description='The ID of the partition filter expression.

This parameter is required.', example='1234'),
  envType?: string(name='EnvType', description='The type of the compute engine or data source. The following types are supported: E-MapReduce (EMR), Hologres, AnalyticDB for PostgreSQL, CDH, MaxCompute, Kafka, and DataHub.

Valid values:

*   odps
*   emr
*   hadoop
*   cdh
*   hybriddb_for_postgresql
*   holodb

This parameter is required.', example='ODPS'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='12345'),
  projectName?: string(name='ProjectName', description='The name of the compute engine or data source.

This parameter is required.', example='autotest'),
}

model DeleteQualityEntityResponseBody = {
  data?: boolean(name='Data', description='The returned result.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='401'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='ecb967ec-c137-48****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteQualityEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteQualityEntityResponseBody(name='body'),
}

/**
 * @summary Deletes a partition filter expression.
 *
 * @param request DeleteQualityEntityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteQualityEntityResponse
 */
async function deleteQualityEntityWithOptions(request: DeleteQualityEntityRequest, runtime: Util.RuntimeOptions): DeleteQualityEntityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteQualityEntity',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a partition filter expression.
 *
 * @param request DeleteQualityEntityRequest
 * @return DeleteQualityEntityResponse
 */
async function deleteQualityEntity(request: DeleteQualityEntityRequest): DeleteQualityEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteQualityEntityWithOptions(request, runtime);
}

model DeleteQualityFollowerRequest {
  followerId?: long(name='FollowerId', description='The ID of the subscription relationship between the partition filter expression and the subscriber. You can call the [GetQualityFollower](https://help.aliyun.com/document_detail/174000.html) operation to obtain the ID of the subscription relationship.

This parameter is required.', example='1234'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the DataWorks console and go to the Workspace page to obtain the workspace ID.', example='10000'),
  projectName?: string(name='ProjectName', description='The name of the compute engine or data source for which the partition filter expression is configured. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the rule configuration page of Data Quality page to obtain the name.

This parameter is required.', example='autotest'),
}

model DeleteQualityFollowerResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the subscriber was successfully deleted. Valid values:

*   true: The subscriber was successfully deleted.
*   false: The subscriber failed to be deleted. You can troubleshoot errors based on the error message returned.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='401'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned when the subscriber failed to be deleted.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can troubleshoot errors based on the ID.', example='6d739ef6-098a-47****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteQualityFollowerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteQualityFollowerResponseBody(name='body'),
}

/**
 * @summary Deletes a subscriber of a partition filter expression.
 *
 * @description In Data Quality, you must configure monitoring rules based on a partition filter expression. Data Quality uses these rules to detect changes in source data and dirty data generated during the process of extract, transform, and load (ETL). This way, you can prevent tasks from producing unexpected dirty data that affects the smooth running of tasks and business decision-making. You can go to the Manage Subscriptions page to add subscribers for a partition filter expression. When the monitoring rule that is created based on the partition filter expression is triggered, the subscribers can receive notifications and troubleshoot errors at the earliest opportunity. For more information, see [Configure monitoring rules](https://help.aliyun.com/document_detail/73690.html).
 *
 * @param request DeleteQualityFollowerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteQualityFollowerResponse
 */
async function deleteQualityFollowerWithOptions(request: DeleteQualityFollowerRequest, runtime: Util.RuntimeOptions): DeleteQualityFollowerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.followerId)) {
    body['FollowerId'] = request.followerId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteQualityFollower',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a subscriber of a partition filter expression.
 *
 * @description In Data Quality, you must configure monitoring rules based on a partition filter expression. Data Quality uses these rules to detect changes in source data and dirty data generated during the process of extract, transform, and load (ETL). This way, you can prevent tasks from producing unexpected dirty data that affects the smooth running of tasks and business decision-making. You can go to the Manage Subscriptions page to add subscribers for a partition filter expression. When the monitoring rule that is created based on the partition filter expression is triggered, the subscribers can receive notifications and troubleshoot errors at the earliest opportunity. For more information, see [Configure monitoring rules](https://help.aliyun.com/document_detail/73690.html).
 *
 * @param request DeleteQualityFollowerRequest
 * @return DeleteQualityFollowerResponse
 */
async function deleteQualityFollower(request: DeleteQualityFollowerRequest): DeleteQualityFollowerResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteQualityFollowerWithOptions(request, runtime);
}

model DeleteQualityRelativeNodeRequest {
  envType?: string(name='EnvType', description='The type of the compute engine or data source. Valid values:

*   cdh
*   analyticdb_for_mysql
*   odps
*   emr
*   hadoop
*   holodb
*   hybriddb_for_postgresql

This parameter is required.', example='ODPS'),
  matchExpression?: string(name='MatchExpression', description='The partition filter expression.

This parameter is required.', example='dt=$[yyyymmdd]'),
  nodeId?: long(name='NodeId', description='The ID of the node.

This parameter is required.', example='156234'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.

This parameter is required.', example='12345'),
  projectName?: string(name='ProjectName', description='The name of the compute engine instance or data source.

This parameter is required.', example='autotest'),
  tableName?: string(name='TableName', description='The name of the table that is generated by the node.

This parameter is required.', example='dual'),
  targetNodeProjectId?: long(name='TargetNodeProjectId', description='The ID of the workspace to which the node associated with the partition filter expression belongs.

This parameter is required.', example='12345'),
  targetNodeProjectName?: string(name='TargetNodeProjectName', description='The name of the workspace to which the node associated with the partition filter expression belongs.

This parameter is required.', example='autotest'),
}

model DeleteQualityRelativeNodeResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the node is disassociated from the partition filter expression.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='401'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6d739ef6-098a-47****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteQualityRelativeNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteQualityRelativeNodeResponseBody(name='body'),
}

/**
 * @param request DeleteQualityRelativeNodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteQualityRelativeNodeResponse
 */
async function deleteQualityRelativeNodeWithOptions(request: DeleteQualityRelativeNodeRequest, runtime: Util.RuntimeOptions): DeleteQualityRelativeNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.matchExpression)) {
    body['MatchExpression'] = request.matchExpression;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.tableName)) {
    body['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.targetNodeProjectId)) {
    body['TargetNodeProjectId'] = request.targetNodeProjectId;
  }
  if (!Util.isUnset(request.targetNodeProjectName)) {
    body['TargetNodeProjectName'] = request.targetNodeProjectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteQualityRelativeNode',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @param request DeleteQualityRelativeNodeRequest
 * @return DeleteQualityRelativeNodeResponse
 */
async function deleteQualityRelativeNode(request: DeleteQualityRelativeNodeRequest): DeleteQualityRelativeNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteQualityRelativeNodeWithOptions(request, runtime);
}

model DeleteQualityRuleRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the DataWorks console and go to the Workspace page to query the ID.', example='10000'),
  projectName?: string(name='ProjectName', description='The name of the compute engine or data source.

This parameter is required.', example='autotest'),
  ruleId?: long(name='RuleId', description='The monitoring rule ID.

This parameter is required.', example='1234'),
}

model DeleteQualityRuleResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the monitoring rule was deleted.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='401'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='6d739ef6-098a-47****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteQualityRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteQualityRuleResponseBody(name='body'),
}

/**
 * @summary Deletes a monitoring rule.
 *
 * @param request DeleteQualityRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteQualityRuleResponse
 */
async function deleteQualityRuleWithOptions(request: DeleteQualityRuleRequest, runtime: Util.RuntimeOptions): DeleteQualityRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.ruleId)) {
    body['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteQualityRule',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a monitoring rule.
 *
 * @param request DeleteQualityRuleRequest
 * @return DeleteQualityRuleResponse
 */
async function deleteQualityRule(request: DeleteQualityRuleRequest): DeleteQualityRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteQualityRuleWithOptions(request, runtime);
}

model DeleteRecognizeRuleRequest {
  sensitiveId?: string(name='SensitiveId', description='The ID of the sensitive field. You can call the [QuerySensNodeInfo](https://help.aliyun.com/document_detail/2747189.html) operation to query the ID.

This parameter is required.', example='27f5f5e2-ec60-4567-b1e4-779ac3681024'),
  tenantId?: string(name='TenantId', description='The tenant ID. To obtain the tenant ID, perform the following steps: Log on to the [DataWorks console](https://workbench.data.aliyun.com/console). Find your workspace and go to the DataStudio page. On the DataStudio page, click the logon username in the upper-right corner and click User Info in the Menu section.

This parameter is required.', example='10241024'),
}

model DeleteRecognizeRuleResponseBody = {
  data?: any(name='Data', description='The returned data about whether the deletion is successful.', example='{   "HttpStatusCode": 200,   "Success": true }'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='9990030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Missing parameter'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='10000001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

*   true
*   false', example='true'),
}

model DeleteRecognizeRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRecognizeRuleResponseBody(name='body'),
}

/**
 * @summary Deletes sensitive field types.
 *
 * @param request DeleteRecognizeRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteRecognizeRuleResponse
 */
async function deleteRecognizeRuleWithOptions(request: DeleteRecognizeRuleRequest, runtime: Util.RuntimeOptions): DeleteRecognizeRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.sensitiveId)) {
    body['SensitiveId'] = request.sensitiveId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRecognizeRule',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes sensitive field types.
 *
 * @param request DeleteRecognizeRuleRequest
 * @return DeleteRecognizeRuleResponse
 */
async function deleteRecognizeRule(request: DeleteRecognizeRuleRequest): DeleteRecognizeRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRecognizeRuleWithOptions(request, runtime);
}

model DeleteRemindRequest {
  remindId?: long(name='RemindId', description='The ID of the custom alert rule.

This parameter is required.', example='1234'),
}

model DeleteRemindResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the custom alert rule is deleted. Valid values: true and false. The value true indicates that the custom alert rule is deleted. The value false indicates that the custom alert rule fails to be deleted.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteRemindResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRemindResponseBody(name='body'),
}

/**
 * @summary Deletes a custom alert rule.
 *
 * @param request DeleteRemindRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteRemindResponse
 */
async function deleteRemindWithOptions(request: DeleteRemindRequest, runtime: Util.RuntimeOptions): DeleteRemindResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.remindId)) {
    body['RemindId'] = request.remindId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRemind',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a custom alert rule.
 *
 * @param request DeleteRemindRequest
 * @return DeleteRemindResponse
 */
async function deleteRemind(request: DeleteRemindRequest): DeleteRemindResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRemindWithOptions(request, runtime);
}

model DeleteTableRequest {
  appGuid?: string(name='AppGuid', description='The globally unique identifier (GUID) of the MaxCompute project. Specify the GUID in the odps.{projectName} format.', example='odps.test'),
  envType?: int32(name='EnvType', description='The type of the compute engine or data source. Valid values:

*   cdh
*   analyticdb_for_mysql
*   odps
*   emr
*   hadoop
*   holodb
*   hybriddb_for_postgresql', example='1'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.', example='101'),
  schema?: string(name='Schema', description='The schema information of the table. You need to enter the schema information of the table if you enable the table schema in MaxCompute.', example='default', nullable=true),
  tableName?: string(name='TableName', description='The name of the MaxCompute table.

This parameter is required.', example='table1'),
}

model DeleteTableResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='abcde'),
  taskInfo?: {
    content?: string(name='Content', description='The content of the task.', example='success'),
    nextTaskId?: string(name='NextTaskId', description='The ID of the task that is running.', example='abc1'),
    status?: string(name='Status', description='The status of the task that is complete.', example='success'),
    taskId?: string(name='TaskId', description='The ID of the task that is complete.', example='abc'),
  }(name='TaskInfo', description='The information about the task that is used to delete the table.'),
}

model DeleteTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTableResponseBody(name='body'),
}

/**
 * @param request DeleteTableRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteTableResponse
 */
async function deleteTableWithOptions(request: DeleteTableRequest, runtime: Util.RuntimeOptions): DeleteTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appGuid)) {
    query['AppGuid'] = request.appGuid;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTable',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @param request DeleteTableRequest
 * @return DeleteTableResponse
 */
async function deleteTable(request: DeleteTableRequest): DeleteTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTableWithOptions(request, runtime);
}

model DeleteTableLevelRequest {
  levelId?: long(name='LevelId', description='The ID of the table level that you want to delete. You can call the ListTableLevel operation to query the ID.

This parameter is required.', example='123'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.

This parameter is required.', example='123'),
}

model DeleteTableLevelResponseBody = {
  deleteResult?: boolean(name='DeleteResult', description='Indicates whether the table level was deleted.', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='abcde'),
}

model DeleteTableLevelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTableLevelResponseBody(name='body'),
}

/**
 * @summary Deletes a table level. This operation will be replaced soon. We recommend that you do not call this operation.
 *
 * @param request DeleteTableLevelRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteTableLevelResponse
 */
async function deleteTableLevelWithOptions(request: DeleteTableLevelRequest, runtime: Util.RuntimeOptions): DeleteTableLevelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.levelId)) {
    query['LevelId'] = request.levelId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTableLevel',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a table level. This operation will be replaced soon. We recommend that you do not call this operation.
 *
 * @param request DeleteTableLevelRequest
 * @return DeleteTableLevelResponse
 */
async function deleteTableLevel(request: DeleteTableLevelRequest): DeleteTableLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTableLevelWithOptions(request, runtime);
}

model DeleteTableThemeRequest {
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.', example='123'),
  themeId?: long(name='ThemeId', description='The ID of the theme.

This parameter is required.', example='123'),
}

model DeleteTableThemeResponseBody = {
  deleteResult?: boolean(name='DeleteResult', description='Indicates whether the theme was deleted.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='abcdef'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteTableThemeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTableThemeResponseBody(name='body'),
}

/**
 * @summary Deletes a table theme. This operation will be replaced soon. We recommend that you do not call this operation.
 *
 * @param request DeleteTableThemeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteTableThemeResponse
 */
async function deleteTableThemeWithOptions(request: DeleteTableThemeRequest, runtime: Util.RuntimeOptions): DeleteTableThemeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.themeId)) {
    query['ThemeId'] = request.themeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTableTheme',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a table theme. This operation will be replaced soon. We recommend that you do not call this operation.
 *
 * @param request DeleteTableThemeRequest
 * @return DeleteTableThemeResponse
 */
async function deleteTableTheme(request: DeleteTableThemeRequest): DeleteTableThemeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTableThemeWithOptions(request, runtime);
}

model DeployDISyncTaskRequest {
  fileId?: long(name='FileId', description='*   If you set the TaskType parameter to DI_REALTIME, set the FileId parameter to the ID of the real-time synchronization task that you want to deploy.
*   If you set the TaskType parameter to DI_SOLUTION, set the FileId parameter to the ID of the synchronization task that you want to deploy.

You can call the [ListFiles](https://help.aliyun.com/document_detail/173942.html) operation to query the ID of the real-time synchronization task or the synchronization task created in Data Integration.

This parameter is required.', example='100'),
  projectId?: long(name='ProjectId', description='The type of the object that you want to deploy. Valid values:

*   DI_REALTIME: real-time synchronization node
*   DI_SOLUTION: data synchronization solution

This parameter is required.', example='10000'),
  taskType?: string(name='TaskType', description='The type of the object that you want to deploy. Valid values:

*   DI_REALTIME: real-time synchronization task
*   DI_SOLUTION: synchronization task created in Data Integration

This parameter is required.', example='DI_REALTIME'),
}

model DeployDISyncTaskResponseBody = {
  data?: {
    message?: string(name='Message', description='The reason for the failure to publish a data integration synchronization task.

If the data integration synchronization task is published successfully, the return value of this parameter is empty.', example='submit and deploy fail.'),
    status?: string(name='Status', description='The cause of the failure to deploy the real-time synchronization node or data synchronization solution.

If the real-time synchronization node or data synchronization solution is deployed, the value null is returned.', example='success'),
  }(name='Data', description='Indicates whether the real-time synchronization node or data synchronization solution is deployed. Valid values:

*   success: The real-time synchronization node or data synchronization solution is deployed.
*   fail: The real-time synchronization node or data synchronization solution fails to be deployed.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='The ID of the request. You can query logs and troubleshoot issues based on the ID.', example='true'),
}

model DeployDISyncTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeployDISyncTaskResponseBody(name='body'),
}

/**
 * @summary Deploys a real-time synchronization task.
 *
 * @param request DeployDISyncTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeployDISyncTaskResponse
 */
async function deployDISyncTaskWithOptions(request: DeployDISyncTaskRequest, runtime: Util.RuntimeOptions): DeployDISyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeployDISyncTask',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deploys a real-time synchronization task.
 *
 * @param request DeployDISyncTaskRequest
 * @return DeployDISyncTaskResponse
 */
async function deployDISyncTask(request: DeployDISyncTaskRequest): DeployDISyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deployDISyncTaskWithOptions(request, runtime);
}

model DeployFileRequest {
  comment?: string(name='Comment', description='The description of the deployment operation.', example='First release task'),
  fileId?: long(name='FileId', description='The file ID. You can call the [ListFiles](https://help.aliyun.com/document_detail/173942.html) operation to query the file ID. You must configure either this parameter or the NodeId parameter.', example='10000001'),
  nodeId?: long(name='NodeId', description='The ID of the node in the scheduling system that corresponds to the file that you want to deploy. You must configure either the NodeId parameter or the FileId parameter.', example='2000001'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the workspace ID. You must configure either this parameter or the ProjectIdentifier parameter to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the workspace name. You must configure either this parameter or the ProjectId parameter to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model DeployFileResponseBody = {
  data?: long(name='Data', description='The ID of the deployment task. The ID is used as the value of a specific request parameter when you call the [GetDeployment](https://help.aliyun.com/document_detail/173950.html) operation to query the details of the deployment task.', example='30000001'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can troubleshoot issues based on the ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DeployFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeployFileResponseBody(name='body'),
}

/**
 * @summary Deploys a file to the production environment.
 *
 * @param request DeployFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeployFileResponse
 */
async function deployFileWithOptions(request: DeployFileRequest, runtime: Util.RuntimeOptions): DeployFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeployFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deploys a file to the production environment.
 *
 * @param request DeployFileRequest
 * @return DeployFileResponse
 */
async function deployFile(request: DeployFileRequest): DeployFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deployFileWithOptions(request, runtime);
}

model DesensitizeDataRequest {
  data?: string(name='Data', description='The data that you want to mask.

This parameter is required.', example='15365291784'),
  sceneCode?: string(name='SceneCode', description='The code of the data masking scenario. You can view the code on the Data Masking Management page in Data Security Guard of the DataWorks console.

This parameter is required.', example='_default_scene_code'),
}

model DesensitizeDataResponseBody = {
  desensitizeData?: string(name='DesensitizeData', description='The data returned after masking.', example='{     "desensData": "**198807120510**"   }'),
  requestId?: string(name='RequestId', description='The request ID.', example='BCA321BA-46C5-40E9-8A08-6******'),
}

model DesensitizeDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DesensitizeDataResponseBody(name='body'),
}

/**
 * @summary Masks data.
 *
 * @param request DesensitizeDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DesensitizeDataResponse
 */
async function desensitizeDataWithOptions(request: DesensitizeDataRequest, runtime: Util.RuntimeOptions): DesensitizeDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DesensitizeData',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Masks data.
 *
 * @param request DesensitizeDataRequest
 * @return DesensitizeDataResponse
 */
async function desensitizeData(request: DesensitizeDataRequest): DesensitizeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return desensitizeDataWithOptions(request, runtime);
}

model DsgDesensPlanAddOrUpdateRequest {
  desensRules?: [ 
    {
      checkWatermark?: boolean(name='CheckWatermark', description='Specifies whether to add a watermark. Valid values:

*   true
*   false', example='true'),
      dataType?: string(name='DataType', description='The sensitive field type.

This parameter is required.', example='phone'),
      desensPlan?: {
        desensPlanType?: string(name='DesensPlanType', description='The masking method configured in the data masking rule. Valid values:

*   hash
*   mapping
*   mask
*   charreplacement
*   intervalselect
*   decimalpoint
*   emptydesens

This parameter is required.', example='hash'),
        extParam?: map[string]any(name='ExtParam', description='The parameters for the data masking rule.'),
      }(name='DesensPlan', description='The data masking rule.

This parameter is required.'),
      id?: int32(name='Id', description='The ID of the data masking rule. You can call the [DsgDesensPlanQueryList](https://help.aliyun.com/document_detail/2786578.html) operation to query the ID of the data masking rule.', example='123'),
      owner?: string(name='Owner', description='The owner of the data masking rule.

This parameter is required.', example='test_user'),
      ruleName?: string(name='RuleName', description='The name of the data masking rule.

This parameter is required.', example='phone_hash'),
      sceneIds?: [ int32 ](name='SceneIds', description='The level-2 data masking scenario.

This parameter is required.'),
      status?: int32(name='Status', description='The status of the data masking rule. Valid values:

*   0: expired
*   1: effective', example='1'),
    }
  ](name='DesensRules', description='A collection of data masking rules that you want to add or modify.

This parameter is required.'),
}

model DsgDesensPlanAddOrUpdateShrinkRequest {
  desensRulesShrink?: string(name='DesensRules', description='A collection of data masking rules that you want to add or modify.

This parameter is required.'),
}

model DsgDesensPlanAddOrUpdateResponseBody = {
  data?: boolean(name='Data', description='The execution result of adding or modifying a data masking rule.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1029030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='param error'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='400'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='102400001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true false', example='true'),
}

model DsgDesensPlanAddOrUpdateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DsgDesensPlanAddOrUpdateResponseBody(name='body'),
}

/**
 * @summary Adds or modifies a data masking rule.
 *
 * @param tmpReq DsgDesensPlanAddOrUpdateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DsgDesensPlanAddOrUpdateResponse
 */
async function dsgDesensPlanAddOrUpdateWithOptions(tmpReq: DsgDesensPlanAddOrUpdateRequest, runtime: Util.RuntimeOptions): DsgDesensPlanAddOrUpdateResponse {
  Util.validateModel(tmpReq);
  var request = new DsgDesensPlanAddOrUpdateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.desensRules)) {
    request.desensRulesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.desensRules, 'DesensRules', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.desensRulesShrink)) {
    query['DesensRules'] = request.desensRulesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DsgDesensPlanAddOrUpdate',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Adds or modifies a data masking rule.
 *
 * @param request DsgDesensPlanAddOrUpdateRequest
 * @return DsgDesensPlanAddOrUpdateResponse
 */
async function dsgDesensPlanAddOrUpdate(request: DsgDesensPlanAddOrUpdateRequest): DsgDesensPlanAddOrUpdateResponse {
  var runtime = new Util.RuntimeOptions{};
  return dsgDesensPlanAddOrUpdateWithOptions(request, runtime);
}

model DsgDesensPlanDeleteRequest {
  ids?: [ int32 ](name='Ids', description='A collection of data masking rules.

This parameter is required.'),
  sceneCode?: string(name='SceneCode', description='The code of the level-1 data masking scenario to which the rule belongs. Valid values:

*   dataworks_display_desense_code: masking of displayed data in DataStudio and Data Map
*   maxcompute_desense_code: data masking at the MaxCompute compute engine layer
*   maxcompute_new_desense_code: data masking at the MaxCompute compute engine layer (new)
*   hologres_display_desense_code: data masking at the Hologres compute engine layer
*   dataworks_data_integration_desense_code: static data masking in Data Integration
*   dataworks_analysis_desense_code: masking of displayed data in DataAnalysis

This parameter is required.', example='dataworks_display_desense_code'),
}

model DsgDesensPlanDeleteShrinkRequest {
  idsShrink?: string(name='Ids', description='A collection of data masking rules.

This parameter is required.'),
  sceneCode?: string(name='SceneCode', description='The code of the level-1 data masking scenario to which the rule belongs. Valid values:

*   dataworks_display_desense_code: masking of displayed data in DataStudio and Data Map
*   maxcompute_desense_code: data masking at the MaxCompute compute engine layer
*   maxcompute_new_desense_code: data masking at the MaxCompute compute engine layer (new)
*   hologres_display_desense_code: data masking at the Hologres compute engine layer
*   dataworks_data_integration_desense_code: static data masking in Data Integration
*   dataworks_analysis_desense_code: masking of displayed data in DataAnalysis

This parameter is required.', example='dataworks_display_desense_code'),
}

model DsgDesensPlanDeleteResponseBody = {
  data?: boolean(name='Data', description='The operation result. Valid values:

*   true: The operation is successful.
*   false: The operation fails.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1029030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='param error'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='400'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='102400001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DsgDesensPlanDeleteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DsgDesensPlanDeleteResponseBody(name='body'),
}

/**
 * @summary Deletes a data masking rule created in Data Security Guard.
 *
 * @param tmpReq DsgDesensPlanDeleteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DsgDesensPlanDeleteResponse
 */
async function dsgDesensPlanDeleteWithOptions(tmpReq: DsgDesensPlanDeleteRequest, runtime: Util.RuntimeOptions): DsgDesensPlanDeleteResponse {
  Util.validateModel(tmpReq);
  var request = new DsgDesensPlanDeleteShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.idsShrink)) {
    query['Ids'] = request.idsShrink;
  }
  if (!Util.isUnset(request.sceneCode)) {
    query['SceneCode'] = request.sceneCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DsgDesensPlanDelete',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a data masking rule created in Data Security Guard.
 *
 * @param request DsgDesensPlanDeleteRequest
 * @return DsgDesensPlanDeleteResponse
 */
async function dsgDesensPlanDelete(request: DsgDesensPlanDeleteRequest): DsgDesensPlanDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  return dsgDesensPlanDeleteWithOptions(request, runtime);
}

model DsgDesensPlanQueryListRequest {
  owner?: string(name='Owner', description='The owner of the data masking rule.', example='user1'),
  pageNumber?: int32(name='PageNumber', description='The page number.

This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: 100.

This parameter is required.', example='10'),
  ruleName?: string(name='RuleName', description='The name of the sensitive field.', example='phone'),
  sceneId?: int32(name='SceneId', description='The ID of the level-2 data masking scenario. You can call the [DsgSceneQuerySceneListByName](https://help.aliyun.com/document_detail/2786322.html) operation to query the list of IDs.

This parameter is required.', example='123'),
  status?: int32(name='Status', description='The status of the data masking rule. Valid values:

*   0: expired
*   1: effective', example='1'),
}

model DsgDesensPlanQueryListResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='1029030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='param error'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='400'),
  pageData?: {
    data?: [ 
      {
        checkWatermark?: boolean(name='CheckWatermark', description='Indicates whether a watermark is added. Valid values:

*   true
*   false', example='true'),
        dataType?: string(name='DataType', description='The sensitive field type.', example='phone'),
        desenMode?: string(name='DesenMode', description='The type of the data masking method.', example='HASH'),
        desensPlan?: {
          desensPlanType?: string(name='DesensPlanType', description='The type of the data masking rule.', example='hash'),
          extParam?: map[string]any(name='ExtParam', description='The parameters for the data masking rule. For more information about the parameters, see the [DsgDesensPlanAddOrUpdate](https://help.aliyun.com/document_detail/2786295.html) API reference.'),
        }(name='DesensPlan', description='The details of the data masking rule.'),
        desensRule?: string(name='DesensRule', description='The data masking rule.', example='HASH'),
        desensWay?: string(name='DesensWay', description='The data masking method.', example='HASH'),
        gmtCreate?: string(name='GmtCreate', description='The time when the data masking rule was created.', example='2024-05-09 15:46:20'),
        gmtModified?: string(name='GmtModified', description='The time when the data masking rule was modified.', example='2024-05-09 15:46:20'),
        id?: long(name='Id', description='The ID of the data masking rule.', example='123'),
        owner?: string(name='Owner', description='The owner of the data masking rule.', example='user1'),
        ruleName?: string(name='RuleName', description='The name of the data masking rule.', example='phone_hash'),
        sceneCode?: string(name='SceneCode', description='The code of the level-1 data masking scenario to which the rule belongs. Valid values:

*   dataworks_display_desense_code: masking of displayed data in DataStudio and Data Map
*   maxcompute_desense_code: data masking at the MaxCompute compute engine layer
*   maxcompute_new_desense_code: data masking at the MaxCompute compute engine layer (new)
*   hologres_display_desense_code: data masking at the Hologres compute engine layer
*   dataworks_data_integration_desense_code: static data masking in Data Integration
*   dataworks_analysis_desense_code: masking of displayed data in DataAnalysis', example='dataworks_display_desense_code'),
        sceneName?: string(name='SceneName', description='The name of the level-2 data masking scenario to which the data masking rule belongs.', example='test_scene'),
        status?: int32(name='Status', description='The status of the data masking rule. Valid values:

*   0: expired
*   1: effective', example='1'),
      }
    ](name='Data', description='The information about the data masking rule.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: 100.', example='10'),
    totalCount?: int32(name='TotalCount', description='The number of data masking rules.', example='100'),
  }(name='PageData', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='102400001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DsgDesensPlanQueryListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DsgDesensPlanQueryListResponseBody(name='body'),
}

/**
 * @summary Queries a list of data masking rules.
 *
 * @param request DsgDesensPlanQueryListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DsgDesensPlanQueryListResponse
 */
async function dsgDesensPlanQueryListWithOptions(request: DsgDesensPlanQueryListRequest, runtime: Util.RuntimeOptions): DsgDesensPlanQueryListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DsgDesensPlanQueryList',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of data masking rules.
 *
 * @param request DsgDesensPlanQueryListRequest
 * @return DsgDesensPlanQueryListResponse
 */
async function dsgDesensPlanQueryList(request: DsgDesensPlanQueryListRequest): DsgDesensPlanQueryListResponse {
  var runtime = new Util.RuntimeOptions{};
  return dsgDesensPlanQueryListWithOptions(request, runtime);
}

model DsgDesensPlanUpdateStatusRequest {
  ids?: [ int32 ](name='Ids', description='A collection of IDs of the data masking rules of which the status you want to modify.

This parameter is required.'),
  sceneCode?: string(name='SceneCode', description='The code of the level-1 data masking scenario to which the rule belongs. Valid values:

*   dataworks_display_desense_code: masking of displayed data in DataStudio and Data Map
*   maxcompute_desense_code: data masking at the MaxCompute compute engine layer
*   maxcompute_new_desense_code: data masking at the MaxCompute compute engine layer (new)
*   hologres_display_desense_code: data masking at the Hologres compute engine layer
*   dataworks_data_integration_desense_code: static data masking in Data Integration
*   dataworks_analysis_desense_code: masking of displayed data in DataAnalysis

This parameter is required.', example='dataworks_display_desense_code'),
  status?: int32(name='Status', description='The status of the data masking rule. Valid values:

*   0: expired
*   1: effective

This parameter is required.', example='1'),
}

model DsgDesensPlanUpdateStatusShrinkRequest {
  idsShrink?: string(name='Ids', description='A collection of IDs of the data masking rules of which the status you want to modify.

This parameter is required.'),
  sceneCode?: string(name='SceneCode', description='The code of the level-1 data masking scenario to which the rule belongs. Valid values:

*   dataworks_display_desense_code: masking of displayed data in DataStudio and Data Map
*   maxcompute_desense_code: data masking at the MaxCompute compute engine layer
*   maxcompute_new_desense_code: data masking at the MaxCompute compute engine layer (new)
*   hologres_display_desense_code: data masking at the Hologres compute engine layer
*   dataworks_data_integration_desense_code: static data masking in Data Integration
*   dataworks_analysis_desense_code: masking of displayed data in DataAnalysis

This parameter is required.', example='dataworks_display_desense_code'),
  status?: int32(name='Status', description='The status of the data masking rule. Valid values:

*   0: expired
*   1: effective

This parameter is required.', example='1'),
}

model DsgDesensPlanUpdateStatusResponseBody = {
  data?: boolean(name='Data', description='The operation result. Valid values:

*   true: The operation is successful.
*   false: The operation fails.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1029030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='param error'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='400'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='102400001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DsgDesensPlanUpdateStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DsgDesensPlanUpdateStatusResponseBody(name='body'),
}

/**
 * @summary Modifies the status of a data masking rule.
 *
 * @param tmpReq DsgDesensPlanUpdateStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DsgDesensPlanUpdateStatusResponse
 */
async function dsgDesensPlanUpdateStatusWithOptions(tmpReq: DsgDesensPlanUpdateStatusRequest, runtime: Util.RuntimeOptions): DsgDesensPlanUpdateStatusResponse {
  Util.validateModel(tmpReq);
  var request = new DsgDesensPlanUpdateStatusShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.idsShrink)) {
    query['Ids'] = request.idsShrink;
  }
  if (!Util.isUnset(request.sceneCode)) {
    query['SceneCode'] = request.sceneCode;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DsgDesensPlanUpdateStatus',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Modifies the status of a data masking rule.
 *
 * @param request DsgDesensPlanUpdateStatusRequest
 * @return DsgDesensPlanUpdateStatusResponse
 */
async function dsgDesensPlanUpdateStatus(request: DsgDesensPlanUpdateStatusRequest): DsgDesensPlanUpdateStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return dsgDesensPlanUpdateStatusWithOptions(request, runtime);
}

model DsgPlatformQueryProjectsAndSchemaFromMetaRequest {
  engineName?: string(name='EngineName', description='The type of the compute engine. Valid values:

*   ODPS.ODPS
*   EMR
*   HOLO.POSTGRES

This parameter is required.', example='EMR'),
}

model DsgPlatformQueryProjectsAndSchemaFromMetaResponseBody = {
  data?: [ 
    {
      clusterId?: string(name='ClusterId', description='The ID of the EMR cluster. This parameter is generated only when the request parameter EngineName is set to EMR.', example='c-12345'),
      project?: string(name='Project', description='The name of the compute engine.', example='emr_test_project'),
    }
  ](name='Data', description='The data returned.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1029030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='param error'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='400'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='102400001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DsgPlatformQueryProjectsAndSchemaFromMetaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DsgPlatformQueryProjectsAndSchemaFromMetaResponseBody(name='body'),
}

/**
 * @summary Queries a list of compute engines of different types in the current tenant.
 *
 * @param request DsgPlatformQueryProjectsAndSchemaFromMetaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DsgPlatformQueryProjectsAndSchemaFromMetaResponse
 */
async function dsgPlatformQueryProjectsAndSchemaFromMetaWithOptions(request: DsgPlatformQueryProjectsAndSchemaFromMetaRequest, runtime: Util.RuntimeOptions): DsgPlatformQueryProjectsAndSchemaFromMetaResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DsgPlatformQueryProjectsAndSchemaFromMeta',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of compute engines of different types in the current tenant.
 *
 * @param request DsgPlatformQueryProjectsAndSchemaFromMetaRequest
 * @return DsgPlatformQueryProjectsAndSchemaFromMetaResponse
 */
async function dsgPlatformQueryProjectsAndSchemaFromMeta(request: DsgPlatformQueryProjectsAndSchemaFromMetaRequest): DsgPlatformQueryProjectsAndSchemaFromMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return dsgPlatformQueryProjectsAndSchemaFromMetaWithOptions(request, runtime);
}

model DsgQueryDefaultTemplatesRequest {
  sceneId?: int32(name='SceneId', description='The ID of the level-2 data masking scenario. You can call the [DsgSceneQuerySceneListByName](https://help.aliyun.com/document_detail/2786322.html) operation to query the list of IDs.

This parameter is required.', example='123'),
}

model DsgQueryDefaultTemplatesResponseBody = {
  data?: [ 
    {
      dataType?: string(name='DataType', description='The sensitive field type.', example='phone'),
      desensPlanTemplate?: map[string][ DataDesensPlanTemplateValue       ](name='DesensPlanTemplate', description='The supported data masking methods and parameter descriptions.'),
    }
  ](name='Data', description='The data returned.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1029030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='param error'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='400'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='102400001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DsgQueryDefaultTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DsgQueryDefaultTemplatesResponseBody(name='body'),
}

/**
 * @summary Queries a list of available sensitive field type templates and the data masking rules supported by the templates. You can refer to the response parameters of this operation to configure a data masking rule.
 *
 * @param request DsgQueryDefaultTemplatesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DsgQueryDefaultTemplatesResponse
 */
async function dsgQueryDefaultTemplatesWithOptions(request: DsgQueryDefaultTemplatesRequest, runtime: Util.RuntimeOptions): DsgQueryDefaultTemplatesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DsgQueryDefaultTemplates',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of available sensitive field type templates and the data masking rules supported by the templates. You can refer to the response parameters of this operation to configure a data masking rule.
 *
 * @param request DsgQueryDefaultTemplatesRequest
 * @return DsgQueryDefaultTemplatesResponse
 */
async function dsgQueryDefaultTemplates(request: DsgQueryDefaultTemplatesRequest): DsgQueryDefaultTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return dsgQueryDefaultTemplatesWithOptions(request, runtime);
}

model DsgQuerySensResultRequest {
  col?: string(name='Col', description='The name of the field.', example='col'),
  dbType?: string(name='DbType', description='The type of the database. Valid values:

*   **ODPS.ODPS**
*   **HOLO.POSTGRES**
*   **EMR**', example='ODPS.ODPS'),
  level?: string(name='Level', description='The sensitivity level of the field.', example='3'),
  nodeName?: string(name='NodeName', description='The name of a data category.', example='Personal information'),
  order?: string(name='Order', description='The sorting method. Valid values:

*   DESC
*   ASC', example='DESC'),
  orderField?: string(name='OrderField', description='The field used for sorting.

*   gmt_create
*   gmt_modified', example='gmt_create'),
  pageNo?: int32(name='PageNo', description='The page number. Pages start from page 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 20.', example='10'),
  projectName?: string(name='ProjectName', description='The name of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the workspace name.', example='project'),
  schemaName?: string(name='SchemaName', description='The name of the schema.', example='schema'),
  sensStatus?: string(name='SensStatus', description='The sensitivity status of the field.

*   1: indicates sensitive.
*   \\\\-1: indicates non-sensitive.', example='1'),
  sensitiveId?: string(name='SensitiveId', description='The sensitive field ID.', example='10241024'),
  sensitiveName?: string(name='SensitiveName', description='The name of the sensitive field.', example='name'),
  table?: string(name='Table', description='The name of the table.', example='table'),
  tenantId?: string(name='TenantId', description='The tenant ID. To obtain the tenant ID, perform the following steps: Log on to the [DataWorks console](https://workbench.data.aliyun.com/console). Find your workspace and go to the DataStudio page. On the DataStudio page, click the logon username in the upper-right corner and click User Info in the Menu section.

This parameter is required.', example='10241024'),
}

model DsgQuerySensResultResponseBody = {
  data?: any(name='Data', description='The data returned.', example='1234'),
  dynamicErrorCode?: string(name='DynamicErrorCode', description='The error code. The value is the same as that of ErrorCode.', example='400'),
  dynamicErrorMessage?: string(name='DynamicErrorMessage', description='The error message. The value is the same as that of ErrorMessage.', example='Missing parameter'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='400'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Missing parameter'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='400'),
  requestId?: string(name='RequestId', description='The request ID.', example='900000001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

*   true
*   false', example='true'),
}

model DsgQuerySensResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DsgQuerySensResultResponseBody(name='body'),
}

/**
 * @summary Queries the identification results of sensitive data.
 *
 * @description The query capability of the API operation is similar to the query feature in Data Security Guard in the DataWorks console. The API operation can be used to query the identification results of sensitive data of a tenant based on the association with the tenant ID.
 * *   You can search for a specific identification result based on filter conditions such as data source type and workspace.
 * *   You can sort the identification results of sensitive data of a tenant based on the values of a field in ascending or descending order.
 * *   This operation supports paged query.
 *
 * @param request DsgQuerySensResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DsgQuerySensResultResponse
 */
async function dsgQuerySensResultWithOptions(request: DsgQuerySensResultRequest, runtime: Util.RuntimeOptions): DsgQuerySensResultResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.col)) {
    body['Col'] = request.col;
  }
  if (!Util.isUnset(request.dbType)) {
    body['DbType'] = request.dbType;
  }
  if (!Util.isUnset(request.level)) {
    body['Level'] = request.level;
  }
  if (!Util.isUnset(request.nodeName)) {
    body['NodeName'] = request.nodeName;
  }
  if (!Util.isUnset(request.order)) {
    body['Order'] = request.order;
  }
  if (!Util.isUnset(request.orderField)) {
    body['OrderField'] = request.orderField;
  }
  if (!Util.isUnset(request.pageNo)) {
    body['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.schemaName)) {
    body['SchemaName'] = request.schemaName;
  }
  if (!Util.isUnset(request.sensStatus)) {
    body['SensStatus'] = request.sensStatus;
  }
  if (!Util.isUnset(request.sensitiveId)) {
    body['SensitiveId'] = request.sensitiveId;
  }
  if (!Util.isUnset(request.sensitiveName)) {
    body['SensitiveName'] = request.sensitiveName;
  }
  if (!Util.isUnset(request.table)) {
    body['Table'] = request.table;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DsgQuerySensResult',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the identification results of sensitive data.
 *
 * @description The query capability of the API operation is similar to the query feature in Data Security Guard in the DataWorks console. The API operation can be used to query the identification results of sensitive data of a tenant based on the association with the tenant ID.
 * *   You can search for a specific identification result based on filter conditions such as data source type and workspace.
 * *   You can sort the identification results of sensitive data of a tenant based on the values of a field in ascending or descending order.
 * *   This operation supports paged query.
 *
 * @param request DsgQuerySensResultRequest
 * @return DsgQuerySensResultResponse
 */
async function dsgQuerySensResult(request: DsgQuerySensResultRequest): DsgQuerySensResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return dsgQuerySensResultWithOptions(request, runtime);
}

model DsgRunSensIdentifyRequest {
  esMetaParams?: [ 
    {
      clusterId?: string(name='ClusterId', description='The cluster ID. You can obtain the ID based on the data source you use.', example='101010'),
      dbType?: string(name='DbType', description='The type of the data source. Valid values:

*   ODPS.ODPS
*   EMR
*   HOLO.POSTGRES', example='ODPS.ODPS'),
      instanceId?: long(name='InstanceId', description='The instance ID. You can obtain the ID based on the data source you use.', example='hgprecn-cn-9lb37k181024'),
      projectName?: string(name='ProjectName', description='The name of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the name.', example='1666676756691024'),
      schemaName?: string(name='SchemaName', description='The name of the schema.', example='default'),
      tableName?: string(name='TableName', description='The name of the table.', example='table1'),
      tableNameList?: [ string ](name='TableNameList', description='The names of the tables.'),
      user?: string(name='User', description='The username of the operator. We recommend that you enter the username of your Alibaba Cloud account.', example='xxx-uat'),
    }
  ](name='EsMetaParams', description='The parameters that you need to configure to scan specified metadata.'),
  tenantId?: string(name='TenantId', description='The tenant ID. To obtain the tenant ID, perform the following steps: Log on to the [DataWorks console](https://workbench.data.aliyun.com/console). Find your workspace and go to the DataStudio page. On the DataStudio page, click the logon username in the upper-right corner and click User Info in the Menu section.

This parameter is required.', example='10241024'),
}

model DsgRunSensIdentifyShrinkRequest {
  esMetaParamsShrink?: string(name='EsMetaParams', description='The parameters that you need to configure to scan specified metadata.'),
  tenantId?: string(name='TenantId', description='The tenant ID. To obtain the tenant ID, perform the following steps: Log on to the [DataWorks console](https://workbench.data.aliyun.com/console). Find your workspace and go to the DataStudio page. On the DataStudio page, click the logon username in the upper-right corner and click User Info in the Menu section.

This parameter is required.', example='10241024'),
}

model DsgRunSensIdentifyResponseBody = {
  data?: any(name='Data', description='The ID of the generated sensitive data identification task. The value is of the INT 64 type.', example='1000001'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='9990030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Missing parameter'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='400'),
  requestId?: string(name='RequestId', description='The request ID.', example='10000001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DsgRunSensIdentifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DsgRunSensIdentifyResponseBody(name='body'),
}

/**
 * @summary Starts a sensitive data identification task in Data Security Guard.
 *
 * @param tmpReq DsgRunSensIdentifyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DsgRunSensIdentifyResponse
 */
async function dsgRunSensIdentifyWithOptions(tmpReq: DsgRunSensIdentifyRequest, runtime: Util.RuntimeOptions): DsgRunSensIdentifyResponse {
  Util.validateModel(tmpReq);
  var request = new DsgRunSensIdentifyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.esMetaParams)) {
    request.esMetaParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.esMetaParams, 'EsMetaParams', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.esMetaParamsShrink)) {
    body['EsMetaParams'] = request.esMetaParamsShrink;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DsgRunSensIdentify',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Starts a sensitive data identification task in Data Security Guard.
 *
 * @param request DsgRunSensIdentifyRequest
 * @return DsgRunSensIdentifyResponse
 */
async function dsgRunSensIdentify(request: DsgRunSensIdentifyRequest): DsgRunSensIdentifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return dsgRunSensIdentifyWithOptions(request, runtime);
}

model DsgSceneAddOrUpdateSceneRequest {
  scenes?: [ 
    {
      desc?: string(name='desc', description='The description.', example='Test scenarios'),
      id?: string(name='id', description='The ID of the level-2 data masking scenario.

*   If you do not configure this parameter, the current operation is to add a level-2 data masking scenario.
*   If you configure this parameter, the current operation is to modify a level-2 data masking scenario. You can call the [DsgSceneQuerySceneListByName](https://help.aliyun.com/document_detail/2786322.html) operation to query the ID of the level-2 data masking scenario.', example='123'),
      projects?: [ 
        {
          clusterId?: string(name='clusterId', description='If the data masking scenario takes effect for an E-MapReduce (EMR) compute engine, enter the ID of an EMR cluster. This parameter is required only when you use an EMR compute engine.', example='c-1234'),
          dbType?: string(name='dbType', description='The type of the compute engine for which the data masking scenario takes effect. Valid values:

*   ODPS: ODPS.ODPS
*   HOLO: HOLO.POSTGRES
*   EMR: EMR', example='ODPS.ODPS'),
          projectName?: string(name='projectName', description='The name of the compute engine instance for which the data masking scenario takes effect.', example='dev_project'),
        }
      ](name='projects', description='The information about the compute engine for which the data masking scenario takes effect.'),
      sceneCode?: string(name='sceneCode', description='The code of the level-1 data masking scenario to which the level-2 data masking scenario belongs. Valid values:

*   dataworks_display_desense_code: masking of displayed data in DataStudio and Data Map
*   maxcompute_desense_code: data masking at the MaxCompute compute engine layer
*   maxcompute_new_desense_code: data masking at the MaxCompute compute engine layer (new)
*   dataworks_analysis_desense_code: masking of displayed data in DataAnalysis

This parameter is required.', example='dataworks_display_desense_code'),
      sceneName?: string(name='sceneName', description='The name of the level-2 data masking scenario.

This parameter is required.', example='dev_scene'),
      userGroupIds?: [ long ](name='userGroupIds', description='The information about the user group for which the data masking scenario takes effect.'),
    }
  ](name='scenes', description='The information about the level-2 data masking scenario.

This parameter is required.'),
}

model DsgSceneAddOrUpdateSceneShrinkRequest {
  scenesShrink?: string(name='scenes', description='The information about the level-2 data masking scenario.

This parameter is required.'),
}

model DsgSceneAddOrUpdateSceneResponseBody = {
  data?: boolean(name='Data', description='The operation result.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1029030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='param error'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='400'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='102400001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DsgSceneAddOrUpdateSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DsgSceneAddOrUpdateSceneResponseBody(name='body'),
}

/**
 * @summary Adds or modifies a level-2 data masking scenario.
 *
 * @param tmpReq DsgSceneAddOrUpdateSceneRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DsgSceneAddOrUpdateSceneResponse
 */
async function dsgSceneAddOrUpdateSceneWithOptions(tmpReq: DsgSceneAddOrUpdateSceneRequest, runtime: Util.RuntimeOptions): DsgSceneAddOrUpdateSceneResponse {
  Util.validateModel(tmpReq);
  var request = new DsgSceneAddOrUpdateSceneShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.scenes)) {
    request.scenesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scenes, 'scenes', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.scenesShrink)) {
    query['scenes'] = request.scenesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DsgSceneAddOrUpdateScene',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Adds or modifies a level-2 data masking scenario.
 *
 * @param request DsgSceneAddOrUpdateSceneRequest
 * @return DsgSceneAddOrUpdateSceneResponse
 */
async function dsgSceneAddOrUpdateScene(request: DsgSceneAddOrUpdateSceneRequest): DsgSceneAddOrUpdateSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  return dsgSceneAddOrUpdateSceneWithOptions(request, runtime);
}

model DsgSceneQuerySceneListByNameRequest {
  sceneName?: string(name='SceneName', description='The name of the data masking scenario. A fuzzy match is performed in the platform based on a keyword to search for the data masking scenario.', example='dev_'),
}

model DsgSceneQuerySceneListByNameResponseBody = {
  data?: [ 
    {
      children?: [ any ](name='Children', description='The information about multiple levels of data masking scenarios.'),
      desc?: string(name='Desc', description='The description of the data masking scenario.', example='Test scenarios'),
      id?: long(name='Id', description='The ID of the data masking scenario.', example='123'),
      projects?: [ 
        {
          clusterId?: string(name='ClusterId', description='The ID of the EMR cluster. This parameter is returned only when the data scope that takes effect in the data masking scenario is an EMR compute engine.', example='c-1234'),
          dbType?: string(name='DbType', description='The type of the compute engine. Valid values:

*   ODPS: ODPS.ODPS
*   HOLO: HOLO.POSTGRES
*   EMR: EMR', example='ODPS.ODPS'),
          projectName?: string(name='ProjectName', description='The name of the compute engine.', example='dev_project'),
        }
      ](name='Projects', description='The information about the compute engine for which the data masking scenario takes effect.'),
      sceneCode?: string(name='SceneCode', description='The code of the level-1 data masking scenario. Valid values:

*   dataworks_display_desense_code: masking of displayed data in DataStudio and Data Map
*   maxcompute_desense_code: data masking at the MaxCompute compute engine layer
*   maxcompute_new_desense_code: data masking at the MaxCompute compute engine layer (new)
*   hologres_display_desense_code: data masking at the Hologres compute engine layer
*   dataworks_data_integration_desense_code: static data masking in Data Integration
*   dataworks_analysis_desense_code: masking of displayed data in DataAnalysis', example='dataworks_display_desense_code'),
      sceneLevel?: int32(name='SceneLevel', description='The level of the data masking scenario. Valid values:

*   0: level-1 data masking scenario
*   1: level-2 data masking scenario', example='1'),
      sceneName?: string(name='SceneName', description='The name of the data masking scenario.', example='test_scene'),
      userGroups?: string(name='UserGroups', description='The list of user groups in the data masking scenario. Separate user groups with commas (,).', example='user1,user2'),
    }
  ](name='Data', description='The returned data.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1029030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='param error'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='400'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='102400001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DsgSceneQuerySceneListByNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DsgSceneQuerySceneListByNameResponseBody(name='body'),
}

/**
 * @summary Queries a list of data masking scenarios.
 *
 * @param request DsgSceneQuerySceneListByNameRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DsgSceneQuerySceneListByNameResponse
 */
async function dsgSceneQuerySceneListByNameWithOptions(request: DsgSceneQuerySceneListByNameRequest, runtime: Util.RuntimeOptions): DsgSceneQuerySceneListByNameResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DsgSceneQuerySceneListByName',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of data masking scenarios.
 *
 * @param request DsgSceneQuerySceneListByNameRequest
 * @return DsgSceneQuerySceneListByNameResponse
 */
async function dsgSceneQuerySceneListByName(request: DsgSceneQuerySceneListByNameRequest): DsgSceneQuerySceneListByNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return dsgSceneQuerySceneListByNameWithOptions(request, runtime);
}

model DsgScenedDeleteSceneRequest {
  ids?: [ int32 ](name='Ids', description='The IDs of level-2 data masking scenarios.

This parameter is required.'),
}

model DsgScenedDeleteSceneShrinkRequest {
  idsShrink?: string(name='Ids', description='The IDs of level-2 data masking scenarios.

This parameter is required.'),
}

model DsgScenedDeleteSceneResponseBody = {
  data?: boolean(name='Data', description='The operation result. Valid values:

*   true: The operation is successful.
*   false: The operation failed.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1029030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='param error'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='400'),
  requestId?: string(name='RequestId', description='The request ID.', example='102400001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DsgScenedDeleteSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DsgScenedDeleteSceneResponseBody(name='body'),
}

/**
 * @summary Deletes a level-2 data masking scenario created in Data Security Guard.
 *
 * @param tmpReq DsgScenedDeleteSceneRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DsgScenedDeleteSceneResponse
 */
async function dsgScenedDeleteSceneWithOptions(tmpReq: DsgScenedDeleteSceneRequest, runtime: Util.RuntimeOptions): DsgScenedDeleteSceneResponse {
  Util.validateModel(tmpReq);
  var request = new DsgScenedDeleteSceneShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.idsShrink)) {
    query['Ids'] = request.idsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DsgScenedDeleteScene',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a level-2 data masking scenario created in Data Security Guard.
 *
 * @param request DsgScenedDeleteSceneRequest
 * @return DsgScenedDeleteSceneResponse
 */
async function dsgScenedDeleteScene(request: DsgScenedDeleteSceneRequest): DsgScenedDeleteSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  return dsgScenedDeleteSceneWithOptions(request, runtime);
}

model DsgStopSensIdentifyRequest {
  jobId?: long(name='JobId', description='The ID of the sensitive data identification task. You can call the [DsgRunSensIdentify](https://help.aliyun.com/document_detail/2744039.html) operation to obtain the task ID.

This parameter is required.', example='1000001'),
  tenantId?: string(name='TenantId', description='The tenant ID. To obtain the tenant ID, perform the following steps: Log on to the [DataWorks console](https://workbench.data.aliyun.com/console). Find your workspace and go to the DataStudio page. On the DataStudio page, click the logon username in the upper-right corner and click User Info in the Menu section.

This parameter is required.', example='10241024'),
}

model DsgStopSensIdentifyResponseBody = {
  data?: any(name='Data', description='The returned data, which is of the Boolean type.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='9990030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Missing parameter'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='10000001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DsgStopSensIdentifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DsgStopSensIdentifyResponseBody(name='body'),
}

/**
 * @summary Stops a sensitive data identification task.
 *
 * @param request DsgStopSensIdentifyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DsgStopSensIdentifyResponse
 */
async function dsgStopSensIdentifyWithOptions(request: DsgStopSensIdentifyRequest, runtime: Util.RuntimeOptions): DsgStopSensIdentifyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DsgStopSensIdentify',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Stops a sensitive data identification task.
 *
 * @param request DsgStopSensIdentifyRequest
 * @return DsgStopSensIdentifyResponse
 */
async function dsgStopSensIdentify(request: DsgStopSensIdentifyRequest): DsgStopSensIdentifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return dsgStopSensIdentifyWithOptions(request, runtime);
}

model DsgUserGroupAddOrUpdateRequest {
  userGroups?: [ 
    {
      accounts?: [ string ](name='Accounts', description='The users in the group.

*   If a user group is created by using an Alibaba Cloud account and a RAM role, you can call the [DsgUserGroupQueryUserList](https://help.aliyun.com/document_detail/2786445.html) operation to query the users in the group.
*   If a user group is created by using a MaxCompute role, you can call the [DsgUserGroupQueryUserList](https://help.aliyun.com/document_detail/2785695.html) operation to query the users in the group.

This parameter is required.'),
      id?: long(name='Id', description='The user group ID.

*   If you do not configure this parameter, the current operation is to add a user group.
*   If you configure this parameter, the current operation is to modify a user group. You can call the [DsgUserGroupQueryList](https://help.aliyun.com/document_detail/2786441.html) operation to query the user group ID.', example='123'),
      name?: string(name='Name', description='The name of the user group.

This parameter is required.', example='yun_group'),
      owner?: string(name='Owner', description='The owner of the user group.

This parameter is required.', example='user1'),
      projectName?: string(name='ProjectName', description='The name of the MaxCompute project. You must configure this parameter when you create a MaxCompute user group.', example='dev_project'),
      userGroupType?: int32(name='UserGroupType', description='The type of the user group. Valid values:

*   1: Alibaba Cloud account
*   2: RAM role
*   3: MaxCompute role

This parameter is required.', example='1'),
    }
  ](name='UserGroups', description='The information about the user group.

This parameter is required.'),
}

model DsgUserGroupAddOrUpdateShrinkRequest {
  userGroupsShrink?: string(name='UserGroups', description='The information about the user group.

This parameter is required.'),
}

model DsgUserGroupAddOrUpdateResponseBody = {
  data?: boolean(name='Data', description='The operation result. Valid values:

*   true: The operation is successful.
*   false: The operation fails.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1029030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='param error'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='400'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='102400001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DsgUserGroupAddOrUpdateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DsgUserGroupAddOrUpdateResponseBody(name='body'),
}

/**
 * @summary Adds or modifies a user group.
 *
 * @param tmpReq DsgUserGroupAddOrUpdateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DsgUserGroupAddOrUpdateResponse
 */
async function dsgUserGroupAddOrUpdateWithOptions(tmpReq: DsgUserGroupAddOrUpdateRequest, runtime: Util.RuntimeOptions): DsgUserGroupAddOrUpdateResponse {
  Util.validateModel(tmpReq);
  var request = new DsgUserGroupAddOrUpdateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userGroups)) {
    request.userGroupsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userGroups, 'UserGroups', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.userGroupsShrink)) {
    query['UserGroups'] = request.userGroupsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DsgUserGroupAddOrUpdate',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Adds or modifies a user group.
 *
 * @param request DsgUserGroupAddOrUpdateRequest
 * @return DsgUserGroupAddOrUpdateResponse
 */
async function dsgUserGroupAddOrUpdate(request: DsgUserGroupAddOrUpdateRequest): DsgUserGroupAddOrUpdateResponse {
  var runtime = new Util.RuntimeOptions{};
  return dsgUserGroupAddOrUpdateWithOptions(request, runtime);
}

model DsgUserGroupDeleteRequest {
  ids?: [ long ](name='Ids', description='The information about the user group.'),
}

model DsgUserGroupDeleteShrinkRequest {
  idsShrink?: string(name='Ids', description='The information about the user group.'),
}

model DsgUserGroupDeleteResponseBody = {
  data?: boolean(name='Data', description='The operation result. Valid values:

*   true: The user group is deleted.
*   false: The user group fails to be deleted.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1029030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='param error'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='400'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='102400001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DsgUserGroupDeleteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DsgUserGroupDeleteResponseBody(name='body'),
}

/**
 * @summary Deletes a user group configured in Data Security Guard.
 *
 * @param tmpReq DsgUserGroupDeleteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DsgUserGroupDeleteResponse
 */
async function dsgUserGroupDeleteWithOptions(tmpReq: DsgUserGroupDeleteRequest, runtime: Util.RuntimeOptions): DsgUserGroupDeleteResponse {
  Util.validateModel(tmpReq);
  var request = new DsgUserGroupDeleteShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.idsShrink)) {
    query['Ids'] = request.idsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DsgUserGroupDelete',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a user group configured in Data Security Guard.
 *
 * @param request DsgUserGroupDeleteRequest
 * @return DsgUserGroupDeleteResponse
 */
async function dsgUserGroupDelete(request: DsgUserGroupDeleteRequest): DsgUserGroupDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  return dsgUserGroupDeleteWithOptions(request, runtime);
}

model DsgUserGroupGetOdpsRoleGroupsRequest {
  projectName?: string(name='ProjectName', description='The name of the MaxCompute project. You can call the [DsgPlatformQueryProjectsAndSchemaFromMeta](https://help.aliyun.com/document_detail/2786303.html) operation to query a list of MaxCompute projects.

This parameter is required.', example='test_project'),
}

model DsgUserGroupGetOdpsRoleGroupsResponseBody = {
  data?: [ string ](name='Data', description='The data returned.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1029030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='param error'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='400'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='102400001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DsgUserGroupGetOdpsRoleGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DsgUserGroupGetOdpsRoleGroupsResponseBody(name='body'),
}

/**
 * @summary Queries a list of MaxCompute roles that can be selected by the members of a user group when the user group is created or modified by the tenant in Data Security Guard.
 *
 * @param request DsgUserGroupGetOdpsRoleGroupsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DsgUserGroupGetOdpsRoleGroupsResponse
 */
async function dsgUserGroupGetOdpsRoleGroupsWithOptions(request: DsgUserGroupGetOdpsRoleGroupsRequest, runtime: Util.RuntimeOptions): DsgUserGroupGetOdpsRoleGroupsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DsgUserGroupGetOdpsRoleGroups',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of MaxCompute roles that can be selected by the members of a user group when the user group is created or modified by the tenant in Data Security Guard.
 *
 * @param request DsgUserGroupGetOdpsRoleGroupsRequest
 * @return DsgUserGroupGetOdpsRoleGroupsResponse
 */
async function dsgUserGroupGetOdpsRoleGroups(request: DsgUserGroupGetOdpsRoleGroupsRequest): DsgUserGroupGetOdpsRoleGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return dsgUserGroupGetOdpsRoleGroupsWithOptions(request, runtime);
}

model DsgUserGroupQueryListRequest {
  name?: string(name='Name', description='The keyword of the user group name. A fuzzy match is performed based on the keyword to search for the user group.', example='yun_group'),
  owner?: string(name='Owner', description='The owner of the user group.', example='user1'),
  pageNumber?: int32(name='PageNumber', description='The page number.

This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: 100.

This parameter is required.', example='10'),
  projectName?: string(name='ProjectName', description='The name of the compute engine. If you want to query the information about a MaxCompute user group, you need to configure this parameter.', example='dev_project'),
}

model DsgUserGroupQueryListResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='1029030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='param error'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='400'),
  pageData?: {
    data?: [ 
      {
        accounts?: [ string ](name='Accounts', description='The usernames in the user group.'),
        gmtCreate?: string(name='GmtCreate', description='The time when the user group was created.', example='2024-05-10 17:14:44'),
        gmtModified?: string(name='GmtModified', description='The time when the user group was modified.', example='2024-05-10 17:14:44'),
        id?: int32(name='Id', description='The user group ID.', example='123'),
        name?: string(name='Name', description='The name of the user group.', example='test_group'),
        owner?: string(name='Owner', description='The owner of the user group.', example='user1'),
      }
    ](name='Data', description='The user groups.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: 100.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of user groups returned.', example='100'),
  }(name='PageData', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='102400001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DsgUserGroupQueryListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DsgUserGroupQueryListResponseBody(name='body'),
}

/**
 * @summary Queries a list of user groups in Data Security Guard.
 *
 * @param request DsgUserGroupQueryListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DsgUserGroupQueryListResponse
 */
async function dsgUserGroupQueryListWithOptions(request: DsgUserGroupQueryListRequest, runtime: Util.RuntimeOptions): DsgUserGroupQueryListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DsgUserGroupQueryList',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of user groups in Data Security Guard.
 *
 * @param request DsgUserGroupQueryListRequest
 * @return DsgUserGroupQueryListResponse
 */
async function dsgUserGroupQueryList(request: DsgUserGroupQueryListRequest): DsgUserGroupQueryListResponse {
  var runtime = new Util.RuntimeOptions{};
  return dsgUserGroupQueryListWithOptions(request, runtime);
}

model DsgUserGroupQueryUserListResponseBody = {
  data?: [ 
    {
      accountName?: string(name='AccountName', description='The name of the user.', example='user1'),
      accountType?: int32(name='AccountType', description='The type of the user. Valid values:

*   1 to 5: Alibaba Cloud account
*   6: RAM role', example='2'),
      baseId?: string(name='BaseId', description='The user ID or role ID.', example='234'),
      parentAccountId?: string(name='ParentAccountId', description='The parent user ID. This parameter is required if a RAM user is used.', example='123'),
      yunAccount?: string(name='YunAccount', description='The name of the Alibaba Cloud account or RAM role. The return value of this parameter must be used if the user group is created by using an Alibaba Cloud account or a RAM role.', example='user:user1'),
    }
  ](name='Data', description='The returned result.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1029030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='param error'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='400'),
  requestId?: string(name='RequestId', description='The request ID.', example='102400001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DsgUserGroupQueryUserListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DsgUserGroupQueryUserListResponseBody(name='body'),
}

/**
 * @summary Queries a list of users or roles of the current tenant.
 *
 * @param request DsgUserGroupQueryUserListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DsgUserGroupQueryUserListResponse
 */
async function dsgUserGroupQueryUserListWithOptions(runtime: Util.RuntimeOptions): DsgUserGroupQueryUserListResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DsgUserGroupQueryUserList',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of users or roles of the current tenant.
 *
 * @return DsgUserGroupQueryUserListResponse
 */
async function dsgUserGroupQueryUserList(): DsgUserGroupQueryUserListResponse {
  var runtime = new Util.RuntimeOptions{};
  return dsgUserGroupQueryUserListWithOptions(runtime);
}

model DsgWhiteListAddOrUpdateRequest {
  whiteLists?: [ 
    {
      endTime?: string(name='EndTime', description='The end of the time range to query. If you enter null, the whitelist is valid permanently.', example='null'),
      id?: int32(name='Id', description='The ID of the data masking whitelist.

*   If you do not configure this parameter, the current operation is to add a data masking whitelist.
*   If you configure this parameter, the current operation is to modify a data masking whitelist. You can call the [DsgWhiteListQueryList](https://help.aliyun.com/document_detail/2786508.html) operation to query the whitelist ID.', example='123'),
      ruleId?: int32(name='RuleId', description='The ID of the data masking rule. You can call the [DsgDesensPlanQueryList](https://help.aliyun.com/document_detail/2786578.html) operation to query the ID of the data masking rule.

This parameter is required.', example='123'),
      startTime?: string(name='StartTime', description='The beginning of the time range to query.

This parameter is required.', example='2024-04-10 00:00:00'),
      userGroupIds?: [ int32 ](name='UserGroupIds', description='A collection of user group IDs.

This parameter is required.'),
    }
  ](name='WhiteLists', description='A collection of whitelists.

This parameter is required.'),
}

model DsgWhiteListAddOrUpdateShrinkRequest {
  whiteListsShrink?: string(name='WhiteLists', description='A collection of whitelists.

This parameter is required.'),
}

model DsgWhiteListAddOrUpdateResponseBody = {
  data?: boolean(name='Data', description='The operation result. Valid values:

*   true: The operation is successful.
*   false: The operation fails.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1029030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='param error'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='400'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='102400001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DsgWhiteListAddOrUpdateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DsgWhiteListAddOrUpdateResponseBody(name='body'),
}

/**
 * @summary Adds or modifies a data masking whitelist.
 *
 * @param tmpReq DsgWhiteListAddOrUpdateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DsgWhiteListAddOrUpdateResponse
 */
async function dsgWhiteListAddOrUpdateWithOptions(tmpReq: DsgWhiteListAddOrUpdateRequest, runtime: Util.RuntimeOptions): DsgWhiteListAddOrUpdateResponse {
  Util.validateModel(tmpReq);
  var request = new DsgWhiteListAddOrUpdateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.whiteLists)) {
    request.whiteListsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.whiteLists, 'WhiteLists', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.whiteListsShrink)) {
    query['WhiteLists'] = request.whiteListsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DsgWhiteListAddOrUpdate',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Adds or modifies a data masking whitelist.
 *
 * @param request DsgWhiteListAddOrUpdateRequest
 * @return DsgWhiteListAddOrUpdateResponse
 */
async function dsgWhiteListAddOrUpdate(request: DsgWhiteListAddOrUpdateRequest): DsgWhiteListAddOrUpdateResponse {
  var runtime = new Util.RuntimeOptions{};
  return dsgWhiteListAddOrUpdateWithOptions(request, runtime);
}

model DsgWhiteListDeleteListRequest {
  ids?: [ int32 ](name='Ids', description='The IDs of the whitelists.

This parameter is required.'),
}

model DsgWhiteListDeleteListShrinkRequest {
  idsShrink?: string(name='Ids', description='The IDs of the whitelists.

This parameter is required.'),
}

model DsgWhiteListDeleteListResponseBody = {
  data?: boolean(name='Data', description='The operation result. Valid values:

*   true: The operation is successful.
*   false: The operation failed.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1029030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='param error'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='400'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='102400001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DsgWhiteListDeleteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DsgWhiteListDeleteListResponseBody(name='body'),
}

/**
 * @summary Deletes a data masking whitelist configured in Data Security Guard.
 *
 * @param tmpReq DsgWhiteListDeleteListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DsgWhiteListDeleteListResponse
 */
async function dsgWhiteListDeleteListWithOptions(tmpReq: DsgWhiteListDeleteListRequest, runtime: Util.RuntimeOptions): DsgWhiteListDeleteListResponse {
  Util.validateModel(tmpReq);
  var request = new DsgWhiteListDeleteListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.idsShrink)) {
    query['Ids'] = request.idsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DsgWhiteListDeleteList',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a data masking whitelist configured in Data Security Guard.
 *
 * @param request DsgWhiteListDeleteListRequest
 * @return DsgWhiteListDeleteListResponse
 */
async function dsgWhiteListDeleteList(request: DsgWhiteListDeleteListRequest): DsgWhiteListDeleteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return dsgWhiteListDeleteListWithOptions(request, runtime);
}

model DsgWhiteListQueryListRequest {
  dataType?: string(name='DataType', description='The keyword of the sensitive field type.', example='phone'),
  pageNumber?: int32(name='PageNumber', description='The page number.

This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: 100.

This parameter is required.', example='10'),
  sceneId?: long(name='SceneId', description='The ID of the level-2 data masking scenario. You can call the [DsgSceneQuerySceneListByName](https://help.aliyun.com/document_detail/2786322.html) operation to query the list of IDs.

This parameter is required.', example='123'),
}

model DsgWhiteListQueryListResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='1029030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='param error'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='400'),
  pageData?: {
    data?: [ 
      {
        endTime?: string(name='EndTime', description='The expiration time of the data masking whitelist cannot be earlier than the time when the data masking whitelist takes effect. Unit: days.', example='2024-05-10 15:46:20'),
        gmtCreate?: string(name='GmtCreate', description='The time when the whitelist was created.', example='2024-05-09 15:46:20'),
        gmtModified?: string(name='GmtModified', description='The time when the whitelist was modified.', example='2024-05-09 15:46:20'),
        id?: long(name='Id', description='The ID of the data masking whitelist.', example='123'),
        ruleId?: long(name='RuleId', description='The ID of the data masking rule.', example='123'),
        sceneId?: long(name='SceneId', description='The ID of the level-2 data masking scenario.', example='123'),
        startTime?: string(name='StartTime', description='The time when the data masking whitelist takes effect cannot be earlier than the current time. Unit: days.', example='2024-05-09 15:46:20'),
        type?: string(name='Type', description='The sensitive field type.', example='phone'),
        userGroups?: [ string ](name='UserGroups', description='A collection of user group names.'),
      }
    ](name='Data', description='A collection of whitelists.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of data masking whitelists.', example='100'),
  }(name='PageData', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='102400001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DsgWhiteListQueryListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DsgWhiteListQueryListResponseBody(name='body'),
}

/**
 * @summary Queries a data masking whitelist.
 *
 * @param request DsgWhiteListQueryListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DsgWhiteListQueryListResponse
 */
async function dsgWhiteListQueryListWithOptions(request: DsgWhiteListQueryListRequest, runtime: Util.RuntimeOptions): DsgWhiteListQueryListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DsgWhiteListQueryList',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a data masking whitelist.
 *
 * @param request DsgWhiteListQueryListRequest
 * @return DsgWhiteListQueryListResponse
 */
async function dsgWhiteListQueryList(request: DsgWhiteListQueryListRequest): DsgWhiteListQueryListResponse {
  var runtime = new Util.RuntimeOptions{};
  return dsgWhiteListQueryListWithOptions(request, runtime);
}

model EditRecognizeRuleRequest {
  accountName?: string(name='AccountName', description='The Alibaba Cloud account that is used to create the sensitive data identification rule. Enter the username of the Alibaba Cloud account.

This parameter is required.', example='dsg-uat'),
  colExclude?: string(name='ColExclude', description='Excludes fields. The system does not identify fields that are assigned with values.

*   The value must be in the ${Project name}.${Table name}.${Field name} or ${Project name}.${Schema name}.${Table name}.${Field name} format.
*   *Wildcards are supported. For example, the asterisk (\\\\*) in default.table.column1\\\\* can be used to match any content following default.table.column1, such as default.table.column10.', example='default.qujian.*6'),
  colScan?: string(name='ColScan', description='Scans fields. The system identifies only fields that are assigned with values.

*   The value must be in the ${Project name}.${Table name}.${Field name} or ${Project name}.${Schema name}.${Table name}.${Field name} format.
*   *Wildcards are supported. For example, the asterisk (\\\\*) in default.table.column1\\\\* can be used to match any content following default.table.column1, such as default.table.column10.', example='default.qujian.*'),
  commentScan?: string(name='CommentScan', description='Scans content. The value is the text of each field comment in your data asset. Fuzzy match is supported.', example='test'),
  contentScan?: string(name='ContentScan', description='Identifies content. You can call the [QuerySensNodeInfo](https://help.aliyun.com/document_detail/2747189.html) operation to query the value of the current parameter for a built-in sensitive field.', example='{"_clazz":"com.alipay.dsgclient.sdk.dsg.fastscan.engine.cond.NationalityCond"}'),
  hitThreshold?: int32(name='HitThreshold', description='The hit ratio threshold. If more than 60%, which is a sample hit ratio threshold, of all sample data records hit the Name Entity Recognition (NER) model, the sensitive field is hit. The value can be an integer from 0 to 100.', example='50'),
  levelName?: string(name='LevelName', description='The name of the sensitivity level. You can call the [QueryDefaultTemplate](https://help.aliyun.com/document_detail/2743948.html) operation to obtain the name of the sensitivity level in the related template.', example='Confidential'),
  nodeId?: string(name='NodeId', description='The ID of the data category. You can call the [QuerySensClassification](https://help.aliyun.com/document_detail/2746850.html) operation to query the ID of all data categories. Then, you can select a data category to create a sensitive field. Enter the ID of the selected data category.

This parameter is required.', example='0ce67949-0810-400f-a24a-cc5ffafe1024'),
  nodeParent?: string(name='NodeParent', description='The information about the parent data category of the current data category. You can call the [QuerySensClassification](https://help.aliyun.com/document_detail/2746850.html) operation to obtain the ID of a data category.

This parameter is required.', example='Customer/personal/personal_Natural_Information/personal_basic_profile_information'),
  operationType?: int32(name='OperationType', description='The type of the arithmetic operation. Valid values:

*   0: OR
*   1: AND

This parameter is required.', example='0'),
  recognizeRules?: string(name='RecognizeRules', description='The content of the sensitive data identification rule. You can call the [QuerySensNodeInfo](https://help.aliyun.com/document_detail/2747189.html) operation to query the value of the current parameter for a built-in sensitive field.', example='{"contentRule":{"_clazz":"com.alipay.dsgclient.sdk.dsg.fastscan.engine.cond.GenderCond"},"_clazz":"com.alipay.dsg.dal.model.RuleContent"}'),
  recognizeRulesType?: string(name='RecognizeRulesType', description='The type of the sensitive data identification rule. Valid values:

*   1: regular expression
*   2: built-in rule
*   3: sample library
*   4: self-generated data identification model', example='1'),
  sensitiveDescription?: string(name='SensitiveDescription', description='The description of the sensitive field. Enter a string that is less than 128 characters in length.', example='This is a sensitive field that identifies the name.'),
  sensitiveId?: string(name='SensitiveId', description='The sensitive field ID. You can call the [QuerySensNodeInfo](https://help.aliyun.com/document_detail/2747189.html) operation to query the IDs of all sensitive fields. You can also call the [QueryRecognizeRuleDetail](https://help.aliyun.com/document_detail/2766023.html) operation to query the IDs of specific sensitive fields.

This parameter is required.', example='1a928de7-3962-4e07-93ac-e1973baa1024'),
  sensitiveName?: string(name='SensitiveName', description='The name of the custom sensitive field. Enter a string that is less than 128 characters in length.

This parameter is required.', example='name'),
  status?: int32(name='Status', description='The status of the sensitive field. Valid values:

*   0: draft
*   1: effective', example='0'),
  templateId?: string(name='TemplateId', description='The template ID. You can call the [QueryDefaultTemplate](https://help.aliyun.com/document_detail/2743948.html) operation to obtain the template ID.

This parameter is required.', example='e1970541-6cf5-4d23-b101-d5b66f6e1024'),
  tenantId?: string(name='TenantId', description='The tenant ID. To obtain the tenant ID, perform the following steps: Log on to the [DataWorks console](https://workbench.data.aliyun.com/console). Find your workspace and go to the DataStudio page. On the DataStudio page, click the logon username in the upper-right corner and click User Info in the Menu section.

This parameter is required.', example='10241024'),
  level?: string(name='level', description='The sensitivity level of the sensitive field. You can select one from all sensitivity levels that are defined in a template as the sensitivity level of the sensitive field, such as level 1 to level 10.

This parameter is required.', example='1'),
}

model EditRecognizeRuleResponseBody = {
  data?: any(name='Data', description='The returned result in the JSON format.', example='{ "HttpStatusCode": 200, "Success": true }'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='9990030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Missing parameter'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='10000001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model EditRecognizeRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EditRecognizeRuleResponseBody(name='body'),
}

/**
 * @summary Edits a sensitive field that is defined based on the category and sensitivity level of data in Data Security Guard.
 *
 * @param request EditRecognizeRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EditRecognizeRuleResponse
 */
async function editRecognizeRuleWithOptions(request: EditRecognizeRuleRequest, runtime: Util.RuntimeOptions): EditRecognizeRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.colExclude)) {
    body['ColExclude'] = request.colExclude;
  }
  if (!Util.isUnset(request.colScan)) {
    body['ColScan'] = request.colScan;
  }
  if (!Util.isUnset(request.commentScan)) {
    body['CommentScan'] = request.commentScan;
  }
  if (!Util.isUnset(request.contentScan)) {
    body['ContentScan'] = request.contentScan;
  }
  if (!Util.isUnset(request.hitThreshold)) {
    body['HitThreshold'] = request.hitThreshold;
  }
  if (!Util.isUnset(request.levelName)) {
    body['LevelName'] = request.levelName;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.nodeParent)) {
    body['NodeParent'] = request.nodeParent;
  }
  if (!Util.isUnset(request.operationType)) {
    body['OperationType'] = request.operationType;
  }
  if (!Util.isUnset(request.recognizeRules)) {
    body['RecognizeRules'] = request.recognizeRules;
  }
  if (!Util.isUnset(request.recognizeRulesType)) {
    body['RecognizeRulesType'] = request.recognizeRulesType;
  }
  if (!Util.isUnset(request.sensitiveDescription)) {
    body['SensitiveDescription'] = request.sensitiveDescription;
  }
  if (!Util.isUnset(request.sensitiveId)) {
    body['SensitiveId'] = request.sensitiveId;
  }
  if (!Util.isUnset(request.sensitiveName)) {
    body['SensitiveName'] = request.sensitiveName;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.level)) {
    body['level'] = request.level;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EditRecognizeRule',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Edits a sensitive field that is defined based on the category and sensitivity level of data in Data Security Guard.
 *
 * @param request EditRecognizeRuleRequest
 * @return EditRecognizeRuleResponse
 */
async function editRecognizeRule(request: EditRecognizeRuleRequest): EditRecognizeRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return editRecognizeRuleWithOptions(request, runtime);
}

model EstablishRelationTableToBusinessRequest {
  businessId?: string(name='BusinessId', description='The ID of the workflow. You can call the [ListBusiness](https://help.aliyun.com/document_detail/173945.html) operation to query the ID.

This parameter is required.', example='1000001'),
  folderId?: string(name='FolderId', description='The ID of the folder. You can call the [GetFolder](https://help.aliyun.com/document_detail/173952.html) or [ListFolders](https://help.aliyun.com/document_detail/173955.html) operation to query the ID.', example='2eb6f9****'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can click the Workspace Manage icon in the upper-right corner of the DataStudio page to go to the Workspace Management page and view the workspace ID.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The unique identifier of the DataWorks workspace. You can click the identifier in the upper-left corner of the DataStudio page to switch to another workspace.

You must specify either this parameter or ProjectId to determine the DataWorks workspace to which the operation is applied.', example='dw'),
  tableGuid?: string(name='TableGuid', description='The universally unique identifier (UUID) of the table. You can call the [SearchMetaTables](https://help.aliyun.com/document_detail/173919.html) operation to query the UUID.

This parameter is required.', example='odps.dw_project.tb1'),
}

model EstablishRelationTableToBusinessResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can troubleshoot issues based on the ID.', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model EstablishRelationTableToBusinessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EstablishRelationTableToBusinessResponseBody(name='body'),
}

/**
 * @param request EstablishRelationTableToBusinessRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EstablishRelationTableToBusinessResponse
 */
async function establishRelationTableToBusinessWithOptions(request: EstablishRelationTableToBusinessRequest, runtime: Util.RuntimeOptions): EstablishRelationTableToBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessId)) {
    body['BusinessId'] = request.businessId;
  }
  if (!Util.isUnset(request.folderId)) {
    body['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.tableGuid)) {
    body['TableGuid'] = request.tableGuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EstablishRelationTableToBusiness',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @param request EstablishRelationTableToBusinessRequest
 * @return EstablishRelationTableToBusinessResponse
 */
async function establishRelationTableToBusiness(request: EstablishRelationTableToBusinessRequest): EstablishRelationTableToBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return establishRelationTableToBusinessWithOptions(request, runtime);
}

model ExportDataSourcesRequest {
  dataSourceType?: string(name='DataSourceType', description='The type of the data source. Valid values:

*   odps
*   mysql
*   rds
*   oss
*   sqlserver
*   polardb
*   oracle
*   mongodb
*   emr
*   postgresql
*   analyticdb_for_mysql
*   hybriddb_for_postgresql
*   holo', example='rds'),
  envType?: int32(name='EnvType', description='The environment in which the data source resides. Valid values:

*   0: development environment
*   1: production environment', example='1'),
  name?: string(name='Name', description='The keyword contained in the names of the data sources that you want to export. You can specify only one keyword. For example, if you set this parameter to test, you can call the ExportDataSources operation to export all data sources whose names contain test in the workspace.', example='test'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace to which the data sources belong. You can call the [ListProjects](https://help.aliyun.com/document_detail/178393.html) operation to query the ID of the workspace.

This parameter is required.', example='10000'),
  subType?: string(name='SubType', description='The subtype of the data source. This parameter takes effect only when the DataSourceType parameter is set to rds.

If the value of the DataSourceType parameter is rds, the value of this parameter can be mysql, sqlserver, or postgresql.', example='mysql'),
}

model ExportDataSourcesResponseBody = {
  data?: {
    dataSources?: [ 
      {
        bindingCalcEngineId?: int32(name='BindingCalcEngineId', description='The ID of the compute engine that is added as the data source.', example='123'),
        connectStatus?: int32(name='ConnectStatus', description='Indicates whether the data source is connected to an exclusive resource group. Valid values:

*   1: The data source is connected to at least one exclusive resource group.
*   0: The data source is not connected to any exclusive resource group.', example='1'),
        content?: string(name='Content', description='The configuration of the data source.', example='{"pubEndpoint":"http://service.cn.maxcompute.aliyun.com/api","accessId":"TMP.3KecGjvzy3i8MYfn2BGHgF7EHGyBFZcHm7GgngrABVRyvvKQrfF5kskR36xP361C3dqwbGo7SGYptAeGyiTwHXqLaBUvYC","securityToken":null,"endpoint":"http://service.cn.maxcompute.aliyun-inc.com/api","accessKey":"***","name":"PRE_PROJECT_A_engine","project":"PRE_PROJECT_A","vpcEndpoint":"http://service.cn.maxcompute.aliyun-inc.com/api","region":"cn-shanghai","authType":"2"}'),
        dataSourceType?: string(name='DataSourceType', description='The type of the data source. Valid values:

*   odps
*   mysql
*   rds
*   oss
*   sqlserver
*   polardb
*   oracle
*   mongodb
*   emr
*   postgresql
*   analyticdb_for_mysql
*   hybriddb_for_postgresql
*   holo', example='rds'),
        defaultEngine?: boolean(name='DefaultEngine', description='Indicates whether the compute engine that is added as the data source is the default compute engine. Valid values:

*   true: The compute engine is the default compute engine.
*   false: The compute engine is not the default compute engine.', example='false'),
        description?: string(name='Description', description='The description of the data source.', example='a connection'),
        envType?: int32(name='EnvType', description='The environment in which the data source resides. Valid values:

*   0: development environment
*   1: production environment', example='1'),
        gmtCreate?: string(name='GmtCreate', description='The time when the data source was created. Example: Mar 17, 2021 4:09:32 PM.', example='Mar 17, 2021 4:09:32 PM'),
        gmtModified?: string(name='GmtModified', description='The time when the data source was last modified. Example: Mar 17, 2021 4:09:32 PM.', example='Mar 17, 2021 4:09:32 PM'),
        id?: int32(name='Id', description='The data source ID.', example='1'),
        name?: string(name='Name', description='The name of the data source.', example='abc'),
        operator?: string(name='Operator', description='The ID of the user who exported the data source.', example='193543050****'),
        projectId?: int32(name='ProjectId', description='The ID of the DataWorks workspace to which the data source belongs.', example='123'),
        sequence?: int32(name='Sequence', description='The sequence number of the data source.', example='300'),
        shared?: boolean(name='Shared', description='Indicates whether the data source can be shared. Valid values:

*   true: The data source can be shared.
*   false: The data source cannot be shared.', example='false'),
        status?: int32(name='Status', description='Indicates whether the data source is available. Valid values:

*   1: The data source is available.
*   0: The data source is unavailable.', example='1'),
        subType?: string(name='SubType', description='The subtype of the data source. This parameter takes effect only when the DataSourceType parameter is set to rds.

If the value of the DataSourceType parameter is rds, the value of this parameter can be mysql, sqlserver, or postgresql.', example='mysql'),
        tenantId?: long(name='TenantId', description='The ID of the Alibaba Cloud account to which the data source belongs.', example='1234567'),
      }
    ](name='DataSources', description='The details of the exported data sources. The value is an array. The following parameters are the elements in the array. The sample values of these parameters show the details of a sample data source.'),
    pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1.', example='10'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='1'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='Data', description='The information about the exported data sources.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned. Valid values:

*   200: The request was successful.
*   Other values: The request failed. You can troubleshoot issues based on the HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='0bc14115159376359****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model ExportDataSourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportDataSourcesResponseBody(name='body'),
}

/**
 * @summary Exports a list of data sources.
 *
 * @param request ExportDataSourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExportDataSourcesResponse
 */
async function exportDataSourcesWithOptions(request: ExportDataSourcesRequest, runtime: Util.RuntimeOptions): ExportDataSourcesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportDataSources',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Exports a list of data sources.
 *
 * @param request ExportDataSourcesRequest
 * @return ExportDataSourcesResponse
 */
async function exportDataSources(request: ExportDataSourcesRequest): ExportDataSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportDataSourcesWithOptions(request, runtime);
}

model GenerateDISyncTaskConfigForCreatingRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. This parameter is used to prevent repeated operations that are caused by multiple calls.', example='ABFUOEUOTRTRJKE'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
  taskParam?: string(name='TaskParam', description='The script for the synchronization task. DataWorks allows you to create the following types of synchronization tasks:

*   Synchronization task that is used to synchronize data from MySQL to MaxCompute
*   Synchronization task that is used to synchronize data from MySQL data to Kafka
*   Synchronization task that is used to synchronize data from MySQL to Hologres

The SelectedTables parameter is used to specify tables that you want to synchronize from multiple databases. The Tables parameter is used to specify tables that you want to synchronize from a single database.

*   If the script contains the SelectedTables parameter, the system synchronizes data from the tables that you specify in the SelectedTables parameter.
*   If the script contains the Tables parameter, the system synchronizes data from the tables that you specify in the Tables parameter.

The following sample code provides a script for data synchronization from MySQL to MaxCompute:

    {
      "type": "realtime",
      "version": "1.0",
      "setting": {
        "resourceGroup": "S_res_group_280749521950784_1623033752022",
        "taskType": "oneclick_to_odps"
      },
      "steps": [
        {
          "stepType": "mysql",
          "parameter": {
            "connection": [
              {
                "datasourceType": "mysql",
                "datasource": "mysql_pub1",
                "selectedTables": [
                  {
                    "dbName": "mysql_db",
                    "schema": [
                      {
                        "tableInfos": [
                          {
                            "table": "molin_di_test_in_pk_v4"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          "name": "Reader",
          "category": "reader"
        },
        {
          "stepType": "odps",
          "parameter": {
            "datasource": "odps_source"
          },
          "name": "Writer",
          "category": "writer"
        }
      ]
    }

The following sample code provides a script for data synchronization from MySQL to Kafka:

    {
      "type": "realtime",
      "version": "1.0",
      "setting": {
        "resourceGroup": "S_res_group_280749521950784_1623033752022",
        "taskType": "oneclick_to_kafka"
      },
      "steps": [
        {
          "stepType": "mysql",
          "parameter": {
            "connection": [
              {
                "datasourceType": "mysql",
                "datasource": "pkset_test",
                "selectedTables": [
                  {
                    "dbName": "mysql_db",
                    "schema": [
                      {
                        "tableInfos": [
                          {
                            "table": "molin_di_test_in_pk_v4"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          "name": "Reader",
          "category": "reader"
        },
        {
          "stepType": "kafka",
          "parameter": {
            "datasource": "azn_kafka"
          },
          "name": "Writer",
          "category": "writer"
        }
      ]
    }

The following sample code provides a script for data synchronization from MySQL to Hologres:

    {
      "type": "realtime",
      "version": "1.0",
      "setting": {
        "resourceGroup": "S_res_group_280749521950784_1623033752022",
        "taskType": "oneclick_to_holo"
      },
      "steps": [
        {
          "stepType": "mysql",
          "parameter": {
            "connection": [
              {
                "datasourceType": "mysql",
                "datasource": "mysql_pub",
                "selectedTables": [
                  {
                    "dbName": "mysql_db",
                    "schema": [
                      {
                        "tableInfos": [
                          {
                            "table": "molin_di_test_in2_pk_v3"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          "name": "Reader",
          "category": "reader"
        },
        {
          "stepType": "holo",
          "parameter": {
            "datasource": "holo"
          },
          "name": "Writer",
          "category": "writer"
        }
      ]
    }

This parameter is required.', example='{    "type": "realtime",     "version": "1.0",        "setting": {       "resourceGroup":       "S_res_group_280749521950784_1623033752022",        "scheduleResgroupId": 30003913,       "name": "openapi_realtime_solution_0813_1739",       "taskType": "oneclick_to_odps"     },     "steps": [         {             "stepType": "mysql",             "parameter": {                 "connection": [                     {                        "datasourceType": "mysql",                         "datasource": "mysql_pub",                         "table": [                             "xyx"                         ]                     }                 ]             },             "name": "Reader",             "category": "reader"         },         {             "stepType": "odps",             "parameter": {                 "datasource": "odps_first"             },             "name": "Writer",             "category": "writer"         }     ] }'),
  taskType?: string(name='TaskType', description='The type of task that you want to create in Data Integration in asynchronous mode. Valid values:

*   DI_REALTIME: real-time synchronization task
*   DI_SOLUTION: another type of synchronization task

DataWorks allows you to create real-time synchronization tasks and other types of synchronization tasks in Data Integration only in asynchronous mode.

*   DI_OFFLINE
*   DI_REALTIME
*   DI_SOLUTION

This parameter is required.', example='DI_REALTIME'),
}

model GenerateDISyncTaskConfigForCreatingResponseBody = {
  data?: {
    message?: string(name='Message', description='The reason why the ID of the asynchronous thread fails to be generated. If the ID is successfully generated, no value is returned for this parameter.', example='XXX is invalid.'),
    processId?: long(name='ProcessId', description='The ID of the asynchronous thread. You can call the [QueryDISyncTaskConfigProcessResult](https://help.aliyun.com/document_detail/383465.html) operation to obtain the asynchronously generated parameters based on the ID. The parameters are used to create a synchronization task in Data Integration.', example='10'),
    status?: string(name='Status', description='Indicates whether the ID of the asynchronous thread is generated. Valid values: Valid values:

*   success: indicates that the ID of the asynchronous thread is generated.
*   fail: indicates that the ID of the asynchronous thread fails to be generated. You can view the reason for the failure and troubleshoot the issue based on the reason.', example='true'),
  }(name='Data', description='The information returned for the ID of the asynchronous thread.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model GenerateDISyncTaskConfigForCreatingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateDISyncTaskConfigForCreatingResponseBody(name='body'),
}

/**
 * @summary Generates an ID for an asynchronous thread that is used to create a synchronization task in Data Integration.
 *
 * @description DataWorks allows you to use the [CreateDISyncTask](https://help.aliyun.com/document_detail/278725.html) operation to directly create a batch synchronization task in Data Integration. To create a real-time synchronization task or another type of synchronization task, you must first call the [GenerateDISyncTaskConfigForCreating](https://help.aliyun.com/document_detail/383463.html) operation to generate the ID of an asynchronous thread and call the [QueryDISyncTaskConfigProcessResult](https://help.aliyun.com/document_detail/383465.html) operation to obtain the asynchronously generated parameters based on the ID. Then, you can use the parameters as request parameters of [CreateDISyncTask](https://help.aliyun.com/document_detail/278725.html) and call the [CreateDISyncTask](https://help.aliyun.com/document_detail/278725.html) operation to create a real-time synchronization task or another type of synchronization task. DataWorks allows you to create real-time synchronization tasks and other types of synchronization tasks in Data Integration only in asynchronous mode.
 *
 * @param request GenerateDISyncTaskConfigForCreatingRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GenerateDISyncTaskConfigForCreatingResponse
 */
async function generateDISyncTaskConfigForCreatingWithOptions(request: GenerateDISyncTaskConfigForCreatingRequest, runtime: Util.RuntimeOptions): GenerateDISyncTaskConfigForCreatingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskParam)) {
    query['TaskParam'] = request.taskParam;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GenerateDISyncTaskConfigForCreating',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Generates an ID for an asynchronous thread that is used to create a synchronization task in Data Integration.
 *
 * @description DataWorks allows you to use the [CreateDISyncTask](https://help.aliyun.com/document_detail/278725.html) operation to directly create a batch synchronization task in Data Integration. To create a real-time synchronization task or another type of synchronization task, you must first call the [GenerateDISyncTaskConfigForCreating](https://help.aliyun.com/document_detail/383463.html) operation to generate the ID of an asynchronous thread and call the [QueryDISyncTaskConfigProcessResult](https://help.aliyun.com/document_detail/383465.html) operation to obtain the asynchronously generated parameters based on the ID. Then, you can use the parameters as request parameters of [CreateDISyncTask](https://help.aliyun.com/document_detail/278725.html) and call the [CreateDISyncTask](https://help.aliyun.com/document_detail/278725.html) operation to create a real-time synchronization task or another type of synchronization task. DataWorks allows you to create real-time synchronization tasks and other types of synchronization tasks in Data Integration only in asynchronous mode.
 *
 * @param request GenerateDISyncTaskConfigForCreatingRequest
 * @return GenerateDISyncTaskConfigForCreatingResponse
 */
async function generateDISyncTaskConfigForCreating(request: GenerateDISyncTaskConfigForCreatingRequest): GenerateDISyncTaskConfigForCreatingResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateDISyncTaskConfigForCreatingWithOptions(request, runtime);
}

model GenerateDISyncTaskConfigForUpdatingRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. This parameter is used to prevent repeated operations that are caused by multiple calls.', example='ABFUOEUOTRTRJKE'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the workspace ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
  taskId?: long(name='TaskId', description='The task ID.

*   If you set the TaskType parameter to DI_REALTIME, set the TaskId parameter to the value of the FileId parameter for the real-time synchronization task.
*   If you set the TaskType parameter to DI_SOLUTION, set the TaskId parameter to the value of the FileId parameter for the synchronization solution.

This parameter is required.', example='100'),
  taskParam?: string(name='TaskParam', description='The script for updating the real-time synchronization task in Data Integration. DataWorks allows you to add or remove tables for a real-time synchronization task in Data Integration only in asynchronous mode. The following types of real-time synchronization tasks are supported:

*   Synchronization task that is used to synchronize data from MySQL to MaxCompute
*   Synchronization task that is used to synchronize data from MySQL data to Kafka
*   Synchronization task that is used to synchronize data from MySQL to Hologres

The SelectedTables parameter is used to specify tables that you want to synchronize from multiple databases. The Tables parameter is used to specify tables that you want to synchronize from a single database.

*   If the script contains the SelectedTables parameter, the system synchronizes data from the tables that you specify in the SelectedTables parameter.
*   If the script contains the Tables parameter, the system synchronizes data from the tables that you specify in the Tables parameter.

This parameter is required.', example='{      "steps": [         {             "parameter": {                 "connection": [                     {                         "table": [                             "xyx"                         ]                     }                 ]             },             "name": "Reader",             "category": "reader"         }     ] }'),
  taskType?: string(name='TaskType', description='The type of the object that you want to update in Data Integration in asynchronous mode. Valid values:

*   DI_REALTIME: real-time synchronization task
*   DI_SOLUTION: synchronization solution DataWorks allows you to create or update real-time synchronization tasks in Data Integration only in asynchronous mode.

Valid values:

*   DI_OFFLINE
*   DI_REALTIME
*   DI_SOLUTION

This parameter is required.', example='DI_REALTIME'),
}

model GenerateDISyncTaskConfigForUpdatingResponseBody = {
  data?: {
    message?: string(name='Message', description='The reason why the ID of the asynchronous thread fails to be generated. If the ID is successfully generated, no value is returned for this parameter.', example='XXX is invalid.'),
    processId?: long(name='ProcessId', description='The ID of the asynchronous thread. You can call the [QueryDISyncTaskConfigProcessResult](https://help.aliyun.com/document_detail/383465.html) operation to obtain the asynchronously generated parameters based on the ID. The parameters are used to update a real-time synchronization task in Data Integration.', example='10'),
    status?: string(name='Status', description='Indicates whether the ID of the asynchronous thread is generated. Valid values:

*   success: indicates that the ID of the asynchronous thread is generated.
*   fail: indicates that the ID of the asynchronous thread fails to be generated. You can view the reason for the failure and troubleshoot the issue based on the reason.', example='true'),
  }(name='Data', description='The information returned for the ID of the asynchronous thread.'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model GenerateDISyncTaskConfigForUpdatingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateDISyncTaskConfigForUpdatingResponseBody(name='body'),
}

/**
 * @summary Generates the JSON for an asynchronous thread that is used to update a real-time synchronization task in Data Integration.
 *
 * @description DataWorks allows you to use only the [UpdateDISyncTask](https://help.aliyun.com/document_detail/289109.html) operation to update a batch synchronization task in Data Integration. To update a real-time synchronization task, you must first call the GenerateDISyncTaskConfigForUpdating operation to generate the ID of an asynchronous thread and call the [QueryDISyncTaskConfigProcessResult](https://help.aliyun.com/document_detail/383465.html) operation to obtain the asynchronously generated parameters based on the ID. Then, you can call the UpdateDISyncTask operation and use the parameters as request parameters to update a real-time synchronization task in Data Integration. DataWorks allows you to create or update real-time synchronization tasks in Data Integration only in asynchronous mode.
 *
 * @param request GenerateDISyncTaskConfigForUpdatingRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GenerateDISyncTaskConfigForUpdatingResponse
 */
async function generateDISyncTaskConfigForUpdatingWithOptions(request: GenerateDISyncTaskConfigForUpdatingRequest, runtime: Util.RuntimeOptions): GenerateDISyncTaskConfigForUpdatingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.taskParam)) {
    query['TaskParam'] = request.taskParam;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GenerateDISyncTaskConfigForUpdating',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Generates the JSON for an asynchronous thread that is used to update a real-time synchronization task in Data Integration.
 *
 * @description DataWorks allows you to use only the [UpdateDISyncTask](https://help.aliyun.com/document_detail/289109.html) operation to update a batch synchronization task in Data Integration. To update a real-time synchronization task, you must first call the GenerateDISyncTaskConfigForUpdating operation to generate the ID of an asynchronous thread and call the [QueryDISyncTaskConfigProcessResult](https://help.aliyun.com/document_detail/383465.html) operation to obtain the asynchronously generated parameters based on the ID. Then, you can call the UpdateDISyncTask operation and use the parameters as request parameters to update a real-time synchronization task in Data Integration. DataWorks allows you to create or update real-time synchronization tasks in Data Integration only in asynchronous mode.
 *
 * @param request GenerateDISyncTaskConfigForUpdatingRequest
 * @return GenerateDISyncTaskConfigForUpdatingResponse
 */
async function generateDISyncTaskConfigForUpdating(request: GenerateDISyncTaskConfigForUpdatingRequest): GenerateDISyncTaskConfigForUpdatingResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateDISyncTaskConfigForUpdatingWithOptions(request, runtime);
}

model GetAlertMessageRequest {
  alertId?: string(name='AlertId', description='The alert ID. You can all the [ListAlertMessages](https://help.aliyun.com/document_detail/173961.html) operation to obtain the alert ID.

This parameter is required.', example='1421'),
}

model GetAlertMessageResponseBody = {
  data?: {
    alertId?: long(name='AlertId', description='The alert ID.', example='123'),
    alertMessageStatus?: string(name='AlertMessageStatus', description='The sending status of the notification. Valid values:

*   READY_TO_SEND: The notification is waiting to be sent.
*   SEND_FAIL: The notification fails to be sent.
*   SEND_SUCCESS: The notification is sent.
*   SEND_OVERLIMIT: The number of notifications that are sent exceeds the upper limit.', example='READY_TO_SEND'),
    alertMethod?: string(name='AlertMethod', description='The notification method. Valid values:

*   MAIL.
*   SMS.
*   PHONE. Only DataWorks Professional Edition and more advanced editions support the PHONE notification method.', example='SMS'),
    alertTime?: long(name='AlertTime', description='The time when the alert was reported.', example='1553524393000'),
    alertUser?: string(name='AlertUser', description='The ID of the Alibaba Cloud account used by the alert recipient.', example='9527952795****'),
    content?: string(name='Content', description='The content of the alert.', example='Node error'),
    instances?: [ 
      {
        instanceId?: long(name='InstanceId', description='The instance ID.', example='12312312'),
        nodeId?: long(name='NodeId', description='The node ID.', example='1234'),
        nodeName?: string(name='NodeName', description='The name of the node.', example='Node name'),
        projectId?: long(name='ProjectId', description='The ID of the workspace to which the node belongs.', example='1234'),
        status?: string(name='Status', description='The status of the instance. Valid values:

*   NOT_RUN
*   WAIT_TIME
*   WAIT_RESOURCE
*   RUNNING
*   CHECKING
*   CHECKING_CONDITION
*   FAILURE
*   SUCCESS', example='NOT_RUN'),
      }
    ](name='Instances', description='The instances that triggered the custom alert rule. This parameter is returned if the value of the Source parameter is REMIND_ALERT. This parameter is left empty if the value of the Source parameter is not REMIND_ALERT.'),
    nodes?: [ 
      {
        nodeId?: long(name='NodeId', description='The node ID.', example='1234'),
        nodeName?: string(name='NodeName', description='The name of the node.', example='Node name'),
        owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the node owner.', example='95279527952****'),
        projectId?: long(name='ProjectId', description='The ID of the workspace to which the node belongs.', example='1234'),
      }
    ](name='Nodes', description='The nodes returned for different alert sources. The nodes that form a loop are returned if the value of the Source parameter is NODE_CYCLE_ALERT. The nodes that are isolated are returned if the value of the Source parameter is NODE_LONELY_ALERT.'),
    remindId?: long(name='RemindId', description='The ID of the custom alert rule that was triggered. This parameter is returned if the value of the Source parameter is REMIND_ALERT.', example='1234'),
    remindName?: string(name='RemindName', description='The name of the custom alert rule that was triggered. This parameter is returned if the value of the Source parameter is REMIND_ALERT.', example='Custom monitoring rule name'),
    slaAlert?: {
      baselineId?: long(name='BaselineId', description='The baseline ID.', example='15142123'),
      baselineName?: string(name='BaselineName', description='The name of the baseline.', example='Baseline name'),
      baselineOwner?: string(name='BaselineOwner', description='The ID of the Alibaba Cloud account used by the baseline owner. Multiple IDs are separated by commas (,).', example='952795279****'),
      bizdate?: long(name='Bizdate', description='The data timestamp of the baseline instance.', example='1553443200000'),
      inGroupId?: int32(name='InGroupId', description='The ID of the cycle of the baseline instance. Valid values of the ID of an hour-level cycle: [1,24]. The ID of a day-level cycle is 1.', example='1'),
      projectId?: long(name='ProjectId', description='The ID of the workspace to which the baseline belongs.', example='1234'),
      status?: string(name='Status', description='The status of the baseline. Valid values:

*   ERROR
*   SAFE
*   DANGEROUS
*   OVER', example='SAFE'),
    }(name='SlaAlert', description='The basic information about the baseline instance that triggered an alert. This parameter is returned if the value of the Source parameter is SLA_ALERT. This parameter is left empty if the value of the Source parameter is not SLA_ALERT.'),
    source?: string(name='Source', description='The type of the alert. Valid values:

*   REMIND_ALERT: The alert is a custom alert.
*   TOPIC_ALERT: The alert is an event alert.
*   SLA_ALERT: The alert is a baseline alert.
*   NODE_CYCLE_ALERT: The alert is reported for a node dependency loop.
*   NODE_LONELY_ALERT: The alert is reported for isolated nodes.', example='REMIND_ALERT'),
    topics?: [ 
      {
        instanceId?: long(name='InstanceId', description='The ID of the instance that triggered the event.', example='12345'),
        nodeId?: long(name='NodeId', description='The ID of the node that triggered the event.', example='1234'),
        topicId?: long(name='TopicId', description='The event ID.', example='412431'),
        topicName?: string(name='TopicName', description='The name of the event.', example='error'),
        topicOwner?: string(name='TopicOwner', description='The ID of the Alibaba Cloud account used by the event owner.', example='9527952795****'),
        topicStatus?: string(name='TopicStatus', description='The status of the event. Valid values:

*   IGNORE
*   NEW
*   FIXING
*   RECOVER', example='FIXING'),
      }
    ](name='Topics', description='The events that triggered alerts. This parameter is returned if the value of the Source parameter is TOPIC_ALERT. This parameter is left empty if the value of the Source parameter is not TOPIC_ALERT.'),
  }(name='Data', description='The information about returned alerts.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model GetAlertMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAlertMessageResponseBody(name='body'),
}

/**
 * @summary Queries alert information based on the alert ID that is specified by the AlertId parameter.
 *
 * @param request GetAlertMessageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAlertMessageResponse
 */
async function getAlertMessageWithOptions(request: GetAlertMessageRequest, runtime: Util.RuntimeOptions): GetAlertMessageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertId)) {
    body['AlertId'] = request.alertId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetAlertMessage',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries alert information based on the alert ID that is specified by the AlertId parameter.
 *
 * @param request GetAlertMessageRequest
 * @return GetAlertMessageResponse
 */
async function getAlertMessage(request: GetAlertMessageRequest): GetAlertMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAlertMessageWithOptions(request, runtime);
}

model GetBaselineRequest {
  baselineId?: long(name='BaselineId', description='The baseline ID. You can call the [ListBaselines](https://help.aliyun.com/document_detail/2261507.html) operation to query the ID.

This parameter is required.', example='123456'),
  projectId?: long(name='ProjectId', description='The ID of the workspace to which the baseline belongs. You can call the [ListBaselines](https://help.aliyun.com/document_detail/2261507.html) operation to query the ID.

This parameter is required.', example='10000'),
}

model GetBaselineResponseBody = {
  data?: {
    alertEnabled?: boolean(name='AlertEnabled', description='Indicates whether the alerting feature is enabled. Valid values:

*   true
*   false', example='true'),
    alertMarginThreshold?: int32(name='AlertMarginThreshold', description='The alert margin threshold. Unit: minutes.', example='60'),
    alertSettings?: [ 
      {
        alertInterval?: int32(name='AlertInterval', description='The event alert interval, in seconds.', example='900'),
        alertMaximum?: int32(name='AlertMaximum', description='The maximum number of event alerts.', example='1'),
        alertMethods?: [ string ](name='AlertMethods', description='Alert method list'),
        alertRecipient?: string(name='AlertRecipient', description='Alert recipient details.

AlertRecipientType is OWNER: empty
AlertRecipientType is SHIFT_SCHEDULE: duty table uid
AlertRecipientType is OTHER: uid list, multiple UIDs are in English, split', example='123123'),
        alertRecipientType?: string(name='AlertRecipientType', description='The type of alert recipient.

- OWNER: task owner
- OTHER: designated person
- SHIFT: SCHEDULE-duty table', example='OWNER'),
        alertType?: string(name='AlertType', description='Alert type

- BASELINE: baseline
- TOPIC: event', example='BASELINE'),
        baselineAlertEnabled?: boolean(name='BaselineAlertEnabled', description='The baseline alarm switch.

- true
- false', example='false'),
        dingRobots?: [ 
          {
            atAll?: boolean(name='AtAll', description='Whether @ everyone.', example='true'),
            webUrl?: string(name='WebUrl', description='DingTalk robot address', example='https://oapi.dingtalk.com/robot/send?access_token=xxx'),
          }
        ](name='DingRobots', description='DingTalk robot list.'),
        silenceEndTime?: string(name='SilenceEndTime', description='The end time of the silence. The format is HH:mm:ss.', example='00:00:00'),
        silenceStartTime?: string(name='SilenceStartTime', description='The start time of the silence. Format: HH:mm:ss', example='00:00:00'),
        topicTypes?: [ string ](name='TopicTypes', description='The list of Event Alert types.'),
        webhooks?: [ string ](name='Webhooks', description='webhook list.'),
      }
    ](name='AlertSettings', description='The alert settings.'),
    baselineId?: long(name='BaselineId', description='The baseline ID.', example='1001'),
    baselineName?: string(name='BaselineName', description='The name of the baseline.', example='Test baseline'),
    baselineType?: string(name='BaselineType', description='The type of the baseline. Valid values:

*   DAILY
*   HOURLY', example='DAILY'),
    enabled?: boolean(name='Enabled', description='Indicates whether the baseline is enabled.', example='true'),
    nodeIds?: [ long ](name='NodeIds', description='The node IDs.'),
    overTimeSettings?: [ 
      {
        cycle?: int32(name='Cycle', description='The period corresponding to the commitment time. The space-based line is 1, and the hourly baseline can be configured for up to 24 cycles.', example='1'),
        time?: string(name='Time', description='Commitment time, hh:mm format, hh value range is [0,47],mm value range is [0,59].', example='00:00'),
      }
    ](name='OverTimeSettings', description='The settings of the committed completion time of the baseline.'),
    owner?: string(name='Owner', description='The owner.', example='9527952****'),
    priority?: int32(name='Priority', description='The priority of the baseline. Valid values: 1, 3, 5, 7, and 8.', example='1'),
    projectId?: long(name='ProjectId', description='The workspace ID.', example='10000'),
  }(name='Data', description='The data returned.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified parameters are invalid'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='ecb967ec-c137-48a5-860****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model GetBaselineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBaselineResponseBody(name='body'),
}

/**
 * @summary Queries the information about a baseline based on its ID.
 *
 * @param request GetBaselineRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetBaselineResponse
 */
async function getBaselineWithOptions(request: GetBaselineRequest, runtime: Util.RuntimeOptions): GetBaselineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetBaseline',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about a baseline based on its ID.
 *
 * @param request GetBaselineRequest
 * @return GetBaselineResponse
 */
async function getBaseline(request: GetBaselineRequest): GetBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBaselineWithOptions(request, runtime);
}

model GetBaselineConfigRequest {
  baselineId?: long(name='BaselineId', description='The baseline ID. You can call the [GetNode](https://help.aliyun.com/document_detail/173977.html) operation to query the baseline ID.

This parameter is required.', example='1234'),
}

model GetBaselineConfigResponseBody = {
  data?: {
    baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
    baselineName?: string(name='BaselineName', description='The name of the baseline.', example='Baseline name'),
    baselineType?: string(name='BaselineType', description='The type of the baseline. Valid values: DAILY and HOURLY.', example='DAILY'),
    expHour?: int32(name='ExpHour', description='The hour in the alerting time of the day-level baseline. Valid values: [0, 47].', example='7'),
    expMinu?: int32(name='ExpMinu', description='The minute in the alerting time of the day-level baseline. Valid values: [0, 59].', example='30'),
    hourExpDetail?: string(name='HourExpDetail', description='The alerting time of the hour-level baseline. This parameter is presented as key-value pairs in the JSON format. The key indicates the ID of the cycle, and the value is presented in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].', example='{"1":"03:28","2":"04:28","3":"05:28","4":"06:28","5":"07:28","6":"08:28","7":"09:28","8":"10:28","9":"11:28","10":"12:28","11":"13:28","12":"14:28","13":"15:28","14":"16:28","15":"17:28","16":"18:28","17":"19:28","18":"20:28","19":"21:28","20":"22:28","21":"23:28","22":"24:28","23":"25:28","24":"26:28"}'),
    hourSlaDetail?: string(name='HourSlaDetail', description='The committed completion time of the hour-level baseline. This parameter is presented as key-value pairs in the JSON format. The key indicates the ID of the cycle, and the value is presented in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].', example='{"1":"03:58","2":"04:58","3":"05:58","4":"06:58","5":"07:58","6":"08:58","7":"09:58","8":"10:58","9":"11:58","10":"12:58","11":"13:58","12":"14:58","13":"15:58","14":"16:58","15":"17:58","16":"18:58","17":"19:58","18":"20:58","19":"21:58","20":"22:58","21":"23:58","22":"24:58","23":"25:58","24":"26:58"}'),
    isDefault?: boolean(name='IsDefault', description='Indicates whether the baseline is a default baseline of the workspace. Valid values: true and false.', example='true'),
    owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the baseline owner. Multiple IDs can be specified. The IDs are separated by commas (,).', example='9527952****'),
    priority?: int32(name='Priority', description='The priority of the baseline. Valid values: {1,3,5,7,8}.', example='1'),
    projectId?: long(name='ProjectId', description='The ID of the workspace.', example='1234'),
    slaHour?: int32(name='SlaHour', description='The hour in the committed completion time of the day-level baseline. Valid values: [0, 47].', example='9'),
    slaMinu?: int32(name='SlaMinu', description='The minute in the committed completion time of the day-level baseline. Valid values: [0, 59].', example='30'),
    useFlag?: boolean(name='UseFlag', description='Indicates whether the baseline is enabled. Valid values: true and false.', example='true'),
  }(name='Data', description='The details of the baseline.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='401'),
  requestId?: string(name='RequestId', description='The request ID.', example='ecb967ec-c137-48a5-860****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetBaselineConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBaselineConfigResponseBody(name='body'),
}

/**
 * @summary Queries the configurations of a baseline.
 *
 * @param request GetBaselineConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetBaselineConfigResponse
 */
async function getBaselineConfigWithOptions(request: GetBaselineConfigRequest, runtime: Util.RuntimeOptions): GetBaselineConfigResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetBaselineConfig',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the configurations of a baseline.
 *
 * @param request GetBaselineConfigRequest
 * @return GetBaselineConfigResponse
 */
async function getBaselineConfig(request: GetBaselineConfigRequest): GetBaselineConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBaselineConfigWithOptions(request, runtime);
}

model GetBaselineKeyPathRequest {
  baselineId?: long(name='BaselineId', description='The name of the event.

This parameter is required.', example='1234'),
  bizdate?: string(name='Bizdate', description='The ID of the instance.

This parameter is required.', example='2020-07-07T00:00:00+0800'),
  inGroupId?: int32(name='InGroupId', description='The ID of the event.

This parameter is required.', example='1'),
}

model GetBaselineKeyPathResponseBody = {
  data?: [ 
    {
      bizdate?: long(name='Bizdate', description='The data timestamp of the instance.', example='1553443200000'),
      inGroupId?: int32(name='InGroupId', description='The ID of the scheduling cycle of the instance. Valid values: 1 to 288.', example='1'),
      instanceId?: long(name='InstanceId', description='The ID of the instance.', example='12345'),
      nodeId?: long(name='NodeId', description='The node ID.', example='1234'),
      nodeName?: string(name='NodeName', description='The name of the node.', example='Node name'),
      owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the node owner.', example='9527952****'),
      prgType?: int32(name='PrgType', description='The type of the node. Valid values: 23, 10, 6, and 99. The value 23 indicates that the node is a Data Integration node. The value 10 indicates that the node is a MaxCompute SQL node. The value 6 indicates that the node is a Shell node. The value 99 indicates that the node is a zero load node.', example='10'),
      projectId?: long(name='ProjectId', description='The ID of the workspace to which the node belongs.', example='1234'),
      runs?: [ 
        {
          absTime?: long(name='AbsTime', description='The timestamp obtained by adding the predicted time when the instance started to run to the historical average running duration of the instance.', example='1553531402000'),
          beginCast?: long(name='BeginCast', description='The timestamp of the predicted time when the instance started to run.', example='1553531686000'),
          beginRunningTime?: long(name='BeginRunningTime', description='The timestamp of the actual time when the instance started to run.', example='1553531401000'),
          beginWaitResTime?: long(name='BeginWaitResTime', description='The timestamp when the instance started to wait for resources.', example='1553531401000'),
          beginWaitTimeTime?: long(name='BeginWaitTimeTime', description='The timestamp when the instance started to wait for the scheduling time.', example='1553531400000'),
          endCast?: long(name='EndCast', description='The timestamp of the predicted time when the instance finished running.', example='1553531687000'),
          finishTime?: long(name='FinishTime', description='The timestamp of the actual time when the instance finished running.', example='1553531401000'),
          status?: string(name='Status', description='The status of the instance. Valid values: NOT_RUN, WAIT_TIME, WAIT_RESOURCE, RUNNING, CHECKING, CHECKING_CONDITION, FAILURE, and SUCCESS. The value NOT_RUN indicates that the instance is not run. The value WAIT_TIME indicates that the instance is waiting to be run. The value WAIT_RESOURCE indicates that the instance is waiting for resources. The value RUNNING indicates that the instance is running. The value CHECKING indicates that data quality is being checked for the instance. The value CHECKING_CONDITION indicates that branch conditions are being checked for the instance. The value FAILURE indicates that the instance fails to run. The value SUCCESS indicates that the instance is run.', example='SUCCESS'),
        }
      ](name='Runs', description='The running records of the instance.'),
      topics?: [ 
        {
          addTime?: long(name='AddTime', description='The timestamp when the event was found.', example='1553531401000'),
          instanceId?: long(name='InstanceId', description='The instance ID.', example='1234'),
          topicId?: long(name='TopicId', description='The event ID.', example='1234'),
          topicName?: string(name='TopicName', description='The name of the event.', example='1234'),
        }
      ](name='Topics', description='The information about the events that are associated with the instance.'),
    }
  ](name='Data', description='The information about the key path.'),
  errorCode?: string(name='ErrorCode', description='Error code', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='Error message', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The timestamp when the event was found.', example='200'),
  requestId?: string(name='RequestId', description='The unique ID of the call. After an error occurs, you can troubleshoot the problem based on the ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Whether the call is successful.', example='true'),
}

model GetBaselineKeyPathResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBaselineKeyPathResponseBody(name='body'),
}

/**
 * @summary The information about the events that are associated with the instance.
 *
 * @param request GetBaselineKeyPathRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetBaselineKeyPathResponse
 */
async function getBaselineKeyPathWithOptions(request: GetBaselineKeyPathRequest, runtime: Util.RuntimeOptions): GetBaselineKeyPathResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.inGroupId)) {
    body['InGroupId'] = request.inGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetBaselineKeyPath',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary The information about the events that are associated with the instance.
 *
 * @param request GetBaselineKeyPathRequest
 * @return GetBaselineKeyPathResponse
 */
async function getBaselineKeyPath(request: GetBaselineKeyPathRequest): GetBaselineKeyPathResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBaselineKeyPathWithOptions(request, runtime);
}

model GetBaselineStatusRequest {
  baselineId?: long(name='BaselineId', description='The ID of the baseline.

This parameter is required.', example='1234'),
  bizdate?: string(name='Bizdate', description='The data timestamp of the baseline instance. Specify the time in the ISO 8601 standard in the yyyy-MM-dd\\\\"T\\\\"HH:mm:ssZ format. The time must be in UTC.

This parameter is required.', example='2020-07-07T00:00:00+0800'),
  inGroupId?: int32(name='InGroupId', description='The ID of the scheduling cycle of the baseline instance. For a baseline instance that is scheduled by day, the value of this parameter is 1. For a baseline instance that is scheduled by hour, the value of this parameter ranges from 1 to 24.

This parameter is required.', example='1'),
}

model GetBaselineStatusResponseBody = {
  data?: {
    baselineId?: long(name='BaselineId', description='The ID of the baseline.', example='1234'),
    baselineName?: string(name='BaselineName', description='The name of the baseline.', example='Baseline name'),
    bizdate?: long(name='Bizdate', description='The data timestamp of the baseline instance.', example='1553443200000'),
    blockInstance?: {
      endCast?: long(name='EndCast', description='The timestamp of the predicted time when the instance finished running.', example='1553443200000'),
      finishTime?: long(name='FinishTime', description='The timestamp of the actual time when the instance finished running.', example='1553443200000'),
      instanceId?: long(name='InstanceId', description='The ID of the instance.', example='12345'),
      nodeId?: long(name='NodeId', description='The ID of the node.', example='1234'),
      nodeName?: string(name='NodeName', description='The name of the node.', example='Node name'),
      owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the node owner.', example='9527952795****'),
      projectId?: long(name='ProjectId', description='The ID of the workspace to which the node belongs.', example='1234'),
      status?: string(name='Status', description='The status of the instance. Valid values: NOT_RUN, WAIT_TIME, WAIT_RESOURCE, RUNNING, CHECKING, CHECKING_CONDITION, FAILURE, and SUCCESS. The value NOT_RUN indicates that the instance is not run. The value WAIT_TIME indicates that the instance is waiting to be run. The value WAIT_RESOURCE indicates that the instance is waiting for resources. The value RUNNING indicates that the instance is running. The value CHECKING indicates that data quality is being checked for the instance. The value CHECKING_CONDITION indicates that branch conditions are being checked for the instance. The value FAILURE indicates that the instance fails to run. The value SUCCESS indicates that the instance is run.', example='SUCCESS'),
    }(name='BlockInstance', description='The information about the key instance.'),
    buffer?: float(name='Buffer', description='The margin of the baseline instance. Unit: seconds.', example='1200'),
    endCast?: long(name='EndCast', description='The timestamp of the predicted time when the baseline instance finished running.', example='1553443200000'),
    expTime?: long(name='ExpTime', description='The timestamp of the alerting time of the baseline instance.', example='1553443200000'),
    finishStatus?: string(name='FinishStatus', description='The status of the baseline instance. Valid values: UNFINISH and FINISH. The value UNFINISH indicates that the baseline instance is still running. The value FINISH indicates that the baseline instance finishes running.', example='UNFINISH'),
    finishTime?: long(name='FinishTime', description='The timestamp of the actual time when the baseline instance finished running. This parameter is returned if the value of the FinishStatus parameter is FINISH.', example='1553443200000'),
    inGroupId?: int32(name='InGroupId', description='The ID of the scheduling cycle of the baseline instance. For a baseline instance that is scheduled by day, the value of this parameter is 1. For a baseline instance that is scheduled by hour, the value of this parameter ranges from 1 to 24.', example='1'),
    lastInstance?: {
      endCast?: long(name='EndCast', description='The timestamp of the predicted time when the instance finished running.', example='1553443200000'),
      finishTime?: long(name='FinishTime', description='The timestamp of the actual time when the instance finished running.', example='1553443200000'),
      instanceId?: long(name='InstanceId', description='The ID of the instance.', example='12345'),
      nodeId?: long(name='NodeId', description='The ID of the node.', example='1234'),
      nodeName?: string(name='NodeName', description='The name of the node.', example='Node name'),
      owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the node owner.', example='9527952795****'),
      projectId?: long(name='ProjectId', description='The ID of the workspace to which the node belongs.', example='1234'),
      status?: string(name='Status', description='The status of the instance. Valid values: NOT_RUN, WAIT_TIME, WAIT_RESOURCE, RUNNING, CHECKING, CHECKING_CONDITION, FAILURE, and SUCCESS. The value NOT_RUN indicates that the instance is not run. The value WAIT_TIME indicates that the instance is waiting to be run. The value WAIT_RESOURCE indicates that the instance is waiting for resources. The value RUNNING indicates that the instance is running. The value CHECKING indicates that data quality is being checked for the instance. The value CHECKING_CONDITION indicates that branch conditions are being checked for the instance. The value FAILURE indicates that the instance fails to run. The value SUCCESS indicates that the instance is run.', example='SUCCESS'),
    }(name='LastInstance', description='The information about the last generated instance.'),
    owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the baseline owner. Multiple IDs are separated by commas (,).', example='9527952795****'),
    priority?: int32(name='Priority', description='The priority of the baseline. Valid values: 1, 2, 5, 7, and 8.', example='1'),
    projectId?: long(name='ProjectId', description='The ID of the workspace to which the baseline belongs.', example='1234'),
    slaTime?: long(name='SlaTime', description='The timestamp of the committed completion time of the baseline instance.', example='1553443200000'),
    status?: string(name='Status', description='The status of the baseline. Valid values: ERROR, SAFE, DANGEROUS, and OVER. The value ERROR indicates that no nodes are associated with the baseline, or all nodes associated with the baseline are suspended. The value SAFE indicates that nodes finish running before the alerting time. The value DANGEROUS indicates that nodes are still running after the alerting time but before the committed completion time. The value OVER indicates that nodes are still running after the committed completion time.', example='SAFE'),
  }(name='Data', description='The details of the baseline instance.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetBaselineStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBaselineStatusResponseBody(name='body'),
}

/**
 * @summary Queries the details of a baseline instance.
 *
 * @param request GetBaselineStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetBaselineStatusResponse
 */
async function getBaselineStatusWithOptions(request: GetBaselineStatusRequest, runtime: Util.RuntimeOptions): GetBaselineStatusResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.inGroupId)) {
    body['InGroupId'] = request.inGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetBaselineStatus',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the details of a baseline instance.
 *
 * @param request GetBaselineStatusRequest
 * @return GetBaselineStatusResponse
 */
async function getBaselineStatus(request: GetBaselineStatusRequest): GetBaselineStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBaselineStatusWithOptions(request, runtime);
}

model GetBusinessRequest {
  businessId?: long(name='BusinessId', description='The workflow ID. You can call the [ListBusiness](https://help.aliyun.com/document_detail/173945.html) operation to query the ID.

This parameter is required.', example='1000000001'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the ID. You must specify either this parameter or ProjectIdentifier to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Settings panel to obtain the name. You must specify either this parameter or ProjectId to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model GetBusinessResponseBody = {
  data?: {
    businessId?: long(name='BusinessId', description='The ID of the workflow.', example='1000001'),
    businessName?: string(name='BusinessName', description='The name of the workflow.', example='The first business process'),
    description?: string(name='Description', description='The description of the workflow.', example='This is my first business process.'),
    owner?: string(name='Owner', description='The Alibaba Cloud account ID of the workflow owner.', example='20000****'),
    projectId?: string(name='ProjectId', description='The ID of the workspace to which the workflow belongs.', example='10000'),
    useType?: string(name='UseType', description='The module to which the workflow belongs. Valid values: NORMAL and MANUAL_BIZ.', example='NORMAL'),
  }(name='Data', description='The details of the workflow.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetBusinessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBusinessResponseBody(name='body'),
}

/**
 * @summary Queries the information about a workflow.
 *
 * @param request GetBusinessRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetBusinessResponse
 */
async function getBusinessWithOptions(request: GetBusinessRequest, runtime: Util.RuntimeOptions): GetBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessId)) {
    body['BusinessId'] = request.businessId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetBusiness',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about a workflow.
 *
 * @param request GetBusinessRequest
 * @return GetBusinessResponse
 */
async function getBusiness(request: GetBusinessRequest): GetBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBusinessWithOptions(request, runtime);
}

model GetDDLJobStatusRequest {
  taskId?: string(name='TaskId', description='The ID of the DDL task.

This parameter is required.', example='abc'),
}

model GetDDLJobStatusResponseBody = {
  data?: {
    content?: string(name='Content', description='The content of the task.', example='success'),
    nextTaskId?: string(name='NextTaskId', description='The ID of the ongoing task. If no value is returned for this parameter, all subtasks are complete.', example='abc1'),
    status?: string(name='Status', description='The status of the task.', example='success'),
    taskId?: string(name='TaskId', description='The task ID.', example='abc'),
  }(name='Data', description='The details of the task.'),
  requestId?: string(name='RequestId', description='The request ID.', example='abc'),
}

model GetDDLJobStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDDLJobStatusResponseBody(name='body'),
}

/**
 * @summary Queries the status of a table creation, update, or deletion task.
 *
 * @param request GetDDLJobStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDDLJobStatusResponse
 */
async function getDDLJobStatusWithOptions(request: GetDDLJobStatusRequest, runtime: Util.RuntimeOptions): GetDDLJobStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDDLJobStatus',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the status of a table creation, update, or deletion task.
 *
 * @param request GetDDLJobStatusRequest
 * @return GetDDLJobStatusResponse
 */
async function getDDLJobStatus(request: GetDDLJobStatusRequest): GetDDLJobStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDDLJobStatusWithOptions(request, runtime);
}

model GetDIAlarmRuleRequest {
  DIAlarmRuleId?: long(name='DIAlarmRuleId', description='The alert rule ID.

This parameter is required.', example='34994'),
}

model GetDIAlarmRuleResponseBody = {
  DIAlarmRule?: {
    createdTime?: long(name='CreatedTime', description='The timestamp when the alert rule was created. Unit: seconds.', example='1663573162'),
    createdUid?: string(name='CreatedUid', description='The ID of the user who creates the alert rule.', example='10000001'),
    DIAlarmRuleId?: long(name='DIAlarmRuleId', description='The alert rule ID.', example='34988'),
    DIJobId?: long(name='DIJobId', description='The ID of the task with which the alert rule is associated.', example='11170'),
    description?: string(name='Description', description='The description of the alert rule.', example='mysql synchronizes to hologres heartbeat alert'),
    enabled?: boolean(name='Enabled', description='Indicates whether the alert rule is enabled.', example='true'),
    metricType?: string(name='MetricType', description='The metric type in the alert rule. Valid values:

*   Heartbeat
*   FailoverCount
*   Delay', example='Heartbeat'),
    notificationSettings?: {
      inhibitionInterval?: int32(name='InhibitionInterval', description='The duration of the alert suppression interval. Unit: minutes.', example='5'),
      notificationChannels?: [ 
        {
          channels?: [ string ](name='Channels', description='The alert notification methods.'),
          severity?: string(name='Severity', description='The severity level. Valid values:

*   Warning
*   Critical', example='Warning'),
        }
      ](name='NotificationChannels', description='The alert notification methods.'),
      notificationReceivers?: [ 
        {
          receiverType?: string(name='ReceiverType', description='The recipient type. Valid values: AliyunUid and DingToken.

*   If the alert notification method is Mail, Phone, or Sms, the value of this parameter is **AliyunUid**, which indicates the Alibaba Cloud account ID.
*   If the alert notification method is Ding, the value of this parameter is **DingToken**, which indicates the DingTalk chatbot token.', example='DingToken'),
          receiverValues?: [ string ](name='ReceiverValues', description='The recipients.'),
        }
      ](name='NotificationReceivers', description='The alert notification recipients.'),
    }(name='NotificationSettings', description='The alert notification settings.'),
    triggerConditions?: [ 
      {
        duration?: long(name='Duration', description='The time interval for alert calculation. Unit: minutes.', example='15'),
        severity?: string(name='Severity', description='The severity level. Valid values:

*   Warning
*   Critical', example='Warning'),
        threshold?: long(name='Threshold', description='The alert threshold.

*   If the alert rule is for task status, no threshold is used.
*   If the alert rule is for failovers, specify the number of failovers.
*   If the alert rule is for latency, the threshold is the latency duration, in seconds.', example='5'),
      }
    ](name='TriggerConditions', description='The conditions that are used to trigger the alert rule.'),
    updatedTime?: long(name='UpdatedTime', description='The timestamp when the alert rule was last updated. Unit: seconds.', example='1663573163'),
    updatedUid?: string(name='UpdatedUid', description='The ID of the user who last updates the alert rule.', example='10000001'),
  }(name='DIAlarmRule', description='The details of the alert rule.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4A807D85-AC9F-55F7-A58F-998D5249CAD9'),
}

model GetDIAlarmRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDIAlarmRuleResponseBody(name='body'),
}

/**
 * @summary Queries the details of an alert rule configured for a new-version synchronization task. Only the following types of tasks are supported: real-time data synchronization from a MySQL database to Hologres.
 *
 * @description You can configure alert rules only for tasks that can be used for real-time data synchronization.
 *
 * @param request GetDIAlarmRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDIAlarmRuleResponse
 */
async function getDIAlarmRuleWithOptions(request: GetDIAlarmRuleRequest, runtime: Util.RuntimeOptions): GetDIAlarmRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.DIAlarmRuleId)) {
    body['DIAlarmRuleId'] = request.DIAlarmRuleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDIAlarmRule',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the details of an alert rule configured for a new-version synchronization task. Only the following types of tasks are supported: real-time data synchronization from a MySQL database to Hologres.
 *
 * @description You can configure alert rules only for tasks that can be used for real-time data synchronization.
 *
 * @param request GetDIAlarmRuleRequest
 * @return GetDIAlarmRuleResponse
 */
async function getDIAlarmRule(request: GetDIAlarmRuleRequest): GetDIAlarmRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDIAlarmRuleWithOptions(request, runtime);
}

model GetDIJobRequest {
  DIJobId?: long(name='DIJobId', description='The ID of the synchronization task.

This parameter is required.', example='11588'),
  withDetails?: boolean(name='WithDetails', description='Specifies whether to return detailed configuration information, including TransformationRules, TableMappings, and JobSettings. Valid values: true and false. Default value: true.', example='true'),
}

model GetDIJobResponseBody = {
  data?: {
    createdTime?: long(name='CreatedTime', description='The timestamp when the synchronization task was created. The timestamp is accurate to the second.', example='1671516776'),
    createdUid?: string(name='CreatedUid', description='The ID of the user who creates the synchronization task.', example='100000001'),
    DIJobId?: long(name='DIJobId', description='The ID of the synchronization task.', example='11588'),
    description?: string(name='Description', description='The description of the synchronization task.', example='Synchronize mysql to hologres'),
    destinationDataSourceSettings?: [ 
      {
        dataSourceName?: string(name='DataSourceName', description='The name of the data source.', example='holo_datasource_1'),
        dataSourceProperties?: map[string]string(name='DataSourceProperties', description='The properties of the data source.'),
      }
    ](name='DestinationDataSourceSettings', description='The settings of the destination. Only a single destination is supported.'),
    destinationDataSourceType?: string(name='DestinationDataSourceType', description='The destination type. Valid values: Hologres and Hive.', example='Hologres'),
    errorMessage?: string(name='ErrorMessage', description='The error message returned if the value of the JobStatus parameter is Failed.', example='error details xxx'),
    jobName?: string(name='JobName', description='The name of the synchronization task.', example='mysql_to_holo_sync_445'),
    jobSettings?: {
      channelSettings?: string(name='ChannelSettings', description='The channel control settings for the synchronization task. The value of this parameter is a JSON string.', example='{"structInfo":"MANAGED","storageType":"TEXTFILE","writeMode":"APPEND","partitionColumns":[{"columnName":"pt","columnType":"STRING","comment":""}],"fieldDelimiter":""}'),
      columnDataTypeSettings?: [ 
        {
          destinationDataType?: string(name='DestinationDataType', description='The data type of a destination field.', example='text'),
          sourceDataType?: string(name='SourceDataType', description='The data type of a source field.', example='bigint'),
        }
      ](name='ColumnDataTypeSettings', description='The settings for data type mappings between source fields and destination fields. The value of this parameter is an array.'),
      cycleScheduleSettings?: {
        cycleMigrationType?: string(name='CycleMigrationType', description='The synchronization type that requires periodic scheduling. Valid values:

*   Full: full synchronization
*   OfflineIncremental: batch incremental synchronization', example='Full'),
        scheduleParameters?: string(name='ScheduleParameters', description='The scheduling parameters.', example='bizdate=$bizdate'),
      }(name='CycleScheduleSettings', description='The settings for periodic scheduling.'),
      ddlHandlingSettings?: [ 
        {
          action?: string(name='Action', description='The processing policy. Valid values:

*   Ignore: ignores a DDL message.
*   Critical: reports an error for a DDL message.
*   Normal: normally processes a DDL message.', example='Critical'),
          type?: string(name='Type', description='The type of the DDL operation. Valid values:

*   RenameColumn
*   ModifyColumn
*   CreateTable
*   TruncateTable
*   DropTable
*   DropColumn
*   AddColumn', example='AddColumn'),
        }
      ](name='DdlHandlingSettings', description='The settings for processing DDL messages. The value of this parameter is an array.'),
      runtimeSettings?: [ 
        {
          name?: string(name='Name', description='The name of the configuration item. Valid values:

*   runtime.offline.speed.limit.mb: indicates the maximum transmission rate that is allowed for a batch synchronization task. This configuration item takes effect only when runtime.offline.speed.limit.enable is set to true.
*   runtime.offline.speed.limit.enable: indicates whether throttling is enabled for a batch synchronization task.
*   dst.offline.connection.max: indicates the maximum number of connections that are allowed for writing data to the destination of a batch synchronization task.
*   runtime.offline.concurrent: indicates the maximum number of parallel threads that are allowed for a batch synchronization task.
*   dst.realtime.connection.max: indicates the maximum number of connections that are allowed for writing data to the destination of a real-time synchronization task.
*   runtime.enable.auto.create.schema: indicates whether schemas are automatically created in the destination of a synchronization task.
*   src.offline.datasource.max.connection: indicates the maximum number of connections that are allowed for reading data from the source of a batch synchronization task.
*   runtime.realtime.concurrent: indicates the maximum number of parallel threads that are allowed for a real-time synchronization task.', example='runtime.offline.concurrent'),
          value?: string(name='Value', description='The value of the configuration item.', example='1'),
        }
      ](name='RuntimeSettings', description='The runtime settings. The value of this parameter is an array.'),
    }(name='JobSettings', description='The settings for the dimension of the synchronization task. The settings include processing policies for DDL messages, policies for data type mappings between source fields and destination fields, and runtime parameters of the synchronization task.'),
    jobStatus?: string(name='JobStatus', description='The status of the synchronization task. Valid values:

*   Finished
*   Initialized
*   Stopped
*   Failed
*   Running
*   Stopping', example='Finished'),
    migrationType?: string(name='MigrationType', description='The synchronization type. Valid values:

*   FullAndRealtimeIncremental: one-time full synchronization and real-time incremental synchronization
*   RealtimeIncremental: real-time incremental synchronization
*   Full: full synchronization
*   OfflineIncremental: batch incremental synchronization
*   FullAndOfflineIncremental: one-time full synchronization and batch incremental synchronization', example='FullAndRealtimeIncremental'),
    projectId?: long(name='ProjectId', description='The workspace ID.', example='22'),
    resourceSettings?: {
      offlineResourceSettings?: {
        resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', description='The identifier of the resource group for Data Integration used for batch synchronization.', example='S_res_group_111_222'),
      }(name='OfflineResourceSettings', description='The resource used for batch synchronization.'),
      realtimeResourceSettings?: {
        resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', description='The identifier of the resource group for Data Integration used for real-time synchronization.', example='S_res_group_111_222'),
      }(name='RealtimeResourceSettings', description='The resource used for real-time synchronization.'),
      requestedCu?: float(name='RequestedCu', description='The number of compute units (CUs) in the resource group that are used for incremental and full synchronization.', example='2.0'),
    }(name='ResourceSettings', description='The resource settings.'),
    runStats?: map[string]string(name='RunStats', description='The information about the running of the synchronization task.'),
    sourceDataSourceSettings?: [ 
      {
        dataSourceName?: string(name='DataSourceName', description='The name of the data source.', example='mysql_datasource_1'),
        dataSourceProperties?: map[string]string(name='DataSourceProperties', description='The properties of the data source.'),
      }
    ](name='SourceDataSourceSettings', description='The settings of the source. Only a single source is supported.'),
    sourceDataSourceType?: string(name='SourceDataSourceType', description='The source type. The value MySQL is returned.', example='MySQL'),
    startedTime?: long(name='StartedTime', description='The timestamp when the synchronization task was last started. The timestamp is accurate to the second.', example='1673859999'),
    startedUid?: string(name='StartedUid', description='The ID of the user who last starts the synchronization task.', example='100000001'),
    tableMappings?: [ 
      {
        sourceObjectSelectionRules?: [ 
          {
            expression?: string(name='Expression', description='The expression.', example='mysql_table_1'),
            objectType?: string(name='ObjectType', description='The object type. Valid values:

*   Table
*   Database', example='Table'),
          }
        ](name='SourceObjectSelectionRules', description='The list of rules used to select synchronization objects in the source.'),
        transformationRules?: [ 
          {
            ruleActionType?: string(name='RuleActionType', description='The action type. Valid values:

*   DefinePrimaryKey
*   Rename
*   AddColumn
*   HandleDml
*   DefineIncrementalCondition
*   DefineCycleScheduleSettings
*   DefineRuntimeSettings
*   DefinePartitionKey', example='Rename'),
            ruleName?: string(name='RuleName', description='The name of the rule. If the values of the RuleActionType parameter and the RuleTargetType parameter are the same for multiple transformation rules, you must make sure that the transformation rule names are unique.', example='rename_rule_1'),
            ruleTargetType?: string(name='RuleTargetType', description='The type of the object on which the action is performed. Valid values:

*   Table
*   Schema', example='Table'),
          }
        ](name='TransformationRules', description='The list of transformation rules that are applied to the synchronization objects selected from the source.'),
      }
    ](name='TableMappings', description='The list of mappings between rules used to select synchronization objects in the source and transformation rules applied to the selected synchronization objects. Each entry in the list displays a mapping between a rule used to select synchronization objects and a transformation rule applied to the selected synchronization objects.'),
    transformationRules?: [ 
      {
        ruleActionType?: string(name='RuleActionType', description='The action type. Valid values:

*   DefinePrimaryKey
*   Rename
*   AddColumn
*   HandleDml
*   DefineIncrementalCondition
*   DefineCycleScheduleSettings
*   DefineRuntimeSettings
*   DefinePartitionKey', example='Rename'),
        ruleExpression?: string(name='RuleExpression', description='The expression of the rule. The expression is a JSON string.

*   Example of a renaming rule: `{"expression":"${srcDatasourceName}_${srcDatabaseName}_0922","variables":[{"variableName":"srcDatabaseName","variableRules":[{"from":"fromdb","to":"todb"}\\\\]}\\\\]}`.

    *   expression: the expression of the renaming rule. The expression may contain the following variables:

        *   ${srcDatasourceName}
        *   ${srcDatabaseName}
        *   ${srcTableName}

    *   variables: the generation rule for a variable used in the expression of the renaming rule. The default value of the specified variable is the original value of the object indicated by the variable. A group of string replacement rules used to change the original values may be returned.

        *   variableName: the name of the variable. The variable name is not enclosed in ${}.
        *   variableRules: the string replacement rules for variables. The system runs the string replacement rules in sequence. from indicates the original string. to indicates the new string.

*   Example of a rule used to add a specific field to the destination and assign a value to the field: `{"columns":[{"columnName":"my_add_column","columnValueType":"Constant","columnValue":"123"}\\\\]}`.

    If no rule of this type is configured, no fields are added to the destination and no values are assigned by default.

    *   columnName: the name of the field that is added.

    *   columnValueType: the value type of the field. Valid values: Constant and Variable.

    *   columnValue: the value of the field.

        *   If the value of the columnValueType parameter is Constant, the value of the columnValue parameter is a constant of the STRING data type.
        *   If the value of the columnValueType parameter is Variable, the value of the columnValue parameter is a built-in variable. The following built-in variables are supported: EXECUTE_TIME (LONG data type), DB_NAME_SRC (STRING data type), DATASOURCE_NAME_SRC (STRING data type), TABLE_NAME_SRC (STRING data type), DB_NAME_DEST (STRING data type), DATASOURCE_NAME_DEST (STRING data type), TABLE_NAME_DEST (STRING data type), and DB_NAME_SRC_TRANSED (STRING data type). EXECUTE_TIME indicates the execution time. DB_NAME_SRC indicates the name of a source database. DATASOURCE_NAME_SRC indicates the name of the source. TABLE_NAME_SRC indicates the name of a source table. DB_NAME_DEST indicates the name of a destination database. DATASOURCE_NAME_DEST indicates the name of the destination. TABLE_NAME_DEST indicates the name of a destination table. DB_NAME_SRC_TRANSED indicates the database name obtained after a transformation.

*   Example of a rule used to specify primary key fields for a destination table: `{"columns":["ukcolumn1","ukcolumn2"\\\\]}`.

    If no rule of this type is configured, the primary key fields in the mapped source table are used for the destination table by default.

    *   If the destination table is an existing table, Data Integration does not modify the schema of the destination table. If the specified primary key fields do not exist in the destination table, an error is reported when the synchronization task starts to run.
    *   If the destination table is automatically created by the system, Data Integration automatically creates the schema of the destination table. The schema contains the primary key fields that you specify. If the specified primary key fields do not exist in the destination table, an error is reported when the synchronization task starts to run.

*   Example of a rule used to process DML messages: `{"dmlPolicies":[{"dmlType":"Delete","dmlAction":"Filter","filterCondition":"id > 1"}\\\\]}`.

    If no rule of this type is configured, the default processing policy for messages generated for insert, update, and delete operations is Normal.

    *   dmlType: the DML operation. Valid values: Insert, Update, and Delete.
    *   dmlAction: the processing policy for DML messages. Valid values: Normal, Ignore, Filter, and LogicalDelete. Filter indicates conditional processing. The value Filter is returned for the dmlAction parameter only when the value of the dmlType parameter is Update or Delete.
    *   filterCondition: the condition used to filter DML messages. This parameter is returned only when the value of the dmlAction parameter is Filter.', example='{"expression":"${srcDatasoureName}_${srcDatabaseName}"}'),
        ruleName?: string(name='RuleName', description='The name of the rule. If the values of the RuleActionType parameter and the RuleTargetType parameter are the same for multiple transformation rules, you must make sure that the transformation rule names are unique.', example='rename_rule_1'),
        ruleTargetType?: string(name='RuleTargetType', description='The type of the object on which the action is performed. Valid values:

*   Table
*   Schema', example='Table'),
      }
    ](name='TransformationRules', description='The list of transformation rules that are applied to the synchronization objects selected from the source. Each entry in the list defines a transformation rule.'),
    updatedTime?: long(name='UpdatedTime', description='The timestamp when the synchronization task was last modified. The timestamp is accurate to the second.', example='1673859985'),
    updatedUid?: string(name='UpdatedUid', description='The ID of the user who last modifies the synchronization task.', example='100000001'),
  }(name='Data', description='The information about the synchronization task.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
}

model GetDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDIJobResponseBody(name='body'),
}

/**
 * @summary Queries the information about a new-version synchronization task created in Data Integration. The following types of synchronization tasks are supported: real-time synchronization of all data in a MySQL database to Hologres.
 *
 * @param request GetDIJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDIJobResponse
 */
async function getDIJobWithOptions(request: GetDIJobRequest, runtime: Util.RuntimeOptions): GetDIJobResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.DIJobId)) {
    body['DIJobId'] = request.DIJobId;
  }
  if (!Util.isUnset(request.withDetails)) {
    body['WithDetails'] = request.withDetails;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDIJob',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about a new-version synchronization task created in Data Integration. The following types of synchronization tasks are supported: real-time synchronization of all data in a MySQL database to Hologres.
 *
 * @param request GetDIJobRequest
 * @return GetDIJobResponse
 */
async function getDIJob(request: GetDIJobRequest): GetDIJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDIJobWithOptions(request, runtime);
}

model GetDISyncInstanceInfoRequest {
  fileId?: long(name='FileId', description='*   If you set the TaskType parameter to DI_REALTIME, set the FileId parameter to the ID of the real-time synchronization task that you want to query.
*   If you set the TaskType parameter to DI_SOLUTION, set the FileId parameter to the ID of the data synchronization solution that you want to query.

You can call the [ListFiles](https://help.aliyun.com/document_detail/173942.html) operation to query the ID of the real-time synchronization task or data synchronization solution.

This parameter is required.', example='100'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
  taskType?: string(name='TaskType', description='The type of the object that you want to query. Valid values:

*   DI_REALTIME: real-time synchronization task
*   DI_SOLUTION: data synchronization solution

This parameter is required.', example='DI_REALTIME'),
}

model GetDISyncInstanceInfoResponseBody = {
  data?: {
    message?: string(name='Message', description='The cause of the failure to obtain the status of the real-time synchronization task or data synchronization solution. If the status of the real-time synchronization task or data synchronization solution is obtained, the value null is returned.', example='fileId[100] is invalid'),
    name?: string(name='Name', description='*   If the TaskType parameter is set to DI_REALTIME, the Name parameter indicates the name of the real-time synchronization task.
*   If the TaskType parameter is set to DI_SOLUTION, the value null is returned.', example='streamx_name'),
    solutionInfo?: {
      creatorName?: string(name='CreatorName', description='The creator of the data synchronization solution.', example='dataworks_3h1'),
      id?: long(name='Id', description='The ID of the data synchronization solution.', example='100'),
      status?: string(name='Status', description='The status of the data synchronization solution.', example='run'),
      stepDetail?: [ 
        {
          info?: string(name='Info', description='The information of the data synchronization solution.', example='{\\\\"fusionProps\\\\":{\\\\"dataSource\\\\":[{\\\\"fileName\\\\":\\\\"holo_20221020161613\\\\",\\\\"status\\\\":\\\\"SUCCESS\\\\"}]},\\\\"customProps\\\\":{\\\\"showSN\\\\":true,\\\\"columns\\\\":[{\\\\"dataIndex\\\\":\\\\"fileName\\\\",\\\\"width\\\\":0.8,\\\\"title\\\\":\\\\"Real-time synchronization name\\\\"},{\\\\"dataIndex\\\\":\\\\"status\\\\",\\\\"width\\\\":0.2,\\\\"title\\\\":\\\\"Status\\\\"}]},\\\\"componentName\\\\":\\\\"Table\\\\"}'),
          status?: string(name='Status', description='The status of the step in the data synchronization solution.', example='success'),
          stepId?: long(name='StepId', description='The ID of the step in the data synchronization solution.', example='1'),
          stepName?: string(name='StepName', description='The name of the step in the data synchronization solution.', example='Create a base table'),
        }
      ](name='StepDetail', description='The step details of the data synchronization solution.'),
    }(name='SolutionInfo', description='*   If the TaskType parameter is set to DI_REALTIME, the value null is returned.
*   If the TaskType parameter is set to DI_SOLUTION, the SolutionInfo parameter indicates the details of the data synchronization solution.'),
    status?: string(name='Status', description='*   If the TaskType parameter is set to DI_REALTIME, the Status parameter indicates the status of the real-time synchronization task. Valid values: PAUSE, NORUN, RUN, KILLING, and WAIT.
*   If the TaskType parameter is set to DI_SOLUTION, the Status parameter indicates the status of the data synchronization solution. Valid values: success and fail.', example='RUN'),
  }(name='Data', description='The status of the real-time synchronization task or data synchronization solution.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model GetDISyncInstanceInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDISyncInstanceInfoResponseBody(name='body'),
}

/**
 * @summary Queries the status of a real-time synchronization task or a data synchronization solution.
 *
 * @param request GetDISyncInstanceInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDISyncInstanceInfoResponse
 */
async function getDISyncInstanceInfoWithOptions(request: GetDISyncInstanceInfoRequest, runtime: Util.RuntimeOptions): GetDISyncInstanceInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDISyncInstanceInfo',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the status of a real-time synchronization task or a data synchronization solution.
 *
 * @param request GetDISyncInstanceInfoRequest
 * @return GetDISyncInstanceInfoResponse
 */
async function getDISyncInstanceInfo(request: GetDISyncInstanceInfoRequest): GetDISyncInstanceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDISyncInstanceInfoWithOptions(request, runtime);
}

model GetDISyncTaskRequest {
  fileId?: long(name='FileId', description='*   If you set TaskType to DI_REALTIME, set this parameter to the ID of the real-time synchronization task that you want to deploy.
*   If you set TaskType to DI_SOLUTION, set this parameter to the ID of the data synchronization solution that you want to deploy.

You can call the [ListFiles](https://help.aliyun.com/document_detail/173942.html) operation to query the ID of the real-time synchronization task or data synchronization solution.

This parameter is required.', example='100'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the workspace ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
  taskType?: string(name='TaskType', description='The type of the object that you want to query. Valid values:

*   DI_REALTIME: real-time synchronization task
*   DI_SOLUTION: data synchronization solution

This parameter is required.', example='DI_REALTIME'),
}

model GetDISyncTaskResponseBody = {
  data?: {
    alarmList?: [ 
      {
        alarmRuleList?: [ 
          {
            aggregator?: string(name='Aggregator', description='The calculation method of indicators,
- avg interval average
- max interval takes the maximum value', example='avg'),
            comparator?: string(name='Comparator', description='Comparison method of comparison symbols, indicators and alarm rules
- \\\\"=\\\\"
- \\\\"<\\\\"
- \\\\">\\\\"', example='='),
            duration?: long(name='Duration', description='Duration: How long does this condition last before an alarm is triggered, in minutes.', example='3'),
            level?: string(name='Level', description='- WARNING WARNING: alert
- CRITICAL CRITICAL: alarm', example='WARNING'),
            threshold?: long(name='Threshold', description='Comparison threshold between metrics and alarm rules.', example='1'),
          }
        ](name='AlarmRuleList', description='Alarm Notification configuration array.'),
        description?: string(name='Description', description='Alarm rule description.', example='Description'),
        enabled?: boolean(name='Enabled', description='Whether alarm rules are enabled.', example='true'),
        id?: long(name='Id', description='Alarm rule id.', example='45242'),
        metric?: string(name='Metric', description='Alarm Type:

- taskStatus: task status
- bizDelay: business latency
- taskFailoverCount: monitoring Failover
- ddlUnsupport: DDL is not supported
- ddlReport: DDL notifications
- totalDirtyRecordWriteInLines: dirty data', example='taskStatus'),
        notifyRule?: {
          critical?: [ string ](name='Critical', description='Critical-level alert notification list.'),
          interval?: long(name='Interval', description='Alarm interval, in minutes.', example='5'),
          warning?: [ string ](name='Warning', description='Warning-level alert notification list.'),
        }(name='NotifyRule', description='Alert notification rule array.'),
        ruleName?: string(name='RuleName', description='Alarm rule name.', example='Delay alert rule name 1'),
      }
    ](name='AlarmList', description='Array of alarm rules associated with real-time tasks.'),
    code?: string(name='Code', description='*   If the TaskType parameter is set to DI_REALTIME, the details of the real-time synchronization task are returned.
*   If the TaskType parameter is set to DI_SOLUTION, the value null is returned.', example='{"extend":{"mode":"wizard","resourceGroup":"S_res_group_287114642182658_1560324290517"},"nodeDef":{},"order":{"hops":[{"from":"datahub_8htXSsfiS2vtZCVG","to":"datahub_CRHBAyGfhSaLmv2f"}]},"setting":{"errorLimit":{},"jvmOption":""},"steps":[{"stepType":"datahub","category":"writer","displayName":"DataHub1","parameter":{"batchSize":1000,"datasource":"datahub_cloud_dev_test","topic":"dwd_tfc_opt_speed_rid_amap_rt"},"name":"datahub_CRHBAyGfhSaLmv2f","gui":{"x":262,"y":325}},{"stepType":"datahub","displayName":"DataHub2","parameter":{"datasource":"datahub_uric_test","topic":"dwd_tfc_opt_speed_rid_amap_rt_330000","batchSize":1000},"name":"datahub_8htXSsfiS2vtZCVG","gui":{"x":268,"y":160.5},"category":"writer"}]}'),
    message?: string(name='Message', description='The cause of the failure to obtain the details of the real-time synchronization task or data synchronization solution.

If the details of the real-time synchronization task or data synchronization solution are obtained, the value null is returned.', example='fileId:[100] is invalid.'),
    solutionDetail?: {
      creatorName?: string(name='CreatorName', description='The creator of the data synchronization solution.', example='dataworks_di'),
      id?: long(name='Id', description='The ID of the data synchronization solution.', example='100'),
      name?: string(name='Name', description='The name of the data synchronization solution.', example='holo_20211206161025'),
      processContent?: string(name='ProcessContent', description='The configuration details of the data synchronization solution.', example='{"holoDatasource":"holo","offlineSyncConfig":{"nodeNameRule":"oneclick_holo_di_${db_table_name_src}_to_${db_table_name_dest}","resourceGroup":"group_219193793999490"},"processRuleId":1007,"readerConcurrent":10,"realtimeSyncConfig":{"content":{"order":{"hops":[{"from":"reader","to":"writer"}]},"setting":{"speed":{"readerConcurrent":10}},"steps":[{"stepType":"mysql","name":"reader","category":"reader","parameter":{"connection":[{"datasource":"mm","datasourceType":"mysql","table":[]}]}},{"stepType":"holo","name":"writer","category":"writer","parameter":{"datasource":"holo","writeMode":"replay","datasourceSchema":"public","tableMappingRule":{"datasource":[{"tableRule":[],"srcDatasourceName":"mm"}]}}}]},"extend":{"mode":"migration_holo","resourceGroup":"group_219193793999490"}},"setting":{"autoCreateWorkflow":true,"userDefinedFileNameExpression":"oneclick"},"srcType":"mysql","tableMappingRuleFromRealtimeSyncConfig":{"datasource":[{"srcDatasourceName":"mm","tableRule":[]}]}}'),
      processExtra?: string(name='ProcessExtra', description='The additional parameters of the data synchronization solution.', example='{"processType":"new","tableNum":300}'),
      projectId?: long(name='ProjectId', description='The ID of the project to which the data synchronization solution belongs.', example='10000'),
      sourceType?: string(name='SourceType', description='The type of the source of the data synchronization solution.', example='mysql'),
      startTime?: string(name='StartTime', description='The start time of the data synchronization solution.', example='2021-12-07 14:40:51'),
      status?: string(name='Status', description='The status of the data synchronization solution. Valid values:

*   0: successful
*   1: not running
*   2: running
*   3: failed
*   4: committed
*   5: pending manual confirmation
*   6: manually confirmed
*   7: others
*   8: waiting
*   9: deleted', example='0'),
      submitTime?: string(name='SubmitTime', description='The time when the data synchronization solution was committed.', example='2021-12-07 14:40:51'),
      type?: string(name='Type', description='The type of the data synchronization solution.', example='holo'),
    }(name='SolutionDetail', description='*   If the TaskType parameter is set to DI_REALTIME, the value null is returned.
*   If the TaskType parameter is set to DI_SOLUTION, the details of the data synchronization solution are returned.'),
    status?: string(name='Status', description='Indicates whether the details of the real-time synchronization task or data synchronization solution are obtained. Valid values:

success: The details are obtained. fail: The details fail to be obtained.', example='success'),
  }(name='Data', description='The returned results.'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   True
*   False', example='true'),
}

model GetDISyncTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDISyncTaskResponseBody(name='body'),
}

/**
 * @summary Queries the details of a real-time synchronization task or a data synchronization solution.
 *
 * @param request GetDISyncTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDISyncTaskResponse
 */
async function getDISyncTaskWithOptions(request: GetDISyncTaskRequest, runtime: Util.RuntimeOptions): GetDISyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDISyncTask',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the details of a real-time synchronization task or a data synchronization solution.
 *
 * @param request GetDISyncTaskRequest
 * @return GetDISyncTaskResponse
 */
async function getDISyncTask(request: GetDISyncTaskRequest): GetDISyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDISyncTaskWithOptions(request, runtime);
}

model GetDagRequest {
  dagId?: long(name='DagId', description='The ID of the DAG. You can use one of the following method to obtain the ID:

*   Call the [RunCycleDagNodes](https://help.aliyun.com/document_detail/2780209.html) operation and obtain the value of the **Data** response parameter.
*   Call the [RunSmokeTest](https://help.aliyun.com/document_detail/2780210.html) operation and obtain the value of the **Data** response parameter.
*   Call the [RunManualDagNodes](https://help.aliyun.com/document_detail/2780218.html) operation and obtain the value of the **DagId** response parameter.

This parameter is required.', example='123141452344525'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV.

This parameter is required.', example='PROD'),
}

model GetDagResponseBody = {
  data?: {
    bizdate?: long(name='Bizdate', description='The data timestamp.', example='1605052800000'),
    createTime?: long(name='CreateTime', description='The time when the DAG was created.', example='1605052800000'),
    createUser?: string(name='CreateUser', description='The creator.', example='1736629400048545'),
    dagId?: long(name='DagId', description='The DAG ID.', example='351249682'),
    finishTime?: long(name='FinishTime', description='The time when the DAG finished running.', example='1605052800000'),
    gmtdate?: long(name='Gmtdate', description='The time when the DAG was scheduled to run.', example='1605052800000'),
    modifyTime?: long(name='ModifyTime', description='The time when the DAG was last modified.', example='1605052800000'),
    name?: string(name='Name', description='The name of the DAG.', example='test_dag'),
    opSeq?: long(name='OpSeq', description='The sequence number of the operation.', example='123'),
    projectId?: long(name='ProjectId', description='The workspace ID.', example='112345'),
    startTime?: long(name='StartTime', description='The time when the DAG started to run.', example='1605052800000'),
    status?: string(name='Status', description='The status of the DAG. Valid values: CREATED, RUNNING, FAILURE, and SUCCESS.', example='FAILURE'),
    type?: string(name='Type', description='The type of the DAG. Valid values: MANUAL, SMOKE_TEST, SUPPLY_DATA, and BUSINESS_PROCESS_DAG. The value MANUAL indicates the DAG for a manually triggered workflow. The value SMOKE_TEST indicates the DAG for a smoke testing workflow. The value SUPPLY_DATA indicates the DAG for a data backfill instance. The value BUSINESS_PROCESS_DAG indicates the DAG for a one-time workflow.', example='MANUAL_FLOW'),
  }(name='Data', description='The details of the DAG.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='7782a299-b291-4fee-8424-cf8058efa8e8'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetDagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDagResponseBody(name='body'),
}

/**
 * @summary Queries the information about a directed acyclic graph (DAG). You can call the GetDag operation to query the information about the DAG for a manually triggered workflow, a manually triggered node, or a data backfill instance. However, you cannot query the information about the DAG for an auto triggered node or an auto triggered workflow.
 *
 * @description Supported DAG types:
 * *   MANUAL: DAG for a manually triggered workflow
 * *   SMOKE_TEST: DAG for a smoke testing workflow
 * *   SUPPLY_DATA: DAG for a data backfill instance
 * *   BUSINESS_PROCESS_DAG: DAG for a one-time workflow
 * Supported DAG states:
 * *   CREATED
 * *   RUNNING
 * *   FAILURE
 * *   SUCCESS
 *
 * @param request GetDagRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDagResponse
 */
async function getDagWithOptions(request: GetDagRequest, runtime: Util.RuntimeOptions): GetDagResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.dagId)) {
    body['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDag',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about a directed acyclic graph (DAG). You can call the GetDag operation to query the information about the DAG for a manually triggered workflow, a manually triggered node, or a data backfill instance. However, you cannot query the information about the DAG for an auto triggered node or an auto triggered workflow.
 *
 * @description Supported DAG types:
 * *   MANUAL: DAG for a manually triggered workflow
 * *   SMOKE_TEST: DAG for a smoke testing workflow
 * *   SUPPLY_DATA: DAG for a data backfill instance
 * *   BUSINESS_PROCESS_DAG: DAG for a one-time workflow
 * Supported DAG states:
 * *   CREATED
 * *   RUNNING
 * *   FAILURE
 * *   SUCCESS
 *
 * @param request GetDagRequest
 * @return GetDagResponse
 */
async function getDag(request: GetDagRequest): GetDagResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDagWithOptions(request, runtime);
}

model GetDataServiceApiRequest {
  apiId?: long(name='ApiId', description='The ID of the DataService Studio API.

This parameter is required.', example='10000'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.

This parameter is required.', example='10001'),
  tenantId?: long(name='TenantId', description='The tenant ID.', example='10002'),
}

model GetDataServiceApiResponseBody = {
  data?: {
    apiId?: long(name='ApiId', description='The ID of the DataService Studio API.', example='10000'),
    apiMode?: int32(name='ApiMode', description='The type of the API. Valid values: 0, 1, and 2. The value 0 indicates that the API is generated in wizard mode. The value 1 indicates that the API is generated in script mode. The value 2 indicates that the API is generated by registration.', example='0'),
    apiName?: string(name='ApiName', description='The name of the API.', example='Name of the test API'),
    apiPath?: string(name='ApiPath', description='The path of the API.', example='/test/1'),
    createdTime?: string(name='CreatedTime', description='The creation time.', example='2020-06-23T00:21:01+0800'),
    creatorId?: string(name='CreatorId', description='The ID of the Alibaba Cloud account used by the creator of the API.', example='1234567'),
    description?: string(name='Description', description='The description.', example='Description of the test API'),
    folderId?: long(name='FolderId', description='The ID of the folder.', example='0'),
    groupId?: string(name='GroupId', description='The ID of the group.', example='ab123****'),
    modifiedTime?: string(name='ModifiedTime', description='The time when the API was last modified.', example='2020-06-23T00:21:01+0800'),
    operatorId?: string(name='OperatorId', description='The ID of the Alibaba Cloud account used by the user who last modified the API.', example='2345678'),
    projectId?: long(name='ProjectId', description='The ID of the workspace.', example='10001'),
    protocols?: [ int32 ](name='Protocols', description='The list of fields.'),
    registrationDetails?: {
      failedResultSample?: string(name='FailedResultSample', description='The sample error response of the API.', example='{"success": false}'),
      registrationErrorCodes?: [ 
        {
          errorCode?: string(name='ErrorCode', description='The error code.', example='1001'),
          errorMessage?: string(name='ErrorMessage', description='The error message.', example='fail to call'),
          errorSolution?: string(name='ErrorSolution', description='The solution used to fix the error.', example='retry'),
        }
      ](name='RegistrationErrorCodes', description='The error codes returned for the API generated by registration.'),
      registrationRequestParameters?: [ 
        {
          columnName?: string(name='ColumnName', description='The name of the associated field. This parameter is supported only if the API is generated in wizard mode.', example='column1'),
          defaultValue?: string(name='DefaultValue', description='The default value.', example='default1'),
          exampleValue?: string(name='ExampleValue', description='The sample value.', example='example1'),
          isRequiredParameter?: boolean(name='IsRequiredParameter', description='Indicates whether the parameter is required.', example='true'),
          parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values:

*   0: String
*   1: Int
*   2: Long
*   3: Float
*   4: Double
*   5: Boolean
*   6: StringList
*   7: IntList
*   8: LongList
*   9: FloatList
*   10: DoubleList
*   11: BooleanList', example='0'),
          parameterDescription?: string(name='ParameterDescription', description='The description.', example='description1'),
          parameterName?: string(name='ParameterName', description='The name of the parameter.', example='name1'),
          parameterOperator?: int32(name='ParameterOperator', description='The operator used for the value of the parameter. Valid values:

*   0: Equal
*   1: Like
*   2: Const
*   3: In

APIs generated in wizard mode support the Equal, Like, and In operators. APIs generated in script mode support the Equal operator. APIs generated by registration support the Equal and Const operators.', example='0'),
          parameterPosition?: int32(name='ParameterPosition', description='The position of the parameter. Valid values:

*   0: indicates that the parameter is in the URL path of the request.
*   1: indicates that the parameter is in the Query parameter of the request URL.
*   2: indicates that the parameter is in the request header.
*   3: indicates that the parameter is in the request body.

APIs generated in wizard or script mode support only the Query position. APIs generated by registration whose request method is GET or DELETE support the Query and Head positions. APIs generated by registration whose request method is PUT or POST support the Query, Head, and Body positions.', example='0'),
        }
      ](name='RegistrationRequestParameters', description='The request parameters of the API generated by registration.'),
      serviceContentType?: int32(name='ServiceContentType', description='The format in which the response of the API request is returned. Valid values:

*   0: indicates the JSON format.
*   1: indicates the XML format.

APIs generated in wizard or script mode support the JSON format. APIs generated by registration support the JSON and XML formats.', example='0'),
      serviceHost?: string(name='ServiceHost', description='The address of the backend service.', example='http://example.aliyundoc.com'),
      servicePath?: string(name='ServicePath', description='The path of the backend service.', example='/index'),
      serviceRequestBodyDescription?: string(name='ServiceRequestBodyDescription', description='The description of the request body initiated to call the backend service.', example='{"abc":1}'),
      successfulResultSample?: string(name='SuccessfulResultSample', description='Sample success responses', example='{"success": true}'),
    }(name='RegistrationDetails', description='The details of the API generated by registration. This parameter is returned only if the API is generated by registration.'),
    requestMethod?: int32(name='RequestMethod', description='The request method of the API. Valid values: 0, 1, 2, and 3. The value 0 indicates the GET method. The value 1 indicates the POST method. The value 2 indicates the PUT method. The value 3 indicates the DELETE method. APIs generated in wizard or script mode support the GET and POST methods. APIs generated by registration support the GET, POST, PUT, and DELETE methods.', example='0'),
    responseContentType?: int32(name='ResponseContentType', description='The format in which the response of the API request is returned. Valid values: 0 and 1. The value 0 indicates the JSON format. The value 1 indicates the XML format. APIs generated in wizard or script mode support the JSON format. APIs generated by registration support the JSON and XML formats.', example='0'),
    scriptDetails?: {
      isPagedResponse?: boolean(name='IsPagedResponse', description='Indicates whether the entries were returned by page.', example='true'),
      script?: string(name='Script', description='The SQL script.', example='select a from t'),
      scriptConnection?: {
        connectionId?: long(name='ConnectionId', description='The ID of the data source.', example='123'),
        tableName?: string(name='TableName', description='The name of the table in the data source.', example='t'),
      }(name='ScriptConnection', description='The data source information of the API generated in script mode.'),
      scriptRequestParameters?: [ 
        {
          columnName?: string(name='ColumnName', description='The name of the associated field. This parameter is supported only if the API is generated in wizard mode.', example='column1'),
          defaultValue?: string(name='DefaultValue', description='The default value.', example='default1'),
          exampleValue?: string(name='ExampleValue', description='The sample value.', example='example1'),
          isRequiredParameter?: boolean(name='IsRequiredParameter', description='Indicates whether the parameter is required.', example='true'),
          parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values:

*   0: String
*   1: Int
*   2: Long
*   3: Float
*   4: Double
*   5: Boolean
*   6: StringList
*   7: IntList
*   8: LongList
*   9: FloatList
*   10: DoubleList
*   11: BooleanList', example='0'),
          parameterDescription?: string(name='ParameterDescription', description='The description.', example='description1'),
          parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param1'),
          parameterOperator?: int32(name='ParameterOperator', description='The operator used for the value of the parameter. Valid values: 0, 1, 2, and 3. The value 0 indicates the Equal operator. The value 1 indicates the Like operator. The value 2 indicates the Const operator. The value 3 indicates the In operator. APIs generated in wizard mode support the Equal, Like, and In operators. APIs generated in script mode support the Equal operator. APIs generated by registration support the Equal and Const operators.', example='0'),
          parameterPosition?: int32(name='ParameterPosition', description='The position of the parameter. Valid values: 0, 1, 2, and 3. The value 0 indicates that the parameter is in the URL path of the request. The value 1 indicates that the parameter is in the Query parameter of the request URL. The value 2 indicates that the parameter is in the request header. The value 3 indicates that the parameter is in the request body. APIs generated in wizard or script mode support only the Query position. APIs generated by registration whose request method is GET or DELETE support the Query and Head positions. APIs generated by registration whose request method is PUT or POST support the Query, Head, and Body positions.', example='0'),
        }
      ](name='ScriptRequestParameters', description='The request parameters of the API generated in script mode.'),
      scriptResponseParameters?: [ 
        {
          columnName?: string(name='ColumnName', description='The name of the associated field. This parameter is supported only if the API is generated in wizard mode.', example='column2'),
          exampleValue?: string(name='ExampleValue', description='The sample value.', example='example2'),
          parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values:

*   0: String
*   1: Int
*   2: Long
*   3: Float
*   4: Double
*   5: Boolean
*   6: StringList
*   7: IntList
*   8: LongList
*   9: FloatList
*   10: DoubleList
*   11: BooleanList', example='0'),
          parameterDescription?: string(name='ParameterDescription', description='The description.', example='description2'),
          parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param2'),
        }
      ](name='ScriptResponseParameters', description='The response parameters of the API generated in script mode.'),
    }(name='ScriptDetails', description='The details of the API generated in script mode. This parameter is returned only if the API is generated in script mode.'),
    status?: int32(name='Status', description='The status of the API. Valid values: 0 and 1. The value 0 indicates that the API is not published. The value 1 indicates that the API is published.', example='0'),
    tenantId?: long(name='TenantId', description='The ID of the tenant.', example='10002'),
    timeout?: int32(name='Timeout', description='The timeout period of the API request. Unit: milliseconds.', example='10000'),
    visibleRange?: int32(name='VisibleRange', description='The scope in which the API is visible. Valid values: 0 and 1. The value 0 indicates that the API is visible to the members in a specific workspace. The value 1 indicates that the API is visible only to the API creator.', example='0'),
    wizardDetails?: {
      isPagedResponse?: boolean(name='IsPagedResponse', description='Indicates whether the entries were returned by page.', example='true'),
      wizardConnection?: {
        connectionId?: long(name='ConnectionId', description='The ID of the data source.', example='123'),
        tableName?: string(name='TableName', description='The name of the table in the data source.', example='t'),
      }(name='WizardConnection', description='The data source information of the API generated in wizard mode.'),
      wizardRequestParameters?: [ 
        {
          columnName?: string(name='ColumnName', description='The name of the associated field. This parameter is supported only if the API is generated in wizard mode.', example='column1'),
          defaultValue?: string(name='DefaultValue', description='The default value.', example='default1'),
          exampleValue?: string(name='ExampleValue', description='The sample value.', example='example1'),
          isRequiredParameter?: boolean(name='IsRequiredParameter', description='Indicates whether the parameter is required.', example='true'),
          parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values:

*   0: String
*   1: Int
*   2: Long
*   3: Float
*   4: Double
*   5: Boolean
*   6: StringList
*   7: IntList
*   8: LongList
*   9: FloatList
*   10: DoubleList
*   11: BooleanList', example='0'),
          parameterDescription?: string(name='ParameterDescription', description='The description.', example='description1'),
          parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param1'),
          parameterOperator?: int32(name='ParameterOperator', description='The operator used for the value of the parameter. Valid values: 0, 1, 2, and 3. The value 0 indicates the Equal operator. The value 1 indicates the Like operator. The value 2 indicates the Const operator. The value 3 indicates the In operator. APIs generated in wizard mode support the Equal, Like, and In operators. APIs generated in script mode support the Equal operator. APIs generated by registration support the Equal and Const operators.', example='0'),
          parameterPosition?: int32(name='ParameterPosition', description='The position of the parameter. Valid values: 0, 1, 2, and 3. The value 0 indicates that the parameter is in the URL path of the request. The value 1 indicates that the parameter is in the Query parameter of the request URL. The value 2 indicates that the parameter is in the request header. The value 3 indicates that the parameter is in the request body. APIs generated in wizard or script mode support only the Query position. APIs generated by registration whose request method is GET or DELETE support the Query and Head positions. APIs generated by registration whose request method is PUT or POST support the Query, Head, and Body positions.', example='0'),
        }
      ](name='WizardRequestParameters', description='The request parameters of the API generated in wizard mode.'),
      wizardResponseParameters?: [ 
        {
          columnName?: string(name='ColumnName', description='The name of the associated field. This parameter is supported only if the API is generated in wizard mode.', example='column2'),
          exampleValue?: string(name='ExampleValue', description='The sample value.', example='example2'),
          parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values:

*   0: String
*   1: Int
*   2: Long
*   3: Float
*   4: Double
*   5: Boolean
*   6: StringList
*   7: IntList
*   8: LongList
*   9: FloatList
*   10: DoubleList
*   11: BooleanList', example='0'),
          parameterDescription?: string(name='ParameterDescription', description='The description.', example='description2'),
          parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param2'),
        }
      ](name='WizardResponseParameters', description='The response parameters of the API generated in wizard mode.'),
    }(name='WizardDetails', description='The details of the API generated in wizard mode. This parameter is returned only if the API is generated in wizard mode.'),
  }(name='Data', description='The returned data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetDataServiceApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataServiceApiResponseBody(name='body'),
}

/**
 * @summary Queries the details of a DataService Studio API in the development state.
 *
 * @param request GetDataServiceApiRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDataServiceApiResponse
 */
async function getDataServiceApiWithOptions(request: GetDataServiceApiRequest, runtime: Util.RuntimeOptions): GetDataServiceApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the details of a DataService Studio API in the development state.
 *
 * @param request GetDataServiceApiRequest
 * @return GetDataServiceApiResponse
 */
async function getDataServiceApi(request: GetDataServiceApiRequest): GetDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataServiceApiWithOptions(request, runtime);
}

model GetDataServiceApiTestRequest {
  testId?: long(name='TestId', description='The Id of the test. TestDataServiceApi is executed asynchronously after the API is called and the test Id is returned. You can also use ListDataServiceApiTest to obtain the latest test Id.

This parameter is required.', example='123434'),
}

model GetDataServiceApiTestResponseBody = {
  data?: {
    apiId?: long(name='ApiId', description='Test API Id', example='12343'),
    costTime?: string(name='CostTime', description='Time consuming', example='10'),
    debugInfo?: string(name='DebugInfo', description='Debug information', example='[<span style=\\\\"color: #92D581;\\\\">INFO</span>] [16:15:13.240] resource group is 498774069027041[<span style=\\\\"color: #92D581;\\\\">INFO</span>]'),
    nodesDebugInfo?: string(name='NodesDebugInfo', description='Node Debug information', example='[<span style=\\\\"color: #92D581;\\\\">INFO</span>] [16:15:13.240] resource group is 498774069027041[<span style=\\\\"color: #92D581;\\\\">INFO</span>]'),
    paramMap?: string(name='ParamMap', description='Test API request parameters', example='{"name":"test"}'),
    retCode?: long(name='RetCode', description='The test API returns the code. If it is not completed, the data is empty.', example='0'),
    retResult?: string(name='RetResult', description='Return data', example='{"id":2}'),
    status?: string(name='Status', description='Whether the task has been completed, including: RUNNING,FINISHED', example='FINISHED'),
  }(name='Data', description='Return object'),
  requestId?: string(name='RequestId', description='The request ID.', example='adssdsewe'),
}

model GetDataServiceApiTestResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataServiceApiTestResponseBody(name='body'),
}

/**
 * @summary Queries the test results of an API in DataService Studio.
 *
 * @param request GetDataServiceApiTestRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDataServiceApiTestResponse
 */
async function getDataServiceApiTestWithOptions(request: GetDataServiceApiTestRequest, runtime: Util.RuntimeOptions): GetDataServiceApiTestResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataServiceApiTest',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the test results of an API in DataService Studio.
 *
 * @param request GetDataServiceApiTestRequest
 * @return GetDataServiceApiTestResponse
 */
async function getDataServiceApiTest(request: GetDataServiceApiTestRequest): GetDataServiceApiTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataServiceApiTestWithOptions(request, runtime);
}

model GetDataServiceApplicationRequest {
  applicationId?: long(name='ApplicationId', description='The ID of the application. You can view the information about the application in the API Gateway console.

This parameter is required.', example='10000'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.

This parameter is required.', example='10001'),
  tenantId?: long(name='TenantId', description='The tenant ID. To obtain the tenant ID, perform the following steps: Log on to the [DataWorks console](https://workbench.data.aliyun.com/console). Find your workspace and go to the DataStudio page. On the DataStudio page, click the logon username in the upper-right corner and click User Info in the Menu section.', example='10002'),
}

model GetDataServiceApplicationResponseBody = {
  data?: {
    applicationCode?: string(name='ApplicationCode', description='The AppCode for simple authentication. You can select simple authentication or signature authentication when you call an API operation.', example='CODE123'),
    applicationId?: long(name='ApplicationId', description='The application ID.', example='10000'),
    applicationKey?: string(name='ApplicationKey', description='The AppKey for signature authentication. You can select simple authentication or signature authentication when you call an API operation.', example='KEY123'),
    applicationName?: string(name='ApplicationName', description='The name of the application.', example='Test application'),
    applicationSecret?: string(name='ApplicationSecret', description='The AppSecret for signature authentication. You can select simple authentication or signature authentication when you call an API operation.', example='SECRET123'),
    projectId?: long(name='ProjectId', description='The workspace ID.', example='10001'),
  }(name='Data', description='The details of the application.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='0'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Normal'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetDataServiceApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataServiceApplicationResponseBody(name='body'),
}

/**
 * @summary Queries the details of an application.
 *
 * @param request GetDataServiceApplicationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDataServiceApplicationResponse
 */
async function getDataServiceApplicationWithOptions(request: GetDataServiceApplicationRequest, runtime: Util.RuntimeOptions): GetDataServiceApplicationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.applicationId)) {
    body['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDataServiceApplication',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the details of an application.
 *
 * @param request GetDataServiceApplicationRequest
 * @return GetDataServiceApplicationResponse
 */
async function getDataServiceApplication(request: GetDataServiceApplicationRequest): GetDataServiceApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataServiceApplicationWithOptions(request, runtime);
}

model GetDataServiceFolderRequest {
  folderId?: long(name='FolderId', description='The ID of the folder.

This parameter is required.', example='10001'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.

This parameter is required.', example='10002'),
  tenantId?: long(name='TenantId', description='The tenant ID. This parameter is deprecated. To obtain the tenant ID, perform the following steps: Log on to the [DataWorks console](https://workbench.data.aliyun.com/console). Find your workspace and go to the DataStudio page. On the DataStudio page, click the logon username in the upper-right corner and click User Info in the Menu section.', example='10003'),
}

model GetDataServiceFolderResponseBody = {
  folder?: {
    createdTime?: string(name='CreatedTime', description='The time when the folder was created.', example='2020-09-24T18:37:51+0800'),
    folderId?: long(name='FolderId', description='The folder ID.', example='11'),
    folderName?: string(name='FolderName', description='The name of the folder.', example='test1'),
    groupId?: string(name='GroupId', description='The ID of the business process to which the folder belongs.', example='ds_1234'),
    modifiedTime?: string(name='ModifiedTime', description='The time when the folder was last modified.', example='2020-09-24T18:37:51+0800'),
    parentId?: long(name='ParentId', description='The parent folder ID. The ID of the root folder in a business process is 0, and the ID of a folder created by a user in a business process is greater than 0.', example='0'),
    projectId?: long(name='ProjectId', description='The workspace ID.', example='10001'),
    tenantId?: long(name='TenantId', description='The tenant ID.', example='10002'),
  }(name='Folder', description='The details of the folder.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EF****'),
}

model GetDataServiceFolderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataServiceFolderResponseBody(name='body'),
}

/**
 * @summary Queries a folder.
 *
 * @param request GetDataServiceFolderRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDataServiceFolderResponse
 */
async function getDataServiceFolderWithOptions(request: GetDataServiceFolderRequest, runtime: Util.RuntimeOptions): GetDataServiceFolderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderId)) {
    body['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDataServiceFolder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a folder.
 *
 * @param request GetDataServiceFolderRequest
 * @return GetDataServiceFolderResponse
 */
async function getDataServiceFolder(request: GetDataServiceFolderRequest): GetDataServiceFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataServiceFolderWithOptions(request, runtime);
}

model GetDataServiceGroupRequest {
  groupId?: string(name='GroupId', description='The business process ID.

This parameter is required.', example='ds_123abc'),
  projectId?: long(name='ProjectId', description='The workspace ID.

This parameter is required.', example='10001'),
  tenantId?: long(name='TenantId', description='The tenant ID. This parameter is deprecated.', example='10002'),
}

model GetDataServiceGroupResponseBody = {
  group?: {
    apiGatewayGroupId?: string(name='ApiGatewayGroupId', description='The ID of the API group that is associated with the business process in the API Gateway console.', example='100abc'),
    createdTime?: string(name='CreatedTime', description='The time when the business process was created.', example='2020-09-24T18:37:51+0800'),
    creatorId?: string(name='CreatorId', description='The user identifier (UID) of the creator of the business process. The value of this parameter may be empty for creators of some existing business processes.', example='10001'),
    description?: string(name='Description', description='The description of the business process.', example='Test'),
    groupId?: string(name='GroupId', description='The business process ID.', example='ds_123abc'),
    groupName?: string(name='GroupName', description='The name of the business process.', example='Test'),
    modifiedTime?: string(name='ModifiedTime', description='The time when the business process was last modified.', example='2020-09-24T18:37:51+0800'),
    projectId?: long(name='ProjectId', description='The workspace ID.', example='10002'),
    tenantId?: long(name='TenantId', description='The tenant ID.', example='10003'),
  }(name='Group', description='The details of the business process.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EF****'),
}

model GetDataServiceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataServiceGroupResponseBody(name='body'),
}

/**
 * @summary Queries a business process.
 *
 * @param request GetDataServiceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDataServiceGroupResponse
 */
async function getDataServiceGroupWithOptions(request: GetDataServiceGroupRequest, runtime: Util.RuntimeOptions): GetDataServiceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDataServiceGroup',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a business process.
 *
 * @param request GetDataServiceGroupRequest
 * @return GetDataServiceGroupResponse
 */
async function getDataServiceGroup(request: GetDataServiceGroupRequest): GetDataServiceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataServiceGroupWithOptions(request, runtime);
}

model GetDataServicePublishedApiRequest {
  apiId?: long(name='ApiId', description='The ID of the API.

This parameter is required.', example='10001'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.

This parameter is required.', example='10002'),
  tenantId?: long(name='TenantId', description='The tenant ID. To obtain the tenant ID, perform the following steps: Log on to the [DataWorks console](https://workbench.data.aliyun.com/console). Find your workspace and go to the DataStudio page. On the DataStudio page, click the logon username in the upper-right corner and click User Info in the Menu section.', example='10003'),
}

model GetDataServicePublishedApiResponseBody = {
  data?: {
    apiId?: long(name='ApiId', description='The ID of the DataService Studio API.', example='10000'),
    apiMode?: int32(name='ApiMode', description='The type of the API. Valid values: 0, 1, and 2. The value 0 indicates that the API is generated in wizard mode. The value 1 indicates that the API is generated in script mode. The value 2 indicates that the API is generated by registration.', example='0'),
    apiName?: string(name='ApiName', description='The name of the API.', example='Name of the test API'),
    apiPath?: string(name='ApiPath', description='The path of the API.', example='/test/1'),
    createdTime?: string(name='CreatedTime', description='The creation time.', example='2020-06-23T00:21:01+0800'),
    creatorId?: string(name='CreatorId', description='The ID of the Alibaba Cloud account used by the creator of the API.', example='1234567'),
    description?: string(name='Description', description='The description.', example='Description of the test API'),
    groupId?: string(name='GroupId', description='The ID of the group.', example='ab12**'),
    modifiedTime?: string(name='ModifiedTime', description='The time when the API was last modified.', example='2020-06-23T00:21:01+0800'),
    operatorId?: string(name='OperatorId', description='The ID of the Alibaba Cloud account used by the user who last modified the API.', example='2345678'),
    projectId?: long(name='ProjectId', description='The ID of the workspace.', example='10001'),
    protocols?: [ int32 ](name='Protocols', description='The protocol used by the API. Valid values: 0 and 1. The value 0 indicates HTTP. The value 1 indicates HTTPS. Multiple protocols are presented in a list.'),
    registrationDetails?: {
      failedResultSample?: string(name='FailedResultSample', description='The sample error response of the API.', example='{"success": false}'),
      registrationErrorCodes?: [ 
        {
          errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
          errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
          errorSolution?: string(name='ErrorSolution', description='The solution used to fix the error.', example='retry'),
        }
      ](name='RegistrationErrorCodes', description='The error codes returned for the API generated by registration.'),
      registrationRequestParameters?: [ 
        {
          defaultValue?: string(name='DefaultValue', description='The default value.', example='default1'),
          exampleValue?: string(name='ExampleValue', description='The sample value.', example='example1'),
          isRequiredParameter?: boolean(name='IsRequiredParameter', description='Indicates whether the parameter is required.', example='true'),
          parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values:

*   0: String
*   1: Int
*   2: Long
*   3: Float
*   4: Double
*   5: Boolean
*   6: StringList
*   7: IntList
*   8: LongList
*   9: FloatList
*   10: DoubleList
*   11: BooleanList', example='0'),
          parameterDescription?: string(name='ParameterDescription', description='The description.', example='description1'),
          parameterName?: string(name='ParameterName', description='The name of the parameter.', example='name1'),
          parameterOperator?: int32(name='ParameterOperator', description='The operator used for the value of the parameter. Valid values: 0, 1, 2, and 3. The value 0 indicates the Equal operator. The value 1 indicates the Like operator. The value 2 indicates the Const operator. The value 3 indicates the In operator. APIs generated in wizard mode support the Equal, Like, and In operators. APIs generated in script mode support the Equal operator. APIs generated by registration support the Equal and Const operators.', example='0'),
          parameterPosition?: int32(name='ParameterPosition', description='The position of the parameter. Valid values: 0, 1, 2, and 3. The value 0 indicates that the parameter is in the URL path of the request. The value 1 indicates that the parameter is in the Query parameter of the request URL. The value 2 indicates that the parameter is in the request header. The value 3 indicates that the parameter is in the request body. APIs generated in wizard or script mode support only the Query position. APIs generated by registration whose request method is GET or DELETE support the Query and Head positions. APIs generated by registration whose request method is PUT or POST support the Query, Head, and Body positions.', example='0'),
        }
      ](name='RegistrationRequestParameters', description='The request parameters of the API generated by registration.'),
      serviceContentType?: int32(name='ServiceContentType', description='The format in which the response of the API request is returned. Valid values: 0 and 1. The value 0 indicates the JSON format. The value 1 indicates the XML format. APIs generated in wizard or script mode support the JSON format. APIs generated by registration support the JSON and XML formats.', example='0'),
      serviceHost?: string(name='ServiceHost', description='The URL of the backend service.', example='http://example.aliyundoc.com'),
      servicePath?: string(name='ServicePath', description='The path of the backend service.', example='/index'),
      serviceRequestBodyDescription?: string(name='ServiceRequestBodyDescription', description='The description of the request body initiated to call the backend service.', example='{"abc":1}'),
      successfulResultSample?: string(name='SuccessfulResultSample', description='The sample success response of the API.', example='{"success": true}'),
    }(name='RegistrationDetails', description='The details of the API generated by registration. This parameter is returned only if the API is generated by registration.'),
    requestMethod?: int32(name='RequestMethod', description='The request method of the API. Valid values: 0, 1, 2, and 3. The value 0 indicates the GET method, the value 1 indicates the POST method, the value 2 indicates the PUT method, and the value 3 indicates the DELETE method. APIs generated in wizard or script mode support the GET and POST methods. APIs generated by registration support the GET, POST, PUT, and DELETE methods.', example='0'),
    responseContentType?: int32(name='ResponseContentType', description='The format in which the response of the API request is returned. Valid values: 0 and 1. The value 0 indicates the JSON format. The value 1 indicates the XML format. APIs generated in wizard or script mode support the JSON format. APIs generated by registration support the JSON and XML formats.', example='0'),
    scriptDetails?: {
      failedResultSample?: string(name='FailedResultSample', description='The sample error response of the API.', example='{"success": false}'),
      isPagedResponse?: boolean(name='IsPagedResponse', description='Indicates whether the entries were returned by page.', example='true'),
      script?: string(name='Script', description='The SQL script.', example='select a from t'),
      scriptConnection?: {
        connectionId?: long(name='ConnectionId', description='The ID of the data source.', example='123'),
        tableName?: string(name='TableName', description='The name of the table in the data source.', example='t'),
      }(name='ScriptConnection', description='The data source information of the API generated in script mode.'),
      scriptErrorCodes?: [ 
        {
          errorCode?: string(name='ErrorCode', description='The error code.', example='1001'),
          errorMessage?: string(name='ErrorMessage', description='The error message.', example='fail to call'),
          errorSolution?: string(name='ErrorSolution', description='The solution used to fix the error.', example='retry'),
        }
      ](name='ScriptErrorCodes', description='The error codes returned for the API generated in script mode.'),
      scriptRequestParameters?: [ 
        {
          defaultValue?: string(name='DefaultValue', description='The default value.', example='default1'),
          exampleValue?: string(name='ExampleValue', description='The sample value.', example='example1'),
          isRequiredParameter?: boolean(name='IsRequiredParameter', description='Indicates whether the parameter is required.', example='true'),
          parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values:

*   0: String
*   1: Int
*   2: Long
*   3: Float
*   4: Double
*   5: Boolean
*   6: StringList
*   7: IntList
*   8: LongList
*   9: FloatList
*   10: DoubleList
*   11: BooleanList', example='0'),
          parameterDescription?: string(name='ParameterDescription', description='The description.', example='description1'),
          parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param1'),
          parameterOperator?: int32(name='ParameterOperator', description='The operator used for the value of the parameter. Valid values:

*   0: Equal
*   1: Like
*   2: Const
*   3: In

APIs generated in wizard mode support the Equal, Like, and In operators. APIs generated in script mode support the Equal operator. APIs generated by registration support the Equal and Const operators.', example='0'),
          parameterPosition?: int32(name='ParameterPosition', description='The position of the parameter. Valid values:

*   0: indicates that the parameter is in the URL path of the request.
*   1: indicates that the parameter is in the Query parameter of the request URL.
*   2: indicates that the parameter is in the request header.
*   3: indicates that the parameter is in the request body.

APIs generated in wizard or script mode support only the Query position. APIs generated by registration whose request method is GET or DELETE support the Query and Head positions. APIs generated by registration whose request method is PUT or POST support the Query, Head, and Body positions.', example='0'),
        }
      ](name='ScriptRequestParameters', description='The request parameters of the API generated in script mode.'),
      scriptResponseParameters?: [ 
        {
          exampleValue?: string(name='ExampleValue', description='The sample value.', example='example2'),
          parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values:

*   0: String
*   1: Int
*   2: Long
*   3: Float
*   4: Double
*   5: Boolean
*   6: StringList
*   7: IntList
*   8: LongList
*   9: FloatList
*   10: DoubleList
*   11: BooleanList', example='0'),
          parameterDescription?: string(name='ParameterDescription', description='The description.', example='description2'),
          parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param2'),
        }
      ](name='ScriptResponseParameters', description='The response parameters of the API generated in script mode.'),
      successfulResultSample?: string(name='SuccessfulResultSample', description='The sample success response of the API.', example='{"success": true}'),
    }(name='ScriptDetails', description='The details of the API generated in script mode. This parameter is returned only if the API is generated in script mode.'),
    status?: int32(name='Status', description='The status of the API. Valid values: 0 and 1. The value 0 indicates that the API is not published. The value 1 indicates that the API is published.', example='1'),
    tenantId?: long(name='TenantId', description='The ID of the tenant.', example='10001'),
    timeout?: int32(name='Timeout', description='The timeout period of the API request. Unit: milliseconds.', example='10000'),
    visibleRange?: int32(name='VisibleRange', description='The scope in which the API is visible. Valid values: 0 and 1. The value 0 indicates that the API is visible to the members in a specific workspace. The value 1 indicates that the API is visible only to the API creator.', example='0'),
    wizardDetails?: {
      failedResultSample?: string(name='FailedResultSample', description='The sample error response of the API.', example='{"success": false}'),
      isPagedResponse?: boolean(name='IsPagedResponse', description='Indicates whether the entries were returned by page.', example='true'),
      successfulResultSample?: string(name='SuccessfulResultSample', description='The sample success response of the API.', example='{"success": true}'),
      wizardConnection?: {
        connectionId?: long(name='ConnectionId', description='The ID of the data source.', example='123'),
        tableName?: string(name='TableName', description='The name of the table in the data source.', example='t'),
      }(name='WizardConnection', description='The data source information of the API generated in wizard mode.'),
      wizardErrorCodes?: [ 
        {
          errorCode?: string(name='ErrorCode', description='The error code.', example='1001'),
          errorMessage?: string(name='ErrorMessage', description='The error message.', example='fail to call'),
          errorSolution?: string(name='ErrorSolution', description='The solution used to fix the error.', example='retry'),
        }
      ](name='WizardErrorCodes', description='The error codes returned for the API generated in wizard mode.'),
      wizardRequestParameters?: [ 
        {
          defaultValue?: string(name='DefaultValue', description='The default value.', example='default1'),
          exampleValue?: string(name='ExampleValue', description='The sample value.', example='example1'),
          isRequiredParameter?: boolean(name='IsRequiredParameter', description='Indicates whether the parameter is required.', example='true'),
          parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values:

*   0: String
*   1: Int
*   2: Long
*   3: Float
*   4: Double
*   5: Boolean
*   6: StringList
*   7: IntList
*   8: LongList
*   9: FloatList
*   10: DoubleList
*   11: BooleanList', example='0'),
          parameterDescription?: string(name='ParameterDescription', description='The description.', example='description1'),
          parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param1'),
          parameterOperator?: int32(name='ParameterOperator', description='The operator used for the value of the parameter. Valid values: 0, 1, 2, and 3. The value 0 indicates the Equal operator. The value 1 indicates the Like operator. The value 2 indicates the Const operator. The value 3 indicates the In operator. APIs generated in wizard mode support the Equal, Like, and In operators. APIs generated in script mode support the Equal operator. APIs generated by registration support the Equal and Const operators.', example='0'),
          parameterPosition?: int32(name='ParameterPosition', description='The position of the parameter. Valid values: 0, 1, 2, and 3. The value 0 indicates that the parameter is in the URL path of the request. The value 1 indicates that the parameter is in the Query parameter of the request URL. The value 2 indicates that the parameter is in the request header. The value 3 indicates that the parameter is in the request body. APIs generated in wizard or script mode support only the Query position. APIs generated by registration whose request method is GET or DELETE support the Query and Head positions. APIs generated by registration whose request method is PUT or POST support the Query, Head, and Body positions.', example='0'),
        }
      ](name='WizardRequestParameters', description='The request parameters of the API generated in wizard mode.'),
      wizardResponseParameters?: [ 
        {
          exampleValue?: string(name='ExampleValue', description='The sample value.', example='example2'),
          parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values:

*   0: String
*   1: Int
*   2: Long
*   3: Float
*   4: Double
*   5: Boolean
*   6: StringList
*   7: IntList
*   8: LongList
*   9: FloatList
*   10: DoubleList
*   11: BooleanList', example='0'),
          parameterDescription?: string(name='ParameterDescription', description='The description.', example='description2'),
          parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param2'),
        }
      ](name='WizardResponseParameters', description='The response parameters of the API generated in wizard mode.'),
    }(name='WizardDetails', description='The details of the API generated in wizard mode. This parameter is returned only if the API is generated in wizard mode.'),
  }(name='Data', description='The latest information about the API in the published state.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetDataServicePublishedApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataServicePublishedApiResponseBody(name='body'),
}

/**
 * @summary Queries the information about a DataService Studio API in the published state.
 *
 * @param request GetDataServicePublishedApiRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDataServicePublishedApiResponse
 */
async function getDataServicePublishedApiWithOptions(request: GetDataServicePublishedApiRequest, runtime: Util.RuntimeOptions): GetDataServicePublishedApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDataServicePublishedApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about a DataService Studio API in the published state.
 *
 * @param request GetDataServicePublishedApiRequest
 * @return GetDataServicePublishedApiResponse
 */
async function getDataServicePublishedApi(request: GetDataServicePublishedApiRequest): GetDataServicePublishedApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataServicePublishedApiWithOptions(request, runtime);
}

model GetDataSourceMetaRequest {
  datasourceName?: string(name='DatasourceName', description='The name of the data source.

This parameter is required.', example='mysql_name'),
  envType?: string(name='EnvType', description='The environment in which the data source resides. Valid values:

*   0: development environment
*   1: production environment', example='1'),
  pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the ID.

This parameter is required.', example='10000'),
}

model GetDataSourceMetaResponseBody = {
  data?: {
    message?: string(name='Message', description='The reason why the metadata of the data source fails to be obtained. If the metadata of the data source is obtained, no value is returned for this parameter.', example='read datasource time out'),
    meta?: string(name='Meta', description='The returned metadata of the data source. The returned metadata is in the JSON format.

`{"dbTables":[{"dbName":"testdb","schema":[{"tableInfos":[{"dbName":"testdb","enable":true,"table":"table1","tableName":"table1"}]},{"tableInfos":[{"dbName":"testdb","enable":true,"table":"table2","tableName":"table2"}]}]}]}`

Parameter description:

*   dbName: the name of the database in which the data source resides.
*   schema: the schema of the database.
*   enable: indicates whether the database is available. The valid values are true and false. The value true indicates that the database is available. The value false indicates that the database is unavailable.
*   tableName: the name of the table in the database.
*   tableInfos: the information about the table in the database.', example='{"dbTables":[{"dbName":"testdb","schema":[{"tableInfos":[{"dbName":"testdb","enable":true,"table":"table1","tableName":"table1"}]},{"tableInfos":[{"dbName":"testdb","enable":true,"table":"table2","tableName":"table2"}]}]}]}'),
    status?: string(name='Status', description='Indicates whether the metadata of the data source is obtained. Valid values:

*   success: The metadata of the data source is obtained.
*   fail: The metadata of the data source failed to be obtained. You can troubleshoot issues based on the Message parameter.', example='success'),
  }(name='Data', description='The returned result.'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model GetDataSourceMetaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataSourceMetaResponseBody(name='body'),
}

/**
 * @summary Queries the metadata of a specified data source.
 *
 * @param request GetDataSourceMetaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDataSourceMetaResponse
 */
async function getDataSourceMetaWithOptions(request: GetDataSourceMetaRequest, runtime: Util.RuntimeOptions): GetDataSourceMetaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasourceName)) {
    query['DatasourceName'] = request.datasourceName;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataSourceMeta',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the metadata of a specified data source.
 *
 * @param request GetDataSourceMetaRequest
 * @return GetDataSourceMetaResponse
 */
async function getDataSourceMeta(request: GetDataSourceMetaRequest): GetDataSourceMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataSourceMetaWithOptions(request, runtime);
}

model GetDeploymentRequest {
  deploymentId?: long(name='DeploymentId', description='The ID of the deployment task. A deployment task ID is generated when you call the [SubmitFile](https://help.aliyun.com/document_detail/173944.html) or [DeployFile](https://help.aliyun.com/document_detail/173956.html) operation.

This parameter is required.', example='3000001'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can click the Workspace Manage icon in the upper-right corner of the DataStudio page to go to the Workspace Management page and view the workspace ID.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The GUID of the DataWorks workspace. You can view the GUID in the upper part of the DataStudio page. You can also select another GUID to switch to another workspace.

You must specify either this parameter or the ProjectId parameter to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model GetDeploymentResponseBody = {
  data?: {
    deployedItems?: [ 
      {
        fileId?: long(name='FileId', description='The file ID.', example='507642378'),
        fileVersion?: long(name='FileVersion', description='The version of the file.', example='7'),
        status?: int32(name='Status', description='- UNPUBLISHED(0): not published
- SUCCESS(1): Published
- ERROR(2): Publishing failed
- CLONED(3): successfully CLONED
- DEPLOY_ERROR(4): Publishing failed
- CLONING(5): CLONING
- REJECT(6): release rejected', example='1'),
      }
    ](name='DeployedItems', description='The deployed items.'),
    deployment?: {
      checkingStatus?: int32(name='CheckingStatus', description='The check status of one or more files in the deployment task. If the value of the ToEnvironment parameter is 1, the files can be deployed to the production environment only when the value of the Status parameter is 1 and the CheckingStatus parameter is empty. Valid values:

*   7: The file failed the check.
*   8: The file is being checked.', example='7'),
      createTime?: long(name='CreateTime', description='The time when the deployment task was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1593877765000'),
      creatorId?: string(name='CreatorId', description='The ID of the Alibaba Cloud account used by the user who created the deployment task.', example='20030****'),
      errorMessage?: string(name='ErrorMessage', description='The error message that was returned when the deployment package failed. In this case, the value of the Status parameter is 2.', example='Success'),
      executeTime?: long(name='ExecuteTime', description='The time when the deployment task was run. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1593877765000'),
      fromEnvironment?: int32(name='FromEnvironment', description='The environment in which the deployment task was run. Valid values: 0 and 1. A value of 0 indicates the on-premises environment. A value of 1 indicates the development environment.', example='0'),
      handlerId?: string(name='HandlerId', description='The ID of the Alibaba Cloud account used by the user who ran the deployment task.', example='2003****'),
      name?: string(name='Name', description='The name of the deployment task. The value is the same as the name of the specific deployment task that is displayed on the Release Package page in the Deploy module.', example='ods_user_info_d-2020-07-04_20030****'),
      status?: int32(name='Status', description='The status of the deployment task. Valid values: 0, 1, and 2. A value of 0 indicates that the task is ready. A value of 1 indicates that the task was successful. A value of 2 indicates that the task failed.', example='1'),
      toEnvironment?: int32(name='ToEnvironment', description='The environment to which the file was deployed. Valid values: 1 and 2. A value of 1 indicates the development environment. A value of 2 indicates the production environment.', example='1'),
    }(name='Deployment', description='The details of the deployment package.'),
  }(name='Data', description='The details of the deployment package.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can troubleshoot errors based on the ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetDeploymentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeploymentResponseBody(name='body'),
}

/**
 * @summary Queries the information about a deployment package.
 *
 * @param request GetDeploymentRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDeploymentResponse
 */
async function getDeploymentWithOptions(request: GetDeploymentRequest, runtime: Util.RuntimeOptions): GetDeploymentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deploymentId)) {
    body['DeploymentId'] = request.deploymentId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDeployment',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about a deployment package.
 *
 * @param request GetDeploymentRequest
 * @return GetDeploymentResponse
 */
async function getDeployment(request: GetDeploymentRequest): GetDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeploymentWithOptions(request, runtime);
}

model GetExtensionRequest {
  extensionCode?: string(name='ExtensionCode', description='The unique code of the extension.

This parameter is required.', example='ce4*********086da5'),
}

model GetExtensionResponseBody = {
  extension?: {
    bindEventList?: [ 
      {
        eventCode?: string(name='EventCode', description='The code of the extension point event.', example='commit-file'),
        eventName?: string(name='EventName', description='The name of the extension point event.', example='File submission pre-event'),
      }
    ](name='BindEventList', description='The list of extension points.'),
    detailUrl?: string(name='DetailUrl', description='The URL of the extension details page, on which users can view the details of the process blocked by the extension.', example='https://www.aliyun.com/'),
    eventCategoryList?: [ 
      {
        categoryCode?: string(name='CategoryCode', description='The code of the event type.', example='file-change'),
        categoryName?: string(name='CategoryName', description='The name of the event type.', example='File change event'),
      }
    ](name='EventCategoryList', description='The list of event types.'),
    extensionCode?: string(name='ExtensionCode', description='The unique code of the extension.', example='ce4*********086da5'),
    extensionDesc?: string(name='ExtensionDesc', description='The description of the extension.', example='This is a description'),
    extensionName?: string(name='ExtensionName', description='The name of the extension.', example='Extension name'),
    helpDocUrl?: string(name='HelpDocUrl', description='The URL of the help documentation of the extension.', example='https://www.aliyun.com/'),
    optionSetting?: string(name='OptionSetting', description='The options defined for the extension.', example='Option configuration'),
    parameterSetting?: string(name='ParameterSetting', description='The parameter settings of the extension. For more information, see [Configure extension parameters](https://help.aliyun.com/document_detail/405354.html).', example='extension.project.disabled=projectId1,projectId2,projectId3'),
    projectTesting?: long(name='ProjectTesting', description='The workspace for testing. If the extension is being tested, the extension can be used only in the workspace for testing.', example='13552'),
    status?: int32(name='Status', description='The state of the extension. 0: Testing, 1: Publishing, 3: Disabled, 4: Processing, 5: Approved, 6: Approve Failed', example='0'),
  }(name='Extension', description='The details of the extension.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the request ID to query logs and troubleshoot issues.', example='0000-ABCD-EFG'),
}

model GetExtensionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetExtensionResponseBody(name='body'),
}

/**
 * @summary Queries the details of an extension.
 *
 * @param request GetExtensionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetExtensionResponse
 */
async function getExtensionWithOptions(request: GetExtensionRequest, runtime: Util.RuntimeOptions): GetExtensionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.extensionCode)) {
    query['ExtensionCode'] = request.extensionCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetExtension',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the details of an extension.
 *
 * @param request GetExtensionRequest
 * @return GetExtensionResponse
 */
async function getExtension(request: GetExtensionRequest): GetExtensionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getExtensionWithOptions(request, runtime);
}

model GetFileRequest {
  fileId?: long(name='FileId', description='The ID of the file. You can call the [ListFiles](https://help.aliyun.com/document_detail/173942.html) operation to obtain the ID.', example='100000001'),
  nodeId?: long(name='NodeId', description='The ID of the node that is scheduled. You can call the [ListFiles](https://help.aliyun.com/document_detail/173942.html) operation to obtain the node ID.', example='200000001'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace Management page to obtain the workspace ID.

You must configure this parameter or the ProjectIdentifier parameter to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace Management page to obtain the workspace name.

You must configure this parameter or the ProjectId parameter to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model GetFileResponseBody = {
  data?: {
    file?: {
      advancedSettings?: string(name='AdvancedSettings', description='The advanced configurations of the node.

This parameter is valid for an EMR node. This parameter corresponds to the Advanced Settings tab in the right-side navigation pane on the configuration tab of the node in the [DataWorks console](https://workbench.data.aliyun.com/console).

>  You cannot configure advanced parameters for EMR Shell nodes.

For information about the advanced parameters of each type of EMR node, see [Develop EMR tasks](https://help.aliyun.com/document_detail/473077.html).', example='{"queue":"default","SPARK_CONF":"--conf spark.driver.memory=2g"}'),
      autoParsing?: boolean(name='AutoParsing', description='Indicates whether the automatic parsing feature is enabled for the file. Valid values:

*   true: The automatic parsing feature is enabled for the file.
*   false: The automatic parsing feature is not enabled for the file.

This parameter corresponds to the Analyze Code parameter that is displayed after Same Cycle is selected in the Dependencies section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='true'),
      bizId?: long(name='BizId', description='The ID of the workflow to which the file belongs. This parameter is deprecated and replaced by the BusinessId parameter.', example='1000001'),
      businessId?: long(name='BusinessId', description='The ID of the workflow to which the file belongs.', example='1000001'),
      commitStatus?: int32(name='CommitStatus', description='Indicates whether the latest code in the file is committed. Valid values: 0 and 1. The value 0 indicates that the latest code in the file is not committed. The value 1 indicates that the latest code in the file is committed.', example='0'),
      connectionName?: string(name='ConnectionName', description='The ID of the compute engine instance that is used to run the node that corresponds to the file.', example='odps_first'),
      content?: string(name='Content', description='The code in the file.', example='SHOW TABLES;'),
      createTime?: long(name='CreateTime', description='The time when the file was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1593879116000'),
      createUser?: string(name='CreateUser', description='The ID of the Alibaba Cloud account used to create the file.', example='424732****'),
      currentVersion?: int32(name='CurrentVersion', description='The latest version number of the file.', example='3'),
      deletedStatus?: string(name='DeletedStatus', description='The status of the file. Valid values:

*   NORMAL: The file is not deleted.
*   RECYCLE_BIN: The file is stored in the recycle bin.
*   DELETED: The file is deleted.', example='RECYCLE'),
      fileDescription?: string(name='FileDescription', description='The description of the file.', example='My first DataWorks file'),
      fileFolderId?: string(name='FileFolderId', description='The ID of the folder to which the file belongs.', example='2735c2****'),
      fileId?: long(name='FileId', description='The ID of the file.', example='100000001'),
      fileName?: string(name='FileName', description='The name of the file.', example='ods_user_info_d'),
      fileType?: int32(name='FileType', description='The type of the code for the file. The code for files varies based on the file type. For more information, see [DataWorks nodes](https://help.aliyun.com/document_detail/600169.html).', example='10'),
      isMaxCompute?: boolean(name='IsMaxCompute', description='Indicates whether the file needs to be uploaded to MaxCompute.

This parameter is returned only if the file is a MaxCompute resource file.', example='true'),
      lastEditTime?: long(name='LastEditTime', description='The time when the file was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1593879116000'),
      lastEditUser?: string(name='LastEditUser', description='The ID of the Alibaba Cloud account used to last modify the file.', example='62465892****'),
      nodeId?: long(name='NodeId', description='The ID of the auto triggered node that is generated in the scheduling system after the file is committed.', example='300001'),
      owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the file owner.', example='7775674356****'),
      parentId?: long(name='ParentId', description='The ID of the node group file to which the current file belongs. This parameter is returned only if the current file is an inner file of the node group file.', example='-1'),
      useType?: string(name='UseType', description='The module to which the file belongs. Valid values:

*   NORMAL: The file is used for DataStudio.
*   MANUAL: The file is used for a manually triggered node.
*   MANUAL_BIZ: The file is used for a manually triggered workflow.
*   SKIP: The file is used for a dry-run DataStudio node.
*   ADHOCQUERY: The file is used for an ad hoc query.
*   COMPONENT: The file is used for a snippet.', example='NORMAL'),
    }(name='File', description='The basic information about the file.'),
    nodeConfiguration?: {
      applyScheduleImmediately?: string(name='ApplyScheduleImmediately', description='Indicates whether scheduling configurations immediately take effect after the deployment.', example='true'),
      autoRerunIntervalMillis?: int32(name='AutoRerunIntervalMillis', description='The interval between automatic reruns after an error occurs. Unit: milliseconds.

This parameter corresponds to the Rerun Interval parameter that is displayed after the Auto Rerun upon Error check box is selected in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).

The interval that you specify in the DataWorks console is measured in minutes. Pay attention to the conversion between the units of time when you call the operation.', example='120000'),
      autoRerunTimes?: int32(name='AutoRerunTimes', description='The number of automatic reruns that are allowed after an error occurs.', example='3'),
      cronExpress?: string(name='CronExpress', description='The CRON expression that represents the periodic scheduling policy of the node.', example='00 05 00 * * ?'),
      cycleType?: string(name='CycleType', description='The type of the scheduling cycle. Valid values: NOT_DAY and DAY. The value NOT_DAY indicates that the node is scheduled to run by minute or hour. The value DAY indicates that the node is scheduled to run by day, week, or month.

This parameter corresponds to the Scheduling Cycle parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='DAY'),
      dependentNodeIdList?: string(name='DependentNodeIdList', description='The ID of the node on which the node corresponding to the file depends when the DependentType parameter is set to USER_DEFINE. Multiple IDs are separated by commas (,).

The value of this parameter is equivalent to the ID of the node that you specified after you select Previous Cycle and set Depend On to Other Nodes in the Dependencies section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='5,10,15,20'),
      dependentType?: string(name='DependentType', description='The type of the cross-cycle scheduling dependency of the node. Valid values:

*   SELF: The instance generated for the node in the current cycle depends on the instance generated for the node in the previous cycle.
*   CHILD: The instance generated for the node in the current cycle depends on the instances generated for the descendant nodes at the nearest level of the node in the previous cycle.
*   USER_DEFINE: The instance generated for the node in the current cycle depends on the instances generated for one or more specified nodes in the previous cycle.
*   NONE: No cross-cycle scheduling dependency type is selected for the node.', example='USER_DEFINE'),
      endEffectDate?: long(name='EndEffectDate', description='The end time of automatic scheduling. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.

This parameter corresponds to the Validity Period parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='4155787800000'),
      ignoreParentSkipRunningProperty?: string(name='IgnoreParentSkipRunningProperty', description='Indicates whether to skip the dry-run property of the ancestor nodes of the node that corresponds to the file. This parameter corresponds to the Skip the dry-run property of the ancestor node parameter that is displayed after you configure the Depend On parameter in the Dependencies section of the Properties tab in the DataWorks console.', example='true'),
      inputList?: [ 
        {
          input?: string(name='Input', description='The output name of the parent file on which the current file depends.

This parameter corresponds to the Output Name of Ancestor Node parameter under Parent Nodes after Same Cycle is selected in the Dependencies section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='project.001_out'),
          parseType?: string(name='ParseType', description='The mode of the configuration file dependency. Valid values:

*   MANUAL: Scheduling dependencies are manually configured.
*   AUTO: Scheduling dependencies are automatically parsed.', example='MANUAL'),
        }
      ](name='InputList', description='The output names of the parent files on which the current file depends.'),
      inputParameters?: [ 
        {
          parameterName?: string(name='ParameterName', description='The name of the input parameter of the node. In the code, you can use the ${...} method to reference the input parameter of the node.

This parameter corresponds to the Parameter Name parameter in the Input Parameters table in the Input and Output Parameters section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='input'),
          valueSource?: string(name='ValueSource', description='The value source of the input parameter of the node.

This parameter corresponds to the Value Source parameter in the Input Parameters table in the Input and Output Parameters section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='project_001.parent_node:outputs'),
        }
      ](name='InputParameters', description='Input parameters of the node.

This parameter corresponds to the Input Parameters table in the Input and Output Parameters section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).'),
      outputList?: [ 
        {
          output?: string(name='Output', description='The output name of the current file.

This parameter corresponds to the Output Name parameter under Output after Same Cycle is selected in the Dependencies section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='dw_project.002_out'),
          refTableName?: string(name='RefTableName', description='The output table name of the current file.

This parameter corresponds to the Output Table Name parameter under Output after Same Cycle is selected in the Dependencies section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='ods_user_info_d'),
        }
      ](name='OutputList', description='The output names of the current file.

This parameter corresponds to the Output Name parameter under Output after Same Cycle is selected in the Dependencies section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).'),
      outputParameters?: [ 
        {
          description?: string(name='Description', description='The description of the output parameter of the node.', example='It\\\\"s a context output parameter.'),
          parameterName?: string(name='ParameterName', description='The name of the output parameter of the node.

This parameter corresponds to the Parameter Name parameter in the Output Parameters table in the Input and Output Parameters section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='output'),
          type?: string(name='Type', description='The type of the output parameter of the node. Valid values:

*   1: indicates a constant.
*   2: indicates a variable.
*   3: indicates a pass-through variable.

This parameter corresponds to the Type parameter in the Output Parameters table in the Input and Output Parameters section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='1'),
          value?: string(name='Value', description='The value of the output parameter of the node.

This parameter corresponds to the Value parameter in the Output Parameters table in the Input and Output Parameters section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='${bizdate}'),
        }
      ](name='OutputParameters', description='Output parameters of the node.

This parameter corresponds to the Output Parameters table in the Input and Output Parameters section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).'),
      paraValue?: string(name='ParaValue', description='The scheduling parameters of the node.

This parameter corresponds to the Parameters section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console). For more information about the configurations of the scheduling parameters, see [Configure scheduling parameters](https://help.aliyun.com/document_detail/137548.html).', example='a=x b=y'),
      rerunMode?: string(name='RerunMode', description='Indicates whether the node that corresponds to the file can be rerun. Valid values:

*   ALL_ALLOWED: The node can be rerun regardless of whether it is successfully run or fails to run.
*   FAILURE_ALLOWED: The node can be rerun only after it fails to run.
*   ALL_DENIED: The node cannot be rerun regardless of whether it is successfully run or fails to run.

This parameter corresponds to the Rerun parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='ALL_ALLOWED'),
      resourceGroupId?: long(name='ResourceGroupId', description='The ID of the resource group that is used to run the node. You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/173913.html) operation to query the available resource groups in the workspace.', example='375827434852437'),
      schedulerType?: string(name='SchedulerType', description='The scheduling type of the node. Valid values:

*   NORMAL: The node is an auto triggered node.
*   MANUAL: The node is a manually triggered node. Manually triggered nodes cannot be automatically triggered. They correspond to the nodes in the Manually Triggered Workflows pane.
*   PAUSE: The node is a paused node.
*   SKIP: The node is a dry-run node. Dry-run nodes are started as scheduled but the system sets the status of the nodes to successful when it starts to run them.', example='NORMAL'),
      startEffectDate?: long(name='StartEffectDate', description='The start time of automatic scheduling. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.

This parameter corresponds to the Validity Period parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='936923400000'),
      startImmediately?: boolean(name='StartImmediately', description='Indicates whether a node is immediately run after the node is deployed to the production environment.

This parameter is valid only for an EMR Spark Streaming node or an EMR Streaming SQL node. This parameter corresponds to the Start Method parameter in the Schedule section of the Configure tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='true'),
      stop?: boolean(name='Stop', description='Indicates whether the scheduling for the node is suspended Valid values:

*   true: The scheduling for the node is suspended.
*   false: The scheduling for the node is not suspended.

This parameter corresponds to the Recurrence parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='false'),
      timeout?: int32(name='Timeout', description='The timeout period.', example='1'),
    }(name='NodeConfiguration', description='The scheduling configurations of the file.'),
    resourceDownloadLink?: {
      downloadLink?: string(name='downloadLink', description='The download URL of the resource.', example='http://xx'),
    }(name='ResourceDownloadLink', description='The download URL of the resource.'),
  }(name='Data', description='The details of the file.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request is successful.
*   false: The request fails.', example='true'),
}

model GetFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFileResponseBody(name='body'),
}

/**
 * @summary Queries the information about a file.
 *
 * @param request GetFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFileResponse
 */
async function getFileWithOptions(request: GetFileRequest, runtime: Util.RuntimeOptions): GetFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about a file.
 *
 * @param request GetFileRequest
 * @return GetFileResponse
 */
async function getFile(request: GetFileRequest): GetFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFileWithOptions(request, runtime);
}

model GetFileTypeStatisticRequest {
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV. The value PROD indicates the production environment. The value DEV indicates the development environment.

This parameter is required.', example='PROD'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the ID.

This parameter is required.', example='123465'),
}

model GetFileTypeStatisticResponseBody = {
  programTypeAndCounts?: [ 
    {
      count?: int32(name='Count', description='The number of nodes.', example='1'),
      programType?: string(name='ProgramType', description='The type of the node.

Valid values:

6 (Shell node), 10 (ODPS SQL node), 11 (ODPS MR node), 23 (Data Integration node), 24 (ODPS Script node), 99 (zero load node), 221 (PyODPS 2 node), 225 (ODPS Spark node), 227 (EMR Hive node), 228 (EMR Spark node), 229 (EMR Spark SQL node), 230 (EMR MR node), 239 (OSS object inspection node), 257 (EMR Shell node), 258 (EMR Spark Shell node), 259 (EMR Presto node), 260 (EMR Impala node), 900 (real-time data synchronization node), 1089 (cross-tenant collaboration node), 1091 (Hologres development node), 1093 (Hologres SQL node), 1100 (assignment node), and 1221 (PyODPS 3 node).', example='ODPS_SQL'),
    }
  ](name='ProgramTypeAndCounts', description='An array of node types and quantity.'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='SDFSDFSDF-SDFSDF-SDFDSF-SDFSDF'),
}

model GetFileTypeStatisticResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFileTypeStatisticResponseBody(name='body'),
}

/**
 * @summary Queries the distribution of node types.
 *
 * @param request GetFileTypeStatisticRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFileTypeStatisticResponse
 */
async function getFileTypeStatisticWithOptions(request: GetFileTypeStatisticRequest, runtime: Util.RuntimeOptions): GetFileTypeStatisticResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetFileTypeStatistic',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the distribution of node types.
 *
 * @param request GetFileTypeStatisticRequest
 * @return GetFileTypeStatisticResponse
 */
async function getFileTypeStatistic(request: GetFileTypeStatisticRequest): GetFileTypeStatisticResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFileTypeStatisticWithOptions(request, runtime);
}

model GetFileVersionRequest {
  fileId?: long(name='FileId', description='The ID of the file. You can call the [ListFiles](https://help.aliyun.com/document_detail/173942.html) operation to query the ID.

This parameter is required.', example='1000001'),
  fileVersion?: int32(name='FileVersion', description='The file version whose details you want to query.

This parameter is required.', example='2'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can click the Workspace Manage icon in the upper-right corner of the DataStudio page to go to the Workspace page and view the workspace ID.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The unique identifier of the DataWorks workspace. You can click the identifier in the upper-left corner of the DataStudio page to switch to another workspace.

You must specify either this parameter or ProjectId to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model GetFileVersionResponseBody = {
  data?: {
    changeType?: string(name='ChangeType', description='The change type of the file version. Valid values: CREATE, UPDATE, and DELETE.', example='UPDATE'),
    comment?: string(name='Comment', description='The description of the file version.', example='Second version submission'),
    commitTime?: long(name='CommitTime', description='The time when the version was generated. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1593881265000'),
    commitUser?: string(name='CommitUser', description='The ID of the Alibaba Cloud account that is used to create the file version.', example='7384234****'),
    fileContent?: string(name='FileContent', description='The file code.', example='SHOW TABLES;'),
    fileName?: string(name='FileName', description='The file name.', example='ods_user_info_d'),
    filePropertyContent?: string(name='FilePropertyContent', description='The basic information about the file.', example='{"fileName":"ods_user_info_d","fileType":10}'),
    fileVersion?: int32(name='FileVersion', description='The file version.', example='2'),
    isCurrentProd?: boolean(name='IsCurrentProd', description='Indicates whether the version is the latest version in the production environment.', example='true'),
    nodeContent?: string(name='NodeContent', description='The scheduling configurations of the node that corresponds to the file version.', example='{"cycleType":0,"cronExpress":"00 05 00 * * ?"}'),
    nodeId?: long(name='NodeId', description='The ID of the node that corresponds to the file version.', example='3000001'),
    status?: string(name='Status', description='The status of the file version. Valid values: COMMITTING, COMMITTED, CHECK_OK, PACKAGED, DEPLOYING, DEPLOYED, and CANCELLED. The value CHECK_OK is equivalent to the value COMMITTED.', example='COMMITTED'),
    useType?: string(name='UseType', description='The functional module to which the file belongs. Valid values: NORMAL, MANUAL, MANUAL_BIZ, SKIP, ADHOCQUERY, and COMPONENT. The value NORMAL indicates DataStudio. The value MANUAL indicates a manually triggered node. The value MANUAL_BIZ indicates a manually triggered workflow. The value SKIP indicates a dry-run DataStudio node. The value ADHOCQUERY indicates an ad hoc query. The value COMPONENT indicates snippets.', example='NORMAL'),
  }(name='Data', description='The details of the file version.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can troubleshoot issues based on the ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetFileVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFileVersionResponseBody(name='body'),
}

/**
 * @summary Queries the information about a file version.
 *
 * @param request GetFileVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFileVersionResponse
 */
async function getFileVersionWithOptions(request: GetFileVersionRequest, runtime: Util.RuntimeOptions): GetFileVersionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.fileVersion)) {
    body['FileVersion'] = request.fileVersion;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetFileVersion',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about a file version.
 *
 * @param request GetFileVersionRequest
 * @return GetFileVersionResponse
 */
async function getFileVersion(request: GetFileVersionRequest): GetFileVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFileVersionWithOptions(request, runtime);
}

model GetFolderRequest {
  folderId?: string(name='FolderId', description='The ID of the folder. You must configure either this parameter or the FolderPath parameter. You can call the [ListFolders](https://help.aliyun.com/document_detail/173955.html) operation to query the ID.', example='273****'),
  folderPath?: string(name='FolderPath', description='The path of the folder. You must configure either this parameter or the FolderId parameter. You can call the [ListFolders](https://help.aliyun.com/document_detail/173955.html) operation to query the path.', example='Business_process/my_first_business_process/MaxCompute/ods_layer'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the DataWorks console and go to the Workspace page to query the ID. You must configure either this parameter or the ProjectIdentifier parameter to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Settings panel to obtain the name. You must specify either this parameter or ProjectId to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model GetFolderResponseBody = {
  data?: {
    folderId?: string(name='FolderId', description='The folder ID.', example='2735****'),
    folderPath?: string(name='FolderPath', description='The path of the folder.', example='Business_process/my_first_business_process/MaxCompute/ods_layer'),
  }(name='Data', description='The details of the folder.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetFolderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFolderResponseBody(name='body'),
}

/**
 * @summary Queries the information about a folder.
 *
 * @param request GetFolderRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFolderResponse
 */
async function getFolderWithOptions(request: GetFolderRequest, runtime: Util.RuntimeOptions): GetFolderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderId)) {
    body['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.folderPath)) {
    body['FolderPath'] = request.folderPath;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetFolder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about a folder.
 *
 * @param request GetFolderRequest
 * @return GetFolderResponse
 */
async function getFolder(request: GetFolderRequest): GetFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFolderWithOptions(request, runtime);
}

model GetIDEEventDetailRequest {
  messageId?: string(name='MessageId', description='The message ID in DataWorks OpenEvent. You can obtain the ID from a received message when an extension point event is triggered.

This parameter is required.', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can obtain the ID from the message.

This parameter is required.', example='10000'),
}

model GetIDEEventDetailResponseBody = {
  eventDetail?: {
    committedFile?: {
      changeType?: string(name='ChangeType', description='The type of the change to the file of the current version. Valid values: CREATE, UPDATE, and DELETE.', example='UPDATE'),
      comment?: string(name='Comment', description='The description of the file version.', example='Second version submission'),
      committor?: string(name='Committor', description='The ID of the Alibaba Cloud account that is used to generate the file of the current version.', example='7384234****'),
      content?: string(name='Content', description='The code in the file of the current version.', example='SHOW TABLES;'),
      fileId?: long(name='FileId', description='The file ID.', example='1234123'),
      fileName?: string(name='FileName', description='The name of the file.', example='hello_dataworks.sql'),
      filePropertyContent?: {
        businessId?: long(name='BusinessId', description='The ID of the workflow to which the file belongs.', example='74328'),
        currentVersion?: long(name='CurrentVersion', description='The latest version number of the file.', example='1'),
        dataSourceName?: string(name='DataSourceName', description='The name of the data source with which the file is associated.', example='odps_first'),
        folderId?: string(name='FolderId', description='The ID of the folder to which the file belongs. You can call the [GetFolder](https://help.aliyun.com/document_detail/173952.html) operation to query the details of the file based on the folder ID.', example='aldurie78l2falure'),
        owner?: string(name='Owner', description='The file owner.', example='7384234****'),
        parentFileId?: long(name='ParentFileId', description='The ID of the do-while node or for-each node that corresponds to the file.', example='1234122'),
      }(name='FilePropertyContent', description='The details of the file.'),
      fileType?: long(name='FileType', description='The type of the code for the file. The code of files varies based on the file type. For more information, see [DataWorks nodes](https://help.aliyun.com/document_detail/600169.html).', example='10'),
      nodeConfiguration?: {
        autoRerunIntervalMillis?: long(name='AutoRerunIntervalMillis', description='The interval at which the node corresponding to the file is rerun. Unit: milliseconds.', example='120000'),
        autoRerunTimes?: long(name='AutoRerunTimes', description='The number of times that the node corresponding to the file can be rerun.', example='3'),
        cronExpress?: string(name='CronExpress', description='The CRON expression that is used to schedule the node corresponding to the file.', example='00 05 00 * * ?'),
        cycleType?: string(name='CycleType', description='The type of the scheduling cycle of the node that corresponds to the file. Valid values: NOT_DAY and DAY. The value NOT_DAY indicates that the node is scheduled to run by minute or hour. The value DAY indicates that the node is scheduled to run by day, week, or month.

This parameter corresponds to the Scheduling Cycle parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='DAY'),
        dependentNodeIdList?: string(name='DependentNodeIdList', description='The ID of the node on which the node that corresponds to the file depends when the DependentType parameter is set to USER_DEFINE. Multiple IDs are separated by commas (,).

The value of this parameter is equivalent to the ID of the node that you specified after you select Other Nodes for Cross-Cycle Dependency (Original Previous-Cycle Dependency) in the Dependencies section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='5,10,15,20'),
        dependentType?: string(name='DependentType', description='The type of the cross-cycle scheduling dependency of the node. Valid values:

*   SELF: The instance generated for the node in the current cycle depends on the instance generated for the node in the previous cycle.
*   CHILD: The instance generated for the node in the current cycle depends on the instances generated for the descendant nodes at the nearest level of the node in the previous cycle.
*   USER_DEFINE: The instance generated for the node in the current cycle depends on the instances generated for one or more specified nodes in the previous cycle.
*   NONE: No cross-cycle scheduling dependency type is selected for the node.', example='USER_DEFINE'),
        inputList?: [ 
          {
            input?: string(name='Input', description='The output name of the parent file on which the current file depends.

This parameter corresponds to the Output Name of Ancestor Node parameter under Parent Nodes in the Dependencies section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='dw_project_root'),
            parseType?: string(name='ParseType', description='The mode of the configuration file dependency. Valid values:

*   MANUAL: Scheduling dependencies are manually configured.
*   AUTO: Scheduling dependencies are automatically parsed.', example='MANUAL'),
          }
        ](name='InputList', description='The output names of the parent files on which the current file depends.'),
        outputList?: [ 
          {
            output?: string(name='Output', description='The output name of the current file.

This parameter corresponds to the Output Name parameter under Output Name of Current Node in the Dependencies section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='dw_project.002_out'),
            refTableName?: string(name='RefTableName', description='The output table name of the current file.

This parameter corresponds to the Output Table Name parameter under Output Name of Current Node in the Dependencies section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='ods_user_info_d'),
          }
        ](name='OutputList', description='The output names of the current file.

This parameter corresponds to the Output Name of Current Node parameter in the Dependencies section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).'),
        paraValue?: string(name='ParaValue', description='The scheduling parameters of the node.

This parameter corresponds to the Scheduling Parameter section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console). For more information about the configurations of the scheduling parameters, see [Configure scheduling parameters](https://help.aliyun.com/document_detail/137548.html).', example='a=x b=y'),
        rerunMode?: string(name='RerunMode', description='Indicates whether the node that corresponds to the file can be rerun. Valid values:

*   ALL_ALLOWED: The node can be rerun regardless of whether it is successfully run or fails to run.
*   FAILURE_ALLOWED: The node can be rerun only after it fails to run.
*   ALL_DENIED: The node cannot be rerun regardless of whether it is successfully run or fails to run.

This parameter corresponds to the Rerun parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='ALL_ALLOWED'),
        resourceGroupId?: long(name='ResourceGroupId', description='The ID of the resource group that is used to run the node that corresponds to the file. You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/173913.html) operation to query the available resource groups in the workspace.', example='375827434852437'),
        schedulerType?: string(name='SchedulerType', description='The scheduling type of the node. Valid values:

*   NORMAL: The node is an auto triggered node.
*   MANUAL: The node is a manually triggered node. Manually triggered nodes cannot be automatically triggered. They correspond to the nodes in the Manually Triggered Workflows pane.
*   PAUSE: The node is a paused node.
*   SKIP: The node is a dry-run node. Dry-run nodes are started as scheduled, but the system sets the status of the nodes to successful when it starts to run them.', example='NORMAL'),
      }(name='NodeConfiguration', description='The scheduling properties of the node that corresponds to the file.'),
      nodeId?: long(name='NodeId', description='The ID of the node that is scheduled.', example='421429'),
      useType?: string(name='UseType', description='The module to which the file belongs. Valid values:

*   NORMAL: The file is used for DataStudio.
*   MANUAL: The file is used for a manually triggered node.
*   MANUAL_BIZ: The file is used for a manually triggered workflow.
*   SKIP: The file is used for a dry-run DataStudio node.
*   ADHOCQUERY: The file is used for an ad hoc query.
*   COMPONENT: The file is used for a snippet.', example='NORMAL'),
    }(name='CommittedFile', description='The data snapshot when the file is committed and deployed.

This parameter is valid only if the message type is IDE_FILE_SUBMIT_BEFORE or IDE_FILE_DEPLOY_BEFORE.'),
    deletedFile?: {
      businessId?: long(name='BusinessId', description='The ID of the workflow to which the file belongs.', example='74328'),
      content?: string(name='Content', description='The code in the file of the current version.', example='SHOW TABLES;'),
      currentVersion?: long(name='CurrentVersion', description='The latest version number of the file.', example='1'),
      dataSourceName?: string(name='DataSourceName', description='The name of the data source with which the file is associated.', example='odps_first'),
      fileId?: long(name='FileId', description='The file ID.', example='1234123'),
      fileName?: string(name='FileName', description='The name of the file.', example='hello_dataworks.sql'),
      fileType?: long(name='FileType', description='The type of the code for the file. The code of files varies based on the file type. For more information, see [DataWorks nodes](https://help.aliyun.com/document_detail/600169.html).', example='10'),
      folderId?: string(name='FolderId', description='The ID of the folder to which the file belongs. You can call the [GetFolder](https://help.aliyun.com/document_detail/173952.html) operation to query the details of the file based on the folder ID.', example='aldurie78l2falure'),
      nodeId?: long(name='NodeId', description='The ID of the node that is scheduled.', example='421429'),
      owner?: string(name='Owner', description='The file owner.', example='7384234****'),
      parentFileId?: long(name='ParentFileId', description='The ID of the do-while node or for-each node that corresponds to the file.', example='1234122'),
      useType?: string(name='UseType', description='The module to which the file belongs. Valid values:

*   NORMAL: The file is used for DataStudio.
*   MANUAL: The file is used for a manually triggered node.
*   MANUAL_BIZ: The file is used for a manually triggered workflow.
*   SKIP: The file is used for a dry-run DataStudio node.
*   ADHOCQUERY: The file is used for an ad hoc query.
*   COMPONENT: The file is used for a snippet.', example='NORMAL'),
    }(name='DeletedFile', description='The data snapshot when the file is deleted. This parameter is valid only if the message type is IDE_FILE_DELETE_BEFORE.'),
    fileExecutionCommand?: {
      content?: string(name='Content', description='The code in the file of the current version.', example='SHOW TABLES;'),
      dataSourceName?: string(name='DataSourceName', description='The name of the data source with which the file is associated.', example='odps_first'),
      fileId?: long(name='FileId', description='The file ID.', example='1234123'),
      fileType?: long(name='FileType', description='The type of the code for the file. The code for files varies based on the file type. For more information, see [DataWorks nodes](https://help.aliyun.com/document_detail/600169.html).', example='10'),
    }(name='FileExecutionCommand', description='The data snapshot when the code in the file is run. This parameter is valid only if the message type is IDE_FILE_EXECUTE_BEFORE.'),
    tableModel?: {
      columns?: [ 
        {
          columnName?: string(name='ColumnName', description='The name of the column.', example='ID'),
          columnType?: string(name='ColumnType', description='The data type of the column.', example='BIGINT'),
          comment?: string(name='Comment', description='The remarks of the column.', example='ID'),
          isPartitionColumn?: boolean(name='IsPartitionColumn', description='Indicates whether the column is a partition key column. Valid values:

*   true
*   false', example='false'),
        }
      ](name='Columns', description='The columns in the table.'),
      comment?: string(name='Comment', description='The remarks of the table.', example='A new table'),
      dataSourceName?: string(name='DataSourceName', description='The name of the data source to which the table belongs.', example='odps_first'),
      env?: string(name='Env', description='The environment in which the table is used. Valid values:

*   DEV
*   PROD', example='DEV'),
      lifeCycle?: long(name='LifeCycle', description='The lifecycle of the metatable. Unit: day.', example='7'),
      location?: string(name='Location', description='The path of the table.', example='hdfs://path/to/object'),
      tableName?: string(name='TableName', description='The name of the table.', example='tb_hello'),
    }(name='TableModel', description='The data snapshot when the table is committed and deployed. This parameter is valid only if the message type is IDE_TABLE_SUBMIT_BEFORE or IDE_TABLE_DEPLOY_BEFORE.'),
  }(name='EventDetail', description='The data snapshot that is generated when an extension point event is triggered.

The fields contained in data snapshots vary based on the types of the triggered extension point events. For more information, see the description of the fields.'),
  requestId?: string(name='RequestId', description='The request ID.', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
}

model GetIDEEventDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIDEEventDetailResponseBody(name='body'),
}

/**
 * @summary Queries the data snapshot of an extension point based on the ID of a message in DataWorks OpenEvent when the related extension point event is triggered.
 *
 * @param request GetIDEEventDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetIDEEventDetailResponse
 */
async function getIDEEventDetailWithOptions(request: GetIDEEventDetailRequest, runtime: Util.RuntimeOptions): GetIDEEventDetailResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.messageId)) {
    body['MessageId'] = request.messageId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetIDEEventDetail',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the data snapshot of an extension point based on the ID of a message in DataWorks OpenEvent when the related extension point event is triggered.
 *
 * @param request GetIDEEventDetailRequest
 * @return GetIDEEventDetailResponse
 */
async function getIDEEventDetail(request: GetIDEEventDetailRequest): GetIDEEventDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getIDEEventDetailWithOptions(request, runtime);
}

model GetInstanceRequest {
  instanceId?: long(name='InstanceId', description='The instance ID. You can call the [ListInstances](https://help.aliyun.com/document_detail/173982.html) operation to query the ID.

This parameter is required.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV.

This parameter is required.', example='PROD'),
}

model GetInstanceResponseBody = {
  data?: {
    baselineId?: long(name='BaselineId', description='The baseline ID.', example='123123'),
    beginRunningTime?: long(name='BeginRunningTime', description='The time when the instance started to run.', example='1590416703313'),
    beginWaitResTime?: long(name='BeginWaitResTime', description='The time when the instance started to wait for resources.', example='1590416703313'),
    beginWaitTimeTime?: long(name='BeginWaitTimeTime', description='The time when the instance started to wait to be scheduled.', example='1590416703313'),
    bizdate?: long(name='Bizdate', description='The data timestamp of the instance. In most cases, the value is one day before the time when the instance was run.', example='1590336000000'),
    businessId?: long(name='BusinessId', description='The workflow ID.', example='123'),
    connection?: string(name='Connection', description='The connection string.', example='odps_first'),
    createTime?: long(name='CreateTime', description='The time when the instance was generated.', example='1590416703313'),
    createUser?: string(name='CreateUser', description='The creator of the instance.', example='111'),
    cycTime?: long(name='CycTime', description='The scheduling time of the instance.', example='1590422400000'),
    dagId?: long(name='DagId', description='The workflow ID.', example='338450167'),
    dagType?: string(name='DagType', description='The type of the workflow. Valid values:

*   DAILY: The workflow is used to run auto triggered nodes.
*   MANUAL: The workflow is used to run manually triggered nodes.
*   SMOKE_TEST: The workflow is used to perform smoke testing.
*   SUPPLY_DATA: The workflow is used to backfill data.', example='DAILY'),
    dqcDescription?: string(name='DqcDescription', description='The table and partition filter expression in Data Quality that are associated with the node.', example='[{"projectName":"ztjy_dim","tableName":"dim_user_agent_manage_area_a","partition":"ds\\\\u003d$[yyyy-mm-dd-1]"}]'),
    dqcType?: int32(name='DqcType', description='Indicates whether the instance is associated with a monitoring rule in Data Quality. Valid values:

*   0: The instance is associated with a monitoring rule in Data Quality.
*   1: The instance is not associated with a monitoring rule in Data Quality.', example='1'),
    finishTime?: long(name='FinishTime', description='The time when the running of the instance was complete.', example='1590416703313'),
    instanceId?: long(name='InstanceId', description='The instance ID.', example='11713307578'),
    modifyTime?: long(name='ModifyTime', description='The time when the instance was last modified.', example='1590416703313'),
    nodeId?: long(name='NodeId', description='The node ID.', example='33115'),
    nodeName?: string(name='NodeName', description='The name of the node.', example='kzh'),
    owner?: string(name='Owner', description='The owner of the instance.', example='111'),
    paramValues?: string(name='ParamValues', description='The parameters related to the node.', example='bizdate=$bizdate tbods=$tbods tbdw=$tbdw tbpmic=$tbpmic tbpidx=$tbpidx tbptcif=$tbptcif'),
    periodNumber?: int32(name='PeriodNumber', description='The sequence number of the cycle. This parameter indicates the sequence number of the cycle of the instance on the current day.', example='1'),
    priority?: int32(name='Priority', description='The priority of the instance. Valid values: 1, 3, 5, 7, and 8. A greater value indicates a higher priority. Default value: 1.', example='1'),
    relatedFlowId?: long(name='RelatedFlowId', description='The ID of the workflow to which the node belongs.', example='123123'),
    repeatInterval?: long(name='RepeatInterval', description='The interval at which the node is rerun after the node fails to run. Unit: milliseconds.', example='60000'),
    repeatability?: boolean(name='Repeatability', description='Indicates whether the node that generates the instance can be rerun.', example='true'),
    status?: string(name='Status', description='The status of the node that generates the instance. Valid values:

*   NOT_RUN: The node is not run.
*   WAIT_TIME: The node is waiting for its scheduling time to arrive.
*   WAIT_RESOURCE: The node is waiting for resources.
*   RUNNING: The node is running.
*   CHECKING: Data quality is being checked for the node.
*   CHECKING_CONDITION: Branch conditions are being checked for the node.
*   FAILURE: The node fails to run.
*   SUCCESS: The node is successfully run.', example='NOT_RUN'),
    taskRerunTime?: int32(name='TaskRerunTime', description='The number of times the node can be rerun. The value of this parameter can be empty or an integer that is greater than or equal to 0.

*   If the value of this parameter is empty, the number of times that the node can be rerun is not specified.
*   If the value of this parameter is 0, the node cannot be rerun.
*   If the value of this parameter is a positive integer such as n, the node can still be rerun n times. For example, if the value of this parameter is 1, the node can still be rerun once. If the value of this parameter is 2, the node can still be rerun twice.', example='0'),
    taskType?: string(name='TaskType', description='The scheduling type of the node that generates the instance. Valid values:

*   NORMAL(0): The node is an auto triggered node. The scheduling system regularly runs the node.
*   MANUAL(1): The node is a manually triggered node. The scheduling system does not regularly run the node.
*   PAUSE(2): The node is a frozen node. The scheduling system regularly runs the node but sets the status of the node to failed when the scheduling system starts to run the node.
*   SKIP(3): The node is a dry-run node. The scheduling system regularly runs the node but sets the status of the node to successful when the scheduling system starts to run the node.
*   SKIP_UNCHOOSE(4): The node is an unselected node in a temporary workflow. This type of node exists only in temporary workflows. The scheduling system sets the status of the node to successful when the scheduling system starts to run the node.
*   SKIP_CYCLE(5): The node is a node that is scheduled by the week or month and is waiting for the scheduling time to arrive. The scheduling system regularly runs the node but sets the status of the node to successful when the scheduling system starts to run the node.
*   CONDITION_UNCHOOSE(6): The node is not selected by its ancestor branch node and is run as a dry-run node.
*   REALTIME_DEPRECATED(7): The node has instances that are generated in real time but deprecated. The scheduling system sets the status of the node to successful.', example='NORMAL(0)'),
  }(name='Data', description='The details of the instance.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='0'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned when the instance fails to be scheduled.', example='test'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceResponseBody(name='body'),
}

/**
 * @summary Queries the information about an instance.
 *
 * @param request GetInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetInstanceResponse
 */
async function getInstanceWithOptions(request: GetInstanceRequest, runtime: Util.RuntimeOptions): GetInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about an instance.
 *
 * @param request GetInstanceRequest
 * @return GetInstanceResponse
 */
async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceWithOptions(request, runtime);
}

model GetInstanceConsumeTimeRankRequest {
  bizdate?: string(name='Bizdate', description='The data timestamp, accurate to the day. Specify the time in the ISO 8601 standard in the yyyy-MM-dd\\\\"T\\\\"HH:mm:ssZ format. The time must be in UTC.

This parameter is required.', example='2020-09-21T00:00:00+0800'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.

This parameter is required.', example='100000'),
}

model GetInstanceConsumeTimeRankResponseBody = {
  instanceConsumeTimeRank?: {
    consumeTimeRank?: [ 
      {
        bizdate?: long(name='Bizdate', description='The data timestamp of the instance.', example='1600963200000'),
        consumed?: long(name='Consumed', description='The running duration of the instance. Unit: seconds.', example='1000'),
        instanceId?: long(name='InstanceId', description='The instance ID.', example='95279527'),
        nodeId?: long(name='NodeId', description='The node ID.', example='9527'),
        nodeName?: string(name='NodeName', description='The name of the node.'),
        owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the node owner.', example='952795279527'),
        prgType?: int32(name='PrgType', description='The type of the node.', example='10'),
      }
    ](name='ConsumeTimeRank', description='The ranking data of the running durations of instances.'),
    updateTime?: long(name='UpdateTime', description='The timestamp when the ranking was updated.', example='1600963200000'),
  }(name='InstanceConsumeTimeRank', description='The ranking record of the running durations of instances.'),
  requestId?: string(name='RequestId', description='The request ID.', example='6347364dadsfadf****'),
}

model GetInstanceConsumeTimeRankResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceConsumeTimeRankResponseBody(name='body'),
}

/**
 * @deprecated OpenAPI GetInstanceConsumeTimeRank is deprecated
 *
 * @summary Queries the ranking of the running durations of instances.
 *
 * @param request GetInstanceConsumeTimeRankRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetInstanceConsumeTimeRankResponse
 */
// Deprecated
async function getInstanceConsumeTimeRankWithOptions(request: GetInstanceConsumeTimeRankRequest, runtime: Util.RuntimeOptions): GetInstanceConsumeTimeRankResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceConsumeTimeRank',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @deprecated OpenAPI GetInstanceConsumeTimeRank is deprecated
 *
 * @summary Queries the ranking of the running durations of instances.
 *
 * @param request GetInstanceConsumeTimeRankRequest
 * @return GetInstanceConsumeTimeRankResponse
 */
// Deprecated
async function getInstanceConsumeTimeRank(request: GetInstanceConsumeTimeRankRequest): GetInstanceConsumeTimeRankResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceConsumeTimeRankWithOptions(request, runtime);
}

model GetInstanceCountTrendRequest {
  beginDate?: string(name='BeginDate', description='The beginning of the time range to query, accurate to the day. Specify the time in the ISO 8601 standard in the yyyy-MM-dd\\\\"T\\\\"HH:mm:ssZ format. The time must be in UTC.

This parameter is required.', example='2020-04-02T00:00:00+0800'),
  endDate?: string(name='EndDate', description='The end of the time range to query, accurate to the day. Specify the time in the ISO 8601 standard in the yyyy-MM-dd\\\\"T\\\\"HH:mm:ssZ format. The time must be in UTC.

This parameter is required.', example='2020-09-10T00:00:00+0800'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.

This parameter is required.', example='10000'),
}

model GetInstanceCountTrendResponseBody = {
  instanceCounts?: [ 
    {
      count?: int32(name='Count', description='The number of instances.', example='9527'),
      date?: long(name='Date', description='The data timestamp.', example='1600963200000'),
    }
  ](name='InstanceCounts', description='The quantity trend of instances.'),
  requestId?: string(name='RequestId', description='The request ID.', example='95279527adhfj****'),
}

model GetInstanceCountTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceCountTrendResponseBody(name='body'),
}

/**
 * @deprecated OpenAPI GetInstanceCountTrend is deprecated
 *
 * @summary Queries the quantity trend of auto triggered instances.
 *
 * @param request GetInstanceCountTrendRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetInstanceCountTrendResponse
 */
// Deprecated
async function getInstanceCountTrendWithOptions(request: GetInstanceCountTrendRequest, runtime: Util.RuntimeOptions): GetInstanceCountTrendResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.beginDate)) {
    body['BeginDate'] = request.beginDate;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceCountTrend',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @deprecated OpenAPI GetInstanceCountTrend is deprecated
 *
 * @summary Queries the quantity trend of auto triggered instances.
 *
 * @param request GetInstanceCountTrendRequest
 * @return GetInstanceCountTrendResponse
 */
// Deprecated
async function getInstanceCountTrend(request: GetInstanceCountTrendRequest): GetInstanceCountTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceCountTrendWithOptions(request, runtime);
}

model GetInstanceErrorRankRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.

This parameter is required.', example='9527'),
}

model GetInstanceErrorRankResponseBody = {
  instanceErrorRank?: {
    errorRank?: [ 
      {
        count?: int32(name='Count', description='The number of errors that occurred on the node.', example='5'),
        nodeId?: long(name='NodeId', description='The node ID.', example='9527'),
        nodeName?: string(name='NodeName', description='The name of the node.'),
        owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the node owner.', example='952795279527'),
        prgType?: int32(name='PrgType', description='The type of the node.', example='10'),
        projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='9527'),
      }
    ](name='ErrorRank', description='The ranking data of nodes on which errors occurred within the last month.'),
    updateTime?: long(name='UpdateTime', description='The timestamp at which the rankings were updated.', example='1600963200000'),
  }(name='InstanceErrorRank', description='The ranking data of nodes on which errors occurred.'),
  requestId?: string(name='RequestId', description='The request ID.', example='952795279527****'),
}

model GetInstanceErrorRankResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceErrorRankResponseBody(name='body'),
}

/**
 * @deprecated OpenAPI GetInstanceErrorRank is deprecated
 *
 * @summary Queries the ranking of nodes on which errors occur within the last month.
 *
 * @param request GetInstanceErrorRankRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetInstanceErrorRankResponse
 */
// Deprecated
async function getInstanceErrorRankWithOptions(request: GetInstanceErrorRankRequest, runtime: Util.RuntimeOptions): GetInstanceErrorRankResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceErrorRank',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @deprecated OpenAPI GetInstanceErrorRank is deprecated
 *
 * @summary Queries the ranking of nodes on which errors occur within the last month.
 *
 * @param request GetInstanceErrorRankRequest
 * @return GetInstanceErrorRankResponse
 */
// Deprecated
async function getInstanceErrorRank(request: GetInstanceErrorRankRequest): GetInstanceErrorRankResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceErrorRankWithOptions(request, runtime);
}

model GetInstanceLogRequest {
  instanceHistoryId?: long(name='InstanceHistoryId', description='The historical record number of the instance. You can call the ListInstanceHistory operation to query the ID.', example='1'),
  instanceId?: long(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV.

This parameter is required.', example='PROD'),
}

model GetInstanceLogResponseBody = {
  data?: string(name='Data', description='The content of the logs.', example='log_content'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can locate logs and troubleshoot issues based on the ID.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetInstanceLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceLogResponseBody(name='body'),
}

/**
 * @summary Queries the logs of an instance.
 *
 * @description You may not obtain the instance logs that were generated more than seven days ago.
 *
 * @param request GetInstanceLogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetInstanceLogResponse
 */
async function getInstanceLogWithOptions(request: GetInstanceLogRequest, runtime: Util.RuntimeOptions): GetInstanceLogResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceHistoryId)) {
    body['InstanceHistoryId'] = request.instanceHistoryId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceLog',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the logs of an instance.
 *
 * @description You may not obtain the instance logs that were generated more than seven days ago.
 *
 * @param request GetInstanceLogRequest
 * @return GetInstanceLogResponse
 */
async function getInstanceLog(request: GetInstanceLogRequest): GetInstanceLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceLogWithOptions(request, runtime);
}

model GetInstanceStatusCountRequest {
  bizDate?: string(name='BizDate', description='The data timestamp of instances.

This parameter is required.', example='2020-01-01'),
  projectEnv?: string(name='ProjectEnv', description='The runtime environment. Valid values: PROD and DEV.

This parameter is required.', example='PROD'),
  projectId?: long(name='ProjectId', description='The workspace ID.

This parameter is required.', example='1234'),
}

model GetInstanceStatusCountResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
  statusCount?: {
    failureCount?: int32(name='FailureCount', description='The number of instances that failed.', example='1'),
    notRunCount?: int32(name='NotRunCount', description='The number of instances that are not run.', example='1'),
    runningCount?: int32(name='RunningCount', description='The number of instances that are running.', example='1'),
    successCount?: int32(name='SuccessCount', description='The number of instances that are successfully run.', example='1'),
    totalCount?: int32(name='TotalCount', description='The total number of instances returned.', example='1'),
    waitResCount?: int32(name='WaitResCount', description='The number of instances that are waiting for resources.', example='1'),
    waitTimeCount?: int32(name='WaitTimeCount', description='The number of instances that are waiting for their scheduling time to arrive.', example='1'),
  }(name='StatusCount', description='The statistics of instances.'),
}

model GetInstanceStatusCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceStatusCountResponseBody(name='body'),
}

/**
 * @deprecated OpenAPI GetInstanceStatusCount is deprecated
 *
 * @summary Queries the statistics of instances in different states.
 *
 * @param request GetInstanceStatusCountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetInstanceStatusCountResponse
 */
// Deprecated
async function getInstanceStatusCountWithOptions(request: GetInstanceStatusCountRequest, runtime: Util.RuntimeOptions): GetInstanceStatusCountResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizDate)) {
    body['BizDate'] = request.bizDate;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceStatusCount',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @deprecated OpenAPI GetInstanceStatusCount is deprecated
 *
 * @summary Queries the statistics of instances in different states.
 *
 * @param request GetInstanceStatusCountRequest
 * @return GetInstanceStatusCountResponse
 */
// Deprecated
async function getInstanceStatusCount(request: GetInstanceStatusCountRequest): GetInstanceStatusCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceStatusCountWithOptions(request, runtime);
}

model GetInstanceStatusStatisticRequest {
  bizDate?: string(name='BizDate', description='The date on which the numbers of instances in different states are obtained. Specify the date in the yyyy-MM-dd format.

This parameter is required.', example='2020-01-01'),
  dagType?: string(name='DagType', description='The type of the directed acyclic graph (DAG). Valid values:

*   MANUAL: DAG for a manually triggered workflow
*   SMOKE_TEST: DAG for a smoke testing workflow
*   SUPPLY_DATA: DAG for a data backfill instance
*   BUSINESS_PROCESS_DAG: DAG for a one-time workflow

<!---->

*   DAILY
*   MANUAL
*   SMOKE_TEST
*   SUPPLY_DATA
*   BUSINESS_PROCESS_DAG', example='MANUAL'),
  projectEnv?: string(name='ProjectEnv', description='The runtime environment. Valid values: PROD and DEV.

This parameter is required.', example='PROD'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the DataWorks console and go to the Workspace page to query the ID.

This parameter is required.', example='1234'),
  schedulerPeriod?: string(name='SchedulerPeriod', description='The scheduling cycle. Valid values:

*   MINUTE
*   HOUR
*   DAY
*   WEEK
*   MONTH', example='DAY'),
  schedulerType?: string(name='SchedulerType', description='The scheduling type of the node. Valid values:

*   NORMAL: auto triggered node
*   MANUAL: manually triggered node
*   PAUSE: paused node
*   SKIP: dry-run node', example='NORMAL'),
}

model GetInstanceStatusStatisticResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
  statusCount?: {
    failureCount?: int32(name='FailureCount', description='The number of instances that failed to run.', example='1'),
    notRunCount?: int32(name='NotRunCount', description='The number of instances that are not run.', example='1'),
    runningCount?: int32(name='RunningCount', description='The number of instances that are running.', example='1'),
    successCount?: int32(name='SuccessCount', description='The number of instances that are successfully run.', example='1'),
    totalCount?: int32(name='TotalCount', description='The total number of instances returned.', example='1'),
    waitResCount?: int32(name='WaitResCount', description='The number of instances that are waiting for resources.', example='1'),
    waitTimeCount?: int32(name='WaitTimeCount', description='The number of instances that are waiting to run.', example='1'),
  }(name='StatusCount', description='The numbers of instances in different states.'),
}

model GetInstanceStatusStatisticResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceStatusStatisticResponseBody(name='body'),
}

/**
 * @summary Queries the number of instances that are in each state.
 *
 * @param request GetInstanceStatusStatisticRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetInstanceStatusStatisticResponse
 */
async function getInstanceStatusStatisticWithOptions(request: GetInstanceStatusStatisticRequest, runtime: Util.RuntimeOptions): GetInstanceStatusStatisticResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizDate)) {
    body['BizDate'] = request.bizDate;
  }
  if (!Util.isUnset(request.dagType)) {
    body['DagType'] = request.dagType;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.schedulerPeriod)) {
    body['SchedulerPeriod'] = request.schedulerPeriod;
  }
  if (!Util.isUnset(request.schedulerType)) {
    body['SchedulerType'] = request.schedulerType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceStatusStatistic',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the number of instances that are in each state.
 *
 * @param request GetInstanceStatusStatisticRequest
 * @return GetInstanceStatusStatisticResponse
 */
async function getInstanceStatusStatistic(request: GetInstanceStatusStatisticRequest): GetInstanceStatusStatisticResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceStatusStatisticWithOptions(request, runtime);
}

model GetManualDagInstancesRequest {
  dagId?: string(name='DagId', description='The ID of the directed acyclic graph (DAG) for the manually triggered workflow. You can call the [CreateManualDag](https://help.aliyun.com/document_detail/189728.html) operation to query the ID.

This parameter is required.', example='7000001231241'),
  projectEnv?: string(name='ProjectEnv', description='The environment of Operation Center. Valid values: PROD and DEV.

This parameter is required.', example='RPOD'),
  projectName?: string(name='ProjectName', description='The name of the workspace to which the manually triggered workflow belongs. You can log on to the DataWorks console and go to the Workspace Settings panel to query the name.

This parameter is required.', example='test_workspace'),
}

model GetManualDagInstancesResponseBody = {
  instances?: [ 
    {
      beginRunningTime?: long(name='BeginRunningTime', description='The time when the instance started to run.', example='1605178414676'),
      beginWaitResTime?: long(name='BeginWaitResTime', description='The time when the instance started to wait for resources.', example='1605178414676'),
      beginWaitTimeTime?: long(name='BeginWaitTimeTime', description='The time when the instance started to wait to be scheduled.', example='1605178414676'),
      bizDate?: long(name='BizDate', description='The data timestamp of the instance. In most cases, the value is one day before the time when the instance was run.', example='1605178414676'),
      createTime?: long(name='CreateTime', description='The time when the instance was generated.', example='1605178414676'),
      createUser?: string(name='CreateUser', description='The user who performed the operation.', example='xxx'),
      cycTime?: long(name='CycTime', description='The time when the instance was scheduled to run.', example='1605178414676'),
      dagId?: long(name='DagId', description='The ID of the DAG for the manually triggered workflow.', example='350850491'),
      dagType?: string(name='DagType', description='The type of the manually triggered workflow.', example='5'),
      finishTime?: long(name='FinishTime', description='The time when the instance finished running.', example='1605178414676'),
      instanceId?: long(name='InstanceId', description='The ID of the instance in the manually triggered workflow.', example='11726873619'),
      modifyTime?: long(name='ModifyTime', description='The time when the instance was last modified.', example='1605178414676'),
      nodeId?: long(name='NodeId', description='The ID of the node in the manually triggered workflow.', example='37851'),
      nodeName?: string(name='NodeName', description='The name of the node.', example='test2'),
      paramValues?: string(name='ParamValues', description='The parameters related to the instance.', example='xxx'),
      status?: string(name='Status', description='The status of the instance. Valid values:

*   NOT_RUN: The instance is not run.
*   WAIT_TIME: The instance is waiting for its scheduling time to arrive.
*   WAIT_RESOURCE: The instance is waiting for resources.
*   RUNNING: The instance is running.
*   CHECKING: Data quality is being checked for the instance.
*   CHECKING_CONDITION: Branch conditions are being checked for the instance.
*   FAILURE: The instance fails to be run.
*   SUCCESS: The instance is successfully run.', example='WAIT_TIME'),
      taskType?: string(name='TaskType', description='The scheduling type of the node that generates the instance. Valid values:

*   NORMAL(0): The node is an auto triggered node. The scheduling system regularly runs the node.
*   MANUAL(1): The node is a manually triggered node. The scheduling system does not regularly run the node.
*   PAUSE(2): The node is a paused node. The scheduling system regularly runs the node but sets the status of the node to failed when the scheduling system starts to run the node.
*   SKIP(3): The node is a dry-run node. The scheduling system regularly runs the node but sets the status of the node to successful when the scheduling system starts to run the node.
*   SKIP_UNCHOOSE(4): The node is an unselected node in a temporary workflow. This type of node exists only in temporary workflows. The scheduling system sets the status of the node to successful when the scheduling system starts to run the node.
*   SKIP_CYCLE(5): The node is a node that is scheduled by week or month and is waiting for the scheduling time to arrive. The scheduling system regularly runs the node but sets the status of the node to successful when the scheduling system starts to run the node.
*   CONDITION_UNCHOOSE(6): The node is not selected by its ancestor branch node and is run as a dry-run node.
*   REALTIME_DEPRECATED(7): The node has instances that are generated in real time but deprecated. The scheduling system sets the status of the node to successful.', example='NORMAL(0)'),
    }
  ](name='Instances', description='The instances in the manually triggered workflow.'),
  requestId?: string(name='RequestId', description='The request ID.', example='SDFSDFSDF-SDFSDF-SDFDSF-SDFSDF'),
}

model GetManualDagInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetManualDagInstancesResponseBody(name='body'),
}

/**
 * @deprecated OpenAPI GetManualDagInstances is deprecated
 *
 * @summary Queries the information about instances in a manually triggered workflow.
 *
 * @param request GetManualDagInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetManualDagInstancesResponse
 */
// Deprecated
async function getManualDagInstancesWithOptions(request: GetManualDagInstancesRequest, runtime: Util.RuntimeOptions): GetManualDagInstancesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.dagId)) {
    body['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetManualDagInstances',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @deprecated OpenAPI GetManualDagInstances is deprecated
 *
 * @summary Queries the information about instances in a manually triggered workflow.
 *
 * @param request GetManualDagInstancesRequest
 * @return GetManualDagInstancesResponse
 */
// Deprecated
async function getManualDagInstances(request: GetManualDagInstancesRequest): GetManualDagInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getManualDagInstancesWithOptions(request, runtime);
}

model GetMetaCategoryRequest {
  pageNum?: int32(name='PageNum', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='10'),
  parentCategoryId?: long(name='ParentCategoryId', description='The category tree ID.', example='333'),
}

model GetMetaCategoryResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        categoryId?: long(name='CategoryId', description='The category ID.', example='133'),
        comment?: string(name='Comment', description='The remarks of the category.', example='category 1'),
        createTime?: long(name='CreateTime', description='The time when the category was created.', example='1541576644000'),
        depth?: int32(name='Depth', description='The number of category levels.', example='1'),
        lastOperatorId?: string(name='LastOperatorId', description='The ID of the user that performed the last operation.', example='12345'),
        modifiedTime?: long(name='ModifiedTime', description='The time when the category was last modified.', example='1541576644000'),
        name?: string(name='Name', description='The name of the category.', example='category 1'),
        ownerId?: string(name='OwnerId', description='The category owner ID.', example='123'),
        parentCategoryId?: long(name='ParentCategoryId', description='The parent category ID.', example='12'),
      }
    ](name='DataEntityList', description='The information about the category tree.'),
    pageNum?: int32(name='PageNum', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
    totalCount?: long(name='TotalCount', description='The total number of categories returned.', example='10'),
  }(name='Data', description='The business data.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetMetaCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMetaCategoryResponseBody(name='body'),
}

/**
 * @summary Queries the information about a category tree.
 *
 * @param request GetMetaCategoryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMetaCategoryResponse
 */
async function getMetaCategoryWithOptions(request: GetMetaCategoryRequest, runtime: Util.RuntimeOptions): GetMetaCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentCategoryId)) {
    query['ParentCategoryId'] = request.parentCategoryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaCategory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about a category tree.
 *
 * @param request GetMetaCategoryRequest
 * @return GetMetaCategoryResponse
 */
async function getMetaCategory(request: GetMetaCategoryRequest): GetMetaCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaCategoryWithOptions(request, runtime);
}

model GetMetaCollectionDetailRequest {
  qualifiedName?: string(name='QualifiedName', description='The unique identifier of the collection.

This parameter is required.', example='album.12345'),
}

model GetMetaCollectionDetailResponseBody = {
  collection?: Collection(name='Collection', description='The information about the collection.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='9999'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='album.xxxx does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='0000-ABCD-E****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

true

false', example='true'),
}

model GetMetaCollectionDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMetaCollectionDetailResponseBody(name='body'),
}

/**
 * @summary Queries the information about a collection.
 *
 * @param request GetMetaCollectionDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMetaCollectionDetailResponse
 */
async function getMetaCollectionDetailWithOptions(request: GetMetaCollectionDetailRequest, runtime: Util.RuntimeOptions): GetMetaCollectionDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.qualifiedName)) {
    query['QualifiedName'] = request.qualifiedName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaCollectionDetail',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about a collection.
 *
 * @param request GetMetaCollectionDetailRequest
 * @return GetMetaCollectionDetailResponse
 */
async function getMetaCollectionDetail(request: GetMetaCollectionDetailRequest): GetMetaCollectionDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaCollectionDetailWithOptions(request, runtime);
}

model GetMetaColumnLineageRequest {
  clusterId?: string(name='ClusterId', description='The ID of the E-MapReduce (EMR) cluster. Configure this parameter only when you query data in an EMR compute engine instance.', example='abc'),
  columnGuid?: string(name='ColumnGuid', description='The unique identifier of the field.', example='odps.engine_name.table_name.column_name'),
  columnName?: string(name='ColumnName', description='The name of the field.', example='abc'),
  dataSourceType?: string(name='DataSourceType', description='The type of the data source. Valid values: odps and emr.', example='emr'),
  databaseName?: string(name='DatabaseName', description='The name of the database.', example='abc'),
  direction?: string(name='Direction', description='Specifies whether to query the ancestor or descendant lineage of the field. The value up indicates the ancestor lineage. The value down indicates the descendant lineage.

This parameter is required.', example='up'),
  pageNum?: int32(name='PageNum', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='10'),
  tableName?: string(name='TableName', description='The name of the metatable.', example='abc'),
}

model GetMetaColumnLineageResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        clusterId?: string(name='ClusterId', description='The EMR cluster ID.', example='abc'),
        columnGuid?: string(name='ColumnGuid', description='The unique identifier of the field.', example='odps.engine_name.table_name.1'),
        columnName?: string(name='ColumnName', description='The name of the field.', example='1'),
        databaseName?: string(name='DatabaseName', description='The name of the database.', example='abc'),
        tableName?: string(name='TableName', description='The name of the table.', example='abc'),
      }
    ](name='DataEntityList', description='The returned result.'),
    pageNum?: int32(name='PageNum', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
    totalCount?: long(name='TotalCount', description='The total number of fields.', example='20'),
  }(name='Data', description='The business data.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetMetaColumnLineageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMetaColumnLineageResponseBody(name='body'),
}

/**
 * @summary Queries the lineage of a field in a metatable.
 *
 * @param request GetMetaColumnLineageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMetaColumnLineageResponse
 */
async function getMetaColumnLineageWithOptions(request: GetMetaColumnLineageRequest, runtime: Util.RuntimeOptions): GetMetaColumnLineageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.columnGuid)) {
    query['ColumnGuid'] = request.columnGuid;
  }
  if (!Util.isUnset(request.columnName)) {
    query['ColumnName'] = request.columnName;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaColumnLineage',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the lineage of a field in a metatable.
 *
 * @param request GetMetaColumnLineageRequest
 * @return GetMetaColumnLineageResponse
 */
async function getMetaColumnLineage(request: GetMetaColumnLineageRequest): GetMetaColumnLineageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaColumnLineageWithOptions(request, runtime);
}

model GetMetaDBInfoRequest {
  appGuid?: string(name='AppGuid', description='The compute engine instance ID. Specify the ID in the `Engine type.Engine name` format.', example='odps.some_engine_name'),
  clusterId?: string(name='ClusterId', description='The E-MapReduce (EMR) cluster ID.', example='abc'),
  dataSourceType?: string(name='DataSourceType', description='The type of the data source. Valid values: odps and emr.', example='emr'),
  databaseName?: string(name='DatabaseName', description='The name of the metadatabase of the EMR cluster.', example='abc'),
}

model GetMetaDBInfoResponseBody = {
  data?: {
    appGuid?: string(name='AppGuid', description='The compute engine instance ID. Specify the ID in the `Engine type.Engine name` format.', example='odps.engine_name'),
    clusterBizId?: string(name='ClusterBizId', description='The EMR cluster ID.', example='abc'),
    comment?: string(name='Comment', description='The comment.', example='The ID of the compute engine instance. The ID is in the Engine type.Engine name format.'),
    createTime?: long(name='CreateTime', description='The time when the compute engine instance was created.', example='1541576644000'),
    endpoint?: string(name='Endpoint', description='The endpoint of the service.', example='http://service.odpsstg.aliyun-inc.com/'),
    envType?: int32(name='EnvType', description='The type of the environment. Valid values: 0 and 1. The value 0 indicates the development environment. The value 1 indicates the production environment.', example='1'),
    location?: string(name='Location', description='The storage path of the metadatabase of the EMR cluster.', example='hdfs://'),
    modifyTime?: long(name='ModifyTime', description='The time when the compute engine instance was modified.', example='1541576644000'),
    name?: string(name='Name', description='The name of the database.', example='abc'),
    ownerId?: string(name='OwnerId', description='The ID of the Alibaba Cloud account used by the workspace owner.', example='23'),
    ownerName?: string(name='OwnerName', description='The name of the workspace owner.', example='323'),
    projectId?: long(name='ProjectId', description='The workspace ID.', example='22'),
    projectName?: string(name='ProjectName', description='The name of the workspace.', example='test'),
    projectNameCn?: string(name='ProjectNameCn', description='The display name of the workspace.', example='The storage path of the metadatabase of the EMR cluster.'),
    tenantId?: long(name='TenantId', description='The tenant ID.', example='233'),
    type?: string(name='Type', description='The type of the metadatabase.', example='hive'),
  }(name='Data', description='The basic metadata information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1411515937****'),
}

model GetMetaDBInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMetaDBInfoResponseBody(name='body'),
}

/**
 * @summary Queries the basic metadata information about a compute engine instance.
 *
 * @description The ID of the EMR cluster. This parameter is required only if you set the DataSourceType parameter to emr.
 * You can log on to the [EMR console](https://emr.console.aliyun.com/?spm=a2c4g.11186623.0.0.965cc5c2GeiHet#/cn-hangzhou) to obtain the ID of the EMR cluster.
 *
 * @param request GetMetaDBInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMetaDBInfoResponse
 */
async function getMetaDBInfoWithOptions(request: GetMetaDBInfoRequest, runtime: Util.RuntimeOptions): GetMetaDBInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaDBInfo',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the basic metadata information about a compute engine instance.
 *
 * @description The ID of the EMR cluster. This parameter is required only if you set the DataSourceType parameter to emr.
 * You can log on to the [EMR console](https://emr.console.aliyun.com/?spm=a2c4g.11186623.0.0.965cc5c2GeiHet#/cn-hangzhou) to obtain the ID of the EMR cluster.
 *
 * @param request GetMetaDBInfoRequest
 * @return GetMetaDBInfoResponse
 */
async function getMetaDBInfo(request: GetMetaDBInfoRequest): GetMetaDBInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaDBInfoWithOptions(request, runtime);
}

model GetMetaDBTableListRequest {
  appGuid?: string(name='AppGuid', description='The GUID of the MaxCompute project. Specify the GUID in the `odps.{projectName}` format. You must configure this parameter only if you set the DataSourceType parameter to odps.', example='odps.testProjectName'),
  clusterId?: string(name='ClusterId', description='The E-MapReduce (EMR) cluster ID. You must configure this parameter only if you set the DataSourceType parameter to emr.', example='abc'),
  dataSourceType?: string(name='DataSourceType', description='The type of the data source. Valid values: odps and emr.', example='odps'),
  databaseName?: string(name='DatabaseName', description='The name of the metadatabase.', example='abc'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
}

model GetMetaDBTableListResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
    tableEntityList?: [ 
      {
        databaseName?: string(name='DatabaseName', description='The name of the metadatabase.', example='abc'),
        tableGuid?: string(name='TableGuid', description='The GUID of the metatable.', example='odps.engine_name.tname'),
        tableName?: string(name='TableName', description='The name of the metatable.', example='tname'),
      }
    ](name='TableEntityList', description='The list of metatables in the compute engine instance.'),
    totalCount?: long(name='TotalCount', description='The total number of compute engine instances returned.', example='20'),
  }(name='Data', description='The metatable information in a compute engine instance.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1ec92159376'),
}

model GetMetaDBTableListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMetaDBTableListResponseBody(name='body'),
}

/**
 * @summary Queries metatables in a compute engine instance.
 *
 * @param request GetMetaDBTableListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMetaDBTableListResponse
 */
async function getMetaDBTableListWithOptions(request: GetMetaDBTableListRequest, runtime: Util.RuntimeOptions): GetMetaDBTableListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appGuid)) {
    query['AppGuid'] = request.appGuid;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaDBTableList',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries metatables in a compute engine instance.
 *
 * @param request GetMetaDBTableListRequest
 * @return GetMetaDBTableListResponse
 */
async function getMetaDBTableList(request: GetMetaDBTableListRequest): GetMetaDBTableListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaDBTableListWithOptions(request, runtime);
}

model GetMetaTableBasicInfoRequest {
  clusterId?: string(name='ClusterId', description='The ID of the EMR cluster. This parameter is required only if you set the DataSourceType parameter to emr.

You can log on to the [EMR console](https://emr.console.aliyun.com/?spm=a2c4g.11186623.0.0.965cc5c2GeiHet#/cn-hangzhou) to query the ID.', example='abc'),
  dataSourceType?: string(name='DataSourceType', description='The type of the data source. Valid values: odps and emr.', example='emr'),
  databaseName?: string(name='DatabaseName', description='The name of the metadatabase. This parameter is required only if you set the DataSourceType parameter to emr.

You can call the [ListMetaDB](https://help.aliyun.com/document_detail/2780105.html) operation to query the name.', example='abc'),
  extension?: boolean(name='Extension', description='Specifies whether to include extended fields in query results. The extended fields include ReadCount, FavoriteCount, and ViewCount. This parameter takes effect only if you set the DataSourceType parameter to odps.', example='false'),
  tableGuid?: string(name='TableGuid', description='The GUID of the MaxCompute table. Specify the GUID in the odps.projectName.tableName format.

> This parameter is optional for E-MapReduce (EMR) tables.', example='odps.engine_name.table_name'),
  tableName?: string(name='TableName', description='The name of the metatable in the EMR cluster. This parameter is required only if you set the DataSourceType parameter to emr.

You can call the [GetMetaDBTableList](https://help.aliyun.com/document_detail/2780086.html) operation to query the name.', example='abc'),
}

model GetMetaTableBasicInfoResponseBody = {
  data?: {
    caption?: string(name='Caption', description='The display name of the metatable.', example='test'),
    clusterId?: string(name='ClusterId', description='The ID of the EMR cluster.', example='abc'),
    columnCount?: int32(name='ColumnCount', description='The number of fields.', example='3'),
    comment?: string(name='Comment', description='The comment of the metatable.', example='test table'),
    createTime?: long(name='CreateTime', description='The time when the metatable was created.', example='1589870294000'),
    dataSize?: long(name='DataSize', description='The size of storage space that is occupied by the metatable. Unit: bytes.', example='10'),
    databaseName?: string(name='DatabaseName', description='The name of the metadatabase.', example='abc'),
    envType?: int32(name='EnvType', description='The type of the environment. Valid values:

*   0: development environment
*   1: production environment', example='1'),
    favoriteCount?: long(name='FavoriteCount', description='The number of times the metatable was added to a favorite list. This parameter is returned only if you set the Extension parameter to true and takes effect only if you set the DataSourceType parameter to odps.', example='6'),
    isPartitionTable?: boolean(name='IsPartitionTable', description='Indicates whether the metatable is a partitioned table. Valid values:

*   true
*   false', example='true'),
    isView?: boolean(name='IsView', description='Indicates whether the metatable is a view. Valid values:

*   true
*   false', example='false'),
    isVisible?: int32(name='IsVisible', description='The scope in which the metatable is visible. Valid values:

*   0: The metatable is visible to workspace members.
*   1: The metatable is visible to users within the tenant.
*   2: The metatable is visible to all tenants.
*   3: The metatable is visible only to the metatable owner.', example='1'),
    lastAccessTime?: long(name='LastAccessTime', description='The time when the metatable was last accessed.', example='1589870294000'),
    lastDdlTime?: long(name='LastDdlTime', description='The time when the schema of the metatable was last changed.', example='1589870294000'),
    lastModifyTime?: long(name='LastModifyTime', description='The time when the metatable was last updated.', example='1589870294000'),
    lifeCycle?: int32(name='LifeCycle', description='The lifecycle of the metatable. Unit: days.', example='5'),
    location?: string(name='Location', description='The storage path of the Hive metadatabase.', example='hdfs://'),
    ownerId?: string(name='OwnerId', description='The ID of the metatable owner.', example='123'),
    partitionKeys?: string(name='PartitionKeys', description='The partition key of the Hive metatable.', example='ab'),
    projectId?: long(name='ProjectId', description='The workspace ID.', example='232'),
    projectName?: string(name='ProjectName', description='The name of the workspace.', example='test'),
    readCount?: long(name='ReadCount', description='The number of times the metatable was read. This parameter is returned only if you set the Extension parameter to true and takes effect only if you set the DataSourceType parameter to odps.', example='3'),
    schema?: string(name='Schema', description='The schema information of the metatable. This parameter is returned if the three-layer model of MaxCompute is enabled.', example='default'),
    tableGuid?: string(name='TableGuid', description='The GUID of the metatable.', example='odps.engine_name.table_name'),
    tableName?: string(name='TableName', description='The name of the metatable.', example='table_name'),
    tenantId?: long(name='TenantId', description='The tenant ID.', example='12345'),
    viewCount?: long(name='ViewCount', description='The number of times the metatable was viewed. This parameter is returned only if you set the Extension parameter to true and takes effect only if you set the DataSourceType parameter to odps.', example='2'),
  }(name='Data', description='The business data.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1411515937'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetMetaTableBasicInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMetaTableBasicInfoResponseBody(name='body'),
}

/**
 * @summary Queries the basic information about a metatable.
 *
 * @param request GetMetaTableBasicInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMetaTableBasicInfoResponse
 */
async function getMetaTableBasicInfoWithOptions(request: GetMetaTableBasicInfoRequest, runtime: Util.RuntimeOptions): GetMetaTableBasicInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableBasicInfo',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the basic information about a metatable.
 *
 * @param request GetMetaTableBasicInfoRequest
 * @return GetMetaTableBasicInfoResponse
 */
async function getMetaTableBasicInfo(request: GetMetaTableBasicInfoRequest): GetMetaTableBasicInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableBasicInfoWithOptions(request, runtime);
}

model GetMetaTableChangeLogRequest {
  changeType?: string(name='ChangeType', description='The type of the change. Valid values: CREATE_TABLE, ALTER_TABLE, DROP_TABLE, ADD_PARTITION, and DROP_PARTITION.', example='ALTER_TABLE'),
  endDate?: string(name='EndDate', description='The end of the time range to query. Specify the time in the yyyy-MM-dd HH:mm:ss format.

*   By default, the system uses the current time as the value of this parameter if the time that you specify is invalid.
*   If both the values of the StartDate and EndDate parameters are invalid, the system automatically queries the change logs that are generated within the last 30 days.', example='2020-06-02 00:00:00'),
  objectType?: string(name='ObjectType', description='The entity on which the change is made. Valid values: TABLE and PARTITION.', example='TABLE'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  startDate?: string(name='StartDate', description='The beginning of the time range to query. Specify the time in the yyyy-MM-dd HH:mm:ss format.

*   By default, the system uses the current time as the value of this parameter if the time that you specify is invalid.
*   If both the values of the StartDate and EndDate parameters are invalid, the system automatically queries the change logs that are generated within the last 30 days.', example='2020-06-01 00:00:00'),
  tableGuid?: string(name='TableGuid', description='The GUID of the table. Specify the GUID in the odps.projectName.tableName format. You can call the [GetMetaDBTableList](https://help.aliyun.com/document_detail/2780086.html) operation to query the GUID.

> To query the change logs of a MaxCompute table, you must call the [GetMetaTableChangeLog](https://help.aliyun.com/document_detail/2780094.html) operation.

This parameter is required.', example='odps.engine_name.table_name'),
}

model GetMetaTableChangeLogResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        changeContent?: string(name='ChangeContent', description='The content of the change.', example='"[{\\\\"action\\\\":\\\\"ADD_COLUMN\\\\",\\\\"value\\\\":[{\\\\"originName\\\\":\\\\"\\\\",\\\\"originType\\\\":\\\\"\\\\",\\\\"originComment\\\\":\\\\"\\\\",\\\\"name\\\\":\\\\"id\\\\",\\\\"type\\\\":\\\\"struct<name:string>\\\\",\\\\"comment\\\\":\\\\"\\\\"}]}]",'),
        changeType?: string(name='ChangeType', description='The type of the change.', example='CREATE_TABLE'),
        createTime?: long(name='CreateTime', description='The time when the metatable was created.', example='1590722845000'),
        modifiedTime?: long(name='ModifiedTime', description='The time when the metatable was modified.', example='1590722845000'),
        objectType?: string(name='ObjectType', description='The entity on which the change was made. Valid values: TABLE and PARTITION.', example='TABLE'),
        operator?: string(name='Operator', description='The name of the operator.', example='abc'),
      }
    ](name='DataEntityList', description='The list of instances.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='10'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='1'),
    totalCount?: long(name='TotalCount', description='The total number of metatables.', example='10'),
  }(name='Data', description='The business data.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetMetaTableChangeLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMetaTableChangeLogResponseBody(name='body'),
}

/**
 * @summary Queries the change logs of a metatable.
 *
 * @description > This operation will be replaced soon. We recommend that you do not call this operation.
 *
 * @param request GetMetaTableChangeLogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMetaTableChangeLogResponse
 */
async function getMetaTableChangeLogWithOptions(request: GetMetaTableChangeLogRequest, runtime: Util.RuntimeOptions): GetMetaTableChangeLogResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.changeType)) {
    body['ChangeType'] = request.changeType;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.objectType)) {
    body['ObjectType'] = request.objectType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.tableGuid)) {
    body['TableGuid'] = request.tableGuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableChangeLog',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the change logs of a metatable.
 *
 * @description > This operation will be replaced soon. We recommend that you do not call this operation.
 *
 * @param request GetMetaTableChangeLogRequest
 * @return GetMetaTableChangeLogResponse
 */
async function getMetaTableChangeLog(request: GetMetaTableChangeLogRequest): GetMetaTableChangeLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableChangeLogWithOptions(request, runtime);
}

model GetMetaTableColumnRequest {
  clusterId?: string(name='ClusterId', description='The ID of the E-MapReduce (EMR) cluster. You can log on to the EMR console to obtain the ID.', example='C-010A704DA760****'),
  dataSourceType?: string(name='DataSourceType', description='The type of the data source. Set the value to emr.', example='emr'),
  databaseName?: string(name='DatabaseName', description='The name of the metadatabase of the EMR cluster. You can call the [ListMetaDB](https://help.aliyun.com/document_detail/2780105.html) operation to query the name.', example='abc'),
  pageNum?: int32(name='PageNum', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  tableGuid?: string(name='TableGuid', description='The GUID of the metatable. You can call the [GetMetaDBTableList](https://help.aliyun.com/document_detail/2780086.html) operation to query the GUID.', example='odps.engine_name.table_name'),
  tableName?: string(name='TableName', description='The name of the metatable in the EMR cluster. You can call the [GetMetaDBTableList](https://help.aliyun.com/document_detail/2780086.html) operation to query the name.', example='abc'),
}

model GetMetaTableColumnResponseBody = {
  data?: {
    columnList?: [ 
      {
        caption?: string(name='Caption', description='The description of the field.', example='data column'),
        columnGuid?: string(name='ColumnGuid', description='The GUID of the field.', example='odps.engine_name.table_name.name'),
        columnName?: string(name='ColumnName', description='The name of the field.', example='name'),
        columnType?: string(name='ColumnType', description='The data type of the field.', example='string'),
        comment?: string(name='Comment', description='The remarks of the field.', example='comment'),
        isForeignKey?: boolean(name='IsForeignKey', description='Indicates whether the field is a foreign key. Valid values:

*   true
*   false', example='true'),
        isPartitionColumn?: boolean(name='IsPartitionColumn', description='Indicates whether the field is a partition field. Valid values:

*   true
*   false', example='false'),
        isPrimaryKey?: boolean(name='IsPrimaryKey', description='Indicates whether the field is a primary key. Valid values:

*   true
*   false', example='false'),
        position?: int32(name='Position', description='The sequence number of the field.', example='1'),
        relationCount?: long(name='RelationCount', description='The number of times the field is read.', example='2'),
      }
    ](name='ColumnList', description='The information about fields.'),
    pageNum?: int32(name='PageNum', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
    totalCount?: long(name='TotalCount', description='The total number of fields.', example='100'),
  }(name='Data', description='The business data.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetMetaTableColumnResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMetaTableColumnResponseBody(name='body'),
}

/**
 * @summary Queries the field information of a metatable.
 *
 * @param request GetMetaTableColumnRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMetaTableColumnResponse
 */
async function getMetaTableColumnWithOptions(request: GetMetaTableColumnRequest, runtime: Util.RuntimeOptions): GetMetaTableColumnResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableColumn',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the field information of a metatable.
 *
 * @param request GetMetaTableColumnRequest
 * @return GetMetaTableColumnResponse
 */
async function getMetaTableColumn(request: GetMetaTableColumnRequest): GetMetaTableColumnResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableColumnWithOptions(request, runtime);
}

model GetMetaTableFullInfoRequest {
  clusterId?: string(name='ClusterId', description='The ID of the EMR cluster. This parameter is required only if you set the DataSourceType parameter to emr.

You can log on to the [EMR console](https://emr.console.aliyun.com/?spm=a2c4g.11186623.0.0.965cc5c2GeiHet#/cn-hangzhou) to query the ID.', example='C-010A704DA760****'),
  dataSourceType?: string(name='DataSourceType', description='The type of the data source. Set the value to emr.', example='emr'),
  databaseName?: string(name='DatabaseName', description='The name of the database. This parameter is required only if you set the DataSourceType parameter to emr.

You can call the [ListMetaDB](https://help.aliyun.com/document_detail/185662.html) operation to query the database name.', example='abc'),
  pageNum?: int32(name='PageNum', description='The page number requested for pagination.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of items per page, with a default of 10 and a maximum of 100.', example='10'),
  tableGuid?: string(name='TableGuid', description='The unique identifier of the table. You can call the [GetMetaDBTableList](https://help.aliyun.com/document_detail/173916.html) operation to query the unique identifier of the table.', example='odps.engine_name.table_name'),
  tableName?: string(name='TableName', description='The name of the table in the EMR cluster. This parameter is required only if you set the DataSourceType parameter to emr.

You can call the [GetMetaDBTableList](https://help.aliyun.com/document_detail/173916.html) operation to query the table name.', example='abc'),
}

model GetMetaTableFullInfoResponseBody = {
  data?: {
    clusterId?: string(name='ClusterId', description='The EMR cluster ID.', example='C-010A704DA760****'),
    columnList?: [ 
      {
        caption?: string(name='Caption', description='The description of the field.', example='data comment'),
        columnGuid?: string(name='ColumnGuid', description='The unique identifier of the field.', example='odps.engine_name.table_name.1'),
        columnName?: string(name='ColumnName', description='The name of the field.', example='1'),
        columnType?: string(name='ColumnType', description='The data type of the field.', example='string'),
        comment?: string(name='Comment', description='The remarks of the field.', example='comment'),
        isForeignKey?: boolean(name='IsForeignKey', description='Indicates whether the field is a foreign key. Valid values:

*   true
*   false', example='true'),
        isPartitionColumn?: boolean(name='IsPartitionColumn', description='Indicates whether the field is a partition field. Valid values:

*   true
*   false', example='true'),
        isPrimaryKey?: boolean(name='IsPrimaryKey', description='Indicates whether the field is a primary key. Valid values:

*   true
*   false', example='false'),
        position?: int32(name='Position', description='The sequence number of the field.', example='1'),
      }
    ](name='ColumnList', description='The fields in the table.'),
    comment?: string(name='Comment', description='The comment on the table.', example='comment'),
    createTime?: long(name='CreateTime', description='The time when the table was created. A timestamp is returned for this parameter. You can convert the timestamp to the related date based on the time zone that you use.', example='1589870293000'),
    dataSize?: long(name='DataSize', description='The size of the storage space that is consumed by the table. Unit: bytes.', example='10'),
    databaseName?: string(name='DatabaseName', description='The name of the database.', example='abc'),
    envType?: int32(name='EnvType', description='The type of the environment. Valid values:

*   0: indicates that the table resides in the development environment.
*   1: indicates that the table resides in the production environment.', example='1'),
    isVisible?: int32(name='IsVisible', description='The scope in which the table is visible. Valid values:

*   0: indicates that the table is visible to workspace members.
*   1: indicates that the table is visible to users within a tenant.
*   2: indicates that the table is visible to all tenants.
*   3: indicates that the table is visible only to the table owner.', example='1'),
    lastAccessTime?: long(name='LastAccessTime', description='The time when the table was last accessed. A timestamp is returned for this parameter. You can convert the timestamp to the related date based on the time zone that you use.', example='1589870294000'),
    lastDdlTime?: long(name='LastDdlTime', description='The time when the schema of the table was last changed. A timestamp is returned for this parameter. You can convert the timestamp to the related date based on the time zone that you use.', example='1589870294000'),
    lastModifyTime?: long(name='LastModifyTime', description='The time when the table was last updated. A timestamp is returned for this parameter. You can convert the timestamp to the related date based on the time zone that you use.', example='1589870294000'),
    lifeCycle?: int32(name='LifeCycle', description='The lifecycle of the table. Unit: days.', example='5'),
    location?: string(name='Location', description='The storage path of the Hive table.', example='hdfs://localhost:777/user/hadoop/test.txt'),
    ownerId?: string(name='OwnerId', description='The ID of the table owner.', example='123'),
    partitionKeys?: string(name='PartitionKeys', description='The partition key column.', example='abc'),
    projectId?: long(name='ProjectId', description='The ID of the workspace to which the table belongs.', example='22'),
    projectName?: string(name='ProjectName', description='The name of the workspace to which the table belongs.', example='test'),
    schema?: string(name='Schema', description='The schema information of the table.', example='default'),
    tableGuid?: string(name='TableGuid', description='The unique identifier of the table.', example='odps.engine_name.table_name'),
    tableName?: string(name='TableName', description='The name of the table.', example='table_name'),
    tenantId?: long(name='TenantId', description='The tenant ID.', example='12345'),
    totalColumnCount?: long(name='TotalColumnCount', description='The total number of fields.', example='22'),
  }(name='Data', description='The business data.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1411515937****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetMetaTableFullInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMetaTableFullInfoResponseBody(name='body'),
}

/**
 * @summary Queries the complete information about a table, including information about fields in the table.
 *
 * @description You can call this operation to query only the information about a table of the E-MapReduce (EMR) compute engine type.
 *
 * @param request GetMetaTableFullInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMetaTableFullInfoResponse
 */
async function getMetaTableFullInfoWithOptions(request: GetMetaTableFullInfoRequest, runtime: Util.RuntimeOptions): GetMetaTableFullInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableFullInfo',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the complete information about a table, including information about fields in the table.
 *
 * @description You can call this operation to query only the information about a table of the E-MapReduce (EMR) compute engine type.
 *
 * @param request GetMetaTableFullInfoRequest
 * @return GetMetaTableFullInfoResponse
 */
async function getMetaTableFullInfo(request: GetMetaTableFullInfoRequest): GetMetaTableFullInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableFullInfoWithOptions(request, runtime);
}

model GetMetaTableIntroWikiRequest {
  tableGuid?: string(name='TableGuid', description='The GUID of the metatable.

This parameter is required.', example='odps.engine_name.table_name'),
  wikiVersion?: long(name='WikiVersion', description='The version of the instructions.', example='1'),
}

model GetMetaTableIntroWikiResponseBody = {
  data?: {
    content?: string(name='Content', description='The description of the metatable.', example='\\\\# Business requirements\\\\n\\\\n\\\\&lt;a name=\\\\&quot;xiw5n\\\\&quot;'),
    createTime?: long(name='CreateTime', description='The time when the metatable was created.', example='1584444247000'),
    creator?: string(name='Creator', description='The creator of the metatable.', example='abc'),
    creatorName?: string(name='CreatorName', description='The name of the user who creates the metatable.', example='abc'),
    modifiedTime?: long(name='ModifiedTime', description='The time when the metatable was last modified.', example='1584444247000'),
    version?: long(name='Version', description='The version number.', example='1'),
  }(name='Data', description='The business data.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetMetaTableIntroWikiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMetaTableIntroWikiResponseBody(name='body'),
}

/**
 * @summary Queries the instructions on how to use a table.
 *
 * @param request GetMetaTableIntroWikiRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMetaTableIntroWikiResponse
 */
async function getMetaTableIntroWikiWithOptions(request: GetMetaTableIntroWikiRequest, runtime: Util.RuntimeOptions): GetMetaTableIntroWikiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.wikiVersion)) {
    query['WikiVersion'] = request.wikiVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableIntroWiki',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the instructions on how to use a table.
 *
 * @param request GetMetaTableIntroWikiRequest
 * @return GetMetaTableIntroWikiResponse
 */
async function getMetaTableIntroWiki(request: GetMetaTableIntroWikiRequest): GetMetaTableIntroWikiResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableIntroWikiWithOptions(request, runtime);
}

model GetMetaTableLineageRequest {
  clusterId?: string(name='ClusterId', description='The ID of the E-MapReduce (EMR) cluster. Configure this parameter only if you want to query the lineage of an EMR table.', example='abc'),
  dataSourceType?: string(name='DataSourceType', description='The type of the data source. Valid values: odps and emr.', example='emr'),
  databaseName?: string(name='DatabaseName', description='The name of the database.', example='abc'),
  direction?: string(name='Direction', description='Specifies the ancestor or descendant lineage that you want to query for a field. Valid values: up and down. The value up indicates the ancestor lineage. The value down indicates the descendant lineage.

This parameter is required.', example='up'),
  nextPrimaryKey?: string(name='NextPrimaryKey', description='The logic of paging. Configure this parameter based on the value of the response parameter NextPrimaryKey when the value of the response parameter HasNext is true in the previous request.', example='odps.engine_name.table_name1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  tableGuid?: string(name='TableGuid', description='The unique identifier of the table.', example='odps.engine_name.table_name'),
  tableName?: string(name='TableName', description='The name of the table.', example='abc'),
}

model GetMetaTableLineageResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        createTimestamp?: long(name='CreateTimestamp', description='The time when the table was created.', example='1638720736000'),
        databaseName?: string(name='DatabaseName', description='The name of the database.', example='db1'),
        tableGuid?: string(name='TableGuid', description='The unique identifier of the table.', example='odps.tt.name'),
        tableName?: string(name='TableName', description='The name of the table.', example='name'),
      }
    ](name='DataEntityList', description='The information about the table.'),
    hasNext?: boolean(name='HasNext', description='Indicates whether the next page exists.', example='true'),
    nextPrimaryKey?: string(name='NextPrimaryKey', description='The logic of paging. If the value true is returned for the HasNext parameter and a value is returned for the NextPrimaryKey parameter in the response of the previous request, you must use the value of the NextPrimaryKey parameter for the next request.', example='odps | retail_e_commerce_2 | retail_e_commerce_2 | dws_ec_trd__cate_commodity_gmv_kpy_fy'),
  }(name='Data', description='The business data.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetMetaTableLineageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMetaTableLineageResponseBody(name='body'),
}

/**
 * @summary Queries the lineage of a metatable.
 *
 * @param request GetMetaTableLineageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMetaTableLineageResponse
 */
async function getMetaTableLineageWithOptions(request: GetMetaTableLineageRequest, runtime: Util.RuntimeOptions): GetMetaTableLineageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.nextPrimaryKey)) {
    query['NextPrimaryKey'] = request.nextPrimaryKey;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableLineage',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the lineage of a metatable.
 *
 * @param request GetMetaTableLineageRequest
 * @return GetMetaTableLineageResponse
 */
async function getMetaTableLineage(request: GetMetaTableLineageRequest): GetMetaTableLineageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableLineageWithOptions(request, runtime);
}

model GetMetaTableListByCategoryRequest {
  categoryId?: long(name='CategoryId', description='The category ID. You can call the [GetMetaCategory](https://help.aliyun.com/document_detail/2780099.html) operation to obtain the ID of the category. Categories allow you to efficiently organize and manage tables by category. You can search for the desired table by category.

This parameter is required.', example='23'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='10'),
}

model GetMetaTableListByCategoryResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: 10. Maximum value: 100.', example='10'),
    tableGuidList?: [ string ](name='TableGuidList', description='The returned result.'),
    totalCount?: long(name='TotalCount', description='The total number of metatables.', example='20'),
  }(name='Data', description='The business data returned.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetMetaTableListByCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMetaTableListByCategoryResponseBody(name='body'),
}

/**
 * @summary Queries metatables in a specified category.
 *
 * @param request GetMetaTableListByCategoryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMetaTableListByCategoryResponse
 */
async function getMetaTableListByCategoryWithOptions(request: GetMetaTableListByCategoryRequest, runtime: Util.RuntimeOptions): GetMetaTableListByCategoryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableListByCategory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries metatables in a specified category.
 *
 * @param request GetMetaTableListByCategoryRequest
 * @return GetMetaTableListByCategoryResponse
 */
async function getMetaTableListByCategory(request: GetMetaTableListByCategoryRequest): GetMetaTableListByCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableListByCategoryWithOptions(request, runtime);
}

model GetMetaTableOutputRequest {
  endDate?: string(name='EndDate', description='The end date.

This parameter is required.', example='2022-02-15'),
  pageNumber?: int32(name='PageNumber', description='The page number. Valid values: 1 to 30. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  startDate?: string(name='StartDate', description='The start date.

This parameter is required.', example='2020-02-02'),
  tableGuid?: string(name='TableGuid', description='The GUID of the metatable.

This parameter is required.', example='odps.sample_project.sample_table'),
  taskId?: string(name='TaskId', description='The task ID.', example='1048576'),
}

model GetMetaTableOutputResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        endTime?: string(name='EndTime', description='The end time.', example='2022-02-12 0:32:12'),
        projectId?: long(name='ProjectId', description='The workspace ID.', example='128'),
        startTime?: string(name='StartTime', description='The start time.', example='2022-02-12 0:34:13'),
        tableGuid?: string(name='TableGuid', description='The GUID of the MaxCompute table.', example='odps.sample_project.sample_table'),
        taskId?: string(name='TaskId', description='The task ID.', example='1048576'),
        taskInstanceId?: long(name='TaskInstanceId', description='The instance ID.', example='987654321'),
        waitTime?: string(name='WaitTime', description='The waiting time.', example='3'),
      }
    ](name='DataEntityList', description='The list of instances.'),
    pageNumber?: int32(name='PageNumber', description='The page number. Valid values: 1 to 30. Default value: 1.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
    totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='128'),
  }(name='Data', description='The business data.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='0'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='SUCCESS'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-0000-0000-000'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetMetaTableOutputResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMetaTableOutputResponseBody(name='body'),
}

/**
 * @summary Queries the output information of a metatable.
 *
 * @param request GetMetaTableOutputRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMetaTableOutputResponse
 */
async function getMetaTableOutputWithOptions(request: GetMetaTableOutputRequest, runtime: Util.RuntimeOptions): GetMetaTableOutputResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableOutput',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the output information of a metatable.
 *
 * @param request GetMetaTableOutputRequest
 * @return GetMetaTableOutputResponse
 */
async function getMetaTableOutput(request: GetMetaTableOutputRequest): GetMetaTableOutputResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableOutputWithOptions(request, runtime);
}

model GetMetaTablePartitionRequest {
  clusterId?: string(name='ClusterId', description='The ID of the EMR cluster. This parameter is required only if you set the DataSourceType parameter to emr.

You can log on to the [EMR console](https://emr.console.aliyun.com/?spm=a2c4g.11186623.0.0.965cc5c2GeiHet#/cn-hangzhou) to obtain the ID.', example='abc'),
  dataSourceType?: string(name='DataSourceType', description='The type of the data source. Valid values: odps and emr.', example='emr'),
  databaseName?: string(name='DatabaseName', description='The name of the database. This parameter is required only if you set the DataSourceType parameter to emr.

You can call the [ListMetaDB](https://help.aliyun.com/document_detail/2780105.html) operation to query the name of the metadatabase.', example='abc'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  sortCriterion?: {
    order?: string(name='Order', description='The order in which partitions in the metatable are sorted. Valid values: asc and desc. Default value: desc.', example='desc'),
    sortField?: string(name='SortField', description='The field that is used to sort partitions in the metatable. Valid values: name and modify_time. By default, partitions in the metatable are sorted based on their creation time.', example='name'),
  }(name='SortCriterion', description='The logic for sorting partitions in the metatable.'),
  tableGuid?: string(name='TableGuid', description='The unique identifier of the metatable.', example='odps.engine_name.table_name'),
  tableName?: string(name='TableName', description='The name of the metatable in the EMR cluster. This parameter is required only if you set the DataSourceType parameter to emr.

You can call the [GetMetaDBTableList](https://help.aliyun.com/document_detail/2780086.html) operation to query the name of the metatable.', example='abc'),
}

model GetMetaTablePartitionShrinkRequest {
  clusterId?: string(name='ClusterId', description='The ID of the EMR cluster. This parameter is required only if you set the DataSourceType parameter to emr.

You can log on to the [EMR console](https://emr.console.aliyun.com/?spm=a2c4g.11186623.0.0.965cc5c2GeiHet#/cn-hangzhou) to obtain the ID.', example='abc'),
  dataSourceType?: string(name='DataSourceType', description='The type of the data source. Valid values: odps and emr.', example='emr'),
  databaseName?: string(name='DatabaseName', description='The name of the database. This parameter is required only if you set the DataSourceType parameter to emr.

You can call the [ListMetaDB](https://help.aliyun.com/document_detail/2780105.html) operation to query the name of the metadatabase.', example='abc'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  sortCriterionShrink?: string(name='SortCriterion', description='The logic for sorting partitions in the metatable.'),
  tableGuid?: string(name='TableGuid', description='The unique identifier of the metatable.', example='odps.engine_name.table_name'),
  tableName?: string(name='TableName', description='The name of the metatable in the EMR cluster. This parameter is required only if you set the DataSourceType parameter to emr.

You can call the [GetMetaDBTableList](https://help.aliyun.com/document_detail/2780086.html) operation to query the name of the metatable.', example='abc'),
}

model GetMetaTablePartitionResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        comment?: string(name='Comment', description='The comment.', example='test'),
        createTime?: long(name='CreateTime', description='The time when the partition was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1590032868000'),
        dataSize?: long(name='DataSize', description='The size of the partition. Unit: bytes.', example='19'),
        modifiedTime?: long(name='ModifiedTime', description='The time when the partition was modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1590032868000'),
        partitionGuid?: string(name='PartitionGuid', description='The GUID of the partition.', example='odps.engine_name.table_name.pt=20170614'),
        partitionLocation?: string(name='PartitionLocation', description='The location of the Hive partition.', example='abc'),
        partitionName?: string(name='PartitionName', description='The name of the partition.', example='pt=20170614'),
        partitionPath?: string(name='PartitionPath', description='The path of the partition.', example='abc'),
        partitionType?: string(name='PartitionType', description='The type of the partition.', example='abc'),
        recordCount?: long(name='RecordCount', description='The number of entries in the partition.', example='233'),
        tableGuid?: string(name='TableGuid', description='The unique identifier of the metatable.', example='odps.engine_name.table_name'),
      }
    ](name='DataEntityList', description='The list of partitions.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
    totalCount?: long(name='TotalCount', description='The total number of partitions.', example='100'),
  }(name='Data', description='The returned result.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetMetaTablePartitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMetaTablePartitionResponseBody(name='body'),
}

/**
 * @summary Obtains a list of partitions in a metatable.
 *
 * @description You can call this operation to query only the partitions of a metatable in a MaxCompute or E-MapReduce (EMR) compute engine. If you query partitions of a metatable in an EMR compute engine, only DataLake clusters that use Data Lake Formation (DLF) to manage metadata and Hadoop clusters whose cluster version is earlier than 3.41.0 or 5.7.0 are supported.
 *
 * @param tmpReq GetMetaTablePartitionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMetaTablePartitionResponse
 */
async function getMetaTablePartitionWithOptions(tmpReq: GetMetaTablePartitionRequest, runtime: Util.RuntimeOptions): GetMetaTablePartitionResponse {
  Util.validateModel(tmpReq);
  var request = new GetMetaTablePartitionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.sortCriterion)) {
    request.sortCriterionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sortCriterion, 'SortCriterion', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortCriterionShrink)) {
    query['SortCriterion'] = request.sortCriterionShrink;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTablePartition',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Obtains a list of partitions in a metatable.
 *
 * @description You can call this operation to query only the partitions of a metatable in a MaxCompute or E-MapReduce (EMR) compute engine. If you query partitions of a metatable in an EMR compute engine, only DataLake clusters that use Data Lake Formation (DLF) to manage metadata and Hadoop clusters whose cluster version is earlier than 3.41.0 or 5.7.0 are supported.
 *
 * @param request GetMetaTablePartitionRequest
 * @return GetMetaTablePartitionResponse
 */
async function getMetaTablePartition(request: GetMetaTablePartitionRequest): GetMetaTablePartitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTablePartitionWithOptions(request, runtime);
}

model GetMetaTableProducingTasksRequest {
  clusterId?: string(name='ClusterId', description='The ID of the EMR cluster. This parameter takes effect only if the DataSourceType parameter is set to emr.', example='C-A_SAMPLE_CLUSTER_ID'),
  dataSourceType?: string(name='DataSourceType', description='The type of the metatable. Valid values: odps and emr. The value odps indicates that the metatable is a MaxCompute metatable. The value emr indicates that the metatable is an E-MapReduce (EMR) metatable.', example='odps'),
  dbName?: string(name='DbName', description='The name of the database.', example='default'),
  schemaName?: string(name='SchemaName', description='The name of the schema.', example='myschema'),
  tableGuid?: string(name='TableGuid', description='The GUID of the MaxCompute metatable.

This parameter is required.', example='odps.sample_project.sample_table'),
  tableName?: string(name='TableName', description='The name of the metatable.', example='sample_table'),
}

model GetMetaTableProducingTasksResponseBody = {
  data?: [ 
    {
      taskId?: string(name='TaskId', description='The ID of the output task.', example='9876543210'),
      taskName?: string(name='TaskName', description='The name of the output task.'),
    }
  ](name='Data', description='The output tasks of the metatable.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='"0"'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='SUCCESS'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='00000-00000-00000-00000'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false. The value true indicates that the request was successful. The value false indicates that the request failed.', example='true'),
}

model GetMetaTableProducingTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMetaTableProducingTasksResponseBody(name='body'),
}

/**
 * @summary Queries the output tasks of a metatable.
 *
 * @param request GetMetaTableProducingTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMetaTableProducingTasksResponse
 */
async function getMetaTableProducingTasksWithOptions(request: GetMetaTableProducingTasksRequest, runtime: Util.RuntimeOptions): GetMetaTableProducingTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.dbName)) {
    query['DbName'] = request.dbName;
  }
  if (!Util.isUnset(request.schemaName)) {
    query['SchemaName'] = request.schemaName;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableProducingTasks',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the output tasks of a metatable.
 *
 * @param request GetMetaTableProducingTasksRequest
 * @return GetMetaTableProducingTasksResponse
 */
async function getMetaTableProducingTasks(request: GetMetaTableProducingTasksRequest): GetMetaTableProducingTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableProducingTasksWithOptions(request, runtime);
}

model GetMetaTableThemeLevelRequest {
  dataSourceType?: string(name='DataSourceType', description='The type of the data source. Set the value to odps.

This parameter is required.', example='odps'),
  tableGuid?: string(name='TableGuid', description='The GUID of the metatable. Specify the GUID in the format of odps.${projectName}.${tableName}.

This parameter is required.', example='odps.project1.name1'),
}

model GetMetaTableThemeLevelResponseBody = {
  entity?: {
    level?: [ 
      {
        description?: string(name='Description', description='The description of the level.', example='test'),
        levelId?: long(name='LevelId', description='The ID of the level.', example='1'),
        name?: string(name='Name', description='The name of the level.', example='level1'),
        type?: int32(name='Type', description='The type of the level. Valid values:

*   1: indicates the logical level.
*   2: indicates the physical level.', example='1'),
      }
    ](name='Level', description='The information about the levels of the metatable.'),
    theme?: [ 
      {
        level?: int32(name='Level', description='The level of the theme. Valid values:

*   1
*   2', example='1'),
        name?: string(name='Name', description='The name of the theme.', example='theme1'),
        parentId?: long(name='ParentId', description='The ID of the parent theme.', example='0'),
        themeId?: long(name='ThemeId', description='The ID of the theme.', example='123'),
      }
    ](name='Theme', description='The information about the themes of the metatable.'),
  }(name='Entity', description='The returned data.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='0'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='success'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can troubleshoot issues based on the ID.', example='1324afdsfde'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetMetaTableThemeLevelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMetaTableThemeLevelResponseBody(name='body'),
}

/**
 * @summary Queries the information about the themes and levels of a metatable.
 *
 * @param request GetMetaTableThemeLevelRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMetaTableThemeLevelResponse
 */
async function getMetaTableThemeLevelWithOptions(request: GetMetaTableThemeLevelRequest, runtime: Util.RuntimeOptions): GetMetaTableThemeLevelResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableThemeLevel',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about the themes and levels of a metatable.
 *
 * @param request GetMetaTableThemeLevelRequest
 * @return GetMetaTableThemeLevelResponse
 */
async function getMetaTableThemeLevel(request: GetMetaTableThemeLevelRequest): GetMetaTableThemeLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableThemeLevelWithOptions(request, runtime);
}

model GetMigrationProcessRequest {
  migrationId?: long(name='MigrationId', description='The migration package ID. You can call the CreateImportMigration operation to query the ID.

This parameter is required.', example='123456'),
  projectId?: long(name='ProjectId', description='The workspace ID. You can log on to the DataWorks console and go to the Workspace page to query the ID.

This parameter is required.', example='123456'),
}

model GetMigrationProcessResponseBody = {
  data?: [ 
    {
      taskName?: string(name='TaskName', description='The name of the step in the migration task.', example='IMPORE_PREPARE'),
      taskStatus?: string(name='TaskStatus', description='The running status of the step in the migration task. Valid values:

*   INIT
*   RUNNING
*   FAILURE
*   SUCCESS', example='SUCCESS'),
    }
  ](name='Data', description='The progress information of the migration task, including the names of all steps in and status of the migration task.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='110001123456'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='test error msg'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='SADFSDFSD-SDFSDF-XDXCVX-ESWW'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetMigrationProcessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMigrationProcessResponseBody(name='body'),
}

/**
 * @summary Queries the progress of a migration task.
 *
 * @param request GetMigrationProcessRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMigrationProcessResponse
 */
async function getMigrationProcessWithOptions(request: GetMigrationProcessRequest, runtime: Util.RuntimeOptions): GetMigrationProcessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.migrationId)) {
    body['MigrationId'] = request.migrationId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMigrationProcess',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the progress of a migration task.
 *
 * @param request GetMigrationProcessRequest
 * @return GetMigrationProcessResponse
 */
async function getMigrationProcess(request: GetMigrationProcessRequest): GetMigrationProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMigrationProcessWithOptions(request, runtime);
}

model GetMigrationSummaryRequest {
  migrationId?: long(name='MigrationId', description='The migration task ID.

You can call the [CreateImportMigration](https://help.aliyun.com/document_detail/2809123.html) operation to obtain the ID of the import task and call the [CreateExportMigration](https://help.aliyun.com/document_detail/3241603.html) operation to obtain the ID of the export task.

This parameter is required.', example='1234'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the workspace ID.

This parameter is required.', example='12345'),
}

model GetMigrationSummaryResponseBody = {
  data?: {
    createUser?: string(name='CreateUser', description='The ID of the user who created the task.', example='982293332403****'),
    downloadUrl?: string(name='DownloadUrl', description='The URL that is used to download the package of the export task. You can use the URL to download the package of the export task.', example='https://shanghai-xxx-oss.oss-cn-shanghai.aliyuncs.com/pre/store/f10_bf47_b4fa7df0860f.zip?Expires=1639540903&OSSAccessKeyId=XXXXXXeF4Lv5j&Signature=qxxxxx'),
    gmtCreate?: long(name='GmtCreate', description='The time when the task was created.', example='1589904000000'),
    gmtModified?: long(name='GmtModified', description='The time when the task was modified.', example='1589904000000'),
    migrationId?: long(name='MigrationId', description='The task ID.', example='1234'),
    name?: string(name='Name', description='The task name.', example='test_export_01'),
    opUser?: string(name='OpUser', description='The ID of the user who managed the task.', example='982293332403****'),
    projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace to which the migration task belongs.', example='12345'),
    status?: string(name='Status', description='The status of the migration task. Valid values:

*   INIT
*   EDITING
*   IMPORTING
*   IMPORT_ERROR
*   IMPORT_SUCCESS
*   EXPORTING
*   EXPORT_ERROR
*   EXPORT_SUCCESS
*   REVOKED
*   PARTIAL_SUCCESS', example='EXPORT_SUCCESS'),
  }(name='Data', description='The details of the migration task.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the request ID to query logs and troubleshoot issues.', example='19999A96-71BA-2845-B455-ED620EF4E37F'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model GetMigrationSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMigrationSummaryResponseBody(name='body'),
}

/**
 * @summary Queries the information about a migration task.
 *
 * @param request GetMigrationSummaryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMigrationSummaryResponse
 */
async function getMigrationSummaryWithOptions(request: GetMigrationSummaryRequest, runtime: Util.RuntimeOptions): GetMigrationSummaryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.migrationId)) {
    body['MigrationId'] = request.migrationId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMigrationSummary',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about a migration task.
 *
 * @param request GetMigrationSummaryRequest
 * @return GetMigrationSummaryResponse
 */
async function getMigrationSummary(request: GetMigrationSummaryRequest): GetMigrationSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMigrationSummaryWithOptions(request, runtime);
}

model GetNodeRequest {
  nodeId?: long(name='NodeId', description='The interval at which the node is rerun after the node fails to run.

This parameter is required.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV.

This parameter is required.', example='PROD'),
}

model GetNodeResponseBody = {
  data?: {
    baselineId?: long(name='BaselineId', description='The description of the node.', example='123456'),
    businessId?: long(name='BusinessId', description='The operation that you want to perform. Set the value to **GetNode**.', example='123'),
    connection?: string(name='Connection', description='The environment of the workspace. Valid values: PROD and DEV.', example='odps_first_dev'),
    createTime?: long(name='CreateTime', description='The creation time.', example='1727280000000'),
    cronExpress?: string(name='CronExpress', description='The environment of the workspace. Valid values: PROD and DEV.', example='00 00 00 * * ?'),
    deployDate?: long(name='DeployDate', description='The deployment date.', example='1727280000000'),
    description?: string(name='Description', description='The name of the resource group.', example='test'),
    dqcDescription?: string(name='DqcDescription', description='The ID of the node. You can call the [ListNodes](https://help.aliyun.com/document_detail/173979.html) operation to query the node ID.', example='[{"projectName":"test_0923001","tableName":"test_table_001","partition":"ds\\\\u003d$[yyyymmdd]"},{"projectName":"test_0923001","tableName":"test_table_002","partition":"NOTAPARTITIONTABLE"}]'),
    dqcType?: int32(name='DqcType', description='The error message returned.', example='1'),
    fileId?: long(name='FileId', description='The ID of the file.', example='123'),
    fileType?: int32(name='FileType', description='The file type. Different file types have different codes. For more information, see [DataWorks node collection](https://help.aliyun.com/document_detail/600169.html).', example='10'),
    fileVersion?: int32(name='FileVersion', description='The version of the file.', example='1'),
    modifyTime?: long(name='ModifyTime', description='The modification time.', example='1727280000000'),
    nodeId?: long(name='NodeId', description='The HTTP status code returned.', example='1234'),
    nodeName?: string(name='NodeName', description='The scheduling type of the node. Valid values:

*   NORMAL: The node is an auto triggered node.
*   MANUAL: The node is a manually triggered node. Manually triggered nodes cannot be automatically triggered.
*   PAUSE: The node is a paused node.
*   SKIP: The node is a dry-run node. Dry-run nodes are started as scheduled but the system sets the status of the nodes to successful when it starts to run them.', example='The ID of the baseline.'),
    ownerId?: string(name='OwnerId', description='The ID of the node.', example='17366294****'),
    paramValues?: string(name='ParamValues', description='The CRON expression returned.', example='a=b'),
    priority?: int32(name='Priority', description='The HTTP status code returned.', example='1'),
    programType?: string(name='ProgramType', description='The ID of the owner of the node.', example='ODPS_SQL'),
    projectId?: long(name='ProjectId', description='Indicates whether the node can be rerun.', example='1234'),
    relatedFlowId?: long(name='RelatedFlowId', description='Indicates whether the node is associated with Data Quality. Valid values: 0 and 1. A value of 0 indicates that the node is associated with Data Quality. A value of 1 indicates that the node is not associated with Data Quality.', example='123'),
    repeatInterval?: long(name='RepeatInterval', description='The ID of the workflow to which the node belongs.', example='60'),
    repeatMode?: int32(name='RepeatMode', description='Rerun mode. 0 indicates that you can rerun only if you fail, 1 indicates that you can rerun in all cases, and 2 indicates that you cannot rerun in all cases.', example='1'),
    repeatability?: string(name='Repeatability', description='The type of the node.', example='true'),
    resGroupIdentifier?: string(name='ResGroupIdentifier', description='The unique identifier of the resource group.', example='group_123'),
    resGroupName?: string(name='ResGroupName', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='The table and partition filter expression in Data Quality that are associated with the node.'),
    schedulerType?: string(name='SchedulerType', description='The ID of the workspace.', example='NORMAL'),
  }(name='Data', description='The details of the node.'),
  errorCode?: string(name='ErrorCode', description='The ID of the node. You can call the [ListNodes](https://help.aliyun.com/document_detail/173979.html) operation to query the node ID.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The connection string.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The operation that you want to perform. Set the value to **GetNode**.', example='200'),
  requestId?: string(name='RequestId', description='Other parameters.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='The ID of the workflow.', example='true'),
}

model GetNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodeResponseBody(name='body'),
}

/**
 * @summary Indicates whether the request is successful.
 *
 * @param request GetNodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetNodeResponse
 */
async function getNodeWithOptions(request: GetNodeRequest, runtime: Util.RuntimeOptions): GetNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNode',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Indicates whether the request is successful.
 *
 * @param request GetNodeRequest
 * @return GetNodeResponse
 */
async function getNode(request: GetNodeRequest): GetNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeWithOptions(request, runtime);
}

model GetNodeChildrenRequest {
  nodeId?: long(name='NodeId', description='The node ID. You can go to the Operation Center page in the DataWorks console to query the node ID.

This parameter is required.', example='123456878'),
  projectEnv?: string(name='ProjectEnv', description='The environment type of Operation Center. Valid values: PROD and DEV. The value PROD indicates the production environment, and the value DEV indicates the development environment.

This parameter is required.', example='PROD'),
}

model GetNodeChildrenResponseBody = {
  data?: {
    nodes?: [ 
      {
        baselineId?: long(name='BaselineId', description='The baseline ID.', example='12345656'),
        cronExpress?: string(name='CronExpress', description='The CRON expression. CRON expressions are used to run auto triggered nodes.', example='00 00 * * * *'),
        nodeId?: long(name='NodeId', description='The node ID.', example='1244564565'),
        nodeName?: string(name='NodeName', description='The name of the node.', example='test_Node'),
        ownerId?: string(name='OwnerId', description='The ID of the Alibaba Cloud account used by the node owner.', example='123124561341251321'),
        priority?: int32(name='Priority', description='The priority. Valid values: 1 to 8. A large value indicates a high priority.', example='3'),
        programType?: string(name='ProgramType', description='The type of the node.', example='ODPS_SQL'),
        projectId?: long(name='ProjectId', description='The ID of the workspace to which the node belongs.', example='12315412412'),
        repeatability?: boolean(name='Repeatability', description='Indicates whether the node can be rerun if the node fails to run. Valid values:

*   true
*   false', example='true'),
        schedulerType?: string(name='SchedulerType', description='The scheduling type of the node. Valid values:

*   NORMAL: The node is an auto triggered node.
*   MANUAL: The node is a manually triggered node. Manually triggered nodes cannot be automatically triggered.
*   PAUSE: The node is a paused node. Paused nodes are started as scheduled but the system sets the status of the nodes to failed when it starts to run them.
*   SKIP: The node is a dry-run node. Dry-run nodes are started as scheduled but the system sets the status of the nodes to successful when it starts to run them.', example='NORMAL'),
        stepType?: string(name='StepType', description='The scheduling dependency type. Valid values:

*   **0**: same-cycle scheduling dependency
*   **3**: cross-cycle scheduling dependency', example='0'),
      }
    ](name='Nodes', description='The descendant nodes.'),
  }(name='Data', description='The information about the descendant nodes.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1060010000000'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='err'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to troubleshoot issues.', example='adsfasdf-adf-asdf-asdf-asdfadfasdd'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetNodeChildrenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodeChildrenResponseBody(name='body'),
}

/**
 * @summary Queries a list of instances.
 *
 * @param request GetNodeChildrenRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetNodeChildrenResponse
 */
async function getNodeChildrenWithOptions(request: GetNodeChildrenRequest, runtime: Util.RuntimeOptions): GetNodeChildrenResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeChildren',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of instances.
 *
 * @param request GetNodeChildrenRequest
 * @return GetNodeChildrenResponse
 */
async function getNodeChildren(request: GetNodeChildrenRequest): GetNodeChildrenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeChildrenWithOptions(request, runtime);
}

model GetNodeCodeRequest {
  nodeId?: long(name='NodeId', description='The ID of the node.

This parameter is required.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV.

This parameter is required.', example='PROD'),
}

model GetNodeCodeResponseBody = {
  data?: string(name='Data', description='The code of the node.', example='select a;'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetNodeCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodeCodeResponseBody(name='body'),
}

/**
 * @summary Queries the code of a node.
 *
 * @param request GetNodeCodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetNodeCodeResponse
 */
async function getNodeCodeWithOptions(request: GetNodeCodeRequest, runtime: Util.RuntimeOptions): GetNodeCodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeCode',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the code of a node.
 *
 * @param request GetNodeCodeRequest
 * @return GetNodeCodeResponse
 */
async function getNodeCode(request: GetNodeCodeRequest): GetNodeCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeCodeWithOptions(request, runtime);
}

model GetNodeOnBaselineRequest {
  baselineId?: long(name='BaselineId', description='The baseline ID.

This parameter is required.', example='1234'),
}

model GetNodeOnBaselineResponseBody = {
  data?: [ 
    {
      nodeId?: long(name='NodeId', description='The node ID.', example='1234'),
      nodeName?: string(name='NodeName', description='The name of the node.'),
      owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the node owner.', example='9527952****'),
      projectId?: long(name='ProjectId', description='The ID of the workspace to which the node belongs.', example='1234'),
    }
  ](name='Data', description='The list of nodes.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-E****'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetNodeOnBaselineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodeOnBaselineResponseBody(name='body'),
}

/**
 * @deprecated OpenAPI GetNodeOnBaseline is deprecated
 *
 * @summary Queries the nodes associated with a baseline.
 *
 * @param request GetNodeOnBaselineRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetNodeOnBaselineResponse
 */
// Deprecated
async function getNodeOnBaselineWithOptions(request: GetNodeOnBaselineRequest, runtime: Util.RuntimeOptions): GetNodeOnBaselineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeOnBaseline',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @deprecated OpenAPI GetNodeOnBaseline is deprecated
 *
 * @summary Queries the nodes associated with a baseline.
 *
 * @param request GetNodeOnBaselineRequest
 * @return GetNodeOnBaselineResponse
 */
// Deprecated
async function getNodeOnBaseline(request: GetNodeOnBaselineRequest): GetNodeOnBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeOnBaselineWithOptions(request, runtime);
}

model GetNodeParentsRequest {
  nodeId?: long(name='NodeId', description='The node ID. You can go to the Operation Center page in the DataWorks console to query the node ID.

This parameter is required.', example='12345456211234'),
  projectEnv?: string(name='ProjectEnv', description='The environment type of Operation Center. Valid values: PROD and DEV. The value PROD indicates the production environment, and the value DEV indicates the development environment.

This parameter is required.', example='PROD'),
}

model GetNodeParentsResponseBody = {
  data?: {
    nodes?: [ 
      {
        baselineId?: long(name='BaselineId', description='The baseline ID.', example='1244564565'),
        cronExpress?: string(name='CronExpress', description='The CRON expression. CRON expressions are used to run auto triggered nodes.', example='00 00 * * * *'),
        nodeId?: long(name='NodeId', description='The node ID.', example='1244564565'),
        nodeName?: string(name='NodeName', description='The name of the node.', example='test_Node'),
        ownerId?: string(name='OwnerId', description='The ID of the Alibaba Cloud account used by the node owner.', example='123124561341251321'),
        priority?: int32(name='Priority', description='The priority. Valid values: 1 to 8. A large value indicates a high priority.', example='3'),
        programType?: string(name='ProgramType', description='The type of the node.', example='ODPS_SQL'),
        projectId?: long(name='ProjectId', description='The ID of the workspace to which the node belongs.', example='12315412412'),
        repeatability?: boolean(name='Repeatability', description='Indicates whether the node can be rerun if the node fails to run. Valid values:

*   true
*   false', example='true'),
        schedulerType?: string(name='SchedulerType', description='The scheduling type of the node. Valid values:

*   NORMAL: The node is an auto triggered node.
*   MANUAL: The node is a manually triggered node. Manually triggered nodes cannot be automatically triggered.
*   PAUSE: The node is a paused node. Paused nodes are started as scheduled but the system sets the status of the nodes to failed when it starts to run them.
*   SKIP: The node is a dry-run node. Dry-run nodes are started as scheduled but the system sets the status of the nodes to successful when it starts to run them.', example='NORMAL'),
        stepType?: string(name='StepType', description='The scheduling dependency type.

*   **0**: same-cycle scheduling dependency
*   **3**: cross-cycle scheduling dependency', example='0'),
      }
    ](name='Nodes', description='The ancestor nodes.'),
  }(name='Data', description='The ancestor nodes.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1060010000000'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='err'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can troubleshoot issues based on the ID.', example='asfasdfs-adfasdf-asfas-dfasdf-asdf'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetNodeParentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodeParentsResponseBody(name='body'),
}

/**
 * @summary Queries a list of ancestor nodes of a node.
 *
 * @param request GetNodeParentsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetNodeParentsResponse
 */
async function getNodeParentsWithOptions(request: GetNodeParentsRequest, runtime: Util.RuntimeOptions): GetNodeParentsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeParents',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of ancestor nodes of a node.
 *
 * @param request GetNodeParentsRequest
 * @return GetNodeParentsResponse
 */
async function getNodeParents(request: GetNodeParentsRequest): GetNodeParentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeParentsWithOptions(request, runtime);
}

model GetNodeTypeListInfoRequest {
  keyword?: string(name='Keyword', description='The name of the node type. You can log on to the DataWorks console, go to the DataStudio page, and then view the name of a specific node type on the left side of the page. You can view the English or Chinese name of a specific node type, but the language specified to present the name must be the same as the language specified by the Locale parameter. Fuzzy match is supported. If this parameter is not configured, the names of all node types are returned.', example='ODPS SQ'),
  locale?: string(name='Locale', description='The language that you use for the query. Valid values: zh-CN and en-US.', example='zh-CN'),
  pageNumber?: int32(name='PageNumber', description='The page number.

This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: 100.

This parameter is required.', example='50'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can click the Workspace Manage icon in the upper-right corner of the DataStudio page to go to the Workspace page and query the ID.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The unique identifier of the DataWorks workspace. You can view the identifier in the upper part of the DataStudio page. You can also select another identifier to switch to another workspace. You must configure either this parameter or the ProjectId parameter to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model GetNodeTypeListInfoResponseBody = {
  nodeTypeInfoList?: {
    nodeTypeInfo?: [ 
      {
        nodeType?: int32(name='NodeType', description='The type of the node, which is specified by a number.', example='10'),
        nodeTypeName?: string(name='NodeTypeName', description='The name of the node type.', example='ODPS SQL'),
      }
    ](name='NodeTypeInfo', description='The information about a node type.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='50'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='127'),
  }(name='NodeTypeInfoList', description='The list of node types.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
}

model GetNodeTypeListInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodeTypeListInfoResponseBody(name='body'),
}

/**
 * @deprecated OpenAPI GetNodeTypeListInfo is deprecated
 *
 * @summary Queries the information about node types, including the code and name of a node type.
 *
 * @param request GetNodeTypeListInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetNodeTypeListInfoResponse
 */
// Deprecated
async function getNodeTypeListInfoWithOptions(request: GetNodeTypeListInfoRequest, runtime: Util.RuntimeOptions): GetNodeTypeListInfoResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.locale)) {
    body['Locale'] = request.locale;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeTypeListInfo',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @deprecated OpenAPI GetNodeTypeListInfo is deprecated
 *
 * @summary Queries the information about node types, including the code and name of a node type.
 *
 * @param request GetNodeTypeListInfoRequest
 * @return GetNodeTypeListInfoResponse
 */
// Deprecated
async function getNodeTypeListInfo(request: GetNodeTypeListInfoRequest): GetNodeTypeListInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeTypeListInfoWithOptions(request, runtime);
}

model GetOpRiskDataRequest {
  date?: string(name='Date', description='The date on which access records were generated. Specify the value in the yyyyMMdd format.

This parameter is required.', example='20210221'),
  name?: string(name='Name', description='The parameters that you can configure to query the access records. Valid values:

*   dbType
*   instanceName
*   databaseName
*   projectName
*   clusterName

The following example shows the parameters configured to query the access records of the sensitive data in the abc database of the Hologres instance ABC: [ {"dbType":"hologres","instanceName":"ABC","databaseName":"abc"} ]

You must configure the parameters based on the compute engine that you use in your business.', example='[ {"dbType":"hologres","instanceName":"ABC","databaseName":"abc"}, {"dbType":"ODPS.ODPS","projectName":"adbc"} ]'),
  pageNo?: int32(name='PageNo', description='The page number. Pages start from 1.

This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: 1000.

This parameter is required.', example='100'),
  riskType?: string(name='RiskType', description='The method that you use to identify risks.

*   You can manually identify risks.
*   You can also use a sensitive data identification rule to identify risks. You can log on to the DataWorks console and go to the Risk Identification Rules page in Data Security Guard to obtain the name of the rule.', example='Manual identification'),
}

model GetOpRiskDataResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
  riskData?: string(name='RiskData', description='The information about the high-risk sensitive data. The information includes totalCount and opRiskDatas. opRiskDatas includes the following parameters:

*   sensType: the type of the sensitive data
*   sensLevel: the sensitivity level of the sensitive data
*   opType: the type of the operation
*   sql: the SQL statement that is executed
*   opAccount: the account that is used to perform the operation
*   opTime: the time when the operation was performed', example='{
      "opRiskDatas": [
            {
                  "riskType": "Hierarchical dimension, EMR engine dimension and project dimension, EMR engine project dimension operation data, export method dimension, EMR engine",
                  "opTime": "2021-01-04 23:39:13",
                  "opType": "SQL_SELECT",
                  "opAccount": "user",
                  "sensType": "Email/name/mobile phone number",
                  "sql": "SELECT * FROM default.jiade_1219_test_create LIMIT 20"
            }
      ],
      "totalCount": 499
}'),
}

model GetOpRiskDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOpRiskDataResponseBody(name='body'),
}

/**
 * @summary Queries the records that are generated on a specified date for access to the high-risk sensitive data in all the DataWorks workspaces of a tenant.
 *
 * @param request GetOpRiskDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetOpRiskDataResponse
 */
async function getOpRiskDataWithOptions(request: GetOpRiskDataRequest, runtime: Util.RuntimeOptions): GetOpRiskDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOpRiskData',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the records that are generated on a specified date for access to the high-risk sensitive data in all the DataWorks workspaces of a tenant.
 *
 * @param request GetOpRiskDataRequest
 * @return GetOpRiskDataResponse
 */
async function getOpRiskData(request: GetOpRiskDataRequest): GetOpRiskDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOpRiskDataWithOptions(request, runtime);
}

model GetOpSensitiveDataRequest {
  date?: string(name='Date', description='The date on which access records were generated. Specify the value in the yyyyMMdd format.

This parameter is required.', example='20210116'),
  name?: string(name='Name', description='The parameters that you can configure to query the access records. Valid values:

*   dbType
*   instanceName
*   databaseName
*   projectName
*   clusterName

The following example shows the parameters configured to query the access records of the sensitive data in the abc database of the Hologres instance ABC: [ {"dbType":"hologres","instanceName":"ABC","databaseName":"abc"} ]

You must configure the parameters based on the compute engine that you use in your business.

This parameter is required.', example='[  {"dbType":"hologres","instanceName":"ABC","databaseName":"abc"},  {"dbType":"ODPS.ODPS","projectName":"adbc"}  ]'),
  opType?: string(name='OpType', description='The operation that is performed on the data. Valid values:

*   SQL_SELECT: specifies the data access operation. For example, execute a SELECT statement to query data.
*   TUNNEL_DOWNLOAD: specifies the data download operation. For example, run a Tunnel command to download data.', example='SQL_SELECT'),
  pageNo?: int32(name='PageNo', description='The page number. Valid values: 1 to 1000.

This parameter is required.', example='100'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Minimum value: 1. Maximum value: 1000.

This parameter is required.', example='1'),
}

model GetOpSensitiveDataResponseBody = {
  opSensitiveData?: string(name='OpSensitiveData', description='The information about the access records of the sensitive data. The information includes totalCount and opRiskDatas. opRiskDatas includes the following parameters:

*   sensType: the type of the sensitive data.
*   sensLevel: the sensitivity level of the sensitive data. A larger value indicates a higher sensitivity level.
*   opType: the type of the operation.
*   sql: the SQL statement that is executed.
*   opAccount: the account that is used to perform the operation.
*   opTime: the time when the operation was performed.', example='"opSensDatas": [       {         "sensLevel": "L4",         "opTime": "2021-02-07 00:14:51",         "opAccount": "ALIYUN$dsg_test",         "sensType": "Mobile phone number",         "sql": "select * from dsg_demo.tbl_phonebook where phone_no = &#39;1331111****&#39;;"       }     ],     "totalCount": 6'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
}

model GetOpSensitiveDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOpSensitiveDataResponseBody(name='body'),
}

/**
 * @summary Queries the records that are generated on a specified date for access to sensitive data in all the DataWorks workspaces of a tenant.
 *
 * @param request GetOpSensitiveDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetOpSensitiveDataResponse
 */
async function getOpSensitiveDataWithOptions(request: GetOpSensitiveDataRequest, runtime: Util.RuntimeOptions): GetOpSensitiveDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOpSensitiveData',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the records that are generated on a specified date for access to sensitive data in all the DataWorks workspaces of a tenant.
 *
 * @param request GetOpSensitiveDataRequest
 * @return GetOpSensitiveDataResponse
 */
async function getOpSensitiveData(request: GetOpSensitiveDataRequest): GetOpSensitiveDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOpSensitiveDataWithOptions(request, runtime);
}

model GetOptionValueForProjectRequest {
  extensionCode?: string(name='ExtensionCode', description='The unique code of the extension.', example='ce4*********086da5'),
  projectId?: string(name='ProjectId', description='The workspace ID.', example='234'),
}

model GetOptionValueForProjectResponseBody = {
  optionValue?: string(name='OptionValue', description='The data returned In the example, cuNumber is a custom key.', example='{"cuNumber":"0"}'),
  requestId?: string(name='RequestId', description='The request ID.', example='E6F0DBDD-5AD****'),
}

model GetOptionValueForProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOptionValueForProjectResponseBody(name='body'),
}

/**
 * @summary Queries the option settings of an extension in a workspace.
 *
 * @param request GetOptionValueForProjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetOptionValueForProjectResponse
 */
async function getOptionValueForProjectWithOptions(request: GetOptionValueForProjectRequest, runtime: Util.RuntimeOptions): GetOptionValueForProjectResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.extensionCode)) {
    body['ExtensionCode'] = request.extensionCode;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetOptionValueForProject',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the option settings of an extension in a workspace.
 *
 * @param request GetOptionValueForProjectRequest
 * @return GetOptionValueForProjectResponse
 */
async function getOptionValueForProject(request: GetOptionValueForProjectRequest): GetOptionValueForProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOptionValueForProjectWithOptions(request, runtime);
}

model GetPermissionApplyOrderDetailRequest {
  flowId?: string(name='FlowId', description='The ID of the permission request order. You can call the [ListPermissionApplyOrders](https://help.aliyun.com/document_detail/211008.html) operation to obtain the ID.

This parameter is required.', example='48f36729-05f9-4a40-9286-933fd940f30a'),
}

model GetPermissionApplyOrderDetailResponseBody = {
  applyOrderDetail?: {
    applyBaseId?: string(name='ApplyBaseId', description='The ID of the Alibaba Cloud account that was used to submit the permission request order.', example='267842600408993176'),
    applyTimestamp?: long(name='ApplyTimestamp', description='The time when the permission request order was submitted. The value is a UNIX timestamp.', example='1615284086000'),
    approveAccountList?: [ 
      {
        baseId?: string(name='BaseId', description='The ID of the Alibaba Cloud account that is used to process the permission request order.', example='182293110403****'),
      }
    ](name='ApproveAccountList', description='The list of Alibaba Cloud accounts that are used to process the permission request order.'),
    approveContent?: {
      applyReason?: string(name='ApplyReason', description='The reason of the permission request. The administrator processes the request based on the reason.', example='I need to use this table'),
      deadline?: long(name='Deadline', description='The expiration time of the permissions that you request. The value is a UNIX timestamp. If LabelSecurity is disabled for the MaxCompute project in which you want to request permissions on the fields of a table, or the security level of the fields is 0 or is lower than or equal to the security level of the Alibaba Cloud account for which you want to request permissions, you can request only permanent permissions.', example='1617115071885'),
      orderType?: int32(name='OrderType', description='The type of the permission request order. The parameter value is 1 and cannot be changed. This value indicates ACL-based authorization.', example='1'),
      projectMeta?: {
        maxComputeProjectName?: string(name='MaxComputeProjectName', description='The MaxCompute project to which the object on which you request permissions belongs.', example='aMaxComputeProject'),
        objectMetaList?: [ 
          {
            columnMetaList?: [ 
              {
                columnComment?: string(name='ColumnComment', description='The description of the column on which you request permissions.', example='Field description'),
                columnName?: string(name='ColumnName', description='The name of the column on which you request permissions.', example='aColumnName'),
                securityLevel?: string(name='SecurityLevel', description='The security level of the column on which you request permissions. Valid values: 0 to 9.', example='9'),
              }
            ](name='ColumnMetaList', description='The information about the column fields in the object on which you request permissions.'),
            objectName?: string(name='ObjectName', description='The name of the table on which you request permissions.', example='aTableName'),
          }
        ](name='ObjectMetaList', description='The details about the object on which you request permissions.'),
        workspaceId?: int32(name='WorkspaceId', description='The ID of the DataWorks workspace that is associated with the object on which you request permissions.', example='12345'),
      }(name='ProjectMeta', description='The information about the project and workspace that are associated with the object on which you request permissions.'),
    }(name='ApproveContent', description='The content of the permission request.'),
    flowId?: string(name='FlowId', description='The ID of the permission request order.', example='ad8da78d-8135-455e-9486-27cf213fc140'),
    flowStatus?: int32(name='FlowStatus', description='The status of the permission request order. Valid values:

*   1: to be processed
*   2: approved and authorized
*   3: approved but authorization failed
*   4: rejected', example='2'),
    granteeObjectList?: [ 
      {
        granteeId?: string(name='GranteeId', description='The ID of the account that is used to request permissions.', example='267842600408993176'),
        granteeName?: string(name='GranteeName', description='The name of the account that is used to request permissions. The name is in the same format as that of the account used to access the MaxCompute project.

*   If the account is an Alibaba Cloud account, the value is in the ALIYUN$+Account name format.
*   If the account is a RAM user, the value is in the RAM$+Account name format.', example='RAM$dataworks_3h1_1:StsRamUser(StsRamUser)'),
        granteeType?: int32(name='GranteeType', description='The type of the subject that requests permissions. The value is fixed as 1, which indicates users.', example='1'),
        granteeTypeSub?: int32(name='GranteeTypeSub', description='The subtype of the subject that requests permissions. Valid values:

*   101: production account
*   103: individual account
*   105: account that requests permissions for others', example='103'),
      }
    ](name='GranteeObjectList', description='The information about the account that is used to request permissions.'),
  }(name='ApplyOrderDetail', description='The details of the permission request order.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1ec92159376****'),
}

model GetPermissionApplyOrderDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPermissionApplyOrderDetailResponseBody(name='body'),
}

/**
 * @summary Queries the details of a permission request order.
 *
 * @param request GetPermissionApplyOrderDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPermissionApplyOrderDetailResponse
 */
async function getPermissionApplyOrderDetailWithOptions(request: GetPermissionApplyOrderDetailRequest, runtime: Util.RuntimeOptions): GetPermissionApplyOrderDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.flowId)) {
    query['FlowId'] = request.flowId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPermissionApplyOrderDetail',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the details of a permission request order.
 *
 * @param request GetPermissionApplyOrderDetailRequest
 * @return GetPermissionApplyOrderDetailResponse
 */
async function getPermissionApplyOrderDetail(request: GetPermissionApplyOrderDetailRequest): GetPermissionApplyOrderDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPermissionApplyOrderDetailWithOptions(request, runtime);
}

model GetProjectRequest {
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can call the [ListProjects](https://help.aliyun.com/document_detail/2780068.html) operation to query the ID.', example='27'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can call the [ListProjects](https://help.aliyun.com/document_detail/2780068.html) operation to query the name.', example='test_project'),
}

model GetProjectResponseBody = {
  data?: {
    appkey?: string(name='Appkey', description='This parameter is deprecated.', example='0'),
    baseProject?: boolean(name='BaseProject', description='This parameter is deprecated.', example='false'),
    defaultDiResourceGroupIdentifier?: string(name='DefaultDiResourceGroupIdentifier', description='The ID of the resource group that was allocated by default when you purchased an exclusive resource group for MaxCompute.', example='group_280749521****'),
    destination?: int32(name='Destination', description='This parameter is deprecated.', example='0'),
    devStorageQuota?: string(name='DevStorageQuota', description='This parameter is deprecated.', example='0'),
    developmentType?: int32(name='DevelopmentType', description='This parameter is deprecated.', example='4'),
    disableDevelopment?: boolean(name='DisableDevelopment', description='Indicates whether the Develop role is disabled. Valid values:

*   **false** (default)
*   **true**', example='true'),
    envTypes?: [ string ](name='EnvTypes', description='The environment information of the workspace.'),
    gmtCreate?: string(name='GmtCreate', description='The time when the workspace was created. Example: `Dec 3, 2019 9:12:20 PM`.', example='Oct 10, 2019 3:42:53 PM'),
    gmtModified?: string(name='GmtModified', description='The time when the workspace was last modified. Example: `Dec 3, 2019 9:12:20 PM`.', example='Dec 3, 2019 9:12:20 PM'),
    isAllowDownload?: int32(name='IsAllowDownload', description='Indicates whether you are allowed to download the query result from DataStudio. Valid values:

*   **1**: You are allowed to download the query result from DataStudio.
*   **0**: You are not allowed to download the query result from DataStudio.', example='1'),
    isDefault?: int32(name='IsDefault', description='Indicates whether the workspace is a default workspace. Valid values:

*   **1**: The workspace is a default workspace.
*   **0**: The workspace is not a default workspace.', example='1'),
    maxFlowNode?: int32(name='MaxFlowNode', description='This parameter is deprecated.', example='1'),
    prodStorageQuota?: string(name='ProdStorageQuota', description='This parameter is deprecated.', example='1'),
    projectDescription?: string(name='ProjectDescription', description='The description of the workspace.', example='abc'),
    projectId?: int32(name='ProjectId', description='The ID of the workspace.', example='27'),
    projectIdentifier?: string(name='ProjectIdentifier', description='The name of the workspace.', example='abc'),
    projectMode?: int32(name='ProjectMode', description='The mode of the workspace. Valid values:

*   **2**: The workspace is in basic mode.
*   **3**: The workspace is in standard mode.', example='2'),
    projectName?: string(name='ProjectName', description='The display name of the workspace.', example='abc'),
    projectOwnerBaseId?: string(name='ProjectOwnerBaseId', description='The ID of the Alibaba Cloud account used by the workspace owner.', example='18229311****'),
    protectedMode?: int32(name='ProtectedMode', description='Indicates whether the workspace protection feature is enabled. Valid values:

*   **1**: enabled
*   **0**: disabled', example='1'),
    residentArea?: string(name='ResidentArea', description='The type of the workspace. Valid values:

*   **private**
*   **swap**', example='private'),
    resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The resource group ID.', example='rg-acfmzbn7pti3zfa'),
    schedulerMaxRetryTimes?: int32(name='SchedulerMaxRetryTimes', description='The default maximum number of automatic reruns that are allowed after an error occurs.', example='3'),
    schedulerRetryInterval?: int32(name='SchedulerRetryInterval', description='The default interval between automatic reruns after an error occurs. Unit: milliseconds. The maximum interval is 30 minutes. You must pay attention to the conversion between units.', example='120000'),
    status?: int32(name='Status', description='The status of the workspace. Valid values:

*   **0**: AVAILABLE, which indicates that the workspace runs as expected.
*   **1**: DELETED, which indicates that the workspace is deleted.
*   **2**: INITIALIZING, which indicates that the workspace is being initialized.
*   **3**: INIT_FAILED, which indicates that the workspace fails to be initialized.
*   **4**: FORBIDDEN, which indicates that the workspace is manually disabled.
*   **5**: DELETING, which indicates that the workspace is being deleted.
*   **6**: DEL_FAILED, which indicates that the workspace fails to be deleted.
*   **7**: FROZEN, which indicates that the workspace is frozen due to overdue payments.
*   **8**: UPDATING, which indicates that the workspace is being updated. The workspace enters this state after you associate a new compute engine with the workspace and the compute engine is initialized.
*   **9**: UPDATE_FAILED, which indicates that the workspace fails to be updated.', example='0'),
    tablePrivacyMode?: int32(name='TablePrivacyMode', description='Indicates whether the MaxCompute tables in the workspace are visible to the users within a tenant. Valid values:

*   **0**: invisible
*   **1**: visible', example='1'),
    tags?: [ 
      {
        key?: string(name='Key', description='The tag key.', example='Env'),
        value?: string(name='Value', description='The tag value.', example='Test'),
      }
    ](name='Tags', description='The tags added to the workspace.'),
    tenantId?: long(name='TenantId', description='The tenant ID.', example='280749521'),
    useProxyOdpsAccount?: boolean(name='UseProxyOdpsAccount', description='Indicates whether a proxy account is used to access the MaxCompute compute engine associated with the workspace.', example='true'),
  }(name='Data', description='The information about the workspace.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model GetProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectResponseBody(name='body'),
}

/**
 * @summary Queries the information about a DataWorks workspace.
 *
 * @param request GetProjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetProjectResponse
 */
async function getProjectWithOptions(request: GetProjectRequest, runtime: Util.RuntimeOptions): GetProjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    query['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProject',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about a DataWorks workspace.
 *
 * @param request GetProjectRequest
 * @return GetProjectResponse
 */
async function getProject(request: GetProjectRequest): GetProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProjectWithOptions(request, runtime);
}

model GetProjectDetailRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.

This parameter is required.', example='27'),
}

model GetProjectDetailResponseBody = {
  data?: {
    defaultDiResourceGroupIdentifier?: string(name='DefaultDiResourceGroupIdentifier', description='The identifier of the shared resource group for Data Integration on which nodes are run.', example='group_280749521****'),
    developmentType?: int32(name='DevelopmentType', description='The development type of the workspace. The value is fixed to 4.', example='4'),
    disableDevelopment?: boolean(name='DisableDevelopment', description='Indicates whether the Develop role is disabled. Valid values:

*   **false** (default)
*   **true**', example='true'),
    envTypes?: [ string ](name='EnvTypes', description='The environments of workspaces in different modes. Workspaces in basic mode provide only the production environment. Workspaces in standard mode provide both the development environment and the production environment.'),
    gmtCreate?: string(name='GmtCreate', description='The time when the workspace was created.', example='Oct 10, 2019 3:42:53 PM'),
    gmtModified?: string(name='GmtModified', description='The time when the workspace was last modified.', example='Dec 3, 2019 9:12:20 PM'),
    isAllowDownload?: int32(name='IsAllowDownload', description='Indicates whether the download operation is allowed.', example='1'),
    isDefault?: int32(name='IsDefault', description='Indicates whether the workspace is a default workspace. Valid values:

*   1: The workspace is a default workspace.
*   0: The workspace is not a default workspace.', example='1'),
    projectDescription?: string(name='ProjectDescription', description='The description of the workspace.', example='abc'),
    projectId?: int32(name='ProjectId', description='The workspace ID.', example='27'),
    projectIdentifier?: string(name='ProjectIdentifier', description='The unique identifier of the workspace.', example='abc'),
    projectMode?: int32(name='ProjectMode', description='The mode of the workspace. The value 2 indicates that the workspace is in basic mode. The value 3 indicates that the workspace is in standard mode.', example='1'),
    projectName?: string(name='ProjectName', description='The display name of the workspace.', example='abc'),
    projectOwnerBaseId?: string(name='ProjectOwnerBaseId', description='The ID of the Alibaba Cloud account used by the workspace owner.', example='18229311****'),
    protectedMode?: int32(name='ProtectedMode', description='Indicates whether the workspace protection feature is enabled.', example='1'),
    residentArea?: string(name='ResidentArea', description='The type of the workspace. Valid values: private and swap.', example='private'),
    resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The resource group ID.', example='rg-acfmzbn7pti3zfa'),
    schedulerMaxRetryTimes?: int32(name='SchedulerMaxRetryTimes', description='The default maximum number of automatic reruns that are allowed after an error occurs.', example='3'),
    schedulerRetryInterval?: int32(name='SchedulerRetryInterval', description='The interval between automatic reruns after an error occurs.', example='120000'),
    status?: int32(name='Status', description='The status of the workspace.', example='0'),
    tablePrivacyMode?: int32(name='TablePrivacyMode', description='Indicates whether the MaxCompute tables in the workspace are visible to the users within a tenant. Valid values:

*   0: The MaxCompute tables in the workspace are not visible to the users within a tenant.
*   1: The MaxCompute tables in the workspace are visible to the users within a tenant.', example='1'),
    tags?: [ 
      {
        key?: string(name='Key', description='The tag key.', example='Env'),
        value?: string(name='Value', description='The tag value.', example='Test'),
      }
    ](name='Tags', description='The tag information.'),
    tenantId?: long(name='TenantId', description='The tenant ID.', example='280749521950784'),
    useProxyOdpsAccount?: boolean(name='UseProxyOdpsAccount', description='Indicates whether a proxy account is used to access the MaxCompute compute engine.', example='true'),
  }(name='Data', description='The information about the workspace.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetProjectDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectDetailResponseBody(name='body'),
}

/**
 * @deprecated OpenAPI GetProjectDetail is deprecated
 *
 * @summary Queries the information about a DataWorks workspace.
 *
 * @param request GetProjectDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetProjectDetailResponse
 */
// Deprecated
async function getProjectDetailWithOptions(request: GetProjectDetailRequest, runtime: Util.RuntimeOptions): GetProjectDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProjectDetail',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @deprecated OpenAPI GetProjectDetail is deprecated
 *
 * @summary Queries the information about a DataWorks workspace.
 *
 * @param request GetProjectDetailRequest
 * @return GetProjectDetailResponse
 */
// Deprecated
async function getProjectDetail(request: GetProjectDetailRequest): GetProjectDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProjectDetailWithOptions(request, runtime);
}

model GetQualityEntityRequest {
  envType?: string(name='EnvType', description='The type of the compute engine or data source. Valid values:

*   cdh
*   analyticdb_for_mysql
*   odps
*   emr
*   hadoop
*   holodb
*   hybriddb_for_postgresql

This parameter is required.', example='odps'),
  matchExpression?: string(name='MatchExpression', description='The partition filter expression.', example='dt=$[yyyymmdd]'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.', example='12345'),
  projectName?: string(name='ProjectName', description='The name of the compute engine instance or data source. You can obtain the name from data source configurations.

This parameter is required.', example='autotest'),
  tableName?: string(name='TableName', description='The name of the partitioned table. You can call the [GetMetaTablePartition](https://help.aliyun.com/document_detail/173923.html) operation to obtain the name.

This parameter is required.', example='dual'),
}

model GetQualityEntityResponseBody = {
  data?: [ 
    {
      createTime?: long(name='CreateTime', description='The time when the partition filter expression was created.', example='1593964800000'),
      entityLevel?: int32(name='EntityLevel', description='The level of the partition filter expression. Valid values:

*   0: The partition filter expression is at the SQL level. This indicates that the system checks data quality after each SQL statement is executed.
*   1: The partition filter expression is at the node level. This indicates that the system checks data quality after all the SQL statements for a node are executed.', example='0'),
      envType?: string(name='EnvType', description='The type of the compute engine instance or data source.', example='odps'),
      followers?: string(name='Followers', description='The ID of the Alibaba Cloud account that is used to receive alert notifications.', example='1822931****'),
      hasRelativeNode?: boolean(name='HasRelativeNode', description='Indicates whether the partition filter expression is associated with a node. Valid values:

*   true: The partition filter expression is associated with a node.
*   false: The partition filter expression is not associated with a node.', example='true'),
      id?: long(name='Id', description='The ID of the partition filter expression.', example='4003918'),
      matchExpression?: string(name='MatchExpression', description='The partition filter expression.', example='dt=$[yyyymmdd-1]'),
      modifyTime?: long(name='ModifyTime', description='The time when the partition filter expression was modified.', example='1593964800000'),
      modifyUser?: string(name='ModifyUser', description='The ID of the Alibaba Cloud account that is used to modify the partition filter expression.', example='1822931****'),
      onDuty?: string(name='OnDuty', description='The ID of the Alibaba Cloud account that is used to configure the partition filter expression.', example='1822931****'),
      onDutyAccountName?: string(name='OnDutyAccountName', description='The name of the Alibaba Cloud account that is used to configure the partition filter expression.', example='test'),
      projectName?: string(name='ProjectName', description='The name of the compute engine instance or data source.', example='autotest'),
      relativeNode?: string(name='RelativeNode', description='The information about the node with which the partition filter expression is associated. The information includes the following items:

*   ProjectName: the name of the workspace to which the node belongs.
*   NodeID: the ID of the node.', example='[{"projectName":"xc_DP****","nodeId":7000026****}]'),
      sql?: int32(name='Sql', description='Indicates that the partition filter expression is at the SQL level.', example='0'),
      tableName?: string(name='TableName', description='The name of the partitioned table.', example='test_dqc_de****'),
      task?: int32(name='Task', description='The node.', example='0'),
    }
  ](name='Data', description='The information about the partition filter expression.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='401'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6d739ef6-098a-47****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetQualityEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetQualityEntityResponseBody(name='body'),
}

/**
 * @param request GetQualityEntityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetQualityEntityResponse
 */
async function getQualityEntityWithOptions(request: GetQualityEntityRequest, runtime: Util.RuntimeOptions): GetQualityEntityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.matchExpression)) {
    body['MatchExpression'] = request.matchExpression;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.tableName)) {
    body['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetQualityEntity',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @param request GetQualityEntityRequest
 * @return GetQualityEntityResponse
 */
async function getQualityEntity(request: GetQualityEntityRequest): GetQualityEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return getQualityEntityWithOptions(request, runtime);
}

model GetQualityFollowerRequest {
  entityId?: long(name='EntityId', description='The ID of the partition filter expression.

This parameter is required.', example='1234'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.', example='27'),
  projectName?: string(name='ProjectName', description='The name of the engine or data source.

This parameter is required.', example='autotest'),
}

model GetQualityFollowerResponseBody = {
  data?: [ 
    {
      alarmMode?: int32(name='AlarmMode', description='The alert mode. The value is as follows:

- 1 (Mail)
- 2 (email and SMS)
- 4 (DingTalk groups of robots or hook)
- 5 (DingTalk groups of robots @ ALL)', example='1'),
      createTime?: long(name='CreateTime', description='The time when the data quality rule subscription configuration was created.', example='1541576644000'),
      entityId?: string(name='EntityId', description='The ID of the partition expression.', example='1234'),
      follower?: string(name='Follower', description='The subscriber to receive alert information.', example='1234'),
      followerAccountName?: string(name='FollowerAccountName', description='The Alibaba Cloud account name of the subscriber.', example='test'),
      id?: long(name='Id', description='The ID of the subscription relationship.', example='123'),
      modifyTime?: long(name='ModifyTime', description='The update time of the data quality rule subscription configuration.', example='1541576644000'),
      projectName?: string(name='ProjectName', description='The name of the engine or data source.', example='autotest'),
      tableName?: string(name='TableName', description='The name of the partitioned table.', example='dual'),
    }
  ](name='Data', description='The information about the subscription relationship.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP return code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='38cbdef0-f6cf-49'),
  success?: boolean(name='Success', description='Whether the call is successful.', example='true'),
}

model GetQualityFollowerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetQualityFollowerResponseBody(name='body'),
}

/**
 * @summary Queries the subscribers of a partition filter expression.
 *
 * @param request GetQualityFollowerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetQualityFollowerResponse
 */
async function getQualityFollowerWithOptions(request: GetQualityFollowerRequest, runtime: Util.RuntimeOptions): GetQualityFollowerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetQualityFollower',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the subscribers of a partition filter expression.
 *
 * @param request GetQualityFollowerRequest
 * @return GetQualityFollowerResponse
 */
async function getQualityFollower(request: GetQualityFollowerRequest): GetQualityFollowerResponse {
  var runtime = new Util.RuntimeOptions{};
  return getQualityFollowerWithOptions(request, runtime);
}

model GetQualityRuleRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='12345'),
  projectName?: string(name='ProjectName', description='The name of the compute engine or data source.

This parameter is required.', example='autotest'),
  ruleId?: long(name='RuleId', description='The monitoring rule ID. You can call the [ListQualityRules](https://help.aliyun.com/document_detail/173995.html) operation to query the ID.

This parameter is required.', example='1234'),
}

model GetQualityRuleResponseBody = {
  data?: {
    blockType?: int32(name='BlockType', description='The strength of the monitoring rule. The strength of a monitoring rule indicates the importance of the rule. Valid values:

*   1: the monitoring rule is a strong rule.
*   0: the monitoring rule is a weak rule. You can specify whether a monitoring rule is a strong rule based on your business requirements. If a monitoring rule is a strong rule and the critical threshold is exceeded, a critical alert is reported and tasks that are associated with the rule are blocked from running.', example='1'),
    checker?: int32(name='Checker', description='The checker ID. The value of this parameter corresponds to the ID at the frontend and is converted from the ID of the primary key.', example='9'),
    checkerName?: string(name='CheckerName', description='The name of the checker.', example='compared with a fixed value'),
    comment?: string(name='Comment', description='The description of the monitoring rule.'),
    criticalThreshold?: string(name='CriticalThreshold', description='The threshold for a critical alert. The threshold indicates the deviation of the check result from the expected value. You can specify a value for the threshold based on your business requirements. If a monitoring rule is a strong rule and the critical threshold is exceeded, a critical alert is reported and tasks that are associated with the rule are blocked from running.', example='20'),
    entityId?: long(name='EntityId', description='The ID of the partition filter expression.', example='165523'),
    expectValue?: string(name='ExpectValue', description='The expected value.', example='30'),
    fixCheck?: boolean(name='FixCheck', description='Indicates whether the monitoring is performed based on a fixed value.', example='true'),
    id?: long(name='Id', description='The monitoring rule ID.', example='123232'),
    methodId?: int32(name='MethodId', description='The ID of the task that is associated with the partition filter expression.', example='8'),
    methodName?: string(name='MethodName', description='The method that is used to collect sample data, such as avg, count, sum, min, max, count_distinct, user_defined, table_count, table_size, table_dt_load_count, table_dt_refuseload_count, null_value, null_value/table_count, (table_count-count_distinct)/table_count, or table_count-count_distinct.', example='table_count'),
    onDuty?: string(name='OnDuty', description='The ID of the Alibaba Cloud account that is used to configure the monitoring rule.', example='1822931****'),
    onDutyAccountName?: string(name='OnDutyAccountName', description='The name of the Alibaba Cloud account that is used to configure the monitoring rule.', example='test'),
    openSwitch?: boolean(name='OpenSwitch', description='Indicates whether the monitoring rule is enabled.', example='true'),
    operator?: string(name='Operator', description='The comparison operator of the monitoring rule.', example='>='),
    predictType?: int32(name='PredictType', description='Indicates whether the threshold is a dynamic threshold. Valid values:

*   0: The threshold is not a dynamic threshold.
*   1: The threshold is a dynamic threshold.', example='0'),
    property?: string(name='Property', description='The field whose data quality is checked based on the monitoring rule. This field is a column in the data source table that is monitored.', example='id'),
    ruleName?: string(name='RuleName', description='The name of the monitoring rule.'),
    ruleType?: int32(name='RuleType', description='The type of the monitoring rule.', example='0'),
    taskSetting?: string(name='TaskSetting'),
    templateId?: int32(name='TemplateId', description='The ID of the monitoring template.', example='7'),
    templateName?: string(name='TemplateName', description='The name of the monitoring template.', example='SQL task table rows, 1,7, 30 days fluctuation test'),
    trend?: string(name='Trend', description='The trend of the check result.', example='abs'),
    warningThreshold?: string(name='WarningThreshold', description='The threshold for a warning alert. The threshold indicates the deviation of the check result from the expected value. You can customize this threshold based on your business requirements.', example='10'),
    whereCondition?: string(name='WhereCondition', description='The filter condition or custom SQL statement that is used for monitoring.', example='id>10'),
  }(name='Data', description='The information about the monitoring rule.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='401'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='576b9457-2cf5-4****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetQualityRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetQualityRuleResponseBody(name='body'),
}

/**
 * @summary Queries the information about a monitoring rule.
 *
 * @param request GetQualityRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetQualityRuleResponse
 */
async function getQualityRuleWithOptions(request: GetQualityRuleRequest, runtime: Util.RuntimeOptions): GetQualityRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.ruleId)) {
    body['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetQualityRule',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about a monitoring rule.
 *
 * @param request GetQualityRuleRequest
 * @return GetQualityRuleResponse
 */
async function getQualityRule(request: GetQualityRuleRequest): GetQualityRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getQualityRuleWithOptions(request, runtime);
}

model GetRemindRequest {
  remindId?: long(name='RemindId', description='The custom alert rule ID.

This parameter is required.', example='1234'),
}

model GetRemindResponseBody = {
  data?: {
    alertInterval?: int32(name='AlertInterval', description='The minimum interval at which alerts are reported. Unit: seconds.', example='1800'),
    alertMethods?: [ string ](name='AlertMethods', description='The alert notification method.'),
    alertTargets?: [ string ](name='AlertTargets', description='The description of the alert recipient.'),
    alertUnit?: string(name='AlertUnit', description='The recipient of the alert. Valid values: OWNER and OTHER. The value OWNER indicates the node owner. The value OTHER indicates a specified user.', example='OWNER'),
    allowNodes?: [ long ](name='AllowNodes', description='The alert whitelist.'),
    baselines?: [ 
      {
        baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
        baselineName?: string(name='BaselineName', description='The name of the baseline.', example='Baseline name'),
      }
    ](name='Baselines', description='The baselines to which the custom alert rule is applied. This parameter is returned if the value of the RemindUnit parameter is BASELINE.'),
    bizProcesses?: [ 
      {
        bizId?: long(name='BizId', description='The ID of the workflow.', example='9527'),
        bizProcessName?: string(name='BizProcessName', description='The name of the workflow.', example='Business process name'),
      }
    ](name='BizProcesses', description='The workflows to which the custom alert rule is applied. This parameter is returned if the value of the RemindUnit parameter is BIZPROCESS.'),
    detail?: string(name='Detail', description='*   If the value of the RemindType parameter is FINISHED, this parameter is left empty.
*   If the value of the RemindType parameter is UNFINISHED, the trigger conditions are returned as key-value pairs. Example: {"hour":23,"minu":59}. Valid values of hour: [0,47]. Valid values of minu: [0,59].
*   If the value of the RemindType parameter is ERROR, this parameter is left empty.
*   If the value of the RemindType parameter is CYCLE_UNFINISHED, the trigger conditions are returned as key-value pairs. Example: {"1":"05:50","2":"06:50","3":"07:50","4":"08:50","5":"09:50","6":"10:50","7":"11:50","8":"12:50","9":"13:50","10":"14:50","11":"15:50","12":"16:50","13":"17:50","14":"18:50","15":"19:50","16":"20:50","17":"21:50","18":"22:50","19":"23:50","20":"24:50","21":"25:50"}. The key indicates the ID of the cycle. Valid values: [1,288]. The value indicates the timeout period of the node that is running in the cycle. Specify the value in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].
*   If the value of the RemindType parameter is TIMEOUT, the timeout period is returned. Unit: seconds. Example: 1800. This value indicates that an alert is reported if the node has run for more than 30 minutes.', example='{"hour":23,"minu":59}'),
    dndEnd?: string(name='DndEnd', description='The end time of the quiet hours. The value is in the hh:mm format. Valid values of hh: [0,23]. Valid values of mm: [0,59].', example='08:00'),
    dndStart?: string(name='DndStart', description='The start time of the quiet hours. The value is in the hh:mm format. Valid values of hh: [0,23]. Valid values of mm: [0,59].', example='00:00'),
    founder?: string(name='Founder', description='The ID of the Alibaba Cloud account used by the creator of the custom alert rule.', example='9527951795****'),
    maxAlertTimes?: int32(name='MaxAlertTimes', description='The maximum number of alerts.', example='3'),
    nodes?: [ 
      {
        nodeId?: long(name='NodeId', description='The node ID.', example='1234'),
        nodeName?: string(name='NodeName', description='The name of the node.', example='Node name'),
        owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the node owner.', example='9527951795****'),
        projectId?: long(name='ProjectId', description='The ID of the workspace to which the node belongs.', example='1234'),
      }
    ](name='Nodes', description='The nodes to which the custom alert rule is applied. This parameter is returned if the value of the RemindUnit parameter is NODE.'),
    projects?: [ 
      {
        projectId?: long(name='ProjectId', description='The workspace ID.', example='1234'),
      }
    ](name='Projects', description='The workspaces to which the custom alert rule is applied. This parameter is returned if the value of the RemindUnit parameter is PROJECT.'),
    receivers?: [ 
      {
        alertTargets?: [ string ](name='AlertTargets', description='The alert acceptance object.'),
        alertUnit?: string(name='AlertUnit', description='The type of the alarm receiving object. For more information, see Receivers.
- OWNER (task OWNER)
- OTHER (designated person)
- SHIFT_SCHEDULE', example='OWNER'),
      }
    ](name='Receivers', description='Alert recipient information.'),
    remindId?: long(name='RemindId', description='The custom alert rule ID.', example='1234'),
    remindName?: string(name='RemindName', description='The name of the rule.', example='Rule name'),
    remindType?: string(name='RemindType', description='The conditions that trigger an alert. Valid values: FINISHED, UNFINISHED, ERROR, CYCLE_UNFINISHED, and TIMEOUT.', example='FINISHED'),
    remindUnit?: string(name='RemindUnit', description='The type of the object to which the custom alert rule is applied. Valid values: NODE, BASELINE, PROJECT, and BIZPROCESS. The value NODE indicates a node. The value BASELINE indicates a baseline. The value PROJECT indicates a workspace. The value BIZPROCESS indicates a workflow.', example='NODE'),
    robots?: [ 
      {
        atAll?: boolean(name='AtAll', description='Indicates whether all group members are notified when the alert notification is sent to a DingTalk group. Valid values: true and false.', example='true'),
        webUrl?: string(name='WebUrl', description='The webhook URL of the DingTalk chatbot.', example='https://oapi.dingtalk.com/robot/send?access_token=******************************'),
      }
    ](name='Robots', description='The webhook URLs of the DingTalk chatbots.'),
    useflag?: boolean(name='Useflag', description='Indicates whether the custom alert rule is enabled. Valid values: true and false.', example='true'),
    webhooks?: [ string ](name='Webhooks', description='The information about the webhook URL.'),
  }(name='Data', description='The details of the custom alert rule.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFGH-IJKLMNOPQ'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetRemindResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRemindResponseBody(name='body'),
}

/**
 * @summary Queries the information about a custom alert rule.
 *
 * @description ## Debugging
 * [OpenAPI Explorer automatically calculates the signature value. For your convenience, we recommend that you call this operation in OpenAPI Explorer. OpenAPI Explorer dynamically generates the sample code of the operation for different SDKs.](https://api.aliyun.com/#product=dataworks-public\\&api=GetRemind\\&type=RPC\\&version=2020-05-18)
 *
 * @param request GetRemindRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRemindResponse
 */
async function getRemindWithOptions(request: GetRemindRequest, runtime: Util.RuntimeOptions): GetRemindResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.remindId)) {
    body['RemindId'] = request.remindId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetRemind',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about a custom alert rule.
 *
 * @description ## Debugging
 * [OpenAPI Explorer automatically calculates the signature value. For your convenience, we recommend that you call this operation in OpenAPI Explorer. OpenAPI Explorer dynamically generates the sample code of the operation for different SDKs.](https://api.aliyun.com/#product=dataworks-public\\&api=GetRemind\\&type=RPC\\&version=2020-05-18)
 *
 * @param request GetRemindRequest
 * @return GetRemindResponse
 */
async function getRemind(request: GetRemindRequest): GetRemindResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRemindWithOptions(request, runtime);
}

model GetSensitiveDataRequest {
  name?: string(name='Name', description='The parameters that you can configure to query the access records. Valid values:

*   dbType
*   instanceName
*   databaseName
*   projectName
*   clusterName

The sample value shows the parameters configured to query the access records of the sensitive data in the abc database of the Hologres instance ABC. You must configure the parameters based on the compute engine that you use in your business.

This parameter is required.', example='[ {"dbType":"hologres","instanceName":"ABC","databaseName":"abc"}, {"dbType":"ODPS.ODPS","projectName":"adbc"} ]'),
  pageNo?: int32(name='PageNo', description='The page number. Pages start from page 1.

This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: 1000.

This parameter is required.', example='1000'),
}

model GetSensitiveDataResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
  sensitiveData?: map[string]any(name='SensitiveData', description='The information about the sensitive data returned. The information includes totalCount and sensDatas. sensDatas includes the following parameters:

*   guid: the ID of the metadata of the tenant. For example, the ID of the metadata in the MaxCompute compute engine is in the Project name.Table name.Column name format.
*   sensType: the type of the sensitive data.
*   sensLevel: the sensitivity level of the sensitive data'),
}

model GetSensitiveDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSensitiveDataResponseBody(name='body'),
}

/**
 * @summary Queries the latest sensitive data in all the DataWorks workspaces of a tenant.
 *
 * @param request GetSensitiveDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSensitiveDataResponse
 */
async function getSensitiveDataWithOptions(request: GetSensitiveDataRequest, runtime: Util.RuntimeOptions): GetSensitiveDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSensitiveData',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the latest sensitive data in all the DataWorks workspaces of a tenant.
 *
 * @param request GetSensitiveDataRequest
 * @return GetSensitiveDataResponse
 */
async function getSensitiveData(request: GetSensitiveDataRequest): GetSensitiveDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSensitiveDataWithOptions(request, runtime);
}

model GetSuccessInstanceTrendRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.

This parameter is required.', example='9527'),
}

model GetSuccessInstanceTrendResponseBody = {
  instanceStatusTrend?: {
    avgTrend?: [ 
      {
        count?: int32(name='Count', description='The number of instances.', example='10'),
        timePoint?: string(name='TimePoint', description='The point in time. Valid values: 00:00 to 23:00.', example='01:00'),
      }
    ](name='AvgTrend', description='The average trend.'),
    todayTrend?: [ 
      {
        count?: int32(name='Count', description='The number of instances.', example='10'),
        timePoint?: string(name='TimePoint', description='The point in time. Valid values: 00:00 to 23:00.', example='01:00'),
      }
    ](name='TodayTrend', description='The trend on the current day.'),
    yesterdayTrend?: [ 
      {
        count?: int32(name='Count', description='The number of instances.', example='10'),
        timePoint?: string(name='TimePoint', description='The point in time. Valid values: 00:00 to 23:00.', example='01:00'),
      }
    ](name='YesterdayTrend', description='The trend on the previous day.'),
  }(name='InstanceStatusTrend', description='The trend of statistics on the instance status in different time periods.'),
  requestId?: string(name='RequestId', description='The request ID.', example='952795279527ab****'),
}

model GetSuccessInstanceTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSuccessInstanceTrendResponseBody(name='body'),
}

/**
 * @deprecated OpenAPI GetSuccessInstanceTrend is deprecated
 *
 * @summary Queries the statistics of instances in different periods of a day.
 *
 * @param request GetSuccessInstanceTrendRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSuccessInstanceTrendResponse
 */
// Deprecated
async function getSuccessInstanceTrendWithOptions(request: GetSuccessInstanceTrendRequest, runtime: Util.RuntimeOptions): GetSuccessInstanceTrendResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSuccessInstanceTrend',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @deprecated OpenAPI GetSuccessInstanceTrend is deprecated
 *
 * @summary Queries the statistics of instances in different periods of a day.
 *
 * @param request GetSuccessInstanceTrendRequest
 * @return GetSuccessInstanceTrendResponse
 */
// Deprecated
async function getSuccessInstanceTrend(request: GetSuccessInstanceTrendRequest): GetSuccessInstanceTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSuccessInstanceTrendWithOptions(request, runtime);
}

model GetTopicRequest {
  topicId?: long(name='TopicId', description='The event ID. You can call the [ListTopics](https://help.aliyun.com/document_detail/173973.html) operation to query the ID.

This parameter is required.', example='1234'),
}

model GetTopicResponseBody = {
  data?: {
    addTime?: long(name='AddTime', description='The timestamp when the event was found.', example='1553524393000'),
    alertTime?: long(name='AlertTime', description='The timestamp when the first alert was reported.', example='1553524393000'),
    assigner?: string(name='Assigner', description='The ID of the Alibaba Cloud account used by the alert recipient.', example='952795****'),
    baselineBuffer?: long(name='BaselineBuffer', description='The margin of the worst baseline instance. Unit: seconds.', example='3600'),
    baselineId?: long(name='BaselineId', description='The ID of the baseline to which the worst baseline instance belongs.', example='1234'),
    baselineInGroupId?: int32(name='BaselineInGroupId', description='The ID of the cycle of the worst baseline instance.', example='1'),
    baselineName?: string(name='BaselineName', description='The name of the baseline to which the worst baseline instance belongs.', example='Baseline name'),
    baselineStatus?: string(name='BaselineStatus', description='The status of the baseline. Valid values: ERROR, SAFE, DANGROUS, and OVER. The value ERROR indicates that no nodes are associated with the baseline, or all nodes associated with the baseline are suspended. The value SAFE indicates that nodes are run before the alert duration begins. The value DANGROUS indicates that nodes are still running after the alert duration ends but the committed completion time does not arrive. The value OVER indicates that nodes are still running after the committed completion time.', example='SAFE'),
    buffer?: long(name='Buffer', description='The margin of the event. Unit: seconds.', example='1200'),
    dealTime?: long(name='DealTime', description='The timestamp when the event was last processed.', example='1553524393000'),
    dealUser?: string(name='DealUser', description='The ID of the Alibaba Cloud account used by the user who last processed the event.', example='952795****'),
    fixTime?: long(name='FixTime', description='The timestamp when the event was processed.', example='1553524393000'),
    happenTime?: long(name='HappenTime', description='The timestamp when the event occurred. A time difference may exist between the time when the event occurred and the time when the event was found.', example='1553524393000'),
    instanceId?: long(name='InstanceId', description='The ID of the instance that triggered the event.', example='12345'),
    nextAlertTime?: long(name='NextAlertTime', description='The timestamp when the system reports the next alert.', example='1553524393000'),
    nodeId?: long(name='NodeId', description='The ID of the node that triggered the event.', example='1234'),
    nodeName?: string(name='NodeName', description='The name of the node that triggered the event.', example='Node name'),
    owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the event owner.', example='952795****'),
    projectId?: long(name='ProjectId', description='The ID of the workspace to which the node that triggered the event belongs.', example='1234'),
    topicId?: long(name='TopicId', description='The event ID.', example='1234'),
    topicName?: string(name='TopicName', description='The name of the event.', example='1234 error'),
    topicStatus?: string(name='TopicStatus', description='The status of the event. Valid values: IGNORE, NEW, FIXING, and RECOVER.', example='FIXING'),
    topicType?: string(name='TopicType', description='The type of the event. Valid values: SLOW and ERROR. The value SLOW indicates that the duration of the task is significantly longer than the average duration of the task in previous cycles. The value ERROR indicates that the task fails to run.', example='ERROR'),
  }(name='Data', description='The details of the event.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFGH-IJKLMNOPQ'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTopicResponseBody(name='body'),
}

/**
 * @summary Queries the information about an event.
 *
 * @description ****
 *
 * @param request GetTopicRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTopicResponse
 */
async function getTopicWithOptions(request: GetTopicRequest, runtime: Util.RuntimeOptions): GetTopicResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.topicId)) {
    body['TopicId'] = request.topicId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTopic',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about an event.
 *
 * @description ****
 *
 * @param request GetTopicRequest
 * @return GetTopicResponse
 */
async function getTopic(request: GetTopicRequest): GetTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTopicWithOptions(request, runtime);
}

model GetTopicInfluenceRequest {
  topicId?: long(name='TopicId', description='The ID of the event.

This parameter is required.', example='1234'),
}

model GetTopicInfluenceResponseBody = {
  data?: {
    influences?: [ 
      {
        baselineId?: long(name='BaselineId', description='The ID of the baseline.', example='12345'),
        baselineName?: string(name='BaselineName', description='The name of the baseline.', example='Baseline name'),
        bizdate?: long(name='Bizdate', description='The data timestamp of the baseline instance.', example='1553356800000'),
        buffer?: long(name='Buffer', description='The margin of the baseline instance. Unit: seconds.', example='360'),
        inGroupId?: int32(name='InGroupId', description='The ID of the cycle of the baseline instance. For a baseline instance that is scheduled by day, the field value is 1. For a baseline instance that is scheduled by hour, the field value ranges from 1 to 24.', example='1'),
        owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the baseline owner. Multiple IDs are separated by commas (,).', example='952795****'),
        priority?: int32(name='Priority', description='The priority of the baseline. Valid values: 1, 2, 5, 7, and 8.', example='1'),
        projectId?: long(name='ProjectId', description='The ID of the workspace to which the baseline belongs.', example='1234'),
        status?: string(name='Status', description='The status of the baseline. Valid values: ERROR, SAFE, DANGROUS, and OVER. The value ERROR indicates that no nodes are associated with the baseline, or all nodes associated with the baseline are suspended. The value SAFE indicates that nodes are run before the alert duration begins. The value DANGROUS indicates that nodes are still running after the alert duration ends but the committed time does not arrive. The value OVER indicates that nodes are still running after the committed time.', example='SAFE'),
      }
    ](name='Influences', description='The list of affected baseline instances.'),
    topicId?: long(name='TopicId', description='The ID of the event.', example='1234'),
  }(name='Data', description='The list of baseline instances affected by the event.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetTopicInfluenceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTopicInfluenceResponseBody(name='body'),
}

/**
 * @summary Queries baseline instances affected by an event.
 *
 * @description ## Debugging
 * [OpenAPI Explorer automatically calculates the signature value. For your convenience, we recommend that you call this operation in OpenAPI Explorer. OpenAPI Explorer dynamically generates the sample code of the operation for different SDKs.](https://api.aliyun.com/#product=dataworks-public\\&api=GetTopicInfluence\\&type=RPC\\&version=2020-05-18)
 *
 * @param request GetTopicInfluenceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTopicInfluenceResponse
 */
async function getTopicInfluenceWithOptions(request: GetTopicInfluenceRequest, runtime: Util.RuntimeOptions): GetTopicInfluenceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.topicId)) {
    body['TopicId'] = request.topicId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTopicInfluence',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries baseline instances affected by an event.
 *
 * @description ## Debugging
 * [OpenAPI Explorer automatically calculates the signature value. For your convenience, we recommend that you call this operation in OpenAPI Explorer. OpenAPI Explorer dynamically generates the sample code of the operation for different SDKs.](https://api.aliyun.com/#product=dataworks-public\\&api=GetTopicInfluence\\&type=RPC\\&version=2020-05-18)
 *
 * @param request GetTopicInfluenceRequest
 * @return GetTopicInfluenceResponse
 */
async function getTopicInfluence(request: GetTopicInfluenceRequest): GetTopicInfluenceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTopicInfluenceWithOptions(request, runtime);
}

model ImportDataSourcesRequest {
  dataSources?: string(name='DataSources', description='The configurations of the data sources that you want to import. The Name, DataSourceType, SubType, Description, Content, and EnvType parameters are required. For more information about the parameters, see [CreateDataSource](https://help.aliyun.com/document_detail/211429.html).

This parameter is required.', example='[{"SubType":"","DataSourceType":"mysql","EnvType":1,"Name":"mysql_dms2","Description":"aaa","Content":"{\\\\"database\\\\":\\\\"mysql_chengdu_old\\\\",\\\\"password\\\\":\\\\"***\\\\",\\\\"instanceName\\\\":\\\\"rm-2vcrckb37163g7l3w\\\\",\\\\"regionId\\\\":\\\\"cn-chengdu\\\\",\\\\"tag\\\\":\\\\"rds\\\\",\\\\"rdsOwnerId\\\\":\\\\"333\\\\",\\\\"username\\\\":\\\\"mysql_chengdu2\\\\"}"},{"SubType":"","DataSourceType":"mysql","EnvType":1,"Name":"mysql_dms2","Description":"aaa","Content":"{\\\\"database\\\\":\\\\"mysql_chengdu_old\\\\",\\\\"password\\\\":\\\\"***\\\\",\\\\"instanceName\\\\":\\\\"rm-2vcrckb37163g7l3w\\\\",\\\\"regionId\\\\":\\\\"cn-chengdu\\\\",\\\\"tag\\\\":\\\\"rds\\\\",\\\\"rdsOwnerId\\\\":\\\\"143\\\\",\\\\"username\\\\":\\\\"mysql_chengdu2\\\\"}"}]'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the ID.

This parameter is required.', example='10000'),
}

model ImportDataSourcesResponseBody = {
  data?: {
    message?: string(name='Message', description='The reason why the data sources failed to be imported. If the data sources were imported, this parameter is left empty.', example='Data source DEV XXX already exists'),
    status?: boolean(name='Status', description='Indicates whether the data sources were imported. Valid values:

*   true: All data sources were imported.
*   false: Specific data sources failed to be imported. You can troubleshoot issues based on the Message parameter.', example='true'),
  }(name='Data', description='The information about the imported data sources.'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model ImportDataSourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportDataSourcesResponseBody(name='body'),
}

/**
 * @summary Imports data sources from your on-premises machine to a specific DataWorks workspace.
 *
 * @description You can import self-managed data sources or data sources that are exported from other DataWorks workspaces to a specific DataWorks workspace.
 * *   To import a self-managed data source to a DataWorks workspace, the data source type must be supported by DataWorks. For more information about the types of data sources supported by DataWorks, see [Supported data stores](https://help.aliyun.com/document_detail/181656.html).
 * *   For more information about how to export data sources from DataWorks workspaces to your on-premises machine, see [ExportDataSources](https://help.aliyun.com/document_detail/279570.html).
 *
 * @param request ImportDataSourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ImportDataSourcesResponse
 */
async function importDataSourcesWithOptions(request: ImportDataSourcesRequest, runtime: Util.RuntimeOptions): ImportDataSourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataSources)) {
    query['DataSources'] = request.dataSources;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ImportDataSources',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Imports data sources from your on-premises machine to a specific DataWorks workspace.
 *
 * @description You can import self-managed data sources or data sources that are exported from other DataWorks workspaces to a specific DataWorks workspace.
 * *   To import a self-managed data source to a DataWorks workspace, the data source type must be supported by DataWorks. For more information about the types of data sources supported by DataWorks, see [Supported data stores](https://help.aliyun.com/document_detail/181656.html).
 * *   For more information about how to export data sources from DataWorks workspaces to your on-premises machine, see [ExportDataSources](https://help.aliyun.com/document_detail/279570.html).
 *
 * @param request ImportDataSourcesRequest
 * @return ImportDataSourcesResponse
 */
async function importDataSources(request: ImportDataSourcesRequest): ImportDataSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return importDataSourcesWithOptions(request, runtime);
}

model ListAlertMessagesRequest {
  alertMethods?: string(name='AlertMethods', description='The notification method. Valid values:

*   MAIL
*   SMS Alert notifications can be sent by text message only in the Singapore, Malaysia (Kuala Lumpur), and Germany (Frankfurt) regions.

You can specify multiple notification methods. Separate them with commas (,).', example='SMS,MAIL,PHONE'),
  alertRuleTypes?: string(name='AlertRuleTypes', description='The type of the alert rule. Valid values: GLOBAL, USER_DEFINE, and OTHER. The value GLOBAL indicates that the alert rule is a global alert rule. The value USER_DEFINE indicates that the alert rule is customized by a user. The value OTHER indicates that the alert rule is a rule of another type. You can specify multiple types. Separate them with commas (,).', example='GLOBAL,USER_DEFINE,OTHER'),
  alertUser?: string(name='AlertUser', description='The ID of the Alibaba Cloud account used by the alert recipient.', example='123456'),
  baselineId?: long(name='BaselineId', description='The baseline ID. This parameter takes effect if the AlertRuleTypes parameter is set to GLOBAL. You can configure either this parameter or the RemindId parameter.', example='1234'),
  beginTime?: string(name='BeginTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-dd\\\\"T\\\\"HH:mm:ssZ format. The time must be in UTC.

This parameter is required.', example='2020-04-02T00:00:00+0800'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-dd\\\\"T\\\\"HH:mm:ssZ format. The time must be in UTC.

This parameter is required.', example='2020-04-04T00:00:00+0800'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1. Minimum value: 1. Maximum value: 30.

This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.

This parameter is required.', example='10'),
  remindId?: long(name='RemindId', description='The custom alert rule ID. This parameter takes effect if the AlertRuleTypes parameter is set to USER_DEFINE. You can configure either this parameter or the BaselineId parameter.', example='9527'),
}

model ListAlertMessagesResponseBody = {
  data?: {
    alertMessages?: [ 
      {
        alertId?: long(name='AlertId', description='The alert ID.', example='1234'),
        alertMessageStatus?: string(name='AlertMessageStatus', description='The sending status of the notification. Valid values: READY_TO_SEND, SEND_FAIL, SEND_SUCCESS, and SEND_OVERLIMIT. The value READY_TO_SEND indicates that the notification is waiting to be sent. The value SEND_FAIL indicates that the notification fails to be sent. The value SEND_SUCCESS indicates that the notification is sent. The value SEND_OVERLIMIT indicates that the number of notifications that are sent exceeds the upper limit.', example='READY_TO_SEND'),
        alertMethod?: string(name='AlertMethod', description='The notification method. Valid values: MAIL, SMS, and PHONE. Only DataWorks Professional Edition and more advanced editions support the PHONE notification method.', example='SMS'),
        alertTime?: long(name='AlertTime', description='The timestamp when the alert was reported.', example='1553531401000'),
        alertUser?: string(name='AlertUser', description='The ID of the Alibaba Cloud used by the alert recipient.', example='9527952795****'),
        content?: string(name='Content', description='The content of the alert.', example='Node error'),
        instances?: [ 
          {
            instanceId?: long(name='InstanceId', description='The instance ID.', example='12345'),
            nodeId?: long(name='NodeId', description='The node ID.', example='1234'),
            nodeName?: string(name='NodeName', description='The name of the node.', example='Node name'),
            projectId?: long(name='ProjectId', description='The ID of the workspace to which the node belongs.', example='1234'),
            status?: string(name='Status', description='The status of the instance. Valid values: NOT_RUN, WAIT_TIME, WAIT_RESOURCE, RUNNING, CHECKING, CHECKING_CONDITION, FAILURE, and SUCCESS. The value NOT_RUN indicates that the instance is not run. The value WAIT_TIME indicates that the instance is waiting to be run. The value WAIT_RESOURCE indicates that the instance is waiting for resources. The value RUNNING indicates that the instance is running. The value CHECKING indicates that data quality is being checked for the node for which the instance is generated. The value CHECKING_CONDITION indicates that branch conditions are being checked for the node for which the instance is generated. The value FAILURE indicates that the instance fails to run. The value SUCCESS indicates that the instance is successfully run.', example='NOT_RUN'),
          }
        ](name='Instances', description='The instances that triggered the custom alert rule. This parameter is returned if the value of the Source parameter is REMIND_ALERT. This parameter is left empty if the value of the Source parameter is not REMIND_ALERT.'),
        nodes?: [ 
          {
            nodeId?: long(name='NodeId', description='The node ID.', example='1234'),
            nodeName?: string(name='NodeName', description='The name of the node.', example='Node name'),
            owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the node owner.', example='95279527952****'),
            projectId?: long(name='ProjectId', description='The ID of the workspace to which the node belongs.', example='1234'),
          }
        ](name='Nodes', description='The nodes returned for different alert sources.

*   The nodes that form a loop are returned if the value of the Source parameter is NODE_CYCLE_ALERT.
*   The nodes that are isolated are returned if the value of the Source parameter is NODE_LONELY_ALERT.'),
        remindId?: long(name='RemindId', description='The ID of the custom alert rule that was triggered. This parameter is returned if the value of the Source parameter is REMIND_ALERT.', example='1234'),
        remindName?: string(name='RemindName', description='The name of the custom alert rule that was triggered. This parameter is returned if the value of the Source parameter is REMIND_ALERT.', example='Custom monitoring rule name'),
        slaAlert?: {
          baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
          baselineName?: string(name='BaselineName', description='The name of the baseline.', example='Baseline name'),
          baselineOwner?: string(name='BaselineOwner', description='The ID of the Alibaba Cloud account used by the baseline owner. Multiple IDs are separated by commas (,).', example='952795279****'),
          bizdate?: long(name='Bizdate', description='The data timestamp of the baseline instance.', example='1553443200000'),
          inGroupId?: int32(name='InGroupId', description='The ID of the cycle of the baseline instance. Valid values of the ID of an hour-level cycle: [1,24]. The ID of a day-level cycle is 1.', example='1'),
          projectId?: long(name='ProjectId', description='The ID of the workspace to which the baseline belongs.', example='1234'),
          status?: string(name='Status', description='The status of the baseline. Valid values: ERROR, SAFE, DANGEROUS, and OVER. The value ERROR indicates that no nodes are associated with the baseline, or all nodes associated with the baseline are suspended. The value SAFE indicates that nodes are run before the alert duration begins. The value DANGEROUS indicates that nodes are still running after the alert duration ends but the committed completion time does not arrive. The value OVER indicates that nodes are still running after the committed completion time.', example='SAFE'),
        }(name='SlaAlert', description='The basic information about the baseline instance that triggered an alert. This parameter is returned if the value of the Source parameter is SLA_ALERT. This parameter is left empty if the value of the Source parameter is not SLA_ALERT.'),
        source?: string(name='Source', description='The type of the alert. Valid values: REMIND_ALERT, TOPIC_ALERT, SLA_ALERT, NODE_CYCLE_ALERT, and NODE_LONELY_ALERT. The value REMIND_ALERT indicates that the alert is a custom alert. The value TOPIC_ALERT indicates that the alert is an event alert. The value SLA_ALERT indicates that the alert is a baseline alert. The value NODE_CYCLE_ALERT indicates that the alert is reported for a node dependency loop. The value NODE_LONELY_ALERT indicates that the alert is reported for isolated nodes.', example='REMIND_ALERT'),
        topics?: [ 
          {
            instanceId?: long(name='InstanceId', description='The ID of the instance that triggered the event.', example='12345'),
            nodeId?: long(name='NodeId', description='The ID of the node that triggered the event.', example='1234'),
            topicId?: long(name='TopicId', description='The event ID.', example='1234'),
            topicName?: string(name='TopicName', description='The name of the event.', example='9527 error'),
            topicOwner?: string(name='TopicOwner', description='The ID of the Alibaba Cloud account used by the event owner.', example='9527952795****'),
            topicStatus?: string(name='TopicStatus', description='The status of the event. Valid values: IGNORE, NEW, FIXING, and RECOVER. The value IGNORE indicates that the event is ignored. The value NEW indicates that the event is a new event. The value FIXING indicates that the event is being handled. The value RECOVER indicates that the event is handled.', example='FIXING'),
          }
        ](name='Topics', description='The events that triggered alerts. This parameter is returned if the value of the Source parameter is TOPIC_ALERT. This parameter is left empty if the value of the Source parameter is not TOPIC_ALERT.'),
      }
    ](name='AlertMessages', description='The alerts.'),
    pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
    pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: string(name='TotalCount', description='The total number of alerts returned.', example='100'),
  }(name='Data', description='The information about returned alerts.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListAlertMessagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAlertMessagesResponseBody(name='body'),
}

/**
 * @summary Queries a list of alerts.
 *
 * @param request ListAlertMessagesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAlertMessagesResponse
 */
async function listAlertMessagesWithOptions(request: ListAlertMessagesRequest, runtime: Util.RuntimeOptions): ListAlertMessagesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertMethods)) {
    body['AlertMethods'] = request.alertMethods;
  }
  if (!Util.isUnset(request.alertRuleTypes)) {
    body['AlertRuleTypes'] = request.alertRuleTypes;
  }
  if (!Util.isUnset(request.alertUser)) {
    body['AlertUser'] = request.alertUser;
  }
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.beginTime)) {
    body['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.remindId)) {
    body['RemindId'] = request.remindId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListAlertMessages',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of alerts.
 *
 * @param request ListAlertMessagesRequest
 * @return ListAlertMessagesResponse
 */
async function listAlertMessages(request: ListAlertMessagesRequest): ListAlertMessagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAlertMessagesWithOptions(request, runtime);
}

model ListBaselineConfigsRequest {
  baselineTypes?: string(name='BaselineTypes', description='The type of the baseline. Valid values: DAILY and HOURLY. Separate multiple baseline types with commas (,).', example='DAILY,HOURLY'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the baseline owner.', example='95279527****'),
  pageNumber?: int32(name='PageNumber', description='The page number. Valid values: 1 to 30. Default value: 1.

This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 100. Default value: 10.

This parameter is required.', example='10'),
  priority?: string(name='Priority', description='The priority of the baseline. Valid values: {1,3,5,7,8}. Separate multiple priorities with commas (,).', example='1,3,5,7,8'),
  projectId?: long(name='ProjectId', description='The workspace ID. You can call the ListProjects operation to query the ID.

This parameter is required.', example='1234'),
  searchText?: string(name='SearchText', description='The keyword in the baseline name, which is used to search for the baseline.', example='Baseline name search keywords'),
  useflag?: boolean(name='Useflag', description='Specifies whether to enable the baseline. Valid values: true and false.', example='true'),
}

model ListBaselineConfigsResponseBody = {
  data?: {
    baselines?: [ 
      {
        baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
        baselineName?: string(name='BaselineName', description='The name of the baseline.', example='Baseline name'),
        baselineType?: string(name='BaselineType', description='The type of the baseline. Valid values: DAILY and HOURLY.', example='DAILY'),
        expHour?: int32(name='ExpHour', description='The hour in the alerting time of the day-level baseline. Valid values: [0, 47].', example='7'),
        expMinu?: int32(name='ExpMinu', description='The minute in the alerting time of the day-level baseline. Valid values: [0, 59].', example='30'),
        hourExpDetail?: string(name='HourExpDetail', description='The alerting time of the hour-level baseline. This parameter is presented as key-value pairs in the JSON format. The key indicates the ID of the cycle, and the value is presented in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].', example='{"1":"03:28","2":"04:28","3":"05:28","4":"06:28","5":"07:28","6":"08:28","7":"09:28","8":"10:28","9":"11:28","10":"12:28","11":"13:28","12":"14:28","13":"15:28","14":"16:28","15":"17:28","16":"18:28","17":"19:28","18":"20:28","19":"21:28","20":"22:28","21":"23:28","22":"24:28","23":"25:28","24":"26:28"}'),
        hourSlaDetail?: string(name='HourSlaDetail', description='The committed completion time of the hour-level baseline. This parameter is presented as key-value pairs in the JSON format. The key indicates the ID of the cycle, and the value is presented in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].', example='{"1":"03:58","2":"04:58","3":"05:58","4":"06:58","5":"07:58","6":"08:58","7":"09:58","8":"10:58","9":"11:58","10":"12:58","11":"13:58","12":"14:58","13":"15:58","14":"16:58","15":"17:58","16":"18:58","17":"19:58","18":"20:58","19":"21:58","20":"22:58","21":"23:58","22":"24:58","23":"25:58","24":"26:58"}'),
        isDefault?: boolean(name='IsDefault', description='Indicates whether the baseline is a default baseline of the workspace. Valid values: true and false.', example='true'),
        owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the baseline owner. Multiple IDs can be specified. The IDs are separated by commas (,).', example='952795****'),
        priority?: int32(name='Priority', description='The priority of the baseline. Valid values: {1,3,5,7,8}.', example='1'),
        projectId?: long(name='ProjectId', description='The ID of the workspace to which the baseline belongs.', example='9527'),
        slaHour?: int32(name='SlaHour', description='The hour in the committed completion time of the day-level baseline. Valid values: [0, 47].', example='9'),
        slaMinu?: int32(name='SlaMinu', description='The minute in the alerting time of the day-level baseline. Valid values: [0, 59].', example='30'),
        useFlag?: boolean(name='UseFlag', description='Indicates whether the baseline is enabled. Valid values: true and false.', example='true'),
      }
    ](name='Baselines', description='The baselines.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of baselines returned.', example='100'),
  }(name='Data', description='The returned data.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListBaselineConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBaselineConfigsResponseBody(name='body'),
}

/**
 * @summary Queries a list of baselines.
 *
 * @param request ListBaselineConfigsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListBaselineConfigsResponse
 */
async function listBaselineConfigsWithOptions(request: ListBaselineConfigsRequest, runtime: Util.RuntimeOptions): ListBaselineConfigsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineTypes)) {
    body['BaselineTypes'] = request.baselineTypes;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.searchText)) {
    body['SearchText'] = request.searchText;
  }
  if (!Util.isUnset(request.useflag)) {
    body['Useflag'] = request.useflag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListBaselineConfigs',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of baselines.
 *
 * @param request ListBaselineConfigsRequest
 * @return ListBaselineConfigsResponse
 */
async function listBaselineConfigs(request: ListBaselineConfigsRequest): ListBaselineConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBaselineConfigsWithOptions(request, runtime);
}

model ListBaselineStatusesRequest {
  baselineTypes?: string(name='BaselineTypes', description='The type of the baseline. Valid values: DAILY and HOURLY. The value DAILY indicates that the baseline is scheduled by day. The value HOURLY indicates that the baseline is scheduled by hour. Multiple types are separated by commas (,).', example='DAILY,HOURLY'),
  bizdate?: string(name='Bizdate', description='The data timestamp of the baseline instance. Specify the time in the ISO 8601 standard in the yyyy-MM-dd\\\\"T\\\\"HH:mm:ssZ format. The time must be in UTC.

This parameter is required.', example='2020-07-07T00:00:00+0800'),
  finishStatus?: string(name='FinishStatus', description='The status of the baseline instance. Valid values: UNFINISH and FINISH. The value UNFINISH indicates that the baseline instance is still running. The value FINISH indicates that the baseline instance finishes running. Multiple states are separated by commas (,).', example='FINISH,UNFINISH'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the baseline owner.', example='9527952795****'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: 1 to 30. Default value: 1.

This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.

This parameter is required.', example='10'),
  priority?: string(name='Priority', description='The priority of the baseline. Valid values: 1, 3, 5, 7, and 8. Multiple priorities are separated by commas (,).', example='1,3,5,7,8'),
  searchText?: string(name='SearchText', description='The keyword of the baseline name used to search for the baseline.', example='Keyword of the baseline name'),
  status?: string(name='Status', description='The status of the baseline. Valid values: ERROR, SAFE, DANGEROUS, and OVER. The value ERROR indicates that no nodes are associated with the baseline, or all nodes associated with the baseline are suspended. The value SAFE indicates that nodes finish running before the alerting time. The value DANGEROUS indicates that nodes are still running after the alerting time but before the committed completion time. The value OVER indicates that nodes are still running after the committed completion time. Multiple states are separated by commas (,).', example='SAFE,DANGROUS,OVER'),
  topicId?: long(name='TopicId', description='The ID of the event.', example='1234'),
}

model ListBaselineStatusesResponseBody = {
  data?: {
    baselineStatuses?: [ 
      {
        baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
        baselineName?: string(name='BaselineName', description='The name of the baseline.', example='Baseline name'),
        bizdate?: long(name='Bizdate', description='The data timestamp.', example='1553443200000'),
        buffer?: long(name='Buffer', description='The margin of the baseline instance. Unit: seconds.', example='1800'),
        endCast?: long(name='EndCast', description='The timestamp of the predicted time when the baseline instance finished running.', example='1553531400000'),
        expTime?: long(name='ExpTime', description='The timestamp of the alerting time of the baseline instance.', example='1553531400000'),
        finishStatus?: string(name='FinishStatus', description='The status of the baseline instance. Valid values: UNFINISH and FINISH.', example='UNFINISH'),
        finishTime?: long(name='FinishTime', description='The timestamp of the actual time when the baseline instance finished running. This parameter is returned if the value of the FinishStatus parameter is FINISH.', example='1553531400000'),
        inGroupId?: int32(name='InGroupId', description='The ID of the cycle of the baseline instance. Valid values of the ID of an hour-level cycle: [1,24]. The ID of a day-level cycle is 1.', example='1'),
        owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the baseline owner. Multiple IDs are separated by commas (,).', example='9527952795****'),
        priority?: int32(name='Priority', description='The priority of the baseline. Valid values: {1,3,5,7,8}.', example='1'),
        projectId?: long(name='ProjectId', description='The ID of the workspace to which the baseline belongs.', example='1234'),
        slaTime?: long(name='SlaTime', description='The timestamp of the actual time when the baseline instance finished running.', example='1553531400000'),
        status?: string(name='Status', description='The status of the baseline. Valid values: ERROR, SAFE, DANGEROUS, and OVER. The value ERROR indicates that no nodes are associated with the baseline, or all nodes associated with the baseline are suspended. The value SAFE indicates that nodes are run before the alert duration begins. The value DANGEROUS indicates that nodes are still running after the alert duration ends but the committed completion time does not arrive. The value OVER indicates that nodes are still running after the committed completion time.', example='SAFE'),
      }
    ](name='BaselineStatuses', description='The list of baseline instances.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of baseline instances.', example='100'),
  }(name='Data', description='The data returned.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListBaselineStatusesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBaselineStatusesResponseBody(name='body'),
}

/**
 * @summary Queries a list of baseline instances.
 *
 * @param request ListBaselineStatusesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListBaselineStatusesResponse
 */
async function listBaselineStatusesWithOptions(request: ListBaselineStatusesRequest, runtime: Util.RuntimeOptions): ListBaselineStatusesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineTypes)) {
    body['BaselineTypes'] = request.baselineTypes;
  }
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.finishStatus)) {
    body['FinishStatus'] = request.finishStatus;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.searchText)) {
    body['SearchText'] = request.searchText;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.topicId)) {
    body['TopicId'] = request.topicId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListBaselineStatuses',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of baseline instances.
 *
 * @param request ListBaselineStatusesRequest
 * @return ListBaselineStatusesResponse
 */
async function listBaselineStatuses(request: ListBaselineStatusesRequest): ListBaselineStatusesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBaselineStatusesWithOptions(request, runtime);
}

model ListBaselinesRequest {
  baselineTypes?: string(name='BaselineTypes', description='The type of the baseline. Valid values: DAILY and HOURLY. You can specify multiple types. Separate multiple types with commas (,).', example='DAILY'),
  enable?: boolean(name='Enable', description='Specifies whether to enable the baseline. Valid values: true and false.', example='true'),
  owner?: string(name='Owner', description='The owner.', example='3726346****'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1. Maximum value: 30.

This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.

This parameter is required.', example='100'),
  priority?: string(name='Priority', description='The priority of the baseline. Valid values: {1,3,5,7,8}.', example='1'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='123456'),
  searchText?: string(name='SearchText', description='The keyword in the baseline name, which is used to search for the baseline.', example='baselineName'),
}

model ListBaselinesResponseBody = {
  data?: {
    baselines?: [ 
      {
        alertEnabled?: boolean(name='AlertEnabled', description='Indicates whether the alerting feature is enabled. Valid values: true and false.', example='true'),
        alertMarginThreshold?: int32(name='AlertMarginThreshold', description='The alert margin threshold for the baseline instance. Unit: minutes.', example='30'),
        baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
        baselineName?: string(name='BaselineName', description='The name of the baseline.', example='BaselineName'),
        baselineType?: string(name='BaselineType', description='The type of the baseline. Valid values: DAILY and HOURLY.', example='DAILY'),
        enabled?: boolean(name='Enabled', description='Indicates whether the baseline is enabled. Valid values: true and false.', example='true'),
        overTimeSettings?: [ 
          {
            cycle?: int32(name='Cycle', description='The cycle that corresponds to the committed completion time. For a day-level baseline, the value of this parameter is 1. For an hour-level baseline, the value of this parameter cannot exceed 24.', example='1'),
            time?: string(name='Time', description='The committed completion time in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].', example='00:00'),
          }
        ](name='OverTimeSettings', description='The settings of the committed completion time of the baseline.'),
        owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the baseline owner. Multiple IDs can be specified. The IDs are separated by commas (,).', example='952795****'),
        priority?: int32(name='Priority', description='The priority of the baseline. Valid values: {1,2,5,7,8}.', example='1'),
        projectId?: long(name='ProjectId', description='The ID of the workspace to which the baseline belongs.', example='9527'),
      }
    ](name='Baselines', description='The baselines.'),
    pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
    pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: string(name='TotalCount', description='The total number of baselines returned.', example='100'),
  }(name='Data', description='The data returned.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='103630001'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='The user does not exist. 276571706358178756'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='952795279527ab****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model ListBaselinesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBaselinesResponseBody(name='body'),
}

/**
 * @summary Obtains a list of baselines.
 *
 * @param request ListBaselinesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListBaselinesResponse
 */
async function listBaselinesWithOptions(request: ListBaselinesRequest, runtime: Util.RuntimeOptions): ListBaselinesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineTypes)) {
    body['BaselineTypes'] = request.baselineTypes;
  }
  if (!Util.isUnset(request.enable)) {
    body['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.searchText)) {
    body['SearchText'] = request.searchText;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListBaselines',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Obtains a list of baselines.
 *
 * @param request ListBaselinesRequest
 * @return ListBaselinesResponse
 */
async function listBaselines(request: ListBaselinesRequest): ListBaselinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBaselinesWithOptions(request, runtime);
}

model ListBusinessRequest {
  keyword?: string(name='Keyword', description='The keyword that is used to perform a fuzzy match.', example='my'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.

This parameter is required.', example='10'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the workspace ID. You must configure either this parameter or the ProjectIdentifier parameter to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the workspace name. You must configure either this parameter or ProjectId parameter to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model ListBusinessResponseBody = {
  data?: {
    business?: [ 
      {
        businessId?: long(name='BusinessId', description='The ID of the workflow.', example='3000001'),
        businessName?: string(name='BusinessName', description='The name of the workflow.', example='My first workflow'),
        description?: string(name='Description', description='The description of the workflow.', example='My first workflow'),
        owner?: string(name='Owner', description='The owner of the workflow.', example='34824327****'),
        projectId?: long(name='ProjectId', description='The ID of the workspace to which the workflow belongs.', example='10000'),
        useType?: string(name='UseType', description='The module to which the workflow belongs. Valid values: NORMAL and MANUAL_BIZ. The value NORMAL indicates that the workflow belongs to auto triggered workflows. The value MANUAL_BIZ indicates that the workflow belongs to manually triggered workflows.', example='NORMAL'),
      }
    ](name='Business', description='The details of the workflow.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='13'),
  }(name='Data', description='The information about the workflows returned.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListBusinessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBusinessResponseBody(name='body'),
}

/**
 * @summary Queries a list of workflows.
 *
 * @param request ListBusinessRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListBusinessResponse
 */
async function listBusinessWithOptions(request: ListBusinessRequest, runtime: Util.RuntimeOptions): ListBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListBusiness',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of workflows.
 *
 * @param request ListBusinessRequest
 * @return ListBusinessResponse
 */
async function listBusiness(request: ListBusinessRequest): ListBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBusinessWithOptions(request, runtime);
}

model ListCalcEnginesRequest {
  calcEngineType?: string(name='CalcEngineType', description='The type of the compute engine. The value of this parameter is not case-sensitive. Valid values:

*   **ODPS**
*   **EMR**
*   **BLINK**
*   **HOLO**
*   **MaxGraph**
*   **HYBRIDDB_FOR_POSTGRESQL**
*   **ADB_MYSQL**
*   **HADOOP_CDH**
*   **CLICKHOUSE**

This parameter is required.', example='ODPS'),
  envType?: string(name='EnvType', description='The environment in which the compute engine is used. Valid values:

*   **DEV**
*   **PRD**', example='PRD'),
  name?: string(name='Name', description='The name of the compute engine, which must be exactly matched.', example='abc'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace with which the compute engine is associated.

This parameter is required.', example='27'),
}

model ListCalcEnginesResponseBody = {
  data?: {
    calcEngines?: [ 
      {
        bindingProjectId?: int32(name='BindingProjectId', description='The ID of the workspace with which the compute engine is associated.', example='27'),
        bindingProjectName?: string(name='BindingProjectName', description='The name of the workspace with which the compute engine is associated.', example='abc'),
        calcEngineType?: string(name='CalcEngineType', description='The type of the compute engine.', example='ODPS'),
        dwRegion?: string(name='DwRegion', description='The region where the DataWorks workspace with which the compute engine is associated resides.', example='cn-zhangjiakou'),
        engineId?: int32(name='EngineId', description='The compute engine ID.', example='35'),
        engineInfo?: map[string]any(name='EngineInfo', description='The details of the compute engine.

*   ODPS

        {
          "pubEndpoint": "service.cn.maxcompute.aliyun.com/api",
          "endpoint": "service.cn.maxcompute.aliyun-inc.com/api",
          "initProperties": " 
          {\\\\"odpsTypeMode\\\\":\\\\"STANDARD\\\\",\\\\"openPai\\\\":false,\\\\"openPaiGpu\\\\":false}",
          "resourceGroupType": "ODPS",
          "resourceGroupId": "361826516****",
          "vpcEndpoint": "service.cn.maxcompute.aliyun-inc.com/api",
          "projectName": "onefall_test_zjk",
          "taskSameAsOwner": "true"
        }

*   EMR

        {
          "emrClusterId": "C-xxx",
          "specs": "{\\\\"emrClusterId\\\\":\\\\"C-xxx\\\\",\\\\"emrAccessMode\\\\":\\\\"simple\\\\",\\\\"emrResourceQueueName\\\\":\\\\"default\\\\",\\\\"emrProjectId\\\\":\\\\"FP-xxx\\\\"}",
          "endpoint": "emr.aliyuncs.com",
          "emrResourceQueueName": "default",
          "emrAccessMode": "simple",
          "resourceGroupType": "DW",
          "projectName": "xx-xxxx",
          "emrProjectId": "FP-xxxx",
          "taskSameAsOwner": "false"
        }   

*   BLINK

        {
          "bayesProjectId": "xxxx",
          "bayesProjectName": "xc_blxxixxxnk_1",
          "cluster": "xxxssxsx",
          "endpoint": "https://stream.console.aliyun.com",
          "engineType": "BLINK",
          "name": "xsxsxxxxx",
          "projectName": "xc_blxxxsxink_1",
          "queue": "root.xc_blxsxxxxxxink_1",
          "resourceGroupType": "DW",
          "specs": "{\\\\"cluster\\\\":\\\\"xxxxxx\\\\",\\\\"bayesProjectName\\\\":\\\\"xc_blxxixxxnk_1\\\\",\\\\"bayesProjectId\\\\":\\\\"ssxxxsa\\\\",\\\\"name\\\\":\\\\"sxsxsxxx\\\\",\\\\"queue\\\\":\\\\"root.sxxsxxsx\\\\"}",
          "taskSameAsOwner": false
        }

*   HOLO

        {
          "endpoint": "hgprecn-cn-xsxssxsx-cn-shanghai-internal.hologres.aliyuncs.com:80",
          "engineType": "ODPS",
          "odpsEndpoint": "hgprecn-cn-xsxssxxs-cn-shanghai-internal.hologres.aliyuncs.com:80",
          "odpsProjectName": "xsxssxsxsx",
          "projectName": "xsxssxsxsx",
          "resourceGroupType": "DW",
          "specs": "{\\\\"pubEndpoint\\\\":\\\\"hgprecn-cn-xsxssxsxs-cn-shanghai.hologres.aliyuncs.com:80\\\\",\\\\"commonBuyInstanceId\\\\":\\\\"hgprecn-cn-xsxsxsxs\\\\",\\\\"project\\\\":\\\\"holo_upxsxgrade1\\\\",\\\\"common_buy_instance_id\\\\":\\\\"hgprecn-cn-xsxsxs\\\\",\\\\"endpoint\\\\":\\\\"hgprecn-cn-xsxxsxs-cn-shanghai-internal.hologres.aliyuncs.com:80\\\\",\\\\"port\\\\":\\\\"80\\\\",\\\\"host\\\\":\\\\"hgprecn-cn-xsxsxsxs-cn-shanghai-internal.hologres.aliyuncs.com\\\\",\\\\"vpcEndpoint\\\\":\\\\"hgprecn-cn-xsxsxsxs-cn-shanghai-vpc.hologres.aliyuncs.com:80\\\\",\\\\"authType\\\\":2,\\\\"region\\\\":\\\\"cn-shanghai\\\\"}",
          "taskSameAsOwner": false
        }

*   MaxGraph

        {
          "endpoint": "http://pre-graphcompute.aliyuncs.com",
          "engineType": "ODPS",
          "odpsEndpoint": "http://pre-graphcompute.aliyuncs.com",
          "odpsProjectName": "xsxsxsxs",
          "projectName": "xsxsxsxs",
          "resourceGroupType": "DW",
          "taskSameAsOwner": false
        }

*   HYBRIDDB_FOR_POSTGRESQL

        {
          "endpoint": "hybriddb_for_postgresql_mo12121ck_endpoint",
          "engineType": "ODPS",
          "odpsEndpoint": "hybriddb_for_postgresql_m121212ock_endpoint",
          "odpsProjectName": "sxasaxsaxaxas",
          "projectName": "sxasaxsaxaxas",
          "resourceGroupType": "DW",
          "specs": "{\\\\"connectionString\\\\":\\\\"gp-xsxsxsxxs.gpdb.rds.aliyuncs.com\\\\",\\\\"database\\\\":\\\\"xsxsxxsxs\\\\",\\\\"password\\\\":\\\\"xxxxxxx\\\\",\\\\"instanceId\\\\":\\\\"gp-cdcdacdacda\\\\",\\\\"port\\\\":\\\\"3432\\\\",\\\\"ownerId\\\\":\\\\"12121212\\\\",\\\\"username\\\\":\\\\"sdasaddsa\\\\"}",
          "taskSameAsOwner": false
        }

*   ADB_MYSQL

        {
          "endpoint": "adb_mysql_mock_endpoint",
          "engineType": "ODPS",
          "odpsEndpoint": "adb_mysql_mock_endpoint",
          "odpsProjectName": "am-xsaxaxa",
          "projectName": "am-xsxsaxa",
          "resourceGroupType": "DW",
          "specs": "{\\\\"connectionString\\\\":\\\\"am-xsaxsa.ads.aliyuncs.com:3306\\\\",\\\\"database\\\\":\\\\"xsaxsaxa\\\\",\\\\"password\\\\":\\\\"xsaxsaxassxsa\\\\",\\\\"instanceId\\\\":\\\\"am-xsaxsasx\\\\",\\\\"username\\\\":\\\\"xsaxsadsd\\\\"}",
          "taskSameAsOwner": false
        }

*   HADOOP_CDH

        {
          "bindingBaseId": "xsaxsaxs",
          "endpoint": "xsaaaaa",
          "engineType": "ODPS",
          "odpsEndpoint": "axsxaxssxs",
          "odpsProjectName": "ssxxax",
          "projectName": "xsaxsaxsa",
          "resourceGroupId": 45208xxxxxx,
          "resourceGroupType": "GATEWAY",
          "specs": "{\\\\"cluster\\\\":{\\\\"hive\\\\":{\\\\"hiveServer2Url\\\\":\\\\"jdbc:hive2://xxxxxxer-1-cn-shanghai-pre-kerberos-1:10000\\\\",\\\\"hiveMetastore\\\\":\\\\"thrift://xxxxxxxr-1-cn-shanghai-pre-kerberos-1:9083\\\\",\\\\"version\\\\":\\\\"2.1.1\\\\"},\\\\"configFiles\\\\":{\\\\"coreSite\\\\":\\\\"4534574xxxxxx\\\\",\\\\"hdfsSite\\\\":\\\\"453457919xxxxxxx\\\\",\\\\"mapredSite\\\\":\\\\"45345750xxxxxx\\\\",\\\\"yarnSite\\\\":\\\\"4534575xxxxx\\\\",\\\\"krb5Conf\\\\":\\\\"4534576xxxxx1\\\\",\\\\"hiveSite\\\\":\\\\"453457xxxxx20\\\\"},\\\\"spark\\\\":{\\\\"version\\\\":\\\\"2.4.0\\\\"},\\\\"cdh\\\\":{\\\\"version\\\\":\\\\"6.3.2\\\\"},\\\\"hdfs\\\\":{\\\\"version\\\\":\\\\"3.0.0\\\\"},\\\\"impala\\\\":{\\\\"impalaUrl\\\\":\\\\"jdbc:impala://cdh-xsxssxxsx-1-cn-shanghai-pre-kerberos-1:21050\\\\",\\\\"version\\\\":\\\\"3.2.0\\\\"},\\\\"yarn\\\\":{\\\\"YarnUrl\\\\":\\\\"http://cdh-xsxsxsxsxs-1-cn-shanghai-pre-kerberos-1:8032\\\\",\\\\"webUrl\\\\":\\\\"http://cdh-xsxsxssxxssx-1-cn-shanghai-pre-kerberos-1:8088\\\\",\\\\"version\\\\":\\\\"3.0.0\\\\"},\\\\"presto\\\\":{\\\\"prestoUrl\\\\":\\\\"jdbc:presto://cdh-xssxsxxsxsxs-1-cn-shanghai-pre-kerberos-1:8080/hive/default\\\\",\\\\"version\\\\":\\\\"0.244.1\\\\"}},\\\\"instanceId\\\\":161sdads733,\\\\"authDetail\\\\":{\\\\"principal\\\\":\\\\"hive@HADOOP.COM\\\\",\\\\"keytabFileId\\\\":\\\\"45345815xsxsxs3\\\\",\\\\"type\\\\":\\\\"kerberos\\\\",\\\\"username\\\\":\\\\"xsxsxsxsa@HADOOP.COM\\\\"},\\\\"resGroupStatus\\\\":\\\\"\\\\",\\\\"hadoopAuthType\\\\":\\\\"kerberos\\\\",\\\\"clusterIdentifier\\\\":\\\\"xssxsxsxsx\\\\",\\\\"clusterId\\\\":xsxsx,\\\\"resGroupId\\\\":4520870619xsxssxxs,\\\\"accessMode\\\\":\\\\"security\\\\",\\\\"authType\\\\":2}",
          "taskSameAsOwner": false
        }', example='{"pubEndpoint":"http://service.cn.maxcompute.aliyun.com/api","endpoint":"http://service.cn.maxcompute.aliyun-inc.com/api","resourceGroupType":"ODPS","resourceGroupId":"361826516****","vpcEndpoint":"http://service.cn.maxcompute.aliyun-inc.com/api","projectName":"onefall_test_zjk","taskSameAsOwner":"true"}'),
        envType?: string(name='EnvType', description='The environment in which the compute engine is used. Valid values:

*   **DEV**
*   **PRD**', example='PRD'),
        gmtCreate?: string(name='GmtCreate', description='The time when the compute engine was created.', example='Oct 10, 2019 3:42:44 PM'),
        isDefault?: boolean(name='IsDefault', description='Indicates whether the compute engine is the default engine of the current type.', example='true'),
        name?: string(name='Name', description='The display name of the compute engine.', example='abc'),
        region?: string(name='Region', description='The region where the compute engine resides.', example='cn-zhangjiakou'),
        taskAuthType?: string(name='TaskAuthType', description='The identity that is used to access the compute engine. Valid values:

*   **USER**: the current user
*   **PROJECT**: the workspace executor
*   **SUBACCOUNT**: a RAM user
*   **STS_ROLE**: the Security Token Service (STS) role', example='PROJECT'),
        tenantId?: long(name='TenantId', description='The tenant ID.', example='1234567'),
      }
    ](name='CalcEngines', description='The compute engines.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of compute engine instances.', example='1'),
  }(name='Data', description='The query results for compute engines that are returned on multiple pages.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1ec92159376****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model ListCalcEnginesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCalcEnginesResponseBody(name='body'),
}

/**
 * @summary Queries a list of compute engines that are associated with a DataWorks workspace.
 *
 * @param request ListCalcEnginesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCalcEnginesResponse
 */
async function listCalcEnginesWithOptions(request: ListCalcEnginesRequest, runtime: Util.RuntimeOptions): ListCalcEnginesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.calcEngineType)) {
    query['CalcEngineType'] = request.calcEngineType;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCalcEngines',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of compute engines that are associated with a DataWorks workspace.
 *
 * @param request ListCalcEnginesRequest
 * @return ListCalcEnginesResponse
 */
async function listCalcEngines(request: ListCalcEnginesRequest): ListCalcEnginesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCalcEnginesWithOptions(request, runtime);
}

model ListCheckProcessesRequest {
  eventCode?: string(name='EventCode', description='Extension point event encoding.

This parameter is required.', example='commit-file'),
  messageId?: string(name='MessageId', description='DataWorks the message ID of the open message. After an extended point event is triggered, you can obtain the message ID from the received event message.', example='03400b03-b721-4c34-8727-2****1'),
  operator?: string(name='Operator', description='The operator ID.', example='123333232'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.', example='123465'),
  status?: string(name='Status', description='The check status of the extension. Valid values:

*   CHECKING
*   PASSED
*   BLOCKED', example='True'),
}

model ListCheckProcessesResponseBody = {
  pagingInfo?: {
    checkProcesses?: [ 
      {
        eventCode?: string(name='EventCode', description='Extension point event encoding.', example='commit-file'),
        eventName?: string(name='EventName', description='The name of the extension point event.', example='DnsEvent'),
        eventNameEn?: string(name='EventNameEn', description='The English name of the event.', example='Pre-event for Node Commit'),
        messageId?: string(name='MessageId', description='DataWorks the message ID of the open message. After an extended point event is triggered, you can obtain the message ID from the received event message.', example='b824a5de-4223-4315-af3e-c4449d236db4'),
        operator?: string(name='Operator', description='The id of the operator.', example='297635'),
        processId?: string(name='ProcessId', description='The ID of the process instance.', example='rdk_generate_d395da25-b0d3-4114-b2a5-d0247444a661_none_3496903_365203'),
        processName?: string(name='ProcessName', description='The name of the operation object, such as the file name and node name.', example='odps_sql_test'),
        projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.', example='32563'),
        status?: string(name='Status', description='The status of the extender check.
- CHECKING CHECKING
- PASSED the pass check
- BLOCKED check failed', example='CHECKING'),
      }
    ](name='CheckProcesses', description='The details of the extension check.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries displayed on each page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total quantity.', example='12'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0000-ABCD-EF****'),
}

model ListCheckProcessesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCheckProcessesResponseBody(name='body'),
}

/**
 * @summary Queries the check results of extension point events.
 *
 * @param request ListCheckProcessesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCheckProcessesResponse
 */
async function listCheckProcessesWithOptions(request: ListCheckProcessesRequest, runtime: Util.RuntimeOptions): ListCheckProcessesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.eventCode)) {
    body['EventCode'] = request.eventCode;
  }
  if (!Util.isUnset(request.messageId)) {
    body['MessageId'] = request.messageId;
  }
  if (!Util.isUnset(request.operator)) {
    body['Operator'] = request.operator;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListCheckProcesses',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the check results of extension point events.
 *
 * @param request ListCheckProcessesRequest
 * @return ListCheckProcessesResponse
 */
async function listCheckProcesses(request: ListCheckProcessesRequest): ListCheckProcessesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCheckProcessesWithOptions(request, runtime);
}

model ListClusterConfigsRequest {
  clusterId?: long(name='ClusterId', description='The ID of the cluster generated by DataWorks.

This parameter is required.', example='1234'),
  configType?: string(name='ConfigType', description='The configuration type of the cluster. Valid values:

*   SPARK_CONF: SPARK parameters.

This parameter is required.', example='SPARK_CONF'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.

This parameter is required.', example='5678'),
}

model ListClusterConfigsResponseBody = {
  clusterConfigs?: [
    ClusterConfig
  ](name='ClusterConfigs', description='A list of configurations of cluster modules.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='101011005'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Invalid.Cluster.ClusterNotFound'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='0000-ABCD-E****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model ListClusterConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClusterConfigsResponseBody(name='body'),
}

/**
 * @summary Queries the configurations of submodules in a workspace. You can query information about SPARK parameters.
 *
 * @param request ListClusterConfigsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListClusterConfigsResponse
 */
async function listClusterConfigsWithOptions(request: ListClusterConfigsRequest, runtime: Util.RuntimeOptions): ListClusterConfigsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListClusterConfigs',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the configurations of submodules in a workspace. You can query information about SPARK parameters.
 *
 * @param request ListClusterConfigsRequest
 * @return ListClusterConfigsResponse
 */
async function listClusterConfigs(request: ListClusterConfigsRequest): ListClusterConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClusterConfigsWithOptions(request, runtime);
}

model ListClustersRequest {
  clusterType?: string(name='ClusterType', description='The type of the cluster. Valid values:

*   CDH: CDH cluster
*   EMR: EMR cluster

This parameter is required.', example='EMR'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
}

model ListClustersResponseBody = {
  data?: {
    clusters?: [
      Cluster
    ](name='Clusters', description='List of cluster information.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='Data', description='The returns data.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='101011005'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Invalid.Cluster.ClusterNotFound'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can use the request ID to query logs and troubleshoot issues.', example='0000-ABCD-E****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model ListClustersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClustersResponseBody(name='body'),
}

/**
 * @summary Queries clusters that are registered in DataWorks. E-MapReduce (EMR) clusters and Cloudera\\"s Distribution Including Apache Hadoop (CDH) clusters are supported.
 *
 * @param request ListClustersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListClustersResponse
 */
async function listClustersWithOptions(request: ListClustersRequest, runtime: Util.RuntimeOptions): ListClustersResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListClusters',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries clusters that are registered in DataWorks. E-MapReduce (EMR) clusters and Cloudera\\"s Distribution Including Apache Hadoop (CDH) clusters are supported.
 *
 * @param request ListClustersRequest
 * @return ListClustersResponse
 */
async function listClusters(request: ListClustersRequest): ListClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClustersWithOptions(request, runtime);
}

model ListConnectionsRequest {
  connectionType?: string(name='ConnectionType', description='The type of the data source. Valid values:

*   odps
*   mysql
*   rds
*   oss
*   sqlserver
*   polardb
*   oracle
*   mongodb
*   emr
*   postgresql
*   analyticdb_for_mysql
*   hybriddb_for_postgresql
*   holo', example='rds'),
  envType?: int32(name='EnvType', description='The environment in which the data source is used. Valid values: 0 and 1. The value 0 indicates the development environment. The value 1 indicates the production environment.', example='1'),
  name?: string(name='Name', description='The name of the data source that you want to query.', example='abc'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The ID of the workspace to which the data source belongs. You can call the [ListProjects](https://help.aliyun.com/document_detail/178393.html) operation to query the ID.

This parameter is required.', example='76086'),
  status?: string(name='Status', description='The status of the data source. Valid values:

*   ENABLED
*   DISABLED', example='1'),
  subType?: string(name='SubType', description='The subtype of the data source. This parameter is used in scenarios where a type includes subtypes. The following type and subtypes are supported:

*   Type: `rds`
*   Subtypes: `mysql`, `sqlserver`, and `postgresql`', example='mysql'),
}

model ListConnectionsResponseBody = {
  data?: {
    connections?: [ 
      {
        bindingCalcEngineId?: int32(name='BindingCalcEngineId', description='The ID of the compute engine with which the data source is associated.', example='123'),
        connectStatus?: int32(name='ConnectStatus', description='The status of the data source. Valid values:

*   1: The data source is normal.
*   2: The data source is disabled.', example='1'),
        connectionType?: string(name='ConnectionType', description='The type of the data source. Valid values:

*   odps
*   mysql
*   rds
*   oss
*   sqlserver
*   polardb
*   oracle
*   mongodb
*   emr
*   postgresql
*   analyticdb_for_mysql
*   hybriddb_for_postgresql
*   holo', example='mysql'),
        content?: string(name='Content', description='The details of the data source. Examples of details of some common data sources:

*   odps

<!---->

    {
      "accessId": "xssssss",
      "accessKey": "xsaxsaxsa",
      "authType": 2,
      "endpoint": "http://service.odps.aliyun.com/api",
      "project": "xsaxsax",
      "tag": "public"
    }

*   mysql

<!---->

    {
      "database": "xsaxsa",
      "instanceName": "rm-xsaxsa",
      "password": "xsaxsa",
      "rdsOwnerId": "xasxsa",
      "regionId": "cn-shanghai",
      "tag": "rds",
      "username": "xsaxsa"
    }

*   rds

<!---->

    {
      "configType": 1,
      "tag": "rds",
      "database": "xsaxsa",
      "username": "xsaxsa",
      "password": "xssaxsa$32050",
      "instanceName": "rm-xsaxs",
      "rdsOwnerId": "11111111"
    }

*   oss

<!---->

    {
      "accessId": "sssssxx",
      "accessKey": "xsaxaxsaxs",
      "bucket": "xsa-xs-xs",
      "endpoint": "http://oss-cn-shanghai.aliyuncs.com",
      "tag": "public"
    }

*   sqlserver

<!---->

    {
      "jdbcUrl": "jdbc:sqlserver://xsaxsa-xsaxsa.database.xxx.cn:123;DatabaseName=xsxs-xsxs",
      "password": "sdasda$fs",
      "tag": "public",
      "username": "sxaxacdacdd"
    }

*   polardb

<!---->

    {
      "clusterId": "pc-sdadsadsa",
      "database": "dsadsadsa",
      "ownerId": "121212122",
      "password": "sdasdafssa",
      "region": "cn-shanghai",
      "tag": "polardb",
      "username": "asdadsads"
    }

*   oracle

<!---->

    {
      "jdbcUrl": "jdbc:oracle:saaa:@xxxxx:1521:PROD",
      "password": "sxasaxsa",
      "tag": "public",
      "username": "sasfadfa"
    }

*   mongodb

<!---->

    {
      "address": "[\\\\"xsaxxsa.mongodb.rds.aliyuncs.com:3717\\\\"]",
      "database": "admin",
      "password": "sadsda@",
      "tag": "public",
      "username": "dsadsadas"
    }

*   emr

<!---->

    {
      "accessId": "xsaxsa",
      "emrClusterId": "C-dsads",
      "emrResourceQueueName": "default",
      "emrEndpoint": "emr.aliyuncs.com",
      "accessKey": "dsadsad",
      "emrUserId": "224833315798889783",
      "name": "sasdsadsa",
      "emrAccessMode": "simple",
      "region": "cn-shanghai",
      "authType": "2",
      "emrProjectId": "FP-sdadsad"
    }

*   postgresql

<!---->

    {
      "jdbcUrl": "jdbc:postgresql://xxxx:1921/ssss",
      "password": "sdadsads",
      "tag": "public",
      "username": "sdsasda"
    }

*   analyticdb_for_mysql

<!---->

    {
      "instanceId": "am-sadsada",
      "database": "xsxsx",
      "username": "xsxsa",
      "password": "asdadsa",
      "connectionString": "am-xssxsxs.ads.aliyuncs.com:3306"
    }

*   hybriddb_for_postgresql

<!---->

    {
      "connectionString": "gp-xsaxsaxa-master.gpdbmaster.rds.aliyuncs.com",
      "database": "xsaxsaxas",
      "password": "xsaxsaxsa@11",
      "instanceId": "gp-xsaxsaxsa",
      "port": "541132",
      "ownerId": "xsaxsaxsas",
      "username": "sadsad"
    }

*   holo

<!---->

    {
      "accessId": "xsaxsaxs",
      "accessKey": "xsaxsaxsa",
      "database": "xsaxsaxsa",
      "instanceId": "xsaxa",
      "tag": "aliyun"
    }

*   kafka

<!---->

    {
      "instanceId": "xsax-cn-xsaxsa",
      "regionId": "cn-shanghai",
      "tag": "aliyun",
      "ownerId": "1212121212112"
    }', example='{\\\\"database\\\\":\\\\"xxx\\\\",\\\\"instanceName\\\\":\\\\"xxx\\\\",\\\\"password\\\\":\\\\"xxx\\\\",\\\\"rdsOwnerId\\\\":\\\\"xxx\\\\",\\\\"tag\\\\":\\\\"rds\\\\",\\\\"username\\\\":\\\\"xxx\\\\"}'),
        defaultEngine?: boolean(name='DefaultEngine', description='Indicates whether the compute engine that is associated with the data source is the default compute engine used by data sources of the same type.', example='false'),
        description?: string(name='Description', description='The description of the data source.', example='a connection'),
        envType?: int32(name='EnvType', description='The environment in which the data source is used. Valid values:

*   0: development environment
*   1: production environment', example='1'),
        gmtCreate?: string(name='GmtCreate', description='The time when the data source was created. Example: Mar 17, 2021 4:09:32 PM.', example='Mar 17, 2021 4:09:32 PM'),
        gmtModified?: string(name='GmtModified', description='The time when the data source was last modified. Example: Mar 17, 2021 4:09:32 PM.', example='Mar 17, 2021 4:09:32 PM'),
        id?: int32(name='Id', description='The data source ID.', example='1'),
        name?: string(name='Name', description='The name of the data source.', example='abc'),
        operator?: string(name='Operator', description='The ID of the Alibaba Cloud account that is used to last modify the data source.', example='193543050****'),
        projectId?: int32(name='ProjectId', description='The ID of the workspace with which the data source is associated.', example='123'),
        sequence?: int32(name='Sequence', description='The field that is used to sort data sources. Data sources are sorted in descending order based on the value of this parameter.', example='300'),
        shared?: boolean(name='Shared', description='Indicates whether the data source is a shared data source.', example='false'),
        status?: int32(name='Status', description='The status of the data source. Valid values:

*   1: The data source is normal.
*   2: The data source is disabled.', example='1'),
        subType?: string(name='SubType', description='The subtype of the data source. This parameter is used in scenarios where a type includes subtypes. The following type and subtypes are supported:

*   Type: `rds`
*   Subtypes: `mysql`, `sqlserver`, and `postgresql`.', example='mysql'),
        tenantId?: long(name='TenantId', description='The tenant ID.', example='1234567'),
      }
    ](name='Connections', description='The data sources.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of data sources returned.', example='3'),
  }(name='Data', description='The query results for data sources that are returned on multiple pages.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc14115159376359****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListConnectionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListConnectionsResponseBody(name='body'),
}

/**
 * @deprecated OpenAPI ListConnections is deprecated
 *
 * @summary Queries a list of data sources.
 *
 * @param request ListConnectionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListConnectionsResponse
 */
// Deprecated
async function listConnectionsWithOptions(request: ListConnectionsRequest, runtime: Util.RuntimeOptions): ListConnectionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListConnections',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @deprecated OpenAPI ListConnections is deprecated
 *
 * @summary Queries a list of data sources.
 *
 * @param request ListConnectionsRequest
 * @return ListConnectionsResponse
 */
// Deprecated
async function listConnections(request: ListConnectionsRequest): ListConnectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConnectionsWithOptions(request, runtime);
}

model ListDIAlarmRulesRequest {
  DIJobId?: long(name='DIJobId', description='The ID of the task with which the alert rules are associated.

This parameter is required.', example='11260'),
  pageNumber?: long(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
}

model ListDIAlarmRulesResponseBody = {
  DIAlarmRulePaging?: {
    DIJobAlarmRules?: [ 
      {
        DIAlarmRuleId?: long(name='DIAlarmRuleId', description='The alert rule ID.', example='41998'),
        DIJobId?: long(name='DIJobId', description='The ID of the task with which the alert rule is associated.', example='11260'),
        description?: string(name='Description', description='The description of the alert rule.', example='mysql synchronizes to hologres heartbeat alert'),
        enabled?: boolean(name='Enabled', description='Indicates whether the alert rule is enabled.', example='true'),
        metricType?: string(name='MetricType', description='The metric type in the alert rule. Valid values:

*   Heartbeat
*   FailoverCount
*   Delay', example='Heartbeat'),
        notificationSettings?: {
          inhibitionInterval?: int32(name='InhibitionInterval', description='The duration of the alert suppression interval. Unit: minutes.', example='5'),
          notificationChannels?: [ 
            {
              channels?: [ string ](name='Channels', description='The alert notification methods.'),
              severity?: string(name='Severity', description='The severity level. Valid values:

*   Warning
*   Critical', example='Warning'),
            }
          ](name='NotificationChannels', description='The alert notification methods.'),
          notificationReceivers?: [ 
            {
              receiverType?: string(name='ReceiverType', description='The recipient type. Valid values: AliyunUid and DingToken.

*   If the alert notification method is Mail, Phone, or Sms, the value of this parameter is **AliyunUid**, which indicates the Alibaba Cloud account ID.
*   If the alert notification method is Ding, the value of this parameter is **DingToken**, which indicates the DingTalk chatbot token.', example='DingToken'),
              receiverValues?: [ string ](name='ReceiverValues', description='The recipients.'),
            }
          ](name='NotificationReceivers', description='The settings of alert notification recipients.'),
        }(name='NotificationSettings', description='The alert notification settings.'),
        triggerConditions?: [ 
          {
            duration?: long(name='Duration', description='The time interval for alert calculation. Unit: minutes.', example='15'),
            severity?: string(name='Severity', description='The severity level. Valid values:

*   Warning
*   Critical', example='Warning'),
            threshold?: long(name='Threshold', description='The alert threshold.

*   If the alert rule is for task status, no threshold is used.
*   If the alert rule is for failovers, the threshold is the number of failovers.
*   If the alert rule is for latency, the threshold is the latency duration, in seconds.', example='5'),
          }
        ](name='TriggerConditions', description='The conditions that are used to trigger the alert rule.'),
      }
    ](name='DIJobAlarmRules', description='The alert rules.'),
    pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
    pageSize?: long(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='2'),
  }(name='DIAlarmRulePaging', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='74C2FECD-5B3A-554A-BCF5-351A36DE9815'),
}

model ListDIAlarmRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDIAlarmRulesResponseBody(name='body'),
}

/**
 * @summary Queries a list of alert rules configured for a new-version synchronization task. The following type of task is supported: real-time data synchronization from a MySQL database to Hologres.
 *
 * @description You can configure alert rules only for tasks that can be used for real-time data synchronization.
 *
 * @param request ListDIAlarmRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDIAlarmRulesResponse
 */
async function listDIAlarmRulesWithOptions(request: ListDIAlarmRulesRequest, runtime: Util.RuntimeOptions): ListDIAlarmRulesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.DIJobId)) {
    body['DIJobId'] = request.DIJobId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDIAlarmRules',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of alert rules configured for a new-version synchronization task. The following type of task is supported: real-time data synchronization from a MySQL database to Hologres.
 *
 * @description You can configure alert rules only for tasks that can be used for real-time data synchronization.
 *
 * @param request ListDIAlarmRulesRequest
 * @return ListDIAlarmRulesResponse
 */
async function listDIAlarmRules(request: ListDIAlarmRulesRequest): ListDIAlarmRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDIAlarmRulesWithOptions(request, runtime);
}

model ListDIJobsRequest {
  destinationDataSourceType?: string(name='DestinationDataSourceType', description='The destination type. If you do not configure this parameter, no limits are imposed on the tasks.', example='Hologres'),
  jobName?: string(name='JobName', description='The name of the task. Fuzzy match is supported. If you do not configure this parameter, no limits are imposed on the tasks.', example='mysql_to_holo_sync_8772'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.

This parameter is required.', example='1967'),
  sourceDataSourceType?: string(name='SourceDataSourceType', description='The source type. If you do not configure this parameter, no limits are imposed on the tasks.', example='MySQL'),
}

model ListDIJobsResponseBody = {
  DIJobPaging?: {
    DIJobs?: [ 
      {
        DIJobId?: long(name='DIJobId', description='The task ID.', example='16626'),
        destinationDataSourceType?: string(name='DestinationDataSourceType', description='The type of the destination. The value Hologres is returned.', example='Hologres'),
        jobName?: string(name='JobName', description='The task name.', example='mysql_to_holo_sync_8772'),
        jobStatus?: string(name='JobStatus', description='The task status. Valid values:

*   Finished
*   Initialized
*   Stopped
*   Failed
*   Running
*   Stopping', example='Finished'),
        migrationType?: string(name='MigrationType', description='The synchronization type. Valid values:

*   FullAndRealtimeIncremental: one-time full synchronization and real-time incremental synchronization
*   RealtimeIncremental: real-time incremental synchronization
*   Full: one-time full synchronization', example='Full'),
        projectId?: long(name='ProjectId', description='The workspace ID.', example='1967'),
        sourceDataSourceType?: string(name='SourceDataSourceType', description='The type of the source. The value MySQL is returned.', example='MySQL'),
      }
    ](name='DIJobs', description='The list of tasks.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='6'),
  }(name='DIJobPaging', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='7263E4AC-9D2E-5B29-B8AF-7C5012E92A41'),
}

model ListDIJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDIJobsResponseBody(name='body'),
}

/**
 * @summary Queries a list of new-version synchronization tasks. The following type of task is supported: real-time data synchronization from a MySQL database to Hologres.
 *
 * @description You can call this operation to obtain only the basic information about the tasks. If you want to obtain the details of a task, call the GetDIJob operation.
 *
 * @param request ListDIJobsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDIJobsResponse
 */
async function listDIJobsWithOptions(request: ListDIJobsRequest, runtime: Util.RuntimeOptions): ListDIJobsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.destinationDataSourceType)) {
    body['DestinationDataSourceType'] = request.destinationDataSourceType;
  }
  if (!Util.isUnset(request.jobName)) {
    body['JobName'] = request.jobName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.sourceDataSourceType)) {
    body['SourceDataSourceType'] = request.sourceDataSourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDIJobs',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of new-version synchronization tasks. The following type of task is supported: real-time data synchronization from a MySQL database to Hologres.
 *
 * @description You can call this operation to obtain only the basic information about the tasks. If you want to obtain the details of a task, call the GetDIJob operation.
 *
 * @param request ListDIJobsRequest
 * @return ListDIJobsResponse
 */
async function listDIJobs(request: ListDIJobsRequest): ListDIJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDIJobsWithOptions(request, runtime);
}

model ListDIProjectConfigRequest {
  destinationType?: string(name='DestinationType', description='The type of the destinations of the synchronization solutions. This parameter cannot be left empty. Valid values: analyticdb_for_mysql, odps, elasticsearch, holo, mysql, and polardb.

This parameter is required.', example='elasticsearch'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the ID.

This parameter is required.', example='1000'),
  sourceType?: string(name='SourceType', description='The type of the sources of the synchronization solutions. Valid values: oracle, mysql, polardb, datahub, drds, and analyticdb_for_mysql. If you do not configure this parameter, DataWorks applies the default global configuration to all sources.', example='mysql'),
}

model ListDIProjectConfigResponseBody = {
  data?: {
    config?: string(name='Config', description='The default global configuration of synchronization solutions. The value indicates the processing rules of different types of DDL messages. Example: {"RENAMECOLUMN":"WARNING","DROPTABLE":"WARNING","CREATETABLE":"WARNING","MODIFYCOLUMN":"WARNING","TRUNCATETABLE":"WARNING","DROPCOLUMN":"WARNING","ADDCOLUMN":"WARNING","RENAMETABLE":"WARNING"}

Field description:

*   RENAMECOLUMN: renames a column.
*   DROPTABLE: deletes a table.
*   CREATETABLE: creates a table.
*   MODIFYCOLUMN: changes the data type of a column.
*   TRUNCATETABLE: clears a table.
*   DROPCOLUMN: deletes a column.
*   ADDCOLUMN: creates a column.
*   RENAMETABLE: renames a table.

DataWorks processes a DDL message of a specific type based on the following rules:

*   WARNING: ignores the message and records an alert in real-time synchronization logs. The alert contains information about the situation that the message is ignored because of an execution error.
*   IGNORE: discards the message and does not send it to the destination.
*   CRITICAL: terminates the real-time synchronization node and sets the node status to Failed.
*   NORMAL: sends the message to the destination to process the message. Each destination processes DDL messages based on its own business logic. If DataWorks adopts the NORMAL policy, DataWorks only forwards DDL messages.', example='{"RENAMECOLUMN":"WARNING","DROPTABLE":"WARNING","CREATETABLE":"WARNING","MODIFYCOLUMN":"WARNING","TRUNCATETABLE":"WARNING","DROPCOLUMN":"WARNING","ADDCOLUMN":"WARNING","RENAMETABLE":"WARNING"}'),
  }(name='Data', description='The information about the query.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model ListDIProjectConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDIProjectConfigResponseBody(name='body'),
}

/**
 * @summary Queries the default global configurations of synchronization solutions in a specified DataWorks workspace.
 *
 * @description DataWorks allows you to specify a default global configuration only for the processing rules of DDL messages in synchronization solutions. After you configure the **processing rules of DDL messages** in synchronization solutions, the configuration is used as the default global configuration and applies to all real-time synchronization tasks in the solutions. You can modify the **processing rules of DDL messages** based on your business requirements. For more information about how to configure a synchronization solution, see [Synchronization solutions](https://help.aliyun.com/document_detail/199008.html).
 *
 * @param request ListDIProjectConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDIProjectConfigResponse
 */
async function listDIProjectConfigWithOptions(request: ListDIProjectConfigRequest, runtime: Util.RuntimeOptions): ListDIProjectConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDIProjectConfig',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the default global configurations of synchronization solutions in a specified DataWorks workspace.
 *
 * @description DataWorks allows you to specify a default global configuration only for the processing rules of DDL messages in synchronization solutions. After you configure the **processing rules of DDL messages** in synchronization solutions, the configuration is used as the default global configuration and applies to all real-time synchronization tasks in the solutions. You can modify the **processing rules of DDL messages** based on your business requirements. For more information about how to configure a synchronization solution, see [Synchronization solutions](https://help.aliyun.com/document_detail/199008.html).
 *
 * @param request ListDIProjectConfigRequest
 * @return ListDIProjectConfigResponse
 */
async function listDIProjectConfig(request: ListDIProjectConfigRequest): ListDIProjectConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDIProjectConfigWithOptions(request, runtime);
}

model ListDagsRequest {
  opSeq?: long(name='OpSeq', description='The sequence number that uniquely identifies the data backfill operation. You can call the [GetDag](https://help.aliyun.com/document_detail/189753.html) operation to query the sequence number.

This parameter is required.', example='123'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV. The value PROD indicates the production environment, and the value DEV indicates the development environment.

This parameter is required.', example='PROD'),
}

model ListDagsResponseBody = {
  data?: {
    dags?: [ 
      {
        bizdate?: long(name='Bizdate', description='The data timestamp.', example='1605052800000'),
        createTime?: long(name='CreateTime', description='The creation time.', example='1605052800000'),
        createUser?: string(name='CreateUser', description='The creator.', example='1736629400048545'),
        dagId?: long(name='DagId', description='The DAG ID.', example='351249682'),
        finishTime?: long(name='FinishTime', description='The end time.', example='1605052800000'),
        gmtdate?: long(name='Gmtdate', description='The actual running time.', example='1605052800000'),
        modifyTime?: long(name='ModifyTime', description='The modification time.', example='1605052800000'),
        name?: string(name='Name', description='The name of the DAG.', example='test_dag'),
        opSeq?: long(name='OpSeq', description='The sequence number of the operation.', example='123'),
        projectId?: long(name='ProjectId', description='The workspace ID.', example='112345'),
        startTime?: long(name='StartTime', description='The start time.', example='1605052800000'),
        status?: string(name='Status', description='The status of the DAG. Valid values:

*   CREATED
*   RUNNING
*   FAILURE
*   SUCCESS', example='FAILURE'),
        type?: string(name='Type', description='The type of the DAG. Valid values:

*   MANUAL: DAG for a manually triggered workflow
*   SMOKE_TEST: DAG for a smoke testing workflow
*   SUPPLY_DATA: DAG for a data backfill instance
*   BUSINESS_PROCESS_DAG: DAG for a one-time workflow', example='MANUAL_FLOW'),
      }
    ](name='Dags', description='The entities returned.'),
  }(name='Data', description='The details of DAGs.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='7782a299-b291-4fee-8424-cf8058efa8e8'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListDagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDagsResponseBody(name='body'),
}

/**
 * @summary Queries the details of directed acyclic graphs (DAGs) for a single data backfill instance based on OpSeq.
 *
 * @description Supported DAG types:
 * *   MANUAL: DAG for a manually triggered workflow
 * *   SMOKE_TEST: DAG for a smoke testing workflow
 * *   SUPPLY_DATA: DAG for a data backfill instance
 * *   BUSINESS_PROCESS_DAG: DAG for a one-time workflow
 * Supported DAG states:
 * *   CREATED: The DAG is created.
 * *   RUNNING: The DAG is running.
 * *   FAILURE: The DAG fails to run.
 * *   SUCCESS: The DAG is successfully run.
 *
 * @param request ListDagsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDagsResponse
 */
async function listDagsWithOptions(request: ListDagsRequest, runtime: Util.RuntimeOptions): ListDagsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.opSeq)) {
    body['OpSeq'] = request.opSeq;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDags',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the details of directed acyclic graphs (DAGs) for a single data backfill instance based on OpSeq.
 *
 * @description Supported DAG types:
 * *   MANUAL: DAG for a manually triggered workflow
 * *   SMOKE_TEST: DAG for a smoke testing workflow
 * *   SUPPLY_DATA: DAG for a data backfill instance
 * *   BUSINESS_PROCESS_DAG: DAG for a one-time workflow
 * Supported DAG states:
 * *   CREATED: The DAG is created.
 * *   RUNNING: The DAG is running.
 * *   FAILURE: The DAG fails to run.
 * *   SUCCESS: The DAG is successfully run.
 *
 * @param request ListDagsRequest
 * @return ListDagsResponse
 */
async function listDags(request: ListDagsRequest): ListDagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDagsWithOptions(request, runtime);
}

model ListDataServiceApiAuthoritiesRequest {
  apiNameKeyword?: string(name='ApiNameKeyword', description='The keyword in the name of the API. The keyword can be used to search for the API whose name contains the keyword.', example='My API name'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 100. Default value: 10.', example='10'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.

This parameter is required.', example='10000'),
  tenantId?: long(name='TenantId', description='The tenant ID. This parameter is deprecated.', example='10001'),
}

model ListDataServiceApiAuthoritiesResponseBody = {
  data?: {
    apiAuthorizationList?: [ 
      {
        apiId?: long(name='ApiId', description='The API ID.', example='10002'),
        apiName?: string(name='ApiName', description='The name of the API.', example='My API name'),
        apiPath?: string(name='ApiPath', description='The path of the API.', example='/test/1'),
        apiStatus?: int32(name='ApiStatus', description='The status of the API. Valid values: 0 and 1. The value 0 indicates that the API is not published. The value 1 indicates that the API is published.', example='0'),
        authorizationRecords?: [ 
          {
            createdTime?: string(name='CreatedTime', description='The time when the access permissions on the API were granted to other users.', example='2020-06-23T00:21:01+0800'),
            creatorId?: string(name='CreatorId', description='The ID of the Alibaba Cloud account used by the API owner.', example='12345'),
            endTime?: string(name='EndTime', description='The end time of the validity period of the authorization.', example='2020-06-24T00:21:01+0800'),
            projectId?: long(name='ProjectId', description='The ID of the workspace to which the access permissions on the API are granted.', example='10004'),
          }
        ](name='AuthorizationRecords', description='The authorization records.'),
        createdTime?: string(name='CreatedTime', description='The time when the API was created.', example='2020-06-23T00:21:01+0800'),
        creatorId?: string(name='CreatorId', description='The ID of the Alibaba Cloud account used by the API owner.', example='12345'),
        groupId?: string(name='GroupId', description='The group ID.', example='ab123'),
        modifiedTime?: string(name='ModifiedTime', description='The time when the API was last modified.', example='2020-06-23T00:21:01+0800'),
        projectId?: long(name='ProjectId', description='The workspace ID.', example='10000'),
        tenantId?: long(name='TenantId', description='The tenant ID.', example='10001'),
      }
    ](name='ApiAuthorizationList', description='The APIs on which other users are granted the access permissions.'),
    pageNumber?: int32(name='PageNumber', description='The page number. The value of this parameter is the same as that of the PageNumber parameter in the request.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 100. Default value: 10.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='Data', description='The APIs on which other users are granted the access permissions.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='0'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Normal'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListDataServiceApiAuthoritiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataServiceApiAuthoritiesResponseBody(name='body'),
}

/**
 * @summary Queries the APIs on which other users are granted the access permissions.
 *
 * @param request ListDataServiceApiAuthoritiesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataServiceApiAuthoritiesResponse
 */
async function listDataServiceApiAuthoritiesWithOptions(request: ListDataServiceApiAuthoritiesRequest, runtime: Util.RuntimeOptions): ListDataServiceApiAuthoritiesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiNameKeyword)) {
    body['ApiNameKeyword'] = request.apiNameKeyword;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServiceApiAuthorities',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the APIs on which other users are granted the access permissions.
 *
 * @param request ListDataServiceApiAuthoritiesRequest
 * @return ListDataServiceApiAuthoritiesResponse
 */
async function listDataServiceApiAuthorities(request: ListDataServiceApiAuthoritiesRequest): ListDataServiceApiAuthoritiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServiceApiAuthoritiesWithOptions(request, runtime);
}

model ListDataServiceApiTestRequest {
  apiId?: long(name='ApiId', description='The ID of the DataService Studio API on which tests are performed.

This parameter is required.', example='12345'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100.', example='10'),
}

model ListDataServiceApiTestResponseBody = {
  data?: [ 
    {
      apiId?: long(name='ApiId', description='The ID of the DataService Studio API on which the test is performed.', example='2343'),
      costTime?: int32(name='CostTime', description='The time that is consumed to complete the test.', example='10'),
      createTime?: long(name='CreateTime', description='The time when the test was initiated.', example='1651824913000'),
      paramMap?: string(name='ParamMap', description='The request parameters configured for the test.', example='{"name":"test"}'),
      retCode?: long(name='RetCode', description='The status code returned for the test. If the test is not complete, this parameter is not returned.', example='0'),
      retResult?: string(name='RetResult', description='The result returned for the test.', example='{"id":2}'),
      status?: string(name='Status', description='The status of the test. Valid values: RUNNING and FINISHED.', example='FINISHED'),
      testId?: long(name='TestId', description='The ID of the test.', example='123'),
    }
  ](name='Data', description='The list of test records.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ESDAFWEA'),
}

model ListDataServiceApiTestResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataServiceApiTestResponseBody(name='body'),
}

/**
 * @summary Queries the test records of a DataService Studio API. This API operation allows you to query only the test records that are generated within the previous month.
 *
 * @param request ListDataServiceApiTestRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataServiceApiTestResponse
 */
async function listDataServiceApiTestWithOptions(request: ListDataServiceApiTestRequest, runtime: Util.RuntimeOptions): ListDataServiceApiTestResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServiceApiTest',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the test records of a DataService Studio API. This API operation allows you to query only the test records that are generated within the previous month.
 *
 * @param request ListDataServiceApiTestRequest
 * @return ListDataServiceApiTestResponse
 */
async function listDataServiceApiTest(request: ListDataServiceApiTestRequest): ListDataServiceApiTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServiceApiTestWithOptions(request, runtime);
}

model ListDataServiceApisRequest {
  apiNameKeyword?: string(name='ApiNameKeyword', description='The keyword in API names. The keyword is used to search for the APIs whose names contain the keyword.', example='My API name'),
  apiPathKeyword?: string(name='ApiPathKeyword', description='The keyword in API paths. The keyword is used to search for the APIs whose paths contain the keyword.', example='/test/'),
  creatorId?: string(name='CreatorId', description='The ID of the Alibaba Cloud account used by the creator of the APIs. The ID is used to search for the APIs created by the creator.', example='12345'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 100. Default value: 10.', example='10'),
  projectId?: long(name='ProjectId', description='The workspace ID.

This parameter is required.', example='10000'),
  tenantId?: long(name='TenantId', description='The tenant ID. To obtain the tenant ID, perform the following steps: Log on to the [DataWorks console](https://workbench.data.aliyun.com/console). Find your workspace and go to the DataStudio page. On the DataStudio page, click the logon username in the upper-right corner and click User Info in the Menu section.', example='10001'),
}

model ListDataServiceApisResponseBody = {
  data?: {
    apis?: [ 
      {
        apiId?: long(name='ApiId', description='The API ID.', example='10002'),
        apiMode?: int32(name='ApiMode', description='The type of the API. Valid values: 0, 1, and 2. The value 0 indicates that the API is generated in wizard mode. The value 1 indicates that the API is generated in script mode. The value 2 indicates that the API is generated by registration.', example='0'),
        apiName?: string(name='ApiName', description='The name of the API.', example='My API name'),
        apiPath?: string(name='ApiPath', description='The path of the API.', example='/test/1'),
        createdTime?: string(name='CreatedTime', description='The time when the API was created.', example='2020-06-23T00:21:01+0800'),
        creatorId?: string(name='CreatorId', description='The ID of the Alibaba Cloud account used by the creator of the API.', example='1234567'),
        description?: string(name='Description', description='The description of the API.', example='Test API description'),
        folderId?: long(name='FolderId', description='The folder ID.', example='0'),
        groupId?: string(name='GroupId', description='The group ID.', example='abcde123456789'),
        modifiedTime?: string(name='ModifiedTime', description='The time when the API was last modified.', example='2020-06-23T00:21:01+0800'),
        operatorId?: string(name='OperatorId', description='The ID of the Alibaba Cloud account used by the user who last modified the API.', example='2345678'),
        projectId?: long(name='ProjectId', description='The workspace ID.', example='10000'),
        protocols?: [ int32 ](name='Protocols', description='The list of fields.'),
        registrationDetails?: {
          failedResultSample?: string(name='FailedResultSample', description='The sample error response of the API.', example='{"success": false}'),
          registrationErrorCodes?: [ 
            {
              errorCode?: string(name='ErrorCode', description='The error code.', example='1001'),
              errorMessage?: string(name='ErrorMessage', description='The error message.', example='fail to call'),
              errorSolution?: string(name='ErrorSolution', description='The solution used to fix the error.', example='retry'),
            }
          ](name='RegistrationErrorCodes', description='The error codes returned for the API generated by registration.'),
          registrationRequestParameters?: [ 
            {
              columnName?: string(name='ColumnName', description='The name of the associated field. This parameter is supported only if the API is generated in wizard mode.', example='column1'),
              defaultValue?: string(name='DefaultValue', description='The default value.', example='default1'),
              exampleValue?: string(name='ExampleValue', description='The sample value.', example='example1'),
              isRequiredParameter?: boolean(name='IsRequiredParameter', description='Indicates whether the parameter is required.', example='true'),
              parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values:

*   0: String
*   1: Int
*   2: Long
*   3: Float
*   4: Double
*   5: Boolean
*   6: StringList
*   7: IntList
*   8: LongList
*   9: FloatList
*   10: DoubleList
*   11: BooleanList', example='0'),
              parameterDescription?: string(name='ParameterDescription', description='The description.', example='description1'),
              parameterName?: string(name='ParameterName', description='The name of the parameter.', example='name1'),
              parameterOperator?: int32(name='ParameterOperator', description='The operator used for the value of the parameter. Valid values: 0, 1, 2, and 3. The value 0 indicates the Equal operator. The value 1 indicates the Like operator. The value 2 indicates the Const operator. The value 3 indicates the In operator. APIs generated in wizard mode support the Equal, Like, and In operators. APIs generated in script mode support the Equal operator. APIs generated by registration support the Equal and Const operators.', example='0'),
              parameterPosition?: int32(name='ParameterPosition', description='The position of the parameter. Valid values: 0, 1, 2, and 3. The value 0 indicates that the parameter is in the URL path of the request. The value 1 indicates that the parameter is in the Query parameter of the request URL. The value 2 indicates that the parameter is in the request header. The value 3 indicates that the parameter is in the request body. APIs generated in wizard or script mode support only the Query position. APIs generated by registration whose request method is GET or DELETE support the Query and Head positions. APIs generated by registration whose request method is PUT or POST support the Query, Head, and Body positions.', example='0'),
            }
          ](name='RegistrationRequestParameters', description='The request parameters of the API generated by registration.'),
          serviceContentType?: int32(name='ServiceContentType', description='The format in which the response of the API request is returned. Valid values: 0 and 1. The value 0 indicates the JSON format. The value 1 indicates the XML format. APIs generated in wizard or script mode support the JSON format. APIs generated by registration support the JSON and XML formats.', example='0'),
          serviceHost?: string(name='ServiceHost', description='The URL of the backend service.', example='http://example.aliyundoc.com'),
          servicePath?: string(name='ServicePath', description='The path of the backend service.', example='/index'),
          serviceRequestBodyDescription?: string(name='ServiceRequestBodyDescription', description='The description of the request body initiated to call the backend service.', example='{"abc":1}'),
          successfulResultSample?: string(name='SuccessfulResultSample', description='The sample success response of the API.', example='{"success": true}'),
        }(name='RegistrationDetails', description='The details of the API generated by registration. This parameter is returned only if the API is generated by registration.'),
        requestMethod?: int32(name='RequestMethod', description='The request method of the API. Valid values: 0, 1, 2, and 3. The value 0 indicates the GET method. The value 1 indicates the POST method. The value 2 indicates the PUT method. The value 3 indicates the DELETE method. APIs generated in wizard or script mode support the GET and POST methods. APIs generated by registration support the GET, POST, PUT, and DELETE methods.', example='0'),
        responseContentType?: int32(name='ResponseContentType', description='The format in which the response of the API request is returned. Valid values: 0 and 1. The value 0 indicates the JSON format. The value 1 indicates the XML format. APIs generated in wizard or script mode support the JSON format. APIs generated by registration support the JSON and XML formats.', example='0'),
        scriptDetails?: {
          isPagedResponse?: boolean(name='IsPagedResponse', description='Indicates whether the entries are returned by page.', example='true'),
          script?: string(name='Script', description='The SQL script.', example='select a from t'),
          scriptConnection?: {
            connectionId?: long(name='ConnectionId', description='The data source ID.', example='123'),
            tableName?: string(name='TableName', description='The name of the table in the data source.', example='t'),
          }(name='ScriptConnection', description='The data source information about the API generated in script mode.'),
          scriptRequestParameters?: [ 
            {
              columnName?: string(name='ColumnName', description='The name of the associated field. This parameter is supported only if the API is generated in wizard mode.', example='column1'),
              defaultValue?: string(name='DefaultValue', description='The default value.', example='default1'),
              exampleValue?: string(name='ExampleValue', description='The sample value.', example='example1'),
              isRequiredParameter?: boolean(name='IsRequiredParameter', description='Indicates whether the parameter is required.', example='true'),
              parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values:

*   0: String
*   1: Int
*   2: Long
*   3: Float
*   4: Double
*   5: Boolean
*   6: StringList
*   7: IntList
*   8: LongList
*   9: FloatList
*   10: DoubleList
*   11: BooleanList', example='0'),
              parameterDescription?: string(name='ParameterDescription', description='The description.', example='description1'),
              parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param1'),
              parameterOperator?: int32(name='ParameterOperator', description='The operator used for the value of the parameter. Valid values:

*   0: Equal
*   1: Like
*   2: Const
*   3: In

APIs generated in wizard mode support the Equal, Like, and In operators. APIs generated in script mode support the Equal operator. APIs generated by registration support the Equal and Const operators.', example='0'),
              parameterPosition?: int32(name='ParameterPosition', description='The position of the parameter. Valid values:

*   0: indicates that the parameter is in the URL path of the request.
*   1: indicates that the parameter is in the Query parameter of the request URL.
*   2: indicates that the parameter is in the request header.
*   3: indicates that the parameter is in the request body.

APIs generated in wizard or script mode support only the Query position. APIs generated by registration whose request method is GET or DELETE support the Query and Head positions. APIs generated by registration whose request method is PUT or POST support the Query, Head, and Body positions.', example='0'),
            }
          ](name='ScriptRequestParameters', description='The request parameters of the API generated in script mode.'),
          scriptResponseParameters?: [ 
            {
              columnName?: string(name='ColumnName', description='The name of the associated field. This parameter is supported only if the API is generated in wizard mode.', example='column2'),
              exampleValue?: string(name='ExampleValue', description='The sample value.', example='example2'),
              parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values:

*   0: String
*   1: Int
*   2: Long
*   3: Float
*   4: Double
*   5: Boolean
*   6: StringList
*   7: IntList
*   8: LongList
*   9: FloatList
*   10: DoubleList
*   11: BooleanList', example='0'),
              parameterDescription?: string(name='ParameterDescription', description='The description.', example='description2'),
              parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param2'),
            }
          ](name='ScriptResponseParameters', description='The response parameters of the API generated in script mode.'),
        }(name='ScriptDetails', description='The details of the API generated in script mode. This parameter is returned only if the API is generated in script mode.'),
        status?: int32(name='Status', description='The status of the API. Valid values: 0 and 1. The value 0 indicates that the API is not published. The value 1 indicates that the API is published.', example='0'),
        tenantId?: long(name='TenantId', description='The tenant ID.', example='10000'),
        timeout?: int32(name='Timeout', description='The timeout period of the API request. Unit: milliseconds.', example='10000'),
        visibleRange?: int32(name='VisibleRange', description='The scope in which the API is visible. Valid values: 0 and 1. The value 0 indicates that the API is visible within the workspace. The value 1 indicates that the API is visible only to its owner.', example='0'),
        wizardDetails?: {
          isPagedResponse?: boolean(name='IsPagedResponse', description='Indicates whether the entries are returned by page.', example='true'),
          wizardConnection?: {
            connectionId?: long(name='ConnectionId', description='The data source ID.', example='123'),
            tableName?: string(name='TableName', description='The name of the table in the data source.', example='t'),
          }(name='WizardConnection', description='The data source information about the API generated in wizard mode.'),
          wizardRequestParameters?: [ 
            {
              columnName?: string(name='ColumnName', description='The name of the associated field. This parameter is supported only if the API is generated in wizard mode.', example='column1'),
              defaultValue?: string(name='DefaultValue', description='The default value.', example='default1'),
              exampleValue?: string(name='ExampleValue', description='The sample value.', example='example1'),
              isRequiredParameter?: boolean(name='IsRequiredParameter', description='Indicates whether the parameter is required.', example='true'),
              parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values:

*   0: String
*   1: Int
*   2: Long
*   3: Float
*   4: Double
*   5: Boolean
*   6: StringList
*   7: IntList
*   8: LongList
*   9: FloatList
*   10: DoubleList
*   11: BooleanList', example='0'),
              parameterDescription?: string(name='ParameterDescription', description='The description.', example='description1'),
              parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param1'),
              parameterOperator?: int32(name='ParameterOperator', description='The operator used for the value of the parameter. Valid values: 0, 1, 2, and 3. The value 0 indicates the Equal operator. The value 1 indicates the Like operator. The value 2 indicates the Const operator. The value 3 indicates the In operator. APIs generated in wizard mode support the Equal, Like, and In operators. APIs generated in script mode support the Equal operator. APIs generated by registration support the Equal and Const operators.', example='0'),
              parameterPosition?: int32(name='ParameterPosition', description='The position of the parameter. Valid values: 0, 1, 2, and 3. The value 0 indicates that the parameter is in the URL path of the request. The value 1 indicates that the parameter is in the Query parameter of the request URL. The value 2 indicates that the parameter is in the request header. The value 3 indicates that the parameter is in the request body. APIs generated in wizard or script mode support only the Query position. APIs generated by registration whose request method is GET or DELETE support the Query and Head positions. APIs generated by registration whose request method is PUT or POST support the Query, Head, and Body positions.', example='0'),
            }
          ](name='WizardRequestParameters', description='The request parameters of the API generated in wizard mode.'),
          wizardResponseParameters?: [ 
            {
              columnName?: string(name='ColumnName', description='The name of the associated field. This parameter is supported only if the API is generated in wizard mode.', example='column2'),
              exampleValue?: string(name='ExampleValue', description='The sample value.', example='example2'),
              parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values:

*   0: String
*   1: Int
*   2: Long
*   3: Float
*   4: Double
*   5: Boolean
*   6: StringList
*   7: IntList
*   8: LongList
*   9: FloatList
*   10: DoubleList
*   11: BooleanList', example='0'),
              parameterDescription?: string(name='ParameterDescription', description='The description.', example='description2'),
              parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param2'),
            }
          ](name='WizardResponseParameters', description='The response parameters of the API generated in wizard mode.'),
        }(name='WizardDetails', description='The details of the API generated in wizard mode. This parameter is returned only if the API is generated in wizard mode.'),
      }
    ](name='Apis', description='The list of APIs in the development state.'),
    pageNumber?: int32(name='PageNumber', description='The page number. The value of this parameter is the same as that of the PageNumber parameter in the request.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 50. Default value: 10.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='Data', description='The data returned.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListDataServiceApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataServiceApisResponseBody(name='body'),
}

/**
 * @summary Queries a list of APIs in the development state.
 *
 * @param request ListDataServiceApisRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataServiceApisResponse
 */
async function listDataServiceApisWithOptions(request: ListDataServiceApisRequest, runtime: Util.RuntimeOptions): ListDataServiceApisResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiNameKeyword)) {
    body['ApiNameKeyword'] = request.apiNameKeyword;
  }
  if (!Util.isUnset(request.apiPathKeyword)) {
    body['ApiPathKeyword'] = request.apiPathKeyword;
  }
  if (!Util.isUnset(request.creatorId)) {
    body['CreatorId'] = request.creatorId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServiceApis',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of APIs in the development state.
 *
 * @param request ListDataServiceApisRequest
 * @return ListDataServiceApisResponse
 */
async function listDataServiceApis(request: ListDataServiceApisRequest): ListDataServiceApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServiceApisWithOptions(request, runtime);
}

model ListDataServiceApplicationsRequest {
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectIdList?: string(name='ProjectIdList', description='The ID of the workspace based on which you want to query the basic information of applications. You can specify multiple IDs. Separate them with commas (,). You must specify at least one workspace ID. You can specify a maximum of 50 workspace IDs.

This parameter is required.', example='10000,100001'),
  tenantId?: long(name='TenantId', description='The tenant ID. To obtain the tenant ID, perform the following steps: Log on to the [DataWorks console](https://workbench.data.aliyun.com/console). Find your workspace and go to the DataStudio page. On the DataStudio page, click the logon username in the upper-right corner and click User Info in the Menu section.', example='100002'),
}

model ListDataServiceApplicationsResponseBody = {
  data?: {
    applications?: [ 
      {
        applicationId?: long(name='ApplicationId', description='The application ID.', example='20000'),
        applicationName?: string(name='ApplicationName', description='The name of the application.', example='My application'),
        projectId?: long(name='ProjectId', description='The workspace ID.', example='10000'),
      }
    ](name='Applications', description='The basic information of the applications.'),
    pageNumber?: int32(name='PageNumber', description='The page number. The value of this parameter is the same as that of the PageNumber parameter in the request.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='Data', description='The returned data.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='0'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Normal'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG***'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListDataServiceApplicationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataServiceApplicationsResponseBody(name='body'),
}

/**
 * @summary Queries the basic information of applications.
 *
 * @param request ListDataServiceApplicationsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataServiceApplicationsResponse
 */
async function listDataServiceApplicationsWithOptions(request: ListDataServiceApplicationsRequest, runtime: Util.RuntimeOptions): ListDataServiceApplicationsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectIdList)) {
    body['ProjectIdList'] = request.projectIdList;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServiceApplications',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the basic information of applications.
 *
 * @param request ListDataServiceApplicationsRequest
 * @return ListDataServiceApplicationsResponse
 */
async function listDataServiceApplications(request: ListDataServiceApplicationsRequest): ListDataServiceApplicationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServiceApplicationsWithOptions(request, runtime);
}

model ListDataServiceAuthorizedApisRequest {
  apiNameKeyword?: string(name='ApiNameKeyword', description='The keyword in API names. The keyword is used to search for the APIs whose names contain the keyword.', example='My API Name'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The workspace ID.

This parameter is required.', example='10000'),
  tenantId?: long(name='TenantId', description='The tenant ID. This parameter is deprecated.', example='10001'),
}

model ListDataServiceAuthorizedApisResponseBody = {
  data?: {
    apiAuthorizedList?: [ 
      {
        apiId?: long(name='ApiId', description='The API ID.', example='10002'),
        apiName?: string(name='ApiName', description='The name of the API.', example='My API Name'),
        apiPath?: string(name='ApiPath', description='The path of the API.', example='/test/1'),
        apiStatus?: int32(name='ApiStatus', description='The status of the API. Valid values: 0 and 1. The value 0 indicates that the API is not published. The value 1 indicates that the API is published.', example='0'),
        createdTime?: string(name='CreatedTime', description='The time when the API was created.', example='2020-06-23T00:21:01+0800'),
        creatorId?: string(name='CreatorId', description='The ID of the Alibaba Cloud account used by the API owner.', example='12345'),
        grantCreatedTime?: string(name='GrantCreatedTime', description='The time when the access permissions on the API were granted.', example='2020-06-23T00:21:01+0800'),
        grantEndTime?: string(name='GrantEndTime', description='The expiration time of the access permissions granted on the API.', example='2020-06-24T00:21:01+0800'),
        grantOperatorId?: string(name='GrantOperatorId', description='The ID of the Alibaba Cloud account used by the user who granted the access permissions on the API.', example='23456'),
        groupId?: string(name='GroupId', description='The group ID.', example='abcde123456789'),
        modifiedTime?: string(name='ModifiedTime', description='The time when the API was last updated.', example='2020-06-23T00:21:01+0800'),
        projectId?: long(name='ProjectId', description='The workspace ID.', example='10000'),
        tenantId?: long(name='TenantId', description='The tenant ID.', example='10001'),
      }
    ](name='ApiAuthorizedList', description='The APIs that you are authorized to access.'),
    pageNumber?: int32(name='PageNumber', description='The page number. The value of this parameter is the same as that of the PageNumber parameter in the request.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='Data', description='The information about the APIs that you are authorized to access.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListDataServiceAuthorizedApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataServiceAuthorizedApisResponseBody(name='body'),
}

/**
 * @summary Queries the APIs that you are authorized to access.
 *
 * @param request ListDataServiceAuthorizedApisRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataServiceAuthorizedApisResponse
 */
async function listDataServiceAuthorizedApisWithOptions(request: ListDataServiceAuthorizedApisRequest, runtime: Util.RuntimeOptions): ListDataServiceAuthorizedApisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiNameKeyword)) {
    body['ApiNameKeyword'] = request.apiNameKeyword;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServiceAuthorizedApis',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the APIs that you are authorized to access.
 *
 * @param request ListDataServiceAuthorizedApisRequest
 * @return ListDataServiceAuthorizedApisResponse
 */
async function listDataServiceAuthorizedApis(request: ListDataServiceAuthorizedApisRequest): ListDataServiceAuthorizedApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServiceAuthorizedApisWithOptions(request, runtime);
}

model ListDataServiceFoldersRequest {
  folderNameKeyword?: string(name='FolderNameKeyword', description='The keyword in folder names. The keyword is used to search for folders whose names contain this keyword.', example='Keyword in folder names'),
  groupId?: string(name='GroupId', description='The ID of the business process to which the folders belong.', example='ds_123abc'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.

This parameter is required.', example='10001'),
  tenantId?: long(name='TenantId', description='The tenant ID. To obtain the tenant ID, perform the following steps: Log on to the [DataWorks console](https://workbench.data.aliyun.com/console). Find your workspace and go to the DataStudio page. On the page that appears, click the username for the logon in the upper-right corner and click User Info in the Menu section.', example='10002'),
}

model ListDataServiceFoldersResponseBody = {
  folderPagingResult?: {
    folders?: [ 
      {
        createdTime?: string(name='CreatedTime', description='The time when the folder was created.', example='2020-09-24T18:37:51+0800'),
        folderId?: long(name='FolderId', description='The folder ID.', example='11'),
        folderName?: string(name='FolderName', description='The name of the folder.', example='test1'),
        groupId?: string(name='GroupId', description='The ID of the business process to which the folder belongs.', example='ds_1234'),
        modifiedTime?: string(name='ModifiedTime', description='The time when the folder was last modified.', example='2020-09-24T18:37:51+0800'),
        parentId?: long(name='ParentId', description='The ID of the parent folder. The ID of the root folder in a business process is 0, and the ID of a folder created by a user in a business process is greater than 0.', example='0'),
        projectId?: long(name='ProjectId', description='The workspace ID.', example='10001'),
        tenantId?: long(name='TenantId', description='The tenant ID.', example='10002'),
      }
    ](name='Folders', description='The folders.'),
    pageNumber?: int32(name='PageNumber', description='The page number. The value of this parameter is the same as that of the PageNumber parameter in the request.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='FolderPagingResult', description='The paging result for the folders.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EF****'),
}

model ListDataServiceFoldersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataServiceFoldersResponseBody(name='body'),
}

/**
 * @summary Queries folders.
 *
 * @param request ListDataServiceFoldersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataServiceFoldersResponse
 */
async function listDataServiceFoldersWithOptions(request: ListDataServiceFoldersRequest, runtime: Util.RuntimeOptions): ListDataServiceFoldersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderNameKeyword)) {
    body['FolderNameKeyword'] = request.folderNameKeyword;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServiceFolders',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries folders.
 *
 * @param request ListDataServiceFoldersRequest
 * @return ListDataServiceFoldersResponse
 */
async function listDataServiceFolders(request: ListDataServiceFoldersRequest): ListDataServiceFoldersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServiceFoldersWithOptions(request, runtime);
}

model ListDataServiceGroupsRequest {
  groupNameKeyword?: string(name='GroupNameKeyword', description='The keyword of a business process name. The keyword is used to search for business processes whose names contain this keyword.', example='Test business process'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 100. Default value: 10.', example='10'),
  projectId?: long(name='ProjectId', description='The workspace ID.

This parameter is required.', example='10000'),
  tenantId?: long(name='TenantId', description='The tenant ID. This parameter is deprecated.', example='10001'),
}

model ListDataServiceGroupsResponseBody = {
  groupPagingResult?: {
    groups?: [ 
      {
        apiGatewayGroupId?: string(name='ApiGatewayGroupId', description='The ID of the API Gateway group to which the workflow is bound.', example='100abc'),
        createdTime?: string(name='CreatedTime', description='The time when the business process was created.', example='2020-09-24T18:37:51+0800'),
        creatorId?: string(name='CreatorId', description='The user identifier (UID) of the creator of the business process. The value of this parameter may be empty for creators of some existing business processes.', example='10001'),
        description?: string(name='Description', description='The description of the business process.', example='Test'),
        groupId?: string(name='GroupId', description='The business process ID.', example='ds_123abc'),
        groupName?: string(name='GroupName', description='The name of the business process.', example='Test'),
        modifiedTime?: string(name='ModifiedTime', description='The time when the business process was modified.', example='2020-09-24T18:37:51+0800'),
        projectId?: long(name='ProjectId', description='The workspace ID.', example='10002'),
        tenantId?: long(name='TenantId', description='The tenant ID.', example='10003'),
      }
    ](name='Groups', description='The business processes.'),
    pageNumber?: int32(name='PageNumber', description='The page number. The value of this parameter is the same as that of the PageNumber parameter in the request.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 100. Default value: 10.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='GroupPagingResult', description='The paging result for the business processes.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EF****'),
}

model ListDataServiceGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataServiceGroupsResponseBody(name='body'),
}

/**
 * @summary Queries business processes.
 *
 * @param request ListDataServiceGroupsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataServiceGroupsResponse
 */
async function listDataServiceGroupsWithOptions(request: ListDataServiceGroupsRequest, runtime: Util.RuntimeOptions): ListDataServiceGroupsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupNameKeyword)) {
    body['GroupNameKeyword'] = request.groupNameKeyword;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServiceGroups',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries business processes.
 *
 * @param request ListDataServiceGroupsRequest
 * @return ListDataServiceGroupsResponse
 */
async function listDataServiceGroups(request: ListDataServiceGroupsRequest): ListDataServiceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServiceGroupsWithOptions(request, runtime);
}

model ListDataServicePublishedApisRequest {
  apiNameKeyword?: string(name='ApiNameKeyword', description='The keyword in API names. The keyword is used to search for the APIs whose names contain the keyword.', example='My API name'),
  apiPathKeyword?: string(name='ApiPathKeyword', description='The keyword in API paths. The keyword is used to search for the APIs whose paths contain the keyword.', example='/test/'),
  creatorId?: string(name='CreatorId', description='The ID of the Alibaba Cloud account used by the creator of the APIs. The ID is used to search for the APIs created by the creator.', example='12345'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 100. Default value: 10.', example='10'),
  projectId?: long(name='ProjectId', description='The workspace ID.

This parameter is required.', example='10000'),
  tenantId?: long(name='TenantId', description='The tenant ID. To obtain the tenant ID, perform the following steps: Log on to the [DataWorks console](https://workbench.data.aliyun.com/console). Find your workspace and go to the DataStudio page. On the DataStudio page, click the logon username in the upper-right corner and click User Info in the Menu section.', example='10001'),
}

model ListDataServicePublishedApisResponseBody = {
  data?: {
    apis?: [ 
      {
        apiId?: long(name='ApiId', description='The API ID.', example='10002'),
        apiMode?: int32(name='ApiMode', description='The type of the API. Valid values: 0, 1, and 2. The value 0 indicates that the API is generated in wizard mode. The value 1 indicates that the API is generated in script mode. The value 2 indicates that the API is generated by registration.', example='0'),
        apiName?: string(name='ApiName', description='The name of the API.', example='My API name'),
        apiPath?: string(name='ApiPath', description='The path of the API.', example='/test/1'),
        createdTime?: string(name='CreatedTime', description='The time when the API was created.', example='2020-06-23T00:21:01+0800'),
        creatorId?: string(name='CreatorId', description='The ID of the Alibaba Cloud account used by the creator of the API.', example='1234567'),
        description?: string(name='Description', description='The description.', example='Test API description'),
        groupId?: string(name='GroupId', description='The group ID.', example='ab123'),
        modifiedTime?: string(name='ModifiedTime', description='The time when the API was last modified.', example='2020-06-23T00:21:01+0800'),
        operatorId?: string(name='OperatorId', description='The ID of the Alibaba Cloud account used by the user who last modified the API.', example='2345678'),
        projectId?: long(name='ProjectId', description='The workspace ID.', example='10000'),
        protocols?: [ int32 ](name='Protocols', description='The protocol used by the API. Valid values: 0 and 1. The value 0 indicates HTTP. The value 1 indicates HTTPS.'),
        registrationDetails?: {
          failedResultSample?: string(name='FailedResultSample', description='The sample error response of the API.', example='{"success": false}'),
          registrationErrorCodes?: [ 
            {
              errorCode?: string(name='ErrorCode', description='The error code.', example='1001'),
              errorMessage?: string(name='ErrorMessage', description='The error message.', example='fail to call'),
              errorSolution?: string(name='ErrorSolution', description='The solution used to fix the error.', example='retry'),
            }
          ](name='RegistrationErrorCodes', description='The error codes returned for the API generated by registration.'),
          registrationRequestParameters?: [ 
            {
              defaultValue?: string(name='DefaultValue', description='The default value.', example='default1'),
              exampleValue?: string(name='ExampleValue', description='The sample value.', example='example1'),
              isRequiredParameter?: boolean(name='IsRequiredParameter', description='Indicates whether the request parameter is required.', example='true'),
              parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values:

*   0: String
*   1: Int
*   2: Long
*   3: Float
*   4: Double
*   5: Boolean
*   6: StringList
*   7: IntList
*   8: LongList
*   9: FloatList
*   10: DoubleList
*   11: BooleanList', example='0'),
              parameterDescription?: string(name='ParameterDescription', description='The description.', example='description1'),
              parameterName?: string(name='ParameterName', description='The name of the parameter.', example='name1'),
              parameterOperator?: int32(name='ParameterOperator', description='The operator used for the value of the parameter. Valid values:

*   0: Equal
*   1: Like
*   2: Const
*   3: In

APIs generated in wizard mode support the Equal, Like, and In operators. APIs generated in script mode support the Equal operator. APIs generated by registration support the Equal and Const operators.', example='0'),
              parameterPosition?: int32(name='ParameterPosition', description='The position of the parameter. Valid values:

*   0: indicates that the parameter is in the URL path of the request.
*   1: indicates that the parameter is in the Query parameter of the request URL.
*   2: indicates that the parameter is in the request header.
*   3: indicates that the parameter is in the request body.

APIs generated in wizard or script mode support only the Query position. APIs generated by registration whose request method is GET or DELETE support the Query and Head positions. APIs generated by registration whose request method is PUT or POST support the Query, Head, and Body positions.', example='0'),
            }
          ](name='RegistrationRequestParameters', description='The request parameters of the API generated by registration.'),
          serviceContentType?: int32(name='ServiceContentType', description='The format in which the response of the API request is returned. Valid values: 0 and 1. The value 0 indicates the JSON format. The value 1 indicates the XML format. APIs generated in wizard or script mode support the JSON format. APIs generated by registration support the JSON and XML formats.', example='0'),
          serviceHost?: string(name='ServiceHost', description='The URL of the backend service.', example='http://example.aliyundoc.com'),
          servicePath?: string(name='ServicePath', description='The path of the backend service.', example='/index'),
          serviceRequestBodyDescription?: string(name='ServiceRequestBodyDescription', description='The description of the request body initiated to call the backend service.', example='{"abc":1}'),
          successfulResultSample?: string(name='SuccessfulResultSample', description='The sample success response of the API.', example='{"success": true}'),
        }(name='RegistrationDetails', description='The details of the API generated by registration. This parameter is returned only if the API is generated by registration.'),
        requestMethod?: int32(name='RequestMethod', description='The request method of the API. Valid values: 0, 1, 2, and 3. The value 0 indicates the GET method. The value 1 indicates the POST method. The value 2 indicates the PUT method. The value 3 indicates the DELETE method. APIs generated in wizard or script mode support the GET and POST methods. APIs generated by registration support the GET, POST, PUT, and DELETE methods.', example='0'),
        responseContentType?: int32(name='ResponseContentType', description='The format in which the response of the API request is returned. Valid values: 0 and 1. The value 0 indicates the JSON format. The value 1 indicates the XML format. APIs generated in wizard or script mode support the JSON format. APIs generated by registration support the JSON and XML formats.', example='0'),
        scriptDetails?: {
          failedResultSample?: string(name='FailedResultSample', description='The sample error response of the API.', example='{"success": false}'),
          isPagedResponse?: boolean(name='IsPagedResponse', description='Indicates whether the entries are returned by page.', example='true'),
          script?: string(name='Script', description='The SQL script.', example='select a from t'),
          scriptConnection?: {
            connectionId?: long(name='ConnectionId', description='The data source ID.', example='123'),
            tableName?: string(name='TableName', description='The name of the table in the data source.', example='t'),
          }(name='ScriptConnection', description='The data source information about the API generated in script mode.'),
          scriptErrorCodes?: [ 
            {
              errorCode?: string(name='ErrorCode', description='The error code.', example='1001'),
              errorMessage?: string(name='ErrorMessage', description='The error message.', example='fail to call'),
              errorSolution?: string(name='ErrorSolution', description='The solution used to fix the error.', example='retry'),
            }
          ](name='ScriptErrorCodes', description='The error codes returned for the API generated in script mode.'),
          scriptRequestParameters?: [ 
            {
              defaultValue?: string(name='DefaultValue', description='The default value.', example='default1'),
              exampleValue?: string(name='ExampleValue', description='The sample value.', example='example1'),
              isRequiredParameter?: boolean(name='IsRequiredParameter', description='Indicates whether the request parameter is required.', example='true'),
              parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values:

*   0: String
*   1: Int
*   2: Long
*   3: Float
*   4: Double
*   5: Boolean

Advanced scripts also support the following data types:

*   6: StringList
*   7: IntList
*   8: LongList
*   9: FloatList
*   10: DoubleList
*   11: BooleanList', example='0'),
              parameterDescription?: string(name='ParameterDescription', description='The description.', example='description1'),
              parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param1'),
              parameterOperator?: int32(name='ParameterOperator', description='The operator used for the value of the parameter. Valid values:

*   0: Equal
*   1: Like
*   2: Const
*   3: In

APIs generated in wizard mode support the Equal, Like, and In operators. APIs generated in script mode support the Equal operator. APIs generated by registration support the Equal and Const operators.', example='0'),
              parameterPosition?: int32(name='ParameterPosition', description='The position of the parameter. Valid values:

*   0: indicates that the parameter is in the URL path of the request.
*   1: indicates that the parameter is in the Query parameter of the request URL.
*   2: indicates that the parameter is in the request header.
*   3: indicates that the parameter is in the request body.

APIs generated in wizard or script mode support only the Query position. APIs generated by registration whose request method is GET or DELETE support the Query and Head positions. APIs generated by registration whose request method is PUT or POST support the Query, Head, and Body positions.', example='0'),
            }
          ](name='ScriptRequestParameters', description='The request parameters of the API generated in script mode.'),
          scriptResponseParameters?: [ 
            {
              exampleValue?: string(name='ExampleValue', description='The sample value.', example='example2'),
              parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values:

*   0: String
*   1: Int
*   2: Long
*   3: Float
*   4: Double
*   5: Boolean
*   6: StringList
*   7: IntList
*   8: LongList
*   9: FloatList
*   10: DoubleList
*   11: BooleanList', example='0'),
              parameterDescription?: string(name='ParameterDescription', description='The description.', example='description2'),
              parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param2'),
            }
          ](name='ScriptResponseParameters', description='The response parameters of the API generated in script mode.'),
          successfulResultSample?: string(name='SuccessfulResultSample', description='The sample success response of the API.', example='{"success": true}'),
        }(name='ScriptDetails', description='The details of the API generated in script mode. This parameter is returned only if the API is generated in script mode.'),
        status?: int32(name='Status', description='The status of the API. Valid values: 0 and 1. The value 0 indicates that the API is not published. The value 1 indicates that the API is published.', example='1'),
        tenantId?: long(name='TenantId', description='The tenant ID.', example='10001'),
        timeout?: int32(name='Timeout', description='The timeout period of the API request. Unit: milliseconds.', example='10000'),
        visibleRange?: int32(name='VisibleRange', description='The scope in which the API is visible. Valid values: 0 and 1. The value 0 indicates that the API is visible within the workspace. The value 1 indicates that the API is visible only to its owner.', example='0'),
        wizardDetails?: {
          failedResultSample?: string(name='FailedResultSample', description='The sample error response of the API.', example='{"success": false}'),
          isPagedResponse?: boolean(name='IsPagedResponse', description='Indicates whether the entries are returned by page.', example='true'),
          successfulResultSample?: string(name='SuccessfulResultSample', description='The sample success response of the API.', example='{"success": true}'),
          wizardConnection?: {
            connectionId?: long(name='ConnectionId', description='The ID of the data source.', example='123'),
            tableName?: string(name='TableName', description='The name of the table in the data source.', example='t'),
          }(name='WizardConnection', description='The data source information about the API generated in wizard mode.'),
          wizardErrorCodes?: [ 
            {
              errorCode?: string(name='ErrorCode', description='The error code.', example='1001'),
              errorMessage?: string(name='ErrorMessage', description='The error message.', example='fail to call'),
              errorSolution?: string(name='ErrorSolution', description='The solution used to fix the error.', example='retry'),
            }
          ](name='WizardErrorCodes', description='The error codes returned for the API generated in wizard mode.'),
          wizardRequestParameters?: [ 
            {
              defaultValue?: string(name='DefaultValue', description='The default value.', example='default1'),
              exampleValue?: string(name='ExampleValue', description='The sample value.', example='example1'),
              isRequiredParameter?: boolean(name='IsRequiredParameter', description='Indicates whether the request parameter is required.', example='true'),
              parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values:

*   0: String
*   1: Int
*   2: Long
*   3: Float
*   4: Double
*   5: Boolean
*   6: StringList
*   7: IntList
*   8: LongList
*   9: FloatList
*   10: DoubleList
*   11: BooleanList', example='0'),
              parameterDescription?: string(name='ParameterDescription', description='The description.', example='description1'),
              parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param1'),
              parameterOperator?: int32(name='ParameterOperator', description='The operator used for the value of the parameter. Valid values: 0, 1, 2, and 3. The value 0 indicates the Equal operator. The value 1 indicates the Like operator. The value 2 indicates the Const operator. The value 3 indicates the In operator. APIs generated in wizard mode support the Equal, Like, and In operators. APIs generated in script mode support the Equal operator. APIs generated by registration support the Equal and Const operators.', example='0'),
              parameterPosition?: int32(name='ParameterPosition', description='The position of the parameter. Valid values: 0, 1, 2, and 3. The value 0 indicates that the parameter is in the URL path of the request. The value 1 indicates that the parameter is in the Query parameter of the request URL. The value 2 indicates that the parameter is in the request header. The value 3 indicates that the parameter is in the request body. APIs generated in wizard or script mode support only the Query position. APIs generated by registration whose request method is GET or DELETE support the Query and Head positions. APIs generated by registration whose request method is PUT or POST support the Query, Head, and Body positions.', example='0'),
            }
          ](name='WizardRequestParameters', description='The request parameters of the API generated in wizard mode.'),
          wizardResponseParameters?: [ 
            {
              exampleValue?: string(name='ExampleValue', description='The sample value.', example='example2'),
              parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values:

*   0: String
*   1: Int
*   2: Long
*   3: Float
*   4: Double
*   5: Boolean
*   6: StringList
*   7: IntList
*   8: LongList
*   9: FloatList
*   10: DoubleList
*   11: BooleanList', example='0'),
              parameterDescription?: string(name='ParameterDescription', description='The description.', example='description2'),
              parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param2'),
            }
          ](name='WizardResponseParameters', description='The response parameters of the API generated in wizard mode.'),
        }(name='WizardDetails', description='The details of the API generated in wizard mode. This parameter is returned only if the API is generated in wizard mode.'),
      }
    ](name='Apis', description='The information about the APIs in the published state.'),
    pageNumber?: int32(name='PageNumber', description='The page number. The value of this parameter is the same as that of the PageNumber parameter in the request.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 100. Default value: 10.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='Data', description='The data returned.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListDataServicePublishedApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataServicePublishedApisResponseBody(name='body'),
}

/**
 * @summary Queries a list of APIs in the published state.
 *
 * @param request ListDataServicePublishedApisRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataServicePublishedApisResponse
 */
async function listDataServicePublishedApisWithOptions(request: ListDataServicePublishedApisRequest, runtime: Util.RuntimeOptions): ListDataServicePublishedApisResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiNameKeyword)) {
    body['ApiNameKeyword'] = request.apiNameKeyword;
  }
  if (!Util.isUnset(request.apiPathKeyword)) {
    body['ApiPathKeyword'] = request.apiPathKeyword;
  }
  if (!Util.isUnset(request.creatorId)) {
    body['CreatorId'] = request.creatorId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServicePublishedApis',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of APIs in the published state.
 *
 * @param request ListDataServicePublishedApisRequest
 * @return ListDataServicePublishedApisResponse
 */
async function listDataServicePublishedApis(request: ListDataServicePublishedApisRequest): ListDataServicePublishedApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServicePublishedApisWithOptions(request, runtime);
}

model ListDataSourcesRequest {
  dataSourceType?: string(name='DataSourceType', description='The type of the data source. Valid values:

*   odps
*   mysql
*   rds
*   oss
*   sqlserver
*   polardb
*   oracle
*   mongodb
*   emr
*   postgresql
*   analyticdb_for_mysql
*   hybriddb_for_postgresql
*   holo', example='rds'),
  envType?: int32(name='EnvType', description='The environment in which the data source is used. Valid values: 0 and 1. The value 0 indicates development environment. The value 1 indicates production environment.', example='1'),
  name?: string(name='Name', description='The name of the data source that you want to query.', example='test'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace to which the data sources belong. You can call the [ListProjects](https://help.aliyun.com/document_detail/2780068.html) operation to query the ID.

This parameter is required.', example='1'),
  status?: string(name='Status', description='The status of the data source. Valid values:

*   ENABLED
*   DISABLED', example='ENABLED'),
  subType?: string(name='SubType', description='The subtype of the data source. This parameter takes effect only when the DataSourceType parameter is set to rds.

If the value of the DataSourceType parameter is rds, the value of this parameter can be mysql, sqlserver, or postgresql.', example='mysql'),
}

model ListDataSourcesResponseBody = {
  data?: {
    dataSources?: [ 
      {
        bindingCalcEngineId?: long(name='BindingCalcEngineId', description='The ID of the compute engine with which the data source is associated.', example='123'),
        connectStatus?: int32(name='ConnectStatus', description='The status of the data source. Valid values:

*   1: The data source is accessible.
*   2: The data source is inaccessible.', example='1'),
        content?: string(name='Content', description='The data connection string. The value of this parameter is in the JSON format. Examples of connection strings of common data sources:

*   MaxCompute

        {
          "pubEndpoint": "http://service.cn.maxcompute.aliyun.com/api",
          "accessId": "xxxxxxx",
          "securityToken": null,
          "endpoint": "http://service.cn.maxcompute.aliyun-inc.com/api",
          "accessKey": "***",
          "name": "PRE_PROJECT_A_engine",
          "project": "PRE_PROJECT_A",
          "vpcEndpoint": "http://service.cn.maxcompute.aliyun-inc.com/api",
          "region": "cn-shanghai",
          "authType": "2"
        }

*   MySQL

        {
          "configType": "1",
          "database": "mysql_d111b",
          "instanceName": "rm-xxxxxx",
          "password": "***",
          "rdsOwnerId": "12133xxxxxx",
          "tag": "rds",
          "username": "mysql_db111"
        }

*   ApsaraDB RDS for SQL Server

        {
          "configType": "1",
          "jdbcUrl": "jdbc:sqlserver://rm-xxxxx.sqlserver.rds.aliyuncs.com:1433;DatabaseName=sqlserver_db1",
          "password": "***",
          "tag": "public",
          "username": "sqlserver_db111"
        }

*   Object Storage Service (OSS)

        {
          "accessId": "LTAINbR9Uxxxx",
          "accessKey": "***",
          "bucket": "bigxxx1223",
          "configType": "1",
          "endpoint": "http://oss-cn-hangzhou.aliyuncs.com",
          "tag": "public"
        }

*   ApsaraDB RDS for PostgreSQL

        {
          "configType": "1",
          "database": "cdp_xxx",
          "instanceName": "rm-xxxx",
          "password": "***",
          "rdsOwnerId": "121xxxxx",
          "tag": "rds",
          "username": "cdp_xxx"
        }

*   AnalyticDB for MySQL

        {
          "configType": "1",
          "password": "***",
          "schema": "ads_demo",
          "tag": "public",
          "url": "ads-xxx-xxxx.cn-hangzhou-1.ads.aliyuncs.com:3029",
          "username": "lslslsls"
        }', example='{"pubEndpoint":"http://service.cn.maxcompute.aliyun.com/api","accessId":"TMP.3KecGjvzy3i8MYfn2BGHgF7EHGyBFZcHm7GgngrABVRyvvKQrfF5kskR36xP361C3dqwbGo7SGYptAeGyiTwHXqLaBUvYC","securityToken":null,"endpoint":"http://service.cn.maxcompute.aliyun-inc.com/api","accessKey":"***","name":"PRE_PROJECT_A_engine","project":"PRE_PROJECT_A","vpcEndpoint":"http://service.cn.maxcompute.aliyun-inc.com/api","region":"cn-shanghai","authType":"2"}'),
        dataSourceType?: string(name='DataSourceType', description='The type of the data source. Valid values:

*   odps
*   mysql
*   rds
*   oss
*   sqlserver
*   polardb
*   oracle
*   mongodb
*   emr
*   postgresql
*   analyticdb_for_mysql
*   hybriddb_for_postgresql
*   holo', example='rds'),
        defaultEngine?: boolean(name='DefaultEngine', description='Indicates whether the compute engine that is associated with the data source is the default compute engine used by data sources of the same type.', example='false'),
        description?: string(name='Description', description='The description of the data source.', example='a connection'),
        envType?: int32(name='EnvType', description='The environment in which the data source is used. Valid values:

*   0: development environment
*   1: production environment', example='1'),
        gmtCreate?: string(name='GmtCreate', description='The time when the data source was created. Example: Mar 17, 2021 4:09:32 PM.', example='Mar 17, 2021 4:09:32 PM'),
        gmtModified?: string(name='GmtModified', description='The time when the data source was last modified. Example: Mar 17, 2021 4:09:32 PM.', example='Mar 17, 2021 4:09:32 PM'),
        id?: long(name='Id', description='The data source ID.', example='1'),
        name?: string(name='Name', description='The name of the data source.', example='abc'),
        operator?: string(name='Operator', description='The ID of the Alibaba Cloud account that is used to last modify the data source.', example='193543050****'),
        projectId?: int32(name='ProjectId', description='The ID of the workspace to which the data source belongs.', example='123'),
        sequence?: int32(name='Sequence', description='The sequence number of the data source. Data sources are sorted in descending order based on the value of this parameter.', example='300'),
        shared?: boolean(name='Shared', description='Indicates whether the data source is a shared data source.', example='false'),
        status?: int32(name='Status', description='The status of the data source. Valid values:

*   1: The data source is accessible.
*   2: The data source is inaccessible.', example='1'),
        subType?: string(name='SubType', description='The subtype of the data source. This parameter takes effect only when the DataSourceType parameter is set to rds.', example='mysql'),
        tenantId?: long(name='TenantId', description='The tenant ID.', example='1234567'),
      }
    ](name='DataSources', description='The data sources.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of data sources.', example='233'),
  }(name='Data', description='The query result returned.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc14115159376359****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListDataSourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourcesResponseBody(name='body'),
}

/**
 * @summary Queries the data sources added to a DataWorks workspace.
 *
 * @param request ListDataSourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataSourcesResponse
 */
async function listDataSourcesWithOptions(request: ListDataSourcesRequest, runtime: Util.RuntimeOptions): ListDataSourcesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataSources',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the data sources added to a DataWorks workspace.
 *
 * @param request ListDataSourcesRequest
 * @return ListDataSourcesResponse
 */
async function listDataSources(request: ListDataSourcesRequest): ListDataSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataSourcesWithOptions(request, runtime);
}

model ListDeploymentsRequest {
  creator?: string(name='Creator', description='The ID of the Alibaba Cloud account used by the user who creates the deployment packages.', example='20030****'),
  endCreateTime?: long(name='EndCreateTime', description='The time when the deployment packages to be queried are created. This value must be a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1593877765000'),
  endExecuteTime?: long(name='EndExecuteTime', description='The time when the deployment packages are run. This value must be a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1593877765000'),
  executor?: string(name='Executor', description='The ID of the Alibaba Cloud account used by the user who runs the deployment packages.', example='2003****'),
  keyword?: string(name='Keyword', description='The keyword that is contained in the names of the deployment packages. A fuzzy search is supported. After you enter a keyword, all deployment packages whose names contain the keyword are displayed.', example='hello'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='20'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the workspace ID.

You must configure either this parameter or the ProjectIdentifier parameter to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the workspace name.

You must configure either this parameter or the ProjectId parameter to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
  status?: int32(name='Status', description='The status of the deployment packages. Valid values:

*   0: The deployment packages are ready.
*   1: The deployment packages are deployed.
*   2: The deployment packages fail to be deployed.
*   6: The deployment packages are rejected.', example='1'),
}

model ListDeploymentsResponseBody = {
  data?: {
    deployments?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the deployment package was created.', example='1593877765000'),
        creator?: string(name='Creator', description='The ID of the Alibaba Cloud account used by the user who created the deployment package.', example='2003****'),
        errorMessage?: string(name='ErrorMessage', description='The error message returned when the deployment package failed.', example='OK'),
        executeTime?: long(name='ExecuteTime', description='The time when the deployment package was run. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1593877765000'),
        executor?: string(name='Executor', description='The ID of the Alibaba Cloud account used by the user who ran the deployment package.', example='2003****'),
        id?: long(name='Id', description='The deployment package ID. You can call the [GetDeployment](https://help.aliyun.com/document_detail/173950.html) operation to obtain the ID.', example='11111'),
        name?: string(name='Name', description='The name of the deployment package.', example='auto_created'),
        status?: int32(name='Status', description='The status of the deployment package. Valid values:

*   0: The deployment package is ready.
*   1: The deployment package is deployed.
*   2: The deployment package fails to be deployed.
*   6: The deployment package is rejected.', example='1'),
      }
    ](name='Deployments', description='The deployment packages.'),
    pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
    pageSize?: long(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='13'),
  }(name='Data', description='The data returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG'),
}

model ListDeploymentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDeploymentsResponseBody(name='body'),
}

/**
 * @summary Queries a list of deployment packages. This operation is equivalent to viewing a list of deployment packages on the Deployment Packages page of the DataWorks console.
 *
 * @param request ListDeploymentsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDeploymentsResponse
 */
async function listDeploymentsWithOptions(request: ListDeploymentsRequest, runtime: Util.RuntimeOptions): ListDeploymentsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.creator)) {
    body['Creator'] = request.creator;
  }
  if (!Util.isUnset(request.endCreateTime)) {
    body['EndCreateTime'] = request.endCreateTime;
  }
  if (!Util.isUnset(request.endExecuteTime)) {
    body['EndExecuteTime'] = request.endExecuteTime;
  }
  if (!Util.isUnset(request.executor)) {
    body['Executor'] = request.executor;
  }
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDeployments',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of deployment packages. This operation is equivalent to viewing a list of deployment packages on the Deployment Packages page of the DataWorks console.
 *
 * @param request ListDeploymentsRequest
 * @return ListDeploymentsResponse
 */
async function listDeployments(request: ListDeploymentsRequest): ListDeploymentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeploymentsWithOptions(request, runtime);
}

model ListEnabledExtensionsForProjectRequest {
  eventCode?: string(name='EventCode', description='The code of the extension point event.

This parameter is required.', example='commit-file'),
  fileType?: string(name='FileType', description='The type of the code for the file.

Valid values: 6 (Shell), 10 (ODPS SQL), 11 (ODPS MR), 24 (ODPS Script), 99 (zero load), 221 (PyODPS 2), 225 (ODPS Spark), 227 (EMR Hive), 228 (EMR Spark), 229 (EMR Spark SQL), 230 (EMR MR), 239 (OSS object inspection), 257 (EMR Shell), 258 (EMR Spark Shell), 259 (EMR Presto), 260 (EMR Impala), 900 (real-time synchronization), 1089 (cross-tenant collaboration), 1091 (Hologres development), 1093 (Hologres SQL), 1100 (assignment), and 1221 (PyODPS 3).

You can call the [ListFileType](https://help.aliyun.com/document_detail/212428.html) operation to query the type of the code for the file.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console?spm=a2c4g.11186623.0.0.6b4d4941azHd2k) and go to the Workspace page to obtain the workspace ID.

This parameter is required.', example='10000'),
}

model ListEnabledExtensionsForProjectResponseBody = {
  extensions?: [ 
    {
      createUser?: string(name='CreateUser', description='The creator of the extension.', example='3444434343555'),
      extensionCode?: string(name='ExtensionCode', description='The unique code of the extension.', example='a94a8e23bc0b4dfab9a5e4d2f374d645'),
      extensionDesc?: string(name='ExtensionDesc', description='The description of the extension.', example='ODPS SQL compatible Spark engine detection'),
      extensionName?: string(name='ExtensionName', description='The name of the extension.', example='max_pt function is not allowed.'),
      modifyUser?: string(name='ModifyUser', description='The modifier of the extension.', example='34452335611988'),
      owner?: string(name='Owner', description='The owner ID.', example='21323672*******55500'),
      parameterSetting?: string(name='ParameterSetting', description='The parameter settings of the extension. For more information, see [Configure extension parameters](https://help.aliyun.com/document_detail/405354.html).', example='extension.fileType.23.deploy-file.enabled=true'),
      tenantId?: long(name='TenantId', description='The tenant ID.', example='529889518659842'),
    }
  ](name='Extensions', description='The extensions.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4F2CA7ED-27E5-59EA-A8C4-F1F7A1FF0B22'),
}

model ListEnabledExtensionsForProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnabledExtensionsForProjectResponseBody(name='body'),
}

/**
 * @summary Queries a list of built-in and custom extensions that are enabled in a workspace.
 *
 * @description For information about codes of extension point events, see [Development references: Extension point event codes](https://help.aliyun.com/document_detail/463357.html).
 *
 * @param request ListEnabledExtensionsForProjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEnabledExtensionsForProjectResponse
 */
async function listEnabledExtensionsForProjectWithOptions(request: ListEnabledExtensionsForProjectRequest, runtime: Util.RuntimeOptions): ListEnabledExtensionsForProjectResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.eventCode)) {
    body['EventCode'] = request.eventCode;
  }
  if (!Util.isUnset(request.fileType)) {
    body['FileType'] = request.fileType;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListEnabledExtensionsForProject',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of built-in and custom extensions that are enabled in a workspace.
 *
 * @description For information about codes of extension point events, see [Development references: Extension point event codes](https://help.aliyun.com/document_detail/463357.html).
 *
 * @param request ListEnabledExtensionsForProjectRequest
 * @return ListEnabledExtensionsForProjectResponse
 */
async function listEnabledExtensionsForProject(request: ListEnabledExtensionsForProjectRequest): ListEnabledExtensionsForProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEnabledExtensionsForProjectWithOptions(request, runtime);
}

model ListEntitiesByTagsRequest {
  entityType?: string(name='EntityType', description='The type of the entity.

This parameter is required.', example='maxcompute-table'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='12345'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Valid values: 1 to 100.', example='10'),
  tags?: [
    UserEntityTag
  ](name='Tags', description='The tags.

This parameter is required.'),
}

model ListEntitiesByTagsShrinkRequest {
  entityType?: string(name='EntityType', description='The type of the entity.

This parameter is required.', example='maxcompute-table'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='12345'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Valid values: 1 to 100.', example='10'),
  tagsShrink?: string(name='Tags', description='The tags.

This parameter is required.'),
}

model ListEntitiesByTagsResponseBody = {
  data?: {
    entityList?: [
      Entity
    ](name='EntityList', description='The entities.'),
    nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.', example='12345'),
  }(name='Data', description='The data returned.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='101011005'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Invalid.Entity.EntityTypeNotSupported'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-E****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

true\\\\
false', example='true'),
}

model ListEntitiesByTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEntitiesByTagsResponseBody(name='body'),
}

/**
 * @summary Queries a list of entities by tag. Only entities of the maxcompute-table type are supported.
 *
 * @param tmpReq ListEntitiesByTagsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEntitiesByTagsResponse
 */
async function listEntitiesByTagsWithOptions(tmpReq: ListEntitiesByTagsRequest, runtime: Util.RuntimeOptions): ListEntitiesByTagsResponse {
  Util.validateModel(tmpReq);
  var request = new ListEntitiesByTagsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEntitiesByTags',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of entities by tag. Only entities of the maxcompute-table type are supported.
 *
 * @param request ListEntitiesByTagsRequest
 * @return ListEntitiesByTagsResponse
 */
async function listEntitiesByTags(request: ListEntitiesByTagsRequest): ListEntitiesByTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEntitiesByTagsWithOptions(request, runtime);
}

model ListEntityTagsRequest {
  qualifiedName?: string(name='QualifiedName', description='The unique identifier of the entity. Example: maxcompute-table.projectA.tableA.

This parameter is required.', example='maxcompute-table.projectA.tableA'),
}

model ListEntityTagsResponseBody = {
  data?: [
    UserEntityTag
  ](name='Data', description='The tags.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='101011005'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Invalid.Entity.EntityTypeNotSupported'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-E****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

true\\\\
false', example='true'),
}

model ListEntityTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEntityTagsResponseBody(name='body'),
}

/**
 * @summary Queries a list of tags of an entity. Only entities of the maxcompute-table type are supported.
 *
 * @param request ListEntityTagsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEntityTagsResponse
 */
async function listEntityTagsWithOptions(request: ListEntityTagsRequest, runtime: Util.RuntimeOptions): ListEntityTagsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEntityTags',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of tags of an entity. Only entities of the maxcompute-table type are supported.
 *
 * @param request ListEntityTagsRequest
 * @return ListEntityTagsResponse
 */
async function listEntityTags(request: ListEntityTagsRequest): ListEntityTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEntityTagsWithOptions(request, runtime);
}

model ListExtensionsRequest {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
}

model ListExtensionsResponseBody = {
  pagingInfo?: {
    extensions?: [ 
      {
        bindEventList?: [ 
          {
            eventCode?: string(name='EventCode', description='The code of the event.', example='commit-file'),
            eventName?: string(name='EventName', description='The name of the event.', example='File submission pre-event'),
          }
        ](name='BindEventList', description='The list of extension point events.'),
        extensionCode?: string(name='ExtensionCode', description='The unique code of the extension.', example='Extension Code'),
        extensionDesc?: string(name='ExtensionDesc', description='The description of the extension.', example='This is a description'),
        extensionName?: string(name='ExtensionName', description='The name of the extension.', example='Extension name'),
        owner?: string(name='Owner', description='The ID of the RAM user.', example='2003****'),
        status?: int32(name='Status', description='The state of the extension. Valid values: 0: Testing 1: Publishing 3: Disabled 4: Processing 5: Approved 6: Approve Failed', example='0'),
      }
    ](name='Extensions', description='The list of extensions.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='12'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='Id of the request', example='0000-ABCD-EFG'),
}

model ListExtensionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListExtensionsResponseBody(name='body'),
}

/**
 * @summary Queries a list of extensions.
 *
 * @param request ListExtensionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListExtensionsResponse
 */
async function listExtensionsWithOptions(request: ListExtensionsRequest, runtime: Util.RuntimeOptions): ListExtensionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListExtensions',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of extensions.
 *
 * @param request ListExtensionsRequest
 * @return ListExtensionsResponse
 */
async function listExtensions(request: ListExtensionsRequest): ListExtensionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listExtensionsWithOptions(request, runtime);
}

model ListFileTypeRequest {
  keyword?: string(name='Keyword', description='The name of the node type. You can log on to the DataWorks console, go to the DataStudio page, and then view the name of a specific node type on the left side of the page. Take note of the following items when you configure this parameter:

*   You can view the name of a specific node type, but the language specified by this parameter to present the name must be the same as the language specified by the Locale parameter.
*   Fuzzy match is supported.
*   If this parameter is not configured, the names of all node types are returned.', example='ODPS SQL'),
  locale?: string(name='Locale', description='The language that you use for the query. Valid values: zh-CN and en-US.', example='zh-CN'),
  pageNumber?: int32(name='PageNumber', description='The page number.

This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: 100.

This parameter is required.', example='50'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the DataWorks console and go to the Workspace page to view the workspace ID. You must configure either this parameter or the ProjectIdentifier parameter to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace page to view the workspace name. You must configure either this parameter or the ProjectId parameter to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model ListFileTypeResponseBody = {
  nodeTypeInfoList?: {
    nodeTypeInfo?: [ 
      {
        nodeType?: int32(name='NodeType', description='The code of the node type. The codes and names of node types have the following mappings: 6 (Shell), 10 (ODPS SQL), 11 (ODPS MR), 23 (Data Integration), 24 (ODPS Script), 99 (zero load), 221 (PyODPS 2), 225 (ODPS Spark), 227 (EMR Hive), 228 (EMR Spark), 229 (EMR Spark SQL), 230 (EMR MR), 239 (OSS object inspection), 257 (EMR Shell), 258 (EMR Spark Shell), 259 (EMR Presto), 260 (EMR Impala), 900 (real-time synchronization), 1089 (cross-tenant collaboration), 1091 (Hologres development), 1093 (Hologres SQL), 1100 (assignment), and 1221 (PyODPS 3)', example='10'),
        nodeTypeName?: string(name='NodeTypeName', description='The name of the node type. The codes and names of node types have the following mappings: 6 (Shell), 10 (ODPS SQL), 11 (ODPS MR), 23 (Data Integration), 24 (ODPS Script), 99 (zero load), 221 (PyODPS 2), 225 (ODPS Spark), 227 (EMR Hive), 228 (EMR Spark), 229 (EMR Spark SQL), 230 (EMR MR), 239 (OSS object inspection), 257 (EMR Shell), 258 (EMR Spark Shell), 259 (EMR Presto), 260 (EMR Impala), 900 (real-time synchronization), 1089 (cross-tenant collaboration), 1091 (Hologres development), 1093 (Hologres SQL), 1100 (assignment), and 1221 (PyODPS 3)', example='ODPS SQL'),
      }
    ](name='NodeTypeInfo', description='The information about the node type.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='50'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='127'),
  }(name='NodeTypeInfoList', description='The information about node types.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
}

model ListFileTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFileTypeResponseBody(name='body'),
}

/**
 * @summary Queries the information about node types, such as the code and name.
 *
 * @param request ListFileTypeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListFileTypeResponse
 */
async function listFileTypeWithOptions(request: ListFileTypeRequest, runtime: Util.RuntimeOptions): ListFileTypeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.locale)) {
    body['Locale'] = request.locale;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListFileType',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about node types, such as the code and name.
 *
 * @param request ListFileTypeRequest
 * @return ListFileTypeResponse
 */
async function listFileType(request: ListFileTypeRequest): ListFileTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFileTypeWithOptions(request, runtime);
}

model ListFileVersionsRequest {
  fileId?: long(name='FileId', description='The ID of the file. You can call the [ListFiles](https://help.aliyun.com/document_detail/173942.html) operation to query the ID.

This parameter is required.', example='100000001'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can click the Workspace Manage icon in the upper-right corner of the DataStudio page to go to the Workspace page and view the workspace ID.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The unique identifier of the DataWorks workspace. You can click the identifier in the upper-left corner of the DataStudio page to switch to another workspace.

You must specify either this parameter or ProjectId to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model ListFileVersionsResponseBody = {
  data?: {
    fileVersions?: [ 
      {
        changeType?: string(name='ChangeType', description='The type of the change to the file of the current version. Valid values: CREATE, UPDATE, and DELETE.', example='UPDATE'),
        comment?: string(name='Comment', description='The description of the file version.', example='Second version submission'),
        commitTime?: long(name='CommitTime', description='The time when the file version was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1593881265000'),
        commitUser?: string(name='CommitUser', description='The ID of the Alibaba Cloud account used to create the file of the current version.', example='73842342****'),
        fileContent?: string(name='FileContent', description='The code in the file of the current version.', example='SHOW TABLES;'),
        fileName?: string(name='FileName', description='The name of the file of the current version.', example='ods_user_info_d'),
        filePropertyContent?: string(name='FilePropertyContent', description='The basic information about the file of the current version.', example='{"fileName":"ods_user_info_d","fileType":10}'),
        fileVersion?: int32(name='FileVersion', description='The version of the file.', example='2'),
        isCurrentProd?: boolean(name='IsCurrentProd', description='Indicates whether the file version is the same as the latest file version in the production environment.', example='false'),
        nodeContent?: string(name='NodeContent', description='The scheduling configurations for the node that corresponds to the file of the current version.', example='{"cycleType":0,"cronExpress":"00 05 00 * * ?"}'),
        nodeId?: long(name='NodeId', description='The ID of the auto triggered node that corresponds to the file of the current version.', example='1234'),
        status?: string(name='Status', description='The status of the file of the current version. Valid values: COMMITTING, COMMITTED, CHECK_OK, PACKAGED, DEPLOYING, DEPLOYED, and CANCELLED.', example='COMMITTED'),
        useType?: string(name='UseType', description='The functional module to which the file belongs. Valid values: NORMAL, MANUAL, MANUAL_BIZ, SKIP, ADHOCQUERY, and COMPONENT. The value SKIP indicates that the node corresponding to the file is run in dry-run mode.', example='NORMAL'),
      }
    ](name='FileVersions', description='The details of the file version.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='13'),
  }(name='Data', description='The file versions returned.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ListFileVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFileVersionsResponseBody(name='body'),
}

/**
 * @summary Queries a list of file versions.
 *
 * @param request ListFileVersionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListFileVersionsResponse
 */
async function listFileVersionsWithOptions(request: ListFileVersionsRequest, runtime: Util.RuntimeOptions): ListFileVersionsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListFileVersions',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of file versions.
 *
 * @param request ListFileVersionsRequest
 * @return ListFileVersionsResponse
 */
async function listFileVersions(request: ListFileVersionsRequest): ListFileVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFileVersionsWithOptions(request, runtime);
}

model ListFilesRequest {
  exactFileName?: string(name='ExactFileName', description='The exact matching file name. The file name of the query result is exactly the same as this parameter.', example='ods_create.sql'),
  fileFolderPath?: string(name='FileFolderPath', description='The path of the files.', example='Business_process/my_first_business_process/MaxCompute/ods_layer'),
  fileIdIn?: string(name='FileIdIn', description='The file ID list. The File ID set of the query result can only be a subset of the list. You can specify up to 50 fileids at a time.', example='78237,816123'),
  fileTypes?: string(name='FileTypes', description='The types of the code in the files.

Valid values: 6 (Shell), 10 (ODPS SQL), 11 (ODPS MR), 23 (Data Integration), 24 (ODPS Script), 97 (PAI), 98 (node group), 99 (zero load), 221 (PyODPS 2), 225 (ODPS Spark), 227 (EMR Hive), 228 (EMR Spark), 229 (EMR Spark SQL), 230 (EMR MR), 239 (OSS object inspection), 257 (EMR Shell), 258 (EMR Spark Shell), 259 (EMR Presto), 260 (EMR Impala), 900 (real-time synchronization), 1002 (PAI inner node), 1089 (cross-tenant collaboration), 1091 (Hologres development), 1093 (Hologres SQL), 1100 (assignment), 1106 (for-each), and 1221 (PyODPS 3).', example='10,23'),
  keyword?: string(name='Keyword', description='The keyword in the file names. The keyword is used to perform a fuzzy match. You can specify a keyword to query all files whose names contain the keyword.', example='ods'),
  needAbsoluteFolderPath?: boolean(name='NeedAbsoluteFolderPath', description='Whether the query result contains the path of the folder where the file is located.', example='false'),
  needContent?: boolean(name='NeedContent', description='Whether the query results contain file content (for files with more content, there may be a long network transmission delay).', example='false'),
  nodeId?: long(name='NodeId', description='The ID of the node that is scheduled. You can call the [ListNodes](https://help.aliyun.com/document_detail/173979.html) operation to query the ID of the node.', example='123541234'),
  owner?: string(name='Owner', description='The owner of the files.', example='3726346****'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace Management page to obtain the workspace ID.

You must configure either the ProjectId or ProjectIdentifier parameter to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace Management page to obtain the workspace name.

You must configure either the ProjectId or ProjectIdentifier parameter to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
  useType?: string(name='UseType', description='The module to which the files belong. Valid values:

*   NORMAL: The files are used for DataStudio.
*   MANUAL: The files are used for manually triggered nodes.
*   MANUAL_BIZ: The files are used for manually triggered workflows.
*   SKIP: The files are used for dry-run nodes in DataStudio.
*   ADHOCQUERY: The files are used for ad hoc queries.
*   COMPONENT: The files are used for snippets.', example='NORMAL'),
}

model ListFilesResponseBody = {
  data?: {
    files?: [ 
      {
        absoluteFolderPath?: string(name='AbsoluteFolderPath', description='The path of the folder where the file is located.', example='Business_process/my_first_business_process/MaxCompute/ods_layer'),
        autoParsing?: boolean(name='AutoParsing', description='Specifies whether the automatic parsing feature is enabled for the file. Valid values:

*   true: The automatic parsing feature is enabled for the file.
*   false: The automatic parsing feature is not enabled for the file.

This parameter is equivalent to the Analyze Code parameter in the Dependencies section of the Properties panel in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='true'),
        bizId?: long(name='BizId', description='The ID of the workflow to which the file belongs. This parameter is deprecated and replaced by the BusinessId parameter.', example='300000'),
        businessId?: long(name='BusinessId', description='The ID of the workflow to which the file belongs.', example='300000'),
        commitStatus?: int32(name='CommitStatus', description='Indicates whether the latest code in the file is committed. Valid values: 0 and 1. The value 0 indicates that the latest code in the file is not committed. The value 1 indicates that the latest code in the file is committed.', example='1'),
        connectionName?: string(name='ConnectionName', description='The ID of the compute engine instance that is used to run the node that corresponds to the file.', example='odps_first'),
        content?: string(name='Content', description='This parameter is deprecated. You can call the [GetFile](~~173954#doc-api-dataworks-public-GetFile~~) operation to query the details of the file.', example='SHOW TABLES;'),
        createTime?: long(name='CreateTime', description='The time when the file was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1593950832000'),
        createUser?: string(name='CreateUser', description='The ID of the Alibaba Cloud account that is used to create the file.', example='382762****'),
        currentVersion?: int32(name='CurrentVersion', description='The latest version number of the file.', example='2'),
        fileDescription?: string(name='FileDescription', description='The description of the file.', example='my test datastudio file'),
        fileFolderId?: string(name='FileFolderId', description='The ID of the folder to which the file belongs.', example='2735c2****'),
        fileId?: long(name='FileId', description='The ID of the file.', example='10000001'),
        fileName?: string(name='FileName', description='The name of the file.', example='ods_user_info_d'),
        fileType?: int32(name='FileType', description='The type of the code in the file. Valid values: 6 (Shell), 10 (ODPS SQL), 11 (ODPS MR), 23 (Data Integration), 24 (ODPS Script), 99 (zero load), 221 (PyODPS 2), 225 (ODPS Spark), 227 (EMR Hive), 228 (EMR Spark), 229 (EMR Spark SQL), 230 (EMR MR), 239 (OSS object inspection), 257 (EMR Shell), 258 (EMR Spark Shell), 259 (EMR Presto), 260 (EMR Impala), 900 (real-time synchronization), 1089 (cross-tenant collaboration), 1091 (Hologres development), 1093 (Hologres SQL), 1100 (assignment), and 1221 (PyODPS 3).', example='10'),
        isMaxCompute?: boolean(name='IsMaxCompute', description='Indicates whether the file needs to be uploaded to MaxCompute if the file is a MaxCompute resource file.

This parameter is returned only if the file is a MaxCompute resource file.', example='false'),
        lastEditTime?: long(name='LastEditTime', description='The time when the file was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1593950832000'),
        lastEditUser?: string(name='LastEditUser', description='The ID of the Alibaba Cloud account that is used to last modify the file.', example='38748246285727'),
        nodeId?: long(name='NodeId', description='The ID of the auto triggered node that is generated in the scheduling system after the file is committed.', example='300001'),
        owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the file owner.', example='3872572****'),
        parentId?: long(name='ParentId', description='The ID of the node group file to which the current file belongs. This parameter is returned only if the current file is an inner file of the node group file.', example='-1'),
        useType?: string(name='UseType', description='The module to which the file belongs. Valid values:

*   NORMAL: The file is used for DataStudio.
*   MANUAL: The file is used for a manually triggered node.
*   MANUAL_BIZ: The file is used for a manually triggered workflow.
*   SKIP: The files is used for a dry-run node in DataStudio.
*   ADHOCQUERY: The file is used for an ad hoc query.
*   COMPONENT: The file is used for a snippet.', example='NORMAL'),
      }
    ](name='Files', description='The details of the files.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='13'),
  }(name='Data', description='The files returned.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can troubleshoot issues based on the ID.', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request is successful.
*   false: The request fails.', example='true'),
}

model ListFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFilesResponseBody(name='body'),
}

/**
 * @summary Queries a list of files.
 *
 * @param request ListFilesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListFilesResponse
 */
async function listFilesWithOptions(request: ListFilesRequest, runtime: Util.RuntimeOptions): ListFilesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.exactFileName)) {
    body['ExactFileName'] = request.exactFileName;
  }
  if (!Util.isUnset(request.fileFolderPath)) {
    body['FileFolderPath'] = request.fileFolderPath;
  }
  if (!Util.isUnset(request.fileIdIn)) {
    body['FileIdIn'] = request.fileIdIn;
  }
  if (!Util.isUnset(request.fileTypes)) {
    body['FileTypes'] = request.fileTypes;
  }
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.needAbsoluteFolderPath)) {
    body['NeedAbsoluteFolderPath'] = request.needAbsoluteFolderPath;
  }
  if (!Util.isUnset(request.needContent)) {
    body['NeedContent'] = request.needContent;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.useType)) {
    body['UseType'] = request.useType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListFiles',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of files.
 *
 * @param request ListFilesRequest
 * @return ListFilesResponse
 */
async function listFiles(request: ListFilesRequest): ListFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFilesWithOptions(request, runtime);
}

model ListFoldersRequest {
  pageNumber?: int32(name='PageNumber', description='The page number.

This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.

This parameter is required.', example='10'),
  parentFolderPath?: string(name='ParentFolderPath', description='The path of the parent folder.

This parameter is required.', example='Business_process/my_first_business_process/MaxCompute'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the DataWorks console and go to the Workspace page to obtain the workspace ID. You must configure either this parameter or the ProjectIdentifier parameter to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace page to obtain the workspace name. You must configure either this parameter or the ProjectId parameter to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model ListFoldersResponseBody = {
  data?: {
    folders?: [ 
      {
        folderId?: string(name='FolderId', description='The folder ID.', example='2735c2****'),
        folderPath?: string(name='FolderPath', description='The path of the folder.', example='Business_process/my_first_business_process/MaxCompute/ods_layer'),
      }
    ](name='Folders', description='The list of folders.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='13'),
  }(name='Data', description='The information about the folders.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can troubleshoot issues based on the ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListFoldersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFoldersResponseBody(name='body'),
}

/**
 * @summary Queries a list of folders.
 *
 * @param request ListFoldersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListFoldersResponse
 */
async function listFoldersWithOptions(request: ListFoldersRequest, runtime: Util.RuntimeOptions): ListFoldersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentFolderPath)) {
    body['ParentFolderPath'] = request.parentFolderPath;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListFolders',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of folders.
 *
 * @param request ListFoldersRequest
 * @return ListFoldersResponse
 */
async function listFolders(request: ListFoldersRequest): ListFoldersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFoldersWithOptions(request, runtime);
}

model ListInnerNodesRequest {
  nodeName?: string(name='NodeName', description='The name of the node to which the inner nodes belong.', example='liux_test_n****'),
  outerNodeId?: long(name='OuterNodeId', description='The ID of the node group to which the inner nodes belong.

This parameter is required.', example='1234'),
  pageNumber?: int32(name='PageNumber', description='The page number. Valid values: 1 to 100.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  programType?: string(name='ProgramType', description='The type of the node to which the inner nodes belong.

Valid values: 6 (Shell), 10 (ODPS SQL), 11 (ODPS MR), 23 (Data Integration), 24 (ODPS Script), 97 (PAI), 98 (node group), 99 (zero load), 221 (PyODPS 2), 225 (ODPS Spark), 227 (EMR Hive), 228 (EMR Spark), 229 (EMR Spark SQL), 230 (EMR MR), 239 (OSS object inspection), 257 (EMR Shell), 258 (EMR Spark Shell), 259 (EMR Presto), 260 (EMR Impala), 900 (real-time synchronization), 1002 (PAI inner node), 1089 (cross-tenant collaboration), 1091 (Hologres development), 1093 (Hologres SQL), 1100 (assignment), 1106 (for-each), and 1221 (PyODPS 3). You can call the ListNodes operation to query the type of the node.', example='ODPS_SQL'),
  projectEnv?: string(name='ProjectEnv', description='The environment in which the node is run. Valid values: DEV and PROD. Default value: PROD.', example='PROD'),
  projectId?: long(name='ProjectId', description='The workspace ID.

This parameter is required.', example='1234'),
}

model ListInnerNodesResponseBody = {
  paging?: {
    nodes?: [ 
      {
        baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
        businessId?: long(name='BusinessId', description='The workflow ID.', example='123'),
        connection?: string(name='Connection', description='The connection string.', example='odps_first'),
        cronExpress?: string(name='CronExpress', description='The CRON expression.', example='00 00 00 * * ?'),
        description?: string(name='Description', description='The description of the inner node.', example='test'),
        dqcDescription?: string(name='DqcDescription', description='The table and partition filter expression in Data Quality that are associated with the inner node.', example='[{"projectName":"ztjy_dim","tableName":"dim_user_agent_manage_area_a","partition":"ds\\\\u003d$[yyyy-mm-dd-1]"}]'),
        dqcType?: string(name='DqcType', description='Indicates whether the inner node is associated with a monitoring rule in Data Quality. Valid values: 0 and 1. The value 0 indicates that the inner node is associated with a monitoring rule in Data Quality. The value 1 indicates that the inner node is not associated with a monitoring rule in Data Quality.', example='1'),
        nodeId?: long(name='NodeId', description='The inner node ID.', example='12'),
        nodeName?: string(name='NodeName', description='The name of the inner node.', example='liux_test_n****'),
        ownerId?: string(name='OwnerId', description='The owner ID.', example='1933****36551'),
        paramValues?: string(name='ParamValues', description='The additional parameters.', example='a=b'),
        priority?: int32(name='Priority', description='The priority of the inner node. Valid values: 1, 3, 5, 7, and 8.', example='1'),
        programType?: string(name='ProgramType', description='The type of the inner node.', example='ODPS_SQL'),
        projectId?: long(name='ProjectId', description='The workspace ID.', example='123'),
        repeatInterval?: long(name='RepeatInterval', description='The interval at which the inner node is rerun after the inner node fails to run.', example='60'),
        repeatability?: boolean(name='Repeatability', description='Indicates whether the inner node can be rerun.', example='true'),
        resGroupName?: string(name='ResGroupName', description='The name of the resource group.', example='Default Resource Group'),
        schedulerType?: string(name='SchedulerType', description='The scheduling type of the inner node. Valid values:

*   NORMAL: The inner node is an auto triggered node.
*   MANUAL: The inner node is a manually triggered node. The scheduling system does not run the node on a regular basis.
*   PAUSE: The inner node is a paused node.
*   SKIP: The inner node is a dry-run node. Dry-run nodes are started as scheduled, but the scheduling system sets the status of the nodes to successful when it starts to run them.', example='NORMAL'),
      }
    ](name='Nodes', description='The list of inner nodes.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of inner nodes returned.', example='100'),
  }(name='Paging', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListInnerNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInnerNodesResponseBody(name='body'),
}

/**
 * @summary Queries information about inner nodes. For example, you can call this operation to query the inner nodes of a node group or a do-while node. You cannot call this operation to query the inner nodes of a PAI node.
 *
 * @param request ListInnerNodesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListInnerNodesResponse
 */
async function listInnerNodesWithOptions(request: ListInnerNodesRequest, runtime: Util.RuntimeOptions): ListInnerNodesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeName)) {
    body['NodeName'] = request.nodeName;
  }
  if (!Util.isUnset(request.outerNodeId)) {
    body['OuterNodeId'] = request.outerNodeId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.programType)) {
    body['ProgramType'] = request.programType;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListInnerNodes',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries information about inner nodes. For example, you can call this operation to query the inner nodes of a node group or a do-while node. You cannot call this operation to query the inner nodes of a PAI node.
 *
 * @param request ListInnerNodesRequest
 * @return ListInnerNodesResponse
 */
async function listInnerNodes(request: ListInnerNodesRequest): ListInnerNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInnerNodesWithOptions(request, runtime);
}

model ListInstanceAmountRequest {
  beginDate?: string(name='BeginDate', description='The beginning of the time range to query, accurate to the day. Specify the time in the ISO 8601 standard in the yyyy-MM-dd\\\\"T\\\\"HH:mm:ssZ format. The time must be in UTC.

This parameter is required.', example='2021-06-13T00:00:00+0800'),
  endDate?: string(name='EndDate', description='The end of the time range to query, accurate to the day. Specify the time in the ISO 8601 standard in the yyyy-MM-dd\\\\"T\\\\"HH:mm:ssZ format. The time must be in UTC.

This parameter is required.', example='2021-06-16T00:00:00+0800'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the DataWorks console and go to the Work space page to obtain the workspace ID.

This parameter is required.', example='10000'),
}

model ListInstanceAmountResponseBody = {
  instanceCounts?: [ 
    {
      count?: int32(name='Count', description='The number of auto triggered node instances.', example='9527'),
      date?: long(name='Date', description='The data timestamp at which the number of auto triggered node instances was obtained. This value is a UNIX timestamp.', example='1623772800000'),
    }
  ](name='InstanceCounts', description='The trend of the number of auto triggered node instances within the specified period of time.'),
  requestId?: string(name='RequestId', description='The request ID.', example='95279527adhfj****'),
}

model ListInstanceAmountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceAmountResponseBody(name='body'),
}

/**
 * @summary Queries the trend of the number of auto triggered node instances within a specified period of time.
 *
 * @param request ListInstanceAmountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListInstanceAmountResponse
 */
async function listInstanceAmountWithOptions(request: ListInstanceAmountRequest, runtime: Util.RuntimeOptions): ListInstanceAmountResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.beginDate)) {
    body['BeginDate'] = request.beginDate;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListInstanceAmount',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the trend of the number of auto triggered node instances within a specified period of time.
 *
 * @param request ListInstanceAmountRequest
 * @return ListInstanceAmountResponse
 */
async function listInstanceAmount(request: ListInstanceAmountRequest): ListInstanceAmountResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstanceAmountWithOptions(request, runtime);
}

model ListInstanceHistoryRequest {
  instanceId?: long(name='InstanceId', description='The instance ID. You can call the ListInstances operation to query the instance ID.

This parameter is required.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV. By default, data of instances in the production environment is queried.', example='PROD'),
}

model ListInstanceHistoryResponseBody = {
  instances?: [ 
    {
      beginRunningTime?: long(name='BeginRunningTime', description='The time when the instance started to be run. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1590416703313'),
      beginWaitResTime?: long(name='BeginWaitResTime', description='The time when the instance started to wait for resources.', example='1590416703313'),
      beginWaitTimeTime?: long(name='BeginWaitTimeTime', description='The time when the instance started to wait to be scheduled.', example='1590416703313'),
      bizdate?: long(name='Bizdate', description='The data timestamp of the instance. In most cases, the value is one day before the time when the instance was run.', example='1590336000000'),
      createTime?: long(name='CreateTime', description='The time when the instance was generated.', example='1590416703313'),
      cycTime?: long(name='CycTime', description='The time when the node started to be run. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1590422400000'),
      dagId?: long(name='DagId', description='The workflow ID.', example='33845'),
      dagType?: string(name='DagType', description='Indicates whether the instance is associated with a monitoring rule in Data Quality. Valid values:

*   0: The instance is associated with a monitoring rule in Data Quality.
*   1: The instance is not associated with a monitoring rule in Data Quality.', example='1'),
      errorMessage?: string(name='ErrorMessage', description='The error message. This parameter is deprecated. You can call the GetInstanceLog operation to query the error information related to the node.', example='error message'),
      finishTime?: long(name='FinishTime', description='The time when the running of the node was complete. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1590416703313'),
      instanceHistoryId?: long(name='InstanceHistoryId', description='The historical record number of the instance.', example='1'),
      instanceId?: long(name='InstanceId', description='The instance ID.', example='1234'),
      modifyTime?: long(name='ModifyTime', description='The time when the node was last modified.', example='1590416703313'),
      nodeId?: long(name='NodeId', description='The node ID.', example='33115'),
      nodeName?: string(name='NodeName', description='The name of the node.', example='kzh'),
      status?: string(name='Status', description='The status of the node that generates the instance. Valid values:

*   NOT_RUN: The node is not run.
*   WAIT_TIME: The node is waiting for the scheduling time to arrive.
*   WAIT_RESOURCE: The node is waiting for resources.
*   RUNNING: The node is running.
*   CHECKING: Data quality is being checked for the node.
*   CHECKING_CONDITION: Branch conditions are being checked for the node.
*   FAILURE: The node fails to be run.
*   SUCCESS: The node is successfully run.', example='NOT_RUN'),
      taskType?: string(name='TaskType', description='The scheduling type of the node. Valid values:

*   NORMAL(0): The node is an auto triggered node. The scheduling system regularly runs the node.
*   MANUAL(1): The node is a manually triggered node. The scheduling system does not regularly run the node.
*   PAUSE(2): The node is a frozen node. The scheduling system regularly runs the node but sets the status of the node to failed when the scheduling system starts to run the node.
*   SKIP(3): The node is a dry-run node. The scheduling system regularly runs the node but sets the status of the node to successful when the scheduling system starts to run the node.
*   SKIP_UNCHOOSE(4): The node is an unselected node in a temporary workflow. This type of node exists only in temporary workflows. The scheduling system sets the status of the node to successful when the scheduling system starts to run the node.
*   SKIP_CYCLE(5): The node is a node that is scheduled by the week or month and is waiting for the scheduling time to arrive. The scheduling system regularly runs the node but sets the status of the node to successful when the scheduling system starts to run the node.
*   CONDITION_UNCHOOSE(6): The node is not selected by its ancestor branch node and is run as a dry-run node.
*   REALTIME_DEPRECATED(7): The node has instances that are generated in real time but deprecated. The scheduling system sets the status of the node to successful.', example='NORMAL(0)'),
    }
  ](name='Instances', description='The instances.'),
  requestId?: string(name='RequestId', description='The request ID.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model ListInstanceHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceHistoryResponseBody(name='body'),
}

/**
 * @summary Queries information about the historical records of all instances. One historical record is generated if an instance is rerun once.
 *
 * @param request ListInstanceHistoryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListInstanceHistoryResponse
 */
async function listInstanceHistoryWithOptions(request: ListInstanceHistoryRequest, runtime: Util.RuntimeOptions): ListInstanceHistoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListInstanceHistory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries information about the historical records of all instances. One historical record is generated if an instance is rerun once.
 *
 * @param request ListInstanceHistoryRequest
 * @return ListInstanceHistoryResponse
 */
async function listInstanceHistory(request: ListInstanceHistoryRequest): ListInstanceHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstanceHistoryWithOptions(request, runtime);
}

model ListInstancesRequest {
  beginBizdate?: string(name='BeginBizdate', description='The parameters related to the node.', example='2020-02-02 00:00:00'),
  bizName?: string(name='BizName', description='The ID of the instance.', example='test_bizName'),
  bizdate?: string(name='Bizdate', description='The number of entries returned per page. Default value: 10. Maximum value: 100.', example='2020-02-02 00:00:00'),
  dagId?: long(name='DagId', description='The environment of the workspace. Valid values: PROD and DEV. The value PROD indicates the production environment. The value DEV indicates the development environment.', example='11111'),
  endBizdate?: string(name='EndBizdate', description='The ID of the workflow.', example='2020-02-03 00:00:00'),
  nodeId?: long(name='NodeId', description='Indicates whether the instance is associated with a monitoring rule in Data Quality. Valid values:

*   0: The instance is associated with a monitoring rule in Data Quality.
*   1: The instance is not associated with a monitoring rule in Data Quality.', example='100000000000'),
  nodeName?: string(name='NodeName', description='Indicates whether the node can be rerun.', example='openmr_8****'),
  orderBy?: string(name='OrderBy', description='The sorting rule of the instances to be returned. Valid values:

*   CREATE_TIME_DESC: The instances are sorted in descending order of their creation time.
*   INSTANCE_ID_DESC (default): The instances are sorted in descending order of their IDs.', example='INSTANCE_ID_DESC'),
  owner?: string(name='Owner', description='The connection string.', example='193379****'),
  pageNumber?: int32(name='PageNumber', description='The operation that you want to perform.', example='1'),
  pageSize?: int32(name='PageSize', description='The ID of the node.', example='10'),
  programType?: string(name='ProgramType', description='The error code returned.', example='ODPS_SQL'),
  projectEnv?: string(name='ProjectEnv', description='The environment in which the node runs. Valid values: DEV and PROD.

This parameter is required.', example='PROD'),
  projectId?: long(name='ProjectId', description='The ID of the baseline.

This parameter is required.', example='12345'),
  status?: string(name='Status', description='The status of the node. Valid values:

*   NOT_RUN: The node is not run.
*   WAIT_TIME: The node is waiting for the scheduling time to arrive.
*   WAIT_RESOURCE: The node is waiting for resources.
*   RUNNING: The node is running.
*   CHECKING: Data quality is being checked for the node.
*   CHECKING_CONDITION: Branch conditions are being checked for the node.
*   FAILURE: The node fails to run.
*   SUCCESS: The node is successfully run.', example='NOT_RUN'),
}

model ListInstancesResponseBody = {
  data?: {
    instances?: [ 
      {
        baselineId?: long(name='BaselineId', description='The type of the workflow. Valid values:

*   DAILY: The workflow is used to run auto triggered nodes.
*   MANUAL: The workflow is used to run manually triggered nodes.
*   SMOKE_TEST: The workflow is used to perform smoke testing.
*   SUPPLY_DATA: The workflow is used to backfill data.', example='123123'),
        beginRunningTime?: long(name='BeginRunningTime', description='The time when the instance started to run.', example='1590416703313'),
        beginWaitResTime?: long(name='BeginWaitResTime', description='The time when the node stopped running.', example='1590416703313'),
        beginWaitTimeTime?: long(name='BeginWaitTimeTime', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='1590416703313'),
        bizdate?: long(name='Bizdate', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.

You cannot specify the sorting method for the instances to be returned by this operation. By default, the instances are sorted in descending order of the time when the instances were created.', example='1590336000000'),
        businessId?: long(name='BusinessId', description='The ID of the workflow to which the node belongs.', example='123'),
        connection?: string(name='Connection', description='The number of times the node can be rerun. The value of this parameter can be empty or an integer that is greater than or equal to 0.

*   If the value of this parameter is empty, the number of times that the node can be rerun is not specified.
*   If the value of this parameter is 0, the node cannot be rerun.
*   If the value of this parameter is a positive integer such as n, the node can be rerun n times. For example, if the value of this parameter is 1, the node can be rerun once. If the value of this parameter is 2, the node can be rerun twice.', example='odps_first'),
        createTime?: long(name='CreateTime', description='The interval at which the node is rerun after the node fails to run. Unit: milliseconds.', example='1590416703313'),
        createUser?: string(name='CreateUser', description='The ID of the node. You can call the [ListNodes](https://help.aliyun.com/document_detail/173979.html) operation to query the ID of the node.', example='Test'),
        cycTime?: long(name='CycTime', description='The error message returned.', example='1590422400000'),
        dagId?: long(name='DagId', description='The time when the instance started to wait for resources.', example='33845'),
        dagType?: string(name='DagType', description='The data timestamp of the instance. In most cases, the value is one day before the time when the instance was run.', example='DAILY'),
        dqcDescription?: string(name='DqcDescription', description='The operation that you want to perform.', example='[{"projectName":"ztjy_dim","tableName":"dim_user_agent_manage_area_a","partition":"ds\\\\u003d$[yyyy-mm-dd-1]"}]'),
        dqcType?: int32(name='DqcType', description='The status of the node. Valid values:

*   NOT_RUN: The node is not run.
*   WAIT_TIME: The node is waiting for the scheduling time to arrive.
*   WAIT_RESOURCE: The node is waiting for resources.
*   RUNNING: The node is running.
*   CHECKING: Data quality is being checked for the node.
*   CHECKING_CONDITION: Branch conditions are being checked for the node.
*   FAILURE: The node fails to run.
*   SUCCESS: The node is successfully run.', example='1'),
        errorMessage?: string(name='ErrorMessage', description='The name of the account that is used to run the instance. For example, if an account named Test was used to run the instance to backfill data, the value of this parameter is Test.', example='error message'),
        finishTime?: long(name='FinishTime', description='The ID of the Alibaba Cloud account used by the workspace administrator. You can log on to the Alibaba Cloud Management Console and view the ID on the Security Settings page of the Account Center console.', example='1590416703313'),
        instanceId?: long(name='InstanceId', description='The number of the page to return. Minimum value:1. Maximum value: 100.', example='1234'),
        modifyTime?: long(name='ModifyTime', description='The name of the workflow. You can call the [ListBusiness](https://help.aliyun.com/document_detail/173945.html) operation to query the name of the workflow.', example='1590416703313'),
        nodeId?: long(name='NodeId', description='The environment of the workspace. Valid values: PROD and DEV. The value PROD indicates the production environment. The value DEV indicates the development environment.', example='33115'),
        nodeName?: string(name='NodeName', description='The ID of the workflow.', example='kzh'),
        paramValues?: string(name='ParamValues', description='The table and partition filter expression in Data Quality that are associated with the node.', example='bizdate=$bizdate tbods=$tbods'),
        priority?: int32(name='Priority', description='The total number of instances.', example='1'),
        relatedFlowId?: long(name='RelatedFlowId', description='The type of the node. You can call the [ListNodes](https://help.aliyun.com/document_detail/173979.html) operation to query the type of the node.', example='123456'),
        repeatInterval?: long(name='RepeatInterval', description='The scheduling type of the node. Valid values:

*   NORMAL(0): The node is an auto triggered node. The scheduling system regularly runs the node.

*   MANUAL(1): The node is a manually triggered node. The scheduling system does not regularly run the node.

*   PAUSE(2): The node is a frozen node. The scheduling system regularly runs the node but sets the status of the node to failed when the scheduling system starts to run the node.

*   SKIP(3): The node is a dry-run node. The scheduling system regularly runs the node but sets the status of the node to succeeded when the scheduling system starts to run the node.

*   SKIP_UNCHOOSE(4): The node is an unselected node in a temporary workflow. This type of node exists only in temporary workflows. The scheduling system sets the status of the node to succeeded when the scheduling system starts to run the node.

*   SKIP_CYCLE(5): The node is a node that is scheduled by week or month and is waiting for the scheduling time to arrive. The scheduling system regularly runs the node but sets the status of the node to succeeded when the scheduling system starts to run the node.

*   CONDITION_UNCHOOSE(6): The node is not selected by its ancestor branch node and is run as a dry-run node.

    REALTIME_DEPRECATED(7): The node has instances that are generated in real time but deprecated. The scheduling system sets the status of the node to succeeded.', example='60000'),
        repeatability?: boolean(name='Repeatability', description='The status of the node. Valid values:

*   NOT_RUN: The node is not run.
*   WAIT_TIME: The node is waiting for the scheduling time to arrive.
*   WAIT_RESOURCE: The node is waiting for resources.
*   RUNNING: The node is running.
*   CHECKING: Data quality is being checked for the node.
*   CHECKING_CONDITION: Branch conditions are being checked for the node.
*   FAILURE: The node fails to run.
*   SUCCESS: The node is successfully run.', example='true'),
        status?: string(name='Status', description='The data timestamp of the instances that you want to query. Specify the timestamp in the yyyy-MM-dd HH:mm:ss format.', example='NOT_RUN'),
        taskRerunTime?: int32(name='TaskRerunTime', description='The ID of the workspace. You can call the [ListProjects](https://help.aliyun.com/document_detail/178393.html) operation to query the ID of the workspace.', example='0'),
        taskType?: string(name='TaskType', description='The information about the instances.', example='NORMAL(0)'),
      }
    ](name='Instances', description='The name of the node. You can call the [ListNodes](https://help.aliyun.com/document_detail/173979.html) operation to query the name of the node.'),
    pageNumber?: int32(name='PageNumber', description='The time when the node was scheduled to run.', example='1'),
    pageSize?: int32(name='PageSize', description='The end of the time range to query. Specify the time in the yyyy-MM-dd HH:mm:ss format.', example='10'),
    totalCount?: int32(name='TotalCount', description='The priority of the instance. Valid values: 1, 3, 5, 7, and 8.

A greater value indicates a higher priority. Default value: 1.', example='66'),
  }(name='Data', description='The ID of the node. You can call the [ListNodes](https://help.aliyun.com/document_detail/173979.html) operation to query the ID of the node.'),
  errorCode?: string(name='ErrorCode', description='The HTTP status code returned.', example='Invalid.Tenant.ProjectNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The page number of the returned page.', example='The project does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The error message that is returned for the instance.

This parameter is deprecated. You can call the [GetInstanceLog](https://help.aliyun.com/document_detail/173983.html) operation to query the error information related to the node.', example='200'),
  requestId?: string(name='RequestId', description='The name of the node.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='The beginning of the time range to query. Specify the time in the yyyy-MM-dd HH:mm:ss format.', example='true'),
}

model ListInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesResponseBody(name='body'),
}

/**
 * @summary Queries a list of instances.
 *
 * @param request ListInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListInstancesResponse
 */
async function listInstancesWithOptions(request: ListInstancesRequest, runtime: Util.RuntimeOptions): ListInstancesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.beginBizdate)) {
    body['BeginBizdate'] = request.beginBizdate;
  }
  if (!Util.isUnset(request.bizName)) {
    body['BizName'] = request.bizName;
  }
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.dagId)) {
    body['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.endBizdate)) {
    body['EndBizdate'] = request.endBizdate;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.nodeName)) {
    body['NodeName'] = request.nodeName;
  }
  if (!Util.isUnset(request.orderBy)) {
    body['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.programType)) {
    body['ProgramType'] = request.programType;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListInstances',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of instances.
 *
 * @param request ListInstancesRequest
 * @return ListInstancesResponse
 */
async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstancesWithOptions(request, runtime);
}

model ListLineageRequest {
  direction?: string(name='Direction', description='The lineage type. Valid values:\\\\
up: ancestor lineage\\\\
down: descendant lineage

This parameter is required.', example='up'),
  entityQualifiedName?: string(name='EntityQualifiedName', description='The unique identifier of the entity.

This parameter is required.', example='maxcompute-table.project.table'),
  keyword?: string(name='Keyword', description='The keyword of the entity name.', example='name-keyword'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='next-token-from-previous-request'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: 100.', example='10'),
}

model ListLineageResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        createTimestamp?: long(name='CreateTimestamp', description='The time when the lineage was generated.', example='1686215809269'),
        entity?: Entity(name='Entity', description='The information about the entity.'),
        relationList?: [ 
          {
            channel?: string(name='Channel', description='The data channel. Valid values:

    FIRST_PARTY: DataWorks platformTHIRD_PARTY: user registration', example='THIRD_PARTY'),
            datasource?: string(name='Datasource', description='The name of the data source.', example='mysql'),
            guid?: string(name='Guid', description='The unique relationship ID.', example='aaabbccddguid'),
            type?: string(name='Type', description='The task type, which is used to describe the relationship between entities, such as SQL-based calculation, mapping based on report fields, or API operation definition.', example='sql'),
          }
        ](name='RelationList', description='The array of the relationship structure.'),
      }
    ](name='DataEntityList', description='The array of the entity structure.'),
    nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.', example='nextTokenFromRequest-xxxsd-ff'),
  }(name='Data', description='The structure returned.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1010040007'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='qualifiedName should be in format as entity-table.entity-guid'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='64B-587A-8CED-969E1973887FXXX-TT'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

true

false', example='true'),
}

model ListLineageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLineageResponseBody(name='body'),
}

/**
 * @summary Queries the ancestor or descendant lineage of an entity.
 *
 * @param request ListLineageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListLineageResponse
 */
async function listLineageWithOptions(request: ListLineageRequest, runtime: Util.RuntimeOptions): ListLineageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.entityQualifiedName)) {
    query['EntityQualifiedName'] = request.entityQualifiedName;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLineage',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the ancestor or descendant lineage of an entity.
 *
 * @param request ListLineageRequest
 * @return ListLineageResponse
 */
async function listLineage(request: ListLineageRequest): ListLineageResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLineageWithOptions(request, runtime);
}

model ListManualDagInstancesRequest {
  dagId?: string(name='DagId', description='The ID of the directed acyclic graph (DAG) for the manually triggered workflow. You can call the [RunManualDagNodes](https://help.aliyun.com/document_detail/212830.html) operation to obtain the ID.

This parameter is required.', example='7000001231241'),
  projectEnv?: string(name='ProjectEnv', description='The environment of Operation Center. Valid values: PROD and DEV.

This parameter is required.', example='RPOD'),
  projectName?: string(name='ProjectName', description='The name of the workspace to which the manually triggered workflow belongs. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the name.

This parameter is required.', example='test_workspace'),
}

model ListManualDagInstancesResponseBody = {
  instances?: [ 
    {
      beginRunningTime?: long(name='BeginRunningTime', description='The time when the instance started to run.', example='1605178414676'),
      beginWaitResTime?: long(name='BeginWaitResTime', description='The time when the instance started to wait for resources.', example='1605178414676'),
      beginWaitTimeTime?: long(name='BeginWaitTimeTime', description='The time when the instance started to wait to be scheduled.', example='1605178414676'),
      bizDate?: long(name='BizDate', description='The data timestamp of the instance. In most cases, the value is one day before the time when the instance was run.', example='1605178414676'),
      createTime?: long(name='CreateTime', description='The time when the instance was generated.', example='1605178414676'),
      createUser?: string(name='CreateUser', description='The name of the account that is used to run the instance. For example, if you use an account named Test to run the instance, the value of this parameter is Test.', example='Test'),
      cycTime?: long(name='CycTime', description='The time when the instance was scheduled to run.', example='1605178414676'),
      dagId?: long(name='DagId', description='The ID of the DAG for the instance in the manually triggered workflow.', example='350850491'),
      dagType?: string(name='DagType', description='The type of the manually triggered workflow.', example='5'),
      finishTime?: long(name='FinishTime', description='The time when the instance finished running.', example='1605178414676'),
      instanceId?: long(name='InstanceId', description='The instance ID.', example='11726873619'),
      modifyTime?: long(name='ModifyTime', description='The time when the instance was last modified.', example='1605178414676'),
      nodeId?: long(name='NodeId', description='The ID of the node in the manually triggered workflow.', example='37851'),
      nodeName?: string(name='NodeName', description='The name of the node.', example='test2'),
      paramValues?: string(name='ParamValues', description='The parameters related to the instance.', example='xxx=yyy'),
      status?: string(name='Status', description='The status of the instance. Valid values:

*   NOT_RUN: The instance is not run.
*   WAIT_TIME: The instance is waiting for its scheduling time to arrive.
*   WAIT_RESOURCE: The instance is waiting for resources.
*   RUNNING: The instance is running.
*   CHECKING: Data quality is being checked for the instance.
*   CHECKING_CONDITION: Branch conditions are being checked for the instance.
*   FAILURE: The instance fails to be run.
*   SUCCESS: The instance is successfully run.', example='SUCCESS'),
      taskType?: string(name='TaskType', description='The scheduling type of the node. Valid values:

*   NORMAL(0): The node is an auto triggered node. The scheduling system regularly runs the node.
*   MANUAL(1): The node is a manually triggered node. The scheduling system does not regularly run the node.
*   PAUSE(2): The node is a frozen node. The scheduling system regularly runs the node but sets the status of the node to failed when the scheduling system starts to run the node.
*   SKIP(3): The node is a dry-run node. The scheduling system regularly runs the node but sets the status of the node to successful when the scheduling system starts to run the node.
*   SKIP_UNCHOOSE(4): The node is an unselected node in a temporary workflow. This type of node exists only in temporary workflows. The scheduling system sets the status of the node to successful when the scheduling system starts to run the node.
*   SKIP_CYCLE(5): The node is a node that is scheduled by week or month and is waiting for the scheduling time to arrive. The scheduling system regularly runs the node but sets the status of the node to successful when the scheduling system starts to run the node.
*   CONDITION_UNCHOOSE(6): The node is not selected by its ancestor branch node and is run as a dry-run node.
*   REALTIME_DEPRECATED(7): The node has instances that are generated in real time but deprecated. The scheduling system sets the status of the node to successful.', example='MANUAL'),
    }
  ](name='Instances', description='The instances in the manually triggered workflow.'),
  requestId?: string(name='RequestId', description='The request ID.', example='SDFSDFSDF-SDFSDF-SDFDSF-SDFSDF'),
}

model ListManualDagInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListManualDagInstancesResponseBody(name='body'),
}

/**
 * @summary Queries the information about instances in a manually triggered workflow.
 *
 * @param request ListManualDagInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListManualDagInstancesResponse
 */
async function listManualDagInstancesWithOptions(request: ListManualDagInstancesRequest, runtime: Util.RuntimeOptions): ListManualDagInstancesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.dagId)) {
    body['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListManualDagInstances',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about instances in a manually triggered workflow.
 *
 * @param request ListManualDagInstancesRequest
 * @return ListManualDagInstancesResponse
 */
async function listManualDagInstances(request: ListManualDagInstancesRequest): ListManualDagInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listManualDagInstancesWithOptions(request, runtime);
}

model ListMeasureDataRequest {
  componentCode?: string(name='ComponentCode', description='The measurement component. Valid values:

*   Count: phone call-based alerts and text message-based alerts

This parameter is required.', example='Count'),
  domainCode?: string(name='DomainCode', description='The measurement item. Valid values:

*   DideAlarmPhone: phone call-based alerts
*   DideAlarmSms: text message-based alerts

This parameter is required.', example='DideAlarmPhone'),
  endTime?: long(name='EndTime', description='The end timestamp of the measurement period, in milliseconds. The measurement period is calculated in days. You can query only the data within the previous 30 days.

This parameter is required.', example='1717430400000'),
  startTime?: long(name='StartTime', description='The start timestamp of the measurement period, in milliseconds. The measurement period is calculated in days. You can query only the data within the previous 30 days.

This parameter is required.', example='1717344000000'),
}

model ListMeasureDataResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='100001001'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The user is not in tenant.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  measureDatas?: [ 
    {
      componentCode?: string(name='ComponentCode', description='The measurement component.', example='Count'),
      domainCode?: string(name='DomainCode', description='The item that is measured.', example='DideAlarmPhone'),
      endTime?: long(name='EndTime', description='The end timestamp of the measurement period, in milliseconds.', example='1717430400000'),
      startTime?: long(name='StartTime', description='The start timestamp of the measurement period, in milliseconds.', example='1717344000000'),
      usage?: long(name='Usage', description='The total quantity used within the measurement period.', example='10'),
    }
  ](name='MeasureDatas', description='The measurement results.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1AFAE64E-D1BE-432B-A9****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model ListMeasureDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMeasureDataResponseBody(name='body'),
}

/**
 * @summary Queries the statistics on the number of phone call-based alerts or text message-based alerts reported within the tenant to which your account belongs during the previous 30 days.
 *
 * @param request ListMeasureDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListMeasureDataResponse
 */
async function listMeasureDataWithOptions(request: ListMeasureDataRequest, runtime: Util.RuntimeOptions): ListMeasureDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.componentCode)) {
    query['ComponentCode'] = request.componentCode;
  }
  if (!Util.isUnset(request.domainCode)) {
    query['DomainCode'] = request.domainCode;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMeasureData',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the statistics on the number of phone call-based alerts or text message-based alerts reported within the tenant to which your account belongs during the previous 30 days.
 *
 * @param request ListMeasureDataRequest
 * @return ListMeasureDataResponse
 */
async function listMeasureData(request: ListMeasureDataRequest): ListMeasureDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMeasureDataWithOptions(request, runtime);
}

model ListMetaCollectionEntitiesRequest {
  collectionQualifiedName?: string(name='CollectionQualifiedName', description='The unique identifier of the collection.

This parameter is required.', example='album.12345'),
  entityType?: string(name='EntityType', description='The type of the entities.

For example, if this parameter is set to maxcompute-table, the entity is a MaxCompute table.', example='maxcompute-table'),
  keyword?: string(name='Keyword', description='The search keyword.', example='test'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='12222'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
}

model ListMetaCollectionEntitiesResponseBody = {
  data?: {
    entityList?: [
      Entity
    ](name='EntityList', description='The entities.'),
    nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.', example='123344'),
  }(name='Data', description='The response parameters.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Collection.NotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='E25887B7-579C-54A5-9C4F-83A0DE367DD'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

true: The request was successful.

false: The request failed.', example='true'),
}

model ListMetaCollectionEntitiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMetaCollectionEntitiesResponseBody(name='body'),
}

/**
 * @summary Queries the entities in a collection.
 *
 * @param request ListMetaCollectionEntitiesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListMetaCollectionEntitiesResponse
 */
async function listMetaCollectionEntitiesWithOptions(request: ListMetaCollectionEntitiesRequest, runtime: Util.RuntimeOptions): ListMetaCollectionEntitiesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.collectionQualifiedName)) {
    query['CollectionQualifiedName'] = request.collectionQualifiedName;
  }
  if (!Util.isUnset(request.entityType)) {
    query['EntityType'] = request.entityType;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMetaCollectionEntities',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the entities in a collection.
 *
 * @param request ListMetaCollectionEntitiesRequest
 * @return ListMetaCollectionEntitiesResponse
 */
async function listMetaCollectionEntities(request: ListMetaCollectionEntitiesRequest): ListMetaCollectionEntitiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMetaCollectionEntitiesWithOptions(request, runtime);
}

model ListMetaCollectionsRequest {
  administrator?: string(name='Administrator', description='The ID of the collection administrator.', example='1200759642363000'),
  collectionType?: string(name='CollectionType', description='- ALBUM: data album 
- ALBUM_CATEGORY: category in a data album

This parameter is required.', example='ALBUM'),
  creator?: string(name='Creator', description='The ID of the collection creator.', example='1200759642363000'),
  follower?: string(name='Follower', description='The ID of the collection follower.', example='1200759642363000'),
  keyword?: string(name='Keyword', description='The keyword.', example='test'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='12345'),
  orderBy?: string(name='OrderBy', description='The name of the sorting field.', example='test'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  parentQualifiedName?: string(name='ParentQualifiedName', description='The unique identifier of the parent collection.', example='Album.1234'),
}

model ListMetaCollectionsResponseBody = {
  data?: {
    collectionList?: [
      Collection
    ](name='CollectionList', description='The collections.'),
    nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.', example='37ae2053d87d380f28ce0dc0853ca51e'),
  }(name='Data', description='The returned result.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Collection.NotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='E25887B7-579C-54A5-9C4F-83A0DE367DDE'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model ListMetaCollectionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMetaCollectionsResponseBody(name='body'),
}

/**
 * @summary Queries information about collections. Collections include data albums that are displayed on the Data Map page and categories that are created in the data albums. You can call this API operation to query collections by type.
 *
 * @description The type can be ALBUM or ALBUM_CATEGORY. ALBUM indicates data albums. ALBUM_CATEGORY indicates categories.
 *
 * @param request ListMetaCollectionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListMetaCollectionsResponse
 */
async function listMetaCollectionsWithOptions(request: ListMetaCollectionsRequest, runtime: Util.RuntimeOptions): ListMetaCollectionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.administrator)) {
    query['Administrator'] = request.administrator;
  }
  if (!Util.isUnset(request.collectionType)) {
    query['CollectionType'] = request.collectionType;
  }
  if (!Util.isUnset(request.creator)) {
    query['Creator'] = request.creator;
  }
  if (!Util.isUnset(request.follower)) {
    query['Follower'] = request.follower;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentQualifiedName)) {
    query['ParentQualifiedName'] = request.parentQualifiedName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMetaCollections',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries information about collections. Collections include data albums that are displayed on the Data Map page and categories that are created in the data albums. You can call this API operation to query collections by type.
 *
 * @description The type can be ALBUM or ALBUM_CATEGORY. ALBUM indicates data albums. ALBUM_CATEGORY indicates categories.
 *
 * @param request ListMetaCollectionsRequest
 * @return ListMetaCollectionsResponse
 */
async function listMetaCollections(request: ListMetaCollectionsRequest): ListMetaCollectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMetaCollectionsWithOptions(request, runtime);
}

model ListMetaDBRequest {
  clusterId?: string(name='ClusterId', description='The ID of the E-MapReduce (EMR) cluster. You can log on to the [EMR console](https://emr.console.aliyun.com/?spm=a2c4g.11186623.0.0.965cc5c2GeiHet#/cn-hangzhou) to query the ID.', example='abc'),
  dataSourceType?: string(name='DataSourceType', description='The type of the data source. Set the value to emr.

This parameter is required.', example='emr'),
  pageNum?: int32(name='PageNum', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can call the [ListProjects](https://help.aliyun.com/document_detail/178393.html) operation to query the ID.

This parameter is required.', example='123'),
}

model ListMetaDBResponseBody = {
  databaseInfo?: {
    dbList?: [ 
      {
        createTimeStamp?: long(name='CreateTimeStamp', description='The timestamp at which the metadatabase was created. You can convert the timestamp to the date based on the time zone that you use.', example='1388776825'),
        location?: string(name='Location', description='The URL of the metadatabase.', example='hdfs://localhost:777/user/hadoop/test.txt'),
        modifiedTimeStamp?: long(name='ModifiedTimeStamp', description='The timestamp at which the metadatabase was updated.', example='1388776837'),
        name?: string(name='Name', description='The name of the metadatabase.', example='name'),
        ownerId?: string(name='OwnerId', description='The owner ID.', example='1232'),
        type?: string(name='Type', description='The type of the metadatabase.', example='HIVE'),
        UUID?: string(name='UUID', description='The UUID of the metadatabase.', example='32342'),
      }
    ](name='DbList', description='The metadatabases.'),
    totalCount?: long(name='TotalCount', description='The total number of the metadatabases returned.', example='10'),
  }(name='DatabaseInfo', description='The information about the metadatabases.'),
  requestId?: string(name='RequestId', description='The request ID.', example='abc'),
}

model ListMetaDBResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMetaDBResponseBody(name='body'),
}

/**
 * @summary Queries a list of metadatabases.
 *
 * @param request ListMetaDBRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListMetaDBResponse
 */
async function listMetaDBWithOptions(request: ListMetaDBRequest, runtime: Util.RuntimeOptions): ListMetaDBResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMetaDB',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of metadatabases.
 *
 * @param request ListMetaDBRequest
 * @return ListMetaDBResponse
 */
async function listMetaDB(request: ListMetaDBRequest): ListMetaDBResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMetaDBWithOptions(request, runtime);
}

model ListMigrationsRequest {
  migrationType?: string(name='MigrationType', description='The migration task type. Valid values: IMPORT and EXPORT.

This parameter is required.', example='IMPORT', nullable=false),
  owner?: string(name='Owner', description='The owner ID.', example='193379****'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1. Maximum value: 100.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the workspace ID.

This parameter is required.', example='12345'),
}

model ListMigrationsResponseBody = {
  data?: {
    migrations?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the migration task was created.', example='123124123123123'),
        createUser?: string(name='CreateUser', description='The ID of the user who created the migration task.', example='123123****'),
        createUserName?: string(name='CreateUserName', description='The name of the user who created the migration task.', example='3h1_test'),
        description?: string(name='Description', description='The description of the export task.', example='Automated Test creation'),
        downloadUrl?: string(name='DownloadUrl', description='The URL that is used to download the package of the export task. You can use the URL to download the package of the export task.', example='http://geoip-sdk-user.oss-cn-zhangjiakou.aliyuncs.com/product/v1/ipv4/trace/v1.20220424123842.dex?Expires=1650780849&OSSAccessKeyId=XXXXXXeF4Lv5j&Signature=qxxxxx'),
        id?: long(name='Id', description='The primary key ID.', example='436064'),
        message?: string(name='Message', description='The error message returned.', example='An internal system error occurred. datasource kafka region is not cn-chengdu, can\\\\"t open network for it'),
        migrationType?: string(name='MigrationType', description='The type of the migration task. Valid values:

*   IMPORT
*   EXPORT', example='EXPORT'),
        name?: string(name='Name', description='The name of the migration task.', example='test_task_1638498642279'),
        packageType?: string(name='PackageType', description='The type of the import or export package. Valid values:

*   DWMA (standard format)
*   DATAWORKS_MODEL (standard format)
*   DATAWORKS_V2 (Apsara Stack DataWorks V3.6.1 to V3.11)
*   DATAWORKS_V3 (Apsara Stack DataWorks V3.12 and later)

The DWMA and DATAWORKS_MODEL types are interchangeable.', example='DATAWORKS_MODEL'),
        projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace to which the task belongs.', example='72132'),
        status?: string(name='Status', description='The status of the migration task. Valid values:

*   INIT: The migration task is in the initial state.
*   EDITING: The migration task is being edited.
*   RUNNING: The migration task is running.
*   FAILURE: The migration task fails to run.
*   SUCCESS: The migration task is successfully run.', example='SUCCESS'),
        tenantId?: long(name='TenantId', description='The tenant ID.', example='16307'),
        updateTime?: long(name='UpdateTime', description='The time when the migration task was last updated.', example='123123123123123'),
        updateUser?: string(name='UpdateUser', description='The ID of the user who last updated the migration task.', example='1231****'),
        updateUserName?: string(name='UpdateUserName', description='The name of the user who last updated the migration task.', example='3h1_test'),
      }
    ](name='Migrations', description='The list of migration tasks.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 50.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries.', example='20'),
  }(name='Data', description='The returned data.'),
  requestId?: string(name='RequestId', description='The request ID.', example='F9198AA3-9010-53D5-9714-DC4461427D3E'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model ListMigrationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMigrationsResponseBody(name='body'),
}

/**
 * @summary Queries a list of migration tasks.
 *
 * @param request ListMigrationsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListMigrationsResponse
 */
async function listMigrationsWithOptions(request: ListMigrationsRequest, runtime: Util.RuntimeOptions): ListMigrationsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.migrationType)) {
    body['MigrationType'] = request.migrationType;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListMigrations',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of migration tasks.
 *
 * @param request ListMigrationsRequest
 * @return ListMigrationsResponse
 */
async function listMigrations(request: ListMigrationsRequest): ListMigrationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMigrationsWithOptions(request, runtime);
}

model ListNodeIORequest {
  ioType?: string(name='IoType', description='Specifies whether to query the information about ancestor or descendant nodes of the current node. Valid values: input and output.

This parameter is required.', example='output'),
  nodeId?: long(name='NodeId', description='The node ID. You can call the [ListNodes](https://help.aliyun.com/document_detail/173979.html) operation to query the ID.

This parameter is required.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The runtime environment. Valid values: DEV and PROD.

This parameter is required.', example='PROD'),
}

model ListNodeIOResponseBody = {
  data?: [ 
    {
      data?: string(name='Data', description='The name of the ancestor or descendant node.', example='dataworks_a.1234_out'),
      nodeId?: long(name='NodeId', description='The node ID.', example='123123'),
      tableName?: string(name='TableName', description='The name of the input or output table.', example='dataworks_a.datastudio_tenant_waitres_alarm'),
    }
  ](name='Data', description='The node information.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ProjectNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The project does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListNodeIOResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodeIOResponseBody(name='body'),
}

/**
 * @deprecated OpenAPI ListNodeIO is deprecated
 *
 * @summary Queries the information about one level of ancestor or descendant nodes of a node.
 *
 * @param request ListNodeIORequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListNodeIOResponse
 */
// Deprecated
async function listNodeIOWithOptions(request: ListNodeIORequest, runtime: Util.RuntimeOptions): ListNodeIOResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.ioType)) {
    body['IoType'] = request.ioType;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListNodeIO',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @deprecated OpenAPI ListNodeIO is deprecated
 *
 * @summary Queries the information about one level of ancestor or descendant nodes of a node.
 *
 * @param request ListNodeIORequest
 * @return ListNodeIOResponse
 */
// Deprecated
async function listNodeIO(request: ListNodeIORequest): ListNodeIOResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodeIOWithOptions(request, runtime);
}

model ListNodeInputOrOutputRequest {
  ioType?: string(name='IoType', description='The type of node that you want to query. Valid values:

*   input: ancestor node
*   output: descendant node

This parameter is required.', example='output'),
  nodeId?: long(name='NodeId', description='The node ID. You can call the [ListNodes](https://help.aliyun.com/document_detail/173979.html) operation to query the ID.

This parameter is required.', example='12314567'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: DEV and PROD.

This parameter is required.', example='PROD'),
}

model ListNodeInputOrOutputResponseBody = {
  data?: [ 
    {
      data?: string(name='Data', description='The name of the ancestor or descendant node.', example='xxxx.123141254_out'),
      nodeId?: long(name='NodeId', description='The node ID.', example='1234667'),
      tableName?: string(name='TableName', description='This parameter does not take effect. You cannot obtain the parameter settings.', example='dwd_xxx_table'),
    }
  ](name='Data', description='The ancestor or descendant nodes.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ProjectNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The project does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListNodeInputOrOutputResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodeInputOrOutputResponseBody(name='body'),
}

/**
 * @summary Queries the input and output information about a node. Only the ancestor or descendant nodes at the nearest level can be queried each time.
 *
 * @param request ListNodeInputOrOutputRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListNodeInputOrOutputResponse
 */
async function listNodeInputOrOutputWithOptions(request: ListNodeInputOrOutputRequest, runtime: Util.RuntimeOptions): ListNodeInputOrOutputResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.ioType)) {
    body['IoType'] = request.ioType;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListNodeInputOrOutput',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the input and output information about a node. Only the ancestor or descendant nodes at the nearest level can be queried each time.
 *
 * @param request ListNodeInputOrOutputRequest
 * @return ListNodeInputOrOutputResponse
 */
async function listNodeInputOrOutput(request: ListNodeInputOrOutputRequest): ListNodeInputOrOutputResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodeInputOrOutputWithOptions(request, runtime);
}

model ListNodesRequest {
  bizName?: string(name='BizName', description='The error code returned.', example='test_bizName'),
  nodeName?: string(name='NodeName', description='The ID of the baseline with which the node is associated.', example='liux_test_n****'),
  owner?: string(name='Owner', description='The description of the node.', example='193379****'),
  pageNumber?: int32(name='PageNumber', description='The page number. Minimum value: 1. Maximum value: 100.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  programType?: string(name='ProgramType', description='The operation that you want to perform. Set the value to **ListNodes**.', example='ODPS_SQL'),
  projectEnv?: string(name='ProjectEnv', description='The environment in which the node runs. Valid values: DEV and PROD.

This parameter is required.', example='PROD'),
  projectId?: long(name='ProjectId', description='The ID of the owner.

This parameter is required.', example='1234'),
  schedulerType?: string(name='SchedulerType', description='The scheduling type. Valid values:

*   NORMAL: Nodes are scheduled as expected.
*   PAUSE: Nodes are paused.
*   SKIP: Nodes are dry-run. Dry-run nodes are started as scheduled, but the system sets the status of the nodes to successful when it starts to run them.', example='NORMAL'),
}

model ListNodesResponseBody = {
  data?: {
    nodes?: [ 
      {
        baselineId?: long(name='BaselineId', description='The number of the page to return. Minimum value: 1. Maximum value: 100.', example='123456'),
        businessId?: long(name='BusinessId', description='The operation that you want to perform. Set the value to **ListNodes**.', example='123'),
        connection?: string(name='Connection', description='The name of the resource group.', example='odps_first'),
        createTime?: long(name='CreateTime', description='The timestamp when the node was created. Unit: milliseconds.', example='1593879116000'),
        cronExpress?: string(name='CronExpress', description='The name of the workflow.', example='00 00 00 * * ?'),
        deployDate?: long(name='DeployDate', description='The timestamp when the node was deployed. Unit: milliseconds.', example='1734537600000'),
        description?: string(name='Description', description='The priority for running the node. Valid values: 1, 3, 5, 7, and 8.', example='test'),
        dqcDescription?: string(name='DqcDescription', description='The ID of the owner.', example='[{"projectName":"ztjy_dim","tableName":"dim_user_agent_manage_area_a","partition":"ds\\\\u003d$[yyyy-mm-dd-1]"}]'),
        dqcType?: int32(name='DqcType', description='The connection string.', example='1'),
        fileId?: long(name='FileId', description='The file ID. You can call the ListFiles operation to query the ID.', example='20'),
        fileType?: int32(name='FileType', description='Different file types have different codes. For more information, see [DataWorks node collection](https://help.aliyun.com/document_detail/600169.html).
You can also call the [ListFileType](https://help.aliyun.com/document_detail/212428.html) interface to query the code type of the file.', example='10'),
        fileVersion?: int32(name='FileVersion', description='The latest version number of the file.', example='3'),
        modifyTime?: long(name='ModifyTime', description='The timestamp when the node was modified. Unit: milliseconds.', example='1593879116000'),
        nodeId?: long(name='NodeId', description='The types of the nodes. You can call the [ListNodes](https://help.aliyun.com/document_detail/173979.html) operation to query the type of the node.', example='1234'),
        nodeName?: string(name='NodeName', description='The total number of nodes returned.', example='liux_test_n****'),
        ownerId?: string(name='OwnerId', description='The additional parameters.', example='19337906836551'),
        paramValues?: string(name='ParamValues', description='The type of the node.', example='a=b'),
        priority?: int32(name='Priority', description='The ID of the owner.', example='1'),
        programType?: string(name='ProgramType', description='The error message returned.', example='ODPS_SQL'),
        projectId?: long(name='ProjectId', description='The information about the nodes.', example='33671'),
        relatedFlowId?: long(name='RelatedFlowId', description='The table and partition filter expression in Data Quality that are associated with the node.', example='1231123'),
        repeatInterval?: long(name='RepeatInterval', description='The environment of the workspace. Valid values: PROD and DEV.', example='60'),
        repeatMode?: int32(name='RepeatMode', description='The rerun mode. The value 0 indicates that rerun can be performed only if a failure occurs. The value 1 indicates that rerun can be performed in all cases. The value 2 indicates that rerun cannot be performed in all cases.', example='1'),
        repeatability?: boolean(name='Repeatability', description='The name of the node.', example='true'),
        resGroupIdentifier?: string(name='ResGroupIdentifier', description='The identifier of the resource group.', example='group_123'),
        resGroupName?: string(name='ResGroupName', description='The ID of the workflow.', example='The ID of the request. You can use the ID to query logs and troubleshoot issues.'),
        schedulerType?: string(name='SchedulerType', description='The types of the nodes. You can call the [ListNodes](https://help.aliyun.com/document_detail/173979.html) operation to query the type of the node.', example='NORMAL'),
      }
    ](name='Nodes', description='The information about the nodes.'),
    pageNumber?: int32(name='PageNumber', description='The name of the node.', example='1'),
    pageSize?: int32(name='PageSize', description='The cron expression returned.', example='10'),
    totalCount?: int32(name='TotalCount', description='The name of the workflow.', example='66'),
  }(name='Data', description='The nodes.'),
  errorCode?: string(name='ErrorCode', description='The HTTP status code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The page number of the returned page.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The interval at which the node is rerun after the node fails to run.', example='200'),
  requestId?: string(name='RequestId', description='The list of nodes.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='Indicates whether the node can be rerun.', example='true'),
}

model ListNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodesResponseBody(name='body'),
}

/**
 * @summary The ID of the workspace.
 *
 * @param request ListNodesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListNodesResponse
 */
async function listNodesWithOptions(request: ListNodesRequest, runtime: Util.RuntimeOptions): ListNodesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizName)) {
    body['BizName'] = request.bizName;
  }
  if (!Util.isUnset(request.nodeName)) {
    body['NodeName'] = request.nodeName;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.programType)) {
    body['ProgramType'] = request.programType;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.schedulerType)) {
    body['SchedulerType'] = request.schedulerType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListNodes',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary The ID of the workspace.
 *
 * @param request ListNodesRequest
 * @return ListNodesResponse
 */
async function listNodes(request: ListNodesRequest): ListNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodesWithOptions(request, runtime);
}

model ListNodesByBaselineRequest {
  baselineId?: long(name='BaselineId', description='The baseline ID. You can call the [ListBaselineConfigs](https://help.aliyun.com/document_detail/173964.html) operation to query the baseline ID.

This parameter is required.', example='1234'),
}

model ListNodesByBaselineResponseBody = {
  data?: [ 
    {
      nodeId?: long(name='NodeId', description='The node ID.', example='1234'),
      nodeName?: string(name='NodeName', description='The name of the node.', example='Node name'),
      owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the node owner.', example='9527952****'),
      projectId?: long(name='ProjectId', description='The ID of the workspace to which the node belongs.', example='1234'),
    }
  ](name='Data', description='The nodes in the baseline.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to troubleshoot issues.', example='0000-ABCD-E****'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListNodesByBaselineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodesByBaselineResponseBody(name='body'),
}

/**
 * @summary Queries nodes in a baseline.
 *
 * @param request ListNodesByBaselineRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListNodesByBaselineResponse
 */
async function listNodesByBaselineWithOptions(request: ListNodesByBaselineRequest, runtime: Util.RuntimeOptions): ListNodesByBaselineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListNodesByBaseline',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries nodes in a baseline.
 *
 * @param request ListNodesByBaselineRequest
 * @return ListNodesByBaselineResponse
 */
async function listNodesByBaseline(request: ListNodesByBaselineRequest): ListNodesByBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodesByBaselineWithOptions(request, runtime);
}

model ListNodesByOutputRequest {
  outputs?: string(name='Outputs', description='The output name of the node. You can specify multiple output names. Separate them with commas (,).

This parameter is required.', example='aaaaa.1231412_out,bbbb.12313123_out'),
  projectEnv?: string(name='ProjectEnv', description='The environment of Operation Center. Valid values: PROD and DEV. The value PROD indicates the production environment, and the value DEV indicates the development environment.

This parameter is required.', example='PROD'),
}

model ListNodesByOutputResponseBody = {
  data?: [ 
    {
      nodeList?: [ 
        {
          baselineId?: long(name='BaselineId', description='The baseline ID.', example='1235667'),
          connection?: string(name='Connection', description='The name of the data source.', example='odps_first'),
          cronExpress?: string(name='CronExpress', description='The CRON expression.', example='00 00 00 * * ?'),
          description?: string(name='Description', description='The description of the node.', example='test'),
          dqcDescription?: string(name='DqcDescription', description='The table and partition filter expression in Data Quality that are associated with the node.', example='[{"projectName":"ztjy_dim","tableName":"dim_user_agent_manage_area_a","partition":"ds\\\\u003d$[yyyy-mm-dd-1]"}]'),
          dqcType?: int32(name='DqcType', description='Indicates whether the node is associated with a monitoring rule in Data Quality. Valid values: 0 and 1. The value 0 indicates that the node is associated with a monitoring rule in Data Quality. The value 1 indicates that the node is not associated with a monitoring rule in Data Quality.', example='1'),
          fileType?: string(name='FileType', description='The node type. Valid values:

6 (Shell), 10 (ODPS SQL), 11 (ODPS MR), 23 (Data Integration), 24 (ODPS Script), 99 (zero load), 221 (PyODPS 2), 225 (ODPS Spark), 227 (EMR Hive), 228 (EMR Spark), 229 (EMR Spark SQL), 230 (EMR MR), 239 (OSS object inspection), 257 (EMR Shell), 258 (EMR Spark Shell), 259 (EMR Presto), 260 (EMR Impala), 900 (real-time synchronization), 1089 (cross-tenant collaboration), 1091 (Hologres development), 1093 (Hologres SQL), 1100 (assignment), and 1221 (PyODPS 3)', example='ODPS_SQL'),
          nodeId?: long(name='NodeId', description='The node ID.', example='125677'),
          nodeName?: string(name='NodeName', description='The name of the node.', example='liux_test_n****'),
          ownerId?: string(name='OwnerId', description='The owner ID.', example='19337906836551'),
          paramValues?: string(name='ParamValues', description='The scheduling parameters of the node.', example='a=b'),
          priority?: int32(name='Priority', description='The priority of the node. Valid values: 1, 3, 5, 7, and 8. A greater value indicates a higher priority. Default value: 1.', example='1'),
          programType?: string(name='ProgramType', description='The node type. This parameter is deprecated. For more information about node types, see valid values of the FileType parameter.', example='ODPS_SQL'),
          projectId?: long(name='ProjectId', description='The workspace ID.', example='33671'),
          relatedFlowId?: long(name='RelatedFlowId', description='The ID of the workflow to which the node belongs.', example='1235655464'),
          repeatInterval?: int32(name='RepeatInterval', description='The interval at which the node is rerun after the node fails to run.', example='60'),
          repeatability?: boolean(name='Repeatability', description='Indicates whether the node can be rerun.', example='true'),
          resGroupName?: string(name='ResGroupName', description='The name of the resource group.', example='Default Resource Group'),
          schedulerType?: string(name='SchedulerType', description='The scheduling type of the node. Valid values:

*   NORMAL: The node is an auto triggered node. The scheduling system regularly runs the node.
*   MANUAL: The node is a manually triggered node. The scheduling system does not regularly run the node.
*   PAUSE: The node is a frozen node. The scheduling system regularly runs the node but sets the status of the node to failed when the scheduling system starts to run the node.
*   SKIP: The node is a dry-run node. The scheduling system regularly runs the node but sets the status of the node to successful when the scheduling system starts to run the node.', example='NORMAL'),
        }
      ](name='NodeList', description='The information about the nodes returned.'),
      output?: string(name='Output', description='The output name of the current node.', example='test_0709_1.630003556_out'),
    }
  ](name='Data', description='The nodes returned.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='SDFSDFSDF-asdfDFSDF-SDFSDf-SDfSFD'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListNodesByOutputResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodesByOutputResponseBody(name='body'),
}

/**
 * @summary Queries nodes based on the output of the nodes.
 *
 * @param request ListNodesByOutputRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListNodesByOutputResponse
 */
async function listNodesByOutputWithOptions(request: ListNodesByOutputRequest, runtime: Util.RuntimeOptions): ListNodesByOutputResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.outputs)) {
    body['Outputs'] = request.outputs;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListNodesByOutput',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries nodes based on the output of the nodes.
 *
 * @param request ListNodesByOutputRequest
 * @return ListNodesByOutputResponse
 */
async function listNodesByOutput(request: ListNodesByOutputRequest): ListNodesByOutputResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodesByOutputWithOptions(request, runtime);
}

model ListPermissionApplyOrdersRequest {
  endTime?: long(name='EndTime', description='The end of the time range to query. You can query all the permissions request orders that have been submitted before the time. The parameter value is a UNIX timestamp. If you do not specify the parameter, all permission request orders that are submitted before the current time are queried.', example='1617200471885'),
  engineType?: string(name='EngineType', description='The type of the compute engine with which the permission request order is associated. The parameter value is odps and cannot be changed. This value indicates that you can request permissions only on fields of tables in the MaxCompute compute engine.

This parameter is required.', example='odps'),
  flowStatus?: int32(name='FlowStatus', description='The status of the permission request order. Valid values:

*   1: to be processed
*   2: approved and authorized
*   3: approved but authorization failed
*   4: rejected

Valid values:

*   0
*   1
*   2
*   3
*   4
*   5', example='1'),
  maxComputeProjectName?: string(name='MaxComputeProjectName', description='The name of the MaxCompute project with which the permission request order is associated. If you do not specify the parameter, the permission request orders of all MaxCompute projects are returned.', example='aMaxComputeProject'),
  orderType?: int32(name='OrderType', description='The type of the permission request order. The parameter value is 1 and cannot be changed. This value indicates ACL-based authorization.

This parameter is required.', example='1'),
  pageNum?: int32(name='PageNum', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='100'),
  queryType?: int32(name='QueryType', description='The query type of the permission request order. Valid values:

*   0: The permission request orders you submitted.
*   1: The permission request orders you approved.

This parameter is required.', example='1'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. You can query all the permissions request orders that have been submitted after the time. The parameter value is a UNIX timestamp. If you do not specify the parameter, all permission request orders are queried.', example='1616200471885'),
  tableName?: string(name='TableName', description='The name of the table with which the permission request order is associated. If you do not specify the parameter, the permission request orders of all tables are returned.', example='aTableName'),
  workspaceId?: int32(name='WorkspaceId', description='The ID of the DataWorks workspace that is associated with the permission request order. If you do not specify the parameter, the permission request orders of all workspaces are returned. You can go to the Workspace page in the DataWorks console to obtain the workspace ID.', example='12345'),
}

model ListPermissionApplyOrdersResponseBody = {
  applyOrders?: {
    applyOrder?: [ 
      {
        applyBaseId?: string(name='ApplyBaseId', description='The ID of the Alibaba Cloud account that was used to submit the permission request order.', example='267842600408993176'),
        applyTimestamp?: long(name='ApplyTimestamp', description='The time when the permission request order was submitted. The parameter value is a UNIX timestamp.', example='1615284086000'),
        approveContent?: {
          applyReason?: string(name='ApplyReason', description='The reason for your request. The administrator determines whether to approve the request based on the reason.', example='I need to use this table'),
          orderType?: int32(name='OrderType', description='The type of the permission request order. The parameter value is 1 and cannot be changed. This value indicates ACL-based authorization.', example='1'),
          projectMeta?: {
            objectMetaList?: [ 
              {
                actions?: [ string ](name='Actions'),
                objectName?: string(name='ObjectName', description='The name of the table on which you requested permissions.', example='aTableName'),
              }
            ](name='ObjectMetaList', description='The information about the object on which you requested permissions.'),
            workspaceName?: string(name='WorkspaceName', description='The name of the DataWorks workspace that is associated with the MaxCompute project in which you requested permissions on a table.', example='aWorkspaceName'),
          }(name='ProjectMeta', description='The content of the object on which you requested permissions.'),
        }(name='ApproveContent', description='The content of the permission request order.'),
        flowId?: string(name='FlowId', description='The ID of the permission request order.', example='ad8da78d-8135-455e-9486-27cf213fc140'),
        flowStatus?: int32(name='FlowStatus', description='The status of the permission request order. Valid values:

*   1: to be processed
*   2: approved and authorized
*   3: approved but authorization failed
*   4: rejected', example='2'),
      }
    ](name='ApplyOrder', description='The list of the permission request orders.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='150'),
  }(name='ApplyOrders', description='The query results returned by page.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1ec92159376****'),
}

model ListPermissionApplyOrdersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPermissionApplyOrdersResponseBody(name='body'),
}

/**
 * @summary Queries a list of permission request orders.
 *
 * @param request ListPermissionApplyOrdersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPermissionApplyOrdersResponse
 */
async function listPermissionApplyOrdersWithOptions(request: ListPermissionApplyOrdersRequest, runtime: Util.RuntimeOptions): ListPermissionApplyOrdersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.engineType)) {
    query['EngineType'] = request.engineType;
  }
  if (!Util.isUnset(request.flowStatus)) {
    query['FlowStatus'] = request.flowStatus;
  }
  if (!Util.isUnset(request.maxComputeProjectName)) {
    query['MaxComputeProjectName'] = request.maxComputeProjectName;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryType)) {
    query['QueryType'] = request.queryType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPermissionApplyOrders',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of permission request orders.
 *
 * @param request ListPermissionApplyOrdersRequest
 * @return ListPermissionApplyOrdersResponse
 */
async function listPermissionApplyOrders(request: ListPermissionApplyOrdersRequest): ListPermissionApplyOrdersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPermissionApplyOrdersWithOptions(request, runtime);
}

model ListProgramTypeCountRequest {
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV.

This parameter is required.', example='PROD'),
  projectId?: long(name='ProjectId', description='The workspace ID.

This parameter is required.', example='1234'),
}

model ListProgramTypeCountResponseBody = {
  programTypeAndCounts?: [ 
    {
      count?: int32(name='Count', description='The number of nodes.', example='3'),
      programType?: string(name='ProgramType', description='The node type.', example='ODPS_SQL'),
    }
  ](name='ProgramTypeAndCounts', description='The list of node types and quantity.'),
  requestId?: string(name='RequestId', description='The request ID.', example='E6F0DBDD-5AD****'),
}

model ListProgramTypeCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProgramTypeCountResponseBody(name='body'),
}

/**
 * @deprecated OpenAPI ListProgramTypeCount is deprecated
 *
 * @summary Queries the distribution of different types of nodes.
 *
 * @param request ListProgramTypeCountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListProgramTypeCountResponse
 */
// Deprecated
async function listProgramTypeCountWithOptions(request: ListProgramTypeCountRequest, runtime: Util.RuntimeOptions): ListProgramTypeCountResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListProgramTypeCount',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @deprecated OpenAPI ListProgramTypeCount is deprecated
 *
 * @summary Queries the distribution of different types of nodes.
 *
 * @param request ListProgramTypeCountRequest
 * @return ListProgramTypeCountResponse
 */
// Deprecated
async function listProgramTypeCount(request: ListProgramTypeCountRequest): ListProgramTypeCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProgramTypeCountWithOptions(request, runtime);
}

model ListProjectIdsRequest {
  userId?: string(name='UserId', description='The ID of the desired Alibaba Cloud account.

You can log on to the [DataWorks](https://workbench.data.aliyun.com/console) console and move the pointer over the profile picture in the upper-right corner to view the ID.

This parameter is required.', example='171111'),
}

model ListProjectIdsResponseBody = {
  projectIds?: [ long ](name='ProjectIds', description='The IDs of the DataWorks workspaces. The IDs of the workspaces on which the desired Alibaba Cloud account has permissions were returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0b57ff7216278945532771749d****'),
}

model ListProjectIdsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectIdsResponseBody(name='body'),
}

/**
 * @summary Queries the IDs of the workspaces on which a specific Alibaba Cloud account or RAM user has permissions in a specific region.
 *
 * @description An Alibaba Cloud account can assume a role such as the developer, O\\&M engineer, or workspace administrator role in a workspace. For more information, see [Manage members and roles](https://help.aliyun.com/document_detail/136941.html).
 *
 * @param request ListProjectIdsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListProjectIdsResponse
 */
async function listProjectIdsWithOptions(request: ListProjectIdsRequest, runtime: Util.RuntimeOptions): ListProjectIdsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProjectIds',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the IDs of the workspaces on which a specific Alibaba Cloud account or RAM user has permissions in a specific region.
 *
 * @description An Alibaba Cloud account can assume a role such as the developer, O\\&M engineer, or workspace administrator role in a workspace. For more information, see [Manage members and roles](https://help.aliyun.com/document_detail/136941.html).
 *
 * @param request ListProjectIdsRequest
 * @return ListProjectIdsResponse
 */
async function listProjectIds(request: ListProjectIdsRequest): ListProjectIdsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectIdsWithOptions(request, runtime);
}

model ListProjectMembersRequest {
  pageNumber?: int32(name='PageNumber', description='The page number. Valid values: 1 to 30. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.

This parameter is required.', example='27'),
}

model ListProjectMembersResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    projectMemberList?: [ 
      {
        nick?: string(name='Nick', description='The nickname of the member.', example='zhangsan'),
        projectMemberId?: string(name='ProjectMemberId', description='The member ID.', example='121'),
        projectMemberName?: string(name='ProjectMemberName', description='The name of the member.', example='zhangsan'),
        projectMemberType?: string(name='ProjectMemberType', description='The type of the member. Valid values:

*   1: USER_ALIYUN, which indicates that the member is an Alibaba Cloud account.
*   5: USER_UBACCOUNT, which indicates that the member is a RAM user.
*   6: USER_STS_ROLE, which indicates that the member is a RAM role.', example='1'),
        projectRoleList?: [ 
          {
            projectRoleCode?: string(name='ProjectRoleCode', description='The code of the role. DataWorks provides built-in roles and allows you to create custom roles based on your business requirements. For more information about roles, see [Overview of users, roles, and permissions](https://help.aliyun.com/document_detail/295463.html).', example='role_project_guest'),
            projectRoleId?: int32(name='ProjectRoleId', description='The role ID.', example='1'),
            projectRoleName?: string(name='ProjectRoleName', description='The name of the role. DataWorks provides built-in roles and allows you to create custom roles based on your business requirements. For more information about roles, see [Overview of users, roles, and permissions](https://help.aliyun.com/document_detail/295463.html).', example='test'),
            projectRoleType?: string(name='ProjectRoleType', description='The type of the role. Valid values:

*   0: SYSTEM, which indicates that the role is a built-in role.
*   2: USER_CUSTOM, which indicates that the role is a custom role.', example='0'),
          }
        ](name='ProjectRoleList', description='The roles that are assigned to the member.'),
        status?: string(name='Status', description='The status of the member. Valid values:

*   0: NORMAL, which indicates that the member is in a normal state.
*   1: FORBIDDEN, which indicates that the member is disabled.
*   2: DELETED, which indicates that the member is deleted.', example='0'),
      }
    ](name='ProjectMemberList', description='The information about members in the DataWorks workspace.'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='3'),
  }(name='Data', description='The returned results.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1AFAE64E-D1BE-432B-A9****'),
}

model ListProjectMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectMembersResponseBody(name='body'),
}

/**
 * @summary Queries a list of existing members in a DataWorks workspace.
 *
 * @param request ListProjectMembersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListProjectMembersResponse
 */
async function listProjectMembersWithOptions(request: ListProjectMembersRequest, runtime: Util.RuntimeOptions): ListProjectMembersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProjectMembers',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of existing members in a DataWorks workspace.
 *
 * @param request ListProjectMembersRequest
 * @return ListProjectMembersResponse
 */
async function listProjectMembers(request: ListProjectMembersRequest): ListProjectMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectMembersWithOptions(request, runtime);
}

model ListProjectRolesRequest {
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.

This parameter is required.', example='27'),
}

model ListProjectRolesResponseBody = {
  projectRoleList?: [ 
    {
      projectRoleCode?: string(name='ProjectRoleCode', description='The code of the role in the DataWorks workspace.', example='role_project_guest'),
      projectRoleId?: int32(name='ProjectRoleId', description='The ID of the role in the DataWorks workspace.', example='1'),
      projectRoleName?: string(name='ProjectRoleName', description='The name of the role in the DataWorks workspace.', example='visitor'),
      projectRoleType?: string(name='ProjectRoleType', description='The type of the role in the DataWorks workspace.', example='0'),
    }
  ](name='ProjectRoleList', description='The roles in the DataWorks workspace.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1AFAE64E-D1BE-432B-A9****'),
}

model ListProjectRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectRolesResponseBody(name='body'),
}

/**
 * @summary Queries a list of roles in a DataWorks workspace.
 *
 * @description ## Debugging
 * [OpenAPI Explorer automatically calculates the signature value. For your convenience, we recommend that you call this operation in OpenAPI Explorer. OpenAPI Explorer dynamically generates the sample code of the operation for different SDKs.](https://api.aliyun.com/#product=dataworks-public\\&api=ListProjectRoles\\&type=RPC\\&version=2020-05-18)
 *
 * @param request ListProjectRolesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListProjectRolesResponse
 */
async function listProjectRolesWithOptions(request: ListProjectRolesRequest, runtime: Util.RuntimeOptions): ListProjectRolesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProjectRoles',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of roles in a DataWorks workspace.
 *
 * @description ## Debugging
 * [OpenAPI Explorer automatically calculates the signature value. For your convenience, we recommend that you call this operation in OpenAPI Explorer. OpenAPI Explorer dynamically generates the sample code of the operation for different SDKs.](https://api.aliyun.com/#product=dataworks-public\\&api=ListProjectRoles\\&type=RPC\\&version=2020-05-18)
 *
 * @param request ListProjectRolesRequest
 * @return ListProjectRolesResponse
 */
async function listProjectRoles(request: ListProjectRolesRequest): ListProjectRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectRolesWithOptions(request, runtime);
}

model ListProjectsRequest {
  pageNumber?: int32(name='PageNumber', description='The page number. Valid values: 1 to 100.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The resource group ID.', example='rg-acfmzbn7pti3zfa'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the workspace.', example='Env'),
      value?: string(name='Value', description='The value of tag N to add to the workspace.', example='Test'),
    }
  ](name='Tags', description='The tags to add to the workspace.'),
}

model ListProjectsShrinkRequest {
  pageNumber?: int32(name='PageNumber', description='The page number. Valid values: 1 to 100.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The resource group ID.', example='rg-acfmzbn7pti3zfa'),
  tagsShrink?: string(name='Tags', description='The tags to add to the workspace.'),
}

model ListProjectsResponseBody = {
  pageResult?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
    projectList?: [ 
      {
        disableDevelopment?: boolean(name='DisableDevelopment', description='Indicates whether the Development role is disabled. Valid values:

*   **false**: enabled
*   **true**: disabled', example='true'),
        isDefault?: int32(name='IsDefault', description='Indicates whether the workspace is a default workspace. Valid values:

*   **1**: The workspace is a default workspace.
*   **0**: The workspace is not a default workspace.', example='1'),
        projectDescription?: string(name='ProjectDescription', description='The description of the workspace.', example='test_describe'),
        projectId?: long(name='ProjectId', description='The workspace ID.', example='1212'),
        projectIdentifier?: string(name='ProjectIdentifier', description='The name of the workspace.', example='test'),
        projectName?: string(name='ProjectName', description='The display name of the workspace.', example='test_project'),
        projectOwnerBaseId?: string(name='ProjectOwnerBaseId', description='The ID of the user used by the workspace owner.', example='122222'),
        projectStatus?: int32(name='ProjectStatus', description='The status of the workspace. Valid values:

*   0: AVAILABLE, which indicates that the workspace is running as expected.
*   1: DELETED, which indicates that the workspace is deleted.
*   2: INITIALIZING, which indicates that the workspace is being initialized.
*   3: INIT_FAILED, which indicates that the workspace fails to be initialized.
*   4: FORBIDDEN, which indicates that the workspace is manually disabled.
*   5: DELETING, which indicates that the workspace is being deleted.
*   6: DEL_FAILED, which indicates that the workspace fails to be deleted.
*   7: FROZEN, which indicates that the workspace is frozen due to overdue payments.
*   8: UPDATING, which indicates that the workspace is being updated. After you associate a compute engine with the workspace, the system initializes the compute engine and updates the workspace.
*   9: UPDATE_FAILED, which indicates that the workspace fails to be updated.', example='0'),
        projectStatusCode?: string(name='ProjectStatusCode', description='The status code of the workspace. Valid values:

*   AVAILABLE: 0, which indicates that the workspace is running as expected.
*   DELETED: 1, which indicates that the workspace is deleted.
*   INITIALIZING: 2, which indicates that the workspace is being initialized.
*   INIT_FAILED: 3, which indicates that the workspace fails to be initialized.
*   FORBIDDEN: 4, which indicates that the workspace is manually disabled.
*   DELETING: 5, which indicates that the workspace is being deleted.
*   DEL_FAILED: 6, which indicates that the workspace fails to be deleted.
*   FROZEN: 7, which indicates that the workspace is frozen due to overdue payments.
*   UPDATING: 8, which indicates that the workspace is being updated. After you associate a compute engine with the workspace, the system initializes the compute engine and updates the workspace.
*   UPDATE_FAILED: 9, which indicates that the workspace fails to be updated.', example='AVAILABLE'),
        resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The resource group ID.', example='rg-acfmzbn7pti3zfa'),
        tablePrivacyMode?: int32(name='TablePrivacyMode', description='Indicates whether the MaxCompute tables in the workspace are visible to the users within a tenant. Valid values:

*   **0**: invisible
*   **1**: visible', example='1'),
        tags?: [ 
          {
            key?: string(name='Key', description='The key of tag N added to the workspace.', example='Env'),
            value?: string(name='Value', description='The value of tag N added to the workspace.', example='Test'),
          }
        ](name='Tags', description='The tags added to the workspace.'),
        useProxyOdpsAccount?: boolean(name='UseProxyOdpsAccount', description='Indicates whether a proxy account is used to access the MaxCompute compute engine associated with the workspace. Valid values:

*   **false**
*   **true**', example='true'),
      }
    ](name='ProjectList', description='The DataWorks workspaces.'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='123'),
  }(name='PageResult', description='The results that are returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='20658801***'),
}

model ListProjectsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectsResponseBody(name='body'),
}

/**
 * @summary Queries a list of DataWorks workspaces of the tenant to which a user belongs.
 *
 * @param tmpReq ListProjectsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListProjectsResponse
 */
async function listProjectsWithOptions(tmpReq: ListProjectsRequest, runtime: Util.RuntimeOptions): ListProjectsResponse {
  Util.validateModel(tmpReq);
  var request = new ListProjectsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProjects',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of DataWorks workspaces of the tenant to which a user belongs.
 *
 * @param request ListProjectsRequest
 * @return ListProjectsResponse
 */
async function listProjects(request: ListProjectsRequest): ListProjectsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectsWithOptions(request, runtime);
}

model ListQualityResultsByEntityRequest {
  endDate?: string(name='EndDate', description='The end of the time range to query. Specify the time in the yyyy-MM-dd HH:mm:ss format.

This parameter is required.', example='2020-09-21 00:00:00'),
  entityId?: long(name='EntityId', description='The ID of the partition filter expression. You can call the [GetQualityEntity](https://help.aliyun.com/document_detail/174003.html) operation to query the ID.

This parameter is required.', example='152322134'),
  pageNumber?: int32(name='PageNumber', description='The page number.

This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 20.

This parameter is required.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='12345'),
  projectName?: string(name='ProjectName', description='The name of the compute engine or data source. You can obtain the name from data source configurations.

This parameter is required.', example='autotest'),
  startDate?: string(name='StartDate', description='The beginning of the time range to query. Specify the time in the yyyy-MM-dd HH:mm:ss format.

This parameter is required.', example='2020-09-20 00:00:00'),
}

model ListQualityResultsByEntityResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
    ruleChecks?: [ 
      {
        actualExpression?: string(name='ActualExpression', description='The monitored partition in the data source table.', example='ds=20200912'),
        beginTime?: long(name='BeginTime', description='The time when the monitoring started.', example='1600704000000'),
        bizDate?: long(name='BizDate', description='The data timestamp. In most cases, if the monitored business entity is offline data, the value is one day before the monitoring is performed.', example='1600704000000'),
        blockType?: int32(name='BlockType', description='The strength of the monitoring rule. The strength of a monitoring rule indicates the importance of the rule. Valid values:

*   1: the monitoring rule is a strong rule.
*   0: the monitoring rule is a weak rule. You can specify whether a monitoring rule is a strong rule based on your business requirements. If a monitoring rule is a strong rule and the critical threshold is exceeded, a critical alert is reported and tasks that are associated with the rule are blocked from running.', example='0'),
        checkResult?: int32(name='CheckResult', description='The check result. The value of this parameter is the same as the value of the CheckResultStatus parameter. Valid values:

*   0: indicates that the data source table is normal.
*   1: indicates that a warning alert is reported.
*   2: indicates that a critical alert is reported.', example='0'),
        checkResultStatus?: int32(name='CheckResultStatus', description='The check result of the monitoring rule. Valid values:

*   0: indicates that the data source table is normal.
*   1: indicates that a warning alert is reported.
*   2: indicates that a critical alert is reported.', example='0'),
        checkerId?: int32(name='CheckerId', description='The checker ID.', example='7'),
        checkerName?: string(name='CheckerName', description='The name of the checker.', example='fulx'),
        checkerType?: int32(name='CheckerType', description='The check type. Valid values:

*   0: indicates that the monitoring is performed based on a fixed value.
*   1: indicates that the monitoring is performed based on a non-fixed value.
*   2: indicates that the monitoring is performed based on a dynamic threshold.', example='1'),
        comment?: string(name='Comment', description='The description of the monitoring rule.', example='The description of the rule.'),
        criticalThreshold?: float(name='CriticalThreshold', description='The threshold for a critical alert. The threshold indicates the deviation of the check result from the expected value. You can specify a value for the threshold based on your business requirements. If a monitoring rule is a strong rule and the critical threshold is exceeded, a critical alert is reported and tasks that are associated with the rule are blocked from running.', example='0.5'),
        dateType?: string(name='DateType', description='The scheduling frequency. In most cases, the value of this parameter is YMD. This value indicates year, month, and day.', example='YMD'),
        discreteCheck?: boolean(name='DiscreteCheck', description='Indicates whether the monitoring is discrete monitoring. Valid values:

*   true
*   false', example='true'),
        endTime?: long(name='EndTime', description='The deadline for querying the check result.', example='1600704000000'),
        entityId?: long(name='EntityId', description='The ID of the partition filter expression.', example='15432322'),
        expectValue?: float(name='ExpectValue', description='The expected value.', example='200'),
        externalId?: string(name='ExternalId', description='The node ID.', example='1112323123'),
        externalType?: string(name='ExternalType', description='The type of the scheduling system. Only CWF scheduling systems are supported.', example='CWF2'),
        fixedCheck?: boolean(name='FixedCheck', description='Indicates whether the monitoring is performed based on a fixed value. Valid values:

*   true
*   false', example='false'),
        id?: long(name='Id', description='The primary key ID.', example='121212121'),
        isPrediction?: boolean(name='IsPrediction', description='Indicates whether the check result is the same as the predicted result. Valid values:

*   true
*   false', example='true'),
        lowerValue?: float(name='LowerValue', description='The lower limit of the predicted result. The value of this parameter is automatically generated based on the threshold that you specify.', example='2344'),
        matchExpression?: string(name='MatchExpression', description='The partition filter expression.', example='ds=$[yyyymmdd]'),
        methodName?: string(name='MethodName', description='The method used to collect sample data, such as such as avg, count, sum, min, max, count_distinct, user_defined, table_count, table_size, table_dt_load_count, table_dt_refuseload_count, null_value, null_value/table_count, (table_count-count_distinct)/table_count, or table_count-count_distinct.', example='count_distinct'),
        op?: string(name='Op', description='The comparison operator.', example='>'),
        projectName?: string(name='ProjectName', description='The name of the compute engine or data source for which data quality is monitored.', example='autotest'),
        property?: string(name='Property', description='The field whose data quality is checked based on the monitoring rule. This field is a column in the data source table that is monitored.', example='type'),
        referenceValue?: [ 
          {
            bizDate?: string(name='BizDate', description='The data timestamp. In most cases, if the monitored business entity is offline data, the value is one day before the monitoring is performed.', example='2020-12-03'),
            discreteProperty?: string(name='DiscreteProperty', description='The values of the sample field that are grouped by using the GROUP BY clause. For example, the values of the Gender field are grouped by using the GROUP BY clause. In this case, the values of the DiscreteProperty parameter are Male, Female, and null.', example='0'),
            singleCheckResult?: int32(name='SingleCheckResult', description='The check result.', example='0'),
            threshold?: float(name='Threshold', description='The threshold.', example='0.5'),
            value?: float(name='Value', description='The check value.', example='19'),
          }
        ](name='ReferenceValue', description='The historical sample values.'),
        resultString?: string(name='ResultString', description='The string of the check result.', example='test'),
        ruleId?: long(name='RuleId', description='The ID of the monitoring rule.', example='123123232'),
        ruleName?: string(name='RuleName', description='The name of the monitoring rule.', example='The name of the rule.'),
        sampleValue?: [ 
          {
            bizDate?: string(name='BizDate', description='The data timestamp. In most cases, if the monitored business entity is offline data, the value is one day before the monitoring is performed.', example='2020-12-03'),
            discreteProperty?: string(name='DiscreteProperty', description='The values of the sample field that are grouped by using the GROUP BY clause. For example, the values of the Gender field are grouped by using the GROUP BY clause. In this case, the values of the DiscreteProperty parameter are Male, Female, and null.', example='0'),
            value?: float(name='Value', description='The current sample value.', example='19'),
          }
        ](name='SampleValue', description='The current sample value.'),
        tableName?: string(name='TableName', description='The name of the table that is monitored.', example='dual'),
        taskId?: string(name='TaskId', description='The monitoring task ID.', example='16008552981681a0d6****'),
        templateId?: int32(name='TemplateId', description='The ID of the monitoring template.', example='5'),
        templateName?: string(name='TemplateName', description='The name of the monitoring template.', example='Expected value verification'),
        timeCost?: string(name='TimeCost', description='The time that was taken to run the monitoring task. Unit: seconds.', example='202'),
        trend?: string(name='Trend', description='The trend of the check result.', example='abs'),
        upperValue?: float(name='UpperValue', description='The upper limit of the predicted result. The value of this parameter is automatically generated based on the threshold that you specify.', example='25555'),
        warningThreshold?: float(name='WarningThreshold', description='The threshold for a warning alert. The threshold indicates the deviation of the check result from the expected value. You can customize this threshold based on your business requirements.', example='0.1'),
        whereCondition?: string(name='WhereCondition', description='The filter condition of the monitoring rule.', example='id>0'),
      }
    ](name='RuleChecks', description='The returned check results.'),
    totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='50'),
  }(name='Data', description='The data structure of the check results.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='401'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='CBA58543-00D4-41****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListQualityResultsByEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListQualityResultsByEntityResponseBody(name='body'),
}

/**
 * @summary Queries a list of historical check results based on a partition filter expression.
 *
 * @description ****
 *
 * @param request ListQualityResultsByEntityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListQualityResultsByEntityResponse
 */
async function listQualityResultsByEntityWithOptions(request: ListQualityResultsByEntityRequest, runtime: Util.RuntimeOptions): ListQualityResultsByEntityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListQualityResultsByEntity',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of historical check results based on a partition filter expression.
 *
 * @description ****
 *
 * @param request ListQualityResultsByEntityRequest
 * @return ListQualityResultsByEntityResponse
 */
async function listQualityResultsByEntity(request: ListQualityResultsByEntityRequest): ListQualityResultsByEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return listQualityResultsByEntityWithOptions(request, runtime);
}

model ListQualityResultsByRuleRequest {
  endDate?: string(name='EndDate', description='The end of the time range to query. Specify the time in the yyyy-MM-dd HH:mm:ss format.

This parameter is used together with the StartDate parameter. The interval between the time specified by this parameter and the time specified by the StartDate parameter cannot exceed 7 days.

This parameter is required.', example='2020-09-22 00:00:00'),
  pageNumber?: int32(name='PageNumber', description='The page number.

This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.

This parameter is required.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='12345'),
  projectName?: string(name='ProjectName', description='The name of the compute engine or data source for which data quality is monitored.

This parameter is required.', example='autotest'),
  ruleId?: long(name='RuleId', description='The monitoring rule ID. You can use the ID and information such as a partition filter expression to perform a joint query.

This parameter is required.', example='152322134'),
  startDate?: string(name='StartDate', description='The beginning of the time range to query. Specify the time in the yyyy-MM-dd HH:mm:ss format.

This parameter is used together with the EndDate parameter. The interval between the time specified by this parameter and the time specified by the EndDate parameter cannot exceed 7 days.

This parameter is required.', example='2020-09-20 00:00:00'),
}

model ListQualityResultsByRuleResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
    ruleChecks?: [ 
      {
        actualExpression?: string(name='ActualExpression', description='The partition in the monitored data source table.', example='ds=20200925'),
        beginTime?: long(name='BeginTime', description='The time when the monitoring started.', example='1600704000000'),
        bizDate?: long(name='BizDate', description='The data timestamp. If the monitored business entity is offline data, the value is usually one day before the monitoring is performed.', example='1600704000000'),
        blockType?: int32(name='BlockType', description='The strength of the monitoring rule. The strength of a monitoring rule indicates the importance of the rule. Valid values:

*   1: indicates that the monitoring rule is a strong rule.
*   0: indicates that the monitoring rule is a weak rule. You can specify the strength of a monitoring rule based on your business requirements. If a monitoring rule is a strong rule and the critical threshold is exceeded, a critical alert is reported and tasks that are associated with the rule are blocked from running.', example='1'),
        checkResult?: int32(name='CheckResult', description='The monitoring result.', example='2'),
        checkResultStatus?: int32(name='CheckResultStatus', description='The status of the monitoring result.', example='2'),
        checkerId?: int32(name='CheckerId', description='The checker ID.', example='7'),
        checkerName?: string(name='CheckerName', description='The name of the checker.', example='fulx'),
        checkerType?: int32(name='CheckerType', description='The type of the checker.', example='0'),
        comment?: string(name='Comment', description='The description of the monitoring rule.', example='The description of the rule.'),
        criticalThreshold?: float(name='CriticalThreshold', description='The threshold for a critical alert. The threshold indicates the deviation of the monitoring result from the expected value. You can specify a custom value for the threshold based on your business requirements. If a monitoring rule is a strong rule and the critical threshold is exceeded, a critical alert is reported and tasks that are associated with the rule are blocked from running.', example='0.6'),
        dateType?: string(name='DateType', description='The scheduling frequency. In most cases, the value of this parameter is YMD. This value indicates year, month, and day.', example='YMD'),
        discreteCheck?: boolean(name='DiscreteCheck', description='Indicates whether the monitoring is discrete monitoring. Valid values:

*   true
*   false', example='true'),
        endTime?: long(name='EndTime', description='The time when the monitoring ended.', example='1600704000000'),
        entityId?: long(name='EntityId', description='The ID of the partition filter expression.', example='14534343'),
        expectValue?: float(name='ExpectValue', description='The expected value.', example='90'),
        externalId?: string(name='ExternalId', description='The node ID.', example='123112232'),
        externalType?: string(name='ExternalType', description='The type of the scheduling system. Only CWF scheduling systems are supported.', example='CWF2'),
        fixedCheck?: boolean(name='FixedCheck', description='Indicates whether the monitoring is performed based on a fixed value. Valid values:

*   true
*   false', example='false'),
        id?: long(name='Id', description='The primary key ID.', example='2231123'),
        isPrediction?: boolean(name='IsPrediction', description='Indicates whether the monitoring result is the same as the predicted result. Valid values:

*   true
*   false', example='false'),
        lowerValue?: float(name='LowerValue', description='The lower limit of the predicted result. The value of this parameter is automatically generated based on the threshold that you specify.', example='2344'),
        matchExpression?: string(name='MatchExpression', description='The partition filter expression.', example='ds=$[yyyymmdd]'),
        methodName?: string(name='MethodName', description='The method used to collect sample data, such as such as avg, count, sum, min, max, count_distinct, user_defined, table_count, table_size, table_dt_load_count, table_dt_refuseload_count, null_value, null_value/table_count, (table_count-count_distinct)/table_count, or table_count-count_distinct.', example='max'),
        op?: string(name='Op', description='The comparison operator.', example='>'),
        open?: boolean(name='Open', description='Indicates whether the monitoring rule is enabled.', example='true'),
        projectName?: string(name='ProjectName', description='The name of the compute engine or data source for which data quality is monitored.', example='autotest'),
        property?: string(name='Property', description='The field whose data quality is checked based on the monitoring rule. This field is a column in the data source table that is monitored.', example='type'),
        referenceValue?: [ 
          {
            bizDate?: string(name='BizDate', description='The data timestamp. If the monitored business entity is offline data, the value is usually one day before the monitoring is performed.', example='1600704000000'),
            discreteProperty?: string(name='DiscreteProperty', description='The values of the sample field that are grouped by using the GROUP BY clause. For example, the values of the Gender field are grouped by using the GROUP BY clause. In this case, the values of DiscreteProperty are Male, Female, and null.', example='type1'),
            singleCheckResult?: int32(name='SingleCheckResult', description='The string of the monitoring result.', example='2'),
            threshold?: float(name='Threshold', description='The threshold.', example='0.2'),
            value?: float(name='Value', description='The sample value.', example='20'),
          }
        ](name='ReferenceValue', description='The historical sample values.'),
        resultString?: string(name='ResultString', description='The string of the monitoring result.', example='ResultString'),
        ruleId?: long(name='RuleId', description='The ID of the monitoring rule.', example='123421'),
        ruleName?: string(name='RuleName', description='The name of the monitoring rule.', example='The name of the rule.'),
        sampleValue?: [ 
          {
            bizDate?: string(name='BizDate', description='The data timestamp. If the monitored business entity is offline data, the value is usually one day before the monitoring is performed.', example='1600704000000'),
            discreteProperty?: string(name='DiscreteProperty', description='The values of the sample field that are grouped by using the GROUP BY clause. For example, the values of the Gender field are grouped by using the GROUP BY clause. In this case, the values of DiscreteProperty are Male, Female, and null.', example='type2'),
            value?: float(name='Value', description='The sample value.', example='23'),
          }
        ](name='SampleValue', description='The current sample values.'),
        tableName?: string(name='TableName', description='The name of the table that is monitored.', example='dual'),
        taskId?: string(name='TaskId', description='The monitoring task ID.', example='16008552981681a0d6****'),
        templateId?: int32(name='TemplateId', description='The ID of the monitoring template.', example='5'),
        templateName?: string(name='TemplateName', description='The name of the monitoring template.', example='Expected value verification'),
        timeCost?: string(name='TimeCost', description='The time that was taken to run the monitoring task.', example='10'),
        trend?: string(name='Trend', description='The trend of the monitoring result.', example='up'),
        upperValue?: float(name='UpperValue', description='The upper limit of the predicted result. The value of this parameter is automatically generated based on the threshold that you specify.', example='22200'),
        warningThreshold?: float(name='WarningThreshold', description='The threshold for a warning alert. The threshold specifies the deviation of the monitoring result from the expected value. You can specify a custom value for the threshold based on your business requirements.', example='0.1'),
        whereCondition?: string(name='WhereCondition', description='The filter condition of the monitoring task.', example='type!=\\\\"type2\\\\"'),
      }
    ](name='RuleChecks', description='The returned monitoring results.'),
    totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='200'),
  }(name='Data', description='The data structure of the monitoring results returned.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='401'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='CBA58543-00D4-41****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListQualityResultsByRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListQualityResultsByRuleResponseBody(name='body'),
}

/**
 * @summary Queries monitoring results after the data quality of a data source or a compute engine is monitored based on monitoring rules.
 *
 * @param request ListQualityResultsByRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListQualityResultsByRuleResponse
 */
async function listQualityResultsByRuleWithOptions(request: ListQualityResultsByRuleRequest, runtime: Util.RuntimeOptions): ListQualityResultsByRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.ruleId)) {
    body['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListQualityResultsByRule',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries monitoring results after the data quality of a data source or a compute engine is monitored based on monitoring rules.
 *
 * @param request ListQualityResultsByRuleRequest
 * @return ListQualityResultsByRuleResponse
 */
async function listQualityResultsByRule(request: ListQualityResultsByRuleRequest): ListQualityResultsByRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return listQualityResultsByRuleWithOptions(request, runtime);
}

model ListQualityRulesRequest {
  entityId?: long(name='EntityId', description='The ID of the partition filter expression. You can call the [GetQualityEntity](https://help.aliyun.com/document_detail/174003.html) operation to query the ID.

This parameter is required.', example='1234'),
  pageNumber?: int32(name='PageNumber', description='The page number.

This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 20.

This parameter is required.', example='20'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='12345'),
  projectName?: string(name='ProjectName', description='The name of the compute engine or data source. You can obtain the name from data source configurations.

This parameter is required.', example='autotest'),
}

model ListQualityRulesResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='20'),
    rules?: [ 
      {
        blockType?: int32(name='BlockType', description='The strength of the monitoring rule. The strength of a monitoring rule indicates the importance of the rule. Valid values:

*   1: The monitoring rule is a strong rule.
*   0: The monitoring rule is a weak rule. You can specify the strength of a monitoring rule based on your business requirements. If a monitoring rule is a strong rule and the critical threshold is exceeded, a critical alert is reported and tasks that are associated with the rule are blocked from running.', example='0'),
        checkerId?: int32(name='CheckerId', description='The checker ID.', example='7'),
        comment?: string(name='Comment', description='The description of the system defense rule.', example='Verify table rules'),
        criticalThreshold?: string(name='CriticalThreshold', description='The threshold for a critical alert. The threshold indicates the deviation of the monitoring result from the expected value. You can specify a custom value for the threshold based on your business requirements. If a monitoring rule is a strong rule and the critical threshold is exceeded, a critical alert is reported and tasks that are associated with the rule are blocked from running.', example='40'),
        entityId?: long(name='EntityId', description='The ID of the partition filter expression.', example='1234'),
        expectValue?: string(name='ExpectValue', description='The expected value.', example='1000'),
        fixCheck?: boolean(name='FixCheck', description='Indicates whether the monitoring is performed based on a fixed value.', example='true'),
        historyCriticalThreshold?: string(name='HistoryCriticalThreshold', description='The historical threshold for a critical alert.', example='history max:80%,history min:50%'),
        historyWarningThreshold?: string(name='HistoryWarningThreshold', description='The historical threshold for a warning alert.', example='history max:40%,history min:10%'),
        id?: long(name='Id', description='The monitoring rule ID.', example='1234'),
        matchExpression?: string(name='MatchExpression', description='The partition filter expression.', example='dt=$[yyyymmdd]'),
        methodId?: int32(name='MethodId', description='The ID of the task that is associated with the partition filter expression.', example='21'),
        methodName?: string(name='MethodName', description='The method that is used to collect sample data, such as avg, count, sum, min, max, count_distinct, user_defined, table_count, table_size, table_dt_load_count, table_dt_refuseload_count, null_value, null_value/table_count, (table_count-count_distinct)/table_count, or table_count-count_distinct.', example='count/table_count'),
        onDuty?: string(name='OnDuty', description='The name of the Alibaba Cloud account that is used to configure the monitoring rule.', example='1912****'),
        onDutyAccountName?: string(name='OnDutyAccountName', description='The name of the Alibaba Cloud account that is used to configure the monitoring rule.', example='test'),
        projectName?: string(name='ProjectName', description='The name of the compute engine or data source.', example='autotest'),
        property?: string(name='Property', description='The name of the field.', example='id'),
        propertyKey?: string(name='PropertyKey', description='The field that is used to associate with monitoring rules at the frontend. This parameter can be ignored.', example='table_count'),
        ruleCheckerRelationId?: long(name='RuleCheckerRelationId', description='The ID of the task that is associated with the partition filter expression.', example='132323'),
        ruleName?: string(name='RuleName', description='The name of the monitoring rule.', example='test'),
        ruleType?: int32(name='RuleType', description='The type of the monitoring rule. Valid values:

*   0: The monitoring rule is created by the system.
*   1: The monitoring rule is created by a user.
*   2: The monitoring rule is a workspace-level rule.', example='0'),
        tableName?: string(name='TableName', description='The name of the table.', example='dual'),
        templateId?: int32(name='TemplateId', description='The ID of the monitoring template.', example='7'),
        templateName?: string(name='TemplateName', description='The name of the monitoring template.', example='Number of SQL task table rows, 1, 7, and 30 days wave detection'),
        trend?: string(name='Trend', description='The trend of the monitoring result.', example='abs'),
        warningThreshold?: string(name='WarningThreshold', description='The threshold for a warning alert. The threshold specifies the deviation of the monitoring result from the expected value. You can specify a custom value for the threshold based on your business requirements.', example='10'),
      }
    ](name='Rules', description='The details of the monitoring rule.'),
    totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='400'),
  }(name='Data', description='The list of monitoring rules.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can troubleshoot errors based on the ID.', example='38cbdef0-f6cf-49****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model ListQualityRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListQualityRulesResponseBody(name='body'),
}

/**
 * @summary Queries monitoring rules based on a partition filter expression.
 *
 * @param request ListQualityRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListQualityRulesResponse
 */
async function listQualityRulesWithOptions(request: ListQualityRulesRequest, runtime: Util.RuntimeOptions): ListQualityRulesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListQualityRules',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries monitoring rules based on a partition filter expression.
 *
 * @param request ListQualityRulesRequest
 * @return ListQualityRulesResponse
 */
async function listQualityRules(request: ListQualityRulesRequest): ListQualityRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listQualityRulesWithOptions(request, runtime);
}

model ListRefDISyncTasksRequest {
  datasourceName?: string(name='DatasourceName', description='The name of the data source. You can call the [ListDataSources](https://help.aliyun.com/document_detail/211431.html) operation to query the name of the data source.

This parameter is required.', example='mysql_datasource'),
  pageNumber?: long(name='PageNumber', description='The page number. Valid values: 1 to 100.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='100'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the ID.

This parameter is required.', example='10000'),
  refType?: string(name='RefType', description='The condition used to filter synchronization tasks. Valid values:

*   from: queries the synchronization tasks that use the data source as the source.
*   to: queries the synchronization tasks that use the data source as the destination.

This parameter is required.', example='from'),
  taskType?: string(name='TaskType', description='The type of the synchronization task that you want to query. Valid values:

*   DI_OFFLINE: batch synchronization task
*   DI_REALTIME: real-time synchronization task

You can call the ListRefDISyncTasks operation to query only one type of the task.

This parameter is required.', example='DI_OFFLINE'),
}

model ListRefDISyncTasksResponseBody = {
  data?: {
    DISyncTasks?: [ 
      {
        diDestinationDatasource?: string(name='DiDestinationDatasource', description='The destination of the synchronization task. If the synchronization task has multiple destinations, the return value is a JSON array, such as \\\\\\\\"odps_writer\\\\\\\\", \\\\\\\\"mysql\\\\\\\\". If the RefType parameter is set to to, the synchronization tasks that use the specified data source as the destination are returned. In this case, the value of this parameter indicates the specified data source.', example='[\\\\"qcc_polardb2\\\\"]'),
        diSourceDatasource?: string(name='DiSourceDatasource', description='The source of the synchronization task. If the synchronization task has multiple sources, the return value is a JSON array, such as \\\\\\\\"odps_writer\\\\\\\\", \\\\\\\\"mysql\\\\\\\\". If the RefType parameter is set to from, the synchronization tasks that use the specified data source as the source are returned. In this case, the value of this parameter indicates the specified data source.', example='[\\\\"odps_writer\\\\"]'),
        nodeId?: long(name='NodeId', description='The ID of the synchronization task.', example='100000'),
        nodeName?: string(name='NodeName', description='The name of the synchronization task.', example='abcd1234'),
        taskType?: string(name='TaskType', description='The type of the synchronization task. Valid values:

*   DI_OFFLINE: batch synchronization task
*   DI_REALTIME: real-time synchronization task', example='DI_OFFLINE'),
      }
    ](name='DISyncTasks', description='The details of the synchronization tasks. In most cases, a data source is used by multiple synchronization tasks. Therefore, the value of this parameter is an array. The following parameters are the elements in the array. The sample values of these parameters show the details of a synchronization task.'),
  }(name='Data', description='The returned result.'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model ListRefDISyncTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRefDISyncTasksResponseBody(name='body'),
}

/**
 * @summary Queries synchronization tasks in Data Integration that use a specific data source.
 *
 * @param request ListRefDISyncTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListRefDISyncTasksResponse
 */
async function listRefDISyncTasksWithOptions(request: ListRefDISyncTasksRequest, runtime: Util.RuntimeOptions): ListRefDISyncTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasourceName)) {
    query['DatasourceName'] = request.datasourceName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.refType)) {
    query['RefType'] = request.refType;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRefDISyncTasks',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries synchronization tasks in Data Integration that use a specific data source.
 *
 * @param request ListRefDISyncTasksRequest
 * @return ListRefDISyncTasksResponse
 */
async function listRefDISyncTasks(request: ListRefDISyncTasksRequest): ListRefDISyncTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRefDISyncTasksWithOptions(request, runtime);
}

model ListRemindsRequest {
  alertTarget?: string(name='AlertTarget', description='The ID of the Alibaba Cloud account that is used to receive alert notifications.', example='9527952795****'),
  founder?: string(name='Founder', description='The ID of the Alibaba Cloud account that is used to create the custom alert rules.', example='9527952795****'),
  nodeId?: long(name='NodeId', description='The ID of the node to which the custom alert rules are applied. You can use the ID to search for the custom alert rules that are applied to the node.', example='1234'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: 1 to 30. Default value: 1.

This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.

This parameter is required.', example='10'),
  remindTypes?: string(name='RemindTypes', description='The conditions that trigger an alert for the node. Valid values: FINISHED, UNFINISHED, ERROR, CYCLE_UNFINISHED, and TIMEOUT. The value FINISHED indicates that the node finishes running. The value UNFINISHED indicates that the node is still running at the specified point in time. The value ERROR indicates that an error occurs when the node is running. The value CYCLE_UNFINISHED indicates that the node does not finish running in the specified scheduling cycle. The value TIMEOUT indicates that the node times out. You can specify multiple conditions for a custom alert rule. If you specify multiple condition, separate them with commas (,).', example='FINISHED,ERROR'),
  searchText?: string(name='SearchText', description='The keyword in a rule name that is used to search for the rule. Fuzzy search is supported.', example='Keyword'),
}

model ListRemindsResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    reminds?: [ 
      {
        alertMethods?: [ string ](name='AlertMethods', description='The notification method. Valid values: MAIL, SMS, and PHONE. The value MAIL indicates that the notification is sent by email. Only DataWorks Professional Edition and more advanced editions support the PHONE notification method.'),
        alertTargets?: [ string ](name='AlertTargets', description='The IDs of the Alibaba Cloud accounts used by alert recipients.'),
        alertUnit?: string(name='AlertUnit', description='The alert recipient. Valid values: OWNER and OTHER. The value OWNER indicates the node owner. The value OTHER indicates a specified user.', example='OWNER'),
        baselineIds?: [ long ](name='BaselineIds', description='The IDs of the baselines to which the custom alert rule is applied. This parameter is returned if the value of the RemindUnit parameter is BASELINE.'),
        bizProcessIds?: [ long ](name='BizProcessIds', description='The IDs of the workflows to which the custom alert rule is applied. This parameter is returned if the value of the RemindUnit parameter is BIZPROCESS.'),
        dndEnd?: string(name='DndEnd', description='The end time of the quiet hours. The time is in the hh:mm format. Valid values of hh: [0,23]. Valid values of mm: [0,59].', example='08:00'),
        dndStart?: string(name='DndStart', description='The start time of the quiet hours. The time is in the hh:mm format. Valid values of hh: [0,23]. Valid values of mm: [0,59].', example='00:00'),
        founder?: string(name='Founder', description='The ID of the Alibaba Cloud account used by the rule creator.', example='952795****'),
        nodeIds?: [ long ](name='NodeIds', description='The IDs of the nodes to which the custom alert rule is applied. This parameter is returned if the value of the RemindUnit parameter is NODE.'),
        projectIds?: [ long ](name='ProjectIds', description='The IDs of the workspaces to which the custom alert rule is applied. This parameter is returned if the value of the RemindUnit parameter is PROJECT.'),
        remindId?: long(name='RemindId', description='The custom alert rule ID.', example='1234'),
        remindName?: string(name='RemindName', description='The name of the custom alert rule.', example='Alert Rule'),
        remindType?: string(name='RemindType', description='The condition that triggers an alert. Valid values: FINISHED, UNFINISHED, ERROR, CYCLE_UNFINISHED, and TIMEOUT.', example='FINISHED'),
        remindUnit?: string(name='RemindUnit', description='The type of the object to which the custom alert rule is applied. Valid values: NODE, BASELINE, PROJECT, and BIZPROCESS. The value NODE indicates a node. The value BASELINE indicates a baseline. The value PROJECT indicates a workspace. The value BIZPROCESS indicates a workflow.', example='NODE'),
        useflag?: boolean(name='Useflag', description='Indicates whether the custom alert rule is enabled. Valid values: true and false.', example='true'),
      }
    ](name='Reminds', description='The list of custom alert rules.'),
    totalCount?: int32(name='TotalCount', description='The total number of custom alert rules returned.', example='100'),
  }(name='Data', description='The data returned.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListRemindsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRemindsResponseBody(name='body'),
}

/**
 * @summary Queries a list of custom alert rules.
 *
 * @param request ListRemindsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListRemindsResponse
 */
async function listRemindsWithOptions(request: ListRemindsRequest, runtime: Util.RuntimeOptions): ListRemindsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertTarget)) {
    body['AlertTarget'] = request.alertTarget;
  }
  if (!Util.isUnset(request.founder)) {
    body['Founder'] = request.founder;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.remindTypes)) {
    body['RemindTypes'] = request.remindTypes;
  }
  if (!Util.isUnset(request.searchText)) {
    body['SearchText'] = request.searchText;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListReminds',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of custom alert rules.
 *
 * @param request ListRemindsRequest
 * @return ListRemindsResponse
 */
async function listReminds(request: ListRemindsRequest): ListRemindsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRemindsWithOptions(request, runtime);
}

model ListResourceGroupsRequest {
  bizExtKey?: string(name='BizExtKey', description='The category of the resource group. Valid values:

*   default (default): shared resource group
*   single: exclusive resource group', example='default'),
  keyword?: string(name='Keyword', description='The keyword that is used for fuzzy match by resource group name and identifier.', example='abc'),
  resourceGroupType?: int32(name='ResourceGroupType', description='The type of the resource group that you want to query. Valid values:

*   0: DataWorks
*   1: scheduling
*   2: MaxCompute
*   3: Platform for AI (PAI)
*   4: Data Integration
*   7: exclusive resource group for scheduling (An ID is generated for the purchased resource when you purchase an exclusive resource group for scheduling.)
*   9: DataService Studio
*   Default value: 1

If the value indicates a compute engine, the resource groups to query are the ones that were created when you purchased the compute engine.', example='3'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The resource group ID.', example='rg-acfmzbn7pti3zfa'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='Env'),
      value?: string(name='Value', description='The tag value.', example='Test'),
    }
  ](name='Tags', description='The tags.'),
}

model ListResourceGroupsShrinkRequest {
  bizExtKey?: string(name='BizExtKey', description='The category of the resource group. Valid values:

*   default (default): shared resource group
*   single: exclusive resource group', example='default'),
  keyword?: string(name='Keyword', description='The keyword that is used for fuzzy match by resource group name and identifier.', example='abc'),
  resourceGroupType?: int32(name='ResourceGroupType', description='The type of the resource group that you want to query. Valid values:

*   0: DataWorks
*   1: scheduling
*   2: MaxCompute
*   3: Platform for AI (PAI)
*   4: Data Integration
*   7: exclusive resource group for scheduling (An ID is generated for the purchased resource when you purchase an exclusive resource group for scheduling.)
*   9: DataService Studio
*   Default value: 1

If the value indicates a compute engine, the resource groups to query are the ones that were created when you purchased the compute engine.', example='3'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The resource group ID.', example='rg-acfmzbn7pti3zfa'),
  tagsShrink?: string(name='Tags', description='The tags.'),
}

model ListResourceGroupsResponseBody = {
  data?: [ 
    {
      bizExtKey?: string(name='BizExtKey', description='The category of the resource group. Valid values:

*   default: shared resource group
*   single: exclusive resource group', example='default'),
      cluster?: string(name='Cluster', description='The name of the cluster. This parameter is returned only if the type of the resource group is MaxCompute or PAI.', example='AY18G'),
      createTime?: string(name='CreateTime', description='The time when the cluster was created. Example: Jul 9, 2018 2:43:37 PM.', example='Jul 9, 2018 2:43:37 PM'),
      enableKp?: boolean(name='EnableKp', description='Indicates whether the UID of an Alibaba Cloud account is used for access. Valid values:

*   true: The MaxCompute compute engine uses the UID of the Alibaba Cloud account as the display name of the account for access.
*   false: The MaxCompute compute engine uses the name of the Alibaba Cloud account as the display name of the account for access. The remaining values are useless. This parameter is returned only if the type of the resource group is MaxCompute.', example='false'),
      id?: long(name='Id', description='The resource group ID.', example='1234567'),
      identifier?: string(name='Identifier', description='The identifier of the resource group.', example='e1815577-2f4e-4c5e-b29****'),
      isDefault?: boolean(name='IsDefault', description='Indicates whether the resource group is the default resource group. Valid values:

*   true: The resource group is the default resource group.
*   false: The resource group is not the default resource group.', example='true'),
      mode?: string(name='Mode', description='The mode of the resource group. Valid values:

*   ISOLATE: exclusive resource group that adopts the subscription billing method
*   SHARE: shared resource group that adopts the pay-as-you-go billing method
*   DEVELOP: resource group for developers', example='SHARE'),
      name?: string(name='Name', description='The name of the resource group.', example='abc'),
      resourceGroupType?: string(name='ResourceGroupType', description='The type of the resource group. Valid values:

*   0: DataWorks
*   2: MaxCompute
*   3: PAI
*   4: Data Integration
*   7: scheduling
*   9: DataService Studio', example='3'),
      resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The ID of your Alibaba Cloud resource group.', example='rg-acfmzbn7pti3zfa'),
      sequence?: int32(name='Sequence', description='The sequence number of the resource group. Created resource groups are sorted in ascending order by sequence number.', example='300'),
      specs?: map[string]any(name='Specs', description='The details of the resource group. The content enclosed in braces {} is the details of the resource group.', example='{}'),
      status?: int32(name='Status', description='The status of the resource group. Valid values:

*   0: NORMAL, which indicates that the resource group is running or in service.
*   1: STOP, which indicates that the resource group has expired and is frozen.
*   2: DELETED, which indicates that the resource group is released or destroyed.
*   3: CREATING, which indicates that the resource group is being created or started.
*   4: CREATE_FAILED, which indicates that the resource group fails to be created or started.
*   5: UPDATING, which indicates that the resource group is being scaled out or upgraded.
*   6: UPDATE_FAILED, which indicates that the resource group fails to be scaled out or upgraded.
*   7: DELETING, which indicates that the resource group is being released or destroyed.
*   8: DELETE_FAILED, which indicates that the resource group fails to be released or destroyed.
*   9: TIMEOUT, which indicates that the operation performed on the resource group times out. All operations may time out. This value is temporarily available only for DataService Studio.', example='0'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='Env'),
          value?: string(name='Value', description='The tag value.', example='Test'),
        }
      ](name='Tags', description='The tags.'),
      tenantId?: long(name='TenantId', description='The tenant ID.', example='1234567'),
      updateTime?: string(name='UpdateTime', description='The time when the resource group was last updated.', example='Jul 9, 2018 2:43:37 PM'),
    }
  ](name='Data', description='The resource groups.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListResourceGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourceGroupsResponseBody(name='body'),
}

/**
 * @summary Queries a list of resource groups of a specific type.
 *
 * @param tmpReq ListResourceGroupsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListResourceGroupsResponse
 */
async function listResourceGroupsWithOptions(tmpReq: ListResourceGroupsRequest, runtime: Util.RuntimeOptions): ListResourceGroupsResponse {
  Util.validateModel(tmpReq);
  var request = new ListResourceGroupsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.bizExtKey)) {
    query['BizExtKey'] = request.bizExtKey;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.resourceGroupType)) {
    query['ResourceGroupType'] = request.resourceGroupType;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListResourceGroups',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of resource groups of a specific type.
 *
 * @param request ListResourceGroupsRequest
 * @return ListResourceGroupsResponse
 */
async function listResourceGroups(request: ListResourceGroupsRequest): ListResourceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResourceGroupsWithOptions(request, runtime);
}

model ListShiftPersonnelsRequest {
  beginTime?: long(name='BeginTime', description='The time when the on-duty engineer starts a shift. Set the value to a UNIX timestamp.

This parameter is required.', example='1593950832000'),
  endTime?: long(name='EndTime', description='The time when the on-duty engineer ends a shift. Set the value to a UNIX timestamp.

This parameter is required.', example='1593950832000'),
  shiftPersonUID?: string(name='ShiftPersonUID', description='The ID of the Alibaba Cloud account. You can log on to the DataWorks console and move the pointer over the profile picture in the upper-right corner to view the ID.', example='1933790****551'),
  shiftScheduleIdentifier?: string(name='ShiftScheduleIdentifier', description='The unique identifier of the shift schedule.

This parameter is required.', example='2ab6456ada634b2f938ee******9b45b'),
  userType?: string(name='UserType', description='The type of the on-duty engineer that you want to query. Valid values: ALL, PRIMARY, BACKUP, and DESIGNATED_USER.', example='ALL'),
}

model ListShiftPersonnelsResponseBody = {
  paging?: {
    pageNumber?: int32(name='PageNumber', description='The page number. Valid values: 1 to 100. Default value: 1.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
    shiftPersons?: [ 
      {
        beginTime?: long(name='BeginTime', description='The time when the on-duty engineer starts the shift.', example='1593950832000'),
        endTime?: long(name='EndTime', description='The time when the on-duty engineer ends the shift.', example='1593950832000'),
        shiftPersonName?: string(name='ShiftPersonName', description='The name of the on-duty engineer.', example='Zhang San'),
        shiftPersonUID?: string(name='ShiftPersonUID', description='The UID of the on-duty engineer.', example='3726346****'),
      }
    ](name='ShiftPersons', description='A list of on-duty engineers in a shift schedule.'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='Paging', description='The pagination data.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG'),
}

model ListShiftPersonnelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListShiftPersonnelsResponseBody(name='body'),
}

/**
 * @summary Queries a list of on-duty engineers in a shift schedule.
 *
 * @param request ListShiftPersonnelsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListShiftPersonnelsResponse
 */
async function listShiftPersonnelsWithOptions(request: ListShiftPersonnelsRequest, runtime: Util.RuntimeOptions): ListShiftPersonnelsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.beginTime)) {
    body['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.shiftPersonUID)) {
    body['ShiftPersonUID'] = request.shiftPersonUID;
  }
  if (!Util.isUnset(request.shiftScheduleIdentifier)) {
    body['ShiftScheduleIdentifier'] = request.shiftScheduleIdentifier;
  }
  if (!Util.isUnset(request.userType)) {
    body['UserType'] = request.userType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListShiftPersonnels',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of on-duty engineers in a shift schedule.
 *
 * @param request ListShiftPersonnelsRequest
 * @return ListShiftPersonnelsResponse
 */
async function listShiftPersonnels(request: ListShiftPersonnelsRequest): ListShiftPersonnelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listShiftPersonnelsWithOptions(request, runtime);
}

model ListShiftSchedulesRequest {
  owner?: string(name='Owner', description='The Alibaba Cloud account ID. You can log on to the DataWorks console and move the pointer over the profile picture in the upper-right corner to view the ID.', example='1933790683****'),
  pageNumber?: int32(name='PageNumber', description='The page number. Minimum value:1. Maximum value: 100. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  shiftScheduleName?: string(name='ShiftScheduleName', description='The keyword used to perform a fuzzy search on shift schedules.', example='Duty table name keyword'),
}

model ListShiftSchedulesResponseBody = {
  paging?: {
    pageNumber?: int32(name='PageNumber', description='The page number. Minimum value: 1. Maximum value: 100.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    shiftSchedules?: [ 
      {
        shiftScheduleIdentifier?: string(name='ShiftScheduleIdentifier', description='The unique identifier of the shift schedule. You can use the identifier to query the on-duty engineers in the shift schedule.', example='2ab6456ada634b2f938ee******9b45b'),
        shiftScheduleName?: string(name='ShiftScheduleName', description='The name of the shift schedule.', example='Duty table name'),
      }
    ](name='ShiftSchedules', description='The shift schedules.'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='Paging', description='The pagination data.'),
  requestId?: string(name='RequestId', description='The request ID.', example='E6F0DBDD-5AD****'),
}

model ListShiftSchedulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListShiftSchedulesResponseBody(name='body'),
}

/**
 * @summary Queries a list of shift schedules in Operation Center.
 *
 * @param request ListShiftSchedulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListShiftSchedulesResponse
 */
async function listShiftSchedulesWithOptions(request: ListShiftSchedulesRequest, runtime: Util.RuntimeOptions): ListShiftSchedulesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.shiftScheduleName)) {
    body['ShiftScheduleName'] = request.shiftScheduleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListShiftSchedules',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of shift schedules in Operation Center.
 *
 * @param request ListShiftSchedulesRequest
 * @return ListShiftSchedulesResponse
 */
async function listShiftSchedules(request: ListShiftSchedulesRequest): ListShiftSchedulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listShiftSchedulesWithOptions(request, runtime);
}

model ListSuccessInstanceAmountRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the DataWorks console and go to the Workspace page to obtain the workspace ID.

This parameter is required.', example='9527'),
}

model ListSuccessInstanceAmountResponseBody = {
  instanceStatusTrend?: {
    avgTrend?: [ 
      {
        count?: int32(name='Count', description='The number of instances that are successfully run.', example='10'),
        timePoint?: string(name='TimePoint', description='The point in time. The value is an exact hour that ranges from 00:00 to 23:00, such as 00:00, 01:00, or 02:00.', example='01:00'),
      }
    ](name='AvgTrend', description='The average trend.'),
    todayTrend?: [ 
      {
        count?: int32(name='Count', description='The number of instances that are successfully run.', example='10'),
        timePoint?: string(name='TimePoint', description='The point in time. The value is an exact hour that ranges from 00:00 to 23:00, such as 00:00, 01:00, or 02:00.', example='01:00'),
      }
    ](name='TodayTrend', description='The trend of the number of auto triggered node instances that are successfully run on the current day.'),
    yesterdayTrend?: [ 
      {
        count?: int32(name='Count', description='The number of instances that are successfully run.', example='10'),
        timePoint?: string(name='TimePoint', description='The point in time. The value is an exact hour that ranges from 00:00 to 23:00, such as 00:00, 01:00, or 02:00.', example='01:00'),
      }
    ](name='YesterdayTrend', description='The trend of the number of auto triggered node instances that are successfully run one day earlier than the current day.'),
  }(name='InstanceStatusTrend', description='Indicates the trend of the number of auto triggered node instances that are successfully run every hour on the hour of the current day.'),
  requestId?: string(name='RequestId', description='The request ID.', example='952795279527ab****'),
}

model ListSuccessInstanceAmountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSuccessInstanceAmountResponseBody(name='body'),
}

/**
 * @summary Queries the trend of the number of auto triggered node instances that are successfully run every hour on the hour of the current day.
 *
 * @param request ListSuccessInstanceAmountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListSuccessInstanceAmountResponse
 */
async function listSuccessInstanceAmountWithOptions(request: ListSuccessInstanceAmountRequest, runtime: Util.RuntimeOptions): ListSuccessInstanceAmountResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListSuccessInstanceAmount',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the trend of the number of auto triggered node instances that are successfully run every hour on the hour of the current day.
 *
 * @param request ListSuccessInstanceAmountRequest
 * @return ListSuccessInstanceAmountResponse
 */
async function listSuccessInstanceAmount(request: ListSuccessInstanceAmountRequest): ListSuccessInstanceAmountResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSuccessInstanceAmountWithOptions(request, runtime);
}

model ListTableLevelRequest {
  levelType?: int32(name='LevelType', description='The table level type. Valid values: 1 and 2. The value 1 indicates the logical level. The value 2 indicates the physical level.

This parameter is required.', example='1'),
  pageNum?: int32(name='PageNum', description='The page number. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console to obtain the workspace ID.

This parameter is required.', example='123'),
}

model ListTableLevelResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='abc'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  tableLevelInfo?: {
    levelList?: [ 
      {
        description?: string(name='Description', description='The description of the table level.', example='test'),
        levelId?: long(name='LevelId', description='The table level ID.', example='123'),
        levelType?: int32(name='LevelType', description='The table level type. Valid values: 1 and 2. The value 1 indicates the logical level. The value 2 indicates the physical level.', example='1'),
        name?: string(name='Name', description='The name of the table level.', example='test'),
        projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.', example='123'),
      }
    ](name='LevelList', description='The list of table levels.'),
    totalCount?: long(name='TotalCount', description='The total number of table levels returned.', example='10'),
  }(name='TableLevelInfo', description='The information about the table levels.'),
}

model ListTableLevelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTableLevelResponseBody(name='body'),
}

/**
 * @summary Queries a list of table levels. This operation will be replaced soon. We recommend that you do not call this operation.
 *
 * @param request ListTableLevelRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTableLevelResponse
 */
async function listTableLevelWithOptions(request: ListTableLevelRequest, runtime: Util.RuntimeOptions): ListTableLevelResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTableLevel',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of table levels. This operation will be replaced soon. We recommend that you do not call this operation.
 *
 * @param request ListTableLevelRequest
 * @return ListTableLevelResponse
 */
async function listTableLevel(request: ListTableLevelRequest): ListTableLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTableLevelWithOptions(request, runtime);
}

model ListTableThemeRequest {
  pageNum?: int32(name='PageNum', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  parentId?: long(name='ParentId', description='The ID of the parent table theme.', example='121'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='123'),
}

model ListTableThemeResponseBody = {
  data?: {
    themeList?: [ 
      {
        createTimeStamp?: long(name='CreateTimeStamp', description='The time when the table level was created.', example='123432343243'),
        creator?: string(name='Creator', description='The creator of the table level.', example='123455'),
        level?: int32(name='Level', description='The level of the table folder. Valid values: 1 and 2. The value 1 indicates the first level. The value 2 indicates the second level.', example='1'),
        name?: string(name='Name', description='The name of the table level.', example='test'),
        parentId?: long(name='ParentId', description='The ancestor node ID.', example='122'),
        projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='123'),
        themeId?: long(name='ThemeId', description='The table theme ID.', example='123'),
      }
    ](name='ThemeList', description='The list of table levels.'),
    totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='10'),
  }(name='Data', description='The returned result.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='abcde'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListTableThemeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTableThemeResponseBody(name='body'),
}

/**
 * @summary Queries a list of table themes. This operation will be replaced soon. We recommend that you do not call this operation.
 *
 * @param request ListTableThemeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTableThemeResponse
 */
async function listTableThemeWithOptions(request: ListTableThemeRequest, runtime: Util.RuntimeOptions): ListTableThemeResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTableTheme',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of table themes. This operation will be replaced soon. We recommend that you do not call this operation.
 *
 * @param request ListTableThemeRequest
 * @return ListTableThemeResponse
 */
async function listTableTheme(request: ListTableThemeRequest): ListTableThemeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTableThemeWithOptions(request, runtime);
}

model ListTablesRequest {
  dataSourceType?: string(name='DataSourceType', description='The type of the data source. Valid values: ODPS, emr, mysql, holo, analyticdb_for_mysql, oracle, postgresql, sqlserver, clickhouse, and starrocks.

This parameter is required.', example='odps
emr
mysql
holo'),
  nextToken?: string(name='NextToken', description='Pagination information, which specifies the starting point of this read.', example='12222'),
  pageSize?: int32(name='PageSize', description='The number of entries displayed on each page. The default value is 10 and the maximum value is 100.', example='10'),
}

model ListTablesResponseBody = {
  data?: {
    nextToken?: string(name='NextToken', description='Pagination information, which specifies the starting point of the next read.', example='AAAAAVY3rYiv9VoUJQSiCitgjgSwg+byk0FIjirFkm4zfM4G0xYwM/FQvOhgrTHsCPIZ5yqXYu2NG6qRCRC52HvwbOA='),
    tableEntityList?: [ 
      {
        entityContent?: {
          dataSourceQualifiedName?: string(name='DataSourceQualifiedName', description='The unique identifier of the data source.', example='accountId:cn-shanghai:odps:project'),
          dataSourceUniqueId?: string(name='DataSourceUniqueId', description='The unique ID of the data source identifier.', example='e70f92239d491057f6a2563b545bdaf8cc6b537d9dc55ec84c55f7cfefg'),
          databaseName?: string(name='DatabaseName', description='The name of the database.', example='database'),
          instanceId?: string(name='InstanceId', description='The ID of the data source instance.', example='rm-uf6rn0123'),
          projectName?: string(name='ProjectName', description='The name of the ODPS project.', example='project'),
          tableName?: string(name='TableName', description='The name of the table.', example='table'),
        }(name='EntityContent', description='Table entity information.'),
        entityQualifiedName?: string(name='EntityQualifiedName', description='The unique identifier of the table entity.', example='maxcompute-table.project.table'),
      }
    ](name='TableEntityList', description='Entity array.'),
    total?: long(name='Total', description='The total number.', example='100'),
  }(name='Data', description='The returned data.'),
  requestId?: string(name='RequestId', description='The request ID.', example='E25887B7-579C-54A5-9C4F-83A0DE367DD'),
}

model ListTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTablesResponseBody(name='body'),
}

/**
 * @summary Obtains tables of different data source types within a tenant by page.
 *
 * @param request ListTablesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTablesResponse
 */
async function listTablesWithOptions(request: ListTablesRequest, runtime: Util.RuntimeOptions): ListTablesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTables',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Obtains tables of different data source types within a tenant by page.
 *
 * @param request ListTablesRequest
 * @return ListTablesResponse
 */
async function listTables(request: ListTablesRequest): ListTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTablesWithOptions(request, runtime);
}

model ListTopicsRequest {
  beginTime?: string(name='BeginTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-dd\\\\"T\\\\"HH:mm:ssZ format. The time must be in UTC.

This parameter is required.', example='2019-03-24T00:00:00+0800'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-dd\\\\"T\\\\"HH:mm:ssZ format. The time must be in UTC.

This parameter is required.', example='2019-03-25T23:00:00+0800'),
  instanceId?: long(name='InstanceId', description='The ID of the node instance that triggers the events. You can configure either this parameter or the NodeId parameter.', example='12345'),
  nodeId?: long(name='NodeId', description='The ID of the node that triggers the events. You can configure either this parameter or the InstanceId parameter.', example='1234'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the owner of the events.', example='952795****'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: 1 to 30. Default value: 1.

This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.

This parameter is required.', example='10'),
  topicStatuses?: string(name='TopicStatuses', description='The status of the events. Valid values: IGNORE, NEW, FIXING, and RECOVER. The value IGNORE indicates that the events are ignored. The value NEW indicates that the events are new events. The value FIXING indicates that the events are being processed. The value RECOVER indicates that the events are processed. You can specify multiple states. Separate them with commas (,).', example='IGNORE,NEW,FIXING,RECOVER'),
  topicTypes?: string(name='TopicTypes', description='The types of the events. Valid values: SLOW and ERROR. The value SLOW indicates that the running duration of the node in the current scheduling cycle is significantly longer than the average running duration of the node in previous scheduling cycles. The value ERROR indicates that the node fails to run. You can specify multiple types. Separate them with commas (,).', example='ERROR,SLOW'),
}

model ListTopicsResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    topics?: [ 
      {
        addTime?: long(name='AddTime', description='The timestamp when the event was found.', example='1553524393000'),
        fixTime?: long(name='FixTime', description='The timestamp when the event was processed.', example='1553508465000'),
        happenTime?: long(name='HappenTime', description='The timestamp when the event occurred. A time difference may exist between the time when the event occurred and the time when the event was found.', example='1553508465000'),
        instanceId?: long(name='InstanceId', description='The ID of the node instance that triggers the event.', example='12345'),
        nodeId?: long(name='NodeId', description='The ID of the node that triggers the event.', example='1234'),
        nodeName?: string(name='NodeName', description='The name of the node.', example='Node Name'),
        nodeOwner?: string(name='NodeOwner', description='The ID of the Alibaba Cloud account that is used by the node owner.', example='952795****'),
        projectId?: long(name='ProjectId', description='The ID of the workspace to which the node belongs.', example='1234'),
        topicId?: long(name='TopicId', description='The ID of the event.', example='1234'),
        topicName?: string(name='TopicName', description='The name of the event.', example='1234 Error'),
        topicStatus?: string(name='TopicStatus', description='The status of the event. Valid values: IGNORE, NEW, FIXING, and RECOVER. The value IGNORE indicates that the event is ignored. The value NEW indicates that the event is a new event. The value FIXING indicates that the event is being processed. The value RECOVER indicates that the event is processed.', example='NEW'),
        topicType?: string(name='TopicType', description='The type of the event. Valid values: SLOW and ERROR. The value SLOW indicates that the running duration of the node in the current scheduling cycle is significantly longer than the average running duration of the node in previous scheduling cycles. The value ERROR indicates that the node fails to run.', example='ERROR'),
      }
    ](name='Topics', description='The events returned.'),
    totalCount?: int32(name='TotalCount', description='The total number of the events returned.', example='100'),
  }(name='Data', description='The information about the events returned.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListTopicsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTopicsResponseBody(name='body'),
}

/**
 * @summary Queries events.
 *
 * @param request ListTopicsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTopicsResponse
 */
async function listTopicsWithOptions(request: ListTopicsRequest, runtime: Util.RuntimeOptions): ListTopicsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.beginTime)) {
    body['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.topicStatuses)) {
    body['TopicStatuses'] = request.topicStatuses;
  }
  if (!Util.isUnset(request.topicTypes)) {
    body['TopicTypes'] = request.topicTypes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListTopics',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries events.
 *
 * @param request ListTopicsRequest
 * @return ListTopicsResponse
 */
async function listTopics(request: ListTopicsRequest): ListTopicsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTopicsWithOptions(request, runtime);
}

model MountDirectoryRequest {
  targetId?: string(name='TargetId', description='The ID of the directory that you want to add to the left-side navigation pane of DataAnalysis. This parameter is used together with the TargetType parameter. For example, if you set the TargetType parameter to META_ALBUM, you must set the TargetId parameter to the ID of the related data album. You can call the [ListMetaCollections](https://help.aliyun.com/document_detail/469938.html) operation to obtain the ID of the data album. The ID is indicated by the QualifiedName parameter.', example='album.339'),
  targetType?: string(name='TargetType', description='The type of the directory that you want to add to the left-side navigation pane of DataAnalysis. Example: META_ALBUM, which indicates the data album.', example='META_ALBUM'),
  targetUserId?: string(name='TargetUserId', description='The ID of the user in the tenant.

*   If you do not configure TargetUserId, the specified directory belongs to you.
*   If you configure TargetUserId, the specified directory belongs to the user specified by using TargetUserId.', example='1234567890'),
}

model MountDirectoryResponseBody = {
  data?: int32(name='Data', description='The number of directories that are added. Valid values:

*   0: No directories are added. The left-side navigation pane may contain the specified directory.
*   1: One directory is added.', example='1'),
  errorCode?: string(name='ErrorCode', description='The error code. The value 200 indicates that the task is successful.', example='200'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to troubleshoot issues.', example='C27D4FB9-C59B-5E17-BD6C-1099B9D6A381'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model MountDirectoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MountDirectoryResponseBody(name='body'),
}

/**
 * @summary Adds a directory to the left-side navigation pane of DataAnalysis.
 *
 * @param request MountDirectoryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return MountDirectoryResponse
 */
async function mountDirectoryWithOptions(request: MountDirectoryRequest, runtime: Util.RuntimeOptions): MountDirectoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.targetId)) {
    body['TargetId'] = request.targetId;
  }
  if (!Util.isUnset(request.targetType)) {
    body['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.targetUserId)) {
    body['TargetUserId'] = request.targetUserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'MountDirectory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Adds a directory to the left-side navigation pane of DataAnalysis.
 *
 * @param request MountDirectoryRequest
 * @return MountDirectoryResponse
 */
async function mountDirectory(request: MountDirectoryRequest): MountDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return mountDirectoryWithOptions(request, runtime);
}

model OfflineNodeRequest {
  nodeId?: long(name='NodeId', description='The node ID. You can call the [ListNodes](https://help.aliyun.com/document_detail/173979.html) operation to obtain the node ID.

This parameter is required.', example='1234'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can call the [ListProjects](https://help.aliyun.com/document_detail/178393.html) operation to obtain the ID.

This parameter is required.', example='9527'),
}

model OfflineNodeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the request ID to query logs and troubleshoot issues.', example='E6F0DBDD-5AD****'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model OfflineNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OfflineNodeResponseBody(name='body'),
}

/**
 * @summary Undeploys a node.
 *
 * @param request OfflineNodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return OfflineNodeResponse
 */
async function offlineNodeWithOptions(request: OfflineNodeRequest, runtime: Util.RuntimeOptions): OfflineNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'OfflineNode',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Undeploys a node.
 *
 * @param request OfflineNodeRequest
 * @return OfflineNodeResponse
 */
async function offlineNode(request: OfflineNodeRequest): OfflineNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return offlineNodeWithOptions(request, runtime);
}

model PublishDataServiceApiRequest {
  apiId?: long(name='ApiId', description='The API ID.

This parameter is required.', example='10000'),
  projectId?: long(name='ProjectId', description='The workspace ID.

This parameter is required.', example='10001'),
  tenantId?: long(name='TenantId', description='The tenant ID. To obtain the tenant ID, perform the following steps: Log on to the [DataWorks console](https://workbench.data.aliyun.com/console). Find your workspace and go to the DataStudio page. On the DataStudio page, click the logon username in the upper-right corner and click User Info in the Menu section.', example='10002'),
}

model PublishDataServiceApiResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the API was published.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model PublishDataServiceApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishDataServiceApiResponseBody(name='body'),
}

/**
 * @summary Publishes an API.
 *
 * @param request PublishDataServiceApiRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PublishDataServiceApiResponse
 */
async function publishDataServiceApiWithOptions(request: PublishDataServiceApiRequest, runtime: Util.RuntimeOptions): PublishDataServiceApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PublishDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Publishes an API.
 *
 * @param request PublishDataServiceApiRequest
 * @return PublishDataServiceApiResponse
 */
async function publishDataServiceApi(request: PublishDataServiceApiRequest): PublishDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishDataServiceApiWithOptions(request, runtime);
}

model QueryDISyncTaskConfigProcessResultRequest {
  asyncProcessId?: long(name='AsyncProcessId', description='The asynchronous thread ID. You can call the [GenerateDISyncTaskConfigForCreating](https://help.aliyun.com/document_detail/383463.html) or [GenerateDISyncTaskConfigForUpdating](https://help.aliyun.com/document_detail/383464.html) operation to obtain the ID.

*   The GenerateDISyncTaskConfigForCreating operation is used to generate the ID of the asynchronous thread that is used to create a real-time synchronization task in Data Integration.
*   The GenerateDISyncTaskConfigForUpdating operation is used to generate the ID of the asynchronous thread that is used to update a real-time synchronization task in Data Integration.

This parameter is required.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
  taskType?: string(name='TaskType', description='The type of the object that you want to create or update in Data Integration in asynchronous mode. Valid values:

*   DI_REALTIME: real-time synchronization task
*   DI_SOLUTION: synchronization solution DataWorks allows you to create or update real-time synchronization tasks and synchronization solutions in Data Integration only in asynchronous mode.

Valid values:

*   DI_OFFLINE
*   DI_REALTIME
*   DI_SOLUTION

This parameter is required.', example='DI_REALTIME'),
}

model QueryDISyncTaskConfigProcessResultResponseBody = {
  data?: {
    message?: string(name='Message', description='The reason why the parameters fail to be obtained. If the parameters are obtained, the value null is returned.', example='fileId:[100] is invalid.'),
    status?: string(name='Status', description='Indicates whether the parameters are obtained. Valid values:

*   success: The parameters are obtained.
*   fail: The parameters fail to be obtained. You can view the reason for the failure and troubleshoot the issue based on the reason.', example='success'),
    taskContent?: string(name='TaskContent', description='The parameters that are obtained. The parameters are used as the request parameters of the [CreateDISyncTask](https://help.aliyun.com/document_detail/278725.html) or [UpdateDISyncTask](https://help.aliyun.com/document_detail/289109.html) operation to create or update a real-time synchronization task in Data Integration.', example='{"extend":{"mode":"migration_holo","resourceGroup":"280749","name":"h"},"type":"job","steps":[{"stepType":"mysql","parameter":{"connection":[{"datasourceType":"mysql","datasource":"mm","selectedTables":[{"schema":[{"tableInfos":[{"enable":true,"table":"m_v1","tableName":"m_v1"}]}],"dbName":"m"}]}]},"name":"reader","category":"reader"},{"stepType":"holo","parameter":{"datasource":"h","tableMappingRule":{"datasource":[{"tableRule":[{"srcTable":"m_v1","mergeIntoCycleType":"DEFAULT","hourDeltaEnable":false,"dstTable":"m.m_v1","dayDeltaEnable":false,"primaryKeyInfo":{"column":["id"],"type":"pk"},"dstCreateTableInfo":{"indexType":"m_v1","dataColumn":[{"columnSize":0,"name":"id","index":0,"comment":"","newDigit":0,"type":"int8","digit":0,"primaryKey":true}],"schemaName":"m","tableName":"m_v1"},"srcDbName":"m"],"srcDatasourceName":"mm"}],"totalTableMapping":1},"writeMode":"replay"},"name":"writer","category":"writer"}],"version":"2.0","order":{"hops":[{"from":"reader","to":"writer"}]}}'),
  }(name='Data', description='The information returned for the parameters that are asynchronously generated and used to create or update a real-time synchronization task in Data Integration.'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model QueryDISyncTaskConfigProcessResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDISyncTaskConfigProcessResultResponseBody(name='body'),
}

/**
 * @summary Queries the execution results of an asynchronous task.
 *
 * @description DataWorks allows you to call only the [CreateDISyncTask](https://help.aliyun.com/document_detail/278725.html) operation to create a batch synchronization task or the [UpdateDISyncTask](https://help.aliyun.com/document_detail/289109.html) operation to update a batch synchronization task in Data Integration. To create or update a real-time synchronization task, you must first call the [GenerateDISyncTaskConfigForCreating](https://help.aliyun.com/document_detail/383463.html) or [GenerateDISyncTaskConfigForUpdating](https://help.aliyun.com/document_detail/383464.html) operation to obtain the ID of an asynchronous thread and call the [QueryDISyncTaskConfigProcessResult](https://help.aliyun.com/document_detail/383465.html) operation to obtain the asynchronously generated parameters based on the ID. Then, you can call the CreateDISyncTask or UpdateDISyncTask operation and use the parameters as request parameters to create or update a real-time synchronization task. DataWorks allows you to create or update real-time synchronization tasks in Data Integration only in asynchronous mode.
 *
 * @param request QueryDISyncTaskConfigProcessResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryDISyncTaskConfigProcessResultResponse
 */
async function queryDISyncTaskConfigProcessResultWithOptions(request: QueryDISyncTaskConfigProcessResultRequest, runtime: Util.RuntimeOptions): QueryDISyncTaskConfigProcessResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asyncProcessId)) {
    query['AsyncProcessId'] = request.asyncProcessId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDISyncTaskConfigProcessResult',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the execution results of an asynchronous task.
 *
 * @description DataWorks allows you to call only the [CreateDISyncTask](https://help.aliyun.com/document_detail/278725.html) operation to create a batch synchronization task or the [UpdateDISyncTask](https://help.aliyun.com/document_detail/289109.html) operation to update a batch synchronization task in Data Integration. To create or update a real-time synchronization task, you must first call the [GenerateDISyncTaskConfigForCreating](https://help.aliyun.com/document_detail/383463.html) or [GenerateDISyncTaskConfigForUpdating](https://help.aliyun.com/document_detail/383464.html) operation to obtain the ID of an asynchronous thread and call the [QueryDISyncTaskConfigProcessResult](https://help.aliyun.com/document_detail/383465.html) operation to obtain the asynchronously generated parameters based on the ID. Then, you can call the CreateDISyncTask or UpdateDISyncTask operation and use the parameters as request parameters to create or update a real-time synchronization task. DataWorks allows you to create or update real-time synchronization tasks in Data Integration only in asynchronous mode.
 *
 * @param request QueryDISyncTaskConfigProcessResultRequest
 * @return QueryDISyncTaskConfigProcessResultResponse
 */
async function queryDISyncTaskConfigProcessResult(request: QueryDISyncTaskConfigProcessResultRequest): QueryDISyncTaskConfigProcessResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDISyncTaskConfigProcessResultWithOptions(request, runtime);
}

model QueryDefaultTemplateRequest {
  tenantId?: string(name='TenantId', description='The tenant ID. To obtain the tenant ID, perform the following steps: Log on to the [DataWorks console](https://workbench.data.aliyun.com/console). Find your workspace and go to the DataStudio page. On the DataStudio page, click the logon username in the upper-right corner and click User Info in the Menu section.

This parameter is required.', example='10241024'),
}

model QueryDefaultTemplateResponseBody = {
  data?: any(name='Data', description='The returned data about the default data category and data sensitivity level template. The data is in the JSON array format.

This parameter is required.', example='[{"gmtModified":1709022365000,"fileName":"default file","isDelete":false,"isDefaultTemplate":true}]'),
  errorCode?: string(name='ErrorCode', description='The error code.

This parameter is required.', example='9990030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.

This parameter is required.', example='Parameter error'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.

This parameter is required.', example='400'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.

This parameter is required.', example='102400001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false

This parameter is required.', example='true'),
}

model QueryDefaultTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDefaultTemplateResponseBody(name='body'),
}

/**
 * @summary Queries the default data category and data sensitivity level template defined by Data Security Guard.
 *
 * @param request QueryDefaultTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryDefaultTemplateResponse
 */
async function queryDefaultTemplateWithOptions(request: QueryDefaultTemplateRequest, runtime: Util.RuntimeOptions): QueryDefaultTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryDefaultTemplate',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the default data category and data sensitivity level template defined by Data Security Guard.
 *
 * @param request QueryDefaultTemplateRequest
 * @return QueryDefaultTemplateResponse
 */
async function queryDefaultTemplate(request: QueryDefaultTemplateRequest): QueryDefaultTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDefaultTemplateWithOptions(request, runtime);
}

model QueryPublicModelEngineRequest {
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='1234'),
  text?: string(name='Text', description='The FML statement that is used to query information about objects that are created in Data Modeling. For more information, see [Use FML statements to configure and manage data tables](https://help.aliyun.com/document_detail/298128.html). Only SHOW statements are supported.

This parameter is required.', example='show dim tables'),
}

model QueryPublicModelEngineResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4CFB2DED-7D9B-4C42-B4AA-CFF4991DFFF4'),
  returnValue?: [  map[string]any ](name='ReturnValue', description='The returned information about objects.'),
}

model QueryPublicModelEngineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryPublicModelEngineResponseBody(name='body'),
}

/**
 * @summary Queries information about objects that are created in Data Modeling by using fast modeling language (FML) statements.
 *
 * @description *   Each time you call this API operation, you must use FML statements to query information about objects that are created in Data Modeling.
 * *   The information about the objects can be queried by page, except for data layers, business processes, and data domains. You can add an offset to the end of an FML statement. The num LIMIT num statement specifies the offset when the information about the objects is queried, and the number of pages to return each time. The offset value must be a multiple of the number of pages.
 * *   A maximum of 1,000 entries can be returned each time you call this API operation.
 *
 * @param request QueryPublicModelEngineRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryPublicModelEngineResponse
 */
async function queryPublicModelEngineWithOptions(request: QueryPublicModelEngineRequest, runtime: Util.RuntimeOptions): QueryPublicModelEngineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryPublicModelEngine',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries information about objects that are created in Data Modeling by using fast modeling language (FML) statements.
 *
 * @description *   Each time you call this API operation, you must use FML statements to query information about objects that are created in Data Modeling.
 * *   The information about the objects can be queried by page, except for data layers, business processes, and data domains. You can add an offset to the end of an FML statement. The num LIMIT num statement specifies the offset when the information about the objects is queried, and the number of pages to return each time. The offset value must be a multiple of the number of pages.
 * *   A maximum of 1,000 entries can be returned each time you call this API operation.
 *
 * @param request QueryPublicModelEngineRequest
 * @return QueryPublicModelEngineResponse
 */
async function queryPublicModelEngine(request: QueryPublicModelEngineRequest): QueryPublicModelEngineResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPublicModelEngineWithOptions(request, runtime);
}

model QueryRecognizeDataByRuleTypeRequest {
  recognizeRulesType?: string(name='RecognizeRulesType', description='The type of a sensitive data identification rule. You can call the [QueryRecognizeRulesType](https://help.aliyun.com/document_detail/2746905.html) operation to obtain the type of the rule.

*   1: regular expression
*   2: built-in rule
*   3: sample library
*   4: self-generated data identification model

This parameter is required.', example='2'),
  tenantId?: string(name='TenantId', description='The tenant ID. To obtain the tenant ID, perform the following steps: Log on to the [DataWorks console](https://workbench.data.aliyun.com/console). Find your workspace and go to the DataStudio page. On the DataStudio page, click the logon username in the upper-right corner and click User Info in the Menu section.

This parameter is required.', example='10241024'),
}

model QueryRecognizeDataByRuleTypeResponseBody = {
  data?: any(name='Data', description='The returned result in the JSON format.', example='[{"custom": false,       "name": "EducationDegree",       "localeName": "EducationDegree",       "templateJsonStr": "{&quot;_clazz&quot;:&quot;com.alipay.dsgclient.sdk.dsg.fastscan.engine.cond.EducationDegreeCond&quot;}",       "desc": ""}]'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='9990030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Missing parameter'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='10000001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model QueryRecognizeDataByRuleTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryRecognizeDataByRuleTypeResponseBody(name='body'),
}

/**
 * @summary Queries the type of a sensitive data identification rule.
 *
 * @param request QueryRecognizeDataByRuleTypeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryRecognizeDataByRuleTypeResponse
 */
async function queryRecognizeDataByRuleTypeWithOptions(request: QueryRecognizeDataByRuleTypeRequest, runtime: Util.RuntimeOptions): QueryRecognizeDataByRuleTypeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.recognizeRulesType)) {
    body['RecognizeRulesType'] = request.recognizeRulesType;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryRecognizeDataByRuleType',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the type of a sensitive data identification rule.
 *
 * @param request QueryRecognizeDataByRuleTypeRequest
 * @return QueryRecognizeDataByRuleTypeResponse
 */
async function queryRecognizeDataByRuleType(request: QueryRecognizeDataByRuleTypeRequest): QueryRecognizeDataByRuleTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRecognizeDataByRuleTypeWithOptions(request, runtime);
}

model QueryRecognizeRuleDetailRequest {
  sensitiveName?: string(name='SensitiveName', description='The name of the sensitive field. To obtain the name of the sensitive field, call the [QuerySensNodeInfo](https://help.aliyun.com/document_detail/2747189.html) operation or log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Data Category and Sensitivity Level page.

This parameter is required.', example='Name'),
  tenantId?: string(name='TenantId', description='The tenant ID. To obtain the tenant ID, perform the following steps: Log on to the [DataWorks console](https://workbench.data.aliyun.com/console). Find your workspace and go to the DataStudio page. On the DataStudio page, click the logon username in the upper-right corner and click User Info in the Menu section.

This parameter is required.', example='10241024'),
}

model QueryRecognizeRuleDetailResponseBody = {
  data?: any(name='Data', description='The details of the sensitive field in the JSON format.', example='{"nodeName":"basic unit overview","gmtModified":1709017449000,"hitThreshold":30,"sensitiveName":"mobile-yinni","templateId":"8222abeb-9784-4417-b420-0322926d5cbf","recognizeRulesType":2,"delete":false,"bydAccuracy":1,"colScan":"," defineType ":1,": ydAccuracy ":{" contentRule ":))," operationType ":0}," nodeParent ":" unit/unit basic information/unit basic overview "," level ":6," keyRuleId ":" 228248921215042mobile-yinni "," isDelete ":false," levelName ":" 6level "," sensitive ":false," operationType ":0," sourceName ": dsg-test-zuoyue","nodeId":"bea2fc81-90c9-45f3-b7a9-26d534208a0d","status":1}'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='9990030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Missing parameter'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='10000001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

*   true
*   false', example='true'),
}

model QueryRecognizeRuleDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryRecognizeRuleDetailResponseBody(name='body'),
}

/**
 * @summary Queries the details of a specified sensitive field in Data Security Guard.
 *
 * @param request QueryRecognizeRuleDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryRecognizeRuleDetailResponse
 */
async function queryRecognizeRuleDetailWithOptions(request: QueryRecognizeRuleDetailRequest, runtime: Util.RuntimeOptions): QueryRecognizeRuleDetailResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.sensitiveName)) {
    body['SensitiveName'] = request.sensitiveName;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryRecognizeRuleDetail',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the details of a specified sensitive field in Data Security Guard.
 *
 * @param request QueryRecognizeRuleDetailRequest
 * @return QueryRecognizeRuleDetailResponse
 */
async function queryRecognizeRuleDetail(request: QueryRecognizeRuleDetailRequest): QueryRecognizeRuleDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRecognizeRuleDetailWithOptions(request, runtime);
}

model QueryRecognizeRulesTypeResponseBody = {
  data?: any(name='Data', description='The returned data about the built-in sensitive data identification rule that is used to configure a sensitive field. The data is in the JSON format.', example='{   "HttpStatusCode": 200,   "Data": [     {       "Regular Expression": "1"     },     {       "Recognize Rule": "2"     },     {       "Sample Library": "3"     },     {       "Model": "4"     }   ],   "Success": true }'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='9990030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Missing parameter'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='10000001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model QueryRecognizeRulesTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryRecognizeRulesTypeResponseBody(name='body'),
}

/**
 * @summary Queries the built-in sensitive data identification rule that is used to configure a sensitive field.
 *
 * @param request QueryRecognizeRulesTypeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryRecognizeRulesTypeResponse
 */
async function queryRecognizeRulesTypeWithOptions(runtime: Util.RuntimeOptions): QueryRecognizeRulesTypeResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'QueryRecognizeRulesType',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the built-in sensitive data identification rule that is used to configure a sensitive field.
 *
 * @return QueryRecognizeRulesTypeResponse
 */
async function queryRecognizeRulesType(): QueryRecognizeRulesTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRecognizeRulesTypeWithOptions(runtime);
}

model QuerySensClassificationRequest {
  templateId?: string(name='TemplateId', description='The ID of the template defined by Data Security Guard. You can call the [QueryDefaultTemplate](https://help.aliyun.com/document_detail/2743948.html) operation to query the ID.

This parameter is required.', example='e1970541-6cf5-4d23-b101-d5b66f6e1024'),
  tenantId?: string(name='TenantId', description='The tenant ID. To obtain the tenant ID, perform the following steps: Log on to the [DataWorks console](https://workbench.data.aliyun.com/console). Find your workspace and go to the DataStudio page. On the DataStudio page, click the logon username in the upper-right corner and click User Info in the Menu section.

This parameter is required.', example='10241024'),
}

model QuerySensClassificationResponseBody = {
  data?: any(name='Data', description='The returned data about data categories. The data is in the JSON format.', example='[{         "nodeName": "teset1",         "sensitiveNotNull": true,         "nodeId": "1aac2e35-b437-486b-95c7-a5ae48371024",         "nodeOldId": "1aac2e35-b437-486b-95c7-a5ae48371024",         "parentId": "0"     }]'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='9990030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Missing parameter'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='400'),
  requestId?: string(name='RequestId', description='The request ID.', example='10000001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model QuerySensClassificationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySensClassificationResponseBody(name='body'),
}

/**
 * @summary Queries data categories.
 *
 * @param request QuerySensClassificationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySensClassificationResponse
 */
async function querySensClassificationWithOptions(request: QuerySensClassificationRequest, runtime: Util.RuntimeOptions): QuerySensClassificationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySensClassification',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries data categories.
 *
 * @param request QuerySensClassificationRequest
 * @return QuerySensClassificationResponse
 */
async function querySensClassification(request: QuerySensClassificationRequest): QuerySensClassificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySensClassificationWithOptions(request, runtime);
}

model QuerySensLevelRequest {
  templateId?: string(name='TemplateId', description='The ID of the template defined by Data Security Guard. You can call the [QueryDefaultTemplate](https://help.aliyun.com/document_detail/2743948.html) operation to query the ID.

This parameter is required.', example='e1970541-6cf5-4d23-b101-d5b66f6e10af'),
  tenantId?: string(name='tenantId', description='The tenant ID. To obtain the tenant ID, perform the following steps: Log on to the [DataWorks console](https://workbench.data.aliyun.com/console). Find your workspace and go to the DataStudio page. On the DataStudio page, click the logon username in the upper-right corner and click User Info in the Menu section.

This parameter is required.', example='10241024'),
}

model QuerySensLevelResponseBody = {
  data?: any(name='Data', description='The returned data about data sensitivity levels. The data is in the JSON array format.', example='[{"level":1,"isSensitive":false,"levelName":"1level"},{"level":2,"isSensitive":false,"levelName":"2level"}]'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='9990030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Missing parameter'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='10000001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model QuerySensLevelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySensLevelResponseBody(name='body'),
}

/**
 * @summary Queries data sensitivity levels in Data Security Guard.
 *
 * @param request QuerySensLevelRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySensLevelResponse
 */
async function querySensLevelWithOptions(request: QuerySensLevelRequest, runtime: Util.RuntimeOptions): QuerySensLevelResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['tenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySensLevel',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries data sensitivity levels in Data Security Guard.
 *
 * @param request QuerySensLevelRequest
 * @return QuerySensLevelResponse
 */
async function querySensLevel(request: QuerySensLevelRequest): QuerySensLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySensLevelWithOptions(request, runtime);
}

model QuerySensNodeInfoRequest {
  nodeId?: string(name='NodeId', description='The ID of the data category. You can call the [QuerySensClassification](https://help.aliyun.com/document_detail/2746850.html) operation or log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Data Security Guard page to obtain the ID.', example='0ce67949-0810-400f-a24a-cc5ffafe1024'),
  pageNo?: int32(name='PageNo', description='The page number. Pages start from page 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 10 to 1000. The recommended number of entries per page ranges from 10 to 100.', example='10'),
  sensitiveName?: string(name='SensitiveName', description='The name of the sensitive field. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Data Security Guard page to obtain the name.', example='ID card'),
  templateId?: string(name='TemplateId', description='The ID of the data category and data sensitivity level template. You can call the [QueryDefaultTemplate](https://help.aliyun.com/document_detail/2743948.html) operation to query the ID.

This parameter is required.', example='e1970541-6cf5-4d23-b101-d5b66f6e1024'),
  tenantId?: string(name='TenantId', description='The tenant ID. To obtain the tenant ID, perform the following steps: Log on to the [DataWorks console](https://workbench.data.aliyun.com/console). Find your workspace and go to the DataStudio page. On the DataStudio page, click the logon username in the upper-right corner and click User Info in the Menu section.

This parameter is required.', example='10241024'),
  status?: int32(name='status', description='The status of the sensitive field. Valid values:

*   0: draft
*   1: published', example='0'),
}

model QuerySensNodeInfoResponseBody = {
  data?: any(name='Data', description='The returned business data in the JSON format.', example='{"success": true, "httpStatusCode": 200, "data": { "result": [ { "sensitiveName": "certificate expiration date", "sensitiveId": "fd4ff5a2-9537-43d1-8e4f-1d0b5ffaac12", "status": 0, "templateName": "built-in classification and grading template", "keyRuleId": "228248921215042 certificate expiration date"} ], "totalCount": 1, "currentPage": 1, "pageSize": 10 }, "requestId": 10000001}'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='9990030003'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Missing parameter'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='10000001'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model QuerySensNodeInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySensNodeInfoResponseBody(name='body'),
}

/**
 * @summary Queries sensitive data identification rules.
 *
 * @param request QuerySensNodeInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySensNodeInfoResponse
 */
async function querySensNodeInfoWithOptions(request: QuerySensNodeInfoRequest, runtime: Util.RuntimeOptions): QuerySensNodeInfoResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.pageNo)) {
    body['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sensitiveName)) {
    body['SensitiveName'] = request.sensitiveName;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySensNodeInfo',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries sensitive data identification rules.
 *
 * @param request QuerySensNodeInfoRequest
 * @return QuerySensNodeInfoResponse
 */
async function querySensNodeInfo(request: QuerySensNodeInfoRequest): QuerySensNodeInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySensNodeInfoWithOptions(request, runtime);
}

model RegisterLineageRelationRequest {
  lineageRelationRegisterVO?: LineageRelationRegisterVO(name='LineageRelationRegisterVO', description='The structure whose lineage you want to register to DataWorks.

This parameter is required.'),
}

model RegisterLineageRelationShrinkRequest {
  lineageRelationRegisterVOShrink?: string(name='LineageRelationRegisterVO', description='The structure whose lineage you want to register to DataWorks.

This parameter is required.'),
}

model RegisterLineageRelationResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='1010210001'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The entity of lineage not exist, xxx'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  lineageRelation?: {
    destEntityQualifiedName?: string(name='DestEntityQualifiedName', description='The unique identifier of the destination entity.', example='custom-report.month_stat_user'),
    relationshipGuid?: string(name='RelationshipGuid', description='The ID of the lineage between entities.', example='dfsldfdlsfdsaaaabbbb'),
    srcEntityQualifiedName?: string(name='SrcEntityQualifiedName', description='The unique identifier of the source entity.', example='maxcompute-table.project.table'),
  }(name='LineageRelation', description='The lineage.'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='EE50E05E-028C-182B-9xxx'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model RegisterLineageRelationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RegisterLineageRelationResponseBody(name='body'),
}

/**
 * @summary Registers the lineage between self-managed entities to DataWorks.
 *
 * @description This operation is in the trial phase. Users who need to call this operation can apply for it. The users can call this operation after the administrator adds the users to the trial list.
 *
 * @param tmpReq RegisterLineageRelationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RegisterLineageRelationResponse
 */
async function registerLineageRelationWithOptions(tmpReq: RegisterLineageRelationRequest, runtime: Util.RuntimeOptions): RegisterLineageRelationResponse {
  Util.validateModel(tmpReq);
  var request = new RegisterLineageRelationShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.lineageRelationRegisterVO)) {
    request.lineageRelationRegisterVOShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.lineageRelationRegisterVO, 'LineageRelationRegisterVO', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.lineageRelationRegisterVOShrink)) {
    body['LineageRelationRegisterVO'] = request.lineageRelationRegisterVOShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RegisterLineageRelation',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Registers the lineage between self-managed entities to DataWorks.
 *
 * @description This operation is in the trial phase. Users who need to call this operation can apply for it. The users can call this operation after the administrator adds the users to the trial list.
 *
 * @param request RegisterLineageRelationRequest
 * @return RegisterLineageRelationResponse
 */
async function registerLineageRelation(request: RegisterLineageRelationRequest): RegisterLineageRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerLineageRelationWithOptions(request, runtime);
}

model RemoveEntityTagsRequest {
  qualifiedName?: string(name='QualifiedName', description='The unique identifier of the entity. Example: maxcompute-table.projectA.tableA.

This parameter is required.', example='maxcompute-table.projectA.tableA'),
  tagKeys?: [ string ](name='TagKeys', description='The tag keys.

This parameter is required.'),
}

model RemoveEntityTagsShrinkRequest {
  qualifiedName?: string(name='QualifiedName', description='The unique identifier of the entity. Example: maxcompute-table.projectA.tableA.

This parameter is required.', example='maxcompute-table.projectA.tableA'),
  tagKeysShrink?: string(name='TagKeys', description='The tag keys.

This parameter is required.'),
}

model RemoveEntityTagsResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the call was successful. Valid values:

true\\\\
false', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='101011005'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Invalid.Entity.EntityTypeNotSupported'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-E****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

true\\\\
false', example='true'),
}

model RemoveEntityTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveEntityTagsResponseBody(name='body'),
}

/**
 * @summary Removes tags from an entity. Only entities of the maxcompute-table type are supported.
 *
 * @param tmpReq RemoveEntityTagsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveEntityTagsResponse
 */
async function removeEntityTagsWithOptions(tmpReq: RemoveEntityTagsRequest, runtime: Util.RuntimeOptions): RemoveEntityTagsResponse {
  Util.validateModel(tmpReq);
  var request = new RemoveEntityTagsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tagKeys)) {
    request.tagKeysShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tagKeys, 'TagKeys', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.qualifiedName)) {
    query['QualifiedName'] = request.qualifiedName;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tagKeysShrink)) {
    body['TagKeys'] = request.tagKeysShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RemoveEntityTags',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Removes tags from an entity. Only entities of the maxcompute-table type are supported.
 *
 * @param request RemoveEntityTagsRequest
 * @return RemoveEntityTagsResponse
 */
async function removeEntityTags(request: RemoveEntityTagsRequest): RemoveEntityTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeEntityTagsWithOptions(request, runtime);
}

model RemoveProjectMemberFromRoleRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.

This parameter is required.', example='27'),
  roleCode?: string(name='RoleCode', description='The code of the role in the DataWorks workspace. You can call the ListProjectRoles operation to query the codes of all roles in a DataWorks workspace. Valid values:

*   role_project_owner: workspace owner
*   role_project_admin: workspace administrator
*   role_project_dev: developer
*   role_project_pe: O\\\\&M engineer
*   role_project_deploy: deployment expert
*   role_project_guest: visitor
*   role_project_security: security administrator
*   role_project_tester: experiencer
*   role_project_erd: model designer

This parameter is required.', example='role_project_guest'),
  userId?: string(name='UserId', description='The user ID.

This parameter is required.', example='1234'),
}

model RemoveProjectMemberFromRoleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1AFAE64E-D1BE-432B-A9****'),
}

model RemoveProjectMemberFromRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveProjectMemberFromRoleResponseBody(name='body'),
}

/**
 * @summary Removes a role from a user in a DataWorks workspace.
 *
 * @param request RemoveProjectMemberFromRoleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveProjectMemberFromRoleResponse
 */
async function removeProjectMemberFromRoleWithOptions(request: RemoveProjectMemberFromRoleRequest, runtime: Util.RuntimeOptions): RemoveProjectMemberFromRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.roleCode)) {
    query['RoleCode'] = request.roleCode;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveProjectMemberFromRole',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Removes a role from a user in a DataWorks workspace.
 *
 * @param request RemoveProjectMemberFromRoleRequest
 * @return RemoveProjectMemberFromRoleResponse
 */
async function removeProjectMemberFromRole(request: RemoveProjectMemberFromRoleRequest): RemoveProjectMemberFromRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeProjectMemberFromRoleWithOptions(request, runtime);
}

model RestartInstanceRequest {
  instanceId?: long(name='InstanceId', description='The instance ID.

This parameter is required.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV.

This parameter is required.', example='PROD'),
}

model RestartInstanceResponseBody = {
  data?: boolean(name='Data', description='The data returned.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='q32ety****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model RestartInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestartInstanceResponseBody(name='body'),
}

/**
 * @summary Restarts an instance.
 *
 * @param request RestartInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RestartInstanceResponse
 */
async function restartInstanceWithOptions(request: RestartInstanceRequest, runtime: Util.RuntimeOptions): RestartInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RestartInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Restarts an instance.
 *
 * @param request RestartInstanceRequest
 * @return RestartInstanceResponse
 */
async function restartInstance(request: RestartInstanceRequest): RestartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartInstanceWithOptions(request, runtime);
}

model ResumeInstanceRequest {
  instanceId?: long(name='InstanceId', description='The instance ID.

This parameter is required.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV.

This parameter is required.', example='PROD'),
}

model ResumeInstanceResponseBody = {
  data?: boolean(name='Data', description='The result returned.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ResumeInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResumeInstanceResponseBody(name='body'),
}

/**
 * @summary Resumes a suspended instance.
 *
 * @param request ResumeInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ResumeInstanceResponse
 */
async function resumeInstanceWithOptions(request: ResumeInstanceRequest, runtime: Util.RuntimeOptions): ResumeInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ResumeInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Resumes a suspended instance.
 *
 * @param request ResumeInstanceRequest
 * @return ResumeInstanceResponse
 */
async function resumeInstance(request: ResumeInstanceRequest): ResumeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return resumeInstanceWithOptions(request, runtime);
}

model RevokeColumnPermissionRequest {
  columns?: string(name='Columns', description='The fields for which you want to revoke permissions from a user. Separate multiple fields with commas (,). You can revoke the permissions on the fields only in MaxCompute tables.

This parameter is required.', example='id,name'),
  maxComputeProjectName?: string(name='MaxComputeProjectName', description='The name of the MaxCompute project to which the fields belong. You can log on to the DataWorks console and go to the SettingCenter page to obtain the name of the MaxCompute project that you associate with the workspace.

This parameter is required.', example='aMaxcomputeProjectName'),
  revokeUserId?: string(name='RevokeUserId', description='The ID of the Alibaba Cloud account of the user from which you want to revoke permissions. You can log on to the DataWorks console and go to the Security Settings page to obtain the ID. You must specify either this parameter or the RevokeUserName parameter. If you specify both this parameter and the RevokeUserName parameter and the parameter values are different, the value of this parameter prevails.', example='267842600408993176'),
  revokeUserName?: string(name='RevokeUserName', description='The Alibaba Cloud account from which you want to revoke permissions. Specify this parameter in the format that is the same as the format of the account used to access the MaxCompute project.

*   If the account is an Alibaba Cloud account, the value is in the ALIYUN$+Account name format.
*   If the account is a RAM user, the value is in the RAM$+Account name format.

You must specify either this parameter or the RevokeUserId parameter. If you specify both this parameter and the RevokeUserId parameter and the parameter values are different, the value of the RevokeUserId parameter prevails.', example='RAM$dataworks_3h1_1:stsramuser'),
  tableName?: string(name='TableName', description='The name of the MaxCompute table to which the fields belong. You can call the [SearchMetaTables](https://help.aliyun.com/document_detail/173919.html) operation to query the name of the MaxCompute table.

This parameter is required.', example='aTableName'),
  workspaceId?: long(name='WorkspaceId', description='The ID of the DataWorks workspace with which the MaxCompute project is associated. You can log on to the DataWorks console and go to the Workspace page to obtain the ID.

This parameter is required.', example='12345'),
}

model RevokeColumnPermissionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1ec92159376****'),
  revokeSuccess?: boolean(name='RevokeSuccess', description='Indicates whether the permissions are revoked.', example='true'),
}

model RevokeColumnPermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeColumnPermissionResponseBody(name='body'),
}

/**
 * @summary Revokes permissions on table fields from a user.
 *
 * @param request RevokeColumnPermissionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RevokeColumnPermissionResponse
 */
async function revokeColumnPermissionWithOptions(request: RevokeColumnPermissionRequest, runtime: Util.RuntimeOptions): RevokeColumnPermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.columns)) {
    query['Columns'] = request.columns;
  }
  if (!Util.isUnset(request.maxComputeProjectName)) {
    query['MaxComputeProjectName'] = request.maxComputeProjectName;
  }
  if (!Util.isUnset(request.revokeUserId)) {
    query['RevokeUserId'] = request.revokeUserId;
  }
  if (!Util.isUnset(request.revokeUserName)) {
    query['RevokeUserName'] = request.revokeUserName;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeColumnPermission',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Revokes permissions on table fields from a user.
 *
 * @param request RevokeColumnPermissionRequest
 * @return RevokeColumnPermissionResponse
 */
async function revokeColumnPermission(request: RevokeColumnPermissionRequest): RevokeColumnPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeColumnPermissionWithOptions(request, runtime);
}

model RevokeTablePermissionRequest {
  actions?: string(name='Actions', description='The permissions that you want to revoke. Separate multiple permissions with commas (,). You can revoke only the SELECT, DESCRIBE, and DOWNLOAD permissions on MaxCompute tables.

This parameter is required.', example='Select,Describe'),
  maxComputeProjectName?: string(name='MaxComputeProjectName', description='The name of the MaxCompute project to which the table belongs. You can log on to the DataWorks console and go to the SettingCenter page to obtain the name of the MaxCompute project that you associate with the workspace.

This parameter is required.', example='aMaxcomputeProjectName'),
  revokeUserId?: string(name='RevokeUserId', description='The ID of the Alibaba Cloud account from which you want to revoke permissions. You can log on to the DataWorks console and go to the Security Settings page to obtain the ID. You must specify either this parameter or the RevokeUserName parameter. If you specify both this parameter and the RevokeUserName parameter and the parameter values are different, the value of this parameter prevails.', example='267842600408993176'),
  revokeUserName?: string(name='RevokeUserName', description='The Alibaba Cloud account from which you want to revoke permissions. Specify this parameter in the format that is the same as the format of the account used to access the MaxCompute project.

*   If the account is an Alibaba Cloud account, the value is in the ALIYUN$+Account name format.
*   If the account is a RAM user, the value is in the RAM$+Account name format.

You must specify either this parameter or the RevokeUserId parameter. If you specify both this parameter and the RevokeUserId parameter and the parameter values are different, the value of the RevokeUserId parameter prevails.', example='RAM$dataworks_3h1_1:stsramuser'),
  tableName?: string(name='TableName', description='The name of the MaxCompute table. You can call the [SearchMetaTables](https://help.aliyun.com/document_detail/173919.html) operation to query the name of the MaxCompute table.

This parameter is required.', example='aTableName'),
  workspaceId?: long(name='WorkspaceId', description='The ID of the DataWorks workspace with which the MaxCompute project is associated. You can log on to the DataWorks console and go to the Workspace page to obtain the ID.

This parameter is required.', example='12345'),
}

model RevokeTablePermissionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1ec92159376****'),
  revokeSuccess?: boolean(name='RevokeSuccess', description='Indicates whether the permissions are revoked.', example='true'),
}

model RevokeTablePermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeTablePermissionResponseBody(name='body'),
}

/**
 * @summary Revokes permissions on a table from a user.
 *
 * @param request RevokeTablePermissionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RevokeTablePermissionResponse
 */
async function revokeTablePermissionWithOptions(request: RevokeTablePermissionRequest, runtime: Util.RuntimeOptions): RevokeTablePermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actions)) {
    query['Actions'] = request.actions;
  }
  if (!Util.isUnset(request.maxComputeProjectName)) {
    query['MaxComputeProjectName'] = request.maxComputeProjectName;
  }
  if (!Util.isUnset(request.revokeUserId)) {
    query['RevokeUserId'] = request.revokeUserId;
  }
  if (!Util.isUnset(request.revokeUserName)) {
    query['RevokeUserName'] = request.revokeUserName;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeTablePermission',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Revokes permissions on a table from a user.
 *
 * @param request RevokeTablePermissionRequest
 * @return RevokeTablePermissionResponse
 */
async function revokeTablePermission(request: RevokeTablePermissionRequest): RevokeTablePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeTablePermissionWithOptions(request, runtime);
}

model RunCycleDagNodesRequest {
  alertNoticeType?: string(name='AlertNoticeType', description='The alert notification method. Valid values:

*   SMS
*   MAIL
*   SMS_MAIL', example='SMS'),
  alertType?: string(name='AlertType', description='The alert type. Valid values:

*   SUCCESS: An alert is generated when data backfill succeeds.
*   FAILURE: An alert is generated when data backfill fails.
*   SUCCESS_FAILURE: An alert is generated regardless of whether data backfill succeeds or fails.', example='FAILURE'),
  bizBeginTime?: string(name='BizBeginTime', description='The time when the node starts to run. This parameter is required only for auto triggered nodes that are scheduled by hour. Specify the value in the HH:mm:ss format. Valid values: 00:00:00 to 23:59:59.', example='00:00:00'),
  bizEndTime?: string(name='BizEndTime', description='The time when the node stops running. This parameter is required only for auto triggered nodes that are scheduled by hour. Specify the value in the HH:mm:ss format. Valid values: 00:00:00 to 23:59:59.', example='01:00:00'),
  concurrentRuns?: int32(name='ConcurrentRuns', description='The number of nodes that can run in parallel. Valid values: 2 to 10.', example='5'),
  endBizDate?: string(name='EndBizDate', description='The data timestamp at which data is no longer backfilled. Specify the value in the yyyy-MM-dd 00:00:00 format.

This parameter is required.', example='2020-05-21 00:00:00'),
  excludeNodeIds?: string(name='ExcludeNodeIds', description='The IDs of the nodes for which no data needs to be backfilled. The system generates dry-run instances for all these nodes. After these dry-run instances are scheduled, the statuses of these instances are directly set to successful, but the script is not run.', example='1234,123465'),
  includeNodeIds?: string(name='IncludeNodeIds', description='The ID of the node for which you want to backfill data. If you want to backfill data for multiple nodes, separate the IDs of the nodes with commas (,). You can call the [ListNodes](https://help.aliyun.com/document_detail/173979.html) operation to obtain the node ID.

This parameter is required.', example='74324,74325'),
  name?: string(name='Name', description='The name of the workflow.

This parameter is required.', example='xm_test'),
  nodeParams?: string(name='NodeParams', description='The parameters that need to be configured for the node. Set this parameter to a JSON string. The key indicates the ID of the node, and the value indicates the actual values of the parameters.', example='{74324:"a=123 b=456"}'),
  parallelism?: boolean(name='Parallelism', description='Specifies whether data can be backfilled for multiple nodes at the same time.

This parameter is required.', example='false'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV. The value PROD indicates the production environment, and the value DEV indicates the development environment.

This parameter is required.', example='PROD'),
  rootNodeId?: long(name='RootNodeId', description='The ID of the node for which data is first backfilled. You can call the [ListNodes](https://help.aliyun.com/document_detail/173979.html) operation to obtain the node ID.

This parameter is required.', example='1234'),
  startBizDate?: string(name='StartBizDate', description='The data timestamp at which data starts to be backfilled. Specify the value in the yyyy-MM-dd 00:00:00 format.

This parameter is required.', example='2020-05-20 00:00:00'),
  startFutureInstanceImmediately?: boolean(name='StartFutureInstanceImmediately', description='Specifies whether to immediately run an instance that is scheduled to run in the future. If you set this parameter to true, the instance that is scheduled to run in the future is run immediately. Otherwise, the instance is run as scheduled.', example='false'),
}

model RunCycleDagNodesResponseBody = {
  data?: [ long ](name='Data', description='The IDs of the nodes in the workflow. You can query instances based on the IDs.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can use the request ID to query logs and troubleshoot issues.', example='>E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model RunCycleDagNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunCycleDagNodesResponseBody(name='body'),
}

/**
 * @summary Creates a workflow to backfill data.
 *
 * @description For more information about data backfill, see [Backfill data](https://help.aliyun.com/document_detail/137937.html).
 *
 * @param request RunCycleDagNodesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RunCycleDagNodesResponse
 */
async function runCycleDagNodesWithOptions(request: RunCycleDagNodesRequest, runtime: Util.RuntimeOptions): RunCycleDagNodesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertNoticeType)) {
    body['AlertNoticeType'] = request.alertNoticeType;
  }
  if (!Util.isUnset(request.alertType)) {
    body['AlertType'] = request.alertType;
  }
  if (!Util.isUnset(request.bizBeginTime)) {
    body['BizBeginTime'] = request.bizBeginTime;
  }
  if (!Util.isUnset(request.bizEndTime)) {
    body['BizEndTime'] = request.bizEndTime;
  }
  if (!Util.isUnset(request.concurrentRuns)) {
    body['ConcurrentRuns'] = request.concurrentRuns;
  }
  if (!Util.isUnset(request.endBizDate)) {
    body['EndBizDate'] = request.endBizDate;
  }
  if (!Util.isUnset(request.excludeNodeIds)) {
    body['ExcludeNodeIds'] = request.excludeNodeIds;
  }
  if (!Util.isUnset(request.includeNodeIds)) {
    body['IncludeNodeIds'] = request.includeNodeIds;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.nodeParams)) {
    body['NodeParams'] = request.nodeParams;
  }
  if (!Util.isUnset(request.parallelism)) {
    body['Parallelism'] = request.parallelism;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.rootNodeId)) {
    body['RootNodeId'] = request.rootNodeId;
  }
  if (!Util.isUnset(request.startBizDate)) {
    body['StartBizDate'] = request.startBizDate;
  }
  if (!Util.isUnset(request.startFutureInstanceImmediately)) {
    body['StartFutureInstanceImmediately'] = request.startFutureInstanceImmediately;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunCycleDagNodes',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a workflow to backfill data.
 *
 * @description For more information about data backfill, see [Backfill data](https://help.aliyun.com/document_detail/137937.html).
 *
 * @param request RunCycleDagNodesRequest
 * @return RunCycleDagNodesResponse
 */
async function runCycleDagNodes(request: RunCycleDagNodesRequest): RunCycleDagNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return runCycleDagNodesWithOptions(request, runtime);
}

model RunManualDagNodesRequest {
  bizDate?: string(name='BizDate', description='The data timestamp. The value of the data timestamp must be one or more days before the current date. For example, if the current date is November 11, 2020, set the value to 2020-11-10 00:00:00 or earlier. Configure this parameter in the YYYY-MM-DD 00:00:00 format. The StartBizDate parameter is used together with the EndBizDate parameter. You can configure only the BizDate parameter or the StartBizDate and EndBizDate parameters.', example='2020-11-11 00:00:00'),
  dagParameters?: string(name='DagParameters', description='The parameters are synchronized to all the instances in the directed acyclic graph (DAG) of the workflow. If a workflow parameter specified in DagParameters is referenced as a scheduling parameter of a [node](https://help.aliyun.com/document_detail/147245.html), the value of the scheduling parameter is replaced with the value of the workflow parameter.', example='{"kaaaa": "vaaaaa", "kbbbb": "vbbbbb"}'),
  endBizDate?: string(name='EndBizDate', description='The end of the time range in which data generated needs to be processed. Configure this parameter in the yyyy-MM-dd HH:mm:ss format. The StartBizDate parameter is used together with the EndBizDate parameter. You can configure only the BizDate parameter or the StartBizDate and EndBizDate parameters.', example='2020-02-03 00:00:00'),
  excludeNodeIds?: string(name='ExcludeNodeIds', description='The IDs of the nodes that you do not need to run in the manually triggered workflow. DataWorks generates dry-run instances for all these nodes. After the dry-run instances are scheduled, the states of these instances are directly set to successful, but the scripts are not run. Separate multiple node IDs with commas (,). The ExcludeNodeIds parameter must be used together with the IncludeNodeIds parameter. This way, the settings of the ExcludeNodeIds parameter can take effect.', example='123,456'),
  flowName?: string(name='FlowName', description='The name of the manually triggered workflow.

This parameter is required.', example='test_workflow'),
  includeNodeIds?: string(name='IncludeNodeIds', description='The IDs of the nodes that you need to run in the manually triggered workflow. Separate multiple node IDs with commas (,).', example='74324,74325'),
  nodeParameters?: string(name='NodeParameters', description='The scheduling parameters of nodes in the manually triggered workflow. Configure NodeParameters in the following JSON format: {"\\\\<ID of a node in the manually triggered workflow>": "Scheduling parameter settings of the node, which are in the same format as the parameter settings in the Scheduling Parameter section of the Properties tab on the DataStudio page", "\\\\<ID of a node in the manually triggered workflow>": "Scheduling parameter settings of the node, which are in the same format as the parameter settings in the Scheduling Parameter section of the Properties tab on the DataStudio page"}.', example='{"20000123121": "key1=val2 key2=val2", "20000123124": "kkkk=vvvvv aaaa=bbbb"}'),
  projectEnv?: string(name='ProjectEnv', description='The environment type of Operation Center. Valid values: PROD and DEV. The value PROD indicates the production environment. The value DEV indicates the development environment.

This parameter is required.', example='PROD or DEV'),
  projectId?: long(name='ProjectId', description='The ID of the workspace to which the manually triggered workflow belongs.', example='123'),
  projectName?: string(name='ProjectName', description='The name of the workspace to which the manually triggered workflow belongs.

This parameter is required.', example='test_workspace'),
  startBizDate?: string(name='StartBizDate', description='The beginning of the time range in which data generated needs to be processed. Configure this parameter in the yyyy-MM-dd HH:mm:ss format. The StartBizDate parameter is used together with the EndBizDate parameter. You can configure only the BizDate parameter or the StartBizDate and EndBizDate parameters.', example='2020-02-02 00:00:00'),
}

model RunManualDagNodesResponseBody = {
  dagId?: long(name='DagId', description='The ID of the DAG for the manually triggered workflow. You can call an operation with this parameter as a request parameter to query the details and states of the nodes in the manually triggered workflow.', example='700000123123141'),
  requestId?: string(name='RequestId', description='The request ID.', example='AASFDFSDFG-DFSDF-DFSDFD-SDFSDF'),
}

model RunManualDagNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunManualDagNodesResponseBody(name='body'),
}

/**
 * @summary Runs nodes in a manually triggered workflow. Before you call this operation, make sure that the manually triggered workflow is committed and deployed. You can find a manually triggered workflow in Operation Center only after the manually triggered workflow is committed and deployed.
 *
 * @param request RunManualDagNodesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RunManualDagNodesResponse
 */
async function runManualDagNodesWithOptions(request: RunManualDagNodesRequest, runtime: Util.RuntimeOptions): RunManualDagNodesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizDate)) {
    body['BizDate'] = request.bizDate;
  }
  if (!Util.isUnset(request.dagParameters)) {
    body['DagParameters'] = request.dagParameters;
  }
  if (!Util.isUnset(request.endBizDate)) {
    body['EndBizDate'] = request.endBizDate;
  }
  if (!Util.isUnset(request.excludeNodeIds)) {
    body['ExcludeNodeIds'] = request.excludeNodeIds;
  }
  if (!Util.isUnset(request.flowName)) {
    body['FlowName'] = request.flowName;
  }
  if (!Util.isUnset(request.includeNodeIds)) {
    body['IncludeNodeIds'] = request.includeNodeIds;
  }
  if (!Util.isUnset(request.nodeParameters)) {
    body['NodeParameters'] = request.nodeParameters;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.startBizDate)) {
    body['StartBizDate'] = request.startBizDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunManualDagNodes',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Runs nodes in a manually triggered workflow. Before you call this operation, make sure that the manually triggered workflow is committed and deployed. You can find a manually triggered workflow in Operation Center only after the manually triggered workflow is committed and deployed.
 *
 * @param request RunManualDagNodesRequest
 * @return RunManualDagNodesResponse
 */
async function runManualDagNodes(request: RunManualDagNodesRequest): RunManualDagNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return runManualDagNodesWithOptions(request, runtime);
}

model RunSmokeTestRequest {
  bizdate?: string(name='Bizdate', description='The data timestamp.

This parameter is required.', example='2020-05-26 00:00:00'),
  name?: string(name='Name', description='The name of the workflow.

This parameter is required.', example='xm_create_test'),
  nodeId?: long(name='NodeId', description='The node ID. You can call the [ListNodes](https://help.aliyun.com/document_detail/173979.html) operation to query the ID.

This parameter is required.', example='1234'),
  nodeParams?: string(name='NodeParams', description='The parameters related to the node. Set this parameter to a JSON string. A key in the string indicates a parameter, and a value in the string indicates the value of the related parameter.', example='bizdate=$bizdate tbods=$tbods'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV. The value PROD indicates the production environment, and the value DEV indicates the development environment. A workspace in basic mode does not have a development environment. For more information, see [Differences between workspaces in basic mode and workspaces in standard mode](https://help.aliyun.com/document_detail/85772.html).

This parameter is required.', example='PROD'),
}

model RunSmokeTestResponseBody = {
  data?: long(name='Data', description='The workflow ID.', example='3333333'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='false'),
}

model RunSmokeTestResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunSmokeTestResponseBody(name='body'),
}

/**
 * @summary Creates a workflow to perform smoke testing.
 *
 * @param request RunSmokeTestRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RunSmokeTestResponse
 */
async function runSmokeTestWithOptions(request: RunSmokeTestRequest, runtime: Util.RuntimeOptions): RunSmokeTestResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.nodeParams)) {
    body['NodeParams'] = request.nodeParams;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunSmokeTest',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a workflow to perform smoke testing.
 *
 * @param request RunSmokeTestRequest
 * @return RunSmokeTestResponse
 */
async function runSmokeTest(request: RunSmokeTestRequest): RunSmokeTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return runSmokeTestWithOptions(request, runtime);
}

model RunTriggerNodeRequest {
  appId?: long(name='AppId', description='The ID of the DataWorks workspace to which the manually triggered node belongs. You can call the [ListProjects](https://help.aliyun.com/document_detail/178393.html) operation to query the ID.

This parameter is required.', example='10001'),
  bizDate?: long(name='BizDate', description='The data timestamp of the instance that is generated for the manually triggered node.

This parameter is required.', example='1606200230105'),
  cycleTime?: long(name='CycleTime', description='The scheduling time to run the manually triggered node. Set the value to a 13-digit timestamp in milliseconds.

This parameter is required.', example='1606200230105'),
  nodeId?: long(name='NodeId', description='The ID of the manually triggered node. You can call the [ListNodes](https://help.aliyun.com/document_detail/173979.html) operation to query the ID.

This parameter is required.', example='10000011'),
}

model RunTriggerNodeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='9BA675F1-F848-4752-A6E3-92ABA0616005'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model RunTriggerNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunTriggerNodeResponseBody(name='body'),
}

/**
 * @summary Runs a manually triggered node.
 *
 * @param request RunTriggerNodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RunTriggerNodeResponse
 */
async function runTriggerNodeWithOptions(request: RunTriggerNodeRequest, runtime: Util.RuntimeOptions): RunTriggerNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.bizDate)) {
    body['BizDate'] = request.bizDate;
  }
  if (!Util.isUnset(request.cycleTime)) {
    body['CycleTime'] = request.cycleTime;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunTriggerNode',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Runs a manually triggered node.
 *
 * @param request RunTriggerNodeRequest
 * @return RunTriggerNodeResponse
 */
async function runTriggerNode(request: RunTriggerNodeRequest): RunTriggerNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return runTriggerNodeWithOptions(request, runtime);
}

model SaveDataServiceApiTestResultRequest {
  apiId?: long(name='ApiId', description='The API ID. You can call the [ListDataServiceApis](https://help.aliyun.com/document_detail/174012.html) operation to obtain the ID.

This parameter is required.', example='417381955954827'),
  autoGenerate?: boolean(name='AutoGenerate', description='Specifies whether to use the test results generated by the system. If you do not configure the resultSample or failResultSample parameter, the test results generated by the system are used.', example='false'),
  failResultSample?: string(name='FailResultSample', description='The sample failure response of the API. This parameter is optional.', example='{"apiLog": null, "data": null, "errCode": 1108110622, "errMsg": "data Source query failed", "requestId": "0 bc14a **** 5902762031 ****"}'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the workspace ID.

This parameter is required.', example='10001'),
  resultSample?: string(name='ResultSample', description='The sample success response of the API. This parameter is optional.', example='{  "data": {    "totalNum": 0,    "pageSize": 10,    "rows": [],    "pageNum": 1  },  "errCode": 0,  "requestId": "0bc14a561678159140664515*****",  "errMsg": "success",  "apiLog": null}'),
}

model SaveDataServiceApiTestResultResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the test results are saved.', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model SaveDataServiceApiTestResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveDataServiceApiTestResultResponseBody(name='body'),
}

/**
 * @summary Saves the test results of an API.
 *
 * @param request SaveDataServiceApiTestResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SaveDataServiceApiTestResultResponse
 */
async function saveDataServiceApiTestResultWithOptions(request: SaveDataServiceApiTestResultRequest, runtime: Util.RuntimeOptions): SaveDataServiceApiTestResultResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.autoGenerate)) {
    body['AutoGenerate'] = request.autoGenerate;
  }
  if (!Util.isUnset(request.failResultSample)) {
    body['FailResultSample'] = request.failResultSample;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.resultSample)) {
    body['ResultSample'] = request.resultSample;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SaveDataServiceApiTestResult',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Saves the test results of an API.
 *
 * @param request SaveDataServiceApiTestResultRequest
 * @return SaveDataServiceApiTestResultResponse
 */
async function saveDataServiceApiTestResult(request: SaveDataServiceApiTestResultRequest): SaveDataServiceApiTestResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveDataServiceApiTestResultWithOptions(request, runtime);
}

model ScanSensitiveDataRequest {
  data?: string(name='Data', description='The data that you want to check.

This parameter is required.', example='13900001234'),
}

model ScanSensitiveDataResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
  sensitives?: map[string]any(name='Sensitives', description='The check result. sensDatas indicates the rules that are used to check the sensitive data. sensDatas includes the following parameters:

*   hitCount: the number of times that the sensitive data hits the rule.
*   ruleName: the name of the rule.'),
}

model ScanSensitiveDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ScanSensitiveDataResponseBody(name='body'),
}

/**
 * @summary Checks whether input data contains sensitive data.
 *
 * @param request ScanSensitiveDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ScanSensitiveDataResponse
 */
async function scanSensitiveDataWithOptions(request: ScanSensitiveDataRequest, runtime: Util.RuntimeOptions): ScanSensitiveDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ScanSensitiveData',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Checks whether input data contains sensitive data.
 *
 * @param request ScanSensitiveDataRequest
 * @return ScanSensitiveDataResponse
 */
async function scanSensitiveData(request: ScanSensitiveDataRequest): ScanSensitiveDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return scanSensitiveDataWithOptions(request, runtime);
}

model SearchMetaTablesRequest {
  appGuid?: string(name='AppGuid', description='The GUID of the workspace where the metatables reside.', example='odps.engine_name'),
  clusterId?: string(name='ClusterId', description='The ID of the EMR cluster. This parameter is required only if you set the DataSourceType parameter to emr.

You can log on to the [EMR console](https://emr.console.aliyun.com/?spm=a2c4g.11186623.0.0.965cc5c2GeiHet#/cn-hangzhou) to obtain the ID.', example='abc'),
  dataSourceType?: string(name='DataSourceType', description='The type of the data source. Valid values: odps and emr.', example='emr'),
  entityType?: int32(name='EntityType', description='The type of the metatables. Valid values: 0 and 1. The value 0 indicates that tables are queried. The value 1 indicates that views are queried. If you do not configure this parameter, all types of metatables are queried.', example='0'),
  keyword?: string(name='Keyword', description='The keyword based on which metatables are queried. During the query, the system tokenizes the names of metatables and matches the names with the keyword. If no name is matched, the value null is returned. By default, the system uses underscores (_) to tokenize the names.

This parameter is required.', example='test'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  schema?: string(name='Schema', description='The schema information of the table. You must configure this parameter if you enable the three-layer model of MaxCompute.', example='default', nullable=true),
}

model SearchMetaTablesResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        clusterId?: string(name='ClusterId', description='The ID of the EMR cluster.', example='abc'),
        databaseName?: string(name='DatabaseName', description='The name of the metadatabase.', example='abc'),
        entityType?: int32(name='EntityType', description='The type of the metatable. Valid values:

*   0: table
*   1: view', example='0'),
        envType?: int32(name='EnvType', description='The type of the environment. Valid values:

*   1: production environment
*   0: development environment', example='1'),
        ownerId?: string(name='OwnerId', description='The ID of the Alibaba Cloud account used by the workspace owner.', example='123'),
        projectId?: long(name='ProjectId', description='The ID of the workspace.', example='323'),
        projectName?: string(name='ProjectName', description='The name of the workspace.', example='test'),
        schema?: string(name='Schema', description='The schema information of the table. You must configure this parameter if you enable the three-layer model of MaxCompute.', example='default'),
        tableGuid?: string(name='TableGuid', description='The GUID of the metatable.', example='odps.engine_name.test_name'),
        tableName?: string(name='TableName', description='The name of the metatable.', example='test_name'),
        tenantId?: long(name='TenantId', description='The tenant ID.', example='12345'),
      }
    ](name='DataEntityList', description='The list of metatables.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: long(name='TotalCount', description='The total number of metatables.', example='100'),
  }(name='Data', description='The search results.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1ec92159376****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model SearchMetaTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchMetaTablesResponseBody(name='body'),
}

/**
 * @summary Queries metatables based on specific conditions.
 *
 * @description You can call this operation to query only metatables in a MaxCompute or E-MapReduce (EMR) compute engine.
 *
 * @param request SearchMetaTablesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SearchMetaTablesResponse
 */
async function searchMetaTablesWithOptions(request: SearchMetaTablesRequest, runtime: Util.RuntimeOptions): SearchMetaTablesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appGuid)) {
    query['AppGuid'] = request.appGuid;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.entityType)) {
    query['EntityType'] = request.entityType;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchMetaTables',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries metatables based on specific conditions.
 *
 * @description You can call this operation to query only metatables in a MaxCompute or E-MapReduce (EMR) compute engine.
 *
 * @param request SearchMetaTablesRequest
 * @return SearchMetaTablesResponse
 */
async function searchMetaTables(request: SearchMetaTablesRequest): SearchMetaTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchMetaTablesWithOptions(request, runtime);
}

model SearchNodesByOutputRequest {
  outputs?: string(name='Outputs', description='The output names of the node. If you specify multiple output names, separate them with commas (,).

This parameter is required.', example='aaaaa.1231412_out,bbbb.12313123_out'),
  projectEnv?: string(name='ProjectEnv', description='The environment of Operation Center. Valid values: PROD and DEV.

This parameter is required.', example='PROD'),
}

model SearchNodesByOutputResponseBody = {
  data?: map[string]any(name='Data', description='The map returned. The key in the map indicates an output name, and the value in the map indicates the information about the node that generates the output.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='SDFSDFSDF-asdfDFSDF-SDFSDf-SDfSFD'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model SearchNodesByOutputResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchNodesByOutputResponseBody(name='body'),
}

/**
 * @deprecated OpenAPI SearchNodesByOutput is deprecated
 *
 * @summary Queries a node based on the output.
 *
 * @param request SearchNodesByOutputRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SearchNodesByOutputResponse
 */
// Deprecated
async function searchNodesByOutputWithOptions(request: SearchNodesByOutputRequest, runtime: Util.RuntimeOptions): SearchNodesByOutputResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.outputs)) {
    body['Outputs'] = request.outputs;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SearchNodesByOutput',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @deprecated OpenAPI SearchNodesByOutput is deprecated
 *
 * @summary Queries a node based on the output.
 *
 * @param request SearchNodesByOutputRequest
 * @return SearchNodesByOutputResponse
 */
// Deprecated
async function searchNodesByOutput(request: SearchNodesByOutputRequest): SearchNodesByOutputResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchNodesByOutputWithOptions(request, runtime);
}

model SetDataSourceShareRequest {
  datasourceName?: string(name='DatasourceName', description='The name of the data source that you want to share.

This parameter is required.', example='mysql_name'),
  envType?: string(name='EnvType', description='The environment in which the data source is used. Valid values:

*   0: development environment
*   1: production environment', example='1'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace to which the data source belongs. You can call the [ListProjects](https://help.aliyun.com/document_detail/178393.html) operation to query the ID.

This parameter is required.', example='10000'),
  projectPermissions?: string(name='ProjectPermissions', description='The DataWorks workspace to which you want to share the data source. If you configure this parameter, all members of the specified DataWorks workspace can view and use the data source. The value of this parameter is a JSON array. Example: [{"projectId":1000,"permission":"WRITE","sharedName":"PX_DATAHUB1.shared_name"}], Parameter description:

*   projectId: the ID of the DataWorks workspace to which you want to share the data source.
*   permission: the mode in which the data source is shared. Valid values: READ and WRITE. The value READ indicates that all members of the specified workspace can read data from the data source, but cannot modify the data. The value WRITE indicates that all members of the specified workspace can modify the data in the data source.
*   sharedName: the name of the data source that you want to share.', example='[{"projectId":1000,"permission":"WRITE","sharedName":"PX_DATAHUB1.shared_name"}]'),
  userPermissions?: string(name='UserPermissions', description='The user to whom you want to share the data source. If you configure this parameter, the specified user can view or use the data source. The value of this parameter is a JSON array. Example: [{"projectId":10000,"users":[{"userId":"276184575345452131","permission":"WRITE"}],"sharedName":"PX_DATAHUB1.shared_name"}], Parameter description:

*   projectId: the ID of the DataWorks workspace. If you configure the UserPermissions parameter, the specified user can view or use the data source only in the specified DataWorks workspace.
*   userId: the ID of the user to whom you want to share the data source.
*   permission: the mode in which the data source is shared. Valid values: READ and WRITE. The value READ indicates that the specified user can read data from the data source, but cannot modify the data. The value WRITE indicates that the specified user can modify the data in the data source.
*   sharedName: the name of the data source that you want to share.

If the ProjectPermissions and UserPermissions parameters are both left empty, the specified data source is not shared to any DataWorks workspace or user. If neither of the parameters is left empty, both parameters take effect.', example='[{"projectId":10000,"users":[{"userId":"276184575345452131","permission":"WRITE"}],"sharedName":"PX_DATAHUB1.shared_name"}]'),
}

model SetDataSourceShareResponseBody = {
  data?: {
    message?: string(name='Message', description='The reason why the data source failed to be shared. If the data source is successfully shared, the value of this parameter is an empty string.', example='datasource is wrong'),
    status?: string(name='Status', description='Indicates whether the data source was shared. Valid values:

*   success.
*   fail. You can view the value of the Message parameter to identify the cause of the failure.', example='success'),
  }(name='Data', description='The information about the sharing operation.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model SetDataSourceShareResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDataSourceShareResponseBody(name='body'),
}

/**
 * @deprecated OpenAPI SetDataSourceShare is deprecated
 *
 * @summary Shares a data source to a specific DataWorks workspace or a specific user.
 *
 * @param request SetDataSourceShareRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetDataSourceShareResponse
 */
// Deprecated
async function setDataSourceShareWithOptions(request: SetDataSourceShareRequest, runtime: Util.RuntimeOptions): SetDataSourceShareResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasourceName)) {
    query['DatasourceName'] = request.datasourceName;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectPermissions)) {
    query['ProjectPermissions'] = request.projectPermissions;
  }
  if (!Util.isUnset(request.userPermissions)) {
    query['UserPermissions'] = request.userPermissions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDataSourceShare',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @deprecated OpenAPI SetDataSourceShare is deprecated
 *
 * @summary Shares a data source to a specific DataWorks workspace or a specific user.
 *
 * @param request SetDataSourceShareRequest
 * @return SetDataSourceShareResponse
 */
// Deprecated
async function setDataSourceShare(request: SetDataSourceShareRequest): SetDataSourceShareResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDataSourceShareWithOptions(request, runtime);
}

model SetEntityTagsRequest {
  qualifiedName?: string(name='QualifiedName', description='The unique identifier of the entity. Example: maxcompute-table.projectA.tableA.

This parameter is required.', example='maxcompute-table.projectA.tableA'),
  tags?: [
    UserEntityTag
  ](name='Tags', description='The tags.'),
}

model SetEntityTagsShrinkRequest {
  qualifiedName?: string(name='QualifiedName', description='The unique identifier of the entity. Example: maxcompute-table.projectA.tableA.

This parameter is required.', example='maxcompute-table.projectA.tableA'),
  tagsShrink?: string(name='Tags', description='The tags.'),
}

model SetEntityTagsResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the call was successful. Valid values:

true and false.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='101011005'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Invalid.Entity.EntityTypeNotSupported'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-E****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

true and false.', example='true'),
}

model SetEntityTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetEntityTagsResponseBody(name='body'),
}

/**
 * @summary Configures tags for an entity. Only entities of the maxcompute-table type are supported.
 *
 * @param tmpReq SetEntityTagsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetEntityTagsResponse
 */
async function setEntityTagsWithOptions(tmpReq: SetEntityTagsRequest, runtime: Util.RuntimeOptions): SetEntityTagsResponse {
  Util.validateModel(tmpReq);
  var request = new SetEntityTagsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.qualifiedName)) {
    query['QualifiedName'] = request.qualifiedName;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tagsShrink)) {
    body['Tags'] = request.tagsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SetEntityTags',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Configures tags for an entity. Only entities of the maxcompute-table type are supported.
 *
 * @param request SetEntityTagsRequest
 * @return SetEntityTagsResponse
 */
async function setEntityTags(request: SetEntityTagsRequest): SetEntityTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return setEntityTagsWithOptions(request, runtime);
}

model SetSuccessInstanceRequest {
  instanceId?: long(name='InstanceId', description='The instance ID.

This parameter is required.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV.

This parameter is required.', example='PROD'),
}

model SetSuccessInstanceResponseBody = {
  data?: boolean(name='Data', description='Indicates whether result details are returned.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model SetSuccessInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetSuccessInstanceResponseBody(name='body'),
}

/**
 * @summary Sets the state of a failed instance to successful.
 *
 * @param request SetSuccessInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetSuccessInstanceResponse
 */
async function setSuccessInstanceWithOptions(request: SetSuccessInstanceRequest, runtime: Util.RuntimeOptions): SetSuccessInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SetSuccessInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Sets the state of a failed instance to successful.
 *
 * @param request SetSuccessInstanceRequest
 * @return SetSuccessInstanceResponse
 */
async function setSuccessInstance(request: SetSuccessInstanceRequest): SetSuccessInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return setSuccessInstanceWithOptions(request, runtime);
}

model StartDIJobRequest {
  DIJobId?: long(name='DIJobId', description='The task ID.

This parameter is required.', example='11743'),
  forceToRerun?: boolean(name='ForceToRerun', description='Specifies whether to forcefully rerun all synchronization steps. If you do not configure this parameter, the system does not forcefully rerun the task.', example='true'),
  realtimeStartSettings?: {
    failoverSettings?: {
      interval?: long(name='Interval', description='The failover interval. Unit: minutes.', example='10'),
      upperLimit?: long(name='UpperLimit', description='The maximum number of failovers.', example='30'),
    }(name='FailoverSettings', description='The failover settings.'),
    startTime?: long(name='StartTime', description='The timestamp of the start offset. Unit: seconds. If you do not configure this parameter, the offset is not reset by default.', example='1671516776'),
  }(name='RealtimeStartSettings', description='The settings for the start.'),
}

model StartDIJobShrinkRequest {
  DIJobId?: long(name='DIJobId', description='The task ID.

This parameter is required.', example='11743'),
  forceToRerun?: boolean(name='ForceToRerun', description='Specifies whether to forcefully rerun all synchronization steps. If you do not configure this parameter, the system does not forcefully rerun the task.', example='true'),
  realtimeStartSettingsShrink?: string(name='RealtimeStartSettings', description='The settings for the start.'),
}

model StartDIJobResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='999431B2-6013-577F-B684-36F7433C753B'),
}

model StartDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartDIJobResponseBody(name='body'),
}

/**
 * @summary Starts a synchronization task of a new version. Only the following type of task is supported: real-time data synchronization from a MySQL database to Hologres.
 *
 * @param tmpReq StartDIJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartDIJobResponse
 */
async function startDIJobWithOptions(tmpReq: StartDIJobRequest, runtime: Util.RuntimeOptions): StartDIJobResponse {
  Util.validateModel(tmpReq);
  var request = new StartDIJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.realtimeStartSettings)) {
    request.realtimeStartSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.realtimeStartSettings, 'RealtimeStartSettings', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.DIJobId)) {
    body['DIJobId'] = request.DIJobId;
  }
  if (!Util.isUnset(request.forceToRerun)) {
    body['ForceToRerun'] = request.forceToRerun;
  }
  if (!Util.isUnset(request.realtimeStartSettingsShrink)) {
    body['RealtimeStartSettings'] = request.realtimeStartSettingsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StartDIJob',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Starts a synchronization task of a new version. Only the following type of task is supported: real-time data synchronization from a MySQL database to Hologres.
 *
 * @param request StartDIJobRequest
 * @return StartDIJobResponse
 */
async function startDIJob(request: StartDIJobRequest): StartDIJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDIJobWithOptions(request, runtime);
}

model StartDISyncInstanceRequest {
  fileId?: long(name='FileId', description='*   If you set TaskType to DI_REALTIME, set this parameter to the ID of the real-time synchronization task that you want to start.
*   If you set TaskType to DI_SOLUTION, set this parameter to the ID of the data synchronization solution that you want to start.

This parameter is required.', example='100'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the workspace ID. You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
  startParam?: string(name='StartParam', description='*   If you set TaskType to DI_REALTIME, the StartParam parameter specifies the startup parameters for the real-time synchronization task. The startup parameters include failover-related parameters, the parameter that specifies the number of dirty data records allowed, and the parameters in the data definition language (DDL) statements.
*   If you set TaskType to DI_SOLUTION, the StartParam parameter does not take effect.', example='{"failoverLimit":{"count":10,"interval":30},"errorLimit":{"record":0},"ddlMarkMap":{"RENAMECOLUMN":"WARNING","DROPTABLE":"WARNING","CREATETABLE":"IGNORE","MODIFYCOLUMN":"WARNING","TRUNCATETABLE":"NORMAL","DROPCOLUMN":"IGNORE","ADDCOLUMN":"NORMAL","RENAMETABLE":"CRITICAL"}}'),
  taskType?: string(name='TaskType', description='The type of the object that you want to start. Valid values:

*   DI_REALTIME: real-time synchronization task
*   DI_SOLUTION: data synchronization solution

This parameter is required.', example='DI_REALTIME'),
}

model StartDISyncInstanceResponseBody = {
  data?: {
    message?: string(name='Message', description='The reason why the real-time synchronization task or the data synchronization solution fails to be started.

If the real-time synchronization task or the data synchronization solution is started, the value null is returned.', example='fileId:[100] is invalid.'),
    status?: string(name='Status', description='Indicates whether the real-time synchronization task or the data synchronization solution is started. Valid values:

*   success: The real-time synchronization task or the data synchronization solution is started.
*   fail: The real-time synchronization task or the data synchronization solution fails to be started. You can troubleshoot the issue based on the provided cause.', example='success'),
  }(name='Data', description='The result returned for the start.'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model StartDISyncInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartDISyncInstanceResponseBody(name='body'),
}

/**
 * @summary Starts a real-time synchronization task or a synchronization solution.
 *
 * @param request StartDISyncInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartDISyncInstanceResponse
 */
async function startDISyncInstanceWithOptions(request: StartDISyncInstanceRequest, runtime: Util.RuntimeOptions): StartDISyncInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.startParam)) {
    query['StartParam'] = request.startParam;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartDISyncInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Starts a real-time synchronization task or a synchronization solution.
 *
 * @param request StartDISyncInstanceRequest
 * @return StartDISyncInstanceResponse
 */
async function startDISyncInstance(request: StartDISyncInstanceRequest): StartDISyncInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDISyncInstanceWithOptions(request, runtime);
}

model StartMigrationRequest {
  migrationId?: long(name='MigrationId', description='The migration package ID. You can call the [CreateImportMigration](https://help.aliyun.com/document_detail/206094.html) operation to query the ID of the import package and call the [CreateExportMigration](https://help.aliyun.com/document_detail/349325.html) operation to query the ID of the export package.

This parameter is required.', example='123456'),
  projectId?: long(name='ProjectId', description='The workspace ID. You can log on to the DataWorks console and go to the Workspace page to obtain the workspace ID.

This parameter is required.', example='123456'),
}

model StartMigrationResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the migration task is started. Valid values:

*   true: The migration task is started.
*   false: The migration task fails to be started.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='110001123445'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='test error msg'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='FSDFSDF-WERWER-XVCX-DSFSDF'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model StartMigrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartMigrationResponseBody(name='body'),
}

/**
 * @summary Starts a migration task.
 *
 * @param request StartMigrationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartMigrationResponse
 */
async function startMigrationWithOptions(request: StartMigrationRequest, runtime: Util.RuntimeOptions): StartMigrationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.migrationId)) {
    body['MigrationId'] = request.migrationId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StartMigration',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Starts a migration task.
 *
 * @param request StartMigrationRequest
 * @return StartMigrationResponse
 */
async function startMigration(request: StartMigrationRequest): StartMigrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return startMigrationWithOptions(request, runtime);
}

model StopDIJobRequest {
  DIJobId?: long(name='DIJobId', description='The task ID.

This parameter is required.', example='11668'),
}

model StopDIJobResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='92F778C7-8F00-53B1-AE1A-B3B17101247D'),
}

model StopDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopDIJobResponseBody(name='body'),
}

/**
 * @summary Stops a new-version synchronization task. The following type of synchronization task is supported: real-time synchronization of all data in a MySQL database to Hologres.
 *
 * @param request StopDIJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopDIJobResponse
 */
async function stopDIJobWithOptions(request: StopDIJobRequest, runtime: Util.RuntimeOptions): StopDIJobResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.DIJobId)) {
    body['DIJobId'] = request.DIJobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StopDIJob',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Stops a new-version synchronization task. The following type of synchronization task is supported: real-time synchronization of all data in a MySQL database to Hologres.
 *
 * @param request StopDIJobRequest
 * @return StopDIJobResponse
 */
async function stopDIJob(request: StopDIJobRequest): StopDIJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDIJobWithOptions(request, runtime);
}

model StopDISyncInstanceRequest {
  fileId?: long(name='FileId', description='The ID of the synchronization task. You can call the [ListFiles](https://help.aliyun.com/document_detail/173942.html) operation to query the ID.

This parameter is required.', example='100'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the workspace ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
  taskType?: string(name='TaskType', description='The type of the synchronization task that you want to stop. Set the value to DI_REALTIME.

DI_REALTIME indicates a real-time synchronization task.

This parameter is required.', example='DI_REALTIME'),
}

model StopDISyncInstanceResponseBody = {
  data?: {
    message?: string(name='Message', description='The reason why the synchronization task fails to be stopped.

If the synchronization task is stopped, the value null is returned.', example='fileId:[100] is invalid.'),
    status?: string(name='Status', description='Indicates whether the synchronization task is stopped. Valid values:

*   success
*   fail', example='success'),
  }(name='Data', description='The information returned for the synchronization task.'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model StopDISyncInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopDISyncInstanceResponseBody(name='body'),
}

/**
 * @summary Stops a real-time synchronization task.
 *
 * @param request StopDISyncInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopDISyncInstanceResponse
 */
async function stopDISyncInstanceWithOptions(request: StopDISyncInstanceRequest, runtime: Util.RuntimeOptions): StopDISyncInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopDISyncInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Stops a real-time synchronization task.
 *
 * @param request StopDISyncInstanceRequest
 * @return StopDISyncInstanceResponse
 */
async function stopDISyncInstance(request: StopDISyncInstanceRequest): StopDISyncInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDISyncInstanceWithOptions(request, runtime);
}

model StopInstanceRequest {
  instanceId?: long(name='InstanceId', description='The instance ID. You can call the [ListInstances](https://help.aliyun.com/document_detail/173982.html) operation to obtain the ID.

This parameter is required.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV.

This parameter is required.', example='PROD'),
}

model StopInstanceResponseBody = {
  data?: boolean(name='Data', description='The result returned.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model StopInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopInstanceResponseBody(name='body'),
}

/**
 * @summary Terminates an instance.
 *
 * @param request StopInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopInstanceResponse
 */
async function stopInstanceWithOptions(request: StopInstanceRequest, runtime: Util.RuntimeOptions): StopInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StopInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Terminates an instance.
 *
 * @param request StopInstanceRequest
 * @return StopInstanceResponse
 */
async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopInstanceWithOptions(request, runtime);
}

model SubmitDataServiceApiRequest {
  apiId?: long(name='ApiId', description='The API ID. You can call the [ListDataServiceApis](~~ListDataServiceApis~~) operation to obtain the ID.

This parameter is required.', example='12345'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the workspace ID.

This parameter is required.', example='10000'),
  tenantId?: long(name='TenantId', description='The tenant ID. To obtain the tenant ID, perform the following steps: Log on to the DataWorks console. Find your workspace and go to the [DataService Studio](https://ds-cn-shanghai.data.aliyun.com/) page. On the DataService Studio page, click the logon username in the upper-right corner and click User Info in the Menu section.', example='10001'),
}

model SubmitDataServiceApiResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the API was submitted.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model SubmitDataServiceApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitDataServiceApiResponseBody(name='body'),
}

/**
 * @summary Submits an API in DataService Studio.
 *
 * @param request SubmitDataServiceApiRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitDataServiceApiResponse
 */
async function submitDataServiceApiWithOptions(request: SubmitDataServiceApiRequest, runtime: Util.RuntimeOptions): SubmitDataServiceApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Submits an API in DataService Studio.
 *
 * @param request SubmitDataServiceApiRequest
 * @return SubmitDataServiceApiResponse
 */
async function submitDataServiceApi(request: SubmitDataServiceApiRequest): SubmitDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitDataServiceApiWithOptions(request, runtime);
}

model SubmitFileRequest {
  comment?: string(name='Comment', description='The description of the commit operation.', example='Submit a task for the first time'),
  fileId?: long(name='FileId', description='The file ID. You can call the [ListFiles](https://help.aliyun.com/document_detail/173942.html) operation to query the file ID.

This parameter is required.', example='1000000'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the DataWorks console and go to the Workspace page to query the ID. You must configure either this parameter or the ProjectIdentifier parameter to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace page to obtain the workspace name. You must configure either this parameter or the ProjectId parameter to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
  skipAllDeployFileExtensions?: boolean(name='SkipAllDeployFileExtensions', description='Specifies whether to skip the pre-publish check after the file is committed. Valid values:

*   false: indicates that the pre-publish check is not skipped. After the file is committed, the pre-publish check is automatically triggered. The file can be deployed only after the file passes the check.
*   true: indicates that the pre-publish check is skipped. After the file is submitted, the pre-publish check process is not triggered. You can directly deploy the file.', example='false'),
}

model SubmitFileResponseBody = {
  data?: long(name='Data', description='The deployment package ID. The ID is used as the value of a specific request parameter when you call the [GetDeployment](https://help.aliyun.com/document_detail/173950.html) operation to query the details of the deployment operation.', example='3000001'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model SubmitFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitFileResponseBody(name='body'),
}

/**
 * @summary Commits a file to the development environment of the scheduling system to generate a task.
 *
 * @param request SubmitFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitFileResponse
 */
async function submitFileWithOptions(request: SubmitFileRequest, runtime: Util.RuntimeOptions): SubmitFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.skipAllDeployFileExtensions)) {
    body['SkipAllDeployFileExtensions'] = request.skipAllDeployFileExtensions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Commits a file to the development environment of the scheduling system to generate a task.
 *
 * @param request SubmitFileRequest
 * @return SubmitFileResponse
 */
async function submitFile(request: SubmitFileRequest): SubmitFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitFileWithOptions(request, runtime);
}

model SuspendInstanceRequest {
  instanceId?: long(name='InstanceId', description='The instance ID.

This parameter is required.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV.

This parameter is required.', example='PROD'),
}

model SuspendInstanceResponseBody = {
  data?: boolean(name='Data', description='The data returned.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ProjectNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='0baf87f0159376****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model SuspendInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SuspendInstanceResponseBody(name='body'),
}

/**
 * @summary Suspends an instance.
 *
 * @param request SuspendInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SuspendInstanceResponse
 */
async function suspendInstanceWithOptions(request: SuspendInstanceRequest, runtime: Util.RuntimeOptions): SuspendInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SuspendInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Suspends an instance.
 *
 * @param request SuspendInstanceRequest
 * @return SuspendInstanceResponse
 */
async function suspendInstance(request: SuspendInstanceRequest): SuspendInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return suspendInstanceWithOptions(request, runtime);
}

model TerminateDISyncInstanceRequest {
  fileId?: long(name='FileId', description='The ID of the real-time synchronization task.

This parameter is required.', example='100'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the workspace ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
  taskType?: string(name='TaskType', description='The value DI_REALTIME indicates that the task is a real-time synchronization task.

This parameter is required.', example='DI_REALTIME'),
}

model TerminateDISyncInstanceResponseBody = {
  data?: {
    message?: string(name='Message', description='The reason why the real-time synchronization task fails to be terminated. If the real-time synchronization task is undeployed, the value of this parameter is null.', example='fileId:[100] is invalid.'),
    status?: string(name='Status', description='Indicates whether the real-time synchronization task is undeployed. Valid values:

*   success
*   fail', example='success'),
  }(name='Data', description='The returned results.'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model TerminateDISyncInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TerminateDISyncInstanceResponseBody(name='body'),
}

/**
 * @summary Undeploys a real-time synchronization task.
 *
 * @param request TerminateDISyncInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return TerminateDISyncInstanceResponse
 */
async function terminateDISyncInstanceWithOptions(request: TerminateDISyncInstanceRequest, runtime: Util.RuntimeOptions): TerminateDISyncInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TerminateDISyncInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Undeploys a real-time synchronization task.
 *
 * @param request TerminateDISyncInstanceRequest
 * @return TerminateDISyncInstanceResponse
 */
async function terminateDISyncInstance(request: TerminateDISyncInstanceRequest): TerminateDISyncInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return terminateDISyncInstanceWithOptions(request, runtime);
}

model TestDataServiceApiRequest {
  apiId?: long(name='ApiId', description='The ID of the DataService Studio API on which the test is performed.

This parameter is required.', example='12343'),
  bodyContent?: string(name='BodyContent', description='The data of the request body.', example='{"name":"test"}'),
  bodyParams?: [ 
    {
      paramKey?: string(name='ParamKey', description='The name of the parameter.', example='name'),
      paramValue?: string(name='ParamValue', description='The value of the parameter.', example='test'),
    }
  ](name='BodyParams', description='The request parameters that are contained in the request body.'),
  headParams?: [ 
    {
      paramKey?: string(name='ParamKey', description='The name of the parameter.', example='requestId'),
      paramValue?: string(name='ParamValue', description='The value of the parameter.', example='abcd'),
    }
  ](name='HeadParams', description='The request parameters that are contained in the request header.'),
  pathParams?: [ 
    {
      paramKey?: string(name='ParamKey', description='The name of the parameter.', example='path1'),
      paramValue?: string(name='ParamValue', description='The value of the parameter.', example='api'),
    }
  ](name='PathParams', description='The request parameters that are contained in the request path.'),
  queryParam?: [ 
    {
      paramKey?: string(name='ParamKey', description='The name of the parameter.', example='name'),
      paramValue?: string(name='ParamValue', description='The value of the parameter.', example='test'),
    }
  ](name='QueryParam', description='The request parameters that are contained in the query.'),
}

model TestDataServiceApiResponseBody = {
  data?: {
    testId?: string(name='TestId', description='The ID of the test.', example='232432'),
  }(name='Data', description='The information about the test.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='abdsfewe'),
}

model TestDataServiceApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TestDataServiceApiResponseBody(name='body'),
}

/**
 * @summary Tests a DataService Studio API in asynchronous mode. You can call the GetDataServiceApiTest operation to query the test result.
 *
 * @param request TestDataServiceApiRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return TestDataServiceApiResponse
 */
async function testDataServiceApiWithOptions(request: TestDataServiceApiRequest, runtime: Util.RuntimeOptions): TestDataServiceApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.bodyContent)) {
    body['BodyContent'] = request.bodyContent;
  }
  if (!Util.isUnset(request.bodyParams)) {
    body['BodyParams'] = request.bodyParams;
  }
  if (!Util.isUnset(request.headParams)) {
    body['HeadParams'] = request.headParams;
  }
  if (!Util.isUnset(request.pathParams)) {
    body['PathParams'] = request.pathParams;
  }
  if (!Util.isUnset(request.queryParam)) {
    body['QueryParam'] = request.queryParam;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TestDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Tests a DataService Studio API in asynchronous mode. You can call the GetDataServiceApiTest operation to query the test result.
 *
 * @param request TestDataServiceApiRequest
 * @return TestDataServiceApiResponse
 */
async function testDataServiceApi(request: TestDataServiceApiRequest): TestDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return testDataServiceApiWithOptions(request, runtime);
}

model TestNetworkConnectionRequest {
  datasourceName?: string(name='DatasourceName', description='The name of the data source.

This parameter is required.', example='mysql_name'),
  envType?: string(name='EnvType', description='The environment in which the data source resides. Valid values:

*   0: development environment
*   1: production environment

This parameter is required.', example='1'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace to which the data source belongs. You can call the [ListProjects](https://help.aliyun.com/document_detail/178393.html) operation to query the ID.

This parameter is required.', example='10000'),
  resourceGroup?: string(name='ResourceGroup', description='The identifier of the resource group. You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/173913.html) operation to query the identifier of the resource group.

This parameter is required.', example='S_res_group_2XXXX4_1619100XXXXX'),
}

model TestNetworkConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
  taskList?: {
    connectMessage?: string(name='ConnectMessage', description='The reason why the data source and resource group failed the connectivity test. If data source and the resource group passed the connectivity test, this parameter is left empty.', example='Connectable'),
    connectStatus?: boolean(name='ConnectStatus', description='The result of the connectivity test. Valid values:

*   true: The data source and the resource group passed the connectivity test.
*   false: The data source and the resource group failed the connectivity test. You can troubleshoot issues based on the ConnectMessage parameter.', example='true'),
  }(name='TaskList', description='The information about the connectivity test.'),
}

model TestNetworkConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TestNetworkConnectionResponseBody(name='body'),
}

/**
 * @summary Tests the network connectivity between a data source and a resource group.
 *
 * @param request TestNetworkConnectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return TestNetworkConnectionResponse
 */
async function testNetworkConnectionWithOptions(request: TestNetworkConnectionRequest, runtime: Util.RuntimeOptions): TestNetworkConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasourceName)) {
    query['DatasourceName'] = request.datasourceName;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.resourceGroup)) {
    query['ResourceGroup'] = request.resourceGroup;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TestNetworkConnection',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Tests the network connectivity between a data source and a resource group.
 *
 * @param request TestNetworkConnectionRequest
 * @return TestNetworkConnectionResponse
 */
async function testNetworkConnection(request: TestNetworkConnectionRequest): TestNetworkConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return testNetworkConnectionWithOptions(request, runtime);
}

model TopTenElapsedTimeInstanceRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the DataWorks console and go to the Workspace page to query the ID.

This parameter is required.', example='100000'),
}

model TopTenElapsedTimeInstanceResponseBody = {
  instanceConsumeTimeRank?: {
    consumeTimeRank?: [ 
      {
        businessDate?: long(name='BusinessDate', description='The data timestamp of the instance.', example='1600963200000'),
        consumed?: long(name='Consumed', description='The run time length of the instance. Unit: seconds.', example='1000'),
        instanceId?: long(name='InstanceId', description='The instance ID.', example='95279527'),
        nodeId?: long(name='NodeId', description='The node ID.', example='9527'),
        nodeName?: string(name='NodeName', description='The name of the node.', example='Node name'),
        owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the node owner.', example='952795279527'),
        programType?: int32(name='ProgramType', description='The type of the node. Valid values: 6 (Shell), 10 (ODPS SQL), 11 (ODPS MR), 23 (Data Integration), 24 (ODPS Script), 99 (zero load), 221 (PyODPS 2), 225 (ODPS Spark), 227 (EMR Hive), 228 (EMR Spark), 229 (EMR Spark SQL), 230 (EMR MR), 239 (OSS object inspection), 257 (EMR Shell), 258 (EMR Spark Shell), 259 (EMR Presto), 260 (EMR Impala), 900 (real-time synchronization), 1089 (cross-tenant collaboration), 1091 (Hologres development), 1093 (Hologres SQL), 1100 (assignment), and 1221 (PyODPS 3)', example='10'),
      }
    ](name='ConsumeTimeRank', description='The ranking data of the running durations of the instances.'),
    updateTime?: long(name='UpdateTime', description='The timestamp at which the ranking of the running durations of the instances was updated.', example='1600963200000'),
  }(name='InstanceConsumeTimeRank', description='The ranking record of the running durations of the instances.'),
  requestId?: string(name='RequestId', description='The request ID.', example='6347364dadsfadf****'),
}

model TopTenElapsedTimeInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TopTenElapsedTimeInstanceResponseBody(name='body'),
}

/**
 * @summary Queries the ranking of the running durations of instances.
 *
 * @param request TopTenElapsedTimeInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return TopTenElapsedTimeInstanceResponse
 */
async function topTenElapsedTimeInstanceWithOptions(request: TopTenElapsedTimeInstanceRequest, runtime: Util.RuntimeOptions): TopTenElapsedTimeInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TopTenElapsedTimeInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the ranking of the running durations of instances.
 *
 * @param request TopTenElapsedTimeInstanceRequest
 * @return TopTenElapsedTimeInstanceResponse
 */
async function topTenElapsedTimeInstance(request: TopTenElapsedTimeInstanceRequest): TopTenElapsedTimeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return topTenElapsedTimeInstanceWithOptions(request, runtime);
}

model TopTenErrorTimesInstanceRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the DataWorks console and go to the Workspace page to query the ID.

This parameter is required.', example='9527'),
}

model TopTenErrorTimesInstanceResponseBody = {
  instanceErrorRank?: {
    errorRank?: [ 
      {
        count?: int32(name='Count', description='The number of errors that occurred on the node.', example='5'),
        nodeId?: long(name='NodeId', description='The node ID.', example='9527'),
        nodeName?: string(name='NodeName', description='The name of the node.', example='Node name'),
        owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the node owner.', example='952795279527'),
        programType?: int32(name='ProgramType', description='The type of the node. Valid values: 6 (Shell), 10 (ODPS SQL), 11 (ODPS MR), 23 (Data Integration), 24 (ODPS Script), 99 (zero load), 221 (PyODPS 2), 225 (ODPS Spark), 227 (EMR Hive), 228 (EMR Spark), 229 (EMR Spark SQL), 230 (EMR MR), 239 (OSS object inspection), 257 (EMR Shell), 258 (EMR Spark Shell), 259 (EMR Presto), 260 (EMR Impala), 900 (real-time synchronization), 1089 (cross-tenant collaboration), 1091 (Hologres development), 1093 (Hologres SQL), 1100 (assignment), and 1221 (PyODPS 3)', example='10'),
        projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='9527'),
      }
    ](name='ErrorRank', description='The ranking data of nodes on which errors occurred within the last month.'),
    updateTime?: long(name='UpdateTime', description='The timestamp at which the rankings were updated.', example='1600963200000'),
  }(name='InstanceErrorRank', description='The ranking data of nodes on which errors occurred.'),
  requestId?: string(name='RequestId', description='The request ID.', example='952795279527****'),
}

model TopTenErrorTimesInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TopTenErrorTimesInstanceResponseBody(name='body'),
}

/**
 * @summary Queries the ranking of nodes on which errors occur within the previous month.
 *
 * @param request TopTenErrorTimesInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return TopTenErrorTimesInstanceResponse
 */
async function topTenErrorTimesInstanceWithOptions(request: TopTenErrorTimesInstanceRequest, runtime: Util.RuntimeOptions): TopTenErrorTimesInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TopTenErrorTimesInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the ranking of nodes on which errors occur within the previous month.
 *
 * @param request TopTenErrorTimesInstanceRequest
 * @return TopTenErrorTimesInstanceResponse
 */
async function topTenErrorTimesInstance(request: TopTenErrorTimesInstanceRequest): TopTenErrorTimesInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return topTenErrorTimesInstanceWithOptions(request, runtime);
}

model UmountDirectoryRequest {
  targetId?: string(name='TargetId', description='The ID of the directory that you want to remove from the left-side navigation pane of DataAnalysis. This parameter is used together with the TargetType parameter. For example, if you set the TargetType parameter to META_ALBUM, you must set the TargetId parameter to the ID of the metadata data album. You can call the [ListMetaCollections](https://help.aliyun.com/document_detail/469938.html) operation to obtain the ID of the data album. The ID is indicated by the QualifiedName parameter.', example='album.339'),
  targetType?: string(name='TargetType', description='The type of the directory that you want to remove from the left-side navigation pane of DataAnalysis. Example: META_ALBUM, which indicates the metadata data album.', example='META_ALBUM'),
  targetUserId?: string(name='TargetUserId', description='The ID of the user in the tenant.

*   If you do not configure TargetUserId, the directory belongs to you.
*   If you configure TargetUserId, the directory belongs to the user specified by using TargetUserId.', example='1234567890'),
}

model UmountDirectoryResponseBody = {
  data?: int32(name='Data', description='The number of directories that are removed. Valid values:

*   0: No directories are removed. The left-side navigation pane may not contain the specified directory.
*   1: One directory is removed.', example='1'),
  errorCode?: string(name='ErrorCode', description='The error code. The value 200 indicates that the task is successful.', example='200'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code. The value 200 indicates that the request was successful.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to troubleshoot issues.', example='0bc5aa2716455247597991794e65bd'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UmountDirectoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UmountDirectoryResponseBody(name='body'),
}

/**
 * @summary Removes a directory from the left-side navigation pane of DataAnalysis.
 *
 * @param request UmountDirectoryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UmountDirectoryResponse
 */
async function umountDirectoryWithOptions(request: UmountDirectoryRequest, runtime: Util.RuntimeOptions): UmountDirectoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.targetId)) {
    body['TargetId'] = request.targetId;
  }
  if (!Util.isUnset(request.targetType)) {
    body['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.targetUserId)) {
    body['TargetUserId'] = request.targetUserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UmountDirectory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Removes a directory from the left-side navigation pane of DataAnalysis.
 *
 * @param request UmountDirectoryRequest
 * @return UmountDirectoryResponse
 */
async function umountDirectory(request: UmountDirectoryRequest): UmountDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return umountDirectoryWithOptions(request, runtime);
}

model UpdateBaselineRequest {
  alertEnabled?: boolean(name='AlertEnabled', description='Specifies whether to enable the alerting feature. Valid values: true and false.', example='true'),
  alertMarginThreshold?: int32(name='AlertMarginThreshold', description='The alert margin threshold of the baseline. Unit: minutes.', example='30'),
  alertSettings?: [ 
    {
      alertInterval?: int32(name='AlertInterval', description='The interval at which an event alert notification is sent. Unit: minutes. Minimum value: 5. Maximum value: 1,440.', example='1800'),
      alertMaximum?: int32(name='AlertMaximum', description='The maximum number of times an event alert notification is sent. Maximum value: 24.', example='1'),
      alertMethods?: [ string ](name='AlertMethods', description='The alert notification methods. Valid values: MAIL, SMS, PHONE, DINGROBOTS, and Webhooks. The value MAIL indicates that alert notifications are sent by email. The value SMS indicates that alert notifications are sent by text message. The value PHONE indicates that alert notifications are sent by phone call. You can use this notification method only in DataWorks Professional Edition or a more advanced edition. The value DINGROBOTS indicates that alert notifications are sent by using a DingTalk chatbot. You can use this notification method only if the RobotUrls parameter is configured. The value Webhooks indicates that alert notifications are sent by WeCom or Lark. You can use this notification method only if the Webhooks parameter is configured.'),
      alertRecipient?: string(name='AlertRecipient', description='The details of the alert recipient. If you set AlertRecipientType to OWNER, leave this parameter empty. If you set AlertRecipientType to SHIFT_SCHEDULE, set this parameter to the name of the shift schedule. If you set AlertRecipientType to OTHER, set this parameter to the employee IDs of specified personnel.', example='123123'),
      alertRecipientType?: string(name='AlertRecipientType', description='The type of the alert recipient. Valid values: OWNER, OTHER, and SHIFT_SCHEDULE. The value OWNER indicates the node owner. The value OTHER indicates specified personnel. The value SHIFT_SCHEDULE indicates personnel in a shift schedule.', example='OWNER'),
      alertType?: string(name='AlertType', description='The type of the alert. Valid values: BASELINE and TOPIC. The value BASELINE indicates a baseline alert. The value TOPIC indicates an event alert.', example='BASELINE'),
      baselineAlertEnabled?: boolean(name='BaselineAlertEnabled', description='Specifies whether to enable the baseline alerting feature. This feature is specific to baselines. Valid values: true and false.', example='true'),
      dingRobots?: [ 
        {
          atAll?: boolean(name='AtAll', description='Specifies whether to remind all members by using the at sign (@). Valid values: true and false.', example='false'),
          webUrl?: string(name='WebUrl', description='The webhook URL of the DingTalk chatbot.', example='https://oapi.dingtalk.com/robot/send?access_token=xxx'),
        }
      ](name='DingRobots', description='The DingTalk chatbots.'),
      silenceEndTime?: string(name='SilenceEndTime', description='The end time of silence.', example='00:00:00'),
      silenceStartTime?: string(name='SilenceStartTime', description='The start time of silence.', example='00:00:00'),
      topicTypes?: [ string ](name='TopicTypes', description='The types of event alerts, which are event-specific configurations.'),
      webhooks?: [ string ](name='Webhooks', description='The webhook URLs.'),
    }
  ](name='AlertSettings', description='The alert settings of the baseline.'),
  baselineId?: long(name='BaselineId', description='The baseline ID. You can call the [ListBaselines](https://help.aliyun.com/document_detail/2261507.html) operation to query the ID.

This parameter is required.', example='1000010800007'),
  baselineName?: string(name='BaselineName', description='The name of the baseline.', example='BaselineName'),
  baselineType?: string(name='BaselineType', description='The type of the baseline. Valid values: DAILY and HOURLY.', example='DAILY'),
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the baseline. Valid values: true and false.', example='true'),
  nodeIds?: string(name='NodeIds', description='The ancestor nodes of nodes in the baseline. Separate the ancestor nodes with commas (,). If a large number of ancestor nodes exist, we recommend that you create a zero load node and configure the zero load node as the descendant node of nodes in the baseline to facilitate node management.', example='1,2,3'),
  overtimeSettings?: [ 
    {
      cycle?: int32(name='Cycle', description='The cycle that corresponds to the committed completion time. For a day-level baseline, set this parameter to 1. For an hour-level baseline, set this parameter to a value that does not exceed 24.', example='1'),
      time?: string(name='Time', description='The committed completion time in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].', example='00:00'),
    }
  ](name='OvertimeSettings', description='The settings of the committed completion time of the baseline.'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the baseline owner.', example='3726346****'),
  priority?: int32(name='Priority', description='The priority of the baseline. Valid values: {1,3,5,7,8}.', example='7'),
  projectId?: long(name='ProjectId', description='The workspace ID. You can call the [ListBaselines](https://help.aliyun.com/document_detail/2261507.html) operation to query the ID.

This parameter is required.', example='2043'),
  removeNodeIds?: string(name='RemoveNodeIds', description='The ID of the node that you want to disassociate from the baseline. You can specify multiple node IDs. Separate multiple node IDs with commas (,).', example='123,456'),
}

model UpdateBaselineShrinkRequest {
  alertEnabled?: boolean(name='AlertEnabled', description='Specifies whether to enable the alerting feature. Valid values: true and false.', example='true'),
  alertMarginThreshold?: int32(name='AlertMarginThreshold', description='The alert margin threshold of the baseline. Unit: minutes.', example='30'),
  alertSettingsShrink?: string(name='AlertSettings', description='The alert settings of the baseline.'),
  baselineId?: long(name='BaselineId', description='The baseline ID. You can call the [ListBaselines](https://help.aliyun.com/document_detail/2261507.html) operation to query the ID.

This parameter is required.', example='1000010800007'),
  baselineName?: string(name='BaselineName', description='The name of the baseline.', example='BaselineName'),
  baselineType?: string(name='BaselineType', description='The type of the baseline. Valid values: DAILY and HOURLY.', example='DAILY'),
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the baseline. Valid values: true and false.', example='true'),
  nodeIds?: string(name='NodeIds', description='The ancestor nodes of nodes in the baseline. Separate the ancestor nodes with commas (,). If a large number of ancestor nodes exist, we recommend that you create a zero load node and configure the zero load node as the descendant node of nodes in the baseline to facilitate node management.', example='1,2,3'),
  overtimeSettingsShrink?: string(name='OvertimeSettings', description='The settings of the committed completion time of the baseline.'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the baseline owner.', example='3726346****'),
  priority?: int32(name='Priority', description='The priority of the baseline. Valid values: {1,3,5,7,8}.', example='7'),
  projectId?: long(name='ProjectId', description='The workspace ID. You can call the [ListBaselines](https://help.aliyun.com/document_detail/2261507.html) operation to query the ID.

This parameter is required.', example='2043'),
  removeNodeIds?: string(name='RemoveNodeIds', description='The ID of the node that you want to disassociate from the baseline. You can specify multiple node IDs. Separate multiple node IDs with commas (,).', example='123,456'),
}

model UpdateBaselineResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the baseline was updated.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='401'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='6E07E90B-D9BC-5D6B-896A-82BA41A34AE1'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateBaselineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateBaselineResponseBody(name='body'),
}

/**
 * @summary Updates a baseline.
 *
 * @param tmpReq UpdateBaselineRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateBaselineResponse
 */
async function updateBaselineWithOptions(tmpReq: UpdateBaselineRequest, runtime: Util.RuntimeOptions): UpdateBaselineResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateBaselineShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.alertSettings)) {
    request.alertSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.alertSettings, 'AlertSettings', 'json');
  }
  if (!Util.isUnset(tmpReq.overtimeSettings)) {
    request.overtimeSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.overtimeSettings, 'OvertimeSettings', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertEnabled)) {
    body['AlertEnabled'] = request.alertEnabled;
  }
  if (!Util.isUnset(request.alertMarginThreshold)) {
    body['AlertMarginThreshold'] = request.alertMarginThreshold;
  }
  if (!Util.isUnset(request.alertSettingsShrink)) {
    body['AlertSettings'] = request.alertSettingsShrink;
  }
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.baselineName)) {
    body['BaselineName'] = request.baselineName;
  }
  if (!Util.isUnset(request.baselineType)) {
    body['BaselineType'] = request.baselineType;
  }
  if (!Util.isUnset(request.enabled)) {
    body['Enabled'] = request.enabled;
  }
  if (!Util.isUnset(request.nodeIds)) {
    body['NodeIds'] = request.nodeIds;
  }
  if (!Util.isUnset(request.overtimeSettingsShrink)) {
    body['OvertimeSettings'] = request.overtimeSettingsShrink;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.removeNodeIds)) {
    body['RemoveNodeIds'] = request.removeNodeIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateBaseline',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates a baseline.
 *
 * @param request UpdateBaselineRequest
 * @return UpdateBaselineResponse
 */
async function updateBaseline(request: UpdateBaselineRequest): UpdateBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateBaselineWithOptions(request, runtime);
}

model UpdateBusinessRequest {
  businessId?: long(name='BusinessId', description='The ID of the workflow. You can call the [ListBusiness](https://help.aliyun.com/document_detail/173945.html) operation to obtain the workflow ID.

This parameter is required.', example='300000'),
  businessName?: string(name='BusinessName', description='The name of the workflow. You can call the [ListBusiness](https://help.aliyun.com/document_detail/173945.html) operation to obtain the workflow name.', example='MyBusiness'),
  description?: string(name='Description', description='The description of the workflow.', example='modified from my first business'),
  owner?: string(name='Owner', description='The owner of the workflow. You can call the [ListBusiness](https://help.aliyun.com/document_detail/173945.html) operation to obtain the workflow owner.', example='348428****'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the workspace ID. You must configure either this parameter or the ProjectIdentifier parameter to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the workspace name. You must configure either this parameter or ProjectId parameter to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model UpdateBusinessResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateBusinessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateBusinessResponseBody(name='body'),
}

/**
 * @summary Updates a workflow.
 *
 * @param request UpdateBusinessRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateBusinessResponse
 */
async function updateBusinessWithOptions(request: UpdateBusinessRequest, runtime: Util.RuntimeOptions): UpdateBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessId)) {
    body['BusinessId'] = request.businessId;
  }
  if (!Util.isUnset(request.businessName)) {
    body['BusinessName'] = request.businessName;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateBusiness',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates a workflow.
 *
 * @param request UpdateBusinessRequest
 * @return UpdateBusinessResponse
 */
async function updateBusiness(request: UpdateBusinessRequest): UpdateBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateBusinessWithOptions(request, runtime);
}

model UpdateClusterConfigsRequest {
  clusterId?: long(name='ClusterId', description='The ID of the cluster associated with DataWorks.

This parameter is required.', example='1234'),
  configType?: string(name='ConfigType', description='The configuration type of the cluster. Valid values:

*   SPARK_CONF: SPARK parameters

This parameter is required.', example='SPARK_CONF'),
  configValues?: [
    ClusterConfig
  ](name='ConfigValues', description='The configuration information of the cluster submodule.

This parameter is required.'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.

This parameter is required.', example='5678'),
}

model UpdateClusterConfigsShrinkRequest {
  clusterId?: long(name='ClusterId', description='The ID of the cluster associated with DataWorks.

This parameter is required.', example='1234'),
  configType?: string(name='ConfigType', description='The configuration type of the cluster. Valid values:

*   SPARK_CONF: SPARK parameters

This parameter is required.', example='SPARK_CONF'),
  configValuesShrink?: string(name='ConfigValues', description='The configuration information of the cluster submodule.

This parameter is required.'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.

This parameter is required.', example='5678'),
}

model UpdateClusterConfigsResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the update was successful. Valid values:

*   true
*   false', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='101011005'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Invalid.Cluster.ClusterNotFound'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. It is used to locate logs and troubleshoot problems.', example='0000-ABCD-E****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateClusterConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateClusterConfigsResponseBody(name='body'),
}

/**
 * @summary Updates the configurations of submodules in a workspace. You can configure SPARK parameters.
 *
 * @param tmpReq UpdateClusterConfigsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateClusterConfigsResponse
 */
async function updateClusterConfigsWithOptions(tmpReq: UpdateClusterConfigsRequest, runtime: Util.RuntimeOptions): UpdateClusterConfigsResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateClusterConfigsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.configValues)) {
    request.configValuesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.configValues, 'ConfigValues', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.configType)) {
    query['ConfigType'] = request.configType;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.configValuesShrink)) {
    body['ConfigValues'] = request.configValuesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateClusterConfigs',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates the configurations of submodules in a workspace. You can configure SPARK parameters.
 *
 * @param request UpdateClusterConfigsRequest
 * @return UpdateClusterConfigsResponse
 */
async function updateClusterConfigs(request: UpdateClusterConfigsRequest): UpdateClusterConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateClusterConfigsWithOptions(request, runtime);
}

model UpdateConnectionRequest {
  connectionId?: long(name='ConnectionId', description='The data source ID. You can call the [ListConnections](https://help.aliyun.com/document_detail/173911.html) operation to query the ID.

This parameter is required.', example='1'),
  content?: string(name='Content', description='The details of the data source. Examples of details of some common data sources:

*   odps

<!---->

    {
      "accessId": "xssssss",
      "accessKey": "xsaxsaxsa",
      "authType": 2,
      "endpoint": "http://service.odps.aliyun.com/api",
      "project": "xsaxsax",
      "tag": "public"
    }

*   mysql

<!---->

    {
      "database": "xsaxsa",
      "instanceName": "rm-xsaxsa",
      "password": "xsaxsa",
      "rdsOwnerId": "xasxsa",
      "regionId": "cn-shanghai",
      "tag": "rds",
      "username": "xsaxsa"
    }

*   rds

<!---->

    {
      "configType": 1,
      "tag": "rds",
      "database": "xsaxsa",
      "username": "xsaxsa",
      "password": "xssaxsa$32050",
      "instanceName": "rm-xsaxs",
      "rdsOwnerId": "11111111"
    }

*   oss

<!---->

    {
      "accessId": "sssssxx",
      "accessKey": "xsaxaxsaxs",
      "bucket": "xsa-xs-xs",
      "endpoint": "http://oss-cn-shanghai.aliyuncs.com",
      "tag": "public"
    }

*   sqlserver

<!---->

    {
      "jdbcUrl": "jdbc:sqlserver://xsaxsa-xsaxsa.database.xxx.cn:123;DatabaseName=xsxs-xsxs",
      "password": "sdasda$fs",
      "tag": "public",
      "username": "sxaxacdacdd"
    }

*   polardb

<!---->

    {
      "clusterId": "pc-sdadsadsa",
      "database": "dsadsadsa",
      "ownerId": "121212122",
      "password": "sdasdafssa",
      "region": "cn-shanghai",
      "tag": "polardb",
      "username": "asdadsads"
    }

*   oracle

<!---->

    {
      "jdbcUrl": "jdbc:oracle:saaa:@xxxxx:1521:PROD",
      "password": "sxasaxsa",
      "tag": "public",
      "username": "sasfadfa"
    }

*   mongodb

<!---->

    {
      "address": "[\\\\"xsaxxsa.mongodb.rds.aliyuncs.com:3717\\\\"]",
      "database": "admin",
      "password": "sadsda@",
      "tag": "public",
      "username": "dsadsadas"
    }

*   emr

<!---->

    {
      "accessId": "xsaxsa",
      "emrClusterId": "C-dsads",
      "emrResourceQueueName": "default",
      "emrEndpoint": "emr.aliyuncs.com",
      "accessKey": "dsadsad",
      "emrUserId": "224833315798889783",
      "name": "sasdsadsa",
      "emrAccessMode": "simple",
      "region": "cn-shanghai",
      "authType": "2",
      "emrProjectId": "FP-sdadsad"
    }

*   postgresql

<!---->

    {
      "jdbcUrl": "jdbc:postgresql://xxxx:1921/ssss",
      "password": "sdadsads",
      "tag": "public",
      "username": "sdsasda"
    }

*   analyticdb_for_mysql

<!---->

    {
      "instanceId": "am-sadsada",
      "database": "xsxsx",
      "username": "xsxsa",
      "password": "asdadsa",
      "connectionString": "am-xssxsxs.ads.aliyuncs.com:3306"
    }

*   hybriddb_for_postgresql

<!---->

    {
      "connectionString": "gp-xsaxsaxa-master.gpdbmaster.rds.aliyuncs.com",
      "database": "xsaxsaxas",
      "password": "xsaxsaxsa@11",
      "instanceId": "gp-xsaxsaxsa",
      "port": "541132",
      "ownerId": "xsaxsaxsas",
      "username": "sadsad"
    }

*   holo

<!---->

    {
      "accessId": "xsaxsaxs",
      "accessKey": "xsaxsaxsa",
      "database": "xsaxsaxsa",
      "instanceId": "xsaxa",
      "tag": "aliyun"
    }

*   kafka

<!---->

    {
      "instanceId": "xsax-cn-xsaxsa",
      "regionId": "cn-shanghai",
      "tag": "aliyun",
      "ownerId": "1212121212112"
    }', example='{"database":"dbname","instanceName":"instancename","password":"password","rdsOwnerId":"123","username":"username"}'),
  description?: string(name='Description', description='The description of the data source.', example='abc'),
  envType?: int32(name='EnvType', description='The environment in which the data source is used. Valid values: 0 and 1. The value 0 indicates the development environment. The value 1 indicates the production environment.', example='1'),
  status?: string(name='Status', description='The status of the data source. Valid values: ENABLED and DISABLED. The value ENABLED indicates that the data source is in the normal state. The value DISABLED indicates that the data source is in an abnormal state.', example='ENABLED'),
}

model UpdateConnectionResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the data source is updated.', example='true'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc14115159376359****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateConnectionResponseBody(name='body'),
}

/**
 * @deprecated OpenAPI UpdateConnection is deprecated
 *
 * @summary Updates a data source.
 *
 * @param request UpdateConnectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateConnectionResponse
 */
// Deprecated
async function updateConnectionWithOptions(request: UpdateConnectionRequest, runtime: Util.RuntimeOptions): UpdateConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionId)) {
    query['ConnectionId'] = request.connectionId;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateConnection',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'PUT',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @deprecated OpenAPI UpdateConnection is deprecated
 *
 * @summary Updates a data source.
 *
 * @param request UpdateConnectionRequest
 * @return UpdateConnectionResponse
 */
// Deprecated
async function updateConnection(request: UpdateConnectionRequest): UpdateConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateConnectionWithOptions(request, runtime);
}

model UpdateDIAlarmRuleRequest {
  DIAlarmRuleId?: long(name='DIAlarmRuleId', description='The alert rule ID.

This parameter is required.', example='34982'),
  description?: string(name='Description', description='The description of the alert rule.', example='mysql synchronizes to hologres heartbeat alert'),
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the alert rule. By default, the alert rule is disabled.', example='true'),
  metricType?: string(name='MetricType', description='The metric type in the alert rule. Valid values:

*   Heartbeat
*   FailoverCount
*   Delay

This parameter is required.', example='Heartbeat'),
  notificationSettings?: {
    inhibitionInterval?: int32(name='InhibitionInterval', description='The duration of the alert suppression interval. Default value: 5. Unit: minutes.', example='5'),
    notificationChannels?: [ 
      {
        channels?: [ string ](name='Channels', description='The alert notification methods.'),
        severity?: string(name='Severity', description='The severity level. Valid values:

*   Warning
*   Critical', example='Warning'),
      }
    ](name='NotificationChannels', description='The alert notification methods.

This parameter is required.'),
    notificationReceivers?: [ 
      {
        receiverType?: string(name='ReceiverType', description='The recipient type.

*   If the alert notification method is Mail, Phone, or Sms, the recipient type is the Alibaba Cloud account ID.
*   If the alert notification method is Ding, the recipient type is the DingTalk chatbot token.', example='DingToken'),
        receiverValues?: [ string ](name='ReceiverValues', description='The recipients.'),
      }
    ](name='NotificationReceivers', description='The settings of alert notification recipients.

This parameter is required.'),
  }(name='NotificationSettings', description='The alert notification settings.

This parameter is required.'),
  triggerConditions?: [ 
    {
      duration?: long(name='Duration', description='The time interval for alert calculation. Unit: minutes.', example='15'),
      severity?: string(name='Severity', description='The severity level. Valid values:

*   Warning
*   Critical', example='Warning'),
      threshold?: long(name='Threshold', description='The alert threshold.

*   If the alert rule is for task status, you do not need to specify a threshold.
*   If the alert rule is for failovers, you must specify the number of failovers.
*   If the alert rule is for latency, you must specify the latency duration, in seconds.', example='5'),
    }
  ](name='TriggerConditions', description='The conditions that are used to trigger the alert rule.

This parameter is required.'),
}

model UpdateDIAlarmRuleShrinkRequest {
  DIAlarmRuleId?: long(name='DIAlarmRuleId', description='The alert rule ID.

This parameter is required.', example='34982'),
  description?: string(name='Description', description='The description of the alert rule.', example='mysql synchronizes to hologres heartbeat alert'),
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the alert rule. By default, the alert rule is disabled.', example='true'),
  metricType?: string(name='MetricType', description='The metric type in the alert rule. Valid values:

*   Heartbeat
*   FailoverCount
*   Delay

This parameter is required.', example='Heartbeat'),
  notificationSettingsShrink?: string(name='NotificationSettings', description='The alert notification settings.

This parameter is required.'),
  triggerConditionsShrink?: string(name='TriggerConditions', description='The conditions that are used to trigger the alert rule.

This parameter is required.'),
}

model UpdateDIAlarmRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='A6C6B486-E3A2-5D52-9E76-D9380485D946'),
}

model UpdateDIAlarmRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDIAlarmRuleResponseBody(name='body'),
}

/**
 * @summary Updates an alert rule for a new-version synchronization task. The following type of task is supported: real-time synchronization of all data in a MySQL database to Hologres.
 *
 * @description You can configure alert rules only for tasks that can be used for real-time data synchronization. You must update all fields in the alert rule.
 *
 * @param tmpReq UpdateDIAlarmRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDIAlarmRuleResponse
 */
async function updateDIAlarmRuleWithOptions(tmpReq: UpdateDIAlarmRuleRequest, runtime: Util.RuntimeOptions): UpdateDIAlarmRuleResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateDIAlarmRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.notificationSettings)) {
    request.notificationSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notificationSettings, 'NotificationSettings', 'json');
  }
  if (!Util.isUnset(tmpReq.triggerConditions)) {
    request.triggerConditionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.triggerConditions, 'TriggerConditions', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.DIAlarmRuleId)) {
    body['DIAlarmRuleId'] = request.DIAlarmRuleId;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.enabled)) {
    body['Enabled'] = request.enabled;
  }
  if (!Util.isUnset(request.metricType)) {
    body['MetricType'] = request.metricType;
  }
  if (!Util.isUnset(request.notificationSettingsShrink)) {
    body['NotificationSettings'] = request.notificationSettingsShrink;
  }
  if (!Util.isUnset(request.triggerConditionsShrink)) {
    body['TriggerConditions'] = request.triggerConditionsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDIAlarmRule',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates an alert rule for a new-version synchronization task. The following type of task is supported: real-time synchronization of all data in a MySQL database to Hologres.
 *
 * @description You can configure alert rules only for tasks that can be used for real-time data synchronization. You must update all fields in the alert rule.
 *
 * @param request UpdateDIAlarmRuleRequest
 * @return UpdateDIAlarmRuleResponse
 */
async function updateDIAlarmRule(request: UpdateDIAlarmRuleRequest): UpdateDIAlarmRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDIAlarmRuleWithOptions(request, runtime);
}

model UpdateDIJobRequest {
  DIJobId?: long(name='DIJobId', description='The ID of the synchronization task.', example='11588'),
  description?: string(name='Description', description='The description of the synchronization task.', example='Synchronize mysql to hologres'),
  jobSettings?: {
    channelSettings?: string(name='ChannelSettings', description='The channel control settings for the synchronization task. The value of this parameter must be a JSON string.', example='{"structInfo":"MANAGED","storageType":"TEXTFILE","writeMode":"APPEND","partitionColumns":[{"columnName":"pt","columnType":"STRING","comment":""}],"fieldDelimiter":""}'),
    columnDataTypeSettings?: [ 
      {
        destinationDataType?: string(name='DestinationDataType', description='The data type of a destination field.', example='text'),
        sourceDataType?: string(name='SourceDataType', description='The data type of a source field.', example='bigint'),
      }
    ](name='ColumnDataTypeSettings', description='The settings for data type mappings between source fields and destination fields. The value of this parameter must be an array.'),
    cycleScheduleSettings?: {
      scheduleParameters?: string(name='ScheduleParameters', description='The scheduling parameters.', example='bizdate=$bizdate'),
    }(name='CycleScheduleSettings', description='The settings for periodic scheduling.'),
    ddlHandlingSettings?: [ 
      {
        action?: string(name='Action', description='The processing policy for DDL messages. Valid values:

*   Ignore: ignores a DDL message.
*   Critical: reports an error for a DDL message.
*   Normal: normally processes a DDL message.', example='Critical'),
        type?: string(name='Type', description='The type of the DDL operation. Valid values:

*   RenameColumn
*   ModifyColumn
*   CreateTable
*   TruncateTable
*   DropTable
*   DropColumn
*   AddColumn', example='AddColumn'),
      }
    ](name='DdlHandlingSettings', description='The settings for processing DDL messages. The value of this parameter must be an array.'),
    runtimeSettings?: [ 
      {
        name?: string(name='Name', description='The name of the configuration item. Valid values:

*   runtime.offline.speed.limit.mb: specifies the maximum transmission rate that is allowed for a batch synchronization task. This configuration item takes effect only when runtime.offline.speed.limit.enable is set to true.
*   runtime.offline.speed.limit.enable: specifies whether throttling is enabled for a batch synchronization task.
*   dst.offline.connection.max: specifies the maximum number of connections that are allowed for writing data to the destination of a batch synchronization task.
*   runtime.offline.concurrent: specifies the maximum number of parallel threads that are allowed for a batch synchronization task.
*   dst.realtime.connection.max: specifies the maximum number of connections that are allowed for writing data to the destination of a real-time synchronization task.
*   runtime.enable.auto.create.schema: specifies whether schemas are automatically created in the destination of a synchronization task.
*   src.offline.datasource.max.connection: specifies the maximum number of connections that are allowed for reading data from the source of a batch synchronization task.
*   runtime.realtime.concurrent: specifies the maximum number of parallel threads that are allowed for a real-time synchronization task.', example='runtime.offline.concurrent'),
        value?: string(name='Value', description='The value of the configuration item.', example='1'),
      }
    ](name='RuntimeSettings', description='The runtime settings. The value of this parameter must be an array.'),
  }(name='JobSettings', description='The settings for the dimension of the synchronization task. The settings include processing policies for DDL messages, policies for data type mappings between source fields and destination fields, and runtime parameters of the synchronization task.'),
  resourceSettings?: {
    offlineResourceSettings?: {
      resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', description='The identifier of the resource group for Data Integration used for batch synchronization.', example='S_res_group_111_222'),
    }(name='OfflineResourceSettings', description='The resource used for batch synchronization.'),
    realtimeResourceSettings?: {
      resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', description='The identifier of the resource group for Data Integration used for real-time synchronization.', example='S_res_group_111_222'),
    }(name='RealtimeResourceSettings', description='The resource used for real-time synchronization.'),
    requestedCu?: float(name='RequestedCu', description='The number of compute units (CUs) in the resource group that are used for full and incremental synchronization.', example='2.0'),
  }(name='ResourceSettings', description='The resource settings.'),
  tableMappings?: [ 
    {
      sourceObjectSelectionRules?: [ 
        {
          expression?: string(name='Expression', description='The expression.', example='mysql_table_1'),
          objectType?: string(name='ObjectType', description='The type of the object. Valid values:

*   Table
*   Database', example='Table'),
        }
      ](name='SourceObjectSelectionRules', description='The list of rules that you want to use to select synchronization objects in the source.'),
      transformationRules?: [ 
        {
          ruleActionType?: string(name='RuleActionType', description='The type of the action. Valid values:

*   DefinePrimaryKey
*   Rename
*   AddColumn
*   HandleDml
*   DefineIncrementalCondition
*   DefineCycleScheduleSettings
*   DefineRuntimeSettings
*   DefinePartitionKey', example='Rename'),
          ruleName?: string(name='RuleName', description='The name of the rule. If the values of the RuleActionType parameter and the RuleTargetType parameter are the same for multiple transformation rules, you must make sure that the transformation rule names are unique.', example='rename_rule_1'),
          ruleTargetType?: string(name='RuleTargetType', description='The type of the object on which you want to perform the action. Valid values:

*   Table
*   Schema', example='Table'),
        }
      ](name='TransformationRules', description='The list of transformation rules that you want to apply to the synchronization objects selected from the source.'),
    }
  ](name='TableMappings', description='The list of mappings between rules used to select synchronization objects in the source and transformation rules applied to the selected synchronization objects. Each entry in the list displays a mapping between a rule used to select synchronization objects and a transformation rule applied to the selected synchronization objects.'),
  transformationRules?: [ 
    {
      ruleActionType?: string(name='RuleActionType', description='The type of the action. Valid values:

*   DefinePrimaryKey
*   Rename
*   AddColumn
*   HandleDml
*   DefineIncrementalCondition
*   DefineCycleScheduleSettings
*   DefineRuntimeSettings
*   DefinePartitionKey', example='Rename'),
      ruleExpression?: string(name='RuleExpression', description='The expression of the rule. The expression must be a JSON string.

Example of a renaming rule: {"expression":"${srcDatasourceName}_${srcDatabaseName}_0922","variables":[{"variableName":"srcDatabaseName","variableRules":[{"from":"fromdb","to":"todb"}]}]}.

expression: the expression of the renaming rule. The expression may contain the following variables: ${srcDatasourceName}, ${srcDatabaseName}, and ${srcTableName}. ${srcDatasourceName} specifies the name of the source. ${srcDatabaseName} specifies the name of a source database. ${srcTableName} specifies the name of a source table. variables: the generation rule for a variable used in the expression of the renaming rule. The default value of the specified variable is the original value of the object indicated by the variable. You can define a group of string replacement rules to change the original values based on your business requirements. variableName: the name of the variable. Do not enclose the variable name in ${}. variableRules: the string replacement rules for variables. The system runs the string replacement rules in sequence. from specifies the original string. to specifies the new string. Example of a rule used to add a specific field to the destination and assign a value to the field: {"columns":[{"columnName":"my_add_column","columnValueType":"Constant","columnValue":"123"}]}.

If you do not configure such a rule, no fields are added to the destination and no values are assigned by default. columnName: the name of the field that you want to add. columnValueType: the value type of the field. Valid values: Constant and Variable. columnValue: the value of the field that you want to add. If you set the valueType parameter to Constant, set the columnValue parameter to a custom constant of the STRING type. If you set the valueType parameter to Variable, set the columnValue to a built-in variable. The following built-in variables are supported: EXECUTE_TIME (LONG data type), DB_NAME_SRC (STRING data type), DATASOURCE_NAME_SRC (STRING data type), TABLE_NAME_SRC (STRING data type), DB_NAME_DEST (STRING data type), DATASOURCE_NAME_DEST (STRING data type), TABLE_NAME_DEST (STRING data type), and DB_NAME_SRC_TRANSED (STRING data type). EXECUTE_TIME specifies the execution time. DB_NAME_SRC indicates the name of a source database. DATASOURCE_NAME_SRC specifies the name of the source. TABLE_NAME_SRC specifies the name of a source table. DB_NAME_DEST specifies the name of a destination database. DATASOURCE_NAME_DEST specifies the name of the destination. TABLE_NAME_DEST specifies the name of a destination table. DB_NAME_SRC_TRANSED specifies the database name obtained after a transformation. Example of a rule used to specify primary key fields for a destination table: {"columns":["ukcolumn1","ukcolumn2"]}.

If you do not configure such a rule, the primary key fields in the mapped source table are used for the destination table by default. If the destination table is an existing table, Data Integration does not modify the schema of the destination table. If the specified primary key fields do not exist in the destination table, an error is reported when the synchronization task starts to run. If the destination table is automatically created by the system, Data Integration automatically creates the schema of the destination table. The schema contains the primary key fields that you specify. If the specified primary key fields do not exist in the destination table, an error is reported when the synchronization task starts to run. Example of a rule used to process DML messages: {"dmlPolicies":[{"dmlType":"Delete","dmlAction":"Filter","filterCondition":"id > 1"}]}.

If you do not configure such a rule, the default processing policy for messages generated for insert, update, and delete operations is Normal. dmlType: the DML operation. Valid values: Insert, Update, and Delete. dmlAction: the processing policy for DML messages. Valid values: Normal, Ignore, Filter, and LogicalDelete. Filter indicates conditional processing. You can set the dmlAction parameter to Filter only when the dmlType parameter is set to Update or Delete. filterCondition: the condition used to filter DML messages. This parameter is required only when the dmlAction parameter is set to Filter.', example='{"expression":"${srcDatasoureName}_${srcDatabaseName}"}'),
      ruleName?: string(name='RuleName', description='The name of the rule. If the values of the RuleActionType parameter and the RuleTargetType parameter are the same for multiple transformation rules, you must make sure that the transformation rule names are unique.', example='rename_rule_1'),
      ruleTargetType?: string(name='RuleTargetType', description='The type of the object on which you want to perform the action. Valid values:

*   Table
*   Schema', example='Table'),
    }
  ](name='TransformationRules', description='The list of transformation rules that you want to apply to the synchronization objects selected from the source. Each entry in the list defines a transformation rule.'),
}

model UpdateDIJobShrinkRequest {
  DIJobId?: long(name='DIJobId', description='The ID of the synchronization task.', example='11588'),
  description?: string(name='Description', description='The description of the synchronization task.', example='Synchronize mysql to hologres'),
  jobSettingsShrink?: string(name='JobSettings', description='The settings for the dimension of the synchronization task. The settings include processing policies for DDL messages, policies for data type mappings between source fields and destination fields, and runtime parameters of the synchronization task.'),
  resourceSettingsShrink?: string(name='ResourceSettings', description='The resource settings.'),
  tableMappingsShrink?: string(name='TableMappings', description='The list of mappings between rules used to select synchronization objects in the source and transformation rules applied to the selected synchronization objects. Each entry in the list displays a mapping between a rule used to select synchronization objects and a transformation rule applied to the selected synchronization objects.'),
  transformationRulesShrink?: string(name='TransformationRules', description='The list of transformation rules that you want to apply to the synchronization objects selected from the source. Each entry in the list defines a transformation rule.'),
}

model UpdateDIJobResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='AAC30B35-820D-5F3E-A42C-E96BB6379325'),
}

model UpdateDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDIJobResponseBody(name='body'),
}

/**
 * @summary Updates a new-version synchronization task. The following type of task is supported: real-time synchronization of all data in a MySQL database to Hologres.
 *
 * @param tmpReq UpdateDIJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDIJobResponse
 */
async function updateDIJobWithOptions(tmpReq: UpdateDIJobRequest, runtime: Util.RuntimeOptions): UpdateDIJobResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateDIJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.jobSettings)) {
    request.jobSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.jobSettings, 'JobSettings', 'json');
  }
  if (!Util.isUnset(tmpReq.resourceSettings)) {
    request.resourceSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceSettings, 'ResourceSettings', 'json');
  }
  if (!Util.isUnset(tmpReq.tableMappings)) {
    request.tableMappingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tableMappings, 'TableMappings', 'json');
  }
  if (!Util.isUnset(tmpReq.transformationRules)) {
    request.transformationRulesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.transformationRules, 'TransformationRules', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.DIJobId)) {
    body['DIJobId'] = request.DIJobId;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.jobSettingsShrink)) {
    body['JobSettings'] = request.jobSettingsShrink;
  }
  if (!Util.isUnset(request.resourceSettingsShrink)) {
    body['ResourceSettings'] = request.resourceSettingsShrink;
  }
  if (!Util.isUnset(request.tableMappingsShrink)) {
    body['TableMappings'] = request.tableMappingsShrink;
  }
  if (!Util.isUnset(request.transformationRulesShrink)) {
    body['TransformationRules'] = request.transformationRulesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDIJob',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates a new-version synchronization task. The following type of task is supported: real-time synchronization of all data in a MySQL database to Hologres.
 *
 * @param request UpdateDIJobRequest
 * @return UpdateDIJobResponse
 */
async function updateDIJob(request: UpdateDIJobRequest): UpdateDIJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDIJobWithOptions(request, runtime);
}

model UpdateDIProjectConfigRequest {
  destinationType?: string(name='DestinationType', description='The type of the destinations of the synchronization solutions. This parameter cannot be left empty. Valid values: analyticdb_for_mysql, odps, elasticsearch, holo, mysql, and polardb.

This parameter is required.', example='odps'),
  projectConfig?: string(name='ProjectConfig', description='The new default global configuration of the synchronization solutions. The value indicates the processing rules of different types of DDL messages. The value must be in the JSON format. Example: {"RENAMECOLUMN":"WARNING","DROPTABLE":"WARNING","CREATETABLE":"WARNING","MODIFYCOLUMN":"WARNING","TRUNCATETABLE":"WARNING","DROPCOLUMN":"WARNING","ADDCOLUMN":"WARNING","RENAMETABLE":"WARNING"}.

Field description:

*   RENAMECOLUMN: renames a column.
*   DROPTABLE: deletes a table.
*   CREATETABLE: creates a table.
*   MODIFYCOLUMN: changes the data type of a column.
*   TRUNCATETABLE: clears a table.
*   DROPCOLUMN: deletes a column.
*   ADDCOLUMN: creates a column.
*   RENAMETABLE: renames a table.

DataWorks processes a DDL message of a specific type based on the following rules:

*   WARNING: ignores the message and records an alert in real-time synchronization logs. The alert contains information about the situation that the message is ignored because of an execution error.
*   IGNORE: discards the message and does not send it to the destination.
*   CRITICAL: terminates the real-time synchronization task and sets the node status to Failed.
*   NORMAL: sends the message to the destination to process the message. Each destination processes DDL messages based on its own business logic. If DataWorks adopts the NORMAL policy, DataWorks only forwards DDL messages.

This parameter is required.', example='{"RENAMECOLUMN":"WARNING","DROPTABLE":"WARNING","CREATETABLE":"WARNING","MODIFYCOLUMN":"WARNING","TRUNCATETABLE":"WARNING","DROPCOLUMN":"WARNING","ADDCOLUMN":"WARNING","RENAMETABLE":"WARNING"}'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the workspace ID.

This parameter is required.', example='10000'),
  sourceType?: string(name='SourceType', description='The type of the sources of the synchronization solutions. Valid values: oracle, mysql, polardb, datahub, drds, and analyticdb_for_mysql. If you do not configure this parameter, DataWorks applies the default global configuration to all sources.', example='mysql'),
}

model UpdateDIProjectConfigResponseBody = {
  data?: {
    status?: string(name='Status', description='Indicates whether the default global configuration of synchronization solutions is modified. Valid values:

*   success
*   fail', example='success'),
  }(name='Data', description='The information about the modification.'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateDIProjectConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDIProjectConfigResponseBody(name='body'),
}

/**
 * @summary Modifies the default global configuration of synchronization solutions in a DataWorks workspace.
 *
 * @description DataWorks allows you to specify a default global configuration only for the processing rules of DDL messages in synchronization solutions. After you configure the **processing rules of DDL messages** in synchronization solutions, the configuration is used as the default global configuration and applies to all real-time synchronization tasks in the solutions. You can modify the **processing rules of DDL messages** based on your business requirements. For more information about how to configure a synchronization solution, see [Synchronization solutions](https://help.aliyun.com/document_detail/199008.html).
 *
 * @param request UpdateDIProjectConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDIProjectConfigResponse
 */
async function updateDIProjectConfigWithOptions(request: UpdateDIProjectConfigRequest, runtime: Util.RuntimeOptions): UpdateDIProjectConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.projectConfig)) {
    query['ProjectConfig'] = request.projectConfig;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDIProjectConfig',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Modifies the default global configuration of synchronization solutions in a DataWorks workspace.
 *
 * @description DataWorks allows you to specify a default global configuration only for the processing rules of DDL messages in synchronization solutions. After you configure the **processing rules of DDL messages** in synchronization solutions, the configuration is used as the default global configuration and applies to all real-time synchronization tasks in the solutions. You can modify the **processing rules of DDL messages** based on your business requirements. For more information about how to configure a synchronization solution, see [Synchronization solutions](https://help.aliyun.com/document_detail/199008.html).
 *
 * @param request UpdateDIProjectConfigRequest
 * @return UpdateDIProjectConfigResponse
 */
async function updateDIProjectConfig(request: UpdateDIProjectConfigRequest): UpdateDIProjectConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDIProjectConfigWithOptions(request, runtime);
}

model UpdateDISyncTaskRequest {
  fileId?: long(name='FileId', description='The ID of the data synchronization task. You can call the [ListFiles](https://help.aliyun.com/document_detail/173942.html) operation to query the ID.

This parameter is required.', example='1000000'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the workspace ID. You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
  taskContent?: string(name='TaskContent', description='The updated configurations of the data synchronization task. Calling this API operation to update a data synchronization task is equivalent to updating a data synchronization task by using the code editor in the DataWorks console. For more information, see [Create a synchronization task by using the code editor](https://help.aliyun.com/document_detail/137717.html). You can call the UpdateDISyncTask operation to update only batch synchronization tasks. If you do not need to update the configurations of the data synchronization task, leave this parameter empty.', example='{"type":"job","version":"2.0","steps":[{"stepType":"mysql","parameter":{"envType":1,"datasource":"mysql_pub","column":["id","name","create_time","age","score","t_01"],"connection":[{"datasource":"mysql_pub","table":["u_pk"]}],"where":"","splitPk":"id","encoding":"UTF-8"},"name":"Reader","category":"reader"},{"stepType":"odps","parameter":{"partition":"pt=${bizdate}","truncate":true,"datasource":"odps_first","envType":1,"column":["id","name","create_time","age","score","t_01"],"emptyAsNull":false,"tableComment":"null","table":"u_pk"},"name":"Writer","category":"writer"}],"setting":{"executeMode":null,"errorLimit":{"record":""},"speed":{"concurrent":2,"throttle":false}},"order":{"hops":[{"from":"Reader","to":"Writer"}]}}'),
  taskParam?: string(name='TaskParam', description='The configuration parameters of the data synchronization task. You must configure this parameter in the JSON format.

*   ResourceGroup: the identifier of the resource group for Data Integration that is used by the data synchronization task. You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/173913.html) operation to query the identifier of the resource group.
*   Cu: the specifications occupied by the data synchronization task in the serverless resource group. The value of this parameter must be a multiple of 0.5.', example='{"ResourceGroup":"S_res_group_XXX_XXXX"}'),
  taskType?: string(name='TaskType', description='The type of the data synchronization task. Set the value to DI_OFFLINE. You can call the UpdateDISyncTask operation to update only batch synchronization tasks.

This parameter is required.', example='DI_OFFLINE'),
}

model UpdateDISyncTaskResponseBody = {
  data?: {
    message?: string(name='Message', description='The error message returned if the data synchronization task fails to be updated. If the data synchronization task is successfully updated, the value null is returned for this parameter.', example='ResourceGroup:[S_res_group_XXX] is invalid.'),
    status?: string(name='Status', description='The update status of the data synchronization task. Valid values:

*   success
*   fail', example='success'),
  }(name='Data', description='The information that indicates whether the data synchronization task is updated.'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateDISyncTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDISyncTaskResponseBody(name='body'),
}

/**
 * @summary Updates a data synchronization task.
 *
 * @param request UpdateDISyncTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDISyncTaskResponse
 */
async function updateDISyncTaskWithOptions(request: UpdateDISyncTaskRequest, runtime: Util.RuntimeOptions): UpdateDISyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskContent)) {
    query['TaskContent'] = request.taskContent;
  }
  if (!Util.isUnset(request.taskParam)) {
    query['TaskParam'] = request.taskParam;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDISyncTask',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates a data synchronization task.
 *
 * @param request UpdateDISyncTaskRequest
 * @return UpdateDISyncTaskResponse
 */
async function updateDISyncTask(request: UpdateDISyncTaskRequest): UpdateDISyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDISyncTaskWithOptions(request, runtime);
}

model UpdateDataServiceApiRequest {
  apiDescription?: string(name='ApiDescription', description='The description of the API.

This parameter is required.', example='API description'),
  apiId?: long(name='ApiId', description='The ID of the API.

This parameter is required.', example='10000'),
  apiPath?: string(name='ApiPath', description='The path of the API.

This parameter is required.', example='/test/2'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.

This parameter is required.', example='10001'),
  protocols?: string(name='Protocols', description='The protocol used by the API. Valid values: 0 and 1. The value 0 indicates HTTP. The value 1 indicates HTTPS. You can specify multiple protocols. Separate multiple protocols with commas (,).

This parameter is required.', example='0,1'),
  registrationDetails?: string(name='RegistrationDetails', description='The details of the API generated by registration. For more information, see the RegistrationDetails parameter returned by the [GetDataServiceApi](https://help.aliyun.com/document_detail/174013.html) operation.', example='{"failedResultSample":"fail","registrationErrorCodes":[{"errorCode":"e1","errorMessage":"msg1","errorSolution":"sol1"},{"errorCode":"e2","errorMessage":"msg2","errorSolution":"sol2"}],"registrationRequestParameters":[{"columnName":"","defaultValue":"","exampleValue":"","isRequiredParameter":true,"parameterDataType":0,"parameterDescription":"","parameterName":"id","parameterOperator":0,"parameterPosition":1},{"columnName":"","defaultValue":"xx","exampleValue":"","isRequiredParameter":true,"parameterDataType":0,"parameterDescription":"","parameterName":"cc","parameterOperator":2,"parameterPosition":2}],"serviceContentType":1,"serviceHost":"http://www.baidu.com","servicePath":"/[uid]","serviceRequestBodyDescription":"body","successfulResultSample":"success"}'),
  requestMethod?: int32(name='RequestMethod', description='The request method of the API. Valid values: 0, 1, 2, and 3. The value 0 indicates the GET method. The value 1 indicates the POST method. The value 2 indicates the PUT method. The value 3 indicates the DELETE method. APIs generated in wizard or script mode support the GET and POST methods. APIs generated by registration support the GET, POST, PUT, and DELETE methods.

This parameter is required.', example='0'),
  resourceGroupId?: long(name='ResourceGroupId', description='The ID of the exclusive resource group.', example='3242432423'),
  responseContentType?: int32(name='ResponseContentType', description='The format in which the response of the API request is returned. Valid values: 0 and 1. The value 0 indicates the JSON format. The value 1 indicates the XML format. APIs generated in wizard or script mode support the JSON format. APIs generated by registration support the JSON and XML formats.

This parameter is required.', example='0'),
  scriptDetails?: string(name='ScriptDetails', description='The details of the API generated in script mode. For more information, see the ScriptDetails parameter returned by the [GetDataServiceApi](https://help.aliyun.com/document_detail/174013.html) operation.', example='{"isPagedResponse":false,"script":"select id as id1, name as name1 from person where id=${inputid}","scriptConnection":{"connectionId":122786,"tableName":"person"},"scriptRequestParameters":[{"defaultValue":"","exampleValue":"","isRequiredParameter":true,"parameterDataType":0,"parameterDescription":"","parameterName":"inputid","parameterOperator":0,"parameterPosition":1}],"scriptResponseParameters":[{"exampleValue":"","parameterDataType":0,"parameterDescription":"","parameterName":"id1"},{"exampleValue":"","parameterDataType":0,"parameterDescription":"","parameterName":"name1"}]}'),
  tenantId?: long(name='TenantId', description='The tenant ID. To obtain the tenant ID, perform the following steps: Log on to the [DataWorks console](https://workbench.data.aliyun.com/console). Find your workspace and go to the DataStudio page. On the DataStudio page, click the username for the logon in the upper-right corner and click User Info in the Menu section.', example='10001'),
  timeout?: int32(name='Timeout', description='The timeout period of the API request. Unit: milliseconds. Valid values: (0,30000].

This parameter is required.', example='10000'),
  visibleRange?: int32(name='VisibleRange', description='The scope in which the API is visible. Valid values: 0 and 1. The value 0 indicates that the API is visible within the workspace. The value 1 indicates that the API is visible only to its owner.

This parameter is required.', example='0'),
  wizardDetails?: string(name='WizardDetails', description='The details of the API generated in wizard mode. For more information, see the WizardDetails parameter returned by the [GetDataServiceApi](https://help.aliyun.com/document_detail/174013.html) operation.', example='{"isPagedResponse":true,"wizardConnection":{"connectionId":122786,"tableName":"person"},"wizardRequestParameters":[{"columnName":"id","defaultValue":"","exampleValue":"1","isRequiredParameter":true,"parameterDataType":2,"parameterDescription":"","parameterName":"id","parameterOperator":0,"parameterPosition":0}],"wizardResponseParameters":[{"columnName":"id","exampleValue":"11","parameterDataType":2,"parameterDescription":"","parameterName":"id"}]}'),
}

model UpdateDataServiceApiResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the information about the API was updated.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateDataServiceApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataServiceApiResponseBody(name='body'),
}

/**
 * @summary Updates the information about an API in the development state in DataService Studio.
 *
 * @param request UpdateDataServiceApiRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataServiceApiResponse
 */
async function updateDataServiceApiWithOptions(request: UpdateDataServiceApiRequest, runtime: Util.RuntimeOptions): UpdateDataServiceApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiDescription)) {
    body['ApiDescription'] = request.apiDescription;
  }
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.apiPath)) {
    body['ApiPath'] = request.apiPath;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.protocols)) {
    body['Protocols'] = request.protocols;
  }
  if (!Util.isUnset(request.registrationDetails)) {
    body['RegistrationDetails'] = request.registrationDetails;
  }
  if (!Util.isUnset(request.requestMethod)) {
    body['RequestMethod'] = request.requestMethod;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.responseContentType)) {
    body['ResponseContentType'] = request.responseContentType;
  }
  if (!Util.isUnset(request.scriptDetails)) {
    body['ScriptDetails'] = request.scriptDetails;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.timeout)) {
    body['Timeout'] = request.timeout;
  }
  if (!Util.isUnset(request.visibleRange)) {
    body['VisibleRange'] = request.visibleRange;
  }
  if (!Util.isUnset(request.wizardDetails)) {
    body['WizardDetails'] = request.wizardDetails;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates the information about an API in the development state in DataService Studio.
 *
 * @param request UpdateDataServiceApiRequest
 * @return UpdateDataServiceApiResponse
 */
async function updateDataServiceApi(request: UpdateDataServiceApiRequest): UpdateDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDataServiceApiWithOptions(request, runtime);
}

model UpdateDataSourceRequest {
  content?: string(name='Content', description='The details about the data source. You are not allowed to change the type of the data source. For example, you are not allowed to change the data source type from MaxCompute to MySQL. Examples of details of some common data sources:

*   odps

        {
          "accessId": "xssssss",
          "accessKey": "xsaxsaxsa",
          "authType": 2,
          "endpoint": "http://service.odps.aliyun.com/api",
          "project": "xsaxsax",
          "tag": "public"
        }

*   mysql

        {
          "database": "xsaxsa",
          "instanceName": "rm-xsaxsa",
          "password": "xsaxsa",
          "rdsOwnerId": "xasxsa",
          "regionId": "cn-shanghai",
          "tag": "rds",
          "username": "xsaxsa"
        }

*   rds

        {
          "configType": 1,
          "tag": "rds",
          "database": "xsaxsa",
          "username": "xsaxsa",
          "password": "xssaxsa$32050",
          "instanceName": "rm-xsaxs",
          "rdsOwnerId": "11111111"
        }

*   oss

        {
          "accessId": "sssssxx",
          "accessKey": "xsaxaxsaxs",
          "bucket": "xsa-xs-xs",
          "endpoint": "http://oss-cn-shanghai.aliyuncs.com",
          "tag": "public"
        }

*   sqlserver

        {
          "jdbcUrl": "jdbc:sqlserver://xsaxsa-xsaxsa.database.xxx.cn:123;DatabaseName=xsxs-xsxs",
          "password": "sdasda$fs",
          "tag": "public",
          "username": "sxaxacdacdd"
        }

*   polardb

        {
          "clusterId": "pc-sdadsadsa",
          "database": "dsadsadsa",
          "ownerId": "121212122",
          "password": "sdasdafssa",
          "region": "cn-shanghai",
          "tag": "polardb",
          "username": "asdadsads"
        }

*   oracle

        {
          "jdbcUrl": "jdbc:oracle:saaa:@xxxxx:1521:PROD",
          "password": "sxasaxsa",
          "tag": "public",
          "username": "sasfadfa"
        }

*   mongodb

        {
          "address": "[\\\\"xsaxxsa.mongodb.rds.aliyuncs.com:3717\\\\"]",
          "database": "admin",
          "password": "sadsda@",
          "tag": "public",
          "username": "dsadsadas"
        }

*   emr

        {
          "accessId": "xsaxsa",
          "emrClusterId": "C-dsads",
          "emrResourceQueueName": "default",
          "emrEndpoint": "emr.aliyuncs.com",
          "accessKey": "dsadsad",
          "emrUserId": "224833315798889783",
          "name": "sasdsadsa",
          "emrAccessMode": "simple",
          "region": "cn-shanghai",
          "authType": "2",
          "emrProjectId": "FP-sdadsad"
        }

*   postgresql

        {
          "jdbcUrl": "jdbc:postgresql://xxxx:1921/ssss",
          "password": "sdadsads",
          "tag": "public",
          "username": "sdsasda"
        }

*   analyticdb_for_mysql

        {
          "instanceId": "am-sadsada",
          "database": "xsxsx",
          "username": "xsxsa",
          "password": "asdadsa",
          "connectionString": "am-xssxsxs.ads.aliyuncs.com:3306"
        }

*   hybriddb_for_postgresql

        {
          "connectionString": "gp-xsaxsaxa-master.gpdbmaster.rds.aliyuncs.com",
          "database": "xsaxsaxas",
          "password": "xsaxsaxsa@11",
          "instanceId": "gp-xsaxsaxsa",
          "port": "541132",
          "ownerId": "xsaxsaxsas",
          "username": "sadsad"
        }

*   holo

        {
          "accessId": "xsaxsaxs",
          "accessKey": "xsaxsaxsa",
          "database": "xsaxsaxsa",
          "instanceId": "xsaxa",
          "tag": "aliyun"
        }

*   kafka

        {
          "instanceId": "xsax-cn-xsaxsa",
          "regionId": "cn-shanghai",
          "tag": "aliyun",
          "ownerId": "1212121212112"
        }', example='{"accessId":"xssssss","accessKey":"xsaxsaxsa","authType":2,"endpoint":"http://service.odps.aliyun.com/api","project":"xsaxsax","tag":"public"}'),
  dataSourceId?: long(name='DataSourceId', description='The ID of the data source. You can call the [ListDataSources](https://help.aliyun.com/document_detail/2780072.html) operation to query the ID.

This parameter is required.', example='1'),
  description?: string(name='Description', description='The description of the data source.', example='xxx'),
  envType?: int32(name='EnvType', description='The environment in which the data source resides. Valid values:

*   0: development environment
*   1: production environment', example='1'),
  status?: string(name='Status', description='The status of the data source. This parameter is deprecated. Do not use this parameter.', example='ENABLED'),
}

model UpdateDataSourceResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the data source is updated.', example='true'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc14115159376359****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataSourceResponseBody(name='body'),
}

/**
 * @summary Updates a data source.
 *
 * @param request UpdateDataSourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataSourceResponse
 */
async function updateDataSourceWithOptions(request: UpdateDataSourceRequest, runtime: Util.RuntimeOptions): UpdateDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.dataSourceId)) {
    query['DataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDataSource',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'PUT',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates a data source.
 *
 * @param request UpdateDataSourceRequest
 * @return UpdateDataSourceResponse
 */
async function updateDataSource(request: UpdateDataSourceRequest): UpdateDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDataSourceWithOptions(request, runtime);
}

model UpdateFileRequest {
  advancedSettings?: string(name='AdvancedSettings', description='The advanced configurations of the node.

This parameter is valid only for an EMR Spark Streaming node or an EMR Streaming SQL node. This parameter corresponds to the Advanced Settings tab of the node in the [DataWorks console](https://workbench.data.aliyun.com/console).

This parameter is configured in the JSON format.', example='{"queue":"default","SPARK_CONF":"--conf spark.driver.memory=2g"}'),
  applyScheduleImmediately?: boolean(name='ApplyScheduleImmediately', description='Whether the scheduling configuration takes effect immediately after the release.', example='true'),
  autoParsing?: boolean(name='AutoParsing', description='Specifies whether the automatic parsing feature is enabled for the file. Valid values:

*   true: The automatic parsing feature is enabled for the file.
*   false: The automatic parsing feature is not enabled for the file.

This parameter corresponds to the Analyze Code parameter that is displayed after Same Cycle is selected in the Dependencies section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='true'),
  autoRerunIntervalMillis?: int32(name='AutoRerunIntervalMillis', description='The interval between two consecutive automatic reruns after an error occurs. Unit: milliseconds. Maximum value: 1800000 (30 minutes).

This parameter corresponds to the Rerun Interval parameter that is displayed after the Auto Rerun upon Error check box is selected in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).

The interval that you specify in the DataWorks console is measured in minutes. Pay attention to the conversion between the units of time when you call the operation.', example='120000'),
  autoRerunTimes?: int32(name='AutoRerunTimes', description='The number of automatic reruns that are allowed after an error occurs.', example='3'),
  connectionName?: string(name='ConnectionName', description='The name of the connected data source that is used to run the node. You can call the [ListDataSources](https://help.aliyun.com/document_detail/211431.html) operation to query the available data sources of the workspace.', example='odps_first'),
  content?: string(name='Content', description='The code of the file. The code format varies based on the file type. To view the code format for a specific file type, go to Operation Center, right-click a node of the file type, and then select View Code.', example='SELECT "1";'),
  cronExpress?: string(name='CronExpress', description='The CRON expression that represents the periodic scheduling policy of the node. This parameter corresponds to the Cron Expression parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console). After you configure the Scheduling Cycle and Run At parameters in the DataWorks console, DataWorks automatically generates a value for the Cron Expression parameter.

Examples:

*   CRON expression for a node that is scheduled to run at 05:30 every day: `00 30 05 * * ?`
*   CRON expression for a node that is scheduled to run at the fifteenth minute of each hour: `00 15 * * * ?`
*   CRON expression for a node that is scheduled to run every 10 minutes: `00 00/10 * * * ?`
*   CRON expression for a node that is scheduled to run every 10 minutes from 08:00 to 17:00 every day: `00 00-59/10 8-23 * * * ?`
*   CRON expression for a node that is scheduled to run at 00:20 on the first day of each month: `00 20 00 1 * ?`
*   CRON expression for a node that is scheduled to run every three months starting from 00:10 on January 1: `00 10 00 1 1-12/3 ?`
*   CRON expression for a node that is scheduled to run at 00:05 every Tuesday and Friday: `00 05 00 * * 2,5`

The scheduling system of DataWorks imposes the following limits on CRON expressions:

*   A node can be scheduled to run at a minimum interval of 5 minutes.
*   A node can be scheduled to run at 00:05 every day at the earliest.', example='00 00-59/5 1-23 * * ?'),
  cycleType?: string(name='CycleType', description='The type of the scheduling cycle of the node that corresponds to the file. Valid values: NOT_DAY and DAY. The value NOT_DAY indicates that the node is scheduled to run by minute or hour. The value DAY indicates that the node is scheduled to run by day, week, or month.

This parameter corresponds to the Scheduling Cycle parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='NOT_DAY'),
  dependentNodeIdList?: string(name='DependentNodeIdList', description='The ID of the node on which the node corresponding to the file depends when the DependentType parameter is set to USER_DEFINE. Multiple IDs are separated by commas (,).

The value of this parameter corresponds to the ID of the node that you specified after you select Previous Cycle and set Depend On to Other Nodes in the Dependencies section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='5,10,15,20'),
  dependentType?: string(name='DependentType', description='The type of the cross-cycle scheduling dependency of the node. Valid values:

*   SELF: The instance generated for the node in the current cycle depends on the instance generated for the node in the previous cycle.
*   CHILD: The instance generated for the node in the current cycle depends on the instances generated for the descendant nodes at the nearest level of the node in the previous cycle.
*   USER_DEFINE: The instance generated for the node in the current cycle depends on the instances generated for one or more specified nodes in the previous cycle.
*   NONE: No cross-cycle scheduling dependency type is selected for the node.', example='USER_DEFINE'),
  endEffectDate?: long(name='EndEffectDate', description='The end time of automatic scheduling. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.

This parameter corresponds to the end time specified for the Validity Period parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='4155787800000'),
  fileDescription?: string(name='FileDescription', description='The description of the file.', example='Here is the file description'),
  fileFolderPath?: string(name='FileFolderPath', description='The path of the file.', example='Business_process/First_Business_Process/data_integration/Folder_1/Folder_2'),
  fileId?: long(name='FileId', description='The ID of the file. You can call the [ListFiles](https://help.aliyun.com/document_detail/173942.html) operation to obtain the ID.

This parameter is required.', example='100000001'),
  fileName?: string(name='FileName', description='The name of the file. You can set the FileName parameter to a new value to change the file name.

You can call the [ListFiles](https://help.aliyun.com/document_detail/173942.html) operation to query the ID of the file whose name you want to change. Then, you can set the FileId parameter to the ID and set the FileName parameter to a new value when you call the [UpdateFile](https://help.aliyun.com/document_detail/173951.html) operation.', example='ods_user_info_d'),
  ignoreParentSkipRunningProperty?: boolean(name='IgnoreParentSkipRunningProperty', description='Scheduling configuration-> previous cycle-> whether to skip the upstream empty run attribute.', example='true'),
  inputList?: string(name='InputList', description='The output name of the parent file on which the current file depends. If you specify multiple output names, separate them with commas (,).

This parameter corresponds to the Parent Nodes parameter that is displayed after you select Same Cycle in the Dependencies section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).

>  You must configure this parameter when you call the CreateDISyncTask or UpdateFile operation to create a batch synchronization task.', example='project_root,project.file1,project.001_out'),
  inputParameters?: string(name='InputParameters', description='The input parameters of the node. This parameter is configured in the JSON format. For more information about the input parameters, refer to the InputContextParameterList parameter in the Response parameters section of the [GetFile](https://help.aliyun.com/document_detail/173954.html) operation.

This parameter corresponds to the Input Parameters table in the Input and Output Parameters section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='[{"ValueSource": "project_001.first_node:bizdate_param","ParameterName": "bizdate_input"}]'),
  outputList?: string(name='OutputList', description='The output name of the current file.

This parameter corresponds to the Output Name parameter in the Dependencies section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='dw_project.ods_user_info_d'),
  outputParameters?: string(name='OutputParameters', description='The output parameters of the node. This parameter is configured in the JSON format. For more information about the output parameters, refer to the OutputContextParameterList parameter in the Response parameters section of the [GetFile](https://help.aliyun.com/document_detail/173954.html) operation.

This parameter corresponds to the Output Parameters table in the Input and Output Parameters section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='[{"Type": 1,"Value": "${bizdate}","ParameterName": "bizdate_param"}]'),
  owner?: string(name='Owner', description='The ID of the file owner.', example='18023848927592'),
  paraValue?: string(name='ParaValue', description='The scheduling parameters of the node.

This parameter corresponds to the Parameters section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console). For more information, see [Configure scheduling parameters](https://help.aliyun.com/document_detail/137548.html).', example='x=a y=b z=c'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace Management page to obtain the workspace name.

You must configure this parameter or the ProjectId parameter to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
  rerunMode?: string(name='RerunMode', description='Specifies whether the node that corresponds to the file can be rerun. Valid values:

*   ALL_ALLOWED: The node can be rerun regardless of whether it is successfully run or fails to run.
*   FAILURE_ALLOWED: The node can be rerun only after it fails to run.
*   ALL_DENIED: The node cannot be rerun regardless of whether it is successfully run or fails to run.

This parameter corresponds to the Rerun parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).

Valid values:

*   ALL_ALLOWD
*   FAILURE_ALLOWED
*   ALL_DENIED
*   ALL_ALLOWED', example='ALL_ALLOWED'),
  resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', description='The identifier of the resource group that is used to run the node. You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/173913.html) operation to query the available resource groups in the workspace.', example='default_group'),
  schedulerType?: string(name='SchedulerType', description='The scheduling type of the node. Valid values:

*   NORMAL: The node is an auto triggered node.
*   MANUAL: The node is a manually triggered node. Manually triggered nodes cannot be automatically triggered. They correspond to the nodes in the Manually Triggered Workflows pane.
*   PAUSE: The node is a paused node.
*   SKIP: The node is a dry-run node. Dry-run nodes are started as scheduled, but the system sets the status of the nodes to successful when it starts to run them.', example='NORMAL'),
  startEffectDate?: long(name='StartEffectDate', description='The start time of automatic scheduling. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.

This parameter corresponds to the Validity Period parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='936923400000'),
  startImmediately?: boolean(name='StartImmediately', description='Specifies whether to immediately run a node after the node is deployed to the production environment. Valid values:

*   true: A node is immediately run after the node is deployed to the production environment.
*   false: A node is not immediately run after the node is deployed to the production environment.

This parameter is valid only for an EMR Spark Streaming node or an EMR Streaming SQL node. This parameter corresponds to the Start Method parameter in the Schedule section of the Configure tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='true'),
  stop?: boolean(name='Stop', description='Specifies whether to suspend the scheduling of the node. Valid values:

*   true: suspends the scheduling of the node.
*   false: does not suspend the scheduling of the node.

This parameter corresponds to the Recurrence parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='false'),
  timeout?: int32(name='Timeout', description='The timeout period.', example='1'),
}

model UpdateFileResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFGH-IJKLMNOPQ'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request is successful.
*   false: The request fails.', example='true'),
}

model UpdateFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFileResponseBody(name='body'),
}

/**
 * @summary Updates a file.
 *
 * @description When you debug or call this operation, you must specify new values for the specified parameters to ensure that the values are different from the original configurations of the file. For example, if the original value of a parameter is A, you must change the value of this parameter to B before you commit the node. If you set the parameter to A, an exception that indicates invalid data occurs.
 *
 * @param request UpdateFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateFileResponse
 */
async function updateFileWithOptions(request: UpdateFileRequest, runtime: Util.RuntimeOptions): UpdateFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.advancedSettings)) {
    body['AdvancedSettings'] = request.advancedSettings;
  }
  if (!Util.isUnset(request.applyScheduleImmediately)) {
    body['ApplyScheduleImmediately'] = request.applyScheduleImmediately;
  }
  if (!Util.isUnset(request.autoParsing)) {
    body['AutoParsing'] = request.autoParsing;
  }
  if (!Util.isUnset(request.autoRerunIntervalMillis)) {
    body['AutoRerunIntervalMillis'] = request.autoRerunIntervalMillis;
  }
  if (!Util.isUnset(request.autoRerunTimes)) {
    body['AutoRerunTimes'] = request.autoRerunTimes;
  }
  if (!Util.isUnset(request.connectionName)) {
    body['ConnectionName'] = request.connectionName;
  }
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.cronExpress)) {
    body['CronExpress'] = request.cronExpress;
  }
  if (!Util.isUnset(request.cycleType)) {
    body['CycleType'] = request.cycleType;
  }
  if (!Util.isUnset(request.dependentNodeIdList)) {
    body['DependentNodeIdList'] = request.dependentNodeIdList;
  }
  if (!Util.isUnset(request.dependentType)) {
    body['DependentType'] = request.dependentType;
  }
  if (!Util.isUnset(request.endEffectDate)) {
    body['EndEffectDate'] = request.endEffectDate;
  }
  if (!Util.isUnset(request.fileDescription)) {
    body['FileDescription'] = request.fileDescription;
  }
  if (!Util.isUnset(request.fileFolderPath)) {
    body['FileFolderPath'] = request.fileFolderPath;
  }
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.fileName)) {
    body['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.ignoreParentSkipRunningProperty)) {
    body['IgnoreParentSkipRunningProperty'] = request.ignoreParentSkipRunningProperty;
  }
  if (!Util.isUnset(request.inputList)) {
    body['InputList'] = request.inputList;
  }
  if (!Util.isUnset(request.inputParameters)) {
    body['InputParameters'] = request.inputParameters;
  }
  if (!Util.isUnset(request.outputList)) {
    body['OutputList'] = request.outputList;
  }
  if (!Util.isUnset(request.outputParameters)) {
    body['OutputParameters'] = request.outputParameters;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.paraValue)) {
    body['ParaValue'] = request.paraValue;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.rerunMode)) {
    body['RerunMode'] = request.rerunMode;
  }
  if (!Util.isUnset(request.resourceGroupIdentifier)) {
    body['ResourceGroupIdentifier'] = request.resourceGroupIdentifier;
  }
  if (!Util.isUnset(request.schedulerType)) {
    body['SchedulerType'] = request.schedulerType;
  }
  if (!Util.isUnset(request.startEffectDate)) {
    body['StartEffectDate'] = request.startEffectDate;
  }
  if (!Util.isUnset(request.startImmediately)) {
    body['StartImmediately'] = request.startImmediately;
  }
  if (!Util.isUnset(request.stop)) {
    body['Stop'] = request.stop;
  }
  if (!Util.isUnset(request.timeout)) {
    body['Timeout'] = request.timeout;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates a file.
 *
 * @description When you debug or call this operation, you must specify new values for the specified parameters to ensure that the values are different from the original configurations of the file. For example, if the original value of a parameter is A, you must change the value of this parameter to B before you commit the node. If you set the parameter to A, an exception that indicates invalid data occurs.
 *
 * @param request UpdateFileRequest
 * @return UpdateFileResponse
 */
async function updateFile(request: UpdateFileRequest): UpdateFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFileWithOptions(request, runtime);
}

model UpdateFolderRequest {
  folderId?: string(name='FolderId', description='The ID of the folder. You can call the [ListFolders](https://help.aliyun.com/document_detail/173955.html) operation to query the ID.

This parameter is required.', example='2735c2c19d58'),
  folderName?: string(name='FolderName', description='The name of the folder.

This parameter is required.', example='MySecondFolder'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the ID. You must specify either this parameter or ProjectIdentifier to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Settings panel to obtain the name. You must specify either this parameter or ProjectId to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model UpdateFolderResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model UpdateFolderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFolderResponseBody(name='body'),
}

/**
 * @summary Updates a folder.
 *
 * @param request UpdateFolderRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateFolderResponse
 */
async function updateFolderWithOptions(request: UpdateFolderRequest, runtime: Util.RuntimeOptions): UpdateFolderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderId)) {
    body['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.folderName)) {
    body['FolderName'] = request.folderName;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFolder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates a folder.
 *
 * @param request UpdateFolderRequest
 * @return UpdateFolderResponse
 */
async function updateFolder(request: UpdateFolderRequest): UpdateFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFolderWithOptions(request, runtime);
}

model UpdateIDEEventResultRequest {
  checkResult?: string(name='CheckResult', description='The check status of the extension point event. Valid values:

*   OK: The event passes the check.
*   FAIL: The event fails to pass the check. You must check and handle the reported error at the earliest opportunity to ensure that your program is run as expected.
*   WARN: The event passes the check, but an alert is reported.', example='OK'),
  checkResultTip?: string(name='CheckResultTip', description='The summary information of the check result. The information is displayed in DataStudio. If an alert is reported or the event fails the check, you can troubleshoot errors based on the information.', example='Succeeded'),
  extensionCode?: string(name='ExtensionCode', description='The unique identifier of the extension. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Extensions tab of the Open Platform page to view the identifier.', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
  messageId?: string(name='MessageId', description='The message ID. You can obtain the ID from a received message when an extension point event is triggered.', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
}

model UpdateIDEEventResultResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
}

model UpdateIDEEventResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateIDEEventResultResponseBody(name='body'),
}

/**
 * @summary Returns the check result of an extension point event to DataStudio after the extension point event is triggered during data development and checked by an extension.
 *
 * @param request UpdateIDEEventResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateIDEEventResultResponse
 */
async function updateIDEEventResultWithOptions(request: UpdateIDEEventResultRequest, runtime: Util.RuntimeOptions): UpdateIDEEventResultResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.checkResult)) {
    body['CheckResult'] = request.checkResult;
  }
  if (!Util.isUnset(request.checkResultTip)) {
    body['CheckResultTip'] = request.checkResultTip;
  }
  if (!Util.isUnset(request.extensionCode)) {
    body['ExtensionCode'] = request.extensionCode;
  }
  if (!Util.isUnset(request.messageId)) {
    body['MessageId'] = request.messageId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateIDEEventResult',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Returns the check result of an extension point event to DataStudio after the extension point event is triggered during data development and checked by an extension.
 *
 * @param request UpdateIDEEventResultRequest
 * @return UpdateIDEEventResultResponse
 */
async function updateIDEEventResult(request: UpdateIDEEventResultRequest): UpdateIDEEventResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateIDEEventResultWithOptions(request, runtime);
}

model UpdateMetaCategoryRequest {
  categoryId?: long(name='CategoryId', description='The ID of the category.

This parameter is required.', example='2'),
  comment?: string(name='Comment', description='The remarks of the category.', example='category name'),
  name?: string(name='Name', description='The name of the category.', example='category name'),
}

model UpdateMetaCategoryResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the category is updated.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateMetaCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMetaCategoryResponseBody(name='body'),
}

/**
 * @summary Updates a category.
 *
 * @param request UpdateMetaCategoryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateMetaCategoryResponse
 */
async function updateMetaCategoryWithOptions(request: UpdateMetaCategoryRequest, runtime: Util.RuntimeOptions): UpdateMetaCategoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.categoryId)) {
    body['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMetaCategory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates a category.
 *
 * @param request UpdateMetaCategoryRequest
 * @return UpdateMetaCategoryResponse
 */
async function updateMetaCategory(request: UpdateMetaCategoryRequest): UpdateMetaCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMetaCategoryWithOptions(request, runtime);
}

model UpdateMetaCollectionRequest {
  comment?: string(name='Comment', description='The comment of the collection. The comment must be 1 to 64 characters in length.', example='this is a comment'),
  name?: string(name='Name', description='The name of the collection.', example='myCollectionName'),
  qualifiedName?: string(name='QualifiedName', description='The unique identifier of the collection.

This parameter is required.', example='album.396397'),
}

model UpdateMetaCollectionResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='9999'),
  errorMessage?: string(name='ErrorMessage', description='The returned message.', example='The specified product does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='0000-ABCD-E****'),
  status?: boolean(name='Status', description='The result of the operation. Valid values: true false', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model UpdateMetaCollectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMetaCollectionResponseBody(name='body'),
}

/**
 * @summary Updates the name and comment of a collection.
 *
 * @description Only the name and comment of a collection can be updated.
 *
 * @param request UpdateMetaCollectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateMetaCollectionResponse
 */
async function updateMetaCollectionWithOptions(request: UpdateMetaCollectionRequest, runtime: Util.RuntimeOptions): UpdateMetaCollectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.qualifiedName)) {
    query['QualifiedName'] = request.qualifiedName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMetaCollection',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates the name and comment of a collection.
 *
 * @description Only the name and comment of a collection can be updated.
 *
 * @param request UpdateMetaCollectionRequest
 * @return UpdateMetaCollectionResponse
 */
async function updateMetaCollection(request: UpdateMetaCollectionRequest): UpdateMetaCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMetaCollectionWithOptions(request, runtime);
}

model UpdateMetaTableRequest {
  addedLabels?: string(name='AddedLabels', description='The names of the labels that you want to add. Separate the labels with commas (,).', example='a,b,c'),
  caption?: string(name='Caption', description='The display name of the table.', example='test'),
  categoryId?: long(name='CategoryId', description='The ID of the category that you want to associate.', example='101'),
  envType?: int32(name='EnvType', description='The environment of the DataWorks workspace. Valid values: 0 and 1. The value 0 indicates the development environment. The value 1 indicates the production environment.', example='1'),
  newOwnerId?: string(name='NewOwnerId', description='The new owner ID. If you leave this parameter empty, the owner ID is not updated.', example='12345'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='101'),
  removedLabels?: string(name='RemovedLabels', description='The names of labels that you want to remove. Separate the labels with commas (,).', example='a,b,c'),
  schema?: string(name='Schema', description='The schema information about the table. You must configure this parameter if you enable the three-layer model of MaxCompute.', example='default', nullable=true),
  tableGuid?: string(name='TableGuid', description='The GUID of the table. Specify the GUID in the format of odps.{projectName}.{tableName}.', example='odps.test.table1'),
  tableName?: string(name='TableName', description='The name of the table.', example='table1'),
  visibility?: int32(name='Visibility', description='The scope in which the table is visible. Valid values: 0, 1, and 2. The value 0 indicates that the table is invisible to all members. The value 1 indicates that the table is visible to all members. The value 2 indicates that the table is visible to workspace members.', example='1'),
}

model UpdateMetaTableResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='abcde'),
  updateResult?: boolean(name='UpdateResult', description='Indicates whether the metadata information about the table was updated.', example='true'),
}

model UpdateMetaTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMetaTableResponseBody(name='body'),
}

/**
 * @summary Updates the metadata information about a table. Only MaxCompute tables are supported.
 *
 * @param request UpdateMetaTableRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateMetaTableResponse
 */
async function updateMetaTableWithOptions(request: UpdateMetaTableRequest, runtime: Util.RuntimeOptions): UpdateMetaTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.caption)) {
    query['Caption'] = request.caption;
  }
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.newOwnerId)) {
    query['NewOwnerId'] = request.newOwnerId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.visibility)) {
    query['Visibility'] = request.visibility;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.addedLabels)) {
    body['AddedLabels'] = request.addedLabels;
  }
  if (!Util.isUnset(request.removedLabels)) {
    body['RemovedLabels'] = request.removedLabels;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMetaTable',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates the metadata information about a table. Only MaxCompute tables are supported.
 *
 * @param request UpdateMetaTableRequest
 * @return UpdateMetaTableResponse
 */
async function updateMetaTable(request: UpdateMetaTableRequest): UpdateMetaTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMetaTableWithOptions(request, runtime);
}

model UpdateMetaTableIntroWikiRequest {
  content?: string(name='Content', description='The details of the instructions on how to use the metatable.

This parameter is required.', example='abc'),
  tableGuid?: string(name='TableGuid', description='The GUID of the table. Specify the GUID in the odps.{projectName}.{tableName} format.

This parameter is required.', example='odps.test.table1'),
}

model UpdateMetaTableIntroWikiResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can troubleshoot issues based on the ID.', example='abcde'),
  updateResult?: boolean(name='UpdateResult', description='Indicates whether the instructions on how to use the table are updated.', example='true'),
}

model UpdateMetaTableIntroWikiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMetaTableIntroWikiResponseBody(name='body'),
}

/**
 * @summary Updates the instructions on how to use a table. If no instruction on how to use the table is available, the instructions that are configured by calling this operation are added.
 *
 * @param request UpdateMetaTableIntroWikiRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateMetaTableIntroWikiResponse
 */
async function updateMetaTableIntroWikiWithOptions(request: UpdateMetaTableIntroWikiRequest, runtime: Util.RuntimeOptions): UpdateMetaTableIntroWikiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMetaTableIntroWiki',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates the instructions on how to use a table. If no instruction on how to use the table is available, the instructions that are configured by calling this operation are added.
 *
 * @param request UpdateMetaTableIntroWikiRequest
 * @return UpdateMetaTableIntroWikiResponse
 */
async function updateMetaTableIntroWiki(request: UpdateMetaTableIntroWikiRequest): UpdateMetaTableIntroWikiResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMetaTableIntroWikiWithOptions(request, runtime);
}

model UpdateNodeOwnerRequest {
  nodeId?: long(name='NodeId', description='The node ID. You can call the [ListNodes](https://help.aliyun.com/document_detail/173979.html) operation to query the node ID.

This parameter is required.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The environment in which the node runs. Valid values: DEV and PROD. The value DEV indicates the development environment, and the value PROD indicates the production environment.

*   PROD
*   DEV

This parameter is required.', example='PROD'),
  userId?: string(name='UserId', description='The ID of the Alibaba Cloud account used by the node owner. You can log on to the DataWorks console and move the pointer over the profile picture in the upper-right corner to view the ID.

This parameter is required.', example='19337906836551'),
}

model UpdateNodeOwnerResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the request ID to query logs and troubleshoot issues.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateNodeOwnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateNodeOwnerResponseBody(name='body'),
}

/**
 * @summary Changes the owner of a node.
 *
 * @param request UpdateNodeOwnerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateNodeOwnerResponse
 */
async function updateNodeOwnerWithOptions(request: UpdateNodeOwnerRequest, runtime: Util.RuntimeOptions): UpdateNodeOwnerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateNodeOwner',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Changes the owner of a node.
 *
 * @param request UpdateNodeOwnerRequest
 * @return UpdateNodeOwnerResponse
 */
async function updateNodeOwner(request: UpdateNodeOwnerRequest): UpdateNodeOwnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNodeOwnerWithOptions(request, runtime);
}

model UpdateNodeRunModeRequest {
  nodeId?: long(name='NodeId', description='The node ID. You can call the [ListNodes](https://help.aliyun.com/document_detail/173979.html) operation to query the node ID.

This parameter is required.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The environment in which the node runs. Valid values: DEV and PROD. The value DEV indicates the development environment, and the value PROD indicates the production environment.

*   PROD
*   DEV

This parameter is required.', example='PROD'),
  schedulerType?: int32(name='SchedulerType', description='The operation that you want to perform on the node. Valid values:

*   0: indicates that you want to unfreeze the node.
*   2: indicates that you want to freeze the node.

This parameter is required.', example='0'),
}

model UpdateNodeRunModeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateNodeRunModeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateNodeRunModeResponseBody(name='body'),
}

/**
 * @summary Freezes or unfreezes a node.
 *
 * @param request UpdateNodeRunModeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateNodeRunModeResponse
 */
async function updateNodeRunModeWithOptions(request: UpdateNodeRunModeRequest, runtime: Util.RuntimeOptions): UpdateNodeRunModeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.schedulerType)) {
    body['SchedulerType'] = request.schedulerType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateNodeRunMode',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Freezes or unfreezes a node.
 *
 * @param request UpdateNodeRunModeRequest
 * @return UpdateNodeRunModeResponse
 */
async function updateNodeRunMode(request: UpdateNodeRunModeRequest): UpdateNodeRunModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNodeRunModeWithOptions(request, runtime);
}

model UpdateQualityFollowerRequest {
  alarmMode?: int32(name='AlarmMode', description='The notification method. Valid values: 1, 2, 4, 5, 6, 7, 8, and 9. The value 1 indicates that the notification is sent by email. The value 2 indicates that the notification is sent by email and text message. The value 4 indicates that the notification is sent by a DingTalk chatbot. The value 5 indicates that the notification is sent by a DingTalk chatbot to all members in a DingTalk group. The value 6 indicates that the notification is sent by Lark. The value 7 indicates that the notification is sent by WeCom. The value 8 indicates that the notification is sent by webhook. The value 9 indicates that the notification is sent by phone call.

This parameter is required.', example='2'),
  follower?: string(name='Follower', description='The name of the subscriber.

This parameter is required.', example='1912232****'),
  followerId?: long(name='FollowerId', description='The ID of the subscription relationship.

This parameter is required.', example='1234'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the DataWorks console to obtain the workspace ID.', example='123'),
  projectName?: string(name='ProjectName', description='The name of the compute engine or data source.

This parameter is required.', example='autotest'),
}

model UpdateQualityFollowerResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the update is successful.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='401'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='You have no permission'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='576b9457-2cf5-4****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateQualityFollowerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateQualityFollowerResponseBody(name='body'),
}

/**
 * @summary Updates a subscription relationship.
 *
 * @param request UpdateQualityFollowerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateQualityFollowerResponse
 */
async function updateQualityFollowerWithOptions(request: UpdateQualityFollowerRequest, runtime: Util.RuntimeOptions): UpdateQualityFollowerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alarmMode)) {
    body['AlarmMode'] = request.alarmMode;
  }
  if (!Util.isUnset(request.follower)) {
    body['Follower'] = request.follower;
  }
  if (!Util.isUnset(request.followerId)) {
    body['FollowerId'] = request.followerId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateQualityFollower',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates a subscription relationship.
 *
 * @param request UpdateQualityFollowerRequest
 * @return UpdateQualityFollowerResponse
 */
async function updateQualityFollower(request: UpdateQualityFollowerRequest): UpdateQualityFollowerResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateQualityFollowerWithOptions(request, runtime);
}

model UpdateQualityRuleRequest {
  blockType?: int32(name='BlockType', description='The strength of the monitoring rule. The strength of a monitoring rule indicates the importance of the rule. Valid values:

*   1: indicates that the monitoring rule is a strong rule.
*   0: indicates that the monitoring rule is a weak rule. You can specify whether a monitoring rule is a strong rule based on your business requirements. If a monitoring rule is a strong rule and the critical threshold is exceeded, a critical alert is reported and nodes that are associated with the rule are blocked from running.', example='0'),
  checker?: int32(name='Checker', description='The checker ID. Valid values: 2: indicates that the current value is compared with the average value of the previous 7 days. 3: indicates that the current value is compared with the average value of the previous 30 days. 4: indicates that the current value is compared with the value 1 day earlier. 5: indicates that the current value is compared with the value 7 days earlier. 6: indicates that the current value is compared with the value 30 days earlier. 7: indicates the variance between the current value and the value 7 days earlier. 8: indicates the variance between the current value and the value 30 days earlier. 9: indicates that the current value is compared with a fixed value. 10: indicates that the current value is compared with the value 1, 7, or 30 days earlier. 11: indicates that the current value is compared with the value of the previous cycle. You can call the [ListQualityRules](https://help.aliyun.com/document_detail/173995.html) operation to query the ID.', example='9'),
  comment?: string(name='Comment', description='The description of the monitoring rule.', example='Verify the number of table rows'),
  criticalThreshold?: string(name='CriticalThreshold', description='The threshold for a critical alert. The threshold indicates the deviation of the monitoring result from the expected value. You can specify a custom value for the threshold based on your business requirements. If a monitoring rule is a strong rule and the critical threshold is exceeded, a critical alert is reported and tasks that are associated with the rule are blocked from running.', example='10'),
  entityId?: long(name='EntityId', description='The ID of the partition filter expression. You can call the [ListQualityRules](https://help.aliyun.com/document_detail/173995.html) operation to obtain the ID of the partition filter expression.', example='123'),
  expectValue?: string(name='ExpectValue', description='The expected value of the monitoring rule.', example='300'),
  id?: long(name='Id', description='The monitoring rule ID. You can call the [ListQualityRules](https://help.aliyun.com/document_detail/173995.html) operation to query the ID of the monitoring rule.

This parameter is required.', example='1234'),
  methodName?: string(name='MethodName', description='The method that is used to collect sample data, such as avg, count, sum, min, max, count_distinct, user_defined, table_count, table_size, table_dt_load_count, table_dt_refuseload_count, null_value, null_value/table_count, (table_count-count_distinct)/table_count, or table_count-count_distinct.

This parameter is required.', example='table_count'),
  openSwitch?: boolean(name='OpenSwitch', description='Specifies whether to enable the monitoring rule in the production environment. Valid values:

*   true: The monitoring rule is triggered when the associated auto triggered node that generates the output data starts to run.
*   false: The monitoring rule is not triggered when the associated auto triggered node that generates the output data starts to run.', example='true', nullable=false),
  operator?: string(name='Operator', description='The comparison operator, such as >, >=, =, ≠, <, or <=.

>  If you set the Checker parameter to 9, you must configure the Operator parameter.', example='>'),
  predictType?: int32(name='PredictType', description='Specifies whether the threshold is a dynamic threshold. Valid values:

*   0: The threshold is not a dynamic threshold.
*   2: The threshold is a dynamic threshold.', example='0'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='26'),
  projectName?: string(name='ProjectName', description='The name of the compute engine or data source. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the name of the compute engine or data source.

This parameter is required.', example='autotest'),
  property?: string(name='Property', description='The name of the field.

This parameter is required.', example='id'),
  propertyType?: string(name='PropertyType', description='The data type of the field.', example='bigint'),
  ruleName?: string(name='RuleName', description='The name of the monitoring rule.', example='123'),
  ruleType?: int32(name='RuleType', description='The type of the monitoring rule. Valid values:

*   0: The monitoring rule is created by the system.
*   1: The monitoring rule is created by a user.
*   2: The monitoring rule is a workspace-level rule.', example='0'),
  taskSetting?: string(name='TaskSetting', description='The variable settings inserted before the custom rule. Format: x=a,y=b.', example='x=a,y=b'),
  templateId?: int32(name='TemplateId', description='The ID of the monitoring template. You can call the [ListQualityRules](https://help.aliyun.com/document_detail/173995.html) operation to obtain the ID of the monitoring template.', example='7'),
  trend?: string(name='Trend', description='The trend of the monitoring result. Valid values:

*   up: increasing
*   down: decreasing
*   abs: absolute value', example='up'),
  warningThreshold?: string(name='WarningThreshold', description='The threshold for a warning alert. The threshold specifies the deviation of the monitoring result from the expected value. You can specify a custom value for the threshold based on your business requirements.', example='5'),
  whereCondition?: string(name='WhereCondition', description='The filter condition or custom SQL statement that is used for monitoring.', example='dt=$[yyyymmdd]'),
}

model UpdateQualityRuleResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the monitoring rule is updated.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='0'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can troubleshoot issues based on the ID.', example='576b9457-2cf5-4****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateQualityRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateQualityRuleResponseBody(name='body'),
}

/**
 * @summary Updates a monitoring rule.
 *
 * @param request UpdateQualityRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateQualityRuleResponse
 */
async function updateQualityRuleWithOptions(request: UpdateQualityRuleRequest, runtime: Util.RuntimeOptions): UpdateQualityRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.blockType)) {
    body['BlockType'] = request.blockType;
  }
  if (!Util.isUnset(request.checker)) {
    body['Checker'] = request.checker;
  }
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.criticalThreshold)) {
    body['CriticalThreshold'] = request.criticalThreshold;
  }
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.expectValue)) {
    body['ExpectValue'] = request.expectValue;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.methodName)) {
    body['MethodName'] = request.methodName;
  }
  if (!Util.isUnset(request.openSwitch)) {
    body['OpenSwitch'] = request.openSwitch;
  }
  if (!Util.isUnset(request.operator)) {
    body['Operator'] = request.operator;
  }
  if (!Util.isUnset(request.predictType)) {
    body['PredictType'] = request.predictType;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.property)) {
    body['Property'] = request.property;
  }
  if (!Util.isUnset(request.propertyType)) {
    body['PropertyType'] = request.propertyType;
  }
  if (!Util.isUnset(request.ruleName)) {
    body['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.ruleType)) {
    body['RuleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.taskSetting)) {
    body['TaskSetting'] = request.taskSetting;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.trend)) {
    body['Trend'] = request.trend;
  }
  if (!Util.isUnset(request.warningThreshold)) {
    body['WarningThreshold'] = request.warningThreshold;
  }
  if (!Util.isUnset(request.whereCondition)) {
    body['WhereCondition'] = request.whereCondition;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateQualityRule',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates a monitoring rule.
 *
 * @param request UpdateQualityRuleRequest
 * @return UpdateQualityRuleResponse
 */
async function updateQualityRule(request: UpdateQualityRuleRequest): UpdateQualityRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateQualityRuleWithOptions(request, runtime);
}

model UpdateRemindRequest {
  alertInterval?: int32(name='AlertInterval', description='The intervals at which alert notifications are sent. Unit: seconds. Minimum value: 1200. Default value: 1800.', example='1800'),
  alertMethods?: string(name='AlertMethods', description='The notification method. Valid values:

*   MAIL: Alert notifications are sent by email.
*   SMS: Alert notifications are sent by text message.
*   PHONE: Alert notifications are sent by phone call. You can use this notification method only in DataWorks Professional Edition or more advanced editions.
*   DINGROBOTS: Alert notifications are sent by DingTalk message. You can use this notification method only if the RobotUrls parameter is configured.
*   WEBHOOKS (WeCom or Lark chatbot): Alert notifications are sent by WeCom or Lark message. You can use this notification method only if the Webhooks parameter is configured.

Multiple notification methods are separated by commas (,).', example='SMS,MAIL'),
  alertTargets?: string(name='AlertTargets', description='The value format required by this parameter varies based on the value that you specify for the AlertUnit parameter. Take note of the following items:

*   If the AlertUnit parameter is set to OWNER, leave this parameter empty.
*   If the AlertUnit parameter is set to OTHER, set this parameter to the unique ID (UID) of the specified user. You can specify multiple UIDs. Separate them with commas (,). A maximum of 10 UIDs can be specified for receiving alert notifications.', example='9527952795279527'),
  alertUnit?: string(name='AlertUnit', description='The recipient to whom alert notifications are sent. Valid values: OWNER and OTHER. The value OWNER indicates that alert notifications are sent to the object owner. The value OTHER indicates that alert notifications are sent to a specified user.', example='OWNER'),
  baselineIds?: string(name='BaselineIds', description='The ID of the baseline to which the custom alert rule is applied. A maximum of 5 baselines can be specified for a custom alert rule. You can specify multiple IDs. Separate multiple IDs with commas (,). This parameter takes effect when you set the RemindUnit parameter to BASELINE.', example='1,2,3'),
  bizProcessIds?: string(name='BizProcessIds', description='The ID of the workflow to which the custom alert rule is applied. A maximum of 5 workflows can be specified for a custom alert rule. You can specify multiple IDs. Separate multiple IDs with commas (,). This parameter takes effect when you set the RemindUnit parameter to BIZPROCESS.', example='1,2,3'),
  detail?: string(name='Detail', description='The details of the conditions that trigger an alert.

*   If the RemindType parameter is set to FINISHED, leave this parameter empty.
*   If the RemindType parameter is set to UNFINISHED, set this parameter to key-value pairs. Example: {"hour":23,"minu":59}. Valid values of hour: [0,47]. Valid values of minu: [0,59].
*   If the RemindType parameter is set to ERROR, leave this parameter empty.
*   If the RemindType parameter is set to CYCLE_UNFINISHED, set this parameter to key-value pairs in the JSON format. Example: {"1":"05:50","2":"06:50","3":"07:50","4":"08:50","5":"09:50","6":"10:50","7":"11:50","8":"12:50","9":"13:50","10":"14:50","11":"15:50","12":"16:50","13":"17:50","14":"18:50","15":"19:50","16":"20:50","17":"21:50","18":"22:50","19":"23:50","20":"24:50","21":"25:50"}. A key in the JSON string indicates the sequence number of a cycle. Valid values of keys: 1 to 288. A value in the JSON string indicates the time in point when a monitored instance times out in the relevant cycle. Values must be in the format of hh:mm. Valid values of hh: [0,47]. Valid values of mm: [0,59].
*   If the RemindType parameter is set to TIMEOUT, set this parameter to the timeout period. Unit: seconds. Example: 1800. This indicates that an alert notification is sent if the running duration of a monitored instance exceeds 30 minutes.', example='{"hour":23,"minu":59}'),
  dndEnd?: string(name='DndEnd', description='The end of the period during which no alert notifications are sent. Specify the time in the hh:mm format. Valid values of hh: [0,23]. Valid values of mm: [0,59].', example='08:00'),
  maxAlertTimes?: int32(name='MaxAlertTimes', description='The maximum number of alerts. Valid values: 1 to 10. Default value: 3.', example='3'),
  nodeIds?: string(name='NodeIds', description='The ID of the node to which the custom alert rule is applied. A maximum of 50 nodes can be specified for a custom alert rule. You can specify multiple IDs. Separate multiple IDs with commas (,). This parameter takes effect when you set the RemindUnit parameter to NODE.', example='1,2,3'),
  projectId?: long(name='ProjectId', description='The ID of the workspace to which the custom alert rule is applied. You can specify only one workspace for a custom alert rule. This parameter takes effect when you set the RemindUnit parameter to PROJECT.', example='1234'),
  remindId?: long(name='RemindId', description='The custom alert rule ID.

This parameter is required.', example='1234'),
  remindName?: string(name='RemindName', description='The name of the custom alert rule. The name cannot exceed 128 characters in length.', example='update_remindname'),
  remindType?: string(name='RemindType', description='The condition that triggers the alert rule. Valid values:

*   FINISHED: The system monitors an instance when it starts to run and sends an alert notification after the running of the instance is complete.
*   UNFINISHED: The system monitors an instance when it starts to run and sends an alert notification if the instance is still running at the specified point in time.
*   ERROR: The system monitors an instance when it starts to run and sends an alert notification if an error occurs.
*   CYCLE_UNFINISHED: The system sends an alert notification if a monitored instance is still running at the end of the specified cycle. In most cases, you can configure this trigger condition for node instances that are scheduled to run by hour.
*   TIMEOUT: The system monitors an instance when it starts to run and sends an alert notification if the instance is still running after the specified period ends. In most cases, you can configure this trigger condition to monitor the running duration of node instances.

For more information, see [Manage custom alert rules](https://help.aliyun.com/document_detail/138172.html).', example='FINISHED'),
  remindUnit?: string(name='RemindUnit', description='The type of the object to which the custom alert rule is applied. Valid values:

*   NODE
*   BASELINE
*   PROJECT
*   BIZPROCESS', example='NODE'),
  robotUrls?: string(name='RobotUrls', description='The webhook URL of the DingTalk chatbot. You can specify multiple webhook URLs. Separate multiple webhook URLs with commas (,). If this parameter is set to undefined, the specified webhook URLs are cleared.', example='https://oapi.dingtalk.com/robot/send?access_token=******************************'),
  useFlag?: boolean(name='UseFlag', description='Specifies whether to enable the alert rule. Valid values:

*   true
*   false', example='true'),
  webhooks?: string(name='Webhooks', description='The webhook URL of the WeCom or Lark chatbot. You can specify multiple webhook URLs. Separate multiple webhook URLs with commas (,). The value of AlertMethods must include WEBHOOKS. If this parameter is set to undefined, the specified webhook URLs are cleared.

Only DataWorks Enterprise Edition supports this parameter. The webhook URL-based alerting feature is supported in the following regions: China (Shanghai), China (Chengdu), China (Zhangjiakou), China (Beijing), China (Hangzhou), China (Shenzhen), China (Hong Kong), Germany (Frankfurt), and Singapore.', example='https://open.feishu.cn/open-apis/bot/v2/hook/*******'),
}

model UpdateRemindResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the modification to the custom alert rule succeeds.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateRemindResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRemindResponseBody(name='body'),
}

/**
 * @summary Modifies a custom alert rule.
 *
 * @param request UpdateRemindRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateRemindResponse
 */
async function updateRemindWithOptions(request: UpdateRemindRequest, runtime: Util.RuntimeOptions): UpdateRemindResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertInterval)) {
    body['AlertInterval'] = request.alertInterval;
  }
  if (!Util.isUnset(request.alertMethods)) {
    body['AlertMethods'] = request.alertMethods;
  }
  if (!Util.isUnset(request.alertTargets)) {
    body['AlertTargets'] = request.alertTargets;
  }
  if (!Util.isUnset(request.alertUnit)) {
    body['AlertUnit'] = request.alertUnit;
  }
  if (!Util.isUnset(request.baselineIds)) {
    body['BaselineIds'] = request.baselineIds;
  }
  if (!Util.isUnset(request.bizProcessIds)) {
    body['BizProcessIds'] = request.bizProcessIds;
  }
  if (!Util.isUnset(request.detail)) {
    body['Detail'] = request.detail;
  }
  if (!Util.isUnset(request.dndEnd)) {
    body['DndEnd'] = request.dndEnd;
  }
  if (!Util.isUnset(request.maxAlertTimes)) {
    body['MaxAlertTimes'] = request.maxAlertTimes;
  }
  if (!Util.isUnset(request.nodeIds)) {
    body['NodeIds'] = request.nodeIds;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.remindId)) {
    body['RemindId'] = request.remindId;
  }
  if (!Util.isUnset(request.remindName)) {
    body['RemindName'] = request.remindName;
  }
  if (!Util.isUnset(request.remindType)) {
    body['RemindType'] = request.remindType;
  }
  if (!Util.isUnset(request.remindUnit)) {
    body['RemindUnit'] = request.remindUnit;
  }
  if (!Util.isUnset(request.robotUrls)) {
    body['RobotUrls'] = request.robotUrls;
  }
  if (!Util.isUnset(request.useFlag)) {
    body['UseFlag'] = request.useFlag;
  }
  if (!Util.isUnset(request.webhooks)) {
    body['Webhooks'] = request.webhooks;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRemind',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Modifies a custom alert rule.
 *
 * @param request UpdateRemindRequest
 * @return UpdateRemindResponse
 */
async function updateRemind(request: UpdateRemindRequest): UpdateRemindResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRemindWithOptions(request, runtime);
}

model UpdateTableRequest {
  appGuid?: string(name='AppGuid', description='The unique identifier of the MaxCompute project. Specify the GUID in the odps.{projectName} format.', example='odps.test'),
  categoryId?: long(name='CategoryId', description='The ID of the associated category.', example='101'),
  columns?: [ 
    {
      columnName?: string(name='ColumnName', description='The name of the field.

This parameter is required.', example='abc'),
      columnNameCn?: string(name='ColumnNameCn', description='The display name of the field.', example='名称'),
      columnType?: string(name='ColumnType', description='The type of the field. For more information, see MaxCompute field types.

This parameter is required.', example='string'),
      comment?: string(name='Comment', description='The comment of the field.', example='comment'),
      isPartitionCol?: boolean(name='IsPartitionCol', description='Specifies whether the field is a partition field. Valid values: 0 and 1. The value 0 indicates that the field is not a partition field. The value 1 indicates that the field is a partition field.', example='0'),
      length?: int32(name='Length', description='The length of the field.', example='10'),
      seqNumber?: int32(name='SeqNumber', description='The sequence number of the field. If the field is a partition field, this parameter is not supported.', example='1'),
    }
  ](name='Columns', description='The list of fields.'),
  comment?: string(name='Comment', description='The comment.', example='comment'),
  createIfNotExists?: boolean(name='CreateIfNotExists', description='Specifies whether the table exists. Valid values:

*   true: The table exists.
*   false: The table does not exist.

This parameter is deprecated. Do not use this parameter.', example='true'),
  endpoint?: string(name='Endpoint', description='The endpoint of MaxCompute. If you do not specify this parameter, the endpoint of the MaxCompute project is used.', example='odps://'),
  envType?: int32(name='EnvType', description='The environment of the DataWorks workspace. Valid values: 0 and 1. The value 0 indicates the development environment. The value 1 indicates the production environment.', example='1'),
  externalTableType?: string(name='ExternalTableType', description='The type of the external table. Valid values: 0, 1, 2, and 3. The value 0 indicates that the external table is an OSS external table. The value 1 indicates that the external table is a Tablestore external table. The value 2 indicates that the external table is a volume external table. The value 3 indicates that the external table is a MySQL external table. This parameter is deprecated. Do not use this parameter.', example='1'),
  hasPart?: int32(name='HasPart', description='Specifies whether the table that you want to update is a partitioned table. Valid values: 0 and 1. The value 0 indicates that the table is not a partitioned table. The value 1 indicates that the table is a partitioned table. This parameter is deprecated. Do not use this parameter. The Column.N.isPartitionCol parameter is used instead of the HasPart parameter to specify whether the MaxCompute table is a partitioned table. If the Column.N.isPartitionCol parameter is set to 1, the MaxCompute table is a partitioned table.', example='0'),
  isView?: int32(name='IsView', description='Specifies whether the table is a view. Valid values: 0 and 1. The value 0 indicates that the table is not a view. The value 1 indicates that the table is a view. This parameter is deprecated. Do not use this parameter.', example='0'),
  lifeCycle?: int32(name='LifeCycle', description='The lifecycle of the table. Unit: days. If this parameter is left empty, the table is permanently stored.', example='10'),
  location?: string(name='Location', description='The storage location of the external table. This parameter is deprecated. Do not use this parameter.', example='location'),
  logicalLevelId?: long(name='LogicalLevelId', description='The ID of the logical level.', example='101'),
  ownerId?: string(name='OwnerId'),
  physicsLevelId?: long(name='PhysicsLevelId', description='The ID of the physical layer.', example='101'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the DataWorks console to obtain the ID of the DataWorks workspace.', example='101'),
  schema?: string(name='Schema', description='The schema information of the table. You need to enter the schema information of the table if you enable the table schema in MaxCompute.', example='default', nullable=true),
  tableName?: string(name='TableName', description='The name of the MaxCompute table.

This parameter is required.', example='abc'),
  themes?: [ 
    {
      themeId?: long(name='ThemeId', description='The ID of the associated topic.', example='101'),
      themeLevel?: int32(name='ThemeLevel', description='The level that corresponds to the topic ID.', example='101'),
    }
  ](name='Themes', description='The list of fields.'),
  visibility?: int32(name='Visibility', description='The scope in which the table is visible. Valid values: 0, 1, and 2. The value 0 indicates that the table is invisible to all workspace members. The value 1 indicates that the table is visible to all workspace members. The value 2 indicates that the table is visible to workspace members.', example='1'),
}

model UpdateTableResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='abcde'),
  taskInfo?: {
    content?: string(name='Content', description='The details about the status of the current subtask. Valid values:

*   If the current subtask is successful, success is returned.
*   If the current subtask fails, the error details are displayed.', example='success'),
    nextTaskId?: string(name='NextTaskId', description='The ID of the subtask that you want to run. If this parameter is left empty, all subtasks are complete. You can call the [GetDDLJobStatus](https://help.aliyun.com/document_detail/185659.html) operation to query the status of the subtask based on the subtask ID.', example='abc1'),
    status?: string(name='Status', description='The status of the current subtask. Valid values:

*   operating: The subtask is running.
*   success: The subtask succeeds.
*   failure: The subtask fails to run. For more information about the error details, see the Content parameter.', example='success'),
    taskId?: string(name='TaskId', description='The ID of the current subtask.', example='abc'),
  }(name='TaskInfo', description='The information about the request task. After a request task is submitted, it is divided into multiple subtasks that are run in sequence. After the current subtask is complete, the next subtask starts to run. After all subtasks are complete, the request task is complete. If a request task is terminated due to one of the following issues, address the issue based on the error code and initiate the request task again:

*   The request task fails to be submitted.
*   After the request task is submitted, a subtask fails to run.'),
}

model UpdateTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTableResponseBody(name='body'),
}

/**
 * @summary Updates a MaxCompute table.
 *
 * @param request UpdateTableRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateTableResponse
 */
async function updateTableWithOptions(request: UpdateTableRequest, runtime: Util.RuntimeOptions): UpdateTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appGuid)) {
    query['AppGuid'] = request.appGuid;
  }
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.createIfNotExists)) {
    query['CreateIfNotExists'] = request.createIfNotExists;
  }
  if (!Util.isUnset(request.externalTableType)) {
    query['ExternalTableType'] = request.externalTableType;
  }
  if (!Util.isUnset(request.hasPart)) {
    query['HasPart'] = request.hasPart;
  }
  if (!Util.isUnset(request.isView)) {
    query['IsView'] = request.isView;
  }
  if (!Util.isUnset(request.lifeCycle)) {
    query['LifeCycle'] = request.lifeCycle;
  }
  if (!Util.isUnset(request.location)) {
    query['Location'] = request.location;
  }
  if (!Util.isUnset(request.logicalLevelId)) {
    query['LogicalLevelId'] = request.logicalLevelId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.physicsLevelId)) {
    query['PhysicsLevelId'] = request.physicsLevelId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.visibility)) {
    query['Visibility'] = request.visibility;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.columns)) {
    body['Columns'] = request.columns;
  }
  if (!Util.isUnset(request.endpoint)) {
    body['Endpoint'] = request.endpoint;
  }
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.themes)) {
    body['Themes'] = request.themes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTable',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates a MaxCompute table.
 *
 * @param request UpdateTableRequest
 * @return UpdateTableResponse
 */
async function updateTable(request: UpdateTableRequest): UpdateTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTableWithOptions(request, runtime);
}

model UpdateTableAddColumnRequest {
  column?: [ 
    {
      columnName?: string(name='ColumnName', description='The name of the field.

This parameter is required.', example='abc'),
      columnNameCn?: string(name='ColumnNameCn', description='The display name of the field.', example='Chinese'),
      columnType?: string(name='ColumnType', description='The type of the field. For more information, see MaxCompute field types.

This parameter is required.', example='string'),
      comment?: string(name='Comment', description='The comment of the field.', example='Remarks'),
    }
  ](name='Column', description='The fields.

This parameter is required.'),
  tableGuid?: string(name='TableGuid', description='The globally unique identifier (GUID) of the MaxCompute table. Specify the GUID in the odps.projectName.tableName format.

This parameter is required.', example='odps.engine_name.table_name'),
}

model UpdateTableAddColumnResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='abc'),
  taskInfo?: {
    content?: string(name='Content', description='The details about the status of the current subtask.

*   If the current subtask is successful, success is returned.
*   If the current subtask fails, the error details are displayed.', example='success'),
    nextTaskId?: string(name='NextTaskId', description='The ID of the subtask that you want to run. If this parameter is left empty, all subtasks are complete.', example='abc1'),
    status?: string(name='Status', description='The status of the current subtask. Valid values:

*   operating: The subtask is running.
*   success: The subtask succeeds.
*   failure: The subtask fails to run. For more information about the error details, see the Content parameter.', example='success'),
    taskId?: string(name='TaskId', description='The ID of the current subtask.', example='abc2'),
  }(name='TaskInfo', description='The information about the request task. After a request task is submitted, it is divided into multiple subtasks that are run in sequence. After the current subtask is complete, the next subtask starts to run. After all subtasks are complete, the request task is complete. If a request task is aborted due to one of the following issues, address the issue based on the error code and initiate the request task again:

*   The request task fails to be submitted.
*   After the request task is submitted, a subtask fails to run.'),
}

model UpdateTableAddColumnResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTableAddColumnResponseBody(name='body'),
}

/**
 * @summary Updates the fields in a MaxCompute table.
 *
 * @param request UpdateTableAddColumnRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateTableAddColumnResponse
 */
async function updateTableAddColumnWithOptions(request: UpdateTableAddColumnRequest, runtime: Util.RuntimeOptions): UpdateTableAddColumnResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.column)) {
    body['Column'] = request.column;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTableAddColumn',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates the fields in a MaxCompute table.
 *
 * @param request UpdateTableAddColumnRequest
 * @return UpdateTableAddColumnResponse
 */
async function updateTableAddColumn(request: UpdateTableAddColumnRequest): UpdateTableAddColumnResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTableAddColumnWithOptions(request, runtime);
}

model UpdateTableLevelRequest {
  description?: string(name='Description', description='The description of the table level.', example='level description'),
  levelId?: long(name='LevelId', description='The ID of the table level. You can call the ListTableLevel operation to query the ID.

This parameter is required.', example='123'),
  levelType?: int32(name='LevelType', description='The table level type. Valid values: 1 and 2. The value 1 indicates the logical level. The value 2 indicates the physical level.', example='1'),
  name?: string(name='Name', description='The name of the table level.', example='level name'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.

This parameter is required.', example='123'),
}

model UpdateTableLevelResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='abcde'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  updateResult?: boolean(name='UpdateResult', description='Indicates whether the table level is updated.', example='true'),
}

model UpdateTableLevelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTableLevelResponseBody(name='body'),
}

/**
 * @summary Updates a table level. This operation will be replaced soon. We recommend that you do not call this operation.
 *
 * @param request UpdateTableLevelRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateTableLevelResponse
 */
async function updateTableLevelWithOptions(request: UpdateTableLevelRequest, runtime: Util.RuntimeOptions): UpdateTableLevelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.levelId)) {
    query['LevelId'] = request.levelId;
  }
  if (!Util.isUnset(request.levelType)) {
    query['LevelType'] = request.levelType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTableLevel',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates a table level. This operation will be replaced soon. We recommend that you do not call this operation.
 *
 * @param request UpdateTableLevelRequest
 * @return UpdateTableLevelResponse
 */
async function updateTableLevel(request: UpdateTableLevelRequest): UpdateTableLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTableLevelWithOptions(request, runtime);
}

model UpdateTableModelInfoRequest {
  firstLevelThemeId?: long(name='FirstLevelThemeId', description='The ID of the first-level table folder.', example='101'),
  levelId?: long(name='LevelId', description='The table level ID.', example='101'),
  levelType?: int32(name='LevelType', description='The type of the table level. Valid values: 1 and 2. The value 1 indicates the logical level. The value 2 indicates the physical level.', example='1'),
  secondLevelThemeId?: long(name='SecondLevelThemeId', description='The ID of the second-level table folder.', example='101'),
  tableGuid?: string(name='TableGuid', description='The GUID of the table. Specify the GUID in the odps.{projectName}.{tableName} format.

This parameter is required.', example='odps.test.table1'),
}

model UpdateTableModelInfoResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='abcde'),
  updateResult?: boolean(name='UpdateResult', description='Indicates whether the request was successful.', example='true'),
}

model UpdateTableModelInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTableModelInfoResponseBody(name='body'),
}

/**
 * @summary Modifies the information about a table, such as the table folder, level, and category.
 *
 * @param request UpdateTableModelInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateTableModelInfoResponse
 */
async function updateTableModelInfoWithOptions(request: UpdateTableModelInfoRequest, runtime: Util.RuntimeOptions): UpdateTableModelInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.firstLevelThemeId)) {
    query['FirstLevelThemeId'] = request.firstLevelThemeId;
  }
  if (!Util.isUnset(request.levelId)) {
    query['LevelId'] = request.levelId;
  }
  if (!Util.isUnset(request.levelType)) {
    query['LevelType'] = request.levelType;
  }
  if (!Util.isUnset(request.secondLevelThemeId)) {
    query['SecondLevelThemeId'] = request.secondLevelThemeId;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTableModelInfo',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Modifies the information about a table, such as the table folder, level, and category.
 *
 * @param request UpdateTableModelInfoRequest
 * @return UpdateTableModelInfoResponse
 */
async function updateTableModelInfo(request: UpdateTableModelInfoRequest): UpdateTableModelInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTableModelInfoWithOptions(request, runtime);
}

model UpdateTableThemeRequest {
  name?: string(name='Name', description='The name of the theme.

This parameter is required.', example='table folder name'),
  projectId?: long(name='ProjectId', description='The workspace ID.', example='123'),
  themeId?: long(name='ThemeId', description='The ID of the theme.

This parameter is required.', example='123'),
}

model UpdateTableThemeResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='abcd'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
  updateResult?: boolean(name='UpdateResult', description='Indicates whether the update result is returned. Valid values:

*   true
*   false', example='true'),
}

model UpdateTableThemeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTableThemeResponseBody(name='body'),
}

/**
 * @summary Updates a table theme. This operation will be replaced soon. We recommend that you do not call this operation.
 *
 * @param request UpdateTableThemeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateTableThemeResponse
 */
async function updateTableThemeWithOptions(request: UpdateTableThemeRequest, runtime: Util.RuntimeOptions): UpdateTableThemeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.themeId)) {
    query['ThemeId'] = request.themeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTableTheme',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates a table theme. This operation will be replaced soon. We recommend that you do not call this operation.
 *
 * @param request UpdateTableThemeRequest
 * @return UpdateTableThemeResponse
 */
async function updateTableTheme(request: UpdateTableThemeRequest): UpdateTableThemeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTableThemeWithOptions(request, runtime);
}

model UpdateUdfFileRequest {
  className?: string(name='ClassName', description='The name of the class in which the function is defined. This parameter corresponds to the Class Name parameter in the Register Function section of the configuration tab of the function in the DataWorks console.

This parameter is required.', example='com.alibaba.DataWorks.api.udf.StringConcat'),
  cmdDescription?: string(name='CmdDescription', description='The syntax used for calling the function. This parameter corresponds to the Expression Syntax parameter in the Register Function section of the configuration tab of the function in the DataWorks console.', example='StringConcat(String... substrs)'),
  example?: string(name='Example', description='The example for calling the function. This parameter corresponds to the Example parameter in the Register Function section of the configuration tab of the function in the DataWorks console.', example='StringConcat(\\\\"a\\\\", \\\\"b\\\\", \\\\"c\\\\")'),
  fileFolderPath?: string(name='FileFolderPath', description='The path of the folder in which the function file is stored.', example='Business_process/First_Business_Process/function/string_processing_function'),
  fileId?: string(name='FileId', description='The file ID.

This parameter is required.', example='10000001'),
  functionType?: string(name='FunctionType', description='The type of the function. Valid values: MATH, AGGREGATE, STRING, DATE, ANALYTIC, and OTHER. This parameter corresponds to the Function Type parameter in the Register Function section of the configuration tab of the function on the DataStudio page.

This parameter is required.', example='STRING'),
  parameterDescription?: string(name='ParameterDescription', description='The description of the input parameters of the function. This parameter corresponds to the Parameter Description parameter in the Register Function section of the configuration tab of the function on the DataStudio page.

Valid values:

*   ALL_ALLOWD
*   FAILURE_ALLOWED
*   ALL_DENIED', example='List of strings to be connected'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can click the Workspace Manage icon in the upper-right corner of the DataStudio page to go to the Workspace Management page and view the workspace ID.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The unique identifier of the DataWorks workspace. You can click the identifier in the upper-left corner of the DataStudio page to switch to another workspace.

You must specify either this parameter or ProjectId to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
  resources?: string(name='Resources', description='The names of the resources that are referenced by the function. This parameter corresponds to the Resources parameter in the Register Function section of the configuration tab of the function in the DataWorks console. Separate multiple resource names with commas (,).

This parameter is required.', example='string-concat-1.0.0.jar,commons-lang-2.6.jar'),
  returnValue?: string(name='ReturnValue', description='The description of the return value of the function. This parameter corresponds to the Return Value parameter in the Register Function section of the configuration tab of the function on the DataStudio page.', example='New strings generated by concatenating all strings before and after the input order'),
  udfDescription?: string(name='UdfDescription', description='The description of the function. This parameter corresponds to the Description parameter in the Register Function section of the configuration tab of the function on the DataStudio page.', example='Concatenate several strings to generate a new string'),
}

model UpdateUdfFileResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can troubleshoot issues based on the ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model UpdateUdfFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUdfFileResponseBody(name='body'),
}

/**
 * @summary Updates the file information about a function.
 *
 * @param request UpdateUdfFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateUdfFileResponse
 */
async function updateUdfFileWithOptions(request: UpdateUdfFileRequest, runtime: Util.RuntimeOptions): UpdateUdfFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.className)) {
    body['ClassName'] = request.className;
  }
  if (!Util.isUnset(request.cmdDescription)) {
    body['CmdDescription'] = request.cmdDescription;
  }
  if (!Util.isUnset(request.example)) {
    body['Example'] = request.example;
  }
  if (!Util.isUnset(request.fileFolderPath)) {
    body['FileFolderPath'] = request.fileFolderPath;
  }
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.functionType)) {
    body['FunctionType'] = request.functionType;
  }
  if (!Util.isUnset(request.parameterDescription)) {
    body['ParameterDescription'] = request.parameterDescription;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.resources)) {
    body['Resources'] = request.resources;
  }
  if (!Util.isUnset(request.returnValue)) {
    body['ReturnValue'] = request.returnValue;
  }
  if (!Util.isUnset(request.udfDescription)) {
    body['UdfDescription'] = request.udfDescription;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateUdfFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates the file information about a function.
 *
 * @param request UpdateUdfFileRequest
 * @return UpdateUdfFileResponse
 */
async function updateUdfFile(request: UpdateUdfFileRequest): UpdateUdfFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUdfFileWithOptions(request, runtime);
}

model UpdateWorkbenchEventResultRequest {
  checkResult?: string(name='CheckResult', description='The check result of the extension point event. Valid values: OK and Fail.

This parameter is required.', example='FAIL'),
  checkResultTip?: string(name='CheckResultTip', description='The cause of the check failure.', example='SQL is too long'),
  extensionCode?: string(name='ExtensionCode', description='The code of the extension.

This parameter is required.', example='58e95e2acd6f408e8707f1bf2591f9e9'),
  messageId?: string(name='MessageId', description='The ID of the message received when the related extension point event is triggered after you enable message subscription by using the OpenEvent module.

This parameter is required.', example='03400b03-b721-4c34-8727-2d6884077091'),
}

model UpdateWorkbenchEventResultResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1ec92159376****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateWorkbenchEventResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWorkbenchEventResultResponseBody(name='body'),
}

/**
 * @summary Returns the processing result sent by an extension after a process in Operation Center is blocked by the extension.
 *
 * @param request UpdateWorkbenchEventResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateWorkbenchEventResultResponse
 */
async function updateWorkbenchEventResultWithOptions(request: UpdateWorkbenchEventResultRequest, runtime: Util.RuntimeOptions): UpdateWorkbenchEventResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkResult)) {
    query['CheckResult'] = request.checkResult;
  }
  if (!Util.isUnset(request.checkResultTip)) {
    query['CheckResultTip'] = request.checkResultTip;
  }
  if (!Util.isUnset(request.extensionCode)) {
    query['ExtensionCode'] = request.extensionCode;
  }
  if (!Util.isUnset(request.messageId)) {
    query['MessageId'] = request.messageId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWorkbenchEventResult',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if (Util.isUnset(@signatureVersion) || !Util.equalString(@signatureVersion, 'v4')) {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Returns the processing result sent by an extension after a process in Operation Center is blocked by the extension.
 *
 * @param request UpdateWorkbenchEventResultRequest
 * @return UpdateWorkbenchEventResultResponse
 */
async function updateWorkbenchEventResult(request: UpdateWorkbenchEventResultRequest): UpdateWorkbenchEventResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateWorkbenchEventResultWithOptions(request, runtime);
}

