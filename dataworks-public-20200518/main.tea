/**
 *
 */
import Util;
import OSS;
import OpenPlatform;
import OSSUtil;
import FileForm;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'dataworks.ap-northeast-1.aliyuncs.com',
    ap-south-1 = 'dataworks.ap-south-1.aliyuncs.com',
    ap-southeast-1 = 'dataworks.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'dataworks.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'dataworks.ap-southeast-3.aliyuncs.com',
    ap-southeast-5 = 'dataworks.ap-southeast-5.aliyuncs.com',
    cn-beijing = 'dataworks.cn-beijing.aliyuncs.com',
    cn-chengdu = 'dataworks.cn-chengdu.aliyuncs.com',
    cn-hangzhou = 'dataworks.cn-hangzhou.aliyuncs.com',
    cn-hongkong = 'dataworks.cn-hongkong.aliyuncs.com',
    cn-huhehaote = 'dataworks.aliyuncs.com',
    cn-qingdao = 'dataworks.aliyuncs.com',
    cn-shanghai = 'dataworks.cn-shanghai.aliyuncs.com',
    cn-shenzhen = 'dataworks.cn-shenzhen.aliyuncs.com',
    cn-zhangjiakou = 'dataworks.aliyuncs.com',
    eu-central-1 = 'dataworks.eu-central-1.aliyuncs.com',
    eu-west-1 = 'dataworks.eu-west-1.aliyuncs.com',
    me-east-1 = 'dataworks.me-east-1.aliyuncs.com',
    us-east-1 = 'dataworks.us-east-1.aliyuncs.com',
    us-west-1 = 'dataworks.us-west-1.aliyuncs.com',
    cn-hangzhou-finance = 'dataworks.aliyuncs.com',
    cn-shenzhen-finance-1 = 'dataworks.aliyuncs.com',
    cn-shanghai-finance-1 = 'dataworks.aliyuncs.com',
    cn-north-2-gov-1 = 'dataworks.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('dataworks-public', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model Collection {
  collectionType?: string(name='CollectionType', example='album'),
  comment?: string(name='Comment', example='comment'),
  createTime?: long(name='CreateTime', example='1668600147617'),
  level?: int32(name='Level', example='1'),
  name?: string(name='Name', example='collectionName'),
  ownerId?: string(name='OwnerId', example='1234444'),
  ownerName?: string(name='OwnerName', example='owner'),
  qualifiedName?: string(name='QualifiedName', example='album.12334'),
  updateTime?: long(name='UpdateTime', example='1668600148617'),
}

model Entity {
  entityContent?: map[string]any(name='EntityContent'),
  qualifiedName?: string(name='QualifiedName', example='maxcompute_table.563f0357118d05ef145d6bddf2966cc23e86ca8f2f013f915e565afdf09f7a23'),
  tenantId?: long(name='TenantId', example='12345'),
}

model AbolishDataServiceApiRequest {
  apiId?: long(name='ApiId', example='10000'),
  projectId?: long(name='ProjectId', example='10001'),
  tenantId?: long(name='TenantId', example='10002'),
}

model AbolishDataServiceApiResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model AbolishDataServiceApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AbolishDataServiceApiResponseBody(name='body'),
}

async function abolishDataServiceApiWithOptions(request: AbolishDataServiceApiRequest, runtime: Util.RuntimeOptions): AbolishDataServiceApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AbolishDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function abolishDataServiceApi(request: AbolishDataServiceApiRequest): AbolishDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return abolishDataServiceApiWithOptions(request, runtime);
}

model AddMetaCollectionEntityRequest {
  collectionQualifiedName?: string(name='CollectionQualifiedName', example='album.2222'),
  entityQualifiedName?: string(name='EntityQualifiedName', example='maxcompute.projectA.tableB'),
}

model AddMetaCollectionEntityResponseBody = {
  errorCode?: string(name='ErrorCode', example='9999'),
  errorMessage?: string(name='ErrorMessage', example='The specified product does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-E****'),
  status?: boolean(name='Status', example='true'),
  success?: boolean(name='Success', example='true'),
}

model AddMetaCollectionEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddMetaCollectionEntityResponseBody(name='body'),
}

async function addMetaCollectionEntityWithOptions(request: AddMetaCollectionEntityRequest, runtime: Util.RuntimeOptions): AddMetaCollectionEntityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.collectionQualifiedName)) {
    query['CollectionQualifiedName'] = request.collectionQualifiedName;
  }
  if (!Util.isUnset(request.entityQualifiedName)) {
    query['EntityQualifiedName'] = request.entityQualifiedName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddMetaCollectionEntity',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addMetaCollectionEntity(request: AddMetaCollectionEntityRequest): AddMetaCollectionEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return addMetaCollectionEntityWithOptions(request, runtime);
}

model AddProjectMemberToRoleRequest {
  clientToken?: string(name='ClientToken', example='1AFAE64E-D1BE-432B-A9*****'),
  projectId?: long(name='ProjectId', example='27'),
  roleCode?: string(name='RoleCode', example='role_project_guest'),
  userId?: string(name='UserId', example='1234'),
}

model AddProjectMemberToRoleResponseBody = {
  requestId?: string(name='RequestId', example='1AFAE64E-D1BE-432B-A9****'),
}

model AddProjectMemberToRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddProjectMemberToRoleResponseBody(name='body'),
}

async function addProjectMemberToRoleWithOptions(request: AddProjectMemberToRoleRequest, runtime: Util.RuntimeOptions): AddProjectMemberToRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.roleCode)) {
    query['RoleCode'] = request.roleCode;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddProjectMemberToRole',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addProjectMemberToRole(request: AddProjectMemberToRoleRequest): AddProjectMemberToRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return addProjectMemberToRoleWithOptions(request, runtime);
}

model AddToMetaCategoryRequest {
  categoryId?: long(name='CategoryId', example='5'),
  tableGuid?: string(name='TableGuid', example='odps.engine_name.table_name'),
}

model AddToMetaCategoryResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1ec92159376'),
  success?: boolean(name='Success', example='true'),
}

model AddToMetaCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddToMetaCategoryResponseBody(name='body'),
}

async function addToMetaCategoryWithOptions(request: AddToMetaCategoryRequest, runtime: Util.RuntimeOptions): AddToMetaCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddToMetaCategory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addToMetaCategory(request: AddToMetaCategoryRequest): AddToMetaCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return addToMetaCategoryWithOptions(request, runtime);
}

model ApprovePermissionApplyOrderRequest {
  approveAction?: int32(name='ApproveAction', example='1'),
  approveComment?: string(name='ApproveComment', example='agree'),
  flowId?: string(name='FlowId', example='48f36729-05f9-4a40-9286-933fd940f30a'),
}

model ApprovePermissionApplyOrderResponseBody = {
  approveSuccess?: boolean(name='ApproveSuccess', example='true'),
  requestId?: string(name='RequestId', example='0bc1ec92159376****'),
}

model ApprovePermissionApplyOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApprovePermissionApplyOrderResponseBody(name='body'),
}

async function approvePermissionApplyOrderWithOptions(request: ApprovePermissionApplyOrderRequest, runtime: Util.RuntimeOptions): ApprovePermissionApplyOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.approveAction)) {
    query['ApproveAction'] = request.approveAction;
  }
  if (!Util.isUnset(request.approveComment)) {
    query['ApproveComment'] = request.approveComment;
  }
  if (!Util.isUnset(request.flowId)) {
    query['FlowId'] = request.flowId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApprovePermissionApplyOrder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function approvePermissionApplyOrder(request: ApprovePermissionApplyOrderRequest): ApprovePermissionApplyOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return approvePermissionApplyOrderWithOptions(request, runtime);
}

model ChangeResourceManagerResourceGroupRequest {
  resourceId?: string(name='ResourceId', example='test_project'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', example='rg-bp67acfmxazb4p****'),
  resourceType?: string(name='ResourceType', example='project'),
}

model ChangeResourceManagerResourceGroupResponseBody = {
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='1AFAE64E-D1BE-432B-A9****'),
  success?: boolean(name='Success', example='true'),
}

model ChangeResourceManagerResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeResourceManagerResourceGroupResponseBody(name='body'),
}

async function changeResourceManagerResourceGroupWithOptions(request: ChangeResourceManagerResourceGroupRequest, runtime: Util.RuntimeOptions): ChangeResourceManagerResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeResourceManagerResourceGroup',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function changeResourceManagerResourceGroup(request: ChangeResourceManagerResourceGroupRequest): ChangeResourceManagerResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeResourceManagerResourceGroupWithOptions(request, runtime);
}

model CheckFileDeploymentRequest {
  checkDetailUrl?: string(name='CheckDetailUrl', example='https://result.aliyun.com/?checkerInstanceId='),
  checkerInstanceId?: string(name='CheckerInstanceId', example='66_123455623_2'),
  status?: string(name='Status', example='OK'),
}

model CheckFileDeploymentResponseBody = {
  requestId?: string(name='RequestId', example='86d5a5ac-0cc0-4c5f-a374-a15713b252ab'),
}

model CheckFileDeploymentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckFileDeploymentResponseBody(name='body'),
}

async function checkFileDeploymentWithOptions(request: CheckFileDeploymentRequest, runtime: Util.RuntimeOptions): CheckFileDeploymentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.checkDetailUrl)) {
    body['CheckDetailUrl'] = request.checkDetailUrl;
  }
  if (!Util.isUnset(request.checkerInstanceId)) {
    body['CheckerInstanceId'] = request.checkerInstanceId;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CheckFileDeployment',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkFileDeployment(request: CheckFileDeploymentRequest): CheckFileDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkFileDeploymentWithOptions(request, runtime);
}

model CheckMetaPartitionRequest {
  clusterId?: string(name='ClusterId', example='abc'),
  dataSourceType?: string(name='DataSourceType', example='emr'),
  databaseName?: string(name='DatabaseName', example='abc'),
  partition?: string(name='Partition', example='ds=202005'),
  tableGuid?: string(name='TableGuid', example='odps.engine_name.table_name'),
  tableName?: string(name='TableName', example='abc'),
}

model CheckMetaPartitionResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1ec92159376'),
  success?: boolean(name='Success', example='true'),
}

model CheckMetaPartitionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckMetaPartitionResponseBody(name='body'),
}

async function checkMetaPartitionWithOptions(request: CheckMetaPartitionRequest, runtime: Util.RuntimeOptions): CheckMetaPartitionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.partition)) {
    query['Partition'] = request.partition;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckMetaPartition',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkMetaPartition(request: CheckMetaPartitionRequest): CheckMetaPartitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkMetaPartitionWithOptions(request, runtime);
}

model CheckMetaTableRequest {
  clusterId?: string(name='ClusterId', example='abc'),
  dataSourceType?: string(name='DataSourceType', example='emr'),
  databaseName?: string(name='DatabaseName', example='abc'),
  tableGuid?: string(name='TableGuid', example='odps.engine_name.table_name'),
  tableName?: string(name='TableName', example='abc'),
}

model CheckMetaTableResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='0bc1ec92159376'),
}

model CheckMetaTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckMetaTableResponseBody(name='body'),
}

async function checkMetaTableWithOptions(request: CheckMetaTableRequest, runtime: Util.RuntimeOptions): CheckMetaTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckMetaTable',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkMetaTable(request: CheckMetaTableRequest): CheckMetaTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkMetaTableWithOptions(request, runtime);
}

model CreateBaselineRequest {
  alertMarginThreshold?: int32(name='AlertMarginThreshold'),
  baselineName?: string(name='BaselineName'),
  baselineType?: string(name='BaselineType'),
  nodeIds?: string(name='NodeIds'),
  overtimeSettings?: [ 
    {
      cycle?: int32(name='Cycle'),
      time?: string(name='Time'),
    }
  ](name='OvertimeSettings'),
  owner?: string(name='Owner'),
  priority?: int32(name='Priority'),
  projectId?: long(name='ProjectId'),
}

model CreateBaselineResponseBody = {
  data?: long(name='Data'),
  dynamicErrorCode?: string(name='DynamicErrorCode'),
  dynamicErrorMessage?: string(name='DynamicErrorMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateBaselineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBaselineResponseBody(name='body'),
}

async function createBaselineWithOptions(request: CreateBaselineRequest, runtime: Util.RuntimeOptions): CreateBaselineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertMarginThreshold)) {
    body['AlertMarginThreshold'] = request.alertMarginThreshold;
  }
  if (!Util.isUnset(request.baselineName)) {
    body['BaselineName'] = request.baselineName;
  }
  if (!Util.isUnset(request.baselineType)) {
    body['BaselineType'] = request.baselineType;
  }
  if (!Util.isUnset(request.nodeIds)) {
    body['NodeIds'] = request.nodeIds;
  }
  if (!Util.isUnset(request.overtimeSettings)) {
    body['OvertimeSettings'] = request.overtimeSettings;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateBaseline',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createBaseline(request: CreateBaselineRequest): CreateBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBaselineWithOptions(request, runtime);
}

model CreateBusinessRequest {
  businessName?: string(name='BusinessName'),
  description?: string(name='Description'),
  owner?: string(name='Owner', example='1000000000001'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
  useType?: string(name='UseType', example='NORMAL'),
}

model CreateBusinessResponseBody = {
  businessId?: long(name='BusinessId', example='100001'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model CreateBusinessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBusinessResponseBody(name='body'),
}

async function createBusinessWithOptions(request: CreateBusinessRequest, runtime: Util.RuntimeOptions): CreateBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessName)) {
    body['BusinessName'] = request.businessName;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.useType)) {
    body['UseType'] = request.useType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateBusiness',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createBusiness(request: CreateBusinessRequest): CreateBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBusinessWithOptions(request, runtime);
}

model CreateConnectionRequest {
  connectionType?: string(name='ConnectionType', example='rds'),
  content?: string(name='Content', example='{"database":"dbname","instanceName":"instancename","password":"password","rdsOwnerId":"123","username":"username"}'),
  description?: string(name='Description', example='abc'),
  envType?: int32(name='EnvType', example='1'),
  name?: string(name='Name', example='abc'),
  projectId?: long(name='ProjectId', example='1'),
  subType?: string(name='SubType', example='mysql'),
}

model CreateConnectionResponseBody = {
  data?: long(name='Data', example='123'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc141151593763****'),
  success?: boolean(name='Success', example='true'),
}

model CreateConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateConnectionResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request CreateConnectionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateConnectionResponse
 */
// Deprecated
async function createConnectionWithOptions(request: CreateConnectionRequest, runtime: Util.RuntimeOptions): CreateConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionType)) {
    query['ConnectionType'] = request.connectionType;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.subType)) {
    query['SubType'] = request.subType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateConnection',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request CreateConnectionRequest
  * @return CreateConnectionResponse
 */
// Deprecated
async function createConnection(request: CreateConnectionRequest): CreateConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConnectionWithOptions(request, runtime);
}

model CreateDISyncTaskRequest {
  clientToken?: string(name='ClientToken', example='0000-ABCD-EFG****'),
  projectId?: long(name='ProjectId', example='10000'),
  taskContent?: string(name='TaskContent', example='{"type":"job","version":"2.0","steps":[{"stepType":"mysql","parameter":{"envType":1,"datasource":"mysql_pub","column":["id","name","create_time","age","score","t_01"],"connection":[{"datasource":"mysql_pub","table":["u_pk"]}],"where":"","splitPk":"id","encoding":"UTF-8"},"name":"Reader","category":"reader"},{"stepType":"odps","parameter":{"partition":"pt=${bizdate}","truncate":true,"datasource":"odps_first","envType":1,"column":["id","name","create_time","age","score","t_01"],"emptyAsNull":false,"tableComment":"null","table":"u_pk"},"name":"Writer","category":"writer"}],"setting":{"executeMode":null,"errorLimit":{"record":""},"speed":{"concurrent":2,"throttle":false}},"order":{"hops":[{"from":"Reader","to":"Writer"}]}}'),
  taskName?: string(name='TaskName', example='new_di_task'),
  taskParam?: string(name='TaskParam'),
  taskType?: string(name='TaskType', example='DI_OFFLINE'),
}

model CreateDISyncTaskResponseBody = {
  data?: {
    fileId?: long(name='FileId', example='1000001'),
    message?: string(name='Message'),
    status?: string(name='Status', example='success'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='0bc1411515937635973****'),
  success?: boolean(name='Success', example='true'),
}

model CreateDISyncTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDISyncTaskResponseBody(name='body'),
}

async function createDISyncTaskWithOptions(request: CreateDISyncTaskRequest, runtime: Util.RuntimeOptions): CreateDISyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskContent)) {
    query['TaskContent'] = request.taskContent;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.taskParam)) {
    query['TaskParam'] = request.taskParam;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDISyncTask',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDISyncTask(request: CreateDISyncTaskRequest): CreateDISyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDISyncTaskWithOptions(request, runtime);
}

model CreateDagComplementRequest {
  bizBeginTime?: string(name='BizBeginTime', example='00:00:00'),
  bizEndTime?: string(name='BizEndTime', example='23:00:00'),
  endBizDate?: string(name='EndBizDate', example='2020-05-21 00:00:00'),
  excludeNodeIds?: string(name='ExcludeNodeIds', example='1234'),
  includeNodeIds?: string(name='IncludeNodeIds', example='74324,74325'),
  name?: string(name='Name', example='xm_test'),
  nodeParams?: string(name='NodeParams', example='{74324:"key1=val1 key2=val"}'),
  parallelism?: boolean(name='Parallelism', example='false'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
  rootNodeId?: long(name='RootNodeId', example='1234'),
  startBizDate?: string(name='StartBizDate', example='2020-05-20 00:00:00'),
}

model CreateDagComplementResponseBody = {
  data?: [ long ](name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', example='true'),
}

model CreateDagComplementResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDagComplementResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request CreateDagComplementRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateDagComplementResponse
 */
// Deprecated
async function createDagComplementWithOptions(request: CreateDagComplementRequest, runtime: Util.RuntimeOptions): CreateDagComplementResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizBeginTime)) {
    body['BizBeginTime'] = request.bizBeginTime;
  }
  if (!Util.isUnset(request.bizEndTime)) {
    body['BizEndTime'] = request.bizEndTime;
  }
  if (!Util.isUnset(request.endBizDate)) {
    body['EndBizDate'] = request.endBizDate;
  }
  if (!Util.isUnset(request.excludeNodeIds)) {
    body['ExcludeNodeIds'] = request.excludeNodeIds;
  }
  if (!Util.isUnset(request.includeNodeIds)) {
    body['IncludeNodeIds'] = request.includeNodeIds;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.nodeParams)) {
    body['NodeParams'] = request.nodeParams;
  }
  if (!Util.isUnset(request.parallelism)) {
    body['Parallelism'] = request.parallelism;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.rootNodeId)) {
    body['RootNodeId'] = request.rootNodeId;
  }
  if (!Util.isUnset(request.startBizDate)) {
    body['StartBizDate'] = request.startBizDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDagComplement',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request CreateDagComplementRequest
  * @return CreateDagComplementResponse
 */
// Deprecated
async function createDagComplement(request: CreateDagComplementRequest): CreateDagComplementResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDagComplementWithOptions(request, runtime);
}

model CreateDagTestRequest {
  bizdate?: string(name='Bizdate', example='2020-05-26 00:00:00'),
  name?: string(name='Name', example='xm_create_test'),
  nodeId?: long(name='NodeId', example='1234'),
  nodeParams?: string(name='NodeParams', example='bizdate=$bizdate tbods=$tbods'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
}

model CreateDagTestResponseBody = {
  data?: long(name='Data', example='3333333'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', example='true'),
}

model CreateDagTestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDagTestResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request CreateDagTestRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateDagTestResponse
 */
// Deprecated
async function createDagTestWithOptions(request: CreateDagTestRequest, runtime: Util.RuntimeOptions): CreateDagTestResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.nodeParams)) {
    body['NodeParams'] = request.nodeParams;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDagTest',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request CreateDagTestRequest
  * @return CreateDagTestResponse
 */
// Deprecated
async function createDagTest(request: CreateDagTestRequest): CreateDagTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDagTestWithOptions(request, runtime);
}

model CreateDataServiceApiRequest {
  apiDescription?: string(name='ApiDescription'),
  apiMode?: int32(name='ApiMode', example='0'),
  apiName?: string(name='ApiName'),
  apiPath?: string(name='ApiPath', example='/test/1'),
  folderId?: long(name='FolderId', example='0'),
  groupId?: string(name='GroupId'),
  projectId?: long(name='ProjectId', example='10000'),
  protocols?: string(name='Protocols', example='0,1'),
  registrationDetails?: string(name='RegistrationDetails', example='{"failedResultSample":"fail","registrationErrorCodes":[{"errorCode":"e1","errorMessage":"msg1","errorSolution":"sol1"},{"errorCode":"e2","errorMessage":"msg2","errorSolution":"sol2"}],"registrationRequestParameters":[{"columnName":"","defaultValue":"","exampleValue":"","isRequiredParameter":true,"parameterDataType":0,"parameterDescription":"","parameterName":"id","parameterOperator":0,"parameterPosition":1},{"columnName":"","defaultValue":"xx","exampleValue":"","isRequiredParameter":true,"parameterDataType":0,"parameterDescription":"","parameterName":"cc","parameterOperator":2,"parameterPosition":2}],"serviceContentType":1,"serviceHost":"http://www.baidu.com","servicePath":"/[uid]","serviceRequestBodyDescription":"body","successfulResultSample":"success"}'),
  requestMethod?: int32(name='RequestMethod', example='0'),
  responseContentType?: int32(name='ResponseContentType', example='0'),
  scriptDetails?: string(name='ScriptDetails', example='{"isPagedResponse":false,"script":"select id as id1, name as name1 from person where id=${inputid}","scriptConnection":{"connectionId":122786,"tableName":"person"},"scriptRequestParameters":[{"defaultValue":"","exampleValue":"","isRequiredParameter":true,"parameterDataType":0,"parameterDescription":"","parameterName":"inputid","parameterOperator":0,"parameterPosition":1}],"scriptResponseParameters":[{"exampleValue":"","parameterDataType":0,"parameterDescription":"","parameterName":"id1"},{"exampleValue":"","parameterDataType":0,"parameterDescription":"","parameterName":"name1"}]}'),
  tenantId?: long(name='TenantId', example='10001'),
  timeout?: int32(name='Timeout', example='10000'),
  visibleRange?: int32(name='VisibleRange', example='0'),
  wizardDetails?: string(name='WizardDetails', example='{"isPagedResponse":true,"wizardConnection":{"connectionId":122786,"tableName":"person"},"wizardRequestParameters":[{"columnName":"id","defaultValue":"","exampleValue":"1","isRequiredParameter":true,"parameterDataType":2,"parameterDescription":"","parameterName":"id","parameterOperator":0,"parameterPosition":0}],"wizardResponseParameters":[{"columnName":"id","exampleValue":"11","parameterDataType":2,"parameterDescription":"","parameterName":"id"}]}'),
}

model CreateDataServiceApiResponseBody = {
  data?: long(name='Data', example='100003'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model CreateDataServiceApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDataServiceApiResponseBody(name='body'),
}

async function createDataServiceApiWithOptions(request: CreateDataServiceApiRequest, runtime: Util.RuntimeOptions): CreateDataServiceApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiDescription)) {
    body['ApiDescription'] = request.apiDescription;
  }
  if (!Util.isUnset(request.apiMode)) {
    body['ApiMode'] = request.apiMode;
  }
  if (!Util.isUnset(request.apiName)) {
    body['ApiName'] = request.apiName;
  }
  if (!Util.isUnset(request.apiPath)) {
    body['ApiPath'] = request.apiPath;
  }
  if (!Util.isUnset(request.folderId)) {
    body['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.protocols)) {
    body['Protocols'] = request.protocols;
  }
  if (!Util.isUnset(request.registrationDetails)) {
    body['RegistrationDetails'] = request.registrationDetails;
  }
  if (!Util.isUnset(request.requestMethod)) {
    body['RequestMethod'] = request.requestMethod;
  }
  if (!Util.isUnset(request.responseContentType)) {
    body['ResponseContentType'] = request.responseContentType;
  }
  if (!Util.isUnset(request.scriptDetails)) {
    body['ScriptDetails'] = request.scriptDetails;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.timeout)) {
    body['Timeout'] = request.timeout;
  }
  if (!Util.isUnset(request.visibleRange)) {
    body['VisibleRange'] = request.visibleRange;
  }
  if (!Util.isUnset(request.wizardDetails)) {
    body['WizardDetails'] = request.wizardDetails;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDataServiceApi(request: CreateDataServiceApiRequest): CreateDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataServiceApiWithOptions(request, runtime);
}

model CreateDataServiceApiAuthorityRequest {
  apiId?: long(name='ApiId', example='10001'),
  authorizedProjectId?: long(name='AuthorizedProjectId', example='10002'),
  endTime?: long(name='EndTime', example='1600531564'),
  projectId?: long(name='ProjectId', example='10003'),
  tenantId?: long(name='TenantId', example='1004'),
}

model CreateDataServiceApiAuthorityResponseBody = {
  requestId?: string(name='RequestId', example='0000-ABCD-EF****'),
  success?: boolean(name='Success', example='true'),
}

model CreateDataServiceApiAuthorityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDataServiceApiAuthorityResponseBody(name='body'),
}

async function createDataServiceApiAuthorityWithOptions(request: CreateDataServiceApiAuthorityRequest, runtime: Util.RuntimeOptions): CreateDataServiceApiAuthorityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.authorizedProjectId)) {
    body['AuthorizedProjectId'] = request.authorizedProjectId;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataServiceApiAuthority',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDataServiceApiAuthority(request: CreateDataServiceApiAuthorityRequest): CreateDataServiceApiAuthorityResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataServiceApiAuthorityWithOptions(request, runtime);
}

model CreateDataServiceFolderRequest {
  folderName?: string(name='FolderName'),
  groupId?: string(name='GroupId', example='1000abcd'),
  parentId?: long(name='ParentId', example='0'),
  projectId?: long(name='ProjectId', example='10001'),
  tenantId?: long(name='TenantId', example='10002'),
}

model CreateDataServiceFolderResponseBody = {
  folderId?: long(name='FolderId', example='123'),
  requestId?: string(name='RequestId', example='0000-ABCD-E****'),
}

model CreateDataServiceFolderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDataServiceFolderResponseBody(name='body'),
}

async function createDataServiceFolderWithOptions(request: CreateDataServiceFolderRequest, runtime: Util.RuntimeOptions): CreateDataServiceFolderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderName)) {
    body['FolderName'] = request.folderName;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.parentId)) {
    body['ParentId'] = request.parentId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataServiceFolder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDataServiceFolder(request: CreateDataServiceFolderRequest): CreateDataServiceFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataServiceFolderWithOptions(request, runtime);
}

model CreateDataServiceGroupRequest {
  apiGatewayGroupId?: string(name='ApiGatewayGroupId', example='1000abcd'),
  description?: string(name='Description'),
  groupName?: string(name='GroupName'),
  projectId?: long(name='ProjectId', example='10001'),
  tenantId?: long(name='TenantId', example='10002'),
}

model CreateDataServiceGroupResponseBody = {
  groupId?: string(name='GroupId', example='ds_12345'),
  requestId?: string(name='RequestId', example='0000-ABCD-EF****'),
}

model CreateDataServiceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDataServiceGroupResponseBody(name='body'),
}

async function createDataServiceGroupWithOptions(request: CreateDataServiceGroupRequest, runtime: Util.RuntimeOptions): CreateDataServiceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiGatewayGroupId)) {
    body['ApiGatewayGroupId'] = request.apiGatewayGroupId;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupName)) {
    body['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataServiceGroup',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDataServiceGroup(request: CreateDataServiceGroupRequest): CreateDataServiceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataServiceGroupWithOptions(request, runtime);
}

model CreateDataSourceRequest {
  content?: string(name='Content', example='{"database":"dbname","instanceName":"instancename","password":"password","rdsOwnerId":"123","username":"username"}'),
  dataSourceType?: string(name='DataSourceType', example='rds'),
  description?: string(name='Description', example='abc'),
  envType?: int32(name='EnvType', example='1'),
  name?: string(name='Name', example='abc'),
  projectId?: long(name='ProjectId', example='1'),
  subType?: string(name='SubType', example='mysql'),
}

model CreateDataSourceResponseBody = {
  data?: long(name='Data', example='123'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc141151593763****'),
  success?: boolean(name='Success', example='true'),
}

model CreateDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDataSourceResponseBody(name='body'),
}

async function createDataSourceWithOptions(request: CreateDataSourceRequest, runtime: Util.RuntimeOptions): CreateDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.subType)) {
    query['SubType'] = request.subType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataSource',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDataSource(request: CreateDataSourceRequest): CreateDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataSourceWithOptions(request, runtime);
}

model CreateExportMigrationRequest {
  description?: string(name='Description', example='test'),
  exportMode?: string(name='ExportMode', example='FULL'),
  exportObjectStatus?: string(name='ExportObjectStatus', example='SAVED'),
  incrementalSince?: long(name='IncrementalSince', example='1589904000000'),
  name?: string(name='Name', example='test_export_01'),
  projectId?: long(name='ProjectId', example='12345'),
}

model CreateExportMigrationResponseBody = {
  data?: long(name='Data', example='1234'),
  requestId?: string(name='RequestId', example='34267E2E-0335-1A60-A1F0-ADA530890CBA'),
  success?: boolean(name='Success', example='true'),
}

model CreateExportMigrationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateExportMigrationResponseBody(name='body'),
}

async function createExportMigrationWithOptions(request: CreateExportMigrationRequest, runtime: Util.RuntimeOptions): CreateExportMigrationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.exportMode)) {
    body['ExportMode'] = request.exportMode;
  }
  if (!Util.isUnset(request.exportObjectStatus)) {
    body['ExportObjectStatus'] = request.exportObjectStatus;
  }
  if (!Util.isUnset(request.incrementalSince)) {
    body['IncrementalSince'] = request.incrementalSince;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateExportMigration',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createExportMigration(request: CreateExportMigrationRequest): CreateExportMigrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createExportMigrationWithOptions(request, runtime);
}

model CreateFileRequest {
  advancedSettings?: string(name='AdvancedSettings', example='{"queue":"default","SPARK_CONF":"--conf spark.driver.memory=2g"}'),
  autoParsing?: boolean(name='AutoParsing', example='true'),
  autoRerunIntervalMillis?: int32(name='AutoRerunIntervalMillis', example='120000'),
  autoRerunTimes?: int32(name='AutoRerunTimes', example='3'),
  connectionName?: string(name='ConnectionName', example='odps_first'),
  content?: string(name='Content', example='SHOW TABLES;'),
  cronExpress?: string(name='CronExpress', example='00 05 00 * * ?'),
  cycleType?: string(name='CycleType', example='DAY'),
  dependentNodeIdList?: string(name='DependentNodeIdList', example='abc'),
  dependentType?: string(name='DependentType', example='NONE'),
  endEffectDate?: long(name='EndEffectDate', example='4155787800000'),
  fileDescription?: string(name='FileDescription'),
  fileFolderPath?: string(name='FileFolderPath'),
  fileName?: string(name='FileName'),
  fileType?: int32(name='FileType', example='10'),
  inputList?: string(name='InputList', example='project_root,project.file1,project.001_out'),
  inputParameters?: string(name='InputParameters', example='[{"ValueSource": "project_001.first_node:bizdate_param","ParameterName": "bizdate_input"}]'),
  outputParameters?: string(name='OutputParameters', example='[{"Type": 1,"Value": "${bizdate}","ParameterName": "bizdate_param"}]'),
  owner?: string(name='Owner', example='1000000000001'),
  paraValue?: string(name='ParaValue', example='a=x b=y'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
  rerunMode?: string(name='RerunMode', example='ALL_ALLOWED'),
  resourceGroupId?: long(name='ResourceGroupId', example='375827434852437'),
  resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', example='group_375827434852437'),
  schedulerType?: string(name='SchedulerType', example='NORMAL'),
  startEffectDate?: long(name='StartEffectDate', example='936923400000'),
  startImmediately?: boolean(name='StartImmediately', example='true'),
  stop?: boolean(name='Stop', example='false'),
}

model CreateFileResponseBody = {
  data?: long(name='Data', example='1000001'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', example='true'),
}

model CreateFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFileResponseBody(name='body'),
}

async function createFileWithOptions(request: CreateFileRequest, runtime: Util.RuntimeOptions): CreateFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.advancedSettings)) {
    body['AdvancedSettings'] = request.advancedSettings;
  }
  if (!Util.isUnset(request.autoParsing)) {
    body['AutoParsing'] = request.autoParsing;
  }
  if (!Util.isUnset(request.autoRerunIntervalMillis)) {
    body['AutoRerunIntervalMillis'] = request.autoRerunIntervalMillis;
  }
  if (!Util.isUnset(request.autoRerunTimes)) {
    body['AutoRerunTimes'] = request.autoRerunTimes;
  }
  if (!Util.isUnset(request.connectionName)) {
    body['ConnectionName'] = request.connectionName;
  }
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.cronExpress)) {
    body['CronExpress'] = request.cronExpress;
  }
  if (!Util.isUnset(request.cycleType)) {
    body['CycleType'] = request.cycleType;
  }
  if (!Util.isUnset(request.dependentNodeIdList)) {
    body['DependentNodeIdList'] = request.dependentNodeIdList;
  }
  if (!Util.isUnset(request.dependentType)) {
    body['DependentType'] = request.dependentType;
  }
  if (!Util.isUnset(request.endEffectDate)) {
    body['EndEffectDate'] = request.endEffectDate;
  }
  if (!Util.isUnset(request.fileDescription)) {
    body['FileDescription'] = request.fileDescription;
  }
  if (!Util.isUnset(request.fileFolderPath)) {
    body['FileFolderPath'] = request.fileFolderPath;
  }
  if (!Util.isUnset(request.fileName)) {
    body['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.fileType)) {
    body['FileType'] = request.fileType;
  }
  if (!Util.isUnset(request.inputList)) {
    body['InputList'] = request.inputList;
  }
  if (!Util.isUnset(request.inputParameters)) {
    body['InputParameters'] = request.inputParameters;
  }
  if (!Util.isUnset(request.outputParameters)) {
    body['OutputParameters'] = request.outputParameters;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.paraValue)) {
    body['ParaValue'] = request.paraValue;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.rerunMode)) {
    body['RerunMode'] = request.rerunMode;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceGroupIdentifier)) {
    body['ResourceGroupIdentifier'] = request.resourceGroupIdentifier;
  }
  if (!Util.isUnset(request.schedulerType)) {
    body['SchedulerType'] = request.schedulerType;
  }
  if (!Util.isUnset(request.startEffectDate)) {
    body['StartEffectDate'] = request.startEffectDate;
  }
  if (!Util.isUnset(request.startImmediately)) {
    body['StartImmediately'] = request.startImmediately;
  }
  if (!Util.isUnset(request.stop)) {
    body['Stop'] = request.stop;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFile(request: CreateFileRequest): CreateFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFileWithOptions(request, runtime);
}

model CreateFolderRequest {
  folderPath?: string(name='FolderPath'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model CreateFolderResponseBody = {
  data?: string(name='Data', example='bdfd68****'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', example='true'),
}

model CreateFolderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFolderResponseBody(name='body'),
}

async function createFolderWithOptions(request: CreateFolderRequest, runtime: Util.RuntimeOptions): CreateFolderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderPath)) {
    body['FolderPath'] = request.folderPath;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateFolder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFolder(request: CreateFolderRequest): CreateFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFolderWithOptions(request, runtime);
}

model CreateImportMigrationRequest {
  calculateEngineMap?: string(name='CalculateEngineMap', example='{     "ODPS": {       "zxy_8221431_engine": "wzp_kaifazheban_engine"     },     "EMR": {         "aaaa": "bbb"     }   }'),
  commitRule?: string(name='CommitRule', example='{     "resourceAutoCommit": false,     "resourceAutoDeploy": false,     "functionAutoCommit": false,     "functionAutoDeploy": false,     "tableAutoCommitToDev": false,     "tableAutoCommitToProd": false,     "ignoreLock": false,     "fileAutoCommit": false,     "fileAutoDeploy": false   }'),
  description?: string(name='Description', example='test description'),
  name?: string(name='Name', example='test_import_001'),
  packageFile?: string(name='PackageFile', example='/home/admin/xxx/import.zip'),
  packageType?: string(name='PackageType', example='DATAWORKS_MODEL'),
  projectId?: long(name='ProjectId', example='123456'),
  resourceGroupMap?: string(name='ResourceGroupMap', example='{"SCHEDULER_RESOURCE_GROUP": {"xxx":"yyy"},"DI_RESOURCE_GROUP":{"ccc":"ddd"}}'),
  workspaceMap?: string(name='WorkspaceMap', example='{"test_workspace_src": "test_workspace_target"}'),
}

model CreateImportMigrationAdvanceRequest {
  calculateEngineMap?: string(name='CalculateEngineMap', example='{     "ODPS": {       "zxy_8221431_engine": "wzp_kaifazheban_engine"     },     "EMR": {         "aaaa": "bbb"     }   }'),
  commitRule?: string(name='CommitRule', example='{     "resourceAutoCommit": false,     "resourceAutoDeploy": false,     "functionAutoCommit": false,     "functionAutoDeploy": false,     "tableAutoCommitToDev": false,     "tableAutoCommitToProd": false,     "ignoreLock": false,     "fileAutoCommit": false,     "fileAutoDeploy": false   }'),
  description?: string(name='Description', example='test description'),
  name?: string(name='Name', example='test_import_001'),
  packageFileObject?: readable(name='PackageFile', example='/home/admin/xxx/import.zip'),
  packageType?: string(name='PackageType', example='DATAWORKS_MODEL'),
  projectId?: long(name='ProjectId', example='123456'),
  resourceGroupMap?: string(name='ResourceGroupMap', example='{"SCHEDULER_RESOURCE_GROUP": {"xxx":"yyy"},"DI_RESOURCE_GROUP":{"ccc":"ddd"}}'),
  workspaceMap?: string(name='WorkspaceMap', example='{"test_workspace_src": "test_workspace_target"}'),
}

model CreateImportMigrationResponseBody = {
  data?: long(name='Data', example='123456'),
  errorCode?: string(name='ErrorCode', example='110001123456'),
  errorMessage?: string(name='ErrorMessage', example='test error message'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='ADFASDFASDFA-ADFASDF-ASDFADSDF-AFFADS'),
  success?: boolean(name='Success', example='true'),
}

model CreateImportMigrationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateImportMigrationResponseBody(name='body'),
}

async function createImportMigrationWithOptions(request: CreateImportMigrationRequest, runtime: Util.RuntimeOptions): CreateImportMigrationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.calculateEngineMap)) {
    body['CalculateEngineMap'] = request.calculateEngineMap;
  }
  if (!Util.isUnset(request.commitRule)) {
    body['CommitRule'] = request.commitRule;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.packageFile)) {
    body['PackageFile'] = request.packageFile;
  }
  if (!Util.isUnset(request.packageType)) {
    body['PackageType'] = request.packageType;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.resourceGroupMap)) {
    body['ResourceGroupMap'] = request.resourceGroupMap;
  }
  if (!Util.isUnset(request.workspaceMap)) {
    body['WorkspaceMap'] = request.workspaceMap;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateImportMigration',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createImportMigration(request: CreateImportMigrationRequest): CreateImportMigrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImportMigrationWithOptions(request, runtime);
}

async function createImportMigrationAdvance(request: CreateImportMigrationAdvanceRequest, runtime: Util.RuntimeOptions): CreateImportMigrationResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApi.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'dataworks-public',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var createImportMigrationReq = new CreateImportMigrationRequest{};
  OpenApiUtil.convert(request, createImportMigrationReq);

  if(!Util.isUnset(request.packageFileObject)) {
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.body.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.body.endpoint, authResponse.body.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.body.objectKey,
      content = request.packageFileObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.body.accessKeyId,
      policy = authResponse.body.encodedPolicy,
      signature = authResponse.body.signature,
      key = authResponse.body.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.body.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    createImportMigrationReq.packageFile = `http://${authResponse.body.bucket}.${authResponse.body.endpoint}/${authResponse.body.objectKey}`;
  }
  var createImportMigrationResp = createImportMigrationWithOptions(createImportMigrationReq, runtime);
  return createImportMigrationResp;
}

model CreateManualDagRequest {
  bizDate?: string(name='BizDate', example='2020-11-11 00:00:00'),
  dagParameters?: string(name='DagParameters', example='{"kaaaa": "vaaaaa", "kbbbb": "vbbbbb"}'),
  excludeNodeIds?: string(name='ExcludeNodeIds', example='123,456'),
  flowName?: string(name='FlowName', example='test_workflow'),
  includeNodeIds?: string(name='IncludeNodeIds', example='74324,74325'),
  nodeParameters?: string(name='NodeParameters', example='{"20000123121": "key1=val2 key2=val2", "20000123124": "kkkk=vvvvv aaaa=bbbb"}'),
  projectEnv?: string(name='ProjectEnv'),
  projectName?: string(name='ProjectName', example='test_workspace'),
}

model CreateManualDagResponseBody = {
  dagId?: long(name='DagId', example='700000123123141'),
  requestId?: string(name='RequestId', example='AASFDFSDFG-DFSDF-DFSDFD-SDFSDF'),
}

model CreateManualDagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateManualDagResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request CreateManualDagRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateManualDagResponse
 */
// Deprecated
async function createManualDagWithOptions(request: CreateManualDagRequest, runtime: Util.RuntimeOptions): CreateManualDagResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizDate)) {
    body['BizDate'] = request.bizDate;
  }
  if (!Util.isUnset(request.dagParameters)) {
    body['DagParameters'] = request.dagParameters;
  }
  if (!Util.isUnset(request.excludeNodeIds)) {
    body['ExcludeNodeIds'] = request.excludeNodeIds;
  }
  if (!Util.isUnset(request.flowName)) {
    body['FlowName'] = request.flowName;
  }
  if (!Util.isUnset(request.includeNodeIds)) {
    body['IncludeNodeIds'] = request.includeNodeIds;
  }
  if (!Util.isUnset(request.nodeParameters)) {
    body['NodeParameters'] = request.nodeParameters;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateManualDag',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request CreateManualDagRequest
  * @return CreateManualDagResponse
 */
// Deprecated
async function createManualDag(request: CreateManualDagRequest): CreateManualDagResponse {
  var runtime = new Util.RuntimeOptions{};
  return createManualDagWithOptions(request, runtime);
}

model CreateMetaCategoryRequest {
  comment?: string(name='Comment', example='category 1'),
  name?: string(name='Name', example='category_name'),
  parentId?: long(name='ParentId', example='0'),
}

model CreateMetaCategoryResponseBody = {
  data?: {
    categoryId?: long(name='CategoryId', example='223'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1ec92159376'),
  success?: boolean(name='Success', example='true'),
}

model CreateMetaCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMetaCategoryResponseBody(name='body'),
}

async function createMetaCategoryWithOptions(request: CreateMetaCategoryRequest, runtime: Util.RuntimeOptions): CreateMetaCategoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.parentId)) {
    body['ParentId'] = request.parentId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateMetaCategory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createMetaCategory(request: CreateMetaCategoryRequest): CreateMetaCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMetaCategoryWithOptions(request, runtime);
}

model CreateMetaCollectionRequest {
  collectionType?: string(name='CollectionType', example='ALBUM'),
  comment?: string(name='Comment', example='this is a comment'),
  name?: string(name='Name', example='collection_name'),
  parentQualifiedName?: string(name='ParentQualifiedName', example='album.333508'),
}

model CreateMetaCollectionResponseBody = {
  errorCode?: string(name='ErrorCode', example='NoPermission'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  qualifiedName?: string(name='QualifiedName', example='album.11111'),
  requestId?: string(name='RequestId', description='Id of the request', example='E6F0DBDD-5AD****'),
  success?: string(name='Success', example='true'),
}

model CreateMetaCollectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMetaCollectionResponseBody(name='body'),
}

async function createMetaCollectionWithOptions(request: CreateMetaCollectionRequest, runtime: Util.RuntimeOptions): CreateMetaCollectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.collectionType)) {
    query['CollectionType'] = request.collectionType;
  }
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.parentQualifiedName)) {
    query['ParentQualifiedName'] = request.parentQualifiedName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateMetaCollection',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createMetaCollection(request: CreateMetaCollectionRequest): CreateMetaCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMetaCollectionWithOptions(request, runtime);
}

model CreatePermissionApplyOrderRequest {
  applyObject?: [ 
    {
      actions?: string(name='Actions', example='Select,Describe'),
      columnMetaList?: [ 
        {
          name?: string(name='Name', example='aColumnName'),
        }
      ](name='ColumnMetaList'),
      name?: string(name='Name', example='aTableName'),
    }
  ](name='ApplyObject'),
  applyReason?: string(name='ApplyReason', example='I need to use this table'),
  applyUserIds?: string(name='ApplyUserIds', example='267842600408993176,267842600408993177'),
  deadline?: long(name='Deadline', example='1617115071885'),
  engineType?: string(name='EngineType', example='odps'),
  maxComputeProjectName?: string(name='MaxComputeProjectName', example='aMaxcomputeProjectName'),
  orderType?: int32(name='OrderType', example='1'),
  workspaceId?: int32(name='WorkspaceId', example='12345'),
}

model CreatePermissionApplyOrderResponseBody = {
  flowId?: [ string ](name='FlowId'),
  requestId?: string(name='RequestId', example='0bc1ec92159376****'),
}

model CreatePermissionApplyOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePermissionApplyOrderResponseBody(name='body'),
}

async function createPermissionApplyOrderWithOptions(request: CreatePermissionApplyOrderRequest, runtime: Util.RuntimeOptions): CreatePermissionApplyOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applyObject)) {
    query['ApplyObject'] = request.applyObject;
  }
  if (!Util.isUnset(request.applyReason)) {
    query['ApplyReason'] = request.applyReason;
  }
  if (!Util.isUnset(request.applyUserIds)) {
    query['ApplyUserIds'] = request.applyUserIds;
  }
  if (!Util.isUnset(request.deadline)) {
    query['Deadline'] = request.deadline;
  }
  if (!Util.isUnset(request.engineType)) {
    query['EngineType'] = request.engineType;
  }
  if (!Util.isUnset(request.maxComputeProjectName)) {
    query['MaxComputeProjectName'] = request.maxComputeProjectName;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreatePermissionApplyOrder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createPermissionApplyOrder(request: CreatePermissionApplyOrderRequest): CreatePermissionApplyOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPermissionApplyOrderWithOptions(request, runtime);
}

model CreateProjectMemberRequest {
  clientToken?: string(name='ClientToken', example='1AFAE64E-D1BE-432B-A9****'),
  projectId?: long(name='ProjectId', example='27'),
  roleCode?: string(name='RoleCode', example='role_project_guest'),
  userId?: string(name='UserId', example='1234'),
}

model CreateProjectMemberResponseBody = {
  requestId?: string(name='RequestId', example='1AFAE64E-D1BE-432B-A9****'),
}

model CreateProjectMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProjectMemberResponseBody(name='body'),
}

async function createProjectMemberWithOptions(request: CreateProjectMemberRequest, runtime: Util.RuntimeOptions): CreateProjectMemberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.roleCode)) {
    query['RoleCode'] = request.roleCode;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateProjectMember',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createProjectMember(request: CreateProjectMemberRequest): CreateProjectMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProjectMemberWithOptions(request, runtime);
}

model CreateQualityEntityRequest {
  entityLevel?: int32(name='EntityLevel', example='0'),
  envType?: string(name='EnvType', example='ODPS'),
  matchExpression?: string(name='MatchExpression', example='dt=$[yyyymmdd]'),
  projectName?: string(name='ProjectName', example='autotest'),
  tableName?: string(name='TableName', example='dual'),
}

model CreateQualityEntityResponseBody = {
  data?: int32(name='Data', example='12345'),
  errorCode?: string(name='ErrorCode', example='401'),
  errorMessage?: string(name='ErrorMessage', example='Your project is not relative with your account.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='011e1231u3****'),
  success?: boolean(name='Success', example='true'),
}

model CreateQualityEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateQualityEntityResponseBody(name='body'),
}

async function createQualityEntityWithOptions(request: CreateQualityEntityRequest, runtime: Util.RuntimeOptions): CreateQualityEntityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.entityLevel)) {
    body['EntityLevel'] = request.entityLevel;
  }
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.matchExpression)) {
    body['MatchExpression'] = request.matchExpression;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.tableName)) {
    body['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateQualityEntity',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createQualityEntity(request: CreateQualityEntityRequest): CreateQualityEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return createQualityEntityWithOptions(request, runtime);
}

model CreateQualityFollowerRequest {
  alarmMode?: int32(name='AlarmMode', example='1'),
  entityId?: long(name='EntityId', example='12345'),
  follower?: string(name='Follower', example='123'),
  projectName?: string(name='ProjectName', example='autotest'),
}

model CreateQualityFollowerResponseBody = {
  data?: int32(name='Data', example='12345'),
  errorCode?: string(name='ErrorCode', example='401'),
  errorMessage?: string(name='ErrorMessage', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='ecb967ec-c137-48****'),
  success?: boolean(name='Success', example='true'),
}

model CreateQualityFollowerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateQualityFollowerResponseBody(name='body'),
}

async function createQualityFollowerWithOptions(request: CreateQualityFollowerRequest, runtime: Util.RuntimeOptions): CreateQualityFollowerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alarmMode)) {
    body['AlarmMode'] = request.alarmMode;
  }
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.follower)) {
    body['Follower'] = request.follower;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateQualityFollower',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createQualityFollower(request: CreateQualityFollowerRequest): CreateQualityFollowerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createQualityFollowerWithOptions(request, runtime);
}

model CreateQualityRelativeNodeRequest {
  envType?: string(name='EnvType', example='ODPS'),
  matchExpression?: string(name='MatchExpression', example='dt=$[yyyymmdd]'),
  nodeId?: long(name='NodeId', example='12321'),
  projectId?: long(name='ProjectId', example='123'),
  projectName?: string(name='ProjectName', example='autotest'),
  tableName?: string(name='TableName', example='dual'),
  targetNodeProjectId?: long(name='TargetNodeProjectId', example='1234'),
  targetNodeProjectName?: string(name='TargetNodeProjectName', example='autotest'),
}

model CreateQualityRelativeNodeResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='401'),
  errorMessage?: string(name='ErrorMessage', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='ecb967ec-c137-48****'),
  success?: boolean(name='Success', example='true'),
}

model CreateQualityRelativeNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateQualityRelativeNodeResponseBody(name='body'),
}

async function createQualityRelativeNodeWithOptions(request: CreateQualityRelativeNodeRequest, runtime: Util.RuntimeOptions): CreateQualityRelativeNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.matchExpression)) {
    body['MatchExpression'] = request.matchExpression;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.tableName)) {
    body['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.targetNodeProjectId)) {
    body['TargetNodeProjectId'] = request.targetNodeProjectId;
  }
  if (!Util.isUnset(request.targetNodeProjectName)) {
    body['TargetNodeProjectName'] = request.targetNodeProjectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateQualityRelativeNode',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createQualityRelativeNode(request: CreateQualityRelativeNodeRequest): CreateQualityRelativeNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createQualityRelativeNodeWithOptions(request, runtime);
}

model CreateQualityRuleRequest {
  blockType?: int32(name='BlockType', example='0'),
  checker?: int32(name='Checker', example='9'),
  comment?: string(name='Comment'),
  criticalThreshold?: string(name='CriticalThreshold', example='20'),
  entityId?: long(name='EntityId', example='15224'),
  expectValue?: string(name='ExpectValue', example='0'),
  methodName?: string(name='MethodName', example='count/table_count'),
  operator?: string(name='Operator', example='>'),
  predictType?: int32(name='PredictType', example='0'),
  projectName?: string(name='ProjectName', example='autotest'),
  property?: string(name='Property', example='table_id'),
  propertyType?: string(name='PropertyType', example='bigint'),
  ruleName?: string(name='RuleName', example='1234'),
  ruleType?: int32(name='RuleType', example='0'),
  templateId?: int32(name='TemplateId', example='7'),
  trend?: string(name='Trend', example='abs'),
  warningThreshold?: string(name='WarningThreshold', example='10'),
  whereCondition?: string(name='WhereCondition', example='table_id>1'),
}

model CreateQualityRuleResponseBody = {
  data?: string(name='Data', example='12345'),
  errorCode?: string(name='ErrorCode', example='401'),
  errorMessage?: string(name='ErrorMessage', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='ecb967ec-c137-48****'),
  success?: boolean(name='Success', example='true'),
}

model CreateQualityRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateQualityRuleResponseBody(name='body'),
}

async function createQualityRuleWithOptions(request: CreateQualityRuleRequest, runtime: Util.RuntimeOptions): CreateQualityRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.blockType)) {
    body['BlockType'] = request.blockType;
  }
  if (!Util.isUnset(request.checker)) {
    body['Checker'] = request.checker;
  }
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.criticalThreshold)) {
    body['CriticalThreshold'] = request.criticalThreshold;
  }
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.expectValue)) {
    body['ExpectValue'] = request.expectValue;
  }
  if (!Util.isUnset(request.methodName)) {
    body['MethodName'] = request.methodName;
  }
  if (!Util.isUnset(request.operator)) {
    body['Operator'] = request.operator;
  }
  if (!Util.isUnset(request.predictType)) {
    body['PredictType'] = request.predictType;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.property)) {
    body['Property'] = request.property;
  }
  if (!Util.isUnset(request.propertyType)) {
    body['PropertyType'] = request.propertyType;
  }
  if (!Util.isUnset(request.ruleName)) {
    body['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.ruleType)) {
    body['RuleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.trend)) {
    body['Trend'] = request.trend;
  }
  if (!Util.isUnset(request.warningThreshold)) {
    body['WarningThreshold'] = request.warningThreshold;
  }
  if (!Util.isUnset(request.whereCondition)) {
    body['WhereCondition'] = request.whereCondition;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateQualityRule',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createQualityRule(request: CreateQualityRuleRequest): CreateQualityRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createQualityRuleWithOptions(request, runtime);
}

model CreateRemindRequest {
  alertInterval?: int32(name='AlertInterval', example='1800'),
  alertMethods?: string(name='AlertMethods', example='SMS,MAIL'),
  alertTargets?: string(name='AlertTargets', example='9527952795279527'),
  alertUnit?: string(name='AlertUnit', example='OWNER'),
  baselineIds?: string(name='BaselineIds', example='1,2,3'),
  bizProcessIds?: string(name='BizProcessIds', example='1,2,3'),
  detail?: string(name='Detail', example='{"hour":23,"minu":59}'),
  dndEnd?: string(name='DndEnd', example='08:00'),
  maxAlertTimes?: int32(name='MaxAlertTimes', example='2'),
  nodeIds?: string(name='NodeIds', example='1,2,3'),
  projectId?: long(name='ProjectId', example='9527'),
  remindName?: string(name='RemindName', example='test_error_remind'),
  remindType?: string(name='RemindType', example='FINISHED'),
  remindUnit?: string(name='RemindUnit', example='NODE'),
  robotUrls?: string(name='RobotUrls', example='https://oapi.dingtalk.com/robot/send?access_token=******************************'),
  webhooks?: string(name='Webhooks'),
}

model CreateRemindResponseBody = {
  data?: long(name='Data', example='1234'),
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model CreateRemindResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRemindResponseBody(name='body'),
}

async function createRemindWithOptions(request: CreateRemindRequest, runtime: Util.RuntimeOptions): CreateRemindResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertInterval)) {
    body['AlertInterval'] = request.alertInterval;
  }
  if (!Util.isUnset(request.alertMethods)) {
    body['AlertMethods'] = request.alertMethods;
  }
  if (!Util.isUnset(request.alertTargets)) {
    body['AlertTargets'] = request.alertTargets;
  }
  if (!Util.isUnset(request.alertUnit)) {
    body['AlertUnit'] = request.alertUnit;
  }
  if (!Util.isUnset(request.baselineIds)) {
    body['BaselineIds'] = request.baselineIds;
  }
  if (!Util.isUnset(request.bizProcessIds)) {
    body['BizProcessIds'] = request.bizProcessIds;
  }
  if (!Util.isUnset(request.detail)) {
    body['Detail'] = request.detail;
  }
  if (!Util.isUnset(request.dndEnd)) {
    body['DndEnd'] = request.dndEnd;
  }
  if (!Util.isUnset(request.maxAlertTimes)) {
    body['MaxAlertTimes'] = request.maxAlertTimes;
  }
  if (!Util.isUnset(request.nodeIds)) {
    body['NodeIds'] = request.nodeIds;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.remindName)) {
    body['RemindName'] = request.remindName;
  }
  if (!Util.isUnset(request.remindType)) {
    body['RemindType'] = request.remindType;
  }
  if (!Util.isUnset(request.remindUnit)) {
    body['RemindUnit'] = request.remindUnit;
  }
  if (!Util.isUnset(request.robotUrls)) {
    body['RobotUrls'] = request.robotUrls;
  }
  if (!Util.isUnset(request.webhooks)) {
    body['Webhooks'] = request.webhooks;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateRemind',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRemind(request: CreateRemindRequest): CreateRemindResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRemindWithOptions(request, runtime);
}

model CreateTableRequest {
  appGuid?: string(name='AppGuid', example='odps.test'),
  categoryId?: long(name='CategoryId', example='101'),
  clientToken?: string(name='ClientToken'),
  columns?: [ 
    {
      columnName?: string(name='ColumnName', example='columnName1'),
      columnNameCn?: string(name='ColumnNameCn'),
      columnType?: string(name='ColumnType', example='string'),
      comment?: string(name='Comment'),
      isPartitionCol?: boolean(name='IsPartitionCol', example='true'),
      length?: int32(name='Length', example='10'),
      seqNumber?: int32(name='SeqNumber', example='1'),
    }
  ](name='Columns'),
  comment?: string(name='Comment'),
  endpoint?: string(name='Endpoint', example='odps://abc'),
  envType?: int32(name='EnvType', example='1'),
  externalTableType?: string(name='ExternalTableType', example='0'),
  hasPart?: int32(name='HasPart', example='0'),
  isView?: int32(name='IsView', example='0'),
  lifeCycle?: int32(name='LifeCycle', example='10'),
  location?: string(name='Location', example='location'),
  logicalLevelId?: long(name='LogicalLevelId', example='101'),
  ownerId?: string(name='OwnerId'),
  physicsLevelId?: long(name='PhysicsLevelId', example='101'),
  projectId?: long(name='ProjectId', example='23'),
  schema?: string(name='Schema', example='default'),
  tableName?: string(name='TableName', example='tableName1'),
  themes?: [ 
    {
      themeId?: long(name='ThemeId', example='101'),
      themeLevel?: int32(name='ThemeLevel', example='101'),
    }
  ](name='Themes'),
  visibility?: int32(name='Visibility', example='1'),
}

model CreateTableResponseBody = {
  requestId?: string(name='RequestId', example='abcdef'),
  taskInfo?: {
    content?: string(name='Content', example='success'),
    nextTaskId?: string(name='NextTaskId', example='abc1'),
    status?: string(name='Status', example='success'),
    taskId?: string(name='TaskId', example='abc'),
  }(name='TaskInfo'),
}

model CreateTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTableResponseBody(name='body'),
}

async function createTableWithOptions(request: CreateTableRequest, runtime: Util.RuntimeOptions): CreateTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appGuid)) {
    query['AppGuid'] = request.appGuid;
  }
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.externalTableType)) {
    query['ExternalTableType'] = request.externalTableType;
  }
  if (!Util.isUnset(request.hasPart)) {
    query['HasPart'] = request.hasPart;
  }
  if (!Util.isUnset(request.isView)) {
    query['IsView'] = request.isView;
  }
  if (!Util.isUnset(request.lifeCycle)) {
    query['LifeCycle'] = request.lifeCycle;
  }
  if (!Util.isUnset(request.location)) {
    query['Location'] = request.location;
  }
  if (!Util.isUnset(request.logicalLevelId)) {
    query['LogicalLevelId'] = request.logicalLevelId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.physicsLevelId)) {
    query['PhysicsLevelId'] = request.physicsLevelId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.visibility)) {
    query['Visibility'] = request.visibility;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.columns)) {
    body['Columns'] = request.columns;
  }
  if (!Util.isUnset(request.endpoint)) {
    body['Endpoint'] = request.endpoint;
  }
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.themes)) {
    body['Themes'] = request.themes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTable',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTable(request: CreateTableRequest): CreateTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTableWithOptions(request, runtime);
}

model CreateTableLevelRequest {
  description?: string(name='Description'),
  levelType?: int32(name='LevelType', example='1'),
  name?: string(name='Name'),
  projectId?: long(name='ProjectId', example='123'),
}

model CreateTableLevelResponseBody = {
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  levelId?: long(name='LevelId', example='123'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model CreateTableLevelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTableLevelResponseBody(name='body'),
}

async function createTableLevelWithOptions(request: CreateTableLevelRequest, runtime: Util.RuntimeOptions): CreateTableLevelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.levelType)) {
    query['LevelType'] = request.levelType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTableLevel',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTableLevel(request: CreateTableLevelRequest): CreateTableLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTableLevelWithOptions(request, runtime);
}

model CreateTableThemeRequest {
  level?: int32(name='Level', example='1'),
  name?: string(name='Name'),
  parentId?: long(name='ParentId', example='122'),
  projectId?: long(name='ProjectId', example='123'),
}

model CreateTableThemeResponseBody = {
  errorCode?: string(name='ErrorCode', example='0'),
  errorMessage?: string(name='ErrorMessage', example='success'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='ABCd'),
  success?: boolean(name='Success', example='true'),
  themeId?: long(name='ThemeId', example='123'),
}

model CreateTableThemeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTableThemeResponseBody(name='body'),
}

async function createTableThemeWithOptions(request: CreateTableThemeRequest, runtime: Util.RuntimeOptions): CreateTableThemeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.level)) {
    query['Level'] = request.level;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.parentId)) {
    query['ParentId'] = request.parentId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTableTheme',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTableTheme(request: CreateTableThemeRequest): CreateTableThemeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTableThemeWithOptions(request, runtime);
}

model CreateUdfFileRequest {
  className?: string(name='ClassName', example='com.alibaba.DataWorks.api.udf.StringConcat'),
  cmdDescription?: string(name='CmdDescription', example='StringConcat(String... substrs)'),
  example?: string(name='Example', example='StringConcat(\\"a\\", \\"b\\", \\"c\\")'),
  fileFolderPath?: string(name='FileFolderPath'),
  fileName?: string(name='FileName', example='StringConcat'),
  functionType?: string(name='FunctionType', example='STRING'),
  parameterDescription?: string(name='ParameterDescription'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
  resources?: string(name='Resources', example='string-concat-1.0.0.jar,commons-lang-2.6.jar'),
  returnValue?: string(name='ReturnValue'),
  udfDescription?: string(name='UdfDescription'),
}

model CreateUdfFileResponseBody = {
  data?: long(name='Data', example='100000002'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model CreateUdfFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUdfFileResponseBody(name='body'),
}

async function createUdfFileWithOptions(request: CreateUdfFileRequest, runtime: Util.RuntimeOptions): CreateUdfFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.className)) {
    body['ClassName'] = request.className;
  }
  if (!Util.isUnset(request.cmdDescription)) {
    body['CmdDescription'] = request.cmdDescription;
  }
  if (!Util.isUnset(request.example)) {
    body['Example'] = request.example;
  }
  if (!Util.isUnset(request.fileFolderPath)) {
    body['FileFolderPath'] = request.fileFolderPath;
  }
  if (!Util.isUnset(request.fileName)) {
    body['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.functionType)) {
    body['FunctionType'] = request.functionType;
  }
  if (!Util.isUnset(request.parameterDescription)) {
    body['ParameterDescription'] = request.parameterDescription;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.resources)) {
    body['Resources'] = request.resources;
  }
  if (!Util.isUnset(request.returnValue)) {
    body['ReturnValue'] = request.returnValue;
  }
  if (!Util.isUnset(request.udfDescription)) {
    body['UdfDescription'] = request.udfDescription;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateUdfFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createUdfFile(request: CreateUdfFileRequest): CreateUdfFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUdfFileWithOptions(request, runtime);
}

model DeleteBaselineRequest {
  baselineId?: long(name='BaselineId'),
  projectId?: long(name='ProjectId'),
}

model DeleteBaselineResponseBody = {
  data?: boolean(name='Data'),
  dynamicErrorCode?: string(name='DynamicErrorCode'),
  dynamicErrorMessage?: string(name='DynamicErrorMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteBaselineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBaselineResponseBody(name='body'),
}

async function deleteBaselineWithOptions(request: DeleteBaselineRequest, runtime: Util.RuntimeOptions): DeleteBaselineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBaseline',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBaseline(request: DeleteBaselineRequest): DeleteBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBaselineWithOptions(request, runtime);
}

model DeleteBusinessRequest {
  businessId?: long(name='BusinessId', example='1000001'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model DeleteBusinessResponseBody = {
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteBusinessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBusinessResponseBody(name='body'),
}

async function deleteBusinessWithOptions(request: DeleteBusinessRequest, runtime: Util.RuntimeOptions): DeleteBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessId)) {
    body['BusinessId'] = request.businessId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBusiness',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBusiness(request: DeleteBusinessRequest): DeleteBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBusinessWithOptions(request, runtime);
}

model DeleteConnectionRequest {
  connectionId?: long(name='ConnectionId', example='1'),
}

model DeleteConnectionResponseBody = {
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1411515937635****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteConnectionResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DeleteConnectionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteConnectionResponse
 */
// Deprecated
async function deleteConnectionWithOptions(request: DeleteConnectionRequest, runtime: Util.RuntimeOptions): DeleteConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionId)) {
    query['ConnectionId'] = request.connectionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteConnection',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DeleteConnectionRequest
  * @return DeleteConnectionResponse
 */
// Deprecated
async function deleteConnection(request: DeleteConnectionRequest): DeleteConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteConnectionWithOptions(request, runtime);
}

model DeleteDISyncTaskRequest {
  fileId?: long(name='FileId', example='100'),
  projectId?: long(name='ProjectId', example='10000'),
  taskType?: string(name='TaskType', example='DI_REALTIME'),
}

model DeleteDISyncTaskResponseBody = {
  data?: {
    message?: string(name='Message', example='fileId:[100] is invalid.'),
    status?: string(name='Status', example='fail'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='0bc1411515937635973****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDISyncTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDISyncTaskResponseBody(name='body'),
}

async function deleteDISyncTaskWithOptions(request: DeleteDISyncTaskRequest, runtime: Util.RuntimeOptions): DeleteDISyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDISyncTask',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDISyncTask(request: DeleteDISyncTaskRequest): DeleteDISyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDISyncTaskWithOptions(request, runtime);
}

model DeleteDataServiceApiRequest {
  apiId?: long(name='ApiId', example='10000'),
  projectId?: long(name='ProjectId', example='10001'),
  tenantId?: long(name='TenantId', example='10002'),
}

model DeleteDataServiceApiResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDataServiceApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDataServiceApiResponseBody(name='body'),
}

async function deleteDataServiceApiWithOptions(request: DeleteDataServiceApiRequest, runtime: Util.RuntimeOptions): DeleteDataServiceApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDataServiceApi(request: DeleteDataServiceApiRequest): DeleteDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataServiceApiWithOptions(request, runtime);
}

model DeleteDataServiceApiAuthorityRequest {
  apiId?: long(name='ApiId', example='10001'),
  authorizedProjectId?: long(name='AuthorizedProjectId', example='10002'),
  projectId?: long(name='ProjectId', example='10003'),
  tenantId?: long(name='TenantId', example='10004'),
}

model DeleteDataServiceApiAuthorityResponseBody = {
  requestId?: string(name='RequestId', example='0000-ABCD-EF****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDataServiceApiAuthorityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDataServiceApiAuthorityResponseBody(name='body'),
}

async function deleteDataServiceApiAuthorityWithOptions(request: DeleteDataServiceApiAuthorityRequest, runtime: Util.RuntimeOptions): DeleteDataServiceApiAuthorityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.authorizedProjectId)) {
    body['AuthorizedProjectId'] = request.authorizedProjectId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataServiceApiAuthority',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDataServiceApiAuthority(request: DeleteDataServiceApiAuthorityRequest): DeleteDataServiceApiAuthorityResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataServiceApiAuthorityWithOptions(request, runtime);
}

model DeleteDataSourceRequest {
  dataSourceId?: long(name='DataSourceId', example='1'),
}

model DeleteDataSourceResponseBody = {
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1411515937635****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDataSourceResponseBody(name='body'),
}

async function deleteDataSourceWithOptions(request: DeleteDataSourceRequest, runtime: Util.RuntimeOptions): DeleteDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataSourceId)) {
    query['DataSourceId'] = request.dataSourceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataSource',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataSourceWithOptions(request, runtime);
}

model DeleteFileRequest {
  fileId?: long(name='FileId', example='10000001'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model DeleteFileResponseBody = {
  deploymentId?: long(name='DeploymentId', example='1000000001'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFileResponseBody(name='body'),
}

async function deleteFileWithOptions(request: DeleteFileRequest, runtime: Util.RuntimeOptions): DeleteFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFile(request: DeleteFileRequest): DeleteFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFileWithOptions(request, runtime);
}

model DeleteFolderRequest {
  folderId?: string(name='FolderId', example='2eb6f9****'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model DeleteFolderResponseBody = {
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteFolderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFolderResponseBody(name='body'),
}

async function deleteFolderWithOptions(request: DeleteFolderRequest, runtime: Util.RuntimeOptions): DeleteFolderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderId)) {
    body['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFolder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFolder(request: DeleteFolderRequest): DeleteFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFolderWithOptions(request, runtime);
}

model DeleteFromMetaCategoryRequest {
  categoryId?: long(name='CategoryId', example='5'),
  tableGuid?: string(name='TableGuid', example='odps.engine_name.table_name'),
}

model DeleteFromMetaCategoryResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1ec92159376'),
  success?: boolean(name='Success', example='true'),
}

model DeleteFromMetaCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFromMetaCategoryResponseBody(name='body'),
}

async function deleteFromMetaCategoryWithOptions(request: DeleteFromMetaCategoryRequest, runtime: Util.RuntimeOptions): DeleteFromMetaCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFromMetaCategory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFromMetaCategory(request: DeleteFromMetaCategoryRequest): DeleteFromMetaCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFromMetaCategoryWithOptions(request, runtime);
}

model DeleteMetaCategoryRequest {
  categoryId?: long(name='CategoryId', example='23'),
}

model DeleteMetaCategoryResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1ec92159376'),
  success?: boolean(name='Success', example='true'),
}

model DeleteMetaCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMetaCategoryResponseBody(name='body'),
}

async function deleteMetaCategoryWithOptions(request: DeleteMetaCategoryRequest, runtime: Util.RuntimeOptions): DeleteMetaCategoryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMetaCategory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMetaCategory(request: DeleteMetaCategoryRequest): DeleteMetaCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMetaCategoryWithOptions(request, runtime);
}

model DeleteMetaCollectionRequest {
  qualifiedName?: string(name='QualifiedName', example='album.12333'),
}

model DeleteMetaCollectionResponseBody = {
  errorCode?: string(name='ErrorCode', example='999999'),
  errorMessage?: string(name='ErrorMessage', example='The specified product does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-E****'),
  status?: boolean(name='Status', example='true'),
  success?: boolean(name='Success', example='true'),
}

model DeleteMetaCollectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMetaCollectionResponseBody(name='body'),
}

async function deleteMetaCollectionWithOptions(request: DeleteMetaCollectionRequest, runtime: Util.RuntimeOptions): DeleteMetaCollectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.qualifiedName)) {
    query['QualifiedName'] = request.qualifiedName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMetaCollection',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMetaCollection(request: DeleteMetaCollectionRequest): DeleteMetaCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMetaCollectionWithOptions(request, runtime);
}

model DeleteMetaCollectionEntityRequest {
  collectionQualifiedName?: string(name='CollectionQualifiedName', example='album.12345'),
  entityQualifiedName?: string(name='EntityQualifiedName', example='maxcompute.projectA.tableB'),
}

model DeleteMetaCollectionEntityResponseBody = {
  errorCode?: string(name='ErrorCode', example='999999'),
  errorMessage?: string(name='ErrorMessage', example='entity not exist'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', description='Id of the request', example='0000-ABCD-E****'),
  status?: boolean(name='Status', example='true'),
  success?: boolean(name='Success', example='true'),
}

model DeleteMetaCollectionEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMetaCollectionEntityResponseBody(name='body'),
}

async function deleteMetaCollectionEntityWithOptions(request: DeleteMetaCollectionEntityRequest, runtime: Util.RuntimeOptions): DeleteMetaCollectionEntityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.collectionQualifiedName)) {
    query['CollectionQualifiedName'] = request.collectionQualifiedName;
  }
  if (!Util.isUnset(request.entityQualifiedName)) {
    query['EntityQualifiedName'] = request.entityQualifiedName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMetaCollectionEntity',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMetaCollectionEntity(request: DeleteMetaCollectionEntityRequest): DeleteMetaCollectionEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMetaCollectionEntityWithOptions(request, runtime);
}

model DeleteProjectMemberRequest {
  projectId?: long(name='ProjectId', example='27'),
  userId?: string(name='UserId', example='1234'),
}

model DeleteProjectMemberResponseBody = {
  requestId?: string(name='RequestId', example='1AFAE64E-D1BE-432B-A9****'),
}

model DeleteProjectMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProjectMemberResponseBody(name='body'),
}

async function deleteProjectMemberWithOptions(request: DeleteProjectMemberRequest, runtime: Util.RuntimeOptions): DeleteProjectMemberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProjectMember',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteProjectMember(request: DeleteProjectMemberRequest): DeleteProjectMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProjectMemberWithOptions(request, runtime);
}

model DeleteQualityEntityRequest {
  entityId?: long(name='EntityId', example='1234'),
  envType?: string(name='EnvType', example='ODPS'),
  projectName?: string(name='ProjectName', example='autotest'),
}

model DeleteQualityEntityResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='401'),
  errorMessage?: string(name='ErrorMessage', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='ecb967ec-c137-48****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteQualityEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteQualityEntityResponseBody(name='body'),
}

async function deleteQualityEntityWithOptions(request: DeleteQualityEntityRequest, runtime: Util.RuntimeOptions): DeleteQualityEntityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteQualityEntity',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteQualityEntity(request: DeleteQualityEntityRequest): DeleteQualityEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteQualityEntityWithOptions(request, runtime);
}

model DeleteQualityFollowerRequest {
  followerId?: long(name='FollowerId', example='1234'),
  projectName?: string(name='ProjectName', example='autotest'),
}

model DeleteQualityFollowerResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='401'),
  errorMessage?: string(name='ErrorMessage', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='6d739ef6-098a-47****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteQualityFollowerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteQualityFollowerResponseBody(name='body'),
}

async function deleteQualityFollowerWithOptions(request: DeleteQualityFollowerRequest, runtime: Util.RuntimeOptions): DeleteQualityFollowerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.followerId)) {
    body['FollowerId'] = request.followerId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteQualityFollower',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteQualityFollower(request: DeleteQualityFollowerRequest): DeleteQualityFollowerResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteQualityFollowerWithOptions(request, runtime);
}

model DeleteQualityRelativeNodeRequest {
  envType?: string(name='EnvType', example='ODPS'),
  matchExpression?: string(name='MatchExpression', example='dt=$[yyyymmdd]'),
  nodeId?: long(name='NodeId', example='156234'),
  projectId?: long(name='ProjectId', example='12345'),
  projectName?: string(name='ProjectName', example='autotest'),
  tableName?: string(name='TableName', example='dual'),
  targetNodeProjectId?: long(name='TargetNodeProjectId', example='12345'),
  targetNodeProjectName?: string(name='TargetNodeProjectName', example='autotest'),
}

model DeleteQualityRelativeNodeResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='401'),
  errorMessage?: string(name='ErrorMessage', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='6d739ef6-098a-47****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteQualityRelativeNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteQualityRelativeNodeResponseBody(name='body'),
}

async function deleteQualityRelativeNodeWithOptions(request: DeleteQualityRelativeNodeRequest, runtime: Util.RuntimeOptions): DeleteQualityRelativeNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.matchExpression)) {
    body['MatchExpression'] = request.matchExpression;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.tableName)) {
    body['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.targetNodeProjectId)) {
    body['TargetNodeProjectId'] = request.targetNodeProjectId;
  }
  if (!Util.isUnset(request.targetNodeProjectName)) {
    body['TargetNodeProjectName'] = request.targetNodeProjectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteQualityRelativeNode',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteQualityRelativeNode(request: DeleteQualityRelativeNodeRequest): DeleteQualityRelativeNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteQualityRelativeNodeWithOptions(request, runtime);
}

model DeleteQualityRuleRequest {
  projectName?: string(name='ProjectName', example='autotest'),
  ruleId?: long(name='RuleId', example='1234'),
}

model DeleteQualityRuleResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='401'),
  errorMessage?: string(name='ErrorMessage', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='6d739ef6-098a-47****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteQualityRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteQualityRuleResponseBody(name='body'),
}

async function deleteQualityRuleWithOptions(request: DeleteQualityRuleRequest, runtime: Util.RuntimeOptions): DeleteQualityRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.ruleId)) {
    body['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteQualityRule',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteQualityRule(request: DeleteQualityRuleRequest): DeleteQualityRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteQualityRuleWithOptions(request, runtime);
}

model DeleteRemindRequest {
  remindId?: long(name='RemindId', example='1234'),
}

model DeleteRemindResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteRemindResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRemindResponseBody(name='body'),
}

async function deleteRemindWithOptions(request: DeleteRemindRequest, runtime: Util.RuntimeOptions): DeleteRemindResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.remindId)) {
    body['RemindId'] = request.remindId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRemind',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRemind(request: DeleteRemindRequest): DeleteRemindResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRemindWithOptions(request, runtime);
}

model DeleteTableRequest {
  appGuid?: string(name='AppGuid', example='odps.test'),
  envType?: int32(name='EnvType', example='1'),
  projectId?: long(name='ProjectId', example='101'),
  schema?: string(name='Schema', example='default'),
  tableName?: string(name='TableName', example='table1'),
}

model DeleteTableResponseBody = {
  requestId?: string(name='RequestId', example='abcde'),
  taskInfo?: {
    content?: string(name='Content', example='success'),
    nextTaskId?: string(name='NextTaskId', example='abc1'),
    status?: string(name='Status', example='success'),
    taskId?: string(name='TaskId', example='abc'),
  }(name='TaskInfo'),
}

model DeleteTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTableResponseBody(name='body'),
}

async function deleteTableWithOptions(request: DeleteTableRequest, runtime: Util.RuntimeOptions): DeleteTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appGuid)) {
    query['AppGuid'] = request.appGuid;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTable',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTable(request: DeleteTableRequest): DeleteTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTableWithOptions(request, runtime);
}

model DeleteTableLevelRequest {
  levelId?: long(name='LevelId', example='123'),
  projectId?: long(name='ProjectId', example='123'),
}

model DeleteTableLevelResponseBody = {
  deleteResult?: boolean(name='DeleteResult', example='true'),
  requestId?: string(name='RequestId', example='abcde'),
}

model DeleteTableLevelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTableLevelResponseBody(name='body'),
}

async function deleteTableLevelWithOptions(request: DeleteTableLevelRequest, runtime: Util.RuntimeOptions): DeleteTableLevelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.levelId)) {
    query['LevelId'] = request.levelId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTableLevel',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTableLevel(request: DeleteTableLevelRequest): DeleteTableLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTableLevelWithOptions(request, runtime);
}

model DeleteTableThemeRequest {
  projectId?: long(name='ProjectId', example='123'),
  themeId?: long(name='ThemeId', example='123'),
}

model DeleteTableThemeResponseBody = {
  deleteResult?: boolean(name='DeleteResult', example='true'),
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='abcdef'),
  success?: boolean(name='Success', example='true'),
}

model DeleteTableThemeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTableThemeResponseBody(name='body'),
}

async function deleteTableThemeWithOptions(request: DeleteTableThemeRequest, runtime: Util.RuntimeOptions): DeleteTableThemeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.themeId)) {
    query['ThemeId'] = request.themeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTableTheme',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTableTheme(request: DeleteTableThemeRequest): DeleteTableThemeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTableThemeWithOptions(request, runtime);
}

model DeployDISyncTaskRequest {
  fileId?: long(name='FileId', example='100'),
  projectId?: long(name='ProjectId', example='10000'),
  taskType?: string(name='TaskType', example='DI_REALTIME'),
}

model DeployDISyncTaskResponseBody = {
  data?: {
    message?: string(name='Message', example='submit and deploy fail.'),
    status?: string(name='Status', example='success'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='0bc1411515937635973****'),
  success?: boolean(name='Success', example='true'),
}

model DeployDISyncTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeployDISyncTaskResponseBody(name='body'),
}

async function deployDISyncTaskWithOptions(request: DeployDISyncTaskRequest, runtime: Util.RuntimeOptions): DeployDISyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeployDISyncTask',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deployDISyncTask(request: DeployDISyncTaskRequest): DeployDISyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deployDISyncTaskWithOptions(request, runtime);
}

model DeployFileRequest {
  comment?: string(name='Comment'),
  fileId?: long(name='FileId', example='10000001'),
  nodeId?: long(name='NodeId', example='2000001'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model DeployFileResponseBody = {
  data?: long(name='Data', example='30000001'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model DeployFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeployFileResponseBody(name='body'),
}

async function deployFileWithOptions(request: DeployFileRequest, runtime: Util.RuntimeOptions): DeployFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeployFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deployFile(request: DeployFileRequest): DeployFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deployFileWithOptions(request, runtime);
}

model DesensitizeDataRequest {
  data?: string(name='Data', example='15365291784'),
  sceneCode?: string(name='SceneCode', example='_default_scene_code'),
}

model DesensitizeDataResponseBody = {
  desensitizeData?: string(name='DesensitizeData', example='{     "desensData": "**198807120510**"   }'),
  requestId?: string(name='RequestId', example='BCA321BA-46C5-40E9-8A08-6******'),
}

model DesensitizeDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DesensitizeDataResponseBody(name='body'),
}

async function desensitizeDataWithOptions(request: DesensitizeDataRequest, runtime: Util.RuntimeOptions): DesensitizeDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DesensitizeData',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function desensitizeData(request: DesensitizeDataRequest): DesensitizeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return desensitizeDataWithOptions(request, runtime);
}

model EstablishRelationTableToBusinessRequest {
  businessId?: string(name='BusinessId', example='1000001'),
  folderId?: string(name='FolderId', example='2eb6f9****'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw'),
  tableGuid?: string(name='TableGuid', example='odps.dw_project.tb1'),
}

model EstablishRelationTableToBusinessResponseBody = {
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', example='true'),
}

model EstablishRelationTableToBusinessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EstablishRelationTableToBusinessResponseBody(name='body'),
}

async function establishRelationTableToBusinessWithOptions(request: EstablishRelationTableToBusinessRequest, runtime: Util.RuntimeOptions): EstablishRelationTableToBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessId)) {
    body['BusinessId'] = request.businessId;
  }
  if (!Util.isUnset(request.folderId)) {
    body['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.tableGuid)) {
    body['TableGuid'] = request.tableGuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EstablishRelationTableToBusiness',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function establishRelationTableToBusiness(request: EstablishRelationTableToBusinessRequest): EstablishRelationTableToBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return establishRelationTableToBusinessWithOptions(request, runtime);
}

model ExportDataSourcesRequest {
  dataSourceType?: string(name='DataSourceType', example='rds'),
  envType?: int32(name='EnvType', example='1'),
  name?: string(name='Name', example='test'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='10000'),
  subType?: string(name='SubType', example='mysql'),
}

model ExportDataSourcesResponseBody = {
  data?: {
    dataSources?: [ 
      {
        bindingCalcEngineId?: int32(name='BindingCalcEngineId', example='123'),
        connectStatus?: int32(name='ConnectStatus', example='1'),
        content?: string(name='Content', example='{"pubEndpoint":"http://service.cn.maxcompute.aliyun.com/api","accessId":"TMP.3KecGjvzy3i8MYfn2BGHgF7EHGyBFZcHm7GgngrABVRyvvKQrfF5kskR36xP361C3dqwbGo7SGYptAeGyiTwHXqLaBUvYC","securityToken":null,"endpoint":"http://service.cn.maxcompute.aliyun-inc.com/api","accessKey":"***","name":"PRE_PROJECT_A_engine","project":"PRE_PROJECT_A","vpcEndpoint":"http://service.cn.maxcompute.aliyun-inc.com/api","region":"cn-shanghai","authType":"2"}'),
        dataSourceType?: string(name='DataSourceType', example='rds'),
        defaultEngine?: boolean(name='DefaultEngine', example='false'),
        description?: string(name='Description', example='a connection'),
        envType?: int32(name='EnvType', example='1'),
        gmtCreate?: string(name='GmtCreate', example='Mar 17, 2021 4:09:32 PM'),
        gmtModified?: string(name='GmtModified', example='Mar 17, 2021 4:09:32 PM'),
        id?: int32(name='Id', example='1'),
        name?: string(name='Name', example='abc'),
        operator?: string(name='Operator', example='193543050****'),
        projectId?: int32(name='ProjectId', example='123'),
        sequence?: int32(name='Sequence', example='300'),
        shared?: boolean(name='Shared', example='false'),
        status?: int32(name='Status', example='1'),
        subType?: string(name='SubType', example='mysql'),
        tenantId?: long(name='TenantId', example='1234567'),
      }
    ](name='DataSources'),
    pageNumber?: int32(name='PageNumber', example='10'),
    pageSize?: int32(name='PageSize', example='1'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc14115159376359****'),
  success?: boolean(name='Success', example='true'),
}

model ExportDataSourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportDataSourcesResponseBody(name='body'),
}

async function exportDataSourcesWithOptions(request: ExportDataSourcesRequest, runtime: Util.RuntimeOptions): ExportDataSourcesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportDataSources',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function exportDataSources(request: ExportDataSourcesRequest): ExportDataSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportDataSourcesWithOptions(request, runtime);
}

model GenerateDISyncTaskConfigForCreatingRequest {
  clientToken?: string(name='ClientToken', example='ABFUOEUOTRTRJKE'),
  projectId?: long(name='ProjectId', example='10000'),
  taskParam?: string(name='TaskParam', example='{    "type": "realtime",     "version": "1.0",        "setting": {       "resourceGroup":       "S_res_group_280749521950784_1623033752022",        "scheduleResgroupId": 30003913,       "name": "openapi_realtime_solution_0813_1739",       "taskType": "oneclick_to_odps"     },     "steps": [         {             "stepType": "mysql",             "parameter": {                 "connection": [                     {                        "datasourceType": "mysql",                         "datasource": "mysql_pub",                         "table": [                             "xyx"                         ]                     }                 ]             },             "name": "Reader",             "category": "reader"         },         {             "stepType": "odps",             "parameter": {                 "datasource": "odps_first"             },             "name": "Writer",             "category": "writer"         }     ] }'),
  taskType?: string(name='TaskType', example='DI_REALTIME'),
}

model GenerateDISyncTaskConfigForCreatingResponseBody = {
  data?: {
    message?: string(name='Message', example='XXX is invalid.'),
    processId?: long(name='ProcessId', example='10'),
    status?: string(name='Status', example='true'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='0bc1411515937635973****'),
  success?: boolean(name='Success', example='true'),
}

model GenerateDISyncTaskConfigForCreatingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateDISyncTaskConfigForCreatingResponseBody(name='body'),
}

async function generateDISyncTaskConfigForCreatingWithOptions(request: GenerateDISyncTaskConfigForCreatingRequest, runtime: Util.RuntimeOptions): GenerateDISyncTaskConfigForCreatingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskParam)) {
    query['TaskParam'] = request.taskParam;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GenerateDISyncTaskConfigForCreating',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateDISyncTaskConfigForCreating(request: GenerateDISyncTaskConfigForCreatingRequest): GenerateDISyncTaskConfigForCreatingResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateDISyncTaskConfigForCreatingWithOptions(request, runtime);
}

model GenerateDISyncTaskConfigForUpdatingRequest {
  clientToken?: string(name='ClientToken', example='ABFUOEUOTRTRJKE'),
  projectId?: long(name='ProjectId', example='10000'),
  taskId?: long(name='TaskId', example='100'),
  taskParam?: string(name='TaskParam', example='{      "steps": [         {             "parameter": {                 "connection": [                     {                         "table": [                             "xyx"                         ]                     }                 ]             },             "name": "Reader",             "category": "reader"         }     ] }'),
  taskType?: string(name='TaskType', example='DI_REALTIME'),
}

model GenerateDISyncTaskConfigForUpdatingResponseBody = {
  data?: {
    message?: string(name='Message', example='XXX is invalid.'),
    processId?: long(name='ProcessId', example='10'),
    status?: string(name='Status', example='true'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='0bc1411515937635973****'),
  success?: boolean(name='Success', example='true'),
}

model GenerateDISyncTaskConfigForUpdatingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateDISyncTaskConfigForUpdatingResponseBody(name='body'),
}

async function generateDISyncTaskConfigForUpdatingWithOptions(request: GenerateDISyncTaskConfigForUpdatingRequest, runtime: Util.RuntimeOptions): GenerateDISyncTaskConfigForUpdatingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.taskParam)) {
    query['TaskParam'] = request.taskParam;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GenerateDISyncTaskConfigForUpdating',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateDISyncTaskConfigForUpdating(request: GenerateDISyncTaskConfigForUpdatingRequest): GenerateDISyncTaskConfigForUpdatingResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateDISyncTaskConfigForUpdatingWithOptions(request, runtime);
}

model GetBaselineRequest {
  baselineId?: long(name='BaselineId'),
  projectId?: long(name='ProjectId'),
}

model GetBaselineResponseBody = {
  data?: {
    alertEnabled?: boolean(name='AlertEnabled'),
    alertMarginThreshold?: int32(name='AlertMarginThreshold'),
    alertSettings?: [ 
      {
        alertInterval?: int32(name='AlertInterval'),
        alertMaximum?: int32(name='AlertMaximum'),
        alertMethods?: [ string ](name='AlertMethods'),
        alertRecipient?: string(name='AlertRecipient'),
        alertRecipientType?: string(name='AlertRecipientType'),
        alertType?: string(name='AlertType'),
        baselineAlertEnabled?: boolean(name='BaselineAlertEnabled'),
        dingRobots?: [ 
          {
            atAll?: boolean(name='AtAll'),
            webUrl?: string(name='WebUrl'),
          }
        ](name='DingRobots'),
        silenceEndTime?: string(name='SilenceEndTime'),
        silenceStartTime?: string(name='SilenceStartTime'),
        topicTypes?: [ string ](name='TopicTypes'),
        webhooks?: [ string ](name='Webhooks'),
      }
    ](name='AlertSettings'),
    baselineId?: long(name='BaselineId'),
    baselineName?: string(name='BaselineName'),
    baselineType?: string(name='BaselineType'),
    enabled?: boolean(name='Enabled'),
    overTimeSettings?: [ 
      {
        cycle?: int32(name='Cycle'),
        time?: string(name='Time'),
      }
    ](name='OverTimeSettings'),
    owner?: string(name='Owner'),
    priority?: int32(name='Priority'),
    projectId?: long(name='ProjectId'),
    taskIds?: [ long ](name='TaskIds'),
  }(name='Data'),
  dynamicErrorCode?: string(name='DynamicErrorCode'),
  dynamicErrorMessage?: string(name='DynamicErrorMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetBaselineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBaselineResponseBody(name='body'),
}

async function getBaselineWithOptions(request: GetBaselineRequest, runtime: Util.RuntimeOptions): GetBaselineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetBaseline',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBaseline(request: GetBaselineRequest): GetBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBaselineWithOptions(request, runtime);
}

model GetBaselineConfigRequest {
  baselineId?: long(name='BaselineId', example='1234'),
}

model GetBaselineConfigResponseBody = {
  data?: {
    baselineId?: long(name='BaselineId', example='1234'),
    baselineName?: string(name='BaselineName'),
    baselineType?: string(name='BaselineType', example='DAILY'),
    expHour?: int32(name='ExpHour', example='7'),
    expMinu?: int32(name='ExpMinu', example='30'),
    hourExpDetail?: string(name='HourExpDetail', example='{"1":"03:28","2":"04:28","3":"05:28","4":"06:28","5":"07:28","6":"08:28","7":"09:28","8":"10:28","9":"11:28","10":"12:28","11":"13:28","12":"14:28","13":"15:28","14":"16:28","15":"17:28","16":"18:28","17":"19:28","18":"20:28","19":"21:28","20":"22:28","21":"23:28","22":"24:28","23":"25:28","24":"26:28"}'),
    hourSlaDetail?: string(name='HourSlaDetail', example='{"1":"03:58","2":"04:58","3":"05:58","4":"06:58","5":"07:58","6":"08:58","7":"09:58","8":"10:58","9":"11:58","10":"12:58","11":"13:58","12":"14:58","13":"15:58","14":"16:58","15":"17:58","16":"18:58","17":"19:58","18":"20:58","19":"21:58","20":"22:58","21":"23:58","22":"24:58","23":"25:58","24":"26:58"}'),
    isDefault?: boolean(name='IsDefault', example='true'),
    owner?: string(name='Owner', example='9527952****'),
    priority?: int32(name='Priority', example='1'),
    projectId?: long(name='ProjectId', example='1234'),
    slaHour?: int32(name='SlaHour', example='9'),
    slaMinu?: int32(name='SlaMinu', example='30'),
    useFlag?: boolean(name='UseFlag', example='true'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='401'),
  requestId?: string(name='RequestId', example='ecb967ec-c137-48a5-860****'),
  success?: boolean(name='Success', example='true'),
}

model GetBaselineConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBaselineConfigResponseBody(name='body'),
}

async function getBaselineConfigWithOptions(request: GetBaselineConfigRequest, runtime: Util.RuntimeOptions): GetBaselineConfigResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetBaselineConfig',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBaselineConfig(request: GetBaselineConfigRequest): GetBaselineConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBaselineConfigWithOptions(request, runtime);
}

model GetBaselineKeyPathRequest {
  baselineId?: long(name='BaselineId', example='1234'),
  bizdate?: string(name='Bizdate', example='2020-07-07T00:00:00+0800'),
  inGroupId?: int32(name='InGroupId', example='1'),
}

model GetBaselineKeyPathResponseBody = {
  data?: [ 
    {
      bizdate?: long(name='Bizdate', example='1553443200000'),
      inGroupId?: int32(name='InGroupId', example='1'),
      instanceId?: long(name='InstanceId', example='12345'),
      nodeId?: long(name='NodeId', example='1234'),
      nodeName?: string(name='NodeName'),
      owner?: string(name='Owner', example='9527952****'),
      prgType?: int32(name='PrgType', example='10'),
      projectId?: long(name='ProjectId', example='1234'),
      runs?: [ 
        {
          absTime?: long(name='AbsTime', example='1553531402000'),
          beginCast?: long(name='BeginCast', example='1553531686000'),
          beginRunningTime?: long(name='BeginRunningTime', example='1553531401000'),
          beginWaitResTime?: long(name='BeginWaitResTime', example='1553531401000'),
          beginWaitTimeTime?: long(name='BeginWaitTimeTime', example='1553531400000'),
          bizdate?: long(name='Bizdate', example='1553443200000'),
          cycTime?: long(name='CycTime', example='1553443200000'),
          endCast?: long(name='EndCast', example='1553531687000'),
          finishTime?: long(name='FinishTime', example='1553531401000'),
          inGroupId?: int32(name='InGroupId', example='1'),
          instanceId?: long(name='InstanceId', example='1234'),
          nodeId?: long(name='NodeId', example='1234'),
          nodeName?: string(name='NodeName'),
          owner?: string(name='Owner', example='9527952****'),
          projectId?: long(name='ProjectId', example='1234'),
          status?: string(name='Status', example='SUCCESS'),
        }
      ](name='Runs'),
      topics?: [ 
        {
          addTime?: long(name='AddTime', example='1553531401000'),
          instanceId?: long(name='InstanceId', example='1234'),
          topicId?: long(name='TopicId', example='1234'),
          topicName?: long(name='TopicName', example='1234'),
        }
      ](name='Topics'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model GetBaselineKeyPathResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBaselineKeyPathResponseBody(name='body'),
}

async function getBaselineKeyPathWithOptions(request: GetBaselineKeyPathRequest, runtime: Util.RuntimeOptions): GetBaselineKeyPathResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.inGroupId)) {
    body['InGroupId'] = request.inGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetBaselineKeyPath',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBaselineKeyPath(request: GetBaselineKeyPathRequest): GetBaselineKeyPathResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBaselineKeyPathWithOptions(request, runtime);
}

model GetBaselineStatusRequest {
  baselineId?: long(name='BaselineId', example='1234'),
  bizdate?: string(name='Bizdate', example='2020-07-07T00:00:00+0800'),
  inGroupId?: int32(name='InGroupId', example='1'),
}

model GetBaselineStatusResponseBody = {
  data?: {
    baselineId?: long(name='BaselineId', example='1234'),
    baselineName?: string(name='BaselineName'),
    bizdate?: long(name='Bizdate', example='1553443200000'),
    blockInstance?: {
      endCast?: long(name='EndCast', example='1553443200000'),
      finishTime?: long(name='FinishTime', example='1553443200000'),
      instanceId?: long(name='InstanceId', example='12345'),
      nodeId?: long(name='NodeId', example='1234'),
      nodeName?: string(name='NodeName'),
      owner?: string(name='Owner', example='9527952795****'),
      projectId?: long(name='ProjectId', example='1234'),
      status?: string(name='Status', example='SUCCESS'),
    }(name='BlockInstance'),
    buffer?: float(name='Buffer', example='1200'),
    endCast?: long(name='EndCast', example='1553443200000'),
    expTime?: long(name='ExpTime', example='1553443200000'),
    finishStatus?: string(name='FinishStatus', example='UNFINISH'),
    finishTime?: long(name='FinishTime', example='1553443200000'),
    inGroupId?: int32(name='InGroupId', example='1'),
    lastInstance?: {
      endCast?: long(name='EndCast', example='1553443200000'),
      finishTime?: long(name='FinishTime', example='1553443200000'),
      instanceId?: long(name='InstanceId', example='12345'),
      nodeId?: long(name='NodeId', example='1234'),
      nodeName?: string(name='NodeName'),
      owner?: string(name='Owner', example='9527952795****'),
      projectId?: long(name='ProjectId', example='1234'),
      status?: string(name='Status', example='SUCCESS'),
    }(name='LastInstance'),
    owner?: string(name='Owner', example='9527952795****'),
    priority?: int32(name='Priority', example='1'),
    projectId?: long(name='ProjectId', example='1234'),
    slaTime?: long(name='SlaTime', example='1553443200000'),
    status?: string(name='Status', example='SAFE'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model GetBaselineStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBaselineStatusResponseBody(name='body'),
}

async function getBaselineStatusWithOptions(request: GetBaselineStatusRequest, runtime: Util.RuntimeOptions): GetBaselineStatusResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.inGroupId)) {
    body['InGroupId'] = request.inGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetBaselineStatus',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBaselineStatus(request: GetBaselineStatusRequest): GetBaselineStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBaselineStatusWithOptions(request, runtime);
}

model GetBusinessRequest {
  businessId?: long(name='BusinessId', example='1000000001'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model GetBusinessResponseBody = {
  data?: {
    businessId?: long(name='BusinessId', example='1000001'),
    businessName?: string(name='BusinessName'),
    description?: string(name='Description'),
    owner?: string(name='Owner', example='20000****'),
    projectId?: string(name='ProjectId', example='10000'),
    useType?: string(name='UseType', example='NORMAL'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model GetBusinessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBusinessResponseBody(name='body'),
}

async function getBusinessWithOptions(request: GetBusinessRequest, runtime: Util.RuntimeOptions): GetBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessId)) {
    body['BusinessId'] = request.businessId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetBusiness',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBusiness(request: GetBusinessRequest): GetBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBusinessWithOptions(request, runtime);
}

model GetDDLJobStatusRequest {
  taskId?: string(name='TaskId', example='abc'),
}

model GetDDLJobStatusResponseBody = {
  data?: {
    content?: string(name='Content', example='success'),
    nextTaskId?: string(name='NextTaskId', example='abc1'),
    status?: string(name='Status', example='success'),
    taskId?: string(name='TaskId', example='abc'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='abc'),
}

model GetDDLJobStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDDLJobStatusResponseBody(name='body'),
}

async function getDDLJobStatusWithOptions(request: GetDDLJobStatusRequest, runtime: Util.RuntimeOptions): GetDDLJobStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDDLJobStatus',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDDLJobStatus(request: GetDDLJobStatusRequest): GetDDLJobStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDDLJobStatusWithOptions(request, runtime);
}

model GetDISyncInstanceInfoRequest {
  fileId?: long(name='FileId', example='100'),
  projectId?: long(name='ProjectId', example='10000'),
  taskType?: string(name='TaskType', example='DI_REALTIME'),
}

model GetDISyncInstanceInfoResponseBody = {
  data?: {
    message?: string(name='Message', example='fileId[100] is invalid'),
    name?: string(name='Name', example='streamx_name'),
    solutionInfo?: {
      creatorName?: string(name='CreatorName', example='dataworks_3h1'),
      id?: long(name='Id', example='100'),
      status?: string(name='Status', example='run'),
      stepDetail?: [ 
        {
          info?: string(name='Info'),
          status?: string(name='Status', example='success'),
          stepId?: long(name='StepId', example='1'),
          stepName?: string(name='StepName'),
        }
      ](name='StepDetail'),
    }(name='SolutionInfo'),
    status?: string(name='Status', example='RUN'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='0bc1411515937635973****'),
  success?: boolean(name='Success', example='true'),
}

model GetDISyncInstanceInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDISyncInstanceInfoResponseBody(name='body'),
}

async function getDISyncInstanceInfoWithOptions(request: GetDISyncInstanceInfoRequest, runtime: Util.RuntimeOptions): GetDISyncInstanceInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDISyncInstanceInfo',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDISyncInstanceInfo(request: GetDISyncInstanceInfoRequest): GetDISyncInstanceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDISyncInstanceInfoWithOptions(request, runtime);
}

model GetDISyncTaskRequest {
  fileId?: long(name='FileId', example='100'),
  projectId?: long(name='ProjectId', example='10000'),
  taskType?: string(name='TaskType', example='DI_REALTIME'),
}

model GetDISyncTaskResponseBody = {
  data?: {
    code?: string(name='Code', example='{"extend":{"mode":"wizard","resourceGroup":"S_res_group_287114642182658_1560324290517"},"nodeDef":{},"order":{"hops":[{"from":"datahub_8htXSsfiS2vtZCVG","to":"datahub_CRHBAyGfhSaLmv2f"}]},"setting":{"errorLimit":{},"jvmOption":""},"steps":[{"stepType":"datahub","category":"writer","displayName":"DataHub1","parameter":{"batchSize":1000,"datasource":"datahub_cloud_dev_test","topic":"dwd_tfc_opt_speed_rid_amap_rt"},"name":"datahub_CRHBAyGfhSaLmv2f","gui":{"x":262,"y":325}},{"stepType":"datahub","displayName":"DataHub2","parameter":{"datasource":"datahub_uric_test","topic":"dwd_tfc_opt_speed_rid_amap_rt_330000","batchSize":1000},"name":"datahub_8htXSsfiS2vtZCVG","gui":{"x":268,"y":160.5},"category":"writer"}]}'),
    message?: string(name='Message', example='fileId:[100] is invalid.'),
    solutionDetail?: {
      creatorName?: string(name='CreatorName', example='dataworks_di'),
      id?: long(name='Id', example='100'),
      name?: string(name='Name', example='holo_20211206161025'),
      processContent?: string(name='ProcessContent', example='{"holoDatasource":"holo","offlineSyncConfig":{"nodeNameRule":"oneclick_holo_di_${db_table_name_src}_to_${db_table_name_dest}","resourceGroup":"group_219193793999490"},"processRuleId":1007,"readerConcurrent":10,"realtimeSyncConfig":{"content":{"order":{"hops":[{"from":"reader","to":"writer"}]},"setting":{"speed":{"readerConcurrent":10}},"steps":[{"stepType":"mysql","name":"reader","category":"reader","parameter":{"connection":[{"datasource":"mm","datasourceType":"mysql","table":[]}]}},{"stepType":"holo","name":"writer","category":"writer","parameter":{"datasource":"holo","writeMode":"replay","datasourceSchema":"public","tableMappingRule":{"datasource":[{"tableRule":[],"srcDatasourceName":"mm"}]}}}]},"extend":{"mode":"migration_holo","resourceGroup":"group_219193793999490"}},"setting":{"autoCreateWorkflow":true,"userDefinedFileNameExpression":"oneclick"},"srcType":"mysql","tableMappingRuleFromRealtimeSyncConfig":{"datasource":[{"srcDatasourceName":"mm","tableRule":[]}]}}'),
      processExtra?: string(name='ProcessExtra', example='{"processType":"new","tableNum":300}'),
      projectId?: long(name='ProjectId', example='10000'),
      sourceType?: string(name='SourceType', example='mysql'),
      startTime?: string(name='StartTime', example='2021-12-07 14:40:51'),
      status?: string(name='Status', example='0'),
      submitTime?: string(name='SubmitTime', example='2021-12-07 14:40:51'),
      type?: string(name='Type', example='holo'),
    }(name='SolutionDetail'),
    status?: string(name='Status', example='success'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='0bc1411515937635973****'),
  success?: boolean(name='Success', example='true'),
}

model GetDISyncTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDISyncTaskResponseBody(name='body'),
}

async function getDISyncTaskWithOptions(request: GetDISyncTaskRequest, runtime: Util.RuntimeOptions): GetDISyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDISyncTask',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDISyncTask(request: GetDISyncTaskRequest): GetDISyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDISyncTaskWithOptions(request, runtime);
}

model GetDagRequest {
  dagId?: long(name='DagId', example='123141452344525'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
}

model GetDagResponseBody = {
  data?: {
    bizdate?: long(name='Bizdate', example='1605052800000'),
    createTime?: long(name='CreateTime', example='1605052800000'),
    createUser?: string(name='CreateUser', example='1736629400048545'),
    dagId?: long(name='DagId', description='DagId。', example='351249682'),
    finishTime?: long(name='FinishTime', example='1605052800000'),
    gmtdate?: long(name='Gmtdate', description='Gmtdate。', example='1605052800000'),
    modifyTime?: long(name='ModifyTime', example='1605052800000'),
    name?: string(name='Name', example='test_dag'),
    opSeq?: long(name='OpSeq', example='123'),
    projectId?: long(name='ProjectId', example='112345'),
    startTime?: long(name='StartTime', example='1605052800000'),
    status?: string(name='Status', example='FAILURE'),
    type?: string(name='Type', example='MANUAL_FLOW'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='7782a299-b291-4fee-8424-cf8058efa8e8'),
  success?: boolean(name='Success', example='true'),
}

model GetDagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDagResponseBody(name='body'),
}

async function getDagWithOptions(request: GetDagRequest, runtime: Util.RuntimeOptions): GetDagResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.dagId)) {
    body['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDag',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDag(request: GetDagRequest): GetDagResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDagWithOptions(request, runtime);
}

model GetDataServiceApiRequest {
  apiId?: long(name='ApiId', example='10000'),
  projectId?: long(name='ProjectId', example='10001'),
  tenantId?: long(name='TenantId', example='10002'),
}

model GetDataServiceApiResponseBody = {
  data?: {
    apiId?: long(name='ApiId', example='10000'),
    apiMode?: int32(name='ApiMode', example='0'),
    apiName?: string(name='ApiName'),
    apiPath?: string(name='ApiPath', example='/test/1'),
    createdTime?: string(name='CreatedTime', example='2020-06-23T00:21:01+0800'),
    creatorId?: string(name='CreatorId', example='1234567'),
    description?: string(name='Description'),
    folderId?: long(name='FolderId', example='0'),
    groupId?: string(name='GroupId', example='ab123****'),
    modifiedTime?: string(name='ModifiedTime', example='2020-06-23T00:21:01+0800'),
    operatorId?: string(name='OperatorId', example='2345678'),
    projectId?: long(name='ProjectId', example='10001'),
    protocols?: [ int32 ](name='Protocols'),
    registrationDetails?: {
      failedResultSample?: string(name='FailedResultSample', example='{"success": false}'),
      registrationErrorCodes?: [ 
        {
          errorCode?: string(name='ErrorCode', example='1001'),
          errorMessage?: string(name='ErrorMessage', example='fail to call'),
          errorSolution?: string(name='ErrorSolution', example='retry'),
        }
      ](name='RegistrationErrorCodes'),
      registrationRequestParameters?: [ 
        {
          columnName?: string(name='ColumnName', example='column1'),
          defaultValue?: string(name='DefaultValue', example='default1'),
          exampleValue?: string(name='ExampleValue', example='example1'),
          isRequiredParameter?: boolean(name='IsRequiredParameter', example='true'),
          parameterDataType?: int32(name='ParameterDataType', example='0'),
          parameterDescription?: string(name='ParameterDescription', example='description1'),
          parameterName?: string(name='ParameterName', example='name1'),
          parameterOperator?: int32(name='ParameterOperator', example='0'),
          parameterPosition?: int32(name='ParameterPosition', example='0'),
        }
      ](name='RegistrationRequestParameters'),
      serviceContentType?: int32(name='ServiceContentType', example='0'),
      serviceHost?: string(name='ServiceHost', example='http://example.aliyundoc.com'),
      servicePath?: string(name='ServicePath', example='/index'),
      serviceRequestBodyDescription?: string(name='ServiceRequestBodyDescription', example='{"abc":1}'),
      successfulResultSample?: string(name='SuccessfulResultSample', example='{"success": true}'),
    }(name='RegistrationDetails'),
    requestMethod?: int32(name='RequestMethod', example='0'),
    responseContentType?: int32(name='ResponseContentType', example='0'),
    scriptDetails?: {
      isPagedResponse?: boolean(name='IsPagedResponse', example='true'),
      script?: string(name='Script', example='select a from t'),
      scriptConnection?: {
        connectionId?: long(name='ConnectionId', example='123'),
        tableName?: string(name='TableName', example='t'),
      }(name='ScriptConnection'),
      scriptRequestParameters?: [ 
        {
          columnName?: string(name='ColumnName', example='column1'),
          defaultValue?: string(name='DefaultValue', example='default1'),
          exampleValue?: string(name='ExampleValue', example='example1'),
          isRequiredParameter?: boolean(name='IsRequiredParameter', example='true'),
          parameterDataType?: int32(name='ParameterDataType', example='0'),
          parameterDescription?: string(name='ParameterDescription', example='description1'),
          parameterName?: string(name='ParameterName', example='param1'),
          parameterOperator?: int32(name='ParameterOperator', example='0'),
          parameterPosition?: int32(name='ParameterPosition', example='0'),
        }
      ](name='ScriptRequestParameters'),
      scriptResponseParameters?: [ 
        {
          columnName?: string(name='ColumnName', example='column2'),
          exampleValue?: string(name='ExampleValue', example='example2'),
          parameterDataType?: int32(name='ParameterDataType', example='0'),
          parameterDescription?: string(name='ParameterDescription', example='description2'),
          parameterName?: string(name='ParameterName', example='param2'),
        }
      ](name='ScriptResponseParameters'),
    }(name='ScriptDetails'),
    status?: int32(name='Status', example='0'),
    tenantId?: long(name='TenantId', example='10002'),
    timeout?: int32(name='Timeout', example='10000'),
    visibleRange?: int32(name='VisibleRange', example='0'),
    wizardDetails?: {
      isPagedResponse?: boolean(name='IsPagedResponse', example='true'),
      wizardConnection?: {
        connectionId?: long(name='ConnectionId', example='123'),
        tableName?: string(name='TableName', example='t'),
      }(name='WizardConnection'),
      wizardRequestParameters?: [ 
        {
          columnName?: string(name='ColumnName', example='column1'),
          defaultValue?: string(name='DefaultValue', example='default1'),
          exampleValue?: string(name='ExampleValue', example='example1'),
          isRequiredParameter?: boolean(name='IsRequiredParameter', example='true'),
          parameterDataType?: int32(name='ParameterDataType', example='0'),
          parameterDescription?: string(name='ParameterDescription', example='description1'),
          parameterName?: string(name='ParameterName', example='param1'),
          parameterOperator?: int32(name='ParameterOperator', example='0'),
          parameterPosition?: int32(name='ParameterPosition', example='0'),
        }
      ](name='WizardRequestParameters'),
      wizardResponseParameters?: [ 
        {
          columnName?: string(name='ColumnName', example='column2'),
          exampleValue?: string(name='ExampleValue', example='example2'),
          parameterDataType?: int32(name='ParameterDataType', example='0'),
          parameterDescription?: string(name='ParameterDescription', example='description2'),
          parameterName?: string(name='ParameterName', example='param2'),
        }
      ](name='WizardResponseParameters'),
    }(name='WizardDetails'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model GetDataServiceApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataServiceApiResponseBody(name='body'),
}

async function getDataServiceApiWithOptions(request: GetDataServiceApiRequest, runtime: Util.RuntimeOptions): GetDataServiceApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataServiceApi(request: GetDataServiceApiRequest): GetDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataServiceApiWithOptions(request, runtime);
}

model GetDataServiceApiTestRequest {
  testId?: long(name='TestId', example='123434'),
}

model GetDataServiceApiTestResponseBody = {
  data?: {
    apiId?: long(name='ApiId', example='12343'),
    costTime?: string(name='CostTime', example='10'),
    debugInfo?: string(name='DebugInfo', example='[<span style=\\"color: #92D581;\\">INFO</span>] [16:15:13.240] resource group is 498774069027041[<span style=\\"color: #92D581;\\">INFO</span>]'),
    nodesDebugInfo?: string(name='NodesDebugInfo', example='[<span style=\\"color: #92D581;\\">INFO</span>] [16:15:13.240] resource group is 498774069027041[<span style=\\"color: #92D581;\\">INFO</span>]'),
    paramMap?: string(name='ParamMap', example='{"name":"test"}'),
    retCode?: long(name='RetCode', example='0'),
    retResult?: string(name='RetResult', example='{"id":2}'),
    status?: string(name='Status', example='FINISHED'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='adssdsewe'),
}

model GetDataServiceApiTestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataServiceApiTestResponseBody(name='body'),
}

async function getDataServiceApiTestWithOptions(request: GetDataServiceApiTestRequest, runtime: Util.RuntimeOptions): GetDataServiceApiTestResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataServiceApiTest',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataServiceApiTest(request: GetDataServiceApiTestRequest): GetDataServiceApiTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataServiceApiTestWithOptions(request, runtime);
}

model GetDataServiceApplicationRequest {
  applicationId?: long(name='ApplicationId', example='10000'),
  projectId?: long(name='ProjectId', example='10001'),
  tenantId?: long(name='TenantId', example='10002'),
}

model GetDataServiceApplicationResponseBody = {
  data?: {
    applicationCode?: string(name='ApplicationCode', example='CODE123'),
    applicationId?: long(name='ApplicationId', example='10000'),
    applicationKey?: string(name='ApplicationKey', example='KEY123'),
    applicationName?: string(name='ApplicationName'),
    applicationSecret?: string(name='ApplicationSecret', example='SECRET123'),
    projectId?: long(name='ProjectId', example='10001'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='0'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model GetDataServiceApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataServiceApplicationResponseBody(name='body'),
}

async function getDataServiceApplicationWithOptions(request: GetDataServiceApplicationRequest, runtime: Util.RuntimeOptions): GetDataServiceApplicationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.applicationId)) {
    body['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDataServiceApplication',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataServiceApplication(request: GetDataServiceApplicationRequest): GetDataServiceApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataServiceApplicationWithOptions(request, runtime);
}

model GetDataServiceFolderRequest {
  folderId?: long(name='FolderId', example='10001'),
  projectId?: long(name='ProjectId', example='10002'),
  tenantId?: long(name='TenantId', example='10003'),
}

model GetDataServiceFolderResponseBody = {
  folder?: {
    createdTime?: string(name='CreatedTime', example='2020-09-24T18:37:51+0800'),
    folderId?: long(name='FolderId', example='11'),
    folderName?: string(name='FolderName', example='test1'),
    groupId?: string(name='GroupId', example='ds_1234'),
    modifiedTime?: string(name='ModifiedTime', example='2020-09-24T18:37:51+0800'),
    parentId?: long(name='ParentId', example='0'),
    projectId?: long(name='ProjectId', example='10001'),
    tenantId?: long(name='TenantId', example='10002'),
  }(name='Folder'),
  requestId?: string(name='RequestId', example='0000-ABCD-EF****'),
}

model GetDataServiceFolderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataServiceFolderResponseBody(name='body'),
}

async function getDataServiceFolderWithOptions(request: GetDataServiceFolderRequest, runtime: Util.RuntimeOptions): GetDataServiceFolderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderId)) {
    body['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDataServiceFolder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataServiceFolder(request: GetDataServiceFolderRequest): GetDataServiceFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataServiceFolderWithOptions(request, runtime);
}

model GetDataServiceGroupRequest {
  groupId?: string(name='GroupId', example='ds_123abc'),
  projectId?: long(name='ProjectId', example='10001'),
  tenantId?: long(name='TenantId', example='10002'),
}

model GetDataServiceGroupResponseBody = {
  group?: {
    apiGatewayGroupId?: string(name='ApiGatewayGroupId', example='100abc'),
    createdTime?: string(name='CreatedTime', example='2020-09-24T18:37:51+0800'),
    creatorId?: string(name='CreatorId', example='10001'),
    description?: string(name='Description'),
    groupId?: string(name='GroupId', example='ds_123abc'),
    groupName?: string(name='GroupName'),
    modifiedTime?: string(name='ModifiedTime', example='2020-09-24T18:37:51+0800'),
    projectId?: long(name='ProjectId', example='10002'),
    tenantId?: long(name='TenantId', example='10003'),
  }(name='Group'),
  requestId?: string(name='RequestId', example='0000-ABCD-EF****'),
}

model GetDataServiceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataServiceGroupResponseBody(name='body'),
}

async function getDataServiceGroupWithOptions(request: GetDataServiceGroupRequest, runtime: Util.RuntimeOptions): GetDataServiceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDataServiceGroup',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataServiceGroup(request: GetDataServiceGroupRequest): GetDataServiceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataServiceGroupWithOptions(request, runtime);
}

model GetDataServicePublishedApiRequest {
  apiId?: long(name='ApiId', example='10001'),
  projectId?: long(name='ProjectId', example='10002'),
  tenantId?: long(name='TenantId', example='10003'),
}

model GetDataServicePublishedApiResponseBody = {
  data?: {
    apiId?: long(name='ApiId', example='10000'),
    apiMode?: int32(name='ApiMode', example='0'),
    apiName?: string(name='ApiName'),
    apiPath?: string(name='ApiPath', example='/test/1'),
    createdTime?: string(name='CreatedTime', example='2020-06-23T00:21:01+0800'),
    creatorId?: string(name='CreatorId', example='1234567'),
    description?: string(name='Description'),
    groupId?: string(name='GroupId', example='ab12**'),
    modifiedTime?: string(name='ModifiedTime', example='2020-06-23T00:21:01+0800'),
    operatorId?: string(name='OperatorId', example='2345678'),
    projectId?: long(name='ProjectId', example='10001'),
    protocols?: [ int32 ](name='Protocols'),
    registrationDetails?: {
      failedResultSample?: string(name='FailedResultSample', example='{"success": false}'),
      registrationErrorCodes?: [ 
        {
          errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
          errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
          errorSolution?: string(name='ErrorSolution', example='retry'),
        }
      ](name='RegistrationErrorCodes'),
      registrationRequestParameters?: [ 
        {
          defaultValue?: string(name='DefaultValue', example='default1'),
          exampleValue?: string(name='ExampleValue', example='example1'),
          isRequiredParameter?: boolean(name='IsRequiredParameter', example='true'),
          parameterDataType?: int32(name='ParameterDataType', example='0'),
          parameterDescription?: string(name='ParameterDescription', example='description1'),
          parameterName?: string(name='ParameterName', example='name1'),
          parameterOperator?: int32(name='ParameterOperator', example='0'),
          parameterPosition?: int32(name='ParameterPosition', example='0'),
        }
      ](name='RegistrationRequestParameters'),
      serviceContentType?: int32(name='ServiceContentType', example='0'),
      serviceHost?: string(name='ServiceHost', example='http://example.aliyundoc.com'),
      servicePath?: string(name='ServicePath', example='/index'),
      serviceRequestBodyDescription?: string(name='ServiceRequestBodyDescription', example='{"abc":1}'),
      successfulResultSample?: string(name='SuccessfulResultSample', example='{"success": true}'),
    }(name='RegistrationDetails'),
    requestMethod?: int32(name='RequestMethod', example='0'),
    responseContentType?: int32(name='ResponseContentType', example='0'),
    scriptDetails?: {
      failedResultSample?: string(name='FailedResultSample', example='{"success": false}'),
      isPagedResponse?: boolean(name='IsPagedResponse', example='true'),
      script?: string(name='Script', example='select a from t'),
      scriptConnection?: {
        connectionId?: long(name='ConnectionId', example='123'),
        tableName?: string(name='TableName', example='t'),
      }(name='ScriptConnection'),
      scriptErrorCodes?: [ 
        {
          errorCode?: string(name='ErrorCode', example='1001'),
          errorMessage?: string(name='ErrorMessage', example='fail to call'),
          errorSolution?: string(name='ErrorSolution', example='retry'),
        }
      ](name='ScriptErrorCodes'),
      scriptRequestParameters?: [ 
        {
          defaultValue?: string(name='DefaultValue', example='default1'),
          exampleValue?: string(name='ExampleValue', example='example1'),
          isRequiredParameter?: boolean(name='IsRequiredParameter', example='true'),
          parameterDataType?: int32(name='ParameterDataType', example='0'),
          parameterDescription?: string(name='ParameterDescription', example='description1'),
          parameterName?: string(name='ParameterName', example='param1'),
          parameterOperator?: int32(name='ParameterOperator', example='0'),
          parameterPosition?: int32(name='ParameterPosition', example='0'),
        }
      ](name='ScriptRequestParameters'),
      scriptResponseParameters?: [ 
        {
          exampleValue?: string(name='ExampleValue', example='example2'),
          parameterDataType?: int32(name='ParameterDataType', example='0'),
          parameterDescription?: string(name='ParameterDescription', example='description2'),
          parameterName?: string(name='ParameterName', example='param2'),
        }
      ](name='ScriptResponseParameters'),
      successfulResultSample?: string(name='SuccessfulResultSample', example='{"success": true}'),
    }(name='ScriptDetails'),
    status?: int32(name='Status', example='1'),
    tenantId?: long(name='TenantId', example='10001'),
    timeout?: int32(name='Timeout', example='10000'),
    visibleRange?: int32(name='VisibleRange', example='0'),
    wizardDetails?: {
      failedResultSample?: string(name='FailedResultSample', example='{"success": false}'),
      isPagedResponse?: boolean(name='IsPagedResponse', example='true'),
      successfulResultSample?: string(name='SuccessfulResultSample', example='{"success": true}'),
      wizardConnection?: {
        connectionId?: long(name='ConnectionId', example='123'),
        tableName?: string(name='TableName', example='t'),
      }(name='WizardConnection'),
      wizardErrorCodes?: [ 
        {
          errorCode?: string(name='ErrorCode', example='1001'),
          errorMessage?: string(name='ErrorMessage', example='fail to call'),
          errorSolution?: string(name='ErrorSolution', example='retry'),
        }
      ](name='WizardErrorCodes'),
      wizardRequestParameters?: [ 
        {
          defaultValue?: string(name='DefaultValue', example='default1'),
          exampleValue?: string(name='ExampleValue', example='example1'),
          isRequiredParameter?: boolean(name='IsRequiredParameter', example='true'),
          parameterDataType?: int32(name='ParameterDataType', example='0'),
          parameterDescription?: string(name='ParameterDescription', example='description1'),
          parameterName?: string(name='ParameterName', example='param1'),
          parameterOperator?: int32(name='ParameterOperator', example='0'),
          parameterPosition?: int32(name='ParameterPosition', example='0'),
        }
      ](name='WizardRequestParameters'),
      wizardResponseParameters?: [ 
        {
          exampleValue?: string(name='ExampleValue', example='example2'),
          parameterDataType?: int32(name='ParameterDataType', example='0'),
          parameterDescription?: string(name='ParameterDescription', example='description2'),
          parameterName?: string(name='ParameterName', example='param2'),
        }
      ](name='WizardResponseParameters'),
    }(name='WizardDetails'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model GetDataServicePublishedApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataServicePublishedApiResponseBody(name='body'),
}

async function getDataServicePublishedApiWithOptions(request: GetDataServicePublishedApiRequest, runtime: Util.RuntimeOptions): GetDataServicePublishedApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDataServicePublishedApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataServicePublishedApi(request: GetDataServicePublishedApiRequest): GetDataServicePublishedApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataServicePublishedApiWithOptions(request, runtime);
}

model GetDataSourceMetaRequest {
  datasourceName?: string(name='DatasourceName', example='mysql_name'),
  envType?: string(name='EnvType', example='1'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='10000'),
}

model GetDataSourceMetaResponseBody = {
  data?: {
    message?: string(name='Message', example='read datasource time out'),
    meta?: string(name='Meta', example='{"dbTables":[{"dbName":"testdb","schema":[{"tableInfos":[{"dbName":"testdb","enable":true,"table":"table1","tableName":"table1"}]},{"tableInfos":[{"dbName":"testdb","enable":true,"table":"table2","tableName":"table2"}]}]}]}'),
    status?: string(name='Status', example='success'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', example='true'),
}

model GetDataSourceMetaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataSourceMetaResponseBody(name='body'),
}

async function getDataSourceMetaWithOptions(request: GetDataSourceMetaRequest, runtime: Util.RuntimeOptions): GetDataSourceMetaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasourceName)) {
    query['DatasourceName'] = request.datasourceName;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataSourceMeta',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataSourceMeta(request: GetDataSourceMetaRequest): GetDataSourceMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataSourceMetaWithOptions(request, runtime);
}

model GetDeploymentRequest {
  deploymentId?: long(name='DeploymentId', example='3000001'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model GetDeploymentResponseBody = {
  data?: {
    deployedItems?: [ 
      {
        fileId?: long(name='FileId'),
        fileVersion?: long(name='FileVersion'),
        status?: int32(name='Status'),
      }
    ](name='DeployedItems'),
    deployment?: {
      checkingStatus?: int32(name='CheckingStatus', example='7'),
      createTime?: long(name='CreateTime', example='1593877765000'),
      creatorId?: string(name='CreatorId', example='20030****'),
      errorMessage?: string(name='ErrorMessage'),
      executeTime?: long(name='ExecuteTime', example='1593877765000'),
      fromEnvironment?: int32(name='FromEnvironment', example='0'),
      handlerId?: string(name='HandlerId', example='2003****'),
      name?: string(name='Name', example='ods_user_info_d-2020-07-04_20030****'),
      status?: int32(name='Status', example='1'),
      toEnvironment?: int32(name='ToEnvironment', example='1'),
    }(name='Deployment'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model GetDeploymentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeploymentResponseBody(name='body'),
}

async function getDeploymentWithOptions(request: GetDeploymentRequest, runtime: Util.RuntimeOptions): GetDeploymentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deploymentId)) {
    body['DeploymentId'] = request.deploymentId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDeployment',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDeployment(request: GetDeploymentRequest): GetDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeploymentWithOptions(request, runtime);
}

model GetExtensionRequest {
  extensionCode?: string(name='ExtensionCode', example='ce4*********086da5'),
}

model GetExtensionResponseBody = {
  extension?: {
    bindEventList?: [ 
      {
        eventCode?: string(name='EventCode', example='commit-file'),
        eventName?: string(name='EventName'),
      }
    ](name='BindEventList'),
    detailUrl?: string(name='DetailUrl', example='https://www.aliyun.com/'),
    eventCategoryList?: [ 
      {
        categoryCode?: string(name='CategoryCode', example='file-change'),
        categoryName?: string(name='CategoryName'),
      }
    ](name='EventCategoryList'),
    extensionCode?: string(name='ExtensionCode', example='ce4*********086da5'),
    extensionDesc?: string(name='ExtensionDesc'),
    extensionName?: string(name='ExtensionName'),
    helpDocUrl?: string(name='HelpDocUrl', example='https://www.aliyun.com/'),
    optionSetting?: string(name='OptionSetting'),
    parameterSetting?: string(name='ParameterSetting', example='extension.project.disabled=projectId1,projectId2,projectId3'),
    projectTesting?: long(name='ProjectTesting', example='13552'),
    status?: int32(name='Status', example='0'),
  }(name='Extension'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG'),
}

model GetExtensionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetExtensionResponseBody(name='body'),
}

async function getExtensionWithOptions(request: GetExtensionRequest, runtime: Util.RuntimeOptions): GetExtensionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.extensionCode)) {
    query['ExtensionCode'] = request.extensionCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetExtension',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getExtension(request: GetExtensionRequest): GetExtensionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getExtensionWithOptions(request, runtime);
}

model GetFileRequest {
  fileId?: long(name='FileId', example='100000001'),
  nodeId?: long(name='NodeId', example='200000001'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model GetFileResponseBody = {
  data?: {
    file?: {
      advancedSettings?: string(name='AdvancedSettings', example='{"queue":"default","SPARK_CONF":"--conf spark.driver.memory=2g"}'),
      autoParsing?: boolean(name='AutoParsing', example='true'),
      bizId?: long(name='BizId', example='1000001'),
      businessId?: long(name='BusinessId', example='1000001'),
      commitStatus?: int32(name='CommitStatus', example='0'),
      connectionName?: string(name='ConnectionName', example='odps_first'),
      content?: string(name='Content', example='SHOW TABLES;'),
      createTime?: long(name='CreateTime', example='1593879116000'),
      createUser?: string(name='CreateUser', example='424732****'),
      currentVersion?: int32(name='CurrentVersion', example='3'),
      deletedStatus?: string(name='DeletedStatus', example='RECYCLE'),
      fileDescription?: string(name='FileDescription'),
      fileFolderId?: string(name='FileFolderId', example='2735c2****'),
      fileName?: string(name='FileName', example='ods_user_info_d'),
      fileType?: int32(name='FileType', example='10'),
      isMaxCompute?: boolean(name='IsMaxCompute', example='true'),
      lastEditTime?: long(name='LastEditTime', example='1593879116000'),
      lastEditUser?: string(name='LastEditUser', example='62465892****'),
      nodeId?: long(name='NodeId', example='300001'),
      owner?: string(name='Owner', example='7775674356****'),
      parentId?: long(name='ParentId', example='-1'),
      useType?: string(name='UseType', example='NORMAL'),
    }(name='File'),
    nodeConfiguration?: {
      autoRerunIntervalMillis?: int32(name='AutoRerunIntervalMillis', example='120000'),
      autoRerunTimes?: int32(name='AutoRerunTimes', example='3'),
      cronExpress?: string(name='CronExpress', example='00 05 00 * * ?'),
      cycleType?: string(name='CycleType', example='DAY'),
      dependentNodeIdList?: string(name='DependentNodeIdList', example='5,10,15,20'),
      dependentType?: string(name='DependentType', example='USER_DEFINE'),
      endEffectDate?: long(name='EndEffectDate', example='4155787800000'),
      inputList?: [ 
        {
          input?: string(name='Input', example='project.001_out'),
          parseType?: string(name='ParseType', example='MANUAL'),
        }
      ](name='InputList'),
      inputParameters?: [ 
        {
          parameterName?: string(name='ParameterName', example='input'),
          valueSource?: string(name='ValueSource', example='project_001.parent_node:outputs'),
        }
      ](name='InputParameters'),
      outputList?: [ 
        {
          output?: string(name='Output', example='dw_project.002_out'),
          refTableName?: string(name='RefTableName', example='ods_user_info_d'),
        }
      ](name='OutputList'),
      outputParameters?: [ 
        {
          description?: string(name='Description', example='It\\"s a context output parameter.'),
          parameterName?: string(name='ParameterName', example='output'),
          type?: string(name='Type', example='1'),
          value?: string(name='Value', example='${bizdate}'),
        }
      ](name='OutputParameters'),
      paraValue?: string(name='ParaValue', example='a=x b=y'),
      rerunMode?: string(name='RerunMode', example='ALL_ALLOWED'),
      resourceGroupId?: long(name='ResourceGroupId', example='375827434852437'),
      schedulerType?: string(name='SchedulerType', example='NORMAL'),
      startEffectDate?: long(name='StartEffectDate', example='936923400000'),
      startImmediately?: boolean(name='StartImmediately', example='true'),
      stop?: boolean(name='Stop', example='false'),
    }(name='NodeConfiguration'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model GetFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFileResponseBody(name='body'),
}

async function getFileWithOptions(request: GetFileRequest, runtime: Util.RuntimeOptions): GetFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFile(request: GetFileRequest): GetFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFileWithOptions(request, runtime);
}

model GetFileTypeStatisticRequest {
  projectEnv?: string(name='ProjectEnv', example='PROD'),
  projectId?: long(name='ProjectId', example='123465'),
}

model GetFileTypeStatisticResponseBody = {
  programTypeAndCounts?: [ 
    {
      count?: int32(name='Count', example='1'),
      programType?: string(name='ProgramType', example='ODPS_SQL'),
    }
  ](name='ProgramTypeAndCounts'),
  requestId?: string(name='RequestId', example='SDFSDFSDF-SDFSDF-SDFDSF-SDFSDF'),
}

model GetFileTypeStatisticResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFileTypeStatisticResponseBody(name='body'),
}

async function getFileTypeStatisticWithOptions(request: GetFileTypeStatisticRequest, runtime: Util.RuntimeOptions): GetFileTypeStatisticResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetFileTypeStatistic',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFileTypeStatistic(request: GetFileTypeStatisticRequest): GetFileTypeStatisticResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFileTypeStatisticWithOptions(request, runtime);
}

model GetFileVersionRequest {
  fileId?: long(name='FileId', example='1000001'),
  fileVersion?: int32(name='FileVersion', example='2'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model GetFileVersionResponseBody = {
  data?: {
    changeType?: string(name='ChangeType', example='UPDATE'),
    comment?: string(name='Comment'),
    commitTime?: long(name='CommitTime', example='1593881265000'),
    commitUser?: string(name='CommitUser', example='7384234****'),
    fileContent?: string(name='FileContent', example='SHOW TABLES;'),
    fileName?: string(name='FileName', example='ods_user_info_d'),
    filePropertyContent?: string(name='FilePropertyContent', example='{"fileName":"ods_user_info_d","fileType":10}'),
    fileVersion?: int32(name='FileVersion', example='2'),
    isCurrentProd?: boolean(name='IsCurrentProd', example='true'),
    nodeContent?: string(name='NodeContent', example='{"cycleType":0,"cronExpress":"00 05 00 * * ?"}'),
    nodeId?: long(name='NodeId', example='3000001'),
    status?: string(name='Status', example='COMMITTED'),
    useType?: string(name='UseType', example='NORMAL'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model GetFileVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFileVersionResponseBody(name='body'),
}

async function getFileVersionWithOptions(request: GetFileVersionRequest, runtime: Util.RuntimeOptions): GetFileVersionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.fileVersion)) {
    body['FileVersion'] = request.fileVersion;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetFileVersion',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFileVersion(request: GetFileVersionRequest): GetFileVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFileVersionWithOptions(request, runtime);
}

model GetFolderRequest {
  folderId?: string(name='FolderId', example='273****'),
  folderPath?: string(name='FolderPath'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model GetFolderResponseBody = {
  data?: {
    folderId?: string(name='FolderId', example='2735****'),
    folderPath?: string(name='FolderPath'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model GetFolderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFolderResponseBody(name='body'),
}

async function getFolderWithOptions(request: GetFolderRequest, runtime: Util.RuntimeOptions): GetFolderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderId)) {
    body['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.folderPath)) {
    body['FolderPath'] = request.folderPath;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetFolder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFolder(request: GetFolderRequest): GetFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFolderWithOptions(request, runtime);
}

model GetIDEEventDetailRequest {
  messageId?: string(name='MessageId', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
  projectId?: long(name='ProjectId', example='10000'),
}

model GetIDEEventDetailResponseBody = {
  eventDetail?: {
    committedFile?: {
      changeType?: string(name='ChangeType', example='UPDATE'),
      comment?: string(name='Comment'),
      committor?: string(name='Committor', example='7384234****'),
      content?: string(name='Content', example='SHOW TABLES;'),
      fileId?: long(name='FileId', example='1234123'),
      fileName?: string(name='FileName', example='hello_dataworks.sql'),
      filePropertyContent?: {
        businessId?: long(name='BusinessId', example='74328'),
        currentVersion?: long(name='CurrentVersion', example='1'),
        dataSourceName?: string(name='DataSourceName', example='odps_first'),
        folderId?: string(name='FolderId', example='aldurie78l2falure'),
        owner?: string(name='Owner', example='7384234****'),
        parentFileId?: long(name='ParentFileId', example='1234122'),
      }(name='FilePropertyContent'),
      fileType?: long(name='FileType', example='10'),
      nodeConfiguration?: {
        autoRerunIntervalMillis?: long(name='AutoRerunIntervalMillis', example='120000'),
        autoRerunTimes?: long(name='AutoRerunTimes', example='3'),
        cronExpress?: string(name='CronExpress', example='00 05 00 * * ?'),
        cycleType?: string(name='CycleType', example='DAY'),
        dependentNodeIdList?: string(name='DependentNodeIdList', example='5,10,15,20'),
        dependentType?: string(name='DependentType', example='USER_DEFINE'),
        inputList?: [ 
          {
            input?: string(name='Input', example='dw_project_root'),
            parseType?: string(name='ParseType', example='MANUAL'),
          }
        ](name='InputList'),
        outputList?: [ 
          {
            output?: string(name='Output', example='dw_project.002_out'),
            refTableName?: string(name='RefTableName', example='ods_user_info_d'),
          }
        ](name='OutputList'),
        paraValue?: string(name='ParaValue', example='a=x b=y'),
        rerunMode?: string(name='RerunMode', example='ALL_ALLOWED'),
        resourceGroupId?: long(name='ResourceGroupId', example='375827434852437'),
        schedulerType?: string(name='SchedulerType', example='NORMAL'),
      }(name='NodeConfiguration'),
      nodeId?: long(name='NodeId', example='421429'),
      useType?: string(name='UseType', example='NORMAL'),
    }(name='CommittedFile'),
    deletedFile?: {
      businessId?: long(name='BusinessId', example='74328'),
      content?: string(name='Content', example='SHOW TABLES;'),
      currentVersion?: long(name='CurrentVersion', example='1'),
      dataSourceName?: string(name='DataSourceName', example='odps_first'),
      fileId?: long(name='FileId', example='1234123'),
      fileName?: string(name='FileName', example='hello_dataworks.sql'),
      fileType?: long(name='FileType', example='10'),
      folderId?: string(name='FolderId', example='aldurie78l2falure'),
      nodeId?: long(name='NodeId', example='421429'),
      owner?: string(name='Owner', example='7384234****'),
      parentFileId?: long(name='ParentFileId', example='1234122'),
      useType?: string(name='UseType', example='NORMAL'),
    }(name='DeletedFile'),
    fileExecutionCommand?: {
      content?: string(name='Content', example='SHOW TABLES;'),
      dataSourceName?: string(name='DataSourceName', example='odps_first'),
      fileId?: long(name='FileId', example='1234123'),
      fileType?: long(name='FileType', example='10'),
    }(name='FileExecutionCommand'),
    tableModel?: {
      columns?: [ 
        {
          columnName?: string(name='ColumnName', example='ID'),
          columnType?: string(name='ColumnType', example='BIGINT'),
          comment?: string(name='Comment', example='ID'),
          isPartitionColumn?: boolean(name='IsPartitionColumn', example='false'),
        }
      ](name='Columns'),
      comment?: string(name='Comment'),
      dataSourceName?: string(name='DataSourceName', example='odps_first'),
      env?: string(name='Env', example='DEV'),
      lifeCycle?: long(name='LifeCycle', example='7'),
      location?: string(name='Location', example='hdfs://path/to/object'),
      tableName?: string(name='TableName', example='tb_hello'),
    }(name='TableModel'),
  }(name='EventDetail'),
  requestId?: string(name='RequestId', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
}

model GetIDEEventDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetIDEEventDetailResponseBody(name='body'),
}

async function getIDEEventDetailWithOptions(request: GetIDEEventDetailRequest, runtime: Util.RuntimeOptions): GetIDEEventDetailResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.messageId)) {
    body['MessageId'] = request.messageId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetIDEEventDetail',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getIDEEventDetail(request: GetIDEEventDetailRequest): GetIDEEventDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getIDEEventDetailWithOptions(request, runtime);
}

model GetInstanceRequest {
  instanceId?: long(name='InstanceId', example='1234'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
}

model GetInstanceResponseBody = {
  data?: {
    baselineId?: long(name='BaselineId', example='123123'),
    beginRunningTime?: long(name='BeginRunningTime', example='1590416703313'),
    beginWaitResTime?: long(name='BeginWaitResTime', example='1590416703313'),
    beginWaitTimeTime?: long(name='BeginWaitTimeTime', example='1590416703313'),
    bizdate?: long(name='Bizdate', example='1590336000000'),
    businessId?: long(name='BusinessId', example='123'),
    connection?: string(name='Connection', example='odps_first'),
    createTime?: long(name='CreateTime', example='1590416703313'),
    createUser?: string(name='CreateUser', example='111'),
    cycTime?: long(name='CycTime', example='1590422400000'),
    dagId?: long(name='DagId', example='338450167'),
    dagType?: string(name='DagType', example='DAILY'),
    dqcDescription?: string(name='DqcDescription', example='[{"projectName":"ztjy_dim","tableName":"dim_user_agent_manage_area_a","partition":"ds\\u003d$[yyyy-mm-dd-1]"}]'),
    dqcType?: int32(name='DqcType', example='1'),
    finishTime?: long(name='FinishTime', example='1590416703313'),
    instanceId?: long(name='InstanceId', example='11713307578'),
    modifyTime?: long(name='ModifyTime', example='1590416703313'),
    nodeId?: long(name='NodeId', example='33115'),
    nodeName?: string(name='NodeName', example='kzh'),
    paramValues?: string(name='ParamValues', example='bizdate=$bizdate tbods=$tbods tbdw=$tbdw tbpmic=$tbpmic tbpidx=$tbpidx tbptcif=$tbptcif'),
    priority?: int32(name='Priority', example='1'),
    relatedFlowId?: long(name='RelatedFlowId', example='123123'),
    repeatInterval?: long(name='RepeatInterval', example='60000'),
    repeatability?: boolean(name='Repeatability', example='true'),
    status?: string(name='Status', example='NOT_RUN'),
    taskRerunTime?: int32(name='TaskRerunTime', example='0'),
    taskType?: string(name='TaskType', example='NORMAL(0)'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='0'),
  errorMessage?: string(name='ErrorMessage', example='test'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', example='true'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstanceWithOptions(request: GetInstanceRequest, runtime: Util.RuntimeOptions): GetInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceWithOptions(request, runtime);
}

model GetInstanceConsumeTimeRankRequest {
  bizdate?: string(name='Bizdate', example='2020-09-21T00:00:00+0800'),
  projectId?: long(name='ProjectId', example='100000'),
}

model GetInstanceConsumeTimeRankResponseBody = {
  instanceConsumeTimeRank?: {
    consumeTimeRank?: [ 
      {
        bizdate?: long(name='Bizdate', example='1600963200000'),
        consumed?: long(name='Consumed', example='1000'),
        instanceId?: long(name='InstanceId', example='95279527'),
        nodeId?: long(name='NodeId', example='9527'),
        nodeName?: string(name='NodeName'),
        owner?: string(name='Owner', example='952795279527'),
        prgType?: int32(name='PrgType', example='10'),
      }
    ](name='ConsumeTimeRank'),
    updateTime?: long(name='UpdateTime', example='1600963200000'),
  }(name='InstanceConsumeTimeRank'),
  requestId?: string(name='RequestId', example='6347364dadsfadf****'),
}

model GetInstanceConsumeTimeRankResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceConsumeTimeRankResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request GetInstanceConsumeTimeRankRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetInstanceConsumeTimeRankResponse
 */
// Deprecated
async function getInstanceConsumeTimeRankWithOptions(request: GetInstanceConsumeTimeRankRequest, runtime: Util.RuntimeOptions): GetInstanceConsumeTimeRankResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceConsumeTimeRank',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request GetInstanceConsumeTimeRankRequest
  * @return GetInstanceConsumeTimeRankResponse
 */
// Deprecated
async function getInstanceConsumeTimeRank(request: GetInstanceConsumeTimeRankRequest): GetInstanceConsumeTimeRankResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceConsumeTimeRankWithOptions(request, runtime);
}

model GetInstanceCountTrendRequest {
  beginDate?: string(name='BeginDate', example='2020-04-02T00:00:00+0800'),
  endDate?: string(name='EndDate', example='2020-09-10T00:00:00+0800'),
  projectId?: long(name='ProjectId', example='10000'),
}

model GetInstanceCountTrendResponseBody = {
  instanceCounts?: [ 
    {
      count?: int32(name='Count', example='9527'),
      date?: long(name='Date', example='1600963200000'),
    }
  ](name='InstanceCounts'),
  requestId?: string(name='RequestId', example='95279527adhfj****'),
}

model GetInstanceCountTrendResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceCountTrendResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request GetInstanceCountTrendRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetInstanceCountTrendResponse
 */
// Deprecated
async function getInstanceCountTrendWithOptions(request: GetInstanceCountTrendRequest, runtime: Util.RuntimeOptions): GetInstanceCountTrendResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.beginDate)) {
    body['BeginDate'] = request.beginDate;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceCountTrend',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request GetInstanceCountTrendRequest
  * @return GetInstanceCountTrendResponse
 */
// Deprecated
async function getInstanceCountTrend(request: GetInstanceCountTrendRequest): GetInstanceCountTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceCountTrendWithOptions(request, runtime);
}

model GetInstanceErrorRankRequest {
  projectId?: long(name='ProjectId', example='9527'),
}

model GetInstanceErrorRankResponseBody = {
  instanceErrorRank?: {
    errorRank?: [ 
      {
        count?: int32(name='Count', example='5'),
        nodeId?: long(name='NodeId', example='9527'),
        nodeName?: string(name='NodeName'),
        owner?: string(name='Owner', example='952795279527'),
        prgType?: int32(name='PrgType', example='10'),
        projectId?: long(name='ProjectId', example='9527'),
      }
    ](name='ErrorRank'),
    updateTime?: long(name='UpdateTime', example='1600963200000'),
  }(name='InstanceErrorRank'),
  requestId?: string(name='RequestId', example='952795279527****'),
}

model GetInstanceErrorRankResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceErrorRankResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request GetInstanceErrorRankRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetInstanceErrorRankResponse
 */
// Deprecated
async function getInstanceErrorRankWithOptions(request: GetInstanceErrorRankRequest, runtime: Util.RuntimeOptions): GetInstanceErrorRankResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceErrorRank',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request GetInstanceErrorRankRequest
  * @return GetInstanceErrorRankResponse
 */
// Deprecated
async function getInstanceErrorRank(request: GetInstanceErrorRankRequest): GetInstanceErrorRankResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceErrorRankWithOptions(request, runtime);
}

model GetInstanceLogRequest {
  instanceHistoryId?: long(name='InstanceHistoryId', example='1'),
  instanceId?: long(name='InstanceId', example='1234'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
}

model GetInstanceLogResponseBody = {
  data?: string(name='Data', example='log_content'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', example='true'),
}

model GetInstanceLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceLogResponseBody(name='body'),
}

async function getInstanceLogWithOptions(request: GetInstanceLogRequest, runtime: Util.RuntimeOptions): GetInstanceLogResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceHistoryId)) {
    body['InstanceHistoryId'] = request.instanceHistoryId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceLog',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstanceLog(request: GetInstanceLogRequest): GetInstanceLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceLogWithOptions(request, runtime);
}

model GetInstanceStatusCountRequest {
  bizDate?: string(name='BizDate', example='2020-01-01'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
  projectId?: long(name='ProjectId', example='1234'),
}

model GetInstanceStatusCountResponseBody = {
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  statusCount?: {
    failureCount?: int32(name='FailureCount', example='1'),
    notRunCount?: int32(name='NotRunCount', example='1'),
    runningCount?: int32(name='RunningCount', example='1'),
    successCount?: int32(name='SuccessCount', example='1'),
    totalCount?: int32(name='TotalCount', example='1'),
    waitResCount?: int32(name='WaitResCount', example='1'),
    waitTimeCount?: int32(name='WaitTimeCount', example='1'),
  }(name='StatusCount'),
}

model GetInstanceStatusCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceStatusCountResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request GetInstanceStatusCountRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetInstanceStatusCountResponse
 */
// Deprecated
async function getInstanceStatusCountWithOptions(request: GetInstanceStatusCountRequest, runtime: Util.RuntimeOptions): GetInstanceStatusCountResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizDate)) {
    body['BizDate'] = request.bizDate;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceStatusCount',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request GetInstanceStatusCountRequest
  * @return GetInstanceStatusCountResponse
 */
// Deprecated
async function getInstanceStatusCount(request: GetInstanceStatusCountRequest): GetInstanceStatusCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceStatusCountWithOptions(request, runtime);
}

model GetInstanceStatusStatisticRequest {
  bizDate?: string(name='BizDate', example='2020-01-01'),
  dagType?: string(name='DagType', example='MANUAL'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
  projectId?: long(name='ProjectId', example='1234'),
  schedulerType?: string(name='SchedulerType', example='NORMAL'),
}

model GetInstanceStatusStatisticResponseBody = {
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  statusCount?: {
    failureCount?: int32(name='FailureCount', example='1'),
    notRunCount?: int32(name='NotRunCount', example='1'),
    runningCount?: int32(name='RunningCount', example='1'),
    successCount?: int32(name='SuccessCount', example='1'),
    totalCount?: int32(name='TotalCount', example='1'),
    waitResCount?: int32(name='WaitResCount', example='1'),
    waitTimeCount?: int32(name='WaitTimeCount', example='1'),
  }(name='StatusCount'),
}

model GetInstanceStatusStatisticResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceStatusStatisticResponseBody(name='body'),
}

async function getInstanceStatusStatisticWithOptions(request: GetInstanceStatusStatisticRequest, runtime: Util.RuntimeOptions): GetInstanceStatusStatisticResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizDate)) {
    body['BizDate'] = request.bizDate;
  }
  if (!Util.isUnset(request.dagType)) {
    body['DagType'] = request.dagType;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.schedulerType)) {
    body['SchedulerType'] = request.schedulerType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceStatusStatistic',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstanceStatusStatistic(request: GetInstanceStatusStatisticRequest): GetInstanceStatusStatisticResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceStatusStatisticWithOptions(request, runtime);
}

model GetManualDagInstancesRequest {
  dagId?: string(name='DagId', example='7000001231241'),
  projectEnv?: string(name='ProjectEnv', example='RPOD'),
  projectName?: string(name='ProjectName', example='test_workspace'),
}

model GetManualDagInstancesResponseBody = {
  instances?: [ 
    {
      beginRunningTime?: long(name='BeginRunningTime', example='1605178414676'),
      beginWaitResTime?: long(name='BeginWaitResTime', example='1605178414676'),
      beginWaitTimeTime?: long(name='BeginWaitTimeTime', example='1605178414676'),
      bizDate?: long(name='BizDate', example='1605178414676'),
      createTime?: long(name='CreateTime', example='1605178414676'),
      createUser?: string(name='CreateUser', example='xxx'),
      cycTime?: long(name='CycTime', example='1605178414676'),
      dagId?: long(name='DagId', example='350850491'),
      dagType?: string(name='DagType', example='5'),
      finishTime?: long(name='FinishTime', example='1605178414676'),
      instanceId?: long(name='InstanceId', example='11726873619'),
      modifyTime?: long(name='ModifyTime', example='1605178414676'),
      nodeId?: long(name='NodeId', example='37851'),
      nodeName?: string(name='NodeName', example='test2'),
      paramValues?: string(name='ParamValues', example='xxx'),
      status?: string(name='Status', example='WAIT_TIME'),
      taskType?: string(name='TaskType', example='NORMAL(0)'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId', example='SDFSDFSDF-SDFSDF-SDFDSF-SDFSDF'),
}

model GetManualDagInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetManualDagInstancesResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request GetManualDagInstancesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetManualDagInstancesResponse
 */
// Deprecated
async function getManualDagInstancesWithOptions(request: GetManualDagInstancesRequest, runtime: Util.RuntimeOptions): GetManualDagInstancesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.dagId)) {
    body['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetManualDagInstances',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request GetManualDagInstancesRequest
  * @return GetManualDagInstancesResponse
 */
// Deprecated
async function getManualDagInstances(request: GetManualDagInstancesRequest): GetManualDagInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getManualDagInstancesWithOptions(request, runtime);
}

model GetMetaCategoryRequest {
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  parentCategoryId?: long(name='ParentCategoryId', example='333'),
}

model GetMetaCategoryResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        categoryId?: long(name='CategoryId', example='133'),
        comment?: string(name='Comment', example='category 1'),
        createTime?: long(name='CreateTime', example='1541576644000'),
        depth?: int32(name='Depth', example='1'),
        lastOperatorId?: string(name='LastOperatorId', example='12345'),
        modifiedTime?: long(name='ModifiedTime', example='1541576644000'),
        name?: string(name='Name', example='category 1'),
        ownerId?: string(name='OwnerId', example='123'),
        parentCategoryId?: long(name='ParentCategoryId', example='12'),
      }
    ](name='DataEntityList'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='10'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1ec92159376'),
  success?: boolean(name='Success', example='true'),
}

model GetMetaCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaCategoryResponseBody(name='body'),
}

async function getMetaCategoryWithOptions(request: GetMetaCategoryRequest, runtime: Util.RuntimeOptions): GetMetaCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentCategoryId)) {
    query['ParentCategoryId'] = request.parentCategoryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaCategory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaCategory(request: GetMetaCategoryRequest): GetMetaCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaCategoryWithOptions(request, runtime);
}

model GetMetaCollectionDetailRequest {
  qualifiedName?: string(name='QualifiedName', example='album.12345'),
}

model GetMetaCollectionDetailResponseBody = {
  collection?: Collection(name='Collection'),
  errorCode?: string(name='ErrorCode', example='9999'),
  errorMessage?: string(name='ErrorMessage', example='album.xxxx does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId', description='Id of the request', example='0000-ABCD-E****'),
  success?: boolean(name='Success', example='true'),
}

model GetMetaCollectionDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaCollectionDetailResponseBody(name='body'),
}

async function getMetaCollectionDetailWithOptions(request: GetMetaCollectionDetailRequest, runtime: Util.RuntimeOptions): GetMetaCollectionDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.qualifiedName)) {
    query['QualifiedName'] = request.qualifiedName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaCollectionDetail',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaCollectionDetail(request: GetMetaCollectionDetailRequest): GetMetaCollectionDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaCollectionDetailWithOptions(request, runtime);
}

model GetMetaColumnLineageRequest {
  clusterId?: string(name='ClusterId', example='abc'),
  columnGuid?: string(name='ColumnGuid', example='odps.engine_name.table_name.column_name'),
  columnName?: string(name='ColumnName', example='abc'),
  dataSourceType?: string(name='DataSourceType', example='emr'),
  databaseName?: string(name='DatabaseName', example='abc'),
  direction?: string(name='Direction', example='up'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  tableName?: string(name='TableName', example='abc'),
}

model GetMetaColumnLineageResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        clusterId?: string(name='ClusterId', example='abc'),
        columnGuid?: string(name='ColumnGuid', example='odps.engine_name.table_name.1'),
        columnName?: string(name='ColumnName', example='1'),
        databaseName?: string(name='DatabaseName', example='abc'),
        tableName?: string(name='TableName', example='abc'),
      }
    ](name='DataEntityList'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='20'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1ec92159376'),
  success?: boolean(name='Success', example='true'),
}

model GetMetaColumnLineageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaColumnLineageResponseBody(name='body'),
}

async function getMetaColumnLineageWithOptions(request: GetMetaColumnLineageRequest, runtime: Util.RuntimeOptions): GetMetaColumnLineageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.columnGuid)) {
    query['ColumnGuid'] = request.columnGuid;
  }
  if (!Util.isUnset(request.columnName)) {
    query['ColumnName'] = request.columnName;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaColumnLineage',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaColumnLineage(request: GetMetaColumnLineageRequest): GetMetaColumnLineageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaColumnLineageWithOptions(request, runtime);
}

model GetMetaDBInfoRequest {
  appGuid?: string(name='AppGuid', example='odps.some_engine_name'),
  clusterId?: string(name='ClusterId', example='abc'),
  dataSourceType?: string(name='DataSourceType', example='emr'),
  databaseName?: string(name='DatabaseName', example='abc'),
}

model GetMetaDBInfoResponseBody = {
  data?: {
    appGuid?: string(name='AppGuid', example='odps.engine_name'),
    clusterBizId?: string(name='ClusterBizId', example='abc'),
    comment?: string(name='Comment'),
    createTime?: long(name='CreateTime', example='1541576644000'),
    endpoint?: string(name='Endpoint', example='http://service.odpsstg.aliyun-inc.com/'),
    envType?: int32(name='EnvType', example='1'),
    location?: string(name='Location', example='hdfs://'),
    modifyTime?: long(name='ModifyTime', example='1541576644000'),
    name?: string(name='Name', example='abc'),
    ownerId?: string(name='OwnerId', example='23'),
    ownerName?: string(name='OwnerName', example='323'),
    projectId?: long(name='ProjectId', example='22'),
    projectName?: string(name='ProjectName', example='test'),
    projectNameCn?: string(name='ProjectNameCn'),
    tenantId?: long(name='TenantId', example='233'),
    type?: string(name='Type', example='hive'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='0bc1411515937****'),
}

model GetMetaDBInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaDBInfoResponseBody(name='body'),
}

async function getMetaDBInfoWithOptions(request: GetMetaDBInfoRequest, runtime: Util.RuntimeOptions): GetMetaDBInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaDBInfo',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaDBInfo(request: GetMetaDBInfoRequest): GetMetaDBInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaDBInfoWithOptions(request, runtime);
}

model GetMetaDBTableListRequest {
  appGuid?: string(name='AppGuid', example='odps.testProjectName'),
  clusterId?: string(name='ClusterId', example='abc'),
  dataSourceType?: string(name='DataSourceType', example='odps'),
  databaseName?: string(name='DatabaseName', example='abc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model GetMetaDBTableListResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    tableEntityList?: [ 
      {
        databaseName?: string(name='DatabaseName', example='abc'),
        tableGuid?: string(name='TableGuid', example='odps.engine_name.tname'),
        tableName?: string(name='TableName', example='tname'),
      }
    ](name='TableEntityList'),
    totalCount?: long(name='TotalCount', example='20'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='0bc1ec92159376'),
}

model GetMetaDBTableListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaDBTableListResponseBody(name='body'),
}

async function getMetaDBTableListWithOptions(request: GetMetaDBTableListRequest, runtime: Util.RuntimeOptions): GetMetaDBTableListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appGuid)) {
    query['AppGuid'] = request.appGuid;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaDBTableList',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaDBTableList(request: GetMetaDBTableListRequest): GetMetaDBTableListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaDBTableListWithOptions(request, runtime);
}

model GetMetaTableBasicInfoRequest {
  clusterId?: string(name='ClusterId', example='abc'),
  dataSourceType?: string(name='DataSourceType', example='emr'),
  databaseName?: string(name='DatabaseName', example='abc'),
  extension?: boolean(name='Extension', example='false'),
  tableGuid?: string(name='TableGuid', example='odps.engine_name.table_name'),
  tableName?: string(name='TableName', example='abc'),
}

model GetMetaTableBasicInfoResponseBody = {
  data?: {
    caption?: string(name='Caption'),
    clusterId?: string(name='ClusterId', example='abc'),
    columnCount?: int32(name='ColumnCount', example='3'),
    comment?: string(name='Comment', example='test table'),
    createTime?: long(name='CreateTime', example='1589870294000'),
    dataSize?: long(name='DataSize', example='10'),
    databaseName?: string(name='DatabaseName', example='abc'),
    envType?: int32(name='EnvType', example='1'),
    favoriteCount?: long(name='FavoriteCount', example='6'),
    isPartitionTable?: boolean(name='IsPartitionTable', example='true'),
    isView?: boolean(name='IsView', example='false'),
    isVisible?: int32(name='IsVisible', example='1'),
    lastAccessTime?: long(name='LastAccessTime', example='1589870294000'),
    lastDdlTime?: long(name='LastDdlTime', example='1589870294000'),
    lastModifyTime?: long(name='LastModifyTime', example='1589870294000'),
    lifeCycle?: int32(name='LifeCycle', example='5'),
    location?: string(name='Location', example='hdfs://'),
    ownerId?: string(name='OwnerId', example='123'),
    partitionKeys?: string(name='PartitionKeys', example='ab'),
    projectId?: long(name='ProjectId', example='232'),
    projectName?: string(name='ProjectName', example='test'),
    readCount?: long(name='ReadCount', example='3'),
    schema?: string(name='Schema', example='default'),
    tableGuid?: string(name='TableGuid', example='odps.engine_name.table_name'),
    tableName?: string(name='TableName', example='table_name'),
    tenantId?: long(name='TenantId', example='12345'),
    viewCount?: long(name='ViewCount', example='2'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1411515937'),
  success?: boolean(name='Success', example='true'),
}

model GetMetaTableBasicInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableBasicInfoResponseBody(name='body'),
}

/**
  * ****
  *
  * @param request GetMetaTableBasicInfoRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetMetaTableBasicInfoResponse
 */
async function getMetaTableBasicInfoWithOptions(request: GetMetaTableBasicInfoRequest, runtime: Util.RuntimeOptions): GetMetaTableBasicInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableBasicInfo',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ****
  *
  * @param request GetMetaTableBasicInfoRequest
  * @return GetMetaTableBasicInfoResponse
 */
async function getMetaTableBasicInfo(request: GetMetaTableBasicInfoRequest): GetMetaTableBasicInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableBasicInfoWithOptions(request, runtime);
}

model GetMetaTableChangeLogRequest {
  changeType?: string(name='ChangeType', example='ALTER_TABLE'),
  endDate?: string(name='EndDate', example='2020-06-02 00:00:00'),
  objectType?: string(name='ObjectType', example='TABLE'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  startDate?: string(name='StartDate', example='2020-06-01 00:00:00'),
  tableGuid?: string(name='TableGuid', example='odps.engine_name.table_name'),
}

model GetMetaTableChangeLogResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        changeContent?: string(name='ChangeContent', example='"[{\\"action\\":\\"ADD_COLUMN\\",\\"value\\":[{\\"originName\\":\\"\\",\\"originType\\":\\"\\",\\"originComment\\":\\"\\",\\"name\\":\\"id\\",\\"type\\":\\"struct<name:string>\\",\\"comment\\":\\"\\"}]}]",'),
        changeType?: string(name='ChangeType', example='CREATE_TABLE'),
        createTime?: long(name='CreateTime', example='1590722845000'),
        modifiedTime?: long(name='ModifiedTime', example='1590722845000'),
        objectType?: string(name='ObjectType', example='TABLE'),
        operator?: string(name='Operator', example='abc'),
      }
    ](name='DataEntityList'),
    pageNumber?: int32(name='PageNumber', example='10'),
    pageSize?: int32(name='PageSize', example='1'),
    totalCount?: long(name='TotalCount', example='10'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1ec92159376'),
  success?: boolean(name='Success', example='true'),
}

model GetMetaTableChangeLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableChangeLogResponseBody(name='body'),
}

async function getMetaTableChangeLogWithOptions(request: GetMetaTableChangeLogRequest, runtime: Util.RuntimeOptions): GetMetaTableChangeLogResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.changeType)) {
    body['ChangeType'] = request.changeType;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.objectType)) {
    body['ObjectType'] = request.objectType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.tableGuid)) {
    body['TableGuid'] = request.tableGuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableChangeLog',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableChangeLog(request: GetMetaTableChangeLogRequest): GetMetaTableChangeLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableChangeLogWithOptions(request, runtime);
}

model GetMetaTableColumnRequest {
  clusterId?: string(name='ClusterId', example='C-010A704DA760****'),
  dataSourceType?: string(name='DataSourceType', example='emr'),
  databaseName?: string(name='DatabaseName', example='abc'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  tableGuid?: string(name='TableGuid', example='odps.engine_name.table_name'),
  tableName?: string(name='TableName', example='abc'),
}

model GetMetaTableColumnResponseBody = {
  data?: {
    columnList?: [ 
      {
        caption?: string(name='Caption', example='data column'),
        columnGuid?: string(name='ColumnGuid', example='odps.engine_name.table_name.name'),
        columnName?: string(name='ColumnName', example='name'),
        columnType?: string(name='ColumnType', example='string'),
        comment?: string(name='Comment', example='comment'),
        isForeignKey?: boolean(name='IsForeignKey', example='true'),
        isPartitionColumn?: boolean(name='IsPartitionColumn', example='false'),
        isPrimaryKey?: boolean(name='IsPrimaryKey', example='false'),
        position?: int32(name='Position', example='1'),
        relationCount?: long(name='RelationCount', example='2'),
      }
    ](name='ColumnList'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='100'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1ec92159376'),
  success?: boolean(name='Success', example='true'),
}

model GetMetaTableColumnResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableColumnResponseBody(name='body'),
}

async function getMetaTableColumnWithOptions(request: GetMetaTableColumnRequest, runtime: Util.RuntimeOptions): GetMetaTableColumnResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableColumn',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableColumn(request: GetMetaTableColumnRequest): GetMetaTableColumnResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableColumnWithOptions(request, runtime);
}

model GetMetaTableFullInfoRequest {
  clusterId?: string(name='ClusterId', example='C-010A704DA760****'),
  dataSourceType?: string(name='DataSourceType', example='emr'),
  databaseName?: string(name='DatabaseName', example='abc'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  tableGuid?: string(name='TableGuid', example='odps.engine_name.table_name'),
  tableName?: string(name='TableName', example='abc'),
}

model GetMetaTableFullInfoResponseBody = {
  data?: {
    clusterId?: string(name='ClusterId', example='C-010A704DA760****'),
    columnList?: [ 
      {
        caption?: string(name='Caption', example='data comment'),
        columnGuid?: string(name='ColumnGuid', example='odps.engine_name.table_name.1'),
        columnName?: string(name='ColumnName', example='1'),
        columnType?: string(name='ColumnType', example='string'),
        comment?: string(name='Comment', example='comment'),
        isForeignKey?: boolean(name='IsForeignKey', example='true'),
        isPartitionColumn?: boolean(name='IsPartitionColumn', example='true'),
        isPrimaryKey?: boolean(name='IsPrimaryKey', example='false'),
        position?: int32(name='Position', example='1'),
      }
    ](name='ColumnList'),
    comment?: string(name='Comment', example='comment'),
    createTime?: long(name='CreateTime', example='1589870293000'),
    dataSize?: long(name='DataSize', example='10'),
    databaseName?: string(name='DatabaseName', example='abc'),
    envType?: int32(name='EnvType', example='1'),
    isVisible?: int32(name='IsVisible', example='1'),
    lastAccessTime?: long(name='LastAccessTime', example='1589870294000'),
    lastDdlTime?: long(name='LastDdlTime', example='1589870294000'),
    lastModifyTime?: long(name='LastModifyTime', example='1589870294000'),
    lifeCycle?: int32(name='LifeCycle', example='5'),
    location?: string(name='Location', example='hdfs://localhost:777/user/hadoop/test.txt'),
    ownerId?: string(name='OwnerId', example='123'),
    partitionKeys?: string(name='PartitionKeys', example='abc'),
    projectId?: long(name='ProjectId', example='22'),
    projectName?: string(name='ProjectName', example='test'),
    schema?: string(name='Schema'),
    tableGuid?: string(name='TableGuid', example='odps.engine_name.table_name'),
    tableName?: string(name='TableName', example='table_name'),
    tenantId?: long(name='TenantId', example='12345'),
    totalColumnCount?: long(name='TotalColumnCount', example='22'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1411515937****'),
  success?: boolean(name='Success', example='true'),
}

model GetMetaTableFullInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableFullInfoResponseBody(name='body'),
}

async function getMetaTableFullInfoWithOptions(request: GetMetaTableFullInfoRequest, runtime: Util.RuntimeOptions): GetMetaTableFullInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableFullInfo',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableFullInfo(request: GetMetaTableFullInfoRequest): GetMetaTableFullInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableFullInfoWithOptions(request, runtime);
}

model GetMetaTableIntroWikiRequest {
  tableGuid?: string(name='TableGuid', example='odps.engine_name.table_name'),
  wikiVersion?: long(name='WikiVersion', example='1'),
}

model GetMetaTableIntroWikiResponseBody = {
  data?: {
    content?: string(name='Content'),
    createTime?: long(name='CreateTime', example='1584444247000'),
    creator?: string(name='Creator', example='abc'),
    creatorName?: string(name='CreatorName', example='abc'),
    modifiedTime?: long(name='ModifiedTime', example='1584444247000'),
    version?: long(name='Version', example='1'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1ec92159376'),
  success?: boolean(name='Success', example='true'),
}

model GetMetaTableIntroWikiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableIntroWikiResponseBody(name='body'),
}

async function getMetaTableIntroWikiWithOptions(request: GetMetaTableIntroWikiRequest, runtime: Util.RuntimeOptions): GetMetaTableIntroWikiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.wikiVersion)) {
    query['WikiVersion'] = request.wikiVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableIntroWiki',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableIntroWiki(request: GetMetaTableIntroWikiRequest): GetMetaTableIntroWikiResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableIntroWikiWithOptions(request, runtime);
}

model GetMetaTableLineageRequest {
  clusterId?: string(name='ClusterId', example='abc'),
  dataSourceType?: string(name='DataSourceType', example='emr'),
  databaseName?: string(name='DatabaseName', example='abc'),
  direction?: string(name='Direction', example='up'),
  nextPrimaryKey?: string(name='NextPrimaryKey', example='odps.engine_name.table_name1'),
  pageSize?: int32(name='PageSize', example='10'),
  tableGuid?: string(name='TableGuid', example='odps.engine_name.table_name'),
  tableName?: string(name='TableName', example='abc'),
}

model GetMetaTableLineageResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        createTimestamp?: long(name='CreateTimestamp', example='1638720736000'),
        tableGuid?: string(name='TableGuid', example='odps.tt.name'),
        tableName?: string(name='TableName', example='name'),
      }
    ](name='DataEntityList'),
    hasNext?: boolean(name='HasNext', example='true'),
    nextPrimaryKey?: string(name='NextPrimaryKey', example='odps.tt.2'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1ec92159376'),
  success?: boolean(name='Success', example='true'),
}

model GetMetaTableLineageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableLineageResponseBody(name='body'),
}

async function getMetaTableLineageWithOptions(request: GetMetaTableLineageRequest, runtime: Util.RuntimeOptions): GetMetaTableLineageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.nextPrimaryKey)) {
    query['NextPrimaryKey'] = request.nextPrimaryKey;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableLineage',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableLineage(request: GetMetaTableLineageRequest): GetMetaTableLineageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableLineageWithOptions(request, runtime);
}

model GetMetaTableListByCategoryRequest {
  categoryId?: long(name='CategoryId', example='23'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model GetMetaTableListByCategoryResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    tableGuidList?: [ string ](name='TableGuidList'),
    totalCount?: long(name='TotalCount', example='20'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1ec92159376'),
  success?: boolean(name='Success', example='true'),
}

model GetMetaTableListByCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableListByCategoryResponseBody(name='body'),
}

async function getMetaTableListByCategoryWithOptions(request: GetMetaTableListByCategoryRequest, runtime: Util.RuntimeOptions): GetMetaTableListByCategoryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableListByCategory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableListByCategory(request: GetMetaTableListByCategoryRequest): GetMetaTableListByCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableListByCategoryWithOptions(request, runtime);
}

model GetMetaTableOutputRequest {
  endDate?: string(name='EndDate', example='2020-05-27'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  startDate?: string(name='StartDate', example='2020-06-27'),
  tableGuid?: string(name='TableGuid', example='odps.engine_name.table_name'),
  taskId?: string(name='TaskId'),
}

model GetMetaTableOutputResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        endTime?: string(name='EndTime', example='1511107200000'),
        projectId?: long(name='ProjectId', example='333'),
        startTime?: string(name='StartTime', example='1511107200000'),
        tableGuid?: string(name='TableGuid', example='odps.engine_name.table_name'),
        taskId?: string(name='TaskId', example='32'),
        taskInstanceId?: long(name='TaskInstanceId', example='3521'),
        waitTime?: string(name='WaitTime', example='323'),
      }
    ](name='DataEntityList'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='100'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1ec92159376****'),
  success?: boolean(name='Success', example='true'),
}

model GetMetaTableOutputResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableOutputResponseBody(name='body'),
}

async function getMetaTableOutputWithOptions(request: GetMetaTableOutputRequest, runtime: Util.RuntimeOptions): GetMetaTableOutputResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableOutput',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableOutput(request: GetMetaTableOutputRequest): GetMetaTableOutputResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableOutputWithOptions(request, runtime);
}

model GetMetaTablePartitionRequest {
  clusterId?: string(name='ClusterId', example='abc'),
  dataSourceType?: string(name='DataSourceType', example='emr'),
  databaseName?: string(name='DatabaseName', example='abc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  sortCriterion?: {
    order?: string(name='Order', example='desc'),
    sortField?: string(name='SortField', example='name'),
  }(name='SortCriterion'),
  tableGuid?: string(name='TableGuid', example='odps.engine_name.table_name'),
  tableName?: string(name='TableName', example='abc'),
}

model GetMetaTablePartitionShrinkRequest {
  clusterId?: string(name='ClusterId', example='abc'),
  dataSourceType?: string(name='DataSourceType', example='emr'),
  databaseName?: string(name='DatabaseName', example='abc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  sortCriterionShrink?: string(name='SortCriterion'),
  tableGuid?: string(name='TableGuid', example='odps.engine_name.table_name'),
  tableName?: string(name='TableName', example='abc'),
}

model GetMetaTablePartitionResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        comment?: string(name='Comment'),
        createTime?: long(name='CreateTime', example='1590032868000'),
        dataSize?: long(name='DataSize', example='19'),
        modifiedTime?: long(name='ModifiedTime', example='1590032868000'),
        partitionGuid?: string(name='PartitionGuid', example='odps.engine_name.table_name.pt=20170614'),
        partitionLocation?: string(name='PartitionLocation', example='abc'),
        partitionName?: string(name='PartitionName', example='pt=20170614'),
        partitionPath?: string(name='PartitionPath', example='abc'),
        partitionType?: string(name='PartitionType', example='abc'),
        recordCount?: long(name='RecordCount', example='233'),
        tableGuid?: string(name='TableGuid', example='odps.engine_name.table_name'),
      }
    ](name='DataEntityList'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='100'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1ec92159376'),
  success?: boolean(name='Success', example='true'),
}

model GetMetaTablePartitionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTablePartitionResponseBody(name='body'),
}

async function getMetaTablePartitionWithOptions(tmpReq: GetMetaTablePartitionRequest, runtime: Util.RuntimeOptions): GetMetaTablePartitionResponse {
  Util.validateModel(tmpReq);
  var request = new GetMetaTablePartitionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.sortCriterion)) {
    request.sortCriterionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sortCriterion, 'SortCriterion', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortCriterionShrink)) {
    query['SortCriterion'] = request.sortCriterionShrink;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTablePartition',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTablePartition(request: GetMetaTablePartitionRequest): GetMetaTablePartitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTablePartitionWithOptions(request, runtime);
}

model GetMetaTableProducingTasksRequest {
  clusterId?: string(name='ClusterId', example='C-A_SAMPLE_CLUSTER_ID'),
  dataSourceType?: string(name='DataSourceType', example='odps'),
  dbName?: string(name='DbName', example='default'),
  schemaName?: string(name='SchemaName', example='myschema'),
  tableGuid?: string(name='TableGuid', example='odps.sample_project.sample_table'),
  tableName?: string(name='TableName', example='sample_table'),
}

model GetMetaTableProducingTasksResponseBody = {
  data?: [ 
    {
      taskId?: string(name='TaskId', example='9876543210'),
      taskName?: string(name='TaskName'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='"0"'),
  errorMessage?: string(name='ErrorMessage', example='SUCCESS'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='00000-00000-00000-00000'),
  success?: boolean(name='Success', example='true'),
}

model GetMetaTableProducingTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableProducingTasksResponseBody(name='body'),
}

async function getMetaTableProducingTasksWithOptions(request: GetMetaTableProducingTasksRequest, runtime: Util.RuntimeOptions): GetMetaTableProducingTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.dbName)) {
    query['DbName'] = request.dbName;
  }
  if (!Util.isUnset(request.schemaName)) {
    query['SchemaName'] = request.schemaName;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableProducingTasks',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableProducingTasks(request: GetMetaTableProducingTasksRequest): GetMetaTableProducingTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableProducingTasksWithOptions(request, runtime);
}

model GetMetaTableThemeLevelRequest {
  dataSourceType?: string(name='DataSourceType', example='odps'),
  tableGuid?: string(name='TableGuid', example='odps.project1.name1'),
}

model GetMetaTableThemeLevelResponseBody = {
  entity?: {
    level?: [ 
      {
        description?: string(name='Description'),
        levelId?: long(name='LevelId', example='1'),
        name?: string(name='Name', example='level1'),
        type?: int32(name='Type', example='1'),
      }
    ](name='Level'),
    theme?: [ 
      {
        level?: int32(name='Level', example='1'),
        name?: string(name='Name', example='theme1'),
        parentId?: long(name='ParentId', example='0'),
        themeId?: long(name='ThemeId', example='123'),
      }
    ](name='Theme'),
  }(name='Entity'),
  errorCode?: string(name='ErrorCode', example='0'),
  errorMessage?: string(name='ErrorMessage', example='success'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='1324afdsfde'),
  success?: boolean(name='Success', example='true'),
}

model GetMetaTableThemeLevelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableThemeLevelResponseBody(name='body'),
}

async function getMetaTableThemeLevelWithOptions(request: GetMetaTableThemeLevelRequest, runtime: Util.RuntimeOptions): GetMetaTableThemeLevelResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableThemeLevel',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableThemeLevel(request: GetMetaTableThemeLevelRequest): GetMetaTableThemeLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableThemeLevelWithOptions(request, runtime);
}

model GetMigrationProcessRequest {
  migrationId?: long(name='MigrationId', example='123456'),
  projectId?: long(name='ProjectId', example='123456'),
}

model GetMigrationProcessResponseBody = {
  data?: [ 
    {
      taskName?: string(name='TaskName', example='IMPORE_PREPARE'),
      taskStatus?: string(name='TaskStatus', example='SUCCESS'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='110001123456'),
  errorMessage?: string(name='ErrorMessage', example='test error msg'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='SADFSDFSD-SDFSDF-XDXCVX-ESWW'),
  success?: boolean(name='Success', example='true'),
}

model GetMigrationProcessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMigrationProcessResponseBody(name='body'),
}

async function getMigrationProcessWithOptions(request: GetMigrationProcessRequest, runtime: Util.RuntimeOptions): GetMigrationProcessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.migrationId)) {
    body['MigrationId'] = request.migrationId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMigrationProcess',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMigrationProcess(request: GetMigrationProcessRequest): GetMigrationProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMigrationProcessWithOptions(request, runtime);
}

model GetMigrationSummaryRequest {
  migrationId?: long(name='MigrationId', example='1234'),
  projectId?: long(name='ProjectId', example='12345'),
}

model GetMigrationSummaryResponseBody = {
  data?: {
    createUser?: string(name='CreateUser', example='982293332403****'),
    downloadUrl?: string(name='DownloadUrl', example='https://shanghai-xxx-oss.oss-cn-shanghai.aliyuncs.com/pre/store/f10_bf47_b4fa7df0860f.zip?Expires=1639540903&OSSAccessKeyId=XXXXXXeF4Lv5j&Signature=qxxxxx'),
    gmtCreate?: long(name='GmtCreate', example='1589904000000'),
    gmtModified?: long(name='GmtModified', example='1589904000000'),
    migrationId?: long(name='MigrationId', example='1234'),
    name?: string(name='Name', example='test_export_01'),
    opUser?: string(name='OpUser', example='982293332403****'),
    projectId?: long(name='ProjectId', example='12345'),
    status?: string(name='Status', example='EXPORT_SUCCESS'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='19999A96-71BA-1845-B455-ED620EF4E37F'),
  success?: boolean(name='Success', example='true'),
}

model GetMigrationSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMigrationSummaryResponseBody(name='body'),
}

async function getMigrationSummaryWithOptions(request: GetMigrationSummaryRequest, runtime: Util.RuntimeOptions): GetMigrationSummaryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.migrationId)) {
    body['MigrationId'] = request.migrationId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMigrationSummary',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMigrationSummary(request: GetMigrationSummaryRequest): GetMigrationSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMigrationSummaryWithOptions(request, runtime);
}

model GetNodeRequest {
  nodeId?: long(name='NodeId', example='1234'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
}

model GetNodeResponseBody = {
  data?: {
    baselineId?: long(name='BaselineId', example='123456'),
    businessId?: long(name='BusinessId', example='123'),
    connection?: string(name='Connection', example='odps_first_dev'),
    cronExpress?: string(name='CronExpress', example='00 00 00 * * ?'),
    description?: string(name='Description', example='test'),
    dqcDescription?: string(name='DqcDescription', example='[{"projectName":"test_0923001","tableName":"test_table_001","partition":"ds\\u003d$[yyyymmdd]"},{"projectName":"test_0923001","tableName":"test_table_002","partition":"NOTAPARTITIONTABLE"}]'),
    dqcType?: int32(name='DqcType', example='1'),
    nodeId?: long(name='NodeId', example='1234'),
    nodeName?: string(name='NodeName'),
    ownerId?: string(name='OwnerId', example='17366294****'),
    paramValues?: string(name='ParamValues', example='a=b'),
    priority?: int32(name='Priority', example='1'),
    programType?: string(name='ProgramType', example='ODPS_SQL'),
    projectId?: long(name='ProjectId', example='1234'),
    relatedFlowId?: long(name='RelatedFlowId', example='123'),
    repeatInterval?: long(name='RepeatInterval', example='60'),
    repeatability?: string(name='Repeatability', example='true'),
    resGroupName?: string(name='ResGroupName'),
    schedulerType?: string(name='SchedulerType', example='NORMAL'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', example='true'),
}

model GetNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNodeResponseBody(name='body'),
}

async function getNodeWithOptions(request: GetNodeRequest, runtime: Util.RuntimeOptions): GetNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNode',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNode(request: GetNodeRequest): GetNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeWithOptions(request, runtime);
}

model GetNodeChildrenRequest {
  nodeId?: long(name='NodeId', example='123456878'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
}

model GetNodeChildrenResponseBody = {
  data?: {
    nodes?: [ 
      {
        baselineId?: long(name='BaselineId', example='12345656'),
        cronExpress?: string(name='CronExpress', example='00 00 * * * *'),
        nodeId?: long(name='NodeId', example='1244564565'),
        nodeName?: string(name='NodeName', example='test_Node'),
        ownerId?: string(name='OwnerId', example='123124561341251321'),
        priority?: int32(name='Priority', example='3'),
        programType?: string(name='ProgramType', example='ODPS_SQL'),
        projectId?: long(name='ProjectId', example='12315412412'),
        repeatability?: boolean(name='Repeatability', example='true'),
        schedulerType?: string(name='SchedulerType', example='NORMAL'),
      }
    ](name='Nodes'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='1060010000000'),
  errorMessage?: string(name='ErrorMessage', example='err'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='adsfasdf-adf-asdf-asdf-asdfadfasdd'),
  success?: boolean(name='Success', example='true'),
}

model GetNodeChildrenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNodeChildrenResponseBody(name='body'),
}

async function getNodeChildrenWithOptions(request: GetNodeChildrenRequest, runtime: Util.RuntimeOptions): GetNodeChildrenResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeChildren',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNodeChildren(request: GetNodeChildrenRequest): GetNodeChildrenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeChildrenWithOptions(request, runtime);
}

model GetNodeCodeRequest {
  nodeId?: long(name='NodeId', example='1234'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
}

model GetNodeCodeResponseBody = {
  data?: string(name='Data', example='select a;'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', example='true'),
}

model GetNodeCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNodeCodeResponseBody(name='body'),
}

async function getNodeCodeWithOptions(request: GetNodeCodeRequest, runtime: Util.RuntimeOptions): GetNodeCodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeCode',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNodeCode(request: GetNodeCodeRequest): GetNodeCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeCodeWithOptions(request, runtime);
}

model GetNodeOnBaselineRequest {
  baselineId?: long(name='BaselineId', example='1234'),
}

model GetNodeOnBaselineResponseBody = {
  data?: [ 
    {
      nodeId?: long(name='NodeId', example='1234'),
      nodeName?: string(name='NodeName'),
      owner?: string(name='Owner', example='9527952****'),
      projectId?: long(name='ProjectId', example='1234'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-E****'),
  success?: string(name='Success', example='true'),
}

model GetNodeOnBaselineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNodeOnBaselineResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request GetNodeOnBaselineRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetNodeOnBaselineResponse
 */
// Deprecated
async function getNodeOnBaselineWithOptions(request: GetNodeOnBaselineRequest, runtime: Util.RuntimeOptions): GetNodeOnBaselineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeOnBaseline',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request GetNodeOnBaselineRequest
  * @return GetNodeOnBaselineResponse
 */
// Deprecated
async function getNodeOnBaseline(request: GetNodeOnBaselineRequest): GetNodeOnBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeOnBaselineWithOptions(request, runtime);
}

model GetNodeParentsRequest {
  nodeId?: long(name='NodeId', example='12345456211234'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
}

model GetNodeParentsResponseBody = {
  data?: {
    nodes?: [ 
      {
        baselineId?: long(name='BaselineId', example='1244564565'),
        cronExpress?: string(name='CronExpress', example='00 00 * * * *'),
        nodeId?: long(name='NodeId', example='1244564565'),
        nodeName?: string(name='NodeName', example='test_Node'),
        ownerId?: string(name='OwnerId', example='123124561341251321'),
        priority?: int32(name='Priority', example='3'),
        programType?: string(name='ProgramType', example='ODPS_SQL'),
        projectId?: long(name='ProjectId', example='12315412412'),
        repeatability?: boolean(name='Repeatability', example='true'),
        schedulerType?: string(name='SchedulerType', example='NORMAL'),
      }
    ](name='Nodes'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='1060010000000'),
  errorMessage?: string(name='ErrorMessage', example='err'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='asdfasdfas-adfasdf-asfas-dfasdf-asdf'),
  success?: boolean(name='Success', example='true'),
}

model GetNodeParentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNodeParentsResponseBody(name='body'),
}

async function getNodeParentsWithOptions(request: GetNodeParentsRequest, runtime: Util.RuntimeOptions): GetNodeParentsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeParents',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNodeParents(request: GetNodeParentsRequest): GetNodeParentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeParentsWithOptions(request, runtime);
}

model GetNodeTypeListInfoRequest {
  keyword?: string(name='Keyword', example='ODPS SQ'),
  locale?: string(name='Locale', example='zh-CN'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='50'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model GetNodeTypeListInfoResponseBody = {
  nodeTypeInfoList?: {
    nodeTypeInfo?: [ 
      {
        nodeType?: int32(name='NodeType', example='10'),
        nodeTypeName?: string(name='NodeTypeName', example='ODPS SQL'),
      }
    ](name='NodeTypeInfo'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='50'),
    totalCount?: int32(name='TotalCount', example='127'),
  }(name='NodeTypeInfoList'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
}

model GetNodeTypeListInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNodeTypeListInfoResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request GetNodeTypeListInfoRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetNodeTypeListInfoResponse
 */
// Deprecated
async function getNodeTypeListInfoWithOptions(request: GetNodeTypeListInfoRequest, runtime: Util.RuntimeOptions): GetNodeTypeListInfoResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.locale)) {
    body['Locale'] = request.locale;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeTypeListInfo',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request GetNodeTypeListInfoRequest
  * @return GetNodeTypeListInfoResponse
 */
// Deprecated
async function getNodeTypeListInfo(request: GetNodeTypeListInfoRequest): GetNodeTypeListInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeTypeListInfoWithOptions(request, runtime);
}

model GetOpRiskDataRequest {
  date?: string(name='Date', example='20210221'),
  name?: string(name='Name', example='[ {"dbType":"hologres","instanceName":"ABC","databaseName":"abc"}, {"dbType":"ODPS.ODPS","projectName":"adbc"} ]'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='100'),
  riskType?: string(name='RiskType'),
}

model GetOpRiskDataResponseBody = {
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  riskData?: string(name='RiskData'),
}

model GetOpRiskDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOpRiskDataResponseBody(name='body'),
}

async function getOpRiskDataWithOptions(request: GetOpRiskDataRequest, runtime: Util.RuntimeOptions): GetOpRiskDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOpRiskData',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOpRiskData(request: GetOpRiskDataRequest): GetOpRiskDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOpRiskDataWithOptions(request, runtime);
}

model GetOpSensitiveDataRequest {
  date?: string(name='Date', example='20210116'),
  name?: string(name='Name', example='[  {"dbType":"hologres","instanceName":"ABC","databaseName":"abc"},  {"dbType":"ODPS.ODPS","projectName":"adbc"}  ]'),
  opType?: string(name='OpType', example='SQL_SELECT'),
  pageNo?: int32(name='PageNo', example='100'),
  pageSize?: int32(name='PageSize', example='1'),
}

model GetOpSensitiveDataResponseBody = {
  opSensitiveData?: string(name='OpSensitiveData'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
}

model GetOpSensitiveDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOpSensitiveDataResponseBody(name='body'),
}

async function getOpSensitiveDataWithOptions(request: GetOpSensitiveDataRequest, runtime: Util.RuntimeOptions): GetOpSensitiveDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOpSensitiveData',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOpSensitiveData(request: GetOpSensitiveDataRequest): GetOpSensitiveDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOpSensitiveDataWithOptions(request, runtime);
}

model GetOptionValueForProjectRequest {
  extensionCode?: string(name='ExtensionCode', example='ce4*********086da5'),
  projectId?: string(name='ProjectId', example='234'),
}

model GetOptionValueForProjectResponseBody = {
  optionValue?: string(name='OptionValue', example='{"cuNumber":"0"}'),
  requestId?: string(name='RequestId', description='Id of the request', example='E6F0DBDD-5AD****'),
}

model GetOptionValueForProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOptionValueForProjectResponseBody(name='body'),
}

async function getOptionValueForProjectWithOptions(request: GetOptionValueForProjectRequest, runtime: Util.RuntimeOptions): GetOptionValueForProjectResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.extensionCode)) {
    body['ExtensionCode'] = request.extensionCode;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetOptionValueForProject',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOptionValueForProject(request: GetOptionValueForProjectRequest): GetOptionValueForProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOptionValueForProjectWithOptions(request, runtime);
}

model GetPermissionApplyOrderDetailRequest {
  flowId?: string(name='FlowId', example='48f36729-05f9-4a40-9286-933fd940f30a'),
}

model GetPermissionApplyOrderDetailResponseBody = {
  applyOrderDetail?: {
    applyBaseId?: string(name='ApplyBaseId', example='267842600408993176'),
    applyTimestamp?: long(name='ApplyTimestamp', example='1615284086000'),
    approveAccountList?: [ 
      {
        baseId?: string(name='BaseId', example='182293110403****'),
      }
    ](name='ApproveAccountList'),
    approveContent?: {
      applyReason?: string(name='ApplyReason', example='I need to use this table'),
      deadline?: long(name='Deadline', example='1617115071885'),
      orderType?: int32(name='OrderType', example='1'),
      projectMeta?: {
        maxComputeProjectName?: string(name='MaxComputeProjectName', example='aMaxComputeProject'),
        objectMetaList?: [ 
          {
            columnMetaList?: [ 
              {
                columnComment?: string(name='ColumnComment'),
                columnName?: string(name='ColumnName', example='aColumnName'),
              }
            ](name='ColumnMetaList'),
            objectName?: string(name='ObjectName', example='aTableName'),
          }
        ](name='ObjectMetaList'),
        workspaceId?: int32(name='WorkspaceId', example='12345'),
      }(name='ProjectMeta'),
    }(name='ApproveContent'),
    flowId?: string(name='FlowId', example='ad8da78d-8135-455e-9486-27cf213fc140'),
    flowStatus?: int32(name='FlowStatus', example='2'),
    granteeObjectList?: [ 
      {
        granteeId?: string(name='GranteeId', example='267842600408993176'),
        granteeName?: string(name='GranteeName', example='RAM$dataworks_3h1_1:StsRamUser(StsRamUser)'),
        granteeType?: int32(name='GranteeType', example='1'),
        granteeTypeSub?: int32(name='GranteeTypeSub', example='103'),
      }
    ](name='GranteeObjectList'),
  }(name='ApplyOrderDetail'),
  requestId?: string(name='RequestId', example='0bc1ec92159376****'),
}

model GetPermissionApplyOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPermissionApplyOrderDetailResponseBody(name='body'),
}

async function getPermissionApplyOrderDetailWithOptions(request: GetPermissionApplyOrderDetailRequest, runtime: Util.RuntimeOptions): GetPermissionApplyOrderDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.flowId)) {
    query['FlowId'] = request.flowId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPermissionApplyOrderDetail',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPermissionApplyOrderDetail(request: GetPermissionApplyOrderDetailRequest): GetPermissionApplyOrderDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPermissionApplyOrderDetailWithOptions(request, runtime);
}

model GetProjectRequest {
  projectId?: long(name='ProjectId', example='27'),
}

model GetProjectResponseBody = {
  data?: {
    appkey?: string(name='Appkey', example='0'),
    baseProject?: boolean(name='BaseProject', example='false'),
    defaultDiResourceGroupIdentifier?: string(name='DefaultDiResourceGroupIdentifier', example='group_280749521****'),
    destination?: int32(name='Destination', example='0'),
    devStorageQuota?: string(name='DevStorageQuota', example='0'),
    developmentType?: int32(name='DevelopmentType', example='4'),
    disableDevelopment?: boolean(name='DisableDevelopment', example='true'),
    envTypes?: [ string ](name='EnvTypes'),
    gmtCreate?: string(name='GmtCreate', example='Oct 10, 2019 3:42:53 PM'),
    gmtModified?: string(name='GmtModified', example='Dec 3, 2019 9:12:20 PM'),
    isAllowDownload?: int32(name='IsAllowDownload', example='1'),
    isDefault?: int32(name='IsDefault', example='1'),
    maxFlowNode?: int32(name='MaxFlowNode', example='1'),
    prodStorageQuota?: string(name='ProdStorageQuota', example='1'),
    projectDescription?: string(name='ProjectDescription', example='abc'),
    projectId?: int32(name='ProjectId', example='27'),
    projectIdentifier?: string(name='ProjectIdentifier', example='abc'),
    projectMode?: int32(name='ProjectMode', example='2'),
    projectName?: string(name='ProjectName', example='abc'),
    projectOwnerBaseId?: string(name='ProjectOwnerBaseId', example='18229311****'),
    protectedMode?: int32(name='ProtectedMode', example='1'),
    residentArea?: string(name='ResidentArea', example='private'),
    resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId'),
    schedulerMaxRetryTimes?: int32(name='SchedulerMaxRetryTimes', example='3'),
    schedulerRetryInterval?: int32(name='SchedulerRetryInterval', example='120000'),
    status?: int32(name='Status', example='0'),
    tablePrivacyMode?: int32(name='TablePrivacyMode', example='1'),
    tags?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Tags'),
    tenantId?: long(name='TenantId', example='280749521'),
    useProxyOdpsAccount?: boolean(name='UseProxyOdpsAccount', example='true'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1411515937635973****'),
  success?: boolean(name='Success', example='true'),
}

model GetProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProjectResponseBody(name='body'),
}

async function getProjectWithOptions(request: GetProjectRequest, runtime: Util.RuntimeOptions): GetProjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProject',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getProject(request: GetProjectRequest): GetProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProjectWithOptions(request, runtime);
}

model GetProjectDetailRequest {
  projectId?: long(name='ProjectId', example='27'),
}

model GetProjectDetailResponseBody = {
  data?: {
    defaultDiResourceGroupIdentifier?: string(name='DefaultDiResourceGroupIdentifier', example='group_280749521****'),
    developmentType?: int32(name='DevelopmentType', example='4'),
    disableDevelopment?: boolean(name='DisableDevelopment'),
    envTypes?: [ string ](name='EnvTypes'),
    gmtCreate?: string(name='GmtCreate', example='Oct 10, 2019 3:42:53 PM'),
    gmtModified?: string(name='GmtModified', example='Dec 3, 2019 9:12:20 PM'),
    isAllowDownload?: int32(name='IsAllowDownload', example='1'),
    isDefault?: int32(name='IsDefault'),
    projectDescription?: string(name='ProjectDescription', example='abc'),
    projectId?: int32(name='ProjectId', example='27'),
    projectIdentifier?: string(name='ProjectIdentifier', example='abc'),
    projectMode?: int32(name='ProjectMode', example='1'),
    projectName?: string(name='ProjectName', example='abc'),
    projectOwnerBaseId?: string(name='ProjectOwnerBaseId', example='18229311****'),
    protectedMode?: int32(name='ProtectedMode', example='1'),
    residentArea?: string(name='ResidentArea', example='private'),
    resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId'),
    schedulerMaxRetryTimes?: int32(name='SchedulerMaxRetryTimes', example='3'),
    schedulerRetryInterval?: int32(name='SchedulerRetryInterval', example='120000'),
    status?: int32(name='Status', example='0'),
    tablePrivacyMode?: int32(name='TablePrivacyMode'),
    tags?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Tags'),
    tenantId?: long(name='TenantId', example='280749521950784'),
    useProxyOdpsAccount?: boolean(name='UseProxyOdpsAccount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1411515937635973****'),
  success?: boolean(name='Success', example='true'),
}

model GetProjectDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProjectDetailResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request GetProjectDetailRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetProjectDetailResponse
 */
// Deprecated
async function getProjectDetailWithOptions(request: GetProjectDetailRequest, runtime: Util.RuntimeOptions): GetProjectDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProjectDetail',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request GetProjectDetailRequest
  * @return GetProjectDetailResponse
 */
// Deprecated
async function getProjectDetail(request: GetProjectDetailRequest): GetProjectDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProjectDetailWithOptions(request, runtime);
}

model GetQualityEntityRequest {
  envType?: string(name='EnvType', example='odps'),
  matchExpression?: string(name='MatchExpression', example='dt=$[yyyymmdd]'),
  projectName?: string(name='ProjectName', example='autotest'),
  tableName?: string(name='TableName', example='dual'),
}

model GetQualityEntityResponseBody = {
  data?: [ 
    {
      createTime?: long(name='CreateTime', example='1593964800000'),
      entityLevel?: int32(name='EntityLevel', example='0'),
      envType?: string(name='EnvType', example='odps'),
      followers?: string(name='Followers', example='1822931****'),
      hasRelativeNode?: boolean(name='HasRelativeNode', example='true'),
      id?: long(name='Id', example='4003918'),
      matchExpression?: string(name='MatchExpression', example='dt=$[yyyymmdd-1]'),
      modifyTime?: long(name='ModifyTime', example='1593964800000'),
      modifyUser?: string(name='ModifyUser', example='1822931****'),
      onDuty?: string(name='OnDuty', example='1822931****'),
      onDutyAccountName?: string(name='OnDutyAccountName', example='test'),
      projectName?: string(name='ProjectName', example='autotest'),
      relativeNode?: string(name='RelativeNode', example='[{"projectName":"xc_DP****","nodeId":7000026****}]'),
      sql?: int32(name='Sql', example='0'),
      tableName?: string(name='TableName', example='test_dqc_de****'),
      task?: int32(name='Task', example='0'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='401'),
  errorMessage?: string(name='ErrorMessage', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='6d739ef6-098a-47****'),
  success?: boolean(name='Success', example='true'),
}

model GetQualityEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetQualityEntityResponseBody(name='body'),
}

async function getQualityEntityWithOptions(request: GetQualityEntityRequest, runtime: Util.RuntimeOptions): GetQualityEntityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.matchExpression)) {
    body['MatchExpression'] = request.matchExpression;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.tableName)) {
    body['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetQualityEntity',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getQualityEntity(request: GetQualityEntityRequest): GetQualityEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return getQualityEntityWithOptions(request, runtime);
}

model GetQualityFollowerRequest {
  entityId?: long(name='EntityId', example='1234'),
  projectName?: string(name='ProjectName', example='autotest'),
}

model GetQualityFollowerResponseBody = {
  data?: [ 
    {
      alarmMode?: int32(name='AlarmMode', example='1'),
      entityId?: string(name='EntityId', example='1234'),
      follower?: string(name='Follower', example='1234'),
      followerAccountName?: string(name='FollowerAccountName', example='test'),
      id?: long(name='Id', example='123'),
      projectName?: string(name='ProjectName', example='autotest'),
      tableName?: string(name='TableName', example='dual'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='38cbdef0-f6cf-49'),
  success?: boolean(name='Success', example='true'),
}

model GetQualityFollowerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetQualityFollowerResponseBody(name='body'),
}

async function getQualityFollowerWithOptions(request: GetQualityFollowerRequest, runtime: Util.RuntimeOptions): GetQualityFollowerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetQualityFollower',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getQualityFollower(request: GetQualityFollowerRequest): GetQualityFollowerResponse {
  var runtime = new Util.RuntimeOptions{};
  return getQualityFollowerWithOptions(request, runtime);
}

model GetQualityRuleRequest {
  projectName?: string(name='ProjectName', example='autotest'),
  ruleId?: long(name='RuleId', example='1234'),
}

model GetQualityRuleResponseBody = {
  data?: {
    blockType?: int32(name='BlockType', example='1'),
    checker?: int32(name='Checker', example='9'),
    checkerName?: string(name='CheckerName', example='compared with a fixed value'),
    comment?: string(name='Comment'),
    criticalThreshold?: string(name='CriticalThreshold', example='20'),
    entityId?: long(name='EntityId', example='165523'),
    expectValue?: string(name='ExpectValue', example='30'),
    fixCheck?: boolean(name='FixCheck', example='true'),
    id?: long(name='Id', example='123232'),
    methodId?: int32(name='MethodId', example='8'),
    methodName?: string(name='MethodName', example='table_count'),
    onDuty?: string(name='OnDuty', example='1822931****'),
    onDutyAccountName?: string(name='OnDutyAccountName', example='test'),
    operator?: string(name='Operator', example='>='),
    predictType?: int32(name='PredictType', example='0'),
    property?: string(name='Property', example='id'),
    ruleName?: string(name='RuleName'),
    ruleType?: int32(name='RuleType', example='0'),
    templateId?: int32(name='TemplateId', example='7'),
    templateName?: string(name='TemplateName', example='SQL task table rows, 1,7, 30 days fluctuation test'),
    trend?: string(name='Trend', example='abs'),
    warningThreshold?: string(name='WarningThreshold', example='10'),
    whereCondition?: string(name='WhereCondition', example='id>10'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='401'),
  errorMessage?: string(name='ErrorMessage', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='576b9457-2cf5-4****'),
  success?: boolean(name='Success', example='true'),
}

model GetQualityRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetQualityRuleResponseBody(name='body'),
}

async function getQualityRuleWithOptions(request: GetQualityRuleRequest, runtime: Util.RuntimeOptions): GetQualityRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.ruleId)) {
    body['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetQualityRule',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getQualityRule(request: GetQualityRuleRequest): GetQualityRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getQualityRuleWithOptions(request, runtime);
}

model GetRemindRequest {
  remindId?: long(name='RemindId', example='1234'),
}

model GetRemindResponseBody = {
  data?: {
    alertInterval?: int32(name='AlertInterval', example='1800'),
    alertMethods?: [ string ](name='AlertMethods'),
    alertTargets?: [ string ](name='AlertTargets'),
    alertUnit?: string(name='AlertUnit', example='OWNER'),
    baselines?: [ 
      {
        baselineId?: long(name='BaselineId', example='1234'),
        baselineName?: string(name='BaselineName'),
      }
    ](name='Baselines'),
    bizProcesses?: [ 
      {
        bizId?: long(name='BizId', example='9527'),
        bizProcessName?: string(name='BizProcessName'),
      }
    ](name='BizProcesses'),
    detail?: string(name='Detail', example='{"hour":23,"minu":59}'),
    dndEnd?: string(name='DndEnd', example='08:00'),
    dndStart?: string(name='DndStart', example='00:00'),
    founder?: string(name='Founder', example='9527951795****'),
    maxAlertTimes?: int32(name='MaxAlertTimes', example='3'),
    nodes?: [ 
      {
        nodeId?: long(name='NodeId', example='1234'),
        nodeName?: string(name='NodeName'),
        owner?: string(name='Owner', example='9527951795****'),
        projectId?: long(name='ProjectId', example='1234'),
      }
    ](name='Nodes'),
    projects?: [ 
      {
        projectId?: long(name='ProjectId', example='1234'),
      }
    ](name='Projects'),
    remindId?: long(name='RemindId', example='1234'),
    remindName?: string(name='RemindName'),
    remindType?: string(name='RemindType', example='FINISHED'),
    remindUnit?: string(name='RemindUnit', example='NODE'),
    robots?: [ 
      {
        atAll?: boolean(name='AtAll', example='true'),
        webUrl?: string(name='WebUrl', example='https://oapi.dingtalk.com/robot/send?access_token=******************************'),
      }
    ](name='Robots'),
    useflag?: boolean(name='Useflag', example='true'),
    webhooks?: [ string ](name='Webhooks'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFGH-IJKLMNOPQ'),
  success?: boolean(name='Success', example='true'),
}

model GetRemindResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRemindResponseBody(name='body'),
}

async function getRemindWithOptions(request: GetRemindRequest, runtime: Util.RuntimeOptions): GetRemindResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.remindId)) {
    body['RemindId'] = request.remindId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetRemind',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRemind(request: GetRemindRequest): GetRemindResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRemindWithOptions(request, runtime);
}

model GetSensitiveDataRequest {
  name?: string(name='Name', example='[ {"dbType":"hologres","instanceName":"ABC","databaseName":"abc"}, {"dbType":"ODPS.ODPS","projectName":"adbc"} ]'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='1000'),
}

model GetSensitiveDataResponseBody = {
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  sensitiveData?: map[string]any(name='SensitiveData'),
}

model GetSensitiveDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSensitiveDataResponseBody(name='body'),
}

async function getSensitiveDataWithOptions(request: GetSensitiveDataRequest, runtime: Util.RuntimeOptions): GetSensitiveDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSensitiveData',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSensitiveData(request: GetSensitiveDataRequest): GetSensitiveDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSensitiveDataWithOptions(request, runtime);
}

model GetSuccessInstanceTrendRequest {
  projectId?: long(name='ProjectId', example='9527'),
}

model GetSuccessInstanceTrendResponseBody = {
  instanceStatusTrend?: {
    avgTrend?: [ 
      {
        count?: int32(name='Count', example='10'),
        timePoint?: string(name='TimePoint', example='01:00'),
      }
    ](name='AvgTrend'),
    todayTrend?: [ 
      {
        count?: int32(name='Count', example='10'),
        timePoint?: string(name='TimePoint', example='01:00'),
      }
    ](name='TodayTrend'),
    yesterdayTrend?: [ 
      {
        count?: int32(name='Count', example='10'),
        timePoint?: string(name='TimePoint', example='01:00'),
      }
    ](name='YesterdayTrend'),
  }(name='InstanceStatusTrend'),
  requestId?: string(name='RequestId', example='952795279527ab****'),
}

model GetSuccessInstanceTrendResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSuccessInstanceTrendResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request GetSuccessInstanceTrendRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetSuccessInstanceTrendResponse
 */
// Deprecated
async function getSuccessInstanceTrendWithOptions(request: GetSuccessInstanceTrendRequest, runtime: Util.RuntimeOptions): GetSuccessInstanceTrendResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSuccessInstanceTrend',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request GetSuccessInstanceTrendRequest
  * @return GetSuccessInstanceTrendResponse
 */
// Deprecated
async function getSuccessInstanceTrend(request: GetSuccessInstanceTrendRequest): GetSuccessInstanceTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSuccessInstanceTrendWithOptions(request, runtime);
}

model GetTopicRequest {
  topicId?: long(name='TopicId', example='1234'),
}

model GetTopicResponseBody = {
  data?: {
    addTime?: long(name='AddTime', example='1553524393000'),
    alertTime?: long(name='AlertTime', example='1553524393000'),
    assigner?: string(name='Assigner', example='952795****'),
    baselineBuffer?: long(name='BaselineBuffer', example='3600'),
    baselineId?: long(name='BaselineId', example='1234'),
    baselineInGroupId?: int32(name='BaselineInGroupId', example='1'),
    baselineName?: string(name='BaselineName'),
    baselineStatus?: string(name='BaselineStatus', example='SAFE'),
    buffer?: long(name='Buffer', example='1200'),
    dealTime?: long(name='DealTime', example='1553524393000'),
    dealUser?: string(name='DealUser', example='952795****'),
    fixTime?: long(name='FixTime', example='1553524393000'),
    happenTime?: long(name='HappenTime', example='1553524393000'),
    instanceId?: long(name='InstanceId', example='12345'),
    nextAlertTime?: long(name='NextAlertTime', example='1553524393000'),
    nodeId?: long(name='NodeId', example='1234'),
    nodeName?: string(name='NodeName'),
    owner?: string(name='Owner', example='952795****'),
    projectId?: long(name='ProjectId', example='1234'),
    topicId?: long(name='TopicId', example='1234'),
    topicName?: string(name='TopicName'),
    topicStatus?: string(name='TopicStatus', example='FIXING'),
    topicType?: string(name='TopicType', example='ERROR'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFGH-IJKLMNOPQ'),
  success?: boolean(name='Success', example='true'),
}

model GetTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTopicResponseBody(name='body'),
}

/**
  * ****
  *
  * @param request GetTopicRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetTopicResponse
 */
async function getTopicWithOptions(request: GetTopicRequest, runtime: Util.RuntimeOptions): GetTopicResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.topicId)) {
    body['TopicId'] = request.topicId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTopic',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ****
  *
  * @param request GetTopicRequest
  * @return GetTopicResponse
 */
async function getTopic(request: GetTopicRequest): GetTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTopicWithOptions(request, runtime);
}

model GetTopicInfluenceRequest {
  topicId?: long(name='TopicId', example='1234'),
}

model GetTopicInfluenceResponseBody = {
  data?: {
    influences?: [ 
      {
        baselineId?: long(name='BaselineId', example='1234'),
        baselineName?: string(name='BaselineName'),
        bizdate?: long(name='Bizdate', example='1553356800000'),
        buffer?: long(name='Buffer', example='360'),
        inGroupId?: int32(name='InGroupId', example='1'),
        owner?: string(name='Owner', example='952795****'),
        priority?: int32(name='Priority', example='1'),
        projectId?: long(name='ProjectId', example='1234'),
        status?: string(name='Status', example='SAFE'),
      }
    ](name='Influences'),
    topicId?: long(name='TopicId', example='1234'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model GetTopicInfluenceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTopicInfluenceResponseBody(name='body'),
}

async function getTopicInfluenceWithOptions(request: GetTopicInfluenceRequest, runtime: Util.RuntimeOptions): GetTopicInfluenceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.topicId)) {
    body['TopicId'] = request.topicId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTopicInfluence',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTopicInfluence(request: GetTopicInfluenceRequest): GetTopicInfluenceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTopicInfluenceWithOptions(request, runtime);
}

model ImportDataSourcesRequest {
  dataSources?: string(name='DataSources', example='[{"SubType":"","DataSourceType":"mysql","EnvType":1,"Name":"mysql_dms2","Description":"aaa","Content":"{\\"database\\":\\"mysql_chengdu_old\\",\\"password\\":\\"***\\",\\"instanceName\\":\\"rm-2vcrckb37163g7l3w\\",\\"regionId\\":\\"cn-chengdu\\",\\"tag\\":\\"rds\\",\\"rdsOwnerId\\":\\"333\\",\\"username\\":\\"mysql_chengdu2\\"}"},{"SubType":"","DataSourceType":"mysql","EnvType":1,"Name":"mysql_dms2","Description":"aaa","Content":"{\\"database\\":\\"mysql_chengdu_old\\",\\"password\\":\\"***\\",\\"instanceName\\":\\"rm-2vcrckb37163g7l3w\\",\\"regionId\\":\\"cn-chengdu\\",\\"tag\\":\\"rds\\",\\"rdsOwnerId\\":\\"143\\",\\"username\\":\\"mysql_chengdu2\\"}"}]'),
  projectId?: long(name='ProjectId', example='10000'),
}

model ImportDataSourcesResponseBody = {
  data?: {
    message?: string(name='Message', example='Data source DEV XXX already exists'),
    status?: boolean(name='Status', example='true'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='0bc1411515937635973****'),
  success?: boolean(name='Success', example='true'),
}

model ImportDataSourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportDataSourcesResponseBody(name='body'),
}

async function importDataSourcesWithOptions(request: ImportDataSourcesRequest, runtime: Util.RuntimeOptions): ImportDataSourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataSources)) {
    query['DataSources'] = request.dataSources;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ImportDataSources',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function importDataSources(request: ImportDataSourcesRequest): ImportDataSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return importDataSourcesWithOptions(request, runtime);
}

model ListAlertMessagesRequest {
  alertMethods?: string(name='AlertMethods', example='SMS,MAIL,PHONE'),
  alertRuleTypes?: string(name='AlertRuleTypes', example='GLOBAL,USER_DEFINE,OTHER'),
  alertUser?: string(name='AlertUser', example='123456'),
  baselineId?: long(name='BaselineId', example='1234'),
  beginTime?: string(name='BeginTime', example='2020-04-02T00:00:00+0800'),
  endTime?: string(name='EndTime', example='2020-04-04T00:00:00+0800'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  remindId?: long(name='RemindId', example='9527'),
}

model ListAlertMessagesResponseBody = {
  data?: {
    alertMessages?: [ 
      {
        alertId?: long(name='AlertId', example='1234'),
        alertMessageStatus?: string(name='AlertMessageStatus', example='READY_TO_SEND'),
        alertMethod?: string(name='AlertMethod', example='SMS'),
        alertTime?: long(name='AlertTime', example='1553531401000'),
        alertUser?: string(name='AlertUser', example='9527952795****'),
        content?: string(name='Content'),
        instances?: [ 
          {
            instanceId?: long(name='InstanceId', example='12345'),
            nodeId?: long(name='NodeId', example='1234'),
            nodeName?: string(name='NodeName'),
            projectId?: long(name='ProjectId', example='1234'),
            status?: string(name='Status', example='NOT_RUN'),
          }
        ](name='Instances'),
        nodes?: [ 
          {
            nodeId?: long(name='NodeId', example='1234'),
            nodeName?: string(name='NodeName'),
            owner?: string(name='Owner', example='95279527952****'),
            projectId?: long(name='ProjectId', example='1234'),
          }
        ](name='Nodes'),
        remindId?: long(name='RemindId', example='1234'),
        remindName?: string(name='RemindName'),
        slaAlert?: {
          baselineId?: long(name='BaselineId', example='1234'),
          baselineName?: string(name='BaselineName'),
          baselineOwner?: string(name='BaselineOwner', example='952795279****'),
          bizdate?: long(name='Bizdate', example='1553443200000'),
          inGroupId?: int32(name='InGroupId', example='1'),
          projectId?: long(name='ProjectId', example='1234'),
          status?: string(name='Status', example='SAFE'),
        }(name='SlaAlert'),
        source?: string(name='Source', example='REMIND_ALERT'),
        topics?: [ 
          {
            instanceId?: long(name='InstanceId', example='12345'),
            nodeId?: long(name='NodeId', example='1234'),
            topicId?: long(name='TopicId', example='1234'),
            topicName?: string(name='TopicName'),
            topicOwner?: string(name='TopicOwner', example='9527952795****'),
            topicStatus?: string(name='TopicStatus', example='FIXING'),
          }
        ](name='Topics'),
      }
    ](name='AlertMessages'),
    pageNumber?: string(name='PageNumber', example='1'),
    pageSize?: string(name='PageSize', example='10'),
    totalCount?: string(name='TotalCount', example='100'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model ListAlertMessagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAlertMessagesResponseBody(name='body'),
}

async function listAlertMessagesWithOptions(request: ListAlertMessagesRequest, runtime: Util.RuntimeOptions): ListAlertMessagesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertMethods)) {
    body['AlertMethods'] = request.alertMethods;
  }
  if (!Util.isUnset(request.alertRuleTypes)) {
    body['AlertRuleTypes'] = request.alertRuleTypes;
  }
  if (!Util.isUnset(request.alertUser)) {
    body['AlertUser'] = request.alertUser;
  }
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.beginTime)) {
    body['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.remindId)) {
    body['RemindId'] = request.remindId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListAlertMessages',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAlertMessages(request: ListAlertMessagesRequest): ListAlertMessagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAlertMessagesWithOptions(request, runtime);
}

model ListBaselineConfigsRequest {
  baselineTypes?: string(name='BaselineTypes', example='DAILY,HOURLY'),
  owner?: string(name='Owner', example='95279527****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  priority?: string(name='Priority', example='1,3,5,7,8'),
  projectId?: long(name='ProjectId', example='1234'),
  searchText?: string(name='SearchText'),
  useflag?: boolean(name='Useflag', example='true'),
}

model ListBaselineConfigsResponseBody = {
  data?: {
    baselines?: [ 
      {
        baselineId?: long(name='BaselineId', example='1234'),
        baselineName?: string(name='BaselineName'),
        baselineType?: string(name='BaselineType', example='DAILY'),
        expHour?: int32(name='ExpHour', example='7'),
        expMinu?: int32(name='ExpMinu', example='30'),
        hourExpDetail?: string(name='HourExpDetail', example='{"1":"03:28","2":"04:28","3":"05:28","4":"06:28","5":"07:28","6":"08:28","7":"09:28","8":"10:28","9":"11:28","10":"12:28","11":"13:28","12":"14:28","13":"15:28","14":"16:28","15":"17:28","16":"18:28","17":"19:28","18":"20:28","19":"21:28","20":"22:28","21":"23:28","22":"24:28","23":"25:28","24":"26:28"}'),
        hourSlaDetail?: string(name='HourSlaDetail', example='{"1":"03:58","2":"04:58","3":"05:58","4":"06:58","5":"07:58","6":"08:58","7":"09:58","8":"10:58","9":"11:58","10":"12:58","11":"13:58","12":"14:58","13":"15:58","14":"16:58","15":"17:58","16":"18:58","17":"19:58","18":"20:58","19":"21:58","20":"22:58","21":"23:58","22":"24:58","23":"25:58","24":"26:58"}'),
        isDefault?: boolean(name='IsDefault', example='true'),
        owner?: string(name='Owner', example='952795****'),
        priority?: int32(name='Priority', example='1'),
        projectId?: long(name='ProjectId', example='9527'),
        slaHour?: int32(name='SlaHour', example='9'),
        slaMinu?: int32(name='SlaMinu', example='30'),
        useFlag?: boolean(name='UseFlag', example='true'),
      }
    ](name='Baselines'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model ListBaselineConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBaselineConfigsResponseBody(name='body'),
}

async function listBaselineConfigsWithOptions(request: ListBaselineConfigsRequest, runtime: Util.RuntimeOptions): ListBaselineConfigsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineTypes)) {
    body['BaselineTypes'] = request.baselineTypes;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.searchText)) {
    body['SearchText'] = request.searchText;
  }
  if (!Util.isUnset(request.useflag)) {
    body['Useflag'] = request.useflag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListBaselineConfigs',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBaselineConfigs(request: ListBaselineConfigsRequest): ListBaselineConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBaselineConfigsWithOptions(request, runtime);
}

model ListBaselineStatusesRequest {
  baselineTypes?: string(name='BaselineTypes', example='DAILY,HOURLY'),
  bizdate?: string(name='Bizdate', example='2020-07-07T00:00:00+0800'),
  finishStatus?: string(name='FinishStatus', example='FINISH,UNFINISH'),
  owner?: string(name='Owner', example='9527952795****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  priority?: string(name='Priority', example='1,3,5,7,8'),
  searchText?: string(name='SearchText'),
  status?: string(name='Status', example='SAFE,DANGROUS,OVER'),
  topicId?: long(name='TopicId', example='1234'),
}

model ListBaselineStatusesResponseBody = {
  data?: {
    baselineStatuses?: [ 
      {
        baselineId?: long(name='BaselineId', example='1234'),
        baselineName?: string(name='BaselineName'),
        bizdate?: long(name='Bizdate', example='1553443200000'),
        buffer?: long(name='Buffer', example='1800'),
        endCast?: long(name='EndCast', example='1553531400000'),
        expTime?: long(name='ExpTime', example='1553531400000'),
        finishStatus?: string(name='FinishStatus', example='UNFINISH'),
        finishTime?: long(name='FinishTime', example='1553531400000'),
        inGroupId?: int32(name='InGroupId', example='1'),
        owner?: string(name='Owner', example='9527952795****'),
        priority?: int32(name='Priority', example='1'),
        projectId?: long(name='ProjectId', example='1234'),
        slaTime?: long(name='SlaTime', example='1553531400000'),
        status?: string(name='Status', example='SAFE'),
      }
    ](name='BaselineStatuses'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model ListBaselineStatusesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBaselineStatusesResponseBody(name='body'),
}

async function listBaselineStatusesWithOptions(request: ListBaselineStatusesRequest, runtime: Util.RuntimeOptions): ListBaselineStatusesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineTypes)) {
    body['BaselineTypes'] = request.baselineTypes;
  }
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.finishStatus)) {
    body['FinishStatus'] = request.finishStatus;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.searchText)) {
    body['SearchText'] = request.searchText;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.topicId)) {
    body['TopicId'] = request.topicId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListBaselineStatuses',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBaselineStatuses(request: ListBaselineStatusesRequest): ListBaselineStatusesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBaselineStatusesWithOptions(request, runtime);
}

model ListBaselinesRequest {
  baselineTypes?: string(name='BaselineTypes'),
  enable?: boolean(name='Enable'),
  owner?: string(name='Owner'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  priority?: string(name='Priority'),
  projectId?: long(name='ProjectId'),
  searchText?: string(name='SearchText'),
}

model ListBaselinesResponseBody = {
  data?: {
    baselines?: [ 
      {
        alertEnabled?: boolean(name='AlertEnabled'),
        alertMarginThreshold?: int32(name='AlertMarginThreshold'),
        baselineId?: long(name='BaselineId'),
        baselineName?: string(name='BaselineName'),
        baselineType?: string(name='BaselineType'),
        enabled?: boolean(name='Enabled'),
        overTimeSettings?: [ 
          {
            cycle?: int32(name='Cycle'),
            time?: string(name='Time'),
          }
        ](name='OverTimeSettings'),
        owner?: string(name='Owner'),
        priority?: int32(name='Priority'),
        projectId?: long(name='ProjectId'),
      }
    ](name='Baselines'),
    pageNumber?: string(name='PageNumber'),
    pageSize?: string(name='PageSize'),
    totalCount?: string(name='TotalCount'),
  }(name='Data'),
  dynamicErrorCode?: string(name='DynamicErrorCode'),
  dynamicErrorMessage?: string(name='DynamicErrorMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListBaselinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBaselinesResponseBody(name='body'),
}

async function listBaselinesWithOptions(request: ListBaselinesRequest, runtime: Util.RuntimeOptions): ListBaselinesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineTypes)) {
    body['BaselineTypes'] = request.baselineTypes;
  }
  if (!Util.isUnset(request.enable)) {
    body['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.searchText)) {
    body['SearchText'] = request.searchText;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListBaselines',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBaselines(request: ListBaselinesRequest): ListBaselinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBaselinesWithOptions(request, runtime);
}

model ListBusinessRequest {
  keyword?: string(name='Keyword', example='my'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model ListBusinessResponseBody = {
  data?: {
    business?: [ 
      {
        businessId?: long(name='BusinessId', example='3000001'),
        businessName?: string(name='BusinessName'),
        description?: string(name='Description'),
        owner?: string(name='Owner', example='34824327****'),
        projectId?: long(name='ProjectId', example='10000'),
        useType?: string(name='UseType', example='NORMAL'),
      }
    ](name='Business'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='13'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model ListBusinessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBusinessResponseBody(name='body'),
}

async function listBusinessWithOptions(request: ListBusinessRequest, runtime: Util.RuntimeOptions): ListBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListBusiness',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBusiness(request: ListBusinessRequest): ListBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBusinessWithOptions(request, runtime);
}

model ListCalcEnginesRequest {
  calcEngineType?: string(name='CalcEngineType', example='ODPS'),
  envType?: string(name='EnvType', example='PRD'),
  name?: string(name='Name', example='abc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='27'),
}

model ListCalcEnginesResponseBody = {
  data?: {
    calcEngines?: [ 
      {
        bindingProjectId?: int32(name='BindingProjectId', example='27'),
        bindingProjectName?: string(name='BindingProjectName', example='abc'),
        calcEngineType?: string(name='CalcEngineType', example='ODPS'),
        dwRegion?: string(name='DwRegion', example='cn-zhangjiakou'),
        engineId?: int32(name='EngineId', example='35'),
        engineInfo?: map[string]any(name='EngineInfo', example='{"pubEndpoint":"http://service.cn.maxcompute.aliyun.com/api","endpoint":"http://service.cn.maxcompute.aliyun-inc.com/api","resourceGroupType":"ODPS","resourceGroupId":"361826516****","vpcEndpoint":"http://service.cn.maxcompute.aliyun-inc.com/api","projectName":"onefall_test_zjk","taskSameAsOwner":"true"}'),
        envType?: string(name='EnvType', example='PRD'),
        gmtCreate?: string(name='GmtCreate', example='Oct 10, 2019 3:42:44 PM'),
        isDefault?: boolean(name='IsDefault', example='true'),
        name?: string(name='Name', example='abc'),
        region?: string(name='Region', example='cn-zhangjiakou'),
        taskAuthType?: string(name='TaskAuthType', example='PROJECT'),
        tenantId?: long(name='TenantId', example='1234567'),
      }
    ](name='CalcEngines'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1ec92159376****'),
  success?: boolean(name='Success', example='true'),
}

model ListCalcEnginesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCalcEnginesResponseBody(name='body'),
}

async function listCalcEnginesWithOptions(request: ListCalcEnginesRequest, runtime: Util.RuntimeOptions): ListCalcEnginesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.calcEngineType)) {
    query['CalcEngineType'] = request.calcEngineType;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCalcEngines',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCalcEngines(request: ListCalcEnginesRequest): ListCalcEnginesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCalcEnginesWithOptions(request, runtime);
}

model ListConnectionsRequest {
  connectionType?: string(name='ConnectionType', example='rds'),
  envType?: int32(name='EnvType', example='1'),
  name?: string(name='Name', example='abc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='76086'),
  status?: string(name='Status', example='1'),
  subType?: string(name='SubType', example='mysql'),
}

model ListConnectionsResponseBody = {
  data?: {
    connections?: [ 
      {
        bindingCalcEngineId?: int32(name='BindingCalcEngineId', example='123'),
        connectStatus?: int32(name='ConnectStatus', example='1'),
        connectionType?: string(name='ConnectionType', example='mysql'),
        content?: string(name='Content', example='{\\"database\\":\\"xxx\\",\\"instanceName\\":\\"xxx\\",\\"password\\":\\"xxx\\",\\"rdsOwnerId\\":\\"xxx\\",\\"tag\\":\\"rds\\",\\"username\\":\\"xxx\\"}'),
        defaultEngine?: boolean(name='DefaultEngine', example='false'),
        description?: string(name='Description', example='a connection'),
        envType?: int32(name='EnvType', example='1'),
        gmtCreate?: string(name='GmtCreate', example='Mar 17, 2021 4:09:32 PM'),
        gmtModified?: string(name='GmtModified', example='Mar 17, 2021 4:09:32 PM'),
        id?: int32(name='Id', example='1'),
        name?: string(name='Name', example='abc'),
        operator?: string(name='Operator', example='193543050****'),
        projectId?: int32(name='ProjectId', example='123'),
        sequence?: int32(name='Sequence', example='300'),
        shared?: boolean(name='Shared', example='false'),
        status?: int32(name='Status', example='1'),
        subType?: string(name='SubType', example='mysql'),
        tenantId?: long(name='TenantId', example='1234567'),
      }
    ](name='Connections'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='3'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc14115159376359****'),
  success?: boolean(name='Success', example='true'),
}

model ListConnectionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListConnectionsResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ListConnectionsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListConnectionsResponse
 */
// Deprecated
async function listConnectionsWithOptions(request: ListConnectionsRequest, runtime: Util.RuntimeOptions): ListConnectionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListConnections',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ListConnectionsRequest
  * @return ListConnectionsResponse
 */
// Deprecated
async function listConnections(request: ListConnectionsRequest): ListConnectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConnectionsWithOptions(request, runtime);
}

model ListDIProjectConfigRequest {
  destinationType?: string(name='DestinationType', example='elasticsearch'),
  projectId?: long(name='ProjectId', example='1000'),
  sourceType?: string(name='SourceType', example='mysql'),
}

model ListDIProjectConfigResponseBody = {
  data?: {
    config?: string(name='Config', example='{"RENAMECOLUMN":"WARNING","DROPTABLE":"WARNING","CREATETABLE":"WARNING","MODIFYCOLUMN":"WARNING","TRUNCATETABLE":"WARNING","DROPCOLUMN":"WARNING","ADDCOLUMN":"WARNING","RENAMETABLE":"WARNING"}'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', example='true'),
}

model ListDIProjectConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDIProjectConfigResponseBody(name='body'),
}

async function listDIProjectConfigWithOptions(request: ListDIProjectConfigRequest, runtime: Util.RuntimeOptions): ListDIProjectConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDIProjectConfig',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDIProjectConfig(request: ListDIProjectConfigRequest): ListDIProjectConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDIProjectConfigWithOptions(request, runtime);
}

model ListDagsRequest {
  opSeq?: long(name='OpSeq', example='123'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
}

model ListDagsResponseBody = {
  data?: {
    dags?: [ 
      {
        bizdate?: long(name='Bizdate', example='1605052800000'),
        createTime?: long(name='CreateTime', example='1605052800000'),
        createUser?: string(name='CreateUser', example='1736629400048545'),
        dagId?: long(name='DagId', description='DagId。', example='351249682'),
        finishTime?: long(name='FinishTime', example='1605052800000'),
        gmtdate?: long(name='Gmtdate', description='Gmtdate。', example='1605052800000'),
        modifyTime?: long(name='ModifyTime', example='1605052800000'),
        name?: string(name='Name', example='test_dag'),
        opSeq?: long(name='OpSeq', example='123'),
        projectId?: long(name='ProjectId', example='112345'),
        startTime?: long(name='StartTime', example='1605052800000'),
        status?: string(name='Status', example='FAILURE'),
        type?: string(name='Type', example='MANUAL_FLOW'),
      }
    ](name='Dags'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='7782a299-b291-4fee-8424-cf8058efa8e8'),
  success?: boolean(name='Success', example='true'),
}

model ListDagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDagsResponseBody(name='body'),
}

async function listDagsWithOptions(request: ListDagsRequest, runtime: Util.RuntimeOptions): ListDagsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.opSeq)) {
    body['OpSeq'] = request.opSeq;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDags',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDags(request: ListDagsRequest): ListDagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDagsWithOptions(request, runtime);
}

model ListDataServiceApiAuthoritiesRequest {
  apiNameKeyword?: string(name='ApiNameKeyword'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='10000'),
  tenantId?: long(name='TenantId', example='10001'),
}

model ListDataServiceApiAuthoritiesResponseBody = {
  data?: {
    apiAuthorizationList?: [ 
      {
        apiId?: long(name='ApiId', example='10002'),
        apiName?: string(name='ApiName'),
        apiPath?: string(name='ApiPath', example='/test/1'),
        apiStatus?: int32(name='ApiStatus', example='0'),
        authorizationRecords?: [ 
          {
            createdTime?: string(name='CreatedTime', example='2020-06-23T00:21:01+0800'),
            creatorId?: string(name='CreatorId', example='12345'),
            endTime?: string(name='EndTime', example='2020-06-24T00:21:01+0800'),
            projectId?: long(name='ProjectId', example='10004'),
          }
        ](name='AuthorizationRecords'),
        createdTime?: string(name='CreatedTime', example='2020-06-23T00:21:01+0800'),
        creatorId?: string(name='CreatorId', example='12345'),
        groupId?: string(name='GroupId', example='ab123'),
        modifiedTime?: string(name='ModifiedTime', example='2020-06-23T00:21:01+0800'),
        projectId?: long(name='ProjectId', example='10000'),
        tenantId?: long(name='TenantId', example='10001'),
      }
    ](name='ApiAuthorizationList'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='0'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model ListDataServiceApiAuthoritiesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataServiceApiAuthoritiesResponseBody(name='body'),
}

async function listDataServiceApiAuthoritiesWithOptions(request: ListDataServiceApiAuthoritiesRequest, runtime: Util.RuntimeOptions): ListDataServiceApiAuthoritiesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiNameKeyword)) {
    body['ApiNameKeyword'] = request.apiNameKeyword;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServiceApiAuthorities',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataServiceApiAuthorities(request: ListDataServiceApiAuthoritiesRequest): ListDataServiceApiAuthoritiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServiceApiAuthoritiesWithOptions(request, runtime);
}

model ListDataServiceApiTestRequest {
  apiId?: long(name='ApiId', example='12345'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListDataServiceApiTestResponseBody = {
  data?: [ 
    {
      apiId?: long(name='ApiId', example='2343'),
      costTime?: int32(name='CostTime', example='10'),
      createTime?: long(name='CreateTime', example='1651824913000'),
      paramMap?: string(name='ParamMap', example='{"name":"test"}'),
      retCode?: long(name='RetCode', example='0'),
      retResult?: string(name='RetResult', example='{"id":2}'),
      status?: string(name='Status', example='FINISHED'),
      testId?: long(name='TestId', example='123'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='ESDAFWEA'),
}

model ListDataServiceApiTestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataServiceApiTestResponseBody(name='body'),
}

async function listDataServiceApiTestWithOptions(request: ListDataServiceApiTestRequest, runtime: Util.RuntimeOptions): ListDataServiceApiTestResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServiceApiTest',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataServiceApiTest(request: ListDataServiceApiTestRequest): ListDataServiceApiTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServiceApiTestWithOptions(request, runtime);
}

model ListDataServiceApisRequest {
  apiNameKeyword?: string(name='ApiNameKeyword'),
  apiPathKeyword?: string(name='ApiPathKeyword', example='/test/'),
  creatorId?: string(name='CreatorId', example='12345'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='10000'),
  tenantId?: long(name='TenantId', example='10001'),
}

model ListDataServiceApisResponseBody = {
  data?: {
    apis?: [ 
      {
        apiId?: long(name='ApiId', example='10002'),
        apiMode?: int32(name='ApiMode', example='0'),
        apiName?: string(name='ApiName'),
        apiPath?: string(name='ApiPath', example='/test/1'),
        createdTime?: string(name='CreatedTime', example='2020-06-23T00:21:01+0800'),
        creatorId?: string(name='CreatorId', example='1234567'),
        description?: string(name='Description'),
        folderId?: long(name='FolderId', example='0'),
        groupId?: string(name='GroupId', example='abcde123456789'),
        modifiedTime?: string(name='ModifiedTime', example='2020-06-23T00:21:01+0800'),
        operatorId?: string(name='OperatorId', example='2345678'),
        projectId?: long(name='ProjectId', example='10000'),
        protocols?: [ int32 ](name='Protocols'),
        registrationDetails?: {
          failedResultSample?: string(name='FailedResultSample', example='{"success": false}'),
          registrationErrorCodes?: [ 
            {
              errorCode?: string(name='ErrorCode', example='1001'),
              errorMessage?: string(name='ErrorMessage', example='fail to call'),
              errorSolution?: string(name='ErrorSolution', example='retry'),
            }
          ](name='RegistrationErrorCodes'),
          registrationRequestParameters?: [ 
            {
              columnName?: string(name='ColumnName', example='column1'),
              defaultValue?: string(name='DefaultValue', example='default1'),
              exampleValue?: string(name='ExampleValue', example='example1'),
              isRequiredParameter?: boolean(name='IsRequiredParameter', example='true'),
              parameterDataType?: int32(name='ParameterDataType', example='0'),
              parameterDescription?: string(name='ParameterDescription', example='description1'),
              parameterName?: string(name='ParameterName', example='name1'),
              parameterOperator?: int32(name='ParameterOperator', example='0'),
              parameterPosition?: int32(name='ParameterPosition', example='0'),
            }
          ](name='RegistrationRequestParameters'),
          serviceContentType?: int32(name='ServiceContentType', example='0'),
          serviceHost?: string(name='ServiceHost', example='http://example.aliyundoc.com'),
          servicePath?: string(name='ServicePath', example='/index'),
          serviceRequestBodyDescription?: string(name='ServiceRequestBodyDescription', example='{"abc":1}'),
          successfulResultSample?: string(name='SuccessfulResultSample', example='{"success": true}'),
        }(name='RegistrationDetails'),
        requestMethod?: int32(name='RequestMethod', example='0'),
        responseContentType?: int32(name='ResponseContentType', example='0'),
        scriptDetails?: {
          isPagedResponse?: boolean(name='IsPagedResponse', example='true'),
          script?: string(name='Script', example='select a from t'),
          scriptConnection?: {
            connectionId?: long(name='ConnectionId', example='123'),
            tableName?: string(name='TableName', example='t'),
          }(name='ScriptConnection'),
          scriptRequestParameters?: [ 
            {
              columnName?: string(name='ColumnName', example='column1'),
              defaultValue?: string(name='DefaultValue', example='default1'),
              exampleValue?: string(name='ExampleValue', example='example1'),
              isRequiredParameter?: boolean(name='IsRequiredParameter', example='true'),
              parameterDataType?: int32(name='ParameterDataType', example='0'),
              parameterDescription?: string(name='ParameterDescription', example='description1'),
              parameterName?: string(name='ParameterName', example='param1'),
              parameterOperator?: int32(name='ParameterOperator', example='0'),
              parameterPosition?: int32(name='ParameterPosition', example='0'),
            }
          ](name='ScriptRequestParameters'),
          scriptResponseParameters?: [ 
            {
              columnName?: string(name='ColumnName', example='column2'),
              exampleValue?: string(name='ExampleValue', example='example2'),
              parameterDataType?: int32(name='ParameterDataType', example='0'),
              parameterDescription?: string(name='ParameterDescription', example='description2'),
              parameterName?: string(name='ParameterName', example='param2'),
            }
          ](name='ScriptResponseParameters'),
        }(name='ScriptDetails'),
        status?: int32(name='Status', example='0'),
        tenantId?: long(name='TenantId', example='10000'),
        timeout?: int32(name='Timeout', example='10000'),
        visibleRange?: int32(name='VisibleRange', example='0'),
        wizardDetails?: {
          isPagedResponse?: boolean(name='IsPagedResponse', example='true'),
          wizardConnection?: {
            connectionId?: long(name='ConnectionId', example='123'),
            tableName?: string(name='TableName', example='t'),
          }(name='WizardConnection'),
          wizardRequestParameters?: [ 
            {
              columnName?: string(name='ColumnName', example='column1'),
              defaultValue?: string(name='DefaultValue', example='default1'),
              exampleValue?: string(name='ExampleValue', example='example1'),
              isRequiredParameter?: boolean(name='IsRequiredParameter', example='true'),
              parameterDataType?: int32(name='ParameterDataType', example='0'),
              parameterDescription?: string(name='ParameterDescription', example='description1'),
              parameterName?: string(name='ParameterName', example='param1'),
              parameterOperator?: int32(name='ParameterOperator', example='0'),
              parameterPosition?: int32(name='ParameterPosition', example='0'),
            }
          ](name='WizardRequestParameters'),
          wizardResponseParameters?: [ 
            {
              columnName?: string(name='ColumnName', example='column2'),
              exampleValue?: string(name='ExampleValue', example='example2'),
              parameterDataType?: int32(name='ParameterDataType', example='0'),
              parameterDescription?: string(name='ParameterDescription', example='description2'),
              parameterName?: string(name='ParameterName', example='param2'),
            }
          ](name='WizardResponseParameters'),
        }(name='WizardDetails'),
      }
    ](name='Apis'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model ListDataServiceApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataServiceApisResponseBody(name='body'),
}

async function listDataServiceApisWithOptions(request: ListDataServiceApisRequest, runtime: Util.RuntimeOptions): ListDataServiceApisResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiNameKeyword)) {
    body['ApiNameKeyword'] = request.apiNameKeyword;
  }
  if (!Util.isUnset(request.apiPathKeyword)) {
    body['ApiPathKeyword'] = request.apiPathKeyword;
  }
  if (!Util.isUnset(request.creatorId)) {
    body['CreatorId'] = request.creatorId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServiceApis',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataServiceApis(request: ListDataServiceApisRequest): ListDataServiceApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServiceApisWithOptions(request, runtime);
}

model ListDataServiceApplicationsRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectIdList?: string(name='ProjectIdList', example='10000,100001'),
  tenantId?: long(name='TenantId', example='100002'),
}

model ListDataServiceApplicationsResponseBody = {
  data?: {
    applications?: [ 
      {
        applicationId?: long(name='ApplicationId', example='20000'),
        applicationName?: string(name='ApplicationName'),
        projectId?: long(name='ProjectId', example='10000'),
      }
    ](name='Applications'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='0'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG***'),
  success?: boolean(name='Success', example='true'),
}

model ListDataServiceApplicationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataServiceApplicationsResponseBody(name='body'),
}

async function listDataServiceApplicationsWithOptions(request: ListDataServiceApplicationsRequest, runtime: Util.RuntimeOptions): ListDataServiceApplicationsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectIdList)) {
    body['ProjectIdList'] = request.projectIdList;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServiceApplications',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataServiceApplications(request: ListDataServiceApplicationsRequest): ListDataServiceApplicationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServiceApplicationsWithOptions(request, runtime);
}

model ListDataServiceAuthorizedApisRequest {
  apiNameKeyword?: string(name='ApiNameKeyword'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='10000'),
  tenantId?: long(name='TenantId', example='10001'),
}

model ListDataServiceAuthorizedApisResponseBody = {
  data?: {
    apiAuthorizedList?: [ 
      {
        apiId?: long(name='ApiId', example='10002'),
        apiName?: string(name='ApiName'),
        apiPath?: string(name='ApiPath', example='/test/1'),
        apiStatus?: int32(name='ApiStatus', example='0'),
        createdTime?: string(name='CreatedTime', example='2020-06-23T00:21:01+0800'),
        creatorId?: string(name='CreatorId', example='12345'),
        grantCreatedTime?: string(name='GrantCreatedTime', example='2020-06-23T00:21:01+0800'),
        grantEndTime?: string(name='GrantEndTime', example='2020-06-24T00:21:01+0800'),
        grantOperatorId?: string(name='GrantOperatorId', example='23456'),
        groupId?: string(name='GroupId', example='abcde123456789'),
        modifiedTime?: string(name='ModifiedTime', example='2020-06-23T00:21:01+0800'),
        projectId?: long(name='ProjectId', example='10000'),
        tenantId?: long(name='TenantId', example='10001'),
      }
    ](name='ApiAuthorizedList'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model ListDataServiceAuthorizedApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataServiceAuthorizedApisResponseBody(name='body'),
}

async function listDataServiceAuthorizedApisWithOptions(request: ListDataServiceAuthorizedApisRequest, runtime: Util.RuntimeOptions): ListDataServiceAuthorizedApisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiNameKeyword)) {
    body['ApiNameKeyword'] = request.apiNameKeyword;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServiceAuthorizedApis',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataServiceAuthorizedApis(request: ListDataServiceAuthorizedApisRequest): ListDataServiceAuthorizedApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServiceAuthorizedApisWithOptions(request, runtime);
}

model ListDataServiceFoldersRequest {
  folderNameKeyword?: string(name='FolderNameKeyword'),
  groupId?: string(name='GroupId', example='ds_123abc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='10001'),
  tenantId?: long(name='TenantId', example='10002'),
}

model ListDataServiceFoldersResponseBody = {
  folderPagingResult?: {
    folders?: [ 
      {
        createdTime?: string(name='CreatedTime', example='2020-09-24T18:37:51+0800'),
        folderId?: long(name='FolderId', example='11'),
        folderName?: string(name='FolderName', example='test1'),
        groupId?: string(name='GroupId', example='ds_1234'),
        modifiedTime?: string(name='ModifiedTime', example='2020-09-24T18:37:51+0800'),
        parentId?: long(name='ParentId', example='0'),
        projectId?: long(name='ProjectId', example='10001'),
        tenantId?: long(name='TenantId', example='10002'),
      }
    ](name='Folders'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='FolderPagingResult'),
  requestId?: string(name='RequestId', example='0000-ABCD-EF****'),
}

model ListDataServiceFoldersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataServiceFoldersResponseBody(name='body'),
}

async function listDataServiceFoldersWithOptions(request: ListDataServiceFoldersRequest, runtime: Util.RuntimeOptions): ListDataServiceFoldersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderNameKeyword)) {
    body['FolderNameKeyword'] = request.folderNameKeyword;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServiceFolders',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataServiceFolders(request: ListDataServiceFoldersRequest): ListDataServiceFoldersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServiceFoldersWithOptions(request, runtime);
}

model ListDataServiceGroupsRequest {
  groupNameKeyword?: string(name='GroupNameKeyword'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='10000'),
  tenantId?: long(name='TenantId', example='10001'),
}

model ListDataServiceGroupsResponseBody = {
  groupPagingResult?: {
    groups?: [ 
      {
        apiGatewayGroupId?: string(name='ApiGatewayGroupId', example='100abc'),
        createdTime?: string(name='CreatedTime', example='2020-09-24T18:37:51+0800'),
        creatorId?: string(name='CreatorId', example='10001'),
        description?: string(name='Description'),
        groupId?: string(name='GroupId', example='ds_123abc'),
        groupName?: string(name='GroupName'),
        modifiedTime?: string(name='ModifiedTime', example='2020-09-24T18:37:51+0800'),
        projectId?: long(name='ProjectId', example='10002'),
        tenantId?: long(name='TenantId', example='10003'),
      }
    ](name='Groups'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='GroupPagingResult'),
  requestId?: string(name='RequestId', example='0000-ABCD-EF****'),
}

model ListDataServiceGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataServiceGroupsResponseBody(name='body'),
}

async function listDataServiceGroupsWithOptions(request: ListDataServiceGroupsRequest, runtime: Util.RuntimeOptions): ListDataServiceGroupsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupNameKeyword)) {
    body['GroupNameKeyword'] = request.groupNameKeyword;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServiceGroups',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataServiceGroups(request: ListDataServiceGroupsRequest): ListDataServiceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServiceGroupsWithOptions(request, runtime);
}

model ListDataServicePublishedApisRequest {
  apiNameKeyword?: string(name='ApiNameKeyword'),
  apiPathKeyword?: string(name='ApiPathKeyword', example='/test/'),
  creatorId?: string(name='CreatorId', example='12345'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='10000'),
  tenantId?: long(name='TenantId', example='10001'),
}

model ListDataServicePublishedApisResponseBody = {
  data?: {
    apis?: [ 
      {
        apiId?: long(name='ApiId', example='10002'),
        apiMode?: int32(name='ApiMode', example='0'),
        apiName?: string(name='ApiName'),
        apiPath?: string(name='ApiPath', example='/test/1'),
        createdTime?: string(name='CreatedTime', example='2020-06-23T00:21:01+0800'),
        creatorId?: string(name='CreatorId', example='1234567'),
        description?: string(name='Description'),
        groupId?: string(name='GroupId', example='ab123'),
        modifiedTime?: string(name='ModifiedTime', example='2020-06-23T00:21:01+0800'),
        operatorId?: string(name='OperatorId', example='2345678'),
        projectId?: long(name='ProjectId', example='10000'),
        protocols?: [ int32 ](name='Protocols'),
        registrationDetails?: {
          failedResultSample?: string(name='FailedResultSample', example='{"success": false}'),
          registrationErrorCodes?: [ 
            {
              errorCode?: string(name='ErrorCode', example='1001'),
              errorMessage?: string(name='ErrorMessage', example='fail to call'),
              errorSolution?: string(name='ErrorSolution', example='retry'),
            }
          ](name='RegistrationErrorCodes'),
          registrationRequestParameters?: [ 
            {
              defaultValue?: string(name='DefaultValue', example='default1'),
              exampleValue?: string(name='ExampleValue', example='example1'),
              isRequiredParameter?: boolean(name='IsRequiredParameter', example='true'),
              parameterDataType?: int32(name='ParameterDataType', example='0'),
              parameterDescription?: string(name='ParameterDescription', example='description1'),
              parameterName?: string(name='ParameterName', example='name1'),
              parameterOperator?: int32(name='ParameterOperator', example='0'),
              parameterPosition?: int32(name='ParameterPosition', example='0'),
            }
          ](name='RegistrationRequestParameters'),
          serviceContentType?: int32(name='ServiceContentType', example='0'),
          serviceHost?: string(name='ServiceHost', example='http://example.aliyundoc.com'),
          servicePath?: string(name='ServicePath', example='/index'),
          serviceRequestBodyDescription?: string(name='ServiceRequestBodyDescription', example='{"abc":1}'),
          successfulResultSample?: string(name='SuccessfulResultSample', example='{"success": true}'),
        }(name='RegistrationDetails'),
        requestMethod?: int32(name='RequestMethod', example='0'),
        responseContentType?: int32(name='ResponseContentType', example='0'),
        scriptDetails?: {
          failedResultSample?: string(name='FailedResultSample', example='{"success": false}'),
          isPagedResponse?: boolean(name='IsPagedResponse', example='true'),
          script?: string(name='Script', example='select a from t'),
          scriptConnection?: {
            connectionId?: long(name='ConnectionId', example='123'),
            tableName?: string(name='TableName', example='t'),
          }(name='ScriptConnection'),
          scriptErrorCodes?: [ 
            {
              errorCode?: string(name='ErrorCode', example='1001'),
              errorMessage?: string(name='ErrorMessage', example='fail to call'),
              errorSolution?: string(name='ErrorSolution', example='retry'),
            }
          ](name='ScriptErrorCodes'),
          scriptRequestParameters?: [ 
            {
              defaultValue?: string(name='DefaultValue', example='default1'),
              exampleValue?: string(name='ExampleValue', example='example1'),
              isRequiredParameter?: boolean(name='IsRequiredParameter', example='true'),
              parameterDataType?: int32(name='ParameterDataType', example='0'),
              parameterDescription?: string(name='ParameterDescription', example='description1'),
              parameterName?: string(name='ParameterName', example='param1'),
              parameterOperator?: int32(name='ParameterOperator', example='0'),
              parameterPosition?: int32(name='ParameterPosition', example='0'),
            }
          ](name='ScriptRequestParameters'),
          scriptResponseParameters?: [ 
            {
              exampleValue?: string(name='ExampleValue', example='example2'),
              parameterDataType?: int32(name='ParameterDataType', example='0'),
              parameterDescription?: string(name='ParameterDescription', example='description2'),
              parameterName?: string(name='ParameterName', example='param2'),
            }
          ](name='ScriptResponseParameters'),
          successfulResultSample?: string(name='SuccessfulResultSample', example='{"success": true}'),
        }(name='ScriptDetails'),
        status?: int32(name='Status', example='1'),
        tenantId?: long(name='TenantId', example='10001'),
        timeout?: int32(name='Timeout', example='10000'),
        visibleRange?: int32(name='VisibleRange', example='0'),
        wizardDetails?: {
          failedResultSample?: string(name='FailedResultSample', example='{"success": false}'),
          isPagedResponse?: boolean(name='IsPagedResponse', example='true'),
          successfulResultSample?: string(name='SuccessfulResultSample', example='{"success": true}'),
          wizardConnection?: {
            connectionId?: long(name='ConnectionId', example='123'),
            tableName?: string(name='TableName', example='t'),
          }(name='WizardConnection'),
          wizardErrorCodes?: [ 
            {
              errorCode?: string(name='ErrorCode', example='1001'),
              errorMessage?: string(name='ErrorMessage', example='fail to call'),
              errorSolution?: string(name='ErrorSolution', example='retry'),
            }
          ](name='WizardErrorCodes'),
          wizardRequestParameters?: [ 
            {
              defaultValue?: string(name='DefaultValue', example='default1'),
              exampleValue?: string(name='ExampleValue', example='example1'),
              isRequiredParameter?: boolean(name='IsRequiredParameter', example='true'),
              parameterDataType?: int32(name='ParameterDataType', example='0'),
              parameterDescription?: string(name='ParameterDescription', example='description1'),
              parameterName?: string(name='ParameterName', example='param1'),
              parameterOperator?: int32(name='ParameterOperator', example='0'),
              parameterPosition?: int32(name='ParameterPosition', example='0'),
            }
          ](name='WizardRequestParameters'),
          wizardResponseParameters?: [ 
            {
              exampleValue?: string(name='ExampleValue', example='example2'),
              parameterDataType?: int32(name='ParameterDataType', example='0'),
              parameterDescription?: string(name='ParameterDescription', example='description2'),
              parameterName?: string(name='ParameterName', example='param2'),
            }
          ](name='WizardResponseParameters'),
        }(name='WizardDetails'),
      }
    ](name='Apis'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model ListDataServicePublishedApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataServicePublishedApisResponseBody(name='body'),
}

async function listDataServicePublishedApisWithOptions(request: ListDataServicePublishedApisRequest, runtime: Util.RuntimeOptions): ListDataServicePublishedApisResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiNameKeyword)) {
    body['ApiNameKeyword'] = request.apiNameKeyword;
  }
  if (!Util.isUnset(request.apiPathKeyword)) {
    body['ApiPathKeyword'] = request.apiPathKeyword;
  }
  if (!Util.isUnset(request.creatorId)) {
    body['CreatorId'] = request.creatorId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServicePublishedApis',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataServicePublishedApis(request: ListDataServicePublishedApisRequest): ListDataServicePublishedApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServicePublishedApisWithOptions(request, runtime);
}

model ListDataSourcesRequest {
  dataSourceType?: string(name='DataSourceType', example='rds'),
  envType?: int32(name='EnvType', example='1'),
  name?: string(name='Name', example='test'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='1'),
  status?: string(name='Status', example='ENABLED'),
  subType?: string(name='SubType', example='mysql'),
}

model ListDataSourcesResponseBody = {
  data?: {
    dataSources?: [ 
      {
        bindingCalcEngineId?: int32(name='BindingCalcEngineId', example='123'),
        connectStatus?: int32(name='ConnectStatus', example='1'),
        content?: string(name='Content', example='{"pubEndpoint":"http://service.cn.maxcompute.aliyun.com/api","accessId":"TMP.3KecGjvzy3i8MYfn2BGHgF7EHGyBFZcHm7GgngrABVRyvvKQrfF5kskR36xP361C3dqwbGo7SGYptAeGyiTwHXqLaBUvYC","securityToken":null,"endpoint":"http://service.cn.maxcompute.aliyun-inc.com/api","accessKey":"***","name":"PRE_PROJECT_A_engine","project":"PRE_PROJECT_A","vpcEndpoint":"http://service.cn.maxcompute.aliyun-inc.com/api","region":"cn-shanghai","authType":"2"}'),
        dataSourceType?: string(name='DataSourceType', example='rds'),
        defaultEngine?: boolean(name='DefaultEngine', example='false'),
        description?: string(name='Description', example='a connection'),
        envType?: int32(name='EnvType', example='1'),
        gmtCreate?: string(name='GmtCreate', example='Mar 17, 2021 4:09:32 PM'),
        gmtModified?: string(name='GmtModified', example='Mar 17, 2021 4:09:32 PM'),
        id?: int32(name='Id', example='1'),
        name?: string(name='Name', example='abc'),
        operator?: string(name='Operator', example='193543050****'),
        projectId?: int32(name='ProjectId', example='123'),
        sequence?: int32(name='Sequence', example='300'),
        shared?: boolean(name='Shared', example='false'),
        status?: int32(name='Status', example='1'),
        subType?: string(name='SubType', example='mysql'),
        tenantId?: long(name='TenantId', example='1234567'),
      }
    ](name='DataSources'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='233'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc14115159376359****'),
  success?: boolean(name='Success', example='true'),
}

model ListDataSourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataSourcesResponseBody(name='body'),
}

async function listDataSourcesWithOptions(request: ListDataSourcesRequest, runtime: Util.RuntimeOptions): ListDataSourcesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataSources',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataSources(request: ListDataSourcesRequest): ListDataSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataSourcesWithOptions(request, runtime);
}

model ListDeploymentsRequest {
  creator?: string(name='Creator', example='20030****'),
  endCreateTime?: long(name='EndCreateTime', example='1593877765000'),
  endExecuteTime?: long(name='EndExecuteTime', example='1593877765000'),
  executor?: string(name='Executor', example='2003****'),
  keyword?: string(name='Keyword', example='hello'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
  status?: int32(name='Status', example='1'),
}

model ListDeploymentsResponseBody = {
  data?: {
    deployments?: [ 
      {
        createTime?: long(name='CreateTime', example='1593877765000'),
        creator?: string(name='Creator', example='2003****'),
        errorMessage?: string(name='ErrorMessage', example='OK'),
        executeTime?: long(name='ExecuteTime', example='1593877765000'),
        executor?: string(name='Executor', example='2003****'),
        id?: long(name='Id', example='11111'),
        name?: string(name='Name', example='auto_created'),
        status?: int32(name='Status', example='1'),
      }
    ](name='Deployments'),
    pageNumber?: long(name='PageNumber', example='1'),
    pageSize?: long(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='13'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG'),
}

model ListDeploymentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDeploymentsResponseBody(name='body'),
}

async function listDeploymentsWithOptions(request: ListDeploymentsRequest, runtime: Util.RuntimeOptions): ListDeploymentsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.creator)) {
    body['Creator'] = request.creator;
  }
  if (!Util.isUnset(request.endCreateTime)) {
    body['EndCreateTime'] = request.endCreateTime;
  }
  if (!Util.isUnset(request.endExecuteTime)) {
    body['EndExecuteTime'] = request.endExecuteTime;
  }
  if (!Util.isUnset(request.executor)) {
    body['Executor'] = request.executor;
  }
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDeployments',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDeployments(request: ListDeploymentsRequest): ListDeploymentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeploymentsWithOptions(request, runtime);
}

model ListEnabledExtensionsForProjectRequest {
  eventCode?: string(name='EventCode', example='commit-file'),
  fileType?: string(name='FileType', example='10'),
  projectId?: long(name='ProjectId', example='10000'),
}

model ListEnabledExtensionsForProjectResponseBody = {
  extensions?: [ 
    {
      createUser?: string(name='CreateUser', example='3444434343555'),
      extensionCode?: string(name='ExtensionCode', example='a94a8e23bc0b4dfab9a5e4d2f374d645'),
      extensionDesc?: string(name='ExtensionDesc'),
      extensionName?: string(name='ExtensionName'),
      gmtCreate?: long(name='GmtCreate', example='1660117173'),
      gmtModified?: long(name='GmtModified', example='1569308162000'),
      modifyUser?: string(name='ModifyUser', example='34452335611988'),
      owner?: string(name='Owner', example='21323672*******55500'),
      parameterSetting?: string(name='ParameterSetting', example='extension.fileType.23.deploy-file.enabled=true'),
      tenantId?: long(name='TenantId', example='529889518659842'),
    }
  ](name='Extensions'),
  requestId?: string(name='RequestId', example='4F2CA7ED-27E5-59EA-A8C4-F1F7A1FF0B22'),
}

model ListEnabledExtensionsForProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEnabledExtensionsForProjectResponseBody(name='body'),
}

async function listEnabledExtensionsForProjectWithOptions(request: ListEnabledExtensionsForProjectRequest, runtime: Util.RuntimeOptions): ListEnabledExtensionsForProjectResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.eventCode)) {
    body['EventCode'] = request.eventCode;
  }
  if (!Util.isUnset(request.fileType)) {
    body['FileType'] = request.fileType;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListEnabledExtensionsForProject',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEnabledExtensionsForProject(request: ListEnabledExtensionsForProjectRequest): ListEnabledExtensionsForProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEnabledExtensionsForProjectWithOptions(request, runtime);
}

model ListExtensionsRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListExtensionsResponseBody = {
  pagingInfo?: {
    extensions?: [ 
      {
        bindEventList?: [ 
          {
            eventCode?: string(name='EventCode', example='commit-file'),
            eventName?: string(name='EventName'),
          }
        ](name='BindEventList'),
        extensionCode?: string(name='ExtensionCode'),
        extensionDesc?: string(name='ExtensionDesc'),
        extensionName?: string(name='ExtensionName'),
        owner?: string(name='Owner', example='2003****'),
        status?: int32(name='Status', example='0'),
      }
    ](name='Extensions'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='12'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', description='Id of the request', example='0000-ABCD-EFG'),
}

model ListExtensionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListExtensionsResponseBody(name='body'),
}

async function listExtensionsWithOptions(request: ListExtensionsRequest, runtime: Util.RuntimeOptions): ListExtensionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListExtensions',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listExtensions(request: ListExtensionsRequest): ListExtensionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listExtensionsWithOptions(request, runtime);
}

model ListFileTypeRequest {
  keyword?: string(name='Keyword', example='ODPS SQL'),
  locale?: string(name='Locale', example='zh-CN'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='50'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model ListFileTypeResponseBody = {
  nodeTypeInfoList?: {
    nodeTypeInfo?: [ 
      {
        nodeType?: int32(name='NodeType', example='10'),
        nodeTypeName?: string(name='NodeTypeName', example='ODPS SQL'),
      }
    ](name='NodeTypeInfo'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='50'),
    totalCount?: int32(name='TotalCount', example='127'),
  }(name='NodeTypeInfoList'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
}

model ListFileTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFileTypeResponseBody(name='body'),
}

async function listFileTypeWithOptions(request: ListFileTypeRequest, runtime: Util.RuntimeOptions): ListFileTypeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.locale)) {
    body['Locale'] = request.locale;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListFileType',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFileType(request: ListFileTypeRequest): ListFileTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFileTypeWithOptions(request, runtime);
}

model ListFileVersionsRequest {
  fileId?: long(name='FileId', example='100000001'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model ListFileVersionsResponseBody = {
  data?: {
    fileVersions?: [ 
      {
        changeType?: string(name='ChangeType', example='UPDATE'),
        comment?: string(name='Comment'),
        commitTime?: long(name='CommitTime', example='1593881265000'),
        commitUser?: string(name='CommitUser', example='73842342****'),
        fileContent?: string(name='FileContent', example='SHOW TABLES;'),
        fileName?: string(name='FileName', example='ods_user_info_d'),
        filePropertyContent?: string(name='FilePropertyContent', example='{"fileName":"ods_user_info_d","fileType":10}'),
        fileVersion?: int32(name='FileVersion', example='2'),
        isCurrentProd?: boolean(name='IsCurrentProd', example='false'),
        nodeContent?: string(name='NodeContent', example='{"cycleType":0,"cronExpress":"00 05 00 * * ?"}'),
        nodeId?: long(name='NodeId', example='1234'),
        status?: string(name='Status', example='COMMITTED'),
        useType?: string(name='UseType', example='NORMAL'),
      }
    ](name='FileVersions'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='13'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model ListFileVersionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFileVersionsResponseBody(name='body'),
}

async function listFileVersionsWithOptions(request: ListFileVersionsRequest, runtime: Util.RuntimeOptions): ListFileVersionsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListFileVersions',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFileVersions(request: ListFileVersionsRequest): ListFileVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFileVersionsWithOptions(request, runtime);
}

model ListFilesRequest {
  fileFolderPath?: string(name='FileFolderPath'),
  fileTypes?: string(name='FileTypes', example='10,23'),
  keyword?: string(name='Keyword', example='ods'),
  nodeId?: long(name='NodeId', example='123541234'),
  owner?: string(name='Owner', example='3726346****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
  useType?: string(name='UseType', example='NORMAL'),
}

model ListFilesResponseBody = {
  data?: {
    files?: [ 
      {
        autoParsing?: boolean(name='AutoParsing', example='true'),
        bizId?: long(name='BizId', example='300000'),
        businessId?: long(name='BusinessId', example='300000'),
        commitStatus?: int32(name='CommitStatus', example='1'),
        connectionName?: string(name='ConnectionName', example='odps_first'),
        content?: string(name='Content', example='SHOW TABLES;'),
        createTime?: long(name='CreateTime', example='1593950832000'),
        createUser?: string(name='CreateUser', example='382762****'),
        currentVersion?: int32(name='CurrentVersion', example='2'),
        fileDescription?: string(name='FileDescription', example='my test datastudio file'),
        fileFolderId?: string(name='FileFolderId', example='2735c2****'),
        fileId?: long(name='FileId', example='10000001'),
        fileName?: string(name='FileName', example='ods_user_info_d'),
        fileType?: int32(name='FileType', example='10'),
        isMaxCompute?: boolean(name='IsMaxCompute', example='false'),
        lastEditTime?: long(name='LastEditTime', example='1593950832000'),
        lastEditUser?: string(name='LastEditUser', example='38748246285727'),
        nodeId?: long(name='NodeId', example='300001'),
        owner?: string(name='Owner', example='3872572****'),
        parentId?: long(name='ParentId', example='-1'),
        useType?: string(name='UseType', example='NORMAL'),
      }
    ](name='Files'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='13'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', example='true'),
}

model ListFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFilesResponseBody(name='body'),
}

async function listFilesWithOptions(request: ListFilesRequest, runtime: Util.RuntimeOptions): ListFilesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.fileFolderPath)) {
    body['FileFolderPath'] = request.fileFolderPath;
  }
  if (!Util.isUnset(request.fileTypes)) {
    body['FileTypes'] = request.fileTypes;
  }
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.useType)) {
    body['UseType'] = request.useType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListFiles',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFiles(request: ListFilesRequest): ListFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFilesWithOptions(request, runtime);
}

model ListFoldersRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  parentFolderPath?: string(name='ParentFolderPath'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model ListFoldersResponseBody = {
  data?: {
    folders?: [ 
      {
        folderId?: string(name='FolderId', example='2735c2****'),
        folderPath?: string(name='FolderPath'),
      }
    ](name='Folders'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='13'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model ListFoldersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFoldersResponseBody(name='body'),
}

async function listFoldersWithOptions(request: ListFoldersRequest, runtime: Util.RuntimeOptions): ListFoldersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentFolderPath)) {
    body['ParentFolderPath'] = request.parentFolderPath;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListFolders',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFolders(request: ListFoldersRequest): ListFoldersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFoldersWithOptions(request, runtime);
}

model ListInnerNodesRequest {
  nodeName?: string(name='NodeName', example='liux_test_n****'),
  outerNodeId?: long(name='OuterNodeId', example='1234'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  programType?: string(name='ProgramType', example='ODPS_SQL'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
  projectId?: long(name='ProjectId', example='1234'),
}

model ListInnerNodesResponseBody = {
  paging?: {
    nodes?: [ 
      {
        baselineId?: long(name='BaselineId', example='1234'),
        businessId?: long(name='BusinessId', example='123'),
        connection?: string(name='Connection', example='odps_first'),
        cronExpress?: string(name='CronExpress', example='00 00 00 * * ?'),
        description?: string(name='Description', example='test'),
        dqcDescription?: string(name='DqcDescription', example='[{"projectName":"ztjy_dim","tableName":"dim_user_agent_manage_area_a","partition":"ds\\u003d$[yyyy-mm-dd-1]"}]'),
        dqcType?: string(name='DqcType', example='1'),
        nodeId?: long(name='NodeId', example='12'),
        nodeName?: string(name='NodeName', example='liux_test_n****'),
        ownerId?: string(name='OwnerId', example='1933****36551'),
        paramValues?: string(name='ParamValues', example='a=b'),
        priority?: int32(name='Priority', example='1'),
        programType?: string(name='ProgramType', example='ODPS_SQL'),
        projectId?: long(name='ProjectId', example='123'),
        repeatInterval?: long(name='RepeatInterval', example='60'),
        repeatability?: boolean(name='Repeatability', example='true'),
        resGroupName?: string(name='ResGroupName'),
        schedulerType?: string(name='SchedulerType', example='NORMAL'),
      }
    ](name='Nodes'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Paging'),
  requestId?: string(name='RequestId', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', example='true'),
}

model ListInnerNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInnerNodesResponseBody(name='body'),
}

async function listInnerNodesWithOptions(request: ListInnerNodesRequest, runtime: Util.RuntimeOptions): ListInnerNodesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeName)) {
    body['NodeName'] = request.nodeName;
  }
  if (!Util.isUnset(request.outerNodeId)) {
    body['OuterNodeId'] = request.outerNodeId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.programType)) {
    body['ProgramType'] = request.programType;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListInnerNodes',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInnerNodes(request: ListInnerNodesRequest): ListInnerNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInnerNodesWithOptions(request, runtime);
}

model ListInstanceAmountRequest {
  beginDate?: string(name='BeginDate', example='2021-06-13T00:00:00+0800'),
  endDate?: string(name='EndDate', example='2021-06-16T00:00:00+0800'),
  projectId?: long(name='ProjectId', example='10000'),
}

model ListInstanceAmountResponseBody = {
  instanceCounts?: [ 
    {
      count?: int32(name='Count', example='9527'),
      date?: long(name='Date', example='1623772800000'),
    }
  ](name='InstanceCounts'),
  requestId?: string(name='RequestId', example='95279527adhfj****'),
}

model ListInstanceAmountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstanceAmountResponseBody(name='body'),
}

async function listInstanceAmountWithOptions(request: ListInstanceAmountRequest, runtime: Util.RuntimeOptions): ListInstanceAmountResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.beginDate)) {
    body['BeginDate'] = request.beginDate;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListInstanceAmount',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstanceAmount(request: ListInstanceAmountRequest): ListInstanceAmountResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstanceAmountWithOptions(request, runtime);
}

model ListInstanceHistoryRequest {
  instanceId?: long(name='InstanceId', example='1234'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
}

model ListInstanceHistoryResponseBody = {
  instances?: [ 
    {
      beginRunningTime?: long(name='BeginRunningTime', example='1590416703313'),
      beginWaitResTime?: long(name='BeginWaitResTime', example='1590416703313'),
      beginWaitTimeTime?: long(name='BeginWaitTimeTime', example='1590416703313'),
      bizdate?: long(name='Bizdate', example='1590336000000'),
      createTime?: long(name='CreateTime', example='1590416703313'),
      cycTime?: long(name='CycTime', example='1590422400000'),
      dagId?: long(name='DagId', example='33845'),
      dagType?: string(name='DagType', example='1'),
      errorMessage?: string(name='ErrorMessage', example='error message'),
      finishTime?: long(name='FinishTime', example='1590416703313'),
      instanceHistoryId?: long(name='InstanceHistoryId', example='1'),
      instanceId?: long(name='InstanceId', example='1234'),
      modifyTime?: long(name='ModifyTime', example='1590416703313'),
      nodeId?: long(name='NodeId', example='33115'),
      nodeName?: string(name='NodeName', example='kzh'),
      status?: string(name='Status', example='NOT_RUN'),
      taskType?: string(name='TaskType', example='NORMAL(0)'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', example='true'),
}

model ListInstanceHistoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstanceHistoryResponseBody(name='body'),
}

async function listInstanceHistoryWithOptions(request: ListInstanceHistoryRequest, runtime: Util.RuntimeOptions): ListInstanceHistoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListInstanceHistory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstanceHistory(request: ListInstanceHistoryRequest): ListInstanceHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstanceHistoryWithOptions(request, runtime);
}

model ListInstancesRequest {
  beginBizdate?: string(name='BeginBizdate', example='2020-02-02 00:00:00'),
  bizName?: string(name='BizName', example='test_bizName'),
  bizdate?: string(name='Bizdate', example='2020-02-02 00:00:00'),
  dagId?: long(name='DagId', example='11111'),
  endBizdate?: string(name='EndBizdate', example='2020-02-03 00:00:00'),
  nodeId?: long(name='NodeId', example='100000000000'),
  nodeName?: string(name='NodeName', example='openmr_8****'),
  owner?: string(name='Owner', example='193379****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  programType?: string(name='ProgramType', example='ODPS_SQL'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
  projectId?: long(name='ProjectId', example='12345'),
  status?: string(name='Status', example='NOT_RUN'),
}

model ListInstancesResponseBody = {
  data?: {
    instances?: [ 
      {
        baselineId?: long(name='BaselineId', example='123123'),
        beginRunningTime?: long(name='BeginRunningTime', example='1590416703313'),
        beginWaitResTime?: long(name='BeginWaitResTime', example='1590416703313'),
        beginWaitTimeTime?: long(name='BeginWaitTimeTime', example='1590416703313'),
        bizdate?: long(name='Bizdate', example='1590336000000'),
        businessId?: long(name='BusinessId', example='123'),
        connection?: string(name='Connection', example='odps_first'),
        createTime?: long(name='CreateTime', example='1590416703313'),
        createUser?: string(name='CreateUser', example='Test'),
        cycTime?: long(name='CycTime', example='1590422400000'),
        dagId?: long(name='DagId', example='33845'),
        dagType?: string(name='DagType', example='DAILY'),
        dqcDescription?: string(name='DqcDescription', example='[{"projectName":"ztjy_dim","tableName":"dim_user_agent_manage_area_a","partition":"ds\\u003d$[yyyy-mm-dd-1]"}]'),
        dqcType?: int32(name='DqcType', example='1'),
        errorMessage?: string(name='ErrorMessage', example='error message'),
        finishTime?: long(name='FinishTime', example='1590416703313'),
        instanceId?: long(name='InstanceId', example='1234'),
        modifyTime?: long(name='ModifyTime', example='1590416703313'),
        nodeId?: long(name='NodeId', example='33115'),
        nodeName?: string(name='NodeName', example='kzh'),
        paramValues?: string(name='ParamValues', example='bizdate=$bizdate tbods=$tbods'),
        priority?: int32(name='Priority', example='1'),
        relatedFlowId?: long(name='RelatedFlowId', example='123456'),
        repeatInterval?: long(name='RepeatInterval', example='60000'),
        repeatability?: boolean(name='Repeatability', example='true'),
        status?: string(name='Status', example='NOT_RUN'),
        taskRerunTime?: int32(name='TaskRerunTime', example='0'),
        taskType?: string(name='TaskType', example='NORMAL(0)'),
      }
    ](name='Instances'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='66'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ProjectNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The project does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', example='true'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstancesWithOptions(request: ListInstancesRequest, runtime: Util.RuntimeOptions): ListInstancesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.beginBizdate)) {
    body['BeginBizdate'] = request.beginBizdate;
  }
  if (!Util.isUnset(request.bizName)) {
    body['BizName'] = request.bizName;
  }
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.dagId)) {
    body['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.endBizdate)) {
    body['EndBizdate'] = request.endBizdate;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.nodeName)) {
    body['NodeName'] = request.nodeName;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.programType)) {
    body['ProgramType'] = request.programType;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListInstances',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstancesWithOptions(request, runtime);
}

model ListManualDagInstancesRequest {
  dagId?: string(name='DagId', example='7000001231241'),
  projectEnv?: string(name='ProjectEnv', example='RPOD'),
  projectName?: string(name='ProjectName', example='test_workspace'),
}

model ListManualDagInstancesResponseBody = {
  instances?: [ 
    {
      beginRunningTime?: long(name='BeginRunningTime', example='1605178414676'),
      beginWaitResTime?: long(name='BeginWaitResTime', example='1605178414676'),
      beginWaitTimeTime?: long(name='BeginWaitTimeTime', example='1605178414676'),
      bizDate?: long(name='BizDate', example='1605178414676'),
      createTime?: long(name='CreateTime', example='1605178414676'),
      createUser?: string(name='CreateUser', example='Test'),
      cycTime?: long(name='CycTime', example='1605178414676'),
      dagId?: long(name='DagId', example='350850491'),
      dagType?: string(name='DagType', example='5'),
      finishTime?: long(name='FinishTime', example='1605178414676'),
      instanceId?: long(name='InstanceId', example='11726873619'),
      modifyTime?: long(name='ModifyTime', example='1605178414676'),
      nodeId?: long(name='NodeId', example='37851'),
      nodeName?: string(name='NodeName', example='test2'),
      paramValues?: string(name='ParamValues', example='xxx=yyy'),
      status?: string(name='Status', example='SUCCESS'),
      taskType?: string(name='TaskType', example='MANUAL'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId', example='SDFSDFSDF-SDFSDF-SDFDSF-SDFSDF'),
}

model ListManualDagInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListManualDagInstancesResponseBody(name='body'),
}

async function listManualDagInstancesWithOptions(request: ListManualDagInstancesRequest, runtime: Util.RuntimeOptions): ListManualDagInstancesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.dagId)) {
    body['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListManualDagInstances',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listManualDagInstances(request: ListManualDagInstancesRequest): ListManualDagInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listManualDagInstancesWithOptions(request, runtime);
}

model ListMetaCollectionEntitiesRequest {
  collectionQualifiedName?: string(name='CollectionQualifiedName', example='album.12345'),
  entityType?: string(name='EntityType', example='maxcompute-table'),
  keyword?: string(name='Keyword', example='test'),
  nextToken?: string(name='NextToken', example='12222'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListMetaCollectionEntitiesResponseBody = {
  data?: {
    entityList?: [
      Entity
    ](name='EntityList'),
    nextToken?: string(name='NextToken', example='123344'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Collection.NotExists'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='E25887B7-579C-54A5-9C4F-83A0DE367DD'),
  success?: boolean(name='Success', example='true'),
}

model ListMetaCollectionEntitiesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMetaCollectionEntitiesResponseBody(name='body'),
}

async function listMetaCollectionEntitiesWithOptions(request: ListMetaCollectionEntitiesRequest, runtime: Util.RuntimeOptions): ListMetaCollectionEntitiesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.collectionQualifiedName)) {
    query['CollectionQualifiedName'] = request.collectionQualifiedName;
  }
  if (!Util.isUnset(request.entityType)) {
    query['EntityType'] = request.entityType;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMetaCollectionEntities',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMetaCollectionEntities(request: ListMetaCollectionEntitiesRequest): ListMetaCollectionEntitiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMetaCollectionEntitiesWithOptions(request, runtime);
}

model ListMetaCollectionsRequest {
  administrator?: string(name='Administrator', example='1200759642363000'),
  collectionType?: string(name='CollectionType', example='ALBUM、ALBUM_CATEGORY'),
  creator?: string(name='Creator', example='1200759642363000'),
  follower?: string(name='Follower', example='1200759642363000'),
  keyword?: string(name='Keyword'),
  nextToken?: string(name='NextToken', example='12345'),
  orderBy?: string(name='OrderBy'),
  pageSize?: int32(name='PageSize', example='10'),
  parentQualifiedName?: string(name='ParentQualifiedName', example='Album.1234'),
}

model ListMetaCollectionsResponseBody = {
  data?: {
    collectionList?: [
      Collection
    ](name='CollectionList'),
    nextToken?: string(name='NextToken', example='37ae2053d87d380f28ce0dc0853ca51e'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Collection.NotExists'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='E25887B7-579C-54A5-9C4F-83A0DE367DDE'),
  success?: boolean(name='Success', example='true'),
}

model ListMetaCollectionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMetaCollectionsResponseBody(name='body'),
}

async function listMetaCollectionsWithOptions(request: ListMetaCollectionsRequest, runtime: Util.RuntimeOptions): ListMetaCollectionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.administrator)) {
    query['Administrator'] = request.administrator;
  }
  if (!Util.isUnset(request.collectionType)) {
    query['CollectionType'] = request.collectionType;
  }
  if (!Util.isUnset(request.creator)) {
    query['Creator'] = request.creator;
  }
  if (!Util.isUnset(request.follower)) {
    query['Follower'] = request.follower;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentQualifiedName)) {
    query['ParentQualifiedName'] = request.parentQualifiedName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMetaCollections',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMetaCollections(request: ListMetaCollectionsRequest): ListMetaCollectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMetaCollectionsWithOptions(request, runtime);
}

model ListMetaDBRequest {
  clusterId?: string(name='ClusterId', example='abc'),
  dataSourceType?: string(name='DataSourceType', example='emr'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='123'),
}

model ListMetaDBResponseBody = {
  databaseInfo?: {
    dbList?: [ 
      {
        createTimeStamp?: long(name='CreateTimeStamp', example='1388776825'),
        location?: string(name='Location', example='hdfs://localhost:777/user/hadoop/test.txt'),
        modifiedTimeStamp?: long(name='ModifiedTimeStamp', example='1388776837'),
        name?: string(name='Name', example='name'),
        ownerId?: string(name='OwnerId', example='1232'),
        type?: string(name='Type', example='HIVE'),
        UUID?: string(name='UUID', example='32342'),
      }
    ](name='DbList'),
    totalCount?: long(name='TotalCount', example='10'),
  }(name='DatabaseInfo'),
  requestId?: string(name='RequestId', example='abc'),
}

model ListMetaDBResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMetaDBResponseBody(name='body'),
}

async function listMetaDBWithOptions(request: ListMetaDBRequest, runtime: Util.RuntimeOptions): ListMetaDBResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMetaDB',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMetaDB(request: ListMetaDBRequest): ListMetaDBResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMetaDBWithOptions(request, runtime);
}

model ListMigrationsRequest {
  migrationType?: string(name='MigrationType', example='IMPORT'),
  owner?: string(name='Owner', example='193379****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='12345'),
}

model ListMigrationsResponseBody = {
  data?: {
    migrations?: [ 
      {
        createTime?: long(name='CreateTime', example='123124123123123'),
        createUser?: string(name='CreateUser', example='123123****'),
        createUserName?: string(name='CreateUserName', example='3h1_test'),
        description?: string(name='Description'),
        downloadUrl?: string(name='DownloadUrl', example='http://geoip-sdk-user.oss-cn-zhangjiakou.aliyuncs.com/product/v1/ipv4/trace/v1.20220424123842.dex?Expires=1650780849&OSSAccessKeyId=XXXXXXeF4Lv5j&Signature=qxxxxx'),
        id?: long(name='Id', example='436064'),
        message?: string(name='Message', example='An internal system error occurred. datasource kafka region is not cn-chengdu, can\\"t open network for it'),
        migrationType?: string(name='MigrationType', example='EXPORT'),
        name?: string(name='Name', example='test_task_1638498642279'),
        packageType?: string(name='PackageType', example='DATAWORKS_MODEL'),
        projectId?: long(name='ProjectId', example='72132'),
        status?: string(name='Status', example='SUCCESS'),
        tenantId?: long(name='TenantId', example='16307'),
        updateTime?: long(name='UpdateTime', example='123123123123123'),
        updateUser?: string(name='UpdateUser', example='1231****'),
        updateUserName?: string(name='UpdateUserName', example='3h1_test'),
      }
    ](name='Migrations'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='20'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F9198AA3-9010-53D5-9714-DC4461427D3E'),
  success?: boolean(name='Success', example='true'),
}

model ListMigrationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMigrationsResponseBody(name='body'),
}

async function listMigrationsWithOptions(request: ListMigrationsRequest, runtime: Util.RuntimeOptions): ListMigrationsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.migrationType)) {
    body['MigrationType'] = request.migrationType;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListMigrations',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMigrations(request: ListMigrationsRequest): ListMigrationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMigrationsWithOptions(request, runtime);
}

model ListNodeIORequest {
  ioType?: string(name='IoType', example='output'),
  nodeId?: long(name='NodeId', example='1234'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
}

model ListNodeIOResponseBody = {
  data?: [ 
    {
      data?: string(name='Data', example='dataworks_a.1234_out'),
      nodeId?: long(name='NodeId', example='123123'),
      tableName?: string(name='TableName', example='dataworks_a.datastudio_tenant_waitres_alarm'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ProjectNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The project does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', example='true'),
}

model ListNodeIOResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNodeIOResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ListNodeIORequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListNodeIOResponse
 */
// Deprecated
async function listNodeIOWithOptions(request: ListNodeIORequest, runtime: Util.RuntimeOptions): ListNodeIOResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.ioType)) {
    body['IoType'] = request.ioType;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListNodeIO',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ListNodeIORequest
  * @return ListNodeIOResponse
 */
// Deprecated
async function listNodeIO(request: ListNodeIORequest): ListNodeIOResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodeIOWithOptions(request, runtime);
}

model ListNodeInputOrOutputRequest {
  ioType?: string(name='IoType', example='output'),
  nodeId?: long(name='NodeId', example='12314567'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
}

model ListNodeInputOrOutputResponseBody = {
  data?: [ 
    {
      data?: string(name='Data', example='xxxx.123141254_out'),
      nodeId?: long(name='NodeId', example='1234667'),
      tableName?: string(name='TableName', example='dwd_xxx_table'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ProjectNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The project does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', example='true'),
}

model ListNodeInputOrOutputResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNodeInputOrOutputResponseBody(name='body'),
}

async function listNodeInputOrOutputWithOptions(request: ListNodeInputOrOutputRequest, runtime: Util.RuntimeOptions): ListNodeInputOrOutputResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.ioType)) {
    body['IoType'] = request.ioType;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListNodeInputOrOutput',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNodeInputOrOutput(request: ListNodeInputOrOutputRequest): ListNodeInputOrOutputResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodeInputOrOutputWithOptions(request, runtime);
}

model ListNodesRequest {
  bizName?: string(name='BizName', example='test_bizName'),
  nodeName?: string(name='NodeName', example='liux_test_n****'),
  owner?: string(name='Owner', example='193379****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  programType?: string(name='ProgramType', example='ODPS_SQL'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
  projectId?: long(name='ProjectId', example='1234'),
}

model ListNodesResponseBody = {
  data?: {
    nodes?: [ 
      {
        baselineId?: long(name='BaselineId', example='123456'),
        businessId?: long(name='BusinessId', example='123'),
        connection?: string(name='Connection', example='odps_first'),
        cronExpress?: string(name='CronExpress', example='00 00 00 * * ?'),
        description?: string(name='Description', example='test'),
        dqcDescription?: string(name='DqcDescription', example='[{"projectName":"ztjy_dim","tableName":"dim_user_agent_manage_area_a","partition":"ds\\u003d$[yyyy-mm-dd-1]"}]'),
        dqcType?: int32(name='DqcType', example='1'),
        nodeId?: long(name='NodeId', example='1234'),
        nodeName?: string(name='NodeName', example='liux_test_n****'),
        ownerId?: string(name='OwnerId', example='19337906836551'),
        paramValues?: string(name='ParamValues', example='a=b'),
        priority?: int32(name='Priority', example='1'),
        programType?: string(name='ProgramType', example='ODPS_SQL'),
        projectId?: long(name='ProjectId', example='33671'),
        relatedFlowId?: long(name='RelatedFlowId', example='1231123'),
        repeatInterval?: long(name='RepeatInterval', example='60'),
        repeatability?: boolean(name='Repeatability', example='true'),
        resGroupName?: string(name='ResGroupName'),
        schedulerType?: string(name='SchedulerType', example='NORMAL'),
      }
    ](name='Nodes'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='66'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', example='true'),
}

model ListNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNodesResponseBody(name='body'),
}

async function listNodesWithOptions(request: ListNodesRequest, runtime: Util.RuntimeOptions): ListNodesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizName)) {
    body['BizName'] = request.bizName;
  }
  if (!Util.isUnset(request.nodeName)) {
    body['NodeName'] = request.nodeName;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.programType)) {
    body['ProgramType'] = request.programType;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListNodes',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNodes(request: ListNodesRequest): ListNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodesWithOptions(request, runtime);
}

model ListNodesByBaselineRequest {
  baselineId?: long(name='BaselineId', example='1234'),
}

model ListNodesByBaselineResponseBody = {
  data?: [ 
    {
      nodeId?: long(name='NodeId', example='1234'),
      nodeName?: string(name='NodeName'),
      owner?: string(name='Owner', example='9527952****'),
      projectId?: long(name='ProjectId', example='1234'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-E****'),
  success?: string(name='Success', example='true'),
}

model ListNodesByBaselineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNodesByBaselineResponseBody(name='body'),
}

async function listNodesByBaselineWithOptions(request: ListNodesByBaselineRequest, runtime: Util.RuntimeOptions): ListNodesByBaselineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListNodesByBaseline',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNodesByBaseline(request: ListNodesByBaselineRequest): ListNodesByBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodesByBaselineWithOptions(request, runtime);
}

model ListNodesByOutputRequest {
  outputs?: string(name='Outputs', example='aaaaa.1231412_out,bbbb.12313123_out'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
}

model ListNodesByOutputResponseBody = {
  data?: [ 
    {
      nodeList?: [ 
        {
          baselineId?: long(name='BaselineId', example='1235667'),
          connection?: string(name='Connection', example='odps_first'),
          cronExpress?: string(name='CronExpress', example='00 00 00 * * ?'),
          description?: string(name='Description', example='test'),
          dqcDescription?: string(name='DqcDescription', example='[{"projectName":"ztjy_dim","tableName":"dim_user_agent_manage_area_a","partition":"ds\\u003d$[yyyy-mm-dd-1]"}]'),
          dqcType?: int32(name='DqcType', example='1'),
          fileType?: string(name='FileType', example='ODPS_SQL'),
          nodeId?: long(name='NodeId', example='125677'),
          nodeName?: string(name='NodeName', example='liux_test_n****'),
          ownerId?: string(name='OwnerId', example='19337906836551'),
          paramValues?: string(name='ParamValues', example='a=b'),
          priority?: int32(name='Priority', example='1'),
          programType?: string(name='ProgramType', example='ODPS_SQL'),
          projectId?: long(name='ProjectId', example='33671'),
          relatedFlowId?: long(name='RelatedFlowId', example='1235655464'),
          repeatInterval?: int32(name='RepeatInterval', example='60'),
          repeatability?: boolean(name='Repeatability', example='true'),
          resGroupName?: string(name='ResGroupName'),
          schedulerType?: string(name='SchedulerType', example='NORMAL'),
        }
      ](name='NodeList'),
      output?: string(name='Output', example='test_0709_1.630003556_out'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='SDFSDFSDF-asdfDFSDF-SDFSDf-SDfSFD'),
  success?: boolean(name='Success', example='true'),
}

model ListNodesByOutputResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNodesByOutputResponseBody(name='body'),
}

async function listNodesByOutputWithOptions(request: ListNodesByOutputRequest, runtime: Util.RuntimeOptions): ListNodesByOutputResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.outputs)) {
    body['Outputs'] = request.outputs;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListNodesByOutput',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNodesByOutput(request: ListNodesByOutputRequest): ListNodesByOutputResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodesByOutputWithOptions(request, runtime);
}

model ListPermissionApplyOrdersRequest {
  endTime?: long(name='EndTime', example='1617200471885'),
  engineType?: string(name='EngineType', example='odps'),
  flowStatus?: int32(name='FlowStatus', example='1'),
  maxComputeProjectName?: string(name='MaxComputeProjectName', example='aMaxComputeProject'),
  orderType?: int32(name='OrderType', example='1'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='100'),
  queryType?: int32(name='QueryType', example='1'),
  startTime?: long(name='StartTime', example='1616200471885'),
  tableName?: string(name='TableName', example='aTableName'),
  workspaceId?: int32(name='WorkspaceId', example='12345'),
}

model ListPermissionApplyOrdersResponseBody = {
  applyOrders?: {
    applyOrder?: [ 
      {
        applyBaseId?: string(name='ApplyBaseId', example='267842600408993176'),
        applyTimestamp?: long(name='ApplyTimestamp', example='1615284086000'),
        approveContent?: {
          applyReason?: string(name='ApplyReason', example='I need to use this table'),
          orderType?: int32(name='OrderType', example='1'),
          projectMeta?: {
            objectMetaList?: [ 
              {
                actions?: [ string ](name='Actions'),
                objectName?: string(name='ObjectName', example='aTableName'),
              }
            ](name='ObjectMetaList'),
            workspaceName?: string(name='WorkspaceName', example='aWorkspaceName'),
          }(name='ProjectMeta'),
        }(name='ApproveContent'),
        flowId?: string(name='FlowId', example='ad8da78d-8135-455e-9486-27cf213fc140'),
        flowStatus?: int32(name='FlowStatus', example='2'),
      }
    ](name='ApplyOrder'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='150'),
  }(name='ApplyOrders'),
  requestId?: string(name='RequestId', example='0bc1ec92159376****'),
}

model ListPermissionApplyOrdersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPermissionApplyOrdersResponseBody(name='body'),
}

async function listPermissionApplyOrdersWithOptions(request: ListPermissionApplyOrdersRequest, runtime: Util.RuntimeOptions): ListPermissionApplyOrdersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.engineType)) {
    query['EngineType'] = request.engineType;
  }
  if (!Util.isUnset(request.flowStatus)) {
    query['FlowStatus'] = request.flowStatus;
  }
  if (!Util.isUnset(request.maxComputeProjectName)) {
    query['MaxComputeProjectName'] = request.maxComputeProjectName;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryType)) {
    query['QueryType'] = request.queryType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPermissionApplyOrders',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPermissionApplyOrders(request: ListPermissionApplyOrdersRequest): ListPermissionApplyOrdersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPermissionApplyOrdersWithOptions(request, runtime);
}

model ListProgramTypeCountRequest {
  projectEnv?: string(name='ProjectEnv', example='PROD'),
  projectId?: long(name='ProjectId', example='1234'),
}

model ListProgramTypeCountResponseBody = {
  programTypeAndCounts?: [ 
    {
      count?: int32(name='Count', example='3'),
      programType?: string(name='ProgramType', example='ODPS_SQL'),
    }
  ](name='ProgramTypeAndCounts'),
  requestId?: string(name='RequestId', example='E6F0DBDD-5AD****'),
}

model ListProgramTypeCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProgramTypeCountResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ListProgramTypeCountRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListProgramTypeCountResponse
 */
// Deprecated
async function listProgramTypeCountWithOptions(request: ListProgramTypeCountRequest, runtime: Util.RuntimeOptions): ListProgramTypeCountResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListProgramTypeCount',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ListProgramTypeCountRequest
  * @return ListProgramTypeCountResponse
 */
// Deprecated
async function listProgramTypeCount(request: ListProgramTypeCountRequest): ListProgramTypeCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProgramTypeCountWithOptions(request, runtime);
}

model ListProjectIdsRequest {
  userId?: string(name='UserId', example='171111'),
}

model ListProjectIdsResponseBody = {
  projectIds?: [ long ](name='ProjectIds'),
  requestId?: string(name='RequestId', example='0b57ff7216278945532771749d****'),
}

model ListProjectIdsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProjectIdsResponseBody(name='body'),
}

async function listProjectIdsWithOptions(request: ListProjectIdsRequest, runtime: Util.RuntimeOptions): ListProjectIdsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProjectIds',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProjectIds(request: ListProjectIdsRequest): ListProjectIdsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectIdsWithOptions(request, runtime);
}

model ListProjectMembersRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='27'),
}

model ListProjectMembersResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    projectMemberList?: [ 
      {
        nick?: string(name='Nick', example='zhangsan'),
        projectMemberId?: string(name='ProjectMemberId', example='121'),
        projectMemberName?: string(name='ProjectMemberName'),
        projectMemberType?: string(name='ProjectMemberType', example='1'),
        projectRoleList?: [ 
          {
            projectRoleCode?: string(name='ProjectRoleCode', example='role_project_guest'),
            projectRoleId?: int32(name='ProjectRoleId', example='1'),
            projectRoleName?: string(name='ProjectRoleName'),
            projectRoleType?: string(name='ProjectRoleType', example='0'),
          }
        ](name='ProjectRoleList'),
        status?: string(name='Status', example='0'),
      }
    ](name='ProjectMemberList'),
    totalCount?: int32(name='TotalCount', example='3'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='1AFAE64E-D1BE-432B-A9****'),
}

model ListProjectMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProjectMembersResponseBody(name='body'),
}

async function listProjectMembersWithOptions(request: ListProjectMembersRequest, runtime: Util.RuntimeOptions): ListProjectMembersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProjectMembers',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProjectMembers(request: ListProjectMembersRequest): ListProjectMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectMembersWithOptions(request, runtime);
}

model ListProjectRolesRequest {
  projectId?: long(name='ProjectId', example='27'),
}

model ListProjectRolesResponseBody = {
  projectRoleList?: [ 
    {
      projectRoleCode?: string(name='ProjectRoleCode', example='role_project_guest'),
      projectRoleId?: int32(name='ProjectRoleId', example='1'),
      projectRoleName?: string(name='ProjectRoleName'),
      projectRoleType?: string(name='ProjectRoleType', example='0'),
    }
  ](name='ProjectRoleList'),
  requestId?: string(name='RequestId', example='1AFAE64E-D1BE-432B-A9****'),
}

model ListProjectRolesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProjectRolesResponseBody(name='body'),
}

async function listProjectRolesWithOptions(request: ListProjectRolesRequest, runtime: Util.RuntimeOptions): ListProjectRolesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProjectRoles',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProjectRoles(request: ListProjectRolesRequest): ListProjectRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectRolesWithOptions(request, runtime);
}

model ListProjectsRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', example='rg-acfmzbn7pti3zfa'),
  tags?: [ 
    {
      key?: string(name='Key', example='Env'),
      value?: string(name='Value', example='Test'),
    }
  ](name='Tags'),
}

model ListProjectsShrinkRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', example='rg-acfmzbn7pti3zfa'),
  tagsShrink?: string(name='Tags'),
}

model ListProjectsResponseBody = {
  pageResult?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    projectList?: [ 
      {
        disableDevelopment?: boolean(name='DisableDevelopment', example='true'),
        isDefault?: int32(name='IsDefault', example='1'),
        projectDescription?: string(name='ProjectDescription'),
        projectId?: long(name='ProjectId', example='1212'),
        projectIdentifier?: string(name='ProjectIdentifier', example='test'),
        projectName?: string(name='ProjectName'),
        projectOwnerBaseId?: string(name='ProjectOwnerBaseId', example='122222'),
        projectStatus?: int32(name='ProjectStatus', example='0'),
        projectStatusCode?: string(name='ProjectStatusCode', example='AVAILABLE'),
        resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', example='rg-acfmzbn7pti3zfa'),
        tablePrivacyMode?: int32(name='TablePrivacyMode', example='1'),
        tags?: [ 
          {
            key?: string(name='Key', example='Env'),
            value?: string(name='Value', example='Test'),
          }
        ](name='Tags'),
        useProxyOdpsAccount?: boolean(name='UseProxyOdpsAccount', example='true'),
      }
    ](name='ProjectList'),
    totalCount?: int32(name='TotalCount', example='123'),
  }(name='PageResult'),
  requestId?: string(name='RequestId', example='20658801***'),
}

model ListProjectsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProjectsResponseBody(name='body'),
}

async function listProjectsWithOptions(tmpReq: ListProjectsRequest, runtime: Util.RuntimeOptions): ListProjectsResponse {
  Util.validateModel(tmpReq);
  var request = new ListProjectsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProjects',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProjects(request: ListProjectsRequest): ListProjectsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectsWithOptions(request, runtime);
}

model ListQualityResultsByEntityRequest {
  endDate?: string(name='EndDate', example='2020-09-21 00:00:00'),
  entityId?: int32(name='EntityId', example='152322134'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectName?: string(name='ProjectName', example='autotest'),
  startDate?: string(name='StartDate', example='2020-09-20 00:00:00'),
}

model ListQualityResultsByEntityResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    ruleChecks?: [ 
      {
        actualExpression?: string(name='ActualExpression', example='ds=20200912'),
        beginTime?: long(name='BeginTime', example='1600704000000'),
        bizDate?: long(name='BizDate', example='1600704000000'),
        blockType?: int32(name='BlockType', example='0'),
        checkResult?: int32(name='CheckResult', example='0'),
        checkResultStatus?: int32(name='CheckResultStatus', example='0'),
        checkerId?: int32(name='CheckerId', example='7'),
        checkerName?: string(name='CheckerName', example='fulx'),
        checkerType?: int32(name='CheckerType', example='1'),
        comment?: string(name='Comment'),
        criticalThreshold?: float(name='CriticalThreshold', example='0.5'),
        dateType?: string(name='DateType', example='YMD'),
        discreteCheck?: boolean(name='DiscreteCheck', example='true'),
        endTime?: long(name='EndTime', example='1600704000000'),
        entityId?: int32(name='EntityId', example='15432322'),
        expectValue?: float(name='ExpectValue', example='200'),
        externalId?: string(name='ExternalId', example='1112323123'),
        externalType?: string(name='ExternalType', example='CWF2'),
        fixedCheck?: boolean(name='FixedCheck', example='false'),
        id?: int32(name='Id', example='121212121'),
        isPrediction?: boolean(name='IsPrediction', example='true'),
        lowerValue?: float(name='LowerValue', example='2344'),
        matchExpression?: string(name='MatchExpression', example='ds=$[yyyymmdd]'),
        methodName?: string(name='MethodName', example='count_distinct'),
        op?: string(name='Op', example='>'),
        projectName?: string(name='ProjectName', example='autotest'),
        property?: string(name='Property', example='type'),
        referenceValue?: [ 
          {
            bizDate?: string(name='BizDate', example='2020-12-03'),
            discreteProperty?: string(name='DiscreteProperty', example='0'),
            singleCheckResult?: int32(name='SingleCheckResult', example='0'),
            threshold?: float(name='Threshold', example='0.5'),
            value?: float(name='Value', example='19'),
          }
        ](name='ReferenceValue'),
        resultString?: string(name='ResultString', example='test'),
        ruleId?: int32(name='RuleId', example='123123232'),
        ruleName?: string(name='RuleName'),
        sampleValue?: [ 
          {
            bizDate?: string(name='BizDate', example='2020-12-03'),
            discreteProperty?: string(name='DiscreteProperty', example='0'),
            value?: float(name='Value', example='19'),
          }
        ](name='SampleValue'),
        tableName?: string(name='TableName', example='dual'),
        taskId?: string(name='TaskId', example='16008552981681a0d6****'),
        templateId?: int32(name='TemplateId', example='5'),
        templateName?: string(name='TemplateName'),
        timeCost?: string(name='TimeCost', example='202'),
        trend?: string(name='Trend', example='abs'),
        upperValue?: float(name='UpperValue', example='25555'),
        warningThreshold?: float(name='WarningThreshold', example='0.1'),
        whereCondition?: string(name='WhereCondition', example='id>0'),
      }
    ](name='RuleChecks'),
    totalCount?: long(name='TotalCount', example='50'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='401'),
  errorMessage?: string(name='ErrorMessage', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='CBA58543-00D4-41****'),
  success?: boolean(name='Success', example='true'),
}

model ListQualityResultsByEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQualityResultsByEntityResponseBody(name='body'),
}

/**
  * ****
  *
  * @param request ListQualityResultsByEntityRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListQualityResultsByEntityResponse
 */
async function listQualityResultsByEntityWithOptions(request: ListQualityResultsByEntityRequest, runtime: Util.RuntimeOptions): ListQualityResultsByEntityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListQualityResultsByEntity',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ****
  *
  * @param request ListQualityResultsByEntityRequest
  * @return ListQualityResultsByEntityResponse
 */
async function listQualityResultsByEntity(request: ListQualityResultsByEntityRequest): ListQualityResultsByEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return listQualityResultsByEntityWithOptions(request, runtime);
}

model ListQualityResultsByRuleRequest {
  endDate?: string(name='EndDate', example='2020-09-22 00:00:00'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectName?: string(name='ProjectName', example='autotest'),
  ruleId?: int32(name='RuleId', example='152322134'),
  startDate?: string(name='StartDate', example='2020-09-20 00:00:00'),
}

model ListQualityResultsByRuleResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    ruleChecks?: [ 
      {
        actualExpression?: string(name='ActualExpression', example='ds=20200925'),
        beginTime?: long(name='BeginTime', example='1600704000000'),
        bizDate?: long(name='BizDate', example='1600704000000'),
        blockType?: int32(name='BlockType', example='1'),
        checkResult?: int32(name='CheckResult', example='2'),
        checkResultStatus?: int32(name='CheckResultStatus', example='2'),
        checkerId?: int32(name='CheckerId', example='7'),
        checkerName?: string(name='CheckerName', example='fulx'),
        checkerType?: int32(name='CheckerType', example='0'),
        comment?: string(name='Comment'),
        criticalThreshold?: float(name='CriticalThreshold', example='0.6'),
        dateType?: string(name='DateType', example='YMD'),
        discreteCheck?: boolean(name='DiscreteCheck', example='true'),
        endTime?: long(name='EndTime', example='1600704000000'),
        entityId?: int32(name='EntityId', example='14534343'),
        expectValue?: float(name='ExpectValue', example='90'),
        externalId?: string(name='ExternalId', example='123112232'),
        externalType?: string(name='ExternalType', example='CWF2'),
        fixedCheck?: boolean(name='FixedCheck', example='false'),
        id?: int32(name='Id', example='2231123'),
        isPrediction?: boolean(name='IsPrediction', example='false'),
        lowerValue?: float(name='LowerValue', example='2344'),
        matchExpression?: string(name='MatchExpression', example='ds=$[yyyymmdd]'),
        methodName?: string(name='MethodName', example='max'),
        op?: string(name='Op', example='>'),
        projectName?: string(name='ProjectName', example='autotest'),
        property?: string(name='Property', example='type'),
        referenceValue?: [ 
          {
            bizDate?: string(name='BizDate', example='1600704000000'),
            discreteProperty?: string(name='DiscreteProperty', example='type1'),
            singleCheckResult?: int32(name='SingleCheckResult', example='2'),
            threshold?: float(name='Threshold', example='0.2'),
            value?: float(name='Value', example='20'),
          }
        ](name='ReferenceValue'),
        resultString?: string(name='ResultString', example='ResultString'),
        ruleId?: int32(name='RuleId', example='123421'),
        ruleName?: string(name='RuleName'),
        sampleValue?: [ 
          {
            bizDate?: string(name='BizDate', example='1600704000000'),
            discreteProperty?: string(name='DiscreteProperty', example='type2'),
            value?: float(name='Value', example='23'),
          }
        ](name='SampleValue'),
        tableName?: string(name='TableName', example='dual'),
        taskId?: string(name='TaskId', example='16008552981681a0d6****'),
        templateId?: int32(name='TemplateId', example='5'),
        templateName?: string(name='TemplateName'),
        timeCost?: string(name='TimeCost', example='10'),
        trend?: string(name='Trend', example='up'),
        upperValue?: float(name='UpperValue', example='22200'),
        warningThreshold?: float(name='WarningThreshold', example='0.1'),
        whereCondition?: string(name='WhereCondition', example='type!=\\"type2\\"'),
      }
    ](name='RuleChecks'),
    totalCount?: long(name='TotalCount', example='200'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='401'),
  errorMessage?: string(name='ErrorMessage', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='CBA58543-00D4-41****'),
  success?: boolean(name='Success', example='true'),
}

model ListQualityResultsByRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQualityResultsByRuleResponseBody(name='body'),
}

async function listQualityResultsByRuleWithOptions(request: ListQualityResultsByRuleRequest, runtime: Util.RuntimeOptions): ListQualityResultsByRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.ruleId)) {
    body['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListQualityResultsByRule',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listQualityResultsByRule(request: ListQualityResultsByRuleRequest): ListQualityResultsByRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return listQualityResultsByRuleWithOptions(request, runtime);
}

model ListQualityRulesRequest {
  entityId?: long(name='EntityId', example='1234'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  projectName?: string(name='ProjectName', example='autotest'),
}

model ListQualityRulesResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    rules?: [ 
      {
        blockType?: int32(name='BlockType', example='0'),
        checkerId?: int32(name='CheckerId', example='7'),
        comment?: string(name='Comment'),
        criticalThreshold?: string(name='CriticalThreshold', example='40'),
        entityId?: int32(name='EntityId', example='1234'),
        expectValue?: string(name='ExpectValue', example='1000'),
        fixCheck?: boolean(name='FixCheck', example='true'),
        historyCriticalThreshold?: string(name='HistoryCriticalThreshold', example='history max:80%,history min:50%'),
        historyWarningThreshold?: string(name='HistoryWarningThreshold', example='history max:40%,history min:10%'),
        id?: int32(name='Id', example='1234'),
        matchExpression?: string(name='MatchExpression', example='dt=$[yyyymmdd]'),
        methodId?: int32(name='MethodId', example='21'),
        methodName?: string(name='MethodName', example='count/table_count'),
        onDuty?: string(name='OnDuty', example='1912****'),
        onDutyAccountName?: string(name='OnDutyAccountName', example='test'),
        projectName?: string(name='ProjectName', example='autotest'),
        property?: string(name='Property', example='id'),
        propertyKey?: string(name='PropertyKey', example='table_count'),
        ruleCheckerRelationId?: int32(name='RuleCheckerRelationId', example='132323'),
        ruleName?: string(name='RuleName', example='test'),
        ruleType?: int32(name='RuleType', example='0'),
        tableName?: string(name='TableName', example='dual'),
        templateId?: int32(name='TemplateId', example='7'),
        templateName?: string(name='TemplateName'),
        trend?: string(name='Trend', example='abs'),
        warningThreshold?: string(name='WarningThreshold', example='10'),
      }
    ](name='Rules'),
    totalCount?: long(name='TotalCount', example='400'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='38cbdef0-f6cf-49****'),
  success?: boolean(name='Success', example='true'),
}

model ListQualityRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQualityRulesResponseBody(name='body'),
}

async function listQualityRulesWithOptions(request: ListQualityRulesRequest, runtime: Util.RuntimeOptions): ListQualityRulesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListQualityRules',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listQualityRules(request: ListQualityRulesRequest): ListQualityRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listQualityRulesWithOptions(request, runtime);
}

model ListRefDISyncTasksRequest {
  datasourceName?: string(name='DatasourceName', example='mysql_datasource'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='100'),
  projectId?: long(name='ProjectId', example='10000'),
  refType?: string(name='RefType', example='from'),
  taskType?: string(name='TaskType', example='DI_OFFLINE'),
}

model ListRefDISyncTasksResponseBody = {
  data?: {
    DISyncTasks?: [ 
      {
        diDestinationDatasource?: string(name='DiDestinationDatasource', example='[\\"qcc_polardb2\\"]'),
        diSourceDatasource?: string(name='DiSourceDatasource', example='[\\"odps_writer\\"]'),
        nodeId?: long(name='NodeId', example='100000'),
        nodeName?: string(name='NodeName', example='abcd1234'),
        taskType?: string(name='TaskType', example='DI_OFFLINE'),
      }
    ](name='DISyncTasks'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='0bc1411515937635973****'),
  success?: boolean(name='Success', example='true'),
}

model ListRefDISyncTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRefDISyncTasksResponseBody(name='body'),
}

async function listRefDISyncTasksWithOptions(request: ListRefDISyncTasksRequest, runtime: Util.RuntimeOptions): ListRefDISyncTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasourceName)) {
    query['DatasourceName'] = request.datasourceName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.refType)) {
    query['RefType'] = request.refType;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRefDISyncTasks',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRefDISyncTasks(request: ListRefDISyncTasksRequest): ListRefDISyncTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRefDISyncTasksWithOptions(request, runtime);
}

model ListRemindsRequest {
  alertTarget?: string(name='AlertTarget', example='9527952795****'),
  founder?: string(name='Founder', example='9527952795****'),
  nodeId?: long(name='NodeId', example='1234'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  remindTypes?: string(name='RemindTypes', example='FINISHED,ERROR'),
  searchText?: string(name='SearchText'),
}

model ListRemindsResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    reminds?: [ 
      {
        alertMethods?: [ string ](name='AlertMethods'),
        alertTargets?: [ string ](name='AlertTargets'),
        alertUnit?: string(name='AlertUnit', example='OWNER'),
        baselineIds?: [ long ](name='BaselineIds'),
        bizProcessIds?: [ long ](name='BizProcessIds'),
        dndEnd?: string(name='DndEnd', example='08:00'),
        dndStart?: string(name='DndStart', example='00:00'),
        founder?: string(name='Founder', example='952795****'),
        nodeIds?: [ long ](name='NodeIds'),
        projectIds?: [ long ](name='ProjectIds'),
        remindId?: long(name='RemindId', example='1234'),
        remindName?: string(name='RemindName'),
        remindType?: string(name='RemindType', example='FINISHED'),
        remindUnit?: string(name='RemindUnit', example='NODE'),
        useflag?: boolean(name='Useflag', example='true'),
      }
    ](name='Reminds'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model ListRemindsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRemindsResponseBody(name='body'),
}

async function listRemindsWithOptions(request: ListRemindsRequest, runtime: Util.RuntimeOptions): ListRemindsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertTarget)) {
    body['AlertTarget'] = request.alertTarget;
  }
  if (!Util.isUnset(request.founder)) {
    body['Founder'] = request.founder;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.remindTypes)) {
    body['RemindTypes'] = request.remindTypes;
  }
  if (!Util.isUnset(request.searchText)) {
    body['SearchText'] = request.searchText;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListReminds',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listReminds(request: ListRemindsRequest): ListRemindsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRemindsWithOptions(request, runtime);
}

model ListResourceGroupsRequest {
  bizExtKey?: string(name='BizExtKey', example='default'),
  keyword?: string(name='Keyword', example='abc'),
  resourceGroupType?: int32(name='ResourceGroupType', example='3'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', example='rg-acfmzbn7pti3zfa'),
  tags?: [ 
    {
      key?: string(name='Key', example='Env'),
      value?: string(name='Value', example='Test'),
    }
  ](name='Tags'),
}

model ListResourceGroupsShrinkRequest {
  bizExtKey?: string(name='BizExtKey', example='default'),
  keyword?: string(name='Keyword', example='abc'),
  resourceGroupType?: int32(name='ResourceGroupType', example='3'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', example='rg-acfmzbn7pti3zfa'),
  tagsShrink?: string(name='Tags'),
}

model ListResourceGroupsResponseBody = {
  data?: [ 
    {
      bizExtKey?: string(name='BizExtKey', example='default'),
      cluster?: string(name='Cluster', example='AY18G'),
      createTime?: string(name='CreateTime', example='Jul 9, 2018 2:43:37 PM'),
      enableKp?: boolean(name='EnableKp', example='false'),
      id?: long(name='Id', example='1234567'),
      identifier?: string(name='Identifier', example='e1815577-2f4e-4c5e-b29****'),
      isDefault?: boolean(name='IsDefault', example='true'),
      mode?: string(name='Mode', example='SHARE'),
      name?: string(name='Name', example='abc'),
      resourceGroupType?: string(name='ResourceGroupType', example='3'),
      resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', example='rg-acfmzbn7pti3zfa'),
      sequence?: int32(name='Sequence', example='300'),
      specs?: map[string]any(name='Specs', example='{}'),
      status?: int32(name='Status', example='0'),
      tags?: [ 
        {
          key?: string(name='Key', example='Env'),
          value?: string(name='Value', example='Test'),
        }
      ](name='Tags'),
      tenantId?: long(name='TenantId', example='1234567'),
      updateTime?: string(name='UpdateTime', example='Jul 9, 2018 2:43:37 PM'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1411515937635973****'),
  success?: boolean(name='Success', example='true'),
}

model ListResourceGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListResourceGroupsResponseBody(name='body'),
}

async function listResourceGroupsWithOptions(tmpReq: ListResourceGroupsRequest, runtime: Util.RuntimeOptions): ListResourceGroupsResponse {
  Util.validateModel(tmpReq);
  var request = new ListResourceGroupsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.bizExtKey)) {
    query['BizExtKey'] = request.bizExtKey;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.resourceGroupType)) {
    query['ResourceGroupType'] = request.resourceGroupType;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListResourceGroups',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listResourceGroups(request: ListResourceGroupsRequest): ListResourceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResourceGroupsWithOptions(request, runtime);
}

model ListShiftPersonnelsRequest {
  beginTime?: long(name='BeginTime', example='1593950832000'),
  endTime?: long(name='EndTime', example='1593950832000'),
  shiftPersonUID?: string(name='ShiftPersonUID', example='1933790****551'),
  shiftScheduleIdentifier?: string(name='ShiftScheduleIdentifier', example='2ab6456ada634b2f938ee******9b45b'),
  userType?: string(name='UserType', example='ALL'),
}

model ListShiftPersonnelsResponseBody = {
  paging?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    shiftPersons?: [ 
      {
        beginTime?: long(name='BeginTime', example='1593950832000'),
        endTime?: long(name='EndTime', example='1593950832000'),
        shiftPersonName?: string(name='ShiftPersonName'),
        shiftPersonUID?: string(name='ShiftPersonUID', example='3726346****'),
      }
    ](name='ShiftPersons'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Paging'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG'),
}

model ListShiftPersonnelsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListShiftPersonnelsResponseBody(name='body'),
}

async function listShiftPersonnelsWithOptions(request: ListShiftPersonnelsRequest, runtime: Util.RuntimeOptions): ListShiftPersonnelsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.beginTime)) {
    body['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.shiftPersonUID)) {
    body['ShiftPersonUID'] = request.shiftPersonUID;
  }
  if (!Util.isUnset(request.shiftScheduleIdentifier)) {
    body['ShiftScheduleIdentifier'] = request.shiftScheduleIdentifier;
  }
  if (!Util.isUnset(request.userType)) {
    body['UserType'] = request.userType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListShiftPersonnels',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listShiftPersonnels(request: ListShiftPersonnelsRequest): ListShiftPersonnelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listShiftPersonnelsWithOptions(request, runtime);
}

model ListShiftSchedulesRequest {
  owner?: string(name='Owner', example='1933790683****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  shiftScheduleName?: string(name='ShiftScheduleName'),
}

model ListShiftSchedulesResponseBody = {
  paging?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    shiftSchedules?: [ 
      {
        shiftScheduleIdentifier?: string(name='ShiftScheduleIdentifier', example='2ab6456ada634b2f938ee******9b45b'),
        shiftScheduleName?: string(name='ShiftScheduleName'),
      }
    ](name='ShiftSchedules'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Paging'),
  requestId?: string(name='RequestId', example='E6F0DBDD-5AD****'),
}

model ListShiftSchedulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListShiftSchedulesResponseBody(name='body'),
}

async function listShiftSchedulesWithOptions(request: ListShiftSchedulesRequest, runtime: Util.RuntimeOptions): ListShiftSchedulesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.shiftScheduleName)) {
    body['ShiftScheduleName'] = request.shiftScheduleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListShiftSchedules',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listShiftSchedules(request: ListShiftSchedulesRequest): ListShiftSchedulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listShiftSchedulesWithOptions(request, runtime);
}

model ListSuccessInstanceAmountRequest {
  projectId?: long(name='ProjectId', example='9527'),
}

model ListSuccessInstanceAmountResponseBody = {
  instanceStatusTrend?: {
    avgTrend?: [ 
      {
        count?: int32(name='Count', example='10'),
        timePoint?: string(name='TimePoint', example='01:00'),
      }
    ](name='AvgTrend'),
    todayTrend?: [ 
      {
        count?: int32(name='Count', example='10'),
        timePoint?: string(name='TimePoint', example='01:00'),
      }
    ](name='TodayTrend'),
    yesterdayTrend?: [ 
      {
        count?: int32(name='Count', example='10'),
        timePoint?: string(name='TimePoint', example='01:00'),
      }
    ](name='YesterdayTrend'),
  }(name='InstanceStatusTrend'),
  requestId?: string(name='RequestId', example='952795279527ab****'),
}

model ListSuccessInstanceAmountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSuccessInstanceAmountResponseBody(name='body'),
}

async function listSuccessInstanceAmountWithOptions(request: ListSuccessInstanceAmountRequest, runtime: Util.RuntimeOptions): ListSuccessInstanceAmountResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListSuccessInstanceAmount',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSuccessInstanceAmount(request: ListSuccessInstanceAmountRequest): ListSuccessInstanceAmountResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSuccessInstanceAmountWithOptions(request, runtime);
}

model ListTableLevelRequest {
  levelType?: int32(name='LevelType', example='1'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='123'),
}

model ListTableLevelResponseBody = {
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='abc'),
  success?: boolean(name='Success', example='true'),
  tableLevelInfo?: {
    levelList?: [ 
      {
        description?: string(name='Description'),
        levelId?: long(name='LevelId', example='123'),
        levelType?: int32(name='LevelType', example='1'),
        name?: string(name='Name'),
        projectId?: long(name='ProjectId', example='123'),
      }
    ](name='LevelList'),
    totalCount?: long(name='TotalCount', example='10'),
  }(name='TableLevelInfo'),
}

model ListTableLevelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTableLevelResponseBody(name='body'),
}

async function listTableLevelWithOptions(request: ListTableLevelRequest, runtime: Util.RuntimeOptions): ListTableLevelResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTableLevel',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTableLevel(request: ListTableLevelRequest): ListTableLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTableLevelWithOptions(request, runtime);
}

model ListTableThemeRequest {
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  parentId?: long(name='ParentId', example='121'),
  projectId?: long(name='ProjectId', example='123'),
}

model ListTableThemeResponseBody = {
  data?: {
    themeList?: [ 
      {
        createTimeStamp?: long(name='CreateTimeStamp', example='123432343243'),
        creator?: string(name='Creator', example='123455'),
        level?: int32(name='Level', example='1'),
        name?: string(name='Name'),
        parentId?: long(name='ParentId', example='122'),
        projectId?: long(name='ProjectId', example='123'),
        themeId?: long(name='ThemeId', example='123'),
      }
    ](name='ThemeList'),
    totalCount?: long(name='TotalCount', example='10'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='abcde'),
  success?: boolean(name='Success', example='true'),
}

model ListTableThemeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTableThemeResponseBody(name='body'),
}

async function listTableThemeWithOptions(request: ListTableThemeRequest, runtime: Util.RuntimeOptions): ListTableThemeResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTableTheme',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTableTheme(request: ListTableThemeRequest): ListTableThemeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTableThemeWithOptions(request, runtime);
}

model ListTopicsRequest {
  beginTime?: string(name='BeginTime', example='2019-03-24T00:00:00+0800'),
  endTime?: string(name='EndTime', example='2019-03-25T23:00:00+0800'),
  instanceId?: long(name='InstanceId', example='12345'),
  nodeId?: long(name='NodeId', example='1234'),
  owner?: string(name='Owner', example='952795****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  topicStatuses?: string(name='TopicStatuses', example='IGNORE,NEW,FIXING,RECOVER'),
  topicTypes?: string(name='TopicTypes', example='ERROR,SLOW'),
}

model ListTopicsResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    topics?: [ 
      {
        addTime?: long(name='AddTime', example='1553524393000'),
        fixTime?: long(name='FixTime', example='1553508465000'),
        happenTime?: long(name='HappenTime', example='1553508465000'),
        instanceId?: long(name='InstanceId', example='12345'),
        nodeId?: long(name='NodeId', example='1234'),
        nodeName?: string(name='NodeName'),
        nodeOwner?: string(name='NodeOwner', example='952795****'),
        projectId?: long(name='ProjectId', example='1234'),
        topicId?: long(name='TopicId', example='1234'),
        topicName?: string(name='TopicName'),
        topicStatus?: string(name='TopicStatus', example='NEW'),
        topicType?: string(name='TopicType', example='ERROR'),
      }
    ](name='Topics'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model ListTopicsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTopicsResponseBody(name='body'),
}

async function listTopicsWithOptions(request: ListTopicsRequest, runtime: Util.RuntimeOptions): ListTopicsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.beginTime)) {
    body['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.topicStatuses)) {
    body['TopicStatuses'] = request.topicStatuses;
  }
  if (!Util.isUnset(request.topicTypes)) {
    body['TopicTypes'] = request.topicTypes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListTopics',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTopics(request: ListTopicsRequest): ListTopicsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTopicsWithOptions(request, runtime);
}

model MountDirectoryRequest {
  targetId?: string(name='TargetId', example='album.339'),
  targetType?: string(name='TargetType', example='META_ALBUM'),
}

model MountDirectoryResponseBody = {
  data?: int32(name='Data', example='1'),
  errorCode?: string(name='ErrorCode', example='200'),
  errorMessage?: string(name='ErrorMessage', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='C27D4FB9-C59B-5E17-BD6C-1099B9D6A381'),
  success?: boolean(name='Success', example='true'),
}

model MountDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MountDirectoryResponseBody(name='body'),
}

async function mountDirectoryWithOptions(request: MountDirectoryRequest, runtime: Util.RuntimeOptions): MountDirectoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.targetId)) {
    body['TargetId'] = request.targetId;
  }
  if (!Util.isUnset(request.targetType)) {
    body['TargetType'] = request.targetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'MountDirectory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function mountDirectory(request: MountDirectoryRequest): MountDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return mountDirectoryWithOptions(request, runtime);
}

model OfflineNodeRequest {
  nodeId?: long(name='NodeId', example='1234'),
  projectId?: long(name='ProjectId', example='9527'),
}

model OfflineNodeResponseBody = {
  requestId?: string(name='RequestId', example='E6F0DBDD-5AD****'),
  success?: string(name='Success', example='true'),
}

model OfflineNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OfflineNodeResponseBody(name='body'),
}

async function offlineNodeWithOptions(request: OfflineNodeRequest, runtime: Util.RuntimeOptions): OfflineNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'OfflineNode',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function offlineNode(request: OfflineNodeRequest): OfflineNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return offlineNodeWithOptions(request, runtime);
}

model PublishDataServiceApiRequest {
  apiId?: long(name='ApiId', example='10000'),
  projectId?: long(name='ProjectId', example='10001'),
  tenantId?: long(name='TenantId', example='10002'),
}

model PublishDataServiceApiResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model PublishDataServiceApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublishDataServiceApiResponseBody(name='body'),
}

async function publishDataServiceApiWithOptions(request: PublishDataServiceApiRequest, runtime: Util.RuntimeOptions): PublishDataServiceApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PublishDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function publishDataServiceApi(request: PublishDataServiceApiRequest): PublishDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishDataServiceApiWithOptions(request, runtime);
}

model QueryDISyncTaskConfigProcessResultRequest {
  asyncProcessId?: long(name='AsyncProcessId', example='10'),
  projectId?: long(name='ProjectId', example='10000'),
  taskType?: string(name='TaskType', example='DI_REALTIME'),
}

model QueryDISyncTaskConfigProcessResultResponseBody = {
  data?: {
    message?: string(name='Message', example='fileId:[100] is invalid.'),
    status?: string(name='Status', example='success'),
    taskContent?: string(name='TaskContent', example='{"extend":{"mode":"migration_holo","resourceGroup":"280749","name":"h"},"type":"job","steps":[{"stepType":"mysql","parameter":{"connection":[{"datasourceType":"mysql","datasource":"mm","selectedTables":[{"schema":[{"tableInfos":[{"enable":true,"table":"m_v1","tableName":"m_v1"}]}],"dbName":"m"}]}]},"name":"reader","category":"reader"},{"stepType":"holo","parameter":{"datasource":"h","tableMappingRule":{"datasource":[{"tableRule":[{"srcTable":"m_v1","mergeIntoCycleType":"DEFAULT","hourDeltaEnable":false,"dstTable":"m.m_v1","dayDeltaEnable":false,"primaryKeyInfo":{"column":["id"],"type":"pk"},"dstCreateTableInfo":{"indexType":"m_v1","dataColumn":[{"columnSize":0,"name":"id","index":0,"comment":"","newDigit":0,"type":"int8","digit":0,"primaryKey":true}],"schemaName":"m","tableName":"m_v1"},"srcDbName":"m"],"srcDatasourceName":"mm"}],"totalTableMapping":1},"writeMode":"replay"},"name":"writer","category":"writer"}],"version":"2.0","order":{"hops":[{"from":"reader","to":"writer"}]}}'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='0bc1411515937635973****'),
  success?: boolean(name='Success', example='true'),
}

model QueryDISyncTaskConfigProcessResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDISyncTaskConfigProcessResultResponseBody(name='body'),
}

async function queryDISyncTaskConfigProcessResultWithOptions(request: QueryDISyncTaskConfigProcessResultRequest, runtime: Util.RuntimeOptions): QueryDISyncTaskConfigProcessResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asyncProcessId)) {
    query['AsyncProcessId'] = request.asyncProcessId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDISyncTaskConfigProcessResult',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDISyncTaskConfigProcessResult(request: QueryDISyncTaskConfigProcessResultRequest): QueryDISyncTaskConfigProcessResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDISyncTaskConfigProcessResultWithOptions(request, runtime);
}

model QueryPublicModelEngineRequest {
  projectId?: string(name='ProjectId', example='1234'),
  text?: string(name='Text', example='show dim tables'),
}

model QueryPublicModelEngineResponseBody = {
  requestId?: string(name='RequestId', example='4CFB2DED-7D9B-4C42-B4AA-CFF4991DFFF4'),
  returnValue?: [  map[string]any ](name='ReturnValue'),
}

model QueryPublicModelEngineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPublicModelEngineResponseBody(name='body'),
}

async function queryPublicModelEngineWithOptions(request: QueryPublicModelEngineRequest, runtime: Util.RuntimeOptions): QueryPublicModelEngineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryPublicModelEngine',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPublicModelEngine(request: QueryPublicModelEngineRequest): QueryPublicModelEngineResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPublicModelEngineWithOptions(request, runtime);
}

model RemoveProjectMemberFromRoleRequest {
  projectId?: long(name='ProjectId', example='27'),
  roleCode?: string(name='RoleCode', example='role_project_guest'),
  userId?: string(name='UserId', example='1234'),
}

model RemoveProjectMemberFromRoleResponseBody = {
  requestId?: string(name='RequestId', example='1AFAE64E-D1BE-432B-A9****'),
}

model RemoveProjectMemberFromRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveProjectMemberFromRoleResponseBody(name='body'),
}

async function removeProjectMemberFromRoleWithOptions(request: RemoveProjectMemberFromRoleRequest, runtime: Util.RuntimeOptions): RemoveProjectMemberFromRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.roleCode)) {
    query['RoleCode'] = request.roleCode;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveProjectMemberFromRole',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeProjectMemberFromRole(request: RemoveProjectMemberFromRoleRequest): RemoveProjectMemberFromRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeProjectMemberFromRoleWithOptions(request, runtime);
}

model RestartInstanceRequest {
  instanceId?: long(name='InstanceId', example='1234'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
}

model RestartInstanceResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='q32ety****'),
  success?: boolean(name='Success', example='true'),
}

model RestartInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RestartInstanceResponseBody(name='body'),
}

async function restartInstanceWithOptions(request: RestartInstanceRequest, runtime: Util.RuntimeOptions): RestartInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RestartInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function restartInstance(request: RestartInstanceRequest): RestartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartInstanceWithOptions(request, runtime);
}

model ResumeInstanceRequest {
  instanceId?: long(name='InstanceId', example='1234'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
}

model ResumeInstanceResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', example='true'),
}

model ResumeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResumeInstanceResponseBody(name='body'),
}

async function resumeInstanceWithOptions(request: ResumeInstanceRequest, runtime: Util.RuntimeOptions): ResumeInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ResumeInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resumeInstance(request: ResumeInstanceRequest): ResumeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return resumeInstanceWithOptions(request, runtime);
}

model RevokeColumnPermissionRequest {
  columns?: string(name='Columns', example='id,name'),
  maxComputeProjectName?: string(name='MaxComputeProjectName', example='aMaxcomputeProjectName'),
  revokeUserId?: string(name='RevokeUserId', example='267842600408993176'),
  revokeUserName?: string(name='RevokeUserName', example='RAM$dataworks_3h1_1:stsramuser'),
  tableName?: string(name='TableName', example='aTableName'),
  workspaceId?: long(name='WorkspaceId', example='12345'),
}

model RevokeColumnPermissionResponseBody = {
  requestId?: string(name='RequestId', example='0bc1ec92159376****'),
  revokeSuccess?: boolean(name='RevokeSuccess', example='true'),
}

model RevokeColumnPermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevokeColumnPermissionResponseBody(name='body'),
}

async function revokeColumnPermissionWithOptions(request: RevokeColumnPermissionRequest, runtime: Util.RuntimeOptions): RevokeColumnPermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.columns)) {
    query['Columns'] = request.columns;
  }
  if (!Util.isUnset(request.maxComputeProjectName)) {
    query['MaxComputeProjectName'] = request.maxComputeProjectName;
  }
  if (!Util.isUnset(request.revokeUserId)) {
    query['RevokeUserId'] = request.revokeUserId;
  }
  if (!Util.isUnset(request.revokeUserName)) {
    query['RevokeUserName'] = request.revokeUserName;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeColumnPermission',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function revokeColumnPermission(request: RevokeColumnPermissionRequest): RevokeColumnPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeColumnPermissionWithOptions(request, runtime);
}

model RevokeTablePermissionRequest {
  actions?: string(name='Actions', example='Select,Describe'),
  maxComputeProjectName?: string(name='MaxComputeProjectName', example='aMaxcomputeProjectName'),
  revokeUserId?: string(name='RevokeUserId', example='267842600408993176'),
  revokeUserName?: string(name='RevokeUserName', example='RAM$dataworks_3h1_1:stsramuser'),
  tableName?: string(name='TableName', example='aTableName'),
  workspaceId?: long(name='WorkspaceId', example='12345'),
}

model RevokeTablePermissionResponseBody = {
  requestId?: string(name='RequestId', example='0bc1ec92159376****'),
  revokeSuccess?: boolean(name='RevokeSuccess', example='true'),
}

model RevokeTablePermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevokeTablePermissionResponseBody(name='body'),
}

async function revokeTablePermissionWithOptions(request: RevokeTablePermissionRequest, runtime: Util.RuntimeOptions): RevokeTablePermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actions)) {
    query['Actions'] = request.actions;
  }
  if (!Util.isUnset(request.maxComputeProjectName)) {
    query['MaxComputeProjectName'] = request.maxComputeProjectName;
  }
  if (!Util.isUnset(request.revokeUserId)) {
    query['RevokeUserId'] = request.revokeUserId;
  }
  if (!Util.isUnset(request.revokeUserName)) {
    query['RevokeUserName'] = request.revokeUserName;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeTablePermission',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function revokeTablePermission(request: RevokeTablePermissionRequest): RevokeTablePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeTablePermissionWithOptions(request, runtime);
}

model RunCycleDagNodesRequest {
  bizBeginTime?: string(name='BizBeginTime', example='00:00:00'),
  bizEndTime?: string(name='BizEndTime', example='01:00:00'),
  endBizDate?: string(name='EndBizDate', example='2020-05-21 00:00:00'),
  excludeNodeIds?: string(name='ExcludeNodeIds', example='1234,123465'),
  includeNodeIds?: string(name='IncludeNodeIds', example='74324,74325'),
  name?: string(name='Name', example='xm_test'),
  nodeParams?: string(name='NodeParams', example='{74324:"a=123 b=456"}'),
  parallelism?: boolean(name='Parallelism', example='false'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
  rootNodeId?: long(name='RootNodeId', example='1234'),
  startBizDate?: string(name='StartBizDate', example='2020-05-20 00:00:00'),
  startFutureInstanceImmediately?: boolean(name='StartFutureInstanceImmediately', example='false'),
}

model RunCycleDagNodesResponseBody = {
  data?: [ long ](name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='>E6F0DBDD-5AD****'),
  success?: boolean(name='Success', example='true'),
}

model RunCycleDagNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RunCycleDagNodesResponseBody(name='body'),
}

async function runCycleDagNodesWithOptions(request: RunCycleDagNodesRequest, runtime: Util.RuntimeOptions): RunCycleDagNodesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizBeginTime)) {
    body['BizBeginTime'] = request.bizBeginTime;
  }
  if (!Util.isUnset(request.bizEndTime)) {
    body['BizEndTime'] = request.bizEndTime;
  }
  if (!Util.isUnset(request.endBizDate)) {
    body['EndBizDate'] = request.endBizDate;
  }
  if (!Util.isUnset(request.excludeNodeIds)) {
    body['ExcludeNodeIds'] = request.excludeNodeIds;
  }
  if (!Util.isUnset(request.includeNodeIds)) {
    body['IncludeNodeIds'] = request.includeNodeIds;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.nodeParams)) {
    body['NodeParams'] = request.nodeParams;
  }
  if (!Util.isUnset(request.parallelism)) {
    body['Parallelism'] = request.parallelism;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.rootNodeId)) {
    body['RootNodeId'] = request.rootNodeId;
  }
  if (!Util.isUnset(request.startBizDate)) {
    body['StartBizDate'] = request.startBizDate;
  }
  if (!Util.isUnset(request.startFutureInstanceImmediately)) {
    body['StartFutureInstanceImmediately'] = request.startFutureInstanceImmediately;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunCycleDagNodes',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function runCycleDagNodes(request: RunCycleDagNodesRequest): RunCycleDagNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return runCycleDagNodesWithOptions(request, runtime);
}

model RunManualDagNodesRequest {
  bizDate?: string(name='BizDate', example='2020-11-11 00:00:00'),
  dagParameters?: string(name='DagParameters', example='{"kaaaa": "vaaaaa", "kbbbb": "vbbbbb"}'),
  excludeNodeIds?: string(name='ExcludeNodeIds', example='123,456'),
  flowName?: string(name='FlowName', example='test_workflow'),
  includeNodeIds?: string(name='IncludeNodeIds', example='74324,74325'),
  nodeParameters?: string(name='NodeParameters', example='{"20000123121": "key1=val2 key2=val2", "20000123124": "kkkk=vvvvv aaaa=bbbb"}'),
  projectEnv?: string(name='ProjectEnv'),
  projectId?: long(name='ProjectId', example='123'),
  projectName?: string(name='ProjectName', example='test_workspace'),
}

model RunManualDagNodesResponseBody = {
  dagId?: long(name='DagId', example='700000123123141'),
  requestId?: string(name='RequestId', example='AASFDFSDFG-DFSDF-DFSDFD-SDFSDF'),
}

model RunManualDagNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RunManualDagNodesResponseBody(name='body'),
}

async function runManualDagNodesWithOptions(request: RunManualDagNodesRequest, runtime: Util.RuntimeOptions): RunManualDagNodesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizDate)) {
    body['BizDate'] = request.bizDate;
  }
  if (!Util.isUnset(request.dagParameters)) {
    body['DagParameters'] = request.dagParameters;
  }
  if (!Util.isUnset(request.excludeNodeIds)) {
    body['ExcludeNodeIds'] = request.excludeNodeIds;
  }
  if (!Util.isUnset(request.flowName)) {
    body['FlowName'] = request.flowName;
  }
  if (!Util.isUnset(request.includeNodeIds)) {
    body['IncludeNodeIds'] = request.includeNodeIds;
  }
  if (!Util.isUnset(request.nodeParameters)) {
    body['NodeParameters'] = request.nodeParameters;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunManualDagNodes',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function runManualDagNodes(request: RunManualDagNodesRequest): RunManualDagNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return runManualDagNodesWithOptions(request, runtime);
}

model RunSmokeTestRequest {
  bizdate?: string(name='Bizdate', example='2020-05-26 00:00:00'),
  name?: string(name='Name', example='xm_create_test'),
  nodeId?: long(name='NodeId', example='1234'),
  nodeParams?: string(name='NodeParams', example='bizdate=$bizdate tbods=$tbods'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
}

model RunSmokeTestResponseBody = {
  data?: long(name='Data', example='3333333'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', example='false'),
}

model RunSmokeTestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RunSmokeTestResponseBody(name='body'),
}

async function runSmokeTestWithOptions(request: RunSmokeTestRequest, runtime: Util.RuntimeOptions): RunSmokeTestResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.nodeParams)) {
    body['NodeParams'] = request.nodeParams;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunSmokeTest',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function runSmokeTest(request: RunSmokeTestRequest): RunSmokeTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return runSmokeTestWithOptions(request, runtime);
}

model RunTriggerNodeRequest {
  appId?: long(name='AppId', example='10001'),
  bizDate?: long(name='BizDate', example='1606200230105'),
  cycleTime?: long(name='CycleTime', example='1606200230105'),
  nodeId?: long(name='NodeId', example='10000011'),
}

model RunTriggerNodeResponseBody = {
  requestId?: string(name='RequestId', example='9BA675F1-F848-4752-A6E3-92ABA0616005'),
  success?: boolean(name='Success', example='true'),
}

model RunTriggerNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RunTriggerNodeResponseBody(name='body'),
}

async function runTriggerNodeWithOptions(request: RunTriggerNodeRequest, runtime: Util.RuntimeOptions): RunTriggerNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.bizDate)) {
    body['BizDate'] = request.bizDate;
  }
  if (!Util.isUnset(request.cycleTime)) {
    body['CycleTime'] = request.cycleTime;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunTriggerNode',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function runTriggerNode(request: RunTriggerNodeRequest): RunTriggerNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return runTriggerNodeWithOptions(request, runtime);
}

model ScanSensitiveDataRequest {
  data?: string(name='Data', example='13900001234'),
}

model ScanSensitiveDataResponseBody = {
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  sensitives?: map[string]any(name='Sensitives'),
}

model ScanSensitiveDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ScanSensitiveDataResponseBody(name='body'),
}

async function scanSensitiveDataWithOptions(request: ScanSensitiveDataRequest, runtime: Util.RuntimeOptions): ScanSensitiveDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ScanSensitiveData',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function scanSensitiveData(request: ScanSensitiveDataRequest): ScanSensitiveDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return scanSensitiveDataWithOptions(request, runtime);
}

model SearchMetaTablesRequest {
  appGuid?: string(name='AppGuid', example='odps.engine_name'),
  clusterId?: string(name='ClusterId', example='abc'),
  dataSourceType?: string(name='DataSourceType', example='emr'),
  entityType?: int32(name='EntityType', example='0'),
  keyword?: string(name='Keyword', example='test'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  schema?: string(name='Schema', example='default'),
}

model SearchMetaTablesResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        clusterId?: string(name='ClusterId', example='abc'),
        databaseName?: string(name='DatabaseName', example='abc'),
        entityType?: int32(name='EntityType', example='0'),
        envType?: int32(name='EnvType', example='1'),
        ownerId?: string(name='OwnerId', example='123'),
        projectId?: long(name='ProjectId', example='323'),
        projectName?: string(name='ProjectName', example='test'),
        schema?: string(name='Schema', example='default'),
        tableGuid?: string(name='TableGuid', example='odps.engine_name.test_name'),
        tableName?: string(name='TableName', example='test_name'),
        tenantId?: long(name='TenantId', example='12345'),
      }
    ](name='DataEntityList'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='100'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1ec92159376****'),
  success?: boolean(name='Success', example='true'),
}

model SearchMetaTablesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchMetaTablesResponseBody(name='body'),
}

async function searchMetaTablesWithOptions(request: SearchMetaTablesRequest, runtime: Util.RuntimeOptions): SearchMetaTablesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appGuid)) {
    query['AppGuid'] = request.appGuid;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.entityType)) {
    query['EntityType'] = request.entityType;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchMetaTables',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchMetaTables(request: SearchMetaTablesRequest): SearchMetaTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchMetaTablesWithOptions(request, runtime);
}

model SearchNodesByOutputRequest {
  outputs?: string(name='Outputs', example='aaaaa.1231412_out,bbbb.12313123_out'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
}

model SearchNodesByOutputResponseBody = {
  data?: map[string]any(name='Data', example='{ "test_0709_1.630003558_out": {  "nodeId": 21673,             "nodeName": "hour_sql",             "ownerId": 123123123124,             "cronExpress": "00 00 00-23/2 * * ?",             "repeatability": true,             "programType": "ODPS_SQL",             "projectId": 11111,             "schedulerType": "NORMAL",             "priority": 1,             "baselineId": 20001721,             "connection": "odps_first"         },         "test_0709_1.630003556_out": {             "nodeId": 21671,             "nodeName": "start",             "ownerId": 123141231231,             "cronExpress": "00 */10 00-23 * * ?",             "repeatability": true,             "programType": "VIRTUAL",             "projectId": 1111,             "schedulerType": "NORMAL",             "priority": 1,             "baselineId": 20001721         }     }'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='SDFSDFSDF-asdfDFSDF-SDFSDf-SDfSFD'),
  success?: boolean(name='Success', example='true'),
}

model SearchNodesByOutputResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchNodesByOutputResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request SearchNodesByOutputRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SearchNodesByOutputResponse
 */
// Deprecated
async function searchNodesByOutputWithOptions(request: SearchNodesByOutputRequest, runtime: Util.RuntimeOptions): SearchNodesByOutputResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.outputs)) {
    body['Outputs'] = request.outputs;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SearchNodesByOutput',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request SearchNodesByOutputRequest
  * @return SearchNodesByOutputResponse
 */
// Deprecated
async function searchNodesByOutput(request: SearchNodesByOutputRequest): SearchNodesByOutputResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchNodesByOutputWithOptions(request, runtime);
}

model SetDataSourceShareRequest {
  datasourceName?: string(name='DatasourceName', example='mysql_name'),
  envType?: string(name='EnvType', example='1'),
  projectId?: long(name='ProjectId', example='10000'),
  projectPermissions?: string(name='ProjectPermissions', example='[{"projectId":1000,"permission":"WRITE","sharedName":"PX_DATAHUB1.shared_name"}]'),
  userPermissions?: string(name='UserPermissions', example='[{"projectId":10000,"users":[{"userId":"276184575345452131","permission":"WRITE"}],"sharedName":"PX_DATAHUB1.shared_name"}]'),
}

model SetDataSourceShareResponseBody = {
  data?: {
    message?: string(name='Message', example='datasource is wrong'),
    status?: string(name='Status', example='success'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', example='true'),
}

model SetDataSourceShareResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDataSourceShareResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request SetDataSourceShareRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetDataSourceShareResponse
 */
// Deprecated
async function setDataSourceShareWithOptions(request: SetDataSourceShareRequest, runtime: Util.RuntimeOptions): SetDataSourceShareResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasourceName)) {
    query['DatasourceName'] = request.datasourceName;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectPermissions)) {
    query['ProjectPermissions'] = request.projectPermissions;
  }
  if (!Util.isUnset(request.userPermissions)) {
    query['UserPermissions'] = request.userPermissions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDataSourceShare',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request SetDataSourceShareRequest
  * @return SetDataSourceShareResponse
 */
// Deprecated
async function setDataSourceShare(request: SetDataSourceShareRequest): SetDataSourceShareResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDataSourceShareWithOptions(request, runtime);
}

model SetSuccessInstanceRequest {
  instanceId?: long(name='InstanceId', example='1234'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
}

model SetSuccessInstanceResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', example='true'),
}

model SetSuccessInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetSuccessInstanceResponseBody(name='body'),
}

async function setSuccessInstanceWithOptions(request: SetSuccessInstanceRequest, runtime: Util.RuntimeOptions): SetSuccessInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SetSuccessInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setSuccessInstance(request: SetSuccessInstanceRequest): SetSuccessInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return setSuccessInstanceWithOptions(request, runtime);
}

model StartDISyncInstanceRequest {
  fileId?: long(name='FileId', example='100'),
  projectId?: long(name='ProjectId', example='10000'),
  startParam?: string(name='StartParam', example='{"failoverLimit":{"count":10,"interval":30},"errorLimit":{"record":0},"ddlMarkMap":{"RENAMECOLUMN":"WARNING","DROPTABLE":"WARNING","CREATETABLE":"IGNORE","MODIFYCOLUMN":"WARNING","TRUNCATETABLE":"NORMAL","DROPCOLUMN":"IGNORE","ADDCOLUMN":"NORMAL","RENAMETABLE":"CRITICAL"}}'),
  taskType?: string(name='TaskType', example='DI_REALTIME'),
}

model StartDISyncInstanceResponseBody = {
  data?: {
    message?: string(name='Message', example='fileId:[100] is invalid.'),
    status?: string(name='Status', example='success'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='0bc1411515937635973****'),
  success?: boolean(name='Success', example='true'),
}

model StartDISyncInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartDISyncInstanceResponseBody(name='body'),
}

async function startDISyncInstanceWithOptions(request: StartDISyncInstanceRequest, runtime: Util.RuntimeOptions): StartDISyncInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.startParam)) {
    query['StartParam'] = request.startParam;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartDISyncInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startDISyncInstance(request: StartDISyncInstanceRequest): StartDISyncInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDISyncInstanceWithOptions(request, runtime);
}

model StartMigrationRequest {
  migrationId?: long(name='MigrationId', example='123456'),
  projectId?: long(name='ProjectId', example='123456'),
}

model StartMigrationResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='110001123445'),
  errorMessage?: string(name='ErrorMessage', example='test error msg'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='FSDFSDF-WERWER-XVCX-DSFSDF'),
  success?: boolean(name='Success', example='true'),
}

model StartMigrationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartMigrationResponseBody(name='body'),
}

async function startMigrationWithOptions(request: StartMigrationRequest, runtime: Util.RuntimeOptions): StartMigrationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.migrationId)) {
    body['MigrationId'] = request.migrationId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StartMigration',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startMigration(request: StartMigrationRequest): StartMigrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return startMigrationWithOptions(request, runtime);
}

model StopDISyncInstanceRequest {
  fileId?: long(name='FileId', example='100'),
  projectId?: long(name='ProjectId', example='10000'),
  taskType?: string(name='TaskType', example='DI_REALTIME'),
}

model StopDISyncInstanceResponseBody = {
  data?: {
    message?: string(name='Message', example='fileId:[100] is invalid.'),
    status?: string(name='Status', example='success'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='0bc1411515937635973****'),
  success?: boolean(name='Success', example='true'),
}

model StopDISyncInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopDISyncInstanceResponseBody(name='body'),
}

async function stopDISyncInstanceWithOptions(request: StopDISyncInstanceRequest, runtime: Util.RuntimeOptions): StopDISyncInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopDISyncInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopDISyncInstance(request: StopDISyncInstanceRequest): StopDISyncInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDISyncInstanceWithOptions(request, runtime);
}

model StopInstanceRequest {
  instanceId?: long(name='InstanceId', example='1234'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
}

model StopInstanceResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', example='true'),
}

model StopInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopInstanceResponseBody(name='body'),
}

async function stopInstanceWithOptions(request: StopInstanceRequest, runtime: Util.RuntimeOptions): StopInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StopInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopInstanceWithOptions(request, runtime);
}

model SubmitFileRequest {
  comment?: string(name='Comment'),
  fileId?: long(name='FileId', example='1000000'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
  skipAllDeployFileExtensions?: boolean(name='SkipAllDeployFileExtensions', example='false'),
}

model SubmitFileResponseBody = {
  data?: long(name='Data', example='3000001'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model SubmitFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitFileResponseBody(name='body'),
}

async function submitFileWithOptions(request: SubmitFileRequest, runtime: Util.RuntimeOptions): SubmitFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.skipAllDeployFileExtensions)) {
    body['SkipAllDeployFileExtensions'] = request.skipAllDeployFileExtensions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitFile(request: SubmitFileRequest): SubmitFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitFileWithOptions(request, runtime);
}

model SuspendInstanceRequest {
  instanceId?: long(name='InstanceId', example='1234'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
}

model SuspendInstanceResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ProjectNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0baf87f0159376****'),
  success?: boolean(name='Success', example='true'),
}

model SuspendInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SuspendInstanceResponseBody(name='body'),
}

async function suspendInstanceWithOptions(request: SuspendInstanceRequest, runtime: Util.RuntimeOptions): SuspendInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SuspendInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function suspendInstance(request: SuspendInstanceRequest): SuspendInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return suspendInstanceWithOptions(request, runtime);
}

model TerminateDISyncInstanceRequest {
  fileId?: long(name='FileId', example='100'),
  projectId?: long(name='ProjectId', example='10000'),
  taskType?: string(name='TaskType', example='DI_REALTIME'),
}

model TerminateDISyncInstanceResponseBody = {
  data?: {
    message?: string(name='Message', example='fileId:[100] is invalid.'),
    status?: string(name='Status', example='success'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='0bc1411515937635973****'),
  success?: boolean(name='Success', example='true'),
}

model TerminateDISyncInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TerminateDISyncInstanceResponseBody(name='body'),
}

async function terminateDISyncInstanceWithOptions(request: TerminateDISyncInstanceRequest, runtime: Util.RuntimeOptions): TerminateDISyncInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TerminateDISyncInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function terminateDISyncInstance(request: TerminateDISyncInstanceRequest): TerminateDISyncInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return terminateDISyncInstanceWithOptions(request, runtime);
}

model TestDataServiceApiRequest {
  apiId?: long(name='ApiId', description='API Id', example='12343'),
  bodyContent?: string(name='BodyContent', example='{"name":"test"}'),
  bodyParams?: [ 
    {
      paramKey?: string(name='ParamKey', example='name'),
      paramValue?: string(name='ParamValue', example='test'),
    }
  ](name='BodyParams'),
  headParams?: [ 
    {
      paramKey?: string(name='ParamKey', example='requestId'),
      paramValue?: string(name='ParamValue', example='abcd'),
    }
  ](name='HeadParams'),
  pathParams?: [ 
    {
      paramKey?: string(name='ParamKey', example='path1'),
      paramValue?: string(name='ParamValue', example='api'),
    }
  ](name='PathParams'),
  queryParam?: [ 
    {
      paramKey?: string(name='ParamKey', example='name'),
      paramValue?: string(name='ParamValue', example='test'),
    }
  ](name='QueryParam'),
}

model TestDataServiceApiResponseBody = {
  data?: {
    testId?: string(name='TestId', example='232432'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='abdsfewe'),
}

model TestDataServiceApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TestDataServiceApiResponseBody(name='body'),
}

async function testDataServiceApiWithOptions(request: TestDataServiceApiRequest, runtime: Util.RuntimeOptions): TestDataServiceApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.bodyContent)) {
    body['BodyContent'] = request.bodyContent;
  }
  if (!Util.isUnset(request.bodyParams)) {
    body['BodyParams'] = request.bodyParams;
  }
  if (!Util.isUnset(request.headParams)) {
    body['HeadParams'] = request.headParams;
  }
  if (!Util.isUnset(request.pathParams)) {
    body['PathParams'] = request.pathParams;
  }
  if (!Util.isUnset(request.queryParam)) {
    body['QueryParam'] = request.queryParam;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TestDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function testDataServiceApi(request: TestDataServiceApiRequest): TestDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return testDataServiceApiWithOptions(request, runtime);
}

model TestNetworkConnectionRequest {
  datasourceName?: string(name='DatasourceName', example='mysql_name'),
  envType?: string(name='EnvType', example='1'),
  projectId?: long(name='ProjectId', example='10000'),
  resourceGroup?: string(name='ResourceGroup', example='S_res_group_2XXXX4_1619100XXXXX'),
}

model TestNetworkConnectionResponseBody = {
  requestId?: string(name='RequestId', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', example='true'),
  taskList?: {
    connectMessage?: string(name='ConnectMessage'),
    connectStatus?: boolean(name='ConnectStatus', example='true'),
  }(name='TaskList'),
}

model TestNetworkConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TestNetworkConnectionResponseBody(name='body'),
}

async function testNetworkConnectionWithOptions(request: TestNetworkConnectionRequest, runtime: Util.RuntimeOptions): TestNetworkConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasourceName)) {
    query['DatasourceName'] = request.datasourceName;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.resourceGroup)) {
    query['ResourceGroup'] = request.resourceGroup;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TestNetworkConnection',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function testNetworkConnection(request: TestNetworkConnectionRequest): TestNetworkConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return testNetworkConnectionWithOptions(request, runtime);
}

model TopTenElapsedTimeInstanceRequest {
  projectId?: long(name='ProjectId', example='100000'),
}

model TopTenElapsedTimeInstanceResponseBody = {
  instanceConsumeTimeRank?: {
    consumeTimeRank?: [ 
      {
        businessDate?: long(name='BusinessDate', example='1600963200000'),
        consumed?: long(name='Consumed', example='1000'),
        instanceId?: long(name='InstanceId', example='95279527'),
        nodeId?: long(name='NodeId', example='9527'),
        nodeName?: string(name='NodeName'),
        owner?: string(name='Owner', example='952795279527'),
        programType?: int32(name='ProgramType', example='10'),
      }
    ](name='ConsumeTimeRank'),
    updateTime?: long(name='UpdateTime', example='1600963200000'),
  }(name='InstanceConsumeTimeRank'),
  requestId?: string(name='RequestId', example='6347364dadsfadf****'),
}

model TopTenElapsedTimeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TopTenElapsedTimeInstanceResponseBody(name='body'),
}

async function topTenElapsedTimeInstanceWithOptions(request: TopTenElapsedTimeInstanceRequest, runtime: Util.RuntimeOptions): TopTenElapsedTimeInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TopTenElapsedTimeInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function topTenElapsedTimeInstance(request: TopTenElapsedTimeInstanceRequest): TopTenElapsedTimeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return topTenElapsedTimeInstanceWithOptions(request, runtime);
}

model TopTenErrorTimesInstanceRequest {
  projectId?: long(name='ProjectId', example='9527'),
}

model TopTenErrorTimesInstanceResponseBody = {
  instanceErrorRank?: {
    errorRank?: [ 
      {
        count?: int32(name='Count', example='5'),
        nodeId?: long(name='NodeId', example='9527'),
        nodeName?: string(name='NodeName'),
        owner?: string(name='Owner', example='952795279527'),
        programType?: int32(name='ProgramType', example='10'),
        projectId?: long(name='ProjectId', example='9527'),
      }
    ](name='ErrorRank'),
    updateTime?: long(name='UpdateTime', example='1600963200000'),
  }(name='InstanceErrorRank'),
  requestId?: string(name='RequestId', example='952795279527****'),
}

model TopTenErrorTimesInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TopTenErrorTimesInstanceResponseBody(name='body'),
}

async function topTenErrorTimesInstanceWithOptions(request: TopTenErrorTimesInstanceRequest, runtime: Util.RuntimeOptions): TopTenErrorTimesInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TopTenErrorTimesInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function topTenErrorTimesInstance(request: TopTenErrorTimesInstanceRequest): TopTenErrorTimesInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return topTenErrorTimesInstanceWithOptions(request, runtime);
}

model UmountDirectoryRequest {
  targetId?: string(name='TargetId', example='album.339'),
  targetType?: string(name='TargetType', example='META_ALBUM'),
}

model UmountDirectoryResponseBody = {
  data?: int32(name='Data', example='1'),
  errorCode?: string(name='ErrorCode', example='200'),
  errorMessage?: string(name='ErrorMessage', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc5aa2716455247597991794e65bd'),
  success?: boolean(name='Success', example='true'),
}

model UmountDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UmountDirectoryResponseBody(name='body'),
}

async function umountDirectoryWithOptions(request: UmountDirectoryRequest, runtime: Util.RuntimeOptions): UmountDirectoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.targetId)) {
    body['TargetId'] = request.targetId;
  }
  if (!Util.isUnset(request.targetType)) {
    body['TargetType'] = request.targetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UmountDirectory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function umountDirectory(request: UmountDirectoryRequest): UmountDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return umountDirectoryWithOptions(request, runtime);
}

model UpdateBaselineRequest {
  alertEnabled?: boolean(name='AlertEnabled'),
  alertMarginThreshold?: int32(name='AlertMarginThreshold'),
  alertSettings?: [ 
    {
      alertInterval?: int32(name='AlertInterval'),
      alertMaximum?: int32(name='AlertMaximum'),
      alertMethods?: [ string ](name='AlertMethods'),
      alertRecipient?: string(name='AlertRecipient'),
      alertRecipientType?: string(name='AlertRecipientType'),
      alertType?: string(name='AlertType'),
      baselineAlertEnabled?: boolean(name='BaselineAlertEnabled'),
      dingRobots?: [ 
        {
          atAll?: boolean(name='AtAll'),
          webUrl?: string(name='WebUrl'),
        }
      ](name='DingRobots'),
      silenceEndTime?: string(name='SilenceEndTime'),
      silenceStartTime?: string(name='SilenceStartTime'),
      topicTypes?: [ string ](name='TopicTypes'),
      webhooks?: [ string ](name='Webhooks'),
    }
  ](name='AlertSettings'),
  baselineId?: long(name='BaselineId'),
  baselineName?: string(name='BaselineName'),
  baselineType?: string(name='BaselineType'),
  enabled?: boolean(name='Enabled'),
  nodeIds?: string(name='NodeIds'),
  overtimeSettings?: [ 
    {
      cycle?: int32(name='Cycle'),
      time?: string(name='Time'),
    }
  ](name='OvertimeSettings'),
  owner?: string(name='Owner'),
  priority?: int32(name='Priority'),
  projectId?: long(name='ProjectId'),
  removeNodeIds?: string(name='RemoveNodeIds'),
}

model UpdateBaselineShrinkRequest {
  alertEnabled?: boolean(name='AlertEnabled'),
  alertMarginThreshold?: int32(name='AlertMarginThreshold'),
  alertSettingsShrink?: string(name='AlertSettings'),
  baselineId?: long(name='BaselineId'),
  baselineName?: string(name='BaselineName'),
  baselineType?: string(name='BaselineType'),
  enabled?: boolean(name='Enabled'),
  nodeIds?: string(name='NodeIds'),
  overtimeSettingsShrink?: string(name='OvertimeSettings'),
  owner?: string(name='Owner'),
  priority?: int32(name='Priority'),
  projectId?: long(name='ProjectId'),
  removeNodeIds?: string(name='RemoveNodeIds'),
}

model UpdateBaselineResponseBody = {
  data?: boolean(name='Data'),
  dynamicErrorCode?: string(name='DynamicErrorCode'),
  dynamicErrorMessage?: string(name='DynamicErrorMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateBaselineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateBaselineResponseBody(name='body'),
}

async function updateBaselineWithOptions(tmpReq: UpdateBaselineRequest, runtime: Util.RuntimeOptions): UpdateBaselineResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateBaselineShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.alertSettings)) {
    request.alertSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.alertSettings, 'AlertSettings', 'json');
  }
  if (!Util.isUnset(tmpReq.overtimeSettings)) {
    request.overtimeSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.overtimeSettings, 'OvertimeSettings', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertEnabled)) {
    body['AlertEnabled'] = request.alertEnabled;
  }
  if (!Util.isUnset(request.alertMarginThreshold)) {
    body['AlertMarginThreshold'] = request.alertMarginThreshold;
  }
  if (!Util.isUnset(request.alertSettingsShrink)) {
    body['AlertSettings'] = request.alertSettingsShrink;
  }
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.baselineName)) {
    body['BaselineName'] = request.baselineName;
  }
  if (!Util.isUnset(request.baselineType)) {
    body['BaselineType'] = request.baselineType;
  }
  if (!Util.isUnset(request.enabled)) {
    body['Enabled'] = request.enabled;
  }
  if (!Util.isUnset(request.nodeIds)) {
    body['NodeIds'] = request.nodeIds;
  }
  if (!Util.isUnset(request.overtimeSettingsShrink)) {
    body['OvertimeSettings'] = request.overtimeSettingsShrink;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.removeNodeIds)) {
    body['RemoveNodeIds'] = request.removeNodeIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateBaseline',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateBaseline(request: UpdateBaselineRequest): UpdateBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateBaselineWithOptions(request, runtime);
}

model UpdateBusinessRequest {
  businessId?: long(name='BusinessId', example='300000'),
  businessName?: string(name='BusinessName', example='MyBusiness'),
  description?: string(name='Description', example='modified from my first business'),
  owner?: string(name='Owner', example='348428****'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model UpdateBusinessResponseBody = {
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateBusinessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateBusinessResponseBody(name='body'),
}

async function updateBusinessWithOptions(request: UpdateBusinessRequest, runtime: Util.RuntimeOptions): UpdateBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessId)) {
    body['BusinessId'] = request.businessId;
  }
  if (!Util.isUnset(request.businessName)) {
    body['BusinessName'] = request.businessName;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateBusiness',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateBusiness(request: UpdateBusinessRequest): UpdateBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateBusinessWithOptions(request, runtime);
}

model UpdateConnectionRequest {
  connectionId?: long(name='ConnectionId', example='1'),
  content?: string(name='Content', example='{"database":"dbname","instanceName":"instancename","password":"password","rdsOwnerId":"123","username":"username"}'),
  description?: string(name='Description', example='abc'),
  envType?: int32(name='EnvType', example='1'),
  status?: string(name='Status', example='ENABLED'),
}

model UpdateConnectionResponseBody = {
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc14115159376359****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateConnectionResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request UpdateConnectionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateConnectionResponse
 */
// Deprecated
async function updateConnectionWithOptions(request: UpdateConnectionRequest, runtime: Util.RuntimeOptions): UpdateConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionId)) {
    query['ConnectionId'] = request.connectionId;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateConnection',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'PUT',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request UpdateConnectionRequest
  * @return UpdateConnectionResponse
 */
// Deprecated
async function updateConnection(request: UpdateConnectionRequest): UpdateConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateConnectionWithOptions(request, runtime);
}

model UpdateDIProjectConfigRequest {
  destinationType?: string(name='DestinationType', example='odps'),
  projectConfig?: string(name='ProjectConfig', example='{"RENAMECOLUMN":"WARNING","DROPTABLE":"WARNING","CREATETABLE":"WARNING","MODIFYCOLUMN":"WARNING","TRUNCATETABLE":"WARNING","DROPCOLUMN":"WARNING","ADDCOLUMN":"WARNING","RENAMETABLE":"WARNING"}'),
  projectId?: long(name='ProjectId', example='10000'),
  sourceType?: string(name='SourceType', example='mysql'),
}

model UpdateDIProjectConfigResponseBody = {
  data?: {
    status?: string(name='Status', example='success'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDIProjectConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDIProjectConfigResponseBody(name='body'),
}

async function updateDIProjectConfigWithOptions(request: UpdateDIProjectConfigRequest, runtime: Util.RuntimeOptions): UpdateDIProjectConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.projectConfig)) {
    query['ProjectConfig'] = request.projectConfig;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDIProjectConfig',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDIProjectConfig(request: UpdateDIProjectConfigRequest): UpdateDIProjectConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDIProjectConfigWithOptions(request, runtime);
}

model UpdateDISyncTaskRequest {
  fileId?: long(name='FileId', example='1000000'),
  projectId?: long(name='ProjectId', example='10000'),
  taskContent?: string(name='TaskContent', example='{"type":"job","version":"2.0","steps":[{"stepType":"mysql","parameter":{"envType":1,"datasource":"mysql_pub","column":["id","name","create_time","age","score","t_01"],"connection":[{"datasource":"mysql_pub","table":["u_pk"]}],"where":"","splitPk":"id","encoding":"UTF-8"},"name":"Reader","category":"reader"},{"stepType":"odps","parameter":{"partition":"pt=${bizdate}","truncate":true,"datasource":"odps_first","envType":1,"column":["id","name","create_time","age","score","t_01"],"emptyAsNull":false,"tableComment":"null","table":"u_pk"},"name":"Writer","category":"writer"}],"setting":{"executeMode":null,"errorLimit":{"record":""},"speed":{"concurrent":2,"throttle":false}},"order":{"hops":[{"from":"Reader","to":"Writer"}]}}'),
  taskParam?: string(name='TaskParam', example='{"ResourceGroup":"S_res_group_XXX_XXXX"}'),
  taskType?: string(name='TaskType', example='DI_OFFLINE'),
}

model UpdateDISyncTaskResponseBody = {
  data?: {
    message?: string(name='Message', example='ResourceGroup:[S_res_group_XXX] is invalid.'),
    status?: string(name='Status', example='success'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='0bc1411515937635973****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDISyncTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDISyncTaskResponseBody(name='body'),
}

async function updateDISyncTaskWithOptions(request: UpdateDISyncTaskRequest, runtime: Util.RuntimeOptions): UpdateDISyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskContent)) {
    query['TaskContent'] = request.taskContent;
  }
  if (!Util.isUnset(request.taskParam)) {
    query['TaskParam'] = request.taskParam;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDISyncTask',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDISyncTask(request: UpdateDISyncTaskRequest): UpdateDISyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDISyncTaskWithOptions(request, runtime);
}

model UpdateDataServiceApiRequest {
  apiDescription?: string(name='ApiDescription'),
  apiId?: long(name='ApiId', example='10000'),
  apiPath?: string(name='ApiPath', example='/test/2'),
  projectId?: long(name='ProjectId', example='10001'),
  protocols?: string(name='Protocols', example='0,1'),
  registrationDetails?: string(name='RegistrationDetails', example='{"failedResultSample":"fail","registrationErrorCodes":[{"errorCode":"e1","errorMessage":"msg1","errorSolution":"sol1"},{"errorCode":"e2","errorMessage":"msg2","errorSolution":"sol2"}],"registrationRequestParameters":[{"columnName":"","defaultValue":"","exampleValue":"","isRequiredParameter":true,"parameterDataType":0,"parameterDescription":"","parameterName":"id","parameterOperator":0,"parameterPosition":1},{"columnName":"","defaultValue":"xx","exampleValue":"","isRequiredParameter":true,"parameterDataType":0,"parameterDescription":"","parameterName":"cc","parameterOperator":2,"parameterPosition":2}],"serviceContentType":1,"serviceHost":"http://www.baidu.com","servicePath":"/[uid]","serviceRequestBodyDescription":"body","successfulResultSample":"success"}'),
  requestMethod?: int32(name='RequestMethod', example='0'),
  responseContentType?: int32(name='ResponseContentType', example='0'),
  scriptDetails?: string(name='ScriptDetails', example='{"isPagedResponse":false,"script":"select id as id1, name as name1 from person where id=${inputid}","scriptConnection":{"connectionId":122786,"tableName":"person"},"scriptRequestParameters":[{"defaultValue":"","exampleValue":"","isRequiredParameter":true,"parameterDataType":0,"parameterDescription":"","parameterName":"inputid","parameterOperator":0,"parameterPosition":1}],"scriptResponseParameters":[{"exampleValue":"","parameterDataType":0,"parameterDescription":"","parameterName":"id1"},{"exampleValue":"","parameterDataType":0,"parameterDescription":"","parameterName":"name1"}]}'),
  tenantId?: long(name='TenantId', example='10001'),
  timeout?: int32(name='Timeout', example='10000'),
  visibleRange?: int32(name='VisibleRange', example='0'),
  wizardDetails?: string(name='WizardDetails', example='{"isPagedResponse":true,"wizardConnection":{"connectionId":122786,"tableName":"person"},"wizardRequestParameters":[{"columnName":"id","defaultValue":"","exampleValue":"1","isRequiredParameter":true,"parameterDataType":2,"parameterDescription":"","parameterName":"id","parameterOperator":0,"parameterPosition":0}],"wizardResponseParameters":[{"columnName":"id","exampleValue":"11","parameterDataType":2,"parameterDescription":"","parameterName":"id"}]}'),
}

model UpdateDataServiceApiResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDataServiceApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDataServiceApiResponseBody(name='body'),
}

async function updateDataServiceApiWithOptions(request: UpdateDataServiceApiRequest, runtime: Util.RuntimeOptions): UpdateDataServiceApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiDescription)) {
    body['ApiDescription'] = request.apiDescription;
  }
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.apiPath)) {
    body['ApiPath'] = request.apiPath;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.protocols)) {
    body['Protocols'] = request.protocols;
  }
  if (!Util.isUnset(request.registrationDetails)) {
    body['RegistrationDetails'] = request.registrationDetails;
  }
  if (!Util.isUnset(request.requestMethod)) {
    body['RequestMethod'] = request.requestMethod;
  }
  if (!Util.isUnset(request.responseContentType)) {
    body['ResponseContentType'] = request.responseContentType;
  }
  if (!Util.isUnset(request.scriptDetails)) {
    body['ScriptDetails'] = request.scriptDetails;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.timeout)) {
    body['Timeout'] = request.timeout;
  }
  if (!Util.isUnset(request.visibleRange)) {
    body['VisibleRange'] = request.visibleRange;
  }
  if (!Util.isUnset(request.wizardDetails)) {
    body['WizardDetails'] = request.wizardDetails;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDataServiceApi(request: UpdateDataServiceApiRequest): UpdateDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDataServiceApiWithOptions(request, runtime);
}

model UpdateDataSourceRequest {
  content?: string(name='Content', example='{"accessId":"xssssss","accessKey":"xsaxsaxsa","authType":2,"endpoint":"http://service.odps.aliyun.com/api","project":"xsaxsax","tag":"public"}'),
  dataSourceId?: long(name='DataSourceId', example='1'),
  description?: string(name='Description', example='xxx'),
  envType?: int32(name='EnvType', example='1'),
  status?: string(name='Status', example='ENABLED'),
}

model UpdateDataSourceResponseBody = {
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc14115159376359****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDataSourceResponseBody(name='body'),
}

async function updateDataSourceWithOptions(request: UpdateDataSourceRequest, runtime: Util.RuntimeOptions): UpdateDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.dataSourceId)) {
    query['DataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDataSource',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'PUT',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDataSource(request: UpdateDataSourceRequest): UpdateDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDataSourceWithOptions(request, runtime);
}

model UpdateFileRequest {
  advancedSettings?: string(name='AdvancedSettings', example='{"queue":"default","SPARK_CONF":"--conf spark.driver.memory=2g"}'),
  autoParsing?: boolean(name='AutoParsing', example='true'),
  autoRerunIntervalMillis?: int32(name='AutoRerunIntervalMillis', example='120000'),
  autoRerunTimes?: int32(name='AutoRerunTimes', example='3'),
  connectionName?: string(name='ConnectionName', example='odps_first'),
  content?: string(name='Content', example='SELECT "1";'),
  cronExpress?: string(name='CronExpress', example='00 00-59/5 1-23 * * ?'),
  cycleType?: string(name='CycleType', example='NOT_DAY'),
  dependentNodeIdList?: string(name='DependentNodeIdList', example='5,10,15,20'),
  dependentType?: string(name='DependentType', example='USER_DEFINE'),
  endEffectDate?: long(name='EndEffectDate', example='4155787800000'),
  fileDescription?: string(name='FileDescription'),
  fileFolderPath?: string(name='FileFolderPath'),
  fileId?: long(name='FileId', example='100000001'),
  fileName?: string(name='FileName', example='ods_user_info_d'),
  inputList?: string(name='InputList', example='project_root,project.file1,project.001_out'),
  inputParameters?: string(name='InputParameters', example='[{"ValueSource": "project_001.first_node:bizdate_param","ParameterName": "bizdate_input"}]'),
  outputList?: string(name='OutputList', example='dw_project.ods_user_info_d'),
  outputParameters?: string(name='OutputParameters', example='[{"Type": 1,"Value": "${bizdate}","ParameterName": "bizdate_param"}]'),
  owner?: string(name='Owner', example='18023848927592'),
  paraValue?: string(name='ParaValue', example='x=a y=b z=c'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
  rerunMode?: string(name='RerunMode', example='ALL_ALLOWED'),
  resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', example='default_group'),
  schedulerType?: string(name='SchedulerType', example='NORMAL'),
  startEffectDate?: long(name='StartEffectDate', example='936923400000'),
  startImmediately?: boolean(name='StartImmediately', example='true'),
  stop?: boolean(name='Stop', example='false'),
}

model UpdateFileResponseBody = {
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFGH-IJKLMNOPQ'),
  success?: boolean(name='Success', example='true'),
}

model UpdateFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFileResponseBody(name='body'),
}

async function updateFileWithOptions(request: UpdateFileRequest, runtime: Util.RuntimeOptions): UpdateFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.advancedSettings)) {
    body['AdvancedSettings'] = request.advancedSettings;
  }
  if (!Util.isUnset(request.autoParsing)) {
    body['AutoParsing'] = request.autoParsing;
  }
  if (!Util.isUnset(request.autoRerunIntervalMillis)) {
    body['AutoRerunIntervalMillis'] = request.autoRerunIntervalMillis;
  }
  if (!Util.isUnset(request.autoRerunTimes)) {
    body['AutoRerunTimes'] = request.autoRerunTimes;
  }
  if (!Util.isUnset(request.connectionName)) {
    body['ConnectionName'] = request.connectionName;
  }
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.cronExpress)) {
    body['CronExpress'] = request.cronExpress;
  }
  if (!Util.isUnset(request.cycleType)) {
    body['CycleType'] = request.cycleType;
  }
  if (!Util.isUnset(request.dependentNodeIdList)) {
    body['DependentNodeIdList'] = request.dependentNodeIdList;
  }
  if (!Util.isUnset(request.dependentType)) {
    body['DependentType'] = request.dependentType;
  }
  if (!Util.isUnset(request.endEffectDate)) {
    body['EndEffectDate'] = request.endEffectDate;
  }
  if (!Util.isUnset(request.fileDescription)) {
    body['FileDescription'] = request.fileDescription;
  }
  if (!Util.isUnset(request.fileFolderPath)) {
    body['FileFolderPath'] = request.fileFolderPath;
  }
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.fileName)) {
    body['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.inputList)) {
    body['InputList'] = request.inputList;
  }
  if (!Util.isUnset(request.inputParameters)) {
    body['InputParameters'] = request.inputParameters;
  }
  if (!Util.isUnset(request.outputList)) {
    body['OutputList'] = request.outputList;
  }
  if (!Util.isUnset(request.outputParameters)) {
    body['OutputParameters'] = request.outputParameters;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.paraValue)) {
    body['ParaValue'] = request.paraValue;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.rerunMode)) {
    body['RerunMode'] = request.rerunMode;
  }
  if (!Util.isUnset(request.resourceGroupIdentifier)) {
    body['ResourceGroupIdentifier'] = request.resourceGroupIdentifier;
  }
  if (!Util.isUnset(request.schedulerType)) {
    body['SchedulerType'] = request.schedulerType;
  }
  if (!Util.isUnset(request.startEffectDate)) {
    body['StartEffectDate'] = request.startEffectDate;
  }
  if (!Util.isUnset(request.startImmediately)) {
    body['StartImmediately'] = request.startImmediately;
  }
  if (!Util.isUnset(request.stop)) {
    body['Stop'] = request.stop;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateFile(request: UpdateFileRequest): UpdateFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFileWithOptions(request, runtime);
}

model UpdateFolderRequest {
  folderId?: string(name='FolderId', example='2735c2c19d58'),
  folderName?: string(name='FolderName', example='MySecondFolder'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model UpdateFolderResponseBody = {
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateFolderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFolderResponseBody(name='body'),
}

async function updateFolderWithOptions(request: UpdateFolderRequest, runtime: Util.RuntimeOptions): UpdateFolderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderId)) {
    body['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.folderName)) {
    body['FolderName'] = request.folderName;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFolder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateFolder(request: UpdateFolderRequest): UpdateFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFolderWithOptions(request, runtime);
}

model UpdateIDEEventResultRequest {
  checkResult?: string(name='CheckResult', example='OK'),
  checkResultTip?: string(name='CheckResultTip', example='Succeeded'),
  extensionCode?: string(name='ExtensionCode', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
  messageId?: string(name='MessageId', description='扩展点消息UUID', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
}

model UpdateIDEEventResultResponseBody = {
  requestId?: string(name='RequestId', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
}

model UpdateIDEEventResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateIDEEventResultResponseBody(name='body'),
}

async function updateIDEEventResultWithOptions(request: UpdateIDEEventResultRequest, runtime: Util.RuntimeOptions): UpdateIDEEventResultResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.checkResult)) {
    body['CheckResult'] = request.checkResult;
  }
  if (!Util.isUnset(request.checkResultTip)) {
    body['CheckResultTip'] = request.checkResultTip;
  }
  if (!Util.isUnset(request.extensionCode)) {
    body['ExtensionCode'] = request.extensionCode;
  }
  if (!Util.isUnset(request.messageId)) {
    body['MessageId'] = request.messageId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateIDEEventResult',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateIDEEventResult(request: UpdateIDEEventResultRequest): UpdateIDEEventResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateIDEEventResultWithOptions(request, runtime);
}

model UpdateMetaCategoryRequest {
  categoryId?: long(name='CategoryId', example='2'),
  comment?: string(name='Comment', example='category name'),
  name?: string(name='Name', example='category name'),
}

model UpdateMetaCategoryResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1ec92159376'),
  success?: boolean(name='Success', example='true'),
}

model UpdateMetaCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMetaCategoryResponseBody(name='body'),
}

async function updateMetaCategoryWithOptions(request: UpdateMetaCategoryRequest, runtime: Util.RuntimeOptions): UpdateMetaCategoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.categoryId)) {
    body['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMetaCategory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMetaCategory(request: UpdateMetaCategoryRequest): UpdateMetaCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMetaCategoryWithOptions(request, runtime);
}

model UpdateMetaCollectionRequest {
  comment?: string(name='Comment', example='this is a comment'),
  name?: string(name='Name', example='myCollectionName'),
  qualifiedName?: string(name='QualifiedName', example='album.396397'),
}

model UpdateMetaCollectionResponseBody = {
  errorCode?: string(name='ErrorCode', example='9999'),
  errorMessage?: string(name='ErrorMessage', example='The specified product does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-E****'),
  status?: boolean(name='Status', example='true'),
  success?: boolean(name='Success', example='true'),
}

model UpdateMetaCollectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMetaCollectionResponseBody(name='body'),
}

async function updateMetaCollectionWithOptions(request: UpdateMetaCollectionRequest, runtime: Util.RuntimeOptions): UpdateMetaCollectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.qualifiedName)) {
    query['QualifiedName'] = request.qualifiedName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMetaCollection',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMetaCollection(request: UpdateMetaCollectionRequest): UpdateMetaCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMetaCollectionWithOptions(request, runtime);
}

model UpdateMetaTableRequest {
  addedLabels?: string(name='AddedLabels', example='a,b,c'),
  caption?: string(name='Caption'),
  categoryId?: long(name='CategoryId', example='101'),
  envType?: int32(name='EnvType', example='1'),
  newOwnerId?: string(name='NewOwnerId', example='12345'),
  projectId?: long(name='ProjectId', example='101'),
  removedLabels?: string(name='RemovedLabels', example='a,b,c'),
  schema?: string(name='Schema'),
  tableGuid?: string(name='TableGuid', example='odps.test.table1'),
  tableName?: string(name='TableName', example='table1'),
  visibility?: int32(name='Visibility', example='1'),
}

model UpdateMetaTableResponseBody = {
  requestId?: string(name='RequestId', example='abcde'),
  updateResult?: boolean(name='UpdateResult', example='true'),
}

model UpdateMetaTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMetaTableResponseBody(name='body'),
}

async function updateMetaTableWithOptions(request: UpdateMetaTableRequest, runtime: Util.RuntimeOptions): UpdateMetaTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.caption)) {
    query['Caption'] = request.caption;
  }
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.newOwnerId)) {
    query['NewOwnerId'] = request.newOwnerId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.visibility)) {
    query['Visibility'] = request.visibility;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.addedLabels)) {
    body['AddedLabels'] = request.addedLabels;
  }
  if (!Util.isUnset(request.removedLabels)) {
    body['RemovedLabels'] = request.removedLabels;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMetaTable',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMetaTable(request: UpdateMetaTableRequest): UpdateMetaTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMetaTableWithOptions(request, runtime);
}

model UpdateMetaTableIntroWikiRequest {
  content?: string(name='Content', example='abc'),
  tableGuid?: string(name='TableGuid', example='odps.test.table1'),
}

model UpdateMetaTableIntroWikiResponseBody = {
  requestId?: string(name='RequestId', example='abcde'),
  updateResult?: boolean(name='UpdateResult', example='true'),
}

model UpdateMetaTableIntroWikiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMetaTableIntroWikiResponseBody(name='body'),
}

async function updateMetaTableIntroWikiWithOptions(request: UpdateMetaTableIntroWikiRequest, runtime: Util.RuntimeOptions): UpdateMetaTableIntroWikiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMetaTableIntroWiki',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMetaTableIntroWiki(request: UpdateMetaTableIntroWikiRequest): UpdateMetaTableIntroWikiResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMetaTableIntroWikiWithOptions(request, runtime);
}

model UpdateNodeOwnerRequest {
  nodeId?: long(name='NodeId', example='1234'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
  userId?: string(name='UserId', example='19337906836551'),
}

model UpdateNodeOwnerResponseBody = {
  requestId?: string(name='RequestId', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateNodeOwnerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateNodeOwnerResponseBody(name='body'),
}

async function updateNodeOwnerWithOptions(request: UpdateNodeOwnerRequest, runtime: Util.RuntimeOptions): UpdateNodeOwnerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateNodeOwner',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateNodeOwner(request: UpdateNodeOwnerRequest): UpdateNodeOwnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNodeOwnerWithOptions(request, runtime);
}

model UpdateNodeRunModeRequest {
  nodeId?: long(name='NodeId', example='1234'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
  schedulerType?: int32(name='SchedulerType', example='0'),
}

model UpdateNodeRunModeResponseBody = {
  requestId?: string(name='RequestId', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateNodeRunModeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateNodeRunModeResponseBody(name='body'),
}

async function updateNodeRunModeWithOptions(request: UpdateNodeRunModeRequest, runtime: Util.RuntimeOptions): UpdateNodeRunModeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.schedulerType)) {
    body['SchedulerType'] = request.schedulerType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateNodeRunMode',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateNodeRunMode(request: UpdateNodeRunModeRequest): UpdateNodeRunModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNodeRunModeWithOptions(request, runtime);
}

model UpdateQualityFollowerRequest {
  alarmMode?: int32(name='AlarmMode', example='2'),
  follower?: string(name='Follower', example='1912232****'),
  followerId?: long(name='FollowerId', example='1234'),
  projectName?: string(name='ProjectName', example='autotest'),
}

model UpdateQualityFollowerResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='401'),
  errorMessage?: string(name='ErrorMessage', example='You have no permission'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='576b9457-2cf5-4****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateQualityFollowerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateQualityFollowerResponseBody(name='body'),
}

async function updateQualityFollowerWithOptions(request: UpdateQualityFollowerRequest, runtime: Util.RuntimeOptions): UpdateQualityFollowerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alarmMode)) {
    body['AlarmMode'] = request.alarmMode;
  }
  if (!Util.isUnset(request.follower)) {
    body['Follower'] = request.follower;
  }
  if (!Util.isUnset(request.followerId)) {
    body['FollowerId'] = request.followerId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateQualityFollower',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateQualityFollower(request: UpdateQualityFollowerRequest): UpdateQualityFollowerResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateQualityFollowerWithOptions(request, runtime);
}

model UpdateQualityRuleRequest {
  blockType?: int32(name='BlockType', example='0'),
  checker?: int32(name='Checker', example='9'),
  comment?: string(name='Comment'),
  criticalThreshold?: string(name='CriticalThreshold', example='10'),
  entityId?: long(name='EntityId', example='123'),
  expectValue?: string(name='ExpectValue', example='300'),
  id?: long(name='Id', example='1234'),
  methodName?: string(name='MethodName', example='table_count'),
  openSwitch?: boolean(name='OpenSwitch', example='true'),
  operator?: string(name='Operator', example='>'),
  predictType?: int32(name='PredictType', example='0'),
  projectName?: string(name='ProjectName', example='autotest'),
  property?: string(name='Property', example='id'),
  propertyType?: string(name='PropertyType', example='bigint'),
  ruleName?: string(name='RuleName', example='123'),
  ruleType?: int32(name='RuleType', example='0'),
  templateId?: int32(name='TemplateId', example='7'),
  trend?: string(name='Trend', example='up'),
  warningThreshold?: string(name='WarningThreshold', example='5'),
  whereCondition?: string(name='WhereCondition', example='dt=$[yyyymmdd]'),
}

model UpdateQualityRuleResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='0'),
  errorMessage?: string(name='ErrorMessage', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='576b9457-2cf5-4****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateQualityRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateQualityRuleResponseBody(name='body'),
}

async function updateQualityRuleWithOptions(request: UpdateQualityRuleRequest, runtime: Util.RuntimeOptions): UpdateQualityRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.blockType)) {
    body['BlockType'] = request.blockType;
  }
  if (!Util.isUnset(request.checker)) {
    body['Checker'] = request.checker;
  }
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.criticalThreshold)) {
    body['CriticalThreshold'] = request.criticalThreshold;
  }
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.expectValue)) {
    body['ExpectValue'] = request.expectValue;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.methodName)) {
    body['MethodName'] = request.methodName;
  }
  if (!Util.isUnset(request.openSwitch)) {
    body['OpenSwitch'] = request.openSwitch;
  }
  if (!Util.isUnset(request.operator)) {
    body['Operator'] = request.operator;
  }
  if (!Util.isUnset(request.predictType)) {
    body['PredictType'] = request.predictType;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.property)) {
    body['Property'] = request.property;
  }
  if (!Util.isUnset(request.propertyType)) {
    body['PropertyType'] = request.propertyType;
  }
  if (!Util.isUnset(request.ruleName)) {
    body['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.ruleType)) {
    body['RuleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.trend)) {
    body['Trend'] = request.trend;
  }
  if (!Util.isUnset(request.warningThreshold)) {
    body['WarningThreshold'] = request.warningThreshold;
  }
  if (!Util.isUnset(request.whereCondition)) {
    body['WhereCondition'] = request.whereCondition;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateQualityRule',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateQualityRule(request: UpdateQualityRuleRequest): UpdateQualityRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateQualityRuleWithOptions(request, runtime);
}

model UpdateRemindRequest {
  alertInterval?: int32(name='AlertInterval', example='1800'),
  alertMethods?: string(name='AlertMethods', example='SMS,MAIL'),
  alertTargets?: string(name='AlertTargets', example='9527952795279527'),
  alertUnit?: string(name='AlertUnit', example='OWNER'),
  baselineIds?: string(name='BaselineIds', example='1,2,3'),
  bizProcessIds?: string(name='BizProcessIds', example='1,2,3'),
  detail?: string(name='Detail', example='{"hour":23,"minu":59}'),
  dndEnd?: string(name='DndEnd', example='08:00'),
  maxAlertTimes?: int32(name='MaxAlertTimes', example='3'),
  nodeIds?: string(name='NodeIds', example='1,2,3'),
  projectId?: long(name='ProjectId', example='1234'),
  remindId?: long(name='RemindId', example='1234'),
  remindName?: string(name='RemindName', example='update_remindname'),
  remindType?: string(name='RemindType', example='FINISHED'),
  remindUnit?: string(name='RemindUnit', example='NODE'),
  robotUrls?: string(name='RobotUrls', example='https://oapi.dingtalk.com/robot/send?access_token=******************************'),
  useFlag?: boolean(name='UseFlag', example='true'),
  webhooks?: string(name='Webhooks', example='https://open.feishu.cn/open-apis/bot/v2/hook/*******'),
}

model UpdateRemindResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateRemindResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateRemindResponseBody(name='body'),
}

async function updateRemindWithOptions(request: UpdateRemindRequest, runtime: Util.RuntimeOptions): UpdateRemindResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertInterval)) {
    body['AlertInterval'] = request.alertInterval;
  }
  if (!Util.isUnset(request.alertMethods)) {
    body['AlertMethods'] = request.alertMethods;
  }
  if (!Util.isUnset(request.alertTargets)) {
    body['AlertTargets'] = request.alertTargets;
  }
  if (!Util.isUnset(request.alertUnit)) {
    body['AlertUnit'] = request.alertUnit;
  }
  if (!Util.isUnset(request.baselineIds)) {
    body['BaselineIds'] = request.baselineIds;
  }
  if (!Util.isUnset(request.bizProcessIds)) {
    body['BizProcessIds'] = request.bizProcessIds;
  }
  if (!Util.isUnset(request.detail)) {
    body['Detail'] = request.detail;
  }
  if (!Util.isUnset(request.dndEnd)) {
    body['DndEnd'] = request.dndEnd;
  }
  if (!Util.isUnset(request.maxAlertTimes)) {
    body['MaxAlertTimes'] = request.maxAlertTimes;
  }
  if (!Util.isUnset(request.nodeIds)) {
    body['NodeIds'] = request.nodeIds;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.remindId)) {
    body['RemindId'] = request.remindId;
  }
  if (!Util.isUnset(request.remindName)) {
    body['RemindName'] = request.remindName;
  }
  if (!Util.isUnset(request.remindType)) {
    body['RemindType'] = request.remindType;
  }
  if (!Util.isUnset(request.remindUnit)) {
    body['RemindUnit'] = request.remindUnit;
  }
  if (!Util.isUnset(request.robotUrls)) {
    body['RobotUrls'] = request.robotUrls;
  }
  if (!Util.isUnset(request.useFlag)) {
    body['UseFlag'] = request.useFlag;
  }
  if (!Util.isUnset(request.webhooks)) {
    body['Webhooks'] = request.webhooks;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRemind',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateRemind(request: UpdateRemindRequest): UpdateRemindResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRemindWithOptions(request, runtime);
}

model UpdateTableRequest {
  appGuid?: string(name='AppGuid', example='odps.test'),
  categoryId?: long(name='CategoryId', example='101'),
  columns?: [ 
    {
      columnName?: string(name='ColumnName', example='abc'),
      columnNameCn?: string(name='ColumnNameCn'),
      columnType?: string(name='ColumnType', example='string'),
      comment?: string(name='Comment'),
      isPartitionCol?: boolean(name='IsPartitionCol', example='0'),
      length?: int32(name='Length', example='10'),
      seqNumber?: int32(name='SeqNumber', example='1'),
    }
  ](name='Columns'),
  comment?: string(name='Comment'),
  createIfNotExists?: boolean(name='CreateIfNotExists', example='true'),
  endpoint?: string(name='Endpoint', example='odps://'),
  envType?: int32(name='EnvType', example='1'),
  externalTableType?: string(name='ExternalTableType', example='1'),
  hasPart?: int32(name='HasPart', example='0'),
  isView?: int32(name='IsView', example='0'),
  lifeCycle?: int32(name='LifeCycle', example='10'),
  location?: string(name='Location', example='location'),
  logicalLevelId?: long(name='LogicalLevelId', example='101'),
  ownerId?: string(name='OwnerId'),
  physicsLevelId?: long(name='PhysicsLevelId', example='101'),
  projectId?: long(name='ProjectId', example='101'),
  schema?: string(name='Schema', example='default'),
  tableName?: string(name='TableName', example='abc'),
  themes?: [ 
    {
      themeId?: long(name='ThemeId', example='101'),
      themeLevel?: int32(name='ThemeLevel', example='101'),
    }
  ](name='Themes'),
  visibility?: int32(name='Visibility', example='1'),
}

model UpdateTableResponseBody = {
  requestId?: string(name='RequestId', example='abcde'),
  taskInfo?: {
    content?: string(name='Content', example='success'),
    nextTaskId?: string(name='NextTaskId', example='abc1'),
    status?: string(name='Status', example='success'),
    taskId?: string(name='TaskId', example='abc'),
  }(name='TaskInfo'),
}

model UpdateTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTableResponseBody(name='body'),
}

async function updateTableWithOptions(request: UpdateTableRequest, runtime: Util.RuntimeOptions): UpdateTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appGuid)) {
    query['AppGuid'] = request.appGuid;
  }
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.createIfNotExists)) {
    query['CreateIfNotExists'] = request.createIfNotExists;
  }
  if (!Util.isUnset(request.externalTableType)) {
    query['ExternalTableType'] = request.externalTableType;
  }
  if (!Util.isUnset(request.hasPart)) {
    query['HasPart'] = request.hasPart;
  }
  if (!Util.isUnset(request.isView)) {
    query['IsView'] = request.isView;
  }
  if (!Util.isUnset(request.lifeCycle)) {
    query['LifeCycle'] = request.lifeCycle;
  }
  if (!Util.isUnset(request.location)) {
    query['Location'] = request.location;
  }
  if (!Util.isUnset(request.logicalLevelId)) {
    query['LogicalLevelId'] = request.logicalLevelId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.physicsLevelId)) {
    query['PhysicsLevelId'] = request.physicsLevelId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.visibility)) {
    query['Visibility'] = request.visibility;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.columns)) {
    body['Columns'] = request.columns;
  }
  if (!Util.isUnset(request.endpoint)) {
    body['Endpoint'] = request.endpoint;
  }
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.themes)) {
    body['Themes'] = request.themes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTable',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTable(request: UpdateTableRequest): UpdateTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTableWithOptions(request, runtime);
}

model UpdateTableAddColumnRequest {
  column?: [ 
    {
      columnName?: string(name='ColumnName', example='abc'),
      columnNameCn?: string(name='ColumnNameCn'),
      columnType?: string(name='ColumnType', example='string'),
      comment?: string(name='Comment'),
    }
  ](name='Column'),
  tableGuid?: string(name='TableGuid', example='odps.engine_name.table_name'),
}

model UpdateTableAddColumnResponseBody = {
  requestId?: string(name='RequestId', example='abc'),
  taskInfo?: {
    content?: string(name='Content', example='success'),
    nextTaskId?: string(name='NextTaskId', example='abc1'),
    status?: string(name='Status', example='success'),
    taskId?: string(name='TaskId', example='abc2'),
  }(name='TaskInfo'),
}

model UpdateTableAddColumnResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTableAddColumnResponseBody(name='body'),
}

async function updateTableAddColumnWithOptions(request: UpdateTableAddColumnRequest, runtime: Util.RuntimeOptions): UpdateTableAddColumnResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.column)) {
    body['Column'] = request.column;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTableAddColumn',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTableAddColumn(request: UpdateTableAddColumnRequest): UpdateTableAddColumnResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTableAddColumnWithOptions(request, runtime);
}

model UpdateTableLevelRequest {
  description?: string(name='Description'),
  levelId?: long(name='LevelId', example='123'),
  levelType?: int32(name='LevelType', example='1'),
  name?: string(name='Name'),
  projectId?: long(name='ProjectId', example='123'),
}

model UpdateTableLevelResponseBody = {
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='abcde'),
  success?: boolean(name='Success', example='true'),
  updateResult?: boolean(name='UpdateResult', example='true'),
}

model UpdateTableLevelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTableLevelResponseBody(name='body'),
}

async function updateTableLevelWithOptions(request: UpdateTableLevelRequest, runtime: Util.RuntimeOptions): UpdateTableLevelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.levelId)) {
    query['LevelId'] = request.levelId;
  }
  if (!Util.isUnset(request.levelType)) {
    query['LevelType'] = request.levelType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTableLevel',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTableLevel(request: UpdateTableLevelRequest): UpdateTableLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTableLevelWithOptions(request, runtime);
}

model UpdateTableModelInfoRequest {
  firstLevelThemeId?: long(name='FirstLevelThemeId', example='101'),
  levelId?: long(name='LevelId', example='101'),
  levelType?: int32(name='LevelType', example='1'),
  secondLevelThemeId?: long(name='SecondLevelThemeId', example='101'),
  tableGuid?: string(name='TableGuid', example='odps.test.table1'),
}

model UpdateTableModelInfoResponseBody = {
  requestId?: string(name='RequestId', example='abcde'),
  updateResult?: boolean(name='UpdateResult', example='true'),
}

model UpdateTableModelInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTableModelInfoResponseBody(name='body'),
}

async function updateTableModelInfoWithOptions(request: UpdateTableModelInfoRequest, runtime: Util.RuntimeOptions): UpdateTableModelInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.firstLevelThemeId)) {
    query['FirstLevelThemeId'] = request.firstLevelThemeId;
  }
  if (!Util.isUnset(request.levelId)) {
    query['LevelId'] = request.levelId;
  }
  if (!Util.isUnset(request.levelType)) {
    query['LevelType'] = request.levelType;
  }
  if (!Util.isUnset(request.secondLevelThemeId)) {
    query['SecondLevelThemeId'] = request.secondLevelThemeId;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTableModelInfo',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTableModelInfo(request: UpdateTableModelInfoRequest): UpdateTableModelInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTableModelInfoWithOptions(request, runtime);
}

model UpdateTableThemeRequest {
  name?: string(name='Name'),
  projectId?: long(name='ProjectId', example='123'),
  themeId?: long(name='ThemeId', example='123'),
}

model UpdateTableThemeResponseBody = {
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='abcd'),
  success?: boolean(name='Success', example='true'),
  updateResult?: boolean(name='UpdateResult', example='true'),
}

model UpdateTableThemeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTableThemeResponseBody(name='body'),
}

async function updateTableThemeWithOptions(request: UpdateTableThemeRequest, runtime: Util.RuntimeOptions): UpdateTableThemeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.themeId)) {
    query['ThemeId'] = request.themeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTableTheme',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTableTheme(request: UpdateTableThemeRequest): UpdateTableThemeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTableThemeWithOptions(request, runtime);
}

model UpdateUdfFileRequest {
  className?: string(name='ClassName', example='com.alibaba.DataWorks.api.udf.StringConcat'),
  cmdDescription?: string(name='CmdDescription', example='StringConcat(String... substrs)'),
  example?: string(name='Example', example='StringConcat(\\"a\\", \\"b\\", \\"c\\")'),
  fileFolderPath?: string(name='FileFolderPath'),
  fileId?: string(name='FileId', example='10000001'),
  functionType?: string(name='FunctionType', example='STRING'),
  parameterDescription?: string(name='ParameterDescription'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
  resources?: string(name='Resources', example='string-concat-1.0.0.jar,commons-lang-2.6.jar'),
  returnValue?: string(name='ReturnValue'),
  udfDescription?: string(name='UdfDescription'),
}

model UpdateUdfFileResponseBody = {
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateUdfFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateUdfFileResponseBody(name='body'),
}

async function updateUdfFileWithOptions(request: UpdateUdfFileRequest, runtime: Util.RuntimeOptions): UpdateUdfFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.className)) {
    body['ClassName'] = request.className;
  }
  if (!Util.isUnset(request.cmdDescription)) {
    body['CmdDescription'] = request.cmdDescription;
  }
  if (!Util.isUnset(request.example)) {
    body['Example'] = request.example;
  }
  if (!Util.isUnset(request.fileFolderPath)) {
    body['FileFolderPath'] = request.fileFolderPath;
  }
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.functionType)) {
    body['FunctionType'] = request.functionType;
  }
  if (!Util.isUnset(request.parameterDescription)) {
    body['ParameterDescription'] = request.parameterDescription;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.resources)) {
    body['Resources'] = request.resources;
  }
  if (!Util.isUnset(request.returnValue)) {
    body['ReturnValue'] = request.returnValue;
  }
  if (!Util.isUnset(request.udfDescription)) {
    body['UdfDescription'] = request.udfDescription;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateUdfFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateUdfFile(request: UpdateUdfFileRequest): UpdateUdfFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUdfFileWithOptions(request, runtime);
}

model UpdateWorkbenchEventResultRequest {
  checkResult?: string(name='CheckResult', example='FAIL'),
  checkResultTip?: string(name='CheckResultTip', example='注意节点有效期'),
  extensionCode?: string(name='ExtensionCode', example='58e95e2acd6f408e8707f1bf2591f9e9'),
  messageId?: string(name='MessageId', example='03400b03-b721-4c34-8727-2d6884077091'),
}

model UpdateWorkbenchEventResultResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='0bc1ec92159376****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateWorkbenchEventResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateWorkbenchEventResultResponseBody(name='body'),
}

async function updateWorkbenchEventResultWithOptions(request: UpdateWorkbenchEventResultRequest, runtime: Util.RuntimeOptions): UpdateWorkbenchEventResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkResult)) {
    query['CheckResult'] = request.checkResult;
  }
  if (!Util.isUnset(request.checkResultTip)) {
    query['CheckResultTip'] = request.checkResultTip;
  }
  if (!Util.isUnset(request.extensionCode)) {
    query['ExtensionCode'] = request.extensionCode;
  }
  if (!Util.isUnset(request.messageId)) {
    query['MessageId'] = request.messageId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWorkbenchEventResult',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateWorkbenchEventResult(request: UpdateWorkbenchEventResultRequest): UpdateWorkbenchEventResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateWorkbenchEventResultWithOptions(request, runtime);
}

