/**
 *
 */
import Util;
import OSS;
import OpenPlatform;
import OSSUtil;
import FileForm;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'dataworks.ap-northeast-1.aliyuncs.com',
    ap-south-1 = 'dataworks.ap-south-1.aliyuncs.com',
    ap-southeast-1 = 'dataworks.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'dataworks.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'dataworks.ap-southeast-3.aliyuncs.com',
    ap-southeast-5 = 'dataworks.ap-southeast-5.aliyuncs.com',
    cn-beijing = 'dataworks.cn-beijing.aliyuncs.com',
    cn-chengdu = 'dataworks.cn-chengdu.aliyuncs.com',
    cn-hangzhou = 'dataworks.cn-hangzhou.aliyuncs.com',
    cn-hongkong = 'dataworks.cn-hongkong.aliyuncs.com',
    cn-huhehaote = 'dataworks.aliyuncs.com',
    cn-qingdao = 'dataworks.aliyuncs.com',
    cn-shanghai = 'dataworks.cn-shanghai.aliyuncs.com',
    cn-shenzhen = 'dataworks.cn-shenzhen.aliyuncs.com',
    cn-zhangjiakou = 'dataworks.aliyuncs.com',
    eu-central-1 = 'dataworks.eu-central-1.aliyuncs.com',
    eu-west-1 = 'dataworks.eu-west-1.aliyuncs.com',
    me-east-1 = 'dataworks.me-east-1.aliyuncs.com',
    us-east-1 = 'dataworks.us-east-1.aliyuncs.com',
    us-west-1 = 'dataworks.us-west-1.aliyuncs.com',
    cn-hangzhou-finance = 'dataworks.aliyuncs.com',
    cn-shenzhen-finance-1 = 'dataworks.aliyuncs.com',
    cn-shanghai-finance-1 = 'dataworks.aliyuncs.com',
    cn-north-2-gov-1 = 'dataworks.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('dataworks-public', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model Collection {
  collectionType?: string(name='CollectionType', example='album'),
  comment?: string(name='Comment', example='comment'),
  createTime?: long(name='CreateTime', example='1668600147617'),
  level?: int32(name='Level', example='1'),
  name?: string(name='Name', example='collectionName'),
  ownerId?: string(name='OwnerId', example='1234444'),
  ownerName?: string(name='OwnerName', example='owner'),
  qualifiedName?: string(name='QualifiedName', example='album.12334'),
  updateTime?: long(name='UpdateTime', example='1668600148617'),
}

model Entity {
  entityContent?: map[string]any(name='EntityContent'),
  qualifiedName?: string(name='QualifiedName', example='maxcompute_table.563f0357118d05ef145d6bddf2966cc23e86ca8f2f013f915e565afdf09f7a23'),
  tenantId?: long(name='TenantId', example='12345'),
}

model LineageEntityVO {
  detailUrl?: string(name='DetailUrl', example='http://domain.test.url/entity'),
  name?: string(name='Name', example='tableName'),
  parentName?: string(name='ParentName', example='dbName'),
  qualifiedName?: string(name='QualifiedName', example='maxcompute-table.projectName.tablename'),
}

model LineageRelationRegisterVO {
  createTimestamp?: long(name='CreateTimestamp', example='1684327487964'),
  destEntity?: LineageEntityVO(name='DestEntity'),
  relationship?: RelationshipVO(name='Relationship'),
  srcEntity?: LineageEntityVO(name='SrcEntity'),
}

model RelationshipVO {
  type?: string(name='Type', example='sql'),
}

model AbolishDataServiceApiRequest {
  apiId?: long(name='ApiId', description='The ID of the DataService Studio API.', example='10000'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.', example='10001'),
  tenantId?: long(name='TenantId', description='The ID of the tenant.', example='10002'),
}

model AbolishDataServiceApiResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the DataService Studio API is unpublished.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model AbolishDataServiceApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AbolishDataServiceApiResponseBody(name='body'),
}

async function abolishDataServiceApiWithOptions(request: AbolishDataServiceApiRequest, runtime: Util.RuntimeOptions): AbolishDataServiceApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AbolishDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function abolishDataServiceApi(request: AbolishDataServiceApiRequest): AbolishDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return abolishDataServiceApiWithOptions(request, runtime);
}

model AddMetaCollectionEntityRequest {
  collectionQualifiedName?: string(name='CollectionQualifiedName', description='The unique identifier of the entity.

Example: maxcompute-table.projectA.tableA.', example='album.2222'),
  entityQualifiedName?: string(name='EntityQualifiedName', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='maxcompute-table.projectA.tableB'),
}

model AddMetaCollectionEntityResponseBody = {
  errorCode?: string(name='ErrorCode', description='Indicates whether the request was successful. Valid values:

true: The request was successful.

false: The request failed.', example='9999'),
  errorMessage?: string(name='ErrorMessage', description='The error code returned.', example='The specified product does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The error message returned.', example='200'),
  requestId?: string(name='RequestId', description='The result of the operation. Valid values:

*   true: succeeded
*   false: failed', example='0000-ABCD-E****'),
  status?: boolean(name='Status', description='The HTTP status code returned.', example='true'),
  success?: boolean(name='Success', example='true'),
}

model AddMetaCollectionEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddMetaCollectionEntityResponseBody(name='body'),
}

async function addMetaCollectionEntityWithOptions(request: AddMetaCollectionEntityRequest, runtime: Util.RuntimeOptions): AddMetaCollectionEntityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.collectionQualifiedName)) {
    query['CollectionQualifiedName'] = request.collectionQualifiedName;
  }
  if (!Util.isUnset(request.entityQualifiedName)) {
    query['EntityQualifiedName'] = request.entityQualifiedName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddMetaCollectionEntity',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addMetaCollectionEntity(request: AddMetaCollectionEntityRequest): AddMetaCollectionEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return addMetaCollectionEntityWithOptions(request, runtime);
}

model AddProjectMemberToRoleRequest {
  clientToken?: string(name='ClientToken', description='The ID of the request. You can use the ID to search for logs and troubleshoot issues based on the logs.', example='1AFAE64E-D1BE-432B-A9*****'),
  projectId?: long(name='ProjectId', description='The ID of your Alibaba Cloud account. To view the ID, log on to [the DataWorks console](https://workbench.data.aliyun.com/console) and move the pointer over the profile picture in the upper-right corner.', example='27'),
  roleCode?: string(name='RoleCode', description='The client token. It is a field with the idempotence property. We recommend that you use a universally unique identifier (UUID). This parameter is used to uniquely identify the API operation call.', example='role_project_guest'),
  userId?: string(name='UserId', description='The region of the workspace. For example, the ID of the China (Shanghai) region is cn-shanghai, and that of the China (Zhangjiakou) region is cn-zhangjiakou. The system automatically determines the value of this parameter based on the endpoint used to call the operation.', example='1234'),
}

model AddProjectMemberToRoleResponseBody = {
  requestId?: string(name='RequestId', example='1AFAE64E-D1BE-432B-A9****'),
}

model AddProjectMemberToRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddProjectMemberToRoleResponseBody(name='body'),
}

/**
  * The ID of the DataWorks workspace. You can call the [ListProjects](~~178393~~) operation to query the ID.
  *
  * @param request AddProjectMemberToRoleRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AddProjectMemberToRoleResponse
 */
async function addProjectMemberToRoleWithOptions(request: AddProjectMemberToRoleRequest, runtime: Util.RuntimeOptions): AddProjectMemberToRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.roleCode)) {
    query['RoleCode'] = request.roleCode;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddProjectMemberToRole',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the DataWorks workspace. You can call the [ListProjects](~~178393~~) operation to query the ID.
  *
  * @param request AddProjectMemberToRoleRequest
  * @return AddProjectMemberToRoleResponse
 */
async function addProjectMemberToRole(request: AddProjectMemberToRoleRequest): AddProjectMemberToRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return addProjectMemberToRoleWithOptions(request, runtime);
}

model AddToMetaCategoryRequest {
  categoryId?: long(name='CategoryId', description='The ID of the category.', example='5'),
  tableGuid?: string(name='TableGuid', description='The GUID of the metatable.', example='odps.engine_name.table_name'),
}

model AddToMetaCategoryResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the metatable was added to the specified category.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model AddToMetaCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddToMetaCategoryResponseBody(name='body'),
}

async function addToMetaCategoryWithOptions(request: AddToMetaCategoryRequest, runtime: Util.RuntimeOptions): AddToMetaCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddToMetaCategory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addToMetaCategory(request: AddToMetaCategoryRequest): AddToMetaCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return addToMetaCategoryWithOptions(request, runtime);
}

model ApprovePermissionApplyOrderRequest {
  approveAction?: int32(name='ApproveAction', description='The approval action. Valid values:

*   1: Approve the permission request order.
*   2: Reject the permission request order.', example='1'),
  approveComment?: string(name='ApproveComment', description='The comment on the approval.', example='agree'),
  flowId?: string(name='FlowId', description='The ID of the permission request order. You can call the ListPermissionApplyOrders operation to obtain the order ID.', example='48f36729-05f9-4a40-9286-933fd940f30a'),
}

model ApprovePermissionApplyOrderResponseBody = {
  approveSuccess?: boolean(name='ApproveSuccess', description='Indicates that the approval is successful.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0bc1ec92159376****'),
}

model ApprovePermissionApplyOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApprovePermissionApplyOrderResponseBody(name='body'),
}

async function approvePermissionApplyOrderWithOptions(request: ApprovePermissionApplyOrderRequest, runtime: Util.RuntimeOptions): ApprovePermissionApplyOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.approveAction)) {
    query['ApproveAction'] = request.approveAction;
  }
  if (!Util.isUnset(request.approveComment)) {
    query['ApproveComment'] = request.approveComment;
  }
  if (!Util.isUnset(request.flowId)) {
    query['FlowId'] = request.flowId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApprovePermissionApplyOrder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function approvePermissionApplyOrder(request: ApprovePermissionApplyOrderRequest): ApprovePermissionApplyOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return approvePermissionApplyOrderWithOptions(request, runtime);
}

model ChangeResourceManagerResourceGroupRequest {
  resourceId?: string(name='ResourceId', description='The ID of the new resource group.', example='test_project'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='Indicates whether the resource group was successfully modified.', example='rg-bp67acfmxazb4p****'),
  resourceType?: string(name='ResourceType', description='The ID of the resource type. Valid values:

*   If you set the ResourceType parameter to project, set this parameter to the value of ProjectIdentifier. You can call the [ListProjects](~~178393~~) operation to obtain the value of ProjectIdentifier.
*   If you set the ResourceType parameter to tenantresourcegroup, set this parameter to the value of ResourceGroupType. You can call the [ListResourceGroups](~~173913~~) operation to obtain the value of ResourceGroupType. Only the values 7, 8, and 9 are valid.', example='project'),
}

model ChangeResourceManagerResourceGroupResponseBody = {
  data?: boolean(name='Data', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='200'),
  requestId?: string(name='RequestId', description='The HTTP status code returned.', example='1AFAE64E-D1BE-432B-A9****'),
  success?: boolean(name='Success', example='true'),
}

model ChangeResourceManagerResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeResourceManagerResourceGroupResponseBody(name='body'),
}

async function changeResourceManagerResourceGroupWithOptions(request: ChangeResourceManagerResourceGroupRequest, runtime: Util.RuntimeOptions): ChangeResourceManagerResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeResourceManagerResourceGroup',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function changeResourceManagerResourceGroup(request: ChangeResourceManagerResourceGroupRequest): ChangeResourceManagerResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeResourceManagerResourceGroupWithOptions(request, runtime);
}

model CheckFileDeploymentRequest {
  checkDetailUrl?: string(name='CheckDetailUrl', description='This parameter is deprecated.', example='https://result.aliyun.com/?checkerInstanceId='),
  checkerInstanceId?: string(name='CheckerInstanceId', description='The ID of the instance to which the file checker belongs. You can obtain the ID from the CheckerInstanceId parameter in the check event logs returned by DataWorks.', example='66_123455623_2'),
  status?: string(name='Status', description='The check status of the file that you want to deploy. Valid values:

*   OK: The file passes the check.
*   WARN: The file passes the check, but an alert is reported.
*   FAIL: The file fails the check.', example='OK'),
}

model CheckFileDeploymentResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='86d5a5ac-0cc0-4c5f-a374-a15713b252ab'),
}

model CheckFileDeploymentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckFileDeploymentResponseBody(name='body'),
}

async function checkFileDeploymentWithOptions(request: CheckFileDeploymentRequest, runtime: Util.RuntimeOptions): CheckFileDeploymentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.checkDetailUrl)) {
    body['CheckDetailUrl'] = request.checkDetailUrl;
  }
  if (!Util.isUnset(request.checkerInstanceId)) {
    body['CheckerInstanceId'] = request.checkerInstanceId;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CheckFileDeployment',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkFileDeployment(request: CheckFileDeploymentRequest): CheckFileDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkFileDeploymentWithOptions(request, runtime);
}

model CheckMetaPartitionRequest {
  clusterId?: string(name='ClusterId', description='The name of the table.', example='abc'),
  dataSourceType?: string(name='DataSourceType', description='Indicates whether the partition exists.', example='emr'),
  databaseName?: string(name='DatabaseName', description='The type of the data source. Valid values: odps and emr.', example='abc'),
  partition?: string(name='Partition', description='The name of the database.', example='ds=202005'),
  tableGuid?: string(name='TableGuid', description='The ID of the E-MapReduce (EMR) cluster.', example='odps.engine_name.table_name'),
  tableName?: string(name='TableName', description='The HTTP status code.', example='abc'),
}

model CheckMetaPartitionResponseBody = {
  data?: boolean(name='Data', description='The error message.', example='true'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='Indicates whether the request is successful.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of the request.', example='200'),
  requestId?: string(name='RequestId', description='The error code.', example='0bc1ec92159376'),
  success?: boolean(name='Success', example='true'),
}

model CheckMetaPartitionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckMetaPartitionResponseBody(name='body'),
}

async function checkMetaPartitionWithOptions(request: CheckMetaPartitionRequest, runtime: Util.RuntimeOptions): CheckMetaPartitionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.partition)) {
    query['Partition'] = request.partition;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckMetaPartition',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkMetaPartition(request: CheckMetaPartitionRequest): CheckMetaPartitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkMetaPartitionWithOptions(request, runtime);
}

model CheckMetaTableRequest {
  clusterId?: string(name='ClusterId', description='The name of the EMR table.', example='abc'),
  dataSourceType?: string(name='DataSourceType', description='The ID of the request.', example='emr'),
  databaseName?: string(name='DatabaseName', description='The type of the data source. Valid values: odps and emr.', example='abc'),
  tableGuid?: string(name='TableGuid', description='The name of the EMR database.', example='odps.engine_name.table_name'),
  tableName?: string(name='TableName', description='Indicates whether the table exists.', example='abc'),
}

model CheckMetaTableResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='0bc1ec92159376'),
}

model CheckMetaTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckMetaTableResponseBody(name='body'),
}

async function checkMetaTableWithOptions(request: CheckMetaTableRequest, runtime: Util.RuntimeOptions): CheckMetaTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckMetaTable',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkMetaTable(request: CheckMetaTableRequest): CheckMetaTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkMetaTableWithOptions(request, runtime);
}

model CreateBaselineRequest {
  alertMarginThreshold?: int32(name='AlertMarginThreshold'),
  baselineName?: string(name='BaselineName'),
  baselineType?: string(name='BaselineType'),
  nodeIds?: string(name='NodeIds'),
  overtimeSettings?: [ 
    {
      cycle?: int32(name='Cycle'),
      time?: string(name='Time'),
    }
  ](name='OvertimeSettings'),
  owner?: string(name='Owner'),
  priority?: int32(name='Priority'),
  projectId?: long(name='ProjectId'),
}

model CreateBaselineResponseBody = {
  data?: long(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateBaselineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBaselineResponseBody(name='body'),
}

async function createBaselineWithOptions(request: CreateBaselineRequest, runtime: Util.RuntimeOptions): CreateBaselineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertMarginThreshold)) {
    body['AlertMarginThreshold'] = request.alertMarginThreshold;
  }
  if (!Util.isUnset(request.baselineName)) {
    body['BaselineName'] = request.baselineName;
  }
  if (!Util.isUnset(request.baselineType)) {
    body['BaselineType'] = request.baselineType;
  }
  if (!Util.isUnset(request.nodeIds)) {
    body['NodeIds'] = request.nodeIds;
  }
  if (!Util.isUnset(request.overtimeSettings)) {
    body['OvertimeSettings'] = request.overtimeSettings;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateBaseline',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createBaseline(request: CreateBaselineRequest): CreateBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBaselineWithOptions(request, runtime);
}

model CreateBusinessRequest {
  businessName?: string(name='BusinessName'),
  description?: string(name='Description'),
  owner?: string(name='Owner', example='1000000000001'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
  useType?: string(name='UseType', example='NORMAL'),
}

model CreateBusinessResponseBody = {
  businessId?: long(name='BusinessId', example='100001'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model CreateBusinessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBusinessResponseBody(name='body'),
}

async function createBusinessWithOptions(request: CreateBusinessRequest, runtime: Util.RuntimeOptions): CreateBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessName)) {
    body['BusinessName'] = request.businessName;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.useType)) {
    body['UseType'] = request.useType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateBusiness',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createBusiness(request: CreateBusinessRequest): CreateBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBusinessWithOptions(request, runtime);
}

model CreateConnectionRequest {
  connectionType?: string(name='ConnectionType', description='The type of the connection string.', example='rds'),
  content?: string(name='Content', description='Details of the data source.', example='{"database":"dbname","instanceName":"instancename","password":"password","rdsOwnerId":"123","username":"username"}'),
  description?: string(name='Description', description='The description of the connection string.', example='abc'),
  envType?: int32(name='EnvType', description='Environment of the data source.', example='1'),
  name?: string(name='Name', description='The name of the data source.', example='abc'),
  projectId?: long(name='ProjectId', description='The ID of the workspace to be associated with the data source.', example='1'),
  subType?: string(name='SubType', description='The sub-type of a connection string.', example='mysql'),
}

model CreateConnectionResponseBody = {
  data?: long(name='Data', description='The ID of the data source.', example='123'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0bc141151593763****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. A value of true indicates that the request is successful. A value of false indicates that the request has failed.', example='true'),
}

model CreateConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateConnectionResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request CreateConnectionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateConnectionResponse
 */
// Deprecated
async function createConnectionWithOptions(request: CreateConnectionRequest, runtime: Util.RuntimeOptions): CreateConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionType)) {
    query['ConnectionType'] = request.connectionType;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.subType)) {
    query['SubType'] = request.subType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateConnection',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request CreateConnectionRequest
  * @return CreateConnectionResponse
 */
// Deprecated
async function createConnection(request: CreateConnectionRequest): CreateConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConnectionWithOptions(request, runtime);
}

model CreateDISyncTaskRequest {
  clientToken?: string(name='ClientToken', example='0000-ABCD-EFG****'),
  projectId?: long(name='ProjectId', example='10000'),
  taskContent?: string(name='TaskContent', example='{"type":"job","version":"2.0","steps":[{"stepType":"mysql","parameter":{"envType":1,"datasource":"mysql_pub","column":["id","name","create_time","age","score","t_01"],"connection":[{"datasource":"mysql_pub","table":["u_pk"]}],"where":"","splitPk":"id","encoding":"UTF-8"},"name":"Reader","category":"reader"},{"stepType":"odps","parameter":{"partition":"pt=${bizdate}","truncate":true,"datasource":"odps_first","envType":1,"column":["id","name","create_time","age","score","t_01"],"emptyAsNull":false,"tableComment":"null","table":"u_pk"},"name":"Writer","category":"writer"}],"setting":{"executeMode":null,"errorLimit":{"record":""},"speed":{"concurrent":2,"throttle":false}},"order":{"hops":[{"from":"Reader","to":"Writer"}]}}'),
  taskName?: string(name='TaskName', example='new_di_task'),
  taskParam?: string(name='TaskParam'),
  taskType?: string(name='TaskType', example='DI_OFFLINE'),
}

model CreateDISyncTaskResponseBody = {
  data?: {
    fileId?: long(name='FileId', example='1000001'),
    message?: string(name='Message'),
    status?: string(name='Status', example='success'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='0bc1411515937635973****'),
  success?: boolean(name='Success', example='true'),
}

model CreateDISyncTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDISyncTaskResponseBody(name='body'),
}

/**
  * DataWorks allows you to use only the CreateDISyncTask operation to create a batch synchronization node in Data Integration. To create a real-time synchronization node or a synchronization solution, you must first call the [GenerateDISyncTaskConfigForCreating](~~383463~~) operation to generate the ID of an asynchronous thread and call the [QueryDISyncTaskConfigProcessResult](~~383465~~) operation to obtain the asynchronously generated parameters based on the ID. Then, you can call the CreateDISyncTask operation and use the parameters as request parameters to create a real-time synchronization node or a synchronization solution in Data Integration.
  *
  * @param request CreateDISyncTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateDISyncTaskResponse
 */
async function createDISyncTaskWithOptions(request: CreateDISyncTaskRequest, runtime: Util.RuntimeOptions): CreateDISyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskContent)) {
    query['TaskContent'] = request.taskContent;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.taskParam)) {
    query['TaskParam'] = request.taskParam;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDISyncTask',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * DataWorks allows you to use only the CreateDISyncTask operation to create a batch synchronization node in Data Integration. To create a real-time synchronization node or a synchronization solution, you must first call the [GenerateDISyncTaskConfigForCreating](~~383463~~) operation to generate the ID of an asynchronous thread and call the [QueryDISyncTaskConfigProcessResult](~~383465~~) operation to obtain the asynchronously generated parameters based on the ID. Then, you can call the CreateDISyncTask operation and use the parameters as request parameters to create a real-time synchronization node or a synchronization solution in Data Integration.
  *
  * @param request CreateDISyncTaskRequest
  * @return CreateDISyncTaskResponse
 */
async function createDISyncTask(request: CreateDISyncTaskRequest): CreateDISyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDISyncTaskWithOptions(request, runtime);
}

model CreateDagComplementRequest {
  bizBeginTime?: string(name='BizBeginTime', example='00:00:00'),
  bizEndTime?: string(name='BizEndTime', example='23:00:00'),
  endBizDate?: string(name='EndBizDate', example='2020-05-21 00:00:00'),
  excludeNodeIds?: string(name='ExcludeNodeIds', example='1234'),
  includeNodeIds?: string(name='IncludeNodeIds', example='74324,74325'),
  name?: string(name='Name', example='xm_test'),
  nodeParams?: string(name='NodeParams', example='{74324:"key1=val1 key2=val"}'),
  parallelism?: boolean(name='Parallelism', example='false'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
  rootNodeId?: long(name='RootNodeId', example='1234'),
  startBizDate?: string(name='StartBizDate', example='2020-05-20 00:00:00'),
}

model CreateDagComplementResponseBody = {
  data?: [ long ](name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', example='true'),
}

model CreateDagComplementResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDagComplementResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request CreateDagComplementRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateDagComplementResponse
 */
// Deprecated
async function createDagComplementWithOptions(request: CreateDagComplementRequest, runtime: Util.RuntimeOptions): CreateDagComplementResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizBeginTime)) {
    body['BizBeginTime'] = request.bizBeginTime;
  }
  if (!Util.isUnset(request.bizEndTime)) {
    body['BizEndTime'] = request.bizEndTime;
  }
  if (!Util.isUnset(request.endBizDate)) {
    body['EndBizDate'] = request.endBizDate;
  }
  if (!Util.isUnset(request.excludeNodeIds)) {
    body['ExcludeNodeIds'] = request.excludeNodeIds;
  }
  if (!Util.isUnset(request.includeNodeIds)) {
    body['IncludeNodeIds'] = request.includeNodeIds;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.nodeParams)) {
    body['NodeParams'] = request.nodeParams;
  }
  if (!Util.isUnset(request.parallelism)) {
    body['Parallelism'] = request.parallelism;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.rootNodeId)) {
    body['RootNodeId'] = request.rootNodeId;
  }
  if (!Util.isUnset(request.startBizDate)) {
    body['StartBizDate'] = request.startBizDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDagComplement',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request CreateDagComplementRequest
  * @return CreateDagComplementResponse
 */
// Deprecated
async function createDagComplement(request: CreateDagComplementRequest): CreateDagComplementResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDagComplementWithOptions(request, runtime);
}

model CreateDagTestRequest {
  bizdate?: string(name='Bizdate', example='2020-05-26 00:00:00'),
  name?: string(name='Name', example='xm_create_test'),
  nodeId?: long(name='NodeId', example='1234'),
  nodeParams?: string(name='NodeParams', example='bizdate=$bizdate tbods=$tbods'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
}

model CreateDagTestResponseBody = {
  data?: long(name='Data', example='3333333'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', example='true'),
}

model CreateDagTestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDagTestResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request CreateDagTestRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateDagTestResponse
 */
// Deprecated
async function createDagTestWithOptions(request: CreateDagTestRequest, runtime: Util.RuntimeOptions): CreateDagTestResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.nodeParams)) {
    body['NodeParams'] = request.nodeParams;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDagTest',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request CreateDagTestRequest
  * @return CreateDagTestResponse
 */
// Deprecated
async function createDagTest(request: CreateDagTestRequest): CreateDagTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDagTestWithOptions(request, runtime);
}

model CreateDataServiceApiRequest {
  apiDescription?: string(name='ApiDescription', description='The HTTP status code.'),
  apiMode?: int32(name='ApiMode', description='The format in which the response of the API request is returned. Valid values: 0 and 1. The value 0 indicates the JSON format. The value 1 indicates the XML format. APIs generated in wizard or script mode support the JSON format. APIs generated by registration support the JSON and XML formats.', example='0'),
  apiName?: string(name='ApiName', description='The type of the API. Valid values: 0, 1, and 2. The value 0 indicates that the API is generated in wizard mode. The value 1 indicates that the API is generated in script mode. The value 2 indicates that the API is generated by registration.'),
  apiPath?: string(name='ApiPath', description='The ID of the folder used to store the API. The ID of the root folder in a business process is 0. The ID of the folder created by a user must be greater than 0.', example='/test/1'),
  folderId?: long(name='FolderId', description='The ID of the API.', example='0'),
  groupId?: string(name='GroupId', description='The request method of the API. Valid values: 0, 1, 2, and 3. The value 0 indicates the GET method. The value 1 indicates the POST method. The value 2 indicates the PUT method. The value 3 indicates the DELETE method. APIs generated in wizard or script mode support the GET and POST methods. APIs generated by registration support the GET, POST, PUT, and DELETE methods.'),
  projectId?: long(name='ProjectId', description='The ID of the business process.', example='10000'),
  protocols?: string(name='Protocols', description='The details of the API generated in script mode. For more information, see the ScriptDetails parameter returned by the [GetDataServiceApi](~~174013~~) operation.', example='0,1'),
  registrationDetails?: string(name='RegistrationDetails', description='The description of the API.', example='{"failedResultSample":"fail","registrationErrorCodes":[{"errorCode":"e1","errorMessage":"msg1","errorSolution":"sol1"},{"errorCode":"e2","errorMessage":"msg2","errorSolution":"sol2"}],"registrationRequestParameters":[{"columnName":"","defaultValue":"","exampleValue":"","isRequiredParameter":true,"parameterDataType":0,"parameterDescription":"","parameterName":"id","parameterOperator":0,"parameterPosition":1},{"columnName":"","defaultValue":"xx","exampleValue":"","isRequiredParameter":true,"parameterDataType":0,"parameterDescription":"","parameterName":"cc","parameterOperator":2,"parameterPosition":2}],"serviceContentType":1,"serviceHost":"http://www.baidu.com","servicePath":"/[uid]","serviceRequestBodyDescription":"body","successfulResultSample":"success"}'),
  requestContentType?: int32(name='RequestContentType'),
  requestMethod?: int32(name='RequestMethod', description='The timeout period of the API request. Unit: milliseconds. Valid values: (0,30000].', example='0'),
  resourceGroupId?: long(name='ResourceGroupId'),
  responseContentType?: int32(name='ResponseContentType', description='The scope in which the API is visible. Valid values:

*   0: The API is visible to all members in the workspace.
*   1: The API is visible only to its owner, and permissions on the API cannot be granted to other members.', example='0'),
  scriptDetails?: string(name='ScriptDetails', description='The path of the API. The path cannot exceed 200 characters in length. The path can contain letters, digits, underscores (\\_), and hyphens (-) and must start with a forward slash (/).', example='{"isPagedResponse":false,"script":"select id as id1, name as name1 from person where id=${inputid}","scriptConnection":{"connectionId":122786,"tableName":"person"},"scriptRequestParameters":[{"defaultValue":"","exampleValue":"","isRequiredParameter":true,"parameterDataType":0,"parameterDescription":"","parameterName":"inputid","parameterOperator":0,"parameterPosition":1}],"scriptResponseParameters":[{"exampleValue":"","parameterDataType":0,"parameterDescription":"","parameterName":"id1"},{"exampleValue":"","parameterDataType":0,"parameterDescription":"","parameterName":"name1"}]}'),
  sqlMode?: long(name='SqlMode'),
  tenantId?: long(name='TenantId', description='The name of the API. The name must be 4 to 50 characters in length. The name can contain letters, digits, and underscores (\\_) and must start with a letter.', example='10001'),
  timeout?: int32(name='Timeout', description='The protocol used by the API. Valid values: 0 and 1. The value 0 indicates HTTP. The value 1 indicates HTTPS. You can specify multiple protocols. Separate them with commas (,).', example='10000'),
  visibleRange?: int32(name='VisibleRange', description='The details of the API generated in wizard mode. For more information, see the WizardDetails parameter returned by the [GetDataServiceApi](~~174013~~) operation.', example='0'),
  wizardDetails?: string(name='WizardDetails', description='The details of the API generated by registration. For more information, see the RegistrationDetails parameter returned by the [GetDataServiceApi](~~174013~~) operation.', example='{"isPagedResponse":true,"wizardConnection":{"connectionId":122786,"tableName":"person"},"wizardRequestParameters":[{"columnName":"id","defaultValue":"","exampleValue":"1","isRequiredParameter":true,"parameterDataType":2,"parameterDescription":"","parameterName":"id","parameterOperator":0,"parameterPosition":0}],"wizardResponseParameters":[{"columnName":"id","exampleValue":"11","parameterDataType":2,"parameterDescription":"","parameterName":"id"}]}'),
}

model CreateDataServiceApiResponseBody = {
  data?: long(name='Data', description='The ID of the request.', example='100003'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error code.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The error message.', example='200'),
  requestId?: string(name='RequestId', description='Indicates whether the request is successful.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model CreateDataServiceApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDataServiceApiResponseBody(name='body'),
}

async function createDataServiceApiWithOptions(request: CreateDataServiceApiRequest, runtime: Util.RuntimeOptions): CreateDataServiceApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiDescription)) {
    body['ApiDescription'] = request.apiDescription;
  }
  if (!Util.isUnset(request.apiMode)) {
    body['ApiMode'] = request.apiMode;
  }
  if (!Util.isUnset(request.apiName)) {
    body['ApiName'] = request.apiName;
  }
  if (!Util.isUnset(request.apiPath)) {
    body['ApiPath'] = request.apiPath;
  }
  if (!Util.isUnset(request.folderId)) {
    body['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.protocols)) {
    body['Protocols'] = request.protocols;
  }
  if (!Util.isUnset(request.registrationDetails)) {
    body['RegistrationDetails'] = request.registrationDetails;
  }
  if (!Util.isUnset(request.requestContentType)) {
    body['RequestContentType'] = request.requestContentType;
  }
  if (!Util.isUnset(request.requestMethod)) {
    body['RequestMethod'] = request.requestMethod;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.responseContentType)) {
    body['ResponseContentType'] = request.responseContentType;
  }
  if (!Util.isUnset(request.scriptDetails)) {
    body['ScriptDetails'] = request.scriptDetails;
  }
  if (!Util.isUnset(request.sqlMode)) {
    body['SqlMode'] = request.sqlMode;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.timeout)) {
    body['Timeout'] = request.timeout;
  }
  if (!Util.isUnset(request.visibleRange)) {
    body['VisibleRange'] = request.visibleRange;
  }
  if (!Util.isUnset(request.wizardDetails)) {
    body['WizardDetails'] = request.wizardDetails;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDataServiceApi(request: CreateDataServiceApiRequest): CreateDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataServiceApiWithOptions(request, runtime);
}

model CreateDataServiceApiAuthorityRequest {
  apiId?: long(name='ApiId', description='The ID of the API.', example='10001'),
  authorizedProjectId?: long(name='AuthorizedProjectId', description='The ID of the workspace to which the access permissions on the API are granted.', example='10002'),
  endTime?: long(name='EndTime', description='The end time of the validity period of the access permissions. The time must be a UNIX timestamp. Unit: seconds. Example: 1600531564, which indicates 2020-09-20 00:06:04 (UTC+8).', example='1600531564'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.', example='10003'),
  tenantId?: long(name='TenantId', description='The ID of the tenant.', example='1004'),
}

model CreateDataServiceApiAuthorityResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0000-ABCD-EF****'),
  success?: boolean(name='Success', description='Indicates whether the authorization was successful.', example='true'),
}

model CreateDataServiceApiAuthorityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDataServiceApiAuthorityResponseBody(name='body'),
}

async function createDataServiceApiAuthorityWithOptions(request: CreateDataServiceApiAuthorityRequest, runtime: Util.RuntimeOptions): CreateDataServiceApiAuthorityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.authorizedProjectId)) {
    body['AuthorizedProjectId'] = request.authorizedProjectId;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataServiceApiAuthority',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDataServiceApiAuthority(request: CreateDataServiceApiAuthorityRequest): CreateDataServiceApiAuthorityResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataServiceApiAuthorityWithOptions(request, runtime);
}

model CreateDataServiceFolderRequest {
  folderName?: string(name='FolderName', description='The name of the folder.', example='Test folder'),
  groupId?: string(name='GroupId', description='The ID of the desired workflow to which the folder belongs.', example='1000abcd'),
  parentId?: long(name='ParentId', description='The ID of the desired parent folder of the folder. The ID of the root folder in a workflow is 0. The ID of the folder created by users in a workflow is greater than 0.', example='0'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.', example='10001'),
  tenantId?: long(name='TenantId', description='The ID of the tenant.', example='10002'),
}

model CreateDataServiceFolderResponseBody = {
  folderId?: long(name='FolderId', description='The ID of the created folder.', example='123'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0000-ABCD-E****'),
}

model CreateDataServiceFolderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDataServiceFolderResponseBody(name='body'),
}

async function createDataServiceFolderWithOptions(request: CreateDataServiceFolderRequest, runtime: Util.RuntimeOptions): CreateDataServiceFolderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderName)) {
    body['FolderName'] = request.folderName;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.parentId)) {
    body['ParentId'] = request.parentId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataServiceFolder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDataServiceFolder(request: CreateDataServiceFolderRequest): CreateDataServiceFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataServiceFolderWithOptions(request, runtime);
}

model CreateDataServiceGroupRequest {
  apiGatewayGroupId?: string(name='ApiGatewayGroupId', description='The ID of the API group that is associated with the business process in the API Gateway console. You can log on to the API Gateway console and go to the Group Details page to view the ID.', example='1000abcd'),
  description?: string(name='Description', description='The description of the business process.', example='Test business process'),
  groupName?: string(name='GroupName', description='The name of the business process.', example='Business process name'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.', example='10001'),
  tenantId?: long(name='TenantId', description='The ID of the tenant.', example='10002'),
}

model CreateDataServiceGroupResponseBody = {
  groupId?: string(name='GroupId', description='The ID of the business process.', example='ds_12345'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0000-ABCD-EF****'),
}

model CreateDataServiceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDataServiceGroupResponseBody(name='body'),
}

async function createDataServiceGroupWithOptions(request: CreateDataServiceGroupRequest, runtime: Util.RuntimeOptions): CreateDataServiceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiGatewayGroupId)) {
    body['ApiGatewayGroupId'] = request.apiGatewayGroupId;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupName)) {
    body['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataServiceGroup',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDataServiceGroup(request: CreateDataServiceGroupRequest): CreateDataServiceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataServiceGroupWithOptions(request, runtime);
}

model CreateDataSourceRequest {
  content?: string(name='Content', description='The ID of the data source.', example='{"database":"dbname","instanceName":"instancename","password":"password","rdsOwnerId":"123","username":"username"}'),
  dataSourceType?: string(name='DataSourceType', description='The environment in which the data source is used. Valid values: 0 and 1. 0 indicates the development environment. 1 indicates the production environment.', example='rds'),
  description?: string(name='Description', description='The subtype of the data source. Example:

*   This parameter takes effect only if the DataSourceType parameter is set to rds.
*   If the DataSourceType parameter is set to rds, this parameter can be set to mysql, sqlserver, or postgresql.', example='abc'),
  envType?: int32(name='EnvType', description='The HTTP status code returned.', example='1'),
  name?: string(name='Name', description='The type of the data source. Valid values:

*   odps
*   mysql
*   rds
*   oss
*   sqlserver
*   polardb
*   oracle
*   mongodb
*   emr
*   postgresql
*   analyticdb_for_mysql
*   hybriddb_for_postgresql
*   holo', example='abc'),
  projectId?: long(name='ProjectId', description='The description of the data source.', example='1'),
  subType?: string(name='SubType', description='The details of the data source. Examples of details of some common data sources:

*   odps

```

{
  "accessId": "xssssss",
  "accessKey": "xsaxsaxsa",
  "authType": 2,
  "endpoint": "http://service.odps.aliyun.com/api",
  "project": "xsaxsax",
  "tag": "public"
}
```

*   mysql

```

{
  "database": "xsaxsa",
  "instanceName": "rm-xsaxsa",
  "password": "xsaxsa",
  "rdsOwnerId": "xasxsa",
  "regionId": "cn-shanghai",
  "tag": "rds",
  "username": "xsaxsa"
}
```

*   rds

```

{
  "configType": 1,
  "tag": "rds",
  "database": "xsaxsa",
  "username": "xsaxsa",
  "password": "xssaxsa$32050",
  "instanceName": "rm-xsaxs",
  "rdsOwnerId": "11111111"
}
```

*   oss

```

{
  "accessId": "sssssxx",
  "accessKey": "xsaxaxsaxs",
  "bucket": "xsa-xs-xs",
  "endpoint": "http://oss-cn-shanghai.aliyuncs.com",
  "tag": "public"
}
```

*   sqlserver

```

{
  "jdbcUrl": "jdbc:sqlserver://xsaxsa-xsaxsa.database.xxx.cn:123;DatabaseName=xsxs-xsxs",
  "password": "sdasda$fs",
  "tag": "public",
  "username": "sxaxacdacdd"
}
```

*   polardb

```

{
  "clusterId": "pc-sdadsadsa",
  "database": "dsadsadsa",
  "ownerId": "121212122",
  "password": "sdasdafssa",
  "region": "cn-shanghai",
  "tag": "polardb",
  "username": "asdadsads"
}
```

*   oracle

```

{
  "jdbcUrl": "jdbc:oracle:saaa:@xxxxx:1521:PROD",
  "password": "sxasaxsa",
  "tag": "public",
  "username": "sasfadfa"
}
```

*   mongodb

```

{
  "address": "[\\"xsaxxsa.mongodb.rds.aliyuncs.com:3717\\"]",
  "database": "admin",
  "password": "sadsda@",
  "tag": "public",
  "username": "dsadsadas"
}
```

*   emr

```

{
  "accessId": "xsaxsa",
  "emrClusterId": "C-dsads",
  "emrResourceQueueName": "default",
  "emrEndpoint": "emr.aliyuncs.com",
  "accessKey": "dsadsad",
  "emrUserId": "224833315798889783",
  "name": "sasdsadsa",
  "emrAccessMode": "simple",
  "region": "cn-shanghai",
  "authType": "2",
  "emrProjectId": "FP-sdadsad"
}
```

*   postgresql

```

{
  "jdbcUrl": "jdbc:postgresql://xxxx:1921/ssss",
  "password": "sdadsads",
  "tag": "public",
  "username": "sdsasda"
}
```

*   analyticdb_for_mysql

```

{
  "instanceId": "am-sadsada",
  "database": "xsxsx",
  "username": "xsxsa",
  "password": "asdadsa",
  "connectionString": "am-xssxsxs.ads.aliyuncs.com:3306"
}
```

*   hybriddb_for_postgresql

```

{
  "connectionString": "gp-xsaxsaxa-master.gpdbmaster.rds.aliyuncs.com",
  "database": "xsaxsaxas",
  "password": "xsaxsaxsa@11",
  "instanceId": "gp-xsaxsaxsa",
  "port": "541132",
  "ownerId": "xsaxsaxsas",
  "username": "sadsad"
}
```

*   holo

```

{
  "accessId": "xsaxsaxs",
  "accessKey": "xsaxsaxsa",
  "database": "xsaxsaxsa",
  "instanceId": "xsaxa",
  "tag": "aliyun"
}
```

*   kafka

```

{
  "instanceId": "xsax-cn-xsaxsa",
  "regionId": "cn-shanghai",
  "tag": "aliyun",
  "ownerId": "1212121212112"
}
```', example='mysql'),
}

model CreateDataSourceResponseBody = {
  data?: long(name='Data', description='Indicates whether the request was successful.', example='123'),
  httpStatusCode?: string(name='HttpStatusCode', description='The ID of the request.', example='200'),
  requestId?: string(name='RequestId', example='0bc141151593763****'),
  success?: boolean(name='Success', example='true'),
}

model CreateDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDataSourceResponseBody(name='body'),
}

async function createDataSourceWithOptions(request: CreateDataSourceRequest, runtime: Util.RuntimeOptions): CreateDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.subType)) {
    query['SubType'] = request.subType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataSource',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDataSource(request: CreateDataSourceRequest): CreateDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataSourceWithOptions(request, runtime);
}

model CreateExportMigrationRequest {
  description?: string(name='Description', description='The description of the export task.', example='test'),
  exportMode?: string(name='ExportMode', description='The export mode of the export task. Valid values:

*   FULL: The export task is used to export all data objects.
*   INCREMENTAL: The export task is used to export data objects that were modified since the specified point in time. If you set this parameter to INCREMENTAL, you must configure the IncrementalSince parameter.', example='FULL'),
  exportObjectStatus?: string(name='ExportObjectStatus', description='The status of the data objects that you want to export in the export task. The system exports data objects in the state that is specified by this parameter. Valid values:

*   SAVED: Data objects that are in the SAVED state are exported.
*   SUBMITTED: Data objects that are in the SUBMITTED state are exported.
*   DEPLOYED: Data objects that are in the DEPLOYED state are exported.', example='SAVED'),
  incrementalSince?: long(name='IncrementalSince', description='The start time of the incremental export task.

The IncrementalSince parameter takes effect only when the ExportMode parameter is set to INCREMENTAL.', example='1589904000000'),
  name?: string(name='Name', description='The name of the export task.

The name of each export task must be unique. You must ensure that no duplicate export task exists in the current workspace.', example='test_export_01'),
  projectId?: long(name='ProjectId', description='The ID of the workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace Management page to obtain the workspace ID.', example='12345'),
}

model CreateExportMigrationResponseBody = {
  data?: long(name='Data', description='The ID of the export task.', example='1234'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot errors.', example='34267E2E-0335-1A60-A1F0-ADA530890CBA'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The call succeeded.
*   false: The call failed. You can locate errors based on the request ID.', example='true'),
}

model CreateExportMigrationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateExportMigrationResponseBody(name='body'),
}

async function createExportMigrationWithOptions(request: CreateExportMigrationRequest, runtime: Util.RuntimeOptions): CreateExportMigrationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.exportMode)) {
    body['ExportMode'] = request.exportMode;
  }
  if (!Util.isUnset(request.exportObjectStatus)) {
    body['ExportObjectStatus'] = request.exportObjectStatus;
  }
  if (!Util.isUnset(request.incrementalSince)) {
    body['IncrementalSince'] = request.incrementalSince;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateExportMigration',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createExportMigration(request: CreateExportMigrationRequest): CreateExportMigrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createExportMigrationWithOptions(request, runtime);
}

model CreateFileRequest {
  advancedSettings?: string(name='AdvancedSettings', description='The advanced configurations of the node.

This parameter is valid only for an EMR Spark Streaming node or an EMR Streaming SQL node. This parameter corresponds to the Advanced Settings tab of the node in the [DataWorks console](https://workbench.data.aliyun.com/console).

The value of this parameter must be in the JSON format.', example='{"queue":"default","SPARK_CONF":"--conf spark.driver.memory=2g"}'),
  autoParsing?: boolean(name='AutoParsing', description='Specifies whether to enable the automatic parsing feature for the file. Valid values:

*   true: enables the automatic parsing feature for the file.
*   false: does not enable the automatic parsing feature for the file.

This parameter corresponds to the Analyze Code parameter that is displayed after Same Cycle is selected in the Dependencies section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='true'),
  autoRerunIntervalMillis?: int32(name='AutoRerunIntervalMillis', description='The interval between automatic reruns after an error occurs. Unit: milliseconds. Maximum value: 1800000 (30 minutes).

This parameter corresponds to the Rerun Interval parameter that is displayed after the Auto Rerun upon Error check box is selected in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).

The interval that you specify in the DataWorks console is measured in minutes. Pay attention to the conversion between the units of time when you call the operation.', example='120000'),
  autoRerunTimes?: int32(name='AutoRerunTimes', description='The number of automatic reruns that are allowed after an error occurs. Maximum value: 10.', example='3'),
  connectionName?: string(name='ConnectionName', description='The name of the data source for which the node is run.

You can call the [UpdateDataSource](~~211432~~) operation to query the available data sources in the workspace.', example='odps_first'),
  content?: string(name='Content', description='The code for the file. The code format varies based on the file type. To view the code format for a specific file type, go to Operation Center, right-click a node of the file type, and then select View Code.', example='SHOW TABLES;'),
  createFolderIfNotExists?: boolean(name='CreateFolderIfNotExists'),
  cronExpress?: string(name='CronExpress', description='The CRON expression that represents the automatic scheduling policy of the node. This parameter corresponds to the Cron Expression parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console). After you configure the Scheduling Cycle and Run At parameters in the DataWorks console, DataWorks generates the value of the Cron Expression parameter.

Examples:

*   CRON expression for a node that is scheduled to run at 05:30 every day: `00 30 05 * * ?`
*   CRON expression for a node that is scheduled to run at the fifteenth minute of each hour: `00 15 00-23/1 * * ?`
*   CRON expression for a node that is scheduled to run every 10 minutes: `00 00/10 * * * ?`
*   CRON expression for a node that is scheduled to run every 10 minutes from 08:00 to 17:00 every day: `00 00-59/10 8-17 * * * ?`
*   CRON expression for a node that is scheduled to run at 00:20 on the first day of each month: `00 20 00 1 * ?`
*   CRON expression for a node that is scheduled to run every three months starting from 00:10 on January 1: `00 10 00 1 1-12/3 ?`
*   CRON expression for a node that is scheduled to run at 00:05 every Tuesday and Friday: `00 05 00 * * 2,5`

The scheduling system of DataWorks imposes the following limits on CRON expressions:

*   A node can be scheduled to run at a minimum interval of 5 minutes.
*   A node can be scheduled to run at 00:05 every day at the earliest.', example='00 05 00 * * ?'),
  cycleType?: string(name='CycleType', description='The type of the scheduling cycle. Valid values: NOT_DAY and DAY. The value NOT_DAY indicates that the node is scheduled to run by minute or hour. The value DAY indicates that the node is scheduled to run by day, week, or month.

This parameter corresponds to the Scheduling Cycle parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='DAY'),
  dependentNodeIdList?: string(name='DependentNodeIdList', description='The IDs of the nodes that generate instances in the previous cycle on which the current node depends.', example='abc'),
  dependentType?: string(name='DependentType', description='The type of the cross-cycle scheduling dependency of the node. Valid values:

*   SELF: The instance generated for the node in the current cycle depends on the instance generated for the node in the previous cycle.

*   CHILD: The instance generated for the node in the current cycle depends on the instances generated for the descendant nodes at the nearest level of the node in the previous cycle.

*   USER_DEFINE: The instance generated for the node in the current cycle depends on the instances generated for one or more specified nodes in the previous cycle.

*   NONE: No cross-cycle scheduling dependency type is selected for the node.

*   USER_DEFINE_AND_SELF: The instance generated for the node in the current cycle depends on the instance generated for the node in the previous cycle and the instances generated for one or more specified nodes in the previous cycle.

*   CHILD_AND_SELF: The instance generated for the node in the current cycle depends on the instances generated for the descendant nodes at the nearest level of the node in the previous cycle and the instance generated for the node in the previous cycle.', example='NONE'),
  endEffectDate?: long(name='EndEffectDate', description='The end time of automatic scheduling. Set the value to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.

This parameter corresponds to the Validity Period parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='1671694850000'),
  fileDescription?: string(name='FileDescription', description='The description of the file.'),
  fileFolderPath?: string(name='FileFolderPath', description='The path of the file.'),
  fileName?: string(name='FileName', description='The name of the file.'),
  fileType?: int32(name='FileType', description='The type of the code in the file.

Valid values: 6 (Shell), 10 (ODPS SQL), 11 (ODPS MR), 24 (ODPS Script), 99 (zero load), 221 (PyODPS 2), 225 (ODPS Spark), 227 (EMR Hive), 228 (EMR Spark), 229 (EMR Spark SQL), 230 (EMR MR), 239 (OSS object inspection), 257 (EMR Shell), 258 (EMR Spark Shell), 259 (EMR Presto), 260 (EMR Impala), 900 (real-time synchronization), 1089 (cross-tenant collaboration), 1091 (Hologres development), 1093 (Hologres SQL), 1100 (assignment), and 1221 (PyODPS 3).

You can call the [ListFileType](~~212428~~) operation to query the type of the code for the file.', example='10'),
  ignoreParentSkipRunningProperty?: boolean(name='IgnoreParentSkipRunningProperty'),
  inputList?: string(name='InputList', description='The output name of the parent file on which the current file depends. If you specify multiple output names, separate them with commas (,).

This parameter corresponds to the Output Name parameter under Parent Nodes in the Dependencies section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='project_root,project.file1,project.001_out'),
  inputParameters?: string(name='InputParameters', description='The input parameters of the node. The value of this parameter must be in the JSON format. For more information about the input parameters, see the InputContextParameterList parameter in the Response parameters section of the [GetFile](~~173954~~) operation.

This parameter corresponds to the Input Parameters table in the Input and Output Parameters section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='[{"ValueSource": "project_001.first_node:bizdate_param","ParameterName": "bizdate_input"}]'),
  outputParameters?: string(name='OutputParameters', description='The output parameters of the node. The value of this parameter must be in the JSON format. For more information about the output parameters, see the OutputContextParameterList parameter in the Response parameters section of the [GetFile](~~173954~~) operation.

This parameter corresponds to the Output Parameters table in the Input and Output Parameters section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='[{"Type": 1,"Value": "${bizdate}","ParameterName": "bizdate_param"}]'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the file owner. If this parameter is not configured, the ID of the Alibaba Cloud account of the user who calls the operation is used.', example='1000000000001'),
  paraValue?: string(name='ParaValue', description='The scheduling parameters of the node. Separate multiple parameters with spaces.

This parameter corresponds to the Parameters section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console). For more information about the configurations of the scheduling parameters, see [Configure scheduling parameters](~~137548~~).', example='a=x b=y'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace Management page to obtain the workspace ID.

You must configure this parameter or the ProjectIdentifier parameter to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace Management page to obtain the workspace name.

You must configure this parameter or the ProjectId parameter to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
  rerunMode?: string(name='RerunMode', description='Specifies whether the node that corresponds to the file can be rerun. Valid values:

*   ALL_ALLOWED: The node can be rerun regardless of whether it is successfully run or fails to run.
*   FAILURE_ALLOWED: The node can be rerun only after it fails to run.
*   ALL_DENIED: The node cannot be rerun regardless of whether it is successfully run or fails to run.

This parameter corresponds to the Rerun parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='ALL_ALLOWED'),
  resourceGroupId?: long(name='ResourceGroupId', description='This parameter is deprecated. Do not use this parameter.

The identifier of the resource group that is used to run the node. This parameter corresponds to the Resource Group parameter in the Resource Group section of the Properties tab in the DataWorks console. You must configure one of the ResourceGroupId and ResourceGroupIdentifier parameters to determine the resource group that is used to run the node.

You can call the [ListResourceGroups](~~173913~~) operation to query the available resource groups in the workspace. When you call the operation, set the ResourceGroupType parameter to 1. The response parameter Id indicates the ID of an available resource group.', example='375827434852437'),
  resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', description='The identifier of the resource group that is used to run the node. You can call the [ListResourceGroups](~~173913~~) operation to query the available resource groups in the workspace.', example='group_375827434852437'),
  schedulerType?: string(name='SchedulerType', description='The scheduling type of the inner node. Valid values:

*   NORMAL: The node is an auto triggered node.
*   MANUAL: The node is a manually triggered node. Manually triggered nodes cannot be automatically triggered. They correspond to the nodes in the Manually Triggered Workflows pane.
*   PAUSE: The node is a paused node.
*   SKIP: The node is a dry-run node. Dry-run nodes are started as scheduled, but the system sets the status of the nodes to successful when it starts to run them.', example='NORMAL'),
  startEffectDate?: long(name='StartEffectDate', description='The start time of automatic scheduling. Set the value to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.

This parameter corresponds to the Validity Period parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='1671608450000'),
  startImmediately?: boolean(name='StartImmediately', description='Specifies whether to immediately run a node after the node is deployed to the production environment.

This parameter is valid only for an EMR Spark Streaming node or an EMR Streaming SQL node. This parameter corresponds to the Start Method parameter in the Schedule section of the Configure tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='true'),
  stop?: boolean(name='Stop', description='Specifies whether to suspend the scheduling of the node. Valid values:

*   true: suspends the scheduling of the node.
*   false: does not suspend the scheduling of the node.

This parameter corresponds to the Recurrence parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='false'),
}

model CreateFileResponseBody = {
  data?: long(name='Data', description='The ID of the file that was created.', example='1000001'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model CreateFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFileResponseBody(name='body'),
}

async function createFileWithOptions(request: CreateFileRequest, runtime: Util.RuntimeOptions): CreateFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.advancedSettings)) {
    body['AdvancedSettings'] = request.advancedSettings;
  }
  if (!Util.isUnset(request.autoParsing)) {
    body['AutoParsing'] = request.autoParsing;
  }
  if (!Util.isUnset(request.autoRerunIntervalMillis)) {
    body['AutoRerunIntervalMillis'] = request.autoRerunIntervalMillis;
  }
  if (!Util.isUnset(request.autoRerunTimes)) {
    body['AutoRerunTimes'] = request.autoRerunTimes;
  }
  if (!Util.isUnset(request.connectionName)) {
    body['ConnectionName'] = request.connectionName;
  }
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.createFolderIfNotExists)) {
    body['CreateFolderIfNotExists'] = request.createFolderIfNotExists;
  }
  if (!Util.isUnset(request.cronExpress)) {
    body['CronExpress'] = request.cronExpress;
  }
  if (!Util.isUnset(request.cycleType)) {
    body['CycleType'] = request.cycleType;
  }
  if (!Util.isUnset(request.dependentNodeIdList)) {
    body['DependentNodeIdList'] = request.dependentNodeIdList;
  }
  if (!Util.isUnset(request.dependentType)) {
    body['DependentType'] = request.dependentType;
  }
  if (!Util.isUnset(request.endEffectDate)) {
    body['EndEffectDate'] = request.endEffectDate;
  }
  if (!Util.isUnset(request.fileDescription)) {
    body['FileDescription'] = request.fileDescription;
  }
  if (!Util.isUnset(request.fileFolderPath)) {
    body['FileFolderPath'] = request.fileFolderPath;
  }
  if (!Util.isUnset(request.fileName)) {
    body['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.fileType)) {
    body['FileType'] = request.fileType;
  }
  if (!Util.isUnset(request.ignoreParentSkipRunningProperty)) {
    body['IgnoreParentSkipRunningProperty'] = request.ignoreParentSkipRunningProperty;
  }
  if (!Util.isUnset(request.inputList)) {
    body['InputList'] = request.inputList;
  }
  if (!Util.isUnset(request.inputParameters)) {
    body['InputParameters'] = request.inputParameters;
  }
  if (!Util.isUnset(request.outputParameters)) {
    body['OutputParameters'] = request.outputParameters;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.paraValue)) {
    body['ParaValue'] = request.paraValue;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.rerunMode)) {
    body['RerunMode'] = request.rerunMode;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceGroupIdentifier)) {
    body['ResourceGroupIdentifier'] = request.resourceGroupIdentifier;
  }
  if (!Util.isUnset(request.schedulerType)) {
    body['SchedulerType'] = request.schedulerType;
  }
  if (!Util.isUnset(request.startEffectDate)) {
    body['StartEffectDate'] = request.startEffectDate;
  }
  if (!Util.isUnset(request.startImmediately)) {
    body['StartImmediately'] = request.startImmediately;
  }
  if (!Util.isUnset(request.stop)) {
    body['Stop'] = request.stop;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFile(request: CreateFileRequest): CreateFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFileWithOptions(request, runtime);
}

model CreateFolderRequest {
  folderPath?: string(name='FolderPath', description='The HTTP status code returned.'),
  projectId?: long(name='ProjectId', description='The name of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the workspace name. You must configure either the ProjectId or ProjectIdentifier parameter to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The path of the folder.', example='dw_project'),
}

model CreateFolderResponseBody = {
  data?: string(name='Data', description='The ID of the request. You can use the ID to troubleshoot issues.', example='bdfd68****'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='Indicates whether the request was successful.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The unique identifier of the folder.', example='200'),
  requestId?: string(name='RequestId', description='The error message returned.', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', description='The error code returned.', example='true'),
}

model CreateFolderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFolderResponseBody(name='body'),
}

async function createFolderWithOptions(request: CreateFolderRequest, runtime: Util.RuntimeOptions): CreateFolderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderPath)) {
    body['FolderPath'] = request.folderPath;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateFolder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFolder(request: CreateFolderRequest): CreateFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFolderWithOptions(request, runtime);
}

model CreateImportMigrationRequest {
  calculateEngineMap?: string(name='CalculateEngineMap', description='The mapping between the source compute engine instance and the destination compute engine instance.

The following types of compute engine instances are supported: MaxCompute, E-MapReduce (EMR), Hadoop CDH, and Hologres.', example='{     "ODPS": {       "zxy_8221431_engine": "wzp_kaifazheban_engine"     },     "EMR": {         "aaaa": "bbb"     }   }'),
  commitRule?: string(name='CommitRule', description='The rule configured for automatically committing and deploying the import task. The rule contains the following parameters:

*   resourceAutoCommit: specifies whether resources are automatically committed. The value true indicates that the resources are automatically committed, and the value false indicates that the resources are not automatically committed.
*   resourceAutoDeploy: specifies whether resources are automatically deployed. The value true indicates that the resources are automatically deployed, and the value false indicates that the resources are not automatically deployed.
*   functionAutoCommit: specifies whether the function is automatically committed. The value true indicates that the function is automatically committed, and the value false indicates that the function is not automatically committed.
*   functionAutoDeploy: specifies whether the function is automatically deployed. The value true indicates that the function is automatically deployed, and the value false indicates that the function is not automatically deployed.
*   tableAutoCommitToDev: specifies whether the table is automatically committed to the development environment. The value true indicates that the table is automatically committed to the development environment, and the value false indicates that the table is not automatically committed to the development environment.
*   tableAutoCommitToProd: specifies whether the table is automatically committed to the production environment. The value true indicates that the table is automatically committed to the production environment, and the value false indicates that the table is not automatically committed to the production environment.
*   ignoreLock: specifies whether the lock is automatically ignored when an import task is locked. The value true indicates that the lock is automatically ignored, and the value false indicates that the lock is not automatically ignored. If you set this parameter to true for an import task, you can forcibly update the task even if the task is locked.
*   fileAutoCommit: specifies whether the file is automatically committed. The value true indicates that the file is automatically committed, and the value false indicates that the file is not automatically committed.
*   fileAutoDeploy: specifies whether the file is automatically deployed. The value true indicates that the file is automatically deployed, and the value false indicates that the file is not automatically deployed.', example='{     "resourceAutoCommit": false,     "resourceAutoDeploy": false,     "functionAutoCommit": false,     "functionAutoDeploy": false,     "tableAutoCommitToDev": false,     "tableAutoCommitToProd": false,     "ignoreLock": false,     "fileAutoCommit": false,     "fileAutoDeploy": false   }'),
  description?: string(name='Description', description='The description of the import package.', example='test description'),
  name?: string(name='Name', description='The name of the import task. The name must be unique within the workspace.', example='test_import_001'),
  packageFile?: string(name='PackageFile', description='The path of the import package.

**The import package must be uploaded. Example of the upload method:**`  Config config = new Config(); config.setAccessKeyId(accessId); config.setAccessKeySecret(accessKey); config.setEndpoint(popEndpoint); config.setRegionId(regionId); Client client = new Client(config); CreateImportMigrationAdvanceRequest request = new CreateImportMigrationAdvanceRequest(); request.setName("test_migration_api_" + System.currentTimeMillis()); request.setProjectId(123456L); request.setPackageType("DATAWORKS_MODEL"); request.setPackageFileObject(new FileInputStream("/home/admin/Downloads/test.zip")); RuntimeOptions runtime = new RuntimeOptions(); CreateImportMigrationResponse response = client.createImportMigrationAdvance(request, runtime); ... `', example='/home/admin/xxx/import.zip'),
  packageType?: string(name='PackageType', description='The type of the import package. Valid values:

*   DATAWORKS_MODEL (standard format)
*   DATAWORKS_V2 (Apsara Stack DataWorks V3.6.1 to V3.11)
*   DATAWORKS_V3 (Apsara Stack DataWorks V3.12 and later)', example='DATAWORKS_MODEL'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the ID.', example='123456'),
  resourceGroupMap?: string(name='ResourceGroupMap', description='The mapping between the resource group for scheduling and the resource group for Data Integration. The keys and values in the mapping are the identifiers of the resource groups. Specify the mapping in the following format:

```

{
    "SCHEDULER_RESOURCE_GROUP": {
        "xxx": "yyy"
    },
    "DI_RESOURCE_GROUP": {
        "ccc": "dfdd"
    }
}

                                
```', example='{"SCHEDULER_RESOURCE_GROUP": {"xxx":"yyy"},"DI_RESOURCE_GROUP":{"ccc":"ddd"}}'),
  workspaceMap?: string(name='WorkspaceMap', description='The mapping between the prefixes for the names of the source and destination workspaces. When the system performs the import operation, the prefix for the name of the source workspace in the import package is replaced based on the mapping.', example='{"test_workspace_src": "test_workspace_target"}'),
}

model CreateImportMigrationAdvanceRequest {
  calculateEngineMap?: string(name='CalculateEngineMap', description='The mapping between the source compute engine instance and the destination compute engine instance.

The following types of compute engine instances are supported: MaxCompute, E-MapReduce (EMR), Hadoop CDH, and Hologres.', example='{     "ODPS": {       "zxy_8221431_engine": "wzp_kaifazheban_engine"     },     "EMR": {         "aaaa": "bbb"     }   }'),
  commitRule?: string(name='CommitRule', description='The rule configured for automatically committing and deploying the import task. The rule contains the following parameters:

*   resourceAutoCommit: specifies whether resources are automatically committed. The value true indicates that the resources are automatically committed, and the value false indicates that the resources are not automatically committed.
*   resourceAutoDeploy: specifies whether resources are automatically deployed. The value true indicates that the resources are automatically deployed, and the value false indicates that the resources are not automatically deployed.
*   functionAutoCommit: specifies whether the function is automatically committed. The value true indicates that the function is automatically committed, and the value false indicates that the function is not automatically committed.
*   functionAutoDeploy: specifies whether the function is automatically deployed. The value true indicates that the function is automatically deployed, and the value false indicates that the function is not automatically deployed.
*   tableAutoCommitToDev: specifies whether the table is automatically committed to the development environment. The value true indicates that the table is automatically committed to the development environment, and the value false indicates that the table is not automatically committed to the development environment.
*   tableAutoCommitToProd: specifies whether the table is automatically committed to the production environment. The value true indicates that the table is automatically committed to the production environment, and the value false indicates that the table is not automatically committed to the production environment.
*   ignoreLock: specifies whether the lock is automatically ignored when an import task is locked. The value true indicates that the lock is automatically ignored, and the value false indicates that the lock is not automatically ignored. If you set this parameter to true for an import task, you can forcibly update the task even if the task is locked.
*   fileAutoCommit: specifies whether the file is automatically committed. The value true indicates that the file is automatically committed, and the value false indicates that the file is not automatically committed.
*   fileAutoDeploy: specifies whether the file is automatically deployed. The value true indicates that the file is automatically deployed, and the value false indicates that the file is not automatically deployed.', example='{     "resourceAutoCommit": false,     "resourceAutoDeploy": false,     "functionAutoCommit": false,     "functionAutoDeploy": false,     "tableAutoCommitToDev": false,     "tableAutoCommitToProd": false,     "ignoreLock": false,     "fileAutoCommit": false,     "fileAutoDeploy": false   }'),
  description?: string(name='Description', description='The description of the import package.', example='test description'),
  name?: string(name='Name', description='The name of the import task. The name must be unique within the workspace.', example='test_import_001'),
  packageFileObject?: readable(name='PackageFile', description='The path of the import package.

**The import package must be uploaded. Example of the upload method:**`  Config config = new Config(); config.setAccessKeyId(accessId); config.setAccessKeySecret(accessKey); config.setEndpoint(popEndpoint); config.setRegionId(regionId); Client client = new Client(config); CreateImportMigrationAdvanceRequest request = new CreateImportMigrationAdvanceRequest(); request.setName("test_migration_api_" + System.currentTimeMillis()); request.setProjectId(123456L); request.setPackageType("DATAWORKS_MODEL"); request.setPackageFileObject(new FileInputStream("/home/admin/Downloads/test.zip")); RuntimeOptions runtime = new RuntimeOptions(); CreateImportMigrationResponse response = client.createImportMigrationAdvance(request, runtime); ... `', example='/home/admin/xxx/import.zip'),
  packageType?: string(name='PackageType', description='The type of the import package. Valid values:

*   DATAWORKS_MODEL (standard format)
*   DATAWORKS_V2 (Apsara Stack DataWorks V3.6.1 to V3.11)
*   DATAWORKS_V3 (Apsara Stack DataWorks V3.12 and later)', example='DATAWORKS_MODEL'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the ID.', example='123456'),
  resourceGroupMap?: string(name='ResourceGroupMap', description='The mapping between the resource group for scheduling and the resource group for Data Integration. The keys and values in the mapping are the identifiers of the resource groups. Specify the mapping in the following format:

```

{
    "SCHEDULER_RESOURCE_GROUP": {
        "xxx": "yyy"
    },
    "DI_RESOURCE_GROUP": {
        "ccc": "dfdd"
    }
}

                                
```', example='{"SCHEDULER_RESOURCE_GROUP": {"xxx":"yyy"},"DI_RESOURCE_GROUP":{"ccc":"ddd"}}'),
  workspaceMap?: string(name='WorkspaceMap', description='The mapping between the prefixes for the names of the source and destination workspaces. When the system performs the import operation, the prefix for the name of the source workspace in the import package is replaced based on the mapping.', example='{"test_workspace_src": "test_workspace_target"}'),
}

model CreateImportMigrationResponseBody = {
  data?: long(name='Data', description='The ID of the import task. The ID is used as an input parameter if you want the system to run the import task or you want to obtain the running progress of the import task.', example='123456'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='110001123456'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='test error message'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='ADFASDFASDFA-ADFASDF-ASDFADSDF-AFFADS'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model CreateImportMigrationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateImportMigrationResponseBody(name='body'),
}

/**
  * The import package must be uploaded. Example of the upload method:
  * Config config = new Config();
  * config.setAccessKeyId(accessId);
  * config.setAccessKeySecret(accessKey);
  * config.setEndpoint(popEndpoint);
  * config.setRegionId(regionId);
  * Client client = new Client(config);
  * CreateImportMigrationAdvanceRequest request = new CreateImportMigrationAdvanceRequest();
  * request.setName("test_migration_api\\_" + System.currentTimeMillis());
  * request.setProjectId(123456L);
  * request.setPackageType("DATAWORKS_MODEL");
  * request.setPackageFileObject(new FileInputStream("/home/admin/Downloads/test.zip"));
  * RuntimeOptions runtime = new RuntimeOptions();
  * CreateImportMigrationResponse response = client.createImportMigrationAdvance(request, runtime);
  * ...
  *
  * @param request CreateImportMigrationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateImportMigrationResponse
 */
async function createImportMigrationWithOptions(request: CreateImportMigrationRequest, runtime: Util.RuntimeOptions): CreateImportMigrationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.calculateEngineMap)) {
    body['CalculateEngineMap'] = request.calculateEngineMap;
  }
  if (!Util.isUnset(request.commitRule)) {
    body['CommitRule'] = request.commitRule;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.packageFile)) {
    body['PackageFile'] = request.packageFile;
  }
  if (!Util.isUnset(request.packageType)) {
    body['PackageType'] = request.packageType;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.resourceGroupMap)) {
    body['ResourceGroupMap'] = request.resourceGroupMap;
  }
  if (!Util.isUnset(request.workspaceMap)) {
    body['WorkspaceMap'] = request.workspaceMap;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateImportMigration',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The import package must be uploaded. Example of the upload method:
  * Config config = new Config();
  * config.setAccessKeyId(accessId);
  * config.setAccessKeySecret(accessKey);
  * config.setEndpoint(popEndpoint);
  * config.setRegionId(regionId);
  * Client client = new Client(config);
  * CreateImportMigrationAdvanceRequest request = new CreateImportMigrationAdvanceRequest();
  * request.setName("test_migration_api\\_" + System.currentTimeMillis());
  * request.setProjectId(123456L);
  * request.setPackageType("DATAWORKS_MODEL");
  * request.setPackageFileObject(new FileInputStream("/home/admin/Downloads/test.zip"));
  * RuntimeOptions runtime = new RuntimeOptions();
  * CreateImportMigrationResponse response = client.createImportMigrationAdvance(request, runtime);
  * ...
  *
  * @param request CreateImportMigrationRequest
  * @return CreateImportMigrationResponse
 */
async function createImportMigration(request: CreateImportMigrationRequest): CreateImportMigrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImportMigrationWithOptions(request, runtime);
}

async function createImportMigrationAdvance(request: CreateImportMigrationAdvanceRequest, runtime: Util.RuntimeOptions): CreateImportMigrationResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApi.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'dataworks-public',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var createImportMigrationReq = new CreateImportMigrationRequest{};
  OpenApiUtil.convert(request, createImportMigrationReq);

  if(!Util.isUnset(request.packageFileObject)) {
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.body.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.body.endpoint, authResponse.body.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.body.objectKey,
      content = request.packageFileObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.body.accessKeyId,
      policy = authResponse.body.encodedPolicy,
      signature = authResponse.body.signature,
      key = authResponse.body.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.body.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    createImportMigrationReq.packageFile = `http://${authResponse.body.bucket}.${authResponse.body.endpoint}/${authResponse.body.objectKey}`;
  }
  var createImportMigrationResp = createImportMigrationWithOptions(createImportMigrationReq, runtime);
  return createImportMigrationResp;
}

model CreateManualDagRequest {
  bizDate?: string(name='BizDate', example='2020-11-11 00:00:00'),
  dagParameters?: string(name='DagParameters', example='{"kaaaa": "vaaaaa", "kbbbb": "vbbbbb"}'),
  excludeNodeIds?: string(name='ExcludeNodeIds', example='123,456'),
  flowName?: string(name='FlowName', example='test_workflow'),
  includeNodeIds?: string(name='IncludeNodeIds', example='74324,74325'),
  nodeParameters?: string(name='NodeParameters', example='{"20000123121": "key1=val2 key2=val2", "20000123124": "kkkk=vvvvv aaaa=bbbb"}'),
  projectEnv?: string(name='ProjectEnv'),
  projectName?: string(name='ProjectName', example='test_workspace'),
}

model CreateManualDagResponseBody = {
  dagId?: long(name='DagId', example='700000123123141'),
  requestId?: string(name='RequestId', example='AASFDFSDFG-DFSDF-DFSDFD-SDFSDF'),
}

model CreateManualDagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateManualDagResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request CreateManualDagRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateManualDagResponse
 */
// Deprecated
async function createManualDagWithOptions(request: CreateManualDagRequest, runtime: Util.RuntimeOptions): CreateManualDagResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizDate)) {
    body['BizDate'] = request.bizDate;
  }
  if (!Util.isUnset(request.dagParameters)) {
    body['DagParameters'] = request.dagParameters;
  }
  if (!Util.isUnset(request.excludeNodeIds)) {
    body['ExcludeNodeIds'] = request.excludeNodeIds;
  }
  if (!Util.isUnset(request.flowName)) {
    body['FlowName'] = request.flowName;
  }
  if (!Util.isUnset(request.includeNodeIds)) {
    body['IncludeNodeIds'] = request.includeNodeIds;
  }
  if (!Util.isUnset(request.nodeParameters)) {
    body['NodeParameters'] = request.nodeParameters;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateManualDag',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request CreateManualDagRequest
  * @return CreateManualDagResponse
 */
// Deprecated
async function createManualDag(request: CreateManualDagRequest): CreateManualDagResponse {
  var runtime = new Util.RuntimeOptions{};
  return createManualDagWithOptions(request, runtime);
}

model CreateMetaCategoryRequest {
  comment?: string(name='Comment', description='The remarks of the category.', example='category 1'),
  name?: string(name='Name', description='The name of the category.', example='category_name'),
  parentId?: long(name='ParentId', description='The ID of the parent category.', example='0'),
}

model CreateMetaCategoryResponseBody = {
  data?: {
    categoryId?: long(name='CategoryId', description='The ID of the category.', example='223'),
  }(name='Data', description='The information about the category.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateMetaCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMetaCategoryResponseBody(name='body'),
}

async function createMetaCategoryWithOptions(request: CreateMetaCategoryRequest, runtime: Util.RuntimeOptions): CreateMetaCategoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.parentId)) {
    body['ParentId'] = request.parentId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateMetaCategory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createMetaCategory(request: CreateMetaCategoryRequest): CreateMetaCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMetaCategoryWithOptions(request, runtime);
}

model CreateMetaCollectionRequest {
  collectionType?: string(name='CollectionType', description='The ID of the request.', example='ALBUM'),
  comment?: string(name='Comment', description='The unique identifier of the parent collection.', example='this is a comment'),
  name?: string(name='Name', description='The comment of the collection.

The comment must be 1 to 64 characters in length.', example='collection_name'),
  parentQualifiedName?: string(name='ParentQualifiedName', description='The type of the collection.', example='album.333508'),
}

model CreateMetaCollectionResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error message returned.', example='NoPermission'),
  errorMessage?: string(name='ErrorMessage', description='The HTTP status code returned.', example='The specified parameters are invalid.'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  qualifiedName?: string(name='QualifiedName', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='album.11111'),
  requestId?: string(name='RequestId', description='The unique identifier of the collection.', example='E6F0DBDD-5AD****'),
  success?: string(name='Success', description='The error code returned.', example='true'),
}

model CreateMetaCollectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMetaCollectionResponseBody(name='body'),
}

/**
  * A category must belong to a data album.
  * You can create a category in a data album only after you create the data album. You can set the value of the parentQualifiedName parameter to the unique identifier of the data album to create the category.
  *
  * @param request CreateMetaCollectionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateMetaCollectionResponse
 */
async function createMetaCollectionWithOptions(request: CreateMetaCollectionRequest, runtime: Util.RuntimeOptions): CreateMetaCollectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.collectionType)) {
    query['CollectionType'] = request.collectionType;
  }
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.parentQualifiedName)) {
    query['ParentQualifiedName'] = request.parentQualifiedName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateMetaCollection',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * A category must belong to a data album.
  * You can create a category in a data album only after you create the data album. You can set the value of the parentQualifiedName parameter to the unique identifier of the data album to create the category.
  *
  * @param request CreateMetaCollectionRequest
  * @return CreateMetaCollectionResponse
 */
async function createMetaCollection(request: CreateMetaCollectionRequest): CreateMetaCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMetaCollectionWithOptions(request, runtime);
}

model CreatePermissionApplyOrderRequest {
  applyObject?: [ 
    {
      actions?: string(name='Actions', description='The permission that you want to request. If you want to request multiple permissions at the same time, separate them with commas (,). You can request only the following permissions: Select, Describe, Drop, Alter, Update, and Download.', example='Select,Describe'),
      columnMetaList?: [ 
        {
          name?: string(name='Name', description='The name of the field on which you want to request permissions. If you want to request permissions on an entire table, enter the names of all fields in the table.

You can request permissions on specific fields of a table in a MaxCompute project only after LabelSecurity is enabled for this project. If LabelSecurity is disabled, you can request permissions only on an entire table.', example='aColumnName'),
        }
      ](name='ColumnMetaList'),
      name?: string(name='Name', description='The name of the object on which you want to request permissions. You can request permissions only on MaxCompute tables. Set this parameter to the name of the table on which you want to request permissions.', example='aTableName'),
    }
  ](name='ApplyObject'),
  applyReason?: string(name='ApplyReason', description='The reason for your request. The administrator determines whether to approve the request based on the reason.', example='I need to use this table'),
  applyUserIds?: string(name='ApplyUserIds', description='The ID of the Alibaba Cloud account for which you want to request permissions. If you want to request permissions for multiple Alibaba Cloud accounts, separate the IDs of the accounts with commas (,).', example='267842600408993176,267842600408993177'),
  deadline?: long(name='Deadline', description='The expiration time of the permissions that you request. This value is a UNIX timestamp. If you do not specify a value for this parameter, January 1, 2065 is used as the expiration time.

If LabelSecurity is disabled for the MaxCompute project in which you want to request permissions on the fields of a table, or the security level of the fields is 0 or is lower than or equal to the security level of the Alibaba Cloud account for which you want to request permissions, you can request only permanent permissions.

You can go to the Workspace Management page of the DataWorks console, click MaxCompute Management in the left-side navigation pane, and then check whether column-level access control is enabled.

You can go to your DataWorks workspace, view the security level of the fields in DataMap, and then view the security level of the Alibaba Cloud account on the User Management page.', example='1617115071885'),
  engineType?: string(name='EngineType', description='The type of the compute engine instance in which you want to request permissions on the fields of a table. The parameter value is odps and cannot be changed. This value indicates that you can request permissions only on fields of tables in MaxCompute compute engine instances.', example='odps'),
  maxComputeProjectName?: string(name='MaxComputeProjectName', description='The name of the MaxCompute project in which you request permissions on the fields of a table.', example='aMaxcomputeProjectName'),
  orderType?: int32(name='OrderType', description='The type of the permission request order. The parameter value is 1 and cannot be changed. This value indicates ACL-based authorization.', example='1'),
  workspaceId?: int32(name='WorkspaceId', description='The ID of the DataWorks workspace that is associated with the MaxCompute project in which you want to request permissions on the fields of a table. You can go to the Workspace Management page in the DataWorks console to view the workspace ID.', example='12345'),
}

model CreatePermissionApplyOrderResponseBody = {
  flowId?: [ string ](name='FlowId', description='The ID of the request order. If you request permissions on multiple objects but each object has a different request approver, one request order is generated for each object and is sent to the related approver. In this case, an array is returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0bc1ec92159376****'),
}

model CreatePermissionApplyOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePermissionApplyOrderResponseBody(name='body'),
}

async function createPermissionApplyOrderWithOptions(request: CreatePermissionApplyOrderRequest, runtime: Util.RuntimeOptions): CreatePermissionApplyOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applyObject)) {
    query['ApplyObject'] = request.applyObject;
  }
  if (!Util.isUnset(request.applyReason)) {
    query['ApplyReason'] = request.applyReason;
  }
  if (!Util.isUnset(request.applyUserIds)) {
    query['ApplyUserIds'] = request.applyUserIds;
  }
  if (!Util.isUnset(request.deadline)) {
    query['Deadline'] = request.deadline;
  }
  if (!Util.isUnset(request.engineType)) {
    query['EngineType'] = request.engineType;
  }
  if (!Util.isUnset(request.maxComputeProjectName)) {
    query['MaxComputeProjectName'] = request.maxComputeProjectName;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreatePermissionApplyOrder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createPermissionApplyOrder(request: CreatePermissionApplyOrderRequest): CreatePermissionApplyOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPermissionApplyOrderWithOptions(request, runtime);
}

model CreateProjectMemberRequest {
  clientToken?: string(name='ClientToken', description='The ID of the request.', example='1AFAE64E-D1BE-432B-A9****'),
  projectId?: long(name='ProjectId', description='The client token that is used to ensure the idempotence of the request. We recommend that you set this parameter to a UUID.', example='27'),
  roleCode?: string(name='RoleCode', example='role_project_guest'),
  userId?: string(name='UserId', description='The code of the role. This parameter is optional. If you specify the RoleCode parameter, the user is assigned the role.', example='1234'),
}

model CreateProjectMemberResponseBody = {
  requestId?: string(name='RequestId', example='1AFAE64E-D1BE-432B-A9****'),
}

model CreateProjectMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProjectMemberResponseBody(name='body'),
}

async function createProjectMemberWithOptions(request: CreateProjectMemberRequest, runtime: Util.RuntimeOptions): CreateProjectMemberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.roleCode)) {
    query['RoleCode'] = request.roleCode;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateProjectMember',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createProjectMember(request: CreateProjectMemberRequest): CreateProjectMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProjectMemberWithOptions(request, runtime);
}

model CreateQualityEntityRequest {
  entityLevel?: int32(name='EntityLevel', description='Valid values: 0 (corrected when SQl is completed) and 1 (corrected when task is completed).', example='0'),
  envType?: string(name='EnvType', description='The engine or data source type.', example='ODPS'),
  matchExpression?: string(name='MatchExpression', description='The partition expression.', example='dt=$[yyyymmdd]'),
  projectId?: long(name='ProjectId'),
  projectName?: string(name='ProjectName', description='The name of the maxcompute project or data source.', example='autotest'),
  tableName?: string(name='TableName', description='The name of the table.', example='dual'),
}

model CreateQualityEntityResponseBody = {
  data?: int32(name='Data', description='The ID of the partition expression.', example='12345'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='401'),
  errorMessage?: string(name='ErrorMessage', description='The returned message.', example='Your project is not relative with your account.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP request error codes.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='011e1231u3****'),
  success?: boolean(name='Success', description='Indicates whether the call is successful.', example='true'),
}

model CreateQualityEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateQualityEntityResponseBody(name='body'),
}

async function createQualityEntityWithOptions(request: CreateQualityEntityRequest, runtime: Util.RuntimeOptions): CreateQualityEntityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.entityLevel)) {
    body['EntityLevel'] = request.entityLevel;
  }
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.matchExpression)) {
    body['MatchExpression'] = request.matchExpression;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.tableName)) {
    body['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateQualityEntity',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createQualityEntity(request: CreateQualityEntityRequest): CreateQualityEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return createQualityEntityWithOptions(request, runtime);
}

model CreateQualityFollowerRequest {
  alarmMode?: int32(name='AlarmMode', description='The notification method. Valid values: 1, 2, 4, and 5. 1 indicates that the notification is sent by email. 2 indicates that the notification is sent by email and text message. 4 indicates that the notification is sent by a DingTalk chatbot. 5 indicates that the notification is sent by a DingTalk chatbot to all members in a DingTalk group.', example='1'),
  entityId?: long(name='EntityId', description='The ID of the partition filter expression.', example='12345'),
  follower?: string(name='Follower', description='The user ID of the subscriber.', example='123'),
  projectId?: long(name='ProjectId'),
  projectName?: string(name='ProjectName', description='The name of the computing engine instance or data source.', example='autotest'),
}

model CreateQualityFollowerResponseBody = {
  data?: int32(name='Data', description='The ID of the created subscription relationship.', example='12345'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='401'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ecb967ec-c137-48****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model CreateQualityFollowerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateQualityFollowerResponseBody(name='body'),
}

async function createQualityFollowerWithOptions(request: CreateQualityFollowerRequest, runtime: Util.RuntimeOptions): CreateQualityFollowerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alarmMode)) {
    body['AlarmMode'] = request.alarmMode;
  }
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.follower)) {
    body['Follower'] = request.follower;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateQualityFollower',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createQualityFollower(request: CreateQualityFollowerRequest): CreateQualityFollowerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createQualityFollowerWithOptions(request, runtime);
}

model CreateQualityRelativeNodeRequest {
  envType?: string(name='EnvType', description='The type of the compute engine instance or data source.', example='ODPS'),
  matchExpression?: string(name='MatchExpression', description='The partition filter expression.', example='dt=$[yyyymmdd]'),
  nodeId?: long(name='NodeId', description='The ID of the node.', example='12321'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.', example='123'),
  projectName?: string(name='ProjectName', description='The name of the compute engine instance or data source.', example='autotest'),
  tableName?: string(name='TableName', description='The name of the table.', example='dual'),
  targetNodeProjectId?: long(name='TargetNodeProjectId', description='The ID of the workspace to which the node to be associated with the partition filter expression belongs.', example='1234'),
  targetNodeProjectName?: string(name='TargetNodeProjectName', description='The name of the workspace to which the node to be associated with the partition filter expression belongs.', example='autotest'),
}

model CreateQualityRelativeNodeResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the node is associated with the partition filter expression.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='401'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ecb967ec-c137-48****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model CreateQualityRelativeNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateQualityRelativeNodeResponseBody(name='body'),
}

async function createQualityRelativeNodeWithOptions(request: CreateQualityRelativeNodeRequest, runtime: Util.RuntimeOptions): CreateQualityRelativeNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.matchExpression)) {
    body['MatchExpression'] = request.matchExpression;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.tableName)) {
    body['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.targetNodeProjectId)) {
    body['TargetNodeProjectId'] = request.targetNodeProjectId;
  }
  if (!Util.isUnset(request.targetNodeProjectName)) {
    body['TargetNodeProjectName'] = request.targetNodeProjectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateQualityRelativeNode',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createQualityRelativeNode(request: CreateQualityRelativeNodeRequest): CreateQualityRelativeNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createQualityRelativeNodeWithOptions(request, runtime);
}

model CreateQualityRuleRequest {
  blockType?: int32(name='BlockType', description='The strength of the monitoring rule. Valid values: 0 and 1. 0 indicates that the monitoring rule is a weak rule. 1 indicates that the monitoring rule is a strong rule.', example='0'),
  checker?: int32(name='Checker', description='The ID of the checker.', example='9'),
  comment?: string(name='Comment', description='The description of the monitoring rule.'),
  criticalThreshold?: string(name='CriticalThreshold', description='The threshold for a critical alert. The threshold indicates the deviation of the monitoring result from the expected value. You can customize this threshold based on your business requirements. If a strong rule is used and a critical alert is reported, nodes are blocked.', example='20'),
  entityId?: long(name='EntityId', description='The ID of the partition filter expression.', example='15224'),
  expectValue?: string(name='ExpectValue', description='The expected value of the monitoring result.', example='0'),
  methodName?: string(name='MethodName', description='The method used to collect sample data. If you want to use a custom SQL statement as a sampling method, set this parameter to user_defined.', example='count/table_count'),
  operator?: string(name='Operator', description='The comparison operator of the monitoring rule.', example='>'),
  predictType?: int32(name='PredictType', description='Specifies whether the monitoring rule is a dynamic threshold rule. Valid values: 0 and 2. 0 indicates that the monitoring rule is not a dynamic threshold rule. 2 indicates that the monitoring rule is a dynamic threshold rule.', example='0'),
  projectId?: long(name='ProjectId'),
  projectName?: string(name='ProjectName', description='The name of the compute engine instance or data source.', example='autotest'),
  property?: string(name='Property', description='The fields that you want to monitor. If you want to monitor all fields in a table and check the table rows, set this parameter to table_count. If you want to monitor all fields in a table and check the table size, set this parameter to table_size.', example='table_id'),
  propertyType?: string(name='PropertyType', description='The data type of the fields that you want to monitor. If you want to monitor all fields in a table, set this parameter to table. If you want to monitor only a specific field, set this parameter to bigint.', example='bigint'),
  ruleName?: string(name='RuleName', description='The name of the monitoring rule.', example='1234'),
  ruleType?: int32(name='RuleType', description='The type of the monitoring rule. Valid values: 0, 1, and 2. 0 indicates that the monitoring rule is created by the system. 1 indicates that the monitoring rule is created by a user. 2 indicates that the monitoring rule is a workspace-level rule.', example='0'),
  templateId?: int32(name='TemplateId', description='The ID of the template that is used to create the monitoring rule.', example='7'),
  trend?: string(name='Trend', description='The trend of the monitoring result. Valid values:

*   up: increasing
*   down: decreasing
*   abs: absolute value', example='abs'),
  warningThreshold?: string(name='WarningThreshold', description='The threshold for a warning alert. The threshold indicates the deviation of the monitoring result from the expected value. You can customize this threshold based on your business requirements.', example='10'),
  whereCondition?: string(name='WhereCondition', description='The filter condition or custom SQL statement.', example='table_id>1'),
}

model CreateQualityRuleResponseBody = {
  data?: string(name='Data', description='The ID of the monitoring rule that you created.', example='12345'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='401'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ecb967ec-c137-48****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model CreateQualityRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateQualityRuleResponseBody(name='body'),
}

async function createQualityRuleWithOptions(request: CreateQualityRuleRequest, runtime: Util.RuntimeOptions): CreateQualityRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.blockType)) {
    body['BlockType'] = request.blockType;
  }
  if (!Util.isUnset(request.checker)) {
    body['Checker'] = request.checker;
  }
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.criticalThreshold)) {
    body['CriticalThreshold'] = request.criticalThreshold;
  }
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.expectValue)) {
    body['ExpectValue'] = request.expectValue;
  }
  if (!Util.isUnset(request.methodName)) {
    body['MethodName'] = request.methodName;
  }
  if (!Util.isUnset(request.operator)) {
    body['Operator'] = request.operator;
  }
  if (!Util.isUnset(request.predictType)) {
    body['PredictType'] = request.predictType;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.property)) {
    body['Property'] = request.property;
  }
  if (!Util.isUnset(request.propertyType)) {
    body['PropertyType'] = request.propertyType;
  }
  if (!Util.isUnset(request.ruleName)) {
    body['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.ruleType)) {
    body['RuleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.trend)) {
    body['Trend'] = request.trend;
  }
  if (!Util.isUnset(request.warningThreshold)) {
    body['WarningThreshold'] = request.warningThreshold;
  }
  if (!Util.isUnset(request.whereCondition)) {
    body['WhereCondition'] = request.whereCondition;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateQualityRule',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createQualityRule(request: CreateQualityRuleRequest): CreateQualityRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createQualityRuleWithOptions(request, runtime);
}

model CreateRemindRequest {
  alertInterval?: int32(name='AlertInterval', description='The recipient of the alert. Valid values: OWNER and OTHER. The value OWNER indicates the node owner. The value OTHER indicates a specified user.', example='1800'),
  alertMethods?: string(name='AlertMethods', description='The webhook URL of the DingTalk chatbot. You can specify multiple webhook URLs. Separate the specified webhook URLs with commas (,).', example='SMS,MAIL'),
  alertTargets?: string(name='AlertTargets', description='The webhook URL of the WeCom or Lark chatbot. You can specify multiple webhook URLs. Separate the specified webhook URLs with commas (,). The WEBHOOKS notification method must be specified for alertMethods.

Only DataWorks Enterprise Edition supports this parameter.

The webhook URL-based alerting feature is supported in the following regions: China (Shanghai), China (Chengdu), China (Zhangjiakou), China (Beijing), China (Hangzhou), China (Shenzhen), China (Hong Kong), Germany (Frankfurt), and Singapore.', example='9527952795279527'),
  alertUnit?: string(name='AlertUnit', description='*   If the AlertUnit parameter is set to OWNER, leave this parameter empty.
*   If the AlertUnit parameter is set to OTHER, set this parameter to the ID of the Alibaba Cloud account used by a specific user. You can specify multiple IDs. Separate multiple IDs with commas (,). You can specify a maximum of 10 IDs.', example='OWNER'),
  baselineIds?: string(name='BaselineIds', description='The ID of the workflow to which the custom alert rule is applied. This parameter takes effect when the RemindUnit parameter is set to BIZPROCESS. You can specify multiple IDs. Separate multiple IDs with commas (,). A maximum of five workflows can be specified for a custom alert rule.', example='1,2,3'),
  bizProcessIds?: string(name='BizProcessIds', description='The maximum number of alerts. Valid values: 1 to 10. Default value: 3.', example='1,2,3'),
  detail?: string(name='Detail', description='The notification method. Valid values:

*   MAIL: Alert notifications are sent by emails.

*   SMS: Alert notifications are sent by text messages.

    Alert notifications can be sent by text messages only in the Singapore, Malaysia (Kuala Lumpur), and Germany (Frankfurt) regions.

*   WEBHOOKS (WeCom or Lark chatbot): Alert notifications are sent by WeCom or Lark messages. If you want to use this notification method, you must configure the Webhooks parameter.

You can specify multiple notification methods. Separate them with commas (,).', example='{"hour":23,"minu":59}'),
  dndEnd?: string(name='DndEnd', description='The ID of the node to which the custom alert rule is applied. This parameter takes effect when the RemindUnit parameter is set to NODE. You can specify multiple IDs. Separate multiple IDs with commas (,). A maximum of 50 nodes can be specified for a custom alert rule.', example='08:00'),
  maxAlertTimes?: int32(name='MaxAlertTimes', description='The details of the conditions that trigger an alert.

*   If the RemindType parameter is set to FINISHED, leave this parameter empty.
*   If the RemindType parameter is set to UNFINISHED, specify this parameter as key-value pairs. Example: {"hour":23,"minu":59}. Valid values of hour: 0 to 47. Valid values of minu: 0 to 59.
*   If the RemindType parameter is set to ERROR, leave this parameter empty.
*   If the RemindType parameter is set to CYCLE_UNFINISHED, specify this parameter as key-value pairs. Example: {"1":"05:50","2":"06:50","3":"07:50","4":"08:50","5":"09:50","6":"10:50","7":"11:50","8":"12:50","9":"13:50","10":"14:50","11":"15:50","12":"16:50","13":"17:50","14":"18:50","15":"19:50","16":"20:50","17":"21:50","18":"22:50","19":"23:50","20":"24:50","21":"25:50"}. The key indicates the ID of the cycle. Valid values of the ID: 1 to 288. The value indicates the timeout period of the node that is running in the cycle. Specify the value in the hh:mm format. Valid values of hh: 0 to 47. Valid values of mm: 0 to 59.
*   If the RemindType parameter is set to TIMEOUT, set this parameter to the timeout period. Unit: seconds. Example: 1800. This value indicates that an alert is reported if the node has run for more than 30 minutes.', example='2'),
  nodeIds?: string(name='NodeIds', description='The ID of the workspace to which the custom alert rule is applied. This parameter takes effect when the RemindUnit parameter is set to PROJECT. Only one workspace can be specified for a custom alert rule.', example='1,2,3'),
  projectId?: long(name='ProjectId', description='The conditions that trigger an alert. Valid values: FINISHED, UNFINISHED, ERROR, CYCLE_UNFINISHED, and TIMEOUT. The value FINISHED indicates that the node is run. The value UNFINISHED indicates that the node is still running at the specified point in time. The value ERROR indicates that an error occurs when the node is running. The value CYCLE_UNFINISHED indicates that the node is still running in the specified cycle. The value TIMEOUT indicates that the node times out.', example='9527'),
  remindName?: string(name='RemindName', description='The type of the object to which the custom alert rule is applied. Valid values: NODE, BASELINE, PROJECT, and BIZPROCESS. The value NODE indicates a node. The value BASELINE indicates a baseline. The value PROJECT indicates a workspace. The value BIZPROCESS indicates a workflow.', example='test_error_remind'),
  remindType?: string(name='RemindType', description='The minimum interval at which alerts are reported. Unit: seconds. Minimum value: 1200. Default value: 1800.', example='FINISHED'),
  remindUnit?: string(name='RemindUnit', description='The ID of the baseline to which the custom alert rule is applied. This parameter takes effect when the RemindUnit parameter is set to BASELINE. You can specify multiple IDs. Separate multiple IDs with commas (,). A maximum of five baselines can be specified for a custom alert rule.', example='NODE'),
  robotUrls?: string(name='RobotUrls', description='The HTTP status code returned.', example='https://oapi.dingtalk.com/robot/send?access_token=******************************'),
  webhooks?: string(name='Webhooks', description='The ID of the custom alert rule returned.', example='https://open.feishu.cn/open-apis/bot/v2/hook/*******'),
}

model CreateRemindResponseBody = {
  data?: long(name='Data', description='The ID of the request. You can use the ID to troubleshoot issues.', example='1234'),
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='Indicates whether the request was successful.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The error message returned.', example='200'),
  requestId?: string(name='RequestId', description='The error code returned.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model CreateRemindResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRemindResponseBody(name='body'),
}

async function createRemindWithOptions(request: CreateRemindRequest, runtime: Util.RuntimeOptions): CreateRemindResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertInterval)) {
    body['AlertInterval'] = request.alertInterval;
  }
  if (!Util.isUnset(request.alertMethods)) {
    body['AlertMethods'] = request.alertMethods;
  }
  if (!Util.isUnset(request.alertTargets)) {
    body['AlertTargets'] = request.alertTargets;
  }
  if (!Util.isUnset(request.alertUnit)) {
    body['AlertUnit'] = request.alertUnit;
  }
  if (!Util.isUnset(request.baselineIds)) {
    body['BaselineIds'] = request.baselineIds;
  }
  if (!Util.isUnset(request.bizProcessIds)) {
    body['BizProcessIds'] = request.bizProcessIds;
  }
  if (!Util.isUnset(request.detail)) {
    body['Detail'] = request.detail;
  }
  if (!Util.isUnset(request.dndEnd)) {
    body['DndEnd'] = request.dndEnd;
  }
  if (!Util.isUnset(request.maxAlertTimes)) {
    body['MaxAlertTimes'] = request.maxAlertTimes;
  }
  if (!Util.isUnset(request.nodeIds)) {
    body['NodeIds'] = request.nodeIds;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.remindName)) {
    body['RemindName'] = request.remindName;
  }
  if (!Util.isUnset(request.remindType)) {
    body['RemindType'] = request.remindType;
  }
  if (!Util.isUnset(request.remindUnit)) {
    body['RemindUnit'] = request.remindUnit;
  }
  if (!Util.isUnset(request.robotUrls)) {
    body['RobotUrls'] = request.robotUrls;
  }
  if (!Util.isUnset(request.webhooks)) {
    body['Webhooks'] = request.webhooks;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateRemind',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRemind(request: CreateRemindRequest): CreateRemindResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRemindWithOptions(request, runtime);
}

model CreateResourceFileRequest {
  content?: string(name='Content', example='SHOW TABLES;'),
  fileDescription?: string(name='FileDescription'),
  fileFolderPath?: string(name='FileFolderPath'),
  fileName?: string(name='FileName'),
  fileType?: int32(name='FileType', example='10'),
  originResourceName?: string(name='OriginResourceName', example='origin_file_name.sql'),
  owner?: string(name='Owner', example='1000000000001'),
  projectId?: long(name='ProjectId', example='10000'),
  registerToCalcEngine?: boolean(name='RegisterToCalcEngine', example='false'),
  resourceFile?: string(name='ResourceFile', example='http://bucketname1.oss-cn-shanghai.aliyuncs.com/example'),
  storageURL?: string(name='StorageURL', example='oss://oss-cn-shanghai.aliyuncs.com/emr-test'),
  uploadMode?: boolean(name='UploadMode', example='false'),
}

model CreateResourceFileAdvanceRequest {
  content?: string(name='Content', example='SHOW TABLES;'),
  fileDescription?: string(name='FileDescription'),
  fileFolderPath?: string(name='FileFolderPath'),
  fileName?: string(name='FileName'),
  fileType?: int32(name='FileType', example='10'),
  originResourceName?: string(name='OriginResourceName', example='origin_file_name.sql'),
  owner?: string(name='Owner', example='1000000000001'),
  projectId?: long(name='ProjectId', example='10000'),
  registerToCalcEngine?: boolean(name='RegisterToCalcEngine', example='false'),
  resourceFileObject?: readable(name='ResourceFile', example='http://bucketname1.oss-cn-shanghai.aliyuncs.com/example'),
  storageURL?: string(name='StorageURL', example='oss://oss-cn-shanghai.aliyuncs.com/emr-test'),
  uploadMode?: boolean(name='UploadMode', example='false'),
}

model CreateResourceFileResponseBody = {
  data?: long(name='Data', example='1000001'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG'),
}

model CreateResourceFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateResourceFileResponseBody(name='body'),
}

async function createResourceFileWithOptions(request: CreateResourceFileRequest, runtime: Util.RuntimeOptions): CreateResourceFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.fileDescription)) {
    body['FileDescription'] = request.fileDescription;
  }
  if (!Util.isUnset(request.fileFolderPath)) {
    body['FileFolderPath'] = request.fileFolderPath;
  }
  if (!Util.isUnset(request.fileName)) {
    body['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.fileType)) {
    body['FileType'] = request.fileType;
  }
  if (!Util.isUnset(request.originResourceName)) {
    body['OriginResourceName'] = request.originResourceName;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.registerToCalcEngine)) {
    body['RegisterToCalcEngine'] = request.registerToCalcEngine;
  }
  if (!Util.isUnset(request.resourceFile)) {
    body['ResourceFile'] = request.resourceFile;
  }
  if (!Util.isUnset(request.storageURL)) {
    body['StorageURL'] = request.storageURL;
  }
  if (!Util.isUnset(request.uploadMode)) {
    body['UploadMode'] = request.uploadMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateResourceFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createResourceFile(request: CreateResourceFileRequest): CreateResourceFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return createResourceFileWithOptions(request, runtime);
}

async function createResourceFileAdvance(request: CreateResourceFileAdvanceRequest, runtime: Util.RuntimeOptions): CreateResourceFileResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApi.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'dataworks-public',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var createResourceFileReq = new CreateResourceFileRequest{};
  OpenApiUtil.convert(request, createResourceFileReq);

  if(!Util.isUnset(request.resourceFileObject)) {
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.body.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.body.endpoint, authResponse.body.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.body.objectKey,
      content = request.resourceFileObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.body.accessKeyId,
      policy = authResponse.body.encodedPolicy,
      signature = authResponse.body.signature,
      key = authResponse.body.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.body.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    createResourceFileReq.resourceFile = `http://${authResponse.body.bucket}.${authResponse.body.endpoint}/${authResponse.body.objectKey}`;
  }
  var createResourceFileResp = createResourceFileWithOptions(createResourceFileReq, runtime);
  return createResourceFileResp;
}

model CreateTableRequest {
  appGuid?: string(name='AppGuid', description='The comment.', example='odps.test'),
  categoryId?: long(name='CategoryId', description='The ID of the logical level.', example='101'),
  clientToken?: string(name='ClientToken', description='The schema information of the table. You need to enter the schema information of the table if you enable the table schema in MaxCompute.'),
  columns?: [ 
    {
      columnName?: string(name='ColumnName', description='The comment of the field.', example='columnName1'),
      columnNameCn?: string(name='ColumnNameCn', description='The name of the field.

You can call the CreateTable operation to configure a maximum of 1,000 fields.'),
      columnType?: string(name='ColumnType', description='The sequence number of the field. You can use this parameter to specify how fields are sorted in a table. By default, fields are sorted in the order in which requests are created.

If the field is a partition field, this parameter is not supported.', example='string'),
      comment?: string(name='Comment', description='The data type of the field.'),
      isPartitionCol?: boolean(name='IsPartitionCol', description='The ID of the topic.', example='true'),
      length?: int32(name='Length', description='Specifies whether the current field is a partition field.', example='10'),
      seqNumber?: int32(name='SeqNumber', description='The length of the field. For more information, see [MaxCompute V2.0 data type edition](~~159541#concept-2454988~~).', example='1'),
    }
  ](name='Columns'),
  comment?: string(name='Comment', description='Specifies whether the MaxCompute table is a partitioned table. Valid values: 1 and 0. The value 1 indicates that the MaxCompute table is a partitioned table. The value 0 indicates that the MaxCompute table is not a partitioned table. This parameter is deprecated. Do not use this parameter.

The Column.N.isPartitionCol parameter is used to specify whether the MaxCompute table is a partitioned table. If the Column.N.isPartitionCol parameter is set to true, the MaxCompute table is a partitioned table.'),
  endpoint?: string(name='Endpoint', description='The environment of the DataWorks workspace. Valid values:

*   0: development environment
*   1: production environment', example='odps://abc'),
  envType?: int32(name='EnvType', description='The globally unique identifier (GUID) of the MaxCompute project. Specify the GUID in the odps.{projectName} format.', example='1'),
  externalTableType?: string(name='ExternalTableType', description='The storage location of the external table.', example='0'),
  hasPart?: int32(name='HasPart', description='A reserved parameter.', example='0'),
  isView?: int32(name='IsView', description='Specifies whether the table or workspace is visible:

*   0: Both the table and workspace are not visible.
*   1: The table and workspace are visible.
*   2: Only the workspace is visible.', example='0'),
  lifeCycle?: int32(name='LifeCycle', description='The ID of the associated category. You can call the [GetMetaCategory](~~173932~~) operation to query the ID of the category that can be associated.', example='10'),
  location?: string(name='Location', description='The ID of the DataWorks workspace.', example='location'),
  logicalLevelId?: long(name='LogicalLevelId', description='The ID of the physical level.', example='101'),
  ownerId?: string(name='OwnerId'),
  physicsLevelId?: long(name='PhysicsLevelId', description='The storage type of the external table. Valid values:

*   0: Object Storage Service (OSS)
*   1: Tablestore
*   2: Volume
*   3: MySQL', example='101'),
  projectId?: long(name='ProjectId', description='The name of the table.', example='23'),
  schema?: string(name='Schema', description='The display name of the field.', example='default'),
  tableName?: string(name='TableName', description='The endpoint of MaxCompute.', example='tableName1'),
  themes?: [ 
    {
      themeId?: long(name='ThemeId', description='The level that corresponds to the topic ID.', example='101'),
      themeLevel?: int32(name='ThemeLevel', description='The ID of the request.', example='101'),
    }
  ](name='Themes'),
  visibility?: int32(name='Visibility', description='The lifecycle of the table. Unit: days. By default, this parameter is left empty, which indicates that the table is permanently stored.', example='1'),
}

model CreateTableResponseBody = {
  requestId?: string(name='RequestId', description='The information about the request task.

After a request task is submitted, it is divided into multiple subtasks that are run in sequence. After the current subtask is complete, the next subtask starts to run. After all subtasks are complete, the request task is complete.

If a request task is aborted due to one of the following issues, address the issue based on the error code and initiate the request task again:

*   The request task fails to be submitted.
*   After the request task is submitted, a subtask fails to run.', example='abcdef'),
  taskInfo?: {
    content?: string(name='Content', example='success'),
    nextTaskId?: string(name='NextTaskId', description='The ID of the current subtask.', example='abc1'),
    status?: string(name='Status', description='The ID of the subtask that you want to run. If this parameter is left empty, all subtasks are complete. You can call the [GetDDLJobStatus](~~185659~~) operation to query the status of the subtask based on the subtask ID.', example='success'),
    taskId?: string(name='TaskId', description='Details about the status of the current subtask.

*   If the current subtask succeeds, success is returned.
*   If the current subtask fails, the error details are displayed.', example='abc'),
  }(name='TaskInfo', description='The status of the current subtask. Valid values:

*   operating: The subtask is running.
*   success: The subtask succeeds.
*   failure: The subtask fails to run. For more information about the error details, see the Content parameter.'),
}

model CreateTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTableResponseBody(name='body'),
}

async function createTableWithOptions(request: CreateTableRequest, runtime: Util.RuntimeOptions): CreateTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appGuid)) {
    query['AppGuid'] = request.appGuid;
  }
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.externalTableType)) {
    query['ExternalTableType'] = request.externalTableType;
  }
  if (!Util.isUnset(request.hasPart)) {
    query['HasPart'] = request.hasPart;
  }
  if (!Util.isUnset(request.isView)) {
    query['IsView'] = request.isView;
  }
  if (!Util.isUnset(request.lifeCycle)) {
    query['LifeCycle'] = request.lifeCycle;
  }
  if (!Util.isUnset(request.location)) {
    query['Location'] = request.location;
  }
  if (!Util.isUnset(request.logicalLevelId)) {
    query['LogicalLevelId'] = request.logicalLevelId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.physicsLevelId)) {
    query['PhysicsLevelId'] = request.physicsLevelId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.visibility)) {
    query['Visibility'] = request.visibility;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.columns)) {
    body['Columns'] = request.columns;
  }
  if (!Util.isUnset(request.endpoint)) {
    body['Endpoint'] = request.endpoint;
  }
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.themes)) {
    body['Themes'] = request.themes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTable',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTable(request: CreateTableRequest): CreateTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTableWithOptions(request, runtime);
}

model CreateTableLevelRequest {
  description?: string(name='Description', description='Level Description', example='The HTTP status code returned.'),
  levelType?: int32(name='LevelType', description='The ID of the region where the service is activated.', example='1'),
  name?: string(name='Name', description='Level 1', example='The description of the table level.'),
  projectId?: long(name='ProjectId', description='The type of the table level. Valid values: 1 and 2. A value of 1 indicates the logical level. A value of 2 indicates the physical level.', example='123'),
}

model CreateTableLevelResponseBody = {
  errorCode?: string(name='ErrorCode', description='Indicates whether the request is successful.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error code returned.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of the request.', example='200'),
  levelId?: long(name='LevelId', example='123'),
  requestId?: string(name='RequestId', description='1AAE721C-F9EC-5923-BAFC-99802C4E0F21', example='The error message returned.'),
  success?: boolean(name='Success', description='The ID of the table level.', example='true'),
}

model CreateTableLevelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTableLevelResponseBody(name='body'),
}

async function createTableLevelWithOptions(request: CreateTableLevelRequest, runtime: Util.RuntimeOptions): CreateTableLevelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.levelType)) {
    query['LevelType'] = request.levelType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTableLevel',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTableLevel(request: CreateTableLevelRequest): CreateTableLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTableLevelWithOptions(request, runtime);
}

model CreateTableThemeRequest {
  level?: int32(name='Level', description='The level of the table folder. Valid values: 1 and 2. A value of 1 indicates a first-level table folder. A value of 2 indicates a second-level table folder.', example='1'),
  name?: string(name='Name', description='The name of the table folder.'),
  parentId?: long(name='ParentId', description='The ID of the level of the parent table folder.', example='122'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.', example='123'),
}

model CreateTableThemeResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='0'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='success'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ABCd'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  themeId?: long(name='ThemeId', description='The ID of the created table folder.', example='123'),
}

model CreateTableThemeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTableThemeResponseBody(name='body'),
}

async function createTableThemeWithOptions(request: CreateTableThemeRequest, runtime: Util.RuntimeOptions): CreateTableThemeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.level)) {
    query['Level'] = request.level;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.parentId)) {
    query['ParentId'] = request.parentId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTableTheme',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTableTheme(request: CreateTableThemeRequest): CreateTableThemeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTableThemeWithOptions(request, runtime);
}

model CreateUdfFileRequest {
  className?: string(name='ClassName', description='The name of the class in which the function is defined. This parameter corresponds to the Class Name parameter in the Register Function section of the configuration tab of the function in the DataWorks console.', example='com.alibaba.DataWorks.api.udf.StringConcat'),
  cmdDescription?: string(name='CmdDescription', description='The syntax used for calling the function. This parameter corresponds to the Expression Syntax parameter in the Register Function section of the configuration tab of the function in the DataWorks console.', example='StringConcat(String... substrs)'),
  createFolderIfNotExists?: boolean(name='CreateFolderIfNotExists'),
  example?: string(name='Example', description='The example for calling the function. This parameter corresponds to the Example parameter in the Register Function section of the configuration tab of the function in the DataWorks console.', example='StringConcat(\\"a\\", \\"b\\", \\"c\\")'),
  fileFolderPath?: string(name='FileFolderPath', description='The path of the folder in which the file for the function is stored.'),
  fileName?: string(name='FileName', description='The name of the file for the function.', example='StringConcat'),
  functionType?: string(name='FunctionType', description='The type of the function. Valid values: MATH, AGGREGATE, STRING, DATE, ANALYTIC, and OTHER. This parameter corresponds to the Function Type parameter in the Register Function section of the configuration tab of the function in the DataWorks console.', example='STRING'),
  parameterDescription?: string(name='ParameterDescription', description='The description of the input parameters of the function. This parameter corresponds to the Parameter Description parameter in the Register Function section of the configuration tab of the function in the DataWorks console.'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can click the Workspace Manage icon in the upper-right corner of the DataStudio page to go to the Workspace Management page and view the workspace ID.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The unique identifier of the DataWorks workspace. You can click the identifier in the upper-left corner of the DataStudio page to switch to another workspace.

You must specify either this parameter or the projectId parameter to determine the DataWorks workspace to which the operation is called.', example='dw_project'),
  resources?: string(name='Resources', description='The names of the resources that are referenced by the function. This parameter corresponds to the Resources parameter in the Register Function section of the configuration tab of the function in the DataWorks console. Multiple resource names are separated by commas (,).', example='string-concat-1.0.0.jar,commons-lang-2.6.jar'),
  returnValue?: string(name='ReturnValue', description='The description of the return value of the function. This parameter corresponds to the Return Value parameter in the Register Function section of the configuration tab of the function in the DataWorks console.'),
  udfDescription?: string(name='UdfDescription', description='The description of the function. This parameter corresponds to the Description parameter in the Register Function section of the configuration tab of the function in the DataWorks console.'),
}

model CreateUdfFileResponseBody = {
  data?: long(name='Data', description='The ID of the file that was created.', example='100000002'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can troubleshoot issues based on the ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model CreateUdfFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUdfFileResponseBody(name='body'),
}

async function createUdfFileWithOptions(request: CreateUdfFileRequest, runtime: Util.RuntimeOptions): CreateUdfFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.className)) {
    body['ClassName'] = request.className;
  }
  if (!Util.isUnset(request.cmdDescription)) {
    body['CmdDescription'] = request.cmdDescription;
  }
  if (!Util.isUnset(request.createFolderIfNotExists)) {
    body['CreateFolderIfNotExists'] = request.createFolderIfNotExists;
  }
  if (!Util.isUnset(request.example)) {
    body['Example'] = request.example;
  }
  if (!Util.isUnset(request.fileFolderPath)) {
    body['FileFolderPath'] = request.fileFolderPath;
  }
  if (!Util.isUnset(request.fileName)) {
    body['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.functionType)) {
    body['FunctionType'] = request.functionType;
  }
  if (!Util.isUnset(request.parameterDescription)) {
    body['ParameterDescription'] = request.parameterDescription;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.resources)) {
    body['Resources'] = request.resources;
  }
  if (!Util.isUnset(request.returnValue)) {
    body['ReturnValue'] = request.returnValue;
  }
  if (!Util.isUnset(request.udfDescription)) {
    body['UdfDescription'] = request.udfDescription;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateUdfFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createUdfFile(request: CreateUdfFileRequest): CreateUdfFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUdfFileWithOptions(request, runtime);
}

model DeleteBaselineRequest {
  baselineId?: long(name='BaselineId'),
  projectId?: long(name='ProjectId'),
}

model DeleteBaselineResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteBaselineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBaselineResponseBody(name='body'),
}

async function deleteBaselineWithOptions(request: DeleteBaselineRequest, runtime: Util.RuntimeOptions): DeleteBaselineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBaseline',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBaseline(request: DeleteBaselineRequest): DeleteBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBaselineWithOptions(request, runtime);
}

model DeleteBusinessRequest {
  businessId?: long(name='BusinessId', description='The ID of the workflow. You can call the [ListBusiness](~~173945~~) operation to query the workflow ID.', example='1000001'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the ID. You must specify either this parameter or ProjectIdentifier to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Settings panel to obtain the name. You must specify either this parameter or ProjectId to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model DeleteBusinessResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DeleteBusinessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBusinessResponseBody(name='body'),
}

async function deleteBusinessWithOptions(request: DeleteBusinessRequest, runtime: Util.RuntimeOptions): DeleteBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessId)) {
    body['BusinessId'] = request.businessId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBusiness',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBusiness(request: DeleteBusinessRequest): DeleteBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBusinessWithOptions(request, runtime);
}

model DeleteConnectionRequest {
  connectionId?: long(name='ConnectionId', example='1'),
}

model DeleteConnectionResponseBody = {
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1411515937635****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteConnectionResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DeleteConnectionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteConnectionResponse
 */
// Deprecated
async function deleteConnectionWithOptions(request: DeleteConnectionRequest, runtime: Util.RuntimeOptions): DeleteConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionId)) {
    query['ConnectionId'] = request.connectionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteConnection',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DeleteConnectionRequest
  * @return DeleteConnectionResponse
 */
// Deprecated
async function deleteConnection(request: DeleteConnectionRequest): DeleteConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteConnectionWithOptions(request, runtime);
}

model DeleteDISyncTaskRequest {
  fileId?: long(name='FileId', description='Indicates whether the request is successful. Valid values:

*   true: The request is successful.
*   false: The request failed.', example='100'),
  projectId?: long(name='ProjectId', description='The type of the synchronization node in Data Integration.

The parameter value is DI_REALTIME and cannot be changed. The value indicates a real-time synchronization node.', example='10000'),
  taskType?: string(name='TaskType', description='The ID of the real-time synchronization node. You can call the [ListFiles](~~173942~~) operation to query the ID of the node.', example='DI_REALTIME'),
}

model DeleteDISyncTaskResponseBody = {
  data?: {
    message?: string(name='Message', example='fileId:[100] is invalid.'),
    status?: string(name='Status', description='The reason why the synchronization node in Data Integration failed to be deleted.

If the synchronization node in Data Integration is deleted, the value null is returned.', example='fail'),
  }(name='Data', description='Indicates whether the synchronization node in Data Integration is deleted. Valid values:

*   success: The synchronization node in Data Integration is deleted.
*   fail: The synchronization node in Data Integration failed to be deleted. You can troubleshoot the issue based on the failure reason.'),
  requestId?: string(name='RequestId', description='The result returned after you called the DeleteDISyncTask operation.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='true'),
}

model DeleteDISyncTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDISyncTaskResponseBody(name='body'),
}

async function deleteDISyncTaskWithOptions(request: DeleteDISyncTaskRequest, runtime: Util.RuntimeOptions): DeleteDISyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDISyncTask',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDISyncTask(request: DeleteDISyncTaskRequest): DeleteDISyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDISyncTaskWithOptions(request, runtime);
}

model DeleteDataServiceApiRequest {
  apiId?: long(name='ApiId', description='The ID of the API in DataService Studio.', example='10000'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.', example='10001'),
  tenantId?: long(name='TenantId', description='The ID of the tenant.', example='10002'),
}

model DeleteDataServiceApiResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the API was deleted.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteDataServiceApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDataServiceApiResponseBody(name='body'),
}

async function deleteDataServiceApiWithOptions(request: DeleteDataServiceApiRequest, runtime: Util.RuntimeOptions): DeleteDataServiceApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDataServiceApi(request: DeleteDataServiceApiRequest): DeleteDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataServiceApiWithOptions(request, runtime);
}

model DeleteDataServiceApiAuthorityRequest {
  apiId?: long(name='ApiId', description='The ID of the API.', example='10001'),
  authorizedProjectId?: long(name='AuthorizedProjectId', description='The ID of the workspace from which you want to revoke the access permissions on the API.', example='10002'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.', example='10003'),
  tenantId?: long(name='TenantId', description='The ID of the tenant.', example='10004'),
}

model DeleteDataServiceApiAuthorityResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0000-ABCD-EF****'),
  success?: boolean(name='Success', description='Indicates whether the access permissions are revoked.', example='true'),
}

model DeleteDataServiceApiAuthorityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDataServiceApiAuthorityResponseBody(name='body'),
}

async function deleteDataServiceApiAuthorityWithOptions(request: DeleteDataServiceApiAuthorityRequest, runtime: Util.RuntimeOptions): DeleteDataServiceApiAuthorityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.authorizedProjectId)) {
    body['AuthorizedProjectId'] = request.authorizedProjectId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataServiceApiAuthority',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDataServiceApiAuthority(request: DeleteDataServiceApiAuthorityRequest): DeleteDataServiceApiAuthorityResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataServiceApiAuthorityWithOptions(request, runtime);
}

model DeleteDataSourceRequest {
  dataSourceId?: long(name='DataSourceId', description='The ID of the data source. You can call the [ListDataSources](~~211431~~) operation to obtain the ID.', example='1'),
}

model DeleteDataSourceResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the request is successful.', example='true'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0bc1411515937635****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DeleteDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDataSourceResponseBody(name='body'),
}

async function deleteDataSourceWithOptions(request: DeleteDataSourceRequest, runtime: Util.RuntimeOptions): DeleteDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataSourceId)) {
    query['DataSourceId'] = request.dataSourceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataSource',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataSourceWithOptions(request, runtime);
}

model DeleteFileRequest {
  fileId?: long(name='FileId', description='The HTTP status code.', example='10000001'),
  projectId?: long(name='ProjectId', description='The name of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace Management page to view the workspace name.

You must specify one of the ProjectId and ProjectIdentifier parameters to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The ID of the file. You can call the [ListFiles](~~173942~~) operation to query the ID of the file.', example='dw_project'),
}

model DeleteFileResponseBody = {
  deploymentId?: long(name='DeploymentId', description='The ID of the request. You can troubleshoot errors based on the ID.', example='1000000001'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='Indicates whether the request is successful. Valid values:

*   true: The request is successful.
*   false: The request fails.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of the deployment task that deploys the file. If the file has been committed, an asynchronous process is triggered to delete the file in the scheduling system. The value of this parameter is used to call the GetDeployment operation to poll the status of the asynchronous process.

If this parameter is empty, the file is deleted and the polling is not required.', example='200'),
  requestId?: string(name='RequestId', description='The error message returned.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='The error code returned.', example='true'),
}

model DeleteFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFileResponseBody(name='body'),
}

async function deleteFileWithOptions(request: DeleteFileRequest, runtime: Util.RuntimeOptions): DeleteFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFile(request: DeleteFileRequest): DeleteFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFileWithOptions(request, runtime);
}

model DeleteFolderRequest {
  folderId?: string(name='FolderId', description='The ID of the folder. You can call the [ListFolders](~~173955~~) operation to query the ID.', example='2eb6f9****'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the ID. You must specify either this parameter or ProjectIdentifier to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Settings panel to obtain the name. You must specify either this parameter or ProjectId to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model DeleteFolderResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DeleteFolderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFolderResponseBody(name='body'),
}

async function deleteFolderWithOptions(request: DeleteFolderRequest, runtime: Util.RuntimeOptions): DeleteFolderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderId)) {
    body['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFolder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFolder(request: DeleteFolderRequest): DeleteFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFolderWithOptions(request, runtime);
}

model DeleteFromMetaCategoryRequest {
  categoryId?: long(name='CategoryId', description='The ID of the category.', example='5'),
  tableGuid?: string(name='TableGuid', description='The GUID of the metatable.', example='odps.engine_name.table_name'),
}

model DeleteFromMetaCategoryResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the metatable was removed from the specified category.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteFromMetaCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFromMetaCategoryResponseBody(name='body'),
}

async function deleteFromMetaCategoryWithOptions(request: DeleteFromMetaCategoryRequest, runtime: Util.RuntimeOptions): DeleteFromMetaCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFromMetaCategory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFromMetaCategory(request: DeleteFromMetaCategoryRequest): DeleteFromMetaCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFromMetaCategoryWithOptions(request, runtime);
}

model DeleteLineageRelationRequest {
  destEntityQualifiedName?: string(name='DestEntityQualifiedName'),
  relationshipGuid?: string(name='RelationshipGuid'),
  srcEntityQualifiedName?: string(name='SrcEntityQualifiedName'),
}

model DeleteLineageRelationResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
  success?: boolean(name='Success'),
}

model DeleteLineageRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteLineageRelationResponseBody(name='body'),
}

async function deleteLineageRelationWithOptions(request: DeleteLineageRelationRequest, runtime: Util.RuntimeOptions): DeleteLineageRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destEntityQualifiedName)) {
    query['DestEntityQualifiedName'] = request.destEntityQualifiedName;
  }
  if (!Util.isUnset(request.relationshipGuid)) {
    query['RelationshipGuid'] = request.relationshipGuid;
  }
  if (!Util.isUnset(request.srcEntityQualifiedName)) {
    query['SrcEntityQualifiedName'] = request.srcEntityQualifiedName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLineageRelation',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteLineageRelation(request: DeleteLineageRelationRequest): DeleteLineageRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLineageRelationWithOptions(request, runtime);
}

model DeleteMetaCategoryRequest {
  categoryId?: long(name='CategoryId', description='The ID of the category.', example='23'),
}

model DeleteMetaCategoryResponseBody = {
  data?: boolean(name='Data', description='The business data returned.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteMetaCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMetaCategoryResponseBody(name='body'),
}

async function deleteMetaCategoryWithOptions(request: DeleteMetaCategoryRequest, runtime: Util.RuntimeOptions): DeleteMetaCategoryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMetaCategory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMetaCategory(request: DeleteMetaCategoryRequest): DeleteMetaCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMetaCategoryWithOptions(request, runtime);
}

model DeleteMetaCollectionRequest {
  qualifiedName?: string(name='QualifiedName', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='album.12333'),
}

model DeleteMetaCollectionResponseBody = {
  errorCode?: string(name='ErrorCode', description='Indicates whether the request was successful. Valid values:

true: The request was successful.

false: The request failed.', example='999999'),
  errorMessage?: string(name='ErrorMessage', description='The error code returned.', example='The specified product does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The error message returned.', example='200'),
  requestId?: string(name='RequestId', description='The result of the operation. Valid values:

true: succeeded

false: failed', example='0000-ABCD-E****'),
  status?: boolean(name='Status', description='The HTTP status code returned.', example='true'),
  success?: boolean(name='Success', example='true'),
}

model DeleteMetaCollectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMetaCollectionResponseBody(name='body'),
}

async function deleteMetaCollectionWithOptions(request: DeleteMetaCollectionRequest, runtime: Util.RuntimeOptions): DeleteMetaCollectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.qualifiedName)) {
    query['QualifiedName'] = request.qualifiedName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMetaCollection',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMetaCollection(request: DeleteMetaCollectionRequest): DeleteMetaCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMetaCollectionWithOptions(request, runtime);
}

model DeleteMetaCollectionEntityRequest {
  collectionQualifiedName?: string(name='CollectionQualifiedName', description='The unique identifier of the entity.', example='album.12345'),
  entityQualifiedName?: string(name='EntityQualifiedName', description='The ID of the request.', example='maxcompute.projectA.tableB'),
}

model DeleteMetaCollectionEntityResponseBody = {
  errorCode?: string(name='ErrorCode', description='Indicates whether the request was successful. Valid values:

true: The request was successful.

false: The request failed.', example='999999'),
  errorMessage?: string(name='ErrorMessage', description='The error code returned.', example='entity not exist'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The error message returned.', example='200'),
  requestId?: string(name='RequestId', description='The result of the operation. Valid values:

true: succeeded

false: failed', example='0000-ABCD-E****'),
  status?: boolean(name='Status', description='The HTTP status code returned.', example='true'),
  success?: boolean(name='Success', example='true'),
}

model DeleteMetaCollectionEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMetaCollectionEntityResponseBody(name='body'),
}

async function deleteMetaCollectionEntityWithOptions(request: DeleteMetaCollectionEntityRequest, runtime: Util.RuntimeOptions): DeleteMetaCollectionEntityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.collectionQualifiedName)) {
    query['CollectionQualifiedName'] = request.collectionQualifiedName;
  }
  if (!Util.isUnset(request.entityQualifiedName)) {
    query['EntityQualifiedName'] = request.entityQualifiedName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMetaCollectionEntity',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMetaCollectionEntity(request: DeleteMetaCollectionEntityRequest): DeleteMetaCollectionEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMetaCollectionEntityWithOptions(request, runtime);
}

model DeleteProjectMemberRequest {
  projectId?: long(name='ProjectId', description='The ID of the region.', example='27'),
  userId?: string(name='UserId', example='1234'),
}

model DeleteProjectMemberResponseBody = {
  requestId?: string(name='RequestId', example='1AFAE64E-D1BE-432B-A9****'),
}

model DeleteProjectMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProjectMemberResponseBody(name='body'),
}

async function deleteProjectMemberWithOptions(request: DeleteProjectMemberRequest, runtime: Util.RuntimeOptions): DeleteProjectMemberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProjectMember',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteProjectMember(request: DeleteProjectMemberRequest): DeleteProjectMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProjectMemberWithOptions(request, runtime);
}

model DeleteQualityEntityRequest {
  entityId?: long(name='EntityId', description='The ID of the partition filter expression.', example='1234'),
  envType?: string(name='EnvType', description='The type of the compute engine instance or data source. Valid values: EMR, Hologres, AnalyticDB for PostgreSQL, CDH, MaxCompute, Kafka and DataHub.', example='ODPS'),
  projectId?: long(name='ProjectId'),
  projectName?: string(name='ProjectName', description='The name of the compute engine instance or data source.', example='autotest'),
}

model DeleteQualityEntityResponseBody = {
  data?: boolean(name='Data', description='The result returned.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='401'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ecb967ec-c137-48****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DeleteQualityEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteQualityEntityResponseBody(name='body'),
}

async function deleteQualityEntityWithOptions(request: DeleteQualityEntityRequest, runtime: Util.RuntimeOptions): DeleteQualityEntityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteQualityEntity',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteQualityEntity(request: DeleteQualityEntityRequest): DeleteQualityEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteQualityEntityWithOptions(request, runtime);
}

model DeleteQualityFollowerRequest {
  followerId?: long(name='FollowerId', description='The ID of the subscription relationship between the partition filter expression and the subscriber. You can call the [GetQualityFollower](~~174000~~) operation to obtain the ID of the subscription relationship.', example='1234'),
  projectId?: long(name='ProjectId'),
  projectName?: string(name='ProjectName', description='The name of the compute engine or data source for which the partition filter expression is configured. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Monitoring Rules page of Data Quality to obtain the name.', example='autotest'),
}

model DeleteQualityFollowerResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the subscriber was successfully deleted. Valid values:

*   true: The subscriber was successfully deleted.
*   false: The subscriber failed to be deleted. You can troubleshoot errors based on the error message returned.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='401'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned when the subscriber failed to be deleted.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot errors.', example='6d739ef6-098a-47****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model DeleteQualityFollowerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteQualityFollowerResponseBody(name='body'),
}

/**
  * In Data Quality, you must configure monitoring rules based on a partition filter expression. Data Quality uses these rules to detect changes in source data and dirty data generated during the process of extract, transformation, load (ETL). Thereby, Data Quality automatically blocks the nodes that involve dirty data to stop dirty data from spreading downstream. This prevents nodes from producing unexpected dirty data that affects normal use and business decisions. You can go to the Manage Subscriptions page to add subscribers for a partition filter expression. When the monitoring rule described by the partition filter expression is triggered, the subscribers can receive notifications and troubleshoot errors in a timely manner. For more information, see [Configure monitoring rules for MaxCompute](~~73690~~).
  *
  * @param request DeleteQualityFollowerRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteQualityFollowerResponse
 */
async function deleteQualityFollowerWithOptions(request: DeleteQualityFollowerRequest, runtime: Util.RuntimeOptions): DeleteQualityFollowerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.followerId)) {
    body['FollowerId'] = request.followerId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteQualityFollower',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * In Data Quality, you must configure monitoring rules based on a partition filter expression. Data Quality uses these rules to detect changes in source data and dirty data generated during the process of extract, transformation, load (ETL). Thereby, Data Quality automatically blocks the nodes that involve dirty data to stop dirty data from spreading downstream. This prevents nodes from producing unexpected dirty data that affects normal use and business decisions. You can go to the Manage Subscriptions page to add subscribers for a partition filter expression. When the monitoring rule described by the partition filter expression is triggered, the subscribers can receive notifications and troubleshoot errors in a timely manner. For more information, see [Configure monitoring rules for MaxCompute](~~73690~~).
  *
  * @param request DeleteQualityFollowerRequest
  * @return DeleteQualityFollowerResponse
 */
async function deleteQualityFollower(request: DeleteQualityFollowerRequest): DeleteQualityFollowerResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteQualityFollowerWithOptions(request, runtime);
}

model DeleteQualityRelativeNodeRequest {
  envType?: string(name='EnvType', description='The environment in which the compute engine instance runs. Valid values: DEV and PRD. The value DEV indicates the development environment, and the value PRD indicates the production environment.', example='ODPS'),
  matchExpression?: string(name='MatchExpression', description='The partition filter expression.', example='dt=$[yyyymmdd]'),
  nodeId?: long(name='NodeId', description='The ID of the node.', example='156234'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.', example='12345'),
  projectName?: string(name='ProjectName', description='The name of the compute engine instance or data source.', example='autotest'),
  tableName?: string(name='TableName', description='The name of the table that is generated by the node.', example='dual'),
  targetNodeProjectId?: long(name='TargetNodeProjectId', description='The ID of the workspace to which the node associated with the partition filter expression belongs.', example='12345'),
  targetNodeProjectName?: string(name='TargetNodeProjectName', description='The name of the workspace to which the node associated with the partition filter expression belongs.', example='autotest'),
}

model DeleteQualityRelativeNodeResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the node is disassociated from the partition filter expression.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='401'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6d739ef6-098a-47****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteQualityRelativeNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteQualityRelativeNodeResponseBody(name='body'),
}

async function deleteQualityRelativeNodeWithOptions(request: DeleteQualityRelativeNodeRequest, runtime: Util.RuntimeOptions): DeleteQualityRelativeNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.matchExpression)) {
    body['MatchExpression'] = request.matchExpression;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.tableName)) {
    body['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.targetNodeProjectId)) {
    body['TargetNodeProjectId'] = request.targetNodeProjectId;
  }
  if (!Util.isUnset(request.targetNodeProjectName)) {
    body['TargetNodeProjectName'] = request.targetNodeProjectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteQualityRelativeNode',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteQualityRelativeNode(request: DeleteQualityRelativeNodeRequest): DeleteQualityRelativeNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteQualityRelativeNodeWithOptions(request, runtime);
}

model DeleteQualityRuleRequest {
  projectId?: long(name='ProjectId'),
  projectName?: string(name='ProjectName', description='The name of the database engine or data source.', example='autotest'),
  ruleId?: long(name='RuleId', description='The ID of the rule.', example='1234'),
}

model DeleteQualityRuleResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the deletion was successful.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='401'),
  errorMessage?: string(name='ErrorMessage', description='The returned message.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6d739ef6-098a-47****'),
  success?: boolean(name='Success', description='Indicates whether the call is successful.', example='true'),
}

model DeleteQualityRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteQualityRuleResponseBody(name='body'),
}

async function deleteQualityRuleWithOptions(request: DeleteQualityRuleRequest, runtime: Util.RuntimeOptions): DeleteQualityRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.ruleId)) {
    body['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteQualityRule',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteQualityRule(request: DeleteQualityRuleRequest): DeleteQualityRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteQualityRuleWithOptions(request, runtime);
}

model DeleteRemindRequest {
  remindId?: long(name='RemindId', description='The ID of the custom alert rule.', example='1234'),
}

model DeleteRemindResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the custom alert rule is deleted. Valid values: true and false. The value true indicates that the custom alert rule is deleted. The value false indicates that the custom alert rule fails to be deleted.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteRemindResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRemindResponseBody(name='body'),
}

async function deleteRemindWithOptions(request: DeleteRemindRequest, runtime: Util.RuntimeOptions): DeleteRemindResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.remindId)) {
    body['RemindId'] = request.remindId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRemind',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRemind(request: DeleteRemindRequest): DeleteRemindResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRemindWithOptions(request, runtime);
}

model DeleteTableRequest {
  appGuid?: string(name='AppGuid', description='The globally unique identifier (GUID) of the MaxCompute project. Specify the GUID in the odps.{projectName} format.', example='odps.test'),
  envType?: int32(name='EnvType', description='The environment of the DataWorks workspace. Valid values: 0 and 1. The value 0 indicates the development environment. The value 1 indicates the production environment.', example='1'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.', example='101'),
  schema?: string(name='Schema', description='The schema information of the table. You need to enter the schema information of the table if you enable the table schema in MaxCompute.', example='default'),
  tableName?: string(name='TableName', description='The name of the MaxCompute table.', example='table1'),
}

model DeleteTableResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='abcde'),
  taskInfo?: {
    content?: string(name='Content', description='The content of the task.', example='success'),
    nextTaskId?: string(name='NextTaskId', description='The ID of the task that is running.', example='abc1'),
    status?: string(name='Status', description='The status of the task that is complete.', example='success'),
    taskId?: string(name='TaskId', description='The ID of the task that is complete.', example='abc'),
  }(name='TaskInfo', description='The information about the task that is used to delete the table.'),
}

model DeleteTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTableResponseBody(name='body'),
}

async function deleteTableWithOptions(request: DeleteTableRequest, runtime: Util.RuntimeOptions): DeleteTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appGuid)) {
    query['AppGuid'] = request.appGuid;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTable',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTable(request: DeleteTableRequest): DeleteTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTableWithOptions(request, runtime);
}

model DeleteTableLevelRequest {
  levelId?: long(name='LevelId', description='The ID of the table level to be deleted. You can call the ListTableLevel operation to obtain the ID.', example='123'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.', example='123'),
}

model DeleteTableLevelResponseBody = {
  deleteResult?: boolean(name='DeleteResult', description='Indicates whether the table level is deleted.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='abcde'),
}

model DeleteTableLevelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTableLevelResponseBody(name='body'),
}

async function deleteTableLevelWithOptions(request: DeleteTableLevelRequest, runtime: Util.RuntimeOptions): DeleteTableLevelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.levelId)) {
    query['LevelId'] = request.levelId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTableLevel',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTableLevel(request: DeleteTableLevelRequest): DeleteTableLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTableLevelWithOptions(request, runtime);
}

model DeleteTableThemeRequest {
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.', example='123'),
  themeId?: long(name='ThemeId', description='The ID of the table folder.', example='123'),
}

model DeleteTableThemeResponseBody = {
  deleteResult?: boolean(name='DeleteResult', description='Indicates whether the table folder is deleted.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='abcdef'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request is successful.
*   false: The request fails.', example='true'),
}

model DeleteTableThemeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTableThemeResponseBody(name='body'),
}

async function deleteTableThemeWithOptions(request: DeleteTableThemeRequest, runtime: Util.RuntimeOptions): DeleteTableThemeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.themeId)) {
    query['ThemeId'] = request.themeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTableTheme',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTableTheme(request: DeleteTableThemeRequest): DeleteTableThemeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTableThemeWithOptions(request, runtime);
}

model DeployDISyncTaskRequest {
  fileId?: long(name='FileId', description='Indicates whether the request is successful. Valid values:

*   true: The request is successful.
*   false: The request fails.', example='100'),
  projectId?: long(name='ProjectId', description='The type of the object that you want to deploy. Valid values:

*   DI_REALTIME: real-time synchronization node
*   DI_SOLUTION: data synchronization solution', example='10000'),
  taskType?: string(name='TaskType', description='*   If you set the TaskType parameter to DI_REALTIME, set the FileId parameter to the ID of the real-time synchronization node that you want to deploy.
*   If you set the TaskType parameter to DI_SOLUTION, set the FileId parameter to the ID of the data synchronization solution that you want to deploy.

You can call the [ListFiles](~~173942~~) operation to query the ID of the real-time synchronization node or data synchronization solution.', example='DI_REALTIME'),
}

model DeployDISyncTaskResponseBody = {
  data?: {
    message?: string(name='Message', example='submit and deploy fail.'),
    status?: string(name='Status', description='The cause of the failure to deploy the real-time synchronization node or data synchronization solution.

If the real-time synchronization node or data synchronization solution is deployed, the value null is returned.', example='success'),
  }(name='Data', description='Indicates whether the real-time synchronization node or data synchronization solution is deployed. Valid values:

*   success: The real-time synchronization node or data synchronization solution is deployed.
*   fail: The real-time synchronization node or data synchronization solution fails to be deployed.'),
  requestId?: string(name='RequestId', description='The result of deploying the real-time synchronization node or data synchronization solution.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='The ID of the request. You can query logs and troubleshoot issues based on the ID.', example='true'),
}

model DeployDISyncTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeployDISyncTaskResponseBody(name='body'),
}

async function deployDISyncTaskWithOptions(request: DeployDISyncTaskRequest, runtime: Util.RuntimeOptions): DeployDISyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeployDISyncTask',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deployDISyncTask(request: DeployDISyncTaskRequest): DeployDISyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deployDISyncTaskWithOptions(request, runtime);
}

model DeployFileRequest {
  comment?: string(name='Comment', description='The description of the deployment operation.'),
  fileId?: long(name='FileId', description='The ID of the file. You can call the [ListFiles](~~173942~~) operation to query the ID.

You must configure either the FileId parameter or the NodeId parameter.', example='10000001'),
  nodeId?: long(name='NodeId', description='The ID of the node in the scheduling system that corresponds to the file that you want to deploy. You must configure either the NodeId parameter or the FileId parameter.', example='2000001'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the workspace ID. You must configure either this parameter or the ProjectIdentifier parameter to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the workspace name. You must configure either this parameter or the ProjectId parameter to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model DeployFileResponseBody = {
  data?: long(name='Data', description='The ID of the deployment task. The ID is used as the value of a specific request parameter when you call the [GetDeployment](~~173950~~) operation to query the details of the deployment task.', example='30000001'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can troubleshoot issues based on the ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DeployFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeployFileResponseBody(name='body'),
}

async function deployFileWithOptions(request: DeployFileRequest, runtime: Util.RuntimeOptions): DeployFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeployFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deployFile(request: DeployFileRequest): DeployFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deployFileWithOptions(request, runtime);
}

model DesensitizeDataRequest {
  data?: string(name='Data', description='The data that you want to mask.', example='15365291784'),
  sceneCode?: string(name='SceneCode', description='The code of the data masking scene. You can view the code on the Data Masking page in Data Security Guard of the DataWorks console.', example='_default_scene_code'),
}

model DesensitizeDataResponseBody = {
  desensitizeData?: string(name='DesensitizeData', description='The data returned after masking.', example='{     "desensData": "**198807120510**"   }'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BCA321BA-46C5-40E9-8A08-6******'),
}

model DesensitizeDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DesensitizeDataResponseBody(name='body'),
}

async function desensitizeDataWithOptions(request: DesensitizeDataRequest, runtime: Util.RuntimeOptions): DesensitizeDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DesensitizeData',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function desensitizeData(request: DesensitizeDataRequest): DesensitizeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return desensitizeDataWithOptions(request, runtime);
}

model EstablishRelationTableToBusinessRequest {
  businessId?: string(name='BusinessId', description='The ID of the workflow. You can call the [ListBusiness](~~173945~~) operation to query the ID.', example='1000001'),
  folderId?: string(name='FolderId', description='The ID of the folder. You can call the [GetFolder](~~173952~~) or [ListFolders](~~173955~~) operation to query the ID.', example='2eb6f9****'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can click the Workspace Manage icon in the upper-right corner of the DataStudio page to go to the Workspace Management page and view the workspace ID.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The unique identifier of the DataWorks workspace. You can click the identifier in the upper-left corner of the DataStudio page to switch to another workspace.

You must specify either this parameter or ProjectId to determine the DataWorks workspace to which the operation is applied.', example='dw'),
  tableGuid?: string(name='TableGuid', description='The universally unique identifier (UUID) of the table. You can call the [SearchMetaTables](~~173919~~) operation to query the UUID.', example='odps.dw_project.tb1'),
}

model EstablishRelationTableToBusinessResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can troubleshoot issues based on the ID.', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model EstablishRelationTableToBusinessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EstablishRelationTableToBusinessResponseBody(name='body'),
}

async function establishRelationTableToBusinessWithOptions(request: EstablishRelationTableToBusinessRequest, runtime: Util.RuntimeOptions): EstablishRelationTableToBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessId)) {
    body['BusinessId'] = request.businessId;
  }
  if (!Util.isUnset(request.folderId)) {
    body['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.tableGuid)) {
    body['TableGuid'] = request.tableGuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EstablishRelationTableToBusiness',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function establishRelationTableToBusiness(request: EstablishRelationTableToBusinessRequest): EstablishRelationTableToBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return establishRelationTableToBusinessWithOptions(request, runtime);
}

model ExportDataSourcesRequest {
  dataSourceType?: string(name='DataSourceType', description='The data source type. Valid values:

*   odps
*   mysql
*   rds
*   oss
*   sqlserver
*   polardb
*   oracle
*   mongodb
*   emr
*   postgresql
*   analyticdb_for_mysql
*   hybriddb_for_postgresql
*   holo', example='rds'),
  envType?: int32(name='EnvType', description='The environment to which the data sources belong. Valid values:

*   0: development environment
*   1: production environment', example='1'),
  name?: string(name='Name', description='The keyword contained in the names of the data sources to be exported.

You can specify only one keyword. For example, if you set this parameter to test, all the data sources whose names contain test in the specified workspace are exported.', example='test'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value of this parameter must be a positive integer greater than or equal to 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace to which the data sources belong. You can call the [ListProjects](~~178393~~) operation to query the ID of the workspace.', example='10000'),
  subType?: string(name='SubType', description='The data source subtype. This parameter takes effect only if the DataSourceType parameter is set to rds.

If the DataSourceType parameter is set to rds, this parameter can be set to mysql, sqlserver, or postgresql.', example='mysql'),
}

model ExportDataSourcesResponseBody = {
  data?: {
    dataSources?: [ 
      {
        bindingCalcEngineId?: int32(name='BindingCalcEngineId', description='The ID of the compute engine to which the data source is bound.', example='123'),
        connectStatus?: int32(name='ConnectStatus', description='Indicates whether the data source is connected to an exclusive resource group. Valid values:

*   1: The data source is connected to at least one exclusive resource group.
*   0: The data source is not connected to any exclusive resource group.', example='1'),
        content?: string(name='Content', description='The configuration of the data source.', example='{"pubEndpoint":"http://service.cn.maxcompute.aliyun.com/api","accessId":"TMP.3KecGjvzy3i8MYfn2BGHgF7EHGyBFZcHm7GgngrABVRyvvKQrfF5kskR36xP361C3dqwbGo7SGYptAeGyiTwHXqLaBUvYC","securityToken":null,"endpoint":"http://service.cn.maxcompute.aliyun-inc.com/api","accessKey":"***","name":"PRE_PROJECT_A_engine","project":"PRE_PROJECT_A","vpcEndpoint":"http://service.cn.maxcompute.aliyun-inc.com/api","region":"cn-shanghai","authType":"2"}'),
        dataSourceType?: string(name='DataSourceType', description='The type of the data source. Valid values:

*   odps
*   mysql
*   rds
*   oss
*   sqlserver
*   polardb
*   oracle
*   mongodb
*   emr
*   postgresql
*   analyticdb_for_mysql
*   hybriddb_for_postgresql
*   holo', example='rds'),
        defaultEngine?: boolean(name='DefaultEngine', description='Indicates whether the compute engine to which the data source is bound is the default compute engine. Valid values:

*   true: The compute engine is the default compute engine.
*   false: The compute engine is not the default compute engine.', example='false'),
        description?: string(name='Description', description='The description of the data source.', example='a connection'),
        envType?: int32(name='EnvType', description='The environment to which the data source belongs. Valid values:

*   0: development environment
*   1: production environment', example='1'),
        gmtCreate?: string(name='GmtCreate', description='The time when the data source was created. Example: Mar 17, 2021 4:09:32 PM.', example='Mar 17, 2021 4:09:32 PM'),
        gmtModified?: string(name='GmtModified', description='The time when the data source was last modified. Example: Mar 17, 2021 4:09:32 PM.', example='Mar 17, 2021 4:09:32 PM'),
        id?: int32(name='Id', description='The ID of the data source.', example='1'),
        name?: string(name='Name', description='The name of the data source.', example='abc'),
        operator?: string(name='Operator', description='The ID of the user who exported the data source.', example='193543050****'),
        projectId?: int32(name='ProjectId', description='The ID of the DataWorks workspace to which the data source belongs.', example='123'),
        sequence?: int32(name='Sequence', description='The sequence number of the data source.', example='300'),
        shared?: boolean(name='Shared', description='Indicates whether the data source can be shared. Valid values:

*   true: The data source can be shared.
*   false: The data source cannot be shared.', example='false'),
        status?: int32(name='Status', description='Indicates whether the data source is available. Valid values:

*   1: The data source is available.
*   0: The data source is unavailable.', example='1'),
        subType?: string(name='SubType', description='The subtype of the data source. This parameter is returned only if the value of the DataSourceType parameter is rds.

If the value of the DataSourceType parameter is rds, the value of this parameter can be mysql, sqlserver, or postgresql.', example='mysql'),
        tenantId?: long(name='TenantId', description='The ID of the Alibaba Cloud account to which the data source belongs.', example='1234567'),
      }
    ](name='DataSources', description='The details of the exported data sources.

The value is an array. The following parameters are the elements in the array. The sample values of these parameters show the details of a sample data source.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page. The value of this parameter is a positive integer greater than or equal to 1.', example='10'),
    pageSize?: int32(name='PageSize', description='The number of entries returned on each page.', example='1'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='Data', description='The information about the export operation.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned. Valid values:

*   200: The request was successful.
*   Other values: The request failed. You can troubleshoot issues based on the HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can locate logs and troubleshoot issues based on the ID.', example='0bc14115159376359****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model ExportDataSourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportDataSourcesResponseBody(name='body'),
}

async function exportDataSourcesWithOptions(request: ExportDataSourcesRequest, runtime: Util.RuntimeOptions): ExportDataSourcesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportDataSources',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function exportDataSources(request: ExportDataSourcesRequest): ExportDataSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportDataSourcesWithOptions(request, runtime);
}

model GenerateDISyncTaskConfigForCreatingRequest {
  clientToken?: string(name='ClientToken', description='Indicates whether the request is successful. Valid values:

*   true: The request is successful.
*   false: The request fails.', example='ABFUOEUOTRTRJKE'),
  projectId?: long(name='ProjectId', description='The type of the object that you want to create in Data Integration in asynchronous mode. Valid values:

*   DI_REALTIME: real-time synchronization node
*   DI_SOLUTION: synchronization solution

DataWorks allows you to create real-time synchronization nodes and synchronization solutions in Data Integration only in asynchronous mode.', example='10000'),
  taskParam?: string(name='TaskParam', description='The client token that is used to ensure the idempotence of the request. This parameter is used to prevent repeated operations that are caused by multiple calls.', example='{    "type": "realtime",     "version": "1.0",        "setting": {       "resourceGroup":       "S_res_group_280749521950784_1623033752022",        "scheduleResgroupId": 30003913,       "name": "openapi_realtime_solution_0813_1739",       "taskType": "oneclick_to_odps"     },     "steps": [         {             "stepType": "mysql",             "parameter": {                 "connection": [                     {                        "datasourceType": "mysql",                         "datasource": "mysql_pub",                         "table": [                             "xyx"                         ]                     }                 ]             },             "name": "Reader",             "category": "reader"         },         {             "stepType": "odps",             "parameter": {                 "datasource": "odps_first"             },             "name": "Writer",             "category": "writer"         }     ] }'),
  taskType?: string(name='TaskType', description='The script for the real-time synchronization node or synchronization solution in Data Integration.

The following types of real-time synchronization nodes and synchronization solutions are supported:

*   Real-time synchronization node or synchronization solution that is used to synchronize data from MySQL to MaxCompute
*   Real-time synchronization node or synchronization solution that is used to synchronize data from MySQL data to Kafka
*   Real-time synchronization node or synchronization solution that is used to synchronize data from MySQL to Hologres

The SelectedTables parameter is used to specify tables that you want to synchronize from multiple databases. The Tables parameter is used to specify tables that you want to synchronize from a single database.

*   If the script contains the SelectedTables parameter, the system synchronizes the tables that you specify in the SelectedTables parameter.
*   If the script contains the Tables parameter, the system synchronizes the tables that you specify in the Tables parameter.

The following sample code provides a script for data synchronization from MySQL to MaxCompute:

{

"type": "realtime",

"version": "1.0",

"setting": {

"resourceGroup": "S_res_group\\_280749521950784\\_1623033752022",

"taskType": "oneclick_to_odps"

},

"steps": { "stepType": "mysql", "parameter": { "connection": \\[ { "datasourceType": "mysql", "datasource": "mysql_pub1", "selectedTables": \\[ { "dbName": "mysql_db", "schema": \\[ { "tableInfos": \\[ { "table": "molin_di_test_in_pk_v4" }

}

]

}

]

}

]

},

"name": "Reader",

"category": "reader"

},

{

"stepType": "odps",

"parameter": {

"datasource": "odps_first"

},

"name": "Writer",

"category": "writer"

}

]

}

The following sample code provides a script for data synchronization from MySQL to Kafka:

{

"type": "realtime",

"version": "1.0",

"setting": {

"resourceGroup": "S_res_group\\_280749521950784\\_1623033752022",

"taskType": "oneclick_to_kafka"

},

"steps": { "stepType": "mysql", "parameter": { "connection": \\[ { "datasourceType": "mysql", "datasource": "pkset_test", "selectedTables": \\[ { "dbName": "mysql_db", "schema": \\[ { "tableInfos": \\[ { "table": "molin_di_test_in_pk_v4" }

}

]

}

]

}

]

},

"name": "Reader",

"category": "reader"

},

{

"stepType": "kafka",

"parameter": {

"datasource": "azn_kafka"

},

"name": "Writer",

"category": "writer"

}

]

}

The following sample code provides a script for data synchronization from MySQL to Hologres:

{

"type": "realtime",

"version": "1.0",

"setting": {

"resourceGroup": "S_res_group\\_280749521950784\\_1623033752022",

"taskType": "oneclick_to_holo"

},

"steps": { "stepType": "mysql", "parameter": { "connection": \\[ { "datasourceType": "mysql", "datasource": "mysql_pub", "selectedTables": \\[ { "dbName": "mysql_db", "schema": \\[ { "tableInfos": \\[ { "table": "molin_di_test_in2\\_pk_v3" }

}

]

}

]

}

]

},

"name": "Reader",

"category": "reader"

},

{

"stepType": "holo",

"parameter": {

"datasource": "holo"

},

"name": "Writer",

"category": "writer"

}

]

}', example='DI_REALTIME'),
}

model GenerateDISyncTaskConfigForCreatingResponseBody = {
  data?: {
    message?: string(name='Message', example='XXX is invalid.'),
    processId?: long(name='ProcessId', description='The reason why the ID of the asynchronous thread fails to be generated.

If the ID is successfully generated, the value null is returned.', example='10'),
    status?: string(name='Status', description='The ID of the asynchronous thread. You can call the [QueryDISyncTaskConfigProcessResult](~~383465~~) operation to obtain the asynchronously generated parameters based on the ID. The parameters are used to create a real-time synchronization node or a synchronization solution in Data Integration.', example='true'),
  }(name='Data', description='Indicates whether the ID of the asynchronous thread is generated. Valid values:

*   success: indicates that the ID of the asynchronous thread is generated.
*   fail: indicates that the ID of the asynchronous thread fails to be generated. You can view the reason for the failure and troubleshoot the issue based on the reason.'),
  requestId?: string(name='RequestId', description='The information returned for the ID of the asynchronous thread.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='The ID of the request. You can locate logs and troubleshoot issues based on the ID.', example='true'),
}

model GenerateDISyncTaskConfigForCreatingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateDISyncTaskConfigForCreatingResponseBody(name='body'),
}

/**
  * The operation that you want to perform.
  *
  * @param request GenerateDISyncTaskConfigForCreatingRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GenerateDISyncTaskConfigForCreatingResponse
 */
async function generateDISyncTaskConfigForCreatingWithOptions(request: GenerateDISyncTaskConfigForCreatingRequest, runtime: Util.RuntimeOptions): GenerateDISyncTaskConfigForCreatingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskParam)) {
    query['TaskParam'] = request.taskParam;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GenerateDISyncTaskConfigForCreating',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The operation that you want to perform.
  *
  * @param request GenerateDISyncTaskConfigForCreatingRequest
  * @return GenerateDISyncTaskConfigForCreatingResponse
 */
async function generateDISyncTaskConfigForCreating(request: GenerateDISyncTaskConfigForCreatingRequest): GenerateDISyncTaskConfigForCreatingResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateDISyncTaskConfigForCreatingWithOptions(request, runtime);
}

model GenerateDISyncTaskConfigForUpdatingRequest {
  clientToken?: string(name='ClientToken', description='The ID of the real-time synchronization node or synchronization solution.

*   If you set the TaskType parameter to DI_REALTIME, set the TaskId parameter to the value of the FileId parameter for the real-time synchronization node.
*   If you set the TaskType parameter to DI_SOLUTION, set the TaskId parameter to the value of the FileId parameter for the synchronization solution.', example='ABFUOEUOTRTRJKE'),
  projectId?: long(name='ProjectId', description='The type of the object that you want to update in Data Integration in asynchronous mode. Valid values:

*   DI_REALTIME: real-time synchronization node

*   DI_SOLUTION: synchronization solution

    DataWorks allows you to update real-time synchronization nodes and synchronization solutions in Data Integration only in asynchronous mode.', example='10000'),
  taskId?: long(name='TaskId', description='Indicates whether the request is successful. Valid values:

*   true: The request is successful.
*   false: The request fails.', example='100'),
  taskParam?: string(name='TaskParam', description='The client token that is used to ensure the idempotence of the request. This parameter is used to prevent repeated operations that are caused by multiple calls.', example='{      "steps": [         {             "parameter": {                 "connection": [                     {                         "table": [                             "xyx"                         ]                     }                 ]             },             "name": "Reader",             "category": "reader"         }     ] }'),
  taskType?: string(name='TaskType', description='The script for updating the real-time synchronization node or synchronization solution in Data Integration.

DataWorks allows you to add or remove tables for a real-time synchronization node or a synchronization solution in Data Integration only in asynchronous mode. The following types of real-time synchronization nodes and synchronization solutions are supported:

*   Real-time synchronization node or synchronization solution that is used to synchronize data from MySQL to MaxCompute
*   Real-time synchronization node or synchronization solution that is used to synchronize data from MySQL data to Kafka
*   Real-time synchronization node or synchronization solution that is used to synchronize data from MySQL to Hologres

The SelectedTables parameter is used to specify tables that you want to synchronize from multiple databases. The Tables parameter is used to specify tables that you want to synchronize from a single database.

*   If the script contains the SelectedTables parameter, the system synchronizes the tables that you specify in the SelectedTables parameter.
*   If the script contains the Tables parameter, the system synchronizes the tables that you specify in the Tables parameter.', example='DI_REALTIME'),
}

model GenerateDISyncTaskConfigForUpdatingResponseBody = {
  data?: {
    message?: string(name='Message', example='XXX is invalid.'),
    processId?: long(name='ProcessId', description='The reason why the ID of the asynchronous thread fails to be generated. If the ID is successfully generated, the value null is returned.', example='10'),
    status?: string(name='Status', description='The ID of the asynchronous thread. You can call the [QueryDISyncTaskConfigProcessResult](~~383465~~) operation to obtain the asynchronously generated parameters based on the ID. The parameters are used to update a real-time synchronization node or a synchronization solution in Data Integration.', example='true'),
  }(name='Data', description='Indicates whether the ID of the asynchronous thread is generated. Valid values:

*   success: indicates that the ID of the asynchronous thread is generated.
*   fail: indicates that the ID of the asynchronous thread fails to be generated. You can view the reason for the failure and troubleshoot the issue based on the reason.'),
  requestId?: string(name='RequestId', description='The information returned for the ID of the asynchronous thread.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='The ID of the request. You can locate logs and troubleshoot issues based on the ID.', example='true'),
}

model GenerateDISyncTaskConfigForUpdatingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateDISyncTaskConfigForUpdatingResponseBody(name='body'),
}

/**
  * The operation that you want to perform.
  *
  * @param request GenerateDISyncTaskConfigForUpdatingRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GenerateDISyncTaskConfigForUpdatingResponse
 */
async function generateDISyncTaskConfigForUpdatingWithOptions(request: GenerateDISyncTaskConfigForUpdatingRequest, runtime: Util.RuntimeOptions): GenerateDISyncTaskConfigForUpdatingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.taskParam)) {
    query['TaskParam'] = request.taskParam;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GenerateDISyncTaskConfigForUpdating',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The operation that you want to perform.
  *
  * @param request GenerateDISyncTaskConfigForUpdatingRequest
  * @return GenerateDISyncTaskConfigForUpdatingResponse
 */
async function generateDISyncTaskConfigForUpdating(request: GenerateDISyncTaskConfigForUpdatingRequest): GenerateDISyncTaskConfigForUpdatingResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateDISyncTaskConfigForUpdatingWithOptions(request, runtime);
}

model GetBaselineRequest {
  baselineId?: long(name='BaselineId', example='123456'),
  projectId?: long(name='ProjectId', example='10000'),
}

model GetBaselineResponseBody = {
  data?: {
    alertEnabled?: boolean(name='AlertEnabled', example='true'),
    alertMarginThreshold?: int32(name='AlertMarginThreshold', example='60'),
    alertSettings?: [ 
      {
        alertInterval?: int32(name='AlertInterval', example='900'),
        alertMaximum?: int32(name='AlertMaximum', example='1'),
        alertMethods?: [ string ](name='AlertMethods'),
        alertRecipient?: string(name='AlertRecipient', example='123123'),
        alertRecipientType?: string(name='AlertRecipientType', example='OWNER'),
        alertType?: string(name='AlertType', example='BASELINE'),
        baselineAlertEnabled?: boolean(name='BaselineAlertEnabled', example='false'),
        dingRobots?: [ 
          {
            atAll?: boolean(name='AtAll', example='true'),
            webUrl?: string(name='WebUrl', example='https://oapi.dingtalk.com/robot/send?access_token=xxx'),
          }
        ](name='DingRobots'),
        silenceEndTime?: string(name='SilenceEndTime', example='00:00:00'),
        silenceStartTime?: string(name='SilenceStartTime', example='00:00:00'),
        topicTypes?: [ string ](name='TopicTypes'),
        webhooks?: [ string ](name='Webhooks'),
      }
    ](name='AlertSettings'),
    baselineId?: long(name='BaselineId', example='1001'),
    baselineName?: string(name='BaselineName'),
    baselineType?: string(name='BaselineType', example='DAILY'),
    enabled?: boolean(name='Enabled', example='true'),
    nodeIds?: [ long ](name='NodeIds'),
    overTimeSettings?: [ 
      {
        cycle?: int32(name='Cycle', example='1'),
        time?: string(name='Time', example='00:00'),
      }
    ](name='OverTimeSettings'),
    owner?: string(name='Owner', example='9527952****'),
    priority?: int32(name='Priority', example='1'),
    projectId?: long(name='ProjectId', example='10000'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='ecb967ec-c137-48a5-860****'),
  success?: boolean(name='Success', example='true'),
}

model GetBaselineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBaselineResponseBody(name='body'),
}

async function getBaselineWithOptions(request: GetBaselineRequest, runtime: Util.RuntimeOptions): GetBaselineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetBaseline',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBaseline(request: GetBaselineRequest): GetBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBaselineWithOptions(request, runtime);
}

model GetBaselineConfigRequest {
  baselineId?: long(name='BaselineId', description='The ID of the baseline. You can call the [GetNode](~~173977~~) operation to obtain the ID.', example='1234'),
}

model GetBaselineConfigResponseBody = {
  data?: {
    baselineId?: long(name='BaselineId', description='The ID of the baseline.', example='1234'),
    baselineName?: string(name='BaselineName', description='The name of the baseline.'),
    baselineType?: string(name='BaselineType', description='The type of the baseline. Valid values: DAILY and HOURLY. The value DAILY indicates that the baseline is a day-level baseline. The value HOURLY indicates that the baseline is an hour-level baseline.', example='DAILY'),
    expHour?: int32(name='ExpHour', description='The hour in the alert time of the day-level baseline. Valid values: 0 to 47.', example='7'),
    expMinu?: int32(name='ExpMinu', description='The minute in the alert time of the day-level baseline. Valid values: 0 to 59.', example='30'),
    hourExpDetail?: string(name='HourExpDetail', description='The alert time of the hour-level baseline. This parameter is presented as key-value pairs in the JSON format. The key indicates the ID of the cycle, and the value is presented in the hh:mm format. Valid values of hh: 0 to 47. Valid values of mm: 0 to 59.', example='{"1":"03:28","2":"04:28","3":"05:28","4":"06:28","5":"07:28","6":"08:28","7":"09:28","8":"10:28","9":"11:28","10":"12:28","11":"13:28","12":"14:28","13":"15:28","14":"16:28","15":"17:28","16":"18:28","17":"19:28","18":"20:28","19":"21:28","20":"22:28","21":"23:28","22":"24:28","23":"25:28","24":"26:28"}'),
    hourSlaDetail?: string(name='HourSlaDetail', description='The committed time of the hour-level baseline. This parameter is presented as key-value pairs in the JSON format. The key indicates the ID of the cycle, and the value is presented in the hh:mm format. Valid values of hh: 0 to 47. Valid values of mm: 0 to 59.', example='{"1":"03:58","2":"04:58","3":"05:58","4":"06:58","5":"07:58","6":"08:58","7":"09:58","8":"10:58","9":"11:58","10":"12:58","11":"13:58","12":"14:58","13":"15:58","14":"16:58","15":"17:58","16":"18:58","17":"19:58","18":"20:58","19":"21:58","20":"22:58","21":"23:58","22":"24:58","23":"25:58","24":"26:58"}'),
    isDefault?: boolean(name='IsDefault', description='Indicates whether the baseline is a default baseline of the workspace. Valid values: true and false.', example='true'),
    owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the baseline owner. Multiple IDs are separated by commas (,).', example='9527952****'),
    priority?: int32(name='Priority', description='The priority of the baseline. Valid values: 1, 3, 5, 7, and 8.', example='1'),
    projectId?: long(name='ProjectId', description='The ID of the workspace.', example='1234'),
    slaHour?: int32(name='SlaHour', description='The hour in the committed time of the day-level baseline. Valid values: 0 to 47.', example='9'),
    slaMinu?: int32(name='SlaMinu', description='The minute in the committed time of the day-level baseline. Valid values: 0 to 59.', example='30'),
    useFlag?: boolean(name='UseFlag', description='Indicates whether the baseline is enabled. Valid values: true and false.', example='true'),
  }(name='Data', description='The details of the baseline.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='401'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ecb967ec-c137-48a5-860****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetBaselineConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBaselineConfigResponseBody(name='body'),
}

async function getBaselineConfigWithOptions(request: GetBaselineConfigRequest, runtime: Util.RuntimeOptions): GetBaselineConfigResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetBaselineConfig',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBaselineConfig(request: GetBaselineConfigRequest): GetBaselineConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBaselineConfigWithOptions(request, runtime);
}

model GetBaselineKeyPathRequest {
  baselineId?: long(name='BaselineId', description='The name of the event.', example='1234'),
  bizdate?: string(name='Bizdate', description='The ID of the instance.', example='2020-07-07T00:00:00+0800'),
  inGroupId?: int32(name='InGroupId', description='The ID of the event.', example='1'),
}

model GetBaselineKeyPathResponseBody = {
  data?: [ 
    {
      bizdate?: long(name='Bizdate', example='1553443200000'),
      inGroupId?: int32(name='InGroupId', example='1'),
      instanceId?: long(name='InstanceId', example='12345'),
      nodeId?: long(name='NodeId', example='1234'),
      nodeName?: string(name='NodeName'),
      owner?: string(name='Owner', example='9527952****'),
      prgType?: int32(name='PrgType', example='10'),
      projectId?: long(name='ProjectId', example='1234'),
      runs?: [ 
        {
          absTime?: long(name='AbsTime', example='1553531402000'),
          beginCast?: long(name='BeginCast', example='1553531686000'),
          beginRunningTime?: long(name='BeginRunningTime', example='1553531401000'),
          beginWaitResTime?: long(name='BeginWaitResTime', example='1553531401000'),
          beginWaitTimeTime?: long(name='BeginWaitTimeTime', example='1553531400000'),
          endCast?: long(name='EndCast', example='1553531687000'),
          finishTime?: long(name='FinishTime', example='1553531401000'),
          status?: string(name='Status', example='SUCCESS'),
        }
      ](name='Runs'),
      topics?: [ 
        {
          addTime?: long(name='AddTime', example='1553531401000'),
          instanceId?: long(name='InstanceId', example='1234'),
          topicId?: long(name='TopicId', example='1234'),
          topicName?: string(name='TopicName', example='1234'),
        }
      ](name='Topics'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The timestamp when the event was found.', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model GetBaselineKeyPathResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBaselineKeyPathResponseBody(name='body'),
}

async function getBaselineKeyPathWithOptions(request: GetBaselineKeyPathRequest, runtime: Util.RuntimeOptions): GetBaselineKeyPathResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.inGroupId)) {
    body['InGroupId'] = request.inGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetBaselineKeyPath',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBaselineKeyPath(request: GetBaselineKeyPathRequest): GetBaselineKeyPathResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBaselineKeyPathWithOptions(request, runtime);
}

model GetBaselineStatusRequest {
  baselineId?: long(name='BaselineId', description='The ID of the baseline.', example='1234'),
  bizdate?: string(name='Bizdate', description='The data timestamp of the baseline instance. Specify the time in the ISO 8601 standard in the yyyy-MM-dd\\"T\\"HH:mm:ssZ format. The time must be in UTC.', example='2020-07-07T00:00:00+0800'),
  inGroupId?: int32(name='InGroupId', description='The ID of the scheduling cycle of the baseline instance. For a baseline instance that is scheduled by day, the value of this parameter is 1. For a baseline instance that is scheduled by hour, the value of this parameter ranges from 1 to 24.', example='1'),
}

model GetBaselineStatusResponseBody = {
  data?: {
    baselineId?: long(name='BaselineId', description='The ID of the baseline.', example='1234'),
    baselineName?: string(name='BaselineName', description='The name of the baseline.', example='Baseline name'),
    bizdate?: long(name='Bizdate', description='The data timestamp of the baseline instance.', example='1553443200000'),
    blockInstance?: {
      endCast?: long(name='EndCast', description='The timestamp of the predicted time when the instance finished running.', example='1553443200000'),
      finishTime?: long(name='FinishTime', description='The timestamp of the actual time when the instance finished running.', example='1553443200000'),
      instanceId?: long(name='InstanceId', description='The ID of the instance.', example='12345'),
      nodeId?: long(name='NodeId', description='The ID of the node.', example='1234'),
      nodeName?: string(name='NodeName', description='The name of the node.', example='Node name'),
      owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the node owner.', example='9527952795****'),
      projectId?: long(name='ProjectId', description='The ID of the workspace to which the node belongs.', example='1234'),
      status?: string(name='Status', description='The status of the instance. Valid values: NOT_RUN, WAIT_TIME, WAIT_RESOURCE, RUNNING, CHECKING, CHECKING_CONDITION, FAILURE, and SUCCESS. The value NOT_RUN indicates that the instance is not run. The value WAIT_TIME indicates that the instance is waiting to be run. The value WAIT_RESOURCE indicates that the instance is waiting for resources. The value RUNNING indicates that the instance is running. The value CHECKING indicates that data quality is being checked for the instance. The value CHECKING_CONDITION indicates that branch conditions are being checked for the instance. The value FAILURE indicates that the instance fails to run. The value SUCCESS indicates that the instance is run.', example='SUCCESS'),
    }(name='BlockInstance', description='The information about the key instance.'),
    buffer?: float(name='Buffer', description='The margin of the baseline instance. Unit: seconds.', example='1200'),
    endCast?: long(name='EndCast', description='The timestamp of the predicted time when the baseline instance finished running.', example='1553443200000'),
    expTime?: long(name='ExpTime', description='The timestamp of the alerting time of the baseline instance.', example='1553443200000'),
    finishStatus?: string(name='FinishStatus', description='The status of the baseline instance. Valid values: UNFINISH and FINISH. The value UNFINISH indicates that the baseline instance is still running. The value FINISH indicates that the baseline instance finishes running.', example='UNFINISH'),
    finishTime?: long(name='FinishTime', description='The timestamp of the actual time when the baseline instance finished running. This parameter is returned if the value of the FinishStatus parameter is FINISH.', example='1553443200000'),
    inGroupId?: int32(name='InGroupId', description='The ID of the scheduling cycle of the baseline instance. For a baseline instance that is scheduled by day, the value of this parameter is 1. For a baseline instance that is scheduled by hour, the value of this parameter ranges from 1 to 24.', example='1'),
    lastInstance?: {
      endCast?: long(name='EndCast', description='The timestamp of the predicted time when the instance finished running.', example='1553443200000'),
      finishTime?: long(name='FinishTime', description='The timestamp of the actual time when the instance finished running.', example='1553443200000'),
      instanceId?: long(name='InstanceId', description='The ID of the instance.', example='12345'),
      nodeId?: long(name='NodeId', description='The ID of the node.', example='1234'),
      nodeName?: string(name='NodeName', description='The name of the node.', example='Node name'),
      owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the node owner.', example='9527952795****'),
      projectId?: long(name='ProjectId', description='The ID of the workspace to which the node belongs.', example='1234'),
      status?: string(name='Status', description='The status of the instance. Valid values: NOT_RUN, WAIT_TIME, WAIT_RESOURCE, RUNNING, CHECKING, CHECKING_CONDITION, FAILURE, and SUCCESS. The value NOT_RUN indicates that the instance is not run. The value WAIT_TIME indicates that the instance is waiting to be run. The value WAIT_RESOURCE indicates that the instance is waiting for resources. The value RUNNING indicates that the instance is running. The value CHECKING indicates that data quality is being checked for the instance. The value CHECKING_CONDITION indicates that branch conditions are being checked for the instance. The value FAILURE indicates that the instance fails to run. The value SUCCESS indicates that the instance is run.', example='SUCCESS'),
    }(name='LastInstance', description='The information about the last generated instance.'),
    owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the baseline owner. Multiple IDs are separated by commas (,).', example='9527952795****'),
    priority?: int32(name='Priority', description='The priority of the baseline. Valid values: 1, 2, 5, 7, and 8.', example='1'),
    projectId?: long(name='ProjectId', description='The ID of the workspace to which the baseline belongs.', example='1234'),
    slaTime?: long(name='SlaTime', description='The timestamp of the committed completion time of the baseline instance.', example='1553443200000'),
    status?: string(name='Status', description='The status of the baseline. Valid values: ERROR, SAFE, DANGEROUS, and OVER. The value ERROR indicates that no nodes are associated with the baseline, or all nodes associated with the baseline are suspended. The value SAFE indicates that nodes finish running before the alerting time. The value DANGEROUS indicates that nodes are still running after the alerting time but before the committed completion time. The value OVER indicates that nodes are still running after the committed completion time.', example='SAFE'),
  }(name='Data', description='The details of the baseline instance.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetBaselineStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBaselineStatusResponseBody(name='body'),
}

async function getBaselineStatusWithOptions(request: GetBaselineStatusRequest, runtime: Util.RuntimeOptions): GetBaselineStatusResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.inGroupId)) {
    body['InGroupId'] = request.inGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetBaselineStatus',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBaselineStatus(request: GetBaselineStatusRequest): GetBaselineStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBaselineStatusWithOptions(request, runtime);
}

model GetBusinessRequest {
  businessId?: long(name='BusinessId', description='The ID of the workflow. You can call the [ListBusiness](~~173945~~) operation to query the ID.', example='1000000001'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the ID. You must specify either this parameter or ProjectIdentifier to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Settings panel to obtain the name. You must specify either this parameter or ProjectId to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model GetBusinessResponseBody = {
  data?: {
    businessId?: long(name='BusinessId', description='The ID of the workflow.', example='1000001'),
    businessName?: string(name='BusinessName', description='The name of the workflow.'),
    description?: string(name='Description', description='The description of the workflow.'),
    owner?: string(name='Owner', description='The Alibaba Cloud account ID of the workflow owner.', example='20000****'),
    projectId?: string(name='ProjectId', description='The ID of the workspace to which the workflow belongs.', example='10000'),
    useType?: string(name='UseType', description='The module to which the workflow belongs. Valid values: NORMAL and MANUAL_BIZ.', example='NORMAL'),
  }(name='Data', description='The details of the workflow.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetBusinessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBusinessResponseBody(name='body'),
}

async function getBusinessWithOptions(request: GetBusinessRequest, runtime: Util.RuntimeOptions): GetBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessId)) {
    body['BusinessId'] = request.businessId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetBusiness',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBusiness(request: GetBusinessRequest): GetBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBusinessWithOptions(request, runtime);
}

model GetDDLJobStatusRequest {
  taskId?: string(name='TaskId', description='The ID of the DDL task.', example='abc'),
}

model GetDDLJobStatusResponseBody = {
  data?: {
    content?: string(name='Content', description='The content of the task.', example='success'),
    nextTaskId?: string(name='NextTaskId', description='The ID of the ongoing task. If no value is returned for this parameter, all subtasks are complete.', example='abc1'),
    status?: string(name='Status', description='The status of the task', example='success'),
    taskId?: string(name='TaskId', description='The ID of the task.', example='abc'),
  }(name='Data', description='The details of the task.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='abc'),
}

model GetDDLJobStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDDLJobStatusResponseBody(name='body'),
}

async function getDDLJobStatusWithOptions(request: GetDDLJobStatusRequest, runtime: Util.RuntimeOptions): GetDDLJobStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDDLJobStatus',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDDLJobStatus(request: GetDDLJobStatusRequest): GetDDLJobStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDDLJobStatusWithOptions(request, runtime);
}

model GetDISyncInstanceInfoRequest {
  fileId?: long(name='FileId', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='100'),
  projectId?: long(name='ProjectId', description='The type of the object that you want to query. Valid values:

*   DI_REALTIME: real-time synchronization node
*   DI_SOLUTION: data synchronization solution', example='10000'),
  taskType?: string(name='TaskType', description='*   If you set the TaskType parameter to DI_REALTIME, set the FileId parameter to the ID of the real-time synchronization node that you want to query.
*   If you set the TaskType parameter to DI_SOLUTION, set the FileId parameter to the ID of the data synchronization solution that you want to query.

You can call the [ListFiles](~~173942~~) operation to obtain the ID of the real-time synchronization node or data synchronization solution.', example='DI_REALTIME'),
}

model GetDISyncInstanceInfoResponseBody = {
  data?: {
    message?: string(name='Message', description='*   If the TaskType parameter is set to DI_REALTIME, the Name parameter indicates the name of the real-time synchronization node.
*   If the TaskType parameter is set to DI_SOLITION, the value null is returned.', example='fileId[100] is invalid'),
    name?: string(name='Name', description='*   If the TaskType parameter is set to DI_REALTIME, the value null is returned.
*   If the TaskType parameter is set to DI_SOLITION, the SolutionInfo parameter indicates the details of the data synchronization solution.', example='streamx_name'),
    solutionInfo?: {
      creatorName?: string(name='CreatorName', description='The step details of the synchronization solution.', example='dataworks_3h1'),
      id?: long(name='Id', description='The creator of the data synchronization solution.', example='100'),
      status?: string(name='Status', description='The ID of the data synchronization solution.', example='run'),
      stepDetail?: [ 
        {
          info?: string(name='Info'),
          status?: string(name='Status', description='The ID of the step in the data synchronization solution.', example='success'),
          stepId?: long(name='StepId', description='The name of the step in the data synchronization solution.', example='1'),
          stepName?: string(name='StepName', description='The information of the data synchronization solution.'),
        }
      ](name='StepDetail', description='The status of the step in the data synchronization solution.'),
    }(name='SolutionInfo', description='The status of the data synchronization solution.'),
    status?: string(name='Status', description='The cause of the failure to obtain the status of the real-time synchronization node or data synchronization solution. If the status of the real-time synchronization node or data synchronization solution is obtained, the value null is returned.', example='RUN'),
  }(name='Data', description='*   If the TaskType parameter is set to DI_REALTIME, the Status parameter indicates the status of the real-time synchronization node. Valid values: PAUSE, NORUN, RUN, KILLING, and WAIT.
*   If the TaskType parameter is set to DI_SOLITION, the Status parameter indicates the status of the data synchronization solution. Valid values: success and fail.'),
  requestId?: string(name='RequestId', description='The status of the real-time synchronization node or data synchronization solution.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='true'),
}

model GetDISyncInstanceInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDISyncInstanceInfoResponseBody(name='body'),
}

async function getDISyncInstanceInfoWithOptions(request: GetDISyncInstanceInfoRequest, runtime: Util.RuntimeOptions): GetDISyncInstanceInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDISyncInstanceInfo',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDISyncInstanceInfo(request: GetDISyncInstanceInfoRequest): GetDISyncInstanceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDISyncInstanceInfoWithOptions(request, runtime);
}

model GetDISyncTaskRequest {
  fileId?: long(name='FileId', description='Indicates whether the request is successful. Valid values:

*   true: The request is successful.
*   false: The request fails.', example='100'),
  projectId?: long(name='ProjectId', description='The type of the object that you want to query. Valid values:

*   DI_REALTIME: real-time synchronization node
*   DI_SOLUTION: data synchronization solution', example='10000'),
  taskType?: string(name='TaskType', description='*   If you set the TaskType parameter to DI_REALTIME, set the FileId parameter to the ID of the real-time synchronization node that you want to query.
*   If you set the TaskType parameter to DI_SOLUTION, set the FileId parameter to the ID of the data synchronization solution that you want to query.

You can call the [ListFiles](~~173942~~) operation to query the ID of the real-time synchronization node or data synchronization solution.', example='DI_REALTIME'),
}

model GetDISyncTaskResponseBody = {
  data?: {
    code?: string(name='Code', description='Indicates whether the details of the real-time synchronization node or data synchronization solution are obtained. Valid values:

success: The details are obtained.

fail: The details fail to be obtained.', example='{"extend":{"mode":"wizard","resourceGroup":"S_res_group_287114642182658_1560324290517"},"nodeDef":{},"order":{"hops":[{"from":"datahub_8htXSsfiS2vtZCVG","to":"datahub_CRHBAyGfhSaLmv2f"}]},"setting":{"errorLimit":{},"jvmOption":""},"steps":[{"stepType":"datahub","category":"writer","displayName":"DataHub1","parameter":{"batchSize":1000,"datasource":"datahub_cloud_dev_test","topic":"dwd_tfc_opt_speed_rid_amap_rt"},"name":"datahub_CRHBAyGfhSaLmv2f","gui":{"x":262,"y":325}},{"stepType":"datahub","displayName":"DataHub2","parameter":{"datasource":"datahub_uric_test","topic":"dwd_tfc_opt_speed_rid_amap_rt_330000","batchSize":1000},"name":"datahub_8htXSsfiS2vtZCVG","gui":{"x":268,"y":160.5},"category":"writer"}]}'),
    message?: string(name='Message', description='*   If the TaskType parameter is set to DI_REALTIME, the value null is returned.
*   If the TaskType parameter is set to DI_SOLUTION, the details of the data synchronization solution task are returned.', example='fileId:[100] is invalid.'),
    solutionDetail?: {
      creatorName?: string(name='CreatorName', description='The ID of the project to which the data synchronization solution belongs.', example='dataworks_di'),
      id?: long(name='Id', example='100'),
      name?: string(name='Name', description='The additional parameters of the data synchronization solution.', example='holo_20211206161025'),
      processContent?: string(name='ProcessContent', description='The name of the data synchronization solution.', example='{"holoDatasource":"holo","offlineSyncConfig":{"nodeNameRule":"oneclick_holo_di_${db_table_name_src}_to_${db_table_name_dest}","resourceGroup":"group_219193793999490"},"processRuleId":1007,"readerConcurrent":10,"realtimeSyncConfig":{"content":{"order":{"hops":[{"from":"reader","to":"writer"}]},"setting":{"speed":{"readerConcurrent":10}},"steps":[{"stepType":"mysql","name":"reader","category":"reader","parameter":{"connection":[{"datasource":"mm","datasourceType":"mysql","table":[]}]}},{"stepType":"holo","name":"writer","category":"writer","parameter":{"datasource":"holo","writeMode":"replay","datasourceSchema":"public","tableMappingRule":{"datasource":[{"tableRule":[],"srcDatasourceName":"mm"}]}}}]},"extend":{"mode":"migration_holo","resourceGroup":"group_219193793999490"}},"setting":{"autoCreateWorkflow":true,"userDefinedFileNameExpression":"oneclick"},"srcType":"mysql","tableMappingRuleFromRealtimeSyncConfig":{"datasource":[{"srcDatasourceName":"mm","tableRule":[]}]}}'),
      processExtra?: string(name='ProcessExtra', description='The time when the data synchronization solution was committed.', example='{"processType":"new","tableNum":300}'),
      projectId?: long(name='ProjectId', description='The type of the source of the data synchronization solution.', example='10000'),
      sourceType?: string(name='SourceType', description='The configuration details of the data synchronization solution.', example='mysql'),
      startTime?: string(name='StartTime', description='The creator of the data synchronization solution.', example='2021-12-07 14:40:51'),
      status?: string(name='Status', description='The type of the data synchronization solution.', example='0'),
      submitTime?: string(name='SubmitTime', description='The ID of the data synchronization solution.', example='2021-12-07 14:40:51'),
      type?: string(name='Type', description='The start time of the data synchronization solution.', example='holo'),
    }(name='SolutionDetail', description='The status of the data synchronization solution. Valid values:

*   0: successful
*   1: not running
*   2: running
*   3: failed
*   4: committed
*   5: pending manual confirmation
*   6: manually confirmed
*   7: others
*   8: waiting
*   9: deleted'),
    status?: string(name='Status', description='The cause of the failure to obtain the details of the real-time synchronization node or data synchronization solution.

If the details of the real-time synchronization node or data synchronization solution are obtained, the value null is returned.', example='success'),
  }(name='Data', description='*   If the TaskType parameter is set to DI_REALTIME, the details of the real-time synchronization node are returned.
*   If the TaskType parameter is set to DI_SOLUTION, the value null is returned.'),
  requestId?: string(name='RequestId', description='The details of the real-time synchronization node or data synchronization solution.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='The ID of the request. You can query logs and troubleshoot issues based on the ID.', example='true'),
}

model GetDISyncTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDISyncTaskResponseBody(name='body'),
}

async function getDISyncTaskWithOptions(request: GetDISyncTaskRequest, runtime: Util.RuntimeOptions): GetDISyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDISyncTask',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDISyncTask(request: GetDISyncTaskRequest): GetDISyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDISyncTaskWithOptions(request, runtime);
}

model GetDagRequest {
  dagId?: long(name='DagId', description='The ID of the DAG. You can set this parameter to the value of the DagId parameter returned by the CreateDagComplement, CreateTest, or CreateManualDag operation.', example='123141452344525'),
  projectEnv?: string(name='ProjectEnv', description='The environment type. Valid values: PROD and DEV. The value PROD indicates the production environment. The value DEV indicates the development environment.', example='PROD'),
}

model GetDagResponseBody = {
  data?: {
    bizdate?: long(name='Bizdate', description='The data timestamp.', example='1605052800000'),
    createTime?: long(name='CreateTime', description='The time at which the DAG was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1605052800000'),
    createUser?: string(name='CreateUser', description='The user who created the DAG.', example='1736629400048545'),
    dagId?: long(name='DagId', description='The ID of the DAG.', example='351249682'),
    finishTime?: long(name='FinishTime', description='The time at which the DAG finished running. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1605052800000'),
    gmtdate?: long(name='Gmtdate', description='The time at which the DAG was scheduled to run.', example='1605052800000'),
    modifyTime?: long(name='ModifyTime', description='The time at which the DAG was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1605052800000'),
    name?: string(name='Name', description='The name of the DAG.', example='test_dag'),
    opSeq?: long(name='OpSeq', description='The sequence number of the operation.', example='123'),
    projectId?: long(name='ProjectId', description='The ID of the workspace.', example='112345'),
    startTime?: long(name='StartTime', description='The time at which the DAG started to run.', example='1605052800000'),
    status?: string(name='Status', description='The status of the DAG. Valid values: CREATED, RUNNING, FAILURE, and SUCCESS.', example='FAILURE'),
    type?: string(name='Type', description='The type of the DAG. Valid values: MANUAL, SMOKE_TEST, SUPPLY_DATA, and BUSINESS_PROCESS_DAG.', example='MANUAL_FLOW'),
  }(name='Data', description='The details of the DAG.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='7782a299-b291-4fee-8424-cf8058efa8e8'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetDagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDagResponseBody(name='body'),
}

/**
  * Supported DAG types:
  * *   MANUAL: the DAG for a manually triggered workflow.
  * *   SMOKE_TEST: the DAG for a smoke testing workflow.
  * *   SUPPLY_DATA: the DAG for a data backfill instance.
  * *   BUSINESS_PROCESS_DAG: the DAG for a one-time workflow.
  * Supported DAG states:
  * *   CREATED: The DAG is created.
  * *   RUNNING: The DAG is running.
  * *   FAILURE: The DAG fails to run.
  * *   SUCCESS: The DAG successfully runs.
  *
  * @param request GetDagRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetDagResponse
 */
async function getDagWithOptions(request: GetDagRequest, runtime: Util.RuntimeOptions): GetDagResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.dagId)) {
    body['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDag',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Supported DAG types:
  * *   MANUAL: the DAG for a manually triggered workflow.
  * *   SMOKE_TEST: the DAG for a smoke testing workflow.
  * *   SUPPLY_DATA: the DAG for a data backfill instance.
  * *   BUSINESS_PROCESS_DAG: the DAG for a one-time workflow.
  * Supported DAG states:
  * *   CREATED: The DAG is created.
  * *   RUNNING: The DAG is running.
  * *   FAILURE: The DAG fails to run.
  * *   SUCCESS: The DAG successfully runs.
  *
  * @param request GetDagRequest
  * @return GetDagResponse
 */
async function getDag(request: GetDagRequest): GetDagResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDagWithOptions(request, runtime);
}

model GetDataServiceApiRequest {
  apiId?: long(name='ApiId', description='The ID of the DataService Studio API.', example='10000'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.', example='10001'),
  tenantId?: long(name='TenantId', description='The ID of the tenant.', example='10002'),
}

model GetDataServiceApiResponseBody = {
  data?: {
    apiId?: long(name='ApiId', description='The ID of the DataService Studio API.', example='10000'),
    apiMode?: int32(name='ApiMode', description='The type of the API. Valid values: 0, 1, and 2. The value 0 indicates that the API is generated in wizard mode. The value 1 indicates that the API is generated in script mode. The value 2 indicates that the API is generated by registration.', example='0'),
    apiName?: string(name='ApiName', description='The name of the API.', example='Name of the test API'),
    apiPath?: string(name='ApiPath', description='The path of the API.', example='/test/1'),
    createdTime?: string(name='CreatedTime', description='The creation time.', example='2020-06-23T00:21:01+0800'),
    creatorId?: string(name='CreatorId', description='The ID of the Alibaba Cloud account used by the creator of the API.', example='1234567'),
    description?: string(name='Description', description='The description.', example='Description of the test API'),
    folderId?: long(name='FolderId', description='The ID of the folder.', example='0'),
    groupId?: string(name='GroupId', description='The ID of the group.', example='ab123****'),
    modifiedTime?: string(name='ModifiedTime', description='The time when the API was last modified.', example='2020-06-23T00:21:01+0800'),
    operatorId?: string(name='OperatorId', description='The ID of the Alibaba Cloud account used by the user who last modified the API.', example='2345678'),
    projectId?: long(name='ProjectId', description='The ID of the workspace.', example='10001'),
    protocols?: [ int32 ](name='Protocols', description='The list of fields.'),
    registrationDetails?: {
      failedResultSample?: string(name='FailedResultSample', description='The sample error response of the API.', example='{"success": false}'),
      registrationErrorCodes?: [ 
        {
          errorCode?: string(name='ErrorCode', description='The error code returned.', example='1001'),
          errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='fail to call'),
          errorSolution?: string(name='ErrorSolution', description='The solution used to fix the error.', example='retry'),
        }
      ](name='RegistrationErrorCodes', description='The error codes returned for the API generated by registration.'),
      registrationRequestParameters?: [ 
        {
          columnName?: string(name='ColumnName', description='The name of the associated field. This parameter is supported only if the API is generated in wizard mode.', example='column1'),
          defaultValue?: string(name='DefaultValue', description='The default value.', example='default1'),
          exampleValue?: string(name='ExampleValue', description='The sample value.', example='example1'),
          isRequiredParameter?: boolean(name='IsRequiredParameter', description='Indicates whether the parameter is required.', example='true'),
          parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values: 0, 1, 2, 3, 4, and 5. The value 0 indicates the STRING data type, the value 1 indicates the INT data type, the value 2 indicates the LONG data type, the value 3 indicates the FLOAT data type, the value 4 indicates the DOUBLE data type, and the value 5 indicates the BOOLEAN data type.', example='0'),
          parameterDescription?: string(name='ParameterDescription', description='The description.', example='description1'),
          parameterName?: string(name='ParameterName', description='The name of the parameter.', example='name1'),
          parameterOperator?: int32(name='ParameterOperator', description='The operator used for the value of the parameter. Valid values:

*   0: indicates that the operator is Equal.
*   1: indicates that the operator is Like.
*   2: indicates that the operator is Const.
*   3: indicates that the operator is In.

APIs generated in wizard mode support the Equal, Like, and In operators. APIs generated in script mode support the Equal operator. APIs generated by registration support the Equal and Const operators.', example='0'),
          parameterPosition?: int32(name='ParameterPosition', description='The position of the parameter. Valid values:

*   0: indicates that the parameter is in the URL path of the request.
*   1: indicates that the parameter is in the Query parameter of the request URL.
*   2: indicates that the parameter is in the request header.
*   3: indicates that the parameter is in the request body.

APIs generated in wizard or script mode support only the Query position. APIs generated by registration whose request method is GET or DELETE support the Query and Head positions. APIs generated by registration whose request method is PUT or POST support the Query, Head, and Body positions.', example='0'),
        }
      ](name='RegistrationRequestParameters', description='The request parameters of the API generated by registration.'),
      serviceContentType?: int32(name='ServiceContentType', description='The format in which the response of the API request is returned. Valid values:

*   0: indicates the JSON format.
*   1: indicates the XML format.

APIs generated in wizard or script mode support the JSON format. APIs generated by registration support the JSON and XML formats.', example='0'),
      serviceHost?: string(name='ServiceHost', description='The address of the backend service.', example='http://example.aliyundoc.com'),
      servicePath?: string(name='ServicePath', description='The path of the backend service.', example='/index'),
      serviceRequestBodyDescription?: string(name='ServiceRequestBodyDescription', description='The description of the request body initiated to call the backend service.', example='{"abc":1}'),
      successfulResultSample?: string(name='SuccessfulResultSample', description='Sample success responses', example='{"success": true}'),
    }(name='RegistrationDetails', description='The details of the API generated by registration. This parameter is returned only if the API is generated by registration.'),
    requestMethod?: int32(name='RequestMethod', description='The request method of the API. Valid values: 0, 1, 2, and 3. The value 0 indicates the GET method, the value 1 indicates the POST method, the value 2 indicates the PUT method, and the value 3 indicates the DELETE method. APIs generated in wizard or script mode support the GET and POST methods. APIs generated by registration support the GET, POST, PUT, and DELETE methods.', example='0'),
    responseContentType?: int32(name='ResponseContentType', description='The format in which the response of the API request is returned. Valid values: 0 and 1. The value 0 indicates the JSON format. The value 1 indicates the XML format. APIs generated in wizard or script mode support the JSON format. APIs generated by registration support the JSON and XML formats.', example='0'),
    scriptDetails?: {
      isPagedResponse?: boolean(name='IsPagedResponse', description='Indicates whether the entries were returned by page.', example='true'),
      script?: string(name='Script', description='The SQL script.', example='select a from t'),
      scriptConnection?: {
        connectionId?: long(name='ConnectionId', description='The ID of the data source.', example='123'),
        tableName?: string(name='TableName', description='The name of the table in the data source.', example='t'),
      }(name='ScriptConnection', description='The data source information of the API generated in script mode.'),
      scriptRequestParameters?: [ 
        {
          columnName?: string(name='ColumnName', description='The name of the associated field. This parameter is supported only if the API is generated in wizard mode.', example='column1'),
          defaultValue?: string(name='DefaultValue', description='The default value.', example='default1'),
          exampleValue?: string(name='ExampleValue', description='The sample value.', example='example1'),
          isRequiredParameter?: boolean(name='IsRequiredParameter', description='Indicates whether the parameter is required.', example='true'),
          parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values: 0, 1, 2, 3, 4, and 5. The value 0 indicates the STRING data type, the value 1 indicates the INT data type, the value 2 indicates the LONG data type, the value 3 indicates the FLOAT data type, the value 4 indicates the DOUBLE data type, and the value 5 indicates the BOOLEAN data type.', example='0'),
          parameterDescription?: string(name='ParameterDescription', description='The description.', example='description1'),
          parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param1'),
          parameterOperator?: int32(name='ParameterOperator', description='The operator used for the value of the parameter. Valid values: 0, 1, 2, and 3. The value 0 indicates that the operator is Equal, the value 1 indicates that the operator is Like, the value 2 indicates that the operator is Const, and the value 3 indicates that the operator is In. APIs generated in wizard mode support the Equal, Like, and In operators. APIs generated in script mode support the Equal operator. APIs generated by registration support the Equal and Const operators.', example='0'),
          parameterPosition?: int32(name='ParameterPosition', description='The position of the parameter. Valid values: 0, 1, 2, and 3. The value 0 indicates that the parameter is in the URL path of the request, the value 1 indicates that the parameter is in the Query parameter of the request URL, the value 2 indicates that the parameter is in the request header, and the value 3 indicates that the parameter is in the request body. APIs generated in wizard or script mode support only the Query position. APIs generated by registration whose request method is GET or DELETE support the Query and Head positions. APIs generated by registration whose request method is PUT or POST support the Query, Head, and Body positions.', example='0'),
        }
      ](name='ScriptRequestParameters', description='The request parameters of the API generated in script mode.'),
      scriptResponseParameters?: [ 
        {
          columnName?: string(name='ColumnName', description='The name of the associated field. This parameter is supported only if the API is generated in wizard mode.', example='column2'),
          exampleValue?: string(name='ExampleValue', description='The sample value.', example='example2'),
          parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values: 0, 1, 2, 3, 4, and 5. The value 0 indicates the STRING data type, the value 1 indicates the INT data type, the value 2 indicates the LONG data type, the value 3 indicates the FLOAT data type, the value 4 indicates the DOUBLE data type, and the value 5 indicates the BOOLEAN data type.', example='0'),
          parameterDescription?: string(name='ParameterDescription', description='The description.', example='description2'),
          parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param2'),
        }
      ](name='ScriptResponseParameters', description='The response parameters of the API generated in script mode.'),
    }(name='ScriptDetails', description='The details of the API generated in script mode. This parameter is returned only if the API is generated in script mode.'),
    status?: int32(name='Status', description='The status of the API. Valid values: 0 and 1. The value 0 indicates that the API is not published. The value 1 indicates that the API is published.', example='0'),
    tenantId?: long(name='TenantId', description='The ID of the tenant.', example='10002'),
    timeout?: int32(name='Timeout', description='The timeout period of the API request. Unit: milliseconds.', example='10000'),
    visibleRange?: int32(name='VisibleRange', description='The scope in which the API is visible. Valid values: 0 and 1. The value 0 indicates that the API is visible to the members in a specific workspace. The value 1 indicates that the API is visible only to the API creator.', example='0'),
    wizardDetails?: {
      isPagedResponse?: boolean(name='IsPagedResponse', description='Indicates whether the entries were returned by page.', example='true'),
      wizardConnection?: {
        connectionId?: long(name='ConnectionId', description='The ID of the data source.', example='123'),
        tableName?: string(name='TableName', description='The name of the table in the data source.', example='t'),
      }(name='WizardConnection', description='The data source information of the API generated in wizard mode.'),
      wizardRequestParameters?: [ 
        {
          columnName?: string(name='ColumnName', description='The name of the associated field. This parameter is supported only if the API is generated in wizard mode.', example='column1'),
          defaultValue?: string(name='DefaultValue', description='The default value.', example='default1'),
          exampleValue?: string(name='ExampleValue', description='The sample value.', example='example1'),
          isRequiredParameter?: boolean(name='IsRequiredParameter', description='Indicates whether the parameter is required.', example='true'),
          parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values: 0, 1, 2, 3, 4, and 5. The value 0 indicates the STRING data type, the value 1 indicates the INT data type, the value 2 indicates the LONG data type, the value 3 indicates the FLOAT data type, the value 4 indicates the DOUBLE data type, and the value 5 indicates the BOOLEAN data type.', example='0'),
          parameterDescription?: string(name='ParameterDescription', description='The description.', example='description1'),
          parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param1'),
          parameterOperator?: int32(name='ParameterOperator', description='The operator used for the value of the parameter. Valid values: 0, 1, 2, and 3. The value 0 indicates that the operator is Equal, the value 1 indicates that the operator is Like, the value 2 indicates that the operator is Const, and the value 3 indicates that the operator is In. APIs generated in wizard mode support the Equal, Like, and In operators. APIs generated in script mode support the Equal operator. APIs generated by registration support the Equal and Const operators.', example='0'),
          parameterPosition?: int32(name='ParameterPosition', description='The position of the parameter. Valid values: 0, 1, 2, and 3. The value 0 indicates that the parameter is in the URL path of the request, the value 1 indicates that the parameter is in the Query parameter of the request URL, the value 2 indicates that the parameter is in the request header, and the value 3 indicates that the parameter is in the request body. APIs generated in wizard or script mode support only the Query position. APIs generated by registration whose request method is GET or DELETE support the Query and Head positions. APIs generated by registration whose request method is PUT or POST support the Query, Head, and Body positions.', example='0'),
        }
      ](name='WizardRequestParameters', description='The request parameters of the API generated in wizard mode.'),
      wizardResponseParameters?: [ 
        {
          columnName?: string(name='ColumnName', description='The name of the associated field. This parameter is supported only if the API is generated in wizard mode.', example='column2'),
          exampleValue?: string(name='ExampleValue', description='The sample value.', example='example2'),
          parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values: 0, 1, 2, 3, 4, and 5. The value 0 indicates the STRING data type, the value 1 indicates the INT data type, the value 2 indicates the LONG data type, the value 3 indicates the FLOAT data type, the value 4 indicates the DOUBLE data type, and the value 5 indicates the BOOLEAN data type.', example='0'),
          parameterDescription?: string(name='ParameterDescription', description='The description.', example='description2'),
          parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param2'),
        }
      ](name='WizardResponseParameters', description='The response parameters of the API generated in wizard mode.'),
    }(name='WizardDetails', description='The details of the API generated in wizard mode. This parameter is returned only if the API is generated in wizard mode.'),
  }(name='Data', description='The data returned.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetDataServiceApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataServiceApiResponseBody(name='body'),
}

async function getDataServiceApiWithOptions(request: GetDataServiceApiRequest, runtime: Util.RuntimeOptions): GetDataServiceApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataServiceApi(request: GetDataServiceApiRequest): GetDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataServiceApiWithOptions(request, runtime);
}

model GetDataServiceApiTestRequest {
  testId?: long(name='TestId', example='123434'),
}

model GetDataServiceApiTestResponseBody = {
  data?: {
    apiId?: long(name='ApiId', example='12343'),
    costTime?: string(name='CostTime', example='10'),
    debugInfo?: string(name='DebugInfo', example='[<span style=\\"color: #92D581;\\">INFO</span>] [16:15:13.240] resource group is 498774069027041[<span style=\\"color: #92D581;\\">INFO</span>]'),
    nodesDebugInfo?: string(name='NodesDebugInfo', example='[<span style=\\"color: #92D581;\\">INFO</span>] [16:15:13.240] resource group is 498774069027041[<span style=\\"color: #92D581;\\">INFO</span>]'),
    paramMap?: string(name='ParamMap', example='{"name":"test"}'),
    retCode?: long(name='RetCode', example='0'),
    retResult?: string(name='RetResult', example='{"id":2}'),
    status?: string(name='Status', example='FINISHED'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='adssdsewe'),
}

model GetDataServiceApiTestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataServiceApiTestResponseBody(name='body'),
}

async function getDataServiceApiTestWithOptions(request: GetDataServiceApiTestRequest, runtime: Util.RuntimeOptions): GetDataServiceApiTestResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataServiceApiTest',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataServiceApiTest(request: GetDataServiceApiTestRequest): GetDataServiceApiTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataServiceApiTestWithOptions(request, runtime);
}

model GetDataServiceApplicationRequest {
  applicationId?: long(name='ApplicationId', description='The ID of the application. You can view the information about the application in the API Gateway console.', example='10000'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.', example='10001'),
  tenantId?: long(name='TenantId', description='The ID of the tenant.', example='10002'),
}

model GetDataServiceApplicationResponseBody = {
  data?: {
    applicationCode?: string(name='ApplicationCode', description='The AppCode for simple authentication. You can select simple authentication or signature authentication when you call an API operation.', example='CODE123'),
    applicationId?: long(name='ApplicationId', description='The ID of the application.', example='10000'),
    applicationKey?: string(name='ApplicationKey', description='The AppKey for signature authentication. You can select simple authentication or signature authentication when you call an API operation.', example='KEY123'),
    applicationName?: string(name='ApplicationName', description='The name of the application.', example='Test application'),
    applicationSecret?: string(name='ApplicationSecret', description='The AppSecret for signature authentication. You can select simple authentication or signature authentication when you call an API operation.', example='SECRET123'),
    projectId?: long(name='ProjectId', description='The ID of the workspace.', example='10001'),
  }(name='Data', description='The details of the application.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='0'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Normal'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetDataServiceApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataServiceApplicationResponseBody(name='body'),
}

async function getDataServiceApplicationWithOptions(request: GetDataServiceApplicationRequest, runtime: Util.RuntimeOptions): GetDataServiceApplicationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.applicationId)) {
    body['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDataServiceApplication',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataServiceApplication(request: GetDataServiceApplicationRequest): GetDataServiceApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataServiceApplicationWithOptions(request, runtime);
}

model GetDataServiceFolderRequest {
  folderId?: long(name='FolderId', description='The ID of the folder.', example='10001'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.', example='10002'),
  tenantId?: long(name='TenantId', description='The ID of the tenant.', example='10003'),
}

model GetDataServiceFolderResponseBody = {
  folder?: {
    createdTime?: string(name='CreatedTime', description='The time when the folder was created.', example='2020-09-24T18:37:51+0800'),
    folderId?: long(name='FolderId', description='The ID of the folder.', example='11'),
    folderName?: string(name='FolderName', description='The name of the folder.', example='test1'),
    groupId?: string(name='GroupId', description='The ID of the business process to which the folder belongs.', example='ds_1234'),
    modifiedTime?: string(name='ModifiedTime', description='The time when the folder was last modified.', example='2020-09-24T18:37:51+0800'),
    parentId?: long(name='ParentId', description='The ID of the parent folder. The ID of the root folder in a business process is 0, and the ID of a folder created by a user in a business process is greater than 0.', example='0'),
    projectId?: long(name='ProjectId', description='The ID of the workspace.', example='10001'),
    tenantId?: long(name='TenantId', description='The ID of the tenant.', example='10002'),
  }(name='Folder', description='The details of the folder.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0000-ABCD-EF****'),
}

model GetDataServiceFolderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataServiceFolderResponseBody(name='body'),
}

async function getDataServiceFolderWithOptions(request: GetDataServiceFolderRequest, runtime: Util.RuntimeOptions): GetDataServiceFolderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderId)) {
    body['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDataServiceFolder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataServiceFolder(request: GetDataServiceFolderRequest): GetDataServiceFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataServiceFolderWithOptions(request, runtime);
}

model GetDataServiceGroupRequest {
  groupId?: string(name='GroupId', description='The ID of the business process.', example='ds_123abc'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.', example='10001'),
  tenantId?: long(name='TenantId', description='The ID of the tenant.', example='10002'),
}

model GetDataServiceGroupResponseBody = {
  group?: {
    apiGatewayGroupId?: string(name='ApiGatewayGroupId', description='The ID of the API group that is associated with the business process in the API Gateway console.', example='100abc'),
    createdTime?: string(name='CreatedTime', description='The time when the business process was created.', example='2020-09-24T18:37:51+0800'),
    creatorId?: string(name='CreatorId', description='The user identifier (UID) of the creator of the business process. The value of this parameter may be empty for creators of some existing business processes.', example='10001'),
    description?: string(name='Description', description='The description of the business process.', example='Test'),
    groupId?: string(name='GroupId', description='The ID of the business process.', example='ds_123abc'),
    groupName?: string(name='GroupName', description='The name of the business process.', example='Test'),
    modifiedTime?: string(name='ModifiedTime', description='The time when the business process was last modified.', example='2020-09-24T18:37:51+0800'),
    projectId?: long(name='ProjectId', description='The ID of the workspace.', example='10002'),
    tenantId?: long(name='TenantId', description='The ID of the tenant.', example='10003'),
  }(name='Group', description='The details of the business process.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0000-ABCD-EF****'),
}

model GetDataServiceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataServiceGroupResponseBody(name='body'),
}

async function getDataServiceGroupWithOptions(request: GetDataServiceGroupRequest, runtime: Util.RuntimeOptions): GetDataServiceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDataServiceGroup',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataServiceGroup(request: GetDataServiceGroupRequest): GetDataServiceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataServiceGroupWithOptions(request, runtime);
}

model GetDataServicePublishedApiRequest {
  apiId?: long(name='ApiId', description='The ID of the API.', example='10001'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.', example='10002'),
  tenantId?: long(name='TenantId', description='The ID of the tenant.', example='10003'),
}

model GetDataServicePublishedApiResponseBody = {
  data?: {
    apiId?: long(name='ApiId', description='The ID of the DataService Studio API.', example='10000'),
    apiMode?: int32(name='ApiMode', description='The type of the API. Valid values: 0, 1, and 2. The value 0 indicates that the API is generated in wizard mode. The value 1 indicates that the API is generated in script mode. The value 2 indicates that the API is generated by registration.', example='0'),
    apiName?: string(name='ApiName', description='The name of the API.', example='Name of the test API'),
    apiPath?: string(name='ApiPath', description='The path of the API.', example='/test/1'),
    createdTime?: string(name='CreatedTime', description='The creation time.', example='2020-06-23T00:21:01+0800'),
    creatorId?: string(name='CreatorId', description='The ID of the Alibaba Cloud account used by the creator of the API.', example='1234567'),
    description?: string(name='Description', description='The description.', example='Description of the test API'),
    groupId?: string(name='GroupId', description='The ID of the group.', example='ab12**'),
    modifiedTime?: string(name='ModifiedTime', description='The time when the API was last modified.', example='2020-06-23T00:21:01+0800'),
    operatorId?: string(name='OperatorId', description='The ID of the Alibaba Cloud account used by the user who last modified the API.', example='2345678'),
    projectId?: long(name='ProjectId', description='The ID of the workspace.', example='10001'),
    protocols?: [ int32 ](name='Protocols', description='The list of fields.'),
    registrationDetails?: {
      failedResultSample?: string(name='FailedResultSample', description='The sample error response of the API.', example='{"success": false}'),
      registrationErrorCodes?: [ 
        {
          errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
          errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
          errorSolution?: string(name='ErrorSolution', description='The solution used to fix the error.', example='retry'),
        }
      ](name='RegistrationErrorCodes', description='The error codes returned for the API generated by registration.'),
      registrationRequestParameters?: [ 
        {
          defaultValue?: string(name='DefaultValue', description='The default value.', example='default1'),
          exampleValue?: string(name='ExampleValue', description='The sample value.', example='example1'),
          isRequiredParameter?: boolean(name='IsRequiredParameter', description='Indicates whether the parameter is required.', example='true'),
          parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values: 0, 1, 2, 3, 4, and 5. The value 0 indicates the STRING data type, the value 1 indicates the INT data type, the value 2 indicates the LONG data type, the value 3 indicates the FLOAT data type, the value 4 indicates the DOUBLE data type, and the value 5 indicates the BOOLEAN data type.', example='0'),
          parameterDescription?: string(name='ParameterDescription', description='The description.', example='description1'),
          parameterName?: string(name='ParameterName', description='The name of the parameter.', example='name1'),
          parameterOperator?: int32(name='ParameterOperator', description='The operator used for the value of the parameter. Valid values: 0, 1, 2, and 3. The value 0 indicates that the operator is Equal, the value 1 indicates that the operator is Like, the value 2 indicates that the operator is Const, and the value 3 indicates that the operator is In. APIs generated in wizard mode support the Equal, Like, and In operators. APIs generated in script mode support the Equal operator. APIs generated by registration support the Equal and Const operators.', example='0'),
          parameterPosition?: int32(name='ParameterPosition', description='The position of the parameter. Valid values: 0, 1, 2, and 3. The value 0 indicates that the parameter is in the URL path of the request, the value 1 indicates that the parameter is in the Query parameter of the request URL, the value 2 indicates that the parameter is in the request header, and the value 3 indicates that the parameter is in the request body. APIs generated in wizard or script mode support only the Query position. APIs generated by registration whose request method is GET or DELETE support the Query and Head positions. APIs generated by registration whose request method is PUT or POST support the Query, Head, and Body positions.', example='0'),
        }
      ](name='RegistrationRequestParameters', description='The request parameters of the API generated by registration.'),
      serviceContentType?: int32(name='ServiceContentType', description='The format in which the response of the API request is returned. Valid values: 0 and 1. The value 0 indicates the JSON format. The value 1 indicates the XML format. APIs generated in wizard or script mode support the JSON format. APIs generated by registration support the JSON and XML formats.', example='0'),
      serviceHost?: string(name='ServiceHost', description='The address of the backend service.', example='http://example.aliyundoc.com'),
      servicePath?: string(name='ServicePath', description='The path of the backend service.', example='/index'),
      serviceRequestBodyDescription?: string(name='ServiceRequestBodyDescription', description='The description of the request body initiated to call the backend service.', example='{"abc":1}'),
      successfulResultSample?: string(name='SuccessfulResultSample', description='The sample success response of the API.', example='{"success": true}'),
    }(name='RegistrationDetails', description='The details of the API generated by registration. This parameter is returned only if the API is generated by registration.'),
    requestMethod?: int32(name='RequestMethod', description='The request method of the API. Valid values: 0, 1, 2, and 3. The value 0 indicates the GET method, the value 1 indicates the POST method, the value 2 indicates the PUT method, and the value 3 indicates the DELETE method. APIs generated in wizard or script mode support the GET and POST methods. APIs generated by registration support the GET, POST, PUT, and DELETE methods.', example='0'),
    responseContentType?: int32(name='ResponseContentType', description='The format in which the response of the API request is returned. Valid values: 0 and 1. The value 0 indicates the JSON format. The value 1 indicates the XML format. APIs generated in wizard or script mode support the JSON format. APIs generated by registration support the JSON and XML formats.', example='0'),
    scriptDetails?: {
      failedResultSample?: string(name='FailedResultSample', description='The sample error response of the API.', example='{"success": false}'),
      isPagedResponse?: boolean(name='IsPagedResponse', description='Indicates whether the entries were returned by page.', example='true'),
      script?: string(name='Script', description='The SQL script.', example='select a from t'),
      scriptConnection?: {
        connectionId?: long(name='ConnectionId', description='The ID of the data source.', example='123'),
        tableName?: string(name='TableName', description='The name of the table in the data source.', example='t'),
      }(name='ScriptConnection', description='The data source information of the API generated in script mode.'),
      scriptErrorCodes?: [ 
        {
          errorCode?: string(name='ErrorCode', description='The error code returned.', example='1001'),
          errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='fail to call'),
          errorSolution?: string(name='ErrorSolution', description='The solution used to fix the error.', example='retry'),
        }
      ](name='ScriptErrorCodes', description='The error codes returned for the API generated in script mode.'),
      scriptRequestParameters?: [ 
        {
          defaultValue?: string(name='DefaultValue', description='The default value.', example='default1'),
          exampleValue?: string(name='ExampleValue', description='The sample value.', example='example1'),
          isRequiredParameter?: boolean(name='IsRequiredParameter', description='Indicates whether the parameter is required.', example='true'),
          parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values:

*   0: indicates the STRING data type.
*   1: indicates the INT data type.
*   2: indicates the LONG data type.
*   3: indicates the FLOAT data type.
*   4: indicates the DOUBLE data type.
*   5: indicates the BOOLEAN data type.', example='0'),
          parameterDescription?: string(name='ParameterDescription', description='The description.', example='description1'),
          parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param1'),
          parameterOperator?: int32(name='ParameterOperator', description='The operator used for the value of the parameter. Valid values:

*   0: indicates that the operator is Equal.
*   1: indicates that the operator is Like.
*   2: indicates that the operator is Const.
*   3: indicates that the operator is In.

APIs generated in wizard mode support the Equal, Like, and In operators. APIs generated in script mode support the Equal operator. APIs generated by registration support the Equal and Const operators.', example='0'),
          parameterPosition?: int32(name='ParameterPosition', description='The position of the parameter. Valid values:

*   0: indicates that the parameter is in the URL path of the request.
*   1: indicates that the parameter is in the Query parameter of the request URL.
*   2: indicates that the parameter is in the request header.
*   3: indicates that the parameter is in the request body.

APIs generated in wizard or script mode support only the Query position. APIs generated by registration whose request method is GET or DELETE support the Query and Head positions. APIs generated by registration whose request method is PUT or POST support the Query, Head, and Body positions.', example='0'),
        }
      ](name='ScriptRequestParameters', description='The request parameters of the API generated in script mode.'),
      scriptResponseParameters?: [ 
        {
          exampleValue?: string(name='ExampleValue', description='The sample value.', example='example2'),
          parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values: 0, 1, 2, 3, 4, and 5. The value 0 indicates the STRING data type, the value 1 indicates the INT data type, the value 2 indicates the LONG data type, the value 3 indicates the FLOAT data type, the value 4 indicates the DOUBLE data type, and the value 5 indicates the BOOLEAN data type.', example='0'),
          parameterDescription?: string(name='ParameterDescription', description='The description.', example='description2'),
          parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param2'),
        }
      ](name='ScriptResponseParameters', description='The response parameters of the API generated in script mode.'),
      successfulResultSample?: string(name='SuccessfulResultSample', description='The sample success response of the API.', example='{"success": true}'),
    }(name='ScriptDetails', description='The details of the API generated in script mode. This parameter is returned only if the API is generated in script mode.'),
    status?: int32(name='Status', description='The status of the API. Valid values: 0 and 1. The value 0 indicates that the API is not published. The value 1 indicates that the API is published.', example='1'),
    tenantId?: long(name='TenantId', description='The ID of the tenant.', example='10001'),
    timeout?: int32(name='Timeout', description='The timeout period of the API request. Unit: milliseconds.', example='10000'),
    visibleRange?: int32(name='VisibleRange', description='The scope in which the API is visible. Valid values: 0 and 1. The value 0 indicates that the API is visible to the members in a specific workspace. The value 1 indicates that the API is visible only to the API creator.', example='0'),
    wizardDetails?: {
      failedResultSample?: string(name='FailedResultSample', description='The sample error response of the API.', example='{"success": false}'),
      isPagedResponse?: boolean(name='IsPagedResponse', description='Indicates whether the entries were returned by page.', example='true'),
      successfulResultSample?: string(name='SuccessfulResultSample', description='The sample success response of the API.', example='{"success": true}'),
      wizardConnection?: {
        connectionId?: long(name='ConnectionId', description='The ID of the data source.', example='123'),
        tableName?: string(name='TableName', description='The name of the table in the data source.', example='t'),
      }(name='WizardConnection', description='The data source information of the API generated in wizard mode.'),
      wizardErrorCodes?: [ 
        {
          errorCode?: string(name='ErrorCode', description='The error code returned.', example='1001'),
          errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='fail to call'),
          errorSolution?: string(name='ErrorSolution', description='The solution used to fix the error.', example='retry'),
        }
      ](name='WizardErrorCodes', description='The error codes returned for the API generated in wizard mode.'),
      wizardRequestParameters?: [ 
        {
          defaultValue?: string(name='DefaultValue', description='The default value.', example='default1'),
          exampleValue?: string(name='ExampleValue', description='The sample value.', example='example1'),
          isRequiredParameter?: boolean(name='IsRequiredParameter', description='Indicates whether the parameter is required.', example='true'),
          parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values: 0, 1, 2, 3, 4, and 5. The value 0 indicates the STRING data type, the value 1 indicates the INT data type, the value 2 indicates the LONG data type, the value 3 indicates the FLOAT data type, the value 4 indicates the DOUBLE data type, and the value 5 indicates the BOOLEAN data type.', example='0'),
          parameterDescription?: string(name='ParameterDescription', description='The description.', example='description1'),
          parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param1'),
          parameterOperator?: int32(name='ParameterOperator', description='The operator used for the value of the parameter. Valid values: 0, 1, 2, and 3. The value 0 indicates that the operator is Equal, the value 1 indicates that the operator is Like, the value 2 indicates that the operator is Const, and the value 3 indicates that the operator is In. APIs generated in wizard mode support the Equal, Like, and In operators. APIs generated in script mode support the Equal operator. APIs generated by registration support the Equal and Const operators.', example='0'),
          parameterPosition?: int32(name='ParameterPosition', description='The position of the parameter. Valid values: 0, 1, 2, and 3. The value 0 indicates that the parameter is in the URL path of the request, the value 1 indicates that the parameter is in the Query parameter of the request URL, the value 2 indicates that the parameter is in the request header, and the value 3 indicates that the parameter is in the request body. APIs generated in wizard or script mode support only the Query position. APIs generated by registration whose request method is GET or DELETE support the Query and Head positions. APIs generated by registration whose request method is PUT or POST support the Query, Head, and Body positions.', example='0'),
        }
      ](name='WizardRequestParameters', description='The request parameters of the API generated in wizard mode.'),
      wizardResponseParameters?: [ 
        {
          exampleValue?: string(name='ExampleValue', description='The sample value.', example='example2'),
          parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values: 0, 1, 2, 3, 4, and 5. The value 0 indicates the STRING data type, the value 1 indicates the INT data type, the value 2 indicates the LONG data type, the value 3 indicates the FLOAT data type, the value 4 indicates the DOUBLE data type, and the value 5 indicates the BOOLEAN data type.', example='0'),
          parameterDescription?: string(name='ParameterDescription', description='The description.', example='description2'),
          parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param2'),
        }
      ](name='WizardResponseParameters', description='The response parameters of the API generated in wizard mode.'),
    }(name='WizardDetails', description='The details of the API generated in wizard mode. This parameter is returned only if the API is generated in wizard mode.'),
  }(name='Data', description='The latest information of the API in the published state.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetDataServicePublishedApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataServicePublishedApiResponseBody(name='body'),
}

async function getDataServicePublishedApiWithOptions(request: GetDataServicePublishedApiRequest, runtime: Util.RuntimeOptions): GetDataServicePublishedApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDataServicePublishedApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataServicePublishedApi(request: GetDataServicePublishedApiRequest): GetDataServicePublishedApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataServicePublishedApiWithOptions(request, runtime);
}

model GetDataSourceMetaRequest {
  datasourceName?: string(name='DatasourceName', description='The number of the page to return.', example='mysql_name'),
  envType?: string(name='EnvType', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='1'),
  pageNumber?: long(name='PageNumber', description='The number of entries to return on each page.', example='1'),
  pageSize?: long(name='PageSize', description='The environment to which the data source belongs. Valid values:

*   0: development environment
*   1: production environment', example='10'),
  projectId?: long(name='ProjectId', description='The name of the data source.', example='10000'),
}

model GetDataSourceMetaResponseBody = {
  data?: {
    message?: string(name='Message', description='The returned metadata of the data source. The returned metadata is in the JSON format.

`{"dbTables":[{"dbName":"testdb","schema":[{"tableInfos":[{"dbName":"testdb","enable":true,"table":"table1","tableName":"table1"}]},{"tableInfos":[{"dbName":"testdb","enable":true,"table":"table2","tableName":"table2"}]}]}]}`

Parameter description:

*   dbName: the name of the database in which the data source resides.
*   schema: the schema of the database.
*   enable: indicates whether the database is available. A value of true indicates that the database is available. A value of false indicates that the database is unavailable.
*   tableName: the name of the table in the database.
*   tableInfos: the information about the table in the database.', example='read datasource time out'),
    meta?: string(name='Meta', example='{"dbTables":[{"dbName":"testdb","schema":[{"tableInfos":[{"dbName":"testdb","enable":true,"table":"table1","tableName":"table1"}]},{"tableInfos":[{"dbName":"testdb","enable":true,"table":"table2","tableName":"table2"}]}]}]}'),
    status?: string(name='Status', description='The reason why the metadata of the data source failed to be retrieved. If the metadata of the data source was retrieved, this parameter is left empty.', example='success'),
  }(name='Data', description='Indicates whether the metadata of the data source was retrieved. Valid values:

*   success: The metadata of the data source was retrieved.
*   fail: The metadata of the data source failed to be retrieved. You can troubleshoot issues based on the Message parameter.'),
  requestId?: string(name='RequestId', description='The information about the query operation.', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', description='The unique ID of the request. You can query logs and troubleshoot issues based on the unique ID.', example='true'),
}

model GetDataSourceMetaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataSourceMetaResponseBody(name='body'),
}

async function getDataSourceMetaWithOptions(request: GetDataSourceMetaRequest, runtime: Util.RuntimeOptions): GetDataSourceMetaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasourceName)) {
    query['DatasourceName'] = request.datasourceName;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataSourceMeta',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataSourceMeta(request: GetDataSourceMetaRequest): GetDataSourceMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataSourceMetaWithOptions(request, runtime);
}

model GetDeploymentRequest {
  deploymentId?: long(name='DeploymentId', description='The ID of the deployment task. A deployment task ID is generated when you call the [SubmitFile](~~173944~~) or [DeployFile](~~173956~~) operation.', example='3000001'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can click the Workspace Manage icon in the upper-right corner of the DataStudio page to go to the Workspace Management page and view the workspace ID.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The GUID of the DataWorks workspace. You can view the GUID in the upper part of the DataStudio page. You can also select another GUID to switch to another workspace.

You must specify either this parameter or the ProjectId parameter to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model GetDeploymentResponseBody = {
  data?: {
    deployedItems?: [ 
      {
        fileId?: long(name='FileId'),
        fileVersion?: long(name='FileVersion'),
        status?: int32(name='Status'),
      }
    ](name='DeployedItems'),
    deployment?: {
      checkingStatus?: int32(name='CheckingStatus', description='The check status of one or more files in the deployment task. If the value of the ToEnvironment parameter is 1, the files can be deployed to the production environment only when the value of the Status parameter is 1 and the CheckingStatus parameter is empty. Valid values:

*   7: The file failed the check.
*   8: The file is being checked.', example='7'),
      createTime?: long(name='CreateTime', description='The time when the deployment task was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1593877765000'),
      creatorId?: string(name='CreatorId', description='The ID of the Alibaba Cloud account used by the user who created the deployment task.', example='20030****'),
      errorMessage?: string(name='ErrorMessage', description='The error message that was returned when the deployment task failed. In this case, the value of the Status parameter is 2.'),
      executeTime?: long(name='ExecuteTime', description='The time when the deployment task was run. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1593877765000'),
      fromEnvironment?: int32(name='FromEnvironment', description='The environment in which the deployment task was run. Valid values: 0 and 1. A value of 0 indicates the on-premises environment. A value of 1 indicates the development environment.', example='0'),
      handlerId?: string(name='HandlerId', description='The ID of the Alibaba Cloud account used by the user who ran the deployment task.', example='2003****'),
      name?: string(name='Name', description='The name of the deployment task. The value is the same as the name of the specific deployment task that is displayed on the Release Package page in the Deploy module.', example='ods_user_info_d-2020-07-04_20030****'),
      status?: int32(name='Status', description='The status of the deployment task. Valid values: 0, 1, and 2. A value of 0 indicates that the task is ready. A value of 1 indicates that the task was successful. A value of 2 indicates that the task failed.', example='1'),
      toEnvironment?: int32(name='ToEnvironment', description='The environment to which the file was deployed. Valid values: 1 and 2. A value of 1 indicates the development environment. A value of 2 indicates the production environment.', example='1'),
    }(name='Deployment', description='The details of the deployment task.'),
  }(name='Data', description='The data about the deployment task.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can troubleshoot errors based on the ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetDeploymentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeploymentResponseBody(name='body'),
}

async function getDeploymentWithOptions(request: GetDeploymentRequest, runtime: Util.RuntimeOptions): GetDeploymentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deploymentId)) {
    body['DeploymentId'] = request.deploymentId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDeployment',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDeployment(request: GetDeploymentRequest): GetDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeploymentWithOptions(request, runtime);
}

model GetExtensionRequest {
  extensionCode?: string(name='ExtensionCode', description='The unique code of the extension.', example='ce4*********086da5'),
}

model GetExtensionResponseBody = {
  extension?: {
    bindEventList?: [ 
      {
        eventCode?: string(name='EventCode', description='The code of the extension point event.', example='commit-file'),
        eventName?: string(name='EventName', description='The name of the extension point event.'),
      }
    ](name='BindEventList', description='The extension point events.'),
    detailUrl?: string(name='DetailUrl', description='The URL of the help document about the extension. You can visit the URL for the details of the extension.', example='https://www.aliyun.com/'),
    eventCategoryList?: [ 
      {
        categoryCode?: string(name='CategoryCode', description='The code of the event type.', example='file-change'),
        categoryName?: string(name='CategoryName', description='The name of the event type.'),
      }
    ](name='EventCategoryList', description='The types of the events.'),
    extensionCode?: string(name='ExtensionCode', description='The unique code of the extension.', example='ce4*********086da5'),
    extensionDesc?: string(name='ExtensionDesc', description='The description of the extension.'),
    extensionName?: string(name='ExtensionName', description='The name of the extension.'),
    helpDocUrl?: string(name='HelpDocUrl', description='The URL of the help document about the extension.', example='https://www.aliyun.com/'),
    optionSetting?: string(name='OptionSetting', description='The option settings of the extension.'),
    parameterSetting?: string(name='ParameterSetting', description='The parameter settings of the extension. For more information, visit https://www.alibabacloud.com/help/en/dataworks/latest/set-extension-parameters.', example='extension.project.disabled=projectId1,projectId2,projectId3'),
    projectTesting?: long(name='ProjectTesting', description='The workspace for testing. If the extension is in the testing state, the extension can be used only in the workspace for testing.', example='13552'),
    status?: int32(name='Status', description='The state of the extension. 0: testing. 1: publishing. 3: disabled. 4: approving. 5: approved. 6: approval failed.', example='0'),
  }(name='Extension', description='The details of the extension.'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='0000-ABCD-EFG'),
}

model GetExtensionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetExtensionResponseBody(name='body'),
}

async function getExtensionWithOptions(request: GetExtensionRequest, runtime: Util.RuntimeOptions): GetExtensionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.extensionCode)) {
    query['ExtensionCode'] = request.extensionCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetExtension',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getExtension(request: GetExtensionRequest): GetExtensionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getExtensionWithOptions(request, runtime);
}

model GetFileRequest {
  fileId?: long(name='FileId', description='The ID of the file. You can call the [ListFiles](~~173942~~) operation to obtain the ID.', example='100000001'),
  nodeId?: long(name='NodeId', description='The ID of the node that is scheduled. You can call the [ListFiles](~~173942~~) operation to obtain the node ID.', example='200000001'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace Management page to obtain the workspace ID.

You must configure this parameter or the ProjectIdentifier parameter to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace Management page to obtain the workspace name.

You must configure this parameter or the ProjectId parameter to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model GetFileResponseBody = {
  data?: {
    file?: {
      advancedSettings?: string(name='AdvancedSettings', description='The advanced configurations of the node.

This parameter is valid only for an EMR Spark Streaming node or an EMR Streaming SQL node. This parameter corresponds to the Advanced Settings tab of the node in the [DataWorks console](https://workbench.data.aliyun.com/console).

This parameter is configured in the JSON format.', example='{"queue":"default","SPARK_CONF":"--conf spark.driver.memory=2g"}'),
      autoParsing?: boolean(name='AutoParsing', description='Indicates whether the automatic parsing feature is enabled for the file. Valid values:

*   true: The automatic parsing feature is enabled for the file.
*   false: The automatic parsing feature is not enabled for the file.

This parameter corresponds to the Analyze Code parameter that is displayed after Same Cycle is selected in the Dependencies section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='true'),
      bizId?: long(name='BizId', description='The ID of the workflow to which the file belongs. This parameter is deprecated and replaced by the BusinessId parameter.', example='1000001'),
      businessId?: long(name='BusinessId', description='The ID of the workflow to which the file belongs.', example='1000001'),
      commitStatus?: int32(name='CommitStatus', description='Indicates whether the latest code in the file is committed. Valid values: 0 and 1. The value 0 indicates that the latest code in the file is not committed. The value 1 indicates that the latest code in the file is committed.', example='0'),
      connectionName?: string(name='ConnectionName', description='The ID of the compute engine instance that is used to run the node that corresponds to the file.', example='odps_first'),
      content?: string(name='Content', description='The code in the file.', example='SHOW TABLES;'),
      createTime?: long(name='CreateTime', description='The time when the file was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1593879116000'),
      createUser?: string(name='CreateUser', description='The ID of the Alibaba Cloud account used to create the file.', example='424732****'),
      currentVersion?: int32(name='CurrentVersion', description='The latest version number of the file.', example='3'),
      deletedStatus?: string(name='DeletedStatus', description='The status of the file. Valid values:

*   NORMAL: The file is not deleted.
*   RECYCLE_BIN: The file is stored in the recycle bin.
*   DELETED: The file is deleted.', example='RECYCLE'),
      fileDescription?: string(name='FileDescription', description='The description of the file.'),
      fileFolderId?: string(name='FileFolderId', description='The ID of the folder to which the file belongs.', example='2735c2****'),
      fileName?: string(name='FileName', description='The name of the file.', example='ods_user_info_d'),
      fileType?: int32(name='FileType', description='The type of the code for the file. Valid values: 6 (Shell), 10 (ODPS SQL), 11 (ODPS MR), 23 (Data Integration), 24 (ODPS Script), 99 (zero load), 221 (PyODPS 2), 225 (ODPS Spark), 227 (EMR Hive), 228 (EMR Spark), 229 (EMR Spark SQL), 230 (EMR MR), 239 (OSS object inspection), 257 (EMR Shell), 258 (EMR Spark Shell), 259 (EMR Presto), 260 (EMR Impala), 900 (real-time synchronization), 1089 (cross-tenant collaboration), 1091 (Hologres development), 1093 (Hologres SQL), 1100 (assignment), and 1221 (PyODPS 3).', example='10'),
      isMaxCompute?: boolean(name='IsMaxCompute', description='Indicates whether the file needs to be uploaded to MaxCompute.

This parameter is returned only if the file is a MaxCompute resource file.', example='true'),
      lastEditTime?: long(name='LastEditTime', description='The time when the file was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1593879116000'),
      lastEditUser?: string(name='LastEditUser', description='The ID of the Alibaba Cloud account used to last modify the file.', example='62465892****'),
      nodeId?: long(name='NodeId', description='The ID of the auto triggered node that is generated in the scheduling system after the file is committed.', example='300001'),
      owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the file owner.', example='7775674356****'),
      parentId?: long(name='ParentId', description='The ID of the node group file to which the current file belongs. This parameter is returned only if the current file is an inner file of the node group file.', example='-1'),
      useType?: string(name='UseType', description='The module to which the file belongs. Valid values:

*   NORMAL: The file is used for DataStudio.
*   MANUAL: The file is used for a manually triggered node.
*   MANUAL_BIZ: The file is used for a manually triggered workflow.
*   SKIP: The file is used for a dry-run DataStudio node.
*   ADHOCQUERY: The file is used for an ad hoc query.
*   COMPONENT: The file is used for a snippet.', example='NORMAL'),
    }(name='File', description='The basic information about the file.'),
    nodeConfiguration?: {
      autoRerunIntervalMillis?: int32(name='AutoRerunIntervalMillis', description='The interval between automatic reruns after an error occurs. Unit: milliseconds.

This parameter corresponds to the Rerun Interval parameter that is displayed after the Auto Rerun upon Error check box is selected in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).

The interval that you specify in the DataWorks console is measured in minutes. Pay attention to the conversion between the units of time when you call the operation.', example='120000'),
      autoRerunTimes?: int32(name='AutoRerunTimes', description='The number of automatic reruns that are allowed after an error occurs.', example='3'),
      cronExpress?: string(name='CronExpress', description='The CRON expression that represents the periodic scheduling policy of the node.', example='00 05 00 * * ?'),
      cycleType?: string(name='CycleType', description='The type of the scheduling cycle. Valid values: NOT_DAY and DAY. The value NOT_DAY indicates that the node is scheduled to run by minute or hour. The value DAY indicates that the node is scheduled to run by day, week, or month.

This parameter corresponds to the Scheduling Cycle parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='DAY'),
      dependentNodeIdList?: string(name='DependentNodeIdList', description='The ID of the node on which the node corresponding to the file depends when the DependentType parameter is set to USER_DEFINE. Multiple IDs are separated by commas (,).

The value of this parameter is equivalent to the ID of the node that you specified after you select Previous Cycle and set Depend On to Other Nodes in the Dependencies section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='5,10,15,20'),
      dependentType?: string(name='DependentType', description='The type of the cross-cycle scheduling dependency of the node. Valid values:

*   SELF: The instance generated for the node in the current cycle depends on the instance generated for the node in the previous cycle.
*   CHILD: The instance generated for the node in the current cycle depends on the instances generated for the descendant nodes at the nearest level of the node in the previous cycle.
*   USER_DEFINE: The instance generated for the node in the current cycle depends on the instances generated for one or more specified nodes in the previous cycle.
*   NONE: No cross-cycle scheduling dependency type is selected for the node.', example='USER_DEFINE'),
      endEffectDate?: long(name='EndEffectDate', description='The end time of automatic scheduling. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.

This parameter corresponds to the Validity Period parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='4155787800000'),
      inputList?: [ 
        {
          input?: string(name='Input', description='The output name of the parent file on which the current file depends.

This parameter corresponds to the Output Name parameter under Parent Nodes after Same Cycle is selected in the Dependencies section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='project.001_out'),
          parseType?: string(name='ParseType', description='The mode of the configuration file dependency. Valid values:

*   MANUAL: Scheduling dependencies are manually configured.
*   AUTO: Scheduling dependencies are automatically parsed.', example='MANUAL'),
        }
      ](name='InputList', description='The output names of the parent files on which the current file depends.'),
      inputParameters?: [ 
        {
          parameterName?: string(name='ParameterName', description='The name of the input parameter of the node. In the code, you can use the ${...} method to reference the input parameter of the node.

This parameter corresponds to the Parameter Name parameter in the Input Parameters table in the Input and Output Parameters section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='input'),
          valueSource?: string(name='ValueSource', description='The value source of the input parameter of the node.

This parameter corresponds to the Value Source parameter in the Input Parameters table in the Input and Output Parameters section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='project_001.parent_node:outputs'),
        }
      ](name='InputParameters', description='Input parameters of the node.

This parameter corresponds to the Input Parameters table in the Input and Output Parameters section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).'),
      outputList?: [ 
        {
          output?: string(name='Output', description='The output name of the current file.

This parameter corresponds to the Output Name parameter under Output after Same Cycle is selected in the Dependencies section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='dw_project.002_out'),
          refTableName?: string(name='RefTableName', description='The output table name of the current file.

This parameter corresponds to the Output Table Name parameter under Output after Same Cycle is selected in the Dependencies section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='ods_user_info_d'),
        }
      ](name='OutputList', description='The output names of the current file.

This parameter corresponds to the Output Name parameter under Output after Same Cycle is selected in the Dependencies section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).'),
      outputParameters?: [ 
        {
          description?: string(name='Description', description='The description of the output parameter of the node.', example='It\\"s a context output parameter.'),
          parameterName?: string(name='ParameterName', description='The name of the output parameter of the node.

This parameter corresponds to the Parameter Name parameter in the Output Parameters table in the Input and Output Parameters section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='output'),
          type?: string(name='Type', description='The type of the output parameter of the node. Valid values:

*   1: indicates a constant.
*   2: indicates a variable.
*   3: indicates a pass-through variable.

This parameter corresponds to the Type parameter in the Output Parameters table in the Input and Output Parameters section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='1'),
          value?: string(name='Value', description='The value of the output parameter of the node.

This parameter corresponds to the Value parameter in the Output Parameters table in the Input and Output Parameters section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='${bizdate}'),
        }
      ](name='OutputParameters', description='Output parameters of the node.

This parameter corresponds to the Output Parameters table in the Input and Output Parameters section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).'),
      paraValue?: string(name='ParaValue', description='The scheduling parameters of the node.

This parameter corresponds to the Parameters section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console). For more information about the configurations of the scheduling parameters, see [Configure scheduling parameters](~~137548~~).', example='a=x b=y'),
      rerunMode?: string(name='RerunMode', description='Indicates whether the node that corresponds to the file can be rerun. Valid values:

*   ALL_ALLOWED: The node can be rerun regardless of whether it is successfully run or fails to run.
*   FAILURE_ALLOWED: The node can be rerun only after it fails to run.
*   ALL_DENIED: The node cannot be rerun regardless of whether it is successfully run or fails to run.

This parameter corresponds to the Rerun parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='ALL_ALLOWED'),
      resourceGroupId?: long(name='ResourceGroupId', description='The ID of the resource group that is used to run the node. You can call the [ListResourceGroups](~~173913~~) operation to query the available resource groups in the workspace.', example='375827434852437'),
      schedulerType?: string(name='SchedulerType', description='The scheduling type of the node. Valid values:

*   NORMAL: The node is an auto triggered node.
*   MANUAL: The node is a manually triggered node. Manually triggered nodes cannot be automatically triggered. They correspond to the nodes in the Manually Triggered Workflows pane.
*   PAUSE: The node is a paused node.
*   SKIP: The node is a dry-run node. Dry-run nodes are started as scheduled but the system sets the status of the nodes to successful when it starts to run them.', example='NORMAL'),
      startEffectDate?: long(name='StartEffectDate', description='The start time of automatic scheduling. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.

This parameter corresponds to the Validity Period parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='936923400000'),
      startImmediately?: boolean(name='StartImmediately', description='Indicates whether a node is immediately run after the node is deployed to the production environment.

This parameter is valid only for an EMR Spark Streaming node or an EMR Streaming SQL node. This parameter corresponds to the Start Method parameter in the Schedule section of the Configure tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='true'),
      stop?: boolean(name='Stop', description='Indicates whether the scheduling for the node is suspended Valid values:

*   true: The scheduling for the node is suspended.
*   false: The scheduling for the node is not suspended.

This parameter corresponds to the Recurrence parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='false'),
    }(name='NodeConfiguration', description='The scheduling configurations of the file.'),
  }(name='Data', description='The details of the file.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request is successful.
*   false: The request fails.', example='true'),
}

model GetFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFileResponseBody(name='body'),
}

async function getFileWithOptions(request: GetFileRequest, runtime: Util.RuntimeOptions): GetFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFile(request: GetFileRequest): GetFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFileWithOptions(request, runtime);
}

model GetFileTypeStatisticRequest {
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV. The value PROD indicates the production environment. The value DEV indicates the development environment.', example='PROD'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the ID.', example='123465'),
}

model GetFileTypeStatisticResponseBody = {
  programTypeAndCounts?: [ 
    {
      count?: int32(name='Count', description='The number of nodes.', example='1'),
      programType?: string(name='ProgramType', description='The type of the node.

Valid values:

6 (Shell node), 10 (ODPS SQL node), 11 (ODPS MR node), 23 (Data Integration node), 24 (ODPS Script node), 99 (zero load node), 221 (PyODPS 2 node), 225 (ODPS Spark node), 227 (EMR Hive node), 228 (EMR Spark node), 229 (EMR Spark SQL node), 230 (EMR MR node), 239 (OSS object inspection node), 257 (EMR Shell node), 258 (EMR Spark Shell node), 259 (EMR Presto node), 260 (EMR Impala node), 900 (real-time data synchronization node), 1089 (cross-tenant collaboration node), 1091 (Hologres development node), 1093 (Hologres SQL node), 1100 (assignment node), and 1221 (PyODPS 3 node).', example='ODPS_SQL'),
    }
  ](name='ProgramTypeAndCounts', description='An array of node types and quantity.'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='SDFSDFSDF-SDFSDF-SDFDSF-SDFSDF'),
}

model GetFileTypeStatisticResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFileTypeStatisticResponseBody(name='body'),
}

async function getFileTypeStatisticWithOptions(request: GetFileTypeStatisticRequest, runtime: Util.RuntimeOptions): GetFileTypeStatisticResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetFileTypeStatistic',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFileTypeStatistic(request: GetFileTypeStatisticRequest): GetFileTypeStatisticResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFileTypeStatisticWithOptions(request, runtime);
}

model GetFileVersionRequest {
  fileId?: long(name='FileId', description='The ID of the file. You can call the [ListFiles](~~173942~~) operation to query the ID.', example='1000001'),
  fileVersion?: int32(name='FileVersion', description='The file version whose details you want to query.', example='2'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can click the Workspace Manage icon in the upper-right corner of the DataStudio page to go to the Workspace Management page and view the workspace ID.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The unique identifier of the DataWorks workspace. You can click the identifier in the upper-left corner of the DataStudio page to switch to another workspace.

You must specify either this parameter or ProjectId to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model GetFileVersionResponseBody = {
  data?: {
    changeType?: string(name='ChangeType', description='The change type of the file version. Valid values: CREATE, UPDATE, and DELETE.', example='UPDATE'),
    comment?: string(name='Comment', description='The description of the file version.'),
    commitTime?: long(name='CommitTime', description='The time when the version was generated. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1593881265000'),
    commitUser?: string(name='CommitUser', description='The ID of the Alibaba Cloud account that is used to create the file version.', example='7384234****'),
    fileContent?: string(name='FileContent', description='The file code.', example='SHOW TABLES;'),
    fileName?: string(name='FileName', description='The file name.', example='ods_user_info_d'),
    filePropertyContent?: string(name='FilePropertyContent', description='The basic information about the file.', example='{"fileName":"ods_user_info_d","fileType":10}'),
    fileVersion?: int32(name='FileVersion', description='The file version.', example='2'),
    isCurrentProd?: boolean(name='IsCurrentProd', description='Indicates whether the version is the latest version in the production environment.', example='true'),
    nodeContent?: string(name='NodeContent', description='The scheduling configurations of the node that corresponds to the file version.', example='{"cycleType":0,"cronExpress":"00 05 00 * * ?"}'),
    nodeId?: long(name='NodeId', description='The ID of the node that corresponds to the file version.', example='3000001'),
    status?: string(name='Status', description='The status of the file version. Valid values: COMMITTING, COMMITTED, CHECK_OK, PACKAGED, DEPLOYING, DEPLOYED, and CANCELLED. The value CHECK_OK is equivalent to the value COMMITTED.', example='COMMITTED'),
    useType?: string(name='UseType', description='The functional module to which the file belongs. Valid values: NORMAL, MANUAL, MANUAL_BIZ, SKIP, ADHOCQUERY, and COMPONENT. The value NORMAL indicates DataStudio. The value MANUAL indicates a manually triggered node. The value MANUAL_BIZ indicates a manually triggered workflow. The value SKIP indicates a dry-run DataStudio node. The value ADHOCQUERY indicates an ad hoc query. The value COMPONENT indicates snippets.', example='NORMAL'),
  }(name='Data', description='The details of the file version.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can troubleshoot issues based on the ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetFileVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFileVersionResponseBody(name='body'),
}

async function getFileVersionWithOptions(request: GetFileVersionRequest, runtime: Util.RuntimeOptions): GetFileVersionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.fileVersion)) {
    body['FileVersion'] = request.fileVersion;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetFileVersion',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFileVersion(request: GetFileVersionRequest): GetFileVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFileVersionWithOptions(request, runtime);
}

model GetFolderRequest {
  folderId?: string(name='FolderId', description='The ID of the folder. You can call the [ListFolders](~~173955~~) operation to query the ID.

You must specify either this parameter or the FolderPath parameter.', example='273****'),
  folderPath?: string(name='FolderPath', description='The path of the folder. You can call the [ListFolders](~~173955~~) operation to query the path.

You must specify either this parameter or the FolderId parameter.'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the ID. You must specify either this parameter or ProjectIdentifier to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Settings panel to obtain the name. You must specify either this parameter or ProjectId to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model GetFolderResponseBody = {
  data?: {
    folderId?: string(name='FolderId', description='The ID of the folder.', example='2735****'),
    folderPath?: string(name='FolderPath', description='The path of the folder.'),
  }(name='Data', description='The details of the folder.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetFolderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFolderResponseBody(name='body'),
}

async function getFolderWithOptions(request: GetFolderRequest, runtime: Util.RuntimeOptions): GetFolderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderId)) {
    body['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.folderPath)) {
    body['FolderPath'] = request.folderPath;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetFolder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFolder(request: GetFolderRequest): GetFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFolderWithOptions(request, runtime);
}

model GetIDEEventDetailRequest {
  messageId?: string(name='MessageId', description='The ID of the message. You can obtain the ID from the received message when the extension point event is triggered.', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
  projectId?: long(name='ProjectId', description='The ID of the workspace. You can obtain the ID from the message.', example='10000'),
}

model GetIDEEventDetailResponseBody = {
  eventDetail?: {
    committedFile?: {
      changeType?: string(name='ChangeType', description='The type of the change to the file of the current version. Valid values: CREATE, UPDATE, and DELETE.', example='UPDATE'),
      comment?: string(name='Comment', description='The description of the file version.'),
      committor?: string(name='Committor', description='The ID of the Alibaba Cloud account that is used to create the file of the current version.', example='7384234****'),
      content?: string(name='Content', description='The code in the file of the current version.', example='SHOW TABLES;'),
      fileId?: long(name='FileId', description='The ID of the file.', example='1234123'),
      fileName?: string(name='FileName', description='The name of the file.', example='hello_dataworks.sql'),
      filePropertyContent?: {
        businessId?: long(name='BusinessId', description='The ID of the workflow to which the file belongs.', example='74328'),
        currentVersion?: long(name='CurrentVersion', description='The latest version number of the file.', example='1'),
        dataSourceName?: string(name='DataSourceName', description='The name of the compute engine instance with which the file is associated.', example='odps_first'),
        folderId?: string(name='FolderId', description='The ID of the folder to which the file belongs. You can call the [GetFolder](~~173952~~) operation to query the details of the file based on the folder ID.', example='aldurie78l2falure'),
        owner?: string(name='Owner', description='The owner of the file.', example='7384234****'),
        parentFileId?: long(name='ParentFileId', description='The ID of the do-while node or for-each node that corresponds to the file.', example='1234122'),
      }(name='FilePropertyContent', description='The details of the file.'),
      fileType?: long(name='FileType', description='The type of the code in the file. Examples: 6 (Shell), 10 (ODPS SQL), 11 (ODPS MR), 23 (Data Integration), 24 (ODPS Script), 99 (zero load), 221 (PyODPS 2), 225 (ODPS Spark), 227 (EMR Hive), 228 (EMR Spark), 229 (EMR Spark SQL), 230 (EMR MR), 239 (OSS object inspection), 257 (EMR Shell), 258 (EMR Spark Shell), 259 (EMR Presto), 260 (EMR Impala), 900 (real-time sync), 1089 (cross-tenant collaboration), 1091 (Hologres development), 1093 (Hologres SQL), 1100 (assignment), and 1221 (PyODPS 3).', example='10'),
      nodeConfiguration?: {
        autoRerunIntervalMillis?: long(name='AutoRerunIntervalMillis', description='The interval at which the node corresponding to the file is rerun. Unit: milliseconds.', example='120000'),
        autoRerunTimes?: long(name='AutoRerunTimes', description='The number of times that the node corresponding to the file can be rerun.', example='3'),
        cronExpress?: string(name='CronExpress', description='The CRON expression that is used to schedule the node corresponding to the file.', example='00 05 00 * * ?'),
        cycleType?: string(name='CycleType', description='The type of the scheduling cycle of the node that corresponds to the file. Valid values: NOT_DAY and DAY. A value of NOT_DAY indicates that the node is scheduled to run by minute or hour. A value of DAY indicates that the node is scheduled to run by day, week, or month.

This parameter is equivalent to the Scheduling Cycle parameter in the Schedule section of the Properties panel in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='DAY'),
        dependentNodeIdList?: string(name='DependentNodeIdList', description='The IDs of the nodes on which the node corresponding to the file depends when the DependentType parameter is set to USER_DEFINE. Multiple IDs are separated by commas (,).

This parameter is equivalent to the field that appears after Previous Cycle is selected and the Depend On parameter is set to Other Nodes in the Dependencies section of the Properties panel in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='5,10,15,20'),
        dependentType?: string(name='DependentType', description='The type of the cross-cycle scheduling dependency of the node that corresponds to the file. Valid values:

*   SELF: The instance generated for the node in the current cycle depends on the instance generated for the node in the previous cycle.
*   CHILD: The instance generated for the node in the current cycle depends on the instances generated for the descendant nodes at the nearest level of the node in the previous cycle.
*   USER_DEFINE: The instance generated for the node in the current cycle depends on the instances generated for one or more specified nodes in the previous cycle.
*   NONE: No cross-cycle scheduling dependency type is selected for the node.', example='USER_DEFINE'),
        inputList?: [ 
          {
            input?: string(name='Input', description='The output names of the parent files on which the current file depends.

This parameter is equivalent to the Output Name parameter under Parent Nodes in the Dependencies section of the Properties panel in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='dw_project_root'),
            parseType?: string(name='ParseType', description='The mode of the configuration file dependency. Valid values:

*   MANUAL: The scheduling dependencies are manually configured.
*   AUTO: The scheduling dependencies are automatically parsed.', example='MANUAL'),
          }
        ](name='InputList', description='The output names of the parent files on which the current file depends.'),
        outputList?: [ 
          {
            output?: string(name='Output', description='The output name of the current file.

This parameter is equivalent to the Output Name parameter under Output in the Dependencies section of the Properties panel in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='dw_project.002_out'),
            refTableName?: string(name='RefTableName', description='The output table name of the current file.

This parameter is equivalent to the Output Table Name parameter under Output in the Dependencies section of the Properties panel in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='ods_user_info_d'),
          }
        ](name='OutputList', description='The output names of the current file.

This parameter is equivalent to the Output Name parameter under Output in the Dependencies section of the Properties panel in the [DataWorks console](https://workbench.data.aliyun.com/console).'),
        paraValue?: string(name='ParaValue', description='The scheduling parameters.

This parameter is equivalent to the configuration of the scheduling parameters in the Parameters section of the Properties panel in the [DataWorks console](https://workbench.data.aliyun.com/console). For more information, see [Configure scheduling parameters](~~137548~~).', example='a=x b=y'),
        rerunMode?: string(name='RerunMode', description='Indicates whether the node can be rerun. Valid values:

*   ALL_ALLOWED: The node can be rerun regardless of whether it is successfully run or fails to run.
*   FAILURE_ALLOWED: The node can be rerun only after it fails to run.
*   ALL_DENIED: The node cannot be rerun regardless of whether it is successfully run or fails to run.

This parameter is equivalent to the Rerun parameter in the Schedule section of the Properties panel in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='ALL_ALLOWED'),
        resourceGroupId?: long(name='ResourceGroupId', description='The ID of the resource group that is used to run the node that corresponds to the file. You can call the [ListResourceGroups](~~173913~~) operation to query the available resource groups in the workspace.', example='375827434852437'),
        schedulerType?: string(name='SchedulerType', description='The scheduling type of the node. Valid values:

*   NORMAL: The node is an auto triggered node.
*   MANUAL: The node is a manually triggered node. Manually triggered nodes cannot be automatically triggered. They correspond to the nodes in the Manually Triggered Workflows pane.
*   PAUSE: The node is a paused node.
*   SKIP: The node is a dry-run node. Dry-run nodes are started as scheduled but the system sets the status of the nodes to successful when it starts to run them.', example='NORMAL'),
      }(name='NodeConfiguration', description='The scheduling properties of the node that corresponds to the file.'),
      nodeId?: long(name='NodeId', description='The ID of the node that is scheduled.', example='421429'),
      useType?: string(name='UseType', description='The module to which the file belongs. Valid values:

*   NORMAL: The file is used for DataStudio.
*   MANUAL: The file is used for a manually triggered node.
*   MANUAL_BIZ: The file is used for a manually triggered workflow.
*   SKIP: The file is used for a dry-run DataStudio node.
*   ADHOCQUERY: The file is used for an ad hoc query.
*   COMPONENT: The file is used for a snippet.', example='NORMAL'),
    }(name='CommittedFile', description='The data snapshot when the file is committed and deployed.

The value of this parameter is not empty only when the message type is IDE_FILE_SUBMIT_BEFORE or IDE_FILE_DEPLOY_BEFORE.'),
    deletedFile?: {
      businessId?: long(name='BusinessId', description='The ID of the workflow to which the file belongs.', example='74328'),
      content?: string(name='Content', description='The code in the file of the current version.', example='SHOW TABLES;'),
      currentVersion?: long(name='CurrentVersion', description='The latest version number of the file.', example='1'),
      dataSourceName?: string(name='DataSourceName', description='The name of the compute engine instance with which the file is associated.', example='odps_first'),
      fileId?: long(name='FileId', description='The ID of the file.', example='1234123'),
      fileName?: string(name='FileName', description='The name of the file.', example='hello_dataworks.sql'),
      fileType?: long(name='FileType', description='The type of the code in the file. Examples: 6 (Shell), 10 (ODPS SQL), 11 (ODPS MR), 23 (Data Integration), 24 (ODPS Script), 99 (zero load), 221 (PyODPS 2), 225 (ODPS Spark), 227 (EMR Hive), 228 (EMR Spark), 229 (EMR Spark SQL), 230 (EMR MR), 239 (OSS object inspection), 257 (EMR Shell), 258 (EMR Spark Shell), 259 (EMR Presto), 260 (EMR Impala), 900 (real-time sync), 1089 (cross-tenant collaboration), 1091 (Hologres development), 1093 (Hologres SQL), 1100 (assignment), and 1221 (PyODPS 3).', example='10'),
      folderId?: string(name='FolderId', description='The ID of the folder to which the file belongs. You can call the [GetFolder](~~173952~~) operation to query the details of the file based on the folder ID.', example='aldurie78l2falure'),
      nodeId?: long(name='NodeId', description='The ID of the node that is scheduled.', example='421429'),
      owner?: string(name='Owner', description='The owner of the file.', example='7384234****'),
      parentFileId?: long(name='ParentFileId', description='The ID of the do-while node or for-each node that corresponds to the file.', example='1234122'),
      useType?: string(name='UseType', description='The module to which the file belongs. Valid values:

*   NORMAL: The file is used for DataStudio.
*   MANUAL: The file is used for a manually triggered node.
*   MANUAL_BIZ: The file is used for a manually triggered workflow.
*   SKIP: The file is used for a dry-run DataStudio node.
*   ADHOCQUERY: The file is used for an ad hoc query.
*   COMPONENT: The file is used for a snippet.', example='NORMAL'),
    }(name='DeletedFile', description='The data snapshot when the file is deleted. The value of this parameter is not empty only when the message type is IDE_FILE_DELETE_BEFORE.'),
    fileExecutionCommand?: {
      content?: string(name='Content', description='The code in the file of the current version.', example='SHOW TABLES;'),
      dataSourceName?: string(name='DataSourceName', description='The name of the compute engine instance with which the file is associated.', example='odps_first'),
      fileId?: long(name='FileId', description='The ID of the file.', example='1234123'),
      fileType?: long(name='FileType', description='The type of the code in the file. Examples: 6 (Shell), 10 (ODPS SQL), 11 (ODPS MR), 23 (Data Integration), 24 (ODPS Script), 99 (zero load), 221 (PyODPS 2), 225 (ODPS Spark), 227 (EMR Hive), 228 (EMR Spark), 229 (EMR Spark SQL), 230 (EMR MR), 239 (OSS object inspection), 257 (EMR Shell), 258 (EMR Spark Shell), 259 (EMR Presto), 260 (EMR Impala), 900 (real-time sync), 1089 (cross-tenant collaboration), 1091 (Hologres development), 1093 (Hologres SQL), 1100 (assignment), and 1221 (PyODPS 3).', example='10'),
    }(name='FileExecutionCommand', description='The data snapshot when the code in the file is run. The value of this parameter is not empty only when the message type is IDE_FILE_EXECUTE_BEFORE.'),
    tableModel?: {
      columns?: [ 
        {
          columnName?: string(name='ColumnName', description='The name of the column.', example='ID'),
          columnType?: string(name='ColumnType', description='The data type of the column.', example='BIGINT'),
          comment?: string(name='Comment', description='The remarks of the column.', example='ID'),
          isPartitionColumn?: boolean(name='IsPartitionColumn', description='Indicates whether the column is a partition key column. Valid values:

- true: The column is a partition key column.
- false: The column is not a partition key column.', example='false'),
        }
      ](name='Columns', description='The columns in the table.'),
      comment?: string(name='Comment', description='The description of the table.'),
      dataSourceName?: string(name='DataSourceName', description='The name of the compute engine instance to which the table belongs.', example='odps_first'),
      env?: string(name='Env', description='The environment in which the table is used. Valid values:

- DEV: development environment
- PROD: production environment', example='DEV'),
      lifeCycle?: long(name='LifeCycle', description='The lifecycle of the table. Unit: days.', example='7'),
      location?: string(name='Location', description='The path of the table.', example='hdfs://path/to/object'),
      tableName?: string(name='TableName', description='The name of the table.', example='tb_hello'),
    }(name='TableModel', description='The data snapshot when the table is committed and deployed. The value of this parameter is not empty only when the message type is IDE_TABLE_SUBMIT_BEFORE or IDE_TABLE_DEPLOY_BEFORE.'),
  }(name='EventDetail', description='The data snapshot that is generated when the extension point event is triggered.

The fields contained in data snapshots vary based on the types of the triggered extension point events. For more information, see the description of the fields.'),
  requestId?: string(name='RequestId', description='The ID of the request. You can troubleshoot errors based on the ID.', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
}

model GetIDEEventDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetIDEEventDetailResponseBody(name='body'),
}

async function getIDEEventDetailWithOptions(request: GetIDEEventDetailRequest, runtime: Util.RuntimeOptions): GetIDEEventDetailResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.messageId)) {
    body['MessageId'] = request.messageId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetIDEEventDetail',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getIDEEventDetail(request: GetIDEEventDetailRequest): GetIDEEventDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getIDEEventDetailWithOptions(request, runtime);
}

model GetInstanceRequest {
  instanceId?: long(name='InstanceId', description='The ID of the instance. You can call the [ListInstances](~~173982~~) operation to query the ID.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV. The value PROD indicates the production environment, and the value DEV indicates the development environment.', example='PROD'),
}

model GetInstanceResponseBody = {
  data?: {
    baselineId?: long(name='BaselineId', description='The ID of the baseline.', example='123123'),
    beginRunningTime?: long(name='BeginRunningTime', description='The time when the instance started to run.', example='1590416703313'),
    beginWaitResTime?: long(name='BeginWaitResTime', description='The time when the instance started to wait for resources.', example='1590416703313'),
    beginWaitTimeTime?: long(name='BeginWaitTimeTime', description='The time when the instance started to wait to be run.', example='1590416703313'),
    bizdate?: long(name='Bizdate', description='The data timestamp. In most cases, the value is one day before the date when the instance is run.', example='1590336000000'),
    businessId?: long(name='BusinessId', description='The ID of the workflow.', example='123'),
    connection?: string(name='Connection', description='The connection string.', example='odps_first'),
    createTime?: long(name='CreateTime', description='The time when the instance was generated.', example='1590416703313'),
    createUser?: string(name='CreateUser', description='The owner of the instance.', example='111'),
    cycTime?: long(name='CycTime', description='The scheduled time of the instance.', example='1590422400000'),
    dagId?: long(name='DagId', description='The ID of the workflow.', example='338450167'),
    dagType?: string(name='DagType', description='The type of the workflow. Valid values:

*   DAILY: The workflow is used to run auto triggered nodes.
*   MANUAL: The workflow is used to run manually triggered nodes.
*   SMOKE_TEST: The workflow is used to perform smoke testing.
*   SUPPLY_DATA: The workflow is used to backfill data.', example='DAILY'),
    dqcDescription?: string(name='DqcDescription', description='The table and partition filter expression in Data Quality that are associated with the instance.', example='[{"projectName":"ztjy_dim","tableName":"dim_user_agent_manage_area_a","partition":"ds\\u003d$[yyyy-mm-dd-1]"}]'),
    dqcType?: int32(name='DqcType', description='Indicates whether the instance is associated with a monitoring rule in Data Quality. Valid values:

*   0: The instance is associated with a monitoring rule in Data Quality.
*   1: The instance is not associated with a monitoring rule in Data Quality.', example='1'),
    finishTime?: long(name='FinishTime', description='The time when the running of the instance was complete.', example='1590416703313'),
    instanceId?: long(name='InstanceId', description='The ID of the instance.', example='11713307578'),
    modifyTime?: long(name='ModifyTime', description='The time when the instance was last modified.', example='1590416703313'),
    nodeId?: long(name='NodeId', description='The ID of the node that generates the instance.', example='33115'),
    nodeName?: string(name='NodeName', description='The name of the node that generates the instance.', example='kzh'),
    paramValues?: string(name='ParamValues', description='The values of the parameters related to the node.', example='bizdate=$bizdate tbods=$tbods tbdw=$tbdw tbpmic=$tbpmic tbpidx=$tbpidx tbptcif=$tbptcif'),
    priority?: int32(name='Priority', description='The priority of the instance. Valid values: 1, 3, 5, 7, and 8. A great value indicates a high priority. Default value: 1.', example='1'),
    relatedFlowId?: long(name='RelatedFlowId', description='The ID of the workflow to which the node that generates the instance belongs.', example='123123'),
    repeatInterval?: long(name='RepeatInterval', description='The interval at which the node that generates the instance is rerun after the node fails to run. Unit: milliseconds.', example='60000'),
    repeatability?: boolean(name='Repeatability', description='Indicates whether the node that generates the instance can be rerun.', example='true'),
    status?: string(name='Status', description='The status of the node that generates the instance. Valid values:

*   NOT_RUN: The node is not run.
*   WAIT_TIME: The node is waiting for its scheduled time to arrive.
*   WAIT_RESOURCE: The node is waiting for resources.
*   RUNNING: The node is running.
*   CHECKING: Data quality is being checked for the node.
*   CHECKING_CONDITION: Branch conditions are being checked for the node.
*   FAILURE: The node fails to run.
*   SUCCESS: The node is successfully run.', example='NOT_RUN'),
    taskRerunTime?: int32(name='TaskRerunTime', description='The number of times the node that generates the instance can be rerun. This parameter can be left empty, or the value of this parameter can be an integer that is greater than or equal to 0.

*   If this parameter is left empty, the number of rerun times is not specified for the node.
*   If the value of this parameter is 0, the node cannot be rerun.
*   If the value of this parameter is n (an integer that is greater than 0), the node can be rerun n times. For example, if the value of this parameter is 1, the node can be rerun once. If the value of this parameter is 2, the node can be rerun two times, and so on.', example='0'),
    taskType?: string(name='TaskType', description='The scheduling type of the node that generates the instance. Valid values:

*   NORMAL(0): The node is an auto triggered node. It is run on a regular basis.
*   MANUAL(1): The node is a manually triggered node. It is not run on a regular basis.
*   PAUSE(2): The node is a frozen node. The scheduling system still runs the node on a regular basis but sets it to FAILURE when the scheduling system starts to run the node.
*   SKIP(3): The node is a dry-run node. The scheduling system still runs the node on a regular basis but sets it to SUCCESS when the scheduling system starts to run the node.
*   SKIP_UNCHOOSE(4): The node is an unselected node in a temporary workflow. This type of node exists only in temporary workflows. The scheduling system sets the node to SUCCESS when the scheduling system starts to run the node.
*   SKIP_CYCLE(5): The node is a node that is scheduled by week or month and is waiting for its scheduled time. The scheduling system still runs the node on a regular basis but sets it to SUCCESS when the scheduling system starts to run the node.
*   CONDITION_UNCHOOSE(6): The node is not selected by its ancestor branch node and is run as a dry-run node.
*   REALTIME_DEPRECATED(7): The node has instances generated in real time but deprecated. The scheduling system directly sets the node to SUCCESS.', example='NORMAL(0)'),
  }(name='Data', description='The details about the instance.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='0'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned because the instance fails to be scheduled.', example='test'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can locate logs and troubleshoot issues based on the ID.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstanceWithOptions(request: GetInstanceRequest, runtime: Util.RuntimeOptions): GetInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceWithOptions(request, runtime);
}

model GetInstanceConsumeTimeRankRequest {
  bizdate?: string(name='Bizdate', example='2020-09-21T00:00:00+0800'),
  projectId?: long(name='ProjectId', example='100000'),
}

model GetInstanceConsumeTimeRankResponseBody = {
  instanceConsumeTimeRank?: {
    consumeTimeRank?: [ 
      {
        bizdate?: long(name='Bizdate', example='1600963200000'),
        consumed?: long(name='Consumed', example='1000'),
        instanceId?: long(name='InstanceId', example='95279527'),
        nodeId?: long(name='NodeId', example='9527'),
        nodeName?: string(name='NodeName'),
        owner?: string(name='Owner', example='952795279527'),
        prgType?: int32(name='PrgType', example='10'),
      }
    ](name='ConsumeTimeRank'),
    updateTime?: long(name='UpdateTime', example='1600963200000'),
  }(name='InstanceConsumeTimeRank'),
  requestId?: string(name='RequestId', example='6347364dadsfadf****'),
}

model GetInstanceConsumeTimeRankResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceConsumeTimeRankResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request GetInstanceConsumeTimeRankRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetInstanceConsumeTimeRankResponse
 */
// Deprecated
async function getInstanceConsumeTimeRankWithOptions(request: GetInstanceConsumeTimeRankRequest, runtime: Util.RuntimeOptions): GetInstanceConsumeTimeRankResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceConsumeTimeRank',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request GetInstanceConsumeTimeRankRequest
  * @return GetInstanceConsumeTimeRankResponse
 */
// Deprecated
async function getInstanceConsumeTimeRank(request: GetInstanceConsumeTimeRankRequest): GetInstanceConsumeTimeRankResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceConsumeTimeRankWithOptions(request, runtime);
}

model GetInstanceCountTrendRequest {
  beginDate?: string(name='BeginDate', example='2020-04-02T00:00:00+0800'),
  endDate?: string(name='EndDate', example='2020-09-10T00:00:00+0800'),
  projectId?: long(name='ProjectId', example='10000'),
}

model GetInstanceCountTrendResponseBody = {
  instanceCounts?: [ 
    {
      count?: int32(name='Count', example='9527'),
      date?: long(name='Date', example='1600963200000'),
    }
  ](name='InstanceCounts'),
  requestId?: string(name='RequestId', example='95279527adhfj****'),
}

model GetInstanceCountTrendResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceCountTrendResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request GetInstanceCountTrendRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetInstanceCountTrendResponse
 */
// Deprecated
async function getInstanceCountTrendWithOptions(request: GetInstanceCountTrendRequest, runtime: Util.RuntimeOptions): GetInstanceCountTrendResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.beginDate)) {
    body['BeginDate'] = request.beginDate;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceCountTrend',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request GetInstanceCountTrendRequest
  * @return GetInstanceCountTrendResponse
 */
// Deprecated
async function getInstanceCountTrend(request: GetInstanceCountTrendRequest): GetInstanceCountTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceCountTrendWithOptions(request, runtime);
}

model GetInstanceErrorRankRequest {
  projectId?: long(name='ProjectId', example='9527'),
}

model GetInstanceErrorRankResponseBody = {
  instanceErrorRank?: {
    errorRank?: [ 
      {
        count?: int32(name='Count', example='5'),
        nodeId?: long(name='NodeId', example='9527'),
        nodeName?: string(name='NodeName'),
        owner?: string(name='Owner', example='952795279527'),
        prgType?: int32(name='PrgType', example='10'),
        projectId?: long(name='ProjectId', example='9527'),
      }
    ](name='ErrorRank'),
    updateTime?: long(name='UpdateTime', example='1600963200000'),
  }(name='InstanceErrorRank'),
  requestId?: string(name='RequestId', example='952795279527****'),
}

model GetInstanceErrorRankResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceErrorRankResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request GetInstanceErrorRankRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetInstanceErrorRankResponse
 */
// Deprecated
async function getInstanceErrorRankWithOptions(request: GetInstanceErrorRankRequest, runtime: Util.RuntimeOptions): GetInstanceErrorRankResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceErrorRank',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request GetInstanceErrorRankRequest
  * @return GetInstanceErrorRankResponse
 */
// Deprecated
async function getInstanceErrorRank(request: GetInstanceErrorRankRequest): GetInstanceErrorRankResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceErrorRankWithOptions(request, runtime);
}

model GetInstanceLogRequest {
  instanceHistoryId?: long(name='InstanceHistoryId', description='The historical record number of the instance. You can call the ListInstanceHistory operation to query the ID.', example='1'),
  instanceId?: long(name='InstanceId', description='The ID of the instance.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV.', example='PROD'),
}

model GetInstanceLogResponseBody = {
  data?: string(name='Data', description='The content of the logs.', example='log_content'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can locate logs and troubleshoot issues based on the ID.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetInstanceLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceLogResponseBody(name='body'),
}

/**
  * You may not obtain the instance logs that were generated more than seven days ago.
  *
  * @param request GetInstanceLogRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetInstanceLogResponse
 */
async function getInstanceLogWithOptions(request: GetInstanceLogRequest, runtime: Util.RuntimeOptions): GetInstanceLogResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceHistoryId)) {
    body['InstanceHistoryId'] = request.instanceHistoryId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceLog',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You may not obtain the instance logs that were generated more than seven days ago.
  *
  * @param request GetInstanceLogRequest
  * @return GetInstanceLogResponse
 */
async function getInstanceLog(request: GetInstanceLogRequest): GetInstanceLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceLogWithOptions(request, runtime);
}

model GetInstanceStatusCountRequest {
  bizDate?: string(name='BizDate', description='The business date of the instance.', example='2020-01-01'),
  projectEnv?: string(name='ProjectEnv', description='The running environment in PROD and DEV modes.', example='PROD'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.', example='1234'),
}

model GetInstanceStatusCountResponseBody = {
  requestId?: string(name='RequestId', description='The request ID, which is used to locate the logs and troubleshoot problems.', example='0000-ABCD-EFG****'),
  statusCount?: {
    failureCount?: int32(name='FailureCount', description='The number of failed instances.', example='1'),
    notRunCount?: int32(name='NotRunCount', description='The number of instances that are not running.', example='1'),
    runningCount?: int32(name='RunningCount', description='The number of running instances.', example='1'),
    successCount?: int32(name='SuccessCount', description='The number of successful instances.', example='1'),
    totalCount?: int32(name='TotalCount', description='The total number of instances.', example='1'),
    waitResCount?: int32(name='WaitResCount', description='The number of instances waiting for resources.', example='1'),
    waitTimeCount?: int32(name='WaitTimeCount', description='The number of instances to be run that meet the conditions.', example='1'),
  }(name='StatusCount', description='The status statistics of the instance.'),
}

model GetInstanceStatusCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceStatusCountResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request GetInstanceStatusCountRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetInstanceStatusCountResponse
 */
// Deprecated
async function getInstanceStatusCountWithOptions(request: GetInstanceStatusCountRequest, runtime: Util.RuntimeOptions): GetInstanceStatusCountResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizDate)) {
    body['BizDate'] = request.bizDate;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceStatusCount',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request GetInstanceStatusCountRequest
  * @return GetInstanceStatusCountResponse
 */
// Deprecated
async function getInstanceStatusCount(request: GetInstanceStatusCountRequest): GetInstanceStatusCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceStatusCountWithOptions(request, runtime);
}

model GetInstanceStatusStatisticRequest {
  bizDate?: string(name='BizDate', description='The date on which the numbers of instances in different states are obtained. Specify the date in the yyyy-MM-dd format.', example='2020-01-01'),
  dagType?: string(name='DagType', description='The type of the directed acyclic graph (DAG). Valid values:

*   MANUAL: DAG for a manually triggered workflow
*   SMOKE_TEST: DAG for a smoke testing workflow
*   SUPPLY_DATA: DAG for a data backfill instance
*   BUSINESS_PROCESS_DAG: DAG for a one-time workflow', example='MANUAL'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV. The value PROD indicates the production environment. The value DEV indicates the development environment.', example='PROD'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the workspace ID.', example='1234'),
  schedulerType?: string(name='SchedulerType', description='The scheduling type of the node. Valid values:

*   NORMAL: auto triggered node
*   MANUAL: manually triggered node
*   PAUSE: paused node
*   SKIP: dry-run node', example='NORMAL'),
}

model GetInstanceStatusStatisticResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to search for logs and troubleshoot issues based on the logs.', example='0000-ABCD-EFG****'),
  statusCount?: {
    failureCount?: int32(name='FailureCount', description='The number of instances that failed to run.', example='1'),
    notRunCount?: int32(name='NotRunCount', description='The number of instances that are not run.', example='1'),
    runningCount?: int32(name='RunningCount', description='The number of instances that are running.', example='1'),
    successCount?: int32(name='SuccessCount', description='The number of instances that are successfully run.', example='1'),
    totalCount?: int32(name='TotalCount', description='The total number of instances.', example='1'),
    waitResCount?: int32(name='WaitResCount', description='The number of instances that are waiting for resources.', example='1'),
    waitTimeCount?: int32(name='WaitTimeCount', description='The number of instances that are waiting to run.', example='1'),
  }(name='StatusCount', description='The numbers of instances in different states.'),
}

model GetInstanceStatusStatisticResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceStatusStatisticResponseBody(name='body'),
}

async function getInstanceStatusStatisticWithOptions(request: GetInstanceStatusStatisticRequest, runtime: Util.RuntimeOptions): GetInstanceStatusStatisticResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizDate)) {
    body['BizDate'] = request.bizDate;
  }
  if (!Util.isUnset(request.dagType)) {
    body['DagType'] = request.dagType;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.schedulerType)) {
    body['SchedulerType'] = request.schedulerType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceStatusStatistic',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstanceStatusStatistic(request: GetInstanceStatusStatisticRequest): GetInstanceStatusStatisticResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceStatusStatisticWithOptions(request, runtime);
}

model GetManualDagInstancesRequest {
  dagId?: string(name='DagId', example='7000001231241'),
  projectEnv?: string(name='ProjectEnv', example='RPOD'),
  projectName?: string(name='ProjectName', example='test_workspace'),
}

model GetManualDagInstancesResponseBody = {
  instances?: [ 
    {
      beginRunningTime?: long(name='BeginRunningTime', example='1605178414676'),
      beginWaitResTime?: long(name='BeginWaitResTime', example='1605178414676'),
      beginWaitTimeTime?: long(name='BeginWaitTimeTime', example='1605178414676'),
      bizDate?: long(name='BizDate', example='1605178414676'),
      createTime?: long(name='CreateTime', example='1605178414676'),
      createUser?: string(name='CreateUser', example='xxx'),
      cycTime?: long(name='CycTime', example='1605178414676'),
      dagId?: long(name='DagId', example='350850491'),
      dagType?: string(name='DagType', example='5'),
      finishTime?: long(name='FinishTime', example='1605178414676'),
      instanceId?: long(name='InstanceId', example='11726873619'),
      modifyTime?: long(name='ModifyTime', example='1605178414676'),
      nodeId?: long(name='NodeId', example='37851'),
      nodeName?: string(name='NodeName', example='test2'),
      paramValues?: string(name='ParamValues', example='xxx'),
      status?: string(name='Status', example='WAIT_TIME'),
      taskType?: string(name='TaskType', example='NORMAL(0)'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId', example='SDFSDFSDF-SDFSDF-SDFDSF-SDFSDF'),
}

model GetManualDagInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetManualDagInstancesResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request GetManualDagInstancesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetManualDagInstancesResponse
 */
// Deprecated
async function getManualDagInstancesWithOptions(request: GetManualDagInstancesRequest, runtime: Util.RuntimeOptions): GetManualDagInstancesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.dagId)) {
    body['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetManualDagInstances',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request GetManualDagInstancesRequest
  * @return GetManualDagInstancesResponse
 */
// Deprecated
async function getManualDagInstances(request: GetManualDagInstancesRequest): GetManualDagInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getManualDagInstancesWithOptions(request, runtime);
}

model GetMetaCategoryRequest {
  pageNum?: int32(name='PageNum', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='10'),
  parentCategoryId?: long(name='ParentCategoryId', description='The ID of the category tree.', example='333'),
}

model GetMetaCategoryResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        categoryId?: long(name='CategoryId', description='The ID of the category.', example='133'),
        comment?: string(name='Comment', description='The remarks of the category.', example='category 1'),
        createTime?: long(name='CreateTime', description='The time when the category was created.', example='1541576644000'),
        depth?: int32(name='Depth', description='The number of category levels.', example='1'),
        lastOperatorId?: string(name='LastOperatorId', description='The ID of the user that performed the last operation.', example='12345'),
        modifiedTime?: long(name='ModifiedTime', description='The time when the category was last modified.', example='1541576644000'),
        name?: string(name='Name', description='The name of the category.', example='category 1'),
        ownerId?: string(name='OwnerId', description='The ID of the category owner.', example='123'),
        parentCategoryId?: long(name='ParentCategoryId', description='The ID of the parent category.', example='12'),
      }
    ](name='DataEntityList', description='The information about the category tree.'),
    pageNum?: int32(name='PageNum', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: 10. Maximum value: 100.', example='10'),
    totalCount?: long(name='TotalCount', description='The total number of categories.', example='10'),
  }(name='Data', description='The returned result.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetMetaCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaCategoryResponseBody(name='body'),
}

async function getMetaCategoryWithOptions(request: GetMetaCategoryRequest, runtime: Util.RuntimeOptions): GetMetaCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentCategoryId)) {
    query['ParentCategoryId'] = request.parentCategoryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaCategory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaCategory(request: GetMetaCategoryRequest): GetMetaCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaCategoryWithOptions(request, runtime);
}

model GetMetaCollectionDetailRequest {
  qualifiedName?: string(name='QualifiedName', description='The unique identifier of the collection.', example='album.12345'),
}

model GetMetaCollectionDetailResponseBody = {
  collection?: Collection(name='Collection', description='The collection.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='9999'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='album.xxxx does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0000-ABCD-E****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

true: The request was successful.

false: The request failed.', example='true'),
}

model GetMetaCollectionDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaCollectionDetailResponseBody(name='body'),
}

async function getMetaCollectionDetailWithOptions(request: GetMetaCollectionDetailRequest, runtime: Util.RuntimeOptions): GetMetaCollectionDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.qualifiedName)) {
    query['QualifiedName'] = request.qualifiedName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaCollectionDetail',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaCollectionDetail(request: GetMetaCollectionDetailRequest): GetMetaCollectionDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaCollectionDetailWithOptions(request, runtime);
}

model GetMetaColumnLineageRequest {
  clusterId?: string(name='ClusterId', description='The ID of the E-MapReduce (EMR) cluster. Configure this parameter only when you query data in an EMR compute engine instance.', example='abc'),
  columnGuid?: string(name='ColumnGuid', description='The GUID of the field.', example='odps.engine_name.table_name.column_name'),
  columnName?: string(name='ColumnName', description='The name of the field.', example='abc'),
  dataSourceType?: string(name='DataSourceType', description='The type of the data source. Valid values: odps and emr.', example='emr'),
  databaseName?: string(name='DatabaseName', description='The name of the database.', example='abc'),
  direction?: string(name='Direction', description='Specifies whether to query the ancestor or descendant lineage of the field. The value up indicates the ancestor lineage. The value down indicates the descendant lineage.', example='up'),
  pageNum?: int32(name='PageNum', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='10'),
  tableName?: string(name='TableName', description='The name of the metatable.', example='abc'),
}

model GetMetaColumnLineageResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        clusterId?: string(name='ClusterId', description='The ID of the EMR cluster.', example='abc'),
        columnGuid?: string(name='ColumnGuid', description='The GUID of the field.', example='odps.engine_name.table_name.1'),
        columnName?: string(name='ColumnName', description='The name of the field.', example='1'),
        databaseName?: string(name='DatabaseName', description='The name of the database.', example='abc'),
        tableName?: string(name='TableName', description='The name of the metatable.', example='abc'),
      }
    ](name='DataEntityList', description='The list of metatables in the compute engine instance.'),
    pageNum?: int32(name='PageNum', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: 10. Maximum value: 100.', example='10'),
    totalCount?: long(name='TotalCount', description='The total number of fields.', example='20'),
  }(name='Data', description='The business data returned.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetMetaColumnLineageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaColumnLineageResponseBody(name='body'),
}

async function getMetaColumnLineageWithOptions(request: GetMetaColumnLineageRequest, runtime: Util.RuntimeOptions): GetMetaColumnLineageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.columnGuid)) {
    query['ColumnGuid'] = request.columnGuid;
  }
  if (!Util.isUnset(request.columnName)) {
    query['ColumnName'] = request.columnName;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaColumnLineage',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaColumnLineage(request: GetMetaColumnLineageRequest): GetMetaColumnLineageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaColumnLineageWithOptions(request, runtime);
}

model GetMetaDBInfoRequest {
  appGuid?: string(name='AppGuid', description='The ID of the request.', example='odps.some_engine_name'),
  clusterId?: string(name='ClusterId', description='The business data returned.', example='abc'),
  dataSourceType?: string(name='DataSourceType', description='The comment.', example='emr'),
  databaseName?: string(name='DatabaseName', description='The type of the metadatabase. Only hive is supported.', example='abc'),
}

model GetMetaDBInfoResponseBody = {
  data?: {
    appGuid?: string(name='AppGuid', description='The display name of the workspace.', example='odps.engine_name'),
    clusterBizId?: string(name='ClusterBizId', description='The time when the compute engine instance was modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='abc'),
    comment?: string(name='Comment', description='The name of the workspace.', example='The ID of the compute engine instance. The ID is in the Engine type.Engine name format.'),
    createTime?: long(name='CreateTime', description='The name of the workspace owner.', example='1541576644000'),
    endpoint?: string(name='Endpoint', description='The ID of the tenant.', example='http://service.odpsstg.aliyun-inc.com/'),
    envType?: int32(name='EnvType', description='The ID of the EMR cluster. This parameter is returned only for an EMR compute engine instance.', example='1'),
    location?: string(name='Location', example='hdfs://'),
    modifyTime?: long(name='ModifyTime', example='1541576644000'),
    name?: string(name='Name', example='abc'),
    ownerId?: string(name='OwnerId', description='The endpoint of the service.', example='23'),
    ownerName?: string(name='OwnerName', description='Test items', example='323'),
    projectId?: long(name='ProjectId', description='The ID of the Alibaba Cloud account used by the workspace owner.', example='22'),
    projectName?: string(name='ProjectName', description='The type of the environment. Valid values: 0 and 1. The value 0 indicates the development environment. The value 1 indicates the production environment.', example='test'),
    projectNameCn?: string(name='ProjectNameCn', description='The name of the metadatabase.', example='The storage path of the metadatabase of the EMR cluster.'),
    tenantId?: long(name='TenantId', example='233'),
    type?: string(name='Type', description='The ID of the workspace.', example='hive'),
  }(name='Data', description='The time when the compute engine instance was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.'),
  requestId?: string(name='RequestId', description='test table', example='0bc1411515937****'),
}

model GetMetaDBInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaDBInfoResponseBody(name='body'),
}

/**
  * The ID of the EMR cluster. This parameter is required only if you set the DataSourceType parameter to emr.
  * You can log on to the [EMR console](https://emr.console.aliyun.com/?spm=a2c4g.11186623.0.0.965cc5c2GeiHet#/cn-hangzhou) to obtain the ID of the EMR cluster.
  *
  * @param request GetMetaDBInfoRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetMetaDBInfoResponse
 */
async function getMetaDBInfoWithOptions(request: GetMetaDBInfoRequest, runtime: Util.RuntimeOptions): GetMetaDBInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaDBInfo',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the EMR cluster. This parameter is required only if you set the DataSourceType parameter to emr.
  * You can log on to the [EMR console](https://emr.console.aliyun.com/?spm=a2c4g.11186623.0.0.965cc5c2GeiHet#/cn-hangzhou) to obtain the ID of the EMR cluster.
  *
  * @param request GetMetaDBInfoRequest
  * @return GetMetaDBInfoResponse
 */
async function getMetaDBInfo(request: GetMetaDBInfoRequest): GetMetaDBInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaDBInfoWithOptions(request, runtime);
}

model GetMetaDBTableListRequest {
  appGuid?: string(name='AppGuid', description='The name of the metadatabase.', example='odps.testProjectName'),
  clusterId?: string(name='ClusterId', description='The type of the data source. Valid values: odps and emr.', example='abc'),
  dataSourceType?: string(name='DataSourceType', description='The business data.', example='odps'),
  databaseName?: string(name='DatabaseName', description='The ID of the request.', example='abc'),
  pageNumber?: int32(name='PageNumber', description='The globally unique identifier (GUID) of the MaxCompute project. Specify the GUID in the `odps.{projectName}` format. This parameter must be configured if you set the DataSourceType parameter to odps.', example='1'),
  pageSize?: int32(name='PageSize', description='The ID of the E-MapReduce (EMR) cluster. This parameter must be configured if you set the DataSourceType parameter to emr.', example='10'),
}

model GetMetaDBTableListResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', description='The total number of compute engine instances.', example='1'),
    pageSize?: int32(name='PageSize', description='The list of metatables in the compute engine instance.', example='10'),
    tableEntityList?: [ 
      {
        databaseName?: string(name='DatabaseName', example='abc'),
        tableGuid?: string(name='TableGuid', example='odps.engine_name.tname'),
        tableName?: string(name='TableName', description='The name of the metadatabase.', example='tname'),
      }
    ](name='TableEntityList', description='The GUID of the metatable.'),
    totalCount?: long(name='TotalCount', description='The name of the metatable.', example='20'),
  }(name='Data', description='The number of entries returned per page. Default value: 10. Maximum value: 100.'),
  requestId?: string(name='RequestId', description='The page number of the returned page.', example='0bc1ec92159376'),
}

model GetMetaDBTableListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaDBTableListResponseBody(name='body'),
}

async function getMetaDBTableListWithOptions(request: GetMetaDBTableListRequest, runtime: Util.RuntimeOptions): GetMetaDBTableListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appGuid)) {
    query['AppGuid'] = request.appGuid;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaDBTableList',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaDBTableList(request: GetMetaDBTableListRequest): GetMetaDBTableListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaDBTableListWithOptions(request, runtime);
}

model GetMetaTableBasicInfoRequest {
  clusterId?: string(name='ClusterId', description='The name of the metatable in the EMR cluster. This parameter is required only if you set the DataSourceType parameter to emr.

You can call the [GetMetaDBTableList](~~173916~~) operation to query the name of the metatable.', example='abc'),
  dataSourceType?: string(name='DataSourceType', description='The HTTP status code returned.', example='emr'),
  databaseName?: string(name='DatabaseName', description='The type of the data source. Valid values: odps and emr.', example='abc'),
  extension?: boolean(name='Extension', description='The error message returned.', example='false'),
  tableGuid?: string(name='TableGuid', description='The name of the metadatabase. This parameter is required only if you set the DataSourceType parameter to emr.

You can call the [ListMetaDB](~~185662~~) operation to query the name of the metadatabase.', example='odps.engine_name.table_name'),
  tableName?: string(name='TableName', description='Specifies whether to include extended fields in query results.

The extended fields include ReadCount, FavoriteCount, and ViewCount.

This parameter takes effect only if you set the DataSourceType parameter to odps.', example='abc'),
}

model GetMetaTableBasicInfoResponseBody = {
  data?: {
    caption?: string(name='Caption', description='The schema information of the metatable. This parameter is returned only if you enable the table schema in MaxCompute.'),
    clusterId?: string(name='ClusterId', description='Indicates whether the metatable is a view. Valid values:

*   true: The metatable is a view.
*   false: The metatable is not a view.', example='abc'),
    columnCount?: int32(name='ColumnCount', description='The ID of the workspace.', example='3'),
    comment?: string(name='Comment', description='The time when the metatable was created.', example='test table'),
    createTime?: long(name='CreateTime', description='The ID of the metatable owner.', example='1589870294000'),
    dataSize?: long(name='DataSize', description='The time when the schema of the metatable was last changed.', example='10'),
    databaseName?: string(name='DatabaseName', description='The GUID of the metatable.', example='abc'),
    envType?: int32(name='EnvType', description='The scope in which the metatable is visible. Valid values:

*   0: The metatable is visible to workspace members.
*   1: The metatable is visible to users within the tenant.
*   2: The metatable is visible to all tenants.
*   3: The metatable is visible only to the metatable owner.', example='1'),
    favoriteCount?: long(name='FavoriteCount', description='The number of fields.', example='6'),
    isPartitionTable?: boolean(name='IsPartitionTable', description='The lifecycle of the metatable. Unit: days.', example='true'),
    isView?: boolean(name='IsView', description='The name of the workspace.', example='false'),
    isVisible?: int32(name='IsVisible', description='The number of times the metatable was read. This parameter is returned only if you set the Extension parameter to true and takes effect only if you set the DataSourceType parameter to odps.', example='1'),
    lastAccessTime?: long(name='LastAccessTime', description='The time when the metatable was last updated.', example='1589870294000'),
    lastDdlTime?: long(name='LastDdlTime', description='The storage path of the Hive metadatabase.', example='1589870294000'),
    lastModifyTime?: long(name='LastModifyTime', description='The partition key of the Hive metatable.', example='1589870294000'),
    lifeCycle?: int32(name='LifeCycle', description='The number of times the metatable was viewed. This parameter is returned only if you set the Extension parameter to true and takes effect only if you set the DataSourceType parameter to odps.', example='5'),
    location?: string(name='Location', description='The ID of the tenant.', example='hdfs://'),
    ownerId?: string(name='OwnerId', description='The name of the metadatabase.', example='123'),
    partitionKeys?: string(name='PartitionKeys', description='The display name of the metatable.', example='ab'),
    projectId?: long(name='ProjectId', description='The type of the environment. Valid values:

*   0: development environment
*   1: production environment', example='232'),
    projectName?: string(name='ProjectName', description='The time when the metatable was last accessed.', example='test'),
    readCount?: long(name='ReadCount', description='Indicates whether the metatable is a partitioned table. Valid values:

*   true: The metatable is a partitioned table.
*   false: The metatable is a non-partitioned table.', example='3'),
    schema?: string(name='Schema', example='default'),
    tableGuid?: string(name='TableGuid', description='The ID of the EMR cluster.', example='odps.engine_name.table_name'),
    tableName?: string(name='TableName', description='The comment of the metatable.', example='table_name'),
    tenantId?: long(name='TenantId', example='12345'),
    viewCount?: long(name='ViewCount', description='The size of storage space that is occupied by the metatable. Unit: bytes.', example='2'),
  }(name='Data', description='The number of times the metatable was added to a favorite list. This parameter is returned only if you set the Extension parameter to true and takes effect only if you set the DataSourceType parameter to odps.'),
  errorCode?: string(name='ErrorCode', description='The name of the metatable.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='Indicates whether the request was successful.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of the request.', example='200'),
  requestId?: string(name='RequestId', description='The error code returned.', example='0bc1411515937'),
  success?: boolean(name='Success', description='The business data returned.', example='true'),
}

model GetMetaTableBasicInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableBasicInfoResponseBody(name='body'),
}

/**
  * ****
  *
  * @param request GetMetaTableBasicInfoRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetMetaTableBasicInfoResponse
 */
async function getMetaTableBasicInfoWithOptions(request: GetMetaTableBasicInfoRequest, runtime: Util.RuntimeOptions): GetMetaTableBasicInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableBasicInfo',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ****
  *
  * @param request GetMetaTableBasicInfoRequest
  * @return GetMetaTableBasicInfoResponse
 */
async function getMetaTableBasicInfo(request: GetMetaTableBasicInfoRequest): GetMetaTableBasicInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableBasicInfoWithOptions(request, runtime);
}

model GetMetaTableChangeLogRequest {
  changeType?: string(name='ChangeType', description='The beginning of the time range to query. Specify the time in the yyyy-MM-dd HH:mm:ss format.

*   By default, the system uses the current time as the value of this parameter if the time that you specify is invalid.
*   If both the values of the StartDate and EndDate parameters are invalid, the system automatically queries the change logs that are generated within the last 30 days.', example='ALTER_TABLE'),
  endDate?: string(name='EndDate', description='The error message returned.', example='2020-06-02 00:00:00'),
  objectType?: string(name='ObjectType', description='The end of the time range to query. Specify the time in the yyyy-MM-dd HH:mm:ss format.

*   By default, the system uses the current time as the value of this parameter if the time that you specify is invalid.
*   If both the values of the StartDate and EndDate parameters are invalid, the system automatically queries the change logs that are generated within the last 30 days.', example='TABLE'),
  pageNumber?: int32(name='PageNumber', description='The globally unique identifier (GUID) of the table. Specify the GUID in the format of odps.projectName.tableName. You can call the [GetMetaDBTableList](~~173916~~) operation to query the GUID of the table.

>  To query the change logs of a MaxCompute table, you must call the [GetMetaTableChangeLog](~~173925~~) operation.', example='1'),
  pageSize?: int32(name='PageSize', description='The type of the change. Valid values: CREATE_TABLE, ALTER_TABLE, DROP_TABLE, ADD_PARTITION, and DROP_PARTITION.', example='10'),
  startDate?: string(name='StartDate', description='The HTTP status code returned.', example='2020-06-01 00:00:00'),
  tableGuid?: string(name='TableGuid', description='The entity on which the change is made. Valid values: TABLE and PARTITION.', example='odps.engine_name.table_name'),
}

model GetMetaTableChangeLogResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        changeContent?: string(name='ChangeContent', description='The type of the change.', example='"[{\\"action\\":\\"ADD_COLUMN\\",\\"value\\":[{\\"originName\\":\\"\\",\\"originType\\":\\"\\",\\"originComment\\":\\"\\",\\"name\\":\\"id\\",\\"type\\":\\"struct<name:string>\\",\\"comment\\":\\"\\"}]}]",'),
        changeType?: string(name='ChangeType', example='CREATE_TABLE'),
        createTime?: long(name='CreateTime', description='The name of the operator.', example='1590722845000'),
        modifiedTime?: long(name='ModifiedTime', description='The content of the change.', example='1590722845000'),
        objectType?: string(name='ObjectType', description='The time when the metatable was created.', example='TABLE'),
        operator?: string(name='Operator', example='abc'),
      }
    ](name='DataEntityList', description='The last time when the metatable was modified.'),
    pageNumber?: int32(name='PageNumber', description='The total number of returned entries.', example='10'),
    pageSize?: int32(name='PageSize', description='The information about the change logs of the metatable.', example='1'),
    totalCount?: long(name='TotalCount', description='The entity on which the change was made. Valid values: TABLE and PARTITION.', example='10'),
  }(name='Data', description='The number of entries returned per page. Default value: 10. Maximum value: 100.'),
  errorCode?: string(name='ErrorCode', description='The page number of the returned page.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='Indicates whether the request is successful.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of the request.', example='200'),
  requestId?: string(name='RequestId', description='The error code returned.', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='The business data returned.', example='true'),
}

model GetMetaTableChangeLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableChangeLogResponseBody(name='body'),
}

async function getMetaTableChangeLogWithOptions(request: GetMetaTableChangeLogRequest, runtime: Util.RuntimeOptions): GetMetaTableChangeLogResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.changeType)) {
    body['ChangeType'] = request.changeType;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.objectType)) {
    body['ObjectType'] = request.objectType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.tableGuid)) {
    body['TableGuid'] = request.tableGuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableChangeLog',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableChangeLog(request: GetMetaTableChangeLogRequest): GetMetaTableChangeLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableChangeLogWithOptions(request, runtime);
}

model GetMetaTableColumnRequest {
  clusterId?: string(name='ClusterId', description='The name of the metatable in the EMR cluster. You can call the [GetMetaDBTableList](~~173916~~) operation to query the name.', example='C-010A704DA760****'),
  dataSourceType?: string(name='DataSourceType', description='The error message.', example='emr'),
  databaseName?: string(name='DatabaseName', description='The type of the data source. Only emr is supported.', example='abc'),
  pageNum?: int32(name='PageNum', description='The ID of the E-MapReduce (EMR) cluster. You can log on to the EMR console to obtain the ID.', example='1'),
  pageSize?: int32(name='PageSize', description='The name of the metadatabase of the EMR cluster. You can call the [ListMetaDB](~~185662~~) operation to query the name.', example='10'),
  tableGuid?: string(name='TableGuid', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='odps.engine_name.table_name'),
  tableName?: string(name='TableName', description='The HTTP status code.', example='abc'),
}

model GetMetaTableColumnResponseBody = {
  data?: {
    columnList?: [ 
      {
        caption?: string(name='Caption', description='The number of times the field is read.', example='data column'),
        columnGuid?: string(name='ColumnGuid', description='Indicates whether the field is a partition field. Valid values:

*   true: The field is a partition field.
*   false: The field is not a partition field.', example='odps.engine_name.table_name.name'),
        columnName?: string(name='ColumnName', description='The remarks of the field.', example='name'),
        columnType?: string(name='ColumnType', description='The ordinal number of the field.', example='string'),
        comment?: string(name='Comment', description='Indicates whether the field is the primary key. Valid values:

*   true: The field is the primary key.
*   false: The field is not the primary key.', example='comment'),
        isForeignKey?: boolean(name='IsForeignKey', example='true'),
        isPartitionColumn?: boolean(name='IsPartitionColumn', description='The data type of the field.', example='false'),
        isPrimaryKey?: boolean(name='IsPrimaryKey', description='The description of the field.', example='false'),
        position?: int32(name='Position', description='Indicates whether the field is a foreign key. Valid values:

*   true: The field is a foreign key.
*   false: The field is not a foreign key.', example='1'),
        relationCount?: long(name='RelationCount', example='2'),
      }
    ](name='ColumnList', description='The name of the field.'),
    pageNum?: int32(name='PageNum', description='The total number of fields.', example='1'),
    pageSize?: int32(name='PageSize', description='The information of fields.', example='10'),
    totalCount?: long(name='TotalCount', description='The GUID of the field.', example='100'),
  }(name='Data', description='The number of entries returned per page. Default value: 10. Maximum value: 100.'),
  errorCode?: string(name='ErrorCode', description='The page number of the returned page.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='Indicates whether the request is successful.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of the request. You can locate logs and troubleshoot issues based on the ID.', example='200'),
  requestId?: string(name='RequestId', description='The error code.', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='The business data.', example='true'),
}

model GetMetaTableColumnResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableColumnResponseBody(name='body'),
}

async function getMetaTableColumnWithOptions(request: GetMetaTableColumnRequest, runtime: Util.RuntimeOptions): GetMetaTableColumnResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableColumn',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableColumn(request: GetMetaTableColumnRequest): GetMetaTableColumnResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableColumnWithOptions(request, runtime);
}

model GetMetaTableFullInfoRequest {
  clusterId?: string(name='ClusterId', description='The ID of the E-MapReduce (EMR) cluster. You can log on to the EMR console to obtain the ID of the cluster.', example='C-010A704DA760****'),
  dataSourceType?: string(name='DataSourceType', description='The type of the data source. Only emr is supported.', example='emr'),
  databaseName?: string(name='DatabaseName', description='The name of the metadatabase of the EMR cluster. You can call the [ListMetaDB](~~185662~~) operation to query the name of the metadatabase.', example='abc'),
  pageNum?: int32(name='PageNum', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='10'),
  tableGuid?: string(name='TableGuid', description='The GUID of the metatable. You can call the [GetMetaDBTableList](~~173916~~) operation to query the GUID of the metatable.', example='odps.engine_name.table_name'),
  tableName?: string(name='TableName', description='The name of the metatable in the EMR cluster. You can call the [GetMetaDBTableList](~~173916~~) operation to query the name of the metatable.', example='abc'),
}

model GetMetaTableFullInfoResponseBody = {
  data?: {
    clusterId?: string(name='ClusterId', description='The ID of the EMR cluster.', example='C-010A704DA760****'),
    columnList?: [ 
      {
        caption?: string(name='Caption', description='The description of the field.', example='data comment'),
        columnGuid?: string(name='ColumnGuid', description='The GUID of the field.', example='odps.engine_name.table_name.1'),
        columnName?: string(name='ColumnName', description='The name of the field.', example='1'),
        columnType?: string(name='ColumnType', description='The data type of the field.', example='string'),
        comment?: string(name='Comment', description='The remarks of the field.', example='comment'),
        isForeignKey?: boolean(name='IsForeignKey', description='Indicates whether the field is a foreign key. Valid values:

*   true: The field is a foreign key.
*   false: The field is not a foreign key.', example='true'),
        isPartitionColumn?: boolean(name='IsPartitionColumn', description='Indicates whether the field is a partition field. Valid values:

*   true: The field is a partition field.
*   false: The field is not a partition field.', example='true'),
        isPrimaryKey?: boolean(name='IsPrimaryKey', description='Indicates whether the field is the primary key. Valid values:

*   true: The field is the primary key.
*   false: The field is not the primary key.', example='false'),
        position?: int32(name='Position', description='The ordinal number of the field.', example='1'),
      }
    ](name='ColumnList', description='The fields in the metatable.'),
    comment?: string(name='Comment', description='The remarks of the metatable.', example='comment'),
    createTime?: long(name='CreateTime', description='The time when the metatable was created. You can convert the timestamp to the related date based on the time zone that you use.', example='1589870293000'),
    dataSize?: long(name='DataSize', description='The amount of storage resources that are consumed by the metatable. Unit: bytes.', example='10'),
    databaseName?: string(name='DatabaseName', description='The name of the database.', example='abc'),
    envType?: int32(name='EnvType', description='The type of the environment in which the metatable resides. Valid values:

*   0: indicates that the metatable resides in the development environment.
*   1: indicates that the metatable resides in the production environment.', example='1'),
    isVisible?: int32(name='IsVisible', description='The scope in which the metatable is visible. Valid values:

*   0: indicates that the metatable is visible to workspace members.
*   1: indicates that the metatable is visible to users within a tenant.
*   2: indicates that the metatable is visible to all tenants.
*   3: indicates that the metatable is visible only to the metatable owner.', example='1'),
    lastAccessTime?: long(name='LastAccessTime', description='The time when the metatable was last accessed. You can convert the timestamp to the related date based on the time zone that you use.', example='1589870294000'),
    lastDdlTime?: long(name='LastDdlTime', description='The time when the schema of the metatable was last changed. You can convert the timestamp to the related date based on the time zone that you use.', example='1589870294000'),
    lastModifyTime?: long(name='LastModifyTime', description='The time when the metatable was last updated. You can convert the timestamp to the related date based on the time zone that you use.', example='1589870294000'),
    lifeCycle?: int32(name='LifeCycle', description='The lifecycle of the metatable. Unit: days.', example='5'),
    location?: string(name='Location', description='The storage path of the Hive metatable.', example='hdfs://localhost:777/user/hadoop/test.txt'),
    ownerId?: string(name='OwnerId', description='The ID of the metatable owner.', example='123'),
    partitionKeys?: string(name='PartitionKeys', description='The partition key.', example='abc'),
    projectId?: long(name='ProjectId', description='The ID of the workspace to which the metatable belongs.', example='22'),
    projectName?: string(name='ProjectName', description='The name of the workspace to which the metatable belongs.', example='test'),
    schema?: string(name='Schema'),
    tableGuid?: string(name='TableGuid', description='The GUID of the metatable.', example='odps.engine_name.table_name'),
    tableName?: string(name='TableName', description='The name of the metatable.', example='table_name'),
    tenantId?: long(name='TenantId', description='The ID of the tenant.', example='12345'),
    totalColumnCount?: long(name='TotalColumnCount', description='The total number of fields.', example='22'),
  }(name='Data', description='The business data returned.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='0bc1411515937****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetMetaTableFullInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableFullInfoResponseBody(name='body'),
}

async function getMetaTableFullInfoWithOptions(request: GetMetaTableFullInfoRequest, runtime: Util.RuntimeOptions): GetMetaTableFullInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableFullInfo',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableFullInfo(request: GetMetaTableFullInfoRequest): GetMetaTableFullInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableFullInfoWithOptions(request, runtime);
}

model GetMetaTableIntroWikiRequest {
  tableGuid?: string(name='TableGuid', description='The GUID of the metatable.', example='odps.engine_name.table_name'),
  wikiVersion?: long(name='WikiVersion', description='The version of the instructions.', example='1'),
}

model GetMetaTableIntroWikiResponseBody = {
  data?: {
    content?: string(name='Content', description='The description of the metatable.', example='\\# Business requirements\\n\\n\\&lt;a name=\\&quot;xiw5n\\&quot;'),
    createTime?: long(name='CreateTime', description='The time when the metatable was created.', example='1584444247000'),
    creator?: string(name='Creator', description='The creator of the metatable.', example='abc'),
    creatorName?: string(name='CreatorName', description='The name of the user who created the metatable.', example='abc'),
    modifiedTime?: long(name='ModifiedTime', description='The time when the metatable was modified.', example='1584444247000'),
    version?: long(name='Version', description='The version number.', example='1'),
  }(name='Data', description='The business data returned.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetMetaTableIntroWikiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableIntroWikiResponseBody(name='body'),
}

async function getMetaTableIntroWikiWithOptions(request: GetMetaTableIntroWikiRequest, runtime: Util.RuntimeOptions): GetMetaTableIntroWikiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.wikiVersion)) {
    query['WikiVersion'] = request.wikiVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableIntroWiki',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableIntroWiki(request: GetMetaTableIntroWikiRequest): GetMetaTableIntroWikiResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableIntroWikiWithOptions(request, runtime);
}

model GetMetaTableLineageRequest {
  clusterId?: string(name='ClusterId', description='The name of the metatable.', example='abc'),
  dataSourceType?: string(name='DataSourceType', description='The error message.', example='emr'),
  databaseName?: string(name='DatabaseName', description='The type of the data source. Valid values: odps and emr.', example='abc'),
  direction?: string(name='Direction', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='up'),
  nextPrimaryKey?: string(name='NextPrimaryKey', description='The ID of the E-MapReduce (EMR) cluster. Set this parameter only when you query data in an EMR compute engine instance.', example='odps.engine_name.table_name1'),
  pageSize?: int32(name='PageSize', description='The name of the metadatabase.', example='10'),
  tableGuid?: string(name='TableGuid', description='The logic of paging. Set this parameter based on the value of the response parameter NextPrimaryKey when the value of the response parameter HasNext is true in the last query.', example='odps.engine_name.table_name'),
  tableName?: string(name='TableName', description='The HTTP status code.', example='abc'),
}

model GetMetaTableLineageResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        createTimestamp?: long(name='CreateTimestamp', example='1638720736000'),
        databaseName?: string(name='DatabaseName'),
        tableGuid?: string(name='TableGuid', example='odps.tt.name'),
        tableName?: string(name='TableName', description='The time when the metatable was created.', example='name'),
      }
    ](name='DataEntityList', description='The GUID of the metatable.'),
    hasNext?: boolean(name='HasNext', description='The name of the metatable.', example='true'),
    nextPrimaryKey?: string(name='NextPrimaryKey', description='The information about the metatable.', example='odps | retail_e_commerce_2 | retail_e_commerce_2 | dws_ec_trd__cate_commodity_gmv_kpy_fy'),
  }(name='Data', description='Indicates whether the next page has more query results.'),
  errorCode?: string(name='ErrorCode', description='The paging information.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='Indicates whether the request is successful.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of the request.', example='200'),
  requestId?: string(name='RequestId', description='The error code.', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='The business data.', example='true'),
}

model GetMetaTableLineageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableLineageResponseBody(name='body'),
}

async function getMetaTableLineageWithOptions(request: GetMetaTableLineageRequest, runtime: Util.RuntimeOptions): GetMetaTableLineageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.nextPrimaryKey)) {
    query['NextPrimaryKey'] = request.nextPrimaryKey;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableLineage',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableLineage(request: GetMetaTableLineageRequest): GetMetaTableLineageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableLineageWithOptions(request, runtime);
}

model GetMetaTableListByCategoryRequest {
  categoryId?: long(name='CategoryId', example='23'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model GetMetaTableListByCategoryResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    tableGuidList?: [ string ](name='TableGuidList'),
    totalCount?: long(name='TotalCount', example='20'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1ec92159376'),
  success?: boolean(name='Success', example='true'),
}

model GetMetaTableListByCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableListByCategoryResponseBody(name='body'),
}

async function getMetaTableListByCategoryWithOptions(request: GetMetaTableListByCategoryRequest, runtime: Util.RuntimeOptions): GetMetaTableListByCategoryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableListByCategory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableListByCategory(request: GetMetaTableListByCategoryRequest): GetMetaTableListByCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableListByCategoryWithOptions(request, runtime);
}

model GetMetaTableOutputRequest {
  endDate?: string(name='EndDate', description='The HTTP status code returned.', example='2022-02-15'),
  pageNumber?: int32(name='PageNumber', description='The Globally Unique Identifier (GUID) of the MaxCompute metatable.', example='1'),
  pageSize?: int32(name='PageSize', description='The start date of the time range to query. The start date must be within the previous 30 days.', example='10'),
  startDate?: string(name='StartDate', description='The ID of the node.', example='2020-02-02'),
  tableGuid?: string(name='TableGuid', description='The end date of the time range to query. The end date must be within the previous 30 days.', example='odps.sample_project.sample_table'),
  taskId?: string(name='TaskId', description='The error message returned.', example='1048576'),
}

model GetMetaTableOutputResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        endTime?: string(name='EndTime', description='The start time of the node.', example='2022-02-12 0:32:12'),
        projectId?: long(name='ProjectId', description='The GUID of the MaxCompute metatable.', example='128'),
        startTime?: string(name='StartTime', description='The duration during which the node waits to start.', example='2022-02-12 0:34:13'),
        tableGuid?: string(name='TableGuid', example='odps.sample_project.sample_table'),
        taskId?: string(name='TaskId', example='1048576'),
        taskInstanceId?: long(name='TaskInstanceId', description='The ID of the workspace.', example='987654321'),
        waitTime?: string(name='WaitTime', description='The ID of the node.', example='3'),
      }
    ](name='DataEntityList', description='The ID of the instance.'),
    pageNumber?: int32(name='PageNumber', description='The total number of entries returned.', example='1'),
    pageSize?: int32(name='PageSize', description='The information of the node and instance.', example='10'),
    totalCount?: long(name='TotalCount', description='The end time of the node.', example='128'),
  }(name='Data', description='The number of entries returned per page.'),
  errorCode?: string(name='ErrorCode', description='The page number of the returned page.', example='0'),
  errorMessage?: string(name='ErrorMessage', description='Indicates whether the request was successful.', example='SUCCESS'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of the request.', example='200'),
  requestId?: string(name='RequestId', description='The error code returned.', example='0000-0000-0000-000'),
  success?: boolean(name='Success', description='The output node and instance.', example='true'),
}

model GetMetaTableOutputResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableOutputResponseBody(name='body'),
}

async function getMetaTableOutputWithOptions(request: GetMetaTableOutputRequest, runtime: Util.RuntimeOptions): GetMetaTableOutputResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableOutput',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableOutput(request: GetMetaTableOutputRequest): GetMetaTableOutputResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableOutputWithOptions(request, runtime);
}

model GetMetaTablePartitionRequest {
  clusterId?: string(name='ClusterId', description='The name of the metatable in the EMR cluster. This parameter is required only if you set the DataSourceType parameter to emr.

You can call the [GetMetaDBTableList](~~173916~~) operation to query the name of the metatable.', example='abc'),
  dataSourceType?: string(name='DataSourceType', description='The field that is used to sort partitions in the metatable. Valid values: name and modify_time.

By default, partitions in the metatable are sorted based on their creation time.', example='emr'),
  databaseName?: string(name='DatabaseName', description='The type of the data source. Valid values: odps and emr.', example='abc'),
  pageNumber?: int32(name='PageNumber', description='The GUID of the metatable.', example='1'),
  pageSize?: int32(name='PageSize', description='The ID of the EMR cluster. This parameter is required only if you set the DataSourceType parameter to emr.

You can log on to the [EMR console](https://emr.console.aliyun.com/?spm=a2c4g.11186623.0.0.965cc5c2GeiHet#/cn-hangzhou) to obtain the ID of the EMR cluster.', example='10'),
  sortCriterion?: {
    order?: string(name='Order', description='The error message returned.', example='desc'),
    sortField?: string(name='SortField', description='The HTTP status code returned.', example='name'),
  }(name='SortCriterion', description='The order in which partitions in the metatable are sorted. Valid values: asc and desc. Default value: desc.'),
  tableGuid?: string(name='TableGuid', description='The name of the metadatabase. This parameter is required only if you set the DataSourceType parameter to emr.

You can call the [ListMetaDB](~~185662~~) operation to query the name of the metadatabase.', example='odps.engine_name.table_name'),
  tableName?: string(name='TableName', description='The logic for sorting partitions in the metatable.', example='abc'),
}

model GetMetaTablePartitionShrinkRequest {
  clusterId?: string(name='ClusterId', description='The name of the metatable in the EMR cluster. This parameter is required only if you set the DataSourceType parameter to emr.

You can call the [GetMetaDBTableList](~~173916~~) operation to query the name of the metatable.', example='abc'),
  dataSourceType?: string(name='DataSourceType', description='The field that is used to sort partitions in the metatable. Valid values: name and modify_time.

By default, partitions in the metatable are sorted based on their creation time.', example='emr'),
  databaseName?: string(name='DatabaseName', description='The type of the data source. Valid values: odps and emr.', example='abc'),
  pageNumber?: int32(name='PageNumber', description='The GUID of the metatable.', example='1'),
  pageSize?: int32(name='PageSize', description='The ID of the EMR cluster. This parameter is required only if you set the DataSourceType parameter to emr.

You can log on to the [EMR console](https://emr.console.aliyun.com/?spm=a2c4g.11186623.0.0.965cc5c2GeiHet#/cn-hangzhou) to obtain the ID of the EMR cluster.', example='10'),
  sortCriterionShrink?: string(name='SortCriterion', description='The order in which partitions in the metatable are sorted. Valid values: asc and desc. Default value: desc.'),
  tableGuid?: string(name='TableGuid', description='The name of the metadatabase. This parameter is required only if you set the DataSourceType parameter to emr.

You can call the [ListMetaDB](~~185662~~) operation to query the name of the metadatabase.', example='odps.engine_name.table_name'),
  tableName?: string(name='TableName', description='The logic for sorting partitions in the metatable.', example='abc'),
}

model GetMetaTablePartitionResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        comment?: string(name='Comment', description='The time when the partition was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.'),
        createTime?: long(name='CreateTime', description='The type of the partition.', example='1590032868000'),
        dataSize?: long(name='DataSize', description='The comment.', example='19'),
        modifiedTime?: long(name='ModifiedTime', description='The number of entries in the partition.', example='1590032868000'),
        partitionGuid?: string(name='PartitionGuid', description='The GUID of the metatable.', example='odps.engine_name.table_name.pt=20170614'),
        partitionLocation?: string(name='PartitionLocation', example='abc'),
        partitionName?: string(name='PartitionName', description='The time when the partition was modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='pt=20170614'),
        partitionPath?: string(name='PartitionPath', description='The name of the partition.', example='abc'),
        partitionType?: string(name='PartitionType', description='The location of the Hive partition.', example='abc'),
        recordCount?: long(name='RecordCount', description='The GUID of the partition.', example='233'),
        tableGuid?: string(name='TableGuid', example='odps.engine_name.table_name'),
      }
    ](name='DataEntityList', description='The size of the partition. Unit: bytes.'),
    pageNumber?: int32(name='PageNumber', description='The total number of partitions.', example='1'),
    pageSize?: int32(name='PageSize', description='The list of partitions.', example='10'),
    totalCount?: long(name='TotalCount', description='The path of the partition.', example='100'),
  }(name='Data', description='The number of entries returned per page. Default value: 10. Maximum value: 100.'),
  errorCode?: string(name='ErrorCode', description='The page number of the returned page.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='Indicates whether the request was successful.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of the request.', example='200'),
  requestId?: string(name='RequestId', description='The error code returned.', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='The business data returned.', example='true'),
}

model GetMetaTablePartitionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTablePartitionResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to **GetMetaTablePartition**.
  *
  * @param tmpReq GetMetaTablePartitionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetMetaTablePartitionResponse
 */
async function getMetaTablePartitionWithOptions(tmpReq: GetMetaTablePartitionRequest, runtime: Util.RuntimeOptions): GetMetaTablePartitionResponse {
  Util.validateModel(tmpReq);
  var request = new GetMetaTablePartitionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.sortCriterion)) {
    request.sortCriterionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sortCriterion, 'SortCriterion', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortCriterionShrink)) {
    query['SortCriterion'] = request.sortCriterionShrink;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTablePartition',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The operation that you want to perform. Set the value to **GetMetaTablePartition**.
  *
  * @param request GetMetaTablePartitionRequest
  * @return GetMetaTablePartitionResponse
 */
async function getMetaTablePartition(request: GetMetaTablePartitionRequest): GetMetaTablePartitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTablePartitionWithOptions(request, runtime);
}

model GetMetaTableProducingTasksRequest {
  clusterId?: string(name='ClusterId', example='C-A_SAMPLE_CLUSTER_ID'),
  dataSourceType?: string(name='DataSourceType', example='odps'),
  dbName?: string(name='DbName', example='default'),
  schemaName?: string(name='SchemaName', example='myschema'),
  tableGuid?: string(name='TableGuid', example='odps.sample_project.sample_table'),
  tableName?: string(name='TableName', example='sample_table'),
}

model GetMetaTableProducingTasksResponseBody = {
  data?: [ 
    {
      taskId?: string(name='TaskId', example='9876543210'),
      taskName?: string(name='TaskName'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='"0"'),
  errorMessage?: string(name='ErrorMessage', example='SUCCESS'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='00000-00000-00000-00000'),
  success?: boolean(name='Success', example='true'),
}

model GetMetaTableProducingTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableProducingTasksResponseBody(name='body'),
}

async function getMetaTableProducingTasksWithOptions(request: GetMetaTableProducingTasksRequest, runtime: Util.RuntimeOptions): GetMetaTableProducingTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.dbName)) {
    query['DbName'] = request.dbName;
  }
  if (!Util.isUnset(request.schemaName)) {
    query['SchemaName'] = request.schemaName;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableProducingTasks',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableProducingTasks(request: GetMetaTableProducingTasksRequest): GetMetaTableProducingTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableProducingTasksWithOptions(request, runtime);
}

model GetMetaTableThemeLevelRequest {
  dataSourceType?: string(name='DataSourceType', description='The type of the data source. Set the value to odps.', example='odps'),
  tableGuid?: string(name='TableGuid', description='The globally unique identifier (GUID) of the table. Specify the GUID in the format of odps.${projectName}.${tableName}.', example='odps.project1.name1'),
}

model GetMetaTableThemeLevelResponseBody = {
  entity?: {
    level?: [ 
      {
        description?: string(name='Description', description='The description of the table level.'),
        levelId?: long(name='LevelId', description='The ID of the table level.', example='1'),
        name?: string(name='Name', description='The name of the table level.', example='level1'),
        type?: int32(name='Type', description='The type of the table level. Valid values:

*   1: indicates the logical level.
*   2: indicates the physical level.', example='1'),
      }
    ](name='Level', description='The information about the table level.'),
    theme?: [ 
      {
        level?: int32(name='Level', description='The level of the table folder. Valid values:

*   1: indicates a table folder of level 1.
*   2: indicates a table folder of level 2.', example='1'),
        name?: string(name='Name', description='The name of the table folder.', example='theme1'),
        parentId?: long(name='ParentId', description='The ID of the parent table folder.', example='0'),
        themeId?: long(name='ThemeId', description='The ID of the table folder.', example='123'),
      }
    ](name='Theme', description='The information about the table folder.'),
  }(name='Entity', description='The returned data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='0'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='success'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can troubleshoot errors based on the ID.', example='1324afdsfde'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetMetaTableThemeLevelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMetaTableThemeLevelResponseBody(name='body'),
}

async function getMetaTableThemeLevelWithOptions(request: GetMetaTableThemeLevelRequest, runtime: Util.RuntimeOptions): GetMetaTableThemeLevelResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaTableThemeLevel',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMetaTableThemeLevel(request: GetMetaTableThemeLevelRequest): GetMetaTableThemeLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaTableThemeLevelWithOptions(request, runtime);
}

model GetMigrationProcessRequest {
  migrationId?: long(name='MigrationId', description='The ID of the migration package. You can call the CreateImportMigration operation to query the ID.', example='123456'),
  projectId?: long(name='ProjectId', description='The ID of the workspace. You can go to the Workspace Management page of the DataWorks console to view the ID.', example='123456'),
}

model GetMigrationProcessResponseBody = {
  data?: [ 
    {
      taskName?: string(name='TaskName', description='The name of the step in the migration task.', example='IMPORE_PREPARE'),
      taskStatus?: string(name='TaskStatus', description='The running status of the step in the migration task. Valid values:

*   INT
*   RUNNING
*   FAILURE
*   SUCCESS', example='SUCCESS'),
    }
  ](name='Data', description='The progress information of the migration task, including the names of all steps in and status of the migration task.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='110001123456'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='test error msg'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='SADFSDFSD-SDFSDF-XDXCVX-ESWW'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetMigrationProcessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMigrationProcessResponseBody(name='body'),
}

async function getMigrationProcessWithOptions(request: GetMigrationProcessRequest, runtime: Util.RuntimeOptions): GetMigrationProcessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.migrationId)) {
    body['MigrationId'] = request.migrationId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMigrationProcess',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMigrationProcess(request: GetMigrationProcessRequest): GetMigrationProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMigrationProcessWithOptions(request, runtime);
}

model GetMigrationSummaryRequest {
  migrationId?: long(name='MigrationId', description='The ID of the request. You can locate logs and troubleshoot issues based on the ID.', example='1234'),
  projectId?: long(name='ProjectId', description='The ID of the migration task.

You can call the [CreateImportMigration](~~2809123~~) operation to obtain the ID of the import task and call the [CreateExportMigration](~~3241603~~) operation to obtain the ID of the export task.', example='12345'),
}

model GetMigrationSummaryResponseBody = {
  data?: {
    createUser?: string(name='CreateUser', description='The ID of the user who manages the migration task.', example='982293332403****'),
    downloadUrl?: string(name='DownloadUrl', example='https://shanghai-xxx-oss.oss-cn-shanghai.aliyuncs.com/pre/store/f10_bf47_b4fa7df0860f.zip?Expires=1639540903&OSSAccessKeyId=XXXXXXeF4Lv5j&Signature=qxxxxx'),
    gmtCreate?: long(name='GmtCreate', description='The time when the migration task was modified.', example='1589904000000'),
    gmtModified?: long(name='GmtModified', description='The ID of the user who creates the migration task.', example='1589904000000'),
    migrationId?: long(name='MigrationId', description='The name of the migration task.', example='1234'),
    name?: string(name='Name', description='The time when the migration task was created.', example='test_export_01'),
    opUser?: string(name='OpUser', description='The status of the migration task. Valid values:

*   INIT: The migration task is initiating.
*   EDITING: The migration task is being edited.
*   IMPORTING: The migration task is importing data objects.
*   IMPORT_ERROR: The migration task fails to import data objects.
*   IMPORT_SUCCESS: Data objects are imported.
*   EXPORTING: The migration task is exporting data objects.
*   EXPORT_ERROR: The migration task fails to export data objects.
*   EXPORT_SUCCESS: The migration task successfully exports data objects.
*   REVOKED: The migration task is canceled.
*   PARTIAL_SUCCESS: The migration task successfully imports or exports only some data objects.', example='982293332403****'),
    projectId?: long(name='ProjectId', description='The URL that is used to download the package of the export task.', example='12345'),
    status?: string(name='Status', description='The ID of the DataWorks workspace.', example='EXPORT_SUCCESS'),
  }(name='Data', description='The ID of the migration task.'),
  requestId?: string(name='RequestId', description='Indicates whether the request is successful. Valid values:

*   true: The request is successful.
*   false: The request fails. You can locate the error based on the request ID.', example='19999A96-71BA-1845-B455-ED620EF4E37F'),
  success?: boolean(name='Success', description='The details of the migration task.', example='true'),
}

model GetMigrationSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMigrationSummaryResponseBody(name='body'),
}

async function getMigrationSummaryWithOptions(request: GetMigrationSummaryRequest, runtime: Util.RuntimeOptions): GetMigrationSummaryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.migrationId)) {
    body['MigrationId'] = request.migrationId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMigrationSummary',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMigrationSummary(request: GetMigrationSummaryRequest): GetMigrationSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMigrationSummaryWithOptions(request, runtime);
}

model GetNodeRequest {
  nodeId?: long(name='NodeId', description='The interval at which the node is rerun after the node fails to run.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The priority of the node. Valid values: 1, 3, 5, 7, and 8.', example='PROD'),
}

model GetNodeResponseBody = {
  data?: {
    baselineId?: long(name='BaselineId', description='The description of the node.', example='123456'),
    businessId?: long(name='BusinessId', description='The operation that you want to perform. Set the value to **GetNode**.', example='123'),
    connection?: string(name='Connection', description='The environment of the workspace. Valid values: PROD and DEV.', example='odps_first_dev'),
    cronExpress?: string(name='CronExpress', description='The environment of the workspace. Valid values: PROD and DEV.', example='00 00 00 * * ?'),
    description?: string(name='Description', description='The name of the resource group.', example='test'),
    dqcDescription?: string(name='DqcDescription', description='The ID of the node. You can call the [ListNodes](~~173979~~) operation to query the node ID.', example='[{"projectName":"test_0923001","tableName":"test_table_001","partition":"ds\\u003d$[yyyymmdd]"},{"projectName":"test_0923001","tableName":"test_table_002","partition":"NOTAPARTITIONTABLE"}]'),
    dqcType?: int32(name='DqcType', description='The error message returned.', example='1'),
    fileType?: int32(name='FileType'),
    nodeId?: long(name='NodeId', description='The HTTP status code returned.', example='1234'),
    nodeName?: string(name='NodeName', description='The scheduling type of the node. Valid values:

*   NORMAL: The node is an auto triggered node.
*   MANUAL: The node is a manually triggered node. Manually triggered nodes cannot be automatically triggered.
*   PAUSE: The node is a paused node.
*   SKIP: The node is a dry-run node. Dry-run nodes are started as scheduled but the system sets the status of the nodes to successful when it starts to run them.', example='The ID of the baseline.'),
    ownerId?: string(name='OwnerId', description='The ID of the node.', example='17366294****'),
    paramValues?: string(name='ParamValues', description='The CRON expression returned.', example='a=b'),
    priority?: int32(name='Priority', description='The HTTP status code returned.', example='1'),
    programType?: string(name='ProgramType', description='The ID of the owner of the node.', example='ODPS_SQL'),
    projectId?: long(name='ProjectId', description='Indicates whether the node can be rerun.', example='1234'),
    relatedFlowId?: long(name='RelatedFlowId', description='Indicates whether the node is associated with Data Quality. Valid values: 0 and 1. A value of 0 indicates that the node is associated with Data Quality. A value of 1 indicates that the node is not associated with Data Quality.', example='123'),
    repeatInterval?: long(name='RepeatInterval', description='The ID of the workflow to which the node belongs.', example='60'),
    repeatability?: string(name='Repeatability', description='The type of the node.', example='true'),
    resGroupIdentifier?: string(name='ResGroupIdentifier'),
    resGroupName?: string(name='ResGroupName', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='The table and partition filter expression in Data Quality that are associated with the node.'),
    schedulerType?: string(name='SchedulerType', description='The ID of the workspace.', example='NORMAL'),
  }(name='Data', description='The details of the node.'),
  errorCode?: string(name='ErrorCode', description='The ID of the node. You can call the [ListNodes](~~173979~~) operation to query the node ID.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The connection string.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The operation that you want to perform. Set the value to **GetNode**.', example='200'),
  requestId?: string(name='RequestId', description='Other parameters.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='The ID of the workflow.', example='true'),
}

model GetNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNodeResponseBody(name='body'),
}

async function getNodeWithOptions(request: GetNodeRequest, runtime: Util.RuntimeOptions): GetNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNode',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNode(request: GetNodeRequest): GetNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeWithOptions(request, runtime);
}

model GetNodeChildrenRequest {
  nodeId?: long(name='NodeId', description='The ID of the node. You can go to the Operation Center page in the DataWorks console to view the ID.', example='123456878'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV. The value PROD indicates the production environment, and the value DEV indicates the development environment.', example='PROD'),
}

model GetNodeChildrenResponseBody = {
  data?: {
    nodes?: [ 
      {
        baselineId?: long(name='BaselineId', description='The ID of the baseline.', example='12345656'),
        cronExpress?: string(name='CronExpress', description='The cron expression. Cron expressions are used to run auto triggered nodes.', example='00 00 * * * *'),
        nodeId?: long(name='NodeId', description='The ID of the node.', example='1244564565'),
        nodeName?: string(name='NodeName', description='The name of the node.', example='test_Node'),
        ownerId?: string(name='OwnerId', description='The ID of the Alibaba Cloud account used by the node owner.', example='123124561341251321'),
        priority?: int32(name='Priority', description='The priority of the node. Valid values: 1 to 8. A large value indicates a high priority.', example='3'),
        programType?: string(name='ProgramType', description='The type of the node.', example='ODPS_SQL'),
        projectId?: long(name='ProjectId', description='The ID of the workspace to which the node belongs.', example='12315412412'),
        repeatability?: boolean(name='Repeatability', description='Indicates whether the node can be rerun if the node fails to run. Valid values:

*   true: indicates that the node can be rerun.
*   false: indicates that the node cannot be rerun.', example='true'),
        schedulerType?: string(name='SchedulerType', description='The scheduling type of the node. Valid values:

*   NORMAL: indicates that the node is an auto triggered node.
*   MANUAL: indicates that node is a manually triggered node.
*   PAUSE: indicates that the node is a paused node. Paused nodes are started as scheduled but the system sets the status of the nodes to failed when it starts to run them.
*   SKIP: indicates that the node is a dry-run node. Dry-run nodes are started as scheduled but the system sets the status of the nodes to successful when it starts to run them.', example='NORMAL'),
      }
    ](name='Nodes', description='The descendant nodes returned.'),
  }(name='Data', description='The information of the descendant nodes.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='1060010000000'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='err'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='adsfasdf-adf-asdf-asdf-asdfadfasdd'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetNodeChildrenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNodeChildrenResponseBody(name='body'),
}

async function getNodeChildrenWithOptions(request: GetNodeChildrenRequest, runtime: Util.RuntimeOptions): GetNodeChildrenResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeChildren',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNodeChildren(request: GetNodeChildrenRequest): GetNodeChildrenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeChildrenWithOptions(request, runtime);
}

model GetNodeCodeRequest {
  nodeId?: long(name='NodeId', description='The ID of the node.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV.', example='PROD'),
}

model GetNodeCodeResponseBody = {
  data?: string(name='Data', description='The code of the node.', example='select a;'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request, You can use the ID to query logs and troubleshoot issues.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetNodeCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNodeCodeResponseBody(name='body'),
}

async function getNodeCodeWithOptions(request: GetNodeCodeRequest, runtime: Util.RuntimeOptions): GetNodeCodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeCode',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNodeCode(request: GetNodeCodeRequest): GetNodeCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeCodeWithOptions(request, runtime);
}

model GetNodeOnBaselineRequest {
  baselineId?: long(name='BaselineId', example='1234'),
}

model GetNodeOnBaselineResponseBody = {
  data?: [ 
    {
      nodeId?: long(name='NodeId', example='1234'),
      nodeName?: string(name='NodeName'),
      owner?: string(name='Owner', example='9527952****'),
      projectId?: long(name='ProjectId', example='1234'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-E****'),
  success?: string(name='Success', example='true'),
}

model GetNodeOnBaselineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNodeOnBaselineResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request GetNodeOnBaselineRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetNodeOnBaselineResponse
 */
// Deprecated
async function getNodeOnBaselineWithOptions(request: GetNodeOnBaselineRequest, runtime: Util.RuntimeOptions): GetNodeOnBaselineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeOnBaseline',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request GetNodeOnBaselineRequest
  * @return GetNodeOnBaselineResponse
 */
// Deprecated
async function getNodeOnBaseline(request: GetNodeOnBaselineRequest): GetNodeOnBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeOnBaselineWithOptions(request, runtime);
}

model GetNodeParentsRequest {
  nodeId?: long(name='NodeId', description='The ID of the node. You can go to the Operation Center page in the DataWorks console to view the node ID.', example='12345456211234'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV. The value PROD indicates the production environment, and the value DEV indicates the development environment.', example='PROD'),
}

model GetNodeParentsResponseBody = {
  data?: {
    nodes?: [ 
      {
        baselineId?: long(name='BaselineId', description='The ID of the baseline.', example='1244564565'),
        cronExpress?: string(name='CronExpress', description='The cron expression. Cron expressions are used to run auto triggered nodes.', example='00 00 * * * *'),
        nodeId?: long(name='NodeId', description='The ID of the node.', example='1244564565'),
        nodeName?: string(name='NodeName', description='The name of the node.', example='test_Node'),
        ownerId?: string(name='OwnerId', description='The ID of the Alibaba Cloud account used by the node owner.', example='123124561341251321'),
        priority?: int32(name='Priority', description='The priority of the node. Valid values: 1 to 8. A large value indicates a high priority.', example='3'),
        programType?: string(name='ProgramType', description='The type of the node.', example='ODPS_SQL'),
        projectId?: long(name='ProjectId', description='The ID of the workspace to which the node belongs.', example='12315412412'),
        repeatability?: boolean(name='Repeatability', description='Indicates whether the node can be rerun if the node fails to run. Valid values:

*   true: indicates that the node can be rerun.
*   false: indicates that the node cannot be rerun.', example='true'),
        schedulerType?: string(name='SchedulerType', description='The scheduling type of the node. Valid values:

*   NORMAL: indicates that the node is an auto triggered node.
*   MANUAL: indicates that the node is a manually triggered node.
*   PAUSE: indicates that the node is a paused node. Paused nodes are started as scheduled but the system sets the status of the nodes to failed when it starts to run them.
*   SKIP: indicates that the node is a dry-run node. Dry-run nodes are started as scheduled but the system sets the status of the nodes to successful when it starts to run them.', example='NORMAL'),
      }
    ](name='Nodes', description='The ancestor nodes returned.'),
  }(name='Data', description='The information of the ancestor nodes.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='1060010000000'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='err'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='asdfasdfas-adfasdf-asfas-dfasdf-asdf'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetNodeParentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNodeParentsResponseBody(name='body'),
}

async function getNodeParentsWithOptions(request: GetNodeParentsRequest, runtime: Util.RuntimeOptions): GetNodeParentsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeParents',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNodeParents(request: GetNodeParentsRequest): GetNodeParentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeParentsWithOptions(request, runtime);
}

model GetNodeTypeListInfoRequest {
  keyword?: string(name='Keyword', example='ODPS SQ'),
  locale?: string(name='Locale', example='zh-CN'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='50'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model GetNodeTypeListInfoResponseBody = {
  nodeTypeInfoList?: {
    nodeTypeInfo?: [ 
      {
        nodeType?: int32(name='NodeType', example='10'),
        nodeTypeName?: string(name='NodeTypeName', example='ODPS SQL'),
      }
    ](name='NodeTypeInfo'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='50'),
    totalCount?: int32(name='TotalCount', example='127'),
  }(name='NodeTypeInfoList'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
}

model GetNodeTypeListInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNodeTypeListInfoResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request GetNodeTypeListInfoRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetNodeTypeListInfoResponse
 */
// Deprecated
async function getNodeTypeListInfoWithOptions(request: GetNodeTypeListInfoRequest, runtime: Util.RuntimeOptions): GetNodeTypeListInfoResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.locale)) {
    body['Locale'] = request.locale;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeTypeListInfo',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request GetNodeTypeListInfoRequest
  * @return GetNodeTypeListInfoResponse
 */
// Deprecated
async function getNodeTypeListInfo(request: GetNodeTypeListInfoRequest): GetNodeTypeListInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeTypeListInfoWithOptions(request, runtime);
}

model GetOpRiskDataRequest {
  date?: string(name='Date', description='The date on which the access records were queried. Specify the value in the yyyyMMdd format.', example='20210221'),
  name?: string(name='Name', description='The parameters that you can specify to query the access records. Valid values:

*   dbType: the data type
*   instanceName: the name of the instance
*   databaseName: the name of the database
*   projectName: the name of the workspace
*   clusterName: the name of the cluster

The following example shows the parameters configured to query the access records of the sensitive data in the abc database of the ABC Hologres instance:

{"dbType":"hologres","instanceName":"ABC","databaseName":"abc"}

You must specify the parameters based on the compute engine that you use in your business.', example='[ {"dbType":"hologres","instanceName":"ABC","databaseName":"abc"}, {"dbType":"ODPS.ODPS","projectName":"adbc"} ]'),
  pageNo?: int32(name='PageNo', description='The number of the page to return. Minimum value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 1000.', example='100'),
  riskType?: string(name='RiskType', description='The method that you use to identify risks.

*   You can manually identify risks.
*   You can also use a risk rule to identify risks. You can go to the DataWorks console to obtain the name of the risk rule on the Custom Identification Rules page of Data Security Guard.'),
}

model GetOpRiskDataResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0000-ABCD-EFG****'),
  riskData?: string(name='RiskData', description='The information of the risky sensitive data returned. The information includes totalCount and opRiskDatas.

opRiskDatas includes the following parameters:

*   sensType: the type of the sensitive data
*   sensLevel: the sensitivity level of the sensitive data
*   opType: the type of the operation
*   sql: the SQL statement that is executed
*   opAccount: the account that is used to perform the operation
*   opTime: the time when the operation was performed'),
}

model GetOpRiskDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOpRiskDataResponseBody(name='body'),
}

async function getOpRiskDataWithOptions(request: GetOpRiskDataRequest, runtime: Util.RuntimeOptions): GetOpRiskDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOpRiskData',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOpRiskData(request: GetOpRiskDataRequest): GetOpRiskDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOpRiskDataWithOptions(request, runtime);
}

model GetOpSensitiveDataRequest {
  date?: string(name='Date', description='The date on which access records were generated. Specify the value in the yyyyMMdd format.', example='20210116'),
  name?: string(name='Name', description='The parameters that you can specify to query the access records. Valid values:

*   dbType: the data type
*   instanceName: the name of the instance
*   databaseName: the name of the database
*   projectName: the name of the workspace
*   clusterName: the name of the cluster

The following example shows the parameters configured to query the access records of the sensitive data in the abc database of the ABC Hologres instance:

{"dbType":"hologres","instanceName":"ABC","databaseName":"abc"}

You must specify the parameters based on the compute engine that you use in your business.', example='[  {"dbType":"hologres","instanceName":"ABC","databaseName":"abc"},  {"dbType":"ODPS.ODPS","projectName":"adbc"}  ]'),
  opType?: string(name='OpType', description='The operation that is performed on the data. Valid values:

*   SQL_SELECT: indicates that the data is accessed. For example, the SELECT statement is executed to query the data.
*   TUNNEL_DOWNLOAD: indicates that the data is downloaded. For example, a Tunnel command is run to download the data.', example='SQL_SELECT'),
  pageNo?: int32(name='PageNo', description='The number of the page to return. Minimum value:1. Maximum value: 1000.', example='100'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Minimum value: 1. Maximum value: 1000.', example='1'),
}

model GetOpSensitiveDataResponseBody = {
  opSensitiveData?: string(name='OpSensitiveData', description='The information of the access records returned for the sensitive data. The information includes totalCount and opRiskDatas.

opRiskDatas includes the following parameters:

*   sensType: indicates the type of the sensitive data.
*   sensLevel: indicates the sensitivity level of the sensitive data. A larger value of sensLevel indicates a higher sensitivity level.
*   opType: indicates the type of the operation.
*   sql: indicates the SQL statement that is executed.
*   opAccount: indicates the account that is used to perform the operation.
*   opTime: indicates the time when the operation was performed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0000-ABCD-EFG****'),
}

model GetOpSensitiveDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOpSensitiveDataResponseBody(name='body'),
}

async function getOpSensitiveDataWithOptions(request: GetOpSensitiveDataRequest, runtime: Util.RuntimeOptions): GetOpSensitiveDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOpSensitiveData',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOpSensitiveData(request: GetOpSensitiveDataRequest): GetOpSensitiveDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOpSensitiveDataWithOptions(request, runtime);
}

model GetOptionValueForProjectRequest {
  extensionCode?: string(name='ExtensionCode', description='The ID of the workspace.', example='ce4*********086da5'),
  projectId?: string(name='ProjectId', description='Id of the request', example='234'),
}

model GetOptionValueForProjectResponseBody = {
  optionValue?: string(name='OptionValue', example='{"cuNumber":"0"}'),
  requestId?: string(name='RequestId', description='The option settings. In the example, cuNumber is a custom key.', example='E6F0DBDD-5AD****'),
}

model GetOptionValueForProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOptionValueForProjectResponseBody(name='body'),
}

async function getOptionValueForProjectWithOptions(request: GetOptionValueForProjectRequest, runtime: Util.RuntimeOptions): GetOptionValueForProjectResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.extensionCode)) {
    body['ExtensionCode'] = request.extensionCode;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetOptionValueForProject',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOptionValueForProject(request: GetOptionValueForProjectRequest): GetOptionValueForProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOptionValueForProjectWithOptions(request, runtime);
}

model GetPermissionApplyOrderDetailRequest {
  flowId?: string(name='FlowId', description='The ID of the permission request order. You can call the ListPermissionApplyOrders operation to obtain the order ID.', example='48f36729-05f9-4a40-9286-933fd940f30a'),
}

model GetPermissionApplyOrderDetailResponseBody = {
  applyOrderDetail?: {
    applyBaseId?: string(name='ApplyBaseId', description='The unique ID of the Alibaba Cloud account that is used to submit the permission request order.', example='267842600408993176'),
    applyTimestamp?: long(name='ApplyTimestamp', description='The time when the permission request order was submitted. The parameter value is a UNIX timestamp.', example='1615284086000'),
    approveAccountList?: [ 
      {
        baseId?: string(name='BaseId', description='The unique ID of the Alibaba Cloud account that is used to approve the permission request order.', example='182293110403****'),
      }
    ](name='ApproveAccountList', description='The list of Alibaba Cloud accounts that are used to approve the permission request order.'),
    approveContent?: {
      applyReason?: string(name='ApplyReason', description='The reason for your request. The administrator decides whether to approve the request based on the request reason.', example='I need to use this table'),
      deadline?: long(name='Deadline', description='The expiration time of the permissions that you requested. The parameter value is a UNIX timestamp.

If LabelSecurity is disabled in the MaxCompute project, or the security level of fields in the MaxCompute table on which you request permissions is 0 or is less than or equal to the security level of the Alibaba Cloud account for which you request permissions, you can request only permanent permissions.', example='1617115071885'),
      orderType?: int32(name='OrderType', description='The type of the permission request order. The parameter value is 1 and cannot be changed. 1 indicates that ACL-based authorization is requested.', example='1'),
      projectMeta?: {
        maxComputeProjectName?: string(name='MaxComputeProjectName', description='The MaxCompute project to which the object on which you request permissions belongs.', example='aMaxComputeProject'),
        objectMetaList?: [ 
          {
            columnMetaList?: [ 
              {
                columnComment?: string(name='ColumnComment', description='The description of the column on which you request permissions.'),
                columnName?: string(name='ColumnName', description='The name of the column on which you request permissions.', example='aColumnName'),
                securityLevel?: string(name='SecurityLevel'),
              }
            ](name='ColumnMetaList', description='The information about the column fields in the object on which you request permissions.'),
            objectName?: string(name='ObjectName', description='The name of the table on which you request permissions.', example='aTableName'),
          }
        ](name='ObjectMetaList', description='Details about the object on which you request permissions.'),
        workspaceId?: int32(name='WorkspaceId', description='The ID of the DataWorks workspace that is associated with the object on which you request permissions.', example='12345'),
      }(name='ProjectMeta', description='The information about the project and workspace that are associated with the object on which you requested permissions.'),
    }(name='ApproveContent', description='The content of the permission request.'),
    flowId?: string(name='FlowId', description='The ID of the permission request order.', example='ad8da78d-8135-455e-9486-27cf213fc140'),
    flowStatus?: int32(name='FlowStatus', description='The status of the permission request order. Valid values:

*   1: pending approval
*   2: approved and authorized
*   3: approved but authorization failed
*   4: rejected', example='2'),
    granteeObjectList?: [ 
      {
        granteeId?: string(name='GranteeId', description='The unique ID of the account that is used to request permissions.', example='267842600408993176'),
        granteeName?: string(name='GranteeName', description='The name of the account that is used to request permissions. The name is in the same format as that of the account used to access the MaxCompute project.

*   An Alibaba Cloud account is in the format of ALIYUN$+Account name.
*   A RAM user is in the format of RAM$+Account name.', example='RAM$dataworks_3h1_1:StsRamUser(StsRamUser)'),
        granteeType?: int32(name='GranteeType', description='The type of the subject that requests permissions. The parameter value is 1 and cannot be changed. It indicates user.', example='1'),
        granteeTypeSub?: int32(name='GranteeTypeSub', description='The subtype of the subject that requests permissions. Valid values:

*   101: production account
*   103: individual account
*   105: account that requests permissions for others', example='103'),
      }
    ](name='GranteeObjectList', description='Information about the account that is used to request permissions.'),
  }(name='ApplyOrderDetail', description='Details about the permission request order.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0bc1ec92159376****'),
}

model GetPermissionApplyOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPermissionApplyOrderDetailResponseBody(name='body'),
}

async function getPermissionApplyOrderDetailWithOptions(request: GetPermissionApplyOrderDetailRequest, runtime: Util.RuntimeOptions): GetPermissionApplyOrderDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.flowId)) {
    query['FlowId'] = request.flowId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPermissionApplyOrderDetail',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPermissionApplyOrderDetail(request: GetPermissionApplyOrderDetailRequest): GetPermissionApplyOrderDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPermissionApplyOrderDetailWithOptions(request, runtime);
}

model GetProjectRequest {
  projectId?: long(name='ProjectId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='27'),
}

model GetProjectResponseBody = {
  data?: {
    appkey?: string(name='Appkey', description='Indicates whether the workspace is a default workspace. Valid values:

*   1: The workspace is a default workspace.
*   0: The workspace is not a default workspace.', example='0'),
    baseProject?: boolean(name='BaseProject', description='The time when the workspace was created. Example: Dec 3, 2019 9:12:20 PM.', example='false'),
    defaultDiResourceGroupIdentifier?: string(name='DefaultDiResourceGroupIdentifier', example='group_280749521****'),
    destination?: int32(name='Destination', description='The unique identifier of the workspace.', example='0'),
    devStorageQuota?: string(name='DevStorageQuota', description='This parameter is deprecated.', example='0'),
    developmentType?: int32(name='DevelopmentType', description='The default maximum number of automatic reruns that are allowed after an error occurs.', example='4'),
    disableDevelopment?: boolean(name='DisableDevelopment', description='This parameter is deprecated.', example='true'),
    envTypes?: [ string ](name='EnvTypes', description='The list of tags.

The tags are added to resources in the workspace and used for authentication and cost allocation.'),
    gmtCreate?: string(name='GmtCreate', description='The environment of the workspace. Valid values: PROD and DEV.

*   The value PROD indicates the production environment. Workspaces in basic mode provide only the production environment.
*   The value DEV indicates the development environment. Workspaces in standard mode provide both the development environment and the production environment.', example='Oct 10, 2019 3:42:53 PM'),
    gmtModified?: string(name='GmtModified', description='The description of the workspace.', example='Dec 3, 2019 9:12:20 PM'),
    isAllowDownload?: int32(name='IsAllowDownload', description='The time when the workspace was last modified. Example: Dec 3, 2019 9:12:20 PM.', example='1'),
    isDefault?: int32(name='IsDefault', description='The display name of the workspace.', example='1'),
    maxFlowNode?: int32(name='MaxFlowNode', description='Indicates whether you are allowed to download the query result from DataStudio. Valid values:

*   1: You are allowed to download the query result from DataStudio.
*   0: You are not allowed to download the query result from DataStudio.', example='1'),
    prodStorageQuota?: string(name='ProdStorageQuota', description='The development type of the workspace. The value is fixed as 4. This parameter is deprecated.', example='1'),
    projectDescription?: string(name='ProjectDescription', description='Indicates whether the MaxCompute tables in the workspace are visible to the users within a tenant. Valid values:

*   0: The MaxCompute tables are invisible to the users within a tenant.
*   1: The MaxCompute tables are visible to the users within a tenant.', example='abc'),
    projectId?: int32(name='ProjectId', description='The mode of the workspace. Valid values:

*   2: The workspace is in basic mode.
*   3: The workspace is in standard mode.', example='27'),
    projectIdentifier?: string(name='ProjectIdentifier', description='The ID of the Alibaba Cloud account used by the workspace owner.', example='abc'),
    projectMode?: int32(name='ProjectMode', description='This parameter is deprecated.', example='2'),
    projectName?: string(name='ProjectName', description='Indicates whether the Development role is disabled. Valid values:

*   false: The Development role is enabled.
*   true: The Development role is disabled.

<!---->

*   Default value: false.', example='abc'),
    projectOwnerBaseId?: string(name='ProjectOwnerBaseId', description='Indicates whether a proxy account is used to access the MaxCompute compute engine instance associated with the workspace.', example='18229311****'),
    protectedMode?: int32(name='ProtectedMode', description='This parameter is deprecated.', example='1'),
    residentArea?: string(name='ResidentArea', example='private'),
    resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The keys of the tags that are added to resources in the workspace. The tag keys must meet the following conditions:

*   The number of tag keys that can be added to resources ranges from 1 to 20.
*   Each tag key can be a maximum of 128 characters in length.
*   The tag keys cannot start with acs: or aliyun:.
*   The tag keys cannot contain http:// or https://.', example='rg-acfmzbn7pti3zfa'),
    schedulerMaxRetryTimes?: int32(name='SchedulerMaxRetryTimes', description='The interval between automatic reruns after an error occurs. Unit: milliseconds. The maximum interval is 30 minutes. You must pay attention to the conversion between units.', example='3'),
    schedulerRetryInterval?: int32(name='SchedulerRetryInterval', description='This parameter is deprecated.', example='120000'),
    status?: int32(name='Status', description='The ID of the workspace.', example='0'),
    tablePrivacyMode?: int32(name='TablePrivacyMode', description='Indicates whether the workspace protection feature is enabled. Valid values:

*   1: The workspace protection feature is enabled.
*   0: The workspace protection feature is disabled.', example='1'),
    tags?: [ 
      {
        key?: string(name='Key', example='Env'),
        value?: string(name='Value', example='Test'),
      }
    ](name='Tags', description='The values of the tags that are added to resources in the workspace. The tag values must meet the following conditions:

*   The number of tag values that can be added to resources ranges from 1 to 20.
*   Each tag value can be a maximum of 128 characters in length.
*   The tag values cannot start with acs:.
*   The tag values cannot contain http:// or https://.'),
    tenantId?: long(name='TenantId', description='The ID of the resource group used in the workspace.', example='280749521'),
    useProxyOdpsAccount?: boolean(name='UseProxyOdpsAccount', description='The ID of the tenant.', example='true'),
  }(name='Data', description='This parameter is deprecated.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='Indicates whether the request was successful.', example='200'),
  requestId?: string(name='RequestId', description='The description of the workspace.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='The status of the workspace. Valid values:

*   AVAILABLE(0): The workspace is in a normal state.
*   DELETED(1): The workspace is deleted.
*   INITIALIZING(2): The workspace is being initialized.
*   INIT_FAILED(3): The workspace fails to be initialized.
*   FORBIDDEN(4): The workspace is manually disabled.
*   DELETING(5): The workspace is being deleted.
*   DEL_FAILED(6): The workspace fails to be deleted.
*   FROZEN(7): The workspace is frozen due to overdue payments.
*   UPDATING(8): The workspace is being updated. The workspace enters this state after you associate a new compute engine with the workspace and the compute engine is being initialized.
*   UPDATE_FAILED(9): The workspace fails to be updated.', example='true'),
}

model GetProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProjectResponseBody(name='body'),
}

async function getProjectWithOptions(request: GetProjectRequest, runtime: Util.RuntimeOptions): GetProjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProject',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getProject(request: GetProjectRequest): GetProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProjectWithOptions(request, runtime);
}

model GetProjectDetailRequest {
  projectId?: long(name='ProjectId', example='27'),
}

model GetProjectDetailResponseBody = {
  data?: {
    defaultDiResourceGroupIdentifier?: string(name='DefaultDiResourceGroupIdentifier', example='group_280749521****'),
    developmentType?: int32(name='DevelopmentType', example='4'),
    disableDevelopment?: boolean(name='DisableDevelopment'),
    envTypes?: [ string ](name='EnvTypes'),
    gmtCreate?: string(name='GmtCreate', example='Oct 10, 2019 3:42:53 PM'),
    gmtModified?: string(name='GmtModified', example='Dec 3, 2019 9:12:20 PM'),
    isAllowDownload?: int32(name='IsAllowDownload', example='1'),
    isDefault?: int32(name='IsDefault'),
    projectDescription?: string(name='ProjectDescription', example='abc'),
    projectId?: int32(name='ProjectId', example='27'),
    projectIdentifier?: string(name='ProjectIdentifier', example='abc'),
    projectMode?: int32(name='ProjectMode', example='1'),
    projectName?: string(name='ProjectName', example='abc'),
    projectOwnerBaseId?: string(name='ProjectOwnerBaseId', example='18229311****'),
    protectedMode?: int32(name='ProtectedMode', example='1'),
    residentArea?: string(name='ResidentArea', example='private'),
    resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId'),
    schedulerMaxRetryTimes?: int32(name='SchedulerMaxRetryTimes', example='3'),
    schedulerRetryInterval?: int32(name='SchedulerRetryInterval', example='120000'),
    status?: int32(name='Status', example='0'),
    tablePrivacyMode?: int32(name='TablePrivacyMode'),
    tags?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Tags'),
    tenantId?: long(name='TenantId', example='280749521950784'),
    useProxyOdpsAccount?: boolean(name='UseProxyOdpsAccount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1411515937635973****'),
  success?: boolean(name='Success', example='true'),
}

model GetProjectDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProjectDetailResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request GetProjectDetailRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetProjectDetailResponse
 */
// Deprecated
async function getProjectDetailWithOptions(request: GetProjectDetailRequest, runtime: Util.RuntimeOptions): GetProjectDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProjectDetail',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request GetProjectDetailRequest
  * @return GetProjectDetailResponse
 */
// Deprecated
async function getProjectDetail(request: GetProjectDetailRequest): GetProjectDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProjectDetailWithOptions(request, runtime);
}

model GetQualityEntityRequest {
  envType?: string(name='EnvType', description='The type of the compute engine instance or data source.', example='odps'),
  matchExpression?: string(name='MatchExpression', description='The partition filter expression.', example='dt=$[yyyymmdd]'),
  projectId?: long(name='ProjectId'),
  projectName?: string(name='ProjectName', description='The name of the compute engine instance or data source. You can obtain the name from data source configurations.', example='autotest'),
  tableName?: string(name='TableName', description='The name of the partitioned table. You can call the [GetMetaTablePartition](~~173923~~) operation to obtain the name.', example='dual'),
}

model GetQualityEntityResponseBody = {
  data?: [ 
    {
      createTime?: long(name='CreateTime', description='The time when the partition filter expression was created.', example='1593964800000'),
      entityLevel?: int32(name='EntityLevel', description='The level of the partition filter expression. Valid values:

*   0: The partition filter expression is at the SQL level. This indicates that the system checks data quality after each SQL statement is executed.
*   1: The partition filter expression is at the node level. This indicates that the system checks data quality after all the SQL statements for a node are executed.', example='0'),
      envType?: string(name='EnvType', description='The type of the compute engine instance or data source.', example='odps'),
      followers?: string(name='Followers', description='The ID of the Alibaba Cloud account that is used to receive alert notifications.', example='1822931****'),
      hasRelativeNode?: boolean(name='HasRelativeNode', description='Indicates whether the partition filter expression is associated with a node. Valid values:

*   true: The partition filter expression is associated with a node.
*   false: The partition filter expression is not associated with a node.', example='true'),
      id?: long(name='Id', description='The ID of the partition filter expression.', example='4003918'),
      matchExpression?: string(name='MatchExpression', description='The partition filter expression.', example='dt=$[yyyymmdd-1]'),
      modifyTime?: long(name='ModifyTime', description='The time when the partition filter expression was modified.', example='1593964800000'),
      modifyUser?: string(name='ModifyUser', description='The ID of the Alibaba Cloud account that is used to modify the partition filter expression.', example='1822931****'),
      onDuty?: string(name='OnDuty', description='The ID of the Alibaba Cloud account that is used to configure the partition filter expression.', example='1822931****'),
      onDutyAccountName?: string(name='OnDutyAccountName', description='The name of the Alibaba Cloud account that is used to configure the partition filter expression.', example='test'),
      projectName?: string(name='ProjectName', description='The name of the compute engine instance or data source.', example='autotest'),
      relativeNode?: string(name='RelativeNode', description='The information about the node with which the partition filter expression is associated. The information includes the following items:

*   ProjectName: the name of the workspace to which the node belongs.
*   NodeID: the ID of the node.', example='[{"projectName":"xc_DP****","nodeId":7000026****}]'),
      sql?: int32(name='Sql', description='Indicates that the partition filter expression is at the SQL level.', example='0'),
      tableName?: string(name='TableName', description='The name of the partitioned table.', example='test_dqc_de****'),
      task?: int32(name='Task', description='The node.', example='0'),
    }
  ](name='Data', description='The information about the partition filter expression.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='401'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6d739ef6-098a-47****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetQualityEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetQualityEntityResponseBody(name='body'),
}

async function getQualityEntityWithOptions(request: GetQualityEntityRequest, runtime: Util.RuntimeOptions): GetQualityEntityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.matchExpression)) {
    body['MatchExpression'] = request.matchExpression;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.tableName)) {
    body['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetQualityEntity',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getQualityEntity(request: GetQualityEntityRequest): GetQualityEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return getQualityEntityWithOptions(request, runtime);
}

model GetQualityFollowerRequest {
  entityId?: long(name='EntityId', example='1234'),
  projectId?: long(name='ProjectId'),
  projectName?: string(name='ProjectName', example='autotest'),
}

model GetQualityFollowerResponseBody = {
  data?: [ 
    {
      alarmMode?: int32(name='AlarmMode', example='1'),
      createTime?: long(name='CreateTime'),
      entityId?: string(name='EntityId', example='1234'),
      follower?: string(name='Follower', example='1234'),
      followerAccountName?: string(name='FollowerAccountName', example='test'),
      id?: long(name='Id', example='123'),
      modifyTime?: long(name='ModifyTime'),
      projectName?: string(name='ProjectName', example='autotest'),
      tableName?: string(name='TableName', example='dual'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='38cbdef0-f6cf-49'),
  success?: boolean(name='Success', example='true'),
}

model GetQualityFollowerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetQualityFollowerResponseBody(name='body'),
}

async function getQualityFollowerWithOptions(request: GetQualityFollowerRequest, runtime: Util.RuntimeOptions): GetQualityFollowerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetQualityFollower',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getQualityFollower(request: GetQualityFollowerRequest): GetQualityFollowerResponse {
  var runtime = new Util.RuntimeOptions{};
  return getQualityFollowerWithOptions(request, runtime);
}

model GetQualityRuleRequest {
  projectId?: long(name='ProjectId'),
  projectName?: string(name='ProjectName', description='The name of the compute engine instance or data source.', example='autotest'),
  ruleId?: long(name='RuleId', description='The ID of the monitoring rule. You can call the [ListQualityRules](~~173995~~) operation to query the ID.', example='1234'),
}

model GetQualityRuleResponseBody = {
  data?: {
    blockType?: int32(name='BlockType', description='The strength of the monitoring rule. The strength of a monitoring rule indicates the importance of the rule. Valid values:

*   1: indicates that the monitoring rule is a strong rule.

*   0: indicates that the monitoring rule is a weak rule.

    You can specify whether a monitoring rule is a strong rule based on your business requirements. If a strong rule is used and an error alert is triggered, nodes are blocked.', example='1'),
    checker?: int32(name='Checker', description='The ID of the checker. The value of this parameter corresponds to the ID at the frontend and is converted from the ID of the primary key.', example='9'),
    checkerName?: string(name='CheckerName', description='The name of the checker.', example='compared with a fixed value'),
    comment?: string(name='Comment', description='The description of the monitoring rule.'),
    criticalThreshold?: string(name='CriticalThreshold', description='The threshold for an error alert. The threshold indicates the deviation of the monitoring result from the expected value. You can customize this threshold based on your business requirements. If a strong rule is used and an error alert is triggered, nodes are blocked.', example='20'),
    entityId?: long(name='EntityId', description='The ID of the partition filter expression.', example='165523'),
    expectValue?: string(name='ExpectValue', description='The expected value.', example='30'),
    fixCheck?: boolean(name='FixCheck', description='Indicates whether the monitoring is performed based on a fixed value.', example='true'),
    id?: long(name='Id', description='The ID of the monitoring rule.', example='123232'),
    methodId?: int32(name='MethodId', description='The ID of the sampling method of the monitoring rule.', example='8'),
    methodName?: string(name='MethodName', description='The name of the method that is used to collect sample data, such as avg, count, sum, min, max, count_distinct, user_defined, table_count, table_size, table_dt_load_count, table_dt_refuseload_count, null_value, null_value/table_count, (table_count-count_distinct)/table_count, or table_count-count_distinct.', example='table_count'),
    onDuty?: string(name='OnDuty', description='The ID of the Alibaba Cloud account that is used to configure the monitoring rule.', example='1822931****'),
    onDutyAccountName?: string(name='OnDutyAccountName', description='The name of the Alibaba Cloud account that is used to configure the monitoring rule.', example='test'),
    openSwitch?: boolean(name='OpenSwitch'),
    operator?: string(name='Operator', description='The comparison operator of the monitoring rule.', example='>='),
    predictType?: int32(name='PredictType', description='Indicates whether the threshold is a dynamic threshold. Valid values:

*   0: The threshold is not a dynamic threshold.
*   1: The threshold is a dynamic threshold.', example='0'),
    property?: string(name='Property', description='The field that is monitored. This field is a column name in the data source table that is monitored.', example='id'),
    ruleName?: string(name='RuleName', description='The name of the monitoring rule.'),
    ruleType?: int32(name='RuleType', description='The type of the monitoring rule.', example='0'),
    templateId?: int32(name='TemplateId', description='The ID of the monitoring template.', example='7'),
    templateName?: string(name='TemplateName', description='The name of the monitoring template.', example='SQL task table rows, 1,7, 30 days fluctuation test'),
    trend?: string(name='Trend', description='The trend of the monitoring result.', example='abs'),
    warningThreshold?: string(name='WarningThreshold', description='The threshold for a warning alert. The threshold indicates the deviation of the monitoring result from the expected value. You can customize this threshold based on your business requirements.', example='10'),
    whereCondition?: string(name='WhereCondition', description='The filter condition or custom SQL statement that is used for monitoring.', example='id>10'),
  }(name='Data', description='The information of the monitoring rule.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='401'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='576b9457-2cf5-4****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetQualityRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetQualityRuleResponseBody(name='body'),
}

async function getQualityRuleWithOptions(request: GetQualityRuleRequest, runtime: Util.RuntimeOptions): GetQualityRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.ruleId)) {
    body['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetQualityRule',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getQualityRule(request: GetQualityRuleRequest): GetQualityRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getQualityRuleWithOptions(request, runtime);
}

model GetRemindRequest {
  remindId?: long(name='RemindId', description='The ID of the custom alert rule.', example='1234'),
}

model GetRemindResponseBody = {
  data?: {
    alertInterval?: int32(name='AlertInterval', description='The minimum interval at which alerts are reported. Unit: seconds.', example='1800'),
    alertMethods?: [ string ](name='AlertMethods', description='The notification method. Valid values:

*   MAIL: Alert notifications are sent by emails.

*   SMS: Alert notifications are sent by text messages.

    Alert notifications can be sent by text messages only in the Singapore (Singapore), Malaysia (Kuala Lumpur), and Germany (Frankfurt) regions.

*   Multiple notification methods are separated by commas (,).'),
    alertTargets?: [ string ](name='AlertTargets', description='*   If the value of the AlertUnit parameter is OWNER, this parameter is left empty.
*   If the value of the AlertUnit parameter is OTHER, the ID of the Alibaba Cloud account used by the specified user is returned. Multiple IDs are separated by commas (,).'),
    alertUnit?: string(name='AlertUnit', description='The recipient of the alert. Valid values: OWNER and OTHER. A value of OWNER indicates the node owner. A value of OTHER indicates a specified user.', example='OWNER'),
    baselines?: [ 
      {
        baselineId?: long(name='BaselineId', description='The ID of the baseline.', example='1234'),
        baselineName?: string(name='BaselineName', description='The name of the baseline.'),
      }
    ](name='Baselines', description='The baselines to which the custom alert rule is applied. This parameter is returned if the value of the RemindUnit parameter is BASELINE.'),
    bizProcesses?: [ 
      {
        bizId?: long(name='BizId', description='The ID of the workflow.', example='9527'),
        bizProcessName?: string(name='BizProcessName', description='The name of the workflow.'),
      }
    ](name='BizProcesses', description='The workflows to which the custom alert rule is applied. This parameter is returned if the value of the RemindUnit parameter is BIZPROCESS.'),
    detail?: string(name='Detail', description='*   If the value of the RemindType parameter is FINISHED, this parameter is left empty.
*   If the value of the RemindType parameter is UNFINISHED, the trigger conditions are returned as key-value pairs. Example: {"hour":23,"minu":59}. Valid values of hour: 0 to 47. Valid values of minu: 0 to 59.
*   If the value of the RemindType parameter is ERROR, this parameter is left empty.
*   If the value of the RemindType parameter is CYCLE_UNFINISHED, the trigger conditions are returned as key-value pairs. Example: {"1":"05:50","2":"06:50","3":"07:50","4":"08:50","5":"09:50","6":"10:50","7":"11:50","8":"12:50","9":"13:50","10":"14:50","11":"15:50","12":"16:50","13":"17:50","14":"18:50","15":"19:50","16":"20:50","17":"21:50","18":"22:50","19":"23:50","20":"24:50","21":"25:50"}. The key indicates the ID of the cycle. Valid values: 1 to 288. The value indicates the timeout period of the node that is run in the cycle. The value is in the hh:mm format. Valid values of hh: 0 to 47. Valid values of mm: 0 to 59.
*   If the value of the RemindType parameter is TIMEOUT, the timeout period is returned. Unit: seconds. Example: 1800. This value indicates that an alert is reported if the node is run for more than 30 minutes.', example='{"hour":23,"minu":59}'),
    dndEnd?: string(name='DndEnd', description='The end time of the quiet hours. The value is in the hh:mm format. Valid values of hh: 0 to 23. Valid values of mm: 0 to 59.', example='08:00'),
    dndStart?: string(name='DndStart', description='The start time of the quiet hours. The value is in the hh:mm format. Valid values of hh: 0 to 23. Valid values of mm: 0 to 59.', example='00:00'),
    founder?: string(name='Founder', description='The ID of the Alibaba Cloud account used by the creator of the custom alert rule.', example='9527951795****'),
    maxAlertTimes?: int32(name='MaxAlertTimes', description='The maximum number of alerts.', example='3'),
    nodes?: [ 
      {
        nodeId?: long(name='NodeId', description='The ID of the node.', example='1234'),
        nodeName?: string(name='NodeName', description='The name of the node.'),
        owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the owner of the node.', example='9527951795****'),
        projectId?: long(name='ProjectId', description='The ID of the workspace to which the node belongs.', example='1234'),
      }
    ](name='Nodes', description='The nodes to which the custom alert rule is applied. This parameter is returned if the value of the RemindUnit parameter is NODE.'),
    projects?: [ 
      {
        projectId?: long(name='ProjectId', description='The ID of the workspace.', example='1234'),
      }
    ](name='Projects', description='The workspaces to which the custom alert rule is applied. This parameter is returned if the value of the RemindUnit parameter is PROJECT.'),
    remindId?: long(name='RemindId', description='The ID of the custom alert rule.', example='1234'),
    remindName?: string(name='RemindName', description='The name of the custom alert rule.'),
    remindType?: string(name='RemindType', description='The conditions that trigger an alert. Valid values: FINISHED, UNFINISHED, ERROR, CYCLE_UNFINISHED, and TIMEOUT. A value of FINISHED indicates that the node is run. A value of UNFINISHED indicates that the node is still running at the specified point in time. A value of ERROR indicates that an error occurs when the node is running. A value of CYCLE_UNFINISHED indicates that the node is still running in the specified cycle. A value of TIMEOUT indicates that the node times out.', example='FINISHED'),
    remindUnit?: string(name='RemindUnit', description='The type of the object to which the custom alert rule is applied. Valid values: NODE, BASELINE, PROJECT, and BIZPROCESS. A value of NODE indicates that the monitored object is a node. A value of BASELINE indicates that the monitored object is a baseline. A value of PROJECT indicates that the monitored object is a workspace. A value of BIZPROCESS indicates that the monitored object is a workflow.', example='NODE'),
    robots?: [ 
      {
        atAll?: boolean(name='AtAll', description='Indicates whether all group members are notified when the alert notification is sent to a DingTalk group. Valid values: true and false.', example='true'),
        webUrl?: string(name='WebUrl', description='The webhook URL of the DingTalk chatbot.', example='https://oapi.dingtalk.com/robot/send?access_token=******************************'),
      }
    ](name='Robots', description='The webhook URLs of the DingTalk chatbots.'),
    useflag?: boolean(name='Useflag', description='Indicates whether the custom alert rule is enabled. Valid values: true and false.', example='true'),
    webhooks?: [ string ](name='Webhooks', description='-'),
  }(name='Data', description='The details of the custom alert rule.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The unique ID of the request. You can troubleshoot issues based on the ID.', example='0000-ABCD-EFGH-IJKLMNOPQ'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetRemindResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRemindResponseBody(name='body'),
}

async function getRemindWithOptions(request: GetRemindRequest, runtime: Util.RuntimeOptions): GetRemindResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.remindId)) {
    body['RemindId'] = request.remindId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetRemind',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRemind(request: GetRemindRequest): GetRemindResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRemindWithOptions(request, runtime);
}

model GetSensitiveDataRequest {
  name?: string(name='Name', description='The parameters that you can specify to query the access records. Valid values:

*   dbType: the data type
*   instanceName: the name of the instance
*   databaseName: the name of the database
*   projectName: the name of the workspace
*   clusterName: the name of the cluster

The following example shows the parameters configured to query the access records of the sensitive data in the abc database of the ABC Hologres instance:

{"dbType":"hologres","instanceName":"ABC","databaseName":"abc"}

You must specify the parameters based on the compute engine that you use in your business.', example='[ {"dbType":"hologres","instanceName":"ABC","databaseName":"abc"}, {"dbType":"ODPS.ODPS","projectName":"adbc"} ]'),
  pageNo?: int32(name='PageNo', description='The number of the page to return. Minimum value:1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 1000.', example='1000'),
}

model GetSensitiveDataResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0000-ABCD-EFG****'),
  sensitiveData?: map[string]any(name='SensitiveData', description='The information of the sensitive data returned. The information includes totalCount and sensDatas.

sensDatas includes the following parameters:

*   guid: the ID of the metadata of the tenant. For example, the ID of the metadata in the MaxCompute compute engine is in the Project name.Table name.Column name format.
*   sensType: the type of the sensitive data.
*   sensLevel: the sensitivity level of the sensitive data.'),
}

model GetSensitiveDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSensitiveDataResponseBody(name='body'),
}

async function getSensitiveDataWithOptions(request: GetSensitiveDataRequest, runtime: Util.RuntimeOptions): GetSensitiveDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSensitiveData',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSensitiveData(request: GetSensitiveDataRequest): GetSensitiveDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSensitiveDataWithOptions(request, runtime);
}

model GetSuccessInstanceTrendRequest {
  projectId?: long(name='ProjectId', example='9527'),
}

model GetSuccessInstanceTrendResponseBody = {
  instanceStatusTrend?: {
    avgTrend?: [ 
      {
        count?: int32(name='Count', example='10'),
        timePoint?: string(name='TimePoint', example='01:00'),
      }
    ](name='AvgTrend'),
    todayTrend?: [ 
      {
        count?: int32(name='Count', example='10'),
        timePoint?: string(name='TimePoint', example='01:00'),
      }
    ](name='TodayTrend'),
    yesterdayTrend?: [ 
      {
        count?: int32(name='Count', example='10'),
        timePoint?: string(name='TimePoint', example='01:00'),
      }
    ](name='YesterdayTrend'),
  }(name='InstanceStatusTrend'),
  requestId?: string(name='RequestId', example='952795279527ab****'),
}

model GetSuccessInstanceTrendResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSuccessInstanceTrendResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request GetSuccessInstanceTrendRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetSuccessInstanceTrendResponse
 */
// Deprecated
async function getSuccessInstanceTrendWithOptions(request: GetSuccessInstanceTrendRequest, runtime: Util.RuntimeOptions): GetSuccessInstanceTrendResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSuccessInstanceTrend',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request GetSuccessInstanceTrendRequest
  * @return GetSuccessInstanceTrendResponse
 */
// Deprecated
async function getSuccessInstanceTrend(request: GetSuccessInstanceTrendRequest): GetSuccessInstanceTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSuccessInstanceTrendWithOptions(request, runtime);
}

model GetTopicRequest {
  topicId?: long(name='TopicId', description='The ID of the request. You can troubleshoot issues based on the ID.', example='1234'),
}

model GetTopicResponseBody = {
  data?: {
    addTime?: long(name='AddTime', example='1553524393000'),
    alertTime?: long(name='AlertTime', description='The ID of the Apsara Stack tenant account used by the alert recipient.', example='1553524393000'),
    assigner?: string(name='Assigner', description='The timestamp when the event was found.', example='952795****'),
    baselineBuffer?: long(name='BaselineBuffer', description='The status of the event. Valid values: IGNORE, NEW, FIXING, and RECOVER. A value of IGNORE indicates that the event is ignored. A value of NEW indicates that the event is a new event. A value of FIXING indicates that the event is being processed. A value of RECOVER indicates that the event is processed.', example='3600'),
    baselineId?: long(name='BaselineId', description='The timestamp when the first alert was reported.', example='1234'),
    baselineInGroupId?: int32(name='BaselineInGroupId', description='The type of the event. Valid values: SLOW and ERROR. A value of SLOW indicates that the duration of the task is significantly longer than the average duration of the task in previous cycles. A value of ERROR indicates that the task fails to run.', example='1'),
    baselineName?: string(name='BaselineName', description='The name of the node that triggered the event.'),
    baselineStatus?: string(name='BaselineStatus', description='The timestamp when the system reports the next alert.', example='SAFE'),
    buffer?: long(name='Buffer', description='The ID of the event.', example='1200'),
    dealTime?: long(name='DealTime', description='The name of the baseline to which the worst baseline instance belongs.', example='1553524393000'),
    dealUser?: string(name='DealUser', description='The ID of the baseline to which the worst baseline instance belongs.', example='952795****'),
    fixTime?: long(name='FixTime', description='The margin of the worst baseline instance. Unit: seconds.', example='1553524393000'),
    happenTime?: long(name='HappenTime', description='The ID of the Apsara Stack tenant account used by the user who last processed the event.', example='1553524393000'),
    instanceId?: long(name='InstanceId', description='The ID of the cycle of the worst baseline instance.', example='12345'),
    nextAlertTime?: long(name='NextAlertTime', description='The timestamp when the event was processed.', example='1553524393000'),
    nodeId?: long(name='NodeId', example='1234'),
    nodeName?: string(name='NodeName', description='The margin of the event. Unit: seconds.'),
    owner?: string(name='Owner', description='The status of the baseline. Valid values: ERROR, SAFE, DANGROUS, and OVER. A value of ERROR indicates that no nodes are associated with the baseline, or all nodes associated with the baseline are suspended. A value of SAFE indicates that nodes are run before the alert duration begins. A value of DANGROUS indicates that nodes are still running after the alert duration ends but the committed time does not arrive. A value of OVER indicates that nodes are still running after the committed time.', example='952795****'),
    projectId?: long(name='ProjectId', description='The ID of the instance that triggered the event.', example='1234'),
    topicId?: long(name='TopicId', description='The ID of the node that triggered the event.', example='1234'),
    topicName?: string(name='TopicName', description='The ID of the workspace to which the node that triggered the event belongs.'),
    topicStatus?: string(name='TopicStatus', description='The timestamp when the event was last processed.', example='FIXING'),
    topicType?: string(name='TopicType', description='The timestamp when the system event occurred. A time difference may exist between the time when the event occurred and the time when the event was found.', example='ERROR'),
  }(name='Data', description='The name of the event.'),
  errorCode?: string(name='ErrorCode', description='The details of the event.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='Indicates whether the request is successful.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The error message returned.', example='200'),
  requestId?: string(name='RequestId', description='The error code returned.', example='0000-ABCD-EFGH-IJKLMNOPQ'),
  success?: boolean(name='Success', description='The ID of the Apsara Stack tenant account used by the event owner.', example='true'),
}

model GetTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTopicResponseBody(name='body'),
}

/**
  * ****
  *
  * @param request GetTopicRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetTopicResponse
 */
async function getTopicWithOptions(request: GetTopicRequest, runtime: Util.RuntimeOptions): GetTopicResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.topicId)) {
    body['TopicId'] = request.topicId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTopic',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ****
  *
  * @param request GetTopicRequest
  * @return GetTopicResponse
 */
async function getTopic(request: GetTopicRequest): GetTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTopicWithOptions(request, runtime);
}

model GetTopicInfluenceRequest {
  topicId?: long(name='TopicId', example='1234'),
}

model GetTopicInfluenceResponseBody = {
  data?: {
    influences?: [ 
      {
        baselineId?: long(name='BaselineId', example='1234'),
        baselineName?: string(name='BaselineName'),
        bizdate?: long(name='Bizdate', example='1553356800000'),
        buffer?: long(name='Buffer', example='360'),
        inGroupId?: int32(name='InGroupId', example='1'),
        owner?: string(name='Owner', example='952795****'),
        priority?: int32(name='Priority', example='1'),
        projectId?: long(name='ProjectId', example='1234'),
        status?: string(name='Status', example='SAFE'),
      }
    ](name='Influences'),
    topicId?: long(name='TopicId', example='1234'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model GetTopicInfluenceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTopicInfluenceResponseBody(name='body'),
}

async function getTopicInfluenceWithOptions(request: GetTopicInfluenceRequest, runtime: Util.RuntimeOptions): GetTopicInfluenceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.topicId)) {
    body['TopicId'] = request.topicId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTopicInfluence',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTopicInfluence(request: GetTopicInfluenceRequest): GetTopicInfluenceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTopicInfluenceWithOptions(request, runtime);
}

model ImportDataSourcesRequest {
  dataSources?: string(name='DataSources', description='The configurations of the data sources to be imported. The Name, DataSourceType, SubType, Description, Content, and EnvType fields are required. For more information about the fields, see [CreateDataSource](~~211429~~).', example='[{"SubType":"","DataSourceType":"mysql","EnvType":1,"Name":"mysql_dms2","Description":"aaa","Content":"{\\"database\\":\\"mysql_chengdu_old\\",\\"password\\":\\"***\\",\\"instanceName\\":\\"rm-2vcrckb37163g7l3w\\",\\"regionId\\":\\"cn-chengdu\\",\\"tag\\":\\"rds\\",\\"rdsOwnerId\\":\\"333\\",\\"username\\":\\"mysql_chengdu2\\"}"},{"SubType":"","DataSourceType":"mysql","EnvType":1,"Name":"mysql_dms2","Description":"aaa","Content":"{\\"database\\":\\"mysql_chengdu_old\\",\\"password\\":\\"***\\",\\"instanceName\\":\\"rm-2vcrckb37163g7l3w\\",\\"regionId\\":\\"cn-chengdu\\",\\"tag\\":\\"rds\\",\\"rdsOwnerId\\":\\"143\\",\\"username\\":\\"mysql_chengdu2\\"}"}]'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace Management page to obtain the workspace ID.', example='10000'),
}

model ImportDataSourcesResponseBody = {
  data?: {
    message?: string(name='Message', description='The reason why the data sources failed to be imported. If the data sources were imported, this parameter is left empty.', example='Data source DEV XXX already exists'),
    status?: boolean(name='Status', description='Indicates whether the data sources were imported. Valid values:

*   true: All the data sources were imported.
*   false: Some of the data sources failed to be imported. You can troubleshoot issues based on the Message parameter.', example='true'),
  }(name='Data', description='The information about the import operation.'),
  requestId?: string(name='RequestId', description='The ID of the request. You can locate logs and troubleshoot issues based on the ID.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model ImportDataSourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportDataSourcesResponseBody(name='body'),
}

/**
  * You can import self-managed data sources or data sources that are exported from other Dataworks workspaces to a specified DataWorks workspace.
  * *   To import a self-managed data source to DataWorks, the data source type must be supported by DataWorks. For more information about the types of data sources supported by DataWorks, see [Supported data stores](~~181656~~).
  * *   For more information about how to export data sources from DataWorks workspaces to on-premises devices, see [ExportDataSources](~~279570~~).
  *
  * @param request ImportDataSourcesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ImportDataSourcesResponse
 */
async function importDataSourcesWithOptions(request: ImportDataSourcesRequest, runtime: Util.RuntimeOptions): ImportDataSourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataSources)) {
    query['DataSources'] = request.dataSources;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ImportDataSources',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can import self-managed data sources or data sources that are exported from other Dataworks workspaces to a specified DataWorks workspace.
  * *   To import a self-managed data source to DataWorks, the data source type must be supported by DataWorks. For more information about the types of data sources supported by DataWorks, see [Supported data stores](~~181656~~).
  * *   For more information about how to export data sources from DataWorks workspaces to on-premises devices, see [ExportDataSources](~~279570~~).
  *
  * @param request ImportDataSourcesRequest
  * @return ImportDataSourcesResponse
 */
async function importDataSources(request: ImportDataSourcesRequest): ImportDataSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return importDataSourcesWithOptions(request, runtime);
}

model ListAlertMessagesRequest {
  alertMethods?: string(name='AlertMethods', description='The notification method. Valid values:

*   MAIL: email

*   SMS: text message

    Alert notifications can be sent by text message only in the Singapore, Malaysia (Kuala Lumpur), and Germany (Frankfurt) regions.

You can specify multiple notification methods. Separate them with commas (,).', example='SMS,MAIL,PHONE'),
  alertRuleTypes?: string(name='AlertRuleTypes', description='The type of the alert rule. Valid values: GLOBAL, USER_DEFINE, and OTHER. The value GLOBAL indicates that the alert rule is a global alert rule. The value USER_DEFINE indicates that the alert rule is customized by a user. The value OTHER indicates that the alert rule is a rule of another type. You can specify multiple types. Separate them with commas (,).', example='GLOBAL,USER_DEFINE,OTHER'),
  alertUser?: string(name='AlertUser', description='The ID of the Alibaba Cloud account used by the alert recipient.', example='123456'),
  baselineId?: long(name='BaselineId', description='The ID of the baseline. This parameter takes effect if the AlertRuleTypes parameter is set to GLOBAL.

You can configure either this parameter or RemindId.', example='1234'),
  beginTime?: string(name='BeginTime', description='The beginning of the time range to query. Specify the time in the yyyy-MM-dd\\"T\\"HH:mm:ssZ format. The time must be in UTC.', example='2020-04-02T00:00:00+0800'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the yyyy-MM-dd\\"T\\"HH:mm:ssZ format. The time must be in UTC.', example='2020-04-04T00:00:00+0800'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: 1 to 30. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='10'),
  remindId?: long(name='RemindId', description='The ID of the custom alert rule. This parameter takes effect if the AlertRuleTypes parameter is set to USER_DEFINE.

You can configure either this parameter or BaselineId.', example='9527'),
}

model ListAlertMessagesResponseBody = {
  data?: {
    alertMessages?: [ 
      {
        alertId?: long(name='AlertId', description='The ID of the alert.', example='1234'),
        alertMessageStatus?: string(name='AlertMessageStatus', description='The sending status of the notification. Valid values: READY_TO_SEND, SEND_FAIL, SEND_SUCCESS, and SEND_OVERLIMIT. The value READY_TO_SEND indicates that the notification is waiting to be sent. The value SEND_FAIL indicates that the notification fails to be sent. The value SEND_SUCCESS indicates that the notification is sent. The value SEND_OVERLIMIT indicates that the number of notifications that are sent exceeds the upper limit.', example='READY_TO_SEND'),
        alertMethod?: string(name='AlertMethod', description='The notification method. Valid values: MAIL, SMS, and PHONE. The value MAIL indicates that the notification is sent by email. The value SMS indicates that the notification is sent by text message. The value PHONE indicates that the notification is sent by phone call. Only DataWorks Professional Edition and more advanced editions support the PHONE notification method.', example='SMS'),
        alertTime?: long(name='AlertTime', description='The timestamp when the alert was reported.', example='1553531401000'),
        alertUser?: string(name='AlertUser', description='The ID of the Alibaba Cloud used by the alert recipient.', example='9527952795****'),
        content?: string(name='Content', description='The content of the alert.'),
        instances?: [ 
          {
            instanceId?: long(name='InstanceId', description='The ID of the instance.', example='12345'),
            nodeId?: long(name='NodeId', description='The ID of the node.', example='1234'),
            nodeName?: string(name='NodeName', description='The name of the node.'),
            projectId?: long(name='ProjectId', description='The ID of the workspace to which the node belongs.', example='1234'),
            status?: string(name='Status', description='The status of the instance. Valid values: NOT_RUN, WAIT_TIME, WAIT_RESOURCE, RUNNING, CHECKING, CHECKING_CONDITION, FAILURE, and SUCCESS. The value NOT_RUN indicates that the instance is not run. The value WAIT_TIME indicates that the instance is waiting to be run. The value WAIT_RESOURCE indicates that the instance is waiting for resources. The value RUNNING indicates that the instance is running. The value CHECKING indicates that data quality is being checked for the node. The value CHECKING_CONDITION indicates that branch conditions are being checked for the node. The value FAILURE indicates that the instance fails to run. The value SUCCESS indicates that the instance is successfully run.', example='NOT_RUN'),
          }
        ](name='Instances', description='The instances that triggered the custom alert rule. This parameter is returned if the value of the Source parameter is REMIND_ALERT. This parameter is left empty if the value of the Source parameter is not REMIND_ALERT.'),
        nodes?: [ 
          {
            nodeId?: long(name='NodeId', description='The ID of the node.', example='1234'),
            nodeName?: string(name='NodeName', description='The name of the node.'),
            owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the owner of the node.', example='95279527952****'),
            projectId?: long(name='ProjectId', description='The ID of the workspace to which the node belongs.', example='1234'),
          }
        ](name='Nodes', description='The nodes returned for different alert sources.

*   The nodes that form a loop are returned if the value of the Source parameter is NODE_CYCLE_ALERT.
*   The nodes that are isolated are returned if the value of the Source parameter is NODE_LONELY_ALERT.'),
        remindId?: long(name='RemindId', description='The ID of the custom alert rule that was triggered. This parameter is returned if the value of the Source parameter is REMIND_ALERT.', example='1234'),
        remindName?: string(name='RemindName', description='The name of the custom alert rule that was triggered. This parameter is returned if the value of the Source parameter is REMIND_ALERT.'),
        slaAlert?: {
          baselineId?: long(name='BaselineId', description='The ID of the baseline.', example='1234'),
          baselineName?: string(name='BaselineName', description='The name of the baseline.'),
          baselineOwner?: string(name='BaselineOwner', description='The ID of the Alibaba Cloud account used by the baseline owner. Multiple IDs are separated by commas (,).', example='952795279****'),
          bizdate?: long(name='Bizdate', description='The data timestamp of the baseline instance.', example='1553443200000'),
          inGroupId?: int32(name='InGroupId', description='The ID of the cycle of the baseline instance. Valid values of the ID of an hour-level cycle: 1 to 24. The ID of a day-level cycle is 1.', example='1'),
          projectId?: long(name='ProjectId', description='The ID of the workspace to which the baseline belongs.', example='1234'),
          status?: string(name='Status', description='The status of the baseline. Valid values: ERROR, SAFE, DANGROUS, and OVER. The value ERROR indicates that no nodes are associated with the baseline, or all nodes associated with the baseline are suspended. The value SAFE indicates that nodes are run before the alert duration begins. The value DANGROUS indicates that nodes are still running after the alert duration ends but the committed time does not arrive. The value OVER indicates that nodes are still running after the committed time.', example='SAFE'),
        }(name='SlaAlert', description='The basic information about the baseline instance that triggered an alert. This parameter is returned if the value of the Source parameter is SLA_ALERT. This parameter is left empty if the value of the Source parameter is not SLA_ALERT.'),
        source?: string(name='Source', description='The type of the alert. Valid values: REMIND_ALERT, TOPIC_ALERT, SLA_ALERT, NODE_CYCLE_ALERT, and NODE_LONELY_ALERT. The value REMIND_ALERT indicates that the alert is a custom alert. The value TOPIC_ALERT indicates that the alert is an event alert. The value SLA_ALERT indicates that the alert is a baseline alert. The value NODE_CYCLE_ALERT indicates that the alert is reported for a node dependency loop. The value NODE_LONELY_ALERT indicates that the alert is reported for isolated nodes.', example='REMIND_ALERT'),
        topics?: [ 
          {
            instanceId?: long(name='InstanceId', description='The ID of the instance that triggered the event.', example='12345'),
            nodeId?: long(name='NodeId', description='The ID of the node that triggered the event.', example='1234'),
            topicId?: long(name='TopicId', description='The ID of the event.', example='1234'),
            topicName?: string(name='TopicName', description='The name of the event.'),
            topicOwner?: string(name='TopicOwner', description='The ID of the Alibaba Cloud account used by the event owner.', example='9527952795****'),
            topicStatus?: string(name='TopicStatus', description='The status of the event. Valid values: IGNORE, NEW, FIXING, and RECOVER. The value IGNORE indicates that the event is ignored. The value NEW indicates that the event is a new event. The value FIXING indicates that the event is being handled. The value RECOVER indicates that the event is handled.', example='FIXING'),
          }
        ](name='Topics', description='The events that triggered alerts. This parameter is returned if the value of the Source parameter is TOPIC_ALERT. This parameter is left empty if the value of the Source parameter is not TOPIC_ALERT.'),
      }
    ](name='AlertMessages', description='The alerts.'),
    pageNumber?: string(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: string(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: string(name='TotalCount', description='The total number of returned alerts.', example='100'),
  }(name='Data', description='The information about returned alerts.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListAlertMessagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAlertMessagesResponseBody(name='body'),
}

async function listAlertMessagesWithOptions(request: ListAlertMessagesRequest, runtime: Util.RuntimeOptions): ListAlertMessagesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertMethods)) {
    body['AlertMethods'] = request.alertMethods;
  }
  if (!Util.isUnset(request.alertRuleTypes)) {
    body['AlertRuleTypes'] = request.alertRuleTypes;
  }
  if (!Util.isUnset(request.alertUser)) {
    body['AlertUser'] = request.alertUser;
  }
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.beginTime)) {
    body['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.remindId)) {
    body['RemindId'] = request.remindId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListAlertMessages',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAlertMessages(request: ListAlertMessagesRequest): ListAlertMessagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAlertMessagesWithOptions(request, runtime);
}

model ListBaselineConfigsRequest {
  baselineTypes?: string(name='BaselineTypes', description='The type of the baseline. Valid values: DAILY and HOURLY. A value of DAILY indicates that the baseline is a day-level baseline. A value of HOURLY indicates that the baseline is an hour-level baseline. Separate multiple baseline types with commas (,).', example='DAILY,HOURLY'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the baseline owner.', example='95279527****'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: 1 to 30. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 100. Default value: 10.', example='10'),
  priority?: string(name='Priority', description='The priority of the baseline. Valid values: 1, 3, 5, 7, and 8. Separate multiple priorities with commas (,).', example='1,3,5,7,8'),
  projectId?: long(name='ProjectId', description='The ID of the workspace. You can call the ListProjects operation to query the ID.', example='1234'),
  searchText?: string(name='SearchText', description='The keyword in the baseline name used to search for the baseline.'),
  useflag?: boolean(name='Useflag', description='Specifies whether to enable the baseline. Valid values: true and false.', example='true'),
}

model ListBaselineConfigsResponseBody = {
  data?: {
    baselines?: [ 
      {
        baselineId?: long(name='BaselineId', description='The ID of the baseline.', example='1234'),
        baselineName?: string(name='BaselineName', description='The name of the baseline.'),
        baselineType?: string(name='BaselineType', description='The type of the baseline. Valid values: DAILY and HOURLY. A value of DAILY indicates that the baseline is a day-level baseline. A value of HOURLY indicates that the baseline is an hour-level baseline.', example='DAILY'),
        expHour?: int32(name='ExpHour', description='The hour in the alert time of the day-level baseline. Valid values: 0 to 47.', example='7'),
        expMinu?: int32(name='ExpMinu', description='The minute in the alert time of the day-level baseline. Valid values: 0 to 59.', example='30'),
        hourExpDetail?: string(name='HourExpDetail', description='The alert time of the hour-level baseline. This parameter is presented as key-value pairs in the JSON format. The key indicates the ID of the cycle, and the value is presented in the hh:mm format. Valid values of hh: 0 to 47. Valid values of mm: 0 to 59.', example='{"1":"03:28","2":"04:28","3":"05:28","4":"06:28","5":"07:28","6":"08:28","7":"09:28","8":"10:28","9":"11:28","10":"12:28","11":"13:28","12":"14:28","13":"15:28","14":"16:28","15":"17:28","16":"18:28","17":"19:28","18":"20:28","19":"21:28","20":"22:28","21":"23:28","22":"24:28","23":"25:28","24":"26:28"}'),
        hourSlaDetail?: string(name='HourSlaDetail', description='The committed time of the hour-level baseline. This parameter is presented as key-value pairs in the JSON format. The key indicates the ID of the cycle, and the value is presented in the hh:mm format. Valid values of hh: 0 to 47. Valid values of mm: 0 to 59.', example='{"1":"03:58","2":"04:58","3":"05:58","4":"06:58","5":"07:58","6":"08:58","7":"09:58","8":"10:58","9":"11:58","10":"12:58","11":"13:58","12":"14:58","13":"15:58","14":"16:58","15":"17:58","16":"18:58","17":"19:58","18":"20:58","19":"21:58","20":"22:58","21":"23:58","22":"24:58","23":"25:58","24":"26:58"}'),
        isDefault?: boolean(name='IsDefault', description='Indicates whether the baseline is a default baseline of the workspace. Valid values: true and false.', example='true'),
        owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the baseline owner. Multiple IDs are separated by commas (,).', example='952795****'),
        priority?: int32(name='Priority', description='The priority of the baseline. Valid values: 1, 3, 5, 7, and 8.', example='1'),
        projectId?: long(name='ProjectId', description='The ID of the workspace to which the baseline belongs.', example='9527'),
        slaHour?: int32(name='SlaHour', description='The hour in the committed time of the day-level baseline. Valid values: 0 to 47.', example='9'),
        slaMinu?: int32(name='SlaMinu', description='The minute in the alert time of the day-level baseline. Valid values: 0 to 59.', example='30'),
        useFlag?: boolean(name='UseFlag', description='Indicates whether the baseline is enabled. Valid values: true and false.', example='true'),
      }
    ](name='Baselines', description='The list of baselines.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned on each page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of baselines returned.', example='100'),
  }(name='Data', description='The return results of the request.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The unique ID of the request. You can troubleshoot issues based on the ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ListBaselineConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBaselineConfigsResponseBody(name='body'),
}

async function listBaselineConfigsWithOptions(request: ListBaselineConfigsRequest, runtime: Util.RuntimeOptions): ListBaselineConfigsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineTypes)) {
    body['BaselineTypes'] = request.baselineTypes;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.searchText)) {
    body['SearchText'] = request.searchText;
  }
  if (!Util.isUnset(request.useflag)) {
    body['Useflag'] = request.useflag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListBaselineConfigs',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBaselineConfigs(request: ListBaselineConfigsRequest): ListBaselineConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBaselineConfigsWithOptions(request, runtime);
}

model ListBaselineStatusesRequest {
  baselineTypes?: string(name='BaselineTypes', description='The type of the baseline. Valid values: DAILY and HOURLY. The value DAILY indicates that the baseline is scheduled by day. The value HOURLY indicates that the baseline is scheduled by hour. Multiple types are separated by commas (,).', example='DAILY,HOURLY'),
  bizdate?: string(name='Bizdate', description='The data timestamp of the baseline instance. Specify the time in the ISO 8601 standard in the yyyy-MM-dd\\"T\\"HH:mm:ssZ format. The time must be in UTC.', example='2020-07-07T00:00:00+0800'),
  finishStatus?: string(name='FinishStatus', description='The status of the baseline instance. Valid values: UNFINISH and FINISH. The value UNFINISH indicates that the baseline instance is still running. The value FINISH indicates that the baseline instance finishes running. Multiple states are separated by commas (,).', example='FINISH,UNFINISH'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the baseline owner.', example='9527952795****'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: 1 to 30. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='10'),
  priority?: string(name='Priority', description='The priority of the baseline. Valid values: 1, 3, 5, 7, and 8. Multiple priorities are separated by commas (,).', example='1,3,5,7,8'),
  searchText?: string(name='SearchText', description='The keyword of the baseline name used to search for the baseline.', example='Keyword of the baseline name'),
  status?: string(name='Status', description='The status of the baseline. Valid values: ERROR, SAFE, DANGEROUS, and OVER. The value ERROR indicates that no nodes are associated with the baseline, or all nodes associated with the baseline are suspended. The value SAFE indicates that nodes finish running before the alerting time. The value DANGEROUS indicates that nodes are still running after the alerting time but before the committed completion time. The value OVER indicates that nodes are still running after the committed completion time. Multiple states are separated by commas (,).', example='SAFE,DANGROUS,OVER'),
  topicId?: long(name='TopicId', description='The ID of the event.', example='1234'),
}

model ListBaselineStatusesResponseBody = {
  data?: {
    baselineStatuses?: [ 
      {
        baselineId?: long(name='BaselineId', description='The ID of the baseline.', example='1234'),
        baselineName?: string(name='BaselineName', description='The name of the baseline.', example='Baseline name'),
        bizdate?: long(name='Bizdate', description='The data timestamp of the baseline instance.', example='1553443200000'),
        buffer?: long(name='Buffer', description='The margin of the baseline instance. Unit: seconds.', example='1800'),
        endCast?: long(name='EndCast', description='The predicted time when the baseline instance finished running.', example='1553531400000'),
        expTime?: long(name='ExpTime', description='The alerting time of the baseline instance.', example='1553531400000'),
        finishStatus?: string(name='FinishStatus', description='The status of the baseline instance. Valid values: UNFINISH and FINISH. The value UNFINISH indicates that the baseline instance is still running. The value FINISH indicates that the baseline instance finishes running.', example='UNFINISH'),
        finishTime?: long(name='FinishTime', description='The timestamp of the actual time when the baseline instance finished running. This parameter is returned if the value of the FinishStatus parameter is FINISH.', example='1553531400000'),
        inGroupId?: int32(name='InGroupId', description='The ID of the scheduling cycle of the baseline instance. For a baseline instance that is scheduled by day, the value of this parameter is 1. For a baseline instance that is scheduled by hour, the value of this parameter ranges from 1 to 24.', example='1'),
        owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the baseline owner. Multiple IDs are separated by commas (,).', example='9527952795****'),
        priority?: int32(name='Priority', description='The priority of the baseline. Valid values: 1, 3, 5, 7, and 8.', example='1'),
        projectId?: long(name='ProjectId', description='The ID of the workspace to which the baseline belongs.', example='1234'),
        slaTime?: long(name='SlaTime', description='The actual time when the baseline instance finished running.', example='1553531400000'),
        status?: string(name='Status', description='The status of the baseline. Valid values: ERROR, SAFE, DANGEROUS, and OVER. The value ERROR indicates that no nodes are associated with the baseline, or all nodes associated with the baseline are suspended. The value SAFE indicates that nodes finish running before the alerting time. The value DANGEROUS indicates that nodes are still running after the alerting time but before the committed completion time. The value OVER indicates that nodes are still running after the committed completion time.', example='SAFE'),
      }
    ](name='BaselineStatuses', description='The list of baseline instances.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of baseline instances.', example='100'),
  }(name='Data', description='The list of baseline instances returned.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListBaselineStatusesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBaselineStatusesResponseBody(name='body'),
}

async function listBaselineStatusesWithOptions(request: ListBaselineStatusesRequest, runtime: Util.RuntimeOptions): ListBaselineStatusesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineTypes)) {
    body['BaselineTypes'] = request.baselineTypes;
  }
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.finishStatus)) {
    body['FinishStatus'] = request.finishStatus;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.searchText)) {
    body['SearchText'] = request.searchText;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.topicId)) {
    body['TopicId'] = request.topicId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListBaselineStatuses',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBaselineStatuses(request: ListBaselineStatusesRequest): ListBaselineStatusesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBaselineStatusesWithOptions(request, runtime);
}

model ListBaselinesRequest {
  baselineTypes?: string(name='BaselineTypes'),
  enable?: boolean(name='Enable'),
  owner?: string(name='Owner'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  priority?: string(name='Priority'),
  projectId?: long(name='ProjectId'),
  searchText?: string(name='SearchText'),
}

model ListBaselinesResponseBody = {
  data?: {
    baselines?: [ 
      {
        alertEnabled?: boolean(name='AlertEnabled'),
        alertMarginThreshold?: int32(name='AlertMarginThreshold'),
        baselineId?: long(name='BaselineId'),
        baselineName?: string(name='BaselineName'),
        baselineType?: string(name='BaselineType'),
        enabled?: boolean(name='Enabled'),
        overTimeSettings?: [ 
          {
            cycle?: int32(name='Cycle'),
            time?: string(name='Time'),
          }
        ](name='OverTimeSettings'),
        owner?: string(name='Owner'),
        priority?: int32(name='Priority'),
        projectId?: long(name='ProjectId'),
      }
    ](name='Baselines'),
    pageNumber?: string(name='PageNumber'),
    pageSize?: string(name='PageSize'),
    totalCount?: string(name='TotalCount'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListBaselinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBaselinesResponseBody(name='body'),
}

async function listBaselinesWithOptions(request: ListBaselinesRequest, runtime: Util.RuntimeOptions): ListBaselinesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineTypes)) {
    body['BaselineTypes'] = request.baselineTypes;
  }
  if (!Util.isUnset(request.enable)) {
    body['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.searchText)) {
    body['SearchText'] = request.searchText;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListBaselines',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBaselines(request: ListBaselinesRequest): ListBaselinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBaselinesWithOptions(request, runtime);
}

model ListBusinessRequest {
  keyword?: string(name='Keyword', description='The keyword that is used to perform a fuzzy match.', example='my'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the workspace ID. You must configure either this parameter or the ProjectIdentifier parameter to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the workspace name. You must configure either this parameter or ProjectId parameter to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model ListBusinessResponseBody = {
  data?: {
    business?: [ 
      {
        businessId?: long(name='BusinessId', description='The ID of the workflow.', example='3000001'),
        businessName?: string(name='BusinessName', description='The name of the workflow.', example='My first workflow'),
        description?: string(name='Description', description='The description of the workflow.', example='My first workflow'),
        owner?: string(name='Owner', description='The owner of the workflow.', example='34824327****'),
        projectId?: long(name='ProjectId', description='The ID of the workspace to which the workflow belongs.', example='10000'),
        useType?: string(name='UseType', description='The module to which the workflow belongs. Valid values: NORMAL and MANUAL_BIZ. The value NORMAL indicates that the workflow belongs to auto triggered workflows. The value MANUAL_BIZ indicates that the workflow belongs to manually triggered workflows.', example='NORMAL'),
      }
    ](name='Business', description='The details of the workflow.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='13'),
  }(name='Data', description='The information about the workflows returned.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListBusinessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBusinessResponseBody(name='body'),
}

async function listBusinessWithOptions(request: ListBusinessRequest, runtime: Util.RuntimeOptions): ListBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListBusiness',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBusiness(request: ListBusinessRequest): ListBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBusinessWithOptions(request, runtime);
}

model ListCalcEnginesRequest {
  calcEngineType?: string(name='CalcEngineType', example='ODPS'),
  envType?: string(name='EnvType', example='PRD'),
  name?: string(name='Name', example='abc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='27'),
}

model ListCalcEnginesResponseBody = {
  data?: {
    calcEngines?: [ 
      {
        bindingProjectId?: int32(name='BindingProjectId', example='27'),
        bindingProjectName?: string(name='BindingProjectName', example='abc'),
        calcEngineType?: string(name='CalcEngineType', example='ODPS'),
        dwRegion?: string(name='DwRegion', example='cn-zhangjiakou'),
        engineId?: int32(name='EngineId', example='35'),
        engineInfo?: map[string]any(name='EngineInfo'),
        envType?: string(name='EnvType', example='PRD'),
        gmtCreate?: string(name='GmtCreate', example='Oct 10, 2019 3:42:44 PM'),
        isDefault?: boolean(name='IsDefault', example='true'),
        name?: string(name='Name', example='abc'),
        region?: string(name='Region', example='cn-zhangjiakou'),
        taskAuthType?: string(name='TaskAuthType', example='PROJECT'),
        tenantId?: long(name='TenantId', example='1234567'),
      }
    ](name='CalcEngines'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1ec92159376****'),
  success?: boolean(name='Success', example='true'),
}

model ListCalcEnginesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCalcEnginesResponseBody(name='body'),
}

async function listCalcEnginesWithOptions(request: ListCalcEnginesRequest, runtime: Util.RuntimeOptions): ListCalcEnginesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.calcEngineType)) {
    query['CalcEngineType'] = request.calcEngineType;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCalcEngines',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCalcEngines(request: ListCalcEnginesRequest): ListCalcEnginesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCalcEnginesWithOptions(request, runtime);
}

model ListConnectionsRequest {
  connectionType?: string(name='ConnectionType', example='rds'),
  envType?: int32(name='EnvType', example='1'),
  name?: string(name='Name', example='abc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='76086'),
  status?: string(name='Status', example='1'),
  subType?: string(name='SubType', example='mysql'),
}

model ListConnectionsResponseBody = {
  data?: {
    connections?: [ 
      {
        bindingCalcEngineId?: int32(name='BindingCalcEngineId', example='123'),
        connectStatus?: int32(name='ConnectStatus', example='1'),
        connectionType?: string(name='ConnectionType', example='mysql'),
        content?: string(name='Content', example='{\\"database\\":\\"xxx\\",\\"instanceName\\":\\"xxx\\",\\"password\\":\\"xxx\\",\\"rdsOwnerId\\":\\"xxx\\",\\"tag\\":\\"rds\\",\\"username\\":\\"xxx\\"}'),
        defaultEngine?: boolean(name='DefaultEngine', example='false'),
        description?: string(name='Description', example='a connection'),
        envType?: int32(name='EnvType', example='1'),
        gmtCreate?: string(name='GmtCreate', example='Mar 17, 2021 4:09:32 PM'),
        gmtModified?: string(name='GmtModified', example='Mar 17, 2021 4:09:32 PM'),
        id?: int32(name='Id', example='1'),
        name?: string(name='Name', example='abc'),
        operator?: string(name='Operator', example='193543050****'),
        projectId?: int32(name='ProjectId', example='123'),
        sequence?: int32(name='Sequence', example='300'),
        shared?: boolean(name='Shared', example='false'),
        status?: int32(name='Status', example='1'),
        subType?: string(name='SubType', example='mysql'),
        tenantId?: long(name='TenantId', example='1234567'),
      }
    ](name='Connections'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='3'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc14115159376359****'),
  success?: boolean(name='Success', example='true'),
}

model ListConnectionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListConnectionsResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ListConnectionsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListConnectionsResponse
 */
// Deprecated
async function listConnectionsWithOptions(request: ListConnectionsRequest, runtime: Util.RuntimeOptions): ListConnectionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListConnections',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ListConnectionsRequest
  * @return ListConnectionsResponse
 */
// Deprecated
async function listConnections(request: ListConnectionsRequest): ListConnectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConnectionsWithOptions(request, runtime);
}

model ListDIProjectConfigRequest {
  destinationType?: string(name='DestinationType', description='The type of the destination data source of the sync solution. This parameter cannot be left empty.

Valid values: analyticdb_for_mysql, odps, elasticsearch, holo, mysql, and polardb. You can call the ListDIProjectConfig operation to query the supported types of destination data sources.', example='elasticsearch'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace Management page to obtain the workspace ID.', example='1000'),
  sourceType?: string(name='SourceType', description='The type of the source data source of the sync solution.

Valid values: oracle, mysql, polardb, datahub, drds, and analyticdb_for_mysql. You can call the ListDIProjectConfig operation to query the supported types of source data sources.

If you do not set this parameter, DataWorks applies the default global configuration to all the source data sources of the preceding types.', example='mysql'),
}

model ListDIProjectConfigResponseBody = {
  data?: {
    config?: string(name='Config', description='The default global configuration of sync solutions. The value indicates the processing rules of different types of DDL messages. Example:

{"RENAMECOLUMN":"WARNING","DROPTABLE":"WARNING","CREATETABLE":"WARNING","MODIFYCOLUMN":"WARNING","TRUNCATETABLE":"WARNING","DROPCOLUMN":"WARNING","ADDCOLUMN":"WARNING","RENAMETABLE":"WARNING"}

Field description:

*   RENAMECOLUMN: renames the column.
*   DROPTABLE: deletes the table.
*   CREATETABLE: creates a table.
*   MODIFYCOLUMN: changes the column data type.
*   TRUNCATETABLE: clears the table.
*   DROPCOLUMN: deletes the column.
*   ADDCOLUMN: creates a column.
*   RENAMETABLE: renames the table.

DataWorks processes a DDL message of a specific type based on the following policies after it receives the message:

*   WARNING: ignores the message and records an alert in real-time sync logs. The alert contains information about the situation that the message is ignored because of an execution error.
*   IGNORE: discards the message and does not send it to the destination data source.
*   CRITICAL: terminates the real-time sync node and sets the node status to Failed.
*   NORMAL: sends the message to the destination data source to process the message. Each destination data source may process DDL messages based on its own business logic. If DataWorks adopts the NORMAL policy, DataWorks only forwards DDL messages.', example='{"RENAMECOLUMN":"WARNING","DROPTABLE":"WARNING","CREATETABLE":"WARNING","MODIFYCOLUMN":"WARNING","TRUNCATETABLE":"WARNING","DROPCOLUMN":"WARNING","ADDCOLUMN":"WARNING","RENAMETABLE":"WARNING"}'),
  }(name='Data', description='The information about the query operation.'),
  requestId?: string(name='RequestId', description='The ID of the request. You can locate logs and troubleshoot issues based on the ID.', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model ListDIProjectConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDIProjectConfigResponseBody(name='body'),
}

/**
  * DataWorks allows you to set the default global configuration for only the processing rules of DDL messages in sync solutions. After you configure the **processing rules of DDL messages** in sync solutions, the configuration is set as the default global configuration and applies to all real-time sync nodes. You can also modify the **processing rules of DDL messages** based on your business requirements. For more information, see [Sync solutions](~~199008~~).
  *
  * @param request ListDIProjectConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListDIProjectConfigResponse
 */
async function listDIProjectConfigWithOptions(request: ListDIProjectConfigRequest, runtime: Util.RuntimeOptions): ListDIProjectConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDIProjectConfig',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * DataWorks allows you to set the default global configuration for only the processing rules of DDL messages in sync solutions. After you configure the **processing rules of DDL messages** in sync solutions, the configuration is set as the default global configuration and applies to all real-time sync nodes. You can also modify the **processing rules of DDL messages** based on your business requirements. For more information, see [Sync solutions](~~199008~~).
  *
  * @param request ListDIProjectConfigRequest
  * @return ListDIProjectConfigResponse
 */
async function listDIProjectConfig(request: ListDIProjectConfigRequest): ListDIProjectConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDIProjectConfigWithOptions(request, runtime);
}

model ListDagsRequest {
  opSeq?: long(name='OpSeq', description='The environment of the workspace. Valid values: PROD and DEV. PROD indicates the production environment. DEV indicates the development environment.', example='123'),
  projectEnv?: string(name='ProjectEnv', description='The HTTP status code returned.', example='PROD'),
}

model ListDagsResponseBody = {
  data?: {
    dags?: [ 
      {
        bizdate?: long(name='Bizdate', description='The name of the DAG.', example='1605052800000'),
        createTime?: long(name='CreateTime', description='The ID of the workspace.', example='1605052800000'),
        createUser?: string(name='CreateUser', description='The data timestamp.', example='1736629400048545'),
        dagId?: long(name='DagId', description='The time at which the DAG was scheduled to run.', example='351249682'),
        finishTime?: long(name='FinishTime', description='The time at which the DAG was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1605052800000'),
        gmtdate?: long(name='Gmtdate', description='The time at which the DAG started to run.', example='1605052800000'),
        modifyTime?: long(name='ModifyTime', description='The sequence number of the operation.', example='1605052800000'),
        name?: string(name='Name', description='The time at which the DAG was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='test_dag'),
        opSeq?: long(name='OpSeq', example='123'),
        projectId?: long(name='ProjectId', description='The ID of the DAG.', example='112345'),
        startTime?: long(name='StartTime', description='The user who created the DAG.', example='1605052800000'),
        status?: string(name='Status', description='The time at which the DAG finished running. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='FAILURE'),
        type?: string(name='Type', description='The status of the DAG. Valid values: CREATED, RUNNING, FAILURE, and SUCCESS.', example='MANUAL_FLOW'),
      }
    ](name='Dags', description='The type of the DAG. Valid values: MANUAL, SMOKE_TEST, SUPPLY_DATA, and BUSINESS_PROCESS_DAG.'),
  }(name='Data', description='The entities returned.'),
  errorCode?: string(name='ErrorCode', description='Indicates whether the request is successful.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error code returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of the request. You can locate logs and troubleshoot issues based on the ID.', example='200'),
  requestId?: string(name='RequestId', description='The error message returned.', example='7782a299-b291-4fee-8424-cf8058efa8e8'),
  success?: boolean(name='Success', description='The details of DAGs.', example='true'),
}

model ListDagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDagsResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to **ListDags**.
  *
  * @param request ListDagsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListDagsResponse
 */
async function listDagsWithOptions(request: ListDagsRequest, runtime: Util.RuntimeOptions): ListDagsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.opSeq)) {
    body['OpSeq'] = request.opSeq;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDags',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The operation that you want to perform. Set the value to **ListDags**.
  *
  * @param request ListDagsRequest
  * @return ListDagsResponse
 */
async function listDags(request: ListDagsRequest): ListDagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDagsWithOptions(request, runtime);
}

model ListDataServiceApiAuthoritiesRequest {
  apiNameKeyword?: string(name='ApiNameKeyword', description='The keyword in the name of the API. The keyword can be used to search for the API whose name contains the keyword.', example='My API name'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.', example='10000'),
  tenantId?: long(name='TenantId', description='The ID of the tenant.', example='10001'),
}

model ListDataServiceApiAuthoritiesResponseBody = {
  data?: {
    apiAuthorizationList?: [ 
      {
        apiId?: long(name='ApiId', description='The ID of the API.', example='10002'),
        apiName?: string(name='ApiName', description='The name of the API.', example='My API name'),
        apiPath?: string(name='ApiPath', description='The path of the API.', example='/test/1'),
        apiStatus?: int32(name='ApiStatus', description='The status of the API. Valid values: 0 and 1. The value 0 indicates that the API is not published. The value 1 indicates that the API is published.', example='0'),
        authorizationRecords?: [ 
          {
            createdTime?: string(name='CreatedTime', description='The time when the access permissions on the API were granted to other users.', example='2020-06-23T00:21:01+0800'),
            creatorId?: string(name='CreatorId', description='The ID of the Alibaba Cloud account used by the user who granted other users the access permissions on the API.', example='12345'),
            endTime?: string(name='EndTime', description='The end time of the validity period of the authorization.', example='2020-06-24T00:21:01+0800'),
            projectId?: long(name='ProjectId', description='The ID of the workspace to which the access permissions on the API are granted.', example='10004'),
          }
        ](name='AuthorizationRecords', description='The authorization records.'),
        createdTime?: string(name='CreatedTime', description='The time when the API was created.', example='2020-06-23T00:21:01+0800'),
        creatorId?: string(name='CreatorId', description='The ID of the Alibaba Cloud account used by the API owner.', example='12345'),
        groupId?: string(name='GroupId', description='The ID of the group.', example='ab123'),
        modifiedTime?: string(name='ModifiedTime', description='The time when the API was last updated.', example='2020-06-23T00:21:01+0800'),
        projectId?: long(name='ProjectId', description='The ID of the workspace.', example='10000'),
        tenantId?: long(name='TenantId', description='The ID of the tenant.', example='10001'),
      }
    ](name='ApiAuthorizationList', description='The APIs on which other users are granted the access permissions and the authorization records.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page. The value of this parameter is the same as that of the PageNumber parameter in the request.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: 10. Maximum value: 100.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='Data', description='The APIs on which other users are granted the access permissions.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='0'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='Normal'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListDataServiceApiAuthoritiesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataServiceApiAuthoritiesResponseBody(name='body'),
}

async function listDataServiceApiAuthoritiesWithOptions(request: ListDataServiceApiAuthoritiesRequest, runtime: Util.RuntimeOptions): ListDataServiceApiAuthoritiesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiNameKeyword)) {
    body['ApiNameKeyword'] = request.apiNameKeyword;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServiceApiAuthorities',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataServiceApiAuthorities(request: ListDataServiceApiAuthoritiesRequest): ListDataServiceApiAuthoritiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServiceApiAuthoritiesWithOptions(request, runtime);
}

model ListDataServiceApiTestRequest {
  apiId?: long(name='ApiId', description='The ID of the DataService Studio API on which tests are performed.', example='12345'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100.', example='10'),
}

model ListDataServiceApiTestResponseBody = {
  data?: [ 
    {
      apiId?: long(name='ApiId', description='The ID of the DataService Studio API on which the test is performed.', example='2343'),
      costTime?: int32(name='CostTime', description='The time that is consumed to complete the test.', example='10'),
      createTime?: long(name='CreateTime', description='The time when the test was initiated.', example='1651824913000'),
      paramMap?: string(name='ParamMap', description='The request parameters configured for the test.', example='{"name":"test"}'),
      retCode?: long(name='RetCode', description='The status code returned for the test. If the test is not complete, this parameter is not returned.', example='0'),
      retResult?: string(name='RetResult', description='The result returned for the test.', example='{"id":2}'),
      status?: string(name='Status', description='The status of the test. Valid values: RUNNING and FINISHED.', example='FINISHED'),
      testId?: long(name='TestId', description='The ID of the test.', example='123'),
    }
  ](name='Data', description='The list of test records.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ESDAFWEA'),
}

model ListDataServiceApiTestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataServiceApiTestResponseBody(name='body'),
}

async function listDataServiceApiTestWithOptions(request: ListDataServiceApiTestRequest, runtime: Util.RuntimeOptions): ListDataServiceApiTestResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServiceApiTest',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataServiceApiTest(request: ListDataServiceApiTestRequest): ListDataServiceApiTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServiceApiTestWithOptions(request, runtime);
}

model ListDataServiceApisRequest {
  apiNameKeyword?: string(name='ApiNameKeyword', description='The ID of the tenant.'),
  apiPathKeyword?: string(name='ApiPathKeyword', description='The keyword in the name of the API. The keyword can be used to search for the API whose name contains the keyword.', example='/test/'),
  creatorId?: string(name='CreatorId', description='The keyword in the path of the API. The keyword can be used to search for the API whose path contains the keyword.', example='12345'),
  pageNumber?: int32(name='PageNumber', description='The operation that you want to perform. Set the value to **ListDataServiceApis**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='10'),
  projectId?: long(name='ProjectId', description='The number of entries to return on each page. Default value: 10. A maximum of 100 entries can be returned on each page.', example='10000'),
  tenantId?: long(name='TenantId', description='The ID of the workspace.', example='10001'),
}

model ListDataServiceApisResponseBody = {
  data?: {
    apis?: [ 
      {
        apiId?: long(name='ApiId', description='The status of the API. Valid values: 0 and 1. A value of 0 indicates that the API is not published. A value of 1 indicates that the API is published.', example='10002'),
        apiMode?: int32(name='ApiMode', description='The ID of the API.', example='0'),
        apiName?: string(name='ApiName', description='The time when the API was created.'),
        apiPath?: string(name='ApiPath', description='The ID of the tenant.', example='/test/1'),
        createdTime?: string(name='CreatedTime', description='The request method of the API. Valid values: 0, 1, 2, and 3. A value of 0 indicates the GET method. A value of 1 indicates the POST method. A value of 2 indicates the PUT method. A value of 3 indicates the DELETE method. APIs generated in wizard or script mode support the GET and POST methods. APIs generated by registration support the GET, POST, PUT, and DELETE methods.', example='2020-06-23T00:21:01+0800'),
        creatorId?: string(name='CreatorId', description='The format in which the response of the API request is returned. Valid values: 0 and 1. A value of 0 indicates the JSON format. A value of 1 indicates the XML format. APIs generated in wizard or script mode support the JSON format. APIs generated by registration support the JSON and XML formats.', example='1234567'),
        description?: string(name='Description', description='The ID of the API group.'),
        folderId?: long(name='FolderId', description='The description of the API.', example='0'),
        groupId?: string(name='GroupId', description='The ID of the Alibaba Cloud account used by the user who last modified the API.', example='abcde123456789'),
        modifiedTime?: string(name='ModifiedTime', description='The scope in which the API is visible. Valid values: 0 and 1. A value of 0 indicates that the API is visible within the workspace. A value of 1 indicates that the API is visible only to the API creator.', example='2020-06-23T00:21:01+0800'),
        operatorId?: string(name='OperatorId', description='The time when the API was last modified.', example='2345678'),
        projectId?: long(name='ProjectId', description='The type of the API. Valid values: 0, 1, and 2. A value of 0 indicates that the API is generated in wizard mode. A value of 1 indicates that the API is generated in script mode. A value of 2 indicates that the API is generated by registration.', example='10000'),
        protocols?: [ int32 ](name='Protocols', description='The path of the API.'),
        registrationDetails?: {
          failedResultSample?: string(name='FailedResultSample', description='The sample success response of the API.', example='{"success": false}'),
          registrationErrorCodes?: [ 
            {
              errorCode?: string(name='ErrorCode', description='The error message.', example='1001'),
              errorMessage?: string(name='ErrorMessage', description='The error codes returned for the API generated by registration.', example='fail to call'),
              errorSolution?: string(name='ErrorSolution', description='The error code.', example='retry'),
            }
          ](name='RegistrationErrorCodes', description='The body of the request initiated to call the backend service.'),
          registrationRequestParameters?: [ 
            {
              columnName?: string(name='ColumnName', description='The request parameters of the API generated by registration.', example='column1'),
              defaultValue?: string(name='DefaultValue', description='The description of the parameter.', example='default1'),
              exampleValue?: string(name='ExampleValue', description='The data type of the parameter. Valid values: 0, 1, 2, 3, 4, and 5. A value of 0 indicates the STRING data type. A value of 1 indicates the INT data type. A value of 2 indicates the LONG data type. A value of 3 indicates the FLOAT data type. A value of 4 indicates the DOUBLE data type. A value of 5 indicates the BOOLEAN data type.', example='example1'),
              isRequiredParameter?: boolean(name='IsRequiredParameter', description='The sample value of the parameter.', example='true'),
              parameterDataType?: int32(name='ParameterDataType', description='The operator used for the value of the parameter. Valid values: 0, 1, 2, and 3. A value of 0 indicates that the operator is Equal. A value of 1 indicates that the operator is Like. A value of 2 indicates that the operator is Const. A value of 3 indicates that the operator is In. APIs generated in wizard mode support the Equal, Like, and In operators. APIs generated in script mode support the Equal operator. APIs generated by registration support the Equal and Const operators.', example='0'),
              parameterDescription?: string(name='ParameterDescription', description='The position of the parameter. Valid values: 0, 1, 2, and 3. A value of 0 indicates that the parameter is in the URL path of the request. A value of 1 indicates that the parameter is in the Query parameter of the request URL. A value of 2 indicates that the parameter is in the request header. A value of 3 indicates that the parameter is in the request body. APIs generated in wizard or script mode support only the Query position. APIs generated by registration whose request method is GET or DELETE support the Query and Head positions. APIs generated by registration whose request method is PUT or POST support the Query, Head, and Body positions.', example='description1'),
              parameterName?: string(name='ParameterName', description='The name of the associated field. This parameter is supported only if the API is generated in wizard mode.', example='name1'),
              parameterOperator?: int32(name='ParameterOperator', description='The default value of the parameter.', example='0'),
              parameterPosition?: int32(name='ParameterPosition', description='The name of the parameter.', example='0'),
            }
          ](name='RegistrationRequestParameters', description='The solution used to resolve the issue.'),
          serviceContentType?: int32(name='ServiceContentType', description='The URL of the backend service.', example='0'),
          serviceHost?: string(name='ServiceHost', description='The details of the API generated by registration. This parameter is returned only if the API is generated by registration.', example='http://example.aliyundoc.com'),
          servicePath?: string(name='ServicePath', description='The format in which the response of the API request is returned. Valid values: 0 and 1. A value of 0 indicates the JSON format. A value of 1 indicates the XML format. APIs generated in wizard or script mode support the JSON format. APIs generated by registration support the JSON and XML formats.', example='/index'),
          serviceRequestBodyDescription?: string(name='ServiceRequestBodyDescription', description='The sample error response of the API.', example='{"abc":1}'),
          successfulResultSample?: string(name='SuccessfulResultSample', description='The path of the backend service.', example='{"success": true}'),
        }(name='RegistrationDetails', description='The protocols used by the API. Valid values: 0 and 1. A value of 0 indicates that the API uses HTTP. A value of 1 indicates that the API uses HTTPS. Multiple protocols are presented in a list.'),
        requestMethod?: int32(name='RequestMethod', description='The ID of the folder in which the API is stored.', example='0'),
        responseContentType?: int32(name='ResponseContentType', description='The ID of the workspace.', example='0'),
        scriptDetails?: {
          isPagedResponse?: boolean(name='IsPagedResponse', description='Indicates whether the entries are returned by page.', example='true'),
          script?: string(name='Script', description='The SQL script.', example='select a from t'),
          scriptConnection?: {
            connectionId?: long(name='ConnectionId', description='The ID of the data source.', example='123'),
            tableName?: string(name='TableName', description='The name of the table in the data source.', example='t'),
          }(name='ScriptConnection', description='The data source information of the API generated in script mode.'),
          scriptRequestParameters?: [ 
            {
              columnName?: string(name='ColumnName', description='The name of the associated field. This parameter is supported only if the API is generated in wizard mode.', example='column1'),
              defaultValue?: string(name='DefaultValue', description='The default value of the parameter.', example='default1'),
              exampleValue?: string(name='ExampleValue', description='The sample value of the parameter.', example='example1'),
              isRequiredParameter?: boolean(name='IsRequiredParameter', description='Indicates whether the request parameter is required.', example='true'),
              parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values:

- 0: STRING
- 1: INT
- 2: LONG
- 3: FLOAT
- 4: DOUBLE
- 5: BOOLEAN', example='0'),
              parameterDescription?: string(name='ParameterDescription', description='The description of the parameter.', example='description1'),
              parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param1'),
              parameterOperator?: int32(name='ParameterOperator', description='The operator used for the value of the parameter. Valid values:

- 0: Equal
- 1: Like
- 2: Const
- 3: In

APIs generated in wizard mode support the Equal, Like, and In operators. APIs generated in script mode support the Equal operator. APIs generated by registration support the Equal and Const operators.', example='0'),
              parameterPosition?: int32(name='ParameterPosition', description='The position of the parameter. Valid values:

- 0: Path
- 1: Query
- 2: Head
- 3: Body

APIs generated in wizard or script mode support only the Query position. APIs generated by registration whose request method is GET or DELETE support the Query and Head positions. APIs generated by registration whose request method is PUT or POST support the Query, Head, and Body positions.', example='0'),
            }
          ](name='ScriptRequestParameters', description='The request parameters of the API generated in script mode.'),
          scriptResponseParameters?: [ 
            {
              columnName?: string(name='ColumnName', description='The name of the associated field. This parameter is supported only if the API is generated in wizard mode.', example='column2'),
              exampleValue?: string(name='ExampleValue', description='The sample value of the parameter.', example='example2'),
              parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values:

- 0: STRING
- 1: INT
- 2: LONG
- 3: FLOAT
- 4: DOUBLE
- 5: BOOLEAN', example='0'),
              parameterDescription?: string(name='ParameterDescription', description='The description of the parameter.', example='description2'),
              parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param2'),
            }
          ](name='ScriptResponseParameters', description='The response parameters of the API generated in script mode.'),
        }(name='ScriptDetails', description='The details of the API generated in script mode. This parameter is returned only if the API is generated in script mode.'),
        status?: int32(name='Status', description='The timeout period of the API request. Unit: milliseconds.', example='0'),
        tenantId?: long(name='TenantId', description='The name of the API.', example='10000'),
        timeout?: int32(name='Timeout', description='The APIs in the development state.', example='10000'),
        visibleRange?: int32(name='VisibleRange', description='The ID of the Alibaba Cloud account used by the creator of the API.', example='0'),
        wizardDetails?: {
          isPagedResponse?: boolean(name='IsPagedResponse', description='Indicates whether the entries are returned by page.', example='true'),
          wizardConnection?: {
            connectionId?: long(name='ConnectionId', description='The ID of the data source.', example='123'),
            tableName?: string(name='TableName', description='The name of the table in the data source.', example='t'),
          }(name='WizardConnection', description='The data source information of the API generated in wizard mode.'),
          wizardRequestParameters?: [ 
            {
              columnName?: string(name='ColumnName', description='The name of the associated field. This parameter is supported only if the API is generated in wizard mode.', example='column1'),
              defaultValue?: string(name='DefaultValue', description='The default value of the parameter.', example='default1'),
              exampleValue?: string(name='ExampleValue', description='The sample value of the parameter.', example='example1'),
              isRequiredParameter?: boolean(name='IsRequiredParameter', description='Indicates whether the request parameter is required.', example='true'),
              parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values: 0, 1, 2, 3, 4, and 5. A value of 0 indicates the STRING data type. A value of 1 indicates the INT data type. A value of 2 indicates the LONG data type. A value of 3 indicates the FLOAT data type. A value of 4 indicates the DOUBLE data type. A value of 5 indicates the BOOLEAN data type.', example='0'),
              parameterDescription?: string(name='ParameterDescription', description='The description of the parameter.', example='description1'),
              parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param1'),
              parameterOperator?: int32(name='ParameterOperator', description='The operator used for the value of the parameter. Valid values: 0, 1, 2, and 3. A value of 0 indicates that the operator is Equal. A value of 1 indicates that the operator is Like. A value of 2 indicates that the operator is Const. A value of 3 indicates that the operator is In. APIs generated in wizard mode support the Equal, Like, and In operators. APIs generated in script mode support the Equal operator. APIs generated by registration support the Equal and Const operators.', example='0'),
              parameterPosition?: int32(name='ParameterPosition', description='The position of the parameter. Valid values: 0, 1, 2, and 3. A value of 0 indicates that the parameter is in the URL path of the request. A value of 1 indicates that the parameter is in the Query parameter of the request URL. A value of 2 indicates that the parameter is in the request header. A value of 3 indicates that the parameter is in the request body. APIs generated in wizard or script mode support only the Query position. APIs generated by registration whose request method is GET or DELETE support the Query and Head positions. APIs generated by registration whose request method is PUT or POST support the Query, Head, and Body positions.', example='0'),
            }
          ](name='WizardRequestParameters', description='The request parameters of the API generated in wizard mode.'),
          wizardResponseParameters?: [ 
            {
              columnName?: string(name='ColumnName', description='The name of the associated field. This parameter is supported only if the API is generated in wizard mode.', example='column2'),
              exampleValue?: string(name='ExampleValue', description='The sample value of the parameter.', example='example2'),
              parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values: 0, 1, 2, 3, 4, and 5. A value of 0 indicates the STRING data type. A value of 1 indicates the INT data type. A value of 2 indicates the LONG data type. A value of 3 indicates the FLOAT data type. A value of 4 indicates the DOUBLE data type. A value of 5 indicates the BOOLEAN data type.', example='0'),
              parameterDescription?: string(name='ParameterDescription', description='The description of the parameter.', example='description2'),
              parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param2'),
            }
          ](name='WizardResponseParameters', description='The response parameters of the API generated in wizard mode.'),
        }(name='WizardDetails', description='The details of the API generated in wizard mode. This parameter is returned only if the API is generated in wizard mode.'),
      }
    ](name='Apis', description='The total number of entries.'),
    pageNumber?: int32(name='PageNumber', description='The information about the APIs in the development state.', example='1'),
    pageSize?: int32(name='PageSize', description='The page number of the returned page. The value of this parameter is the same as that of the PageNumber parameter in the request.', example='10'),
    totalCount?: int32(name='TotalCount', description='The number of entries returned per page. Default value: 10. A maximum of 100 entries can be returned on each page.', example='100'),
  }(name='Data', description='The error code.'),
  errorCode?: string(name='ErrorCode', description='Indicates whether the request is successful.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The ID of the request.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of the Alibaba Cloud account used by the creator of the API. The ID can be used to search for the API created by the creator.', example='200'),
  requestId?: string(name='RequestId', description='The HTTP status code.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='The error message.', example='true'),
}

model ListDataServiceApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataServiceApisResponseBody(name='body'),
}

async function listDataServiceApisWithOptions(request: ListDataServiceApisRequest, runtime: Util.RuntimeOptions): ListDataServiceApisResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiNameKeyword)) {
    body['ApiNameKeyword'] = request.apiNameKeyword;
  }
  if (!Util.isUnset(request.apiPathKeyword)) {
    body['ApiPathKeyword'] = request.apiPathKeyword;
  }
  if (!Util.isUnset(request.creatorId)) {
    body['CreatorId'] = request.creatorId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServiceApis',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataServiceApis(request: ListDataServiceApisRequest): ListDataServiceApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServiceApisWithOptions(request, runtime);
}

model ListDataServiceApplicationsRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='10'),
  projectIdList?: string(name='ProjectIdList', description='The ID of the workspace based on which you want to query the basic information of applications. You can specify multiple IDs. Separate them with commas (,). You must specify at least one workspace ID. You can specify a maximum of 50 workspace IDs.', example='10000,100001'),
  tenantId?: long(name='TenantId', description='The ID of the tenant.', example='100002'),
}

model ListDataServiceApplicationsResponseBody = {
  data?: {
    applications?: [ 
      {
        applicationId?: long(name='ApplicationId', description='The ID of the application.', example='20000'),
        applicationName?: string(name='ApplicationName', description='The name of the application.', example='My application'),
        projectId?: long(name='ProjectId', description='The ID of the workspace.', example='10000'),
      }
    ](name='Applications', description='The basic information of the applications.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page. The value of this parameter is the same as that of the PageNumber parameter in the request.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: 10. Maximum value: 100.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='Data', description='The returned result.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='0'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='Normal'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0000-ABCD-EFG***'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListDataServiceApplicationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataServiceApplicationsResponseBody(name='body'),
}

async function listDataServiceApplicationsWithOptions(request: ListDataServiceApplicationsRequest, runtime: Util.RuntimeOptions): ListDataServiceApplicationsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectIdList)) {
    body['ProjectIdList'] = request.projectIdList;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServiceApplications',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataServiceApplications(request: ListDataServiceApplicationsRequest): ListDataServiceApplicationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServiceApplicationsWithOptions(request, runtime);
}

model ListDataServiceAuthorizedApisRequest {
  apiNameKeyword?: string(name='ApiNameKeyword', description='The keyword in API names. The keyword is used to search for the APIs whose names contain the keyword.', example='My API Name'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.', example='10000'),
  tenantId?: long(name='TenantId', description='The ID of the tenant.', example='10001'),
}

model ListDataServiceAuthorizedApisResponseBody = {
  data?: {
    apiAuthorizedList?: [ 
      {
        apiId?: long(name='ApiId', description='The ID of the API.', example='10002'),
        apiName?: string(name='ApiName', description='The name of the API.', example='My API Name'),
        apiPath?: string(name='ApiPath', description='The path of the API.', example='/test/1'),
        apiStatus?: int32(name='ApiStatus', description='The status of the API. Valid values: 0 and 1. The value 0 indicates that the API is not published. The value 1 indicates that the API is published.', example='0'),
        createdTime?: string(name='CreatedTime', description='The time when the API was created.', example='2020-06-23T00:21:01+0800'),
        creatorId?: string(name='CreatorId', description='The ID of the Alibaba Cloud account used by the API owner.', example='12345'),
        grantCreatedTime?: string(name='GrantCreatedTime', description='The time when the access permissions of the API were granted.', example='2020-06-23T00:21:01+0800'),
        grantEndTime?: string(name='GrantEndTime', description='The expiration time for the granted access permissions of the API.', example='2020-06-24T00:21:01+0800'),
        grantOperatorId?: string(name='GrantOperatorId', description='The ID of the Alibaba Cloud account used by the user who granted the access permissions of the API.', example='23456'),
        groupId?: string(name='GroupId', description='The ID of the API group.', example='abcde123456789'),
        modifiedTime?: string(name='ModifiedTime', description='The time when the API was last updated.', example='2020-06-23T00:21:01+0800'),
        projectId?: long(name='ProjectId', description='The ID of the workspace.', example='10000'),
        tenantId?: long(name='TenantId', description='The ID of the tenant.', example='10001'),
      }
    ](name='ApiAuthorizedList', description='The list of APIs that you are authorized to access.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page. The value of this parameter is the same as that of the PageNumber parameter in the request.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: 10. Maximum value: 100.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='100'),
  }(name='Data', description='The information about the APIs that you are authorized to access.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListDataServiceAuthorizedApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataServiceAuthorizedApisResponseBody(name='body'),
}

async function listDataServiceAuthorizedApisWithOptions(request: ListDataServiceAuthorizedApisRequest, runtime: Util.RuntimeOptions): ListDataServiceAuthorizedApisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiNameKeyword)) {
    body['ApiNameKeyword'] = request.apiNameKeyword;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServiceAuthorizedApis',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataServiceAuthorizedApis(request: ListDataServiceAuthorizedApisRequest): ListDataServiceAuthorizedApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServiceAuthorizedApisWithOptions(request, runtime);
}

model ListDataServiceFoldersRequest {
  folderNameKeyword?: string(name='FolderNameKeyword', description='The keyword in folder names. The keyword is used to search for folders whose names contain this keyword.', example='Keyword in folder names'),
  groupId?: string(name='GroupId', description='The ID of the business process to which the folders belong.', example='ds_123abc'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.', example='10001'),
  tenantId?: long(name='TenantId', description='The ID of the tenant.', example='10002'),
}

model ListDataServiceFoldersResponseBody = {
  folderPagingResult?: {
    folders?: [ 
      {
        createdTime?: string(name='CreatedTime', description='The time when the folder was created.', example='2020-09-24T18:37:51+0800'),
        folderId?: long(name='FolderId', description='The ID of the folder.', example='11'),
        folderName?: string(name='FolderName', description='The name of the folder.', example='test1'),
        groupId?: string(name='GroupId', description='The ID of the business process to which the folder belongs.', example='ds_1234'),
        modifiedTime?: string(name='ModifiedTime', description='The time when the folder was last modified.', example='2020-09-24T18:37:51+0800'),
        parentId?: long(name='ParentId', description='The ID of the parent folder. The ID of the root folder in a business process is 0, and the ID of a folder created by a user in a business process is greater than 0.', example='0'),
        projectId?: long(name='ProjectId', description='The ID of the workspace.', example='10001'),
        tenantId?: long(name='TenantId', description='The ID of the tenant.', example='10002'),
      }
    ](name='Folders', description='The folders.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page. The value of this parameter is the same as that of the PageNumber parameter in the request.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: 10. Maximum value: 100.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='100'),
  }(name='FolderPagingResult', description='The paging result for the folders.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0000-ABCD-EF****'),
}

model ListDataServiceFoldersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataServiceFoldersResponseBody(name='body'),
}

async function listDataServiceFoldersWithOptions(request: ListDataServiceFoldersRequest, runtime: Util.RuntimeOptions): ListDataServiceFoldersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderNameKeyword)) {
    body['FolderNameKeyword'] = request.folderNameKeyword;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServiceFolders',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataServiceFolders(request: ListDataServiceFoldersRequest): ListDataServiceFoldersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServiceFoldersWithOptions(request, runtime);
}

model ListDataServiceGroupsRequest {
  groupNameKeyword?: string(name='GroupNameKeyword', description='The keyword of a business process name. The keyword is used to search for business processes whose names contain this keyword.', example='Test business process'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.', example='10000'),
  tenantId?: long(name='TenantId', description='The ID of the tenant.', example='10001'),
}

model ListDataServiceGroupsResponseBody = {
  groupPagingResult?: {
    groups?: [ 
      {
        apiGatewayGroupId?: string(name='ApiGatewayGroupId', description='The ID of the API group that is associated with the business process in the API Gateway console.', example='100abc'),
        createdTime?: string(name='CreatedTime', description='The time when the business process was created.', example='2020-09-24T18:37:51+0800'),
        creatorId?: string(name='CreatorId', description='The user identifier (UID) of the creator of the business process. The value of this parameter may be empty for creators of some existing business processes.', example='10001'),
        description?: string(name='Description', description='The description of the business process.', example='Test'),
        groupId?: string(name='GroupId', description='The ID of the business process.', example='ds_123abc'),
        groupName?: string(name='GroupName', description='The name of the business process.', example='Test'),
        modifiedTime?: string(name='ModifiedTime', description='The time when the business process was modified.', example='2020-09-24T18:37:51+0800'),
        projectId?: long(name='ProjectId', description='The ID of the workspace.', example='10002'),
        tenantId?: long(name='TenantId', description='The ID of the tenant.', example='10003'),
      }
    ](name='Groups', description='The business processes.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page. The value of this parameter is the same as that of the PageNumber parameter in the request.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: 10. Maximum value: 100.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='GroupPagingResult', description='The paging result for the business processes.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0000-ABCD-EF****'),
}

model ListDataServiceGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataServiceGroupsResponseBody(name='body'),
}

async function listDataServiceGroupsWithOptions(request: ListDataServiceGroupsRequest, runtime: Util.RuntimeOptions): ListDataServiceGroupsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupNameKeyword)) {
    body['GroupNameKeyword'] = request.groupNameKeyword;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServiceGroups',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataServiceGroups(request: ListDataServiceGroupsRequest): ListDataServiceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServiceGroupsWithOptions(request, runtime);
}

model ListDataServicePublishedApisRequest {
  apiNameKeyword?: string(name='ApiNameKeyword', description='The ID of the tenant.'),
  apiPathKeyword?: string(name='ApiPathKeyword', description='The keyword in the name of the API. The keyword can be used to search for the API whose name contains the keyword.', example='/test/'),
  creatorId?: string(name='CreatorId', description='The keyword in the path of the API. The keyword can be used to search for the API whose path contains the keyword.', example='12345'),
  pageNumber?: int32(name='PageNumber', description='The operation that you want to perform. Set the value to **ListDataServicePublishedApis**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='10'),
  projectId?: long(name='ProjectId', description='The number of entries to return on each page. Default value: 10. A maximum of 100 entries can be returned on each page.', example='10000'),
  tenantId?: long(name='TenantId', description='The ID of the workspace.', example='10001'),
}

model ListDataServicePublishedApisResponseBody = {
  data?: {
    apis?: [ 
      {
        apiId?: long(name='ApiId', description='The status of the API. Valid values: 0 and 1. A value of 0 indicates that the API is not published. A value of 1 indicates that the API is published.', example='10002'),
        apiMode?: int32(name='ApiMode', description='The ID of the API.', example='0'),
        apiName?: string(name='ApiName', description='The time when the API was created.'),
        apiPath?: string(name='ApiPath', description='The ID of the tenant.', example='/test/1'),
        createdTime?: string(name='CreatedTime', description='The request method of the API. Valid values: 0, 1, 2, and 3. A value of 0 indicates the GET method. A value of 1 indicates the POST method. A value of 2 indicates the PUT method. A value of 3 indicates the DELETE method. APIs generated in wizard or script mode support the GET and POST methods. APIs generated by registration support the GET, POST, PUT, and DELETE methods.', example='2020-06-23T00:21:01+0800'),
        creatorId?: string(name='CreatorId', description='The format in which the response of the API request is returned. Valid values: 0 and 1. A value of 0 indicates the JSON format. A value of 1 indicates the XML format. APIs generated in wizard or script mode support the JSON format. APIs generated by registration support the JSON and XML formats.', example='1234567'),
        description?: string(name='Description', description='The ID of the API group.'),
        groupId?: string(name='GroupId', description='The ID of the Alibaba Cloud account used by the user who last modified the API.', example='ab123'),
        modifiedTime?: string(name='ModifiedTime', description='The scope in which the API is visible. Valid values: 0 and 1. A value of 0 indicates that the API is visible within the workspace. A value of 1 indicates that the API is visible only to the API creator.', example='2020-06-23T00:21:01+0800'),
        operatorId?: string(name='OperatorId', description='The time when the API was last modified.', example='2345678'),
        projectId?: long(name='ProjectId', description='The type of the API. Valid values: 0, 1, and 2. A value of 0 indicates that the API is generated in wizard mode. A value of 1 indicates that the API is generated in script mode. A value of 2 indicates that the API is generated by registration.', example='10000'),
        protocols?: [ int32 ](name='Protocols', description='The path of the API.'),
        registrationDetails?: {
          failedResultSample?: string(name='FailedResultSample', description='The sample success response of the API.', example='{"success": false}'),
          registrationErrorCodes?: [ 
            {
              errorCode?: string(name='ErrorCode', description='The error message.', example='1001'),
              errorMessage?: string(name='ErrorMessage', description='The error codes returned for the API generated by registration.', example='fail to call'),
              errorSolution?: string(name='ErrorSolution', description='The error code.', example='retry'),
            }
          ](name='RegistrationErrorCodes', description='The body of the request initiated to call the backend service.'),
          registrationRequestParameters?: [ 
            {
              defaultValue?: string(name='DefaultValue', description='The description of the parameter.', example='default1'),
              exampleValue?: string(name='ExampleValue', description='The operator used for the value of the parameter. Valid values:

*   0: Equal
*   1: Like
*   2: Const
*   3: In

APIs generated in wizard mode support the Equal, Like, and In operators. APIs generated in script mode support the Equal operator. APIs generated by registration support the Equal and Const operators.', example='example1'),
              isRequiredParameter?: boolean(name='IsRequiredParameter', description='The data type of the parameter. Valid values:

*   0: STRING
*   1: INT
*   2: LONG
*   3: FLOAT
*   4: DOUBLE
*   5: BOOLEAN', example='true'),
              parameterDataType?: int32(name='ParameterDataType', description='The sample value of the parameter.', example='0'),
              parameterDescription?: string(name='ParameterDescription', description='The position of the parameter. Valid values:

*   0: Path
*   1: Query
*   2: Head
*   3: Body

APIs generated in wizard or script mode support only the Query position. APIs generated by registration whose request method is GET or DELETE support the Query and Head positions. APIs generated by registration whose request method is PUT or POST support the Query, Head, and Body positions.', example='description1'),
              parameterName?: string(name='ParameterName', description='The request parameters of the API generated by registration.', example='name1'),
              parameterOperator?: int32(name='ParameterOperator', description='The default value of the parameter.', example='0'),
              parameterPosition?: int32(name='ParameterPosition', description='The name of the parameter.', example='0'),
            }
          ](name='RegistrationRequestParameters', description='The solution used to resolve the issue.'),
          serviceContentType?: int32(name='ServiceContentType', description='The URL of the backend service.', example='0'),
          serviceHost?: string(name='ServiceHost', description='The details of the API generated by registration. This parameter is returned only if the API is generated by registration.', example='http://example.aliyundoc.com'),
          servicePath?: string(name='ServicePath', description='The format in which the response of the API request is returned. Valid values: 0 and 1. A value of 0 indicates the JSON format. A value of 1 indicates the XML format. APIs generated in wizard or script mode support the JSON format. APIs generated by registration support the JSON and XML formats.', example='/index'),
          serviceRequestBodyDescription?: string(name='ServiceRequestBodyDescription', description='The sample error response of the API.', example='{"abc":1}'),
          successfulResultSample?: string(name='SuccessfulResultSample', description='The path of the backend service.', example='{"success": true}'),
        }(name='RegistrationDetails', description='The protocol used by the API. Valid values: 0 and 1. A value of 0 indicates that the API uses HTTP. A value of 1 indicates that the API uses HTTPS.'),
        requestMethod?: int32(name='RequestMethod', description='The description of the API.', example='0'),
        responseContentType?: int32(name='ResponseContentType', description='The ID of the workspace.', example='0'),
        scriptDetails?: {
          failedResultSample?: string(name='FailedResultSample', description='The sample error response of the API.', example='{"success": false}'),
          isPagedResponse?: boolean(name='IsPagedResponse', description='Indicates whether the entries are returned by page.', example='true'),
          script?: string(name='Script', description='The SQL script.', example='select a from t'),
          scriptConnection?: {
            connectionId?: long(name='ConnectionId', description='The ID of the data source.', example='123'),
            tableName?: string(name='TableName', description='The name of the table in the data source.', example='t'),
          }(name='ScriptConnection', description='The data source information of the API generated in script mode.'),
          scriptErrorCodes?: [ 
            {
              errorCode?: string(name='ErrorCode', description='The error code.', example='1001'),
              errorMessage?: string(name='ErrorMessage', description='The error message.', example='fail to call'),
              errorSolution?: string(name='ErrorSolution', description='The solution used to resolve the issue.', example='retry'),
            }
          ](name='ScriptErrorCodes', description='The error codes returned for the API generated in script mode.'),
          scriptRequestParameters?: [ 
            {
              defaultValue?: string(name='DefaultValue', description='The default value of the parameter.', example='default1'),
              exampleValue?: string(name='ExampleValue', description='The sample value of the parameter.', example='example1'),
              isRequiredParameter?: boolean(name='IsRequiredParameter', description='Indicates whether the request parameter is required.', example='true'),
              parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values:

- 0: STRING
- 1: INT
- 2: LONG
- 3: FLOAT
- 4: DOUBLE
- 5: BOOLEAN', example='0'),
              parameterDescription?: string(name='ParameterDescription', description='The description of the parameter.', example='description1'),
              parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param1'),
              parameterOperator?: int32(name='ParameterOperator', description='The operator used for the value of the parameter. Valid values:

- 0: Equal
- 1: Like
- 2: Const
- 3: In

APIs generated in wizard mode support the Equal, Like, and In operators. APIs generated in script mode support the Equal operator. APIs generated by registration support the Equal and Const operators.', example='0'),
              parameterPosition?: int32(name='ParameterPosition', description='The position of the parameter. Valid values:

- 0: Path
- 1: Query
- 2: Head
- 3: Body

APIs generated in wizard or script mode support only the Query position. APIs generated by registration whose request method is GET or DELETE support the Query and Head positions. APIs generated by registration whose request method is PUT or POST support the Query, Head, and Body positions.', example='0'),
            }
          ](name='ScriptRequestParameters', description='The request parameters of the API generated in script mode.'),
          scriptResponseParameters?: [ 
            {
              exampleValue?: string(name='ExampleValue', description='The sample value of the parameter.', example='example2'),
              parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values:

- 0: STRING
- 1: INT
- 2: LONG
- 3: FLOAT
- 4: DOUBLE
- 5: BOOLEAN', example='0'),
              parameterDescription?: string(name='ParameterDescription', description='The description of the parameter.', example='description2'),
              parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param2'),
            }
          ](name='ScriptResponseParameters', description='The response parameters of the API generated in script mode.'),
          successfulResultSample?: string(name='SuccessfulResultSample', description='The sample success response of the API.', example='{"success": true}'),
        }(name='ScriptDetails', description='The details of the API generated in script mode. This parameter is returned only if the API is generated in script mode.'),
        status?: int32(name='Status', description='The timeout period of the API request. Unit: milliseconds.', example='1'),
        tenantId?: long(name='TenantId', description='The name of the API.', example='10001'),
        timeout?: int32(name='Timeout', description='The information about the APIs in the published state.', example='10000'),
        visibleRange?: int32(name='VisibleRange', description='The ID of the Alibaba Cloud account used by the creator of the API.', example='0'),
        wizardDetails?: {
          failedResultSample?: string(name='FailedResultSample', description='The sample error response of the API.', example='{"success": false}'),
          isPagedResponse?: boolean(name='IsPagedResponse', description='Indicates whether the entries are returned by page.', example='true'),
          successfulResultSample?: string(name='SuccessfulResultSample', description='The sample success response of the API.', example='{"success": true}'),
          wizardConnection?: {
            connectionId?: long(name='ConnectionId', description='The ID of the data source.', example='123'),
            tableName?: string(name='TableName', description='The name of the table in the data source.', example='t'),
          }(name='WizardConnection', description='The data source information of the API generated in wizard mode.'),
          wizardErrorCodes?: [ 
            {
              errorCode?: string(name='ErrorCode', description='The error code.', example='1001'),
              errorMessage?: string(name='ErrorMessage', description='The error message.', example='fail to call'),
              errorSolution?: string(name='ErrorSolution', description='The solution used to resolve the issue.', example='retry'),
            }
          ](name='WizardErrorCodes', description='The error codes returned for the API generated in wizard mode.'),
          wizardRequestParameters?: [ 
            {
              defaultValue?: string(name='DefaultValue', description='The default value of the parameter.', example='default1'),
              exampleValue?: string(name='ExampleValue', description='The sample value of the parameter.', example='example1'),
              isRequiredParameter?: boolean(name='IsRequiredParameter', description='Indicates whether the request parameter is required.', example='true'),
              parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values: 0, 1, 2, 3, 4, and 5. A value of 0 indicates the STRING data type. A value of 1 indicates the INT data type. A value of 2 indicates the LONG data type. A value of 3 indicates the FLOAT data type. A value of 4 indicates the DOUBLE data type. A value of 5 indicates the BOOLEAN data type.', example='0'),
              parameterDescription?: string(name='ParameterDescription', description='The description of the parameter.', example='description1'),
              parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param1'),
              parameterOperator?: int32(name='ParameterOperator', description='The operator used for the value of the parameter. Valid values: 0, 1, 2, and 3. A value of 0 indicates that the operator is Equal. A value of 1 indicates that the operator is Like. A value of 2 indicates that the operator is Const. A value of 3 indicates that the operator is In. APIs generated in wizard mode support the Equal, Like, and In operators. APIs generated in script mode support the Equal operator. APIs generated by registration support the Equal and Const operators.', example='0'),
              parameterPosition?: int32(name='ParameterPosition', description='The position of the parameter. Valid values: 0, 1, 2, and 3. A value of 0 indicates that the parameter is in the URL path of the request. A value of 1 indicates that the parameter is in the Query parameter of the request URL. A value of 2 indicates that the parameter is in the request header. A value of 3 indicates that the parameter is in the request body. APIs generated in wizard or script mode support only the Query position. APIs generated by registration whose request method is GET or DELETE support the Query and Head positions. APIs generated by registration whose request method is PUT or POST support the Query, Head, and Body positions.', example='0'),
            }
          ](name='WizardRequestParameters', description='The request parameters of the API generated in wizard mode.'),
          wizardResponseParameters?: [ 
            {
              exampleValue?: string(name='ExampleValue', description='The sample value of the parameter.', example='example2'),
              parameterDataType?: int32(name='ParameterDataType', description='The data type of the parameter. Valid values: 0, 1, 2, 3, 4, and 5. A value of 0 indicates the STRING data type. A value of 1 indicates the INT data type. A value of 2 indicates the LONG data type. A value of 3 indicates the FLOAT data type. A value of 4 indicates the DOUBLE data type. A value of 5 indicates the BOOLEAN data type.', example='0'),
              parameterDescription?: string(name='ParameterDescription', description='The description of the parameter.', example='description2'),
              parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param2'),
            }
          ](name='WizardResponseParameters', description='The response parameters of the API generated in wizard mode.'),
        }(name='WizardDetails', description='The details of the API generated in wizard mode. This parameter is returned only if the API is generated in wizard mode.'),
      }
    ](name='Apis', description='The total number of entries.'),
    pageNumber?: int32(name='PageNumber', description='The APIs in the published state.', example='1'),
    pageSize?: int32(name='PageSize', description='The page number of the returned page. The value of this parameter is the same as that of the PageNumber parameter in the request.', example='10'),
    totalCount?: int32(name='TotalCount', description='The number of entries returned per page. Default value: 10. A maximum of 100 entries can be returned on each page.', example='100'),
  }(name='Data', description='The error code.'),
  errorCode?: string(name='ErrorCode', description='Indicates whether the request is successful.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The ID of the request.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of the Alibaba Cloud account used by the creator of the API. The ID can be used to search for the API created by the creator.', example='200'),
  requestId?: string(name='RequestId', description='The HTTP status code.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='The error message.', example='true'),
}

model ListDataServicePublishedApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataServicePublishedApisResponseBody(name='body'),
}

async function listDataServicePublishedApisWithOptions(request: ListDataServicePublishedApisRequest, runtime: Util.RuntimeOptions): ListDataServicePublishedApisResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiNameKeyword)) {
    body['ApiNameKeyword'] = request.apiNameKeyword;
  }
  if (!Util.isUnset(request.apiPathKeyword)) {
    body['ApiPathKeyword'] = request.apiPathKeyword;
  }
  if (!Util.isUnset(request.creatorId)) {
    body['CreatorId'] = request.creatorId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDataServicePublishedApis',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataServicePublishedApis(request: ListDataServicePublishedApisRequest): ListDataServicePublishedApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataServicePublishedApisWithOptions(request, runtime);
}

model ListDataSourcesRequest {
  dataSourceType?: string(name='DataSourceType', description='The status of the data source. Valid values:

*   ENABLED: The data source is accessible.
*   DISABLED: The data source is inaccessible.', example='rds'),
  envType?: int32(name='EnvType', description='The number of the page to return. The value of this parameter must be an integer greater than or equal to 1.', example='1'),
  name?: string(name='Name', description='The subtype of the data source. This parameter takes effect only if the DataSourceType parameter is set to rds.

If the DataSourceType parameter is set to rds, this parameter can be set to mysql, sqlserver, or postgresql.', example='test'),
  pageNumber?: int32(name='PageNumber', description='The ID of the request.', example='1'),
  pageSize?: int32(name='PageSize', description='The HTTP status code returned.', example='10'),
  projectId?: long(name='ProjectId', description='The type of the data source. Valid values:

*   odps
*   mysql
*   rds
*   oss
*   sqlserver
*   polardb
*   oracle
*   mongodb
*   emr
*   postgresql
*   analyticdb_for_mysql
*   hybriddb_for_postgresql
*   holo', example='1'),
  status?: string(name='Status', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='ENABLED'),
  subType?: string(name='SubType', description='The environment in which the data source is used. Valid values: 0 and 1. The value 0 indicates the development environment. The value 1 indicates the production environment.', example='mysql'),
}

model ListDataSourcesResponseBody = {
  data?: {
    dataSources?: [ 
      {
        bindingCalcEngineId?: long(name='BindingCalcEngineId', example='123'),
        connectStatus?: int32(name='ConnectStatus', description='The description of the data source.', example='1'),
        content?: string(name='Content', description='The ID of the compute engine instance with which the data source is associated.', example='{"pubEndpoint":"http://service.cn.maxcompute.aliyun.com/api","accessId":"TMP.3KecGjvzy3i8MYfn2BGHgF7EHGyBFZcHm7GgngrABVRyvvKQrfF5kskR36xP361C3dqwbGo7SGYptAeGyiTwHXqLaBUvYC","securityToken":null,"endpoint":"http://service.cn.maxcompute.aliyun-inc.com/api","accessKey":"***","name":"PRE_PROJECT_A_engine","project":"PRE_PROJECT_A","vpcEndpoint":"http://service.cn.maxcompute.aliyun-inc.com/api","region":"cn-shanghai","authType":"2"}'),
        dataSourceType?: string(name='DataSourceType', description='Indicates whether the compute engine instance that is associated with the data source is the default compute engine instance used by data sources of the same type.', example='rds'),
        defaultEngine?: boolean(name='DefaultEngine', description='The ID of the Alibaba Cloud account that is used to last modify the data source.', example='false'),
        description?: string(name='Description', description='The time when the data source was created. Example: Mar 17, 2021 4:09:32 PM.', example='a connection'),
        envType?: int32(name='EnvType', description='The field that is used to sort data sources. Data sources are sorted in descending order based on the value of this parameter.', example='1'),
        gmtCreate?: string(name='GmtCreate', description='Indicates whether the data source is a shared data source.', example='Mar 17, 2021 4:09:32 PM'),
        gmtModified?: string(name='GmtModified', description='The status of the data source. Valid values:

*   1: The data source is accessible.
*   2: The data source is inaccessible.', example='Mar 17, 2021 4:09:32 PM'),
        id?: long(name='Id', description='The ID of the tenant.', example='1'),
        name?: string(name='Name', description='The ID of the data source.', example='abc'),
        operator?: string(name='Operator', description='The data connection string. The value of this parameter is in the JSON format. Sample connection strings of common data sources:

*   MaxCompute

<!---->

    json
    {
      "pubEndpoint": "http://service.cn.maxcompute.aliyun.com/api",
      "accessId": "xxxxxxx",
      "securityToken": null,
      "endpoint": "http://service.cn.maxcompute.aliyun-inc.com/api",
      "accessKey": "***",
      "name": "PRE_PROJECT_A_engine",
      "project": "PRE_PROJECT_A",
      "vpcEndpoint": "http://service.cn.maxcompute.aliyun-inc.com/api",
      "region": "cn-shanghai",
      "authType": "2"
    }

*   mysql

<!---->

    json
    {
      "configType": "1",
      "database": "mysql_d111b",
      "instanceName": "rm-xxxxxx",
      "password": "***",
      "rdsOwnerId": "12133xxxxxx",
      "tag": "rds",
      "username": "mysql_db111"
    }

*   sqlserver

<!---->

    json
    {
      "configType": "1",
      "jdbcUrl": "jdbc:sqlserver://rm-xxxxx.sqlserver.rds.aliyuncs.com:1433;DatabaseName=sqlserver_db1",
      "password": "***",
      "tag": "public",
      "username": "sqlserver_db111"
    }

*   oss

<!---->

    json
    {
      "accessId": "LTAINbR9Uxxxx",
      "accessKey": "***",
      "bucket": "bigxxx1223",
      "configType": "1",
      "endpoint": "http://oss-cn-hangzhou.aliyuncs.com",
      "tag": "public"
    }

*   postgresql

<!---->

    json
    {
      "configType": "1",
      "database": "cdp_xxx",
      "instanceName": "rm-xxxx",
      "password": "***",
      "rdsOwnerId": "121xxxxx",
      "tag": "rds",
      "username": "cdp_xxx"
    }

*   ads

<!---->

    json
    {
      "configType": "1",
      "password": "***",
      "schema": "ads_demo",
      "tag": "public",
      "url": "ads-xxx-xxxx.cn-hangzhou-1.ads.aliyuncs.com:3029",
      "username": "lslslsls"
    }', example='193543050****'),
        projectId?: int32(name='ProjectId', description='The time when the data source was last modified. Example: Mar 17, 2021 4:09:32 PM.', example='123'),
        sequence?: int32(name='Sequence', description='The type of the data source. Valid values:

*   odps
*   mysql
*   rds
*   oss
*   sqlserver
*   polardb
*   oracle
*   mongodb
*   emr
*   postgresql
*   analyticdb_for_mysql
*   hybriddb_for_postgresql
*   holo', example='300'),
        shared?: boolean(name='Shared', description='The name of the data source.', example='false'),
        status?: int32(name='Status', description='The subtype of the data source. This parameter takes effect only if the DataSourceType parameter is set to rds.

If the DataSourceType parameter is set to rds, this parameter can be set to mysql, sqlserver, or postgresql.', example='1'),
        subType?: string(name='SubType', description='The environment in which the data source is used. Valid values:

*   0: development environment
*   1: production environment', example='mysql'),
        tenantId?: long(name='TenantId', example='1234567'),
      }
    ](name='DataSources', description='The ID of the workspace to which the data source belongs.'),
    pageNumber?: int32(name='PageNumber', description='The total number of data sources.', example='1'),
    pageSize?: int32(name='PageSize', description='The data sources.', example='20'),
    totalCount?: int32(name='TotalCount', description='The status of the data source. Valid values:

*   1: The data source is accessible.
*   2: The data source is inaccessible.', example='233'),
  }(name='Data', description='The number of entries returned per page. Default value: 10. Maximum value: 100.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='Indicates whether the request was successful.', example='200'),
  requestId?: string(name='RequestId', description='The query result.', example='0bc14115159376359****'),
  success?: boolean(name='Success', description='The page number of the returned page.', example='true'),
}

model ListDataSourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataSourcesResponseBody(name='body'),
}

async function listDataSourcesWithOptions(request: ListDataSourcesRequest, runtime: Util.RuntimeOptions): ListDataSourcesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataSources',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataSources(request: ListDataSourcesRequest): ListDataSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataSourcesWithOptions(request, runtime);
}

model ListDeploymentsRequest {
  creator?: string(name='Creator', description='The ID of the Alibaba Cloud account used by the user who created the deployment tasks.', example='20030****'),
  endCreateTime?: long(name='EndCreateTime', description='The time when the deployment tasks to be queried were created. This value must be a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1593877765000'),
  endExecuteTime?: long(name='EndExecuteTime', description='The time when the deployment tasks were run. This value must be a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1593877765000'),
  executor?: string(name='Executor', description='The ID of the Alibaba Cloud account used by the user who runs the deployment tasks.', example='2003****'),
  keyword?: string(name='Keyword', description='The keyword that is contained in the names of the deployment tasks. The keyword is used to search for deployment tasks in fuzzy mode.', example='hello'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: 10. Maximum value: 100.', example='20'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace Management page to obtain the workspace ID.

You must configure this parameter or the ProjectIdentifier parameter to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace Management page to obtain the workspace name.

You must configure this parameter or the ProjectId parameter to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
  status?: int32(name='Status', description='The status of the deployment tasks. Valid values:

*   0: The deployment tasks are ready.
*   1: The deployment tasks are successful.
*   2: The deployment tasks fail.
*   6: The deployment tasks are rejected.', example='1'),
}

model ListDeploymentsResponseBody = {
  data?: {
    deployments?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the deployment task was created.', example='1593877765000'),
        creator?: string(name='Creator', description='The ID of the Alibaba Cloud account used by the user who created the deployment tasks.', example='2003****'),
        errorMessage?: string(name='ErrorMessage', description='The error message returned when the deployment task failed.', example='OK'),
        executeTime?: long(name='ExecuteTime', description='The time when the deployment task was run. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1593877765000'),
        executor?: string(name='Executor', description='The ID of the Alibaba Cloud account used by the user who ran the deployment tasks.', example='2003****'),
        id?: long(name='Id', description='The ID of the deployment task. You can call the [GetDeployment](~~173950~~) operation to query the details of the deployment task based on the ID.', example='11111'),
        name?: string(name='Name', description='The name of the deployment task.', example='auto_created'),
        status?: int32(name='Status', description='The status of the deployment tasks. Valid values:

*   0: The deployment tasks are ready.
*   1: The deployment tasks are successful.
*   2: The deployment tasks fail.
*   6: The deployment tasks are rejected.', example='1'),
      }
    ](name='Deployments', description='The information about the deployment tasks.'),
    pageNumber?: long(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: long(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='13'),
  }(name='Data', description='The return results.'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG'),
}

model ListDeploymentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDeploymentsResponseBody(name='body'),
}

async function listDeploymentsWithOptions(request: ListDeploymentsRequest, runtime: Util.RuntimeOptions): ListDeploymentsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.creator)) {
    body['Creator'] = request.creator;
  }
  if (!Util.isUnset(request.endCreateTime)) {
    body['EndCreateTime'] = request.endCreateTime;
  }
  if (!Util.isUnset(request.endExecuteTime)) {
    body['EndExecuteTime'] = request.endExecuteTime;
  }
  if (!Util.isUnset(request.executor)) {
    body['Executor'] = request.executor;
  }
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDeployments',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDeployments(request: ListDeploymentsRequest): ListDeploymentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeploymentsWithOptions(request, runtime);
}

model ListEnabledExtensionsForProjectRequest {
  eventCode?: string(name='EventCode', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console?spm=a2c4g.11186623.0.0.6b4d4941azHd2k) and go to the Workspace Management page to obtain the workspace ID.', example='commit-file'),
  fileType?: string(name='FileType', description='The ID of the request.', example='10'),
  projectId?: long(name='ProjectId', description='The type of the code for the file.

Valid values: 6 (Shell), 10 (ODPS SQL), 11 (ODPS MR), 24 (ODPS Script), 99 (zero load), 221 (PyODPS 2), 225 (ODPS Spark), 227 (EMR Hive), 228 (EMR Spark), 229 (EMR Spark SQL), 230 (EMR MR), 239 (OSS object inspection), 257 (EMR Shell), 258 (EMR Spark Shell), 259 (EMR Presto), 260 (EMR Impala), 900 (real-time synchronization), 1089 (cross-tenant collaboration), 1091 (Hologres development), 1093 (Hologres SQL), 1100 (assignment), and 1221 (PyODPS 3).

You can call the [ListFileType](~~212428~~) operation to query the type of the code for the file.', example='10000'),
}

model ListEnabledExtensionsForProjectResponseBody = {
  extensions?: [ 
    {
      createUser?: string(name='CreateUser', description='The modifier of the extension.', example='3444434343555'),
      extensionCode?: string(name='ExtensionCode', description='The name of the extension.', example='a94a8e23bc0b4dfab9a5e4d2f374d645'),
      extensionDesc?: string(name='ExtensionDesc', description='The owner ID.'),
      extensionName?: string(name='ExtensionName', description='The ID of the tenant.'),
      gmtCreate?: long(name='GmtCreate', description='The timestamp when extension was modified.', example='1660117173'),
      gmtModified?: long(name='GmtModified', example='1569308162000'),
      modifyUser?: string(name='ModifyUser', description='The description of the extension.', example='34452335611988'),
      owner?: string(name='Owner', description='The parameter settings of the extension. For more information, see [Configure extension parameters](~~405354~~).', example='21323672*******55500'),
      parameterSetting?: string(name='ParameterSetting', description='The time when the extension was created.', example='extension.fileType.23.deploy-file.enabled=true'),
      tenantId?: long(name='TenantId', description='The creator of the extension.', example='529889518659842'),
    }
  ](name='Extensions', description='The unique code of the extension.'),
  requestId?: string(name='RequestId', description='The details of the extension.', example='4F2CA7ED-27E5-59EA-A8C4-F1F7A1FF0B22'),
}

model ListEnabledExtensionsForProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEnabledExtensionsForProjectResponseBody(name='body'),
}

async function listEnabledExtensionsForProjectWithOptions(request: ListEnabledExtensionsForProjectRequest, runtime: Util.RuntimeOptions): ListEnabledExtensionsForProjectResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.eventCode)) {
    body['EventCode'] = request.eventCode;
  }
  if (!Util.isUnset(request.fileType)) {
    body['FileType'] = request.fileType;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListEnabledExtensionsForProject',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEnabledExtensionsForProject(request: ListEnabledExtensionsForProjectRequest): ListEnabledExtensionsForProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEnabledExtensionsForProjectWithOptions(request, runtime);
}

model ListExtensionsRequest {
  pageNumber?: int32(name='PageNumber', description='The number of entries to return on each page.', example='1'),
  pageSize?: int32(name='PageSize', description='Id of the request', example='10'),
}

model ListExtensionsResponseBody = {
  pagingInfo?: {
    extensions?: [ 
      {
        bindEventList?: [ 
          {
            eventCode?: string(name='EventCode', example='commit-file'),
            eventName?: string(name='EventName', description='The code of the event.'),
          }
        ](name='BindEventList', description='The name of the event.'),
        extensionCode?: string(name='ExtensionCode', description='The extension point events.'),
        extensionDesc?: string(name='ExtensionDesc', description='The name of the extension.'),
        extensionName?: string(name='ExtensionName', description='The ID of the RAM user.'),
        owner?: string(name='Owner', description='The unique code of the extension.', example='2003****'),
        status?: int32(name='Status', description='The description of the extension.', example='0'),
      }
    ](name='Extensions', description='The state of the extension. Valid values:

0: Testing

1: Publishing

3: Disabled

4: Processing

5: Approved

6: Approve Failed'),
    pageNumber?: int32(name='PageNumber', description='The number of entries returned per page.', example='1'),
    pageSize?: int32(name='PageSize', description='The total number of entries returned.', example='10'),
    totalCount?: int32(name='TotalCount', description='The extensions.', example='12'),
  }(name='PagingInfo', description='The page number of the returned page.'),
  requestId?: string(name='RequestId', description='The extensions returned on pages.', example='0000-ABCD-EFG'),
}

model ListExtensionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListExtensionsResponseBody(name='body'),
}

async function listExtensionsWithOptions(request: ListExtensionsRequest, runtime: Util.RuntimeOptions): ListExtensionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListExtensions',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listExtensions(request: ListExtensionsRequest): ListExtensionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listExtensionsWithOptions(request, runtime);
}

model ListFileTypeRequest {
  keyword?: string(name='Keyword', description='The name of the node type. You can log on to the DataWorks console, go to the DataStudio page, and then view the name of a specific node type on the left side of the page. Take note of the following items when you use this parameter:

*   You can view the English or Chinese name of a specific node type, but the language specified by this parameter to present the name must be the same as the language specified by the Locale parameter.
*   Fuzzy match is supported.
*   If this parameter is not specified, the names of all node types are returned.', example='ODPS SQL'),
  locale?: string(name='Locale', description='The language that you use for the query. Valid values: zh-CN and en-US.', example='zh-CN'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100.', example='50'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the workspace ID. You must configure either this parameter or the ProjectIdentifier parameter to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the workspace name.

You must configure either the ProjectId or ProjectIdentifier parameter to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model ListFileTypeResponseBody = {
  nodeTypeInfoList?: {
    nodeTypeInfo?: [ 
      {
        nodeType?: int32(name='NodeType', description='The code of the node type.

The codes and names of node types have the following mappings:

6 (Shell), 10 (ODPS SQL), 11 (ODPS MR), 23 (Data Integration), 24 (ODPS Script), 99 (zero load), 221 (PyODPS 2), 225 (ODPS Spark), 227 (EMR Hive), 228 (EMR Spark), 229 (EMR Spark SQL), 230 (EMR MR), 239 (OSS object inspection), 257 (EMR Shell), 258 (EMR Spark Shell), 259 (EMR Presto), 260 (EMR Impala), 900 (real-time synchronization), 1089 (cross-tenant collaboration), 1091 (Hologres development), 1093 (Hologres SQL), 1100 (assignment), and 1221 (PyODPS 3)', example='10'),
        nodeTypeName?: string(name='NodeTypeName', description='The name of the node type.

The codes and names of node types have the following mappings:

6 (Shell), 10 (ODPS SQL), 11 (ODPS MR), 23 (Data Integration), 24 (ODPS Script), 99 (zero load), 221 (PyODPS 2), 225 (ODPS Spark), 227 (EMR Hive), 228 (EMR Spark), 229 (EMR Spark SQL), 230 (EMR MR), 239 (OSS object inspection), 257 (EMR Shell), 258 (EMR Spark Shell), 259 (EMR Presto), 260 (EMR Impala), 900 (real-time synchronization), 1089 (cross-tenant collaboration), 1091 (Hologres development), 1093 (Hologres SQL), 1100 (assignment), and 1221 (PyODPS 3)', example='ODPS SQL'),
      }
    ](name='NodeTypeInfo', description='The information of the node type.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='50'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='127'),
  }(name='NodeTypeInfoList', description='The information of the node types.'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
}

model ListFileTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFileTypeResponseBody(name='body'),
}

async function listFileTypeWithOptions(request: ListFileTypeRequest, runtime: Util.RuntimeOptions): ListFileTypeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.locale)) {
    body['Locale'] = request.locale;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListFileType',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFileType(request: ListFileTypeRequest): ListFileTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFileTypeWithOptions(request, runtime);
}

model ListFileVersionsRequest {
  fileId?: long(name='FileId', description='The ID of the file. You can call the [ListFiles](~~173942~~) operation to query the ID.', example='100000001'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value:10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can click the Workspace Manage icon in the upper-right corner of the DataStudio page to go to the Workspace Management page and view the workspace ID.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The unique identifier of the DataWorks workspace. You can click the identifier in the upper-left corner of the DataStudio page to switch to another workspace.

You must specify either this parameter or ProjectId to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model ListFileVersionsResponseBody = {
  data?: {
    fileVersions?: [ 
      {
        changeType?: string(name='ChangeType', description='The type of the change to the file of the current version. Valid values: CREATE, UPDATE, and DELETE.', example='UPDATE'),
        comment?: string(name='Comment', description='The description of the file version.'),
        commitTime?: long(name='CommitTime', description='The time when the file version was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1593881265000'),
        commitUser?: string(name='CommitUser', description='The ID of the Alibaba Cloud account used to create the file of the current version.', example='73842342****'),
        fileContent?: string(name='FileContent', description='The code in the file of the current version.', example='SHOW TABLES;'),
        fileName?: string(name='FileName', description='The name of the file of the current version.', example='ods_user_info_d'),
        filePropertyContent?: string(name='FilePropertyContent', description='The basic information about the file of the current version.', example='{"fileName":"ods_user_info_d","fileType":10}'),
        fileVersion?: int32(name='FileVersion', description='The version of the file.', example='2'),
        isCurrentProd?: boolean(name='IsCurrentProd', description='Indicates whether the file version is the same as the latest file version in the production environment.', example='false'),
        nodeContent?: string(name='NodeContent', description='The scheduling configurations for the node that corresponds to the file of the current version.', example='{"cycleType":0,"cronExpress":"00 05 00 * * ?"}'),
        nodeId?: long(name='NodeId', description='The ID of the auto triggered node that corresponds to the file of the current version.', example='1234'),
        status?: string(name='Status', description='The status of the file of the current version. Valid values: COMMITTING, COMMITTED, CHECK_OK, PACKAGED, DEPLOYING, DEPLOYED, and CANCELLED.', example='COMMITTED'),
        useType?: string(name='UseType', description='The functional module to which the file belongs. Valid values: NORMAL, MANUAL, MANUAL_BIZ, SKIP, ADHOCQUERY, and COMPONENT. The value SKIP indicates that the node corresponding to the file is run in dry-run mode.', example='NORMAL'),
      }
    ](name='FileVersions', description='The details of the file version.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='13'),
  }(name='Data', description='The file versions returned.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ListFileVersionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFileVersionsResponseBody(name='body'),
}

async function listFileVersionsWithOptions(request: ListFileVersionsRequest, runtime: Util.RuntimeOptions): ListFileVersionsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListFileVersions',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFileVersions(request: ListFileVersionsRequest): ListFileVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFileVersionsWithOptions(request, runtime);
}

model ListFilesRequest {
  exactFileName?: string(name='ExactFileName'),
  fileFolderPath?: string(name='FileFolderPath', description='The path of the files.'),
  fileIdIn?: string(name='FileIdIn'),
  fileTypes?: string(name='FileTypes', description='The types of the code in the files.

Valid values: 6 (Shell), 10 (ODPS SQL), 11 (ODPS MR), 23 (Data Integration), 24 (ODPS Script), 97 (PAI), 98 (node group), 99 (zero load), 221 (PyODPS 2), 225 (ODPS Spark), 227 (EMR Hive), 228 (EMR Spark), 229 (EMR Spark SQL), 230 (EMR MR), 239 (OSS object inspection), 257 (EMR Shell), 258 (EMR Spark Shell), 259 (EMR Presto), 260 (EMR Impala), 900 (real-time synchronization), 1002 (PAI inner node), 1089 (cross-tenant collaboration), 1091 (Hologres development), 1093 (Hologres SQL), 1100 (assignment), 1106 (for-each), and 1221 (PyODPS 3).', example='10,23'),
  keyword?: string(name='Keyword', description='The keyword in the file names. The keyword is used to perform a fuzzy match. You can specify a keyword to query all files whose names contain the keyword.', example='ods'),
  needAbsoluteFolderPath?: boolean(name='NeedAbsoluteFolderPath'),
  needContent?: boolean(name='NeedContent'),
  nodeId?: long(name='NodeId', description='The ID of the node that is scheduled. You can call the [ListNodes](~~173979~~) operation to query the ID of the node.', example='123541234'),
  owner?: string(name='Owner', description='The owner of the files.', example='3726346****'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace Management page to obtain the workspace ID.

You must configure either the ProjectId or ProjectIdentifier parameter to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace Management page to obtain the workspace name.

You must configure either the ProjectId or ProjectIdentifier parameter to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
  useType?: string(name='UseType', description='The module to which the files belong. Valid values:

*   NORMAL: The files are used for DataStudio.
*   MANUAL: The files are used for manually triggered nodes.
*   MANUAL_BIZ: The files are used for manually triggered workflows.
*   SKIP: The files are used for dry-run nodes in DataStudio.
*   ADHOCQUERY: The files are used for ad hoc queries.
*   COMPONENT: The files are used for snippets.', example='NORMAL'),
}

model ListFilesResponseBody = {
  data?: {
    files?: [ 
      {
        absoluteFolderPath?: string(name='AbsoluteFolderPath'),
        autoParsing?: boolean(name='AutoParsing', description='Specifies whether the automatic parsing feature is enabled for the file. Valid values:

*   true: The automatic parsing feature is enabled for the file.
*   false: The automatic parsing feature is not enabled for the file.

This parameter is equivalent to the Analyze Code parameter in the Dependencies section of the Properties panel in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='true'),
        bizId?: long(name='BizId', description='The ID of the workflow to which the file belongs. This parameter is deprecated and replaced by the BusinessId parameter.', example='300000'),
        businessId?: long(name='BusinessId', description='The ID of the workflow to which the file belongs.', example='300000'),
        commitStatus?: int32(name='CommitStatus', description='Indicates whether the latest code in the file is committed. Valid values: 0 and 1. The value 0 indicates that the latest code in the file is not committed. The value 1 indicates that the latest code in the file is committed.', example='1'),
        connectionName?: string(name='ConnectionName', description='The ID of the compute engine instance that is used to run the node that corresponds to the file.', example='odps_first'),
        content?: string(name='Content', description='This parameter is deprecated. You can call the [GetFile](~~173954#doc-api-dataworks-public-GetFile~~) operation to query the details of the file.', example='SHOW TABLES;'),
        createTime?: long(name='CreateTime', description='The time when the file was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1593950832000'),
        createUser?: string(name='CreateUser', description='The ID of the Alibaba Cloud account that is used to create the file.', example='382762****'),
        currentVersion?: int32(name='CurrentVersion', description='The latest version number of the file.', example='2'),
        fileDescription?: string(name='FileDescription', description='The description of the file.', example='my test datastudio file'),
        fileFolderId?: string(name='FileFolderId', description='The ID of the folder to which the file belongs.', example='2735c2****'),
        fileId?: long(name='FileId', description='The ID of the file.', example='10000001'),
        fileName?: string(name='FileName', description='The name of the file.', example='ods_user_info_d'),
        fileType?: int32(name='FileType', description='The type of the code in the file. Valid values: 6 (Shell), 10 (ODPS SQL), 11 (ODPS MR), 23 (Data Integration), 24 (ODPS Script), 99 (zero load), 221 (PyODPS 2), 225 (ODPS Spark), 227 (EMR Hive), 228 (EMR Spark), 229 (EMR Spark SQL), 230 (EMR MR), 239 (OSS object inspection), 257 (EMR Shell), 258 (EMR Spark Shell), 259 (EMR Presto), 260 (EMR Impala), 900 (real-time synchronization), 1089 (cross-tenant collaboration), 1091 (Hologres development), 1093 (Hologres SQL), 1100 (assignment), and 1221 (PyODPS 3).', example='10'),
        isMaxCompute?: boolean(name='IsMaxCompute', description='Indicates whether the file needs to be uploaded to MaxCompute if the file is a MaxCompute resource file.

This parameter is returned only if the file is a MaxCompute resource file.', example='false'),
        lastEditTime?: long(name='LastEditTime', description='The time when the file was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1593950832000'),
        lastEditUser?: string(name='LastEditUser', description='The ID of the Alibaba Cloud account that is used to last modify the file.', example='38748246285727'),
        nodeId?: long(name='NodeId', description='The ID of the auto triggered node that is generated in the scheduling system after the file is committed.', example='300001'),
        owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the file owner.', example='3872572****'),
        parentId?: long(name='ParentId', description='The ID of the node group file to which the current file belongs. This parameter is returned only if the current file is an inner file of the node group file.', example='-1'),
        useType?: string(name='UseType', description='The module to which the file belongs. Valid values:

*   NORMAL: The file is used for DataStudio.
*   MANUAL: The file is used for a manually triggered node.
*   MANUAL_BIZ: The file is used for a manually triggered workflow.
*   SKIP: The files is used for a dry-run node in DataStudio.
*   ADHOCQUERY: The file is used for an ad hoc query.
*   COMPONENT: The file is used for a snippet.', example='NORMAL'),
      }
    ](name='Files', description='The details of the files.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='13'),
  }(name='Data', description='The files returned.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can troubleshoot errors based on the ID.', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request is successful.
*   false: The request fails.', example='true'),
}

model ListFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFilesResponseBody(name='body'),
}

async function listFilesWithOptions(request: ListFilesRequest, runtime: Util.RuntimeOptions): ListFilesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.exactFileName)) {
    body['ExactFileName'] = request.exactFileName;
  }
  if (!Util.isUnset(request.fileFolderPath)) {
    body['FileFolderPath'] = request.fileFolderPath;
  }
  if (!Util.isUnset(request.fileIdIn)) {
    body['FileIdIn'] = request.fileIdIn;
  }
  if (!Util.isUnset(request.fileTypes)) {
    body['FileTypes'] = request.fileTypes;
  }
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.needAbsoluteFolderPath)) {
    body['NeedAbsoluteFolderPath'] = request.needAbsoluteFolderPath;
  }
  if (!Util.isUnset(request.needContent)) {
    body['NeedContent'] = request.needContent;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.useType)) {
    body['UseType'] = request.useType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListFiles',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFiles(request: ListFilesRequest): ListFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFilesWithOptions(request, runtime);
}

model ListFoldersRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='10'),
  parentFolderPath?: string(name='ParentFolderPath', description='The path of the parent folder.'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the ID. You must specify either this parameter or ProjectIdentifier to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Settings panel to obtain the name. You must specify either this parameter or ProjectId to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model ListFoldersResponseBody = {
  data?: {
    folders?: [ 
      {
        folderId?: string(name='FolderId', description='The ID of the folder.', example='2735c2****'),
        folderPath?: string(name='FolderPath', description='The path of the folder.'),
      }
    ](name='Folders', description='The details of the folder.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries on the returned page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='13'),
  }(name='Data', description='The folders returned.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ListFoldersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFoldersResponseBody(name='body'),
}

async function listFoldersWithOptions(request: ListFoldersRequest, runtime: Util.RuntimeOptions): ListFoldersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentFolderPath)) {
    body['ParentFolderPath'] = request.parentFolderPath;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListFolders',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFolders(request: ListFoldersRequest): ListFoldersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFoldersWithOptions(request, runtime);
}

model ListInnerNodesRequest {
  nodeName?: string(name='NodeName', description='The ID of the node group to which the inner nodes belong.', example='liux_test_n****'),
  outerNodeId?: long(name='OuterNodeId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='1234'),
  pageNumber?: int32(name='PageNumber', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='1'),
  pageSize?: int32(name='PageSize', description='The ID of the workspace.', example='10'),
  programType?: string(name='ProgramType', description='The number of the page to return. Minimum value: 1. Maximum value: 100.', example='ODPS_SQL'),
  projectEnv?: string(name='ProjectEnv', description='The name of the node to which the inner nodes belong.', example='PROD'),
  projectId?: long(name='ProjectId', description='The environment in which the node is run. Valid values: DEV and PROD. Default value: PROD.', example='1234'),
}

model ListInnerNodesResponseBody = {
  paging?: {
    nodes?: [ 
      {
        baselineId?: long(name='BaselineId', description='The description of the inner node.', example='1234'),
        businessId?: long(name='BusinessId', description='The table and partition filter expression in Data Quality that are associated with the inner node.', example='123'),
        connection?: string(name='Connection', description='The values of other parameters related to the inner node.', example='odps_first'),
        cronExpress?: string(name='CronExpress', description='The ID of the inner node.', example='00 00 00 * * ?'),
        description?: string(name='Description', description='The name of the inner node.', example='test'),
        dqcDescription?: string(name='DqcDescription', description='The cron expression.', example='[{"projectName":"ztjy_dim","tableName":"dim_user_agent_manage_area_a","partition":"ds\\u003d$[yyyy-mm-dd-1]"}]'),
        dqcType?: string(name='DqcType', description='The ID of the baseline with which the inner node is associated.', example='1'),
        nodeId?: long(name='NodeId', example='12'),
        nodeName?: string(name='NodeName', description='The name of the resource group.', example='liux_test_n****'),
        ownerId?: string(name='OwnerId', description='The connection string.', example='1933****36551'),
        paramValues?: string(name='ParamValues', description='Indicates whether the node is associated with Data Quality. Valid values: 0 and 1. The value 0 indicates that the node is associated with Data Quality. The value 1 indicates that the node is not associated with Data Quality.', example='a=b'),
        priority?: int32(name='Priority', description='The ID of the owner of the inner node.', example='1'),
        programType?: string(name='ProgramType', description='The priority of the inner node. Valid values: 1, 3, 5, 7, and 8.', example='ODPS_SQL'),
        projectId?: long(name='ProjectId', description='The type of the inner node.', example='123'),
        repeatInterval?: long(name='RepeatInterval', description='Indicates whether the inner node can be rerun.', example='60'),
        repeatability?: boolean(name='Repeatability', description='The ID of the workspace.', example='true'),
        resGroupName?: string(name='ResGroupName', description='The ID of the workflow.'),
        schedulerType?: string(name='SchedulerType', description='The interval at which the inner node is rerun after the inner node fails to be run.', example='NORMAL'),
      }
    ](name='Nodes', description='The scheduling type of the inner node. Valid values:

*   NORMAL: The inner node is an auto triggered node.
*   MANUAL: The inner node is a manually triggered node. Manually triggered nodes cannot be automatically triggered.
*   PAUSE: The inner node is a paused node.
*   SKIP: The inner node is a dry-run node. Dry-run nodes are started as scheduled but the scheduling system sets the status of the nodes to succeeded when the scheduling system starts to run the nodes.'),
    pageNumber?: int32(name='PageNumber', description='The number of entries returned per page. Default value: 10. Maximum value: 100.', example='1'),
    pageSize?: int32(name='PageSize', description='The total number of inner nodes returned.', example='10'),
    totalCount?: int32(name='TotalCount', description='The list of inner nodes.', example='100'),
  }(name='Paging', description='The page number of the returned page.'),
  requestId?: string(name='RequestId', description='Indicates whether the request is successful.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='The paging information.', example='true'),
}

model ListInnerNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInnerNodesResponseBody(name='body'),
}

async function listInnerNodesWithOptions(request: ListInnerNodesRequest, runtime: Util.RuntimeOptions): ListInnerNodesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeName)) {
    body['NodeName'] = request.nodeName;
  }
  if (!Util.isUnset(request.outerNodeId)) {
    body['OuterNodeId'] = request.outerNodeId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.programType)) {
    body['ProgramType'] = request.programType;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListInnerNodes',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInnerNodes(request: ListInnerNodesRequest): ListInnerNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInnerNodesWithOptions(request, runtime);
}

model ListInstanceAmountRequest {
  beginDate?: string(name='BeginDate', description='The beginning of the time range to query, accurate to the day. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2021-06-13T00:00:00+0800'),
  endDate?: string(name='EndDate', description='The end of the time range to query, accurate to the day. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2021-06-16T00:00:00+0800'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the ID.', example='10000'),
}

model ListInstanceAmountResponseBody = {
  instanceCounts?: [ 
    {
      count?: int32(name='Count', description='The number of auto triggered node instances.', example='9527'),
      date?: long(name='Date', description='The data timestamp at which the number of auto triggered node instances was obtained. This value is a UNIX timestamp.', example='1623772800000'),
    }
  ](name='InstanceCounts', description='The trend of the number of auto triggered node instances within the specified period of time.'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='95279527adhfj****'),
}

model ListInstanceAmountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstanceAmountResponseBody(name='body'),
}

async function listInstanceAmountWithOptions(request: ListInstanceAmountRequest, runtime: Util.RuntimeOptions): ListInstanceAmountResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.beginDate)) {
    body['BeginDate'] = request.beginDate;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListInstanceAmount',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstanceAmount(request: ListInstanceAmountRequest): ListInstanceAmountResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstanceAmountWithOptions(request, runtime);
}

model ListInstanceHistoryRequest {
  instanceId?: long(name='InstanceId', description='The environment of the workspace. Valid values: PROD (production environment) and DEV (development environment).By default, data of instances in the production environment is queried.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='PROD'),
}

model ListInstanceHistoryResponseBody = {
  instances?: [ 
    {
      beginRunningTime?: long(name='BeginRunningTime', description='The time when the running of the node was complete. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1590416703313'),
      beginWaitResTime?: long(name='BeginWaitResTime', description='The data timestamp of the instance. In most cases, the value is one day before the time when the instance was run.', example='1590416703313'),
      beginWaitTimeTime?: long(name='BeginWaitTimeTime', description='The ID of the node that generates the instance.', example='1590416703313'),
      bizdate?: long(name='Bizdate', description='The name of the node.', example='1590336000000'),
      createTime?: long(name='CreateTime', description='The ID of the workflow.', example='1590416703313'),
      cycTime?: long(name='CycTime', description='The time when the instance started to be run. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1590422400000'),
      dagId?: long(name='DagId', description='The type of the node. Valid values:

*   NORMAL(0): The node is an auto triggered node. The scheduling system regularly runs the node.
*   MANUAL(1): The node is a manually triggered node. The scheduling system does not regularly run the node.
*   PAUSE(2): The node is a frozen node. The scheduling system regularly runs the node but sets the status of the node to failed when the scheduling system starts to run the node.
*   SKIP(3): The node is a dry-run node. The scheduling system regularly runs the node but sets the status of the node to succeeded when the scheduling system starts to run the node.
*   SKIP_UNCHOOSE(4): The node is an unselected node in a temporary workflow. This type of node exists only in temporary workflows. The scheduling system sets the status of the node to succeeded when the scheduling system starts to run the node.
*   SKIP_CYCLE(5): The node is a node that is scheduled by week or month and is waiting for the scheduling time to arrive. The scheduling system regularly runs the node but sets the status of the node to succeeded when the scheduling system starts to run the node.
*   CONDITION_UNCHOOSE(6): The node is not selected by its ancestor branch node and is run as a dry-run node.
*   REALTIME_DEPRECATED(7): The node has instances that are generated in real time but deprecated. The scheduling system sets the status of the node to succeeded.', example='33845'),
      dagType?: string(name='DagType', description='The time when the node was last modified.', example='1'),
      errorMessage?: string(name='ErrorMessage', description='The time when the instance was generated.', example='error message'),
      finishTime?: long(name='FinishTime', description='The error message that is returned for the instance. This parameter is deprecated. You can call the GetInstanceLog operation to query the error information related to the node.', example='1590416703313'),
      instanceHistoryId?: long(name='InstanceHistoryId', example='1'),
      instanceId?: long(name='InstanceId', description='The time when the instance started to wait for resources.', example='1234'),
      modifyTime?: long(name='ModifyTime', description='The ID of the instance.', example='1590416703313'),
      nodeId?: long(name='NodeId', description='The historical record number of the instance.', example='33115'),
      nodeName?: string(name='NodeName', description='The time when the instance started to wait to be scheduled.', example='kzh'),
      status?: string(name='Status', description='The time when the node started to be run. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='NOT_RUN'),
      taskType?: string(name='TaskType', description='Indicates whether the instance is associated with a monitoring rule in Data Quality (DQC). Valid values:

*   0: The instance is associated with a monitoring rule in Data Quality.
*   1: The instance is not associated with a monitoring rule in Data Quality.', example='NORMAL(0)'),
    }
  ](name='Instances', description='The status of the node that generates the instance. Valid values:

*   NOT_RUN: The node is not run.
*   WAIT_TIME: The node is waiting for the scheduling time to arrive.
*   WAIT_RESOURCE: The node is waiting for resources.
*   RUNNING: The node is running.
*   CHECKING: Data quality is being checked for the node.
*   CHECKING_CONDITION: Branch conditions are being checked for the node.
*   FAILURE: The node fails to be run.
*   SUCCESS: The node is successfully run.'),
  requestId?: string(name='RequestId', description='Indicates whether the request is successful. Valid values:

*   true: The request is successful.
*   false: The request fails.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='The instance list.', example='true'),
}

model ListInstanceHistoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstanceHistoryResponseBody(name='body'),
}

async function listInstanceHistoryWithOptions(request: ListInstanceHistoryRequest, runtime: Util.RuntimeOptions): ListInstanceHistoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListInstanceHistory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstanceHistory(request: ListInstanceHistoryRequest): ListInstanceHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstanceHistoryWithOptions(request, runtime);
}

model ListInstancesRequest {
  beginBizdate?: string(name='BeginBizdate', description='The parameters related to the node.', example='2020-02-02 00:00:00'),
  bizName?: string(name='BizName', description='The ID of the instance.', example='test_bizName'),
  bizdate?: string(name='Bizdate', description='The number of entries returned per page. Default value: 10. Maximum value: 100.', example='2020-02-02 00:00:00'),
  dagId?: long(name='DagId', description='The environment of the workspace. Valid values: PROD and DEV. The value PROD indicates the production environment. The value DEV indicates the development environment.', example='11111'),
  endBizdate?: string(name='EndBizdate', description='The ID of the workflow.', example='2020-02-03 00:00:00'),
  nodeId?: long(name='NodeId', description='Indicates whether the instance is associated with a monitoring rule in Data Quality. Valid values:

*   0: The instance is associated with a monitoring rule in Data Quality.
*   1: The instance is not associated with a monitoring rule in Data Quality.', example='100000000000'),
  nodeName?: string(name='NodeName', description='Indicates whether the node can be rerun.', example='openmr_8****'),
  owner?: string(name='Owner', description='The connection string.', example='193379****'),
  pageNumber?: int32(name='PageNumber', description='The operation that you want to perform.', example='1'),
  pageSize?: int32(name='PageSize', description='The ID of the node.', example='10'),
  programType?: string(name='ProgramType', description='The error code returned.', example='ODPS_SQL'),
  projectEnv?: string(name='ProjectEnv', description='The time when the node was last modified.', example='PROD'),
  projectId?: long(name='ProjectId', description='The ID of the baseline.', example='12345'),
  status?: string(name='Status', description='The time when the instance started to wait to be scheduled.', example='NOT_RUN'),
}

model ListInstancesResponseBody = {
  data?: {
    instances?: [ 
      {
        baselineId?: long(name='BaselineId', description='The type of the workflow. Valid values:

*   DAILY: The workflow is used to run auto triggered nodes.
*   MANUAL: The workflow is used to run manually triggered nodes.
*   SMOKE_TEST: The workflow is used to perform smoke testing.
*   SUPPLY_DATA: The workflow is used to backfill data.', example='123123'),
        beginRunningTime?: long(name='BeginRunningTime', description='The time when the instance started to run.', example='1590416703313'),
        beginWaitResTime?: long(name='BeginWaitResTime', description='The time when the node stopped running.', example='1590416703313'),
        beginWaitTimeTime?: long(name='BeginWaitTimeTime', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='1590416703313'),
        bizdate?: long(name='Bizdate', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.

You cannot specify the sorting method for the instances to be returned by this operation. By default, the instances are sorted in descending order of the time when the instances were created.', example='1590336000000'),
        businessId?: long(name='BusinessId', description='The ID of the workflow to which the node belongs.', example='123'),
        connection?: string(name='Connection', description='The number of times the node can be rerun. The value of this parameter can be empty or an integer that is greater than or equal to 0.

*   If the value of this parameter is empty, the number of times that the node can be rerun is not specified.
*   If the value of this parameter is 0, the node cannot be rerun.
*   If the value of this parameter is a positive integer such as n, the node can be rerun n times. For example, if the value of this parameter is 1, the node can be rerun once. If the value of this parameter is 2, the node can be rerun twice.', example='odps_first'),
        createTime?: long(name='CreateTime', description='The interval at which the node is rerun after the node fails to run. Unit: milliseconds.', example='1590416703313'),
        createUser?: string(name='CreateUser', description='The ID of the node. You can call the [ListNodes](~~173979~~) operation to query the ID of the node.', example='Test'),
        cycTime?: long(name='CycTime', description='The error message returned.', example='1590422400000'),
        dagId?: long(name='DagId', description='The time when the instance started to wait for resources.', example='33845'),
        dagType?: string(name='DagType', description='The data timestamp of the instance. In most cases, the value is one day before the time when the instance was run.', example='DAILY'),
        dqcDescription?: string(name='DqcDescription', description='The operation that you want to perform.', example='[{"projectName":"ztjy_dim","tableName":"dim_user_agent_manage_area_a","partition":"ds\\u003d$[yyyy-mm-dd-1]"}]'),
        dqcType?: int32(name='DqcType', description='The status of the node. Valid values:

*   NOT_RUN: The node is not run.
*   WAIT_TIME: The node is waiting for the scheduling time to arrive.
*   WAIT_RESOURCE: The node is waiting for resources.
*   RUNNING: The node is running.
*   CHECKING: Data quality is being checked for the node.
*   CHECKING_CONDITION: Branch conditions are being checked for the node.
*   FAILURE: The node fails to run.
*   SUCCESS: The node is successfully run.', example='1'),
        errorMessage?: string(name='ErrorMessage', description='The name of the account that is used to run the instance. For example, if an account named Test was used to run the instance to backfill data, the value of this parameter is Test.', example='error message'),
        finishTime?: long(name='FinishTime', description='The ID of the Alibaba Cloud account used by the workspace administrator. You can log on to the Alibaba Cloud Management Console and view the ID on the Security Settings page of the Account Center console.', example='1590416703313'),
        instanceId?: long(name='InstanceId', description='The number of the page to return. Minimum value:1. Maximum value: 100.', example='1234'),
        modifyTime?: long(name='ModifyTime', description='The name of the workflow. You can call the [ListBusiness](~~173945~~) operation to query the name of the workflow.', example='1590416703313'),
        nodeId?: long(name='NodeId', description='The environment of the workspace. Valid values: PROD and DEV. The value PROD indicates the production environment. The value DEV indicates the development environment.', example='33115'),
        nodeName?: string(name='NodeName', description='The ID of the workflow.', example='kzh'),
        paramValues?: string(name='ParamValues', description='The table and partition filter expression in Data Quality that are associated with the node.', example='bizdate=$bizdate tbods=$tbods'),
        priority?: int32(name='Priority', description='The total number of instances.', example='1'),
        relatedFlowId?: long(name='RelatedFlowId', description='The type of the node. You can call the [ListNodes](~~173979~~) operation to query the type of the node.', example='123456'),
        repeatInterval?: long(name='RepeatInterval', description='The scheduling type of the node. Valid values:

*   NORMAL(0): The node is an auto triggered node. The scheduling system regularly runs the node.

*   MANUAL(1): The node is a manually triggered node. The scheduling system does not regularly run the node.

*   PAUSE(2): The node is a frozen node. The scheduling system regularly runs the node but sets the status of the node to failed when the scheduling system starts to run the node.

*   SKIP(3): The node is a dry-run node. The scheduling system regularly runs the node but sets the status of the node to succeeded when the scheduling system starts to run the node.

*   SKIP_UNCHOOSE(4): The node is an unselected node in a temporary workflow. This type of node exists only in temporary workflows. The scheduling system sets the status of the node to succeeded when the scheduling system starts to run the node.

*   SKIP_CYCLE(5): The node is a node that is scheduled by week or month and is waiting for the scheduling time to arrive. The scheduling system regularly runs the node but sets the status of the node to succeeded when the scheduling system starts to run the node.

*   CONDITION_UNCHOOSE(6): The node is not selected by its ancestor branch node and is run as a dry-run node.

    REALTIME_DEPRECATED(7): The node has instances that are generated in real time but deprecated. The scheduling system sets the status of the node to succeeded.', example='60000'),
        repeatability?: boolean(name='Repeatability', description='The status of the node. Valid values:

*   NOT_RUN: The node is not run.
*   WAIT_TIME: The node is waiting for the scheduling time to arrive.
*   WAIT_RESOURCE: The node is waiting for resources.
*   RUNNING: The node is running.
*   CHECKING: Data quality is being checked for the node.
*   CHECKING_CONDITION: Branch conditions are being checked for the node.
*   FAILURE: The node fails to run.
*   SUCCESS: The node is successfully run.', example='true'),
        status?: string(name='Status', description='The data timestamp of the instances that you want to query. Specify the timestamp in the yyyy-MM-dd HH:mm:ss format.', example='NOT_RUN'),
        taskRerunTime?: int32(name='TaskRerunTime', description='The ID of the workspace. You can call the [ListProjects](~~178393~~) operation to query the ID of the workspace.', example='0'),
        taskType?: string(name='TaskType', description='The information about the instances.', example='NORMAL(0)'),
      }
    ](name='Instances', description='The name of the node. You can call the [ListNodes](~~173979~~) operation to query the name of the node.'),
    pageNumber?: int32(name='PageNumber', description='The time when the node was scheduled to run.', example='1'),
    pageSize?: int32(name='PageSize', description='The end of the time range to query. Specify the time in the yyyy-MM-dd HH:mm:ss format.', example='10'),
    totalCount?: int32(name='TotalCount', description='The priority of the instance. Valid values: 1, 3, 5, 7, and 8.

A greater value indicates a higher priority. Default value: 1.', example='66'),
  }(name='Data', description='The ID of the node. You can call the [ListNodes](~~173979~~) operation to query the ID of the node.'),
  errorCode?: string(name='ErrorCode', description='The HTTP status code returned.', example='Invalid.Tenant.ProjectNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The page number of the returned page.', example='The project does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The error message that is returned for the instance.

This parameter is deprecated. You can call the [GetInstanceLog](~~173983~~) operation to query the error information related to the node.', example='200'),
  requestId?: string(name='RequestId', description='The name of the node.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='The beginning of the time range to query. Specify the time in the yyyy-MM-dd HH:mm:ss format.', example='true'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstancesWithOptions(request: ListInstancesRequest, runtime: Util.RuntimeOptions): ListInstancesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.beginBizdate)) {
    body['BeginBizdate'] = request.beginBizdate;
  }
  if (!Util.isUnset(request.bizName)) {
    body['BizName'] = request.bizName;
  }
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.dagId)) {
    body['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.endBizdate)) {
    body['EndBizdate'] = request.endBizdate;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.nodeName)) {
    body['NodeName'] = request.nodeName;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.programType)) {
    body['ProgramType'] = request.programType;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListInstances',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstancesWithOptions(request, runtime);
}

model ListLineageRequest {
  direction?: string(name='Direction'),
  entityQualifiedName?: string(name='EntityQualifiedName'),
  keyword?: string(name='Keyword'),
  nextToken?: string(name='NextToken'),
  pageSize?: int32(name='PageSize'),
}

model ListLineageResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        createTimestamp?: long(name='CreateTimestamp'),
        entity?: Entity(name='Entity'),
        relationList?: [ 
          {
            channel?: string(name='Channel'),
            datasource?: string(name='Datasource'),
            guid?: string(name='Guid'),
            type?: string(name='Type'),
          }
        ](name='RelationList'),
      }
    ](name='DataEntityList'),
    nextToken?: string(name='NextToken'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListLineageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLineageResponseBody(name='body'),
}

async function listLineageWithOptions(request: ListLineageRequest, runtime: Util.RuntimeOptions): ListLineageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.entityQualifiedName)) {
    query['EntityQualifiedName'] = request.entityQualifiedName;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLineage',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listLineage(request: ListLineageRequest): ListLineageResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLineageWithOptions(request, runtime);
}

model ListManualDagInstancesRequest {
  dagId?: string(name='DagId', description='The ID of the directed acyclic graph (DAG) for the manually triggered workflow. You can call the [RunManualDagNodes](~~212830~~) operation to obtain the ID.', example='7000001231241'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV. A value of PROD indicates the production environment. A value of DEV indicates the development environment.', example='RPOD'),
  projectName?: string(name='ProjectName', description='The name of the workspace to which the manually triggered workflow belongs. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace Management page to view the name.', example='test_workspace'),
}

model ListManualDagInstancesResponseBody = {
  instances?: [ 
    {
      beginRunningTime?: long(name='BeginRunningTime', description='The time when the node started to run. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1605178414676'),
      beginWaitResTime?: long(name='BeginWaitResTime', description='The time when the node started to wait for resources. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1605178414676'),
      beginWaitTimeTime?: long(name='BeginWaitTimeTime', description='The time when the node started to wait to be scheduled. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1605178414676'),
      bizDate?: long(name='BizDate', description='The data timestamp of the instance. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. In most cases, the value indicates one day before the time when the node was run.', example='1605178414676'),
      createTime?: long(name='CreateTime', description='The time when the node was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1605178414676'),
      createUser?: string(name='CreateUser', description='The name of the account used to run the instance. For example, if an account named Test was used to run the instance to backfill data, the value of this parameter is Test.', example='Test'),
      cycTime?: long(name='CycTime', description='The time when the node was scheduled to run. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1605178414676'),
      dagId?: long(name='DagId', description='The ID of the DAG for the manually triggered workflow.', example='350850491'),
      dagType?: string(name='DagType', description='The identifier of the manually triggered workflow.', example='5'),
      finishTime?: long(name='FinishTime', description='The time when the node stopped running. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1605178414676'),
      instanceId?: long(name='InstanceId', description='The ID of the instance in the manually triggered workflow.', example='11726873619'),
      modifyTime?: long(name='ModifyTime', description='The time when the node was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1605178414676'),
      nodeId?: long(name='NodeId', description='The ID of the node in the manually triggered workflow.', example='37851'),
      nodeName?: string(name='NodeName', description='The name of the node.', example='test2'),
      paramValues?: string(name='ParamValues', description='The parameters related to the instance.', example='xxx=yyy'),
      status?: string(name='Status', description='The status of the node. Valid values:

*   NOT_RUN: The node is not run.
*   WAIT_TIME: The node is waiting for its scheduled time to arrive.
*   WAIT_RESOURCE: The node is waiting for resources.
*   RUNNING: The node is running.
*   CHECKING: Data quality is being checked for the node.
*   CHECKING_CONDITION: Branch conditions are being checked for the node.
*   FAILURE: The node fails to run.
*   SUCCESS: The node is run as expected.', example='SUCCESS'),
      taskType?: string(name='TaskType', description='The scheduling type of the node. Valid values:

*   NORMAL(0): The node is an auto triggered node. It is run on a regular basis.
*   MANUAL(1): The node is a manually triggered node. It is not run on a regular basis.
*   PAUSE(2): The node is a frozen node. The scheduling system still runs the node on a regular basis but sets it to Failed when the scheduling system starts to run the node.
*   SKIP(3): The node is a dry-run node. The scheduling system still runs the node on a regular basis but sets it to Succeeded when the scheduling system starts to run the node.
*   SKIP_UNCHOOSE(4): The node is an unselected node in a temporary workflow. This type of node exists only in temporary workflows. The scheduling system sets the node to Succeeded when the scheduling system starts to run the node.
*   SKIP_CYCLE(5): The node is a node that is scheduled by week or month and is waiting for its scheduled time. The scheduling system still runs the node on a regular basis but sets it to Succeeded when the scheduling system starts to run the node.
*   CONDITION_UNCHOOSE(6): The node is not selected by its ancestor branch node and is run as a dry-run node.
*   REALTIME_DEPRECATED(7): The node has instances generated in real time but deprecated. The scheduling system directly sets the node to Succeeded.', example='MANUAL'),
    }
  ](name='Instances', description='The instances in the manually triggered workflow.'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to search for logs and troubleshoot issues based on the logs.', example='SDFSDFSDF-SDFSDF-SDFDSF-SDFSDF'),
}

model ListManualDagInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListManualDagInstancesResponseBody(name='body'),
}

async function listManualDagInstancesWithOptions(request: ListManualDagInstancesRequest, runtime: Util.RuntimeOptions): ListManualDagInstancesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.dagId)) {
    body['DagId'] = request.dagId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListManualDagInstances',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listManualDagInstances(request: ListManualDagInstancesRequest): ListManualDagInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listManualDagInstancesWithOptions(request, runtime);
}

model ListMetaCollectionEntitiesRequest {
  collectionQualifiedName?: string(name='CollectionQualifiedName', description='The type of the entities.

For example, if this parameter is set to maxcompute-table, the entity is a MaxCompute table.', example='album.12345'),
  entityType?: string(name='EntityType', description='The search keyword.', example='maxcompute-table'),
  keyword?: string(name='Keyword', description='The paging information. This parameter specifies the start point of the query.', example='test'),
  nextToken?: string(name='NextToken', description='The number of entries to return on each page.', example='12222'),
  pageSize?: int32(name='PageSize', description='The object returned.', example='10'),
}

model ListMetaCollectionEntitiesResponseBody = {
  data?: {
    entityList?: [
      Entity
    ](name='EntityList', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.'),
    nextToken?: string(name='NextToken', description='The entities.', example='123344'),
  }(name='Data', description='The token that is used for the next query.'),
  errorCode?: string(name='ErrorCode', description='The error message returned.', example='Invalid.Collection.NotExists'),
  errorMessage?: string(name='ErrorMessage', description='The HTTP status code returned.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', description='Indicates whether the request was successful. Valid values:

true: The request was successful.

false: The request failed.', example='E25887B7-579C-54A5-9C4F-83A0DE367DD'),
  success?: boolean(name='Success', description='The error code returned.', example='true'),
}

model ListMetaCollectionEntitiesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMetaCollectionEntitiesResponseBody(name='body'),
}

async function listMetaCollectionEntitiesWithOptions(request: ListMetaCollectionEntitiesRequest, runtime: Util.RuntimeOptions): ListMetaCollectionEntitiesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.collectionQualifiedName)) {
    query['CollectionQualifiedName'] = request.collectionQualifiedName;
  }
  if (!Util.isUnset(request.entityType)) {
    query['EntityType'] = request.entityType;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMetaCollectionEntities',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMetaCollectionEntities(request: ListMetaCollectionEntitiesRequest): ListMetaCollectionEntitiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMetaCollectionEntitiesWithOptions(request, runtime);
}

model ListMetaCollectionsRequest {
  administrator?: string(name='Administrator', description='The ID of the collection follower.', example='1200759642363000'),
  collectionType?: string(name='CollectionType', description='The ID of the collection creator.', example='ALBUM、ALBUM_CATEGORY'),
  creator?: string(name='Creator', description='The ID of the collection administrator.', example='1200759642363000'),
  follower?: string(name='Follower', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='1200759642363000'),
  keyword?: string(name='Keyword', description='The name of the sorting field.'),
  nextToken?: string(name='NextToken', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='12345'),
  orderBy?: string(name='OrderBy', description='ALBUM: data album

ALBUM_CATEGORY: category in a data album'),
  pageSize?: int32(name='PageSize', description='The keyword.', example='10'),
  parentQualifiedName?: string(name='ParentQualifiedName', description='The paging information. This parameter specifies the start point of the query.', example='Album.1234'),
}

model ListMetaCollectionsResponseBody = {
  data?: {
    collectionList?: [
      Collection
    ](name='CollectionList', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.'),
    nextToken?: string(name='NextToken', description='The collections.', example='37ae2053d87d380f28ce0dc0853ca51e'),
  }(name='Data', description='The token that is used for the next query.'),
  errorCode?: string(name='ErrorCode', description='The error message returned.', example='Invalid.Collection.NotExists'),
  errorMessage?: string(name='ErrorMessage', description='The HTTP status code returned.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', description='The object returned.', example='E25887B7-579C-54A5-9C4F-83A0DE367DDE'),
  success?: boolean(name='Success', description='The error code returned.', example='true'),
}

model ListMetaCollectionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMetaCollectionsResponseBody(name='body'),
}

/**
  * You can configure only one of the Creator, Administrator, and Follower parameters.
  *
  * @param request ListMetaCollectionsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListMetaCollectionsResponse
 */
async function listMetaCollectionsWithOptions(request: ListMetaCollectionsRequest, runtime: Util.RuntimeOptions): ListMetaCollectionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.administrator)) {
    query['Administrator'] = request.administrator;
  }
  if (!Util.isUnset(request.collectionType)) {
    query['CollectionType'] = request.collectionType;
  }
  if (!Util.isUnset(request.creator)) {
    query['Creator'] = request.creator;
  }
  if (!Util.isUnset(request.follower)) {
    query['Follower'] = request.follower;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentQualifiedName)) {
    query['ParentQualifiedName'] = request.parentQualifiedName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMetaCollections',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can configure only one of the Creator, Administrator, and Follower parameters.
  *
  * @param request ListMetaCollectionsRequest
  * @return ListMetaCollectionsResponse
 */
async function listMetaCollections(request: ListMetaCollectionsRequest): ListMetaCollectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMetaCollectionsWithOptions(request, runtime);
}

model ListMetaDBRequest {
  clusterId?: string(name='ClusterId', description='The information of the metadatabases.', example='abc'),
  dataSourceType?: string(name='DataSourceType', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='emr'),
  pageNum?: int32(name='PageNum', description='The ID of the E-MapReduce (EMR) cluster. You can log on to the [EMR console](https://emr.console.aliyun.com/?spm=a2c4g.11186623.0.0.965cc5c2GeiHet#/cn-hangzhou) to obtain the ID.', example='1'),
  pageSize?: int32(name='PageSize', description='The ID of the request.', example='10'),
  projectId?: long(name='ProjectId', description='The number of the page to return.', example='123'),
}

model ListMetaDBResponseBody = {
  databaseInfo?: {
    dbList?: [ 
      {
        createTimeStamp?: long(name='CreateTimeStamp', description='The timestamp at which the metadatabase was updated.', example='1388776825'),
        location?: string(name='Location', example='hdfs://localhost:777/user/hadoop/test.txt'),
        modifiedTimeStamp?: long(name='ModifiedTimeStamp', description='The ID of the metadatabase owner.', example='1388776837'),
        name?: string(name='Name', description='The URL of the metadatabase.', example='name'),
        ownerId?: string(name='OwnerId', example='1232'),
        type?: string(name='Type', description='The universally unique identifier (UUID) of the metadatabase.', example='HIVE'),
        UUID?: string(name='UUID', description='The name of the metadatabase.', example='32342'),
      }
    ](name='DbList', description='The timestamp at which the metadatabase was created. You can convert the timestamp to the related date based on the time zone that you use.'),
    totalCount?: long(name='TotalCount', description='The type of the metadatabase.', example='10'),
  }(name='DatabaseInfo', description='The list of metadatabases.'),
  requestId?: string(name='RequestId', description='The total number of the metadatabases.', example='abc'),
}

model ListMetaDBResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMetaDBResponseBody(name='body'),
}

async function listMetaDBWithOptions(request: ListMetaDBRequest, runtime: Util.RuntimeOptions): ListMetaDBResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMetaDB',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMetaDB(request: ListMetaDBRequest): ListMetaDBResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMetaDBWithOptions(request, runtime);
}

model ListMigrationsRequest {
  migrationType?: string(name='MigrationType', description='The ID of the owner.', example='IMPORT'),
  owner?: string(name='Owner', description='The number of the page to return.', example='193379****'),
  pageNumber?: int32(name='PageNumber', description='The number of entries to return on each page. Maximum value: 100.', example='1'),
  pageSize?: int32(name='PageSize', description='The ID of the request.', example='10'),
  projectId?: long(name='ProjectId', description='The type of the migration task. Valid values: IMPORT and EXPORT.', example='12345'),
}

model ListMigrationsResponseBody = {
  data?: {
    migrations?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the migration task was last updated.', example='123124123123123'),
        createUser?: string(name='CreateUser', description='The name of the user who created the migration task.', example='123123****'),
        createUserName?: string(name='CreateUserName', description='The ID of the user who last updated the migration task.', example='3h1_test'),
        description?: string(name='Description', description='The page number of the returned page.'),
        downloadUrl?: string(name='DownloadUrl', description='The description of the export task.', example='http://geoip-sdk-user.oss-cn-zhangjiakou.aliyuncs.com/product/v1/ipv4/trace/v1.20220424123842.dex?Expires=1650780849&OSSAccessKeyId=XXXXXXeF4Lv5j&Signature=qxxxxx'),
        id?: long(name='Id', description='The name of the migration task.', example='436064'),
        message?: string(name='Message', description='The URL that is used to download the package of the export task. You can use the URL to download the package of the export task.', example='An internal system error occurred. datasource kafka region is not cn-chengdu, can\\"t open network for it'),
        migrationType?: string(name='MigrationType', description='The time when the migration task was created.', example='EXPORT'),
        name?: string(name='Name', description='The type of the import or export package. Valid values:

*   DWMA (standard format)
*   DATAWORKS_MODEL (standard format)
*   DATAWORKS_V2 (Apsara Stack DataWorks V3.6.1 to V3.11)
*   DATAWORKS_V3 (Apsara Stack DataWorks V3.12 and later)

The DWMA and DATAWORKS_MODEL types are interchangeable.', example='test_task_1638498642279'),
        packageType?: string(name='PackageType', description='The type of the migration task.

*   IMPORT
*   EXPORT', example='DATAWORKS_MODEL'),
        projectId?: long(name='ProjectId', description='The ID of the tenant.', example='72132'),
        status?: string(name='Status', description='The error message returned.', example='SUCCESS'),
        tenantId?: long(name='TenantId', description='The status of the migration task. Valid values:

*   INIT: The migration task is in the initial state.
*   EDITING: The migration task is being edited.
*   RUNNING: The migration task is running.
*   FAILURE: The migration task fails to run.
*   SUCCESS: The migration task is successfully run.', example='16307'),
        updateTime?: long(name='UpdateTime', description='The ID of the user who created the migration task.', example='123123123123123'),
        updateUser?: string(name='UpdateUser', description='The name of the user who last updated the migration task.', example='1231****'),
        updateUserName?: string(name='UpdateUserName', description='The ID of the DataWorks workspace to which the task belongs.', example='3h1_test'),
      }
    ](name='Migrations', description='The ID of the primary key.'),
    pageNumber?: int32(name='PageNumber', description='The number of entries returned per page. Default value: 10. Maximum value: 50.', example='1'),
    pageSize?: int32(name='PageSize', description='The total number of entries returned.', example='10'),
    totalCount?: int32(name='TotalCount', example='20'),
  }(name='Data', description='The list of migration tasks.'),
  requestId?: string(name='RequestId', description='Indicates whether the request is successful. Valid values:

*   true: The request is successful.
*   false: The request fails.', example='F9198AA3-9010-53D5-9714-DC4461427D3E'),
  success?: boolean(name='Success', description='The data returned.', example='true'),
}

model ListMigrationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMigrationsResponseBody(name='body'),
}

async function listMigrationsWithOptions(request: ListMigrationsRequest, runtime: Util.RuntimeOptions): ListMigrationsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.migrationType)) {
    body['MigrationType'] = request.migrationType;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListMigrations',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMigrations(request: ListMigrationsRequest): ListMigrationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMigrationsWithOptions(request, runtime);
}

model ListNodeIORequest {
  ioType?: string(name='IoType', example='output'),
  nodeId?: long(name='NodeId', example='1234'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
}

model ListNodeIOResponseBody = {
  data?: [ 
    {
      data?: string(name='Data', example='dataworks_a.1234_out'),
      nodeId?: long(name='NodeId', example='123123'),
      tableName?: string(name='TableName', example='dataworks_a.datastudio_tenant_waitres_alarm'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ProjectNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The project does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', example='true'),
}

model ListNodeIOResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNodeIOResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ListNodeIORequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListNodeIOResponse
 */
// Deprecated
async function listNodeIOWithOptions(request: ListNodeIORequest, runtime: Util.RuntimeOptions): ListNodeIOResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.ioType)) {
    body['IoType'] = request.ioType;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListNodeIO',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ListNodeIORequest
  * @return ListNodeIOResponse
 */
// Deprecated
async function listNodeIO(request: ListNodeIORequest): ListNodeIOResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodeIOWithOptions(request, runtime);
}

model ListNodeInputOrOutputRequest {
  ioType?: string(name='IoType', description='The type of node that you want to query. Valid values:

*   input: ancestor nodes
*   output: descendant nodes', example='output'),
  nodeId?: long(name='NodeId', description='The ID of the node. You can call the [ListNodes](~~173979~~) operation to query the node ID.', example='12314567'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: DEV and PROD. A value of DEV indicates the development environment. A value of PROD indicates the production environment.', example='PROD'),
}

model ListNodeInputOrOutputResponseBody = {
  data?: [ 
    {
      data?: string(name='Data', description='The name of the ancestor or descendant node.', example='xxxx.123141254_out'),
      nodeId?: long(name='NodeId', description='The ID of the node.', example='1234667'),
      tableName?: string(name='TableName', description='The name of the associated table.', example='dwd_xxx_table'),
    }
  ](name='Data', description='The ancestor or descendant nodes.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='Invalid.Tenant.ProjectNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.', example='The project does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ListNodeInputOrOutputResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNodeInputOrOutputResponseBody(name='body'),
}

async function listNodeInputOrOutputWithOptions(request: ListNodeInputOrOutputRequest, runtime: Util.RuntimeOptions): ListNodeInputOrOutputResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.ioType)) {
    body['IoType'] = request.ioType;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListNodeInputOrOutput',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNodeInputOrOutput(request: ListNodeInputOrOutputRequest): ListNodeInputOrOutputResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodeInputOrOutputWithOptions(request, runtime);
}

model ListNodesRequest {
  bizName?: string(name='BizName', description='The error code returned.', example='test_bizName'),
  nodeName?: string(name='NodeName', description='The ID of the baseline with which the node is associated.', example='liux_test_n****'),
  owner?: string(name='Owner', description='The description of the node.', example='193379****'),
  pageNumber?: int32(name='PageNumber', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='1'),
  pageSize?: int32(name='PageSize', description='The ID of the workspace.', example='10'),
  programType?: string(name='ProgramType', description='The operation that you want to perform. Set the value to **ListNodes**.', example='ODPS_SQL'),
  projectEnv?: string(name='ProjectEnv', description='The number of entries returned per page. Default value: 10. Maximum value: 100.', example='PROD'),
  projectId?: long(name='ProjectId', description='The ID of the owner.', example='1234'),
}

model ListNodesResponseBody = {
  data?: {
    nodes?: [ 
      {
        baselineId?: long(name='BaselineId', description='The number of the page to return. Minimum value: 1. Maximum value: 100.', example='123456'),
        businessId?: long(name='BusinessId', description='The operation that you want to perform. Set the value to **ListNodes**.', example='123'),
        connection?: string(name='Connection', description='The name of the resource group.', example='odps_first'),
        cronExpress?: string(name='CronExpress', description='The name of the workflow.', example='00 00 00 * * ?'),
        description?: string(name='Description', description='The priority for running the node. Valid values: 1, 3, 5, 7, and 8.', example='test'),
        dqcDescription?: string(name='DqcDescription', description='The ID of the owner.', example='[{"projectName":"ztjy_dim","tableName":"dim_user_agent_manage_area_a","partition":"ds\\u003d$[yyyy-mm-dd-1]"}]'),
        dqcType?: int32(name='DqcType', description='The connection string.', example='1'),
        fileType?: int32(name='FileType'),
        nodeId?: long(name='NodeId', description='The types of the nodes. You can call the [ListNodes](~~173979~~) operation to query the type of the node.', example='1234'),
        nodeName?: string(name='NodeName', description='The total number of nodes returned.', example='liux_test_n****'),
        ownerId?: string(name='OwnerId', description='The additional parameters.', example='19337906836551'),
        paramValues?: string(name='ParamValues', description='The type of the node.', example='a=b'),
        priority?: int32(name='Priority', description='The ID of the owner.', example='1'),
        programType?: string(name='ProgramType', description='The error message returned.', example='ODPS_SQL'),
        projectId?: long(name='ProjectId', description='The information about the nodes.', example='33671'),
        relatedFlowId?: long(name='RelatedFlowId', description='The table and partition filter expression in Data Quality that are associated with the node.', example='1231123'),
        repeatInterval?: long(name='RepeatInterval', description='The environment of the workspace. Valid values: PROD and DEV.', example='60'),
        repeatability?: boolean(name='Repeatability', description='The name of the node.', example='true'),
        resGroupIdentifier?: string(name='ResGroupIdentifier'),
        resGroupName?: string(name='ResGroupName', description='The ID of the workflow.', example='The ID of the request. You can use the ID to query logs and troubleshoot issues.'),
        schedulerType?: string(name='SchedulerType', description='The types of the nodes. You can call the [ListNodes](~~173979~~) operation to query the type of the node.', example='NORMAL'),
      }
    ](name='Nodes', description='The scheduling type of the node. Valid values:

*   NORMAL: indicates that the node is a normal auto triggered node.
*   MANUAL: indicates that the node is a manually triggered node.
*   PAUSE: indicates that the node is a paused node.
*   SKIP: indicates that the node is a dry-run node. Dry-run nodes are started as scheduled but the system sets the status of the nodes to successful when it starts to run them.'),
    pageNumber?: int32(name='PageNumber', description='The name of the node.', example='1'),
    pageSize?: int32(name='PageSize', description='The cron expression returned.', example='10'),
    totalCount?: int32(name='TotalCount', description='The name of the workflow.', example='66'),
  }(name='Data', description='The ID of the associated workflow.'),
  errorCode?: string(name='ErrorCode', description='The HTTP status code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The page number of the returned page.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The interval at which the node is rerun after the node fails to run.', example='200'),
  requestId?: string(name='RequestId', description='The list of nodes.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='Indicates whether the node can be rerun.', example='true'),
}

model ListNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNodesResponseBody(name='body'),
}

async function listNodesWithOptions(request: ListNodesRequest, runtime: Util.RuntimeOptions): ListNodesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizName)) {
    body['BizName'] = request.bizName;
  }
  if (!Util.isUnset(request.nodeName)) {
    body['NodeName'] = request.nodeName;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.programType)) {
    body['ProgramType'] = request.programType;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListNodes',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNodes(request: ListNodesRequest): ListNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodesWithOptions(request, runtime);
}

model ListNodesByBaselineRequest {
  baselineId?: long(name='BaselineId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='1234'),
}

model ListNodesByBaselineResponseBody = {
  data?: [ 
    {
      nodeId?: long(name='NodeId', example='1234'),
      nodeName?: string(name='NodeName', description='The ID of the workspace to which the node belongs.'),
      owner?: string(name='Owner', description='The ID of the node.', example='9527952****'),
      projectId?: long(name='ProjectId', example='1234'),
    }
  ](name='Data', description='The name of the node.'),
  errorCode?: string(name='ErrorCode', description='The nodes in the baseline.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='Indicates whether the request is successful.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The error message returned.', example='200'),
  requestId?: string(name='RequestId', description='The error code returned.', example='0000-ABCD-E****'),
  success?: string(name='Success', description='The ID of the Alibaba Cloud account used by the node owner.', example='true'),
}

model ListNodesByBaselineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNodesByBaselineResponseBody(name='body'),
}

async function listNodesByBaselineWithOptions(request: ListNodesByBaselineRequest, runtime: Util.RuntimeOptions): ListNodesByBaselineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListNodesByBaseline',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNodesByBaseline(request: ListNodesByBaselineRequest): ListNodesByBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodesByBaselineWithOptions(request, runtime);
}

model ListNodesByOutputRequest {
  outputs?: string(name='Outputs', description='The output name of the node. You can specify multiple output names. In this case, separate them with commas (,).', example='aaaaa.1231412_out,bbbb.12313123_out'),
  projectEnv?: string(name='ProjectEnv', description='The environment type. Valid values: PROD and DEV. The value PROD indicates the production environment. The value DEV indicates the development environment.', example='PROD'),
}

model ListNodesByOutputResponseBody = {
  data?: [ 
    {
      nodeList?: [ 
        {
          baselineId?: long(name='BaselineId', description='The ID of the baseline.', example='1235667'),
          connection?: string(name='Connection', description='The name of the data source.', example='odps_first'),
          cronExpress?: string(name='CronExpress', description='The cron expression.', example='00 00 00 * * ?'),
          description?: string(name='Description', description='The description of the node.', example='test'),
          dqcDescription?: string(name='DqcDescription', description='The table and partition filter expression in Data Quality that are associated with the node.', example='[{"projectName":"ztjy_dim","tableName":"dim_user_agent_manage_area_a","partition":"ds\\u003d$[yyyy-mm-dd-1]"}]'),
          dqcType?: int32(name='DqcType', description='Indicates whether the node is associated with Data Quality. Valid values: 0 and 1. The value 0 indicates that node is associated with Data Quality, and the value 1 indicates that the node is not associated with Data Quality.', example='1'),
          fileType?: string(name='FileType', description='The type of the node.

Valid values:

6 (Shell node), 10 (ODPS SQL node), 11 (ODPS MR node), 23 (Data Integration node), 24 (ODPS Script node), 99 (zero-load node), 221 (PyODPS 2 node), 225 (ODPS Spark node), 227 (EMR Hive node), 228 (EMR Spark node), 229 (EMR Spark SQL node), 230 (EMR MR node), 239 (OSS object inspection node), 257 (EMR Shell node), 258 (EMR Spark Shell node), 259 (EMR Presto node), 260 (EMR Impala node), 900 (real-time synchronization node), 1089 (cross-tenant collaboration node), 1091 (Hologres development node), 1093 (Hologres SQL node), 1100 (assignment node), and 1221 (PyODPS 3 node).', example='ODPS_SQL'),
          nodeId?: long(name='NodeId', description='The ID of the node.', example='125677'),
          nodeName?: string(name='NodeName', description='The name of the node.', example='liux_test_n****'),
          ownerId?: string(name='OwnerId', description='The ID of the node owner.', example='19337906836551'),
          paramValues?: string(name='ParamValues', description='The values of the scheduling parameters configured for the node.', example='a=b'),
          priority?: int32(name='Priority', description='The priority of the node. Valid values: 1, 3, 5, 7, and 8. A large value indicates a high priority. Default value: 1.', example='1'),
          programType?: string(name='ProgramType', description='The type of the node. This parameter is deprecated. For more information about node types, see the valid values of FileType.', example='ODPS_SQL'),
          projectId?: long(name='ProjectId', description='The ID of the workspace.', example='33671'),
          relatedFlowId?: long(name='RelatedFlowId', description='The ID of the associated workflow.', example='1235655464'),
          repeatInterval?: int32(name='RepeatInterval', description='The interval at which the node is rerun after the node fails to run.', example='60'),
          repeatability?: boolean(name='Repeatability', description='Indicates whether the node can be rerun.', example='true'),
          resGroupName?: string(name='ResGroupName', description='The name of the resource group.'),
          schedulerType?: string(name='SchedulerType', description='The scheduling type of the node. Valid values:

*   NORAMAL: The node is an auto triggered node. The node is scheduled on a regular basis.
*   MANUAL: The node is a manually triggered node. The node is not scheduled on a regular basis.
*   PAUSE: The node is a frozen node. The system schedules the node on a regular basis but sets it to FAILURE when the system starts to schedule it.
*   SKIP: The node is a dry-run node. The system schedules the node on a regular basis but sets it to SUCCESS when the system starts to schedule it.', example='NORMAL'),
        }
      ](name='NodeList', description='The information of the nodes returned.'),
      output?: string(name='Output', description='The output name of the current node.', example='test_0709_1.630003556_out'),
    }
  ](name='Data', description='The nodes returned.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='SDFSDFSDF-asdfDFSDF-SDFSDf-SDfSFD'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ListNodesByOutputResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNodesByOutputResponseBody(name='body'),
}

async function listNodesByOutputWithOptions(request: ListNodesByOutputRequest, runtime: Util.RuntimeOptions): ListNodesByOutputResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.outputs)) {
    body['Outputs'] = request.outputs;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListNodesByOutput',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNodesByOutput(request: ListNodesByOutputRequest): ListNodesByOutputResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodesByOutputWithOptions(request, runtime);
}

model ListPermissionApplyOrdersRequest {
  endTime?: long(name='EndTime', description='The end time. You can query all permission request orders that have been submitted before the time. The parameter value is a UNIX timestamp. If you do not specify the parameter, all permission request orders that are submitted before the current time are queried.', example='1617200471885'),
  engineType?: string(name='EngineType', description='The type of the compute engine with which the permission request order is associated. The parameter value is odps and cannot be changed. This value indicates that you can request permissions only on fields of tables in MaxCompute compute engine instances.', example='odps'),
  flowStatus?: int32(name='FlowStatus', description='The status of the permission request order. Valid values:

*   1: pending approval
*   2: approved and authorized
*   3: approved but authorization failed
*   4: rejected', example='1'),
  maxComputeProjectName?: string(name='MaxComputeProjectName', description='The name of the MaxCompute project to which the permission request order belongs. If you do not specify the parameter, the permission request orders of all MaxCompute projects are returned.', example='aMaxComputeProject'),
  orderType?: int32(name='OrderType', description='The type of the permission request order. The parameter value is 1 and cannot be changed. This value indicates ACL-based authorization.', example='1'),
  pageNum?: int32(name='PageNum', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='100'),
  queryType?: int32(name='QueryType', description='The query type of the permission request order. Valid values:

*   0: The permission request orders you submitted.
*   1: The permission request orders you approved.', example='1'),
  startTime?: long(name='StartTime', description='The start time. You can query all permission request orders that have been submitted after the time. The parameter value is a UNIX timestamp. If you do not specify the parameter, all permission request orders are queried.', example='1616200471885'),
  tableName?: string(name='TableName', description='The name of the table with which the permission request order is associated. If you do not specify the parameter, the permission request orders of all tables are returned.', example='aTableName'),
  workspaceId?: int32(name='WorkspaceId', description='The ID of the DataWorks workspace to which the permission request order belongs. If you do not specify the parameter, the permission request orders of all workspaces are returned. You can log on to the DataWorks console and go to the Workspace Management page to obtain the ID.', example='12345'),
}

model ListPermissionApplyOrdersResponseBody = {
  applyOrders?: {
    applyOrder?: [ 
      {
        applyBaseId?: string(name='ApplyBaseId', description='The unique ID of the Alibaba Cloud account that was used to submit the permission request order.', example='267842600408993176'),
        applyTimestamp?: long(name='ApplyTimestamp', description='The time when the permission request order was submitted. The parameter value is a UNIX timestamp.', example='1615284086000'),
        approveContent?: {
          applyReason?: string(name='ApplyReason', description='The reason for your request. The administrator determines whether to approve the request based on the reason.', example='I need to use this table'),
          orderType?: int32(name='OrderType', description='The type of the permission request order. The parameter value is 1 and cannot be changed. This value indicates ACL-based authorization.', example='1'),
          projectMeta?: {
            objectMetaList?: [ 
              {
                actions?: [ string ](name='Actions', description='The permission that you wanted to request. If you wanted to request multiple permissions at the same time, separate them with commas (,).

You can request only the following permissions: Select, Describe, Drop, Alter, Update, and Download.'),
                objectName?: string(name='ObjectName', description='The name of the table on which you requested permissions.', example='aTableName'),
              }
            ](name='ObjectMetaList', description='The information about the object on which you requested permissions.'),
            workspaceName?: string(name='WorkspaceName', description='The name of the DataWorks workspace that was associated with the MaxCompute project in which you requested permissions on a table.', example='aWorkspaceName'),
          }(name='ProjectMeta', description='The content of the object on which you requested permissions.'),
        }(name='ApproveContent', description='The content of the permission request order.'),
        flowId?: string(name='FlowId', description='The ID of the permission request order.', example='ad8da78d-8135-455e-9486-27cf213fc140'),
        flowStatus?: int32(name='FlowStatus', description='The status of the permission request order. Valid values:

*   1: pending approval
*   2: approved and authorized
*   3: approved but authorization failed
*   4: rejected', example='2'),
      }
    ](name='ApplyOrder', description='The list of the permission request orders.'),
    pageNumber?: int32(name='PageNumber', description='The number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of permission request orders returned.', example='150'),
  }(name='ApplyOrders', description='The query results returned by page.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0bc1ec92159376****'),
}

model ListPermissionApplyOrdersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPermissionApplyOrdersResponseBody(name='body'),
}

async function listPermissionApplyOrdersWithOptions(request: ListPermissionApplyOrdersRequest, runtime: Util.RuntimeOptions): ListPermissionApplyOrdersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.engineType)) {
    query['EngineType'] = request.engineType;
  }
  if (!Util.isUnset(request.flowStatus)) {
    query['FlowStatus'] = request.flowStatus;
  }
  if (!Util.isUnset(request.maxComputeProjectName)) {
    query['MaxComputeProjectName'] = request.maxComputeProjectName;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryType)) {
    query['QueryType'] = request.queryType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPermissionApplyOrders',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPermissionApplyOrders(request: ListPermissionApplyOrdersRequest): ListPermissionApplyOrdersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPermissionApplyOrdersWithOptions(request, runtime);
}

model ListProgramTypeCountRequest {
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace, including projects in PROD and DEV.', example='PROD'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.', example='1234'),
}

model ListProgramTypeCountResponseBody = {
  programTypeAndCounts?: [ 
    {
      count?: int32(name='Count', description='The number of nodes.', example='3'),
      programType?: string(name='ProgramType', description='The type of the node.', example='ODPS_SQL'),
    }
  ](name='ProgramTypeAndCounts', description='The type and number of nodes.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate logs and troubleshoot problems.', example='E6F0DBDD-5AD****'),
}

model ListProgramTypeCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProgramTypeCountResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ListProgramTypeCountRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListProgramTypeCountResponse
 */
// Deprecated
async function listProgramTypeCountWithOptions(request: ListProgramTypeCountRequest, runtime: Util.RuntimeOptions): ListProgramTypeCountResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListProgramTypeCount',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ListProgramTypeCountRequest
  * @return ListProgramTypeCountResponse
 */
// Deprecated
async function listProgramTypeCount(request: ListProgramTypeCountRequest): ListProgramTypeCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProgramTypeCountWithOptions(request, runtime);
}

model ListProjectIdsRequest {
  userId?: string(name='UserId', description='The ID of the specific Alibaba Cloud account. You can log on to the [DataWorks](https://workbench.data.aliyun.com/console) console and move the pointer over the profile picture in the upper-right corner to view the ID.', example='171111'),
}

model ListProjectIdsResponseBody = {
  projectIds?: [ long ](name='ProjectIds', description='The IDs of the DataWorks workspaces.

The IDs of the workspaces on which the specific Alibaba Cloud account has permissions were returned. In this example, a single workspace ID is used.'),
  requestId?: string(name='RequestId', description='The ID of the request. You can troubleshoot errors based on the ID.', example='0b57ff7216278945532771749d****'),
}

model ListProjectIdsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProjectIdsResponseBody(name='body'),
}

/**
  * For example, an Alibaba Cloud account can assume the developer, O&M engineer, or workspace administrator role in a workspace. For more information, see [Manage members and roles](~~136941~~).
  *
  * @param request ListProjectIdsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListProjectIdsResponse
 */
async function listProjectIdsWithOptions(request: ListProjectIdsRequest, runtime: Util.RuntimeOptions): ListProjectIdsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProjectIds',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * For example, an Alibaba Cloud account can assume the developer, O&M engineer, or workspace administrator role in a workspace. For more information, see [Manage members and roles](~~136941~~).
  *
  * @param request ListProjectIdsRequest
  * @return ListProjectIdsResponse
 */
async function listProjectIds(request: ListProjectIdsRequest): ListProjectIdsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectIdsWithOptions(request, runtime);
}

model ListProjectMembersRequest {
  pageNumber?: int32(name='PageNumber', description='The ID of the request.', example='1'),
  pageSize?: int32(name='PageSize', description='The results that are returned.', example='10'),
  projectId?: long(name='ProjectId', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='27'),
}

model ListProjectMembersResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', description='The total number of entries returned.', example='1'),
    pageSize?: int32(name='PageSize', description='The information of members in the DataWorks workspace.', example='10'),
    projectMemberList?: [ 
      {
        nick?: string(name='Nick', description='The type of the member. Valid values:

*   1: USER_ALIYUN, which indicates that the member is an Alibaba Cloud account.
*   5: USER_UBACCOUNT, which indicates that the member is a RAM user.
*   6: USER_STS_ROLE, which indicates that the member is a RAM role.', example='zhangsan'),
        projectMemberId?: string(name='ProjectMemberId', description='The name of the member.', example='121'),
        projectMemberName?: string(name='ProjectMemberName', description='The roles that are assigned to the member.'),
        projectMemberType?: string(name='ProjectMemberType', description='The ID of the role.', example='1'),
        projectRoleList?: [ 
          {
            projectRoleCode?: string(name='ProjectRoleCode', example='role_project_guest'),
            projectRoleId?: int32(name='ProjectRoleId', description='The name of the role.

DataWorks provides built-in roles and allows you to create custom roles based on your business requirements. For more information about roles, see [Overview of users, roles, and permissions](~~295463~~).', example='1'),
            projectRoleName?: string(name='ProjectRoleName'),
            projectRoleType?: string(name='ProjectRoleType', description='The code of the role.

DataWorks provides built-in roles and allows you to create custom roles based on your business requirements. For more information about roles, see [Overview of users, roles, and permissions](~~295463~~).', example='0'),
          }
        ](name='ProjectRoleList', description='The type of the role. Valid values:

*   0: SYSTEM, which indicates that the role is a built-in role.
*   2: USER_CUSTOM, which indicates that the role is a custom role.'),
        status?: string(name='Status', description='The nickname of the member.', example='0'),
      }
    ](name='ProjectMemberList', description='The ID of the member.'),
    totalCount?: int32(name='TotalCount', description='The status of the member. Valid values:

*   0: NORMAL, which indicates that the member is in a normal state.
*   1: FORBIDDEN, which indicates that the member is disabled.
*   2: DELETED, which indicates that the member is deleted.', example='3'),
  }(name='Data', description='The number of entries returned per page. Default value: 10. Maximum value: 100.'),
  requestId?: string(name='RequestId', description='The page number of the returned page.', example='1AFAE64E-D1BE-432B-A9****'),
}

model ListProjectMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProjectMembersResponseBody(name='body'),
}

async function listProjectMembersWithOptions(request: ListProjectMembersRequest, runtime: Util.RuntimeOptions): ListProjectMembersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProjectMembers',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProjectMembers(request: ListProjectMembersRequest): ListProjectMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectMembersWithOptions(request, runtime);
}

model ListProjectRolesRequest {
  projectId?: long(name='ProjectId', description='Dataworks ID of the region where the workspace is located.', example='27'),
}

model ListProjectRolesResponseBody = {
  projectRoleList?: [ 
    {
      projectRoleCode?: string(name='ProjectRoleCode', example='role_project_guest'),
      projectRoleId?: int32(name='ProjectRoleId', description='The role type of the workspace. Valid values:', example='1'),
      projectRoleName?: string(name='ProjectRoleName', description='The role Code of the workspace.'),
      projectRoleType?: string(name='ProjectRoleType', description='The role name of the workspace.', example='0'),
    }
  ](name='ProjectRoleList', description='The role ID of the workspace.'),
  requestId?: string(name='RequestId', description='The roles of the workspace.', example='1AFAE64E-D1BE-432B-A9****'),
}

model ListProjectRolesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProjectRolesResponseBody(name='body'),
}

async function listProjectRolesWithOptions(request: ListProjectRolesRequest, runtime: Util.RuntimeOptions): ListProjectRolesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProjectRoles',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProjectRoles(request: ListProjectRolesRequest): ListProjectRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectRolesWithOptions(request, runtime);
}

model ListProjectsRequest {
  pageNumber?: int32(name='PageNumber', description='The ID of the resource group.', example='1'),
  pageSize?: int32(name='PageSize', description='The tags.', example='10'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The tag key.', example='rg-acfmzbn7pti3zfa'),
  tags?: [ 
    {
      key?: string(name='Key', description='The ID of the request.', example='Env'),
      value?: string(name='Value', description='The results that are returned.', example='Test'),
    }
  ](name='Tags', description='The tag value.'),
}

model ListProjectsShrinkRequest {
  pageNumber?: int32(name='PageNumber', description='The ID of the resource group.', example='1'),
  pageSize?: int32(name='PageSize', description='The tags.', example='10'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The tag key.', example='rg-acfmzbn7pti3zfa'),
  tagsShrink?: string(name='Tags', description='The tag value.'),
}

model ListProjectsResponseBody = {
  pageResult?: {
    pageNumber?: int32(name='PageNumber', description='The total number of entries returned.', example='1'),
    pageSize?: int32(name='PageSize', description='The DataWorks workspaces returned.', example='10'),
    projectList?: [ 
      {
        disableDevelopment?: boolean(name='DisableDevelopment', description='Indicates whether the MaxCompute tables in the workspace are visible to the users within a tenant. Valid values:

*   0: invisible
*   1: visible', example='true'),
        isDefault?: int32(name='IsDefault', example='1'),
        projectDescription?: string(name='ProjectDescription', description='The ID of the resource group.'),
        projectId?: long(name='ProjectId', description='The ID of the user used by the workspace owner.', example='1212'),
        projectIdentifier?: string(name='ProjectIdentifier', description='The description of the workspace.', example='test'),
        projectName?: string(name='ProjectName', description='The ID of the workspace.'),
        projectOwnerBaseId?: string(name='ProjectOwnerBaseId', description='The tags.', example='122222'),
        projectStatus?: int32(name='ProjectStatus', description='The identifier of the workspace.', example='0'),
        projectStatusCode?: string(name='ProjectStatusCode', description='The name of the workspace.', example='AVAILABLE'),
        resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The tag key.', example='rg-acfmzbn7pti3zfa'),
        tablePrivacyMode?: int32(name='TablePrivacyMode', example='1'),
        tags?: [ 
          {
            key?: string(name='Key', description='Indicates whether the Development role is disabled. Valid values:

*   false: enabled
*   true: disabled
*   Default value: false', example='Env'),
            value?: string(name='Value', description='Indicates whether a proxy account is used to access the MaxCompute compute engine associated with the workspace.', example='Test'),
          }
        ](name='Tags', description='The tag value.'),
        useProxyOdpsAccount?: boolean(name='UseProxyOdpsAccount', description='Indicates whether the workspace is a default workspace. Valid values:

*   1: The workspace is a default workspace.
*   0: The workspace is not a default workspace.', example='true'),
      }
    ](name='ProjectList', description='The status of the workspace. Valid values:

*   0: AVAILABLE, which indicates that the workspace is running as expected.
*   1: DELETED, which indicates that the workspace is deleted.
*   2: INITIALIZING, which indicates that the workspace is being initialized.
*   3: INIT_FAILED, which indicates that the workspace fails to be initialized.
*   4: FORBIDDEN, which indicates that the workspace is manually disabled.
*   5: DELETING, which indicates that the workspace is being deleted.
*   6: DEL_FAILED, which indicates that the workspace fails to be deleted.
*   7: FROZEN, which indicates that the workspace is frozen due to overdue payments.
*   8: UPDATING, which indicates that the workspace is being updated. After you associate a compute engine with the workspace, the system initializes compute engine and updates the workspace.
*   9: UPDATE_FAILED, which indicates that the workspace fails to be updated.'),
    totalCount?: int32(name='TotalCount', description='The status code of the workspace. Valid values:

*   AVAILABLE: 0, which indicates that the workspace is running as expected.
*   DELETED: 1, which indicates that the workspace is deleted.
*   INITIALIZING: 2, which indicates that the workspace is being initialized.
*   INIT_FAILED: 3, which indicates that the workspace fails to be initialized.
*   FORBIDDEN: 4, which indicates that the workspace is manually disabled.
*   DELETING: 5, which indicates that the workspace is being deleted.
*   DEL_FAILED: 6, which indicates that the workspace fails to be deleted.
*   FROZEN: 7, which indicates that the workspace is frozen due to overdue payments.
*   UPDATING: 8, which indicates that the workspace is being updated. After you associate a compute engine with the workspace, the system initializes compute engine and updates the workspace.
*   UPDATE_FAILED: 9, which indicates that the workspace fails to be updated.', example='123'),
  }(name='PageResult', description='The number of entries returned per page. Default value: 10. Maximum value: 100.'),
  requestId?: string(name='RequestId', description='The page number of the returned page.', example='20658801***'),
}

model ListProjectsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProjectsResponseBody(name='body'),
}

async function listProjectsWithOptions(tmpReq: ListProjectsRequest, runtime: Util.RuntimeOptions): ListProjectsResponse {
  Util.validateModel(tmpReq);
  var request = new ListProjectsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProjects',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProjects(request: ListProjectsRequest): ListProjectsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectsWithOptions(request, runtime);
}

model ListQualityResultsByEntityRequest {
  endDate?: string(name='EndDate', description='The name of the compute engine instance or data source. You can obtain the name from data source configurations.', example='2020-09-21 00:00:00'),
  entityId?: int32(name='EntityId', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='152322134'),
  pageNumber?: int32(name='PageNumber', description='The error message returned.', example='1'),
  pageSize?: int32(name='PageSize', description='The HTTP status code returned.', example='10'),
  projectId?: long(name='ProjectId'),
  projectName?: string(name='ProjectName', description='The ID of the request.', example='autotest'),
  startDate?: string(name='StartDate', description='The number of the page to return.', example='2020-09-20 00:00:00'),
}

model ListQualityResultsByEntityResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', description='The monitoring results returned.', example='1'),
    pageSize?: int32(name='PageSize', description='The type of the monitoring rule. The type of a monitoring rule indicates the importance of the rule. Valid values:

*   1: indicates that the monitoring rule is a strong rule.

*   0: indicates that the monitoring rule is a weak rule.

    You can specify whether a monitoring rule is a strong rule based on your business requirements. If a strong rule is used and a critical alert is triggered, nodes are blocked.', example='10'),
    ruleChecks?: [ 
      {
        actualExpression?: string(name='ActualExpression', description='The trend of the monitoring result.', example='ds=20200912'),
        beginTime?: long(name='BeginTime', description='Indicates whether the monitoring result is the same as the predicted result. Valid values:

*   true: indicates that the monitoring result is the same as the predicted result.
*   false: indicates that the monitoring result is different from the predicted result.', example='1600704000000'),
        bizDate?: long(name='BizDate', description='The partition filter expression.', example='1600704000000'),
        blockType?: int32(name='BlockType', description='The name of the table that is monitored.', example='0'),
        checkResult?: int32(name='CheckResult', description='The monitoring type. Valid values:

*   1: VOLATILITY_CHECK
*   2: FIXEDVALUE_CHECK', example='0'),
        checkResultStatus?: int32(name='CheckResultStatus', description='The ID of the monitoring rule.', example='0'),
        checkerId?: int32(name='CheckerId', description='The method used to collect sample data, such as avg, count, sum, min, max, count_distinct, user_defined, table_count, table_size, table_dt_load_count, table_dt_refuseload_count, null_value, null_value/table_count, (table_count-count_distinct)/table_count, or table_count-count_distinct.', example='7'),
        checkerName?: string(name='CheckerName', description='The comparison operator.', example='fulx'),
        checkerType?: int32(name='CheckerType', description='The type of the scheduling cycle. In most cases, the value of this parameter is YMD. This value indicates year, month, and day.', example='1'),
        comment?: string(name='Comment', description='The name of the checker.'),
        criticalThreshold?: float(name='CriticalThreshold', description='The ID of the checker.', example='0.5'),
        dateType?: string(name='DateType', description='The name of the monitoring rule.', example='YMD'),
        discreteCheck?: boolean(name='DiscreteCheck', description='The lower limit of the predicted result. The value of this parameter is automatically generated based on the threshold that you specified.', example='true'),
        endTime?: long(name='EndTime', description='The ID of the partition filter expression.', example='1600704000000'),
        entityId?: int32(name='EntityId', description='The ID of the monitoring template.', example='15432322'),
        expectValue?: float(name='ExpectValue', description='The ID of the primary key.', example='200'),
        externalId?: string(name='ExternalId', description='The type of the scheduling system. Only CWF scheduling systems are supported.', example='1112323123'),
        externalType?: string(name='ExternalType', description='The string of the monitoring result.', example='CWF2'),
        fixedCheck?: boolean(name='FixedCheck', description='The partition in the monitored data source table.', example='false'),
        id?: int32(name='Id', description='The check value.', example='121212121'),
        isPrediction?: boolean(name='IsPrediction', description='Indicates whether the monitoring is discrete monitoring. Valid values:

*   true: indicates that the monitoring is discrete monitoring.
*   false: indicates that the monitoring is not discrete monitoring.', example='true'),
        lowerValue?: float(name='LowerValue', description='The expected value.', example='2344'),
        matchExpression?: string(name='MatchExpression', description='The time when the monitoring started.', example='ds=$[yyyymmdd]'),
        methodName?: string(name='MethodName', description='The filter condition of the monitoring rule.', example='count_distinct'),
        op?: string(name='Op', description='The ID of the node.', example='>'),
        projectName?: string(name='ProjectName', description='The threshold for a critical alert. The threshold indicates the deviation of the monitoring result from the expected value. You can customize this threshold based on your business requirements. If a strong rule is used and a critical alert is reported, nodes are blocked.', example='autotest'),
        property?: string(name='Property', description='The check result of the monitoring rule. Valid values:

*   0: indicates that the data source table is normal.
*   1: indicates that a warning alert is reported.
*   2: indicates that a critical alert is reported.', example='type'),
        referenceValue?: [ 
          {
            bizDate?: string(name='BizDate', description='The sample values.', example='2020-12-03'),
            discreteProperty?: string(name='DiscreteProperty', description='The monitoring result.', example='0'),
            singleCheckResult?: int32(name='SingleCheckResult', description='The values of the sample field that are grouped by using the GROUP BY clause. For example, the values of the Gender field are grouped by using the GROUP BY clause. In this case, the values of DiscreteProperty are Male, Female, and null.', example='0'),
            threshold?: float(name='Threshold', description='The data timestamp. If the monitored business entity is offline data, the value is usually one day before the monitoring is performed.', example='0.5'),
            value?: float(name='Value', description='The threshold.', example='19'),
          }
        ](name='ReferenceValue', description='The data timestamp. If the monitored business entity is offline data, the value is usually one day before the monitoring is performed.'),
        resultString?: string(name='ResultString', description='The name of the compute engine instance or data source for which data quality is monitored.', example='test'),
        ruleId?: int32(name='RuleId', description='The upper limit of the predicted result. The value of this parameter is automatically generated based on the threshold that you specified.', example='123123232'),
        ruleName?: string(name='RuleName', description='The time when the monitoring ended.'),
        sampleValue?: [ 
          {
            bizDate?: string(name='BizDate', example='2020-12-03'),
            discreteProperty?: string(name='DiscreteProperty', example='0'),
            value?: float(name='Value', example='19'),
          }
        ](name='SampleValue', description='The current sample value.'),
        tableName?: string(name='TableName', description='The name of the monitoring template.', example='dual'),
        taskId?: string(name='TaskId', description='The values of the sample field that are grouped by using the GROUP BY clause. For example, the values of the Gender field are grouped by using the GROUP BY clause. In this case, the values of DiscreteProperty are Male, Female, and null.', example='16008552981681a0d6****'),
        templateId?: int32(name='TemplateId', description='The historical sample values.', example='5'),
        templateName?: string(name='TemplateName', description='Indicates whether the monitoring is performed based on a fixed value. Valid values:

*   true: indicates that the monitoring is performed based on a fixed value.
*   false: indicates that the monitoring is performed based on a non-fixed value.'),
        timeCost?: string(name='TimeCost', description='The data timestamp. If the monitored business entity is offline data, the value is usually one day before the monitoring is performed.', example='202'),
        trend?: string(name='Trend', description='The monitoring result. The value of this parameter is the same as the value of the CheckResultStatus parameter. Valid values:

*   0: indicates that the data source table is normal.
*   1: indicates that a warning alert is reported.
*   2: indicates that a critical alert is reported.', example='abs'),
        upperValue?: float(name='UpperValue', description='The time that was taken to run the monitoring task. Unit: seconds.', example='25555'),
        warningThreshold?: float(name='WarningThreshold', description='The description of the monitoring rule.', example='0.1'),
        whereCondition?: string(name='WhereCondition', description='The ID of the monitoring task.', example='id>0'),
      }
    ](name='RuleChecks', description='The field of the rule attribute. This field is the column name of the data source table that is monitored.'),
    totalCount?: long(name='TotalCount', description='The threshold for a warning alert. The threshold indicates the deviation of the monitoring result from the expected value. You can customize this threshold based on your business requirements.', example='50'),
  }(name='Data', description='The total number of entries returned.'),
  errorCode?: string(name='ErrorCode', description='The number of entries returned per page. Default value: 10. Maximum value: 100.', example='401'),
  errorMessage?: string(name='ErrorMessage', description='The error code returned.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='Indicates whether the request is successful.', example='200'),
  requestId?: string(name='RequestId', description='The data structure of the monitoring results returned.', example='CBA58543-00D4-41****'),
  success?: boolean(name='Success', description='The page number of the returned page.', example='true'),
}

model ListQualityResultsByEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQualityResultsByEntityResponseBody(name='body'),
}

/**
  * ****
  *
  * @param request ListQualityResultsByEntityRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListQualityResultsByEntityResponse
 */
async function listQualityResultsByEntityWithOptions(request: ListQualityResultsByEntityRequest, runtime: Util.RuntimeOptions): ListQualityResultsByEntityResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListQualityResultsByEntity',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ****
  *
  * @param request ListQualityResultsByEntityRequest
  * @return ListQualityResultsByEntityResponse
 */
async function listQualityResultsByEntity(request: ListQualityResultsByEntityRequest): ListQualityResultsByEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return listQualityResultsByEntityWithOptions(request, runtime);
}

model ListQualityResultsByRuleRequest {
  endDate?: string(name='EndDate', description='The end of the time range to query. Specify the time in the yyyy-MM-dd HH:mm:ss format.

This parameter is used together with the StartDate parameter. The interval between the time specified by this parameter and the time specified by the StartDate parameter cannot exceed 7 days.', example='2020-09-22 00:00:00'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId'),
  projectName?: string(name='ProjectName', description='The name of the compute engine instance or data source for which data quality is monitored.', example='autotest'),
  ruleId?: long(name='RuleId', description='The ID of the monitoring rule. You can use the ID and information such as a partition filter expression to perform a joint query.', example='152322134'),
  startDate?: string(name='StartDate', description='The beginning of the time range to query. Specify the time in the yyyy-MM-dd HH:mm:ss format.

This parameter is used together with the EndDate parameter. The interval between the time specified by this parameter and the time specified by the EndDate parameter cannot exceed 7 days.', example='2020-09-20 00:00:00'),
}

model ListQualityResultsByRuleResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: 10. Maximum value: 100.', example='10'),
    ruleChecks?: [ 
      {
        actualExpression?: string(name='ActualExpression', description='The partition in the monitored data source table.', example='ds=20200925'),
        beginTime?: long(name='BeginTime', description='The time when the monitoring started.', example='1600704000000'),
        bizDate?: long(name='BizDate', description='The date on which the business was performed. If the monitored business entity is offline data, the value is usually one day before the monitoring is performed.', example='1600704000000'),
        blockType?: int32(name='BlockType', description='The type of the monitoring rule. The type of a monitoring rule indicates the importance of the rule. Valid values:

*   1: indicates that the monitoring rule is a strong rule.

*   0: indicates that the monitoring rule is a weak rule.

    You can specify whether a monitoring rule is a strong rule based on your business requirements. If a strong rule is used and a critical alert is reported, nodes are blocked.', example='1'),
        checkResult?: int32(name='CheckResult', description='The monitoring result.', example='2'),
        checkResultStatus?: int32(name='CheckResultStatus', description='The status of the monitoring result.', example='2'),
        checkerId?: int32(name='CheckerId', description='The ID of the checker.', example='7'),
        checkerName?: string(name='CheckerName', description='The name of the checker.', example='fulx'),
        checkerType?: int32(name='CheckerType', description='The type of the checker.', example='0'),
        comment?: string(name='Comment', description='The description of the monitoring rule.'),
        criticalThreshold?: float(name='CriticalThreshold', description='The threshold for a critical alert. The threshold indicates the deviation of the monitoring result from the expected value. You can customize this threshold based on your business requirements. If a strong rule is used and a critical alert is reported, nodes are blocked.', example='0.6'),
        dateType?: string(name='DateType', description='The type of the scheduling cycle. In most cases, the value of this parameter is YMD. This value indicates year, month, and day.', example='YMD'),
        discreteCheck?: boolean(name='DiscreteCheck', description='Indicates whether the monitoring is discrete monitoring. Valid values:

*   true: indicates that the monitoring is discrete monitoring.
*   false: indicates that the monitoring is not discrete monitoring.', example='true'),
        endTime?: long(name='EndTime', description='The time when the monitoring ended.', example='1600704000000'),
        entityId?: long(name='EntityId', description='The ID of the partition filter expression.', example='14534343'),
        expectValue?: float(name='ExpectValue', description='The expected value.', example='90'),
        externalId?: string(name='ExternalId', description='The ID of the node.', example='123112232'),
        externalType?: string(name='ExternalType', description='The type of the scheduling system. Only CWF scheduling systems are supported.', example='CWF2'),
        fixedCheck?: boolean(name='FixedCheck', description='Indicates whether the monitoring is performed based on a fixed value. Valid values:

*   true: indicates that the monitoring is performed based on a fixed value.
*   false: indicates that the monitoring is performed based on a non-fixed value.', example='false'),
        id?: long(name='Id', description='The ID of the primary key.', example='2231123'),
        isPrediction?: boolean(name='IsPrediction', description='Indicates whether the monitoring result is the same as the predicted result. Valid values:

*   true: indicates that the monitoring result is the same as the predicted result.
*   false: indicates that the monitoring result is different from the predicted result.', example='false'),
        lowerValue?: float(name='LowerValue', description='The lower limit of the predicted result. The value of this parameter is automatically generated based on the threshold that you specified.', example='2344'),
        matchExpression?: string(name='MatchExpression', description='The partition filter expression.', example='ds=$[yyyymmdd]'),
        methodName?: string(name='MethodName', description='The method used to collect sample data, such as avg, count, sum, min, max, count_distinct, user_defined, table_count, table_size, table_dt_load_count, table_dt_refuseload_count, null_value, null_value/table_count, (table_count-count_distinct)/table_count, or table_count-count_distinct.', example='max'),
        op?: string(name='Op', description='The comparison operator.', example='>'),
        open?: boolean(name='Open'),
        projectName?: string(name='ProjectName', description='The name of the compute engine instance or data source for which data quality is monitored.', example='autotest'),
        property?: string(name='Property', description='The field of the rule attribute. This field is the column name of the data source table that is monitored.', example='type'),
        referenceValue?: [ 
          {
            bizDate?: string(name='BizDate', description='The date on which the business was performed. If the monitored business entity is offline data, the value is usually one day before the monitoring is performed.', example='1600704000000'),
            discreteProperty?: string(name='DiscreteProperty', description='The values of the sample field that are grouped by using the GROUP BY clause. For example, the values of the Gender field are grouped by using the GROUP BY clause. In this case, the values of DiscreteProperty are Male, Female, and null.', example='type1'),
            singleCheckResult?: int32(name='SingleCheckResult', description='The string of the monitoring result.', example='2'),
            threshold?: float(name='Threshold', description='The threshold.', example='0.2'),
            value?: float(name='Value', description='The sample value.', example='20'),
          }
        ](name='ReferenceValue', description='The historical sample values.'),
        resultString?: string(name='ResultString', description='The string of the monitoring result.', example='ResultString'),
        ruleId?: long(name='RuleId', description='The ID of the monitoring rule.', example='123421'),
        ruleName?: string(name='RuleName', description='The name of the monitoring rule.'),
        sampleValue?: [ 
          {
            bizDate?: string(name='BizDate', description='The date on which the business was performed. If the monitored business entity is offline data, the value is usually one day before the monitoring is performed.', example='1600704000000'),
            discreteProperty?: string(name='DiscreteProperty', description='The values of the sample field that are grouped by using the GROUP BY clause. For example, the values of the Gender field are grouped by using the GROUP BY clause. In this case, the values of DiscreteProperty are Male, Female, and null.', example='type2'),
            value?: float(name='Value', description='The sample value.', example='23'),
          }
        ](name='SampleValue', description='The sample values.'),
        tableName?: string(name='TableName', description='The name of the table that is monitored.', example='dual'),
        taskId?: string(name='TaskId', description='The ID of the monitoring task.', example='16008552981681a0d6****'),
        templateId?: int32(name='TemplateId', description='The ID of the monitoring template.', example='5'),
        templateName?: string(name='TemplateName', description='The name of the monitoring template.'),
        timeCost?: string(name='TimeCost', description='The time that was taken to run the monitoring task.', example='10'),
        trend?: string(name='Trend', description='The trend of the monitoring result.', example='up'),
        upperValue?: float(name='UpperValue', description='The upper limit of the predicted result. The value of this parameter is automatically generated based on the threshold that you specified.', example='22200'),
        warningThreshold?: float(name='WarningThreshold', description='The threshold for a warning alert. The threshold indicates the deviation of the monitoring result from the expected value. You can customize this threshold based on your business requirements.', example='0.1'),
        whereCondition?: string(name='WhereCondition', description='The filter condition of the monitoring rule.', example='type!=\\"type2\\"'),
      }
    ](name='RuleChecks', description='The monitoring results returned.'),
    totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='200'),
  }(name='Data', description='The data structure of the monitoring results returned.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='401'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CBA58543-00D4-41****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ListQualityResultsByRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQualityResultsByRuleResponseBody(name='body'),
}

async function listQualityResultsByRuleWithOptions(request: ListQualityResultsByRuleRequest, runtime: Util.RuntimeOptions): ListQualityResultsByRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.ruleId)) {
    body['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListQualityResultsByRule',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listQualityResultsByRule(request: ListQualityResultsByRuleRequest): ListQualityResultsByRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return listQualityResultsByRuleWithOptions(request, runtime);
}

model ListQualityRulesRequest {
  entityId?: long(name='EntityId', description='The ID of the partition filter expression. You can call the [GetQualityEntity](~~174003~~) operation to query the ID of the partition filter expression.', example='1234'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10. Maximum value: 20.', example='20'),
  projectId?: long(name='ProjectId'),
  projectName?: string(name='ProjectName', description='The name of the compute engine instance or data source. You can obtain the name from data source configurations.', example='autotest'),
}

model ListQualityRulesResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: 10. Maximum value: 100.', example='20'),
    rules?: [ 
      {
        blockType?: int32(name='BlockType', description='The strength of the monitoring rule. The strength of a monitoring rule indicates the importance of the rule. Valid values:

*   1: The monitoring rule is a strong rule.

*   0: The monitoring rule is a weak rule.

    You can specify whether a monitoring rule is a strong rule based on your business requirements. If a strong rule is used and a critical alert is reported, nodes are blocked.', example='0'),
        checkerId?: int32(name='CheckerId', description='The ID of the checker.', example='7'),
        comment?: string(name='Comment', description='The description of the monitoring rule.'),
        criticalThreshold?: string(name='CriticalThreshold', description='The threshold for a critical alert. The threshold indicates the deviation of the monitoring result from the expected value. You can customize this threshold based on your business requirements. If a strong rule is used and a critical alert is reported, nodes are blocked.', example='40'),
        entityId?: int32(name='EntityId', description='The ID of the partition filter expression.', example='1234'),
        expectValue?: string(name='ExpectValue', description='The expected value.', example='1000'),
        fixCheck?: boolean(name='FixCheck', description='Indicates whether the monitoring is performed based on a fixed value.', example='true'),
        historyCriticalThreshold?: string(name='HistoryCriticalThreshold', description='The historical threshold for a critical alert.', example='history max:80%,history min:50%'),
        historyWarningThreshold?: string(name='HistoryWarningThreshold', description='The historical threshold for a warning alert.', example='history max:40%,history min:10%'),
        id?: int32(name='Id', description='The ID of the monitoring rule.', example='1234'),
        matchExpression?: string(name='MatchExpression', description='The partition filter expression.', example='dt=$[yyyymmdd]'),
        methodId?: int32(name='MethodId', description='The ID of the sampling method of the monitoring rule.', example='21'),
        methodName?: string(name='MethodName', description='The name of the method that is used to collect sample data, such as avg, count, sum, min, max, count_distinct, user_defined, table_count, table_size, table_dt_load_count, table_dt_refuseload_count, null_value, null_value/table_count, (table_count-count_distinct)/table_count, or table_count-count_distinct.', example='count/table_count'),
        onDuty?: string(name='OnDuty', description='The ID of the Alibaba Cloud account that is used to configure the monitoring rule.', example='1912****'),
        onDutyAccountName?: string(name='OnDutyAccountName', description='The name of the Alibaba Cloud account that is used to configure the monitoring rule.', example='test'),
        projectName?: string(name='ProjectName', description='The name of the compute engine instance or data source.', example='autotest'),
        property?: string(name='Property', description='The name of the monitored field.', example='id'),
        propertyKey?: string(name='PropertyKey', description='The field that is used to associate with monitoring rules at the frontend. This parameter can be ignored.', example='table_count'),
        ruleCheckerRelationId?: int32(name='RuleCheckerRelationId', description='The ID of the node that is associated with the partition filter expression.', example='132323'),
        ruleName?: string(name='RuleName', description='The name of the monitoring rule.', example='test'),
        ruleType?: int32(name='RuleType', description='The type of the monitoring rule. Valid values:

*   0: The monitoring rule is created by the system.
*   1: The monitoring rule is created by a user.
*   2: The monitoring rule is a workspace-level rule.', example='0'),
        tableName?: string(name='TableName', description='The name of the table.', example='dual'),
        templateId?: int32(name='TemplateId', description='The ID of the monitoring template.', example='7'),
        templateName?: string(name='TemplateName', description='The name of the monitoring template.'),
        trend?: string(name='Trend', description='The trend of the monitoring results.', example='abs'),
        warningThreshold?: string(name='WarningThreshold', description='The threshold for a warning alert. The threshold indicates the deviation of the monitoring result from the expected value. You can customize this threshold based on your business requirements.', example='10'),
      }
    ](name='Rules', description='The details of the monitoring rules.'),
    totalCount?: long(name='TotalCount', description='The total number of returned entries.', example='400'),
  }(name='Data', description='The list of monitoring rules.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot errors.', example='38cbdef0-f6cf-49****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request is successful.
*   false: The request fails.', example='true'),
}

model ListQualityRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQualityRulesResponseBody(name='body'),
}

async function listQualityRulesWithOptions(request: ListQualityRulesRequest, runtime: Util.RuntimeOptions): ListQualityRulesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListQualityRules',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listQualityRules(request: ListQualityRulesRequest): ListQualityRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listQualityRulesWithOptions(request, runtime);
}

model ListRefDISyncTasksRequest {
  datasourceName?: string(name='DatasourceName', description='The name of the data source. You can call the [ListDataSources](~~211431~~) operation to query the name of the data source.', example='mysql_datasource'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='100'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace Management page to obtain the workspace ID.', example='10000'),
  refType?: string(name='RefType', description='The condition used to filter sync nodes. Valid values:

*   from: queries the sync nodes that use the data source as the source data source.
*   to: queries the sync nodes that use the data source as the destination data source.', example='from'),
  taskType?: string(name='TaskType', description='The type of the sync node that you want to query. Valid values:

*   DI_OFFLINE: batch sync node
*   DI_REALTIME: real-time sync node

You can specify only one type. The sync solution type is not supported.', example='DI_OFFLINE'),
}

model ListRefDISyncTasksResponseBody = {
  data?: {
    DISyncTasks?: [ 
      {
        diDestinationDatasource?: string(name='DiDestinationDatasource', description='The destination data source of the sync node.

If the sync node has multiple destination data sources, the return value is a JSON array, such as \\\\"odps_writer\\\\", \\\\"mysql\\\\".

If the RefType parameter is set to to, the sync nodes that use the specified data source as the destination data source are returned. In this case, the value of this parameter indicates the specified data source.', example='[\\"qcc_polardb2\\"]'),
        diSourceDatasource?: string(name='DiSourceDatasource', description='The source data source of the sync node.

If the sync node has multiple source data sources, the return value is a JSON array, such as \\\\"odps_writer\\\\", \\\\"mysql\\\\".

If the RefType parameter is set to from, the sync nodes that use the specified data source as the source data source are returned. In this case, the value of this parameter indicates the specified data source.', example='[\\"odps_writer\\"]'),
        nodeId?: long(name='NodeId', description='The ID of the sync node.', example='100000'),
        nodeName?: string(name='NodeName', description='The name of the sync node.', example='abcd1234'),
        taskType?: string(name='TaskType', description='The type of the sync node. Valid values:

*   DI_OFFLINE: batch sync node
*   DI_REALTIME: real-time sync node', example='DI_OFFLINE'),
      }
    ](name='DISyncTasks', description='The details of the sync nodes.

A data source is usually associated with multiple sync nodes. Therefore, the value of this parameter is an array. The following parameters are the elements in the array. The sample values of these parameters show the details of a sync node.'),
  }(name='Data', description='The data returned for the query.'),
  requestId?: string(name='RequestId', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model ListRefDISyncTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRefDISyncTasksResponseBody(name='body'),
}

async function listRefDISyncTasksWithOptions(request: ListRefDISyncTasksRequest, runtime: Util.RuntimeOptions): ListRefDISyncTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasourceName)) {
    query['DatasourceName'] = request.datasourceName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.refType)) {
    query['RefType'] = request.refType;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRefDISyncTasks',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRefDISyncTasks(request: ListRefDISyncTasksRequest): ListRefDISyncTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRefDISyncTasksWithOptions(request, runtime);
}

model ListRemindsRequest {
  alertTarget?: string(name='AlertTarget', description='The ID of the Alibaba Cloud account that is used to receive alert notifications.', example='9527952795****'),
  founder?: string(name='Founder', description='The ID of the Alibaba Cloud account that is used to create the custom alert rules.', example='9527952795****'),
  nodeId?: long(name='NodeId', description='The ID of the node to which the custom alert rules are applied. You can use the ID to search for the custom alert rules that are applied to the node.', example='1234'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: 1 to 30. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='10'),
  remindTypes?: string(name='RemindTypes', description='The conditions that trigger an alert for the node. Valid values: FINISHED, UNFINISHED, ERROR, CYCLE_UNFINISHED, and TIMEOUT. The value FINISHED indicates that the node finishes running. The value UNFINISHED indicates that the node is still running at the specified point in time. The value ERROR indicates that an error occurs when the node is running. The value CYCLE_UNFINISHED indicates that the node does not finish running in the specified scheduling cycle. The value TIMEOUT indicates that the node times out. You can specify multiple conditions for a custom alert rule. If you specify multiple condition, separate them with commas (,).', example='FINISHED,ERROR'),
  searchText?: string(name='SearchText', description='The keyword in a rule name that is used to search for the rule. Fuzzy search is supported.', example='Keyword'),
}

model ListRemindsResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    reminds?: [ 
      {
        alertMethods?: [ string ](name='AlertMethods', description='The notification method. Valid values: MAIL, SMS, and PHONE. The value MAIL indicates that the notification is sent by email. The value SMS indicates that the notification is sent by text message. The value PHONE indicates that the notification is sent by call, which is supported only by DataWorks Professional Edition and more advanced editions.'),
        alertTargets?: [ string ](name='AlertTargets', description='The IDs of the Alibaba Cloud accounts that are used to receive alert notifications.'),
        alertUnit?: string(name='AlertUnit', description='The alert recipient. Valid values: OWNER and OTHER. The value OWNER indicates the node owner. The value OTHER indicates a specified user.', example='OWNER'),
        baselineIds?: [ long ](name='BaselineIds', description='The IDs of the baselines to which the custom alert rule is applied. This parameter is returned if the value of the RemindUnit parameter is BASELINE.'),
        bizProcessIds?: [ long ](name='BizProcessIds', description='The IDs of the workflows to which the custom alert rule is applied. This parameter is returned if the value of the RemindUnit parameter is BIZPROCESS.'),
        dndEnd?: string(name='DndEnd', description='The end time of the quiet hours. The value is in the hh:mm format. Valid values of hh: 0 to 23. Valid values of mm: 0 to 59.', example='08:00'),
        dndStart?: string(name='DndStart', description='The start time of the quiet hours. The value is in the hh:mm format. Valid values of hh: 0 to 23. Valid values of mm: 0 to 59.', example='00:00'),
        founder?: string(name='Founder', description='The ID of the Alibaba Cloud account that is used to create the custom alert rule.', example='952795****'),
        nodeIds?: [ long ](name='NodeIds', description='The IDs of the nodes to which the custom alert rule is applied. This parameter is returned if the value of the RemindUnit parameter is NODE.'),
        projectIds?: [ long ](name='ProjectIds', description='The IDs of the workspaces to which the custom alert rule is applied. This parameter is returned if the value of the RemindUnit parameter is PROJECT.'),
        remindId?: long(name='RemindId', description='The ID of the custom alert rule.', example='1234'),
        remindName?: string(name='RemindName', description='The name of the custom alert rule.', example='Alert Rule'),
        remindType?: string(name='RemindType', description='The conditions that trigger an alert for the node. Valid values: FINISHED, UNFINISHED, ERROR, CYCLE_UNFINISHED, and TIMEOUT. The value FINISHED indicates that the node finishes running. The value UNFINISHED indicates that the node is still running at the specified point in time. The value ERROR indicates that an error occurs when the node is running. The value CYCLE_UNFINISHED indicates that the node does not finish running in the specified scheduling cycle. The value TIMEOUT indicates that the node times out.', example='FINISHED'),
        remindUnit?: string(name='RemindUnit', description='The type of the object to which the custom alert rule is applied. Valid values: NODE, BASELINE, PROJECT, and BIZPROCESS. The value NODE indicates that the monitored object is a node. The value BASELINE indicates that the monitored object is a baseline. The value PROJECT indicates that the monitored object is a workspace. The value BIZPROCESS indicates that the monitored object is a workflow.', example='NODE'),
        useflag?: boolean(name='Useflag', description='Indicates whether the custom alert rule is enabled. Valid values: true and false.', example='true'),
      }
    ](name='Reminds', description='The custom alert rules returned.'),
    totalCount?: int32(name='TotalCount', description='The total number of custom alert rules returned.', example='100'),
  }(name='Data', description='The information about custom alert rules returned.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListRemindsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRemindsResponseBody(name='body'),
}

async function listRemindsWithOptions(request: ListRemindsRequest, runtime: Util.RuntimeOptions): ListRemindsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertTarget)) {
    body['AlertTarget'] = request.alertTarget;
  }
  if (!Util.isUnset(request.founder)) {
    body['Founder'] = request.founder;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.remindTypes)) {
    body['RemindTypes'] = request.remindTypes;
  }
  if (!Util.isUnset(request.searchText)) {
    body['SearchText'] = request.searchText;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListReminds',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listReminds(request: ListRemindsRequest): ListRemindsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRemindsWithOptions(request, runtime);
}

model ListResourceGroupsRequest {
  bizExtKey?: string(name='BizExtKey', description='The tags.', example='default'),
  keyword?: string(name='Keyword', description='The ID of the resource group.', example='abc'),
  resourceGroupType?: int32(name='ResourceGroupType', description='The category of the resource groups. Valid values:

*   default: shared resource group
*   single: exclusive resource group
*   Default value: default', example='3'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The tag key.', example='rg-acfmzbn7pti3zfa'),
  tags?: [ 
    {
      key?: string(name='Key', description='The HTTP status code returned.', example='Env'),
      value?: string(name='Value', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='Test'),
    }
  ](name='Tags', description='The tag value.'),
}

model ListResourceGroupsShrinkRequest {
  bizExtKey?: string(name='BizExtKey', description='The tags.', example='default'),
  keyword?: string(name='Keyword', description='The ID of the resource group.', example='abc'),
  resourceGroupType?: int32(name='ResourceGroupType', description='The category of the resource groups. Valid values:

*   default: shared resource group
*   single: exclusive resource group
*   Default value: default', example='3'),
  resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The tag key.', example='rg-acfmzbn7pti3zfa'),
  tagsShrink?: string(name='Tags', description='The tag value.'),
}

model ListResourceGroupsResponseBody = {
  data?: [ 
    {
      bizExtKey?: string(name='BizExtKey', description='The details of the resource group. The content enclosed in braces {} is the details of the resource group.', example='default'),
      cluster?: string(name='Cluster', description='The type of the resource group. Valid values:

*   0: DataWorks
*   2: MaxCompute
*   3: PAI
*   4: Data Integration
*   7: scheduling
*   9: DataService Studio', example='AY18G'),
      createTime?: string(name='CreateTime', description='The mode of the resource group. Valid values:

*   ISOLATE: exclusive resource group that adopts the subscription billing method
*   SHARE: shared resource group that adopts the pay-as-you-go billing method
*   DEVELOP: resource group for developers', example='Jul 9, 2018 2:43:37 PM'),
      enableKp?: boolean(name='EnableKp', description='The time when the cluster was created. Example: Jul 9, 2018 02:43:37 PM.', example='false'),
      id?: long(name='Id', description='The ID of your Alibaba Cloud resource group.', example='1234567'),
      identifier?: string(name='Identifier', description='The category of the resource group. Valid values:

*   default: shared resource group
*   single: exclusive resource group', example='e1815577-2f4e-4c5e-b29****'),
      isDefault?: boolean(name='IsDefault', description='Indicates whether the UID of an Alibaba Cloud account is used for access. Valid values:

*   true: The MaxCompute compute engine uses the UID of the Alibaba Cloud account as the display name of the account for access.

*   false: The MaxCompute compute engine uses the name of the Alibaba Cloud account as the display name of the account for access.

    The remaining values are useless. This parameter is returned only if the type of the resource group is MaxCompute.', example='true'),
      mode?: string(name='Mode', description='The sequence number of the resource group. Created resource groups are sorted in ascending order by sequence number.', example='SHARE'),
      name?: string(name='Name', description='The ID of the tenant.', example='abc'),
      resourceGroupType?: string(name='ResourceGroupType', description='The identifier of the resource group.', example='3'),
      resourceManagerResourceGroupId?: string(name='ResourceManagerResourceGroupId', description='The tag key.', example='rg-acfmzbn7pti3zfa'),
      sequence?: int32(name='Sequence', description='The name of the resource group.', example='300'),
      specs?: map[string]any(name='Specs', description='The ID of the resource group.', example='{}'),
      status?: int32(name='Status', description='Indicates whether the resource group is the default resource group. Valid values:

*   true: The resource group is the default resource group.
*   false: The resource group is not the default resource group.', example='0'),
      tags?: [ 
        {
          key?: string(name='Key', example='Env'),
          value?: string(name='Value', example='Test'),
        }
      ](name='Tags', description='The tag value.'),
      tenantId?: long(name='TenantId', description='The tags.', example='1234567'),
      updateTime?: string(name='UpdateTime', description='The name of the cluster. This parameter is returned only if the type of the resource group is MaxCompute or PAI.', example='Jul 9, 2018 2:43:37 PM'),
    }
  ](name='Data', description='The time when the resource group was last updated.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='Indicates whether the request was successful.', example='200'),
  requestId?: string(name='RequestId', description='The resource groups.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='The status of the resource group. Valid values:

*   0: The resource group is running or in service.
*   1: The resource group has expired and is frozen.
*   2: The resource group is released or destroyed.
*   3: The resource group is being created or started.
*   4: The resource group fails to be created or started.
*   5: The resource group is being scaled out or upgraded.
*   6: The resource group fails to be scaled out or upgraded.
*   7: The resource group is being released or destroyed.
*   8: The resource group fails to be released or destroyed.
*   9: The operation performed on the resource group times out. All operations may time out. This value is temporarily available only for DataService Studio.', example='true'),
}

model ListResourceGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListResourceGroupsResponseBody(name='body'),
}

async function listResourceGroupsWithOptions(tmpReq: ListResourceGroupsRequest, runtime: Util.RuntimeOptions): ListResourceGroupsResponse {
  Util.validateModel(tmpReq);
  var request = new ListResourceGroupsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.bizExtKey)) {
    query['BizExtKey'] = request.bizExtKey;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.resourceGroupType)) {
    query['ResourceGroupType'] = request.resourceGroupType;
  }
  if (!Util.isUnset(request.resourceManagerResourceGroupId)) {
    query['ResourceManagerResourceGroupId'] = request.resourceManagerResourceGroupId;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListResourceGroups',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listResourceGroups(request: ListResourceGroupsRequest): ListResourceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResourceGroupsWithOptions(request, runtime);
}

model ListShiftPersonnelsRequest {
  beginTime?: long(name='BeginTime', description='The time when the on-duty engineer ends a shift. Set the value to a UNIX timestamp.', example='1593950832000'),
  endTime?: long(name='EndTime', description='The ID of the request. You can use the ID to troubleshoot issues.', example='1593950832000'),
  shiftPersonUID?: string(name='ShiftPersonUID', description='The time when the on-duty engineer starts a shift. Set the value to a UNIX timestamp.', example='1933790****551'),
  shiftScheduleIdentifier?: string(name='ShiftScheduleIdentifier', description='The type of on-duty engineers that you want to query. Valid values: ALL, PRIMARY, BACKUP, and DESIGNATED_USER.', example='2ab6456ada634b2f938ee******9b45b'),
  userType?: string(name='UserType', description='The ID of your Alibaba Cloud account. You can log on to the DataWorks console and move the pointer over the profile picture in the upper-right corner to obtain the ID.', example='ALL'),
}

model ListShiftPersonnelsResponseBody = {
  paging?: {
    pageNumber?: int32(name='PageNumber', description='The number of entries returned per page. Default value: 10. Maximum value: 100.', example='1'),
    pageSize?: int32(name='PageSize', description='The total number of entries returned.', example='10'),
    shiftPersons?: [ 
      {
        beginTime?: long(name='BeginTime', description='The time when the on-duty engineer ends the shift.', example='1593950832000'),
        endTime?: long(name='EndTime', example='1593950832000'),
        shiftPersonName?: string(name='ShiftPersonName', description='The time when the on-duty engineer starts the shift.'),
        shiftPersonUID?: string(name='ShiftPersonUID', description='The name of the on-duty engineer.', example='3726346****'),
      }
    ](name='ShiftPersons', description='The UID of the on-duty engineer.'),
    totalCount?: int32(name='TotalCount', description='The on-duty engineers in the shift schedule.', example='100'),
  }(name='Paging', description='The page number of the returned page. Minimum value: 1. Maximum value: 100. Default value: 1.'),
  requestId?: string(name='RequestId', description='The pagination data.', example='0000-ABCD-EFG'),
}

model ListShiftPersonnelsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListShiftPersonnelsResponseBody(name='body'),
}

async function listShiftPersonnelsWithOptions(request: ListShiftPersonnelsRequest, runtime: Util.RuntimeOptions): ListShiftPersonnelsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.beginTime)) {
    body['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.shiftPersonUID)) {
    body['ShiftPersonUID'] = request.shiftPersonUID;
  }
  if (!Util.isUnset(request.shiftScheduleIdentifier)) {
    body['ShiftScheduleIdentifier'] = request.shiftScheduleIdentifier;
  }
  if (!Util.isUnset(request.userType)) {
    body['UserType'] = request.userType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListShiftPersonnels',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listShiftPersonnels(request: ListShiftPersonnelsRequest): ListShiftPersonnelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listShiftPersonnelsWithOptions(request, runtime);
}

model ListShiftSchedulesRequest {
  owner?: string(name='Owner', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='1933790683****'),
  pageNumber?: int32(name='PageNumber', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of the page to return. Minimum value:1. Maximum value: 100. Default value: 1.', example='10'),
  shiftScheduleName?: string(name='ShiftScheduleName', description='The ID of your Alibaba Cloud account. You can log on to the DataWorks console and move the pointer over the profile picture in the upper-right corner to obtain the ID.'),
}

model ListShiftSchedulesResponseBody = {
  paging?: {
    pageNumber?: int32(name='PageNumber', description='The number of entries returned per page.', example='1'),
    pageSize?: int32(name='PageSize', description='The total number of entries returned.', example='10'),
    shiftSchedules?: [ 
      {
        shiftScheduleIdentifier?: string(name='ShiftScheduleIdentifier', description='The name of the shift schedule.', example='2ab6456ada634b2f938ee******9b45b'),
        shiftScheduleName?: string(name='ShiftScheduleName'),
      }
    ](name='ShiftSchedules', description='The unique identifier of the shift schedule. You can use the identifier to query the on-duty engineers in the shift schedule.'),
    totalCount?: int32(name='TotalCount', description='The shift schedules.', example='100'),
  }(name='Paging', description='The page number of the returned page. Minimum value:1. Maximum value: 100.'),
  requestId?: string(name='RequestId', description='The pagination data.', example='E6F0DBDD-5AD****'),
}

model ListShiftSchedulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListShiftSchedulesResponseBody(name='body'),
}

async function listShiftSchedulesWithOptions(request: ListShiftSchedulesRequest, runtime: Util.RuntimeOptions): ListShiftSchedulesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.shiftScheduleName)) {
    body['ShiftScheduleName'] = request.shiftScheduleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListShiftSchedules',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listShiftSchedules(request: ListShiftSchedulesRequest): ListShiftSchedulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listShiftSchedulesWithOptions(request, runtime);
}

model ListSuccessInstanceAmountRequest {
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the ID.', example='9527'),
}

model ListSuccessInstanceAmountResponseBody = {
  instanceStatusTrend?: {
    avgTrend?: [ 
      {
        count?: int32(name='Count', description='The number of instances that are successfully run.', example='10'),
        timePoint?: string(name='TimePoint', description='The point in time. The value is an exact hour that ranges from 00:00 to 23:00, such as 00:00, 01:00, or 02:00.', example='01:00'),
      }
    ](name='AvgTrend', description='The average trend.'),
    todayTrend?: [ 
      {
        count?: int32(name='Count', description='The number of instances that are successfully run.', example='10'),
        timePoint?: string(name='TimePoint', description='The point in time. The value is an exact hour that ranges from 00:00 to 23:00, such as 00:00, 01:00, or 02:00.', example='01:00'),
      }
    ](name='TodayTrend', description='The trend of the number of auto triggered node instances that are successfully run on the current day.'),
    yesterdayTrend?: [ 
      {
        count?: int32(name='Count', description='The number of instances that are successfully run.', example='10'),
        timePoint?: string(name='TimePoint', description='The point in time. The value is an exact hour that ranges from 00:00 to 23:00, such as 00:00, 01:00, or 02:00.', example='01:00'),
      }
    ](name='YesterdayTrend', description='The trend of the number of auto triggered node instances that are successfully run one day earlier than the current day.'),
  }(name='InstanceStatusTrend', description='Indicates the trend of the number of auto triggered node instances that are successfully run every hour on the hour of the current day.'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='952795279527ab****'),
}

model ListSuccessInstanceAmountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSuccessInstanceAmountResponseBody(name='body'),
}

async function listSuccessInstanceAmountWithOptions(request: ListSuccessInstanceAmountRequest, runtime: Util.RuntimeOptions): ListSuccessInstanceAmountResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListSuccessInstanceAmount',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSuccessInstanceAmount(request: ListSuccessInstanceAmountRequest): ListSuccessInstanceAmountResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSuccessInstanceAmountWithOptions(request, runtime);
}

model ListTableLevelRequest {
  levelType?: int32(name='LevelType', description='The type of the table level. Valid values: 1 and 2. A value of 1 indicates the logical level. A value of 2 indicates the physical level.', example='1'),
  pageNum?: int32(name='PageNum', description='The number of the page to return. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10.', example='10'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console to obtain the ID.', example='123'),
}

model ListTableLevelResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='abc'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  tableLevelInfo?: {
    levelList?: [ 
      {
        description?: string(name='Description', description='The description of the table level.'),
        levelId?: long(name='LevelId', description='The ID of the table level.', example='123'),
        levelType?: int32(name='LevelType', description='The type of the table level. Valid values: 1 and 2. A value of 1 indicates the logical level. A value of 2 indicates the physical level.', example='1'),
        name?: string(name='Name', description='The name of the table level.'),
        projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.', example='123'),
      }
    ](name='LevelList', description='The list of table levels.'),
    totalCount?: long(name='TotalCount', description='The total number of table levels returned.', example='10'),
  }(name='TableLevelInfo', description='The information about the table levels.'),
}

model ListTableLevelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTableLevelResponseBody(name='body'),
}

async function listTableLevelWithOptions(request: ListTableLevelRequest, runtime: Util.RuntimeOptions): ListTableLevelResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTableLevel',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTableLevel(request: ListTableLevelRequest): ListTableLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTableLevelWithOptions(request, runtime);
}

model ListTableThemeRequest {
  pageNum?: int32(name='PageNum', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value:10. Maximum value: 100.', example='10'),
  parentId?: long(name='ParentId', description='The ID of the parent table folder.', example='121'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.', example='123'),
}

model ListTableThemeResponseBody = {
  data?: {
    themeList?: [ 
      {
        createTimeStamp?: long(name='CreateTimeStamp', description='The time when the level was created.', example='123432343243'),
        creator?: string(name='Creator', description='The creator of the level.', example='123455'),
        level?: int32(name='Level', description='The level of the table folder. Valid values: 1 and 2. A value of 1 indicates a table folder of level 1. A value of 2 indicates a table folder of level 2.', example='1'),
        name?: string(name='Name', description='The name of the level of the table folder.'),
        parentId?: long(name='ParentId', description='The ID of the parent node.', example='122'),
        projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.', example='123'),
        themeId?: long(name='ThemeId', description='The ID of the table folder.', example='123'),
      }
    ](name='ThemeList', description='The list of levels of the table folders.'),
    totalCount?: long(name='TotalCount', description='The total number of table folders.', example='10'),
  }(name='Data', description='The returned data about the level of the table folder.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='abcde'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ListTableThemeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTableThemeResponseBody(name='body'),
}

async function listTableThemeWithOptions(request: ListTableThemeRequest, runtime: Util.RuntimeOptions): ListTableThemeResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTableTheme',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTableTheme(request: ListTableThemeRequest): ListTableThemeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTableThemeWithOptions(request, runtime);
}

model ListTopicsRequest {
  beginTime?: string(name='BeginTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-dd\\"T\\"HH:mm:ssZ format. The time must be in UTC.', example='2019-03-24T00:00:00+0800'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-dd\\"T\\"HH:mm:ssZ format. The time must be in UTC.', example='2019-03-25T23:00:00+0800'),
  instanceId?: long(name='InstanceId', description='The ID of the node instance that triggers the events. You can configure either this parameter or the NodeId parameter.', example='12345'),
  nodeId?: long(name='NodeId', description='The ID of the node that triggers the events. You can configure either this parameter or the InstanceId parameter.', example='1234'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the owner of the events.', example='952795****'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Valid values: 1 to 30. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10. Maximum value: 100.', example='10'),
  topicStatuses?: string(name='TopicStatuses', description='The status of the events. Valid values: IGNORE, NEW, FIXING, and RECOVER. The value IGNORE indicates that the events are ignored. The value NEW indicates that the events are new events. The value FIXING indicates that the events are being processed. The value RECOVER indicates that the events are processed. You can specify multiple states. Separate them with commas (,).', example='IGNORE,NEW,FIXING,RECOVER'),
  topicTypes?: string(name='TopicTypes', description='The types of the events. Valid values: SLOW and ERROR. The value SLOW indicates that the running duration of the node in the current scheduling cycle is significantly longer than the average running duration of the node in previous scheduling cycles. The value ERROR indicates that the node fails to run. You can specify multiple types. Separate them with commas (,).', example='ERROR,SLOW'),
}

model ListTopicsResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    topics?: [ 
      {
        addTime?: long(name='AddTime', description='The timestamp when the event was found.', example='1553524393000'),
        fixTime?: long(name='FixTime', description='The timestamp when the event was processed.', example='1553508465000'),
        happenTime?: long(name='HappenTime', description='The timestamp when the event occurred. A time difference may exist between the time when the event occurred and the time when the event was found.', example='1553508465000'),
        instanceId?: long(name='InstanceId', description='The ID of the node instance that triggers the event.', example='12345'),
        nodeId?: long(name='NodeId', description='The ID of the node that triggers the event.', example='1234'),
        nodeName?: string(name='NodeName', description='The name of the node.', example='Node Name'),
        nodeOwner?: string(name='NodeOwner', description='The ID of the Alibaba Cloud account that is used by the node owner.', example='952795****'),
        projectId?: long(name='ProjectId', description='The ID of the workspace to which the node belongs.', example='1234'),
        topicId?: long(name='TopicId', description='The ID of the event.', example='1234'),
        topicName?: string(name='TopicName', description='The name of the event.', example='1234 Error'),
        topicStatus?: string(name='TopicStatus', description='The status of the event. Valid values: IGNORE, NEW, FIXING, and RECOVER. The value IGNORE indicates that the event is ignored. The value NEW indicates that the event is a new event. The value FIXING indicates that the event is being processed. The value RECOVER indicates that the event is processed.', example='NEW'),
        topicType?: string(name='TopicType', description='The type of the event. Valid values: SLOW and ERROR. The value SLOW indicates that the running duration of the node in the current scheduling cycle is significantly longer than the average running duration of the node in previous scheduling cycles. The value ERROR indicates that the node fails to run.', example='ERROR'),
      }
    ](name='Topics', description='The events returned.'),
    totalCount?: int32(name='TotalCount', description='The total number of the events returned.', example='100'),
  }(name='Data', description='The information about the events returned.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListTopicsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTopicsResponseBody(name='body'),
}

async function listTopicsWithOptions(request: ListTopicsRequest, runtime: Util.RuntimeOptions): ListTopicsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.beginTime)) {
    body['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.topicStatuses)) {
    body['TopicStatuses'] = request.topicStatuses;
  }
  if (!Util.isUnset(request.topicTypes)) {
    body['TopicTypes'] = request.topicTypes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListTopics',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTopics(request: ListTopicsRequest): ListTopicsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTopicsWithOptions(request, runtime);
}

model MountDirectoryRequest {
  targetId?: string(name='TargetId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='album.339'),
  targetType?: string(name='TargetType', description='The number of directories that are added. Valid values:

*   0: No directories are added. The left-side navigation pane may contain the specified directory.
*   1: One directory is added.', example='META_ALBUM'),
  targetUserId?: string(name='TargetUserId'),
}

model MountDirectoryResponseBody = {
  data?: int32(name='Data', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='1'),
  errorCode?: string(name='ErrorCode', example='200'),
  errorMessage?: string(name='ErrorMessage', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The error message returned if the request failed.', example='200'),
  requestId?: string(name='RequestId', description='The error code returned. The value 200 indicates that the add task is successful.', example='C27D4FB9-C59B-5E17-BD6C-1099B9D6A381'),
  success?: boolean(name='Success', example='true'),
}

model MountDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MountDirectoryResponseBody(name='body'),
}

async function mountDirectoryWithOptions(request: MountDirectoryRequest, runtime: Util.RuntimeOptions): MountDirectoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.targetId)) {
    body['TargetId'] = request.targetId;
  }
  if (!Util.isUnset(request.targetType)) {
    body['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.targetUserId)) {
    body['TargetUserId'] = request.targetUserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'MountDirectory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function mountDirectory(request: MountDirectoryRequest): MountDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return mountDirectoryWithOptions(request, runtime);
}

model OfflineNodeRequest {
  nodeId?: long(name='NodeId', description='The ID of the DataWorks workspace. You can call the [ListProjects](~~178393~~) operation to obtain the ID.', example='1234'),
  projectId?: long(name='ProjectId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='9527'),
}

model OfflineNodeResponseBody = {
  requestId?: string(name='RequestId', description='Indicates whether the request is successful.', example='E6F0DBDD-5AD****'),
  success?: string(name='Success', example='true'),
}

model OfflineNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OfflineNodeResponseBody(name='body'),
}

async function offlineNodeWithOptions(request: OfflineNodeRequest, runtime: Util.RuntimeOptions): OfflineNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'OfflineNode',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function offlineNode(request: OfflineNodeRequest): OfflineNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return offlineNodeWithOptions(request, runtime);
}

model PublishDataServiceApiRequest {
  apiId?: long(name='ApiId', description='The ID of the API. You can call the [ListDataServiceApis](~~174009~~) operation to obtain the ID.', example='10000'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the workspace ID.', example='10001'),
  tenantId?: long(name='TenantId', description='The ID of the tenant.', example='10002'),
}

model PublishDataServiceApiResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the API is published.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model PublishDataServiceApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublishDataServiceApiResponseBody(name='body'),
}

async function publishDataServiceApiWithOptions(request: PublishDataServiceApiRequest, runtime: Util.RuntimeOptions): PublishDataServiceApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PublishDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function publishDataServiceApi(request: PublishDataServiceApiRequest): PublishDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishDataServiceApiWithOptions(request, runtime);
}

model QueryDISyncTaskConfigProcessResultRequest {
  asyncProcessId?: long(name='AsyncProcessId', description='Indicates whether the request is successful. Valid values:

*   true: The request is successful.
*   false: The request fails.', example='10'),
  projectId?: long(name='ProjectId', description='The type of the object that you want to create or update in Data Integration in asynchronous mode. Valid values:

*   DI_REALTIME: real-time synchronization node

*   DI_SOLUTION: synchronization solution

    DataWorks allows you to create or update real-time synchronization nodes and synchronization solutions in Data Integration only in asynchronous mode.', example='10000'),
  taskType?: string(name='TaskType', description='The ID of the asynchronous thread. You can call the [GenerateDISyncTaskConfigForCreating](~~383463~~) or [GenerateDISyncTaskConfigForUpdating](~~383464~~) operation to generate the ID.

*   The GenerateDISyncTaskConfigForCreating operation is used to generate the ID of the asynchronous thread that is used to create a real-time synchronization node or a synchronization solution in Data Integration.
*   The GenerateDISyncTaskConfigForUpdating operation is used to generate the ID of the asynchronous thread that is used to update a real-time synchronization node or a synchronization solution in Data Integration.', example='DI_REALTIME'),
}

model QueryDISyncTaskConfigProcessResultResponseBody = {
  data?: {
    message?: string(name='Message', description='The parameters that are obtained. The parameters are used as the request parameters of the [CreateDISyncTask](~~278725~~) or [UpdateDISyncTask](~~289109~~) operation to create or update a real-time synchronization node or a synchronization solution in Data Integration.', example='fileId:[100] is invalid.'),
    status?: string(name='Status', description='The reason why the parameters fail to be obtained. If the parameters are obtained, the value null is returned.', example='success'),
    taskContent?: string(name='TaskContent', example='{"extend":{"mode":"migration_holo","resourceGroup":"280749","name":"h"},"type":"job","steps":[{"stepType":"mysql","parameter":{"connection":[{"datasourceType":"mysql","datasource":"mm","selectedTables":[{"schema":[{"tableInfos":[{"enable":true,"table":"m_v1","tableName":"m_v1"}]}],"dbName":"m"}]}]},"name":"reader","category":"reader"},{"stepType":"holo","parameter":{"datasource":"h","tableMappingRule":{"datasource":[{"tableRule":[{"srcTable":"m_v1","mergeIntoCycleType":"DEFAULT","hourDeltaEnable":false,"dstTable":"m.m_v1","dayDeltaEnable":false,"primaryKeyInfo":{"column":["id"],"type":"pk"},"dstCreateTableInfo":{"indexType":"m_v1","dataColumn":[{"columnSize":0,"name":"id","index":0,"comment":"","newDigit":0,"type":"int8","digit":0,"primaryKey":true}],"schemaName":"m","tableName":"m_v1"},"srcDbName":"m"],"srcDatasourceName":"mm"}],"totalTableMapping":1},"writeMode":"replay"},"name":"writer","category":"writer"}],"version":"2.0","order":{"hops":[{"from":"reader","to":"writer"}]}}'),
  }(name='Data', description='Indicates whether the parameters are obtained. Valid values:

*   success: indicates that the parameters are obtained.
*   fail: indicates that the parameters fail to be obtained. You can view the reason for the failure and troubleshoot the issue based on the reason.'),
  requestId?: string(name='RequestId', description='The information returned for the parameters that are asynchronously generated and used to create or update a real-time synchronization node or a synchronization solution in Data Integration.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='The ID of the request. You can locate logs and troubleshoot issues based on the ID.', example='true'),
}

model QueryDISyncTaskConfigProcessResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDISyncTaskConfigProcessResultResponseBody(name='body'),
}

/**
  * The operation that you want to perform.
  *
  * @param request QueryDISyncTaskConfigProcessResultRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDISyncTaskConfigProcessResultResponse
 */
async function queryDISyncTaskConfigProcessResultWithOptions(request: QueryDISyncTaskConfigProcessResultRequest, runtime: Util.RuntimeOptions): QueryDISyncTaskConfigProcessResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asyncProcessId)) {
    query['AsyncProcessId'] = request.asyncProcessId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDISyncTaskConfigProcessResult',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The operation that you want to perform.
  *
  * @param request QueryDISyncTaskConfigProcessResultRequest
  * @return QueryDISyncTaskConfigProcessResultResponse
 */
async function queryDISyncTaskConfigProcessResult(request: QueryDISyncTaskConfigProcessResultRequest): QueryDISyncTaskConfigProcessResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDISyncTaskConfigProcessResultWithOptions(request, runtime);
}

model QueryPublicModelEngineRequest {
  projectId?: string(name='ProjectId', example='1234'),
  text?: string(name='Text', example='show dim tables'),
}

model QueryPublicModelEngineResponseBody = {
  requestId?: string(name='RequestId', example='4CFB2DED-7D9B-4C42-B4AA-CFF4991DFFF4'),
  returnValue?: [  map[string]any ](name='ReturnValue'),
}

model QueryPublicModelEngineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPublicModelEngineResponseBody(name='body'),
}

async function queryPublicModelEngineWithOptions(request: QueryPublicModelEngineRequest, runtime: Util.RuntimeOptions): QueryPublicModelEngineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryPublicModelEngine',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPublicModelEngine(request: QueryPublicModelEngineRequest): QueryPublicModelEngineResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPublicModelEngineWithOptions(request, runtime);
}

model RegisterLineageRelationRequest {
  lineageRelationRegisterVO?: LineageRelationRegisterVO(name='LineageRelationRegisterVO'),
}

model RegisterLineageRelationShrinkRequest {
  lineageRelationRegisterVOShrink?: string(name='LineageRelationRegisterVO'),
}

model RegisterLineageRelationResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  lineageRelation?: {
    destEntityQualifiedName?: string(name='DestEntityQualifiedName'),
    relationshipGuid?: string(name='RelationshipGuid'),
    srcEntityQualifiedName?: string(name='SrcEntityQualifiedName'),
  }(name='LineageRelation'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RegisterLineageRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RegisterLineageRelationResponseBody(name='body'),
}

async function registerLineageRelationWithOptions(tmpReq: RegisterLineageRelationRequest, runtime: Util.RuntimeOptions): RegisterLineageRelationResponse {
  Util.validateModel(tmpReq);
  var request = new RegisterLineageRelationShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.lineageRelationRegisterVO)) {
    request.lineageRelationRegisterVOShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.lineageRelationRegisterVO, 'LineageRelationRegisterVO', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.lineageRelationRegisterVOShrink)) {
    body['LineageRelationRegisterVO'] = request.lineageRelationRegisterVOShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RegisterLineageRelation',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function registerLineageRelation(request: RegisterLineageRelationRequest): RegisterLineageRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerLineageRelationWithOptions(request, runtime);
}

model RemoveProjectMemberFromRoleRequest {
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.', example='27'),
  roleCode?: string(name='RoleCode', description='The role in the DataWorks workspace. You can call the ListProjectRoles operation to query codes of the roles in the workspace.

Valid values:

*   role_project_owner: workspace owner
*   role_project_admin: workspace administrator
*   role_project_dev: developer
*   role_project_pe: O\\&M engineer
*   role_project_deploy: deployment expert
*   role_project_guest: visitor
*   role_project_security: security administrator
*   role_project_tester: experiencer
*   role_project_erd: model designer', example='role_project_guest'),
  userId?: string(name='UserId', description='The ID of the user.', example='1234'),
}

model RemoveProjectMemberFromRoleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AFAE64E-D1BE-432B-A9****'),
}

model RemoveProjectMemberFromRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveProjectMemberFromRoleResponseBody(name='body'),
}

async function removeProjectMemberFromRoleWithOptions(request: RemoveProjectMemberFromRoleRequest, runtime: Util.RuntimeOptions): RemoveProjectMemberFromRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.roleCode)) {
    query['RoleCode'] = request.roleCode;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveProjectMemberFromRole',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeProjectMemberFromRole(request: RemoveProjectMemberFromRoleRequest): RemoveProjectMemberFromRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeProjectMemberFromRoleWithOptions(request, runtime);
}

model RestartInstanceRequest {
  instanceId?: long(name='InstanceId', description='The instance ID.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV.', example='PROD'),
}

model RestartInstanceResponseBody = {
  data?: boolean(name='Data', description='The result returned.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request, You can use the ID to query logs and troubleshoot issues.', example='q32ety****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model RestartInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RestartInstanceResponseBody(name='body'),
}

async function restartInstanceWithOptions(request: RestartInstanceRequest, runtime: Util.RuntimeOptions): RestartInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RestartInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function restartInstance(request: RestartInstanceRequest): RestartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartInstanceWithOptions(request, runtime);
}

model ResumeInstanceRequest {
  instanceId?: long(name='InstanceId', description='The instance ID.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV.', example='PROD'),
}

model ResumeInstanceResponseBody = {
  data?: boolean(name='Data', description='The result returned.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ResumeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResumeInstanceResponseBody(name='body'),
}

async function resumeInstanceWithOptions(request: ResumeInstanceRequest, runtime: Util.RuntimeOptions): ResumeInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ResumeInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resumeInstance(request: ResumeInstanceRequest): ResumeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return resumeInstanceWithOptions(request, runtime);
}

model RevokeColumnPermissionRequest {
  columns?: string(name='Columns', description='The Alibaba Cloud account of the user from whom you want to revoke permissions. Specify this parameter in the format that is the same as the format of the account used to access the MaxCompute project.

*   If you want to revoke permissions from an Alibaba Cloud account, specify this parameter in the ALIYUN$+Alibaba Cloud account format.
*   If you want to revoke permissions from a Resource Access Management (RAM) user, specify this parameter in the RAM$+RAM user format.

You must specify either this parameter or RevokeUserId. If you specify both this parameter and RevokeUserId, the value of RevokeUserId prevails.', example='id,name'),
  maxComputeProjectName?: string(name='MaxComputeProjectName', description='The name of the MaxCompute table to which the destination fields belong. You can call the [SearchMetaTables](~~173919~~) operation to query the name.', example='aMaxcomputeProjectName'),
  revokeUserId?: string(name='RevokeUserId', description='Indicates whether the permissions on table fields are revoked.', example='267842600408993176'),
  revokeUserName?: string(name='RevokeUserName', description='The ID of the Alibaba Cloud account of the user from whom you want to revoke permissions. You can log on to the DataWorks console and go to the Security Settings page to obtain the ID.

You must specify either this parameter or RevokeUserName. If you specify both this parameter and RevokeUserName, the value of this parameter prevails.', example='RAM$dataworks_3h1_1:stsramuser'),
  tableName?: string(name='TableName', description='The fields for which you want to revoke permissions from a user. Separate multiple fields with commas (,).

You can revoke the permissions on the fields only in MaxCompute tables.', example='aTableName'),
  workspaceId?: long(name='WorkspaceId', description='The name of the MaxCompute project to which the destination fields belong. You can log on to the DataWorks console and go to the Workspace Management page to obtain the name of the MaxCompute project that is associated with the workspace.', example='12345'),
}

model RevokeColumnPermissionResponseBody = {
  requestId?: string(name='RequestId', example='0bc1ec92159376****'),
  revokeSuccess?: boolean(name='RevokeSuccess', description='The ID of the request.', example='true'),
}

model RevokeColumnPermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevokeColumnPermissionResponseBody(name='body'),
}

async function revokeColumnPermissionWithOptions(request: RevokeColumnPermissionRequest, runtime: Util.RuntimeOptions): RevokeColumnPermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.columns)) {
    query['Columns'] = request.columns;
  }
  if (!Util.isUnset(request.maxComputeProjectName)) {
    query['MaxComputeProjectName'] = request.maxComputeProjectName;
  }
  if (!Util.isUnset(request.revokeUserId)) {
    query['RevokeUserId'] = request.revokeUserId;
  }
  if (!Util.isUnset(request.revokeUserName)) {
    query['RevokeUserName'] = request.revokeUserName;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeColumnPermission',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function revokeColumnPermission(request: RevokeColumnPermissionRequest): RevokeColumnPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeColumnPermissionWithOptions(request, runtime);
}

model RevokeTablePermissionRequest {
  actions?: string(name='Actions', description='The permissions that you want to revoke. Separate multiple permissions with commas (,).

You can revoke only the SELECT, DESCRIBE, and DOWNLOAD permissions on MaxCompute tables.', example='Select,Describe'),
  maxComputeProjectName?: string(name='MaxComputeProjectName', description='The name of the MaxCompute project to which the table belongs. You can log on to the DataWorks console and go to the Workspace Management page to obtain the MaxCompute project name.', example='aMaxcomputeProjectName'),
  revokeUserId?: string(name='RevokeUserId', description='The ID of the Alibaba Cloud account from which you want to revoke permissions. You can log on to the DataWorks console and go to the Security Settings page to obtain the ID.

You must specify either this parameter or RevokeUserName. If you specify both this parameter and RevokeUserName, the value of this parameter prevails.', example='267842600408993176'),
  revokeUserName?: string(name='RevokeUserName', description='The Alibaba Cloud account from which you want to revoke permissions. Specify this parameter in the format that is the same as the format of the account used to access the MaxCompute project.

*   If you want to revoke permissions from an Alibaba Cloud account, specify this parameter in the ALIYUN$+Alibaba Cloud account format.
*   If you want to revoke permissions from a Resource Access Management (RAM) user, specify this parameter in the RAM$+RAM user format.

You must specify either this parameter or RevokeUserId. If you specify both this parameter and RevokeUserId, the value of RevokeUserId prevails.', example='RAM$dataworks_3h1_1:stsramuser'),
  tableName?: string(name='TableName', description='The name of the MaxCompute table. You can call the [SearchMetaTables](~~173919~~) operation to query the table name.', example='aTableName'),
  workspaceId?: long(name='WorkspaceId', description='The ID of the DataWorks workspace with which the MaxCompute project is associated. You can log on to the DataWorks console and go to the Workspace Management page to obtain the ID.', example='12345'),
}

model RevokeTablePermissionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0bc1ec92159376****'),
  revokeSuccess?: boolean(name='RevokeSuccess', description='Indicates whether the permissions on the table are revoked.', example='true'),
}

model RevokeTablePermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevokeTablePermissionResponseBody(name='body'),
}

async function revokeTablePermissionWithOptions(request: RevokeTablePermissionRequest, runtime: Util.RuntimeOptions): RevokeTablePermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actions)) {
    query['Actions'] = request.actions;
  }
  if (!Util.isUnset(request.maxComputeProjectName)) {
    query['MaxComputeProjectName'] = request.maxComputeProjectName;
  }
  if (!Util.isUnset(request.revokeUserId)) {
    query['RevokeUserId'] = request.revokeUserId;
  }
  if (!Util.isUnset(request.revokeUserName)) {
    query['RevokeUserName'] = request.revokeUserName;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeTablePermission',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function revokeTablePermission(request: RevokeTablePermissionRequest): RevokeTablePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeTablePermissionWithOptions(request, runtime);
}

model RunCycleDagNodesRequest {
  bizBeginTime?: string(name='BizBeginTime', description='The time when the node started to run. This parameter is required only for auto triggered nodes that are scheduled by hour. Specify the value in the HH:mm:ss format. Valid values: 00:00:00 to 23:59:59.', example='00:00:00'),
  bizEndTime?: string(name='BizEndTime', description='The time when the node stopped running. This parameter is required only for auto triggered nodes that are scheduled by hour. Specify the value in the HH:mm:ss format. Valid values: 00:00:00 to 23:59:59.', example='01:00:00'),
  endBizDate?: string(name='EndBizDate', description='The data timestamp at which data is no longer backfilled. Specify the value in the yyyy-MM-dd 00:00:00 format.', example='2020-05-21 00:00:00'),
  excludeNodeIds?: string(name='ExcludeNodeIds', description='The IDs of the nodes for which no data needs to be backfilled. The system generates dry-run instances for all these nodes. After these dry-run instances are scheduled, the statuses of these instances are directly set to successful, but the script is not run.', example='1234,123465'),
  includeNodeIds?: string(name='IncludeNodeIds', description='The ID of the node for which you want to backfill data. If you want to backfill data for multiple nodes, separate the IDs of the nodes with commas (,). You can call the [ListNodes](~~173979~~) operation to query the ID.', example='74324,74325'),
  name?: string(name='Name', description='The name of the workflow.', example='xm_test'),
  nodeParams?: string(name='NodeParams', description='The parameters that need to be configured for the node. Set this parameter to a JSON string. The key indicates the ID of the node, and the value indicates the actual values of the parameters.', example='{74324:"a=123 b=456"}'),
  parallelism?: boolean(name='Parallelism', description='Specifies whether data can be backfilled for multiple nodes at the same time.', example='false'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV. The value PROD indicates the production environment, and the value DEV indicates the development environment.', example='PROD'),
  rootNodeId?: long(name='RootNodeId', description='The ID of the node for which data is first backfilled. You can call the [ListNodes](~~173979~~) operation to query the ID.', example='1234'),
  startBizDate?: string(name='StartBizDate', description='The data timestamp at which data starts to be backfilled. Specify the value in the yyyy-MM-dd 00:00:00 format.', example='2020-05-20 00:00:00'),
  startFutureInstanceImmediately?: boolean(name='StartFutureInstanceImmediately', description='Specifies whether to immediately run an instance that is scheduled to run in the future. If you set this parameter to true, the instance that is scheduled to run in the future is run immediately. Otherwise, the instance is run as scheduled.', example='false'),
}

model RunCycleDagNodesResponseBody = {
  data?: [ long ](name='Data', description='The IDs of the nodes in the workflow.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can locate logs and troubleshoot issues based on the ID.', example='>E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model RunCycleDagNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RunCycleDagNodesResponseBody(name='body'),
}

/**
  * For more information about data backfill, see [Backfill data](~~137937~~).
  *
  * @param request RunCycleDagNodesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RunCycleDagNodesResponse
 */
async function runCycleDagNodesWithOptions(request: RunCycleDagNodesRequest, runtime: Util.RuntimeOptions): RunCycleDagNodesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizBeginTime)) {
    body['BizBeginTime'] = request.bizBeginTime;
  }
  if (!Util.isUnset(request.bizEndTime)) {
    body['BizEndTime'] = request.bizEndTime;
  }
  if (!Util.isUnset(request.endBizDate)) {
    body['EndBizDate'] = request.endBizDate;
  }
  if (!Util.isUnset(request.excludeNodeIds)) {
    body['ExcludeNodeIds'] = request.excludeNodeIds;
  }
  if (!Util.isUnset(request.includeNodeIds)) {
    body['IncludeNodeIds'] = request.includeNodeIds;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.nodeParams)) {
    body['NodeParams'] = request.nodeParams;
  }
  if (!Util.isUnset(request.parallelism)) {
    body['Parallelism'] = request.parallelism;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.rootNodeId)) {
    body['RootNodeId'] = request.rootNodeId;
  }
  if (!Util.isUnset(request.startBizDate)) {
    body['StartBizDate'] = request.startBizDate;
  }
  if (!Util.isUnset(request.startFutureInstanceImmediately)) {
    body['StartFutureInstanceImmediately'] = request.startFutureInstanceImmediately;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunCycleDagNodes',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * For more information about data backfill, see [Backfill data](~~137937~~).
  *
  * @param request RunCycleDagNodesRequest
  * @return RunCycleDagNodesResponse
 */
async function runCycleDagNodes(request: RunCycleDagNodesRequest): RunCycleDagNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return runCycleDagNodesWithOptions(request, runtime);
}

model RunManualDagNodesRequest {
  bizDate?: string(name='BizDate', description='The parameters transmitted between nodes in the manually triggered workflow. The parameters are in the following JSON format: { "\\<ID of a node in the manually triggered workflow>": "Scheduling parameter settings of the node, which are in the same format as the Parameters parameter on the Properties tab of the DataStudio page", "\\<ID of a node in the manually triggered workflow>": "Scheduling parameter settings of the node, which are in the same format as the Parameters parameter on the Properties tab of the DataStudio page" }.', example='2020-11-11 00:00:00'),
  dagParameters?: string(name='DagParameters', description='The IDs of the nodes that you need to run in the manually triggered workflow. Separate multiple node IDs with commas (,). You can call the ListNodes operation to query the node IDs.', example='{"kaaaa": "vaaaaa", "kbbbb": "vbbbbb"}'),
  endBizDate?: string(name='EndBizDate'),
  excludeNodeIds?: string(name='ExcludeNodeIds', description='The ID of the workspace to which the manually triggered workflow belongs.', example='123,456'),
  flowName?: string(name='FlowName', description='The data timestamp. The value must be one or more days before the current date. For example, if the current date is November 11, 2020, set the value to 2020-11-10 00:00:00 or earlier. Specify this parameter in the YYYY-MM-DD 00:00:00 format.', example='test_workflow'),
  includeNodeIds?: string(name='IncludeNodeIds', description='The IDs of the nodes that you do not need to run in the manually triggered workflow. The system generates dry-run instances for all these nodes. After the dry-run instances are scheduled, the states of these instances are directly set to successful, but the scripts are not run. Separate multiple node IDs with commas (,).', example='74324,74325'),
  nodeParameters?: string(name='NodeParameters', description='The parameters of the manually triggered workflow, which are synchronized to all the instances in the directed acyclic graph (DAG) of the workflow. If a workflow parameter specified in DagParameters is referenced as a scheduling parameter of a node, the value of the scheduling parameter is replaced with the value of the workflow parameter.', example='{"20000123121": "key1=val2 key2=val2", "20000123124": "kkkk=vvvvv aaaa=bbbb"}'),
  projectEnv?: string(name='ProjectEnv', description='The name of the workspace to which the manually triggered workflow belongs.'),
  projectId?: long(name='ProjectId', description='The ID of the DAG for the manually triggered workflow. You can call an operation with this parameter as a request parameter to query the details and statuses of the nodes in this manually triggered workflow.', example='123'),
  projectName?: string(name='ProjectName', description='The name of the manually triggered workflow.', example='test_workspace'),
  startBizDate?: string(name='StartBizDate'),
}

model RunManualDagNodesResponseBody = {
  dagId?: long(name='DagId', description='The ID of the request.', example='700000123123141'),
  requestId?: string(name='RequestId', example='AASFDFSDFG-DFSDF-DFSDFD-SDFSDF'),
}

model RunManualDagNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RunManualDagNodesResponseBody(name='body'),
}

async function runManualDagNodesWithOptions(request: RunManualDagNodesRequest, runtime: Util.RuntimeOptions): RunManualDagNodesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizDate)) {
    body['BizDate'] = request.bizDate;
  }
  if (!Util.isUnset(request.dagParameters)) {
    body['DagParameters'] = request.dagParameters;
  }
  if (!Util.isUnset(request.endBizDate)) {
    body['EndBizDate'] = request.endBizDate;
  }
  if (!Util.isUnset(request.excludeNodeIds)) {
    body['ExcludeNodeIds'] = request.excludeNodeIds;
  }
  if (!Util.isUnset(request.flowName)) {
    body['FlowName'] = request.flowName;
  }
  if (!Util.isUnset(request.includeNodeIds)) {
    body['IncludeNodeIds'] = request.includeNodeIds;
  }
  if (!Util.isUnset(request.nodeParameters)) {
    body['NodeParameters'] = request.nodeParameters;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.startBizDate)) {
    body['StartBizDate'] = request.startBizDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunManualDagNodes',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function runManualDagNodes(request: RunManualDagNodesRequest): RunManualDagNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return runManualDagNodesWithOptions(request, runtime);
}

model RunSmokeTestRequest {
  bizdate?: string(name='Bizdate', description='The data timestamp.', example='2020-05-26 00:00:00'),
  name?: string(name='Name', description='The name of the workflow.', example='xm_create_test'),
  nodeId?: long(name='NodeId', description='The ID of the node. You can call the [ListNodes](~~173979~~) operation to query the ID.', example='1234'),
  nodeParams?: string(name='NodeParams', description='The parameters related to the node. Set this parameter to a JSON string. A key in the string indicates a parameter, and a value in the string indicates the value of the related parameter.', example='bizdate=$bizdate tbods=$tbods'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV. The value PROD indicates the production environment, and the value DEV indicates the development environment.

A workspace in basic mode does not have a development environment. For more information, see [Basic mode and standard mode](~~85772~~).', example='PROD'),
}

model RunSmokeTestResponseBody = {
  data?: long(name='Data', description='The ID of the workflow.', example='3333333'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can locate logs and troubleshoot issues based on the ID.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='false'),
}

model RunSmokeTestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RunSmokeTestResponseBody(name='body'),
}

async function runSmokeTestWithOptions(request: RunSmokeTestRequest, runtime: Util.RuntimeOptions): RunSmokeTestResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.nodeParams)) {
    body['NodeParams'] = request.nodeParams;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunSmokeTest',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function runSmokeTest(request: RunSmokeTestRequest): RunSmokeTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return runSmokeTestWithOptions(request, runtime);
}

model RunTriggerNodeRequest {
  appId?: long(name='AppId', description='The ID of the DataWorks workspace to which the manually triggered node belongs. You can call the [ListProjects](~~178393~~) operation to query the ID.', example='10001'),
  bizDate?: long(name='BizDate', description='The data timestamp of the manually triggered node instance.', example='1606200230105'),
  cycleTime?: long(name='CycleTime', description='The scheduled time to run the manually triggered node. Set the value to a 13-digit timestamp in milliseconds.', example='1606200230105'),
  nodeId?: long(name='NodeId', description='The ID of the manually triggered node. You can call the [ListNodes](~~173979~~) operation to query the ID.', example='10000011'),
}

model RunTriggerNodeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9BA675F1-F848-4752-A6E3-92ABA0616005'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.

*   true: The request is successful.
*   false: The request fails.', example='true'),
}

model RunTriggerNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RunTriggerNodeResponseBody(name='body'),
}

async function runTriggerNodeWithOptions(request: RunTriggerNodeRequest, runtime: Util.RuntimeOptions): RunTriggerNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.bizDate)) {
    body['BizDate'] = request.bizDate;
  }
  if (!Util.isUnset(request.cycleTime)) {
    body['CycleTime'] = request.cycleTime;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunTriggerNode',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function runTriggerNode(request: RunTriggerNodeRequest): RunTriggerNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return runTriggerNodeWithOptions(request, runtime);
}

model SaveDataServiceApiTestResultRequest {
  apiId?: long(name='ApiId', example='417381955954827'),
  autoGenerate?: boolean(name='AutoGenerate', example='false'),
  failResultSample?: string(name='FailResultSample'),
  projectId?: long(name='ProjectId', example='10001'),
  resultSample?: string(name='ResultSample', example='{  "data": {    "totalNum": 0,    "pageSize": 10,    "rows": [],    "pageNum": 1  },  "errCode": 0,  "requestId": "0bc14a561678159140664515*****",  "errMsg": "success",  "apiLog": null}'),
}

model SaveDataServiceApiTestResultResponseBody = {
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model SaveDataServiceApiTestResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveDataServiceApiTestResultResponseBody(name='body'),
}

async function saveDataServiceApiTestResultWithOptions(request: SaveDataServiceApiTestResultRequest, runtime: Util.RuntimeOptions): SaveDataServiceApiTestResultResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.autoGenerate)) {
    body['AutoGenerate'] = request.autoGenerate;
  }
  if (!Util.isUnset(request.failResultSample)) {
    body['FailResultSample'] = request.failResultSample;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.resultSample)) {
    body['ResultSample'] = request.resultSample;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SaveDataServiceApiTestResult',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function saveDataServiceApiTestResult(request: SaveDataServiceApiTestResultRequest): SaveDataServiceApiTestResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveDataServiceApiTestResultWithOptions(request, runtime);
}

model ScanSensitiveDataRequest {
  data?: string(name='Data', description='The data that you want to check.', example='13900001234'),
}

model ScanSensitiveDataResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0000-ABCD-EFG****'),
  sensitives?: map[string]any(name='Sensitives', description='The result of the check.

sensDatas indicates the rules that are used to check the sensitive data. sensDatas includes the following parameters:

*   hitCount: the number of times that the sensitive data hits the rule
*   ruleName: the name of the rule'),
}

model ScanSensitiveDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ScanSensitiveDataResponseBody(name='body'),
}

async function scanSensitiveDataWithOptions(request: ScanSensitiveDataRequest, runtime: Util.RuntimeOptions): ScanSensitiveDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ScanSensitiveData',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function scanSensitiveData(request: ScanSensitiveDataRequest): ScanSensitiveDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return scanSensitiveDataWithOptions(request, runtime);
}

model SearchMetaTablesRequest {
  appGuid?: string(name='AppGuid', description='The type of the metatables. Valid values: 0 and 1. The value 0 indicates that tables are queried. The value 1 indicates that views are queried. If you do not configure this parameter, all types of metatables are queried.', example='odps.engine_name'),
  clusterId?: string(name='ClusterId', description='The schema information of the table. You need to configure this parameter if you enable the table schema in MaxCompute.', example='abc'),
  dataSourceType?: string(name='DataSourceType', description='The HTTP status code returned.', example='emr'),
  entityType?: int32(name='EntityType', description='The type of the data source. Valid values: odps and emr.', example='0'),
  keyword?: string(name='Keyword', description='The ID of the EMR cluster. This parameter is required only if you set the DataSourceType parameter to emr.

You can log on to the [EMR console](https://emr.console.aliyun.com/?spm=a2c4g.11186623.0.0.965cc5c2GeiHet#/cn-hangzhou) to obtain the ID of the EMR cluster.', example='test'),
  pageNumber?: int32(name='PageNumber', description='The GUID of the workspace where the metatables reside.', example='1'),
  pageSize?: int32(name='PageSize', description='The keyword based on which metatables are queried. During the query, the system tokenizes the names of metatables and matches the names with the keyword. If no name is matched, an empty result is returned. By default, the system uses underscores (\\_) to tokenize the names.', example='10'),
  schema?: string(name='Schema', description='The error message returned.', example='default'),
}

model SearchMetaTablesResponseBody = {
  data?: {
    dataEntityList?: [ 
      {
        clusterId?: string(name='ClusterId', description='The ID of the tenant.', example='abc'),
        databaseName?: string(name='DatabaseName', description='The name of the workspace.', example='abc'),
        entityType?: int32(name='EntityType', description='The ID of the workspace.', example='0'),
        envType?: int32(name='EnvType', description='The schema information of the table. This parameter is returned only if you enable the table schema in MaxCompute.', example='1'),
        ownerId?: string(name='OwnerId', description='The type of the environment. Valid values:

*   1: production environment
*   0: development environment', example='123'),
        projectId?: long(name='ProjectId', description='The ID of the Alibaba Cloud account used by the workspace owner.', example='323'),
        projectName?: string(name='ProjectName', description='The GUID of the metatable.', example='test'),
        schema?: string(name='Schema', example='default'),
        tableGuid?: string(name='TableGuid', description='The ID of the EMR cluster.', example='odps.engine_name.test_name'),
        tableName?: string(name='TableName', description='The type of the metatable. Valid values:

*   0: table
*   1: view', example='test_name'),
        tenantId?: long(name='TenantId', example='12345'),
      }
    ](name='DataEntityList', description='The name of the metadatabase.'),
    pageNumber?: int32(name='PageNumber', description='The total number of metatables.', example='1'),
    pageSize?: int32(name='PageSize', description='The list of metatables.', example='10'),
    totalCount?: long(name='TotalCount', description='The name of the metatable.', example='100'),
  }(name='Data', description='The number of entries returned per page.'),
  errorCode?: string(name='ErrorCode', description='The page number of the returned page.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='Indicates whether the request is successful.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of the request.', example='200'),
  requestId?: string(name='RequestId', description='The error code returned.', example='0bc1ec92159376****'),
  success?: boolean(name='Success', description='The business data returned.', example='true'),
}

model SearchMetaTablesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchMetaTablesResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to **SearchMetaTables**.
  *
  * @param request SearchMetaTablesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SearchMetaTablesResponse
 */
async function searchMetaTablesWithOptions(request: SearchMetaTablesRequest, runtime: Util.RuntimeOptions): SearchMetaTablesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appGuid)) {
    query['AppGuid'] = request.appGuid;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.entityType)) {
    query['EntityType'] = request.entityType;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchMetaTables',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The operation that you want to perform. Set the value to **SearchMetaTables**.
  *
  * @param request SearchMetaTablesRequest
  * @return SearchMetaTablesResponse
 */
async function searchMetaTables(request: SearchMetaTablesRequest): SearchMetaTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchMetaTablesWithOptions(request, runtime);
}

model SearchNodesByOutputRequest {
  outputs?: string(name='Outputs', example='aaaaa.1231412_out,bbbb.12313123_out'),
  projectEnv?: string(name='ProjectEnv', example='PROD'),
}

model SearchNodesByOutputResponseBody = {
  data?: map[string]any(name='Data', example='{ "test_0709_1.630003558_out": {  "nodeId": 21673,             "nodeName": "hour_sql",             "ownerId": 123123123124,             "cronExpress": "00 00 00-23/2 * * ?",             "repeatability": true,             "programType": "ODPS_SQL",             "projectId": 11111,             "schedulerType": "NORMAL",             "priority": 1,             "baselineId": 20001721,             "connection": "odps_first"         },         "test_0709_1.630003556_out": {             "nodeId": 21671,             "nodeName": "start",             "ownerId": 123141231231,             "cronExpress": "00 */10 00-23 * * ?",             "repeatability": true,             "programType": "VIRTUAL",             "projectId": 1111,             "schedulerType": "NORMAL",             "priority": 1,             "baselineId": 20001721         }     }'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='SDFSDFSDF-asdfDFSDF-SDFSDf-SDfSFD'),
  success?: boolean(name='Success', example='true'),
}

model SearchNodesByOutputResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchNodesByOutputResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request SearchNodesByOutputRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SearchNodesByOutputResponse
 */
// Deprecated
async function searchNodesByOutputWithOptions(request: SearchNodesByOutputRequest, runtime: Util.RuntimeOptions): SearchNodesByOutputResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.outputs)) {
    body['Outputs'] = request.outputs;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SearchNodesByOutput',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request SearchNodesByOutputRequest
  * @return SearchNodesByOutputResponse
 */
// Deprecated
async function searchNodesByOutput(request: SearchNodesByOutputRequest): SearchNodesByOutputResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchNodesByOutputWithOptions(request, runtime);
}

model SetDataSourceShareRequest {
  datasourceName?: string(name='DatasourceName', description='The name of the data source to be shared.', example='mysql_name'),
  envType?: string(name='EnvType', description='The environment to which the data source belongs. Valid values:

*   0: development environment
*   1: production environment', example='1'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace to which the data source belongs. You can call the [ListProjects](~~178393~~) operation to query the ID of the workspace.', example='10000'),
  projectPermissions?: string(name='ProjectPermissions', description='The DataWorks workspace to which the data source is to be shared. If you set this parameter, all members of the specified DataWorks workspace can view and use the data source. The value must be a JSON array. Example: {"projectId":1000,"permission":"WRITE","sharedName":"PX_DATAHUB1.shared_name"}.

Field description:

*   projectId: the ID of the DataWorks workspace to which the data source is to be shared.
*   permission: the mode in which the data source is shared. Valid values: READ and WRITE. The value READ indicates that all members of the specified workspace can read data from the data source, but cannot modify the data. The value WRITE indicates that all members of the specified workspace can modify the data in the data source.
*   sharedName: the name of the data source to be shared.', example='[{"projectId":1000,"permission":"WRITE","sharedName":"PX_DATAHUB1.shared_name"}]'),
  userPermissions?: string(name='UserPermissions', description='The user to whom the data source is to be shared. If you set this parameter, the specified user can view or use the data source. The value must be a JSON array. Example: {"projectId":10000,"users":\\[{"userId":"276184575345452131","permission":"WRITE"},"sharedName":"PX_DATAHUB1.shared_name"}].

Field description:

*   projectId: the ID of the DataWorks workspace. If you set the UserPermissions parameter, the specified user can view or use the data source only in this specified DataWorks workspace.
*   userId: the ID of the user to whom the data source is to be shared.
*   permission: the mode in which the data source is shared. Valid values: READ and WRITE. The value READ indicates that the specified user can read data from the data source, but cannot modify the data. The value WRITE indicates that the specified user can modify the data in the data source.
*   sharedName: the name of the data source to be shared.

If the ProjectPermissions and UserPermissions parameters are both left empty, the specified data source is not shared to any DataWorks workspace or user. If neither of the parameters is left empty, both parameters take effect.', example='[{"projectId":10000,"users":[{"userId":"276184575345452131","permission":"WRITE"}],"sharedName":"PX_DATAHUB1.shared_name"}]'),
}

model SetDataSourceShareResponseBody = {
  data?: {
    message?: string(name='Message', description='The reason why the data source failed to be shared. If the data source was shared, this parameter is left empty.', example='datasource is wrong'),
    status?: string(name='Status', description='Indicates whether the data source was shared. Valid values:

*   success: The data source was shared.
*   fail: The data source failed to be shared. You can troubleshoot issues based on the Message parameter.', example='success'),
  }(name='Data', description='The information about the sharing operation.'),
  requestId?: string(name='RequestId', description='The ID of the request. You can locate logs and troubleshoot issues based on the ID.', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model SetDataSourceShareResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDataSourceShareResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request SetDataSourceShareRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetDataSourceShareResponse
 */
// Deprecated
async function setDataSourceShareWithOptions(request: SetDataSourceShareRequest, runtime: Util.RuntimeOptions): SetDataSourceShareResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasourceName)) {
    query['DatasourceName'] = request.datasourceName;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectPermissions)) {
    query['ProjectPermissions'] = request.projectPermissions;
  }
  if (!Util.isUnset(request.userPermissions)) {
    query['UserPermissions'] = request.userPermissions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDataSourceShare',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request SetDataSourceShareRequest
  * @return SetDataSourceShareResponse
 */
// Deprecated
async function setDataSourceShare(request: SetDataSourceShareRequest): SetDataSourceShareResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDataSourceShareWithOptions(request, runtime);
}

model SetSuccessInstanceRequest {
  instanceId?: long(name='InstanceId', description='The environment of the workspace. Valid values: PROD and DEV.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The HTTP status code.', example='PROD'),
}

model SetSuccessInstanceResponseBody = {
  data?: boolean(name='Data', description='The error message.', example='true'),
  errorCode?: string(name='ErrorCode', description='Indicates whether the request is successful.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The ID of the request.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='Indicates whether result details are returned.', example='200'),
  requestId?: string(name='RequestId', description='The error code.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', example='true'),
}

model SetSuccessInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetSuccessInstanceResponseBody(name='body'),
}

async function setSuccessInstanceWithOptions(request: SetSuccessInstanceRequest, runtime: Util.RuntimeOptions): SetSuccessInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SetSuccessInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setSuccessInstance(request: SetSuccessInstanceRequest): SetSuccessInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return setSuccessInstanceWithOptions(request, runtime);
}

model StartDISyncInstanceRequest {
  fileId?: long(name='FileId', description='*   If you set the TaskType parameter to DI_REALTIME, the StartParam parameter specifies the startup parameters for the real-time synchronization node. The startup parameters include failover-related parameters, the parameter that specifies the number of dirty data records allowed, and the parameters in the data definition language (DDL) statements.
*   If you set the TaskType parameter to DI_SOLUTION, the StartParam parameter does not take effect.', example='100'),
  projectId?: long(name='ProjectId', description='The type of the Data Integration object that you want to start. Valid values:

*   DI_REALTIME: real-time synchronization node
*   DI_SOLUTION: data synchronization solution', example='10000'),
  startParam?: string(name='StartParam', description='Indicates whether the request is successful. Valid values:

*   true: The request succeeded.
*   false: The request failed.', example='{"failoverLimit":{"count":10,"interval":30},"errorLimit":{"record":0},"ddlMarkMap":{"RENAMECOLUMN":"WARNING","DROPTABLE":"WARNING","CREATETABLE":"IGNORE","MODIFYCOLUMN":"WARNING","TRUNCATETABLE":"NORMAL","DROPCOLUMN":"IGNORE","ADDCOLUMN":"NORMAL","RENAMETABLE":"CRITICAL"}}'),
  taskType?: string(name='TaskType', description='*   If you set the TaskType parameter to DI_REALTIME, set the FileId parameter to the ID of the real-time synchronization node that you want to start.
*   If you set the TaskType parameter to DI_SOLUTION, set the FileId parameter to the ID of the data synchronization solution that you want to start.', example='DI_REALTIME'),
}

model StartDISyncInstanceResponseBody = {
  data?: {
    message?: string(name='Message', example='fileId:[100] is invalid.'),
    status?: string(name='Status', description='The reason why the real-time synchronization node or the data synchronization solution fails to be started.

If the real-time synchronization node or the data synchronization solution is started, the value null is returned.', example='success'),
  }(name='Data', description='Indicates whether the real-time synchronization node or the data synchronization solution is started. Valid values:

*   success: The real-time synchronization node or the data synchronization solution is started.
*   fail: The real-time synchronization node or the data synchronization solution fails to be started. You can troubleshoot the issue based on the provided cause.'),
  requestId?: string(name='RequestId', description='The result returned for the start.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='The ID of the request. You can locate logs and troubleshoot issues based on the ID.', example='true'),
}

model StartDISyncInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartDISyncInstanceResponseBody(name='body'),
}

async function startDISyncInstanceWithOptions(request: StartDISyncInstanceRequest, runtime: Util.RuntimeOptions): StartDISyncInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.startParam)) {
    query['StartParam'] = request.startParam;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartDISyncInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startDISyncInstance(request: StartDISyncInstanceRequest): StartDISyncInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDISyncInstanceWithOptions(request, runtime);
}

model StartMigrationRequest {
  migrationId?: long(name='MigrationId', description='The ID of the migration package. You can call the [CreateImportMigration](~~206094~~) operation to obtain the ID of the import package and call the [CreateExportMigration](~~349325~~) operation to obtain the ID of the export package.', example='123456'),
  projectId?: long(name='ProjectId', description='The ID of the workspace. You can go to the Workspace Management page of the DataWorks console to view the ID.', example='123456'),
}

model StartMigrationResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the migration task is started. Valid values:

*   true: The migration task is started.
*   false: The migration task fails to be started.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='110001123445'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='test error msg'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FSDFSDF-WERWER-XVCX-DSFSDF'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model StartMigrationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartMigrationResponseBody(name='body'),
}

async function startMigrationWithOptions(request: StartMigrationRequest, runtime: Util.RuntimeOptions): StartMigrationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.migrationId)) {
    body['MigrationId'] = request.migrationId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StartMigration',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startMigration(request: StartMigrationRequest): StartMigrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return startMigrationWithOptions(request, runtime);
}

model StopDISyncInstanceRequest {
  fileId?: long(name='FileId', description='Indicates whether the request is successful. Valid values:

*   true: The request is successful.
*   false: The request fails.', example='100'),
  projectId?: long(name='ProjectId', description='The type of the synchronization node that you want to stop. Set the value to DI_REALTIME.

DI_REALTIME indicates a real-time synchronization node.', example='10000'),
  taskType?: string(name='TaskType', description='The ID of the synchronization node. You can call the [ListFiles](~~173942~~) operation to obtain the ID.', example='DI_REALTIME'),
}

model StopDISyncInstanceResponseBody = {
  data?: {
    message?: string(name='Message', example='fileId:[100] is invalid.'),
    status?: string(name='Status', description='The reason why the synchronization node fails to be stopped.

If the synchronization node is stopped, the value null is returned.', example='success'),
  }(name='Data', description='Indicates whether the synchronization node is stopped. Valid values:

*   success: The synchronization node is stopped.
*   fail: The synchronization node fails to be stopped.'),
  requestId?: string(name='RequestId', description='The information returned for the synchronization node.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='The ID of the request. You can locate logs and troubleshoot issues based on the ID.', example='true'),
}

model StopDISyncInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopDISyncInstanceResponseBody(name='body'),
}

async function stopDISyncInstanceWithOptions(request: StopDISyncInstanceRequest, runtime: Util.RuntimeOptions): StopDISyncInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopDISyncInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopDISyncInstance(request: StopDISyncInstanceRequest): StopDISyncInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDISyncInstanceWithOptions(request, runtime);
}

model StopInstanceRequest {
  instanceId?: long(name='InstanceId', description='The ID of the instance. You can call the [ListInstances](~~173982~~) operation to query the ID.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV.', example='PROD'),
}

model StopInstanceResponseBody = {
  data?: boolean(name='Data', description='The result returned.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model StopInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopInstanceResponseBody(name='body'),
}

async function stopInstanceWithOptions(request: StopInstanceRequest, runtime: Util.RuntimeOptions): StopInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StopInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopInstanceWithOptions(request, runtime);
}

model SubmitDataServiceApiRequest {
  apiId?: long(name='ApiId', example='12345'),
  projectId?: long(name='ProjectId', example='10000'),
  tenantId?: long(name='TenantId', example='10001'),
}

model SubmitDataServiceApiResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model SubmitDataServiceApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitDataServiceApiResponseBody(name='body'),
}

async function submitDataServiceApiWithOptions(request: SubmitDataServiceApiRequest, runtime: Util.RuntimeOptions): SubmitDataServiceApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitDataServiceApi(request: SubmitDataServiceApiRequest): SubmitDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitDataServiceApiWithOptions(request, runtime);
}

model SubmitFileRequest {
  comment?: string(name='Comment', description='Specifies whether to skip the pre-publish check after the file is committed.

*   false: indicates that the pre-publish check is not skipped. After the file is committed, the pre-publish check is automatically triggered. The file can be deployed only after the file passes the check.
*   true: indicates that the pre-publish check is skipped. After the file is submitted, the pre-publish check process is not triggered. You can directly publish the file.'),
  fileId?: long(name='FileId', description='The description of the commit operation.', example='1000000'),
  projectId?: long(name='ProjectId', description='The name of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the workspace name. You must configure either this parameter or the ProjectId parameter to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The ID of the file. You can call the [ListFiles](~~173942~~) operation to query the ID.', example='dw_project'),
  skipAllDeployFileExtensions?: boolean(name='SkipAllDeployFileExtensions', description='The HTTP status code returned.', example='false'),
}

model SubmitFileResponseBody = {
  data?: long(name='Data', description='The ID of the request. You can troubleshoot issues based on the ID.', example='3000001'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='Indicates whether the request is successful.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of the deployment task. The ID is used as the value of a specific request parameter when you call the [GetDeployment](~~173950~~) operation to query the details of the deployment task.', example='200'),
  requestId?: string(name='RequestId', description='The error message returned.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='The error code returned.', example='true'),
}

model SubmitFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitFileResponseBody(name='body'),
}

async function submitFileWithOptions(request: SubmitFileRequest, runtime: Util.RuntimeOptions): SubmitFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.skipAllDeployFileExtensions)) {
    body['SkipAllDeployFileExtensions'] = request.skipAllDeployFileExtensions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitFile(request: SubmitFileRequest): SubmitFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitFileWithOptions(request, runtime);
}

model SuspendInstanceRequest {
  instanceId?: long(name='InstanceId', description='The instance ID.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values: PROD and DEV.', example='PROD'),
}

model SuspendInstanceResponseBody = {
  data?: boolean(name='Data', description='The result returned.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ProjectNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='0baf87f0159376****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model SuspendInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SuspendInstanceResponseBody(name='body'),
}

async function suspendInstanceWithOptions(request: SuspendInstanceRequest, runtime: Util.RuntimeOptions): SuspendInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SuspendInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function suspendInstance(request: SuspendInstanceRequest): SuspendInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return suspendInstanceWithOptions(request, runtime);
}

model TerminateDISyncInstanceRequest {
  fileId?: long(name='FileId', description='Indicates whether the request is successful. Valid values:

*   true: The request is successful.
*   false: The request fails.', example='100'),
  projectId?: long(name='ProjectId', description='The type of the node. A value of DI_REALTIME indicates that the node is a real-time synchronization node.', example='10000'),
  taskType?: string(name='TaskType', description='The ID of the real-time synchronization node.', example='DI_REALTIME'),
}

model TerminateDISyncInstanceResponseBody = {
  data?: {
    message?: string(name='Message', example='fileId:[100] is invalid.'),
    status?: string(name='Status', description='The reason why the real-time synchronization node fails to be terminated. If the real-time synchronization node is terminated, this parameter is left empty.', example='success'),
  }(name='Data', description='Indicates whether the real-time synchronization node is terminated. Valid values:

*   success
*   fail'),
  requestId?: string(name='RequestId', description='The result of the operation.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='The ID of the request. You can query logs and troubleshoot issues based on the ID.', example='true'),
}

model TerminateDISyncInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TerminateDISyncInstanceResponseBody(name='body'),
}

async function terminateDISyncInstanceWithOptions(request: TerminateDISyncInstanceRequest, runtime: Util.RuntimeOptions): TerminateDISyncInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TerminateDISyncInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function terminateDISyncInstance(request: TerminateDISyncInstanceRequest): TerminateDISyncInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return terminateDISyncInstanceWithOptions(request, runtime);
}

model TestDataServiceApiRequest {
  apiId?: long(name='ApiId', description='The ID of the DataService Studio API on which the test is performed.', example='12343'),
  bodyContent?: string(name='BodyContent', description='The data of the request body.', example='{"name":"test"}'),
  bodyParams?: [ 
    {
      paramKey?: string(name='ParamKey', description='The name of the parameter.', example='name'),
      paramValue?: string(name='ParamValue', description='The value of the parameter.', example='test'),
    }
  ](name='BodyParams', description='The request parameters that are contained in the request body.'),
  headParams?: [ 
    {
      paramKey?: string(name='ParamKey', description='The name of the parameter.', example='requestId'),
      paramValue?: string(name='ParamValue', description='The value of the parameter.', example='abcd'),
    }
  ](name='HeadParams', description='The request parameters that are contained in the request header.'),
  pathParams?: [ 
    {
      paramKey?: string(name='ParamKey', description='The name of the parameter.', example='path1'),
      paramValue?: string(name='ParamValue', description='The value of the parameter.', example='api'),
    }
  ](name='PathParams', description='The request parameters that are contained in the request path.'),
  queryParam?: [ 
    {
      paramKey?: string(name='ParamKey', description='The name of the parameter.', example='name'),
      paramValue?: string(name='ParamValue', description='The value of the parameter.', example='test'),
    }
  ](name='QueryParam', description='The request parameters that are contained in the query.'),
}

model TestDataServiceApiResponseBody = {
  data?: {
    testId?: string(name='TestId', description='The ID of the test.', example='232432'),
  }(name='Data', description='The information about the test.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='abdsfewe'),
}

model TestDataServiceApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TestDataServiceApiResponseBody(name='body'),
}

async function testDataServiceApiWithOptions(request: TestDataServiceApiRequest, runtime: Util.RuntimeOptions): TestDataServiceApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.bodyContent)) {
    body['BodyContent'] = request.bodyContent;
  }
  if (!Util.isUnset(request.bodyParams)) {
    body['BodyParams'] = request.bodyParams;
  }
  if (!Util.isUnset(request.headParams)) {
    body['HeadParams'] = request.headParams;
  }
  if (!Util.isUnset(request.pathParams)) {
    body['PathParams'] = request.pathParams;
  }
  if (!Util.isUnset(request.queryParam)) {
    body['QueryParam'] = request.queryParam;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TestDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function testDataServiceApi(request: TestDataServiceApiRequest): TestDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return testDataServiceApiWithOptions(request, runtime);
}

model TestNetworkConnectionRequest {
  datasourceName?: string(name='DatasourceName', description='The name of the data source.', example='mysql_name'),
  envType?: string(name='EnvType', description='The environment to which the data source belongs. Valid values:

*   0: development environment
*   1: production environment', example='1'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace to which the data source belongs. You can call the [ListProjects](~~178393~~) operation to query the ID of the workspace.', example='10000'),
  resourceGroup?: string(name='ResourceGroup', description='The identifier of the resource group. You can call the [ListResourceGroups](~~173913~~) operation to query the identifier of the resource group.', example='S_res_group_2XXXX4_1619100XXXXX'),
}

model TestNetworkConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request. You can locate logs and troubleshoot issues based on the ID.', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
  taskList?: {
    connectMessage?: string(name='ConnectMessage', description='The reason why the data source and resource group failed the connectivity test. If data source and the resource group passed the connectivity test, this parameter is left empty.'),
    connectStatus?: boolean(name='ConnectStatus', description='The result of the connectivity test. Valid values:

*   true: The data source and the resource group passed the connectivity test.
*   false: The data source and the resource group failed the connectivity test. You can troubleshoot issues based on the ConnectMessage parameter.', example='true'),
  }(name='TaskList', description='The information about the connectivity test.'),
}

model TestNetworkConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TestNetworkConnectionResponseBody(name='body'),
}

async function testNetworkConnectionWithOptions(request: TestNetworkConnectionRequest, runtime: Util.RuntimeOptions): TestNetworkConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.datasourceName)) {
    query['DatasourceName'] = request.datasourceName;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.resourceGroup)) {
    query['ResourceGroup'] = request.resourceGroup;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TestNetworkConnection',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function testNetworkConnection(request: TestNetworkConnectionRequest): TestNetworkConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return testNetworkConnectionWithOptions(request, runtime);
}

model TopTenElapsedTimeInstanceRequest {
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the workspace ID.', example='100000'),
}

model TopTenElapsedTimeInstanceResponseBody = {
  instanceConsumeTimeRank?: {
    consumeTimeRank?: [ 
      {
        businessDate?: long(name='BusinessDate', description='The data timestamp of the instance.', example='1600963200000'),
        consumed?: long(name='Consumed', description='The running duration of the instance. Unit: seconds.', example='1000'),
        instanceId?: long(name='InstanceId', description='The ID of the instance.', example='95279527'),
        nodeId?: long(name='NodeId', description='The ID of the node.', example='9527'),
        nodeName?: string(name='NodeName', description='The name of the node.'),
        owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the owner of the node.', example='952795279527'),
        programType?: int32(name='ProgramType', description='The type of the node.

Valid values:

6 (Shell), 10 (ODPS SQL), 11 (ODPS MR), 23 (Data Integration), 24 (ODPS Script), 99 (zero load), 221 (PyODPS 2), 225 (ODPS Spark), 227 (EMR Hive), 228 (EMR Spark), 229 (EMR Spark SQL), 230 (EMR MR), 239 (OSS object inspection), 257 (EMR Shell), 258 (EMR Spark Shell), 259 (EMR Presto), 260 (EMR Impala), 900 (real-time synchronization), 1089 (cross-tenant collaboration), 1091 (Hologres development), 1093 (Hologres SQL), 1100 (assignment), and 1221 (PyODPS 3)', example='10'),
      }
    ](name='ConsumeTimeRank', description='The ranking data of the running durations of the instances.'),
    updateTime?: long(name='UpdateTime', description='The timestamp at which the ranking of the running durations of the instances was updated.', example='1600963200000'),
  }(name='InstanceConsumeTimeRank', description='The ranking record of the running durations of the instances.'),
  requestId?: string(name='RequestId', description='The ID of the request. You can troubleshoot errors based on the ID.', example='6347364dadsfadf****'),
}

model TopTenElapsedTimeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TopTenElapsedTimeInstanceResponseBody(name='body'),
}

async function topTenElapsedTimeInstanceWithOptions(request: TopTenElapsedTimeInstanceRequest, runtime: Util.RuntimeOptions): TopTenElapsedTimeInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TopTenElapsedTimeInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function topTenElapsedTimeInstance(request: TopTenElapsedTimeInstanceRequest): TopTenElapsedTimeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return topTenElapsedTimeInstanceWithOptions(request, runtime);
}

model TopTenErrorTimesInstanceRequest {
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the ID.', example='9527'),
}

model TopTenErrorTimesInstanceResponseBody = {
  instanceErrorRank?: {
    errorRank?: [ 
      {
        count?: int32(name='Count', description='The number of errors that occur on the node.', example='5'),
        nodeId?: long(name='NodeId', description='The ID of the node.', example='9527'),
        nodeName?: string(name='NodeName', description='The name of the node.'),
        owner?: string(name='Owner', description='The user identifier (UID) of the Alibaba Cloud account used by the owner of the node.', example='952795279527'),
        programType?: int32(name='ProgramType', description='The type of the node.

Valid values:

6 (Shell node), 10 (ODPS SQL node), 11 (ODPS MR node), 23 (Data Integration node), 24 (ODPS Script node), 99 (zero load node), 221 (PyODPS 2 node), 225 (ODPS Spark node), 227 (EMR Hive node), 228 (EMR Spark node), 229 (EMR Spark SQL node), 230 (EMR MR node), 239 (OSS object inspection node), 257 (EMR Shell node), 258 (EMR Spark Shell node), 259 (EMR Presto node), 260 (EMR Impala node), 900 (real-time data synchronization node), 1089 (cross-tenant collaboration node), 1091 (Hologres development node), 1093 (Hologres SQL node), 1100 (assignment node), and 1221 (PyODPS 3 node).', example='10'),
        projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.', example='9527'),
      }
    ](name='ErrorRank', description='The ranking of nodes on which errors occur within the last month.'),
    updateTime?: long(name='UpdateTime', description='The time when the ranking was updated.', example='1600963200000'),
  }(name='InstanceErrorRank', description='The ranking of nodes on which errors occur.'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='952795279527****'),
}

model TopTenErrorTimesInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TopTenErrorTimesInstanceResponseBody(name='body'),
}

async function topTenErrorTimesInstanceWithOptions(request: TopTenErrorTimesInstanceRequest, runtime: Util.RuntimeOptions): TopTenErrorTimesInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TopTenErrorTimesInstance',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function topTenErrorTimesInstance(request: TopTenErrorTimesInstanceRequest): TopTenErrorTimesInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return topTenErrorTimesInstanceWithOptions(request, runtime);
}

model UmountDirectoryRequest {
  targetId?: string(name='TargetId', description='The HTTP status code returned. The value 200 indicates that the request was successful.', example='album.339'),
  targetType?: string(name='TargetType', description='The ID of the request. You can use the ID to troubleshoot issues.', example='META_ALBUM'),
  targetUserId?: string(name='TargetUserId'),
}

model UmountDirectoryResponseBody = {
  data?: int32(name='Data', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='1'),
  errorCode?: string(name='ErrorCode', example='200'),
  errorMessage?: string(name='ErrorMessage', description='The error code returned. The value 200 indicates that the remove task is successful.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The error message returned if the request failed.', example='200'),
  requestId?: string(name='RequestId', description='The number of directories that are removed. Valid values:

*   0: No directories are removed. The left-side navigation pane may not contain the specified directory.
*   1: One directory is removed.', example='0bc5aa2716455247597991794e65bd'),
  success?: boolean(name='Success', example='true'),
}

model UmountDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UmountDirectoryResponseBody(name='body'),
}

async function umountDirectoryWithOptions(request: UmountDirectoryRequest, runtime: Util.RuntimeOptions): UmountDirectoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.targetId)) {
    body['TargetId'] = request.targetId;
  }
  if (!Util.isUnset(request.targetType)) {
    body['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.targetUserId)) {
    body['TargetUserId'] = request.targetUserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UmountDirectory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function umountDirectory(request: UmountDirectoryRequest): UmountDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return umountDirectoryWithOptions(request, runtime);
}

model UpdateBaselineRequest {
  alertEnabled?: boolean(name='AlertEnabled'),
  alertMarginThreshold?: int32(name='AlertMarginThreshold'),
  alertSettings?: [ 
    {
      alertInterval?: int32(name='AlertInterval'),
      alertMaximum?: int32(name='AlertMaximum'),
      alertMethods?: [ string ](name='AlertMethods'),
      alertRecipient?: string(name='AlertRecipient'),
      alertRecipientType?: string(name='AlertRecipientType'),
      alertType?: string(name='AlertType'),
      baselineAlertEnabled?: boolean(name='BaselineAlertEnabled'),
      dingRobots?: [ 
        {
          atAll?: boolean(name='AtAll'),
          webUrl?: string(name='WebUrl'),
        }
      ](name='DingRobots'),
      silenceEndTime?: string(name='SilenceEndTime'),
      silenceStartTime?: string(name='SilenceStartTime'),
      topicTypes?: [ string ](name='TopicTypes'),
      webhooks?: [ string ](name='Webhooks'),
    }
  ](name='AlertSettings'),
  baselineId?: long(name='BaselineId'),
  baselineName?: string(name='BaselineName'),
  baselineType?: string(name='BaselineType'),
  enabled?: boolean(name='Enabled'),
  nodeIds?: string(name='NodeIds'),
  overtimeSettings?: [ 
    {
      cycle?: int32(name='Cycle'),
      time?: string(name='Time'),
    }
  ](name='OvertimeSettings'),
  owner?: string(name='Owner'),
  priority?: int32(name='Priority'),
  projectId?: long(name='ProjectId'),
  removeNodeIds?: string(name='RemoveNodeIds'),
}

model UpdateBaselineShrinkRequest {
  alertEnabled?: boolean(name='AlertEnabled'),
  alertMarginThreshold?: int32(name='AlertMarginThreshold'),
  alertSettingsShrink?: string(name='AlertSettings'),
  baselineId?: long(name='BaselineId'),
  baselineName?: string(name='BaselineName'),
  baselineType?: string(name='BaselineType'),
  enabled?: boolean(name='Enabled'),
  nodeIds?: string(name='NodeIds'),
  overtimeSettingsShrink?: string(name='OvertimeSettings'),
  owner?: string(name='Owner'),
  priority?: int32(name='Priority'),
  projectId?: long(name='ProjectId'),
  removeNodeIds?: string(name='RemoveNodeIds'),
}

model UpdateBaselineResponseBody = {
  data?: boolean(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateBaselineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateBaselineResponseBody(name='body'),
}

async function updateBaselineWithOptions(tmpReq: UpdateBaselineRequest, runtime: Util.RuntimeOptions): UpdateBaselineResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateBaselineShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.alertSettings)) {
    request.alertSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.alertSettings, 'AlertSettings', 'json');
  }
  if (!Util.isUnset(tmpReq.overtimeSettings)) {
    request.overtimeSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.overtimeSettings, 'OvertimeSettings', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertEnabled)) {
    body['AlertEnabled'] = request.alertEnabled;
  }
  if (!Util.isUnset(request.alertMarginThreshold)) {
    body['AlertMarginThreshold'] = request.alertMarginThreshold;
  }
  if (!Util.isUnset(request.alertSettingsShrink)) {
    body['AlertSettings'] = request.alertSettingsShrink;
  }
  if (!Util.isUnset(request.baselineId)) {
    body['BaselineId'] = request.baselineId;
  }
  if (!Util.isUnset(request.baselineName)) {
    body['BaselineName'] = request.baselineName;
  }
  if (!Util.isUnset(request.baselineType)) {
    body['BaselineType'] = request.baselineType;
  }
  if (!Util.isUnset(request.enabled)) {
    body['Enabled'] = request.enabled;
  }
  if (!Util.isUnset(request.nodeIds)) {
    body['NodeIds'] = request.nodeIds;
  }
  if (!Util.isUnset(request.overtimeSettingsShrink)) {
    body['OvertimeSettings'] = request.overtimeSettingsShrink;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.removeNodeIds)) {
    body['RemoveNodeIds'] = request.removeNodeIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateBaseline',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateBaseline(request: UpdateBaselineRequest): UpdateBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateBaselineWithOptions(request, runtime);
}

model UpdateBusinessRequest {
  businessId?: long(name='BusinessId', description='The ID of the workflow. You can call the [ListBusiness](~~173945~~) operation to obtain the workflow ID.', example='300000'),
  businessName?: string(name='BusinessName', description='The name of the workflow. You can call the [ListBusiness](~~173945~~) operation to obtain the workflow name.', example='MyBusiness'),
  description?: string(name='Description', description='The description of the workflow.', example='modified from my first business'),
  owner?: string(name='Owner', description='The owner of the workflow. You can call the [ListBusiness](~~173945~~) operation to obtain the workflow owner.', example='348428****'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the workspace ID. You must configure either this parameter or the ProjectIdentifier parameter to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the workspace name. You must configure either this parameter or ProjectId parameter to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model UpdateBusinessResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateBusinessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateBusinessResponseBody(name='body'),
}

async function updateBusinessWithOptions(request: UpdateBusinessRequest, runtime: Util.RuntimeOptions): UpdateBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessId)) {
    body['BusinessId'] = request.businessId;
  }
  if (!Util.isUnset(request.businessName)) {
    body['BusinessName'] = request.businessName;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateBusiness',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateBusiness(request: UpdateBusinessRequest): UpdateBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateBusinessWithOptions(request, runtime);
}

model UpdateConnectionRequest {
  connectionId?: long(name='ConnectionId', description='The ID of the data source.', example='1'),
  content?: string(name='Content', description='Details of the data source.', example='{"database":"dbname","instanceName":"instancename","password":"password","rdsOwnerId":"123","username":"username"}'),
  description?: string(name='Description', description='Describes the data source.', example='abc'),
  envType?: int32(name='EnvType', description='Environment of the data source.', example='1'),
  status?: string(name='Status', description='The status of the data source.', example='ENABLED'),
}

model UpdateConnectionResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the update is successful.', example='true'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0bc14115159376359****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. A value of true indicates that the request is successful. A value of false indicates that the request has failed.', example='true'),
}

model UpdateConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateConnectionResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request UpdateConnectionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateConnectionResponse
 */
// Deprecated
async function updateConnectionWithOptions(request: UpdateConnectionRequest, runtime: Util.RuntimeOptions): UpdateConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionId)) {
    query['ConnectionId'] = request.connectionId;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateConnection',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'PUT',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request UpdateConnectionRequest
  * @return UpdateConnectionResponse
 */
// Deprecated
async function updateConnection(request: UpdateConnectionRequest): UpdateConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateConnectionWithOptions(request, runtime);
}

model UpdateDIProjectConfigRequest {
  destinationType?: string(name='DestinationType', description='The type of the sources of the synchronization solutions.

Valid values: oracle, mysql, polardb, datahub, drds, and analyticdb_for_mysql.

If you do not configure this parameter, DataWorks applies the default global configuration to all sources.', example='odps'),
  projectConfig?: string(name='ProjectConfig', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='{"RENAMECOLUMN":"WARNING","DROPTABLE":"WARNING","CREATETABLE":"WARNING","MODIFYCOLUMN":"WARNING","TRUNCATETABLE":"WARNING","DROPCOLUMN":"WARNING","ADDCOLUMN":"WARNING","RENAMETABLE":"WARNING"}'),
  projectId?: long(name='ProjectId', description='The type of the destinations of the synchronization solutions. This parameter cannot be left empty.

Valid values: analyticdb_for_mysql, odps, elasticsearch, holo, mysql, and polardb.', example='10000'),
  sourceType?: string(name='SourceType', description='The new default global configuration of synchronization solutions. The value indicates the processing rules of different types of DDL messages. The value must be in the JSON format. Example:

{"RENAMECOLUMN":"WARNING","DROPTABLE":"WARNING","CREATETABLE":"WARNING","MODIFYCOLUMN":"WARNING","TRUNCATETABLE":"WARNING","DROPCOLUMN":"WARNING","ADDCOLUMN":"WARNING","RENAMETABLE":"WARNING"}

Field description:

*   RENAMECOLUMN: renames a column.
*   DROPTABLE: deletes a table.
*   CREATETABLE: creates a table.
*   MODIFYCOLUMN: changes the data type of a column.
*   TRUNCATETABLE: clears a table.
*   DROPCOLUMN: deletes a column.
*   ADDCOLUMN: creates a column.
*   RENAMETABLE: renames a table.

DataWorks processes a DDL message of a specific type based on the following rules:

*   WARNING: ignores the message and records an alert in real-time synchronization logs. The alert contains information about the situation that the message is ignored because of an execution error.
*   IGNORE: discards the message and does not send it to the destination.
*   CRITICAL: terminates the real-time synchronization node and sets the node status to Failed.
*   NORMAL: sends the message to the destination to process the message. Each destination processes DDL messages based on its own business logic. If DataWorks adopts the NORMAL policy, DataWorks only forwards DDL messages.', example='mysql'),
}

model UpdateDIProjectConfigResponseBody = {
  data?: {
    status?: string(name='Status', example='success'),
  }(name='Data', description='Indicates whether the default global configuration of synchronization solutions was modified. Valid values:

*   success: The default global configuration of synchronization solutions was modified.
*   fail: The default global configuration of synchronization solutions failed to be modified.'),
  requestId?: string(name='RequestId', description='The information about the modification.', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='true'),
}

model UpdateDIProjectConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDIProjectConfigResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to **UpdateDIProjectConfig**.
  *
  * @param request UpdateDIProjectConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateDIProjectConfigResponse
 */
async function updateDIProjectConfigWithOptions(request: UpdateDIProjectConfigRequest, runtime: Util.RuntimeOptions): UpdateDIProjectConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.projectConfig)) {
    query['ProjectConfig'] = request.projectConfig;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDIProjectConfig',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The operation that you want to perform. Set the value to **UpdateDIProjectConfig**.
  *
  * @param request UpdateDIProjectConfigRequest
  * @return UpdateDIProjectConfigResponse
 */
async function updateDIProjectConfig(request: UpdateDIProjectConfigRequest): UpdateDIProjectConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDIProjectConfigWithOptions(request, runtime);
}

model UpdateDISyncTaskRequest {
  fileId?: long(name='FileId', description='The ID of the sync node to be updated. You can call the [ListFiles](~~173942~~) operation to query the ID of the node.', example='1000000'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace Management page to obtain the workspace ID.

You must set this parameter to specify the DataWorks workspace in which the node resides.', example='10000'),
  taskContent?: string(name='TaskContent', description='The updated configuration of the sync node. This operation is equivalent to node update by using the code editor in the DataWorks console. For more information, see [Create a sync node by using the code editor](~~137717~~). You can call the UpdateDISyncTask operation to update only batch sync nodes. If you do not need to update the configuration of the sync node, leave this parameter empty.', example='{"type":"job","version":"2.0","steps":[{"stepType":"mysql","parameter":{"envType":1,"datasource":"mysql_pub","column":["id","name","create_time","age","score","t_01"],"connection":[{"datasource":"mysql_pub","table":["u_pk"]}],"where":"","splitPk":"id","encoding":"UTF-8"},"name":"Reader","category":"reader"},{"stepType":"odps","parameter":{"partition":"pt=${bizdate}","truncate":true,"datasource":"odps_first","envType":1,"column":["id","name","create_time","age","score","t_01"],"emptyAsNull":false,"tableComment":"null","table":"u_pk"},"name":"Writer","category":"writer"}],"setting":{"executeMode":null,"errorLimit":{"record":""},"speed":{"concurrent":2,"throttle":false}},"order":{"hops":[{"from":"Reader","to":"Writer"}]}}'),
  taskParam?: string(name='TaskParam', description='The setting that updates the resource group used by the node. The value must be in the JSON format.

Only the ResourceGroup field is supported. This field specifies the identifier of the resource group for Data Integration that is used by the node. To query the identifier of the resource group, call the [ListResourceGroup](~~62055~~) operation.

If you do not need to update the resource group for the sync node, leave this parameter empty.', example='{"ResourceGroup":"S_res_group_XXX_XXXX"}'),
  taskType?: string(name='TaskType', description='The type of the sync node.

You can call the UpdateDISyncTask operation to update only batch sync nodes. The value must be DI_OFFLINE.', example='DI_OFFLINE'),
}

model UpdateDISyncTaskResponseBody = {
  data?: {
    message?: string(name='Message', description='The reason why the sync node failed to be updated. If the sync node was updated, this parameter is left empty.', example='ResourceGroup:[S_res_group_XXX] is invalid.'),
    status?: string(name='Status', description='Indicates whether the sync node was updated. Valid values:

*   success: The sync node was updated.
*   fail: The sync node failed to be updated.', example='success'),
  }(name='Data', description='The information that indicates whether the sync node was updated.'),
  requestId?: string(name='RequestId', description='The ID of the request. You can locate logs and troubleshoot issues based on the ID.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model UpdateDISyncTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDISyncTaskResponseBody(name='body'),
}

async function updateDISyncTaskWithOptions(request: UpdateDISyncTaskRequest, runtime: Util.RuntimeOptions): UpdateDISyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.taskContent)) {
    query['TaskContent'] = request.taskContent;
  }
  if (!Util.isUnset(request.taskParam)) {
    query['TaskParam'] = request.taskParam;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDISyncTask',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDISyncTask(request: UpdateDISyncTaskRequest): UpdateDISyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDISyncTaskWithOptions(request, runtime);
}

model UpdateDataServiceApiRequest {
  apiDescription?: string(name='ApiDescription', description='The description of the API.', example='API description'),
  apiId?: long(name='ApiId', description='The ID of the API.', example='10000'),
  apiPath?: string(name='ApiPath', description='The path of the API.', example='/test/2'),
  projectId?: long(name='ProjectId', description='The ID of the workspace.', example='10001'),
  protocols?: string(name='Protocols', description='The protocol used by the API. Valid values: 0 and 1. The value 0 indicates HTTP. The value 1 indicates HTTPS. You can specify multiple protocols. Separate multiple protocols with commas (,).', example='0,1'),
  registrationDetails?: string(name='RegistrationDetails', description='The details of the API generated by registration. For more information, see the RegistrationDetails parameter returned by the [GetDataServiceApi](~~174013~~) operation.', example='{"failedResultSample":"fail","registrationErrorCodes":[{"errorCode":"e1","errorMessage":"msg1","errorSolution":"sol1"},{"errorCode":"e2","errorMessage":"msg2","errorSolution":"sol2"}],"registrationRequestParameters":[{"columnName":"","defaultValue":"","exampleValue":"","isRequiredParameter":true,"parameterDataType":0,"parameterDescription":"","parameterName":"id","parameterOperator":0,"parameterPosition":1},{"columnName":"","defaultValue":"xx","exampleValue":"","isRequiredParameter":true,"parameterDataType":0,"parameterDescription":"","parameterName":"cc","parameterOperator":2,"parameterPosition":2}],"serviceContentType":1,"serviceHost":"http://www.baidu.com","servicePath":"/[uid]","serviceRequestBodyDescription":"body","successfulResultSample":"success"}'),
  requestMethod?: int32(name='RequestMethod', description='The request method of the API. Valid values: 0, 1, 2, and 3. The value 0 indicates the GET method. The value 1 indicates the POST method. The value 2 indicates the PUT method. The value 3 indicates the DELETE method. APIs generated in wizard or script mode support the GET and POST methods. APIs generated by registration support the GET, POST, PUT, and DELETE methods.', example='0'),
  resourceGroupId?: long(name='ResourceGroupId'),
  responseContentType?: int32(name='ResponseContentType', description='The format in which the response of the API request is returned. Valid values: 0 and 1. The value 0 indicates the JSON format. The value 1 indicates the XML format. APIs generated in wizard or script mode support the JSON format. APIs generated by registration support the JSON and XML formats.', example='0'),
  scriptDetails?: string(name='ScriptDetails', description='The details of the API generated in script mode. For more information, see the ScriptDetails parameter returned by the [GetDataServiceApi](~~174013~~) operation.', example='{"isPagedResponse":false,"script":"select id as id1, name as name1 from person where id=${inputid}","scriptConnection":{"connectionId":122786,"tableName":"person"},"scriptRequestParameters":[{"defaultValue":"","exampleValue":"","isRequiredParameter":true,"parameterDataType":0,"parameterDescription":"","parameterName":"inputid","parameterOperator":0,"parameterPosition":1}],"scriptResponseParameters":[{"exampleValue":"","parameterDataType":0,"parameterDescription":"","parameterName":"id1"},{"exampleValue":"","parameterDataType":0,"parameterDescription":"","parameterName":"name1"}]}'),
  tenantId?: long(name='TenantId', description='The ID of the tenant.', example='10001'),
  timeout?: int32(name='Timeout', description='The timeout period of the API request. Unit: milliseconds. Valid values: (0,30000].', example='10000'),
  visibleRange?: int32(name='VisibleRange', description='The scope in which the API is visible. Valid values: 0 and 1. The value 0 indicates that the API is visible within the workspace. The value 1 indicates that the API is visible only to its owner.', example='0'),
  wizardDetails?: string(name='WizardDetails', description='The details of the API generated in wizard mode. For more information, see the WizardDetails parameter returned by the [GetDataServiceApi](~~174013~~) operation.', example='{"isPagedResponse":true,"wizardConnection":{"connectionId":122786,"tableName":"person"},"wizardRequestParameters":[{"columnName":"id","defaultValue":"","exampleValue":"1","isRequiredParameter":true,"parameterDataType":2,"parameterDescription":"","parameterName":"id","parameterOperator":0,"parameterPosition":0}],"wizardResponseParameters":[{"columnName":"id","exampleValue":"11","parameterDataType":2,"parameterDescription":"","parameterName":"id"}]}'),
}

model UpdateDataServiceApiResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the information about the API is updated.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateDataServiceApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDataServiceApiResponseBody(name='body'),
}

async function updateDataServiceApiWithOptions(request: UpdateDataServiceApiRequest, runtime: Util.RuntimeOptions): UpdateDataServiceApiResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiDescription)) {
    body['ApiDescription'] = request.apiDescription;
  }
  if (!Util.isUnset(request.apiId)) {
    body['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.apiPath)) {
    body['ApiPath'] = request.apiPath;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.protocols)) {
    body['Protocols'] = request.protocols;
  }
  if (!Util.isUnset(request.registrationDetails)) {
    body['RegistrationDetails'] = request.registrationDetails;
  }
  if (!Util.isUnset(request.requestMethod)) {
    body['RequestMethod'] = request.requestMethod;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.responseContentType)) {
    body['ResponseContentType'] = request.responseContentType;
  }
  if (!Util.isUnset(request.scriptDetails)) {
    body['ScriptDetails'] = request.scriptDetails;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.timeout)) {
    body['Timeout'] = request.timeout;
  }
  if (!Util.isUnset(request.visibleRange)) {
    body['VisibleRange'] = request.visibleRange;
  }
  if (!Util.isUnset(request.wizardDetails)) {
    body['WizardDetails'] = request.wizardDetails;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDataServiceApi',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDataServiceApi(request: UpdateDataServiceApiRequest): UpdateDataServiceApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDataServiceApiWithOptions(request, runtime);
}

model UpdateDataSourceRequest {
  content?: string(name='Content', description='The ID of the data source that you want to update. You can call the [ListDataSources](~~211431~~) operation to obtain the ID.', example='{"accessId":"xssssss","accessKey":"xsaxsaxsa","authType":2,"endpoint":"http://service.odps.aliyun.com/api","project":"xsaxsax","tag":"public"}'),
  dataSourceId?: long(name='DataSourceId', description='Indicates whether the data source is updated.', example='1'),
  description?: string(name='Description', description='The details about the data source that you want to update.

You are not allowed to change the type of the data source. For example, you are not allowed to change the data source type from MaxCompute to mysql.

Examples of details of some common data sources:

*   odps

```

{
  "accessId": "xssssss",
  "accessKey": "xsaxsaxsa",
  "authType": 2,
  "endpoint": "http://service.odps.aliyun.com/api",
  "project": "xsaxsax",
  "tag": "public"
}
                                
```

*   mysql

```

{
  "database": "xsaxsa",
  "instanceName": "rm-xsaxsa",
  "password": "xsaxsa",
  "rdsOwnerId": "xasxsa",
  "regionId": "cn-shanghai",
  "tag": "rds",
  "username": "xsaxsa"
}
                                
```

*   rds

```

{
  "configType": 1,
  "tag": "rds",
  "database": "xsaxsa",
  "username": "xsaxsa",
  "password": "xssaxsa$32050",
  "instanceName": "rm-xsaxs",
  "rdsOwnerId": "11111111"
}
                                
```

*   oss

```

{
  "accessId": "sssssxx",
  "accessKey": "xsaxaxsaxs",
  "bucket": "xsa-xs-xs",
  "endpoint": "http://oss-cn-shanghai.aliyuncs.com",
  "tag": "public"
}
                                
```

*   sqlserver

```

{
  "jdbcUrl": "jdbc:sqlserver://xsaxsa-xsaxsa.database.xxx.cnv:123;DatabaseName=xsxs-xsxs",
  "password": "sdasda$fs",
  "tag": "public",
  "username": "sxaxacdacdd"
}
                                
```

*   polardb

```

{
  "clusterId": "pc-sdadsadsa",
  "database": "dsadsadsa",
  "ownerId": "121212122",
  "password": "sdasdafssa",
  "region": "cn-shanghai",
  "tag": "polardb",
  "username": "asdadsads"
}
                                
```

*   oracle

```

{
  "jdbcUrl": "jdbc:oracle:saaa:@xxxxx:1521:PROD",
  "password": "sxasaxsa",
  "tag": "public",
  "username": "sasfadfa"
}
                                
```

*   mongodb

```

{
  "address": "[\\"xsaxxsa.mongodb.rds.aliyuncs.com:3717\\"]",
  "database": "admin",
  "password": "sadsda@",
  "tag": "public",
  "username": "dsadsadas"
}
                                
```

*   emr

```

{
  "accessId": "xsaxsa",
  "emrClusterId": "C-dsads",
  "emrResourceQueueName": "default",
  "emrEndpoint": "emr.aliyuncs.com",
  "accessKey": "dsadsad",
  "emrUserId": "224833315798889783",
  "name": "sasdsadsa",
  "emrAccessMode": "simple",
  "region": "cn-shanghai",
  "authType": "2",
  "emrProjectId": "FP-sdadsad"
}
                                
```

*   postgresql

```

{
  "jdbcUrl": "jdbc:postgresql://xxxx:1921/ssss",
  "password": "sdadsads",
  "tag": "public",
  "username": "sdsasda"
}
                                
```

*   analyticdb_for_mysql

```

{
  "instanceId": "am-sadsada",
  "database": "xsxsx",
  "username": "xsxsa",
  "password": "asdadsa",
  "connectionString": "am-xssxsxs.ads.aliyuncs.com:3306"
}
                                
```

*   hybriddb_for_postgresql

```

{
  "connectionString": "gp-xsaxsaxa-master.gpdbmaster.rds.aliyuncs.com",
  "database": "xsaxsaxas",
  "password": "xsaxsaxsa@11",
  "instanceId": "gp-xsaxsaxsa",
  "port": "541132",
  "ownerId": "xsaxsaxsas",
  "username": "sadsad"
}
                                
```

*   holo

```

{
  "accessId": "xsaxsaxs",
  "accessKey": "xsaxsaxsa",
  "database": "xsaxsaxsa",
  "instanceId": "xsaxa",
  "tag": "aliyun"
}
                                
```

*   kafka

```

{
  "instanceId": "xsax-cn-xsaxsa",
  "regionId": "cn-shanghai",
  "tag": "aliyun",
  "ownerId": "1212121212112"
}
                                
```', example='xxx'),
  envType?: int32(name='EnvType', description='The status of the data source. The parameter is deprecated. Do not use this parameter.', example='1'),
  status?: string(name='Status', description='The HTTP status code returned.', example='ENABLED'),
}

model UpdateDataSourceResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the request is successful.', example='true'),
  httpStatusCode?: string(name='HttpStatusCode', description='The ID of the request.', example='200'),
  requestId?: string(name='RequestId', example='0bc14115159376359****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDataSourceResponseBody(name='body'),
}

async function updateDataSourceWithOptions(request: UpdateDataSourceRequest, runtime: Util.RuntimeOptions): UpdateDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.dataSourceId)) {
    query['DataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDataSource',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'PUT',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDataSource(request: UpdateDataSourceRequest): UpdateDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDataSourceWithOptions(request, runtime);
}

model UpdateFileRequest {
  advancedSettings?: string(name='AdvancedSettings', description='The advanced configurations of the node.

This parameter is valid only for an EMR Spark Streaming node or an EMR Streaming SQL node. This parameter corresponds to the Advanced Settings tab of the node in the [DataWorks console](https://workbench.data.aliyun.com/console).

This parameter is configured in the JSON format.', example='{"queue":"default","SPARK_CONF":"--conf spark.driver.memory=2g"}'),
  autoParsing?: boolean(name='AutoParsing', description='Specifies whether the automatic parsing feature is enabled for the file. Valid values:

*   true: The automatic parsing feature is enabled for the file.
*   false: The automatic parsing feature is not enabled for the file.

This parameter corresponds to the Analyze Code parameter that is displayed after Same Cycle is selected in the Dependencies section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='true'),
  autoRerunIntervalMillis?: int32(name='AutoRerunIntervalMillis', description='The interval between two consecutive automatic reruns after an error occurs. Unit: milliseconds. Maximum value: 1800000 (30 minutes).

This parameter corresponds to the Rerun Interval parameter that is displayed after the Auto Rerun upon Error check box is selected in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).

The interval that you specify in the DataWorks console is measured in minutes. Pay attention to the conversion between the units of time when you call the operation.', example='120000'),
  autoRerunTimes?: int32(name='AutoRerunTimes', description='The number of automatic reruns that are allowed after an error occurs.', example='3'),
  connectionName?: string(name='ConnectionName', description='The name of the connected data source that is used to run the node. You can call the [ListDataSources](~~211431~~) operation to query the available data sources of the workspace.', example='odps_first'),
  content?: string(name='Content', description='The code of the file. The code format varies based on the file type. To view the code format for a specific file type, go to Operation Center, right-click a node of the file type, and then select View Code.', example='SELECT "1";'),
  cronExpress?: string(name='CronExpress', description='The CRON expression that represents the periodic scheduling policy of the node. This parameter corresponds to the Cron Expression parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console). After you configure the Scheduling Cycle and Run At parameters in the DataWorks console, DataWorks automatically generates a value for the Cron Expression parameter.

Examples:

*   CRON expression for a node that is scheduled to run at 05:30 every day: `00 30 05 * * ?`
*   CRON expression for a node that is scheduled to run at the fifteenth minute of each hour: `00 15 * * * ?`
*   CRON expression for a node that is scheduled to run every 10 minutes: `00 00/10 * * * ?`
*   CRON expression for a node that is scheduled to run every 10 minutes from 08:00 to 17:00 every day: `00 00-59/10 8-23 * * * ?`
*   CRON expression for a node that is scheduled to run at 00:20 on the first day of each month: `00 20 00 1 * ?`
*   CRON expression for a node that is scheduled to run every three months starting from 00:10 on January 1: `00 10 00 1 1-12/3 ?`
*   CRON expression for a node that is scheduled to run at 00:05 every Tuesday and Friday: `00 05 00 * * 2,5`

The scheduling system of DataWorks imposes the following limits on CRON expressions:

*   A node can be scheduled to run at a minimum interval of 5 minutes.
*   A node can be scheduled to run at 00:05 every day at the earliest.', example='00 00-59/5 1-23 * * ?'),
  cycleType?: string(name='CycleType', description='The type of the scheduling cycle of the node that corresponds to the file. Valid values: NOT_DAY and DAY. The value NOT_DAY indicates that the node is scheduled to run by minute or hour. The value DAY indicates that the node is scheduled to run by day, week, or month.

This parameter corresponds to the Scheduling Cycle parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='NOT_DAY'),
  dependentNodeIdList?: string(name='DependentNodeIdList', description='The ID of the node on which the node corresponding to the file depends when the DependentType parameter is set to USER_DEFINE. Multiple IDs are separated by commas (,).

The value of this parameter corresponds to the ID of the node that you specified after you select Previous Cycle and set Depend On to Other Nodes in the Dependencies section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='5,10,15,20'),
  dependentType?: string(name='DependentType', description='The type of the cross-cycle scheduling dependency of the node that corresponds to the file. Valid values:

*   SELF: The instance generated for the node in the current cycle depends on the instance generated for the node in the previous cycle.
*   CHILD: The instance generated for the node in the current cycle depends on the instances generated for the descendant nodes at the nearest level of the node in the previous cycle.
*   USER_DEFINE: The instance generated for the node in the current cycle depends on the instances generated for one or more specified nodes in the previous cycle.
*   NONE: No cross-cycle scheduling dependency type is selected for the node.', example='USER_DEFINE'),
  endEffectDate?: long(name='EndEffectDate', description='The end time of automatic scheduling. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.

This parameter corresponds to the end time specified for the Validity Period parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='4155787800000'),
  fileDescription?: string(name='FileDescription', description='The description of the file.'),
  fileFolderPath?: string(name='FileFolderPath', description='The path of the file.'),
  fileId?: long(name='FileId', description='The ID of the file. You can call the [ListFiles](~~173942~~) operation to obtain the ID.', example='100000001'),
  fileName?: string(name='FileName', description='The name of the file. You can set the FileName parameter to a new value to change the file name.

You can call the [ListFiles](~~173942~~) operation to query the ID of the file whose name you want to change. Then, you can set the FileId parameter to the ID and set the FileName parameter to a new value when you call the [UpdateFile](~~173951~~) operation.', example='ods_user_info_d'),
  ignoreParentSkipRunningProperty?: boolean(name='IgnoreParentSkipRunningProperty'),
  inputList?: string(name='InputList', description='The output name of the parent file on which the current file depends. If you specify multiple output names, separate them with commas (,).

This parameter corresponds to the Output Name parameter under Parent Nodes in the Dependencies section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='project_root,project.file1,project.001_out'),
  inputParameters?: string(name='InputParameters', description='The input parameters of the node. This parameter is configured in the JSON format. For more information about the input parameters, refer to the InputContextParameterList parameter in the Response parameters section of the [GetFile](~~173954~~) operation.

This parameter corresponds to the Input Parameters table in the Input and Output Parameters section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='[{"ValueSource": "project_001.first_node:bizdate_param","ParameterName": "bizdate_input"}]'),
  outputList?: string(name='OutputList', description='The output name of the current file.

This parameter corresponds to the Output Name parameter in the Dependencies section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='dw_project.ods_user_info_d'),
  outputParameters?: string(name='OutputParameters', description='The output parameters of the node. This parameter is configured in the JSON format. For more information about the output parameters, refer to the OutputContextParameterList parameter in the Response parameters section of the [GetFile](~~173954~~) operation.

This parameter corresponds to the Output Parameters table in the Input and Output Parameters section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='[{"Type": 1,"Value": "${bizdate}","ParameterName": "bizdate_param"}]'),
  owner?: string(name='Owner', description='The ID of the file owner.', example='18023848927592'),
  paraValue?: string(name='ParaValue', description='The scheduling parameters of the node.

This parameter corresponds to the Parameters section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console). For more information, see [Configure scheduling parameters](~~137548~~).', example='x=a y=b z=c'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace Management page to obtain the workspace ID.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace Management page to obtain the workspace name.

You must configure this parameter or the ProjectId parameter to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
  rerunMode?: string(name='RerunMode', description='Specifies whether the node that corresponds to the file can be rerun. Valid values:

*   ALL_ALLOWED: The node can be rerun regardless of whether it is successfully run or fails to run.
*   FAILURE_ALLOWED: The node can be rerun only after it fails to run.
*   ALL_DENIED: The node cannot be rerun regardless of whether it is successfully run or fails to run.

This parameter corresponds to the Rerun parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='ALL_ALLOWED'),
  resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', description='The identifier of the resource group that is used to run the node. You can call the [ListResourceGroups](~~173913~~) operation to query the available resource groups in the workspace.', example='default_group'),
  schedulerType?: string(name='SchedulerType', description='The scheduling type of the node. Valid values:

*   NORMAL: The node is an auto triggered node.
*   MANUAL: The node is a manually triggered node. Manually triggered nodes cannot be automatically triggered. They correspond to the nodes in the Manually Triggered Workflows pane.
*   PAUSE: The node is a paused node.
*   SKIP: The inner node is a dry-run node. Dry-run nodes are started as scheduled but the scheduling system sets the status of the nodes to succeeded when the scheduling system starts to run the nodes.', example='NORMAL'),
  startEffectDate?: long(name='StartEffectDate', description='The start time of automatic scheduling. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.

This parameter corresponds to the Validity Period parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='936923400000'),
  startImmediately?: boolean(name='StartImmediately', description='Specifies whether to immediately run a node after the node is deployed to the production environment. Valid values:

*   true: A node is immediately run after the node is deployed to the production environment.
*   false: A node is not immediately run after the node is deployed to the production environment.

This parameter is valid only for an EMR Spark Streaming node or an EMR Streaming SQL node. This parameter corresponds to the Start Method parameter in the Schedule section of the Configure tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='true'),
  stop?: boolean(name='Stop', description='Specifies whether to suspend the scheduling of the node. Valid values:

*   true: suspends the scheduling of the node.
*   false: does not suspend the scheduling of the node.

This parameter corresponds to the Recurrence parameter in the Schedule section of the Properties tab in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='false'),
}

model UpdateFileResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFGH-IJKLMNOPQ'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request is successful.
*   false: The request fails.', example='true'),
}

model UpdateFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFileResponseBody(name='body'),
}

/**
  * When you debug or call this operation, you must specify new values for the specified parameters to ensure that the values are different from the original configurations of the file. For example, if the original value of a parameter is A, you must change the value of this parameter to B before you commit the node. If you set the parameter to A, an exception that indicates invalid data occurs.
  *
  * @param request UpdateFileRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateFileResponse
 */
async function updateFileWithOptions(request: UpdateFileRequest, runtime: Util.RuntimeOptions): UpdateFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.advancedSettings)) {
    body['AdvancedSettings'] = request.advancedSettings;
  }
  if (!Util.isUnset(request.autoParsing)) {
    body['AutoParsing'] = request.autoParsing;
  }
  if (!Util.isUnset(request.autoRerunIntervalMillis)) {
    body['AutoRerunIntervalMillis'] = request.autoRerunIntervalMillis;
  }
  if (!Util.isUnset(request.autoRerunTimes)) {
    body['AutoRerunTimes'] = request.autoRerunTimes;
  }
  if (!Util.isUnset(request.connectionName)) {
    body['ConnectionName'] = request.connectionName;
  }
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.cronExpress)) {
    body['CronExpress'] = request.cronExpress;
  }
  if (!Util.isUnset(request.cycleType)) {
    body['CycleType'] = request.cycleType;
  }
  if (!Util.isUnset(request.dependentNodeIdList)) {
    body['DependentNodeIdList'] = request.dependentNodeIdList;
  }
  if (!Util.isUnset(request.dependentType)) {
    body['DependentType'] = request.dependentType;
  }
  if (!Util.isUnset(request.endEffectDate)) {
    body['EndEffectDate'] = request.endEffectDate;
  }
  if (!Util.isUnset(request.fileDescription)) {
    body['FileDescription'] = request.fileDescription;
  }
  if (!Util.isUnset(request.fileFolderPath)) {
    body['FileFolderPath'] = request.fileFolderPath;
  }
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.fileName)) {
    body['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.ignoreParentSkipRunningProperty)) {
    body['IgnoreParentSkipRunningProperty'] = request.ignoreParentSkipRunningProperty;
  }
  if (!Util.isUnset(request.inputList)) {
    body['InputList'] = request.inputList;
  }
  if (!Util.isUnset(request.inputParameters)) {
    body['InputParameters'] = request.inputParameters;
  }
  if (!Util.isUnset(request.outputList)) {
    body['OutputList'] = request.outputList;
  }
  if (!Util.isUnset(request.outputParameters)) {
    body['OutputParameters'] = request.outputParameters;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.paraValue)) {
    body['ParaValue'] = request.paraValue;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.rerunMode)) {
    body['RerunMode'] = request.rerunMode;
  }
  if (!Util.isUnset(request.resourceGroupIdentifier)) {
    body['ResourceGroupIdentifier'] = request.resourceGroupIdentifier;
  }
  if (!Util.isUnset(request.schedulerType)) {
    body['SchedulerType'] = request.schedulerType;
  }
  if (!Util.isUnset(request.startEffectDate)) {
    body['StartEffectDate'] = request.startEffectDate;
  }
  if (!Util.isUnset(request.startImmediately)) {
    body['StartImmediately'] = request.startImmediately;
  }
  if (!Util.isUnset(request.stop)) {
    body['Stop'] = request.stop;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you debug or call this operation, you must specify new values for the specified parameters to ensure that the values are different from the original configurations of the file. For example, if the original value of a parameter is A, you must change the value of this parameter to B before you commit the node. If you set the parameter to A, an exception that indicates invalid data occurs.
  *
  * @param request UpdateFileRequest
  * @return UpdateFileResponse
 */
async function updateFile(request: UpdateFileRequest): UpdateFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFileWithOptions(request, runtime);
}

model UpdateFolderRequest {
  folderId?: string(name='FolderId', description='The ID of the folder. You can call the [ListFolders](~~173955~~) operation to query the ID.', example='2735c2c19d58'),
  folderName?: string(name='FolderName', description='The name of the folder.', example='MySecondFolder'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Management page to obtain the ID. You must specify either this parameter or ProjectIdentifier to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the DataWorks console and go to the Workspace Settings panel to obtain the name. You must specify either this parameter or ProjectId to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model UpdateFolderResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model UpdateFolderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFolderResponseBody(name='body'),
}

async function updateFolderWithOptions(request: UpdateFolderRequest, runtime: Util.RuntimeOptions): UpdateFolderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderId)) {
    body['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.folderName)) {
    body['FolderName'] = request.folderName;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFolder',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateFolder(request: UpdateFolderRequest): UpdateFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFolderWithOptions(request, runtime);
}

model UpdateIDEEventResultRequest {
  checkResult?: string(name='CheckResult', description='The summary information of the check result. The information is displayed in DataStudio. If an alert is reported or the event fails the check, you can troubleshoot errors based on the information.', example='OK'),
  checkResultTip?: string(name='CheckResultTip', description='The ID of the request. You can troubleshoot errors based on the ID.', example='Succeeded'),
  extensionCode?: string(name='ExtensionCode', description='The check status of the extension point event. Valid values:

*   OK: The event passes the check.
*   FAIL: The event fails to pass the check. You must check and handle the reported error at the earliest opportunity to ensure that your program is run as expected.
*   WARN: The event passes the check, but an alert is reported.', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
  messageId?: string(name='MessageId', description='The ID of the extension. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Extensions tab of the Open Platform page to view the ID.', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
}

model UpdateIDEEventResultResponseBody = {
  requestId?: string(name='RequestId', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
}

model UpdateIDEEventResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateIDEEventResultResponseBody(name='body'),
}

async function updateIDEEventResultWithOptions(request: UpdateIDEEventResultRequest, runtime: Util.RuntimeOptions): UpdateIDEEventResultResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.checkResult)) {
    body['CheckResult'] = request.checkResult;
  }
  if (!Util.isUnset(request.checkResultTip)) {
    body['CheckResultTip'] = request.checkResultTip;
  }
  if (!Util.isUnset(request.extensionCode)) {
    body['ExtensionCode'] = request.extensionCode;
  }
  if (!Util.isUnset(request.messageId)) {
    body['MessageId'] = request.messageId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateIDEEventResult',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateIDEEventResult(request: UpdateIDEEventResultRequest): UpdateIDEEventResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateIDEEventResultWithOptions(request, runtime);
}

model UpdateMetaCategoryRequest {
  categoryId?: long(name='CategoryId', description='The ID of the category.', example='2'),
  comment?: string(name='Comment', description='The remarks of the category.', example='category name'),
  name?: string(name='Name', description='The name of the category.', example='category name'),
}

model UpdateMetaCategoryResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the category was updated.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateMetaCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMetaCategoryResponseBody(name='body'),
}

async function updateMetaCategoryWithOptions(request: UpdateMetaCategoryRequest, runtime: Util.RuntimeOptions): UpdateMetaCategoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.categoryId)) {
    body['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMetaCategory',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMetaCategory(request: UpdateMetaCategoryRequest): UpdateMetaCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMetaCategoryWithOptions(request, runtime);
}

model UpdateMetaCollectionRequest {
  comment?: string(name='Comment', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='this is a comment'),
  name?: string(name='Name', description='The comment of the collection.

The comment must be 1 to 64 characters in length.', example='myCollectionName'),
  qualifiedName?: string(name='QualifiedName', description='The name of the collection.', example='album.396397'),
}

model UpdateMetaCollectionResponseBody = {
  errorCode?: string(name='ErrorCode', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='9999'),
  errorMessage?: string(name='ErrorMessage', description='The error code returned.', example='The specified product does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The error message returned.', example='200'),
  requestId?: string(name='RequestId', description='The result of the operation. Valid values:

true: succeeded

false: failed', example='0000-ABCD-E****'),
  status?: boolean(name='Status', description='The HTTP status code returned.', example='true'),
  success?: boolean(name='Success', example='true'),
}

model UpdateMetaCollectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMetaCollectionResponseBody(name='body'),
}

/**
  * You must configure at least one of the Name and Comment parameters when you update a collection.
  *
  * @param request UpdateMetaCollectionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateMetaCollectionResponse
 */
async function updateMetaCollectionWithOptions(request: UpdateMetaCollectionRequest, runtime: Util.RuntimeOptions): UpdateMetaCollectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.qualifiedName)) {
    query['QualifiedName'] = request.qualifiedName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMetaCollection',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You must configure at least one of the Name and Comment parameters when you update a collection.
  *
  * @param request UpdateMetaCollectionRequest
  * @return UpdateMetaCollectionResponse
 */
async function updateMetaCollection(request: UpdateMetaCollectionRequest): UpdateMetaCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMetaCollectionWithOptions(request, runtime);
}

model UpdateMetaTableRequest {
  addedLabels?: string(name='AddedLabels', description='The names of the labels that you want to add. Separate the labels with commas (,).', example='a,b,c'),
  caption?: string(name='Caption', description='The display name of the table.'),
  categoryId?: long(name='CategoryId', description='The ID of the category that you want to associate.', example='101'),
  envType?: int32(name='EnvType', description='The environment of the DataWorks workspace. Valid values: 0 and 1. The value 0 indicates the development environment. The value 1 indicates the production environment.', example='1'),
  newOwnerId?: string(name='NewOwnerId', description='The ID of the new owner. If this parameter is not specified, the owner ID is not updated.', example='12345'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.', example='101'),
  removedLabels?: string(name='RemovedLabels', description='The names of labels that you want to delete. Separate the labels with commas (,).', example='a,b,c'),
  schema?: string(name='Schema', description='The schema information of the table. You need to configure this parameter if you enable the table schema in MaxCompute.', example='default'),
  tableGuid?: string(name='TableGuid', description='The globally unique identifier (GUID) of the table. Specify the GUID in the format of odps.{projectName}.{tableName}.', example='odps.test.table1'),
  tableName?: string(name='TableName', description='The name of the table.', example='table1'),
  visibility?: int32(name='Visibility', description='The scope in which the table is visible. Valid values: 0, 1, and 2. The value 0 indicates that the table is invisible to all workspace members. The value 1 indicates that the table is visible to all workspace members. The value 2 indicates that the table is visible to workspace members.', example='1'),
}

model UpdateMetaTableResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='abcde'),
  updateResult?: boolean(name='UpdateResult', description='Indicates whether the metadata information about the table is updated.', example='true'),
}

model UpdateMetaTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMetaTableResponseBody(name='body'),
}

async function updateMetaTableWithOptions(request: UpdateMetaTableRequest, runtime: Util.RuntimeOptions): UpdateMetaTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.caption)) {
    query['Caption'] = request.caption;
  }
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.newOwnerId)) {
    query['NewOwnerId'] = request.newOwnerId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.visibility)) {
    query['Visibility'] = request.visibility;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.addedLabels)) {
    body['AddedLabels'] = request.addedLabels;
  }
  if (!Util.isUnset(request.removedLabels)) {
    body['RemovedLabels'] = request.removedLabels;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMetaTable',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMetaTable(request: UpdateMetaTableRequest): UpdateMetaTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMetaTableWithOptions(request, runtime);
}

model UpdateMetaTableIntroWikiRequest {
  content?: string(name='Content', description='The details of the instructions on how to use the metatable.', example='abc'),
  tableGuid?: string(name='TableGuid', description='The GUID of the metatable. Specify the GUID in the format of odps.{projectName}.{tableName}.', example='odps.test.table1'),
}

model UpdateMetaTableIntroWikiResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='abcde'),
  updateResult?: boolean(name='UpdateResult', description='The updated instructions.', example='true'),
}

model UpdateMetaTableIntroWikiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMetaTableIntroWikiResponseBody(name='body'),
}

async function updateMetaTableIntroWikiWithOptions(request: UpdateMetaTableIntroWikiRequest, runtime: Util.RuntimeOptions): UpdateMetaTableIntroWikiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMetaTableIntroWiki',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMetaTableIntroWiki(request: UpdateMetaTableIntroWikiRequest): UpdateMetaTableIntroWikiResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMetaTableIntroWikiWithOptions(request, runtime);
}

model UpdateNodeOwnerRequest {
  nodeId?: long(name='NodeId', description='The ID of the node. You can call the [ListNodes](~~173979~~) operation to query the ID.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The environment where the node runs. Valid values: DEV and PROD. The value DEV indicates the development environment. The value PROD indicates the production environment.', example='PROD'),
  userId?: string(name='UserId', description='The Alibaba Cloud account ID of the node owner. You can log on to the DataWorks console and move the pointer over the profile picture in the upper-right corner to view the ID.', example='19337906836551'),
}

model UpdateNodeOwnerResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to obtain logs and troubleshoot issues.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: indicates that the request is successful.
*   false: indicates that the request fails.', example='true'),
}

model UpdateNodeOwnerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateNodeOwnerResponseBody(name='body'),
}

async function updateNodeOwnerWithOptions(request: UpdateNodeOwnerRequest, runtime: Util.RuntimeOptions): UpdateNodeOwnerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateNodeOwner',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateNodeOwner(request: UpdateNodeOwnerRequest): UpdateNodeOwnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNodeOwnerWithOptions(request, runtime);
}

model UpdateNodeRunModeRequest {
  nodeId?: long(name='NodeId', description='The ID of the node. You can call the [ListNodes](~~173979~~) operation to query the ID.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The environment where the node runs. Valid values: DEV and PROD. The value DEV indicates the development environment. The value PROD indicates the production environment.', example='PROD'),
  schedulerType?: int32(name='SchedulerType', description='The operation that you want to perform on the node. Valid values:

*   0: indicates that you want to unfreeze the node.
*   2: indicates that you want to freeze the node.', example='0'),
}

model UpdateNodeRunModeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to obtain logs and troubleshoot issues.', example='E6F0DBDD-5AD****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: indicates that the request is successful.
*   false: indicates that the request fails.', example='true'),
}

model UpdateNodeRunModeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateNodeRunModeResponseBody(name='body'),
}

async function updateNodeRunModeWithOptions(request: UpdateNodeRunModeRequest, runtime: Util.RuntimeOptions): UpdateNodeRunModeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.schedulerType)) {
    body['SchedulerType'] = request.schedulerType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateNodeRunMode',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateNodeRunMode(request: UpdateNodeRunModeRequest): UpdateNodeRunModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNodeRunModeWithOptions(request, runtime);
}

model UpdateQualityFollowerRequest {
  alarmMode?: int32(name='AlarmMode', description='The notification method. Valid values: 1, 2, 4, and 5. 1 indicates that the notification is sent by email. 2 indicates that the notification is sent by email and text message. 4 indicates that the notification is sent by a DingTalk chatbot. 5 indicates that the notification is sent by a DingTalk chatbot to all members in a DingTalk group.', example='2'),
  follower?: string(name='Follower', description='The name of the subscriber.', example='1912232****'),
  followerId?: long(name='FollowerId', description='The ID of the subscription relationship.', example='1234'),
  projectId?: long(name='ProjectId'),
  projectName?: string(name='ProjectName', description='The name of the computing engine instance or data source.', example='autotest'),
}

model UpdateQualityFollowerResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the subscription relationship is updated.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='401'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='You have no permission'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='576b9457-2cf5-4****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model UpdateQualityFollowerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateQualityFollowerResponseBody(name='body'),
}

async function updateQualityFollowerWithOptions(request: UpdateQualityFollowerRequest, runtime: Util.RuntimeOptions): UpdateQualityFollowerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alarmMode)) {
    body['AlarmMode'] = request.alarmMode;
  }
  if (!Util.isUnset(request.follower)) {
    body['Follower'] = request.follower;
  }
  if (!Util.isUnset(request.followerId)) {
    body['FollowerId'] = request.followerId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateQualityFollower',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateQualityFollower(request: UpdateQualityFollowerRequest): UpdateQualityFollowerResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateQualityFollowerWithOptions(request, runtime);
}

model UpdateQualityRuleRequest {
  blockType?: int32(name='BlockType', description='The strength of the monitoring rule. The strength of a monitoring rule indicates the importance of the rule. Valid values:

*   1: indicates that the monitoring rule is a strong rule.

*   0: indicates that the monitoring rule is a weak rule.

    You can specify whether a monitoring rule is a strong rule based on your business requirements. If a strong rule is used and a critical alert is triggered, nodes are blocked.', example='0'),
  checker?: int32(name='Checker', description='The ID of the checker. You can call the [ListQualityRules](~~173995~~) operation to obtain the ID of the checker.', example='9'),
  comment?: string(name='Comment', description='The description of the monitoring rule.'),
  criticalThreshold?: string(name='CriticalThreshold', description='The threshold for a critical alert. The threshold indicates the deviation of the monitoring result from the expected value. You can customize this threshold based on your business requirements. If a strong rule is used and an error alert is triggered, nodes are blocked.', example='10'),
  entityId?: long(name='EntityId', description='The ID of the partition filter expression. You can call the [GetQualityEntity](~~173995~~) operation to obtain the ID of the partition filter expression.', example='123'),
  expectValue?: string(name='ExpectValue', description='The expected value of the monitoring result.', example='300'),
  id?: long(name='Id', description='The ID of the monitoring rule. You can call the [ListQualityRules](~~173995~~) operation to obtain the ID of the monitoring rule.', example='1234'),
  methodName?: string(name='MethodName', description='The method that is used to collect sample data, such as avg, count, sum, min, max, count_distinct, user_defined, table_count, table_size, table_dt_load_count, table_dt_refuseload_count, null_value, null_value/table_count, (table_count-count_distinct)/table_count, or table_count-count_distinct.', example='table_count'),
  openSwitch?: boolean(name='OpenSwitch', description='Specifies whether to enable the monitoring rule in the production environment.

*   true: The monitoring rule is triggered when the associated auto triggered node that generates the output data starts to run.
*   false: The monitoring rule is not triggered when the associated auto triggered node that generates the output data starts to run.', example='true'),
  operator?: string(name='Operator', description='The comparison operator, such as >, >=, =, ≠, <, or <=.', example='>'),
  predictType?: int32(name='PredictType', description='Specifies whether the threshold is a dynamic threshold. Valid values:

*   0: indicates that the threshold is not a dynamic threshold.
*   2: indicates that the threshold is a dynamic threshold.', example='0'),
  projectId?: long(name='ProjectId'),
  projectName?: string(name='ProjectName', description='The name of the compute engine instance or data source. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace Management page to obtain the name.', example='autotest'),
  property?: string(name='Property', description='The name of the field to be monitored.', example='id'),
  propertyType?: string(name='PropertyType', description='The data type of the field.', example='bigint'),
  ruleName?: string(name='RuleName', description='The name of the monitoring rule.', example='123'),
  ruleType?: int32(name='RuleType', description='The type of the monitoring rule. Valid values:

*   0: The monitoring rule is created by the system.
*   1: The monitoring rule is created by a user.
*   2: The monitoring rule is a workspace-level rule.', example='0'),
  templateId?: int32(name='TemplateId', description='The ID of the monitoring template. You can call the [ListQualityRules](~~173995~~) operation to obtain the ID of the monitoring template that is used to create the monitoring rule.', example='7'),
  trend?: string(name='Trend', description='The trend of the monitoring result. Valid values:

*   up: increasing
*   down: decreasing
*   abs: absolute value', example='up'),
  warningThreshold?: string(name='WarningThreshold', description='The threshold for a warning alert. The threshold indicates the deviation of the monitoring result from the expected value. You can customize this threshold based on your business requirements.', example='5'),
  whereCondition?: string(name='WhereCondition', description='The filter condition or custom SQL statement that is used for monitoring.', example='dt=$[yyyymmdd]'),
}

model UpdateQualityRuleResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the monitoring rule is updated.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='0'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can troubleshoot issues based on the ID.', example='576b9457-2cf5-4****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model UpdateQualityRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateQualityRuleResponseBody(name='body'),
}

async function updateQualityRuleWithOptions(request: UpdateQualityRuleRequest, runtime: Util.RuntimeOptions): UpdateQualityRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.blockType)) {
    body['BlockType'] = request.blockType;
  }
  if (!Util.isUnset(request.checker)) {
    body['Checker'] = request.checker;
  }
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.criticalThreshold)) {
    body['CriticalThreshold'] = request.criticalThreshold;
  }
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.expectValue)) {
    body['ExpectValue'] = request.expectValue;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.methodName)) {
    body['MethodName'] = request.methodName;
  }
  if (!Util.isUnset(request.openSwitch)) {
    body['OpenSwitch'] = request.openSwitch;
  }
  if (!Util.isUnset(request.operator)) {
    body['Operator'] = request.operator;
  }
  if (!Util.isUnset(request.predictType)) {
    body['PredictType'] = request.predictType;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.property)) {
    body['Property'] = request.property;
  }
  if (!Util.isUnset(request.propertyType)) {
    body['PropertyType'] = request.propertyType;
  }
  if (!Util.isUnset(request.ruleName)) {
    body['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.ruleType)) {
    body['RuleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.trend)) {
    body['Trend'] = request.trend;
  }
  if (!Util.isUnset(request.warningThreshold)) {
    body['WarningThreshold'] = request.warningThreshold;
  }
  if (!Util.isUnset(request.whereCondition)) {
    body['WhereCondition'] = request.whereCondition;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateQualityRule',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateQualityRule(request: UpdateQualityRuleRequest): UpdateQualityRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateQualityRuleWithOptions(request, runtime);
}

model UpdateRemindRequest {
  alertInterval?: int32(name='AlertInterval', description='The recipient to whom alert notifications are sent. Valid values: OWNER and OTHER. The value OWNER indicates that alert notifications are sent to the object owner. The value OTHER indicates that alert notifications are sent to a specified user.', example='1800'),
  alertMethods?: string(name='AlertMethods', description='Specifies whether to enable the alert rule. Valid values:

*   true: enables the alert rule.
*   false: disables the alert rule.', example='SMS,MAIL'),
  alertTargets?: string(name='AlertTargets', description='The webhook URL of the DingTalk chatbot. You can specify multiple webhook URLs. Separate them with commas (,).

If this parameter is set to undefined, the specified webhook URLs are cleared.', example='9527952795279527'),
  alertUnit?: string(name='AlertUnit', description='The value format required by this parameter varies based on the value that you specify for the AlertUnit parameter. Take note of the following items:

*   If the AlertUnit parameter is set to OWNER, leave this parameter empty.
*   If the AlertUnit parameter is set to OTHER, set this parameter to the unique ID (UID) of the specified user. You can specify multiple IDs. Separate them with commas (,). You can specify a maximum of 10 IDs.', example='OWNER'),
  baselineIds?: string(name='BaselineIds', description='The ID of the workflow to which the custom alert rule is applied.. An alert rule can monitor a maximum of five workflows. Separate multiple IDs with commas (,).

This parameter takes effect when you set the RemindUnit parameter to BIZPROCESS.', example='1,2,3'),
  bizProcessIds?: string(name='BizProcessIds', description='The maximum number of alerts. Valid values: 1 to 10. Default value: 3.', example='1,2,3'),
  detail?: string(name='Detail', description='The notification method. Valid values:

*   MAIL: Alert notifications are sent by emails.
*   SMS: Alert notifications are sent by text messages.
*   PHONE: Alert notifications are sent by phone calls. You can use this notification method only in DataWorks Professional Edition or more advanced editions.
*   DINGROBOTS: Alert notifications are sent by DingTalk messages. You can use this notification method only if the RobotUrls parameter is configured.
*   WEBHOOKS (WeCom or Lark chatbot): Alert notifications are sent by WeCom or Lark messages. If you want to use this notification method, you must configure the Webhooks parameter.

You can specify multiple notification methods. Separate the specified notification methods with commas (,).', example='{"hour":23,"minu":59}'),
  dndEnd?: string(name='DndEnd', description='The ID of the node to which the custom alert rule is applied.. An alert rule can monitor a maximum of 50 nodes. Separate multiple IDs with commas (,).

This parameter takes effect when you set the RemindUnit parameter to NODE.', example='08:00'),
  maxAlertTimes?: int32(name='MaxAlertTimes', description='The details of the conditions that trigger an alert.

*   If the RemindType parameter is set to FINISHED, leave this parameter empty.

*   If the RemindType parameter is set to UNFINISHED, set this parameter to key-value pairs. Example: {"hour":23,"minu":59}. Valid values of hour: 0 to 47. Valid values of minu: 0 to 59.

*   If the RemindType parameter is set to ERROR, leave this parameter empty.

*   If the RemindType parameter is set to CYCLE_UNFINISHED, set this parameter to key-value pairs in the JSON format. Example: {"1":"05:50","2":"06:50","3":"07:50","4":"08:50","5":"09:50","6":"10:50","7":"11:50","8":"12:50","9":"13:50","10":"14:50","11":"15:50","12":"16:50","13":"17:50","14":"18:50","15":"19:50","16":"20:50","17":"21:50","18":"22:50","19":"23:50","20":"24:50","21":"25:50"}.

    A key in the JSON string indicates the sequence number of a cycle. Valid values of keys: 1 to 288. A value in the JSON string indicates the time in point when a monitored instance times out in the relevant cycle. Values must be in the format of hh:mm. Valid values of hh: 0 to 47. Valid values of mm: 0 to 59.

*   If the RemindType parameter is set to TIMEOUT, set this parameter to the timeout period. Unit: seconds. Example: 1800. This indicates that an alert notification is sent if the duration of a monitored instance exceeds 30 minutes.', example='3'),
  nodeIds?: string(name='NodeIds', description='The ID of the workspace to which the custom alert rule is applied.. Only one workspace can be specified for a custom alert rule.

This parameter takes effect when you set the RemindUnit parameter to PROJECT.', example='1,2,3'),
  projectId?: long(name='ProjectId', description='The condition that triggers the alert rule. Valid values:

*   FINISHED: The system monitors an instance when it starts to run and sends an alert notification after the running of the instance is complete.
*   UNFINISHED: The system monitors an instance when it starts to run and sends an alert notification if the instance is still running at the specified point in time.
*   ERROR: The system monitors an instance when it starts to run and sends an alert notification if an error occurs.
*   CYCLE_UNFINISHED: The system sends an alert notification if a monitored instance is still running at the end of the specified cycle. In most cases, you can configure this trigger condition for node instances that are scheduled to run by hour.
*   TIMEOUT: The system monitors an instance when it starts to run and sends an alert notification if the instance is still running after the specified period ends. In most cases, you can configure this trigger condition to monitor the duration of node instances.

For more information, see [Manage custom alert rules](~~138172~~).', example='1234'),
  remindId?: long(name='RemindId', description='The end of the period during which no alert notifications are sent. Specify the time in the hh:mm format. Valid values of hh: 0 to 23. Valid values of mm: 0 to 59.', example='1234'),
  remindName?: string(name='RemindName', description='The type of the object to which the custom alert rule is applied.. Valid values:

*   NODE: node
*   BASELINE: baseline
*   PROJECT: workspace
*   BIZPROCESS: workflow', example='update_remindname'),
  remindType?: string(name='RemindType', description='The intervals at which alert notifications are sent. Unit: seconds. Minimum value: 1200. Default value: 1800.', example='FINISHED'),
  remindUnit?: string(name='RemindUnit', description='The ID of the baseline to which the custom alert rule is applied.. An alert rule can monitor a maximum of five baselines. Separate multiple IDs with commas (,).

This parameter takes effect when you set the RemindUnit parameter to BASELINE.', example='NODE'),
  robotUrls?: string(name='RobotUrls', description='The HTTP status code returned.', example='https://oapi.dingtalk.com/robot/send?access_token=******************************'),
  useFlag?: boolean(name='UseFlag', description='The webhook URL of the WeCom or Lark chatbot. You can specify multiple webhook URLs. Separate the specified webhook URLs with commas (,). The WEBHOOKS notification method must be specified for alertMethods. If this parameter is set to undefined, the specified webhook URLs are cleared.

Only DataWorks Enterprise Edition supports this parameter.

The webhook URL-based alerting feature is supported in the following regions: China (Shanghai), China (Chengdu), China (Zhangjiakou), China (Beijing), China (Hangzhou), China (Shenzhen), China (Hong Kong), Germany (Frankfurt), and Singapore.', example='true'),
  webhooks?: string(name='Webhooks', description='Indicates whether the modification to the custom alert rule succeeds.', example='https://open.feishu.cn/open-apis/bot/v2/hook/*******'),
}

model UpdateRemindResponseBody = {
  data?: boolean(name='Data', description='The ID of the request. You can use the ID to troubleshoot issues.', example='true'),
  errorCode?: string(name='ErrorCode', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The error message returned.', example='200'),
  requestId?: string(name='RequestId', description='The error code returned.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateRemindResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateRemindResponseBody(name='body'),
}

async function updateRemindWithOptions(request: UpdateRemindRequest, runtime: Util.RuntimeOptions): UpdateRemindResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertInterval)) {
    body['AlertInterval'] = request.alertInterval;
  }
  if (!Util.isUnset(request.alertMethods)) {
    body['AlertMethods'] = request.alertMethods;
  }
  if (!Util.isUnset(request.alertTargets)) {
    body['AlertTargets'] = request.alertTargets;
  }
  if (!Util.isUnset(request.alertUnit)) {
    body['AlertUnit'] = request.alertUnit;
  }
  if (!Util.isUnset(request.baselineIds)) {
    body['BaselineIds'] = request.baselineIds;
  }
  if (!Util.isUnset(request.bizProcessIds)) {
    body['BizProcessIds'] = request.bizProcessIds;
  }
  if (!Util.isUnset(request.detail)) {
    body['Detail'] = request.detail;
  }
  if (!Util.isUnset(request.dndEnd)) {
    body['DndEnd'] = request.dndEnd;
  }
  if (!Util.isUnset(request.maxAlertTimes)) {
    body['MaxAlertTimes'] = request.maxAlertTimes;
  }
  if (!Util.isUnset(request.nodeIds)) {
    body['NodeIds'] = request.nodeIds;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.remindId)) {
    body['RemindId'] = request.remindId;
  }
  if (!Util.isUnset(request.remindName)) {
    body['RemindName'] = request.remindName;
  }
  if (!Util.isUnset(request.remindType)) {
    body['RemindType'] = request.remindType;
  }
  if (!Util.isUnset(request.remindUnit)) {
    body['RemindUnit'] = request.remindUnit;
  }
  if (!Util.isUnset(request.robotUrls)) {
    body['RobotUrls'] = request.robotUrls;
  }
  if (!Util.isUnset(request.useFlag)) {
    body['UseFlag'] = request.useFlag;
  }
  if (!Util.isUnset(request.webhooks)) {
    body['Webhooks'] = request.webhooks;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRemind',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateRemind(request: UpdateRemindRequest): UpdateRemindResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRemindWithOptions(request, runtime);
}

model UpdateTableRequest {
  appGuid?: string(name='AppGuid', description='Specifies whether the table exists. Valid values:

*   true: The table exists.
*   false: The table does not exist.

This parameter is deprecated. Do not use this parameter.', example='odps.test'),
  categoryId?: long(name='CategoryId', description='The ID of the logical level.', example='101'),
  columns?: [ 
    {
      columnName?: string(name='ColumnName', description='The comment of the field.', example='abc'),
      columnNameCn?: string(name='ColumnNameCn', description='The name of the field.'),
      columnType?: string(name='ColumnType', description='The sequence number of the field. If the field is a partition field, this parameter is not supported.', example='string'),
      comment?: string(name='Comment', description='The type of the field. For more information, see MaxCompute field types.'),
      isPartitionCol?: boolean(name='IsPartitionCol', description='The ID of the associated topic.', example='0'),
      length?: int32(name='Length', description='Specifies whether the field is a partition field. Valid values: 0 and 1. The value 0 indicates that the field is not a partition field. The value 1 indicates that the field is a partition field.', example='10'),
      seqNumber?: int32(name='SeqNumber', description='The length of the field.', example='1'),
    }
  ](name='Columns'),
  comment?: string(name='Comment', description='The schema information of the table. You need to enter the schema information of the table if you enable the table schema in MaxCompute.'),
  createIfNotExists?: boolean(name='CreateIfNotExists', description='Specifies whether the table that you want to update is a partitioned table. Valid values: 0 and 1. The value 0 indicates that the table is not a partitioned table. The value 1 indicates that the table is a partitioned table. This parameter is deprecated. Do not use this parameter.

The Column.N.isPartitionCol parameter is used instead of the HasPart parameter to specify whether the MaxCompute table is a partitioned table. If the Column.N.isPartitionCol parameter is set to 1, the MaxCompute table is a partitioned table.', example='true'),
  endpoint?: string(name='Endpoint', description='The environment of the DataWorks workspace. Valid values: 0 and 1. The value 0 indicates the development environment. The value 1 indicates the production environment.', example='odps://'),
  envType?: int32(name='EnvType', description='The globally unique identifier (GUID) of the MaxCompute project. Specify the GUID in the odps.{projectName} format.', example='1'),
  externalTableType?: string(name='ExternalTableType', description='The storage location of the external table. This parameter is deprecated. Do not use this parameter.', example='1'),
  hasPart?: int32(name='HasPart', description='The comment.', example='0'),
  isView?: int32(name='IsView', description='The scope in which the table is visible. Valid values: 0, 1, and 2. The value 0 indicates that the table is invisible to all workspace members. The value 1 indicates that the table is visible to all workspace members. The value 2 indicates that the table is visible to workspace members.', example='0'),
  lifeCycle?: int32(name='LifeCycle', description='The ID of the associated category.', example='10'),
  location?: string(name='Location', description='The ID of the DataWorks workspace. You can log on to the DataWorks console to obtain the ID of the DataWorks workspace.', example='location'),
  logicalLevelId?: long(name='LogicalLevelId', description='The ID of the physical level.', example='101'),
  ownerId?: string(name='OwnerId'),
  physicsLevelId?: long(name='PhysicsLevelId', description='The type of the external table. Valid values: 0, 1, 2, and 3. The value 0 indicates that the external table is an OSS external table. The value 1 indicates that the external table is a Tablestore external table. The value 2 indicates that the external table is a volume external table. The value 3 indicates that the external table is a MySQL external table. This parameter is deprecated. Do not use this parameter.', example='101'),
  projectId?: long(name='ProjectId', description='The name of the MaxCompute table.', example='101'),
  schema?: string(name='Schema', description='The display name of the field.', example='default'),
  tableName?: string(name='TableName', description='The endpoint of MaxCompute. If this parameter is left empty, the endpoint of the MaxCompute project is used.', example='abc'),
  themes?: [ 
    {
      themeId?: long(name='ThemeId', description='The level that corresponds to the topic ID.', example='101'),
      themeLevel?: int32(name='ThemeLevel', description='The ID of the request.', example='101'),
    }
  ](name='Themes'),
  visibility?: int32(name='Visibility', description='The lifecycle of the table. Unit: days. If this parameter is left empty, the table is permanently stored.', example='1'),
}

model UpdateTableResponseBody = {
  requestId?: string(name='RequestId', description='The information about the request task.

After a request task is submitted, it is divided into multiple subtasks that are run in sequence. After the current subtask is complete, the next subtask starts to run. After all subtasks are complete, the request task is complete. If a request task is aborted due to one of the following issues, address the issue based on the error code and initiate the request task again:

*   The request task fails to be submitted.
*   After the request task is submitted, a subtask fails to run.', example='abcde'),
  taskInfo?: {
    content?: string(name='Content', example='success'),
    nextTaskId?: string(name='NextTaskId', description='The ID of the current subtask.', example='abc1'),
    status?: string(name='Status', description='The ID of the subtask that you want to run. If this parameter is left empty, all subtasks are complete. You can call the [GetDDLJobStatus](~~185659~~) operation to query the status of the subtask based on the subtask ID.', example='success'),
    taskId?: string(name='TaskId', description='Details about the status of the current subtask.

*   If the current subtask succeeds, success is returned.
*   If the current subtask fails, the error details are displayed.', example='abc'),
  }(name='TaskInfo', description='The status of the current subtask. Valid values:

*   operating: The subtask is running.
*   success: The subtask succeeds.
*   failure: The subtask fails to run. For more information about the error details, see the Content parameter.'),
}

model UpdateTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTableResponseBody(name='body'),
}

async function updateTableWithOptions(request: UpdateTableRequest, runtime: Util.RuntimeOptions): UpdateTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appGuid)) {
    query['AppGuid'] = request.appGuid;
  }
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.createIfNotExists)) {
    query['CreateIfNotExists'] = request.createIfNotExists;
  }
  if (!Util.isUnset(request.externalTableType)) {
    query['ExternalTableType'] = request.externalTableType;
  }
  if (!Util.isUnset(request.hasPart)) {
    query['HasPart'] = request.hasPart;
  }
  if (!Util.isUnset(request.isView)) {
    query['IsView'] = request.isView;
  }
  if (!Util.isUnset(request.lifeCycle)) {
    query['LifeCycle'] = request.lifeCycle;
  }
  if (!Util.isUnset(request.location)) {
    query['Location'] = request.location;
  }
  if (!Util.isUnset(request.logicalLevelId)) {
    query['LogicalLevelId'] = request.logicalLevelId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.physicsLevelId)) {
    query['PhysicsLevelId'] = request.physicsLevelId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  if (!Util.isUnset(request.visibility)) {
    query['Visibility'] = request.visibility;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.columns)) {
    body['Columns'] = request.columns;
  }
  if (!Util.isUnset(request.endpoint)) {
    body['Endpoint'] = request.endpoint;
  }
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.themes)) {
    body['Themes'] = request.themes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTable',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTable(request: UpdateTableRequest): UpdateTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTableWithOptions(request, runtime);
}

model UpdateTableAddColumnRequest {
  column?: [ 
    {
      columnName?: string(name='ColumnName', description='The name of the field.', example='abc'),
      columnNameCn?: string(name='ColumnNameCn', description='The display name of the field.'),
      columnType?: string(name='ColumnType', description='The type of the field. For more information, see MaxCompute field types.', example='string'),
      comment?: string(name='Comment', description='The comment of the field.'),
    }
  ](name='Column'),
  tableGuid?: string(name='TableGuid', description='The globally unique identifier (GUID) of the MaxCompute table. Specify the GUID in the odps.projectName.tableName format.', example='odps.engine_name.table_name'),
}

model UpdateTableAddColumnResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='abc'),
  taskInfo?: {
    content?: string(name='Content', description='Details about the status of the current subtask. Valid values:

*   If the current subtask succeeds, success is returned.
*   If the current subtask fails, the error details are displayed.', example='success'),
    nextTaskId?: string(name='NextTaskId', description='The ID of the subtask that you want to run. If this parameter is left empty, all subtasks are complete. You can call the [GetDDLJobStatus](~~185659~~) operation to query the status of the subtask based on the subtask ID.', example='abc1'),
    status?: string(name='Status', description='The status of the current subtask. Valid values:

*   operating: The subtask is running.
*   success: The subtask succeeds.
*   failure: The subtask fails to run. For more information about the error details, see the Content parameter.', example='success'),
    taskId?: string(name='TaskId', description='The ID of the current subtask.', example='abc2'),
  }(name='TaskInfo', description='The information about the request task.

After a request task is submitted, it is divided into multiple subtasks that are run in sequence. After the current subtask is complete, the next subtask starts to run. After all subtasks are complete, the request task is complete. If a request task is aborted due to one of the following issues, address the issue based on the error code and initiate the request task again:

*   The request task fails to be submitted.
*   After the request task is submitted, a subtask fails to run.'),
}

model UpdateTableAddColumnResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTableAddColumnResponseBody(name='body'),
}

async function updateTableAddColumnWithOptions(request: UpdateTableAddColumnRequest, runtime: Util.RuntimeOptions): UpdateTableAddColumnResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.column)) {
    body['Column'] = request.column;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTableAddColumn',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTableAddColumn(request: UpdateTableAddColumnRequest): UpdateTableAddColumnResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTableAddColumnWithOptions(request, runtime);
}

model UpdateTableLevelRequest {
  description?: string(name='Description', description='The description of the table level.', example='level description'),
  levelId?: long(name='LevelId', description='The ID of the table level to be updated. You can call the ListTableLevel operation to obtain the ID.', example='123'),
  levelType?: int32(name='LevelType', description='The type of the table level. Valid values: 1 and 2. A value of 1 indicates the logical level. A value of 2 indicates the physical level.', example='1'),
  name?: string(name='Name', description='The name of the table level.', example='level name'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.', example='123'),
}

model UpdateTableLevelResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='abcde'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  updateResult?: boolean(name='UpdateResult', description='Indicates whether the update result is returned.', example='true'),
}

model UpdateTableLevelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTableLevelResponseBody(name='body'),
}

async function updateTableLevelWithOptions(request: UpdateTableLevelRequest, runtime: Util.RuntimeOptions): UpdateTableLevelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.levelId)) {
    query['LevelId'] = request.levelId;
  }
  if (!Util.isUnset(request.levelType)) {
    query['LevelType'] = request.levelType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTableLevel',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTableLevel(request: UpdateTableLevelRequest): UpdateTableLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTableLevelWithOptions(request, runtime);
}

model UpdateTableModelInfoRequest {
  firstLevelThemeId?: long(name='FirstLevelThemeId', description='The ID of the first-level table folder.', example='101'),
  levelId?: long(name='LevelId', description='The ID of the table level.', example='101'),
  levelType?: int32(name='LevelType', description='The type of the table level. Valid values: 1 and 2. A value of 1 indicates the logical level. A value of 2 indicates the physical level.', example='1'),
  secondLevelThemeId?: long(name='SecondLevelThemeId', description='The ID of the second-level table folder.', example='101'),
  tableGuid?: string(name='TableGuid', description='The globally unique identifier (GUID) of the table. Specify the GUID in the format of odps.{projectName}.{tableName}.', example='odps.test.table1'),
}

model UpdateTableModelInfoResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='abcde'),
  updateResult?: boolean(name='UpdateResult', description='Indicates whether the request is successful.', example='true'),
}

model UpdateTableModelInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTableModelInfoResponseBody(name='body'),
}

async function updateTableModelInfoWithOptions(request: UpdateTableModelInfoRequest, runtime: Util.RuntimeOptions): UpdateTableModelInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.firstLevelThemeId)) {
    query['FirstLevelThemeId'] = request.firstLevelThemeId;
  }
  if (!Util.isUnset(request.levelId)) {
    query['LevelId'] = request.levelId;
  }
  if (!Util.isUnset(request.levelType)) {
    query['LevelType'] = request.levelType;
  }
  if (!Util.isUnset(request.secondLevelThemeId)) {
    query['SecondLevelThemeId'] = request.secondLevelThemeId;
  }
  if (!Util.isUnset(request.tableGuid)) {
    query['TableGuid'] = request.tableGuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTableModelInfo',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTableModelInfo(request: UpdateTableModelInfoRequest): UpdateTableModelInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTableModelInfoWithOptions(request, runtime);
}

model UpdateTableThemeRequest {
  name?: string(name='Name', description='The name of the table folder.', example='table folder name'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.', example='123'),
  themeId?: long(name='ThemeId', description='The ID of the table folder.', example='123'),
}

model UpdateTableThemeResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='1031203110005'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The specified parameters are invalid.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='abcd'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request is successful.
*   false: The request fails.', example='true'),
  updateResult?: boolean(name='UpdateResult', description='Indicates whether the update result is returned. Valid values:

*   true: The update result is returned.
*   false: The update result is not returned.', example='true'),
}

model UpdateTableThemeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTableThemeResponseBody(name='body'),
}

async function updateTableThemeWithOptions(request: UpdateTableThemeRequest, runtime: Util.RuntimeOptions): UpdateTableThemeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.themeId)) {
    query['ThemeId'] = request.themeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTableTheme',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTableTheme(request: UpdateTableThemeRequest): UpdateTableThemeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTableThemeWithOptions(request, runtime);
}

model UpdateUdfFileRequest {
  className?: string(name='ClassName', description='The name of the class in which the function is defined. This parameter corresponds to the Class Name parameter in the Register Function section of the configuration tab of the function in the DataWorks console.', example='com.alibaba.DataWorks.api.udf.StringConcat'),
  cmdDescription?: string(name='CmdDescription', description='The syntax used for calling the function. This parameter corresponds to the Expression Syntax parameter in the Register Function section of the configuration tab of the function in the DataWorks console.', example='StringConcat(String... substrs)'),
  example?: string(name='Example', description='The example for calling the function. This parameter corresponds to the Example parameter in the Register Function section of the configuration tab of the function in the DataWorks console.', example='StringConcat(\\"a\\", \\"b\\", \\"c\\")'),
  fileFolderPath?: string(name='FileFolderPath', description='The path of the folder in which the function file is stored.'),
  fileId?: string(name='FileId', description='The ID of the file.', example='10000001'),
  functionType?: string(name='FunctionType', description='The type of the function. Valid values: MATH, AGGREGATE, STRING, DATE, ANALYTIC, and OTHER. This parameter corresponds to the Function Type parameter in the Register Function section of the configuration tab of the function in the DataWorks console.', example='STRING'),
  parameterDescription?: string(name='ParameterDescription', description='The description of the input parameters of the function. This parameter corresponds to the Parameter Description parameter in the Register Function section of the configuration tab of the function in the DataWorks console.'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can click the Workspace Manage icon in the upper-right corner of the DataStudio page to go to the Workspace Management page and view the workspace ID.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The unique identifier of the DataWorks workspace. You can click the identifier in the upper-left corner of the DataStudio page to switch to another workspace.

You must specify either this parameter or ProjectId to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
  resources?: string(name='Resources', description='The names of the resources that are referenced by the function. This parameter corresponds to the Resources parameter in the Register Function section of the configuration tab of the function in the DataWorks console. Separate multiple resource names with commas (,).', example='string-concat-1.0.0.jar,commons-lang-2.6.jar'),
  returnValue?: string(name='ReturnValue', description='The description of the return value of the function. This parameter corresponds to the Return Value parameter in the Register Function section of the configuration tab of the function in the DataWorks console.'),
  udfDescription?: string(name='UdfDescription', description='The description of the function. This parameter corresponds to the Description parameter in the Register Function section of the configuration tab of the function in the DataWorks console.'),
}

model UpdateUdfFileResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request. You can troubleshoot issues based on the ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model UpdateUdfFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateUdfFileResponseBody(name='body'),
}

async function updateUdfFileWithOptions(request: UpdateUdfFileRequest, runtime: Util.RuntimeOptions): UpdateUdfFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.className)) {
    body['ClassName'] = request.className;
  }
  if (!Util.isUnset(request.cmdDescription)) {
    body['CmdDescription'] = request.cmdDescription;
  }
  if (!Util.isUnset(request.example)) {
    body['Example'] = request.example;
  }
  if (!Util.isUnset(request.fileFolderPath)) {
    body['FileFolderPath'] = request.fileFolderPath;
  }
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.functionType)) {
    body['FunctionType'] = request.functionType;
  }
  if (!Util.isUnset(request.parameterDescription)) {
    body['ParameterDescription'] = request.parameterDescription;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.resources)) {
    body['Resources'] = request.resources;
  }
  if (!Util.isUnset(request.returnValue)) {
    body['ReturnValue'] = request.returnValue;
  }
  if (!Util.isUnset(request.udfDescription)) {
    body['UdfDescription'] = request.udfDescription;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateUdfFile',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateUdfFile(request: UpdateUdfFileRequest): UpdateUdfFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUdfFileWithOptions(request, runtime);
}

model UpdateWorkbenchEventResultRequest {
  checkResult?: string(name='CheckResult', description='The check status of the extension point event. Valid values: OK and Fail. A value of OK indicates that the event passes the check. A value of FAIL indicates that the event fails to pass the check.', example='FAIL'),
  checkResultTip?: string(name='CheckResultTip', description='The cause of the check failure.', example='注意节点有效期'),
  extensionCode?: string(name='ExtensionCode', description='The code of the extension.', example='58e95e2acd6f408e8707f1bf2591f9e9'),
  messageId?: string(name='MessageId', description='The ID of the message received when the related extension point event is triggered after you enable message subscription by using the OpenEvent module.', example='03400b03-b721-4c34-8727-2d6884077091'),
}

model UpdateWorkbenchEventResultResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0bc1ec92159376****'),
  success?: boolean(name='Success', description='Indicates whether the call is successful.', example='true'),
}

model UpdateWorkbenchEventResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateWorkbenchEventResultResponseBody(name='body'),
}

async function updateWorkbenchEventResultWithOptions(request: UpdateWorkbenchEventResultRequest, runtime: Util.RuntimeOptions): UpdateWorkbenchEventResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkResult)) {
    query['CheckResult'] = request.checkResult;
  }
  if (!Util.isUnset(request.checkResultTip)) {
    query['CheckResultTip'] = request.checkResultTip;
  }
  if (!Util.isUnset(request.extensionCode)) {
    query['ExtensionCode'] = request.extensionCode;
  }
  if (!Util.isUnset(request.messageId)) {
    query['MessageId'] = request.messageId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWorkbenchEventResult',
    version = '2020-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateWorkbenchEventResult(request: UpdateWorkbenchEventResultRequest): UpdateWorkbenchEventResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateWorkbenchEventResultWithOptions(request, runtime);
}

