/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'opt';
  @version = '2021-07-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model GetOpenStatusRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model GetOpenStatusResponseBody = {
  code?: int32(name='Code', example='0'),
  data?: map[string]any(name='Data', example='{"gmtModified":"2021-07-27T04:00:00.000+00:00","mpStatus":1,"id":11,"pk":"1084126944995576","gmtCreate":"2021-07-27T04:00:00.000+00:00","parentPk":"1084126944995576"}'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EB-FCAC-1B78-BBB8-500ED951E9EB'),
  success?: boolean(name='Success', example='true'),
}

model GetOpenStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOpenStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOpenStatus  GetOpenStatusRequest
  * @return GetOpenStatusResponse
 */
async function getOpenStatus(request: GetOpenStatusRequest): GetOpenStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOpenStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetOrderInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  listReleased?: boolean(name='ListReleased', position='Query'),
  relService: string(name='RelService', description='This parameter is required.', example='MP', position='Query'),
  resourceType: int32(name='ResourceType', description='This parameter is required.', example='1', minimum=1, maximum=1, position='Query'),
}

model GetOrderInfoResponseBody = {
  code?: string(name='Code', example='0'),
  data?: [ 
    {
      bizType?: string(name='bizType'),
      currentConcurrency?: int32(name='currentConcurrency'),
      currentDays?: int32(name='currentDays'),
      instanceId?: string(name='instanceId'),
      isReleased?: boolean(name='isReleased'),
      licenseKey?: string(name='licenseKey'),
      remark?: string(name='remark'),
      totalDays?: int32(name='totalDays'),
    }
  ](name='Data', example='{"licenseKey":"eems7ri3b1u5nui*****","currentConcurrency":2,"instanceId":"opt_mplicense_public_cn-****","totalDays":124,"currentDays":103}'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5D6653C5-CA2B-14EC-9CF0-50AA0FF49C31'),
  success?: boolean(name='Success', example='true'),
}

model GetOrderInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOrderInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOrderInfo  GetOrderInfoRequest
  * @return GetOrderInfoResponse
 */
async function getOrderInfo(request: GetOrderInfoRequest): GetOrderInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOrderInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetOrderUsageRequest {
  regionId?: string(name='RegionId', position='Host'),
  licenseKey: string(name='LicenseKey', description='This parameter is required.', position='Query'),
  relService: string(name='RelService', description='This parameter is required.', example='MP', position='Query'),
  resourceType: int32(name='ResourceType', description='This parameter is required.', example='1', minimum=1, maximum=1, position='Query'),
  timeRange?: int32(name='TimeRange', example='1', position='Query'),
}

model GetOrderUsageResponseBody = {
  data?: [  map[string]any ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5D6653C5-CA2B-14EC-9CF0-50AA0FF49C31'),
  success?: boolean(name='Success', example='true'),
}

model GetOrderUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOrderUsageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOrderUsage  GetOrderUsageRequest
  * @return GetOrderUsageResponse
 */
async function getOrderUsage(request: GetOrderUsageRequest): GetOrderUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOrderUsage', 'POST', '/', 'json', false, 'json', request);
}

