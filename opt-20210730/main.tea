/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('opt', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model GetOrderUsageRequest {
  relService?: string(name='RelService'),
  resourceType?: int32(name='ResourceType'),
  timeRange?: int32(name='TimeRange'),
}

model GetOrderUsageResponseBody = {
  message?: string(name='Message'),
  data?: [  map[string]any ](name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetOrderUsageResponse = {
  headers: map[string]string(name='headers'),
  body: GetOrderUsageResponseBody(name='body'),
}

async function getOrderUsageWithOptions(request: GetOrderUsageRequest, runtime: Util.RuntimeOptions): GetOrderUsageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetOrderUsage', '2021-07-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getOrderUsage(request: GetOrderUsageRequest): GetOrderUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOrderUsageWithOptions(request, runtime);
}

model GetOrderInfoRequest {
  relService?: string(name='RelService'),
  resourceType?: int32(name='ResourceType'),
}

model GetOrderInfoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: map[string]any(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetOrderInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetOrderInfoResponseBody(name='body'),
}

async function getOrderInfoWithOptions(request: GetOrderInfoRequest, runtime: Util.RuntimeOptions): GetOrderInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetOrderInfo', '2021-07-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getOrderInfo(request: GetOrderInfoRequest): GetOrderInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOrderInfoWithOptions(request, runtime);
}

model GetOpenStatusResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  data?: map[string]any(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetOpenStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetOpenStatusResponseBody(name='body'),
}

async function getOpenStatusWithOptions(runtime: Util.RuntimeOptions): GetOpenStatusResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('GetOpenStatus', '2021-07-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getOpenStatus(): GetOpenStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOpenStatusWithOptions(runtime);
}

