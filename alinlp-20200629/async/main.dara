/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'alinlp';
  @version = '2020-06-29';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ADClockRequest {
  params?: string(name='Params', position='Body'),
  serviceCode?: string(name='ServiceCode', position='Body'),
}

model ADClockResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model ADClockResponse = {
  headers: map[string]string(name='headers'),
  body: ADClockResponseBody(name='body'),
}

async function aDClock(request: ADClockRequest): ADClockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ADClock', 'POST', '/', 'json', true, 'form', request);
}

model ADMMURequest {
  params?: string(name='Params', position='Body'),
  serviceCode?: string(name='ServiceCode', position='Body'),
}

model ADMMUResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model ADMMUResponse = {
  headers: map[string]string(name='headers'),
  body: ADMMUResponseBody(name='body'),
}

async function aDMMU(request: ADMMURequest): ADMMUResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ADMMU', 'POST', '/', 'json', true, 'form', request);
}

model GetBrandChEcomRequest {
  imageUrl?: string(name='ImageUrl', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  text?: string(name='Text', maxLength=800, position='Body'),
}

model GetBrandChEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetBrandChEcomResponse = {
  headers: map[string]string(name='headers'),
  body: GetBrandChEcomResponseBody(name='body'),
}

async function getBrandChEcom(request: GetBrandChEcomRequest): GetBrandChEcomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBrandChEcom', 'POST', '/', 'json', true, 'form', request);
}

model GetCateChEcomRequest {
  imageUrl?: string(name='ImageUrl', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', maxLength=800, position='Body'),
}

model GetCateChEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetCateChEcomResponse = {
  headers: map[string]string(name='headers'),
  body: GetCateChEcomResponseBody(name='body'),
}

async function getCateChEcom(request: GetCateChEcomRequest): GetCateChEcomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCateChEcom', 'POST', '/', 'json', true, 'form', request);
}

model GetCheckDuplicationChMedicalRequest {
  originQ: string(name='OriginQ', position='Body'),
  originT: string(name='OriginT', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
}

model GetCheckDuplicationChMedicalResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetCheckDuplicationChMedicalResponse = {
  headers: map[string]string(name='headers'),
  body: GetCheckDuplicationChMedicalResponseBody(name='body'),
}

async function getCheckDuplicationChMedical(request: GetCheckDuplicationChMedicalRequest): GetCheckDuplicationChMedicalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCheckDuplicationChMedical', 'POST', '/', 'json', true, 'form', request);
}

model GetDiagnosisChMedicalRequest {
  name: string(name='Name', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
}

model GetDiagnosisChMedicalResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetDiagnosisChMedicalResponse = {
  headers: map[string]string(name='headers'),
  body: GetDiagnosisChMedicalResponseBody(name='body'),
}

async function getDiagnosisChMedical(request: GetDiagnosisChMedicalRequest): GetDiagnosisChMedicalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDiagnosisChMedical', 'POST', '/', 'json', true, 'form', request);
}

model GetDpChEcomRequest {
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
}

model GetDpChEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetDpChEcomResponse = {
  headers: map[string]string(name='headers'),
  body: GetDpChEcomResponseBody(name='body'),
}

async function getDpChEcom(request: GetDpChEcomRequest): GetDpChEcomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDpChEcom', 'POST', '/', 'json', true, 'form', request);
}

model GetDpChGeneralCTBRequest {
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
}

model GetDpChGeneralCTBResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetDpChGeneralCTBResponse = {
  headers: map[string]string(name='headers'),
  body: GetDpChGeneralCTBResponseBody(name='body'),
}

async function getDpChGeneralCTB(request: GetDpChGeneralCTBRequest): GetDpChGeneralCTBResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDpChGeneralCTB', 'POST', '/', 'json', true, 'form', request);
}

model GetDpChGeneralStanfordRequest {
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
}

model GetDpChGeneralStanfordResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetDpChGeneralStanfordResponse = {
  headers: map[string]string(name='headers'),
  body: GetDpChGeneralStanfordResponseBody(name='body'),
}

async function getDpChGeneralStanford(request: GetDpChGeneralStanfordRequest): GetDpChGeneralStanfordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDpChGeneralStanford', 'POST', '/', 'json', true, 'form', request);
}

model GetEcChGeneralRequest {
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
}

model GetEcChGeneralResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetEcChGeneralResponse = {
  headers: map[string]string(name='headers'),
  body: GetEcChGeneralResponseBody(name='body'),
}

async function getEcChGeneral(request: GetEcChGeneralRequest): GetEcChGeneralResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEcChGeneral', 'POST', '/', 'json', true, 'form', request);
}

model GetEcEnGeneralRequest {
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
}

model GetEcEnGeneralResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetEcEnGeneralResponse = {
  headers: map[string]string(name='headers'),
  body: GetEcEnGeneralResponseBody(name='body'),
}

async function getEcEnGeneral(request: GetEcEnGeneralRequest): GetEcEnGeneralResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEcEnGeneral', 'POST', '/', 'json', true, 'form', request);
}

model GetItemPubChEcomRequest {
  imageUrl?: string(name='ImageUrl', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', maxLength=800, position='Body'),
}

model GetItemPubChEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetItemPubChEcomResponse = {
  headers: map[string]string(name='headers'),
  body: GetItemPubChEcomResponseBody(name='body'),
}

async function getItemPubChEcom(request: GetItemPubChEcomRequest): GetItemPubChEcomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetItemPubChEcom', 'POST', '/', 'json', true, 'form', request);
}

model GetKeywordChEcomRequest {
  apiVersion?: string(name='ApiVersion', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
}

model GetKeywordChEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetKeywordChEcomResponse = {
  headers: map[string]string(name='headers'),
  body: GetKeywordChEcomResponseBody(name='body'),
}

async function getKeywordChEcom(request: GetKeywordChEcomRequest): GetKeywordChEcomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetKeywordChEcom', 'POST', '/', 'json', true, 'form', request);
}

model GetKeywordEnEcomRequest {
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
}

model GetKeywordEnEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetKeywordEnEcomResponse = {
  headers: map[string]string(name='headers'),
  body: GetKeywordEnEcomResponseBody(name='body'),
}

async function getKeywordEnEcom(request: GetKeywordEnEcomRequest): GetKeywordEnEcomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetKeywordEnEcom', 'POST', '/', 'json', true, 'form', request);
}

model GetMedicineChMedicalRequest {
  factory?: string(name='Factory', position='Body'),
  name: string(name='Name', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  specification?: string(name='Specification', position='Body'),
  unit?: string(name='Unit', position='Body'),
}

model GetMedicineChMedicalResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetMedicineChMedicalResponse = {
  headers: map[string]string(name='headers'),
  body: GetMedicineChMedicalResponseBody(name='body'),
}

async function getMedicineChMedical(request: GetMedicineChMedicalRequest): GetMedicineChMedicalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMedicineChMedical', 'POST', '/', 'json', true, 'form', request);
}

model GetNerChEcomRequest {
  lexerId?: string(name='LexerId', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
}

model GetNerChEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetNerChEcomResponse = {
  headers: map[string]string(name='headers'),
  body: GetNerChEcomResponseBody(name='body'),
}

async function getNerChEcom(request: GetNerChEcomRequest): GetNerChEcomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNerChEcom', 'POST', '/', 'json', true, 'form', request);
}

model GetNerChMedicalRequest {
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
}

model GetNerChMedicalResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetNerChMedicalResponse = {
  headers: map[string]string(name='headers'),
  body: GetNerChMedicalResponseBody(name='body'),
}

async function getNerChMedical(request: GetNerChMedicalRequest): GetNerChMedicalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNerChMedical', 'POST', '/', 'json', true, 'form', request);
}

model GetNerCustomizedChEcomRequest {
  lexerId?: string(name='LexerId', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
}

model GetNerCustomizedChEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetNerCustomizedChEcomResponse = {
  headers: map[string]string(name='headers'),
  body: GetNerCustomizedChEcomResponseBody(name='body'),
}

async function getNerCustomizedChEcom(request: GetNerCustomizedChEcomRequest): GetNerCustomizedChEcomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNerCustomizedChEcom', 'POST', '/', 'json', true, 'form', request);
}

model GetNerCustomizedSeaEcomRequest {
  language: string(name='Language', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
}

model GetNerCustomizedSeaEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetNerCustomizedSeaEcomResponse = {
  headers: map[string]string(name='headers'),
  body: GetNerCustomizedSeaEcomResponseBody(name='body'),
}

async function getNerCustomizedSeaEcom(request: GetNerCustomizedSeaEcomRequest): GetNerCustomizedSeaEcomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNerCustomizedSeaEcom', 'POST', '/', 'json', true, 'form', request);
}

model GetOperationChMedicalRequest {
  name: string(name='Name', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
}

model GetOperationChMedicalResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetOperationChMedicalResponse = {
  headers: map[string]string(name='headers'),
  body: GetOperationChMedicalResponseBody(name='body'),
}

async function getOperationChMedical(request: GetOperationChMedicalRequest): GetOperationChMedicalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOperationChMedical', 'POST', '/', 'json', true, 'form', request);
}

model GetPosChEcomRequest {
  outType?: string(name='OutType', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
  tokenizerId?: string(name='TokenizerId', position='Body'),
}

model GetPosChEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetPosChEcomResponse = {
  headers: map[string]string(name='headers'),
  body: GetPosChEcomResponseBody(name='body'),
}

async function getPosChEcom(request: GetPosChEcomRequest): GetPosChEcomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPosChEcom', 'POST', '/', 'json', true, 'form', request);
}

model GetPosChGeneralRequest {
  outType?: string(name='OutType', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
  tokenizerId?: string(name='TokenizerId', position='Body'),
}

model GetPosChGeneralResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetPosChGeneralResponse = {
  headers: map[string]string(name='headers'),
  body: GetPosChGeneralResponseBody(name='body'),
}

async function getPosChGeneral(request: GetPosChGeneralRequest): GetPosChGeneralResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPosChGeneral', 'POST', '/', 'json', true, 'form', request);
}

model GetPriceChEcomRequest {
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', maxLength=800, position='Body'),
}

model GetPriceChEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetPriceChEcomResponse = {
  headers: map[string]string(name='headers'),
  body: GetPriceChEcomResponseBody(name='body'),
}

async function getPriceChEcom(request: GetPriceChEcomRequest): GetPriceChEcomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPriceChEcom', 'POST', '/', 'json', true, 'form', request);
}

model GetSaChGeneralRequest {
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
}

model GetSaChGeneralResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetSaChGeneralResponse = {
  headers: map[string]string(name='headers'),
  body: GetSaChGeneralResponseBody(name='body'),
}

async function getSaChGeneral(request: GetSaChGeneralRequest): GetSaChGeneralResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSaChGeneral', 'POST', '/', 'json', true, 'form', request);
}

model GetSaSeaEcomRequest {
  language: string(name='Language', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
}

model GetSaSeaEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetSaSeaEcomResponse = {
  headers: map[string]string(name='headers'),
  body: GetSaSeaEcomResponseBody(name='body'),
}

async function getSaSeaEcom(request: GetSaSeaEcomRequest): GetSaSeaEcomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSaSeaEcom', 'POST', '/', 'json', true, 'form', request);
}

model GetSimilarityChMedicalRequest {
  originQ: string(name='OriginQ', position='Body'),
  originT: string(name='OriginT', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
}

model GetSimilarityChMedicalResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetSimilarityChMedicalResponse = {
  headers: map[string]string(name='headers'),
  body: GetSimilarityChMedicalResponseBody(name='body'),
}

async function getSimilarityChMedical(request: GetSimilarityChMedicalRequest): GetSimilarityChMedicalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSimilarityChMedical', 'POST', '/', 'json', true, 'form', request);
}

model GetSummaryChEcomRequest {
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
}

model GetSummaryChEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetSummaryChEcomResponse = {
  headers: map[string]string(name='headers'),
  body: GetSummaryChEcomResponseBody(name='body'),
}

async function getSummaryChEcom(request: GetSummaryChEcomRequest): GetSummaryChEcomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSummaryChEcom', 'POST', '/', 'json', true, 'form', request);
}

model GetTcChEcomRequest {
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
}

model GetTcChEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetTcChEcomResponse = {
  headers: map[string]string(name='headers'),
  body: GetTcChEcomResponseBody(name='body'),
}

async function getTcChEcom(request: GetTcChEcomRequest): GetTcChEcomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTcChEcom', 'POST', '/', 'json', true, 'form', request);
}

model GetTcChGeneralRequest {
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
}

model GetTcChGeneralResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetTcChGeneralResponse = {
  headers: map[string]string(name='headers'),
  body: GetTcChGeneralResponseBody(name='body'),
}

async function getTcChGeneral(request: GetTcChGeneralRequest): GetTcChGeneralResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTcChGeneral', 'POST', '/', 'json', true, 'form', request);
}

model GetTsChEcomRequest {
  originQ: string(name='OriginQ', position='Body'),
  originT: string(name='OriginT', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  type: string(name='Type', position='Body'),
}

model GetTsChEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetTsChEcomResponse = {
  headers: map[string]string(name='headers'),
  body: GetTsChEcomResponseBody(name='body'),
}

async function getTsChEcom(request: GetTsChEcomRequest): GetTsChEcomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTsChEcom', 'POST', '/', 'json', true, 'form', request);
}

model GetWeChCommentRequest {
  operation?: string(name='Operation', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  size?: string(name='Size', position='Body'),
  text: string(name='Text', position='Body'),
  tokenizerId: string(name='TokenizerId', position='Body'),
  type?: string(name='Type', position='Body'),
}

model GetWeChCommentResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetWeChCommentResponse = {
  headers: map[string]string(name='headers'),
  body: GetWeChCommentResponseBody(name='body'),
}

async function getWeChComment(request: GetWeChCommentRequest): GetWeChCommentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWeChComment', 'POST', '/', 'json', true, 'form', request);
}

model GetWeChEcomRequest {
  operation?: string(name='Operation', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  size?: string(name='Size', position='Body'),
  text: string(name='Text', position='Body'),
  tokenizerId: string(name='TokenizerId', position='Body'),
  type?: string(name='Type', position='Body'),
}

model GetWeChEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetWeChEcomResponse = {
  headers: map[string]string(name='headers'),
  body: GetWeChEcomResponseBody(name='body'),
}

async function getWeChEcom(request: GetWeChEcomRequest): GetWeChEcomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWeChEcom', 'POST', '/', 'json', true, 'form', request);
}

model GetWeChEntertainmentRequest {
  operation?: string(name='Operation', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  size?: string(name='Size', position='Body'),
  text: string(name='Text', position='Body'),
  tokenizerId: string(name='TokenizerId', position='Body'),
  type?: string(name='Type', position='Body'),
}

model GetWeChEntertainmentResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetWeChEntertainmentResponse = {
  headers: map[string]string(name='headers'),
  body: GetWeChEntertainmentResponseBody(name='body'),
}

async function getWeChEntertainment(request: GetWeChEntertainmentRequest): GetWeChEntertainmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWeChEntertainment', 'POST', '/', 'json', true, 'form', request);
}

model GetWeChGeneralRequest {
  operation?: string(name='Operation', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  size?: string(name='Size', position='Body'),
  text: string(name='Text', position='Body'),
  type?: string(name='Type', position='Body'),
}

model GetWeChGeneralResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetWeChGeneralResponse = {
  headers: map[string]string(name='headers'),
  body: GetWeChGeneralResponseBody(name='body'),
}

async function getWeChGeneral(request: GetWeChGeneralRequest): GetWeChGeneralResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWeChGeneral', 'POST', '/', 'json', true, 'form', request);
}

model GetWeChSearchRequest {
  operation?: string(name='Operation', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  size?: string(name='Size', position='Body'),
  text: string(name='Text', position='Body'),
  tokenizerId: string(name='TokenizerId', position='Body'),
  type?: string(name='Type', position='Body'),
}

model GetWeChSearchResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetWeChSearchResponse = {
  headers: map[string]string(name='headers'),
  body: GetWeChSearchResponseBody(name='body'),
}

async function getWeChSearch(request: GetWeChSearchRequest): GetWeChSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWeChSearch', 'POST', '/', 'json', true, 'form', request);
}

model GetWsChGeneralRequest {
  outType?: string(name='OutType', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
  tokenizerId?: string(name='TokenizerId', position='Body'),
}

model GetWsChGeneralResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetWsChGeneralResponse = {
  headers: map[string]string(name='headers'),
  body: GetWsChGeneralResponseBody(name='body'),
}

async function getWsChGeneral(request: GetWsChGeneralRequest): GetWsChGeneralResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWsChGeneral', 'POST', '/', 'json', true, 'form', request);
}

model GetWsCustomizedChEcomCommentRequest {
  outType?: string(name='OutType', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
  tokenizerId?: string(name='TokenizerId', position='Body'),
}

model GetWsCustomizedChEcomCommentResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetWsCustomizedChEcomCommentResponse = {
  headers: map[string]string(name='headers'),
  body: GetWsCustomizedChEcomCommentResponseBody(name='body'),
}

async function getWsCustomizedChEcomComment(request: GetWsCustomizedChEcomCommentRequest): GetWsCustomizedChEcomCommentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWsCustomizedChEcomComment', 'POST', '/', 'json', true, 'form', request);
}

model GetWsCustomizedChEcomContentRequest {
  outType?: string(name='OutType', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
  tokenizerId?: string(name='TokenizerId', position='Body'),
}

model GetWsCustomizedChEcomContentResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetWsCustomizedChEcomContentResponse = {
  headers: map[string]string(name='headers'),
  body: GetWsCustomizedChEcomContentResponseBody(name='body'),
}

async function getWsCustomizedChEcomContent(request: GetWsCustomizedChEcomContentRequest): GetWsCustomizedChEcomContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWsCustomizedChEcomContent', 'POST', '/', 'json', true, 'form', request);
}

model GetWsCustomizedChEcomTitleRequest {
  outType?: string(name='OutType', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
  tokenizerId?: string(name='TokenizerId', position='Body'),
}

model GetWsCustomizedChEcomTitleResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetWsCustomizedChEcomTitleResponse = {
  headers: map[string]string(name='headers'),
  body: GetWsCustomizedChEcomTitleResponseBody(name='body'),
}

async function getWsCustomizedChEcomTitle(request: GetWsCustomizedChEcomTitleRequest): GetWsCustomizedChEcomTitleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWsCustomizedChEcomTitle', 'POST', '/', 'json', true, 'form', request);
}

model GetWsCustomizedChEntertainmentRequest {
  outType?: string(name='OutType', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
  tokenizerId?: string(name='TokenizerId', position='Body'),
}

model GetWsCustomizedChEntertainmentResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetWsCustomizedChEntertainmentResponse = {
  headers: map[string]string(name='headers'),
  body: GetWsCustomizedChEntertainmentResponseBody(name='body'),
}

async function getWsCustomizedChEntertainment(request: GetWsCustomizedChEntertainmentRequest): GetWsCustomizedChEntertainmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWsCustomizedChEntertainment', 'POST', '/', 'json', true, 'form', request);
}

model GetWsCustomizedChGeneralRequest {
  outType?: string(name='OutType', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
  tokenizerId?: string(name='TokenizerId', position='Body'),
}

model GetWsCustomizedChGeneralResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetWsCustomizedChGeneralResponse = {
  headers: map[string]string(name='headers'),
  body: GetWsCustomizedChGeneralResponseBody(name='body'),
}

async function getWsCustomizedChGeneral(request: GetWsCustomizedChGeneralRequest): GetWsCustomizedChGeneralResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWsCustomizedChGeneral', 'POST', '/', 'json', true, 'form', request);
}

model GetWsCustomizedChO2ORequest {
  outType?: string(name='OutType', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
  tokenizerId?: string(name='TokenizerId', position='Body'),
}

model GetWsCustomizedChO2OResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetWsCustomizedChO2OResponse = {
  headers: map[string]string(name='headers'),
  body: GetWsCustomizedChO2OResponseBody(name='body'),
}

async function getWsCustomizedChO2O(request: GetWsCustomizedChO2ORequest): GetWsCustomizedChO2OResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWsCustomizedChO2O', 'POST', '/', 'json', true, 'form', request);
}

model GetWsCustomizedSeaEcomRequest {
  language: string(name='Language', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
}

model GetWsCustomizedSeaEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetWsCustomizedSeaEcomResponse = {
  headers: map[string]string(name='headers'),
  body: GetWsCustomizedSeaEcomResponseBody(name='body'),
}

async function getWsCustomizedSeaEcom(request: GetWsCustomizedSeaEcomRequest): GetWsCustomizedSeaEcomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWsCustomizedSeaEcom', 'POST', '/', 'json', true, 'form', request);
}

model GetWsCustomizedSeaGeneralRequest {
  language: string(name='Language', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
}

model GetWsCustomizedSeaGeneralResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetWsCustomizedSeaGeneralResponse = {
  headers: map[string]string(name='headers'),
  body: GetWsCustomizedSeaGeneralResponseBody(name='body'),
}

async function getWsCustomizedSeaGeneral(request: GetWsCustomizedSeaGeneralRequest): GetWsCustomizedSeaGeneralResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWsCustomizedSeaGeneral', 'POST', '/', 'json', true, 'form', request);
}

model InsertCustomRequest {
  apiId: int32(name='ApiId', minimum=0, maximum=10000000, position='Body'),
  customFileName: string(name='CustomFileName', position='Body'),
  customUrl: string(name='CustomUrl', position='Body'),
  regFileName: string(name='RegFileName', position='Body'),
  regUrl: string(name='RegUrl', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
}

model InsertCustomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model InsertCustomResponse = {
  headers: map[string]string(name='headers'),
  body: InsertCustomResponseBody(name='body'),
}

async function insertCustom(request: InsertCustomRequest): InsertCustomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InsertCustom', 'POST', '/', 'json', true, 'form', request);
}

model OpenAlinlpServiceRequest {
}

model OpenAlinlpServiceResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model OpenAlinlpServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenAlinlpServiceResponseBody(name='body'),
}

async function openAlinlpService(request: OpenAlinlpServiceRequest): OpenAlinlpServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenAlinlpService', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCustomRequest {
  customFileName: string(name='CustomFileName', position='Body'),
  customId: int32(name='CustomId', minimum=0, maximum=10000000, position='Body'),
  customUrl: string(name='CustomUrl', position='Body'),
  regFileName: string(name='RegFileName', position='Body'),
  regUrl: string(name='RegUrl', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
}

model UpdateCustomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model UpdateCustomResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCustomResponseBody(name='body'),
}

async function updateCustom(request: UpdateCustomRequest): UpdateCustomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCustom', 'POST', '/', 'json', true, 'form', request);
}

