/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('alinlp', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ADClockRequest {
  params?: string(name='Params'),
  serviceCode?: string(name='ServiceCode'),
}

model ADClockResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model ADClockResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ADClockResponseBody(name='body'),
}

async function aDClockWithOptions(request: ADClockRequest, runtime: Util.RuntimeOptions): ADClockResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.params)) {
    body['Params'] = request.params;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ADClock',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function aDClock(request: ADClockRequest): ADClockResponse {
  var runtime = new Util.RuntimeOptions{};
  return aDClockWithOptions(request, runtime);
}

model ADMMURequest {
  params?: string(name='Params'),
  serviceCode?: string(name='ServiceCode'),
}

model ADMMUResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model ADMMUResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ADMMUResponseBody(name='body'),
}

async function aDMMUWithOptions(request: ADMMURequest, runtime: Util.RuntimeOptions): ADMMUResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.params)) {
    body['Params'] = request.params;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ADMMU',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function aDMMU(request: ADMMURequest): ADMMUResponse {
  var runtime = new Util.RuntimeOptions{};
  return aDMMUWithOptions(request, runtime);
}

model ADMiniCogRequest {
  params?: string(name='Params'),
  serviceCode?: string(name='ServiceCode'),
}

model ADMiniCogResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model ADMiniCogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ADMiniCogResponseBody(name='body'),
}

async function aDMiniCogWithOptions(request: ADMiniCogRequest, runtime: Util.RuntimeOptions): ADMiniCogResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.params)) {
    body['Params'] = request.params;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ADMiniCog',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function aDMiniCog(request: ADMiniCogRequest): ADMiniCogResponse {
  var runtime = new Util.RuntimeOptions{};
  return aDMiniCogWithOptions(request, runtime);
}

model ADMiniCogResultRequest {
  params?: string(name='Params'),
  serviceCode?: string(name='ServiceCode'),
}

model ADMiniCogResultResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model ADMiniCogResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ADMiniCogResultResponseBody(name='body'),
}

async function aDMiniCogResultWithOptions(request: ADMiniCogResultRequest, runtime: Util.RuntimeOptions): ADMiniCogResultResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.params)) {
    body['Params'] = request.params;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ADMiniCogResult',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function aDMiniCogResult(request: ADMiniCogResultRequest): ADMiniCogResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return aDMiniCogResultWithOptions(request, runtime);
}

model GetBrandChEcomRequest {
  imageUrl?: string(name='ImageUrl'),
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
}

model GetBrandChEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetBrandChEcomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBrandChEcomResponseBody(name='body'),
}

async function getBrandChEcomWithOptions(request: GetBrandChEcomRequest, runtime: Util.RuntimeOptions): GetBrandChEcomResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.imageUrl)) {
    body['ImageUrl'] = request.imageUrl;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetBrandChEcom',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBrandChEcom(request: GetBrandChEcomRequest): GetBrandChEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBrandChEcomWithOptions(request, runtime);
}

model GetCateChEcomRequest {
  imageUrl?: string(name='ImageUrl'),
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
}

model GetCateChEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetCateChEcomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCateChEcomResponseBody(name='body'),
}

async function getCateChEcomWithOptions(request: GetCateChEcomRequest, runtime: Util.RuntimeOptions): GetCateChEcomResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.imageUrl)) {
    body['ImageUrl'] = request.imageUrl;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetCateChEcom',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCateChEcom(request: GetCateChEcomRequest): GetCateChEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCateChEcomWithOptions(request, runtime);
}

model GetCheckDuplicationChMedicalRequest {
  originQ?: string(name='OriginQ'),
  originT?: string(name='OriginT'),
  serviceCode?: string(name='ServiceCode'),
}

model GetCheckDuplicationChMedicalResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetCheckDuplicationChMedicalResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCheckDuplicationChMedicalResponseBody(name='body'),
}

async function getCheckDuplicationChMedicalWithOptions(request: GetCheckDuplicationChMedicalRequest, runtime: Util.RuntimeOptions): GetCheckDuplicationChMedicalResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.originQ)) {
    body['OriginQ'] = request.originQ;
  }
  if (!Util.isUnset(request.originT)) {
    body['OriginT'] = request.originT;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetCheckDuplicationChMedical',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCheckDuplicationChMedical(request: GetCheckDuplicationChMedicalRequest): GetCheckDuplicationChMedicalResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCheckDuplicationChMedicalWithOptions(request, runtime);
}

model GetDiagnosisChMedicalRequest {
  name?: string(name='Name'),
  serviceCode?: string(name='ServiceCode'),
}

model GetDiagnosisChMedicalResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetDiagnosisChMedicalResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDiagnosisChMedicalResponseBody(name='body'),
}

async function getDiagnosisChMedicalWithOptions(request: GetDiagnosisChMedicalRequest, runtime: Util.RuntimeOptions): GetDiagnosisChMedicalResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDiagnosisChMedical',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDiagnosisChMedical(request: GetDiagnosisChMedicalRequest): GetDiagnosisChMedicalResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDiagnosisChMedicalWithOptions(request, runtime);
}

model GetDpChEcomRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
}

model GetDpChEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetDpChEcomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDpChEcomResponseBody(name='body'),
}

async function getDpChEcomWithOptions(request: GetDpChEcomRequest, runtime: Util.RuntimeOptions): GetDpChEcomResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDpChEcom',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDpChEcom(request: GetDpChEcomRequest): GetDpChEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDpChEcomWithOptions(request, runtime);
}

model GetDpChGeneralCTBRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
}

model GetDpChGeneralCTBResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetDpChGeneralCTBResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDpChGeneralCTBResponseBody(name='body'),
}

async function getDpChGeneralCTBWithOptions(request: GetDpChGeneralCTBRequest, runtime: Util.RuntimeOptions): GetDpChGeneralCTBResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDpChGeneralCTB',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDpChGeneralCTB(request: GetDpChGeneralCTBRequest): GetDpChGeneralCTBResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDpChGeneralCTBWithOptions(request, runtime);
}

model GetDpChGeneralStanfordRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
}

model GetDpChGeneralStanfordResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetDpChGeneralStanfordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDpChGeneralStanfordResponseBody(name='body'),
}

async function getDpChGeneralStanfordWithOptions(request: GetDpChGeneralStanfordRequest, runtime: Util.RuntimeOptions): GetDpChGeneralStanfordResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDpChGeneralStanford',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDpChGeneralStanford(request: GetDpChGeneralStanfordRequest): GetDpChGeneralStanfordResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDpChGeneralStanfordWithOptions(request, runtime);
}

model GetEcChGeneralRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
}

model GetEcChGeneralResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetEcChGeneralResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEcChGeneralResponseBody(name='body'),
}

async function getEcChGeneralWithOptions(request: GetEcChGeneralRequest, runtime: Util.RuntimeOptions): GetEcChGeneralResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetEcChGeneral',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEcChGeneral(request: GetEcChGeneralRequest): GetEcChGeneralResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEcChGeneralWithOptions(request, runtime);
}

model GetEcEnGeneralRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
}

model GetEcEnGeneralResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetEcEnGeneralResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEcEnGeneralResponseBody(name='body'),
}

async function getEcEnGeneralWithOptions(request: GetEcEnGeneralRequest, runtime: Util.RuntimeOptions): GetEcEnGeneralResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetEcEnGeneral',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEcEnGeneral(request: GetEcEnGeneralRequest): GetEcEnGeneralResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEcEnGeneralWithOptions(request, runtime);
}

model GetItemPubChEcomRequest {
  imageUrl?: string(name='ImageUrl'),
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
}

model GetItemPubChEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetItemPubChEcomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetItemPubChEcomResponseBody(name='body'),
}

async function getItemPubChEcomWithOptions(request: GetItemPubChEcomRequest, runtime: Util.RuntimeOptions): GetItemPubChEcomResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.imageUrl)) {
    body['ImageUrl'] = request.imageUrl;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetItemPubChEcom',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getItemPubChEcom(request: GetItemPubChEcomRequest): GetItemPubChEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getItemPubChEcomWithOptions(request, runtime);
}

model GetKeywordChEcomRequest {
  apiVersion?: string(name='ApiVersion'),
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
}

model GetKeywordChEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetKeywordChEcomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetKeywordChEcomResponseBody(name='body'),
}

async function getKeywordChEcomWithOptions(request: GetKeywordChEcomRequest, runtime: Util.RuntimeOptions): GetKeywordChEcomResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiVersion)) {
    body['ApiVersion'] = request.apiVersion;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetKeywordChEcom',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getKeywordChEcom(request: GetKeywordChEcomRequest): GetKeywordChEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getKeywordChEcomWithOptions(request, runtime);
}

model GetKeywordEnEcomRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
}

model GetKeywordEnEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetKeywordEnEcomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetKeywordEnEcomResponseBody(name='body'),
}

async function getKeywordEnEcomWithOptions(request: GetKeywordEnEcomRequest, runtime: Util.RuntimeOptions): GetKeywordEnEcomResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetKeywordEnEcom',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getKeywordEnEcom(request: GetKeywordEnEcomRequest): GetKeywordEnEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getKeywordEnEcomWithOptions(request, runtime);
}

model GetMedicineChMedicalRequest {
  factory?: string(name='Factory'),
  name?: string(name='Name'),
  serviceCode?: string(name='ServiceCode'),
  specification?: string(name='Specification'),
  unit?: string(name='Unit'),
}

model GetMedicineChMedicalResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetMedicineChMedicalResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMedicineChMedicalResponseBody(name='body'),
}

async function getMedicineChMedicalWithOptions(request: GetMedicineChMedicalRequest, runtime: Util.RuntimeOptions): GetMedicineChMedicalResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.factory)) {
    body['Factory'] = request.factory;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.specification)) {
    body['Specification'] = request.specification;
  }
  if (!Util.isUnset(request.unit)) {
    body['Unit'] = request.unit;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMedicineChMedical',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMedicineChMedical(request: GetMedicineChMedicalRequest): GetMedicineChMedicalResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMedicineChMedicalWithOptions(request, runtime);
}

model GetNerChEcomRequest {
  lexerId?: string(name='LexerId'),
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
}

model GetNerChEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetNerChEcomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNerChEcomResponseBody(name='body'),
}

async function getNerChEcomWithOptions(request: GetNerChEcomRequest, runtime: Util.RuntimeOptions): GetNerChEcomResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.lexerId)) {
    body['LexerId'] = request.lexerId;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNerChEcom',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNerChEcom(request: GetNerChEcomRequest): GetNerChEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNerChEcomWithOptions(request, runtime);
}

model GetNerChMedicalRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
}

model GetNerChMedicalResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetNerChMedicalResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNerChMedicalResponseBody(name='body'),
}

async function getNerChMedicalWithOptions(request: GetNerChMedicalRequest, runtime: Util.RuntimeOptions): GetNerChMedicalResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNerChMedical',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNerChMedical(request: GetNerChMedicalRequest): GetNerChMedicalResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNerChMedicalWithOptions(request, runtime);
}

model GetNerCustomizedChEcomRequest {
  lexerId?: string(name='LexerId'),
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
}

model GetNerCustomizedChEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetNerCustomizedChEcomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNerCustomizedChEcomResponseBody(name='body'),
}

async function getNerCustomizedChEcomWithOptions(request: GetNerCustomizedChEcomRequest, runtime: Util.RuntimeOptions): GetNerCustomizedChEcomResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.lexerId)) {
    body['LexerId'] = request.lexerId;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNerCustomizedChEcom',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNerCustomizedChEcom(request: GetNerCustomizedChEcomRequest): GetNerCustomizedChEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNerCustomizedChEcomWithOptions(request, runtime);
}

model GetNerCustomizedSeaEcomRequest {
  language?: string(name='Language'),
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
}

model GetNerCustomizedSeaEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetNerCustomizedSeaEcomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNerCustomizedSeaEcomResponseBody(name='body'),
}

async function getNerCustomizedSeaEcomWithOptions(request: GetNerCustomizedSeaEcomRequest, runtime: Util.RuntimeOptions): GetNerCustomizedSeaEcomResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetNerCustomizedSeaEcom',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNerCustomizedSeaEcom(request: GetNerCustomizedSeaEcomRequest): GetNerCustomizedSeaEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNerCustomizedSeaEcomWithOptions(request, runtime);
}

model GetOperationChMedicalRequest {
  name?: string(name='Name'),
  serviceCode?: string(name='ServiceCode'),
}

model GetOperationChMedicalResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetOperationChMedicalResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOperationChMedicalResponseBody(name='body'),
}

async function getOperationChMedicalWithOptions(request: GetOperationChMedicalRequest, runtime: Util.RuntimeOptions): GetOperationChMedicalResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetOperationChMedical',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOperationChMedical(request: GetOperationChMedicalRequest): GetOperationChMedicalResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOperationChMedicalWithOptions(request, runtime);
}

model GetPosChEcomRequest {
  outType?: string(name='OutType'),
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
  tokenizerId?: string(name='TokenizerId'),
}

model GetPosChEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetPosChEcomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPosChEcomResponseBody(name='body'),
}

async function getPosChEcomWithOptions(request: GetPosChEcomRequest, runtime: Util.RuntimeOptions): GetPosChEcomResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.outType)) {
    body['OutType'] = request.outType;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  if (!Util.isUnset(request.tokenizerId)) {
    body['TokenizerId'] = request.tokenizerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetPosChEcom',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPosChEcom(request: GetPosChEcomRequest): GetPosChEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPosChEcomWithOptions(request, runtime);
}

model GetPosChGeneralRequest {
  outType?: string(name='OutType'),
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
  tokenizerId?: string(name='TokenizerId'),
}

model GetPosChGeneralResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetPosChGeneralResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPosChGeneralResponseBody(name='body'),
}

async function getPosChGeneralWithOptions(request: GetPosChGeneralRequest, runtime: Util.RuntimeOptions): GetPosChGeneralResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.outType)) {
    body['OutType'] = request.outType;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  if (!Util.isUnset(request.tokenizerId)) {
    body['TokenizerId'] = request.tokenizerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetPosChGeneral',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPosChGeneral(request: GetPosChGeneralRequest): GetPosChGeneralResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPosChGeneralWithOptions(request, runtime);
}

model GetPriceChEcomRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
}

model GetPriceChEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetPriceChEcomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPriceChEcomResponseBody(name='body'),
}

async function getPriceChEcomWithOptions(request: GetPriceChEcomRequest, runtime: Util.RuntimeOptions): GetPriceChEcomResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetPriceChEcom',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPriceChEcom(request: GetPriceChEcomRequest): GetPriceChEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPriceChEcomWithOptions(request, runtime);
}

model GetSaChGeneralRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
}

model GetSaChGeneralResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetSaChGeneralResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSaChGeneralResponseBody(name='body'),
}

async function getSaChGeneralWithOptions(request: GetSaChGeneralRequest, runtime: Util.RuntimeOptions): GetSaChGeneralResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSaChGeneral',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSaChGeneral(request: GetSaChGeneralRequest): GetSaChGeneralResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSaChGeneralWithOptions(request, runtime);
}

model GetSaSeaEcomRequest {
  language?: string(name='Language'),
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
}

model GetSaSeaEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetSaSeaEcomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSaSeaEcomResponseBody(name='body'),
}

async function getSaSeaEcomWithOptions(request: GetSaSeaEcomRequest, runtime: Util.RuntimeOptions): GetSaSeaEcomResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSaSeaEcom',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSaSeaEcom(request: GetSaSeaEcomRequest): GetSaSeaEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSaSeaEcomWithOptions(request, runtime);
}

model GetSimilarityChMedicalRequest {
  originQ?: string(name='OriginQ'),
  originT?: string(name='OriginT'),
  serviceCode?: string(name='ServiceCode'),
}

model GetSimilarityChMedicalResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetSimilarityChMedicalResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSimilarityChMedicalResponseBody(name='body'),
}

async function getSimilarityChMedicalWithOptions(request: GetSimilarityChMedicalRequest, runtime: Util.RuntimeOptions): GetSimilarityChMedicalResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.originQ)) {
    body['OriginQ'] = request.originQ;
  }
  if (!Util.isUnset(request.originT)) {
    body['OriginT'] = request.originT;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSimilarityChMedical',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSimilarityChMedical(request: GetSimilarityChMedicalRequest): GetSimilarityChMedicalResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSimilarityChMedicalWithOptions(request, runtime);
}

model GetSummaryChEcomRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
}

model GetSummaryChEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetSummaryChEcomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSummaryChEcomResponseBody(name='body'),
}

async function getSummaryChEcomWithOptions(request: GetSummaryChEcomRequest, runtime: Util.RuntimeOptions): GetSummaryChEcomResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSummaryChEcom',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSummaryChEcom(request: GetSummaryChEcomRequest): GetSummaryChEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSummaryChEcomWithOptions(request, runtime);
}

model GetTableQAServiceInfoByIdRequest {
  serviceCode?: string(name='ServiceCode'),
  serviceId?: string(name='ServiceId'),
}

model GetTableQAServiceInfoByIdResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetTableQAServiceInfoByIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTableQAServiceInfoByIdResponseBody(name='body'),
}

async function getTableQAServiceInfoByIdWithOptions(request: GetTableQAServiceInfoByIdRequest, runtime: Util.RuntimeOptions): GetTableQAServiceInfoByIdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.serviceId)) {
    body['ServiceId'] = request.serviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTableQAServiceInfoById',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTableQAServiceInfoById(request: GetTableQAServiceInfoByIdRequest): GetTableQAServiceInfoByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTableQAServiceInfoByIdWithOptions(request, runtime);
}

model GetTcChEcomRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
}

model GetTcChEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetTcChEcomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTcChEcomResponseBody(name='body'),
}

async function getTcChEcomWithOptions(request: GetTcChEcomRequest, runtime: Util.RuntimeOptions): GetTcChEcomResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTcChEcom',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTcChEcom(request: GetTcChEcomRequest): GetTcChEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTcChEcomWithOptions(request, runtime);
}

model GetTcChGeneralRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
}

model GetTcChGeneralResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetTcChGeneralResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTcChGeneralResponseBody(name='body'),
}

async function getTcChGeneralWithOptions(request: GetTcChGeneralRequest, runtime: Util.RuntimeOptions): GetTcChGeneralResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTcChGeneral',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTcChGeneral(request: GetTcChGeneralRequest): GetTcChGeneralResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTcChGeneralWithOptions(request, runtime);
}

model GetTsChEcomRequest {
  originQ?: string(name='OriginQ'),
  originT?: string(name='OriginT'),
  serviceCode?: string(name='ServiceCode'),
  type?: string(name='Type'),
}

model GetTsChEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetTsChEcomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTsChEcomResponseBody(name='body'),
}

async function getTsChEcomWithOptions(request: GetTsChEcomRequest, runtime: Util.RuntimeOptions): GetTsChEcomResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.originQ)) {
    body['OriginQ'] = request.originQ;
  }
  if (!Util.isUnset(request.originT)) {
    body['OriginT'] = request.originT;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTsChEcom',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTsChEcom(request: GetTsChEcomRequest): GetTsChEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTsChEcomWithOptions(request, runtime);
}

model GetWeChCommentRequest {
  operation?: string(name='Operation'),
  serviceCode?: string(name='ServiceCode'),
  size?: string(name='Size'),
  text?: string(name='Text'),
  tokenizerId?: string(name='TokenizerId'),
  type?: string(name='Type'),
}

model GetWeChCommentResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetWeChCommentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWeChCommentResponseBody(name='body'),
}

async function getWeChCommentWithOptions(request: GetWeChCommentRequest, runtime: Util.RuntimeOptions): GetWeChCommentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.operation)) {
    body['Operation'] = request.operation;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  if (!Util.isUnset(request.tokenizerId)) {
    body['TokenizerId'] = request.tokenizerId;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetWeChComment',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getWeChComment(request: GetWeChCommentRequest): GetWeChCommentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWeChCommentWithOptions(request, runtime);
}

model GetWeChEcomRequest {
  operation?: string(name='Operation'),
  serviceCode?: string(name='ServiceCode'),
  size?: string(name='Size'),
  text?: string(name='Text'),
  tokenizerId?: string(name='TokenizerId'),
  type?: string(name='Type'),
}

model GetWeChEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetWeChEcomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWeChEcomResponseBody(name='body'),
}

async function getWeChEcomWithOptions(request: GetWeChEcomRequest, runtime: Util.RuntimeOptions): GetWeChEcomResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.operation)) {
    body['Operation'] = request.operation;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  if (!Util.isUnset(request.tokenizerId)) {
    body['TokenizerId'] = request.tokenizerId;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetWeChEcom',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getWeChEcom(request: GetWeChEcomRequest): GetWeChEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWeChEcomWithOptions(request, runtime);
}

model GetWeChEntertainmentRequest {
  operation?: string(name='Operation'),
  serviceCode?: string(name='ServiceCode'),
  size?: string(name='Size'),
  text?: string(name='Text'),
  tokenizerId?: string(name='TokenizerId'),
  type?: string(name='Type'),
}

model GetWeChEntertainmentResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetWeChEntertainmentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWeChEntertainmentResponseBody(name='body'),
}

async function getWeChEntertainmentWithOptions(request: GetWeChEntertainmentRequest, runtime: Util.RuntimeOptions): GetWeChEntertainmentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.operation)) {
    body['Operation'] = request.operation;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  if (!Util.isUnset(request.tokenizerId)) {
    body['TokenizerId'] = request.tokenizerId;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetWeChEntertainment',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getWeChEntertainment(request: GetWeChEntertainmentRequest): GetWeChEntertainmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWeChEntertainmentWithOptions(request, runtime);
}

model GetWeChGeneralRequest {
  operation?: string(name='Operation'),
  serviceCode?: string(name='ServiceCode'),
  size?: string(name='Size'),
  text?: string(name='Text'),
  type?: string(name='Type'),
}

model GetWeChGeneralResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetWeChGeneralResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWeChGeneralResponseBody(name='body'),
}

async function getWeChGeneralWithOptions(request: GetWeChGeneralRequest, runtime: Util.RuntimeOptions): GetWeChGeneralResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.operation)) {
    body['Operation'] = request.operation;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetWeChGeneral',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getWeChGeneral(request: GetWeChGeneralRequest): GetWeChGeneralResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWeChGeneralWithOptions(request, runtime);
}

model GetWeChSearchRequest {
  operation?: string(name='Operation'),
  serviceCode?: string(name='ServiceCode'),
  size?: string(name='Size'),
  text?: string(name='Text'),
  tokenizerId?: string(name='TokenizerId'),
  type?: string(name='Type'),
}

model GetWeChSearchResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetWeChSearchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWeChSearchResponseBody(name='body'),
}

async function getWeChSearchWithOptions(request: GetWeChSearchRequest, runtime: Util.RuntimeOptions): GetWeChSearchResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.operation)) {
    body['Operation'] = request.operation;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.size)) {
    body['Size'] = request.size;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  if (!Util.isUnset(request.tokenizerId)) {
    body['TokenizerId'] = request.tokenizerId;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetWeChSearch',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getWeChSearch(request: GetWeChSearchRequest): GetWeChSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWeChSearchWithOptions(request, runtime);
}

model GetWsChGeneralRequest {
  outType?: string(name='OutType'),
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
  tokenizerId?: string(name='TokenizerId'),
}

model GetWsChGeneralResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetWsChGeneralResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWsChGeneralResponseBody(name='body'),
}

async function getWsChGeneralWithOptions(request: GetWsChGeneralRequest, runtime: Util.RuntimeOptions): GetWsChGeneralResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.outType)) {
    body['OutType'] = request.outType;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  if (!Util.isUnset(request.tokenizerId)) {
    body['TokenizerId'] = request.tokenizerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetWsChGeneral',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getWsChGeneral(request: GetWsChGeneralRequest): GetWsChGeneralResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWsChGeneralWithOptions(request, runtime);
}

model GetWsCustomizedChEcomCommentRequest {
  outType?: string(name='OutType'),
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
  tokenizerId?: string(name='TokenizerId'),
}

model GetWsCustomizedChEcomCommentResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetWsCustomizedChEcomCommentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWsCustomizedChEcomCommentResponseBody(name='body'),
}

async function getWsCustomizedChEcomCommentWithOptions(request: GetWsCustomizedChEcomCommentRequest, runtime: Util.RuntimeOptions): GetWsCustomizedChEcomCommentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.outType)) {
    body['OutType'] = request.outType;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  if (!Util.isUnset(request.tokenizerId)) {
    body['TokenizerId'] = request.tokenizerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetWsCustomizedChEcomComment',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getWsCustomizedChEcomComment(request: GetWsCustomizedChEcomCommentRequest): GetWsCustomizedChEcomCommentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWsCustomizedChEcomCommentWithOptions(request, runtime);
}

model GetWsCustomizedChEcomContentRequest {
  outType?: string(name='OutType'),
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
  tokenizerId?: string(name='TokenizerId'),
}

model GetWsCustomizedChEcomContentResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetWsCustomizedChEcomContentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWsCustomizedChEcomContentResponseBody(name='body'),
}

async function getWsCustomizedChEcomContentWithOptions(request: GetWsCustomizedChEcomContentRequest, runtime: Util.RuntimeOptions): GetWsCustomizedChEcomContentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.outType)) {
    body['OutType'] = request.outType;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  if (!Util.isUnset(request.tokenizerId)) {
    body['TokenizerId'] = request.tokenizerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetWsCustomizedChEcomContent',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getWsCustomizedChEcomContent(request: GetWsCustomizedChEcomContentRequest): GetWsCustomizedChEcomContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWsCustomizedChEcomContentWithOptions(request, runtime);
}

model GetWsCustomizedChEcomTitleRequest {
  outType?: string(name='OutType'),
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
  tokenizerId?: string(name='TokenizerId'),
}

model GetWsCustomizedChEcomTitleResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetWsCustomizedChEcomTitleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWsCustomizedChEcomTitleResponseBody(name='body'),
}

async function getWsCustomizedChEcomTitleWithOptions(request: GetWsCustomizedChEcomTitleRequest, runtime: Util.RuntimeOptions): GetWsCustomizedChEcomTitleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.outType)) {
    body['OutType'] = request.outType;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  if (!Util.isUnset(request.tokenizerId)) {
    body['TokenizerId'] = request.tokenizerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetWsCustomizedChEcomTitle',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getWsCustomizedChEcomTitle(request: GetWsCustomizedChEcomTitleRequest): GetWsCustomizedChEcomTitleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWsCustomizedChEcomTitleWithOptions(request, runtime);
}

model GetWsCustomizedChEntertainmentRequest {
  outType?: string(name='OutType'),
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
  tokenizerId?: string(name='TokenizerId'),
}

model GetWsCustomizedChEntertainmentResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetWsCustomizedChEntertainmentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWsCustomizedChEntertainmentResponseBody(name='body'),
}

async function getWsCustomizedChEntertainmentWithOptions(request: GetWsCustomizedChEntertainmentRequest, runtime: Util.RuntimeOptions): GetWsCustomizedChEntertainmentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.outType)) {
    body['OutType'] = request.outType;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  if (!Util.isUnset(request.tokenizerId)) {
    body['TokenizerId'] = request.tokenizerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetWsCustomizedChEntertainment',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getWsCustomizedChEntertainment(request: GetWsCustomizedChEntertainmentRequest): GetWsCustomizedChEntertainmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWsCustomizedChEntertainmentWithOptions(request, runtime);
}

model GetWsCustomizedChGeneralRequest {
  outType?: string(name='OutType', example='a'),
  serviceCode?: string(name='ServiceCode', example='a'),
  text?: string(name='Text', example='a'),
  tokenizerId?: string(name='TokenizerId', example='a'),
}

model GetWsCustomizedChGeneralResponseBody = {
  data?: string(name='Data', example='a'),
  requestId?: string(name='RequestId', example='a'),
}

model GetWsCustomizedChGeneralResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWsCustomizedChGeneralResponseBody(name='body'),
}

async function getWsCustomizedChGeneralWithOptions(request: GetWsCustomizedChGeneralRequest, runtime: Util.RuntimeOptions): GetWsCustomizedChGeneralResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.outType)) {
    body['OutType'] = request.outType;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  if (!Util.isUnset(request.tokenizerId)) {
    body['TokenizerId'] = request.tokenizerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetWsCustomizedChGeneral',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getWsCustomizedChGeneral(request: GetWsCustomizedChGeneralRequest): GetWsCustomizedChGeneralResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWsCustomizedChGeneralWithOptions(request, runtime);
}

model GetWsCustomizedChO2ORequest {
  outType?: string(name='OutType'),
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
  tokenizerId?: string(name='TokenizerId'),
}

model GetWsCustomizedChO2OResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetWsCustomizedChO2OResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWsCustomizedChO2OResponseBody(name='body'),
}

async function getWsCustomizedChO2OWithOptions(request: GetWsCustomizedChO2ORequest, runtime: Util.RuntimeOptions): GetWsCustomizedChO2OResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.outType)) {
    body['OutType'] = request.outType;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  if (!Util.isUnset(request.tokenizerId)) {
    body['TokenizerId'] = request.tokenizerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetWsCustomizedChO2O',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getWsCustomizedChO2O(request: GetWsCustomizedChO2ORequest): GetWsCustomizedChO2OResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWsCustomizedChO2OWithOptions(request, runtime);
}

model GetWsCustomizedSeaEcomRequest {
  language?: string(name='Language'),
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
}

model GetWsCustomizedSeaEcomResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetWsCustomizedSeaEcomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWsCustomizedSeaEcomResponseBody(name='body'),
}

async function getWsCustomizedSeaEcomWithOptions(request: GetWsCustomizedSeaEcomRequest, runtime: Util.RuntimeOptions): GetWsCustomizedSeaEcomResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetWsCustomizedSeaEcom',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getWsCustomizedSeaEcom(request: GetWsCustomizedSeaEcomRequest): GetWsCustomizedSeaEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWsCustomizedSeaEcomWithOptions(request, runtime);
}

model GetWsCustomizedSeaGeneralRequest {
  language?: string(name='Language'),
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
}

model GetWsCustomizedSeaGeneralResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetWsCustomizedSeaGeneralResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWsCustomizedSeaGeneralResponseBody(name='body'),
}

async function getWsCustomizedSeaGeneralWithOptions(request: GetWsCustomizedSeaGeneralRequest, runtime: Util.RuntimeOptions): GetWsCustomizedSeaGeneralResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetWsCustomizedSeaGeneral',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getWsCustomizedSeaGeneral(request: GetWsCustomizedSeaGeneralRequest): GetWsCustomizedSeaGeneralResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWsCustomizedSeaGeneralWithOptions(request, runtime);
}

model OpenAlinlpServiceResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model OpenAlinlpServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenAlinlpServiceResponseBody(name='body'),
}

async function openAlinlpServiceWithOptions(runtime: Util.RuntimeOptions): OpenAlinlpServiceResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'OpenAlinlpService',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openAlinlpService(): OpenAlinlpServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openAlinlpServiceWithOptions(runtime);
}

model RequestTableQARequest {
  params?: string(name='Params'),
  serviceCode?: string(name='ServiceCode'),
}

model RequestTableQAResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model RequestTableQAResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RequestTableQAResponseBody(name='body'),
}

async function requestTableQAWithOptions(request: RequestTableQARequest, runtime: Util.RuntimeOptions): RequestTableQAResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.params)) {
    body['Params'] = request.params;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RequestTableQA',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function requestTableQA(request: RequestTableQARequest): RequestTableQAResponse {
  var runtime = new Util.RuntimeOptions{};
  return requestTableQAWithOptions(request, runtime);
}

model RequestTableQAOnlineRequest {
  botId?: string(name='BotId'),
  params?: string(name='Params'),
  question?: string(name='Question'),
  serviceCode?: string(name='ServiceCode'),
}

model RequestTableQAOnlineResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model RequestTableQAOnlineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RequestTableQAOnlineResponseBody(name='body'),
}

async function requestTableQAOnlineWithOptions(request: RequestTableQAOnlineRequest, runtime: Util.RuntimeOptions): RequestTableQAOnlineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.botId)) {
    body['BotId'] = request.botId;
  }
  if (!Util.isUnset(request.params)) {
    body['Params'] = request.params;
  }
  if (!Util.isUnset(request.question)) {
    body['Question'] = request.question;
  }
  if (!Util.isUnset(request.serviceCode)) {
    body['ServiceCode'] = request.serviceCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RequestTableQAOnline',
    version = '2020-06-29',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function requestTableQAOnline(request: RequestTableQAOnlineRequest): RequestTableQAOnlineResponse {
  var runtime = new Util.RuntimeOptions{};
  return requestTableQAOnlineWithOptions(request, runtime);
}

