/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Workorder';
  @version = '2020-12-10';
  @endpointRule = 'central';
  @endpointMap = {
    'ap-northeast-1' = 'workorder.ap-northeast-1.aliyuncs.com',
    'ap-southeast-1' = 'workorder.ap-southeast-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CategoryParam {
  categoryId?: long(name='CategoryId'),
  categoryName?: string(name='CategoryName'),
  isSelectFromDialog?: boolean(name='IsSelectFromDialog'),
  productId?: long(name='ProductId'),
  productName?: string(name='ProductName'),
}

model DialogBaseBody {
  attachments?: [ 
    {
      name?: string(name='Name'),
      size?: string(name='Size'),
      type?: string(name='Type'),
      url?: string(name='Url'),
    }
  ](name='Attachments'),
  channelCode?: string(name='ChannelCode'),
  createTime?: long(name='CreateTime'),
  dataInfo?: {
    bizId?: string(name='BizId'),
    bizType?: int32(name='BizType'),
    component?: [ map[string]any ](name='Component'),
    content?: string(name='Content'),
    contentDesensitized?: string(name='ContentDesensitized'),
    editable?: int32(name='Editable'),
    props?: [ map[string]any ](name='Props'),
    schema?: string(name='Schema'),
    schemaId?: long(name='SchemaId'),
    serviceChannel?: string(name='ServiceChannel'),
    title?: string(name='Title'),
    values?: map[string]any(name='Values'),
  }(name='DataInfo'),
  dialogId?: long(name='DialogId'),
  footerInfo?: {
    ext?: map[string]any(name='Ext'),
    schema?: string(name='Schema'),
  }(name='FooterInfo'),
  hitWords?: [ string ](name='HitWords'),
  modifiedTime?: long(name='ModifiedTime'),
  referInfo?: DialogBaseBody(name='ReferInfo'),
  stage?: int32(name='Stage'),
  status?: int32(name='Status'),
  ticketId?: string(name='TicketId'),
  ticketStatus?: int32(name='TicketStatus'),
  timestamp?: long(name='Timestamp'),
  tip?: string(name='Tip'),
  type?: int32(name='Type'),
  userInfo?: {
    avatar?: string(name='Avatar'),
    role?: int32(name='Role'),
    userId?: string(name='UserId'),
    userName?: string(name='UserName'),
  }(name='UserInfo'),
}

model GetTicketTemplateRequest {
  categoryId: long(name='CategoryId', description='This parameter is required.', minimum=0, maximum=99999999, position='Query'),
  cna?: string(name='Cna', position='Query'),
  distributionChannel?: string(name='DistributionChannel', position='Query'),
  referrer?: string(name='Referrer', position='Query'),
  subDistributionChannel?: string(name='SubDistributionChannel', position='Query'),
  xGatewayExtendInfo?: string(name='XGatewayExtendInfo', position='Query'),
}

model GetTicketTemplateResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model GetTicketTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTicketTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTicketTemplate  GetTicketTemplateRequest
  * @return GetTicketTemplateResponse
 */
async function getTicketTemplate(request: GetTicketTemplateRequest): GetTicketTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTicketTemplate', 'POST', '/', 'json', false, 'json', request);
}

model IsFirstBbsTicketRequest {
  cna?: string(name='Cna', position='Query'),
  distributionChannel?: string(name='DistributionChannel', position='Query'),
  referrer?: string(name='Referrer', position='Query'),
  subDistributionChannel?: string(name='SubDistributionChannel', position='Query'),
  xGatewayExtendInfo?: string(name='XGatewayExtendInfo', position='Query'),
}

model IsFirstBbsTicketResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model IsFirstBbsTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IsFirstBbsTicketResponseBody(name='body'),
}

/**
  * @param request  the request parameters of IsFirstBbsTicket  IsFirstBbsTicketRequest
  * @return IsFirstBbsTicketResponse
 */
async function isFirstBbsTicket(request: IsFirstBbsTicketRequest): IsFirstBbsTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'IsFirstBbsTicket', 'POST', '/', 'json', false, 'json', request);
}

model SuggestCategoryRequest {
  cna?: string(name='Cna', position='Query'),
  content?: string(name='Content', position='Query'),
  distributionChannel?: string(name='DistributionChannel', position='Query'),
  referrer?: string(name='Referrer', position='Query'),
  subDistributionChannel?: string(name='SubDistributionChannel', position='Query'),
  ticketId?: string(name='TicketId', position='Query'),
  topN?: int32(name='TopN', position='Query'),
  useHotSuggestCatchAll?: boolean(name='UseHotSuggestCatchAll', position='Query'),
  xGatewayExtendInfo?: string(name='XGatewayExtendInfo', position='Query'),
}

model SuggestCategoryResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code'),
  data?: [  map[string]any ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SuggestCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SuggestCategoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SuggestCategory  SuggestCategoryRequest
  * @return SuggestCategoryResponse
 */
async function suggestCategory(request: SuggestCategoryRequest): SuggestCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SuggestCategory', 'POST', '/', 'json', false, 'json', request);
}

