/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Workorder';
  @version = '2020-12-10';
  @endpointRule = 'central';
  @endpointMap = {
    ap-northeast-1 = 'workorder.ap-northeast-1.aliyuncs.com',
    ap-southeast-1 = 'workorder.ap-southeast-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CategoryParam {
  categoryId?: long(name='CategoryId'),
  categoryName?: string(name='CategoryName'),
  isSelectFromDialog?: boolean(name='IsSelectFromDialog'),
  productId?: long(name='ProductId'),
  productName?: string(name='ProductName'),
}

model GetTicketTemplateRequest {
  categoryId: long(name='CategoryId', minimum=0, maximum=99999999, position='Query'),
}

model GetTicketTemplateResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model GetTicketTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTicketTemplateResponseBody(name='body'),
}

async function getTicketTemplate(request: GetTicketTemplateRequest): GetTicketTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTicketTemplate', 'POST', '/', 'json', false, 'json', request);
}

model IsFirstBbsTicketRequest {
}

model IsFirstBbsTicketResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model IsFirstBbsTicketResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: IsFirstBbsTicketResponseBody(name='body'),
}

async function isFirstBbsTicket(request: IsFirstBbsTicketRequest): IsFirstBbsTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'IsFirstBbsTicket', 'POST', '/', 'json', false, 'json', request);
}

model SuggestCategoryRequest {
  content?: string(name='Content', position='Query'),
  ticketId?: string(name='TicketId', position='Query'),
  topN?: int32(name='TopN', position='Query'),
  useHotSuggestCatchAll?: boolean(name='UseHotSuggestCatchAll', position='Query'),
}

model SuggestCategoryResponseBody = {
  code?: string(name='Code'),
  data?: [  map[string]any ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SuggestCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SuggestCategoryResponseBody(name='body'),
}

async function suggestCategory(request: SuggestCategoryRequest): SuggestCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SuggestCategory', 'POST', '/', 'json', false, 'json', request);
}

