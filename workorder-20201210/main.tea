/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  @endpointMap = {
    ap-northeast-1 = 'workorder.ap-northeast-1.aliyuncs.com',
    ap-southeast-1 = 'workorder.ap-southeast-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('workorder', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CategoryParam {
  categoryId?: long(name='CategoryId'),
  categoryName?: string(name='CategoryName'),
  isSelectFromDialog?: boolean(name='IsSelectFromDialog'),
  productId?: long(name='ProductId'),
  productName?: string(name='ProductName'),
}

model GetTicketTemplateRequest {
  categoryId?: long(name='CategoryId'),
}

model GetTicketTemplateResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model GetTicketTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTicketTemplateResponseBody(name='body'),
}

async function getTicketTemplateWithOptions(request: GetTicketTemplateRequest, runtime: Util.RuntimeOptions): GetTicketTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTicketTemplate',
    version = '2020-12-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTicketTemplate(request: GetTicketTemplateRequest): GetTicketTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTicketTemplateWithOptions(request, runtime);
}

model IsFirstBbsTicketResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model IsFirstBbsTicketResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: IsFirstBbsTicketResponseBody(name='body'),
}

async function isFirstBbsTicketWithOptions(runtime: Util.RuntimeOptions): IsFirstBbsTicketResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'IsFirstBbsTicket',
    version = '2020-12-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function isFirstBbsTicket(): IsFirstBbsTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return isFirstBbsTicketWithOptions(runtime);
}

model SuggestCategoryRequest {
  content?: string(name='Content'),
  ticketId?: string(name='TicketId'),
  topN?: int32(name='TopN'),
  useHotSuggestCatchAll?: boolean(name='UseHotSuggestCatchAll'),
}

model SuggestCategoryResponseBody = {
  code?: string(name='Code'),
  data?: [  map[string]any ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SuggestCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SuggestCategoryResponseBody(name='body'),
}

async function suggestCategoryWithOptions(request: SuggestCategoryRequest, runtime: Util.RuntimeOptions): SuggestCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.ticketId)) {
    query['TicketId'] = request.ticketId;
  }
  if (!Util.isUnset(request.topN)) {
    query['TopN'] = request.topN;
  }
  if (!Util.isUnset(request.useHotSuggestCatchAll)) {
    query['UseHotSuggestCatchAll'] = request.useHotSuggestCatchAll;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SuggestCategory',
    version = '2020-12-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function suggestCategory(request: SuggestCategoryRequest): SuggestCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return suggestCategoryWithOptions(request, runtime);
}

