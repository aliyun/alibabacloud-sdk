/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'et-industry-openapi';
  @version = '2020-08-24';
  @endpointRule = 'regional';
  @endpointMap = {
    'cn-hangzhou' = 'et-industry.cn-hangzhou.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model GetMqttConnectRequest {
  request?: string(name='Request', position='Body'),
}

model GetMqttConnectResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: string(name='Code'),
  data?: {
    accessKey?: string(name='AccessKey'),
    clientId?: string(name='ClientId'),
    expireTime?: long(name='ExpireTime'),
    instanceId?: string(name='InstanceId'),
    qosLevel?: int32(name='QosLevel'),
    serverUri?: string(name='ServerUri'),
    token?: string(name='Token'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMqttConnectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMqttConnectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMqttConnect  GetMqttConnectRequest
  * @return GetMqttConnectResponse
 */
async function getMqttConnect(request: GetMqttConnectRequest): GetMqttConnectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMqttConnect', 'POST', '/api/igate/collaboration/pop/getmqttconnect', 'json', true, 'form', request);
}

model GetNonceRequest {
  request?: string(name='Request', position='Body'),
}

model GetNonceResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: string(name='Code'),
  data?: {
    expiresIn?: long(name='ExpiresIn'),
    nonce?: string(name='Nonce'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetNonceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNonceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetNonce  GetNonceRequest
  * @return GetNonceResponse
 */
async function getNonce(request: GetNonceRequest): GetNonceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetNonce', 'POST', '/api/igate/collaboration/pop/getnonce', 'json', true, 'form', request);
}

model ListMeasurePointListByNodeCodePageRequest {
  request?: string(name='Request', position='Body'),
}

model ListMeasurePointListByNodeCodePageResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: string(name='Code'),
  data?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    dataList?: [ 
      {
        acqFreq?: string(name='AcqFreq'),
        alarmAttribute?: string(name='AlarmAttribute'),
        alarmLevel?: string(name='AlarmLevel'),
        calcAttribute?: string(name='CalcAttribute'),
        calcFormula?: string(name='CalcFormula'),
        calcType?: string(name='CalcType'),
        code?: string(name='Code'),
        createUser?: string(name='CreateUser'),
        dataSourceId?: string(name='DataSourceId'),
        dataType?: string(name='DataType'),
        description?: string(name='Description'),
        errMsgDetail?: string(name='ErrMsgDetail'),
        fullName?: string(name='FullName'),
        gmtCreate?: long(name='GmtCreate'),
        gmtModify?: long(name='GmtModify'),
        id?: int32(name='Id'),
        initValue?: string(name='InitValue'),
        isEnable?: string(name='IsEnable'),
        lastUploadTime?: string(name='LastUploadTime'),
        latestValue?: string(name='LatestValue'),
        lowerLimit?: string(name='LowerLimit'),
        measurePointState?: string(name='MeasurePointState'),
        modifyUser?: string(name='ModifyUser'),
        name?: string(name='Name'),
        nodeCode?: string(name='NodeCode'),
        nodeId?: int32(name='NodeId'),
        nodeName?: string(name='NodeName'),
        parentFullName?: string(name='ParentFullName'),
        payLoad?: string(name='PayLoad'),
        protocolConfig?: string(name='ProtocolConfig'),
        sourcePoint?: string(name='SourcePoint'),
        tenantCode?: string(name='TenantCode'),
        time?: string(name='Time'),
        type?: string(name='Type'),
        unit?: string(name='Unit'),
        upperLimit?: string(name='UpperLimit'),
      }
    ](name='DataList'),
    totalPage?: int32(name='TotalPage'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListMeasurePointListByNodeCodePageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMeasurePointListByNodeCodePageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMeasurePointListByNodeCodePage  ListMeasurePointListByNodeCodePageRequest
  * @return ListMeasurePointListByNodeCodePageResponse
 */
async function listMeasurePointListByNodeCodePage(request: ListMeasurePointListByNodeCodePageRequest): ListMeasurePointListByNodeCodePageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMeasurePointListByNodeCodePage', 'POST', '/api/igate/node/pop/measurepointlistbynodecodepage', 'json', true, 'form', request);
}

model MultiFieldBatchUploadRequest {
  body?: map[string]any(name='body', position='Body'),
}

model MultiFieldBatchUploadResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: string(name='Code'),
  data?: {
    count?: long(name='Count'),
    message?: [ 
      {
        errorMsg?: string(name='ErrorMsg'),
        measurePoint?: string(name='MeasurePoint'),
        node?: string(name='Node'),
      }
    ](name='Message'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model MultiFieldBatchUploadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MultiFieldBatchUploadResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MultiFieldBatchUpload  MultiFieldBatchUploadRequest
  * @return MultiFieldBatchUploadResponse
 */
async function multiFieldBatchUpload(request: MultiFieldBatchUploadRequest): MultiFieldBatchUploadResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'MultiFieldBatchUpload', 'POST', '/api/igate/timeseries/upload/pop/multifieldbatchv2', 'json', false, 'json', request);
}

model MultiSourcePointBatchUploadRequest {
  body?: map[string]any(name='body', position='Body'),
}

model MultiSourcePointBatchUploadResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: string(name='Code'),
  data?: {
    count?: long(name='Count'),
    message?: [ 
      {
        errorMsg?: string(name='ErrorMsg'),
        node?: string(name='Node'),
        sourcePoint?: string(name='SourcePoint'),
      }
    ](name='Message'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model MultiSourcePointBatchUploadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MultiSourcePointBatchUploadResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MultiSourcePointBatchUpload  MultiSourcePointBatchUploadRequest
  * @return MultiSourcePointBatchUploadResponse
 */
async function multiSourcePointBatchUpload(request: MultiSourcePointBatchUploadRequest): MultiSourcePointBatchUploadResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'MultiSourcePointBatchUpload', 'POST', '/api/igate/timeseries/upload/pop/sourcepointbatchv2', 'json', false, 'json', request);
}

model QueryFieldLatestBySourcePointRequest {
  request?: string(name='Request', position='Body'),
}

model QueryFieldLatestBySourcePointResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: string(name='Code'),
  data?: [ 
    {
      measurePoint?: string(name='MeasurePoint'),
      node?: string(name='Node'),
      sourcePoint?: string(name='SourcePoint'),
      valueType?: string(name='ValueType'),
      values?: [ 
        {
          eventTime?: string(name='EventTime'),
          processTime?: string(name='ProcessTime'),
          quality?: int32(name='Quality'),
          sampleType?: string(name='SampleType'),
          time?: long(name='Time'),
          timestamp?: long(name='Timestamp'),
          value?: string(name='Value'),
        }
      ](name='Values'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryFieldLatestBySourcePointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryFieldLatestBySourcePointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryFieldLatestBySourcePoint  QueryFieldLatestBySourcePointRequest
  * @return QueryFieldLatestBySourcePointResponse
 */
async function queryFieldLatestBySourcePoint(request: QueryFieldLatestBySourcePointRequest): QueryFieldLatestBySourcePointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryFieldLatestBySourcePoint', 'POST', '/api/igate/timeseries/query/pop/multifieldlatestbysourcepoint', 'json', true, 'form', request);
}

model QueryIndustryDeviceDataRequest {
  request?: string(name='Request', position='Body'),
}

model QueryIndustryDeviceDataResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: string(name='Code'),
  data?: [ 
    {
      measurePoint?: string(name='MeasurePoint'),
      node?: string(name='Node'),
      valueType?: string(name='ValueType'),
      values?: [ 
        {
          eventTime?: string(name='EventTime'),
          processTime?: string(name='ProcessTime'),
          quality?: int32(name='Quality'),
          time?: long(name='Time'),
          timeStamp?: long(name='TimeStamp'),
          value?: string(name='Value'),
        }
      ](name='Values'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryIndustryDeviceDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryIndustryDeviceDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryIndustryDeviceData  QueryIndustryDeviceDataRequest
  * @return QueryIndustryDeviceDataResponse
 */
async function queryIndustryDeviceData(request: QueryIndustryDeviceDataRequest): QueryIndustryDeviceDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryIndustryDeviceData', 'POST', '/api/igate/timeseries/query/pop/multifieldlatest', 'json', true, 'form', request);
}

model QueryIndustryDeviceLimitsDataRequest {
  request?: string(name='Request', position='Body'),
}

model QueryIndustryDeviceLimitsDataResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: string(name='Code'),
  data?: [ 
    {
      measurePoint?: string(name='MeasurePoint'),
      node?: string(name='Node'),
      valueType?: string(name='ValueType'),
      values?: [ 
        {
          eventTime?: string(name='EventTime'),
          processTime?: string(name='ProcessTime'),
          quality?: int32(name='Quality'),
          time?: long(name='Time'),
          timeStamp?: long(name='TimeStamp'),
          value?: string(name='Value'),
        }
      ](name='Values'),
    }
  ](name='Data'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryIndustryDeviceLimitsDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryIndustryDeviceLimitsDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryIndustryDeviceLimitsData  QueryIndustryDeviceLimitsDataRequest
  * @return QueryIndustryDeviceLimitsDataResponse
 */
async function queryIndustryDeviceLimitsData(request: QueryIndustryDeviceLimitsDataRequest): QueryIndustryDeviceLimitsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryIndustryDeviceLimitsData', 'POST', '/api/igate/timeseries/query/pop/multifieldrange', 'json', true, 'form', request);
}

model QueryIndustryDeviceStatusDataRequest {
  request?: string(name='Request', position='Body'),
}

model QueryIndustryDeviceStatusDataResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: string(name='Code'),
  data?: [ 
    {
      measurePoint?: string(name='MeasurePoint'),
      node?: string(name='Node'),
      valueType?: string(name='ValueType'),
      values?: [  map[string]any ](name='Values'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryIndustryDeviceStatusDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryIndustryDeviceStatusDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryIndustryDeviceStatusData  QueryIndustryDeviceStatusDataRequest
  * @return QueryIndustryDeviceStatusDataResponse
 */
async function queryIndustryDeviceStatusData(request: QueryIndustryDeviceStatusDataRequest): QueryIndustryDeviceStatusDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryIndustryDeviceStatusData', 'POST', '/api/igate/timeseries/query/pop/multifieldrangestatus', 'json', true, 'form', request);
}

model SourcePointBatchRequest {
  request?: string(name='Request', position='Body'),
}

model SourcePointBatchResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: string(name='Code'),
  data?: {
    count?: int32(name='Count'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SourcePointBatchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SourcePointBatchResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SourcePointBatch  SourcePointBatchRequest
  * @return SourcePointBatchResponse
 */
async function sourcePointBatch(request: SourcePointBatchRequest): SourcePointBatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SourcePointBatch', 'POST', '/api/igate/timeseries/upload/pop/sourcepointbatch', 'json', true, 'form', request);
}

model UploadIndustryDeviceDataRequest {
  request?: string(name='Request', position='Body'),
}

model UploadIndustryDeviceDataResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  code?: string(name='Code'),
  data?: {
    count?: int32(name='Count'),
    message?: [ 
      {
        errorMsg?: string(name='ErrorMsg'),
        measurePoint?: string(name='MeasurePoint'),
        node?: string(name='Node'),
      }
    ](name='Message'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UploadIndustryDeviceDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadIndustryDeviceDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UploadIndustryDeviceData  UploadIndustryDeviceDataRequest
  * @return UploadIndustryDeviceDataResponse
 */
async function uploadIndustryDeviceData(request: UploadIndustryDeviceDataRequest): UploadIndustryDeviceDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UploadIndustryDeviceData', 'POST', '/api/igate/timeseries/upload/pop/multifieldbatch', 'json', true, 'form', request);
}

