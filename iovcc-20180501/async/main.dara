/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'iovcc';
  @version = '2018-05-01';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddUploadedFunctionFileInfoRequest {
  fileName: string(name='FileName', position='Query'),
  objectKey: string(name='ObjectKey', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model AddUploadedFunctionFileInfoResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddUploadedFunctionFileInfoResponse = {
  headers: map[string]string(name='headers'),
  body: AddUploadedFunctionFileInfoResponseBody(name='body'),
}

async function addUploadedFunctionFileInfo(request: AddUploadedFunctionFileInfoRequest): AddUploadedFunctionFileInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUploadedFunctionFileInfo', 'POST', '/', 'json', false, 'json', request);
}

model AddVersionBlackDevicesRequest {
  deviceIdType: string(name='DeviceIdType', position='Query'),
  deviceIds: string(name='DeviceIds', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  versionId: string(name='VersionId', position='Query'),
  versionType: string(name='VersionType', position='Query'),
}

model AddVersionBlackDevicesResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddVersionBlackDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: AddVersionBlackDevicesResponseBody(name='body'),
}

async function addVersionBlackDevices(request: AddVersionBlackDevicesRequest): AddVersionBlackDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddVersionBlackDevices', 'POST', '/', 'json', false, 'json', request);
}

model AddVersionGroupDevicesRequest {
  deviceGroupId: string(name='DeviceGroupId', position='Query'),
  deviceIdType: string(name='DeviceIdType', position='Query'),
  deviceIds: string(name='DeviceIds', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model AddVersionGroupDevicesResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddVersionGroupDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: AddVersionGroupDevicesResponseBody(name='body'),
}

async function addVersionGroupDevices(request: AddVersionGroupDevicesRequest): AddVersionGroupDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddVersionGroupDevices', 'POST', '/', 'json', false, 'json', request);
}

model AddVersionWhiteDevicesRequest {
  deviceIdType: string(name='DeviceIdType', position='Query'),
  deviceIds: string(name='DeviceIds', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  versionId: string(name='VersionId', position='Query'),
  versionType: string(name='VersionType', position='Query'),
}

model AddVersionWhiteDevicesResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddVersionWhiteDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: AddVersionWhiteDevicesResponseBody(name='body'),
}

async function addVersionWhiteDevices(request: AddVersionWhiteDevicesRequest): AddVersionWhiteDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddVersionWhiteDevices', 'POST', '/', 'json', false, 'json', request);
}

model AddVersionWhiteDevicesByDeviceGroupsRequest {
  groupIds: string(name='GroupIds', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  versionId: string(name='VersionId', position='Query'),
  versionType: string(name='VersionType', position='Query'),
}

model AddVersionWhiteDevicesByDeviceGroupsResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model AddVersionWhiteDevicesByDeviceGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: AddVersionWhiteDevicesByDeviceGroupsResponseBody(name='body'),
}

async function addVersionWhiteDevicesByDeviceGroups(request: AddVersionWhiteDevicesByDeviceGroupsRequest): AddVersionWhiteDevicesByDeviceGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddVersionWhiteDevicesByDeviceGroups', 'POST', '/', 'json', false, 'json', request);
}

model ConnectAssistDeviceRequest {
  allowCommandExtension?: boolean(name='AllowCommandExtension', position='Body'),
  deviceId?: string(name='DeviceId', position='Body'),
  hardwareId?: string(name='HardwareId', position='Body'),
  projectId?: string(name='ProjectId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
  serialNumber?: string(name='SerialNumber', position='Body'),
  UUID?: string(name='UUID', position='Body'),
  VIN?: string(name='VIN', position='Body'),
}

model ConnectAssistDeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConnectAssistDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ConnectAssistDeviceResponseBody(name='body'),
}

async function connectAssistDevice(request: ConnectAssistDeviceRequest): ConnectAssistDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConnectAssistDevice', 'POST', '/', 'json', true, 'form', request);
}

model ControlGeoFenceRequest {
  fenceId: long(name='FenceId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  valid: boolean(name='Valid', position='Query'),
}

model ControlGeoFenceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ControlGeoFenceResponse = {
  headers: map[string]string(name='headers'),
  body: ControlGeoFenceResponseBody(name='body'),
}

async function controlGeoFence(request: ControlGeoFenceRequest): ControlGeoFenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ControlGeoFence', 'POST', '/', 'json', false, 'json', request);
}

model CountActivatedOrNewRegistrationDeviceRequest {
  deviceBrand?: string(name='DeviceBrand', position='Query'),
  deviceBrandId?: string(name='DeviceBrandId', position='Query'),
  deviceCountStatType?: string(name='DeviceCountStatType', position='Query'),
  deviceModel?: string(name='DeviceModel', position='Query'),
  deviceModelId?: string(name='DeviceModelId', position='Query'),
  deviceType?: string(name='DeviceType', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  isQueryNewRegistrationDevice?: string(name='IsQueryNewRegistrationDevice', position='Query'),
  isQueryYearlyActivate?: string(name='IsQueryYearlyActivate', position='Query'),
  projectId?: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  startTime: string(name='StartTime', position='Query'),
}

model CountActivatedOrNewRegistrationDeviceResponseBody = {
  requestId?: string(name='RequestId'),
  statistics?: {
    categories?: [ string ](name='Categories'),
    series?: [ 
      {
        data?: [ string ](name='Data'),
        name?: string(name='Name'),
      }
    ](name='Series'),
  }(name='Statistics'),
}

model CountActivatedOrNewRegistrationDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: CountActivatedOrNewRegistrationDeviceResponseBody(name='body'),
}

async function countActivatedOrNewRegistrationDevice(request: CountActivatedOrNewRegistrationDeviceRequest): CountActivatedOrNewRegistrationDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CountActivatedOrNewRegistrationDevice', 'POST', '/', 'json', false, 'json', request);
}

model CountDeviceBrandsRequest {
  deviceBrand?: string(name='DeviceBrand', position='Query'),
  deviceBrandId?: long(name='DeviceBrandId', position='Query'),
  projectId?: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model CountDeviceBrandsResponseBody = {
  brandCount?: int32(name='BrandCount'),
  requestId?: string(name='RequestId'),
}

model CountDeviceBrandsResponse = {
  headers: map[string]string(name='headers'),
  body: CountDeviceBrandsResponseBody(name='body'),
}

async function countDeviceBrands(request: CountDeviceBrandsRequest): CountDeviceBrandsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CountDeviceBrands', 'GET', '/', 'json', false, 'json', request);
}

model CountDeviceModelsRequest {
  deviceBrand?: string(name='DeviceBrand', position='Query'),
  deviceModel?: string(name='DeviceModel', position='Query'),
  deviceModelId?: int32(name='DeviceModelId', position='Query'),
  projectId?: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model CountDeviceModelsResponseBody = {
  modelCount?: int32(name='ModelCount'),
  requestId?: string(name='RequestId'),
}

model CountDeviceModelsResponse = {
  headers: map[string]string(name='headers'),
  body: CountDeviceModelsResponseBody(name='body'),
}

async function countDeviceModels(request: CountDeviceModelsRequest): CountDeviceModelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CountDeviceModels', 'GET', '/', 'json', false, 'json', request);
}

model CountDevicesRequest {
  deviceModel?: string(name='DeviceModel', position='Query'),
  deviceModelId?: int32(name='DeviceModelId', position='Query'),
  projectId?: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model CountDevicesResponseBody = {
  deviceCount?: int32(name='DeviceCount'),
  requestId?: string(name='RequestId'),
}

model CountDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: CountDevicesResponseBody(name='body'),
}

async function countDevices(request: CountDevicesRequest): CountDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CountDevices', 'GET', '/', 'json', false, 'json', request);
}

model CountProjectsRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model CountProjectsResponseBody = {
  projectCount?: int32(name='ProjectCount'),
  requestId?: string(name='RequestId'),
}

model CountProjectsResponse = {
  headers: map[string]string(name='headers'),
  body: CountProjectsResponseBody(name='body'),
}

async function countProjects(request: CountProjectsRequest): CountProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CountProjects', 'POST', '/', 'json', false, 'json', request);
}

model CountYunIdInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model CountYunIdInfoResponseBody = {
  requestId?: string(name='RequestId'),
  yunIdInfo?: [ 
    {
      totalBrandCount?: long(name='TotalBrandCount'),
      totalDeviceCount?: long(name='TotalDeviceCount'),
      totalDeviceModelCount?: long(name='TotalDeviceModelCount'),
    }
  ](name='YunIdInfo'),
}

model CountYunIdInfoResponse = {
  headers: map[string]string(name='headers'),
  body: CountYunIdInfoResponseBody(name='body'),
}

async function countYunIdInfo(request: CountYunIdInfoRequest): CountYunIdInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CountYunIdInfo', 'POST', '/', 'json', false, 'json', request);
}

model CreateAppVersionRequest {
  apkMd5?: string(name='ApkMd5', position='Query'),
  appId?: string(name='AppId', position='Query'),
  appVersion?: string(name='AppVersion', position='Query'),
  blackVersionList?: string(name='BlackVersionList', position='Query'),
  deviceAdapterList?: string(name='DeviceAdapterList', position='Query'),
  installType?: string(name='InstallType', position='Query'),
  isAllowNewInstall?: string(name='IsAllowNewInstall', position='Query'),
  isForceUpgrade?: string(name='IsForceUpgrade', position='Query'),
  isNeedRestart?: string(name='IsNeedRestart', position='Query'),
  isSilentUpgrade?: string(name='IsSilentUpgrade', position='Query'),
  packageUrl?: string(name='PackageUrl', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  releaseNote?: string(name='ReleaseNote', position='Query'),
  remark?: string(name='Remark', position='Query'),
  restartAppParam?: string(name='RestartAppParam', position='Query'),
  restartAppType?: string(name='RestartAppType', position='Query'),
  restartType?: string(name='RestartType', position='Query'),
  versionCode?: string(name='VersionCode', position='Query'),
  whiteVersionList?: string(name='WhiteVersionList', position='Query'),
}

model CreateAppVersionResponseBody = {
  requestId?: string(name='RequestId'),
  versionId?: string(name='VersionId'),
}

model CreateAppVersionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAppVersionResponseBody(name='body'),
}

async function createAppVersion(request: CreateAppVersionRequest): CreateAppVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAppVersion', 'POST', '/', 'json', false, 'json', request);
}

model CreateCustomizedFilterRequest {
  blackWhiteType: string(name='BlackWhiteType', position='Query'),
  name: string(name='Name', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  value: string(name='Value', position='Query'),
  valueCompareType: string(name='ValueCompareType', position='Query'),
  valueType: string(name='ValueType', position='Query'),
  versionId: string(name='VersionId', position='Query'),
  versionType: string(name='VersionType', position='Query'),
}

model CreateCustomizedFilterResponseBody = {
  customizedFilterId?: string(name='CustomizedFilterId'),
  requestId?: string(name='RequestId'),
}

model CreateCustomizedFilterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCustomizedFilterResponseBody(name='body'),
}

async function createCustomizedFilter(request: CreateCustomizedFilterRequest): CreateCustomizedFilterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCustomizedFilter', 'POST', '/', 'json', false, 'json', request);
}

model CreateCustomizedPropertyRequest {
  name: string(name='Name', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  value: string(name='Value', position='Query'),
  versionId: string(name='VersionId', position='Query'),
  versionType: string(name='VersionType', position='Query'),
}

model CreateCustomizedPropertyResponseBody = {
  customizedPropertyId?: string(name='CustomizedPropertyId'),
  requestId?: string(name='RequestId'),
}

model CreateCustomizedPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCustomizedPropertyResponseBody(name='body'),
}

async function createCustomizedProperty(request: CreateCustomizedPropertyRequest): CreateCustomizedPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCustomizedProperty', 'POST', '/', 'json', false, 'json', request);
}

model CreateDeviceRequest {
  hardwareId?: string(name='HardwareId', position='Query'),
  modelName?: string(name='ModelName', position='Query'),
  projectId?: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model CreateDeviceResponseBody = {
  deviceId?: long(name='DeviceId'),
  requestId?: string(name='RequestId'),
}

model CreateDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeviceResponseBody(name='body'),
}

async function createDevice(request: CreateDeviceRequest): CreateDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDevice', 'POST', '/', 'json', false, 'json', request);
}

model CreateDeviceBrandRequest {
  brandName: string(name='BrandName', position='Query'),
  description?: string(name='Description', position='Query'),
  manufacture?: string(name='Manufacture', position='Query'),
  projectId?: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model CreateDeviceBrandResponseBody = {
  brandId?: long(name='BrandId'),
  requestId?: string(name='RequestId'),
}

model CreateDeviceBrandResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeviceBrandResponseBody(name='body'),
}

async function createDeviceBrand(request: CreateDeviceBrandRequest): CreateDeviceBrandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDeviceBrand', 'POST', '/', 'json', false, 'json', request);
}

model CreateDeviceModelRequest {
  brandName?: string(name='BrandName', position='Query'),
  canCreateDeviceId?: string(name='CanCreateDeviceId', position='Query'),
  description?: string(name='Description', position='Query'),
  deviceName?: string(name='DeviceName', position='Query'),
  deviceType?: string(name='DeviceType', position='Query'),
  hardwareType?: string(name='HardwareType', position='Query'),
  initUsageType?: string(name='InitUsageType', position='Query'),
  modelName?: string(name='ModelName', position='Query'),
  objectKey?: string(name='ObjectKey', position='Query'),
  osPlatform?: string(name='OsPlatform', position='Query'),
  projectId?: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  securityChip?: string(name='SecurityChip', position='Query'),
}

model CreateDeviceModelResponseBody = {
  deviceModelId?: long(name='DeviceModelId'),
  requestId?: string(name='RequestId'),
}

model CreateDeviceModelResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeviceModelResponseBody(name='body'),
}

async function createDeviceModel(request: CreateDeviceModelRequest): CreateDeviceModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDeviceModel', 'POST', '/', 'json', false, 'json', request);
}

model CreateGeoFenceRequest {
  alarmCondition: string(name='AlarmCondition', position='Query'),
  area: float(name='Area', position='Query'),
  center?: string(name='Center', position='Query'),
  cityCode?: string(name='CityCode', position='Query'),
  countryCode: string(name='CountryCode', position='Query'),
  description?: string(name='Description', position='Query'),
  fenceName: string(name='FenceName', position='Query'),
  points?: string(name='Points', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  provinceCode: string(name='ProvinceCode', position='Query'),
  radius?: int32(name='Radius', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  type: int32(name='Type', position='Query'),
}

model CreateGeoFenceResponseBody = {
  fenceId?: long(name='FenceId'),
  requestId?: string(name='RequestId'),
}

model CreateGeoFenceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGeoFenceResponseBody(name='body'),
}

async function createGeoFence(request: CreateGeoFenceRequest): CreateGeoFenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGeoFence', 'POST', '/', 'json', false, 'json', request);
}

model CreateMqttRootTopicRequest {
  appKey: string(name='AppKey', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  rootTopic: string(name='RootTopic', position='Query'),
}

model CreateMqttRootTopicResponseBody = {
  queueName?: string(name='QueueName'),
  requestId?: string(name='RequestId'),
}

model CreateMqttRootTopicResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMqttRootTopicResponseBody(name='body'),
}

async function createMqttRootTopic(request: CreateMqttRootTopicRequest): CreateMqttRootTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMqttRootTopic', 'POST', '/', 'json', false, 'json', request);
}

model CreateNamespaceRequest {
  authType: string(name='AuthType', position='Query'),
  desc: string(name='Desc', position='Query'),
  name: string(name='Name', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model CreateNamespaceResponseBody = {
  namespace?: string(name='Namespace'),
  requestId?: string(name='RequestId'),
}

model CreateNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNamespaceResponseBody(name='body'),
}

async function createNamespace(request: CreateNamespaceRequest): CreateNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNamespace', 'POST', '/', 'json', false, 'json', request);
}

model CreateOsVersionRequest {
  blackVersionList?: string(name='BlackVersionList', position='Query'),
  deviceModelId: string(name='DeviceModelId', position='Query'),
  enableMobileDownload: string(name='EnableMobileDownload', position='Query'),
  isForceNightUpgrade: string(name='IsForceNightUpgrade', position='Query'),
  isForceUpgrade: string(name='IsForceUpgrade', position='Query'),
  isMilestone: string(name='IsMilestone', position='Query'),
  maxClientVersion?: string(name='MaxClientVersion', position='Query'),
  minClientVersion?: string(name='MinClientVersion', position='Query'),
  mobileDownloadMaxSize?: string(name='MobileDownloadMaxSize', position='Query'),
  nightUpgradeDownloadType: string(name='NightUpgradeDownloadType', position='Query'),
  nightUpgradeIsAllowedCancel: string(name='NightUpgradeIsAllowedCancel', position='Query'),
  nightUpgradeIsShowTip: string(name='NightUpgradeIsShowTip', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  releaseNote?: string(name='ReleaseNote', position='Query'),
  remark?: string(name='Remark', position='Query'),
  romList: string(name='RomList', position='Query'),
  systemVersion: string(name='SystemVersion', position='Query'),
  whiteVersionList?: string(name='WhiteVersionList', position='Query'),
}

model CreateOsVersionResponseBody = {
  requestId?: string(name='RequestId'),
  versionId?: string(name='VersionId'),
}

model CreateOsVersionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOsVersionResponseBody(name='body'),
}

async function createOsVersion(request: CreateOsVersionRequest): CreateOsVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOsVersion', 'POST', '/', 'json', false, 'json', request);
}

model CreateProjectRequest {
  projectDesc: string(name='ProjectDesc', position='Query'),
  projectName: string(name='ProjectName', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model CreateProjectResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateProjectResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProjectResponseBody(name='body'),
}

async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProject', 'POST', '/', 'json', false, 'json', request);
}

model CreateProjectAppRequest {
  appName: string(name='AppName', position='Query'),
  appPkgName: string(name='AppPkgName', position='Query'),
  osType: int32(name='OsType', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model CreateProjectAppResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateProjectAppResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProjectAppResponseBody(name='body'),
}

async function createProjectApp(request: CreateProjectAppRequest): CreateProjectAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProjectApp', 'POST', '/', 'json', false, 'json', request);
}

model CreateRamUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  userId: string(name='UserId', position='Query'),
}

model CreateRamUserResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateRamUserResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRamUserResponseBody(name='body'),
}

async function createRamUser(request: CreateRamUserRequest): CreateRamUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRamUser', 'POST', '/', 'json', false, 'json', request);
}

model CreateRpcServiceRequest {
  appKey: string(name='AppKey', position='Query'),
  groupName?: string(name='GroupName', position='Query'),
  interfaceName: string(name='InterfaceName', position='Query'),
  invokeType: string(name='InvokeType', position='Query'),
  methodName: string(name='MethodName', position='Query'),
  params: string(name='Params', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  versionCode?: string(name='VersionCode', position='Query'),
}

model CreateRpcServiceResponseBody = {
  id?: long(name='Id'),
  requestId?: string(name='RequestId'),
}

model CreateRpcServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRpcServiceResponseBody(name='body'),
}

async function createRpcService(request: CreateRpcServiceRequest): CreateRpcServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRpcService', 'POST', '/', 'json', false, 'json', request);
}

model CreateSchemaSubscribeRequest {
  deviceModel: string(name='DeviceModel', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  schemaVersion?: string(name='SchemaVersion', position='Query'),
  subscribeList?: string(name='SubscribeList', position='Query'),
}

model CreateSchemaSubscribeResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateSchemaSubscribeResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSchemaSubscribeResponseBody(name='body'),
}

async function createSchemaSubscribe(request: CreateSchemaSubscribeRequest): CreateSchemaSubscribeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSchemaSubscribe', 'POST', '/', 'json', false, 'json', request);
}

model CreateShadowSchemaRequest {
  authType?: string(name='AuthType', position='Query'),
  deviceModelId: string(name='DeviceModelId', position='Query'),
  namespace?: string(name='Namespace', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  schema?: string(name='Schema', position='Query'),
}

model CreateShadowSchemaResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateShadowSchemaResponse = {
  headers: map[string]string(name='headers'),
  body: CreateShadowSchemaResponseBody(name='body'),
}

async function createShadowSchema(request: CreateShadowSchemaRequest): CreateShadowSchemaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateShadowSchema', 'POST', '/', 'json', false, 'json', request);
}

model CreateSubscribeRequest {
  deviceModel: string(name='DeviceModel', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  subscribeList?: string(name='SubscribeList', position='Query'),
  version?: string(name='Version', position='Query'),
}

model CreateSubscribeResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateSubscribeResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSubscribeResponseBody(name='body'),
}

async function createSubscribe(request: CreateSubscribeRequest): CreateSubscribeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSubscribe', 'POST', '/', 'json', false, 'json', request);
}

model CreateTriggerRequest {
  fileIds: string(name='FileIds', position='Query'),
  functionIds: string(name='FunctionIds', position='Query'),
  invocationMode: int32(name='InvocationMode', position='Query'),
  namespace: string(name='Namespace', position='Query'),
  production?: int32(name='Production', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  sandbox?: int32(name='Sandbox', position='Query'),
  source: string(name='Source', position='Query'),
}

model CreateTriggerResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTriggerResponseBody(name='body'),
}

async function createTrigger(request: CreateTriggerRequest): CreateTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTrigger', 'POST', '/', 'json', false, 'json', request);
}

model CreateUpstreamAppKeyRelationRequest {
  appKey: string(name='AppKey', position='Query'),
  PAppKey: string(name='PAppKey', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model CreateUpstreamAppKeyRelationResponseBody = {
  id?: long(name='Id'),
  requestId?: string(name='RequestId'),
}

model CreateUpstreamAppKeyRelationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUpstreamAppKeyRelationResponseBody(name='body'),
}

async function createUpstreamAppKeyRelation(request: CreateUpstreamAppKeyRelationRequest): CreateUpstreamAppKeyRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUpstreamAppKeyRelation', 'POST', '/', 'json', false, 'json', request);
}

model CreateUpstreamAppKeyRelationsRequest {
  appKeys: string(name='AppKeys', position='Query'),
  appServerId: string(name='AppServerId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model CreateUpstreamAppKeyRelationsResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateUpstreamAppKeyRelationsResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUpstreamAppKeyRelationsResponseBody(name='body'),
}

async function createUpstreamAppKeyRelations(request: CreateUpstreamAppKeyRelationsRequest): CreateUpstreamAppKeyRelationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUpstreamAppKeyRelations', 'POST', '/', 'json', false, 'json', request);
}

model CreateUpstreamAppServerRequest {
  name: string(name='Name', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  tags: string(name='Tags', position='Query'),
}

model CreateUpstreamAppServerResponseBody = {
  id?: long(name='Id'),
  requestId?: string(name='RequestId'),
}

model CreateUpstreamAppServerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUpstreamAppServerResponseBody(name='body'),
}

async function createUpstreamAppServer(request: CreateUpstreamAppServerRequest): CreateUpstreamAppServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUpstreamAppServer', 'POST', '/', 'json', false, 'json', request);
}

model CreateUserPrivilegeRequest {
  privileges: string(name='Privileges', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  userId: string(name='UserId', position='Query'),
}

model CreateUserPrivilegeResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateUserPrivilegeResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserPrivilegeResponseBody(name='body'),
}

async function createUserPrivilege(request: CreateUserPrivilegeRequest): CreateUserPrivilegeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUserPrivilege', 'POST', '/', 'json', false, 'json', request);
}

model CreateVersionDeviceGroupRequest {
  description?: string(name='Description', position='Query'),
  maxCount: string(name='MaxCount', position='Query'),
  name: string(name='Name', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model CreateVersionDeviceGroupResponseBody = {
  deviceGroupId?: string(name='DeviceGroupId'),
  requestId?: string(name='RequestId'),
}

model CreateVersionDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVersionDeviceGroupResponseBody(name='body'),
}

async function createVersionDeviceGroup(request: CreateVersionDeviceGroupRequest): CreateVersionDeviceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVersionDeviceGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateVersionPrepublishRequest {
  barrierCount: string(name='BarrierCount', position='Query'),
  isTotalPrepublish: string(name='IsTotalPrepublish', position='Query'),
  name: string(name='Name', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  versionId: string(name='VersionId', position='Query'),
  versionType: string(name='VersionType', position='Query'),
}

model CreateVersionPrepublishResponseBody = {
  prepublishId?: string(name='PrepublishId'),
  requestId?: string(name='RequestId'),
}

model CreateVersionPrepublishResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVersionPrepublishResponseBody(name='body'),
}

async function createVersionPrepublish(request: CreateVersionPrepublishRequest): CreateVersionPrepublishResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVersionPrepublish', 'POST', '/', 'json', false, 'json', request);
}

model CreateVersionTestRequest {
  description?: string(name='Description', position='Query'),
  deviceGroupId: string(name='DeviceGroupId', position='Query'),
  name: string(name='Name', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  versionId: string(name='VersionId', position='Query'),
  versionType: string(name='VersionType', position='Query'),
}

model CreateVersionTestResponseBody = {
  requestId?: string(name='RequestId'),
  testId?: string(name='TestId'),
}

model CreateVersionTestResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVersionTestResponseBody(name='body'),
}

async function createVersionTest(request: CreateVersionTestRequest): CreateVersionTestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVersionTest', 'POST', '/', 'json', false, 'json', request);
}

model DelayPublishOsVersionRequest {
  description?: string(name='Description', position='Query'),
  downTime?: long(name='DownTime', position='Query'),
  email: string(name='Email', position='Query'),
  prepubTime?: long(name='PrepubTime', position='Query'),
  prepublishCount?: string(name='PrepublishCount', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  publishTime?: long(name='PublishTime', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  sendMessage?: string(name='SendMessage', position='Query'),
  versionId: string(name='VersionId', position='Query'),
}

model DelayPublishOsVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model DelayPublishOsVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DelayPublishOsVersionResponseBody(name='body'),
}

async function delayPublishOsVersion(request: DelayPublishOsVersionRequest): DelayPublishOsVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DelayPublishOsVersion', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAllCustomizedFiltersRequest {
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  versionId: string(name='VersionId', position='Query'),
  versionType: string(name='VersionType', position='Query'),
}

model DeleteAllCustomizedFiltersResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAllCustomizedFiltersResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAllCustomizedFiltersResponseBody(name='body'),
}

async function deleteAllCustomizedFilters(request: DeleteAllCustomizedFiltersRequest): DeleteAllCustomizedFiltersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAllCustomizedFilters', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAllVersionGroupDevicesRequest {
  deviceGroupId: string(name='DeviceGroupId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model DeleteAllVersionGroupDevicesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAllVersionGroupDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAllVersionGroupDevicesResponseBody(name='body'),
}

async function deleteAllVersionGroupDevices(request: DeleteAllVersionGroupDevicesRequest): DeleteAllVersionGroupDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAllVersionGroupDevices', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCameraShootingRecordRequest {
  edgeDeviceId: string(name='EdgeDeviceId', description='终端设备id', position='Query'),
  projectId: string(name='ProjectId', description='项目ID', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  shootingRecordId: long(name='ShootingRecordId', description='拍摄记录ID', position='Query'),
}

model DeleteCameraShootingRecordResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model DeleteCameraShootingRecordResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCameraShootingRecordResponseBody(name='body'),
}

async function deleteCameraShootingRecord(request: DeleteCameraShootingRecordRequest): DeleteCameraShootingRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCameraShootingRecord', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustomizedFilterRequest {
  id: string(name='Id', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteCustomizedFilterResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCustomizedFilterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCustomizedFilterResponseBody(name='body'),
}

async function deleteCustomizedFilter(request: DeleteCustomizedFilterRequest): DeleteCustomizedFilterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomizedFilter', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustomizedPropertyRequest {
  id: string(name='Id', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model DeleteCustomizedPropertyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCustomizedPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCustomizedPropertyResponseBody(name='body'),
}

async function deleteCustomizedProperty(request: DeleteCustomizedPropertyRequest): DeleteCustomizedPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomizedProperty', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDeviceRequest {
  deviceId?: string(name='DeviceId', position='Query'),
  projectId?: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteDeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeviceResponseBody(name='body'),
}

async function deleteDevice(request: DeleteDeviceRequest): DeleteDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDevice', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFunctionFileRequest {
  fileName: string(name='FileName', position='Query'),
  fileType?: int32(name='FileType', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteFunctionFileResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteFunctionFileResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFunctionFileResponseBody(name='body'),
}

async function deleteFunctionFile(request: DeleteFunctionFileRequest): DeleteFunctionFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFunctionFile', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGeoFenceRequest {
  fenceId: long(name='FenceId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model DeleteGeoFenceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteGeoFenceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGeoFenceResponseBody(name='body'),
}

async function deleteGeoFence(request: DeleteGeoFenceRequest): DeleteGeoFenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGeoFence', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMqttRootTopicRequest {
  appKey: string(name='AppKey', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  rootTopic: string(name='RootTopic', position='Query'),
}

model DeleteMqttRootTopicResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteMqttRootTopicResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMqttRootTopicResponseBody(name='body'),
}

async function deleteMqttRootTopic(request: DeleteMqttRootTopicRequest): DeleteMqttRootTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMqttRootTopic', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNamespaceRequest {
  namespace: string(name='Namespace', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteNamespaceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNamespaceResponseBody(name='body'),
}

async function deleteNamespace(request: DeleteNamespaceRequest): DeleteNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNamespace', 'POST', '/', 'json', false, 'json', request);
}

model DeleteOpenAccountRequest {
  identityId?: string(name='IdentityId', position='Query'),
  projectId?: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteOpenAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteOpenAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteOpenAccountResponseBody(name='body'),
}

async function deleteOpenAccount(request: DeleteOpenAccountRequest): DeleteOpenAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteOpenAccount', 'GET', '/', 'json', false, 'json', request);
}

model DeleteProjectAppRequest {
  appId: string(name='AppId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteProjectAppResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteProjectAppResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProjectAppResponseBody(name='body'),
}

async function deleteProjectApp(request: DeleteProjectAppRequest): DeleteProjectAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteProjectApp', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRpcServiceRequest {
  id: string(name='Id', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteRpcServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteRpcServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRpcServiceResponseBody(name='body'),
}

async function deleteRpcService(request: DeleteRpcServiceRequest): DeleteRpcServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRpcService', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSchemaSubscribeRequest {
  id: string(name='Id', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteSchemaSubscribeResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSchemaSubscribeResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSchemaSubscribeResponseBody(name='body'),
}

async function deleteSchemaSubscribe(request: DeleteSchemaSubscribeRequest): DeleteSchemaSubscribeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSchemaSubscribe', 'POST', '/', 'json', false, 'json', request);
}

model DeleteShadowSchemaRequest {
  id: string(name='Id', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteShadowSchemaResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteShadowSchemaResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteShadowSchemaResponseBody(name='body'),
}

async function deleteShadowSchema(request: DeleteShadowSchemaRequest): DeleteShadowSchemaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteShadowSchema', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTriggerRequest {
  id: long(name='Id', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteTriggerResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTriggerResponseBody(name='body'),
}

async function deleteTrigger(request: DeleteTriggerRequest): DeleteTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTrigger', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUpstreamAppKeyRelationRequest {
  id: string(name='Id', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteUpstreamAppKeyRelationResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteUpstreamAppKeyRelationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUpstreamAppKeyRelationResponseBody(name='body'),
}

async function deleteUpstreamAppKeyRelation(request: DeleteUpstreamAppKeyRelationRequest): DeleteUpstreamAppKeyRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUpstreamAppKeyRelation', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUpstreamAppServerRequest {
  id: long(name='Id', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteUpstreamAppServerResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteUpstreamAppServerResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUpstreamAppServerResponseBody(name='body'),
}

async function deleteUpstreamAppServer(request: DeleteUpstreamAppServerRequest): DeleteUpstreamAppServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUpstreamAppServer', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVersionAllBlackDevicesRequest {
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  versionId: string(name='VersionId', position='Query'),
  versionType: string(name='VersionType', position='Query'),
}

model DeleteVersionAllBlackDevicesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVersionAllBlackDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVersionAllBlackDevicesResponseBody(name='body'),
}

async function deleteVersionAllBlackDevices(request: DeleteVersionAllBlackDevicesRequest): DeleteVersionAllBlackDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVersionAllBlackDevices', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVersionAllWhiteDevicesRequest {
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  versionId: string(name='VersionId', position='Query'),
  versionType: string(name='VersionType', position='Query'),
}

model DeleteVersionAllWhiteDevicesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVersionAllWhiteDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVersionAllWhiteDevicesResponseBody(name='body'),
}

async function deleteVersionAllWhiteDevices(request: DeleteVersionAllWhiteDevicesRequest): DeleteVersionAllWhiteDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVersionAllWhiteDevices', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVersionBlackDevicesRequest {
  deviceIdType: string(name='DeviceIdType', position='Query'),
  deviceIds: string(name='DeviceIds', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  versionId: string(name='VersionId', position='Query'),
  versionType: string(name='VersionType', position='Query'),
}

model DeleteVersionBlackDevicesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVersionBlackDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVersionBlackDevicesResponseBody(name='body'),
}

async function deleteVersionBlackDevices(request: DeleteVersionBlackDevicesRequest): DeleteVersionBlackDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVersionBlackDevices', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVersionBlackDevicesByIdRequest {
  ids: string(name='Ids', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  versionId: string(name='VersionId', position='Query'),
  versionType: string(name='VersionType', position='Query'),
}

model DeleteVersionBlackDevicesByIdResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVersionBlackDevicesByIdResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVersionBlackDevicesByIdResponseBody(name='body'),
}

async function deleteVersionBlackDevicesById(request: DeleteVersionBlackDevicesByIdRequest): DeleteVersionBlackDevicesByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVersionBlackDevicesById', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVersionDeviceGroupRequest {
  id: string(name='Id', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteVersionDeviceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVersionDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVersionDeviceGroupResponseBody(name='body'),
}

async function deleteVersionDeviceGroup(request: DeleteVersionDeviceGroupRequest): DeleteVersionDeviceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVersionDeviceGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVersionGroupDeviceRequest {
  deviceGroupId: string(name='DeviceGroupId', position='Query'),
  deviceIdType: string(name='DeviceIdType', position='Query'),
  deviceIds: string(name='DeviceIds', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteVersionGroupDeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVersionGroupDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVersionGroupDeviceResponseBody(name='body'),
}

async function deleteVersionGroupDevice(request: DeleteVersionGroupDeviceRequest): DeleteVersionGroupDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVersionGroupDevice', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVersionGroupDeviceByIdRequest {
  deviceGroupId: string(name='DeviceGroupId', position='Query'),
  ids: string(name='Ids', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model DeleteVersionGroupDeviceByIdResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVersionGroupDeviceByIdResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVersionGroupDeviceByIdResponseBody(name='body'),
}

async function deleteVersionGroupDeviceById(request: DeleteVersionGroupDeviceByIdRequest): DeleteVersionGroupDeviceByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVersionGroupDeviceById', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVersionTestRequest {
  id: string(name='Id', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteVersionTestResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVersionTestResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVersionTestResponseBody(name='body'),
}

async function deleteVersionTest(request: DeleteVersionTestRequest): DeleteVersionTestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVersionTest', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVersionWhiteDevicesRequest {
  deviceIdType: string(name='DeviceIdType', position='Query'),
  deviceIds: string(name='DeviceIds', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  versionId: string(name='VersionId', position='Query'),
  versionType: string(name='VersionType', position='Query'),
}

model DeleteVersionWhiteDevicesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVersionWhiteDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVersionWhiteDevicesResponseBody(name='body'),
}

async function deleteVersionWhiteDevices(request: DeleteVersionWhiteDevicesRequest): DeleteVersionWhiteDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVersionWhiteDevices', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVersionWhiteDevicesByIdRequest {
  ids: string(name='Ids', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  versionId: string(name='VersionId', position='Query'),
  versionType: string(name='VersionType', position='Query'),
}

model DeleteVersionWhiteDevicesByIdResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVersionWhiteDevicesByIdResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVersionWhiteDevicesByIdResponseBody(name='body'),
}

async function deleteVersionWhiteDevicesById(request: DeleteVersionWhiteDevicesByIdRequest): DeleteVersionWhiteDevicesByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVersionWhiteDevicesById', 'POST', '/', 'json', false, 'json', request);
}

model DeployFunctionFileRequest {
  deployEnv: int32(name='DeployEnv', position='Query'),
  fileId: string(name='FileId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeployFunctionFileResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeployFunctionFileResponse = {
  headers: map[string]string(name='headers'),
  body: DeployFunctionFileResponseBody(name='body'),
}

async function deployFunctionFile(request: DeployFunctionFileRequest): DeployFunctionFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeployFunctionFile', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiGatewayAppSecurityRequest {
  gatewayAppId: string(name='GatewayAppId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeApiGatewayAppSecurityResponseBody = {
  apiGatewayAppSecurity?: {
    gatewayAppId?: string(name='GatewayAppId'),
    gatewayAppKey?: string(name='GatewayAppKey'),
    gatewayAppSecret?: string(name='GatewayAppSecret'),
    gmtCreate?: long(name='GmtCreate'),
    gmtModified?: long(name='GmtModified'),
  }(name='ApiGatewayAppSecurity'),
  requestId?: string(name='RequestId'),
}

model DescribeApiGatewayAppSecurityResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiGatewayAppSecurityResponseBody(name='body'),
}

async function describeApiGatewayAppSecurity(request: DescribeApiGatewayAppSecurityRequest): DescribeApiGatewayAppSecurityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiGatewayAppSecurity', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppVersionRequest {
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  versionId: string(name='VersionId', position='Query'),
}

model DescribeAppVersionResponseBody = {
  appVersion?: {
    adapters?: [ 
      {
        deviceModelId?: string(name='DeviceModelId'),
        deviceModelName?: string(name='DeviceModelName'),
        id?: long(name='Id'),
        maxOsVersion?: string(name='MaxOsVersion'),
        minOsVersion?: string(name='MinOsVersion'),
        versionId?: long(name='VersionId'),
      }
    ](name='Adapters'),
    apkMd5?: string(name='ApkMd5'),
    appId?: string(name='AppId'),
    appName?: string(name='AppName'),
    appVersion?: string(name='AppVersion'),
    blackVersionList?: string(name='BlackVersionList'),
    downloadUrl?: string(name='DownloadUrl'),
    gmtCreate?: string(name='GmtCreate'),
    gmtModify?: string(name='GmtModify'),
    id?: long(name='Id'),
    installType?: string(name='InstallType'),
    isAllowNewInstall?: string(name='IsAllowNewInstall'),
    isForceUpgrade?: string(name='IsForceUpgrade'),
    isNeedRestart?: string(name='IsNeedRestart'),
    isSilentUpgrade?: string(name='IsSilentUpgrade'),
    md5?: string(name='Md5'),
    originalUrl?: string(name='OriginalUrl'),
    packageName?: string(name='PackageName'),
    releaseNote?: string(name='ReleaseNote'),
    remark?: string(name='Remark'),
    restartAppParam?: string(name='RestartAppParam'),
    restartAppType?: string(name='RestartAppType'),
    restartType?: string(name='RestartType'),
    size?: string(name='Size'),
    status?: string(name='Status'),
    statusName?: string(name='StatusName'),
    versionCode?: long(name='VersionCode'),
    whiteVersionList?: string(name='WhiteVersionList'),
  }(name='AppVersion'),
  requestId?: string(name='RequestId'),
}

model DescribeAppVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppVersionResponseBody(name='body'),
}

async function describeAppVersion(request: DescribeAppVersionRequest): DescribeAppVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppVersion', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAssistRTMPServerAddressRequest {
  deviceId: string(name='DeviceId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAssistRTMPServerAddressResponseBody = {
  OTP?: string(name='OTP'),
  RTMPServer?: string(name='RTMPServer'),
  requestId?: string(name='RequestId'),
}

model DescribeAssistRTMPServerAddressResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAssistRTMPServerAddressResponseBody(name='body'),
}

async function describeAssistRTMPServerAddress(request: DescribeAssistRTMPServerAddressRequest): DescribeAssistRTMPServerAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAssistRTMPServerAddress', 'GET', '/', 'json', false, 'json', request);
}

model DescribeAssistReportRequest {
  assistId: string(name='AssistId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAssistReportResponseBody = {
  assistDescription?: string(name='AssistDescription'),
  assistId?: string(name='AssistId'),
  assistReason?: string(name='AssistReason'),
  assistResult?: string(name='AssistResult'),
  assistTag?: string(name='AssistTag'),
  requestId?: string(name='RequestId'),
}

model DescribeAssistReportResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAssistReportResponseBody(name='body'),
}

async function describeAssistReport(request: DescribeAssistReportRequest): DescribeAssistReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAssistReport', 'GET', '/', 'json', false, 'json', request);
}

model DescribeAssistWSServerAddressRequest {
  deviceId: string(name='DeviceId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAssistWSServerAddressResponseBody = {
  OTP?: string(name='OTP'),
  requestId?: string(name='RequestId'),
  wsServer?: string(name='WsServer'),
}

model DescribeAssistWSServerAddressResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAssistWSServerAddressResponseBody(name='body'),
}

async function describeAssistWSServerAddress(request: DescribeAssistWSServerAddressRequest): DescribeAssistWSServerAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAssistWSServerAddress', 'GET', '/', 'json', false, 'json', request);
}

model DescribeCustomizedFilterRequest {
  id: string(name='Id', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model DescribeCustomizedFilterResponseBody = {
  customizedFilter?: {
    blackWhiteType?: string(name='BlackWhiteType'),
    gmtCreate?: string(name='GmtCreate'),
    gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
    gmtModify?: string(name='GmtModify'),
    gmtModifyTimestamp?: long(name='GmtModifyTimestamp'),
    id?: long(name='Id'),
    name?: string(name='Name'),
    value?: string(name='Value'),
    valueCompareType?: string(name='ValueCompareType'),
    valueType?: string(name='ValueType'),
    versionId?: long(name='VersionId'),
    versionType?: string(name='VersionType'),
  }(name='CustomizedFilter'),
  requestId?: string(name='RequestId'),
}

model DescribeCustomizedFilterResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCustomizedFilterResponseBody(name='body'),
}

async function describeCustomizedFilter(request: DescribeCustomizedFilterRequest): DescribeCustomizedFilterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomizedFilter', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDefaultSchemaRequest {
  deviceModelId: string(name='DeviceModelId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeDefaultSchemaResponseBody = {
  requestId?: string(name='RequestId'),
  schema?: string(name='Schema'),
}

model DescribeDefaultSchemaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDefaultSchemaResponseBody(name='body'),
}

async function describeDefaultSchema(request: DescribeDefaultSchemaRequest): DescribeDefaultSchemaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDefaultSchema', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeviceRequest {
  deviceId: string(name='DeviceId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeDeviceResponseBody = {
  deviceInfo?: {
    attributes?: string(name='Attributes'),
    deviceBrand?: string(name='DeviceBrand'),
    deviceBrandId?: long(name='DeviceBrandId'),
    deviceId?: string(name='DeviceId'),
    deviceModel?: string(name='DeviceModel'),
    deviceModelId?: long(name='DeviceModelId'),
    deviceProduct?: string(name='DeviceProduct'),
    deviceType?: string(name='DeviceType'),
    hardwareId?: string(name='HardwareId'),
    macAddress?: string(name='MacAddress'),
    name?: string(name='Name'),
    osPlatform?: string(name='OsPlatform'),
    projectId?: string(name='ProjectId'),
    region?: string(name='Region'),
    serialNumber?: string(name='SerialNumber'),
    softwareId?: string(name='SoftwareId'),
    status?: string(name='Status'),
    usageType?: int32(name='UsageType'),
    usageTypeDesc?: string(name='UsageTypeDesc'),
    uuid?: string(name='Uuid'),
    vin?: string(name='Vin'),
  }(name='DeviceInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeviceResponseBody(name='body'),
}

async function describeDevice(request: DescribeDeviceRequest): DescribeDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDevice', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeviceBrandRequest {
  deviceBrand?: string(name='DeviceBrand', position='Query'),
  deviceBrandId?: long(name='DeviceBrandId', position='Query'),
  length?: string(name='Length', position='Query'),
  projectId?: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  start?: string(name='Start', position='Query'),
}

model DescribeDeviceBrandResponseBody = {
  deviceBrand?: {
    description?: string(name='Description'),
    deviceBrand?: string(name='DeviceBrand'),
    deviceBrandId?: long(name='DeviceBrandId'),
    manufacture?: string(name='Manufacture'),
    projectId?: string(name='ProjectId'),
  }(name='DeviceBrand'),
  requestId?: string(name='RequestId'),
}

model DescribeDeviceBrandResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeviceBrandResponseBody(name='body'),
}

async function describeDeviceBrand(request: DescribeDeviceBrandRequest): DescribeDeviceBrandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeviceBrand', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDeviceIdByHardwareIdRequest {
  hardwareId?: string(name='HardwareId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  targetProjectId?: string(name='TargetProjectId', position='Query'),
}

model DescribeDeviceIdByHardwareIdResponseBody = {
  deviceId?: string(name='DeviceId'),
  requestId?: string(name='RequestId'),
}

model DescribeDeviceIdByHardwareIdResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeviceIdByHardwareIdResponseBody(name='body'),
}

async function describeDeviceIdByHardwareId(request: DescribeDeviceIdByHardwareIdRequest): DescribeDeviceIdByHardwareIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeviceIdByHardwareId', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDeviceIdByOuterInfoRequest {
  projectId?: string(name='ProjectId', position='Query'),
  queryType?: string(name='QueryType', position='Query'),
  queryValue?: string(name='QueryValue', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeDeviceIdByOuterInfoResponseBody = {
  deviceId?: string(name='DeviceId'),
  requestId?: string(name='RequestId'),
}

model DescribeDeviceIdByOuterInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeviceIdByOuterInfoResponseBody(name='body'),
}

async function describeDeviceIdByOuterInfo(request: DescribeDeviceIdByOuterInfoRequest): DescribeDeviceIdByOuterInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeviceIdByOuterInfo', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDeviceInfoRequest {
  deviceId?: string(name='DeviceId', position='Query'),
  deviceToken?: string(name='DeviceToken', position='Query'),
  projectId?: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeDeviceInfoResponseBody = {
  deviceInfo?: {
    deviceBrand?: string(name='DeviceBrand'),
    deviceId?: string(name='DeviceId'),
    deviceModel?: string(name='DeviceModel'),
    deviceModelId?: long(name='DeviceModelId'),
    deviceType?: string(name='DeviceType'),
    hardwareId?: string(name='HardwareId'),
    macAddress?: string(name='MacAddress'),
    name?: string(name='Name'),
    projectId?: string(name='ProjectId'),
    region?: string(name='Region'),
    serialNumber?: string(name='SerialNumber'),
    softwareId?: string(name='SoftwareId'),
    status?: string(name='Status'),
    usageType?: int32(name='UsageType'),
    usageTypeDesc?: string(name='UsageTypeDesc'),
    uuid?: string(name='Uuid'),
    vin?: string(name='Vin'),
  }(name='DeviceInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeDeviceInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeviceInfoResponseBody(name='body'),
}

async function describeDeviceInfo(request: DescribeDeviceInfoRequest): DescribeDeviceInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeviceInfo', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDeviceModelRequest {
  deviceModel?: string(name='DeviceModel', position='Query'),
  deviceModelId?: int32(name='DeviceModelId', position='Query'),
  projectId?: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeDeviceModelResponseBody = {
  deviceModel?: {
    canCreateDeviceId?: int32(name='CanCreateDeviceId'),
    description?: string(name='Description'),
    deviceBrand?: string(name='DeviceBrand'),
    deviceLogoUrl?: string(name='DeviceLogoUrl'),
    deviceModel?: string(name='DeviceModel'),
    deviceModelId?: long(name='DeviceModelId'),
    deviceName?: string(name='DeviceName'),
    deviceType?: string(name='DeviceType'),
    hardwareType?: string(name='HardwareType'),
    initUsageType?: int32(name='InitUsageType'),
    initUsageTypeDesc?: string(name='InitUsageTypeDesc'),
    objectKey?: string(name='ObjectKey'),
    osPlatform?: string(name='OsPlatform'),
    projectId?: string(name='ProjectId'),
    securityChip?: string(name='SecurityChip'),
  }(name='DeviceModel'),
  requestId?: string(name='RequestId'),
}

model DescribeDeviceModelResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeviceModelResponseBody(name='body'),
}

async function describeDeviceModel(request: DescribeDeviceModelRequest): DescribeDeviceModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeviceModel', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDeviceOnlineInfoRequest {
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  type: string(name='Type', position='Query'),
  value: string(name='Value', position='Query'),
}

model DescribeDeviceOnlineInfoResponseBody = {
  devices?: [ 
    {
      clientVersion?: string(name='ClientVersion'),
      deviceId?: string(name='DeviceId'),
      iasId?: string(name='IasId'),
      loginTime?: long(name='LoginTime'),
      online?: int32(name='Online'),
      projectId?: string(name='ProjectId'),
      systemVersion?: string(name='SystemVersion'),
      terminal?: string(name='Terminal'),
    }
  ](name='Devices'),
  requestId?: string(name='RequestId'),
}

model DescribeDeviceOnlineInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeviceOnlineInfoResponseBody(name='body'),
}

async function describeDeviceOnlineInfo(request: DescribeDeviceOnlineInfoRequest): DescribeDeviceOnlineInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeviceOnlineInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeviceShadowRequest {
  deviceId: string(name='DeviceId', position='Query'),
  deviceModel?: string(name='DeviceModel', position='Query'),
  path: string(name='Path', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  viewSubscribed?: boolean(name='ViewSubscribed', position='Query'),
}

model DescribeDeviceShadowResponseBody = {
  deviceShadow?: {
    deviceInfo?: string(name='DeviceInfo'),
    deviceShadow?: string(name='DeviceShadow'),
  }(name='DeviceShadow'),
  requestId?: string(name='RequestId'),
}

model DescribeDeviceShadowResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeviceShadowResponseBody(name='body'),
}

async function describeDeviceShadow(request: DescribeDeviceShadowRequest): DescribeDeviceShadowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeviceShadow', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeviceValiditySchemaRequest {
  deviceModel?: string(name='DeviceModel', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  schemaVersion?: string(name='SchemaVersion', position='Query'),
}

model DescribeDeviceValiditySchemaResponseBody = {
  itemList?: [ 
    {
      description?: string(name='Description'),
      enumListStr?: string(name='EnumListStr'),
      exclusiveMaximum?: boolean(name='ExclusiveMaximum'),
      exclusiveMinimum?: boolean(name='ExclusiveMinimum'),
      itemType?: string(name='ItemType'),
      maxLength?: int32(name='MaxLength'),
      maximum?: float(name='Maximum'),
      minLength?: int32(name='MinLength'),
      minimum?: float(name='Minimum'),
      path?: string(name='Path'),
      required?: string(name='Required'),
      type?: string(name='Type'),
    }
  ](name='ItemList'),
  requestId?: string(name='RequestId'),
}

model DescribeDeviceValiditySchemaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeviceValiditySchemaResponseBody(name='body'),
}

async function describeDeviceValiditySchema(request: DescribeDeviceValiditySchemaRequest): DescribeDeviceValiditySchemaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeviceValiditySchema', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMessageRequest {
  messageId: long(name='MessageId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeMessageResponseBody = {
  message?: {
    ackCnt?: int32(name='AckCnt'),
    action?: string(name='Action'),
    appKey?: string(name='AppKey'),
    appName?: string(name='AppName'),
    audit?: int32(name='Audit'),
    auditMsg?: string(name='AuditMsg'),
    desc?: string(name='Desc'),
    exipiredTime?: long(name='ExipiredTime'),
    gmtCreateTime?: long(name='GmtCreateTime'),
    id?: long(name='Id'),
    parameter?: string(name='Parameter'),
    predictSendCnt?: int32(name='PredictSendCnt'),
    projectId?: string(name='ProjectId'),
    sendStatus?: int32(name='SendStatus'),
    title?: string(name='Title'),
    type?: int32(name='Type'),
    uri?: string(name='Uri'),
  }(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribeMessageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMessageResponseBody(name='body'),
}

async function describeMessage(request: DescribeMessageRequest): DescribeMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMessage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMqttClientStatusRequest {
  appKey: string(name='AppKey', position='Query'),
  clientId: string(name='ClientId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeMqttClientStatusResponseBody = {
  clientStatus?: {
    cleanSession?: string(name='CleanSession'),
    lastUpdate?: long(name='LastUpdate'),
    status?: int32(name='Status'),
  }(name='ClientStatus'),
  requestId?: string(name='RequestId'),
}

model DescribeMqttClientStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMqttClientStatusResponseBody(name='body'),
}

async function describeMqttClientStatus(request: DescribeMqttClientStatusRequest): DescribeMqttClientStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMqttClientStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMqttMessageRequest {
  appKey?: string(name='AppKey', position='Query'),
  mid: string(name='Mid', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeMqttMessageResponseBody = {
  message?: {
    appKey?: string(name='AppKey'),
    mid?: string(name='Mid'),
    payload?: string(name='Payload'),
    qoS?: int32(name='QoS'),
    time?: long(name='Time'),
    topic?: string(name='Topic'),
  }(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribeMqttMessageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMqttMessageResponseBody(name='body'),
}

async function describeMqttMessage(request: DescribeMqttMessageRequest): DescribeMqttMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMqttMessage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMqttTopicSubscriptionRequest {
  appKey: string(name='AppKey', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  topic: string(name='Topic', position='Query'),
}

model DescribeMqttTopicSubscriptionResponseBody = {
  requestId?: string(name='RequestId'),
  subscription?: {
    count?: int32(name='Count'),
    topic?: string(name='Topic'),
  }(name='Subscription'),
}

model DescribeMqttTopicSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMqttTopicSubscriptionResponseBody(name='body'),
}

async function describeMqttTopicSubscription(request: DescribeMqttTopicSubscriptionRequest): DescribeMqttTopicSubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMqttTopicSubscription', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOpenAccountRequest {
  idToken?: string(name='IdToken', position='Query'),
  identityId?: string(name='IdentityId', position='Query'),
  idp?: string(name='Idp', position='Query'),
  openId?: string(name='OpenId', position='Query'),
  projectId?: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeOpenAccountResponseBody = {
  openAccount?: {
    aliyunId?: string(name='AliyunId'),
    createAccessKey?: string(name='CreateAccessKey'),
    displayName?: string(name='DisplayName'),
    identityId?: string(name='IdentityId'),
    idp?: string(name='Idp'),
    loginId?: string(name='LoginId'),
    mobile?: string(name='Mobile'),
    openId?: string(name='OpenId'),
    region?: string(name='Region'),
    status?: int32(name='Status'),
    type?: int32(name='Type'),
  }(name='OpenAccount'),
  requestId?: string(name='RequestId'),
}

model DescribeOpenAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOpenAccountResponseBody(name='body'),
}

async function describeOpenAccount(request: DescribeOpenAccountRequest): DescribeOpenAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOpenAccount', 'GET', '/', 'json', false, 'json', request);
}

model DescribeOsVersionRequest {
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  versionId: long(name='VersionId', position='Query'),
}

model DescribeOsVersionResponseBody = {
  osVersion?: {
    blackVersionList?: string(name='BlackVersionList'),
    deviceModelId?: string(name='DeviceModelId'),
    deviceModelName?: string(name='DeviceModelName'),
    enableMobileDownload?: string(name='EnableMobileDownload'),
    gmtCreate?: string(name='GmtCreate'),
    gmtModify?: string(name='GmtModify'),
    id?: long(name='Id'),
    isForceNightUpgrade?: string(name='IsForceNightUpgrade'),
    isForceUpgrade?: string(name='IsForceUpgrade'),
    isMilestone?: string(name='IsMilestone'),
    maxClientVersion?: string(name='MaxClientVersion'),
    minClientVersion?: string(name='MinClientVersion'),
    mobileDownloadMaxSize?: string(name='MobileDownloadMaxSize'),
    nightUpgradeOption?: {
      downloadType?: string(name='DownloadType'),
      isAllowedCancel?: string(name='IsAllowedCancel'),
      isShowTip?: string(name='IsShowTip'),
    }(name='NightUpgradeOption'),
    releaseNote?: string(name='ReleaseNote'),
    remark?: string(name='Remark'),
    romList?: [ 
      {
        baseVersion?: string(name='BaseVersion'),
        downloadUrl?: string(name='DownloadUrl'),
        gmtCreate?: string(name='GmtCreate'),
        gmtModify?: string(name='GmtModify'),
        id?: long(name='Id'),
        md5?: string(name='Md5'),
        originalUrl?: string(name='OriginalUrl'),
        size?: string(name='Size'),
        splitNum?: string(name='SplitNum'),
        versionId?: long(name='VersionId'),
      }
    ](name='RomList'),
    status?: string(name='Status'),
    statusName?: string(name='StatusName'),
    systemVersion?: string(name='SystemVersion'),
    whiteVersionList?: string(name='WhiteVersionList'),
  }(name='OsVersion'),
  requestId?: string(name='RequestId'),
}

model DescribeOsVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOsVersionResponseBody(name='body'),
}

async function describeOsVersion(request: DescribeOsVersionRequest): DescribeOsVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOsVersion', 'POST', '/', 'json', false, 'json', request);
}

model DescribeProjectRequest {
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeProjectResponseBody = {
  project?: {
    creator?: string(name='Creator'),
    description?: string(name='Description'),
    gmtCreate?: long(name='GmtCreate'),
    gmtModified?: long(name='GmtModified'),
    id?: long(name='Id'),
    name?: string(name='Name'),
    projectId?: string(name='ProjectId'),
    status?: int32(name='Status'),
    userId?: string(name='UserId'),
    vehicleCommunicationProtocol?: string(name='VehicleCommunicationProtocol'),
  }(name='Project'),
  requestId?: string(name='RequestId'),
}

model DescribeProjectResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProjectResponseBody(name='body'),
}

async function describeProject(request: DescribeProjectRequest): DescribeProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeProject', 'POST', '/', 'json', false, 'json', request);
}

model DescribeProjectAppSecurityRequest {
  appId: string(name='AppId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeProjectAppSecurityResponseBody = {
  projectAppSecurity?: {
    appId?: string(name='AppId'),
    appKey?: string(name='AppKey'),
    appSecret?: string(name='AppSecret'),
    gmtCreate?: long(name='GmtCreate'),
    gmtModified?: long(name='GmtModified'),
    id?: long(name='Id'),
  }(name='ProjectAppSecurity'),
  requestId?: string(name='RequestId'),
}

model DescribeProjectAppSecurityResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProjectAppSecurityResponseBody(name='body'),
}

async function describeProjectAppSecurity(request: DescribeProjectAppSecurityRequest): DescribeProjectAppSecurityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeProjectAppSecurity', 'POST', '/', 'json', false, 'json', request);
}

model DescribeShadowSchemaRequest {
  deviceModel: string(name='DeviceModel', position='Query'),
  isSimple?: boolean(name='IsSimple', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeShadowSchemaResponseBody = {
  requestId?: string(name='RequestId'),
  schema?: string(name='Schema'),
}

model DescribeShadowSchemaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeShadowSchemaResponseBody(name='body'),
}

async function describeShadowSchema(request: DescribeShadowSchemaRequest): DescribeShadowSchemaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeShadowSchema', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVersionDeviceGroupRequest {
  id: string(name='Id', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeVersionDeviceGroupResponseBody = {
  deviceGroup?: {
    description?: string(name='Description'),
    gmtCreate?: string(name='GmtCreate'),
    gmtModify?: string(name='GmtModify'),
    id?: long(name='Id'),
    maxCount?: string(name='MaxCount'),
    name?: string(name='Name'),
  }(name='DeviceGroup'),
  requestId?: string(name='RequestId'),
}

model DescribeVersionDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVersionDeviceGroupResponseBody(name='body'),
}

async function describeVersionDeviceGroup(request: DescribeVersionDeviceGroupRequest): DescribeVersionDeviceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVersionDeviceGroup', 'POST', '/', 'json', false, 'json', request);
}

model DiagnosisVersionRequest {
  diagnoseStyle: string(name='DiagnoseStyle', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  idType: string(name='IdType', position='Query'),
  originalId: string(name='OriginalId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  startTime?: string(name='StartTime', position='Query'),
  versionId: string(name='VersionId', position='Query'),
  versionType: string(name='VersionType', position='Query'),
}

model DiagnosisVersionResponseBody = {
  diagnosisResult?: string(name='DiagnosisResult'),
  requestId?: string(name='RequestId'),
}

model DiagnosisVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DiagnosisVersionResponseBody(name='body'),
}

async function diagnosisVersion(request: DiagnosisVersionRequest): DiagnosisVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DiagnosisVersion', 'POST', '/', 'json', false, 'json', request);
}

model ExecuteCameraShootingCommandRequest {
  edgeDeviceId: string(name='EdgeDeviceId', description='终端设备id', position='Query'),
  number?: long(name='Number', description='拍摄数量', position='Query'),
  projectId: string(name='ProjectId', description='项目ID', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  shootingType: long(name='ShootingType', description='拍摄类型，0-图片，1-视频', position='Query'),
  time?: long(name='Time', description='拍照间隔/视频时长，单位为s', position='Query'),
}

model ExecuteCameraShootingCommandResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  shootingRecord?: {
    id?: long(name='Id', description='主键ID'),
    number?: long(name='Number', description='拍摄数量'),
    recordTime?: long(name='RecordTime', description='记录时间'),
    shootingType?: long(name='ShootingType', description='拍摄类型，0-图片，1-视频'),
    status?: long(name='Status', description='状态：0-未完成，1-已完成'),
    time?: long(name='Time', description='拍照间隔/视频时长，单位为s'),
  }(name='ShootingRecord'),
}

model ExecuteCameraShootingCommandResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteCameraShootingCommandResponseBody(name='body'),
}

async function executeCameraShootingCommand(request: ExecuteCameraShootingCommandRequest): ExecuteCameraShootingCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteCameraShootingCommand', 'POST', '/', 'json', false, 'json', request);
}

model ExecuteRemoteCommandRequest {
  clientId: string(name='ClientId', position='Query'),
  command?: long(name='Command', description='指令消息ID', position='Query'),
  params?: string(name='Params', description='指令入参字符串', position='Query'),
  projectId: string(name='ProjectId', description='项目ID', position='Query'),
}

model ExecuteRemoteCommandResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model ExecuteRemoteCommandResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteRemoteCommandResponseBody(name='body'),
}

async function executeRemoteCommand(request: ExecuteRemoteCommandRequest): ExecuteRemoteCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteRemoteCommand', 'POST', '/', 'json', false, 'json', request);
}

model ExecuteVehicleControlRequest {
  command: string(name='Command', position='Query'),
  commandParam?: string(name='CommandParam', position='Query'),
  deviceId?: string(name='DeviceId', position='Query'),
  projectId?: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  vin?: string(name='Vin', position='Query'),
}

model ExecuteVehicleControlResponseBody = {
  executionInfo?: {
    executionId?: string(name='ExecutionId'),
  }(name='ExecutionInfo'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ExecuteVehicleControlResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteVehicleControlResponseBody(name='body'),
}

async function executeVehicleControl(request: ExecuteVehicleControlRequest): ExecuteVehicleControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteVehicleControl', 'POST', '/', 'json', false, 'json', request);
}

model FindAppVersionsRequest {
  appId?: string(name='AppId', position='Query'),
  deviceModelId?: string(name='DeviceModelId', position='Query'),
  pageIndex: int32(name='PageIndex', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  remark?: string(name='Remark', position='Query'),
  status?: string(name='Status', position='Query'),
  versionId?: string(name='VersionId', position='Query'),
}

model FindAppVersionsResponseBody = {
  appVersionList?: {
    items?: [ 
      {
        appId?: string(name='AppId'),
        appName?: string(name='AppName'),
        appPackageName?: string(name='AppPackageName'),
        appVersion?: string(name='AppVersion'),
        gmtCreate?: string(name='GmtCreate'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        gmtModify?: string(name='GmtModify'),
        gmtModifyTimestamp?: long(name='GmtModifyTimestamp'),
        id?: long(name='Id'),
        installType?: string(name='InstallType'),
        isAllowNewInstall?: string(name='IsAllowNewInstall'),
        isForceUpgrade?: string(name='IsForceUpgrade'),
        isNeedRestart?: string(name='IsNeedRestart'),
        isSilentUpgrade?: string(name='IsSilentUpgrade'),
        restartAppParam?: string(name='RestartAppParam'),
        restartAppType?: string(name='RestartAppType'),
        restartType?: string(name='RestartType'),
        status?: string(name='Status'),
        statusName?: string(name='StatusName'),
        versionCode?: string(name='VersionCode'),
      }
    ](name='Items'),
    totalCount?: int32(name='TotalCount'),
  }(name='AppVersionList'),
  requestId?: string(name='RequestId'),
}

model FindAppVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: FindAppVersionsResponseBody(name='body'),
}

async function findAppVersions(request: FindAppVersionsRequest): FindAppVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FindAppVersions', 'POST', '/', 'json', false, 'json', request);
}

model FindCustomizedFiltersRequest {
  name?: string(name='Name', position='Query'),
  pageIndex: int32(name='PageIndex', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  versionId: string(name='VersionId', position='Query'),
  versionType: string(name='VersionType', position='Query'),
}

model FindCustomizedFiltersResponseBody = {
  customizedFilterList?: {
    items?: [ 
      {
        blackWhiteType?: string(name='BlackWhiteType'),
        gmtCreate?: string(name='GmtCreate'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        gmtModify?: string(name='GmtModify'),
        gmtModifyTimestamp?: long(name='GmtModifyTimestamp'),
        id?: long(name='Id'),
        name?: string(name='Name'),
        value?: string(name='Value'),
        valueCompareType?: string(name='ValueCompareType'),
      }
    ](name='Items'),
    totalCount?: int32(name='TotalCount'),
  }(name='CustomizedFilterList'),
  requestId?: string(name='RequestId'),
}

model FindCustomizedFiltersResponse = {
  headers: map[string]string(name='headers'),
  body: FindCustomizedFiltersResponseBody(name='body'),
}

async function findCustomizedFilters(request: FindCustomizedFiltersRequest): FindCustomizedFiltersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FindCustomizedFilters', 'POST', '/', 'json', false, 'json', request);
}

model FindCustomizedPropertiesRequest {
  name?: string(name='Name', position='Query'),
  pageIndex: int32(name='PageIndex', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  versionId: string(name='VersionId', position='Query'),
  versionType: string(name='VersionType', position='Query'),
}

model FindCustomizedPropertiesResponseBody = {
  customizedPropertyList?: {
    items?: [ 
      {
        gmtCreate?: string(name='GmtCreate'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        id?: long(name='Id'),
        name?: string(name='Name'),
        value?: string(name='Value'),
      }
    ](name='Items'),
    totalCount?: int32(name='TotalCount'),
  }(name='CustomizedPropertyList'),
  requestId?: string(name='RequestId'),
}

model FindCustomizedPropertiesResponse = {
  headers: map[string]string(name='headers'),
  body: FindCustomizedPropertiesResponseBody(name='body'),
}

async function findCustomizedProperties(request: FindCustomizedPropertiesRequest): FindCustomizedPropertiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FindCustomizedProperties', 'POST', '/', 'json', false, 'json', request);
}

model FindOsVersionsRequest {
  deviceModelId?: string(name='DeviceModelId', position='Query'),
  isMilestone?: string(name='IsMilestone', position='Query'),
  pageIndex: int32(name='PageIndex', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  remark?: string(name='Remark', position='Query'),
  status?: string(name='Status', position='Query'),
  systemVersion?: string(name='SystemVersion', position='Query'),
  versionId?: string(name='VersionId', position='Query'),
}

model FindOsVersionsResponseBody = {
  osVersionList?: {
    items?: [ 
      {
        deviceModelId?: string(name='DeviceModelId'),
        deviceModelName?: string(name='DeviceModelName'),
        gmtCreate?: string(name='GmtCreate'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        gmtModify?: string(name='GmtModify'),
        gmtModifyTimestamp?: long(name='GmtModifyTimestamp'),
        id?: long(name='Id'),
        isForceNightUpgrade?: string(name='IsForceNightUpgrade'),
        isForceReboot?: string(name='IsForceReboot'),
        isForceUpgrade?: string(name='IsForceUpgrade'),
        isMilestone?: string(name='IsMilestone'),
        isSilentUpgrade?: string(name='IsSilentUpgrade'),
        remark?: string(name='Remark'),
        status?: string(name='Status'),
        statusName?: string(name='StatusName'),
        systemVersion?: string(name='SystemVersion'),
      }
    ](name='Items'),
    totalCount?: int32(name='TotalCount'),
  }(name='OsVersionList'),
  requestId?: string(name='RequestId'),
}

model FindOsVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: FindOsVersionsResponseBody(name='body'),
}

async function findOsVersions(request: FindOsVersionsRequest): FindOsVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FindOsVersions', 'POST', '/', 'json', false, 'json', request);
}

model FindPrepublishPassedDevicesRequest {
  deviceId?: string(name='DeviceId', position='Query'),
  pageIndex: int32(name='PageIndex', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  prepublishId: string(name='PrepublishId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model FindPrepublishPassedDevicesResponseBody = {
  deviceList?: {
    items?: [ 
      {
        deviceId?: string(name='DeviceId'),
        gmtCreate?: string(name='GmtCreate'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
      }
    ](name='Items'),
    totalCount?: int32(name='TotalCount'),
  }(name='DeviceList'),
  requestId?: string(name='RequestId'),
}

model FindPrepublishPassedDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: FindPrepublishPassedDevicesResponseBody(name='body'),
}

async function findPrepublishPassedDevices(request: FindPrepublishPassedDevicesRequest): FindPrepublishPassedDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FindPrepublishPassedDevices', 'POST', '/', 'json', false, 'json', request);
}

model FindPrepublishesByParentIdRequest {
  parentId: int32(name='ParentId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model FindPrepublishesByParentIdResponseBody = {
  prepublishList?: {
    items?: [ 
      {
        barrierCount?: string(name='BarrierCount'),
        deviceModelId?: string(name='DeviceModelId'),
        gmtCreate?: string(name='GmtCreate'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        gmtModify?: string(name='GmtModify'),
        gmtModifyTimestamp?: long(name='GmtModifyTimestamp'),
        id?: long(name='Id'),
        isActive?: string(name='IsActive'),
        isTotalPrepublish?: string(name='IsTotalPrepublish'),
        name?: string(name='Name'),
        parentId?: string(name='ParentId'),
        versionId?: string(name='VersionId'),
        versionType?: string(name='VersionType'),
      }
    ](name='Items'),
    totalCount?: int32(name='TotalCount'),
  }(name='PrepublishList'),
  requestId?: string(name='RequestId'),
}

model FindPrepublishesByParentIdResponse = {
  headers: map[string]string(name='headers'),
  body: FindPrepublishesByParentIdResponseBody(name='body'),
}

async function findPrepublishesByParentId(request: FindPrepublishesByParentIdRequest): FindPrepublishesByParentIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FindPrepublishesByParentId', 'POST', '/', 'json', false, 'json', request);
}

model FindPrepublishesByVersionIdRequest {
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  versionId: int32(name='VersionId', position='Query'),
  versionType: string(name='VersionType', position='Query'),
}

model FindPrepublishesByVersionIdResponseBody = {
  prepublishList?: [ 
    {
      barrierCount?: string(name='BarrierCount'),
      deviceModelId?: string(name='DeviceModelId'),
      deviceModelName?: string(name='DeviceModelName'),
      gmtCreate?: string(name='GmtCreate'),
      gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
      gmtModify?: string(name='GmtModify'),
      gmtModifyTimestamp?: long(name='GmtModifyTimestamp'),
      id?: string(name='Id'),
      isActive?: string(name='IsActive'),
      isTotalPrepublish?: string(name='IsTotalPrepublish'),
      name?: string(name='Name'),
      parentId?: string(name='ParentId'),
      passedCount?: string(name='PassedCount'),
      versionId?: string(name='VersionId'),
      versionType?: string(name='VersionType'),
    }
  ](name='PrepublishList'),
  requestId?: string(name='RequestId'),
}

model FindPrepublishesByVersionIdResponse = {
  headers: map[string]string(name='headers'),
  body: FindPrepublishesByVersionIdResponseBody(name='body'),
}

async function findPrepublishesByVersionId(request: FindPrepublishesByVersionIdRequest): FindPrepublishesByVersionIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FindPrepublishesByVersionId', 'POST', '/', 'json', false, 'json', request);
}

model FindVersionBlackDevicesRequest {
  deviceId?: string(name='DeviceId', position='Query'),
  originalId?: string(name='OriginalId', position='Query'),
  pageIndex: int32(name='PageIndex', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  versionId: string(name='VersionId', position='Query'),
  versionType: string(name='VersionType', position='Query'),
}

model FindVersionBlackDevicesResponseBody = {
  deviceList?: {
    items?: [ 
      {
        deviceId?: string(name='DeviceId'),
        gmtCreate?: string(name='GmtCreate'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        id?: long(name='Id'),
        idType?: string(name='IdType'),
        originalId?: string(name='OriginalId'),
      }
    ](name='Items'),
    totalCount?: int32(name='TotalCount'),
  }(name='DeviceList'),
  requestId?: string(name='RequestId'),
}

model FindVersionBlackDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: FindVersionBlackDevicesResponseBody(name='body'),
}

async function findVersionBlackDevices(request: FindVersionBlackDevicesRequest): FindVersionBlackDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FindVersionBlackDevices', 'POST', '/', 'json', false, 'json', request);
}

model FindVersionDeviceGroupsRequest {
  deviceId?: string(name='DeviceId', position='Query'),
  name?: string(name='Name', position='Query'),
  originalId?: string(name='OriginalId', position='Query'),
  pageIndex: int32(name='PageIndex', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model FindVersionDeviceGroupsResponseBody = {
  deviceGroupList?: {
    items?: [ 
      {
        description?: string(name='Description'),
        gmtCreate?: string(name='GmtCreate'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        gmtModify?: string(name='GmtModify'),
        gmtModifyTimestamp?: long(name='GmtModifyTimestamp'),
        id?: long(name='Id'),
        maxCount?: string(name='MaxCount'),
        name?: string(name='Name'),
      }
    ](name='Items'),
    totalCount?: int32(name='TotalCount'),
  }(name='DeviceGroupList'),
  requestId?: string(name='RequestId'),
}

model FindVersionDeviceGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: FindVersionDeviceGroupsResponseBody(name='body'),
}

async function findVersionDeviceGroups(request: FindVersionDeviceGroupsRequest): FindVersionDeviceGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FindVersionDeviceGroups', 'POST', '/', 'json', false, 'json', request);
}

model FindVersionGroupDevicesRequest {
  deviceGroupId: string(name='DeviceGroupId', position='Query'),
  deviceId?: string(name='DeviceId', position='Query'),
  originalId?: string(name='OriginalId', position='Query'),
  pageIndex: int32(name='PageIndex', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model FindVersionGroupDevicesResponseBody = {
  groupDeviceList?: {
    items?: [ 
      {
        deviceId?: string(name='DeviceId'),
        gmtCreate?: string(name='GmtCreate'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        id?: string(name='Id'),
        idType?: string(name='IdType'),
        originalId?: string(name='OriginalId'),
      }
    ](name='Items'),
    totalCount?: int32(name='TotalCount'),
  }(name='GroupDeviceList'),
  requestId?: string(name='RequestId'),
}

model FindVersionGroupDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: FindVersionGroupDevicesResponseBody(name='body'),
}

async function findVersionGroupDevices(request: FindVersionGroupDevicesRequest): FindVersionGroupDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FindVersionGroupDevices', 'POST', '/', 'json', false, 'json', request);
}

model FindVersionMessageSendRecordsRequest {
  messageType?: string(name='MessageType', position='Query'),
  pageIndex: int32(name='PageIndex', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  versionId?: string(name='VersionId', position='Query'),
  versionType?: string(name='VersionType', position='Query'),
}

model FindVersionMessageSendRecordsResponseBody = {
  messageSendRecordList?: {
    items?: [ 
      {
        failedCount?: string(name='FailedCount'),
        gmtCreate?: string(name='GmtCreate'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        id?: long(name='Id'),
        messageType?: string(name='MessageType'),
        result?: string(name='Result'),
        resultDesc?: string(name='ResultDesc'),
        skippedCount?: string(name='SkippedCount'),
        succeededCount?: string(name='SucceededCount'),
        targetId?: string(name='TargetId'),
        versionId?: string(name='VersionId'),
      }
    ](name='Items'),
    totalCount?: int32(name='TotalCount'),
  }(name='MessageSendRecordList'),
  requestId?: string(name='RequestId'),
}

model FindVersionMessageSendRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: FindVersionMessageSendRecordsResponseBody(name='body'),
}

async function findVersionMessageSendRecords(request: FindVersionMessageSendRecordsRequest): FindVersionMessageSendRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FindVersionMessageSendRecords', 'POST', '/', 'json', false, 'json', request);
}

model FindVersionMessagesRequest {
  deviceId?: string(name='DeviceId', position='Query'),
  messageType?: string(name='MessageType', position='Query'),
  pageIndex: int32(name='PageIndex', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  sendRecordId?: string(name='SendRecordId', position='Query'),
  testId?: string(name='TestId', position='Query'),
  versionId: string(name='VersionId', position='Query'),
  versionType: string(name='VersionType', position='Query'),
}

model FindVersionMessagesResponseBody = {
  messageList?: {
    items?: [ 
      {
        deviceId?: string(name='DeviceId'),
        gmtCreate?: string(name='GmtCreate'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        gmtModify?: string(name='GmtModify'),
        gmtModifyTimestamp?: long(name='GmtModifyTimestamp'),
        id?: long(name='Id'),
        messageId?: string(name='MessageId'),
        status?: string(name='Status'),
        statusDesc?: string(name='StatusDesc'),
        testId?: string(name='TestId'),
        versionId?: string(name='VersionId'),
      }
    ](name='Items'),
    totalCount?: int32(name='TotalCount'),
  }(name='MessageList'),
  requestId?: string(name='RequestId'),
}

model FindVersionMessagesResponse = {
  headers: map[string]string(name='headers'),
  body: FindVersionMessagesResponseBody(name='body'),
}

async function findVersionMessages(request: FindVersionMessagesRequest): FindVersionMessagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FindVersionMessages', 'POST', '/', 'json', false, 'json', request);
}

model FindVersionTestsRequest {
  pageIndex: int32(name='PageIndex', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  versionId?: string(name='VersionId', position='Query'),
  versionType?: string(name='VersionType', position='Query'),
}

model FindVersionTestsResponseBody = {
  requestId?: string(name='RequestId'),
  versionTestList?: {
    items?: [ 
      {
        description?: string(name='Description'),
        deviceGroupId?: string(name='DeviceGroupId'),
        deviceGroupName?: string(name='DeviceGroupName'),
        failedCount?: string(name='FailedCount'),
        gmtCreate?: string(name='GmtCreate'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        gmtModify?: string(name='GmtModify'),
        gmtModifyTimestamp?: long(name='GmtModifyTimestamp'),
        id?: long(name='Id'),
        name?: string(name='Name'),
        skippedCount?: string(name='SkippedCount'),
        succeededCount?: string(name='SucceededCount'),
        versionId?: string(name='VersionId'),
        versionType?: string(name='VersionType'),
      }
    ](name='Items'),
    totalCount?: int32(name='TotalCount'),
  }(name='VersionTestList'),
}

model FindVersionTestsResponse = {
  headers: map[string]string(name='headers'),
  body: FindVersionTestsResponseBody(name='body'),
}

async function findVersionTests(request: FindVersionTestsRequest): FindVersionTestsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FindVersionTests', 'POST', '/', 'json', false, 'json', request);
}

model FindVersionWhiteDevicesRequest {
  deviceId?: string(name='DeviceId', position='Query'),
  originalId?: string(name='OriginalId', position='Query'),
  pageIndex: int32(name='PageIndex', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  versionId: string(name='VersionId', position='Query'),
  versionType: string(name='VersionType', position='Query'),
}

model FindVersionWhiteDevicesResponseBody = {
  deviceList?: {
    items?: [ 
      {
        deviceId?: string(name='DeviceId'),
        gmtCreate?: string(name='GmtCreate'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        id?: long(name='Id'),
        idType?: string(name='IdType'),
        originalId?: string(name='OriginalId'),
      }
    ](name='Items'),
    totalCount?: int32(name='TotalCount'),
  }(name='DeviceList'),
  requestId?: string(name='RequestId'),
}

model FindVersionWhiteDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: FindVersionWhiteDevicesResponseBody(name='body'),
}

async function findVersionWhiteDevices(request: FindVersionWhiteDevicesRequest): FindVersionWhiteDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FindVersionWhiteDevices', 'POST', '/', 'json', false, 'json', request);
}

model GenerateAssistFileUploadUrlRequest {
  deviceId: string(name='DeviceId', position='Body'),
  filename: string(name='Filename', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model GenerateAssistFileUploadUrlResponseBody = {
  fileKey?: string(name='FileKey'),
  requestId?: string(name='RequestId'),
  uploadUrl?: string(name='UploadUrl'),
}

model GenerateAssistFileUploadUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateAssistFileUploadUrlResponseBody(name='body'),
}

async function generateAssistFileUploadUrl(request: GenerateAssistFileUploadUrlRequest): GenerateAssistFileUploadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateAssistFileUploadUrl', 'POST', '/', 'json', true, 'form', request);
}

model GenerateFunctionFileUploadMetaRequest {
  fileName: string(name='FileName', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model GenerateFunctionFileUploadMetaResponseBody = {
  requestId?: string(name='RequestId'),
  uploadMeta?: {
    objectKey?: string(name='ObjectKey'),
    postObjectPolicy?: {
      accessId?: string(name='AccessId'),
      expire?: string(name='Expire'),
      host?: string(name='Host'),
      policy?: string(name='Policy'),
      signature?: string(name='Signature'),
    }(name='PostObjectPolicy'),
    securityToken?: string(name='SecurityToken'),
  }(name='UploadMeta'),
}

model GenerateFunctionFileUploadMetaResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateFunctionFileUploadMetaResponseBody(name='body'),
}

async function generateFunctionFileUploadMeta(request: GenerateFunctionFileUploadMetaRequest): GenerateFunctionFileUploadMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateFunctionFileUploadMeta', 'POST', '/', 'json', false, 'json', request);
}

model GenerateOssPostPolicyRequest {
  accessId: string(name='AccessId', position='Query'),
  accessKey: string(name='AccessKey', position='Query'),
  ext: string(name='Ext', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model GenerateOssPostPolicyResponseBody = {
  ossPostPolicy?: {
    accessId?: string(name='AccessId'),
    expire?: string(name='Expire'),
    host?: string(name='Host'),
    policy?: string(name='Policy'),
    signature?: string(name='Signature'),
  }(name='OssPostPolicy'),
  requestId?: string(name='RequestId'),
}

model GenerateOssPostPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateOssPostPolicyResponseBody(name='body'),
}

async function generateOssPostPolicy(request: GenerateOssPostPolicyRequest): GenerateOssPostPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateOssPostPolicy', 'POST', '/', 'json', false, 'json', request);
}

model GenerateOssUploadMetaRequest {
  ext: string(name='Ext', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model GenerateOssUploadMetaResponseBody = {
  ossUploadMeta?: {
    accessKeyId?: string(name='AccessKeyId'),
    accessKeySecret?: string(name='AccessKeySecret'),
    bucket?: string(name='Bucket'),
    objectKey?: string(name='ObjectKey'),
    securityToken?: string(name='SecurityToken'),
  }(name='OssUploadMeta'),
  requestId?: string(name='RequestId'),
}

model GenerateOssUploadMetaResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateOssUploadMetaResponseBody(name='body'),
}

async function generateOssUploadMeta(request: GenerateOssUploadMetaRequest): GenerateOssUploadMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateOssUploadMeta', 'POST', '/', 'json', false, 'json', request);
}

model GenerateSdkDownloadInfoRequest {
  appId: string(name='AppId', position='Query'),
  certFileObjectKey: string(name='CertFileObjectKey', position='Query'),
  osType: int32(name='OsType', position='Query'),
  pkgName: string(name='PkgName', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  sdks: string(name='Sdks', position='Query'),
}

model GenerateSdkDownloadInfoResponseBody = {
  requestId?: string(name='RequestId'),
  sdkDownloadInfo?: {
    url?: string(name='Url'),
  }(name='SdkDownloadInfo'),
}

model GenerateSdkDownloadInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateSdkDownloadInfoResponseBody(name='body'),
}

async function generateSdkDownloadInfo(request: GenerateSdkDownloadInfoRequest): GenerateSdkDownloadInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateSdkDownloadInfo', 'POST', '/', 'json', false, 'json', request);
}

model GenerateSysAppDownloadInfoRequest {
  certFileObjectKey?: string(name='CertFileObjectKey', position='Query'),
  osType: int32(name='OsType', position='Query'),
  pkgName: string(name='PkgName', position='Query'),
  plugins: string(name='Plugins', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  signMode: string(name='SignMode', position='Query'),
}

model GenerateSysAppDownloadInfoResponseBody = {
  requestId?: string(name='RequestId'),
  sysAppDownloadInfo?: {
    url?: string(name='Url'),
  }(name='SysAppDownloadInfo'),
}

model GenerateSysAppDownloadInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateSysAppDownloadInfoResponseBody(name='body'),
}

async function generateSysAppDownloadInfo(request: GenerateSysAppDownloadInfoRequest): GenerateSysAppDownloadInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateSysAppDownloadInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetCommercialVehicleDeviceRequest {
  clientId: string(name='ClientId', position='Query'),
  projectId: string(name='ProjectId', description='项目ID', position='Query'),
}

model GetCommercialVehicleDeviceResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  vehicleDevice?: {
    clientId?: string(name='ClientId'),
    createTime?: long(name='CreateTime'),
    deviceModel?: string(name='DeviceModel'),
    hardwareId?: string(name='HardwareId'),
    imei?: string(name='Imei'),
    lastAuthTime?: long(name='LastAuthTime'),
    manufacturerId?: string(name='ManufacturerId'),
    modifiedTime?: long(name='ModifiedTime'),
    onlineStatus?: long(name='OnlineStatus'),
    plateColor?: long(name='PlateColor'),
    plateNumber?: string(name='PlateNumber'),
    softVersion?: string(name='SoftVersion'),
    vin?: string(name='Vin'),
  }(name='VehicleDevice'),
}

model GetCommercialVehicleDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: GetCommercialVehicleDeviceResponseBody(name='body'),
}

async function getCommercialVehicleDevice(request: GetCommercialVehicleDeviceRequest): GetCommercialVehicleDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCommercialVehicleDevice', 'POST', '/', 'json', false, 'json', request);
}

model GetCommercialVehicleTrackRequest {
  clientId: string(name='ClientId', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  projectId: string(name='ProjectId', description='项目ID', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model GetCommercialVehicleTrackResponseBody = {
  points?: [ 
    {
      altitude?: string(name='Altitude'),
      direction?: long(name='Direction'),
      latitude?: string(name='Latitude'),
      longitude?: string(name='Longitude'),
      speed?: long(name='Speed'),
      time?: long(name='Time'),
    }
  ](name='Points'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model GetCommercialVehicleTrackResponse = {
  headers: map[string]string(name='headers'),
  body: GetCommercialVehicleTrackResponseBody(name='body'),
}

async function getCommercialVehicleTrack(request: GetCommercialVehicleTrackRequest): GetCommercialVehicleTrackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCommercialVehicleTrack', 'POST', '/', 'json', false, 'json', request);
}

model GetDeviceAppUpdateFunnelEventsRequest {
  idType?: string(name='IdType', position='Query'),
  originalId?: string(name='OriginalId', position='Query'),
  packageName?: string(name='PackageName', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  targetVersionCode?: string(name='TargetVersionCode', position='Query'),
}

model GetDeviceAppUpdateFunnelEventsResponseBody = {
  eventList?: [ 
    {
      deviceId?: string(name='DeviceId'),
      event?: string(name='Event'),
      packageName?: string(name='PackageName'),
      reportTime?: string(name='ReportTime'),
      reportTimestamp?: long(name='ReportTimestamp'),
      targetVersionCode?: string(name='TargetVersionCode'),
      tenantId?: string(name='TenantId'),
    }
  ](name='EventList'),
  requestId?: string(name='RequestId'),
}

model GetDeviceAppUpdateFunnelEventsResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceAppUpdateFunnelEventsResponseBody(name='body'),
}

async function getDeviceAppUpdateFunnelEvents(request: GetDeviceAppUpdateFunnelEventsRequest): GetDeviceAppUpdateFunnelEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceAppUpdateFunnelEvents', 'POST', '/', 'json', false, 'json', request);
}

model GetDeviceSystemUpdateFunnelEventsRequest {
  idType?: string(name='IdType', position='Query'),
  originalId?: string(name='OriginalId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  targetVersion?: string(name='TargetVersion', position='Query'),
}

model GetDeviceSystemUpdateFunnelEventsResponseBody = {
  eventList?: [ 
    {
      deviceId?: string(name='DeviceId'),
      event?: string(name='Event'),
      reportTime?: string(name='ReportTime'),
      reportTimestamp?: long(name='ReportTimestamp'),
      targetVersion?: string(name='TargetVersion'),
      tenantId?: string(name='TenantId'),
    }
  ](name='EventList'),
  requestId?: string(name='RequestId'),
}

model GetDeviceSystemUpdateFunnelEventsResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceSystemUpdateFunnelEventsResponseBody(name='body'),
}

async function getDeviceSystemUpdateFunnelEvents(request: GetDeviceSystemUpdateFunnelEventsRequest): GetDeviceSystemUpdateFunnelEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceSystemUpdateFunnelEvents', 'POST', '/', 'json', false, 'json', request);
}

model GetFenceScopeRequest {
  fenceId: long(name='FenceId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model GetFenceScopeResponseBody = {
  fenceScope?: {
    brandId?: string(name='BrandId'),
    ctime?: string(name='Ctime'),
    fenceId?: long(name='FenceId'),
    modelId?: string(name='ModelId'),
    mtime?: string(name='Mtime'),
  }(name='FenceScope'),
  requestId?: string(name='RequestId'),
}

model GetFenceScopeResponse = {
  headers: map[string]string(name='headers'),
  body: GetFenceScopeResponseBody(name='body'),
}

async function getFenceScope(request: GetFenceScopeRequest): GetFenceScopeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFenceScope', 'POST', '/', 'json', false, 'json', request);
}

model GetGeoFenceDetailRequest {
  fenceId: long(name='FenceId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model GetGeoFenceDetailResponseBody = {
  geoFencedetail?: {
    alarmCondition?: string(name='AlarmCondition'),
    area?: float(name='Area'),
    cityCode?: string(name='CityCode'),
    countryCode?: string(name='CountryCode'),
    ctime?: long(name='Ctime'),
    deleted?: boolean(name='Deleted'),
    description?: string(name='Description'),
    fenceId?: long(name='FenceId'),
    fenceName?: string(name='FenceName'),
    mtime?: long(name='Mtime'),
    points?: string(name='Points'),
    provinceCode?: string(name='ProvinceCode'),
    type?: int32(name='Type'),
    valid?: boolean(name='Valid'),
  }(name='GeoFencedetail'),
  requestId?: string(name='RequestId'),
}

model GetGeoFenceDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetGeoFenceDetailResponseBody(name='body'),
}

async function getGeoFenceDetail(request: GetGeoFenceDetailRequest): GetGeoFenceDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGeoFenceDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetNamespaceDataRequest {
  accountId?: string(name='AccountId', position='Query'),
  accountType?: string(name='AccountType', position='Query'),
  authType: string(name='AuthType', position='Query'),
  deviceId?: string(name='DeviceId', position='Query'),
  deviceIdType?: string(name='DeviceIdType', position='Query'),
  namespace: string(name='Namespace', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetNamespaceDataResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetNamespaceDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetNamespaceDataResponseBody(name='body'),
}

async function getNamespaceData(request: GetNamespaceDataRequest): GetNamespaceDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNamespaceData', 'POST', '/', 'json', false, 'json', request);
}

model GetNamespaceStatisticsDataRequest {
  dimensionType: string(name='DimensionType', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  namespace: string(name='Namespace', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  startTime?: string(name='StartTime', position='Query'),
}

model GetNamespaceStatisticsDataResponseBody = {
  requestId?: string(name='RequestId'),
  statistics?: {
    categories?: [ long ](name='Categories'),
    series?: [ 
      {
        data?: [ long ](name='Data'),
        name?: string(name='Name'),
      }
    ](name='Series'),
  }(name='Statistics'),
}

model GetNamespaceStatisticsDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetNamespaceStatisticsDataResponseBody(name='body'),
}

async function getNamespaceStatisticsData(request: GetNamespaceStatisticsDataRequest): GetNamespaceStatisticsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNamespaceStatisticsData', 'POST', '/', 'json', false, 'json', request);
}

model GetOssUploadMetaRequest {
  ext: string(name='Ext', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model GetOssUploadMetaResponseBody = {
  ossUploadMeta?: {
    accessKey?: string(name='AccessKey'),
    host?: string(name='Host'),
    objectKey?: string(name='ObjectKey'),
    policy?: string(name='Policy'),
    securityToken?: string(name='SecurityToken'),
    signature?: string(name='Signature'),
  }(name='OssUploadMeta'),
  requestId?: string(name='RequestId'),
}

model GetOssUploadMetaResponse = {
  headers: map[string]string(name='headers'),
  body: GetOssUploadMetaResponseBody(name='body'),
}

async function getOssUploadMeta(request: GetOssUploadMetaRequest): GetOssUploadMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOssUploadMeta', 'POST', '/', 'json', false, 'json', request);
}

model GetVehicleControlResultRequest {
  deviceId: string(name='DeviceId', position='Query'),
  executionId: string(name='ExecutionId', position='Query'),
  projectId?: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetVehicleControlResultResponseBody = {
  executionInfo?: {
    status?: string(name='Status'),
    subStatus?: string(name='SubStatus'),
  }(name='ExecutionInfo'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetVehicleControlResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetVehicleControlResultResponseBody(name='body'),
}

async function getVehicleControlResult(request: GetVehicleControlResultRequest): GetVehicleControlResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVehicleControlResult', 'GET', '/', 'json', false, 'json', request);
}

model GetVehicleTrackRequest {
  deviceId?: string(name='DeviceId', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  projectId: string(name='ProjectId', description='项目ID', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  startTime: long(name='StartTime', minimum=0, maximum=100000000000000000, position='Query'),
  vin?: string(name='Vin', position='Query'),
}

model GetVehicleTrackResponseBody = {
  points?: [ 
    {
      altitude?: float(name='Altitude'),
      latitude?: float(name='Latitude'),
      longitude?: float(name='Longitude'),
      speed?: int32(name='Speed'),
      updateTime?: long(name='UpdateTime'),
    }
  ](name='Points'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetVehicleTrackResponse = {
  headers: map[string]string(name='headers'),
  body: GetVehicleTrackResponseBody(name='body'),
}

async function getVehicleTrack(request: GetVehicleTrackRequest): GetVehicleTrackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVehicleTrack', 'GET', '/', 'json', false, 'json', request);
}

model InvokeFunctionRequest {
  env: int32(name='Env', position='Query'),
  fileId: long(name='FileId', position='Query'),
  functionName: string(name='FunctionName', position='Query'),
  parameters: string(name='Parameters', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model InvokeFunctionResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    backEndRequestId?: string(name='BackEndRequestId'),
    output?: string(name='Output'),
  }(name='Result'),
}

model InvokeFunctionResponse = {
  headers: map[string]string(name='headers'),
  body: InvokeFunctionResponseBody(name='body'),
}

async function invokeFunction(request: InvokeFunctionRequest): InvokeFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InvokeFunction', 'POST', '/', 'json', false, 'json', request);
}

model ListAlarmRecordRequest {
  beginTime?: long(name='BeginTime', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  fenceId: long(name='FenceId', position='Query'),
  offset?: int32(name='Offset', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  size?: int32(name='Size', position='Query'),
}

model ListAlarmRecordResponseBody = {
  recordList?: [ 
    {
      action?: string(name='Action'),
      alarmPointLatitude?: float(name='AlarmPointLatitude'),
      alarmPointLongitude?: float(name='AlarmPointLongitude'),
      ctime?: long(name='Ctime'),
      deviceId?: string(name='DeviceId'),
      mtime?: long(name='Mtime'),
    }
  ](name='RecordList'),
  requestId?: string(name='RequestId'),
}

model ListAlarmRecordResponse = {
  headers: map[string]string(name='headers'),
  body: ListAlarmRecordResponseBody(name='body'),
}

async function listAlarmRecord(request: ListAlarmRecordRequest): ListAlarmRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAlarmRecord', 'POST', '/', 'json', false, 'json', request);
}

model ListApiGatewayAppsRequest {
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListApiGatewayAppsResponseBody = {
  apiGatewayApps?: [ 
    {
      gatewayAppId?: string(name='GatewayAppId'),
      gatewayAppKey?: string(name='GatewayAppKey'),
      gatewayAppSecret?: string(name='GatewayAppSecret'),
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      id?: long(name='Id'),
      projectId?: string(name='ProjectId'),
      status?: int32(name='Status'),
      userId?: string(name='UserId'),
    }
  ](name='ApiGatewayApps'),
  requestId?: string(name='RequestId'),
}

model ListApiGatewayAppsResponse = {
  headers: map[string]string(name='headers'),
  body: ListApiGatewayAppsResponseBody(name='body'),
}

async function listApiGatewayApps(request: ListApiGatewayAppsRequest): ListApiGatewayAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApiGatewayApps', 'POST', '/', 'json', false, 'json', request);
}

model ListAppsRequest {
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListAppsResponseBody = {
  apps?: [ 
    {
      appKey?: string(name='AppKey'),
      appName?: string(name='AppName'),
      appPackage?: string(name='AppPackage'),
      osType?: int32(name='OsType'),
    }
  ](name='Apps'),
  requestId?: string(name='RequestId'),
}

model ListAppsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAppsResponseBody(name='body'),
}

async function listApps(request: ListAppsRequest): ListAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApps', 'POST', '/', 'json', false, 'json', request);
}

model ListAssistActionDetailsRequest {
  actionTimestamp: string(name='ActionTimestamp', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListAssistActionDetailsResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      action?: string(name='Action'),
      createdAt?: long(name='CreatedAt'),
      data?: string(name='Data'),
      deviceId?: string(name='DeviceId'),
      ID?: string(name='ID'),
      timestamp?: string(name='Timestamp'),
      type?: string(name='Type'),
      updatedAt?: long(name='UpdatedAt'),
    }
  ](name='Results'),
}

model ListAssistActionDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAssistActionDetailsResponseBody(name='body'),
}

async function listAssistActionDetails(request: ListAssistActionDetailsRequest): ListAssistActionDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAssistActionDetails', 'GET', '/', 'json', false, 'json', request);
}

model ListAssistDevicesRequest {
  condition?: string(name='Condition', position='Query'),
  pageIndex: int32(name='PageIndex', position='Query'),
  perPage: int32(name='PerPage', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListAssistDevicesResponseBody = {
  devices?: [ 
    {
      accessTime?: long(name='AccessTime'),
      deviceId?: string(name='DeviceId'),
      deviceName?: string(name='DeviceName'),
      hardwareId?: string(name='HardwareId'),
      serialNumber?: string(name='SerialNumber'),
      UUID?: string(name='UUID'),
      VIN?: string(name='VIN'),
    }
  ](name='Devices'),
  pageIndex?: int32(name='PageIndex'),
  perPage?: int32(name='PerPage'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListAssistDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAssistDevicesResponseBody(name='body'),
}

async function listAssistDevices(request: ListAssistDevicesRequest): ListAssistDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAssistDevices', 'GET', '/', 'json', false, 'json', request);
}

model ListAssistHistoriesRequest {
  condition?: string(name='Condition', position='Query'),
  pageIndex: int32(name='PageIndex', position='Query'),
  perPage: int32(name='PerPage', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListAssistHistoriesResponseBody = {
  histories?: [ 
    {
      deviceId?: string(name='DeviceId'),
      deviceName?: string(name='DeviceName'),
      endTime?: long(name='EndTime'),
      hardwareId?: string(name='HardwareId'),
      ID?: string(name='ID'),
      serialNumber?: string(name='SerialNumber'),
      startTime?: long(name='StartTime'),
      UID?: string(name='UID'),
      UNAME?: string(name='UNAME'),
      UUID?: string(name='UUID'),
      VIN?: string(name='VIN'),
    }
  ](name='Histories'),
  pageIndex?: int32(name='PageIndex'),
  perPage?: int32(name='PerPage'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListAssistHistoriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAssistHistoriesResponseBody(name='body'),
}

async function listAssistHistories(request: ListAssistHistoriesRequest): ListAssistHistoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAssistHistories', 'GET', '/', 'json', false, 'json', request);
}

model ListAssistHistoryDetailsRequest {
  assistId: string(name='AssistId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListAssistHistoryDetailsResponseBody = {
  actions?: [ 
    {
      action?: string(name='Action'),
      assistId?: string(name='AssistId'),
      createdAt?: long(name='CreatedAt'),
      ID?: string(name='ID'),
      timestamp?: string(name='Timestamp'),
      updatedAt?: long(name='UpdatedAt'),
    }
  ](name='Actions'),
  requestId?: string(name='RequestId'),
}

model ListAssistHistoryDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAssistHistoryDetailsResponseBody(name='body'),
}

async function listAssistHistoryDetails(request: ListAssistHistoryDetailsRequest): ListAssistHistoryDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAssistHistoryDetails', 'GET', '/', 'json', false, 'json', request);
}

model ListCameraShootingAttachmentsRequest {
  edgeDeviceId: string(name='EdgeDeviceId', description='终端设备id', position='Query'),
  projectId: string(name='ProjectId', description='项目ID', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  shootingRecordId: long(name='ShootingRecordId', description='拍摄记录ID', position='Query'),
}

model ListCameraShootingAttachmentsResponseBody = {
  attachments?: [ 
    {
      downloadUrl?: string(name='DownloadUrl', description='附件地址'),
      fileId?: string(name='FileId', description='文件id'),
      fileLength?: long(name='FileLength', description='文件长度，单位为字节'),
      fileName?: string(name='FileName', description='文件名'),
      fileType?: long(name='FileType', description='文件类型，0-图片，1-视频'),
      id?: long(name='Id', description='主键id'),
      shootingTime?: long(name='ShootingTime', description='拍摄时间'),
    }
  ](name='Attachments'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model ListCameraShootingAttachmentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCameraShootingAttachmentsResponseBody(name='body'),
}

async function listCameraShootingAttachments(request: ListCameraShootingAttachmentsRequest): ListCameraShootingAttachmentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCameraShootingAttachments', 'POST', '/', 'json', false, 'json', request);
}

model ListCameraShootingRecordsRequest {
  edgeDeviceId: string(name='EdgeDeviceId', description='终端设备id', position='Query'),
  endTime?: long(name='EndTime', description='截止时间', position='Query'),
  pageIndex: long(name='PageIndex', description='查询开始页号', position='Query'),
  pageSize: long(name='PageSize', description='每页记录数', position='Query'),
  projectId: string(name='ProjectId', description='项目ID', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  shootingType?: long(name='ShootingType', description='拍摄类型，0-图片，1-视频', position='Query'),
  startTime?: long(name='StartTime', description='起始时间', position='Query'),
}

model ListCameraShootingRecordsResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  shootingRecords: {
    list?: [ 
      {
        id?: long(name='Id', description='主键ID'),
        number?: long(name='Number', description='拍摄数量'),
        recordTime?: long(name='RecordTime', description='记录时间'),
        shootingType?: long(name='ShootingType', description='拍摄类型，0-图片，1-视频'),
        status?: long(name='Status', description='状态：0-未完成，1-已完成'),
        time?: long(name='Time', description='拍照间隔/视频时长，单位为s'),
      }
    ](name='List'),
    pagination?: {
      pageIndex?: long(name='PageIndex'),
      pageSize?: long(name='PageSize'),
      totalCount?: long(name='TotalCount'),
      totalPageCount?: long(name='TotalPageCount'),
    }(name='Pagination'),
  }(name='ShootingRecords'),
}

model ListCameraShootingRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCameraShootingRecordsResponseBody(name='body'),
}

async function listCameraShootingRecords(request: ListCameraShootingRecordsRequest): ListCameraShootingRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCameraShootingRecords', 'POST', '/', 'json', false, 'json', request);
}

model ListClientPluginVersionsRequest {
  osType: string(name='OsType', position='Query'),
  pkgName: string(name='PkgName', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListClientPluginVersionsResponseBody = {
  clientPluginVersions?: [ 
    {
      downloadUrl?: string(name='DownloadUrl'),
      id?: long(name='Id'),
      pkgName?: string(name='PkgName'),
      size?: long(name='Size'),
      version?: string(name='Version'),
      versionCode?: long(name='VersionCode'),
    }
  ](name='ClientPluginVersions'),
  requestId?: string(name='RequestId'),
}

model ListClientPluginVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListClientPluginVersionsResponseBody(name='body'),
}

async function listClientPluginVersions(request: ListClientPluginVersionsRequest): ListClientPluginVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClientPluginVersions', 'POST', '/', 'json', false, 'json', request);
}

model ListClientPluginsRequest {
  osType: string(name='OsType', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListClientPluginsResponseBody = {
  clientPlugins?: [ 
    {
      name?: string(name='Name'),
      pkgName?: string(name='PkgName'),
    }
  ](name='ClientPlugins'),
  requestId?: string(name='RequestId'),
}

model ListClientPluginsResponse = {
  headers: map[string]string(name='headers'),
  body: ListClientPluginsResponseBody(name='body'),
}

async function listClientPlugins(request: ListClientPluginsRequest): ListClientPluginsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClientPlugins', 'POST', '/', 'json', false, 'json', request);
}

model ListClientSdksRequest {
  osType: string(name='OsType', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListClientSdksResponseBody = {
  clientSdks?: [ 
    {
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      id?: long(name='Id'),
      name?: string(name='Name'),
      osType?: int32(name='OsType'),
      pkgName?: string(name='PkgName'),
      pkgType?: int32(name='PkgType'),
    }
  ](name='ClientSdks'),
  requestId?: string(name='RequestId'),
}

model ListClientSdksResponse = {
  headers: map[string]string(name='headers'),
  body: ListClientSdksResponseBody(name='body'),
}

async function listClientSdks(request: ListClientSdksRequest): ListClientSdksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClientSdks', 'POST', '/', 'json', false, 'json', request);
}

model ListCommercialVehicleDevicesRequest {
  clientId?: string(name='ClientId', position='Query'),
  hardwareId?: string(name='HardwareId', position='Query'),
  pageIndex: long(name='PageIndex', description='查询开始页', position='Query'),
  pageSize: long(name='PageSize', description='每页记录数', position='Query'),
  projectId: string(name='ProjectId', description='项目ID', position='Query'),
}

model ListCommercialVehicleDevicesResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  vehicleDevices: {
    list?: [ 
      {
        clientId?: long(name='ClientId'),
        createTime?: long(name='CreateTime'),
        deviceModel?: string(name='DeviceModel'),
        hardwareId?: string(name='HardwareId'),
        modifiedTime?: long(name='ModifiedTime'),
        onlineStatus?: long(name='OnlineStatus'),
        plateNumber?: string(name='PlateNumber'),
      }
    ](name='List'),
    pagination?: {
      pageIndex?: long(name='PageIndex'),
      pageSize?: long(name='PageSize'),
      totalCount?: long(name='TotalCount'),
      totalPageCount?: long(name='TotalPageCount'),
    }(name='Pagination'),
  }(name='VehicleDevices', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
}

model ListCommercialVehicleDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListCommercialVehicleDevicesResponseBody(name='body'),
}

async function listCommercialVehicleDevices(request: ListCommercialVehicleDevicesRequest): ListCommercialVehicleDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCommercialVehicleDevices', 'POST', '/', 'json', false, 'json', request);
}

model ListConnectLogsRequest {
  deviceId: string(name='DeviceId', position='Query'),
  endTime?: int32(name='EndTime', position='Query'),
  pageIndex?: int32(name='PageIndex', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  startTime?: int32(name='StartTime', position='Query'),
}

model ListConnectLogsResponseBody = {
  logs?: {
    list?: [ 
      {
        deviceId?: string(name='DeviceId'),
        ip?: string(name='Ip'),
        netWorking?: string(name='NetWorking'),
        sid?: string(name='Sid'),
        status?: string(name='Status'),
        systemVersion?: string(name='SystemVersion'),
        terminal?: string(name='Terminal'),
        time?: long(name='Time'),
      }
    ](name='List'),
    pagination?: {
      pageIndex?: int32(name='PageIndex'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
      totalPageCount?: int32(name='TotalPageCount'),
    }(name='Pagination'),
  }(name='Logs'),
  requestId?: string(name='RequestId'),
}

model ListConnectLogsResponse = {
  headers: map[string]string(name='headers'),
  body: ListConnectLogsResponseBody(name='body'),
}

async function listConnectLogs(request: ListConnectLogsRequest): ListConnectLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListConnectLogs', 'POST', '/', 'json', false, 'json', request);
}

model ListDeployedFunctionsRequest {
  fileId: long(name='FileId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListDeployedFunctionsResponseBody = {
  functions?: [ 
    {
      fileId?: long(name='FileId'),
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      id?: long(name='Id'),
      name?: string(name='Name'),
      projectId?: string(name='ProjectId'),
    }
  ](name='Functions'),
  requestId?: string(name='RequestId'),
}

model ListDeployedFunctionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeployedFunctionsResponseBody(name='body'),
}

async function listDeployedFunctions(request: ListDeployedFunctionsRequest): ListDeployedFunctionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDeployedFunctions', 'POST', '/', 'json', false, 'json', request);
}

model ListDeviceBrandsRequest {
  deviceBrand?: string(name='DeviceBrand', position='Query'),
  deviceBrandId?: long(name='DeviceBrandId', position='Query'),
  length?: string(name='Length', position='Query'),
  projectId?: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  start?: string(name='Start', position='Query'),
}

model ListDeviceBrandsResponseBody = {
  deviceBrands?: [ 
    {
      description?: string(name='Description'),
      deviceBrand?: string(name='DeviceBrand'),
      deviceBrandId?: long(name='DeviceBrandId'),
      manufacture?: string(name='Manufacture'),
      projectId?: string(name='ProjectId'),
    }
  ](name='DeviceBrands'),
  requestId?: string(name='RequestId'),
}

model ListDeviceBrandsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeviceBrandsResponseBody(name='body'),
}

async function listDeviceBrands(request: ListDeviceBrandsRequest): ListDeviceBrandsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDeviceBrands', 'GET', '/', 'json', false, 'json', request);
}

model ListDeviceModelRequest {
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListDeviceModelResponseBody = {
  modelList?: [ 
    {
      canCreateDeviceId?: int32(name='CanCreateDeviceId'),
      description?: string(name='Description'),
      deviceBrand?: string(name='DeviceBrand'),
      deviceModel?: string(name='DeviceModel'),
      deviceModelId?: long(name='DeviceModelId'),
      deviceType?: string(name='DeviceType'),
      hardwareType?: string(name='HardwareType'),
      initUsageType?: int32(name='InitUsageType'),
      initUsageTypeDesc?: string(name='InitUsageTypeDesc'),
      osPlatform?: string(name='OsPlatform'),
      projectId?: string(name='ProjectId'),
      securityChip?: string(name='SecurityChip'),
    }
  ](name='ModelList'),
  requestId?: string(name='RequestId'),
}

model ListDeviceModelResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeviceModelResponseBody(name='body'),
}

async function listDeviceModel(request: ListDeviceModelRequest): ListDeviceModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDeviceModel', 'GET', '/', 'json', false, 'json', request);
}

model ListDeviceModelsRequest {
  deviceBrand?: string(name='DeviceBrand', position='Query'),
  deviceBrandId?: long(name='DeviceBrandId', position='Query'),
  deviceModel?: string(name='DeviceModel', position='Query'),
  deviceModelId?: int32(name='DeviceModelId', position='Query'),
  length?: string(name='Length', position='Query'),
  projectId?: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  start?: string(name='Start', position='Query'),
}

model ListDeviceModelsResponseBody = {
  deviceModels?: [ 
    {
      canCreateDeviceId?: int32(name='CanCreateDeviceId'),
      description?: string(name='Description'),
      deviceBrand?: string(name='DeviceBrand'),
      deviceLogoUrl?: string(name='DeviceLogoUrl'),
      deviceModel?: string(name='DeviceModel'),
      deviceModelId?: long(name='DeviceModelId'),
      deviceName?: string(name='DeviceName'),
      deviceType?: string(name='DeviceType'),
      hardwareType?: string(name='HardwareType'),
      initUsageType?: int32(name='InitUsageType'),
      initUsageTypeDesc?: string(name='InitUsageTypeDesc'),
      objectKey?: string(name='ObjectKey'),
      osPlatform?: string(name='OsPlatform'),
      projectId?: string(name='ProjectId'),
      securityChip?: string(name='SecurityChip'),
    }
  ](name='DeviceModels'),
  requestId?: string(name='RequestId'),
}

model ListDeviceModelsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeviceModelsResponseBody(name='body'),
}

async function listDeviceModels(request: ListDeviceModelsRequest): ListDeviceModelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDeviceModels', 'GET', '/', 'json', false, 'json', request);
}

model ListDeviceTypesRequest {
  projectId?: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListDeviceTypesResponseBody = {
  deviceTypes?: [ 
    {
      deviceType?: string(name='DeviceType'),
      name?: string(name='Name'),
    }
  ](name='DeviceTypes'),
  requestId?: string(name='RequestId'),
}

model ListDeviceTypesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeviceTypesResponseBody(name='body'),
}

async function listDeviceTypes(request: ListDeviceTypesRequest): ListDeviceTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDeviceTypes', 'GET', '/', 'json', false, 'json', request);
}

model ListDevicesRequest {
  deviceModel?: string(name='DeviceModel', position='Query'),
  deviceModelId?: int32(name='DeviceModelId', position='Query'),
  length?: string(name='Length', position='Query'),
  projectId?: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  start?: string(name='Start', position='Query'),
}

model ListDevicesResponseBody = {
  devices?: [ 
    {
      deviceBrand?: string(name='DeviceBrand'),
      deviceId?: string(name='DeviceId'),
      deviceModel?: string(name='DeviceModel'),
      deviceModelId?: long(name='DeviceModelId'),
      deviceType?: string(name='DeviceType'),
      hardwareId?: string(name='HardwareId'),
      macAddress?: string(name='MacAddress'),
      name?: string(name='Name'),
      projectId?: string(name='ProjectId'),
      region?: string(name='Region'),
      serialNumber?: string(name='SerialNumber'),
      softwareId?: string(name='SoftwareId'),
      status?: string(name='Status'),
      usageType?: int32(name='UsageType'),
      usageTypeDesc?: string(name='UsageTypeDesc'),
      uuid?: string(name='Uuid'),
      vin?: string(name='Vin'),
    }
  ](name='Devices'),
  requestId?: string(name='RequestId'),
}

model ListDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDevicesResponseBody(name='body'),
}

async function listDevices(request: ListDevicesRequest): ListDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDevices', 'GET', '/', 'json', false, 'json', request);
}

model ListEdgeDevicesRequest {
  edgeDeviceName?: string(name='EdgeDeviceName', position='Query'),
  edgeDeviceType?: long(name='EdgeDeviceType', position='Query'),
  hostDeviceId: string(name='HostDeviceId', position='Query'),
  pageIndex: long(name='PageIndex', description='查询开始页', position='Query'),
  pageSize: long(name='PageSize', description='每页记录数', position='Query'),
  projectId: string(name='ProjectId', description='项目ID', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListEdgeDevicesResponseBody = {
  edgeDevices: {
    list?: [ 
      {
        activateTime?: long(name='ActivateTime'),
        edgeDeviceId?: string(name='EdgeDeviceId'),
        edgeDeviceName?: string(name='EdgeDeviceName'),
        edgeDeviceType?: long(name='EdgeDeviceType'),
        lastOnlineTime?: long(name='LastOnlineTime'),
        onlineStatus?: long(name='OnlineStatus'),
      }
    ](name='List'),
    pagination?: {
      pageIndex?: long(name='PageIndex'),
      pageSize?: long(name='PageSize'),
      totalCount?: long(name='TotalCount'),
      totalPageCount?: long(name='TotalPageCount'),
    }(name='Pagination'),
  }(name='EdgeDevices', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model ListEdgeDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListEdgeDevicesResponseBody(name='body'),
}

async function listEdgeDevices(request: ListEdgeDevicesRequest): ListEdgeDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEdgeDevices', 'POST', '/', 'json', false, 'json', request);
}

model ListFunctionExecuteLogRequest {
  env: int32(name='Env', position='Query'),
  fileId: long(name='FileId', position='Query'),
  functionName: string(name='FunctionName', position='Query'),
  pageIndex?: int32(name='PageIndex', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListFunctionExecuteLogResponseBody = {
  logList?: {
    logs?: [ 
      {
        backEndRequestId?: string(name='BackEndRequestId'),
        message?: string(name='Message'),
      }
    ](name='Logs'),
    pagination?: {
      hasNextPage?: boolean(name='HasNextPage'),
      pageIndex?: int32(name='PageIndex'),
      pageSize?: int32(name='PageSize'),
    }(name='Pagination'),
  }(name='LogList'),
  requestId?: string(name='RequestId'),
}

model ListFunctionExecuteLogResponse = {
  headers: map[string]string(name='headers'),
  body: ListFunctionExecuteLogResponseBody(name='body'),
}

async function listFunctionExecuteLog(request: ListFunctionExecuteLogRequest): ListFunctionExecuteLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFunctionExecuteLog', 'POST', '/', 'json', false, 'json', request);
}

model ListFunctionFilesRequest {
  fileType: int32(name='FileType', position='Query'),
  pageIndex?: int32(name='PageIndex', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListFunctionFilesResponseBody = {
  fileList?: {
    files?: [ 
      {
        contentId?: long(name='ContentId'),
        description?: string(name='Description'),
        gmtCreate?: long(name='GmtCreate'),
        gmtModified?: long(name='GmtModified'),
        id?: long(name='Id'),
        name?: string(name='Name'),
        productionDeployStatus?: int32(name='ProductionDeployStatus'),
        productionDeployTime?: long(name='ProductionDeployTime'),
        sandboxDeployStatus?: int32(name='SandboxDeployStatus'),
        sandboxDeployTime?: long(name='SandboxDeployTime'),
        status?: int32(name='Status'),
      }
    ](name='Files'),
    pagination?: {
      pageIndex?: int32(name='PageIndex'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
      totalPageCount?: int32(name='TotalPageCount'),
    }(name='Pagination'),
  }(name='FileList'),
  requestId?: string(name='RequestId'),
}

model ListFunctionFilesResponse = {
  headers: map[string]string(name='headers'),
  body: ListFunctionFilesResponseBody(name='body'),
}

async function listFunctionFiles(request: ListFunctionFilesRequest): ListFunctionFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFunctionFiles', 'POST', '/', 'json', false, 'json', request);
}

model ListFunctionFilesByProjectIdRequest {
  pageIndex?: int32(name='PageIndex', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListFunctionFilesByProjectIdResponseBody = {
  files?: [ 
    {
      contentId?: long(name='ContentId'),
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      id?: long(name='Id'),
      name?: string(name='Name'),
      status?: int32(name='Status'),
      type?: int32(name='Type'),
    }
  ](name='Files'),
  requestId?: string(name='RequestId'),
}

model ListFunctionFilesByProjectIdResponse = {
  headers: map[string]string(name='headers'),
  body: ListFunctionFilesByProjectIdResponseBody(name='body'),
}

async function listFunctionFilesByProjectId(request: ListFunctionFilesByProjectIdRequest): ListFunctionFilesByProjectIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFunctionFilesByProjectId', 'POST', '/', 'json', false, 'json', request);
}

model ListGeoFenceRequest {
  cityCode?: string(name='CityCode', position='Query'),
  countryCode?: string(name='CountryCode', position='Query'),
  offset?: int32(name='Offset', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  provinceCode?: string(name='ProvinceCode', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  size?: int32(name='Size', position='Query'),
  valid?: boolean(name='Valid', position='Query'),
}

model ListGeoFenceResponseBody = {
  fenceList?: [ 
    {
      cityCode?: string(name='CityCode'),
      countryCode?: string(name='CountryCode'),
      ctime?: long(name='Ctime'),
      deleted?: boolean(name='Deleted'),
      fenceId?: long(name='FenceId'),
      fenceName?: string(name='FenceName'),
      mtime?: long(name='Mtime'),
      provinceCode?: string(name='ProvinceCode'),
      valid?: boolean(name='Valid'),
    }
  ](name='FenceList'),
  requestId?: string(name='RequestId'),
}

model ListGeoFenceResponse = {
  headers: map[string]string(name='headers'),
  body: ListGeoFenceResponseBody(name='body'),
}

async function listGeoFence(request: ListGeoFenceRequest): ListGeoFenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGeoFence', 'POST', '/', 'json', false, 'json', request);
}

model ListGeoFenceDetailRequest {
  cityCode?: string(name='CityCode', position='Query'),
  countryCode?: string(name='CountryCode', position='Query'),
  offset?: int32(name='Offset', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  provinceCode?: string(name='ProvinceCode', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  size?: int32(name='Size', position='Query'),
}

model ListGeoFenceDetailResponseBody = {
  fenceList?: [ 
    {
      alarmCondition?: string(name='AlarmCondition'),
      area?: float(name='Area'),
      cityCode?: string(name='CityCode'),
      countryCode?: string(name='CountryCode'),
      ctime?: long(name='Ctime'),
      deleted?: boolean(name='Deleted'),
      description?: string(name='Description'),
      fenceId?: long(name='FenceId'),
      fenceName?: string(name='FenceName'),
      mtime?: long(name='Mtime'),
      points?: string(name='Points'),
      provinceCode?: string(name='ProvinceCode'),
      type?: int32(name='Type'),
      valid?: boolean(name='Valid'),
    }
  ](name='FenceList'),
  requestId?: string(name='RequestId'),
}

model ListGeoFenceDetailResponse = {
  headers: map[string]string(name='headers'),
  body: ListGeoFenceDetailResponseBody(name='body'),
}

async function listGeoFenceDetail(request: ListGeoFenceDetailRequest): ListGeoFenceDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGeoFenceDetail', 'POST', '/', 'json', false, 'json', request);
}

model ListHostDevicesRequest {
  deviceId?: string(name='DeviceId', position='Query'),
  deviceName?: string(name='DeviceName', position='Query'),
  pageIndex: long(name='PageIndex', description='查询开始页', position='Query'),
  pageSize: long(name='PageSize', description='每页记录数', position='Query'),
  projectId: string(name='ProjectId', description='项目ID', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  serialNumber?: string(name='SerialNumber', position='Query'),
}

model ListHostDevicesResponseBody = {
  hostDevices: {
    list?: [ 
      {
        activateTime?: long(name='ActivateTime'),
        deviceId?: string(name='DeviceId'),
        deviceModel?: string(name='DeviceModel'),
        deviceName?: string(name='DeviceName'),
        ip?: string(name='Ip'),
        serialNumber?: string(name='SerialNumber'),
        status?: long(name='Status'),
      }
    ](name='List'),
    pagination?: {
      pageIndex?: long(name='PageIndex'),
      pageSize?: long(name='PageSize'),
      totalCount?: long(name='TotalCount'),
      totalPageCount?: long(name='TotalPageCount'),
    }(name='Pagination'),
  }(name='HostDevices', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model ListHostDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListHostDevicesResponseBody(name='body'),
}

async function listHostDevices(request: ListHostDevicesRequest): ListHostDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHostDevices', 'POST', '/', 'json', false, 'json', request);
}

model ListMessageAcksRequest {
  deviceId?: string(name='DeviceId', position='Query'),
  messageId?: long(name='MessageId', position='Query'),
  pageIndex?: int32(name='PageIndex', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListMessageAcksResponseBody = {
  messageAcks?: {
    list?: [ 
      {
        ackTime?: long(name='AckTime'),
        deviceId?: string(name='DeviceId'),
        mid?: long(name='Mid'),
      }
    ](name='List'),
    pagination?: {
      pageIndex?: int32(name='PageIndex'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
      totalPageCount?: int32(name='TotalPageCount'),
    }(name='Pagination'),
  }(name='MessageAcks'),
  requestId?: string(name='RequestId'),
}

model ListMessageAcksResponse = {
  headers: map[string]string(name='headers'),
  body: ListMessageAcksResponseBody(name='body'),
}

async function listMessageAcks(request: ListMessageAcksRequest): ListMessageAcksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMessageAcks', 'POST', '/', 'json', false, 'json', request);
}

model ListMessageReceiversRequest {
  messageId: string(name='MessageId', position='Query'),
  pageIndex?: int32(name='PageIndex', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListMessageReceiversResponseBody = {
  messageReceivers?: {
    list?: [ 
      {
        mid?: long(name='Mid'),
        type?: string(name='Type'),
        value?: string(name='Value'),
      }
    ](name='List'),
    pagination?: {
      pageIndex?: int32(name='PageIndex'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
      totalPageCount?: int32(name='TotalPageCount'),
    }(name='Pagination'),
  }(name='MessageReceivers'),
  requestId?: string(name='RequestId'),
}

model ListMessageReceiversResponse = {
  headers: map[string]string(name='headers'),
  body: ListMessageReceiversResponseBody(name='body'),
}

async function listMessageReceivers(request: ListMessageReceiversRequest): ListMessageReceiversResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMessageReceivers', 'POST', '/', 'json', false, 'json', request);
}

model ListMqttClientSubscriptionsRequest {
  appKey: string(name='AppKey', position='Query'),
  clientId: string(name='ClientId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListMqttClientSubscriptionsResponseBody = {
  clientSubscriptions?: {
    list?: [ 
      {
        qoS?: int32(name='QoS'),
        topic?: string(name='Topic'),
      }
    ](name='List'),
    pagination?: {
      pageIndex?: int32(name='PageIndex'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
      totalPageCount?: int32(name='TotalPageCount'),
    }(name='Pagination'),
  }(name='ClientSubscriptions'),
  requestId?: string(name='RequestId'),
}

model ListMqttClientSubscriptionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListMqttClientSubscriptionsResponseBody(name='body'),
}

async function listMqttClientSubscriptions(request: ListMqttClientSubscriptionsRequest): ListMqttClientSubscriptionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMqttClientSubscriptions', 'POST', '/', 'json', false, 'json', request);
}

model ListMqttMessageLogsRequest {
  appKey: string(name='AppKey', position='Query'),
  clientId?: string(name='ClientId', position='Query'),
  endTime: int32(name='EndTime', minimum=0, maximum=2147483647, position='Query'),
  mid?: string(name='Mid', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  startTime: int32(name='StartTime', minimum=0, maximum=2147483647, position='Query'),
  topic?: string(name='Topic', position='Query'),
  type: string(name='Type', position='Query'),
}

model ListMqttMessageLogsResponseBody = {
  requestId?: string(name='RequestId'),
  traces?: {
    list?: [ 
      {
        action?: string(name='Action'),
        clientId?: string(name='ClientId'),
        clientMid?: string(name='ClientMid'),
        mid?: string(name='Mid'),
        time?: long(name='Time'),
        topic?: string(name='Topic'),
        type?: string(name='Type'),
      }
    ](name='List'),
    pagination?: {
      pageIndex?: int32(name='PageIndex'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
      totalPageCount?: int32(name='TotalPageCount'),
    }(name='Pagination'),
  }(name='Traces'),
}

model ListMqttMessageLogsResponse = {
  headers: map[string]string(name='headers'),
  body: ListMqttMessageLogsResponseBody(name='body'),
}

async function listMqttMessageLogs(request: ListMqttMessageLogsRequest): ListMqttMessageLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMqttMessageLogs', 'POST', '/', 'json', false, 'json', request);
}

model ListMqttRootTopicsRequest {
  appKey: string(name='AppKey', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListMqttRootTopicsResponseBody = {
  requestId?: string(name='RequestId'),
  rootTopics?: {
    list?: [ 
      {
        appKey?: string(name='AppKey'),
        createTime?: int32(name='CreateTime'),
        queueName?: string(name='QueueName'),
        rootTopic?: string(name='RootTopic'),
        type?: string(name='Type'),
      }
    ](name='List'),
    pagination?: {
      pageIndex?: int32(name='PageIndex'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
      totalPageCount?: int32(name='TotalPageCount'),
    }(name='Pagination'),
  }(name='RootTopics'),
}

model ListMqttRootTopicsResponse = {
  headers: map[string]string(name='headers'),
  body: ListMqttRootTopicsResponseBody(name='body'),
}

async function listMqttRootTopics(request: ListMqttRootTopicsRequest): ListMqttRootTopicsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMqttRootTopics', 'POST', '/', 'json', false, 'json', request);
}

model ListNamespacesRequest {
  authType?: string(name='AuthType', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListNamespacesResponseBody = {
  namespaces?: [ 
    {
      authType?: int32(name='AuthType'),
      description?: string(name='Description'),
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      name?: string(name='Name'),
      namespace?: string(name='Namespace'),
      projectId?: string(name='ProjectId'),
      userId?: string(name='UserId'),
    }
  ](name='Namespaces'),
  requestId?: string(name='RequestId'),
}

model ListNamespacesResponse = {
  headers: map[string]string(name='headers'),
  body: ListNamespacesResponseBody(name='body'),
}

async function listNamespaces(request: ListNamespacesRequest): ListNamespacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNamespaces', 'POST', '/', 'json', false, 'json', request);
}

model ListOfflineMessagesRequest {
  pageIndex?: int32(name='PageIndex', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  type: string(name='Type', position='Query'),
  value: string(name='Value', position='Query'),
}

model ListOfflineMessagesResponseBody = {
  offlineMessages?: {
    list?: [ 
      {
        expiredTime?: long(name='ExpiredTime'),
        gmtCreate?: long(name='GmtCreate'),
        mid?: long(name='Mid'),
      }
    ](name='List'),
    pagination?: {
      pageIndex?: int32(name='PageIndex'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
      totalPageCount?: int32(name='TotalPageCount'),
    }(name='Pagination'),
  }(name='OfflineMessages'),
  requestId?: string(name='RequestId'),
}

model ListOfflineMessagesResponse = {
  headers: map[string]string(name='headers'),
  body: ListOfflineMessagesResponseBody(name='body'),
}

async function listOfflineMessages(request: ListOfflineMessagesRequest): ListOfflineMessagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOfflineMessages', 'POST', '/', 'json', false, 'json', request);
}

model ListOpenAccountLinksRequest {
  identityId?: string(name='IdentityId', position='Query'),
  idp?: string(name='Idp', position='Query'),
  openId?: string(name='OpenId', position='Query'),
  projectId?: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListOpenAccountLinksResponseBody = {
  openAccounts?: [ 
    {
      aliyunId?: string(name='AliyunId'),
      createAccessKey?: string(name='CreateAccessKey'),
      displayName?: string(name='DisplayName'),
      identityId?: string(name='IdentityId'),
      idp?: string(name='Idp'),
      loginId?: string(name='LoginId'),
      mobile?: string(name='Mobile'),
      openId?: string(name='OpenId'),
      region?: string(name='Region'),
      status?: int32(name='Status'),
      type?: int32(name='Type'),
    }
  ](name='OpenAccounts'),
  requestId?: string(name='RequestId'),
}

model ListOpenAccountLinksResponse = {
  headers: map[string]string(name='headers'),
  body: ListOpenAccountLinksResponseBody(name='body'),
}

async function listOpenAccountLinks(request: ListOpenAccountLinksRequest): ListOpenAccountLinksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOpenAccountLinks', 'GET', '/', 'json', false, 'json', request);
}

model ListOpenAccountsRequest {
  displayName?: string(name='DisplayName', position='Query'),
  email?: string(name='Email', position='Query'),
  length?: int32(name='Length', position='Query'),
  mobile?: string(name='Mobile', position='Query'),
  projectId?: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  start?: int32(name='Start', position='Query'),
}

model ListOpenAccountsResponseBody = {
  openAccounts?: [ 
    {
      aliyunId?: string(name='AliyunId'),
      createAccessKey?: string(name='CreateAccessKey'),
      displayName?: string(name='DisplayName'),
      identityId?: string(name='IdentityId'),
      idp?: string(name='Idp'),
      loginId?: string(name='LoginId'),
      mobile?: string(name='Mobile'),
      openId?: string(name='OpenId'),
      region?: string(name='Region'),
      status?: int32(name='Status'),
      type?: int32(name='Type'),
    }
  ](name='OpenAccounts'),
  requestId?: string(name='RequestId'),
}

model ListOpenAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: ListOpenAccountsResponseBody(name='body'),
}

async function listOpenAccounts(request: ListOpenAccountsRequest): ListOpenAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOpenAccounts', 'GET', '/', 'json', false, 'json', request);
}

model ListPreChecksRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model ListPreChecksResponseBody = {
  preChecks?: [ 
    {
      key?: string(name='Key'),
      link?: string(name='Link'),
      price?: string(name='Price'),
      state?: string(name='State'),
    }
  ](name='PreChecks'),
  requestId?: string(name='RequestId'),
}

model ListPreChecksResponse = {
  headers: map[string]string(name='headers'),
  body: ListPreChecksResponseBody(name='body'),
}

async function listPreChecks(request: ListPreChecksRequest): ListPreChecksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPreChecks', 'POST', '/', 'json', false, 'json', request);
}

model ListProjectAppsRequest {
  keywords?: string(name='Keywords', position='Query'),
  pageIndex?: int32(name='PageIndex', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListProjectAppsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    projectApps?: [ 
      {
        appId?: string(name='AppId'),
        appKey?: string(name='AppKey'),
        appName?: string(name='AppName'),
        appPkgName?: string(name='AppPkgName'),
        appSecret?: string(name='AppSecret'),
        gmtCreate?: long(name='GmtCreate'),
        gmtModified?: long(name='GmtModified'),
        id?: long(name='Id'),
        osType?: int32(name='OsType'),
        projectId?: string(name='ProjectId'),
        status?: int32(name='Status'),
        userId?: string(name='UserId'),
      }
    ](name='ProjectApps'),
    totalCount?: int32(name='TotalCount'),
    totalPage?: int32(name='TotalPage'),
  }(name='Result'),
}

model ListProjectAppsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProjectAppsResponseBody(name='body'),
}

async function listProjectApps(request: ListProjectAppsRequest): ListProjectAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProjectApps', 'POST', '/', 'json', false, 'json', request);
}

model ListProjectsRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model ListProjectsResponseBody = {
  projects?: [ 
    {
      creator?: string(name='Creator'),
      description?: string(name='Description'),
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      id?: long(name='Id'),
      name?: string(name='Name'),
      projectId?: string(name='ProjectId'),
      status?: int32(name='Status'),
      userId?: string(name='UserId'),
    }
  ](name='Projects'),
  requestId?: string(name='RequestId'),
}

model ListProjectsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProjectsResponseBody(name='body'),
}

async function listProjects(request: ListProjectsRequest): ListProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProjects', 'POST', '/', 'json', false, 'json', request);
}

model ListRealTimeLocationByCityRequest {
  cityCode?: string(name='CityCode', position='Query'),
  countryCode?: string(name='CountryCode', position='Query'),
  offset?: int32(name='Offset', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  provinceCode?: string(name='ProvinceCode', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  size?: int32(name='Size', position='Query'),
}

model ListRealTimeLocationByCityResponseBody = {
  locationList?: [ 
    {
      altitude?: float(name='Altitude'),
      angle?: float(name='Angle'),
      deviceId?: string(name='DeviceId'),
      duration?: int32(name='Duration'),
      latitude?: float(name='Latitude'),
      longitude?: float(name='Longitude'),
      speed?: float(name='Speed'),
    }
  ](name='LocationList'),
  requestId?: string(name='RequestId'),
}

model ListRealTimeLocationByCityResponse = {
  headers: map[string]string(name='headers'),
  body: ListRealTimeLocationByCityResponseBody(name='body'),
}

async function listRealTimeLocationByCity(request: ListRealTimeLocationByCityRequest): ListRealTimeLocationByCityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRealTimeLocationByCity', 'POST', '/', 'json', false, 'json', request);
}

model ListRealTimeLocationByDeviceRequest {
  deviceIdList: [ string ](name='DeviceIdList', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model ListRealTimeLocationByDeviceResponseBody = {
  locationList?: [ 
    {
      altitude?: float(name='Altitude'),
      angle?: float(name='Angle'),
      deviceId?: string(name='DeviceId'),
      duration?: int32(name='Duration'),
      latitude?: float(name='Latitude'),
      longitude?: float(name='Longitude'),
      speed?: float(name='Speed'),
    }
  ](name='LocationList'),
  requestId?: string(name='RequestId'),
}

model ListRealTimeLocationByDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ListRealTimeLocationByDeviceResponseBody(name='body'),
}

async function listRealTimeLocationByDevice(request: ListRealTimeLocationByDeviceRequest): ListRealTimeLocationByDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRealTimeLocationByDevice', 'POST', '/', 'json', false, 'json', request);
}

model ListRealTimeLocationByModelRequest {
  brandId?: long(name='BrandId', position='Query'),
  modelId?: long(name='ModelId', position='Query'),
  offset?: int32(name='Offset', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  size?: int32(name='Size', position='Query'),
}

model ListRealTimeLocationByModelResponseBody = {
  locationList?: [ 
    {
      altitude?: float(name='Altitude'),
      angle?: float(name='Angle'),
      deviceId?: string(name='DeviceId'),
      duration?: int32(name='Duration'),
      latitude?: float(name='Latitude'),
      longitude?: float(name='Longitude'),
      speed?: float(name='Speed'),
    }
  ](name='LocationList'),
  requestId?: string(name='RequestId'),
}

model ListRealTimeLocationByModelResponse = {
  headers: map[string]string(name='headers'),
  body: ListRealTimeLocationByModelResponseBody(name='body'),
}

async function listRealTimeLocationByModel(request: ListRealTimeLocationByModelRequest): ListRealTimeLocationByModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRealTimeLocationByModel', 'POST', '/', 'json', false, 'json', request);
}

model ListRpcServicesRequest {
  pageIndex?: int32(name='PageIndex', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListRpcServicesResponseBody = {
  requestId?: string(name='RequestId'),
  rpcServices?: {
    list?: [ 
      {
        appKey?: string(name='AppKey'),
        gmtCreate?: long(name='GmtCreate'),
        gmtModified?: long(name='GmtModified'),
        groupName?: string(name='GroupName'),
        id?: long(name='Id'),
        interfaceName?: string(name='InterfaceName'),
        isDelete?: string(name='IsDelete'),
        methodName?: string(name='MethodName'),
        params?: string(name='Params'),
        type?: string(name='Type'),
        versionCode?: string(name='VersionCode'),
      }
    ](name='List'),
    pagination?: {
      pageIndex?: int32(name='PageIndex'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
      totalPageCount?: int32(name='TotalPageCount'),
    }(name='Pagination'),
  }(name='RpcServices'),
}

model ListRpcServicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRpcServicesResponseBody(name='body'),
}

async function listRpcServices(request: ListRpcServicesRequest): ListRpcServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRpcServices', 'POST', '/', 'json', false, 'json', request);
}

model ListSchemaSubscribesRequest {
  deviceModel?: string(name='DeviceModel', position='Query'),
  pageIndex?: int32(name='PageIndex', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListSchemaSubscribesResponseBody = {
  pageList?: [ 
    {
      list?: [ 
        {
          deviceModel?: string(name='DeviceModel'),
          deviceModelId?: long(name='DeviceModelId'),
          gmtCreate?: long(name='GmtCreate'),
          gmtModified?: long(name='GmtModified'),
          id?: long(name='Id'),
          namespace?: string(name='Namespace'),
          projectId?: string(name='ProjectId'),
          validitySchema?: string(name='ValiditySchema'),
          version?: string(name='Version'),
        }
      ](name='List'),
      pagination?: {
        hasNextPage?: boolean(name='HasNextPage'),
        pageIndex?: int32(name='PageIndex'),
        pageSize?: int32(name='PageSize'),
        simpleSign?: boolean(name='SimpleSign'),
        totalCount?: int32(name='TotalCount'),
        totalPageCount?: int32(name='TotalPageCount'),
      }(name='Pagination'),
    }
  ](name='PageList'),
  requestId?: string(name='RequestId'),
}

model ListSchemaSubscribesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSchemaSubscribesResponseBody(name='body'),
}

async function listSchemaSubscribes(request: ListSchemaSubscribesRequest): ListSchemaSubscribesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSchemaSubscribes', 'GET', '/', 'json', false, 'json', request);
}

model ListServicesRequest {
  regionId: string(name='RegionId', position='Host'),
}

model ListServicesResponseBody = {
  requestId?: string(name='RequestId'),
  serviceList?: [ string ](name='ServiceList'),
}

model ListServicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListServicesResponseBody(name='body'),
}

async function listServices(request: ListServicesRequest): ListServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServices', 'POST', '/', 'json', false, 'json', request);
}

model ListShadowSchemaDeviceModelsRequest {
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListShadowSchemaDeviceModelsResponseBody = {
  modelList?: [ 
    {
      canCreateDeviceId?: int32(name='CanCreateDeviceId'),
      description?: string(name='Description'),
      deviceBrand?: string(name='DeviceBrand'),
      deviceModel?: string(name='DeviceModel'),
      deviceModelId?: long(name='DeviceModelId'),
      deviceType?: string(name='DeviceType'),
      hardwareType?: string(name='HardwareType'),
      initUsageType?: int32(name='InitUsageType'),
      initUsageTypeDesc?: string(name='InitUsageTypeDesc'),
      osPlatform?: string(name='OsPlatform'),
      projectId?: string(name='ProjectId'),
      securityChip?: int32(name='SecurityChip'),
    }
  ](name='ModelList'),
  requestId?: string(name='RequestId'),
}

model ListShadowSchemaDeviceModelsResponse = {
  headers: map[string]string(name='headers'),
  body: ListShadowSchemaDeviceModelsResponseBody(name='body'),
}

async function listShadowSchemaDeviceModels(request: ListShadowSchemaDeviceModelsRequest): ListShadowSchemaDeviceModelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListShadowSchemaDeviceModels', 'GET', '/', 'json', false, 'json', request);
}

model ListShadowSchemasRequest {
  pageIndex?: int32(name='PageIndex', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  queryType?: string(name='QueryType', position='Query'),
  queryValue?: string(name='QueryValue', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListShadowSchemasResponseBody = {
  pageList?: {
    list?: [ 
      {
        authType?: int32(name='AuthType'),
        authTypeDesc?: string(name='AuthTypeDesc'),
        deviceModel?: string(name='DeviceModel'),
        deviceModelId?: long(name='DeviceModelId'),
        gmtCreate?: long(name='GmtCreate'),
        gmtModified?: long(name='GmtModified'),
        id?: long(name='Id'),
        moduleSchema?: string(name='ModuleSchema'),
        namespace?: string(name='Namespace'),
        projectId?: string(name='ProjectId'),
      }
    ](name='List'),
    pagination?: {
      hasNextPage?: boolean(name='HasNextPage'),
      pageIndex?: int32(name='PageIndex'),
      pageSize?: int32(name='PageSize'),
      simpleSign?: boolean(name='SimpleSign'),
      totalCount?: int32(name='TotalCount'),
      totalPageCount?: int32(name='TotalPageCount'),
    }(name='Pagination'),
  }(name='PageList'),
  requestId?: string(name='RequestId'),
}

model ListShadowSchemasResponse = {
  headers: map[string]string(name='headers'),
  body: ListShadowSchemasResponseBody(name='body'),
}

async function listShadowSchemas(request: ListShadowSchemasRequest): ListShadowSchemasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListShadowSchemas', 'POST', '/', 'json', false, 'json', request);
}

model ListSupportFeaturesRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model ListSupportFeaturesResponseBody = {
  requestId?: string(name='RequestId'),
  supportFeatures?: [ 
    {
      name?: string(name='Name'),
    }
  ](name='SupportFeatures'),
}

model ListSupportFeaturesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSupportFeaturesResponseBody(name='body'),
}

async function listSupportFeatures(request: ListSupportFeaturesRequest): ListSupportFeaturesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSupportFeatures', 'POST', '/', 'json', false, 'json', request);
}

model ListTrackByTimeRequest {
  beginTime: long(name='BeginTime', position='Query'),
  deviceId: string(name='DeviceId', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model ListTrackByTimeResponseBody = {
  requestId?: string(name='RequestId'),
  trackPointList?: [ 
    {
      altitude?: float(name='Altitude'),
      angle?: float(name='Angle'),
      latitude?: float(name='Latitude'),
      longitude?: float(name='Longitude'),
      speed?: float(name='Speed'),
      time?: long(name='Time'),
    }
  ](name='TrackPointList'),
}

model ListTrackByTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ListTrackByTimeResponseBody(name='body'),
}

async function listTrackByTime(request: ListTrackByTimeRequest): ListTrackByTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTrackByTime', 'POST', '/', 'json', false, 'json', request);
}

model ListTriggersRequest {
  namespace: string(name='Namespace', position='Query'),
  pageIndex?: int32(name='PageIndex', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListTriggersResponseBody = {
  requestId?: string(name='RequestId'),
  triggerList?: {
    pagination?: {
      pageIndex?: int32(name='PageIndex'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
      totalPageCount?: int32(name='TotalPageCount'),
    }(name='Pagination'),
    triggers?: [ 
      {
        chainedFunctionIds?: string(name='ChainedFunctionIds'),
        functions?: [ 
          {
            fileId?: long(name='FileId'),
            fileName?: string(name='FileName'),
            gmtCreate?: long(name='GmtCreate'),
            gmtModified?: long(name='GmtModified'),
            id?: long(name='Id'),
            name?: string(name='Name'),
          }
        ](name='Functions'),
        gmtCreate?: long(name='GmtCreate'),
        gmtModified?: long(name='GmtModified'),
        id?: long(name='Id'),
        invocationMode?: int32(name='InvocationMode'),
        namespace?: string(name='Namespace'),
        production?: int32(name='Production'),
        sandbox?: int32(name='Sandbox'),
        source?: string(name='Source'),
        status?: int32(name='Status'),
        type?: int32(name='Type'),
      }
    ](name='Triggers'),
  }(name='TriggerList'),
}

model ListTriggersResponse = {
  headers: map[string]string(name='headers'),
  body: ListTriggersResponseBody(name='body'),
}

async function listTriggers(request: ListTriggersRequest): ListTriggersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTriggers', 'POST', '/', 'json', false, 'json', request);
}

model ListUpstreamAppKeyRelationsRequest {
  appServerId: long(name='AppServerId', position='Query'),
  pageIndex?: int32(name='PageIndex', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListUpstreamAppKeyRelationsResponseBody = {
  relationList?: {
    list?: [ 
      {
        appKey?: string(name='AppKey'),
        appName?: string(name='AppName'),
        appPackage?: string(name='AppPackage'),
        gmtCreate?: long(name='GmtCreate'),
        id?: long(name='Id'),
        PAppKey?: string(name='PAppKey'),
        projectId?: string(name='ProjectId'),
      }
    ](name='List'),
    pagination?: {
      pageIndex?: int32(name='PageIndex'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
      totalPageCount?: int32(name='TotalPageCount'),
    }(name='Pagination'),
  }(name='RelationList'),
  requestId?: string(name='RequestId'),
}

model ListUpstreamAppKeyRelationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListUpstreamAppKeyRelationsResponseBody(name='body'),
}

async function listUpstreamAppKeyRelations(request: ListUpstreamAppKeyRelationsRequest): ListUpstreamAppKeyRelationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUpstreamAppKeyRelations', 'POST', '/', 'json', false, 'json', request);
}

model ListUpstreamAppServersRequest {
  pageIndex?: string(name='PageIndex', position='Query'),
  pageSize?: string(name='PageSize', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListUpstreamAppServersResponseBody = {
  appServers?: {
    list?: [ 
      {
        gmtCreate?: long(name='GmtCreate'),
        gmtModified?: long(name='GmtModified'),
        id?: long(name='Id'),
        name?: string(name='Name'),
        PAppKey?: string(name='PAppKey'),
        projectId?: string(name='ProjectId'),
        queueNameList?: string(name='QueueNameList'),
        tags?: string(name='Tags'),
      }
    ](name='List'),
    pagination?: {
      pageIndex?: int32(name='PageIndex'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
      totalPageCount?: int32(name='TotalPageCount'),
    }(name='Pagination'),
  }(name='AppServers'),
  requestId?: string(name='RequestId'),
}

model ListUpstreamAppServersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUpstreamAppServersResponseBody(name='body'),
}

async function listUpstreamAppServers(request: ListUpstreamAppServersRequest): ListUpstreamAppServersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUpstreamAppServers', 'POST', '/', 'json', false, 'json', request);
}

model ListVehicleRequest {
  deviceId?: string(name='DeviceId', position='Query'),
  pageIndex: int32(name='PageIndex', minimum=1, maximum=2147483647, position='Query'),
  pageSize: int32(name='PageSize', minimum=10, maximum=100, position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  vin?: string(name='Vin', position='Query'),
}

model ListVehicleResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  vehicles?: {
    list?: [ 
      {
        connectionStatus?: string(name='ConnectionStatus'),
        createTime?: long(name='CreateTime'),
        deviceId?: string(name='DeviceId'),
        vin?: string(name='Vin'),
      }
    ](name='List'),
    pagination?: {
      pageIndex?: int32(name='PageIndex'),
      pageSize?: int32(name='PageSize'),
      totalCount?: long(name='TotalCount'),
    }(name='Pagination'),
  }(name='Vehicles'),
}

model ListVehicleResponse = {
  headers: map[string]string(name='headers'),
  body: ListVehicleResponseBody(name='body'),
}

async function listVehicle(request: ListVehicleRequest): ListVehicleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVehicle', 'GET', '/', 'json', false, 'json', request);
}

model ListVersionDeviceGroupsRequest {
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListVersionDeviceGroupsResponseBody = {
  deviceGroupList?: [ 
    {
      description?: string(name='Description'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModify?: string(name='GmtModify'),
      id?: string(name='Id'),
      name?: string(name='Name'),
    }
  ](name='DeviceGroupList'),
  requestId?: string(name='RequestId'),
}

model ListVersionDeviceGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListVersionDeviceGroupsResponseBody(name='body'),
}

async function listVersionDeviceGroups(request: ListVersionDeviceGroupsRequest): ListVersionDeviceGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVersionDeviceGroups', 'POST', '/', 'json', false, 'json', request);
}

model PublishAppVersionRequest {
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  sendMessage: boolean(name='SendMessage', position='Query'),
  versionId: string(name='VersionId', position='Query'),
}

model PublishAppVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model PublishAppVersionResponse = {
  headers: map[string]string(name='headers'),
  body: PublishAppVersionResponseBody(name='body'),
}

async function publishAppVersion(request: PublishAppVersionRequest): PublishAppVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishAppVersion', 'POST', '/', 'json', false, 'json', request);
}

model PublishMqttMessageRequest {
  appKey: string(name='AppKey', position='Query'),
  message: string(name='Message', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  qoS?: int32(name='QoS', minimum=0, maximum=2, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  topic: string(name='Topic', position='Query'),
}

model PublishMqttMessageResponseBody = {
  mid?: string(name='Mid'),
  requestId?: string(name='RequestId'),
}

model PublishMqttMessageResponse = {
  headers: map[string]string(name='headers'),
  body: PublishMqttMessageResponseBody(name='body'),
}

async function publishMqttMessage(request: PublishMqttMessageRequest): PublishMqttMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishMqttMessage', 'POST', '/', 'json', false, 'json', request);
}

model PublishOsVersionRequest {
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  sendMessage: boolean(name='SendMessage', position='Query'),
  versionId: string(name='VersionId', position='Query'),
}

model PublishOsVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model PublishOsVersionResponse = {
  headers: map[string]string(name='headers'),
  body: PublishOsVersionResponseBody(name='body'),
}

async function publishOsVersion(request: PublishOsVersionRequest): PublishOsVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishOsVersion', 'POST', '/', 'json', false, 'json', request);
}

model PushConfigInfoRequest {
  config: string(name='Config', description='配置信息', position='Query'),
  hostDeviceId: string(name='HostDeviceId', description='主机设备id', position='Query'),
  projectId: string(name='ProjectId', description='项目ID', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model PushConfigInfoResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model PushConfigInfoResponse = {
  headers: map[string]string(name='headers'),
  body: PushConfigInfoResponseBody(name='body'),
}

async function pushConfigInfo(request: PushConfigInfoRequest): PushConfigInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PushConfigInfo', 'POST', '/', 'json', false, 'json', request);
}

model PushMessageRequest {
  act: string(name='Act', position='Query'),
  appKey: string(name='AppKey', position='Query'),
  appPackage: string(name='AppPackage', position='Query'),
  customContent?: string(name='CustomContent', position='Query'),
  desc?: string(name='Desc', position='Query'),
  expiredTime?: long(name='ExpiredTime', position='Query'),
  pkgContent: string(name='PkgContent', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  receiverType: string(name='ReceiverType', position='Query'),
  receiverValues: string(name='ReceiverValues', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  title?: string(name='Title', position='Query'),
  type: int32(name='Type', position='Query'),
  uri?: string(name='Uri', position='Query'),
}

model PushMessageResponseBody = {
  mid?: long(name='Mid'),
  requestId?: string(name='RequestId'),
}

model PushMessageResponse = {
  headers: map[string]string(name='headers'),
  body: PushMessageResponseBody(name='body'),
}

async function pushMessage(request: PushMessageRequest): PushMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PushMessage', 'POST', '/', 'json', false, 'json', request);
}

model PushVersionMessageRequest {
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  versionId: string(name='VersionId', position='Query'),
  versionType: string(name='VersionType', position='Query'),
}

model PushVersionMessageResponseBody = {
  requestId?: string(name='RequestId'),
}

model PushVersionMessageResponse = {
  headers: map[string]string(name='headers'),
  body: PushVersionMessageResponseBody(name='body'),
}

async function pushVersionMessage(request: PushVersionMessageRequest): PushVersionMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PushVersionMessage', 'POST', '/', 'json', false, 'json', request);
}

model QueryPrepublishPassedDeviceCountRequest {
  prepublishId: string(name='PrepublishId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model QueryPrepublishPassedDeviceCountResponseBody = {
  count?: int32(name='Count'),
  requestId?: string(name='RequestId'),
}

model QueryPrepublishPassedDeviceCountResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPrepublishPassedDeviceCountResponseBody(name='body'),
}

async function queryPrepublishPassedDeviceCount(request: QueryPrepublishPassedDeviceCountRequest): QueryPrepublishPassedDeviceCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPrepublishPassedDeviceCount', 'POST', '/', 'json', false, 'json', request);
}

model SetFenceScopeRequest {
  brandId: string(name='BrandId', position='Query'),
  fenceId: long(name='FenceId', position='Query'),
  modelId: string(name='ModelId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model SetFenceScopeResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetFenceScopeResponse = {
  headers: map[string]string(name='headers'),
  body: SetFenceScopeResponseBody(name='body'),
}

async function setFenceScope(request: SetFenceScopeRequest): SetFenceScopeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetFenceScope', 'POST', '/', 'json', false, 'json', request);
}

model SubmitAssistReportRequest {
  assistDescription?: string(name='AssistDescription', position='Body'),
  assistId: string(name='AssistId', position='Body'),
  assistReason?: string(name='AssistReason', position='Body'),
  assistResult?: string(name='AssistResult', position='Body'),
  assistTag?: string(name='AssistTag', position='Body'),
  deviceModel?: string(name='DeviceModel', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
  regionId?: string(name='RegionId', position='Host'),
}

model SubmitAssistReportResponseBody = {
  requestId?: string(name='RequestId'),
}

model SubmitAssistReportResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitAssistReportResponseBody(name='body'),
}

async function submitAssistReport(request: SubmitAssistReportRequest): SubmitAssistReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitAssistReport', 'POST', '/', 'json', true, 'form', request);
}

model UpdateApiGatewayAppStatusRequest {
  gatewayAppId: string(name='GatewayAppId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  status: int32(name='Status', position='Query'),
}

model UpdateApiGatewayAppStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateApiGatewayAppStatusResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateApiGatewayAppStatusResponseBody(name='body'),
}

async function updateApiGatewayAppStatus(request: UpdateApiGatewayAppStatusRequest): UpdateApiGatewayAppStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateApiGatewayAppStatus', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAppBlackWhiteVersionsRequest {
  blackAppVersions?: string(name='BlackAppVersions', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  versionId: string(name='VersionId', position='Query'),
  whiteAppVersions?: string(name='WhiteAppVersions', position='Query'),
}

model UpdateAppBlackWhiteVersionsResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateAppBlackWhiteVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAppBlackWhiteVersionsResponseBody(name='body'),
}

async function updateAppBlackWhiteVersions(request: UpdateAppBlackWhiteVersionsRequest): UpdateAppBlackWhiteVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAppBlackWhiteVersions', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAppVersionRequest {
  apkMd5?: string(name='ApkMd5', position='Query'),
  appId?: string(name='AppId', position='Query'),
  appVersion?: string(name='AppVersion', position='Query'),
  blackVersionList?: string(name='BlackVersionList', position='Query'),
  deviceAdapterList?: string(name='DeviceAdapterList', position='Query'),
  installType?: string(name='InstallType', position='Query'),
  isAllowNewInstall?: string(name='IsAllowNewInstall', position='Query'),
  isForceUpgrade?: string(name='IsForceUpgrade', position='Query'),
  isNeedRestart?: string(name='IsNeedRestart', position='Query'),
  isSilentUpgrade?: string(name='IsSilentUpgrade', position='Query'),
  packageUrl?: string(name='PackageUrl', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  releaseNote?: string(name='ReleaseNote', position='Query'),
  remark?: string(name='Remark', position='Query'),
  restartAppParam?: string(name='RestartAppParam', position='Query'),
  restartAppType?: string(name='RestartAppType', position='Query'),
  restartType?: string(name='RestartType', position='Query'),
  versionCode?: string(name='VersionCode', position='Query'),
  versionId?: string(name='VersionId', position='Query'),
  whiteVersionList?: string(name='WhiteVersionList', position='Query'),
}

model UpdateAppVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateAppVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAppVersionResponseBody(name='body'),
}

async function updateAppVersion(request: UpdateAppVersionRequest): UpdateAppVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAppVersion', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAppVersionReleaseNoteRequest {
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  releaseNote: string(name='ReleaseNote', position='Query'),
  versionId: string(name='VersionId', position='Query'),
}

model UpdateAppVersionReleaseNoteResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateAppVersionReleaseNoteResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAppVersionReleaseNoteResponseBody(name='body'),
}

async function updateAppVersionReleaseNote(request: UpdateAppVersionReleaseNoteRequest): UpdateAppVersionReleaseNoteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAppVersionReleaseNote', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAppVersionRemarkRequest {
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  remark: string(name='Remark', position='Query'),
  versionId: string(name='VersionId', position='Query'),
}

model UpdateAppVersionRemarkResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateAppVersionRemarkResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAppVersionRemarkResponseBody(name='body'),
}

async function updateAppVersionRemark(request: UpdateAppVersionRemarkRequest): UpdateAppVersionRemarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAppVersionRemark', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAppVersionStatusRequest {
  id: string(name='Id', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  status?: string(name='Status', position='Query'),
}

model UpdateAppVersionStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateAppVersionStatusResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAppVersionStatusResponseBody(name='body'),
}

async function updateAppVersionStatus(request: UpdateAppVersionStatusRequest): UpdateAppVersionStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAppVersionStatus', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCustomizedFilterRequest {
  blackWhiteType: string(name='BlackWhiteType', position='Query'),
  id: long(name='Id', position='Query'),
  name: string(name='Name', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  value: string(name='Value', position='Query'),
  valueCompareType: string(name='ValueCompareType', position='Query'),
  valueType: string(name='ValueType', position='Query'),
}

model UpdateCustomizedFilterResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateCustomizedFilterResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCustomizedFilterResponseBody(name='body'),
}

async function updateCustomizedFilter(request: UpdateCustomizedFilterRequest): UpdateCustomizedFilterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCustomizedFilter', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDeviceModelRequest {
  brandName?: string(name='BrandName', position='Query'),
  canCreateDeviceId?: string(name='CanCreateDeviceId', position='Query'),
  description?: string(name='Description', position='Query'),
  deviceName?: string(name='DeviceName', position='Query'),
  deviceType?: string(name='DeviceType', position='Query'),
  hardwareType?: string(name='HardwareType', position='Query'),
  id?: string(name='Id', position='Query'),
  initUsageType?: string(name='InitUsageType', position='Query'),
  modelName?: string(name='ModelName', position='Query'),
  objectKey?: string(name='ObjectKey', position='Query'),
  osPlatform?: string(name='OsPlatform', position='Query'),
  projectId?: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  securityChip?: string(name='SecurityChip', position='Query'),
}

model UpdateDeviceModelResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDeviceModelResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDeviceModelResponseBody(name='body'),
}

async function updateDeviceModel(request: UpdateDeviceModelRequest): UpdateDeviceModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDeviceModel', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGeoFenceRequest {
  alarmCondition?: string(name='AlarmCondition', position='Query'),
  area?: float(name='Area', position='Query'),
  center?: string(name='Center', position='Query'),
  cityCode?: string(name='CityCode', position='Query'),
  countryCode?: string(name='CountryCode', position='Query'),
  description?: string(name='Description', position='Query'),
  fenceId: long(name='FenceId', position='Query'),
  fenceName?: string(name='FenceName', position='Query'),
  points?: string(name='Points', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  provinceCode?: string(name='ProvinceCode', position='Query'),
  radius?: int32(name='Radius', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  type?: int32(name='Type', position='Query'),
}

model UpdateGeoFenceResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateGeoFenceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGeoFenceResponseBody(name='body'),
}

async function updateGeoFence(request: UpdateGeoFenceRequest): UpdateGeoFenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGeoFence', 'POST', '/', 'json', false, 'json', request);
}

model UpdateNamespaceDataRequest {
  accountId?: string(name='AccountId', position='Query'),
  accountType?: string(name='AccountType', position='Query'),
  authType: string(name='AuthType', position='Query'),
  deviceId?: string(name='DeviceId', position='Query'),
  deviceIdType?: string(name='DeviceIdType', position='Query'),
  namespace: string(name='Namespace', position='Query'),
  newData: string(name='NewData', position='Query'),
  oldData: string(name='OldData', position='Query'),
  path: string(name='Path', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model UpdateNamespaceDataResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateNamespaceDataResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateNamespaceDataResponseBody(name='body'),
}

async function updateNamespaceData(request: UpdateNamespaceDataRequest): UpdateNamespaceDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateNamespaceData', 'POST', '/', 'json', false, 'json', request);
}

model UpdateOsBlackWhiteVersionsRequest {
  blackVersions?: string(name='BlackVersions', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  versionId: string(name='VersionId', position='Query'),
  whiteVersions?: string(name='WhiteVersions', position='Query'),
}

model UpdateOsBlackWhiteVersionsResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateOsBlackWhiteVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateOsBlackWhiteVersionsResponseBody(name='body'),
}

async function updateOsBlackWhiteVersions(request: UpdateOsBlackWhiteVersionsRequest): UpdateOsBlackWhiteVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateOsBlackWhiteVersions', 'POST', '/', 'json', false, 'json', request);
}

model UpdateOsVersionRequest {
  blackVersionList?: string(name='BlackVersionList', position='Query'),
  deviceModelId: string(name='DeviceModelId', position='Query'),
  enableMobileDownload: string(name='EnableMobileDownload', position='Query'),
  id: string(name='Id', position='Query'),
  isForceNightUpgrade: string(name='IsForceNightUpgrade', position='Query'),
  isForceUpgrade: string(name='IsForceUpgrade', position='Query'),
  isMilestone: string(name='IsMilestone', position='Query'),
  maxClientVersion?: string(name='MaxClientVersion', position='Query'),
  minClientVersion?: string(name='MinClientVersion', position='Query'),
  mobileDownloadMaxSize?: string(name='MobileDownloadMaxSize', position='Query'),
  nightUpgradeDownloadType: string(name='NightUpgradeDownloadType', position='Query'),
  nightUpgradeIsAllowedCancel: string(name='NightUpgradeIsAllowedCancel', position='Query'),
  nightUpgradeIsShowTip: string(name='NightUpgradeIsShowTip', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  releaseNote: string(name='ReleaseNote', position='Query'),
  remark?: string(name='Remark', position='Query'),
  romList: string(name='RomList', position='Query'),
  systemVersion: string(name='SystemVersion', position='Query'),
  whiteVersionList?: string(name='WhiteVersionList', position='Query'),
}

model UpdateOsVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateOsVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateOsVersionResponseBody(name='body'),
}

async function updateOsVersion(request: UpdateOsVersionRequest): UpdateOsVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateOsVersion', 'POST', '/', 'json', false, 'json', request);
}

model UpdateOsVersionReleaseNoteRequest {
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  releaseNote: string(name='ReleaseNote', position='Query'),
  versionId: string(name='VersionId', position='Query'),
}

model UpdateOsVersionReleaseNoteResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateOsVersionReleaseNoteResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateOsVersionReleaseNoteResponseBody(name='body'),
}

async function updateOsVersionReleaseNote(request: UpdateOsVersionReleaseNoteRequest): UpdateOsVersionReleaseNoteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateOsVersionReleaseNote', 'POST', '/', 'json', false, 'json', request);
}

model UpdateOsVersionRemarkRequest {
  projectId: string(name='ProjectId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  remark: string(name='Remark', position='Query'),
  versionId: string(name='VersionId', position='Query'),
}

model UpdateOsVersionRemarkResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateOsVersionRemarkResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateOsVersionRemarkResponseBody(name='body'),
}

async function updateOsVersionRemark(request: UpdateOsVersionRemarkRequest): UpdateOsVersionRemarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateOsVersionRemark', 'POST', '/', 'json', false, 'json', request);
}

model UpdateOsVersionStatusRequest {
  id: string(name='Id', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  status?: string(name='Status', position='Query'),
}

model UpdateOsVersionStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateOsVersionStatusResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateOsVersionStatusResponseBody(name='body'),
}

async function updateOsVersionStatus(request: UpdateOsVersionStatusRequest): UpdateOsVersionStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateOsVersionStatus', 'POST', '/', 'json', false, 'json', request);
}

model UpdateProjectRequest {
  description: string(name='Description', position='Query'),
  name: string(name='Name', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model UpdateProjectResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateProjectResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProjectResponseBody(name='body'),
}

async function updateProject(request: UpdateProjectRequest): UpdateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateProject', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSchemaSubscribeRequest {
  deviceModel: string(name='DeviceModel', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  schemaVersion?: string(name='SchemaVersion', position='Query'),
  subscribeList?: string(name='SubscribeList', position='Query'),
}

model UpdateSchemaSubscribeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateSchemaSubscribeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSchemaSubscribeResponseBody(name='body'),
}

async function updateSchemaSubscribe(request: UpdateSchemaSubscribeRequest): UpdateSchemaSubscribeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSchemaSubscribe', 'POST', '/', 'json', false, 'json', request);
}

model UpdateShadowSchemaRequest {
  authType?: string(name='AuthType', position='Query'),
  deviceModelId: string(name='DeviceModelId', position='Query'),
  id: string(name='Id', position='Query'),
  namespace?: string(name='Namespace', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  schema?: string(name='Schema', position='Query'),
}

model UpdateShadowSchemaResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateShadowSchemaResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateShadowSchemaResponseBody(name='body'),
}

async function updateShadowSchema(request: UpdateShadowSchemaRequest): UpdateShadowSchemaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateShadowSchema', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTriggerRequest {
  id: long(name='Id', position='Query'),
  production?: int32(name='Production', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  sandbox?: int32(name='Sandbox', position='Query'),
}

model UpdateTriggerResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTriggerResponseBody(name='body'),
}

async function updateTrigger(request: UpdateTriggerRequest): UpdateTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTrigger', 'POST', '/', 'json', false, 'json', request);
}

model UpdateUpstreamAppServerRequest {
  id: long(name='Id', position='Query'),
  name?: string(name='Name', position='Query'),
  projectId?: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  tags?: string(name='Tags', position='Query'),
}

model UpdateUpstreamAppServerResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateUpstreamAppServerResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateUpstreamAppServerResponseBody(name='body'),
}

async function updateUpstreamAppServer(request: UpdateUpstreamAppServerRequest): UpdateUpstreamAppServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUpstreamAppServer', 'POST', '/', 'json', false, 'json', request);
}

model UpdateVersionDeviceGroupRequest {
  description?: string(name='Description', position='Query'),
  id?: string(name='Id', position='Query'),
  name: string(name='Name', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model UpdateVersionDeviceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateVersionDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVersionDeviceGroupResponseBody(name='body'),
}

async function updateVersionDeviceGroup(request: UpdateVersionDeviceGroupRequest): UpdateVersionDeviceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateVersionDeviceGroup', 'POST', '/', 'json', false, 'json', request);
}

model UpdateVersionPrepublishActiveStatusRequest {
  isActive: string(name='IsActive', position='Query'),
  prepublishId: string(name='PrepublishId', position='Query'),
  projectId: string(name='ProjectId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model UpdateVersionPrepublishActiveStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateVersionPrepublishActiveStatusResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVersionPrepublishActiveStatusResponseBody(name='body'),
}

async function updateVersionPrepublishActiveStatus(request: UpdateVersionPrepublishActiveStatusRequest): UpdateVersionPrepublishActiveStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateVersionPrepublishActiveStatus', 'POST', '/', 'json', false, 'json', request);
}

