/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('iovcc', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model ListDeviceBrandsRequest {
  projectId?: string(name='ProjectId'),
  deviceBrandId?: long(name='DeviceBrandId'),
  deviceBrand?: string(name='DeviceBrand'),
  start?: string(name='Start'),
  length?: string(name='Length'),
}

model ListDeviceBrandsResponseBody = {
  deviceBrands?: [ 
    {
      deviceBrandId?: long(name='DeviceBrandId'),
      description?: string(name='Description'),
      projectId?: string(name='ProjectId'),
      manufacture?: string(name='Manufacture'),
      deviceBrand?: string(name='DeviceBrand'),
    }
  ](name='DeviceBrands'),
  requestId?: string(name='RequestId'),
}

model ListDeviceBrandsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeviceBrandsResponseBody(name='body'),
}

async function listDeviceBrandsWithOptions(request: ListDeviceBrandsRequest, runtime: Util.RuntimeOptions): ListDeviceBrandsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListDeviceBrands', '2018-05-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listDeviceBrands(request: ListDeviceBrandsRequest): ListDeviceBrandsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeviceBrandsWithOptions(request, runtime);
}

model ListFunctionExecuteLogRequest {
  projectId?: string(name='ProjectId'),
  fileId?: long(name='FileId'),
  functionName?: string(name='FunctionName'),
  env?: int32(name='Env'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model ListFunctionExecuteLogResponseBody = {
  logList?: {
    pagination?: {
      pageIndex?: int32(name='PageIndex'),
      pageSize?: int32(name='PageSize'),
      hasNextPage?: boolean(name='HasNextPage'),
    }(name='Pagination'),
    logs?: [ 
      {
        message?: string(name='Message'),
        backEndRequestId?: string(name='BackEndRequestId'),
      }
    ](name='Logs'),
  }(name='LogList'),
  requestId?: string(name='RequestId'),
}

model ListFunctionExecuteLogResponse = {
  headers: map[string]string(name='headers'),
  body: ListFunctionExecuteLogResponseBody(name='body'),
}

async function listFunctionExecuteLogWithOptions(request: ListFunctionExecuteLogRequest, runtime: Util.RuntimeOptions): ListFunctionExecuteLogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListFunctionExecuteLog', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listFunctionExecuteLog(request: ListFunctionExecuteLogRequest): ListFunctionExecuteLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFunctionExecuteLogWithOptions(request, runtime);
}

model ListDeviceModelsRequest {
  deviceModelId?: int32(name='DeviceModelId'),
  length?: string(name='Length'),
  deviceModel?: string(name='DeviceModel'),
  deviceBrand?: string(name='DeviceBrand'),
  start?: string(name='Start'),
  projectId?: string(name='ProjectId'),
  deviceBrandId?: long(name='DeviceBrandId'),
}

model ListDeviceModelsResponseBody = {
  deviceModels?: [ 
    {
      deviceModelId?: long(name='DeviceModelId'),
      hardwareType?: string(name='HardwareType'),
      deviceName?: string(name='DeviceName'),
      deviceType?: string(name='DeviceType'),
      canCreateDeviceId?: int32(name='CanCreateDeviceId'),
      projectId?: string(name='ProjectId'),
      osPlatform?: string(name='OsPlatform'),
      deviceModel?: string(name='DeviceModel'),
      securityChip?: string(name='SecurityChip'),
      deviceLogoUrl?: string(name='DeviceLogoUrl'),
      description?: string(name='Description'),
      objectKey?: string(name='ObjectKey'),
      initUsageTypeDesc?: string(name='InitUsageTypeDesc'),
      initUsageType?: int32(name='InitUsageType'),
      deviceBrand?: string(name='DeviceBrand'),
    }
  ](name='DeviceModels'),
  requestId?: string(name='RequestId'),
}

model ListDeviceModelsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeviceModelsResponseBody(name='body'),
}

async function listDeviceModelsWithOptions(request: ListDeviceModelsRequest, runtime: Util.RuntimeOptions): ListDeviceModelsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListDeviceModels', '2018-05-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listDeviceModels(request: ListDeviceModelsRequest): ListDeviceModelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeviceModelsWithOptions(request, runtime);
}

model ListMqttMessageLogsRequest {
  appKey?: string(name='AppKey'),
  projectId?: string(name='ProjectId'),
  topic?: string(name='Topic'),
  mid?: string(name='Mid'),
  clientId?: string(name='ClientId'),
  startTime?: int32(name='StartTime'),
  endTime?: int32(name='EndTime'),
  type?: string(name='Type'),
}

model ListMqttMessageLogsResponseBody = {
  requestId?: string(name='RequestId'),
  traces?: {
    pagination?: {
      pageIndex?: int32(name='PageIndex'),
      totalPageCount?: int32(name='TotalPageCount'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
    list?: [ 
      {
        type?: string(name='Type'),
        time?: long(name='Time'),
        action?: string(name='Action'),
        topic?: string(name='Topic'),
        mid?: string(name='Mid'),
        clientMid?: string(name='ClientMid'),
        clientId?: string(name='ClientId'),
      }
    ](name='List'),
  }(name='Traces'),
}

model ListMqttMessageLogsResponse = {
  headers: map[string]string(name='headers'),
  body: ListMqttMessageLogsResponseBody(name='body'),
}

async function listMqttMessageLogsWithOptions(request: ListMqttMessageLogsRequest, runtime: Util.RuntimeOptions): ListMqttMessageLogsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListMqttMessageLogs', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listMqttMessageLogs(request: ListMqttMessageLogsRequest): ListMqttMessageLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMqttMessageLogsWithOptions(request, runtime);
}

model DeleteNamespaceRequest {
  projectId?: string(name='ProjectId'),
  namespace?: string(name='Namespace'),
}

model DeleteNamespaceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNamespaceResponseBody(name='body'),
}

async function deleteNamespaceWithOptions(request: DeleteNamespaceRequest, runtime: Util.RuntimeOptions): DeleteNamespaceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteNamespace', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteNamespace(request: DeleteNamespaceRequest): DeleteNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNamespaceWithOptions(request, runtime);
}

model ListOfflineMessagesRequest {
  pageSize?: int32(name='PageSize'),
  projectId?: string(name='ProjectId'),
  type?: string(name='Type'),
  value?: string(name='Value'),
  pageIndex?: int32(name='PageIndex'),
}

model ListOfflineMessagesResponseBody = {
  requestId?: string(name='RequestId'),
  offlineMessages?: {
    pagination?: {
      pageIndex?: int32(name='PageIndex'),
      totalPageCount?: int32(name='TotalPageCount'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
    list?: [ 
      {
        expiredTime?: long(name='ExpiredTime'),
        mid?: long(name='Mid'),
        gmtCreate?: long(name='GmtCreate'),
      }
    ](name='List'),
  }(name='OfflineMessages'),
}

model ListOfflineMessagesResponse = {
  headers: map[string]string(name='headers'),
  body: ListOfflineMessagesResponseBody(name='body'),
}

async function listOfflineMessagesWithOptions(request: ListOfflineMessagesRequest, runtime: Util.RuntimeOptions): ListOfflineMessagesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListOfflineMessages', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listOfflineMessages(request: ListOfflineMessagesRequest): ListOfflineMessagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOfflineMessagesWithOptions(request, runtime);
}

model PushMessageRequest {
  appPackage?: string(name='AppPackage'),
  desc?: string(name='Desc'),
  act?: string(name='Act'),
  uri?: string(name='Uri'),
  pkgContent?: string(name='PkgContent'),
  customContent?: string(name='CustomContent'),
  receiverType?: string(name='ReceiverType'),
  receiverValues?: string(name='ReceiverValues'),
  expiredTime?: long(name='ExpiredTime'),
  title?: string(name='Title'),
  projectId?: string(name='ProjectId'),
  appKey?: string(name='AppKey'),
  type?: int32(name='Type'),
}

model PushMessageResponseBody = {
  requestId?: string(name='RequestId'),
  mid?: long(name='Mid'),
}

model PushMessageResponse = {
  headers: map[string]string(name='headers'),
  body: PushMessageResponseBody(name='body'),
}

async function pushMessageWithOptions(request: PushMessageRequest, runtime: Util.RuntimeOptions): PushMessageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PushMessage', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function pushMessage(request: PushMessageRequest): PushMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushMessageWithOptions(request, runtime);
}

model DeleteCustomizedFilterRequest {
  projectId?: string(name='ProjectId'),
  id?: string(name='Id'),
}

model DeleteCustomizedFilterResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCustomizedFilterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCustomizedFilterResponseBody(name='body'),
}

async function deleteCustomizedFilterWithOptions(request: DeleteCustomizedFilterRequest, runtime: Util.RuntimeOptions): DeleteCustomizedFilterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteCustomizedFilter', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteCustomizedFilter(request: DeleteCustomizedFilterRequest): DeleteCustomizedFilterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCustomizedFilterWithOptions(request, runtime);
}

model DescribeMqttClientStatusRequest {
  appKey?: string(name='AppKey'),
  clientId?: string(name='ClientId'),
  projectId?: string(name='ProjectId'),
}

model DescribeMqttClientStatusResponseBody = {
  clientStatus?: {
    status?: int32(name='Status'),
    cleanSession?: string(name='CleanSession'),
    lastUpdate?: long(name='LastUpdate'),
  }(name='ClientStatus'),
  requestId?: string(name='RequestId'),
}

model DescribeMqttClientStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMqttClientStatusResponseBody(name='body'),
}

async function describeMqttClientStatusWithOptions(request: DescribeMqttClientStatusRequest, runtime: Util.RuntimeOptions): DescribeMqttClientStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeMqttClientStatus', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeMqttClientStatus(request: DescribeMqttClientStatusRequest): DescribeMqttClientStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMqttClientStatusWithOptions(request, runtime);
}

model DeleteDeviceRequest {
  deviceId?: string(name='DeviceId'),
  projectId?: string(name='ProjectId'),
}

model DeleteDeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeviceResponseBody(name='body'),
}

async function deleteDeviceWithOptions(request: DeleteDeviceRequest, runtime: Util.RuntimeOptions): DeleteDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDevice', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDevice(request: DeleteDeviceRequest): DeleteDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceWithOptions(request, runtime);
}

model UpdateDeviceModelRequest {
  initUsageType?: string(name='InitUsageType'),
  modelName?: string(name='ModelName'),
  id?: string(name='Id'),
  brandName?: string(name='BrandName'),
  description?: string(name='Description'),
  deviceType?: string(name='DeviceType'),
  canCreateDeviceId?: string(name='CanCreateDeviceId'),
  projectId?: string(name='ProjectId'),
  hardwareType?: string(name='HardwareType'),
  securityChip?: string(name='SecurityChip'),
  osPlatform?: string(name='OsPlatform'),
  objectKey?: string(name='ObjectKey'),
  deviceName?: string(name='DeviceName'),
}

model UpdateDeviceModelResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDeviceModelResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDeviceModelResponseBody(name='body'),
}

async function updateDeviceModelWithOptions(request: UpdateDeviceModelRequest, runtime: Util.RuntimeOptions): UpdateDeviceModelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDeviceModel', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDeviceModel(request: UpdateDeviceModelRequest): UpdateDeviceModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDeviceModelWithOptions(request, runtime);
}

model UpdateApiGatewayAppStatusRequest {
  projectId?: string(name='ProjectId'),
  gatewayAppId?: string(name='GatewayAppId'),
  status?: int32(name='Status'),
}

model UpdateApiGatewayAppStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateApiGatewayAppStatusResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateApiGatewayAppStatusResponseBody(name='body'),
}

async function updateApiGatewayAppStatusWithOptions(request: UpdateApiGatewayAppStatusRequest, runtime: Util.RuntimeOptions): UpdateApiGatewayAppStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateApiGatewayAppStatus', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateApiGatewayAppStatus(request: UpdateApiGatewayAppStatusRequest): UpdateApiGatewayAppStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateApiGatewayAppStatusWithOptions(request, runtime);
}

model ListCameraShootingAttachmentsRequest {
  projectId?: string(name='ProjectId', description='项目ID'),
  edgeDeviceId?: string(name='EdgeDeviceId', description='终端设备id'),
  shootingRecordId?: long(name='ShootingRecordId', description='拍摄记录ID'),
}

model ListCameraShootingAttachmentsResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  attachments?: [ 
    {
      id?: long(name='Id', description='主键id'),
      fileId?: string(name='FileId', description='文件id'),
      fileType?: long(name='FileType', description='文件类型，0-图片，1-视频'),
      fileName?: string(name='FileName', description='文件名'),
      fileLength?: long(name='FileLength', description='文件长度，单位为字节'),
      shootingTime?: long(name='ShootingTime', description='拍摄时间'),
      downloadUrl?: string(name='DownloadUrl', description='附件地址'),
    }
  ](name='Attachments'),
}

model ListCameraShootingAttachmentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCameraShootingAttachmentsResponseBody(name='body'),
}

async function listCameraShootingAttachmentsWithOptions(request: ListCameraShootingAttachmentsRequest, runtime: Util.RuntimeOptions): ListCameraShootingAttachmentsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListCameraShootingAttachments', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listCameraShootingAttachments(request: ListCameraShootingAttachmentsRequest): ListCameraShootingAttachmentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCameraShootingAttachmentsWithOptions(request, runtime);
}

model ListAssistHistoriesRequest {
  perPage?: int32(name='PerPage'),
  pageIndex?: int32(name='PageIndex'),
  condition?: string(name='Condition'),
  projectId?: string(name='ProjectId'),
}

model ListAssistHistoriesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  perPage?: int32(name='PerPage'),
  histories?: [ 
    {
      serialNumber?: string(name='SerialNumber'),
      endTime?: long(name='EndTime'),
      startTime?: long(name='StartTime'),
      UNAME?: string(name='UNAME'),
      hardwareId?: string(name='HardwareId'),
      deviceName?: string(name='DeviceName'),
      UUID?: string(name='UUID'),
      deviceId?: string(name='DeviceId'),
      VIN?: string(name='VIN'),
      UID?: string(name='UID'),
      ID?: string(name='ID'),
    }
  ](name='Histories'),
  pageIndex?: int32(name='PageIndex'),
}

model ListAssistHistoriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAssistHistoriesResponseBody(name='body'),
}

async function listAssistHistoriesWithOptions(request: ListAssistHistoriesRequest, runtime: Util.RuntimeOptions): ListAssistHistoriesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListAssistHistories', '2018-05-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listAssistHistories(request: ListAssistHistoriesRequest): ListAssistHistoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAssistHistoriesWithOptions(request, runtime);
}

model GetDeviceSystemUpdateFunnelEventsRequest {
  originalId?: string(name='OriginalId'),
  projectId?: string(name='ProjectId'),
  targetVersion?: string(name='TargetVersion'),
  idType?: string(name='IdType'),
}

model GetDeviceSystemUpdateFunnelEventsResponseBody = {
  requestId?: string(name='RequestId'),
  eventList?: [ 
    {
      deviceId?: string(name='DeviceId'),
      targetVersion?: string(name='TargetVersion'),
      event?: string(name='Event'),
      reportTimestamp?: long(name='ReportTimestamp'),
      reportTime?: string(name='ReportTime'),
      tenantId?: string(name='TenantId'),
    }
  ](name='EventList'),
}

model GetDeviceSystemUpdateFunnelEventsResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceSystemUpdateFunnelEventsResponseBody(name='body'),
}

async function getDeviceSystemUpdateFunnelEventsWithOptions(request: GetDeviceSystemUpdateFunnelEventsRequest, runtime: Util.RuntimeOptions): GetDeviceSystemUpdateFunnelEventsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDeviceSystemUpdateFunnelEvents', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDeviceSystemUpdateFunnelEvents(request: GetDeviceSystemUpdateFunnelEventsRequest): GetDeviceSystemUpdateFunnelEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceSystemUpdateFunnelEventsWithOptions(request, runtime);
}

model DeleteAllCustomizedFiltersRequest {
  projectId?: string(name='ProjectId'),
  versionId?: string(name='VersionId'),
  versionType?: string(name='VersionType'),
}

model DeleteAllCustomizedFiltersResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAllCustomizedFiltersResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAllCustomizedFiltersResponseBody(name='body'),
}

async function deleteAllCustomizedFiltersWithOptions(request: DeleteAllCustomizedFiltersRequest, runtime: Util.RuntimeOptions): DeleteAllCustomizedFiltersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAllCustomizedFilters', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAllCustomizedFilters(request: DeleteAllCustomizedFiltersRequest): DeleteAllCustomizedFiltersResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAllCustomizedFiltersWithOptions(request, runtime);
}

model GenerateAssistFileUploadUrlRequest {
  filename?: string(name='Filename'),
  projectId?: string(name='ProjectId'),
  deviceId?: string(name='DeviceId'),
}

model GenerateAssistFileUploadUrlResponseBody = {
  fileKey?: string(name='FileKey'),
  uploadUrl?: string(name='UploadUrl'),
  requestId?: string(name='RequestId'),
}

model GenerateAssistFileUploadUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateAssistFileUploadUrlResponseBody(name='body'),
}

async function generateAssistFileUploadUrlWithOptions(request: GenerateAssistFileUploadUrlRequest, runtime: Util.RuntimeOptions): GenerateAssistFileUploadUrlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GenerateAssistFileUploadUrl', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function generateAssistFileUploadUrl(request: GenerateAssistFileUploadUrlRequest): GenerateAssistFileUploadUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateAssistFileUploadUrlWithOptions(request, runtime);
}

model DescribeAssistWSServerAddressRequest {
  projectId?: string(name='ProjectId'),
  deviceId?: string(name='DeviceId'),
}

model DescribeAssistWSServerAddressResponseBody = {
  requestId?: string(name='RequestId'),
  wsServer?: string(name='WsServer'),
  OTP?: string(name='OTP'),
}

model DescribeAssistWSServerAddressResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAssistWSServerAddressResponseBody(name='body'),
}

async function describeAssistWSServerAddressWithOptions(request: DescribeAssistWSServerAddressRequest, runtime: Util.RuntimeOptions): DescribeAssistWSServerAddressResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeAssistWSServerAddress', '2018-05-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeAssistWSServerAddress(request: DescribeAssistWSServerAddressRequest): DescribeAssistWSServerAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAssistWSServerAddressWithOptions(request, runtime);
}

model FindPrepublishesByVersionIdRequest {
  projectId?: string(name='ProjectId'),
  versionId?: int32(name='VersionId'),
  versionType?: string(name='VersionType'),
}

model FindPrepublishesByVersionIdResponseBody = {
  requestId?: string(name='RequestId'),
  prepublishList?: [ 
    {
      gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
      deviceModelId?: string(name='DeviceModelId'),
      gmtModify?: string(name='GmtModify'),
      isActive?: string(name='IsActive'),
      versionId?: string(name='VersionId'),
      barrierCount?: string(name='BarrierCount'),
      deviceModelName?: string(name='DeviceModelName'),
      isTotalPrepublish?: string(name='IsTotalPrepublish'),
      gmtModifyTimestamp?: long(name='GmtModifyTimestamp'),
      parentId?: string(name='ParentId'),
      gmtCreate?: string(name='GmtCreate'),
      name?: string(name='Name'),
      id?: string(name='Id'),
      versionType?: string(name='VersionType'),
      passedCount?: string(name='PassedCount'),
    }
  ](name='PrepublishList'),
}

model FindPrepublishesByVersionIdResponse = {
  headers: map[string]string(name='headers'),
  body: FindPrepublishesByVersionIdResponseBody(name='body'),
}

async function findPrepublishesByVersionIdWithOptions(request: FindPrepublishesByVersionIdRequest, runtime: Util.RuntimeOptions): FindPrepublishesByVersionIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('FindPrepublishesByVersionId', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function findPrepublishesByVersionId(request: FindPrepublishesByVersionIdRequest): FindPrepublishesByVersionIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return findPrepublishesByVersionIdWithOptions(request, runtime);
}

model FindVersionMessagesRequest {
  projectId?: string(name='ProjectId'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  messageType?: string(name='MessageType'),
  testId?: string(name='TestId'),
  versionId?: string(name='VersionId'),
  sendRecordId?: string(name='SendRecordId'),
  deviceId?: string(name='DeviceId'),
  versionType?: string(name='VersionType'),
}

model FindVersionMessagesResponseBody = {
  requestId?: string(name='RequestId'),
  messageList?: {
    items?: [ 
      {
        gmtModifyTimestamp?: long(name='GmtModifyTimestamp'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        status?: string(name='Status'),
        gmtModify?: string(name='GmtModify'),
        messageId?: string(name='MessageId'),
        deviceId?: string(name='DeviceId'),
        gmtCreate?: string(name='GmtCreate'),
        versionId?: string(name='VersionId'),
        statusDesc?: string(name='StatusDesc'),
        testId?: string(name='TestId'),
        id?: long(name='Id'),
      }
    ](name='Items'),
    totalCount?: int32(name='TotalCount'),
  }(name='MessageList'),
}

model FindVersionMessagesResponse = {
  headers: map[string]string(name='headers'),
  body: FindVersionMessagesResponseBody(name='body'),
}

async function findVersionMessagesWithOptions(request: FindVersionMessagesRequest, runtime: Util.RuntimeOptions): FindVersionMessagesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('FindVersionMessages', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function findVersionMessages(request: FindVersionMessagesRequest): FindVersionMessagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return findVersionMessagesWithOptions(request, runtime);
}

model UpdateUpstreamAppServerRequest {
  id?: long(name='Id'),
  name?: string(name='Name'),
  tags?: string(name='Tags'),
  projectId?: string(name='ProjectId'),
}

model UpdateUpstreamAppServerResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateUpstreamAppServerResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateUpstreamAppServerResponseBody(name='body'),
}

async function updateUpstreamAppServerWithOptions(request: UpdateUpstreamAppServerRequest, runtime: Util.RuntimeOptions): UpdateUpstreamAppServerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateUpstreamAppServer', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateUpstreamAppServer(request: UpdateUpstreamAppServerRequest): UpdateUpstreamAppServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUpstreamAppServerWithOptions(request, runtime);
}

model GetVehicleTrackRequest {
  projectId?: string(name='ProjectId', description='项目ID'),
  deviceId?: string(name='DeviceId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  vin?: string(name='Vin'),
}

model GetVehicleTrackResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  points?: [ 
    {
      longitude?: float(name='Longitude'),
      latitude?: float(name='Latitude'),
      altitude?: float(name='Altitude'),
      speed?: int32(name='Speed'),
      updateTime?: long(name='UpdateTime'),
    }
  ](name='Points'),
}

model GetVehicleTrackResponse = {
  headers: map[string]string(name='headers'),
  body: GetVehicleTrackResponseBody(name='body'),
}

async function getVehicleTrackWithOptions(request: GetVehicleTrackRequest, runtime: Util.RuntimeOptions): GetVehicleTrackResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetVehicleTrack', '2018-05-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getVehicleTrack(request: GetVehicleTrackRequest): GetVehicleTrackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVehicleTrackWithOptions(request, runtime);
}

model CreateVersionTestRequest {
  deviceGroupId?: string(name='DeviceGroupId'),
  description?: string(name='Description'),
  versionId?: string(name='VersionId'),
  versionType?: string(name='VersionType'),
  name?: string(name='Name'),
  projectId?: string(name='ProjectId'),
}

model CreateVersionTestResponseBody = {
  testId?: string(name='TestId'),
  requestId?: string(name='RequestId'),
}

model CreateVersionTestResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVersionTestResponseBody(name='body'),
}

async function createVersionTestWithOptions(request: CreateVersionTestRequest, runtime: Util.RuntimeOptions): CreateVersionTestResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateVersionTest', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createVersionTest(request: CreateVersionTestRequest): CreateVersionTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVersionTestWithOptions(request, runtime);
}

model ListDeployedFunctionsRequest {
  projectId?: string(name='ProjectId'),
  fileId?: long(name='FileId'),
}

model ListDeployedFunctionsResponseBody = {
  requestId?: string(name='RequestId'),
  functions?: [ 
    {
      projectId?: string(name='ProjectId'),
      gmtCreate?: long(name='GmtCreate'),
      name?: string(name='Name'),
      gmtModified?: long(name='GmtModified'),
      id?: long(name='Id'),
      fileId?: long(name='FileId'),
    }
  ](name='Functions'),
}

model ListDeployedFunctionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeployedFunctionsResponseBody(name='body'),
}

async function listDeployedFunctionsWithOptions(request: ListDeployedFunctionsRequest, runtime: Util.RuntimeOptions): ListDeployedFunctionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListDeployedFunctions', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listDeployedFunctions(request: ListDeployedFunctionsRequest): ListDeployedFunctionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeployedFunctionsWithOptions(request, runtime);
}

model ListDeviceModelRequest {
  projectId?: string(name='ProjectId'),
}

model ListDeviceModelResponseBody = {
  modelList?: [ 
    {
      deviceModelId?: long(name='DeviceModelId'),
      hardwareType?: string(name='HardwareType'),
      deviceType?: string(name='DeviceType'),
      canCreateDeviceId?: int32(name='CanCreateDeviceId'),
      projectId?: string(name='ProjectId'),
      osPlatform?: string(name='OsPlatform'),
      deviceModel?: string(name='DeviceModel'),
      securityChip?: string(name='SecurityChip'),
      description?: string(name='Description'),
      initUsageTypeDesc?: string(name='InitUsageTypeDesc'),
      initUsageType?: int32(name='InitUsageType'),
      deviceBrand?: string(name='DeviceBrand'),
    }
  ](name='ModelList'),
  requestId?: string(name='RequestId'),
}

model ListDeviceModelResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeviceModelResponseBody(name='body'),
}

async function listDeviceModelWithOptions(request: ListDeviceModelRequest, runtime: Util.RuntimeOptions): ListDeviceModelResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListDeviceModel', '2018-05-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listDeviceModel(request: ListDeviceModelRequest): ListDeviceModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeviceModelWithOptions(request, runtime);
}

model CreateSchemaSubscribeRequest {
  deviceModel?: string(name='DeviceModel'),
  subscribeList?: string(name='SubscribeList'),
  projectId?: string(name='ProjectId'),
  schemaVersion?: string(name='SchemaVersion'),
}

model CreateSchemaSubscribeResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateSchemaSubscribeResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSchemaSubscribeResponseBody(name='body'),
}

async function createSchemaSubscribeWithOptions(request: CreateSchemaSubscribeRequest, runtime: Util.RuntimeOptions): CreateSchemaSubscribeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSchemaSubscribe', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSchemaSubscribe(request: CreateSchemaSubscribeRequest): CreateSchemaSubscribeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSchemaSubscribeWithOptions(request, runtime);
}

model DescribeAssistRTMPServerAddressRequest {
  projectId?: string(name='ProjectId'),
  deviceId?: string(name='DeviceId'),
}

model DescribeAssistRTMPServerAddressResponseBody = {
  requestId?: string(name='RequestId'),
  RTMPServer?: string(name='RTMPServer'),
  OTP?: string(name='OTP'),
}

model DescribeAssistRTMPServerAddressResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAssistRTMPServerAddressResponseBody(name='body'),
}

async function describeAssistRTMPServerAddressWithOptions(request: DescribeAssistRTMPServerAddressRequest, runtime: Util.RuntimeOptions): DescribeAssistRTMPServerAddressResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeAssistRTMPServerAddress', '2018-05-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeAssistRTMPServerAddress(request: DescribeAssistRTMPServerAddressRequest): DescribeAssistRTMPServerAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAssistRTMPServerAddressWithOptions(request, runtime);
}

model DeleteShadowSchemaRequest {
  id?: string(name='Id'),
  projectId?: string(name='ProjectId'),
}

model DeleteShadowSchemaResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteShadowSchemaResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteShadowSchemaResponseBody(name='body'),
}

async function deleteShadowSchemaWithOptions(request: DeleteShadowSchemaRequest, runtime: Util.RuntimeOptions): DeleteShadowSchemaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteShadowSchema', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteShadowSchema(request: DeleteShadowSchemaRequest): DeleteShadowSchemaResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteShadowSchemaWithOptions(request, runtime);
}

model DescribeProjectAppSecurityRequest {
  projectId?: string(name='ProjectId'),
  appId?: string(name='AppId'),
}

model DescribeProjectAppSecurityResponseBody = {
  requestId?: string(name='RequestId'),
  projectAppSecurity?: {
    appSecret?: string(name='AppSecret'),
    appKey?: string(name='AppKey'),
    appId?: string(name='AppId'),
    gmtCreate?: long(name='GmtCreate'),
    gmtModified?: long(name='GmtModified'),
    id?: long(name='Id'),
  }(name='ProjectAppSecurity'),
}

model DescribeProjectAppSecurityResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProjectAppSecurityResponseBody(name='body'),
}

async function describeProjectAppSecurityWithOptions(request: DescribeProjectAppSecurityRequest, runtime: Util.RuntimeOptions): DescribeProjectAppSecurityResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeProjectAppSecurity', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeProjectAppSecurity(request: DescribeProjectAppSecurityRequest): DescribeProjectAppSecurityResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProjectAppSecurityWithOptions(request, runtime);
}

model CreateDeviceBrandRequest {
  projectId?: string(name='ProjectId'),
  brandName?: string(name='BrandName'),
  manufacture?: string(name='Manufacture'),
  description?: string(name='Description'),
}

model CreateDeviceBrandResponseBody = {
  requestId?: string(name='RequestId'),
  brandId?: long(name='BrandId'),
}

model CreateDeviceBrandResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeviceBrandResponseBody(name='body'),
}

async function createDeviceBrandWithOptions(request: CreateDeviceBrandRequest, runtime: Util.RuntimeOptions): CreateDeviceBrandResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDeviceBrand', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDeviceBrand(request: CreateDeviceBrandRequest): CreateDeviceBrandResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeviceBrandWithOptions(request, runtime);
}

model CreateMqttRootTopicRequest {
  appKey?: string(name='AppKey'),
  rootTopic?: string(name='RootTopic'),
  projectId?: string(name='ProjectId'),
  clientToken?: string(name='ClientToken'),
}

model CreateMqttRootTopicResponseBody = {
  requestId?: string(name='RequestId'),
  queueName?: string(name='QueueName'),
}

model CreateMqttRootTopicResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMqttRootTopicResponseBody(name='body'),
}

async function createMqttRootTopicWithOptions(request: CreateMqttRootTopicRequest, runtime: Util.RuntimeOptions): CreateMqttRootTopicResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateMqttRootTopic', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createMqttRootTopic(request: CreateMqttRootTopicRequest): CreateMqttRootTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMqttRootTopicWithOptions(request, runtime);
}

model DelayPublishOsVersionRequest {
  versionId?: string(name='VersionId'),
  projectId?: string(name='ProjectId'),
  prepubTime?: long(name='PrepubTime'),
  publishTime?: long(name='PublishTime'),
  downTime?: long(name='DownTime'),
  email?: string(name='Email'),
  description?: string(name='Description'),
  sendMessage?: string(name='SendMessage'),
  prepublishCount?: string(name='PrepublishCount'),
}

model DelayPublishOsVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model DelayPublishOsVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DelayPublishOsVersionResponseBody(name='body'),
}

async function delayPublishOsVersionWithOptions(request: DelayPublishOsVersionRequest, runtime: Util.RuntimeOptions): DelayPublishOsVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DelayPublishOsVersion', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function delayPublishOsVersion(request: DelayPublishOsVersionRequest): DelayPublishOsVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return delayPublishOsVersionWithOptions(request, runtime);
}

model ListPreChecksResponseBody = {
  requestId?: string(name='RequestId'),
  preChecks?: [ 
    {
      key?: string(name='Key'),
      link?: string(name='Link'),
      price?: string(name='Price'),
      state?: string(name='State'),
    }
  ](name='PreChecks'),
}

model ListPreChecksResponse = {
  headers: map[string]string(name='headers'),
  body: ListPreChecksResponseBody(name='body'),
}

async function listPreChecksWithOptions(runtime: Util.RuntimeOptions): ListPreChecksResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('ListPreChecks', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listPreChecks(): ListPreChecksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPreChecksWithOptions(runtime);
}

model ListAppsRequest {
  projectId?: string(name='ProjectId'),
}

model ListAppsResponseBody = {
  requestId?: string(name='RequestId'),
  apps?: [ 
    {
      appName?: string(name='AppName'),
      appKey?: string(name='AppKey'),
      osType?: int32(name='OsType'),
      appPackage?: string(name='AppPackage'),
    }
  ](name='Apps'),
}

model ListAppsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAppsResponseBody(name='body'),
}

async function listAppsWithOptions(request: ListAppsRequest, runtime: Util.RuntimeOptions): ListAppsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListApps', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listApps(request: ListAppsRequest): ListAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAppsWithOptions(request, runtime);
}

model DeleteCameraShootingRecordRequest {
  projectId?: string(name='ProjectId', description='项目ID'),
  edgeDeviceId?: string(name='EdgeDeviceId', description='终端设备id'),
  shootingRecordId?: long(name='ShootingRecordId', description='拍摄记录ID'),
}

model DeleteCameraShootingRecordResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model DeleteCameraShootingRecordResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCameraShootingRecordResponseBody(name='body'),
}

async function deleteCameraShootingRecordWithOptions(request: DeleteCameraShootingRecordRequest, runtime: Util.RuntimeOptions): DeleteCameraShootingRecordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteCameraShootingRecord', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteCameraShootingRecord(request: DeleteCameraShootingRecordRequest): DeleteCameraShootingRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCameraShootingRecordWithOptions(request, runtime);
}

model DescribeDeviceRequest {
  projectId?: string(name='ProjectId'),
  deviceId?: string(name='DeviceId'),
}

model DescribeDeviceResponseBody = {
  requestId?: string(name='RequestId'),
  deviceInfo?: {
    serialNumber?: string(name='SerialNumber'),
    status?: string(name='Status'),
    deviceModelId?: long(name='DeviceModelId'),
    macAddress?: string(name='MacAddress'),
    deviceId?: string(name='DeviceId'),
    deviceType?: string(name='DeviceType'),
    projectId?: string(name='ProjectId'),
    osPlatform?: string(name='OsPlatform'),
    deviceModel?: string(name='DeviceModel'),
    usageType?: int32(name='UsageType'),
    vin?: string(name='Vin'),
    usageTypeDesc?: string(name='UsageTypeDesc'),
    uuid?: string(name='Uuid'),
    hardwareId?: string(name='HardwareId'),
    deviceBrandId?: long(name='DeviceBrandId'),
    region?: string(name='Region'),
    attributes?: string(name='Attributes'),
    softwareId?: string(name='SoftwareId'),
    name?: string(name='Name'),
    deviceBrand?: string(name='DeviceBrand'),
    deviceProduct?: string(name='DeviceProduct'),
  }(name='DeviceInfo'),
}

model DescribeDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeviceResponseBody(name='body'),
}

async function describeDeviceWithOptions(request: DescribeDeviceRequest, runtime: Util.RuntimeOptions): DescribeDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDevice', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDevice(request: DescribeDeviceRequest): DescribeDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeviceWithOptions(request, runtime);
}

model AddVersionGroupDevicesRequest {
  deviceIdType?: string(name='DeviceIdType'),
  projectId?: string(name='ProjectId'),
  deviceIds?: string(name='DeviceIds'),
  deviceGroupId?: string(name='DeviceGroupId'),
}

model AddVersionGroupDevicesResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddVersionGroupDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: AddVersionGroupDevicesResponseBody(name='body'),
}

async function addVersionGroupDevicesWithOptions(request: AddVersionGroupDevicesRequest, runtime: Util.RuntimeOptions): AddVersionGroupDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddVersionGroupDevices', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addVersionGroupDevices(request: AddVersionGroupDevicesRequest): AddVersionGroupDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return addVersionGroupDevicesWithOptions(request, runtime);
}

model ListProjectAppsRequest {
  projectId?: string(name='ProjectId'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  keywords?: string(name='Keywords'),
}

model ListProjectAppsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    projectApps?: [ 
      {
        status?: int32(name='Status'),
        projectId?: string(name='ProjectId'),
        userId?: string(name='UserId'),
        gmtModified?: long(name='GmtModified'),
        appPkgName?: string(name='AppPkgName'),
        appName?: string(name='AppName'),
        appSecret?: string(name='AppSecret'),
        appKey?: string(name='AppKey'),
        appId?: string(name='AppId'),
        osType?: int32(name='OsType'),
        gmtCreate?: long(name='GmtCreate'),
        id?: long(name='Id'),
      }
    ](name='ProjectApps'),
    totalPage?: int32(name='TotalPage'),
    totalCount?: int32(name='TotalCount'),
  }(name='Result'),
}

model ListProjectAppsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProjectAppsResponseBody(name='body'),
}

async function listProjectAppsWithOptions(request: ListProjectAppsRequest, runtime: Util.RuntimeOptions): ListProjectAppsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListProjectApps', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listProjectApps(request: ListProjectAppsRequest): ListProjectAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectAppsWithOptions(request, runtime);
}

model ConnectAssistDeviceRequest {
  hardwareId?: string(name='HardwareId'),
  allowCommandExtension?: boolean(name='AllowCommandExtension'),
  deviceId?: string(name='DeviceId'),
  serialNumber?: string(name='SerialNumber'),
  VIN?: string(name='VIN'),
  UUID?: string(name='UUID'),
  projectId?: string(name='ProjectId'),
}

model ConnectAssistDeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConnectAssistDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ConnectAssistDeviceResponseBody(name='body'),
}

async function connectAssistDeviceWithOptions(request: ConnectAssistDeviceRequest, runtime: Util.RuntimeOptions): ConnectAssistDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ConnectAssistDevice', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function connectAssistDevice(request: ConnectAssistDeviceRequest): ConnectAssistDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return connectAssistDeviceWithOptions(request, runtime);
}

model ListApiGatewayAppsRequest {
  projectId?: string(name='ProjectId'),
}

model ListApiGatewayAppsResponseBody = {
  apiGatewayApps?: [ 
    {
      gatewayAppKey?: string(name='GatewayAppKey'),
      status?: int32(name='Status'),
      gatewayAppSecret?: string(name='GatewayAppSecret'),
      gatewayAppId?: string(name='GatewayAppId'),
      userId?: string(name='UserId'),
      projectId?: string(name='ProjectId'),
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      id?: long(name='Id'),
    }
  ](name='ApiGatewayApps'),
  requestId?: string(name='RequestId'),
}

model ListApiGatewayAppsResponse = {
  headers: map[string]string(name='headers'),
  body: ListApiGatewayAppsResponseBody(name='body'),
}

async function listApiGatewayAppsWithOptions(request: ListApiGatewayAppsRequest, runtime: Util.RuntimeOptions): ListApiGatewayAppsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListApiGatewayApps', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listApiGatewayApps(request: ListApiGatewayAppsRequest): ListApiGatewayAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listApiGatewayAppsWithOptions(request, runtime);
}

model DeleteRpcServiceRequest {
  id?: string(name='Id'),
  projectId?: string(name='ProjectId'),
}

model DeleteRpcServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteRpcServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRpcServiceResponseBody(name='body'),
}

async function deleteRpcServiceWithOptions(request: DeleteRpcServiceRequest, runtime: Util.RuntimeOptions): DeleteRpcServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteRpcService', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteRpcService(request: DeleteRpcServiceRequest): DeleteRpcServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRpcServiceWithOptions(request, runtime);
}

model FindPrepublishPassedDevicesRequest {
  prepublishId?: string(name='PrepublishId'),
  projectId?: string(name='ProjectId'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  deviceId?: string(name='DeviceId'),
}

model FindPrepublishPassedDevicesResponseBody = {
  requestId?: string(name='RequestId'),
  deviceList?: {
    items?: [ 
      {
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        deviceId?: string(name='DeviceId'),
        gmtCreate?: string(name='GmtCreate'),
      }
    ](name='Items'),
    totalCount?: int32(name='TotalCount'),
  }(name='DeviceList'),
}

model FindPrepublishPassedDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: FindPrepublishPassedDevicesResponseBody(name='body'),
}

async function findPrepublishPassedDevicesWithOptions(request: FindPrepublishPassedDevicesRequest, runtime: Util.RuntimeOptions): FindPrepublishPassedDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('FindPrepublishPassedDevices', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function findPrepublishPassedDevices(request: FindPrepublishPassedDevicesRequest): FindPrepublishPassedDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return findPrepublishPassedDevicesWithOptions(request, runtime);
}

model DeleteVersionBlackDevicesByIdRequest {
  ids?: string(name='Ids'),
  projectId?: string(name='ProjectId'),
  versionType?: string(name='VersionType'),
  versionId?: string(name='VersionId'),
}

model DeleteVersionBlackDevicesByIdResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVersionBlackDevicesByIdResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVersionBlackDevicesByIdResponseBody(name='body'),
}

async function deleteVersionBlackDevicesByIdWithOptions(request: DeleteVersionBlackDevicesByIdRequest, runtime: Util.RuntimeOptions): DeleteVersionBlackDevicesByIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteVersionBlackDevicesById', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteVersionBlackDevicesById(request: DeleteVersionBlackDevicesByIdRequest): DeleteVersionBlackDevicesByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVersionBlackDevicesByIdWithOptions(request, runtime);
}

model DescribeOpenAccountRequest {
  projectId?: string(name='ProjectId'),
  identityId?: string(name='IdentityId'),
  idp?: string(name='Idp'),
  idToken?: string(name='IdToken'),
  openId?: string(name='OpenId'),
}

model DescribeOpenAccountResponseBody = {
  openAccount?: {
    status?: int32(name='Status'),
    type?: int32(name='Type'),
    displayName?: string(name='DisplayName'),
    createAccessKey?: string(name='CreateAccessKey'),
    openId?: string(name='OpenId'),
    mobile?: string(name='Mobile'),
    region?: string(name='Region'),
    identityId?: string(name='IdentityId'),
    loginId?: string(name='LoginId'),
    idp?: string(name='Idp'),
    aliyunId?: string(name='AliyunId'),
  }(name='OpenAccount'),
  requestId?: string(name='RequestId'),
}

model DescribeOpenAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOpenAccountResponseBody(name='body'),
}

async function describeOpenAccountWithOptions(request: DescribeOpenAccountRequest, runtime: Util.RuntimeOptions): DescribeOpenAccountResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeOpenAccount', '2018-05-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeOpenAccount(request: DescribeOpenAccountRequest): DescribeOpenAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOpenAccountWithOptions(request, runtime);
}

model FindCustomizedFiltersRequest {
  projectId?: string(name='ProjectId'),
  versionId?: string(name='VersionId'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  name?: string(name='Name'),
  versionType?: string(name='VersionType'),
}

model FindCustomizedFiltersResponseBody = {
  customizedFilterList?: {
    items?: [ 
      {
        gmtModifyTimestamp?: long(name='GmtModifyTimestamp'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        value?: string(name='Value'),
        gmtModify?: string(name='GmtModify'),
        valueCompareType?: string(name='ValueCompareType'),
        gmtCreate?: string(name='GmtCreate'),
        blackWhiteType?: string(name='BlackWhiteType'),
        name?: string(name='Name'),
        id?: long(name='Id'),
      }
    ](name='Items'),
    totalCount?: int32(name='TotalCount'),
  }(name='CustomizedFilterList'),
  requestId?: string(name='RequestId'),
}

model FindCustomizedFiltersResponse = {
  headers: map[string]string(name='headers'),
  body: FindCustomizedFiltersResponseBody(name='body'),
}

async function findCustomizedFiltersWithOptions(request: FindCustomizedFiltersRequest, runtime: Util.RuntimeOptions): FindCustomizedFiltersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('FindCustomizedFilters', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function findCustomizedFilters(request: FindCustomizedFiltersRequest): FindCustomizedFiltersResponse {
  var runtime = new Util.RuntimeOptions{};
  return findCustomizedFiltersWithOptions(request, runtime);
}

model DeployFunctionFileRequest {
  projectId?: string(name='ProjectId'),
  fileId?: string(name='FileId'),
  deployEnv?: int32(name='DeployEnv'),
}

model DeployFunctionFileResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeployFunctionFileResponse = {
  headers: map[string]string(name='headers'),
  body: DeployFunctionFileResponseBody(name='body'),
}

async function deployFunctionFileWithOptions(request: DeployFunctionFileRequest, runtime: Util.RuntimeOptions): DeployFunctionFileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeployFunctionFile', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deployFunctionFile(request: DeployFunctionFileRequest): DeployFunctionFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deployFunctionFileWithOptions(request, runtime);
}

model ListAssistActionDetailsRequest {
  actionTimestamp?: string(name='ActionTimestamp'),
  projectId?: string(name='ProjectId'),
}

model ListAssistActionDetailsResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      type?: string(name='Type'),
      action?: string(name='Action'),
      data?: string(name='Data'),
      deviceId?: string(name='DeviceId'),
      createdAt?: long(name='CreatedAt'),
      updatedAt?: long(name='UpdatedAt'),
      timestamp?: string(name='Timestamp'),
      ID?: string(name='ID'),
    }
  ](name='Results'),
}

model ListAssistActionDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAssistActionDetailsResponseBody(name='body'),
}

async function listAssistActionDetailsWithOptions(request: ListAssistActionDetailsRequest, runtime: Util.RuntimeOptions): ListAssistActionDetailsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListAssistActionDetails', '2018-05-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listAssistActionDetails(request: ListAssistActionDetailsRequest): ListAssistActionDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAssistActionDetailsWithOptions(request, runtime);
}

model DescribeMqttTopicSubscriptionRequest {
  appKey?: string(name='AppKey'),
  topic?: string(name='Topic'),
  projectId?: string(name='ProjectId'),
}

model DescribeMqttTopicSubscriptionResponseBody = {
  requestId?: string(name='RequestId'),
  subscription?: {
    topic?: string(name='Topic'),
    count?: int32(name='Count'),
  }(name='Subscription'),
}

model DescribeMqttTopicSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMqttTopicSubscriptionResponseBody(name='body'),
}

async function describeMqttTopicSubscriptionWithOptions(request: DescribeMqttTopicSubscriptionRequest, runtime: Util.RuntimeOptions): DescribeMqttTopicSubscriptionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeMqttTopicSubscription', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeMqttTopicSubscription(request: DescribeMqttTopicSubscriptionRequest): DescribeMqttTopicSubscriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMqttTopicSubscriptionWithOptions(request, runtime);
}

model PushVersionMessageRequest {
  projectId?: string(name='ProjectId'),
  versionId?: string(name='VersionId'),
  versionType?: string(name='VersionType'),
}

model PushVersionMessageResponseBody = {
  requestId?: string(name='RequestId'),
}

model PushVersionMessageResponse = {
  headers: map[string]string(name='headers'),
  body: PushVersionMessageResponseBody(name='body'),
}

async function pushVersionMessageWithOptions(request: PushVersionMessageRequest, runtime: Util.RuntimeOptions): PushVersionMessageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PushVersionMessage', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function pushVersionMessage(request: PushVersionMessageRequest): PushVersionMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushVersionMessageWithOptions(request, runtime);
}

model CountDeviceModelsRequest {
  projectId?: string(name='ProjectId'),
  deviceModelId?: int32(name='DeviceModelId'),
  deviceModel?: string(name='DeviceModel'),
  deviceBrand?: string(name='DeviceBrand'),
}

model CountDeviceModelsResponseBody = {
  requestId?: string(name='RequestId'),
  modelCount?: int32(name='ModelCount'),
}

model CountDeviceModelsResponse = {
  headers: map[string]string(name='headers'),
  body: CountDeviceModelsResponseBody(name='body'),
}

async function countDeviceModelsWithOptions(request: CountDeviceModelsRequest, runtime: Util.RuntimeOptions): CountDeviceModelsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('CountDeviceModels', '2018-05-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function countDeviceModels(request: CountDeviceModelsRequest): CountDeviceModelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return countDeviceModelsWithOptions(request, runtime);
}

model CreateDeviceRequest {
  modelName?: string(name='ModelName'),
  projectId?: string(name='ProjectId'),
  hardwareId?: string(name='HardwareId'),
}

model CreateDeviceResponseBody = {
  requestId?: string(name='RequestId'),
  deviceId?: long(name='DeviceId'),
}

model CreateDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeviceResponseBody(name='body'),
}

async function createDeviceWithOptions(request: CreateDeviceRequest, runtime: Util.RuntimeOptions): CreateDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDevice', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDevice(request: CreateDeviceRequest): CreateDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeviceWithOptions(request, runtime);
}

model CreateNamespaceRequest {
  projectId?: string(name='ProjectId'),
  authType?: string(name='AuthType'),
  name?: string(name='Name'),
  desc?: string(name='Desc'),
}

model CreateNamespaceResponseBody = {
  requestId?: string(name='RequestId'),
  namespace?: string(name='Namespace'),
}

model CreateNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNamespaceResponseBody(name='body'),
}

async function createNamespaceWithOptions(request: CreateNamespaceRequest, runtime: Util.RuntimeOptions): CreateNamespaceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateNamespace', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createNamespace(request: CreateNamespaceRequest): CreateNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNamespaceWithOptions(request, runtime);
}

model FindVersionDeviceGroupsRequest {
  deviceId?: string(name='DeviceId'),
  originalId?: string(name='OriginalId'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  name?: string(name='Name'),
  projectId?: string(name='ProjectId'),
}

model FindVersionDeviceGroupsResponseBody = {
  requestId?: string(name='RequestId'),
  deviceGroupList?: {
    items?: [ 
      {
        gmtModifyTimestamp?: long(name='GmtModifyTimestamp'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        gmtModify?: string(name='GmtModify'),
        description?: string(name='Description'),
        gmtCreate?: string(name='GmtCreate'),
        name?: string(name='Name'),
        id?: long(name='Id'),
        maxCount?: string(name='MaxCount'),
      }
    ](name='Items'),
    totalCount?: int32(name='TotalCount'),
  }(name='DeviceGroupList'),
}

model FindVersionDeviceGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: FindVersionDeviceGroupsResponseBody(name='body'),
}

async function findVersionDeviceGroupsWithOptions(request: FindVersionDeviceGroupsRequest, runtime: Util.RuntimeOptions): FindVersionDeviceGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('FindVersionDeviceGroups', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function findVersionDeviceGroups(request: FindVersionDeviceGroupsRequest): FindVersionDeviceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return findVersionDeviceGroupsWithOptions(request, runtime);
}

model ExecuteRemoteCommandRequest {
  projectId?: string(name='ProjectId', description='项目ID'),
  clientId?: string(name='ClientId'),
  command?: long(name='Command', description='指令消息ID'),
  params?: string(name='Params', description='指令入参字符串'),
}

model ExecuteRemoteCommandResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  data?: string(name='Data'),
}

model ExecuteRemoteCommandResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteRemoteCommandResponseBody(name='body'),
}

async function executeRemoteCommandWithOptions(request: ExecuteRemoteCommandRequest, runtime: Util.RuntimeOptions): ExecuteRemoteCommandResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExecuteRemoteCommand', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function executeRemoteCommand(request: ExecuteRemoteCommandRequest): ExecuteRemoteCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeRemoteCommandWithOptions(request, runtime);
}

model CreateVersionDeviceGroupRequest {
  maxCount?: string(name='MaxCount'),
  projectId?: string(name='ProjectId'),
  name?: string(name='Name'),
  description?: string(name='Description'),
}

model CreateVersionDeviceGroupResponseBody = {
  requestId?: string(name='RequestId'),
  deviceGroupId?: string(name='DeviceGroupId'),
}

model CreateVersionDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVersionDeviceGroupResponseBody(name='body'),
}

async function createVersionDeviceGroupWithOptions(request: CreateVersionDeviceGroupRequest, runtime: Util.RuntimeOptions): CreateVersionDeviceGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateVersionDeviceGroup', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createVersionDeviceGroup(request: CreateVersionDeviceGroupRequest): CreateVersionDeviceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVersionDeviceGroupWithOptions(request, runtime);
}

model DescribeAssistReportRequest {
  projectId?: string(name='ProjectId'),
  assistId?: string(name='AssistId'),
}

model DescribeAssistReportResponseBody = {
  requestId?: string(name='RequestId'),
  assistResult?: string(name='AssistResult'),
  assistReason?: string(name='AssistReason'),
  assistId?: string(name='AssistId'),
  assistDescription?: string(name='AssistDescription'),
  assistTag?: string(name='AssistTag'),
}

model DescribeAssistReportResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAssistReportResponseBody(name='body'),
}

async function describeAssistReportWithOptions(request: DescribeAssistReportRequest, runtime: Util.RuntimeOptions): DescribeAssistReportResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeAssistReport', '2018-05-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeAssistReport(request: DescribeAssistReportRequest): DescribeAssistReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAssistReportWithOptions(request, runtime);
}

model ListConnectLogsRequest {
  pageSize?: int32(name='PageSize'),
  projectId?: string(name='ProjectId'),
  deviceId?: string(name='DeviceId'),
  startTime?: int32(name='StartTime'),
  endTime?: int32(name='EndTime'),
  pageIndex?: int32(name='PageIndex'),
}

model ListConnectLogsResponseBody = {
  requestId?: string(name='RequestId'),
  logs?: {
    pagination?: {
      pageIndex?: int32(name='PageIndex'),
      totalPageCount?: int32(name='TotalPageCount'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
    list?: [ 
      {
        sid?: string(name='Sid'),
        status?: string(name='Status'),
        time?: long(name='Time'),
        deviceId?: string(name='DeviceId'),
        systemVersion?: string(name='SystemVersion'),
        ip?: string(name='Ip'),
        netWorking?: string(name='NetWorking'),
        terminal?: string(name='Terminal'),
      }
    ](name='List'),
  }(name='Logs'),
}

model ListConnectLogsResponse = {
  headers: map[string]string(name='headers'),
  body: ListConnectLogsResponseBody(name='body'),
}

async function listConnectLogsWithOptions(request: ListConnectLogsRequest, runtime: Util.RuntimeOptions): ListConnectLogsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListConnectLogs', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listConnectLogs(request: ListConnectLogsRequest): ListConnectLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConnectLogsWithOptions(request, runtime);
}

model ListClientPluginsRequest {
  osType?: string(name='OsType'),
}

model ListClientPluginsResponseBody = {
  requestId?: string(name='RequestId'),
  clientPlugins?: [ 
    {
      pkgName?: string(name='PkgName'),
      name?: string(name='Name'),
    }
  ](name='ClientPlugins'),
}

model ListClientPluginsResponse = {
  headers: map[string]string(name='headers'),
  body: ListClientPluginsResponseBody(name='body'),
}

async function listClientPluginsWithOptions(request: ListClientPluginsRequest, runtime: Util.RuntimeOptions): ListClientPluginsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListClientPlugins', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listClientPlugins(request: ListClientPluginsRequest): ListClientPluginsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClientPluginsWithOptions(request, runtime);
}

model DescribeShadowSchemaRequest {
  deviceModel?: string(name='DeviceModel'),
  isSimple?: boolean(name='IsSimple'),
  projectId?: string(name='ProjectId'),
}

model DescribeShadowSchemaResponseBody = {
  requestId?: string(name='RequestId'),
  schema?: string(name='Schema'),
}

model DescribeShadowSchemaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeShadowSchemaResponseBody(name='body'),
}

async function describeShadowSchemaWithOptions(request: DescribeShadowSchemaRequest, runtime: Util.RuntimeOptions): DescribeShadowSchemaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeShadowSchema', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeShadowSchema(request: DescribeShadowSchemaRequest): DescribeShadowSchemaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeShadowSchemaWithOptions(request, runtime);
}

model FindVersionBlackDevicesRequest {
  projectId?: string(name='ProjectId'),
  versionId?: string(name='VersionId'),
  versionType?: string(name='VersionType'),
  deviceId?: string(name='DeviceId'),
  originalId?: string(name='OriginalId'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model FindVersionBlackDevicesResponseBody = {
  requestId?: string(name='RequestId'),
  deviceList?: {
    items?: [ 
      {
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        originalId?: string(name='OriginalId'),
        deviceId?: string(name='DeviceId'),
        idType?: string(name='IdType'),
        gmtCreate?: string(name='GmtCreate'),
        id?: long(name='Id'),
      }
    ](name='Items'),
    totalCount?: int32(name='TotalCount'),
  }(name='DeviceList'),
}

model FindVersionBlackDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: FindVersionBlackDevicesResponseBody(name='body'),
}

async function findVersionBlackDevicesWithOptions(request: FindVersionBlackDevicesRequest, runtime: Util.RuntimeOptions): FindVersionBlackDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('FindVersionBlackDevices', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function findVersionBlackDevices(request: FindVersionBlackDevicesRequest): FindVersionBlackDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return findVersionBlackDevicesWithOptions(request, runtime);
}

model ListFunctionFilesRequest {
  projectId?: string(name='ProjectId'),
  fileType?: int32(name='FileType'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model ListFunctionFilesResponseBody = {
  requestId?: string(name='RequestId'),
  fileList?: {
    pagination?: {
      pageIndex?: int32(name='PageIndex'),
      totalPageCount?: int32(name='TotalPageCount'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
    files?: [ 
      {
        status?: int32(name='Status'),
        productionDeployTime?: long(name='ProductionDeployTime'),
        productionDeployStatus?: int32(name='ProductionDeployStatus'),
        description?: string(name='Description'),
        sandboxDeployTime?: long(name='SandboxDeployTime'),
        gmtCreate?: long(name='GmtCreate'),
        sandboxDeployStatus?: int32(name='SandboxDeployStatus'),
        gmtModified?: long(name='GmtModified'),
        name?: string(name='Name'),
        contentId?: long(name='ContentId'),
        id?: long(name='Id'),
      }
    ](name='Files'),
  }(name='FileList'),
}

model ListFunctionFilesResponse = {
  headers: map[string]string(name='headers'),
  body: ListFunctionFilesResponseBody(name='body'),
}

async function listFunctionFilesWithOptions(request: ListFunctionFilesRequest, runtime: Util.RuntimeOptions): ListFunctionFilesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListFunctionFiles', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listFunctionFiles(request: ListFunctionFilesRequest): ListFunctionFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFunctionFilesWithOptions(request, runtime);
}

model UpdateNamespaceDataRequest {
  projectId?: string(name='ProjectId'),
  namespace?: string(name='Namespace'),
  authType?: string(name='AuthType'),
  deviceIdType?: string(name='DeviceIdType'),
  deviceId?: string(name='DeviceId'),
  accountType?: string(name='AccountType'),
  accountId?: string(name='AccountId'),
  path?: string(name='Path'),
  oldData?: string(name='OldData'),
  newData?: string(name='NewData'),
}

model UpdateNamespaceDataResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateNamespaceDataResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateNamespaceDataResponseBody(name='body'),
}

async function updateNamespaceDataWithOptions(request: UpdateNamespaceDataRequest, runtime: Util.RuntimeOptions): UpdateNamespaceDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateNamespaceData', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateNamespaceData(request: UpdateNamespaceDataRequest): UpdateNamespaceDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNamespaceDataWithOptions(request, runtime);
}

model ListEdgeDevicesRequest {
  projectId?: string(name='ProjectId', description='项目ID'),
  pageIndex?: long(name='PageIndex', description='查询开始页'),
  pageSize?: long(name='PageSize', description='每页记录数'),
  hostDeviceId?: string(name='HostDeviceId'),
  edgeDeviceType?: long(name='EdgeDeviceType'),
  edgeDeviceName?: string(name='EdgeDeviceName'),
}

model ListEdgeDevicesResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  edgeDevices?: {
    pagination?: {
      totalCount?: long(name='TotalCount'),
      totalPageCount?: long(name='TotalPageCount'),
      pageIndex?: long(name='PageIndex'),
      pageSize?: long(name='PageSize'),
    }(name='Pagination'),
    list?: [ 
      {
        edgeDeviceId?: string(name='EdgeDeviceId'),
        edgeDeviceType?: long(name='EdgeDeviceType'),
        edgeDeviceName?: string(name='EdgeDeviceName'),
        onlineStatus?: long(name='OnlineStatus'),
        activateTime?: long(name='ActivateTime'),
        lastOnlineTime?: long(name='LastOnlineTime'),
      }
    ](name='List'),
  }(name='EdgeDevices', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
}

model ListEdgeDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListEdgeDevicesResponseBody(name='body'),
}

async function listEdgeDevicesWithOptions(request: ListEdgeDevicesRequest, runtime: Util.RuntimeOptions): ListEdgeDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListEdgeDevices', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listEdgeDevices(request: ListEdgeDevicesRequest): ListEdgeDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEdgeDevicesWithOptions(request, runtime);
}

model DeleteCustomizedPropertyRequest {
  projectId?: string(name='ProjectId'),
  id?: string(name='Id'),
}

model DeleteCustomizedPropertyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCustomizedPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCustomizedPropertyResponseBody(name='body'),
}

async function deleteCustomizedPropertyWithOptions(request: DeleteCustomizedPropertyRequest, runtime: Util.RuntimeOptions): DeleteCustomizedPropertyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteCustomizedProperty', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteCustomizedProperty(request: DeleteCustomizedPropertyRequest): DeleteCustomizedPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCustomizedPropertyWithOptions(request, runtime);
}

model UpdateAppVersionReleaseNoteRequest {
  projectId?: string(name='ProjectId'),
  versionId?: string(name='VersionId'),
  releaseNote?: string(name='ReleaseNote'),
}

model UpdateAppVersionReleaseNoteResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateAppVersionReleaseNoteResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAppVersionReleaseNoteResponseBody(name='body'),
}

async function updateAppVersionReleaseNoteWithOptions(request: UpdateAppVersionReleaseNoteRequest, runtime: Util.RuntimeOptions): UpdateAppVersionReleaseNoteResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateAppVersionReleaseNote', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateAppVersionReleaseNote(request: UpdateAppVersionReleaseNoteRequest): UpdateAppVersionReleaseNoteResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAppVersionReleaseNoteWithOptions(request, runtime);
}

model CreateTriggerRequest {
  projectId?: string(name='ProjectId'),
  namespace?: string(name='Namespace'),
  source?: string(name='Source'),
  fileIds?: string(name='FileIds'),
  functionIds?: string(name='FunctionIds'),
  invocationMode?: int32(name='InvocationMode'),
  sandbox?: int32(name='Sandbox'),
  production?: int32(name='Production'),
}

model CreateTriggerResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTriggerResponseBody(name='body'),
}

async function createTriggerWithOptions(request: CreateTriggerRequest, runtime: Util.RuntimeOptions): CreateTriggerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateTrigger', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createTrigger(request: CreateTriggerRequest): CreateTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTriggerWithOptions(request, runtime);
}

model DiagnosisVersionRequest {
  originalId?: string(name='OriginalId'),
  projectId?: string(name='ProjectId'),
  versionType?: string(name='VersionType'),
  versionId?: string(name='VersionId'),
  idType?: string(name='IdType'),
  diagnoseStyle?: string(name='DiagnoseStyle'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DiagnosisVersionResponseBody = {
  requestId?: string(name='RequestId'),
  diagnosisResult?: string(name='DiagnosisResult'),
}

model DiagnosisVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DiagnosisVersionResponseBody(name='body'),
}

async function diagnosisVersionWithOptions(request: DiagnosisVersionRequest, runtime: Util.RuntimeOptions): DiagnosisVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DiagnosisVersion', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function diagnosisVersion(request: DiagnosisVersionRequest): DiagnosisVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return diagnosisVersionWithOptions(request, runtime);
}

model ListShadowSchemaDeviceModelsRequest {
  projectId?: string(name='ProjectId'),
}

model ListShadowSchemaDeviceModelsResponseBody = {
  modelList?: [ 
    {
      deviceModelId?: long(name='DeviceModelId'),
      hardwareType?: string(name='HardwareType'),
      deviceType?: string(name='DeviceType'),
      canCreateDeviceId?: int32(name='CanCreateDeviceId'),
      projectId?: string(name='ProjectId'),
      osPlatform?: string(name='OsPlatform'),
      deviceModel?: string(name='DeviceModel'),
      securityChip?: int32(name='SecurityChip'),
      description?: string(name='Description'),
      initUsageTypeDesc?: string(name='InitUsageTypeDesc'),
      initUsageType?: int32(name='InitUsageType'),
      deviceBrand?: string(name='DeviceBrand'),
    }
  ](name='ModelList'),
  requestId?: string(name='RequestId'),
}

model ListShadowSchemaDeviceModelsResponse = {
  headers: map[string]string(name='headers'),
  body: ListShadowSchemaDeviceModelsResponseBody(name='body'),
}

async function listShadowSchemaDeviceModelsWithOptions(request: ListShadowSchemaDeviceModelsRequest, runtime: Util.RuntimeOptions): ListShadowSchemaDeviceModelsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListShadowSchemaDeviceModels', '2018-05-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listShadowSchemaDeviceModels(request: ListShadowSchemaDeviceModelsRequest): ListShadowSchemaDeviceModelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listShadowSchemaDeviceModelsWithOptions(request, runtime);
}

model PushConfigInfoRequest {
  projectId?: string(name='ProjectId', description='项目ID'),
  hostDeviceId?: string(name='HostDeviceId', description='主机设备id'),
  config?: string(name='Config', description='配置信息'),
}

model PushConfigInfoResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model PushConfigInfoResponse = {
  headers: map[string]string(name='headers'),
  body: PushConfigInfoResponseBody(name='body'),
}

async function pushConfigInfoWithOptions(request: PushConfigInfoRequest, runtime: Util.RuntimeOptions): PushConfigInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PushConfigInfo', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function pushConfigInfo(request: PushConfigInfoRequest): PushConfigInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushConfigInfoWithOptions(request, runtime);
}

model GenerateOssUploadMetaRequest {
  projectId?: string(name='ProjectId'),
  ext?: string(name='Ext'),
}

model GenerateOssUploadMetaResponseBody = {
  requestId?: string(name='RequestId'),
  ossUploadMeta?: {
    securityToken?: string(name='SecurityToken'),
    objectKey?: string(name='ObjectKey'),
    accessKeySecret?: string(name='AccessKeySecret'),
    accessKeyId?: string(name='AccessKeyId'),
    bucket?: string(name='Bucket'),
  }(name='OssUploadMeta'),
}

model GenerateOssUploadMetaResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateOssUploadMetaResponseBody(name='body'),
}

async function generateOssUploadMetaWithOptions(request: GenerateOssUploadMetaRequest, runtime: Util.RuntimeOptions): GenerateOssUploadMetaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GenerateOssUploadMeta', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function generateOssUploadMeta(request: GenerateOssUploadMetaRequest): GenerateOssUploadMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateOssUploadMetaWithOptions(request, runtime);
}

model AddVersionBlackDevicesRequest {
  deviceIds?: string(name='DeviceIds'),
  projectId?: string(name='ProjectId'),
  versionType?: string(name='VersionType'),
  deviceIdType?: string(name='DeviceIdType'),
  versionId?: string(name='VersionId'),
}

model AddVersionBlackDevicesResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddVersionBlackDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: AddVersionBlackDevicesResponseBody(name='body'),
}

async function addVersionBlackDevicesWithOptions(request: AddVersionBlackDevicesRequest, runtime: Util.RuntimeOptions): AddVersionBlackDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddVersionBlackDevices', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addVersionBlackDevices(request: AddVersionBlackDevicesRequest): AddVersionBlackDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return addVersionBlackDevicesWithOptions(request, runtime);
}

model DescribeCustomizedFilterRequest {
  projectId?: string(name='ProjectId'),
  id?: string(name='Id'),
}

model DescribeCustomizedFilterResponseBody = {
  customizedFilter?: {
    gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
    gmtModify?: string(name='GmtModify'),
    valueCompareType?: string(name='ValueCompareType'),
    versionId?: long(name='VersionId'),
    gmtModifyTimestamp?: long(name='GmtModifyTimestamp'),
    value?: string(name='Value'),
    valueType?: string(name='ValueType'),
    gmtCreate?: string(name='GmtCreate'),
    blackWhiteType?: string(name='BlackWhiteType'),
    name?: string(name='Name'),
    versionType?: string(name='VersionType'),
    id?: long(name='Id'),
  }(name='CustomizedFilter'),
  requestId?: string(name='RequestId'),
}

model DescribeCustomizedFilterResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCustomizedFilterResponseBody(name='body'),
}

async function describeCustomizedFilterWithOptions(request: DescribeCustomizedFilterRequest, runtime: Util.RuntimeOptions): DescribeCustomizedFilterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCustomizedFilter', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCustomizedFilter(request: DescribeCustomizedFilterRequest): DescribeCustomizedFilterResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomizedFilterWithOptions(request, runtime);
}

model DescribeDeviceIdByOuterInfoRequest {
  projectId?: string(name='ProjectId'),
  queryType?: string(name='QueryType'),
  queryValue?: string(name='QueryValue'),
}

model DescribeDeviceIdByOuterInfoResponseBody = {
  requestId?: string(name='RequestId'),
  deviceId?: string(name='DeviceId'),
}

model DescribeDeviceIdByOuterInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeviceIdByOuterInfoResponseBody(name='body'),
}

async function describeDeviceIdByOuterInfoWithOptions(request: DescribeDeviceIdByOuterInfoRequest, runtime: Util.RuntimeOptions): DescribeDeviceIdByOuterInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeDeviceIdByOuterInfo', '2018-05-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeDeviceIdByOuterInfo(request: DescribeDeviceIdByOuterInfoRequest): DescribeDeviceIdByOuterInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeviceIdByOuterInfoWithOptions(request, runtime);
}

model CreateAppVersionRequest {
  isForceUpgrade?: string(name='IsForceUpgrade'),
  isAllowNewInstall?: string(name='IsAllowNewInstall'),
  projectId?: string(name='ProjectId'),
  appId?: string(name='AppId'),
  appVersion?: string(name='AppVersion'),
  versionCode?: string(name='VersionCode'),
  installType?: string(name='InstallType'),
  remark?: string(name='Remark'),
  releaseNote?: string(name='ReleaseNote'),
  isSilentUpgrade?: string(name='IsSilentUpgrade'),
  packageUrl?: string(name='PackageUrl'),
  isNeedRestart?: string(name='IsNeedRestart'),
  blackVersionList?: string(name='BlackVersionList'),
  whiteVersionList?: string(name='WhiteVersionList'),
  restartType?: string(name='RestartType'),
  restartAppType?: string(name='RestartAppType'),
  restartAppParam?: string(name='RestartAppParam'),
  deviceAdapterList?: string(name='DeviceAdapterList'),
  apkMd5?: string(name='ApkMd5'),
}

model CreateAppVersionResponseBody = {
  versionId?: string(name='VersionId'),
  requestId?: string(name='RequestId'),
}

model CreateAppVersionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAppVersionResponseBody(name='body'),
}

async function createAppVersionWithOptions(request: CreateAppVersionRequest, runtime: Util.RuntimeOptions): CreateAppVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAppVersion', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAppVersion(request: CreateAppVersionRequest): CreateAppVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppVersionWithOptions(request, runtime);
}

model CountActivatedOrNewRegistrationDeviceRequest {
  projectId?: string(name='ProjectId'),
  deviceType?: string(name='DeviceType'),
  deviceBrandId?: string(name='DeviceBrandId'),
  deviceBrand?: string(name='DeviceBrand'),
  deviceModelId?: string(name='DeviceModelId'),
  deviceModel?: string(name='DeviceModel'),
  deviceCountStatType?: string(name='DeviceCountStatType'),
  isQueryNewRegistrationDevice?: string(name='IsQueryNewRegistrationDevice'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  isQueryYearlyActivate?: string(name='IsQueryYearlyActivate'),
}

model CountActivatedOrNewRegistrationDeviceResponseBody = {
  requestId?: string(name='RequestId'),
  statistics?: {
    categories?: [ string ](name='Categories'),
    series?: [ 
      {
        data?: [ string ](name='Data'),
        name?: string(name='Name'),
      }
    ](name='Series'),
  }(name='Statistics'),
}

model CountActivatedOrNewRegistrationDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: CountActivatedOrNewRegistrationDeviceResponseBody(name='body'),
}

async function countActivatedOrNewRegistrationDeviceWithOptions(request: CountActivatedOrNewRegistrationDeviceRequest, runtime: Util.RuntimeOptions): CountActivatedOrNewRegistrationDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CountActivatedOrNewRegistrationDevice', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function countActivatedOrNewRegistrationDevice(request: CountActivatedOrNewRegistrationDeviceRequest): CountActivatedOrNewRegistrationDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return countActivatedOrNewRegistrationDeviceWithOptions(request, runtime);
}

model ListDevicesRequest {
  projectId?: string(name='ProjectId'),
  deviceModelId?: int32(name='DeviceModelId'),
  deviceModel?: string(name='DeviceModel'),
  start?: string(name='Start'),
  length?: string(name='Length'),
}

model ListDevicesResponseBody = {
  requestId?: string(name='RequestId'),
  devices?: [ 
    {
      serialNumber?: string(name='SerialNumber'),
      status?: string(name='Status'),
      deviceModelId?: long(name='DeviceModelId'),
      macAddress?: string(name='MacAddress'),
      deviceId?: string(name='DeviceId'),
      deviceType?: string(name='DeviceType'),
      projectId?: string(name='ProjectId'),
      deviceModel?: string(name='DeviceModel'),
      usageType?: int32(name='UsageType'),
      vin?: string(name='Vin'),
      usageTypeDesc?: string(name='UsageTypeDesc'),
      uuid?: string(name='Uuid'),
      hardwareId?: string(name='HardwareId'),
      region?: string(name='Region'),
      softwareId?: string(name='SoftwareId'),
      name?: string(name='Name'),
      deviceBrand?: string(name='DeviceBrand'),
    }
  ](name='Devices'),
}

model ListDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDevicesResponseBody(name='body'),
}

async function listDevicesWithOptions(request: ListDevicesRequest, runtime: Util.RuntimeOptions): ListDevicesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListDevices', '2018-05-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listDevices(request: ListDevicesRequest): ListDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDevicesWithOptions(request, runtime);
}

model FindVersionTestsRequest {
  projectId?: string(name='ProjectId'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  versionId?: string(name='VersionId'),
  versionType?: string(name='VersionType'),
}

model FindVersionTestsResponseBody = {
  requestId?: string(name='RequestId'),
  versionTestList?: {
    items?: [ 
      {
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        gmtModify?: string(name='GmtModify'),
        versionId?: string(name='VersionId'),
        gmtModifyTimestamp?: long(name='GmtModifyTimestamp'),
        failedCount?: string(name='FailedCount'),
        deviceGroupId?: string(name='DeviceGroupId'),
        skippedCount?: string(name='SkippedCount'),
        description?: string(name='Description'),
        succeededCount?: string(name='SucceededCount'),
        deviceGroupName?: string(name='DeviceGroupName'),
        gmtCreate?: string(name='GmtCreate'),
        name?: string(name='Name'),
        id?: long(name='Id'),
        versionType?: string(name='VersionType'),
      }
    ](name='Items'),
    totalCount?: int32(name='TotalCount'),
  }(name='VersionTestList'),
}

model FindVersionTestsResponse = {
  headers: map[string]string(name='headers'),
  body: FindVersionTestsResponseBody(name='body'),
}

async function findVersionTestsWithOptions(request: FindVersionTestsRequest, runtime: Util.RuntimeOptions): FindVersionTestsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('FindVersionTests', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function findVersionTests(request: FindVersionTestsRequest): FindVersionTestsResponse {
  var runtime = new Util.RuntimeOptions{};
  return findVersionTestsWithOptions(request, runtime);
}

model PublishOsVersionRequest {
  projectId?: string(name='ProjectId'),
  versionId?: string(name='VersionId'),
  sendMessage?: boolean(name='SendMessage'),
}

model PublishOsVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model PublishOsVersionResponse = {
  headers: map[string]string(name='headers'),
  body: PublishOsVersionResponseBody(name='body'),
}

async function publishOsVersionWithOptions(request: PublishOsVersionRequest, runtime: Util.RuntimeOptions): PublishOsVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PublishOsVersion', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function publishOsVersion(request: PublishOsVersionRequest): PublishOsVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishOsVersionWithOptions(request, runtime);
}

model CreateUpstreamAppKeyRelationsRequest {
  appKeys?: string(name='AppKeys'),
  appServerId?: string(name='AppServerId'),
  projectId?: string(name='ProjectId'),
}

model CreateUpstreamAppKeyRelationsResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateUpstreamAppKeyRelationsResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUpstreamAppKeyRelationsResponseBody(name='body'),
}

async function createUpstreamAppKeyRelationsWithOptions(request: CreateUpstreamAppKeyRelationsRequest, runtime: Util.RuntimeOptions): CreateUpstreamAppKeyRelationsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateUpstreamAppKeyRelations', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createUpstreamAppKeyRelations(request: CreateUpstreamAppKeyRelationsRequest): CreateUpstreamAppKeyRelationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUpstreamAppKeyRelationsWithOptions(request, runtime);
}

model UpdateOsVersionReleaseNoteRequest {
  projectId?: string(name='ProjectId'),
  versionId?: string(name='VersionId'),
  releaseNote?: string(name='ReleaseNote'),
}

model UpdateOsVersionReleaseNoteResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateOsVersionReleaseNoteResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateOsVersionReleaseNoteResponseBody(name='body'),
}

async function updateOsVersionReleaseNoteWithOptions(request: UpdateOsVersionReleaseNoteRequest, runtime: Util.RuntimeOptions): UpdateOsVersionReleaseNoteResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateOsVersionReleaseNote', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateOsVersionReleaseNote(request: UpdateOsVersionReleaseNoteRequest): UpdateOsVersionReleaseNoteResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOsVersionReleaseNoteWithOptions(request, runtime);
}

model PublishAppVersionRequest {
  projectId?: string(name='ProjectId'),
  versionId?: string(name='VersionId'),
  sendMessage?: boolean(name='SendMessage'),
}

model PublishAppVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model PublishAppVersionResponse = {
  headers: map[string]string(name='headers'),
  body: PublishAppVersionResponseBody(name='body'),
}

async function publishAppVersionWithOptions(request: PublishAppVersionRequest, runtime: Util.RuntimeOptions): PublishAppVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PublishAppVersion', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function publishAppVersion(request: PublishAppVersionRequest): PublishAppVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishAppVersionWithOptions(request, runtime);
}

model PublishMqttMessageRequest {
  appKey?: string(name='AppKey'),
  topic?: string(name='Topic'),
  projectId?: string(name='ProjectId'),
  message?: string(name='Message'),
  qoS?: int32(name='QoS'),
}

model PublishMqttMessageResponseBody = {
  requestId?: string(name='RequestId'),
  mid?: string(name='Mid'),
}

model PublishMqttMessageResponse = {
  headers: map[string]string(name='headers'),
  body: PublishMqttMessageResponseBody(name='body'),
}

async function publishMqttMessageWithOptions(request: PublishMqttMessageRequest, runtime: Util.RuntimeOptions): PublishMqttMessageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PublishMqttMessage', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function publishMqttMessage(request: PublishMqttMessageRequest): PublishMqttMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishMqttMessageWithOptions(request, runtime);
}

model DeleteVersionGroupDeviceRequest {
  deviceIds?: string(name='DeviceIds'),
  projectId?: string(name='ProjectId'),
  deviceGroupId?: string(name='DeviceGroupId'),
  deviceIdType?: string(name='DeviceIdType'),
}

model DeleteVersionGroupDeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVersionGroupDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVersionGroupDeviceResponseBody(name='body'),
}

async function deleteVersionGroupDeviceWithOptions(request: DeleteVersionGroupDeviceRequest, runtime: Util.RuntimeOptions): DeleteVersionGroupDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteVersionGroupDevice', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteVersionGroupDevice(request: DeleteVersionGroupDeviceRequest): DeleteVersionGroupDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVersionGroupDeviceWithOptions(request, runtime);
}

model DeleteFunctionFileRequest {
  projectId?: string(name='ProjectId'),
  fileName?: string(name='FileName'),
  fileType?: int32(name='FileType'),
}

model DeleteFunctionFileResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteFunctionFileResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFunctionFileResponseBody(name='body'),
}

async function deleteFunctionFileWithOptions(request: DeleteFunctionFileRequest, runtime: Util.RuntimeOptions): DeleteFunctionFileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteFunctionFile', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteFunctionFile(request: DeleteFunctionFileRequest): DeleteFunctionFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFunctionFileWithOptions(request, runtime);
}

model AddVersionWhiteDevicesRequest {
  deviceIds?: string(name='DeviceIds'),
  projectId?: string(name='ProjectId'),
  versionType?: string(name='VersionType'),
  deviceIdType?: string(name='DeviceIdType'),
  versionId?: string(name='VersionId'),
}

model AddVersionWhiteDevicesResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddVersionWhiteDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: AddVersionWhiteDevicesResponseBody(name='body'),
}

async function addVersionWhiteDevicesWithOptions(request: AddVersionWhiteDevicesRequest, runtime: Util.RuntimeOptions): AddVersionWhiteDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddVersionWhiteDevices', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addVersionWhiteDevices(request: AddVersionWhiteDevicesRequest): AddVersionWhiteDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return addVersionWhiteDevicesWithOptions(request, runtime);
}

model ListAssistHistoryDetailsRequest {
  projectId?: string(name='ProjectId'),
  assistId?: string(name='AssistId'),
}

model ListAssistHistoryDetailsResponseBody = {
  requestId?: string(name='RequestId'),
  actions?: [ 
    {
      action?: string(name='Action'),
      createdAt?: long(name='CreatedAt'),
      timestamp?: string(name='Timestamp'),
      updatedAt?: long(name='UpdatedAt'),
      assistId?: string(name='AssistId'),
      ID?: string(name='ID'),
    }
  ](name='Actions'),
}

model ListAssistHistoryDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAssistHistoryDetailsResponseBody(name='body'),
}

async function listAssistHistoryDetailsWithOptions(request: ListAssistHistoryDetailsRequest, runtime: Util.RuntimeOptions): ListAssistHistoryDetailsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListAssistHistoryDetails', '2018-05-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listAssistHistoryDetails(request: ListAssistHistoryDetailsRequest): ListAssistHistoryDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAssistHistoryDetailsWithOptions(request, runtime);
}

model CreateCustomizedFilterRequest {
  versionType?: string(name='VersionType'),
  blackWhiteType?: string(name='BlackWhiteType'),
  value?: string(name='Value'),
  projectId?: string(name='ProjectId'),
  valueCompareType?: string(name='ValueCompareType'),
  name?: string(name='Name'),
  valueType?: string(name='ValueType'),
  versionId?: string(name='VersionId'),
}

model CreateCustomizedFilterResponseBody = {
  customizedFilterId?: string(name='CustomizedFilterId'),
  requestId?: string(name='RequestId'),
}

model CreateCustomizedFilterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCustomizedFilterResponseBody(name='body'),
}

async function createCustomizedFilterWithOptions(request: CreateCustomizedFilterRequest, runtime: Util.RuntimeOptions): CreateCustomizedFilterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCustomizedFilter', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCustomizedFilter(request: CreateCustomizedFilterRequest): CreateCustomizedFilterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCustomizedFilterWithOptions(request, runtime);
}

model DeleteUpstreamAppKeyRelationRequest {
  id?: string(name='Id'),
  projectId?: string(name='ProjectId'),
}

model DeleteUpstreamAppKeyRelationResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteUpstreamAppKeyRelationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUpstreamAppKeyRelationResponseBody(name='body'),
}

async function deleteUpstreamAppKeyRelationWithOptions(request: DeleteUpstreamAppKeyRelationRequest, runtime: Util.RuntimeOptions): DeleteUpstreamAppKeyRelationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteUpstreamAppKeyRelation', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteUpstreamAppKeyRelation(request: DeleteUpstreamAppKeyRelationRequest): DeleteUpstreamAppKeyRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUpstreamAppKeyRelationWithOptions(request, runtime);
}

model DescribeAppVersionRequest {
  projectId?: string(name='ProjectId'),
  versionId?: string(name='VersionId'),
}

model DescribeAppVersionResponseBody = {
  appVersion?: {
    status?: string(name='Status'),
    isAllowNewInstall?: string(name='IsAllowNewInstall'),
    releaseNote?: string(name='ReleaseNote'),
    packageName?: string(name='PackageName'),
    remark?: string(name='Remark'),
    statusName?: string(name='StatusName'),
    apkMd5?: string(name='ApkMd5'),
    restartAppParam?: string(name='RestartAppParam'),
    whiteVersionList?: string(name='WhiteVersionList'),
    appName?: string(name='AppName'),
    appId?: string(name='AppId'),
    restartAppType?: string(name='RestartAppType'),
    versionCode?: long(name='VersionCode'),
    blackVersionList?: string(name='BlackVersionList'),
    gmtModify?: string(name='GmtModify'),
    downloadUrl?: string(name='DownloadUrl'),
    adapters?: [ 
      {
        deviceModelId?: string(name='DeviceModelId'),
        maxOsVersion?: string(name='MaxOsVersion'),
        minOsVersion?: string(name='MinOsVersion'),
        versionId?: long(name='VersionId'),
        id?: long(name='Id'),
        deviceModelName?: string(name='DeviceModelName'),
      }
    ](name='Adapters'),
    isSilentUpgrade?: string(name='IsSilentUpgrade'),
    installType?: string(name='InstallType'),
    isNeedRestart?: string(name='IsNeedRestart'),
    size?: string(name='Size'),
    restartType?: string(name='RestartType'),
    gmtCreate?: string(name='GmtCreate'),
    md5?: string(name='Md5'),
    appVersion?: string(name='AppVersion'),
    isForceUpgrade?: string(name='IsForceUpgrade'),
    id?: long(name='Id'),
    originalUrl?: string(name='OriginalUrl'),
  }(name='AppVersion'),
  requestId?: string(name='RequestId'),
}

model DescribeAppVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppVersionResponseBody(name='body'),
}

async function describeAppVersionWithOptions(request: DescribeAppVersionRequest, runtime: Util.RuntimeOptions): DescribeAppVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAppVersion', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAppVersion(request: DescribeAppVersionRequest): DescribeAppVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppVersionWithOptions(request, runtime);
}

model ListVehicleRequest {
  deviceId?: string(name='DeviceId'),
  vin?: string(name='Vin'),
  projectId?: string(name='ProjectId'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model ListVehicleResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  vehicles?: {
    pagination?: {
      pageIndex?: int32(name='PageIndex'),
      pageSize?: int32(name='PageSize'),
      totalCount?: long(name='TotalCount'),
    }(name='Pagination'),
    list?: [ 
      {
        connectionStatus?: string(name='ConnectionStatus'),
        createTime?: long(name='CreateTime'),
        deviceId?: string(name='DeviceId'),
        vin?: string(name='Vin'),
      }
    ](name='List'),
  }(name='Vehicles'),
}

model ListVehicleResponse = {
  headers: map[string]string(name='headers'),
  body: ListVehicleResponseBody(name='body'),
}

async function listVehicleWithOptions(request: ListVehicleRequest, runtime: Util.RuntimeOptions): ListVehicleResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListVehicle', '2018-05-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listVehicle(request: ListVehicleRequest): ListVehicleResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVehicleWithOptions(request, runtime);
}

model ExecuteCameraShootingCommandRequest {
  projectId?: string(name='ProjectId', description='项目ID'),
  edgeDeviceId?: string(name='EdgeDeviceId', description='终端设备id'),
  shootingType?: long(name='ShootingType', description='拍摄类型，0-图片，1-视频'),
  number?: long(name='Number', description='拍摄数量'),
  time?: long(name='Time', description='拍照间隔/视频时长，单位为s'),
}

model ExecuteCameraShootingCommandResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  shootingRecord?: {
    id?: long(name='Id', description='主键ID'),
    shootingType?: long(name='ShootingType', description='拍摄类型，0-图片，1-视频'),
    number?: long(name='Number', description='拍摄数量'),
    time?: long(name='Time', description='拍照间隔/视频时长，单位为s'),
    recordTime?: long(name='RecordTime', description='记录时间'),
    status?: long(name='Status', description='状态：0-未完成，1-已完成'),
  }(name='ShootingRecord'),
}

model ExecuteCameraShootingCommandResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteCameraShootingCommandResponseBody(name='body'),
}

async function executeCameraShootingCommandWithOptions(request: ExecuteCameraShootingCommandRequest, runtime: Util.RuntimeOptions): ExecuteCameraShootingCommandResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExecuteCameraShootingCommand', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function executeCameraShootingCommand(request: ExecuteCameraShootingCommandRequest): ExecuteCameraShootingCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeCameraShootingCommandWithOptions(request, runtime);
}

model DeleteVersionDeviceGroupRequest {
  projectId?: string(name='ProjectId'),
  id?: string(name='Id'),
}

model DeleteVersionDeviceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVersionDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVersionDeviceGroupResponseBody(name='body'),
}

async function deleteVersionDeviceGroupWithOptions(request: DeleteVersionDeviceGroupRequest, runtime: Util.RuntimeOptions): DeleteVersionDeviceGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteVersionDeviceGroup', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteVersionDeviceGroup(request: DeleteVersionDeviceGroupRequest): DeleteVersionDeviceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVersionDeviceGroupWithOptions(request, runtime);
}

model ListFunctionFilesByProjectIdRequest {
  projectId?: string(name='ProjectId'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model ListFunctionFilesByProjectIdResponseBody = {
  requestId?: string(name='RequestId'),
  files?: [ 
    {
      type?: int32(name='Type'),
      status?: int32(name='Status'),
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      name?: string(name='Name'),
      id?: long(name='Id'),
      contentId?: long(name='ContentId'),
    }
  ](name='Files'),
}

model ListFunctionFilesByProjectIdResponse = {
  headers: map[string]string(name='headers'),
  body: ListFunctionFilesByProjectIdResponseBody(name='body'),
}

async function listFunctionFilesByProjectIdWithOptions(request: ListFunctionFilesByProjectIdRequest, runtime: Util.RuntimeOptions): ListFunctionFilesByProjectIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListFunctionFilesByProjectId', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listFunctionFilesByProjectId(request: ListFunctionFilesByProjectIdRequest): ListFunctionFilesByProjectIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFunctionFilesByProjectIdWithOptions(request, runtime);
}

model FindVersionWhiteDevicesRequest {
  projectId?: string(name='ProjectId'),
  versionId?: string(name='VersionId'),
  versionType?: string(name='VersionType'),
  deviceId?: string(name='DeviceId'),
  originalId?: string(name='OriginalId'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model FindVersionWhiteDevicesResponseBody = {
  requestId?: string(name='RequestId'),
  deviceList?: {
    items?: [ 
      {
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        originalId?: string(name='OriginalId'),
        deviceId?: string(name='DeviceId'),
        idType?: string(name='IdType'),
        gmtCreate?: string(name='GmtCreate'),
        id?: long(name='Id'),
      }
    ](name='Items'),
    totalCount?: int32(name='TotalCount'),
  }(name='DeviceList'),
}

model FindVersionWhiteDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: FindVersionWhiteDevicesResponseBody(name='body'),
}

async function findVersionWhiteDevicesWithOptions(request: FindVersionWhiteDevicesRequest, runtime: Util.RuntimeOptions): FindVersionWhiteDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('FindVersionWhiteDevices', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function findVersionWhiteDevices(request: FindVersionWhiteDevicesRequest): FindVersionWhiteDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return findVersionWhiteDevicesWithOptions(request, runtime);
}

model CreateUpstreamAppServerRequest {
  projectId?: string(name='ProjectId'),
  name?: string(name='Name'),
  tags?: string(name='Tags'),
}

model CreateUpstreamAppServerResponseBody = {
  requestId?: string(name='RequestId'),
  id?: long(name='Id'),
}

model CreateUpstreamAppServerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUpstreamAppServerResponseBody(name='body'),
}

async function createUpstreamAppServerWithOptions(request: CreateUpstreamAppServerRequest, runtime: Util.RuntimeOptions): CreateUpstreamAppServerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateUpstreamAppServer', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createUpstreamAppServer(request: CreateUpstreamAppServerRequest): CreateUpstreamAppServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUpstreamAppServerWithOptions(request, runtime);
}

model DescribeVersionDeviceGroupRequest {
  projectId?: string(name='ProjectId'),
  id?: string(name='Id'),
}

model DescribeVersionDeviceGroupResponseBody = {
  requestId?: string(name='RequestId'),
  deviceGroup?: {
    gmtModify?: string(name='GmtModify'),
    description?: string(name='Description'),
    gmtCreate?: string(name='GmtCreate'),
    name?: string(name='Name'),
    id?: long(name='Id'),
    maxCount?: string(name='MaxCount'),
  }(name='DeviceGroup'),
}

model DescribeVersionDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVersionDeviceGroupResponseBody(name='body'),
}

async function describeVersionDeviceGroupWithOptions(request: DescribeVersionDeviceGroupRequest, runtime: Util.RuntimeOptions): DescribeVersionDeviceGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVersionDeviceGroup', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVersionDeviceGroup(request: DescribeVersionDeviceGroupRequest): DescribeVersionDeviceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVersionDeviceGroupWithOptions(request, runtime);
}

model UpdateAppVersionRequest {
  blackVersionList?: string(name='BlackVersionList'),
  isAllowNewInstall?: string(name='IsAllowNewInstall'),
  projectId?: string(name='ProjectId'),
  appId?: string(name='AppId'),
  appVersion?: string(name='AppVersion'),
  versionCode?: string(name='VersionCode'),
  installType?: string(name='InstallType'),
  remark?: string(name='Remark'),
  isForceUpgrade?: string(name='IsForceUpgrade'),
  isSilentUpgrade?: string(name='IsSilentUpgrade'),
  isNeedRestart?: string(name='IsNeedRestart'),
  packageUrl?: string(name='PackageUrl'),
  releaseNote?: string(name='ReleaseNote'),
  whiteVersionList?: string(name='WhiteVersionList'),
  restartType?: string(name='RestartType'),
  restartAppType?: string(name='RestartAppType'),
  restartAppParam?: string(name='RestartAppParam'),
  deviceAdapterList?: string(name='DeviceAdapterList'),
  versionId?: string(name='VersionId'),
  apkMd5?: string(name='ApkMd5'),
}

model UpdateAppVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateAppVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAppVersionResponseBody(name='body'),
}

async function updateAppVersionWithOptions(request: UpdateAppVersionRequest, runtime: Util.RuntimeOptions): UpdateAppVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateAppVersion', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateAppVersion(request: UpdateAppVersionRequest): UpdateAppVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAppVersionWithOptions(request, runtime);
}

model CreateCustomizedPropertyRequest {
  versionId?: string(name='VersionId'),
  projectId?: string(name='ProjectId'),
  name?: string(name='Name'),
  value?: string(name='Value'),
  versionType?: string(name='VersionType'),
}

model CreateCustomizedPropertyResponseBody = {
  requestId?: string(name='RequestId'),
  customizedPropertyId?: string(name='CustomizedPropertyId'),
}

model CreateCustomizedPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCustomizedPropertyResponseBody(name='body'),
}

async function createCustomizedPropertyWithOptions(request: CreateCustomizedPropertyRequest, runtime: Util.RuntimeOptions): CreateCustomizedPropertyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCustomizedProperty', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCustomizedProperty(request: CreateCustomizedPropertyRequest): CreateCustomizedPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCustomizedPropertyWithOptions(request, runtime);
}

model ListSchemaSubscribesRequest {
  projectId?: string(name='ProjectId'),
  deviceModel?: string(name='DeviceModel'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model ListSchemaSubscribesResponseBody = {
  requestId?: string(name='RequestId'),
  pageList?: [ 
    {
      pagination?: {
        pageIndex?: int32(name='PageIndex'),
        totalPageCount?: int32(name='TotalPageCount'),
        pageSize?: int32(name='PageSize'),
        totalCount?: int32(name='TotalCount'),
        simpleSign?: boolean(name='SimpleSign'),
        hasNextPage?: boolean(name='HasNextPage'),
      }(name='Pagination'),
      list?: [ 
        {
          deviceModelId?: long(name='DeviceModelId'),
          version?: string(name='Version'),
          projectId?: string(name='ProjectId'),
          gmtCreate?: long(name='GmtCreate'),
          namespace?: string(name='Namespace'),
          validitySchema?: string(name='ValiditySchema'),
          deviceModel?: string(name='DeviceModel'),
          gmtModified?: long(name='GmtModified'),
          id?: long(name='Id'),
        }
      ](name='List'),
    }
  ](name='PageList'),
}

model ListSchemaSubscribesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSchemaSubscribesResponseBody(name='body'),
}

async function listSchemaSubscribesWithOptions(request: ListSchemaSubscribesRequest, runtime: Util.RuntimeOptions): ListSchemaSubscribesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListSchemaSubscribes', '2018-05-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listSchemaSubscribes(request: ListSchemaSubscribesRequest): ListSchemaSubscribesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSchemaSubscribesWithOptions(request, runtime);
}

model UpdateSchemaSubscribeRequest {
  deviceModel?: string(name='DeviceModel'),
  subscribeList?: string(name='SubscribeList'),
  projectId?: string(name='ProjectId'),
  schemaVersion?: string(name='SchemaVersion'),
}

model UpdateSchemaSubscribeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateSchemaSubscribeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSchemaSubscribeResponseBody(name='body'),
}

async function updateSchemaSubscribeWithOptions(request: UpdateSchemaSubscribeRequest, runtime: Util.RuntimeOptions): UpdateSchemaSubscribeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateSchemaSubscribe', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateSchemaSubscribe(request: UpdateSchemaSubscribeRequest): UpdateSchemaSubscribeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSchemaSubscribeWithOptions(request, runtime);
}

model DeleteAllVersionGroupDevicesRequest {
  projectId?: string(name='ProjectId'),
  deviceGroupId?: string(name='DeviceGroupId'),
}

model DeleteAllVersionGroupDevicesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAllVersionGroupDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAllVersionGroupDevicesResponseBody(name='body'),
}

async function deleteAllVersionGroupDevicesWithOptions(request: DeleteAllVersionGroupDevicesRequest, runtime: Util.RuntimeOptions): DeleteAllVersionGroupDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAllVersionGroupDevices', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAllVersionGroupDevices(request: DeleteAllVersionGroupDevicesRequest): DeleteAllVersionGroupDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAllVersionGroupDevicesWithOptions(request, runtime);
}

model DeleteVersionWhiteDevicesByIdRequest {
  ids?: string(name='Ids'),
  projectId?: string(name='ProjectId'),
  versionType?: string(name='VersionType'),
  versionId?: string(name='VersionId'),
}

model DeleteVersionWhiteDevicesByIdResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVersionWhiteDevicesByIdResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVersionWhiteDevicesByIdResponseBody(name='body'),
}

async function deleteVersionWhiteDevicesByIdWithOptions(request: DeleteVersionWhiteDevicesByIdRequest, runtime: Util.RuntimeOptions): DeleteVersionWhiteDevicesByIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteVersionWhiteDevicesById', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteVersionWhiteDevicesById(request: DeleteVersionWhiteDevicesByIdRequest): DeleteVersionWhiteDevicesByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVersionWhiteDevicesByIdWithOptions(request, runtime);
}

model UpdateOsVersionRequest {
  isMilestone?: string(name='IsMilestone'),
  isForceNightUpgrade?: string(name='IsForceNightUpgrade'),
  projectId?: string(name='ProjectId'),
  deviceModelId?: string(name='DeviceModelId'),
  systemVersion?: string(name='SystemVersion'),
  releaseNote?: string(name='ReleaseNote'),
  remark?: string(name='Remark'),
  isForceUpgrade?: string(name='IsForceUpgrade'),
  blackVersionList?: string(name='BlackVersionList'),
  whiteVersionList?: string(name='WhiteVersionList'),
  maxClientVersion?: string(name='MaxClientVersion'),
  minClientVersion?: string(name='MinClientVersion'),
  nightUpgradeDownloadType?: string(name='NightUpgradeDownloadType'),
  nightUpgradeIsShowTip?: string(name='NightUpgradeIsShowTip'),
  nightUpgradeIsAllowedCancel?: string(name='NightUpgradeIsAllowedCancel'),
  romList?: string(name='RomList'),
  id?: string(name='Id'),
  enableMobileDownload?: string(name='EnableMobileDownload'),
  mobileDownloadMaxSize?: string(name='MobileDownloadMaxSize'),
}

model UpdateOsVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateOsVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateOsVersionResponseBody(name='body'),
}

async function updateOsVersionWithOptions(request: UpdateOsVersionRequest, runtime: Util.RuntimeOptions): UpdateOsVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateOsVersion', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateOsVersion(request: UpdateOsVersionRequest): UpdateOsVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOsVersionWithOptions(request, runtime);
}

model GenerateOssPostPolicyRequest {
  projectId?: string(name='ProjectId'),
  ext?: string(name='Ext'),
  accessId?: string(name='AccessId'),
  accessKey?: string(name='AccessKey'),
}

model GenerateOssPostPolicyResponseBody = {
  requestId?: string(name='RequestId'),
  ossPostPolicy?: {
    signature?: string(name='Signature'),
    host?: string(name='Host'),
    policy?: string(name='Policy'),
    expire?: string(name='Expire'),
    accessId?: string(name='AccessId'),
  }(name='OssPostPolicy'),
}

model GenerateOssPostPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateOssPostPolicyResponseBody(name='body'),
}

async function generateOssPostPolicyWithOptions(request: GenerateOssPostPolicyRequest, runtime: Util.RuntimeOptions): GenerateOssPostPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GenerateOssPostPolicy', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function generateOssPostPolicy(request: GenerateOssPostPolicyRequest): GenerateOssPostPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateOssPostPolicyWithOptions(request, runtime);
}

model FindVersionGroupDevicesRequest {
  projectId?: string(name='ProjectId'),
  originalId?: string(name='OriginalId'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  deviceGroupId?: string(name='DeviceGroupId'),
  deviceId?: string(name='DeviceId'),
}

model FindVersionGroupDevicesResponseBody = {
  requestId?: string(name='RequestId'),
  groupDeviceList?: {
    items?: [ 
      {
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        originalId?: string(name='OriginalId'),
        deviceId?: string(name='DeviceId'),
        idType?: string(name='IdType'),
        gmtCreate?: string(name='GmtCreate'),
        id?: string(name='Id'),
      }
    ](name='Items'),
    totalCount?: int32(name='TotalCount'),
  }(name='GroupDeviceList'),
}

model FindVersionGroupDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: FindVersionGroupDevicesResponseBody(name='body'),
}

async function findVersionGroupDevicesWithOptions(request: FindVersionGroupDevicesRequest, runtime: Util.RuntimeOptions): FindVersionGroupDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('FindVersionGroupDevices', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function findVersionGroupDevices(request: FindVersionGroupDevicesRequest): FindVersionGroupDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return findVersionGroupDevicesWithOptions(request, runtime);
}

model DeleteOpenAccountRequest {
  identityId?: string(name='IdentityId'),
  projectId?: string(name='ProjectId'),
}

model DeleteOpenAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteOpenAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteOpenAccountResponseBody(name='body'),
}

async function deleteOpenAccountWithOptions(request: DeleteOpenAccountRequest, runtime: Util.RuntimeOptions): DeleteOpenAccountResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DeleteOpenAccount', '2018-05-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function deleteOpenAccount(request: DeleteOpenAccountRequest): DeleteOpenAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOpenAccountWithOptions(request, runtime);
}

model DescribeDefaultSchemaRequest {
  projectId?: string(name='ProjectId'),
  deviceModelId?: string(name='DeviceModelId'),
}

model DescribeDefaultSchemaResponseBody = {
  requestId?: string(name='RequestId'),
  schema?: string(name='Schema'),
}

model DescribeDefaultSchemaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDefaultSchemaResponseBody(name='body'),
}

async function describeDefaultSchemaWithOptions(request: DescribeDefaultSchemaRequest, runtime: Util.RuntimeOptions): DescribeDefaultSchemaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDefaultSchema', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDefaultSchema(request: DescribeDefaultSchemaRequest): DescribeDefaultSchemaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDefaultSchemaWithOptions(request, runtime);
}

model ListUpstreamAppServersRequest {
  projectId?: string(name='ProjectId'),
  pageIndex?: string(name='PageIndex'),
  pageSize?: string(name='PageSize'),
}

model ListUpstreamAppServersResponseBody = {
  requestId?: string(name='RequestId'),
  appServers?: {
    pagination?: {
      pageIndex?: int32(name='PageIndex'),
      totalPageCount?: int32(name='TotalPageCount'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
    list?: [ 
      {
        projectId?: string(name='ProjectId'),
        gmtCreate?: long(name='GmtCreate'),
        tags?: string(name='Tags'),
        queueNameList?: string(name='QueueNameList'),
        PAppKey?: string(name='PAppKey'),
        gmtModified?: long(name='GmtModified'),
        name?: string(name='Name'),
        id?: long(name='Id'),
      }
    ](name='List'),
  }(name='AppServers'),
}

model ListUpstreamAppServersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUpstreamAppServersResponseBody(name='body'),
}

async function listUpstreamAppServersWithOptions(request: ListUpstreamAppServersRequest, runtime: Util.RuntimeOptions): ListUpstreamAppServersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListUpstreamAppServers', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listUpstreamAppServers(request: ListUpstreamAppServersRequest): ListUpstreamAppServersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUpstreamAppServersWithOptions(request, runtime);
}

model DeleteVersionTestRequest {
  projectId?: string(name='ProjectId'),
  id?: string(name='Id'),
}

model DeleteVersionTestResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVersionTestResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVersionTestResponseBody(name='body'),
}

async function deleteVersionTestWithOptions(request: DeleteVersionTestRequest, runtime: Util.RuntimeOptions): DeleteVersionTestResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteVersionTest', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteVersionTest(request: DeleteVersionTestRequest): DeleteVersionTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVersionTestWithOptions(request, runtime);
}

model CreateUpstreamAppKeyRelationRequest {
  appKey?: string(name='AppKey'),
  PAppKey?: string(name='PAppKey'),
  projectId?: string(name='ProjectId'),
}

model CreateUpstreamAppKeyRelationResponseBody = {
  requestId?: string(name='RequestId'),
  id?: long(name='Id'),
}

model CreateUpstreamAppKeyRelationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUpstreamAppKeyRelationResponseBody(name='body'),
}

async function createUpstreamAppKeyRelationWithOptions(request: CreateUpstreamAppKeyRelationRequest, runtime: Util.RuntimeOptions): CreateUpstreamAppKeyRelationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateUpstreamAppKeyRelation', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createUpstreamAppKeyRelation(request: CreateUpstreamAppKeyRelationRequest): CreateUpstreamAppKeyRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUpstreamAppKeyRelationWithOptions(request, runtime);
}

model FindAppVersionsRequest {
  status?: string(name='Status'),
  projectId?: string(name='ProjectId'),
  pageSize?: int32(name='PageSize'),
  versionId?: string(name='VersionId'),
  deviceModelId?: string(name='DeviceModelId'),
  pageIndex?: int32(name='PageIndex'),
  appId?: string(name='AppId'),
  remark?: string(name='Remark'),
}

model FindAppVersionsResponseBody = {
  appVersionList?: {
    items?: [ 
      {
        status?: string(name='Status'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        gmtModify?: string(name='GmtModify'),
        isAllowNewInstall?: string(name='IsAllowNewInstall'),
        statusName?: string(name='StatusName'),
        restartAppParam?: string(name='RestartAppParam'),
        isSilentUpgrade?: string(name='IsSilentUpgrade'),
        appPackageName?: string(name='AppPackageName'),
        gmtModifyTimestamp?: long(name='GmtModifyTimestamp'),
        appName?: string(name='AppName'),
        installType?: string(name='InstallType'),
        isNeedRestart?: string(name='IsNeedRestart'),
        restartAppType?: string(name='RestartAppType'),
        appId?: string(name='AppId'),
        restartType?: string(name='RestartType'),
        gmtCreate?: string(name='GmtCreate'),
        appVersion?: string(name='AppVersion'),
        versionCode?: string(name='VersionCode'),
        isForceUpgrade?: string(name='IsForceUpgrade'),
        id?: long(name='Id'),
      }
    ](name='Items'),
    totalCount?: int32(name='TotalCount'),
  }(name='AppVersionList'),
  requestId?: string(name='RequestId'),
}

model FindAppVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: FindAppVersionsResponseBody(name='body'),
}

async function findAppVersionsWithOptions(request: FindAppVersionsRequest, runtime: Util.RuntimeOptions): FindAppVersionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('FindAppVersions', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function findAppVersions(request: FindAppVersionsRequest): FindAppVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return findAppVersionsWithOptions(request, runtime);
}

model ListMqttRootTopicsRequest {
  appKey?: string(name='AppKey'),
  projectId?: string(name='ProjectId'),
}

model ListMqttRootTopicsResponseBody = {
  requestId?: string(name='RequestId'),
  rootTopics?: {
    pagination?: {
      pageIndex?: int32(name='PageIndex'),
      totalPageCount?: int32(name='TotalPageCount'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
    list?: [ 
      {
        type?: string(name='Type'),
        appKey?: string(name='AppKey'),
        queueName?: string(name='QueueName'),
        createTime?: int32(name='CreateTime'),
        rootTopic?: string(name='RootTopic'),
      }
    ](name='List'),
  }(name='RootTopics'),
}

model ListMqttRootTopicsResponse = {
  headers: map[string]string(name='headers'),
  body: ListMqttRootTopicsResponseBody(name='body'),
}

async function listMqttRootTopicsWithOptions(request: ListMqttRootTopicsRequest, runtime: Util.RuntimeOptions): ListMqttRootTopicsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListMqttRootTopics', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listMqttRootTopics(request: ListMqttRootTopicsRequest): ListMqttRootTopicsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMqttRootTopicsWithOptions(request, runtime);
}

model ListAssistDevicesRequest {
  projectId?: string(name='ProjectId'),
  pageIndex?: int32(name='PageIndex'),
  condition?: string(name='Condition'),
  perPage?: int32(name='PerPage'),
}

model ListAssistDevicesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  perPage?: int32(name='PerPage'),
  pageIndex?: int32(name='PageIndex'),
  devices?: [ 
    {
      serialNumber?: string(name='SerialNumber'),
      hardwareId?: string(name='HardwareId'),
      deviceName?: string(name='DeviceName'),
      accessTime?: long(name='AccessTime'),
      deviceId?: string(name='DeviceId'),
      UUID?: string(name='UUID'),
      VIN?: string(name='VIN'),
    }
  ](name='Devices'),
}

model ListAssistDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAssistDevicesResponseBody(name='body'),
}

async function listAssistDevicesWithOptions(request: ListAssistDevicesRequest, runtime: Util.RuntimeOptions): ListAssistDevicesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListAssistDevices', '2018-05-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listAssistDevices(request: ListAssistDevicesRequest): ListAssistDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAssistDevicesWithOptions(request, runtime);
}

model DeleteUpstreamAppServerRequest {
  projectId?: string(name='ProjectId'),
  id?: long(name='Id'),
}

model DeleteUpstreamAppServerResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteUpstreamAppServerResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUpstreamAppServerResponseBody(name='body'),
}

async function deleteUpstreamAppServerWithOptions(request: DeleteUpstreamAppServerRequest, runtime: Util.RuntimeOptions): DeleteUpstreamAppServerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteUpstreamAppServer', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteUpstreamAppServer(request: DeleteUpstreamAppServerRequest): DeleteUpstreamAppServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUpstreamAppServerWithOptions(request, runtime);
}

model UpdateVersionDeviceGroupRequest {
  projectId?: string(name='ProjectId'),
  name?: string(name='Name'),
  description?: string(name='Description'),
  id?: string(name='Id'),
}

model UpdateVersionDeviceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateVersionDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVersionDeviceGroupResponseBody(name='body'),
}

async function updateVersionDeviceGroupWithOptions(request: UpdateVersionDeviceGroupRequest, runtime: Util.RuntimeOptions): UpdateVersionDeviceGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateVersionDeviceGroup', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateVersionDeviceGroup(request: UpdateVersionDeviceGroupRequest): UpdateVersionDeviceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateVersionDeviceGroupWithOptions(request, runtime);
}

model ListOpenAccountsRequest {
  length?: int32(name='Length'),
  start?: int32(name='Start'),
  mobile?: string(name='Mobile'),
  email?: string(name='Email'),
  displayName?: string(name='DisplayName'),
  projectId?: string(name='ProjectId'),
}

model ListOpenAccountsResponseBody = {
  requestId?: string(name='RequestId'),
  openAccounts?: [ 
    {
      status?: int32(name='Status'),
      type?: int32(name='Type'),
      displayName?: string(name='DisplayName'),
      createAccessKey?: string(name='CreateAccessKey'),
      openId?: string(name='OpenId'),
      mobile?: string(name='Mobile'),
      region?: string(name='Region'),
      identityId?: string(name='IdentityId'),
      loginId?: string(name='LoginId'),
      idp?: string(name='Idp'),
      aliyunId?: string(name='AliyunId'),
    }
  ](name='OpenAccounts'),
}

model ListOpenAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: ListOpenAccountsResponseBody(name='body'),
}

async function listOpenAccountsWithOptions(request: ListOpenAccountsRequest, runtime: Util.RuntimeOptions): ListOpenAccountsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListOpenAccounts', '2018-05-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listOpenAccounts(request: ListOpenAccountsRequest): ListOpenAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOpenAccountsWithOptions(request, runtime);
}

model UpdateOsVersionStatusRequest {
  projectId?: string(name='ProjectId'),
  id?: string(name='Id'),
  status?: string(name='Status'),
}

model UpdateOsVersionStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateOsVersionStatusResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateOsVersionStatusResponseBody(name='body'),
}

async function updateOsVersionStatusWithOptions(request: UpdateOsVersionStatusRequest, runtime: Util.RuntimeOptions): UpdateOsVersionStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateOsVersionStatus', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateOsVersionStatus(request: UpdateOsVersionStatusRequest): UpdateOsVersionStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOsVersionStatusWithOptions(request, runtime);
}

model CountProjectsResponseBody = {
  requestId?: string(name='RequestId'),
  projectCount?: int32(name='ProjectCount'),
}

model CountProjectsResponse = {
  headers: map[string]string(name='headers'),
  body: CountProjectsResponseBody(name='body'),
}

async function countProjectsWithOptions(runtime: Util.RuntimeOptions): CountProjectsResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('CountProjects', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function countProjects(): CountProjectsResponse {
  var runtime = new Util.RuntimeOptions{};
  return countProjectsWithOptions(runtime);
}

model ListCommercialVehicleDevicesRequest {
  projectId?: string(name='ProjectId', description='项目ID'),
  pageIndex?: long(name='PageIndex', description='查询开始页'),
  pageSize?: long(name='PageSize', description='每页记录数'),
  hardwareId?: string(name='HardwareId'),
  clientId?: string(name='ClientId'),
}

model ListCommercialVehicleDevicesResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  vehicleDevices?: {
    pagination?: {
      totalCount?: long(name='TotalCount'),
      totalPageCount?: long(name='TotalPageCount'),
      pageIndex?: long(name='PageIndex'),
      pageSize?: long(name='PageSize'),
    }(name='Pagination'),
    list?: [ 
      {
        createTime?: long(name='CreateTime'),
        modifiedTime?: long(name='ModifiedTime'),
        hardwareId?: string(name='HardwareId'),
        clientId?: long(name='ClientId'),
        deviceModel?: string(name='DeviceModel'),
        onlineStatus?: long(name='OnlineStatus'),
        plateNumber?: string(name='PlateNumber'),
      }
    ](name='List'),
  }(name='VehicleDevices', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
}

model ListCommercialVehicleDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListCommercialVehicleDevicesResponseBody(name='body'),
}

async function listCommercialVehicleDevicesWithOptions(request: ListCommercialVehicleDevicesRequest, runtime: Util.RuntimeOptions): ListCommercialVehicleDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListCommercialVehicleDevices', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listCommercialVehicleDevices(request: ListCommercialVehicleDevicesRequest): ListCommercialVehicleDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCommercialVehicleDevicesWithOptions(request, runtime);
}

model ListMessageReceiversRequest {
  projectId?: string(name='ProjectId'),
  messageId?: string(name='MessageId'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model ListMessageReceiversResponseBody = {
  messageReceivers?: {
    pagination?: {
      pageIndex?: int32(name='PageIndex'),
      totalPageCount?: int32(name='TotalPageCount'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
    list?: [ 
      {
        type?: string(name='Type'),
        value?: string(name='Value'),
        mid?: long(name='Mid'),
      }
    ](name='List'),
  }(name='MessageReceivers'),
  requestId?: string(name='RequestId'),
}

model ListMessageReceiversResponse = {
  headers: map[string]string(name='headers'),
  body: ListMessageReceiversResponseBody(name='body'),
}

async function listMessageReceiversWithOptions(request: ListMessageReceiversRequest, runtime: Util.RuntimeOptions): ListMessageReceiversResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListMessageReceivers', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listMessageReceivers(request: ListMessageReceiversRequest): ListMessageReceiversResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMessageReceiversWithOptions(request, runtime);
}

model CountDevicesRequest {
  projectId?: string(name='ProjectId'),
  deviceModelId?: int32(name='DeviceModelId'),
  deviceModel?: string(name='DeviceModel'),
}

model CountDevicesResponseBody = {
  requestId?: string(name='RequestId'),
  deviceCount?: int32(name='DeviceCount'),
}

model CountDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: CountDevicesResponseBody(name='body'),
}

async function countDevicesWithOptions(request: CountDevicesRequest, runtime: Util.RuntimeOptions): CountDevicesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('CountDevices', '2018-05-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function countDevices(request: CountDevicesRequest): CountDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return countDevicesWithOptions(request, runtime);
}

model UpdateOsBlackWhiteVersionsRequest {
  whiteVersions?: string(name='WhiteVersions'),
  projectId?: string(name='ProjectId'),
  versionId?: string(name='VersionId'),
  blackVersions?: string(name='BlackVersions'),
}

model UpdateOsBlackWhiteVersionsResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateOsBlackWhiteVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateOsBlackWhiteVersionsResponseBody(name='body'),
}

async function updateOsBlackWhiteVersionsWithOptions(request: UpdateOsBlackWhiteVersionsRequest, runtime: Util.RuntimeOptions): UpdateOsBlackWhiteVersionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateOsBlackWhiteVersions', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateOsBlackWhiteVersions(request: UpdateOsBlackWhiteVersionsRequest): UpdateOsBlackWhiteVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOsBlackWhiteVersionsWithOptions(request, runtime);
}

model GetNamespaceDataRequest {
  projectId?: string(name='ProjectId'),
  namespace?: string(name='Namespace'),
  authType?: string(name='AuthType'),
  deviceIdType?: string(name='DeviceIdType'),
  deviceId?: string(name='DeviceId'),
  accountType?: string(name='AccountType'),
  accountId?: string(name='AccountId'),
}

model GetNamespaceDataResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
}

model GetNamespaceDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetNamespaceDataResponseBody(name='body'),
}

async function getNamespaceDataWithOptions(request: GetNamespaceDataRequest, runtime: Util.RuntimeOptions): GetNamespaceDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetNamespaceData', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getNamespaceData(request: GetNamespaceDataRequest): GetNamespaceDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNamespaceDataWithOptions(request, runtime);
}

model UpdateOsVersionRemarkRequest {
  projectId?: string(name='ProjectId'),
  versionId?: string(name='VersionId'),
  remark?: string(name='Remark'),
}

model UpdateOsVersionRemarkResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateOsVersionRemarkResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateOsVersionRemarkResponseBody(name='body'),
}

async function updateOsVersionRemarkWithOptions(request: UpdateOsVersionRemarkRequest, runtime: Util.RuntimeOptions): UpdateOsVersionRemarkResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateOsVersionRemark', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateOsVersionRemark(request: UpdateOsVersionRemarkRequest): UpdateOsVersionRemarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOsVersionRemarkWithOptions(request, runtime);
}

model QueryPrepublishPassedDeviceCountRequest {
  projectId?: string(name='ProjectId'),
  prepublishId?: string(name='PrepublishId'),
}

model QueryPrepublishPassedDeviceCountResponseBody = {
  requestId?: string(name='RequestId'),
  count?: int32(name='Count'),
}

model QueryPrepublishPassedDeviceCountResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPrepublishPassedDeviceCountResponseBody(name='body'),
}

async function queryPrepublishPassedDeviceCountWithOptions(request: QueryPrepublishPassedDeviceCountRequest, runtime: Util.RuntimeOptions): QueryPrepublishPassedDeviceCountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryPrepublishPassedDeviceCount', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryPrepublishPassedDeviceCount(request: QueryPrepublishPassedDeviceCountRequest): QueryPrepublishPassedDeviceCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPrepublishPassedDeviceCountWithOptions(request, runtime);
}

model CreateProjectRequest {
  projectName?: string(name='ProjectName'),
  projectDesc?: string(name='ProjectDesc'),
}

model CreateProjectResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateProjectResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProjectResponseBody(name='body'),
}

async function createProjectWithOptions(request: CreateProjectRequest, runtime: Util.RuntimeOptions): CreateProjectResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateProject', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProjectWithOptions(request, runtime);
}

model ListNamespacesRequest {
  projectId?: string(name='ProjectId'),
  authType?: string(name='AuthType'),
}

model ListNamespacesResponseBody = {
  namespaces?: [ 
    {
      authType?: int32(name='AuthType'),
      description?: string(name='Description'),
      userId?: string(name='UserId'),
      projectId?: string(name='ProjectId'),
      gmtCreate?: long(name='GmtCreate'),
      namespace?: string(name='Namespace'),
      gmtModified?: long(name='GmtModified'),
      name?: string(name='Name'),
    }
  ](name='Namespaces'),
  requestId?: string(name='RequestId'),
}

model ListNamespacesResponse = {
  headers: map[string]string(name='headers'),
  body: ListNamespacesResponseBody(name='body'),
}

async function listNamespacesWithOptions(request: ListNamespacesRequest, runtime: Util.RuntimeOptions): ListNamespacesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListNamespaces', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listNamespaces(request: ListNamespacesRequest): ListNamespacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNamespacesWithOptions(request, runtime);
}

model ListSupportFeaturesResponseBody = {
  requestId?: string(name='RequestId'),
  supportFeatures?: [ 
    {
      name?: string(name='Name'),
    }
  ](name='SupportFeatures'),
}

model ListSupportFeaturesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSupportFeaturesResponseBody(name='body'),
}

async function listSupportFeaturesWithOptions(runtime: Util.RuntimeOptions): ListSupportFeaturesResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('ListSupportFeatures', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSupportFeatures(): ListSupportFeaturesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSupportFeaturesWithOptions(runtime);
}

model DeleteMqttRootTopicRequest {
  appKey?: string(name='AppKey'),
  rootTopic?: string(name='RootTopic'),
  projectId?: string(name='ProjectId'),
}

model DeleteMqttRootTopicResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteMqttRootTopicResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMqttRootTopicResponseBody(name='body'),
}

async function deleteMqttRootTopicWithOptions(request: DeleteMqttRootTopicRequest, runtime: Util.RuntimeOptions): DeleteMqttRootTopicResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteMqttRootTopic', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteMqttRootTopic(request: DeleteMqttRootTopicRequest): DeleteMqttRootTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMqttRootTopicWithOptions(request, runtime);
}

model DeleteVersionGroupDeviceByIdRequest {
  projectId?: string(name='ProjectId'),
  deviceGroupId?: string(name='DeviceGroupId'),
  ids?: string(name='Ids'),
}

model DeleteVersionGroupDeviceByIdResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVersionGroupDeviceByIdResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVersionGroupDeviceByIdResponseBody(name='body'),
}

async function deleteVersionGroupDeviceByIdWithOptions(request: DeleteVersionGroupDeviceByIdRequest, runtime: Util.RuntimeOptions): DeleteVersionGroupDeviceByIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteVersionGroupDeviceById', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteVersionGroupDeviceById(request: DeleteVersionGroupDeviceByIdRequest): DeleteVersionGroupDeviceByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVersionGroupDeviceByIdWithOptions(request, runtime);
}

model ListClientPluginVersionsRequest {
  osType?: string(name='OsType'),
  pkgName?: string(name='PkgName'),
}

model ListClientPluginVersionsResponseBody = {
  clientPluginVersions?: [ 
    {
      version?: string(name='Version'),
      downloadUrl?: string(name='DownloadUrl'),
      size?: long(name='Size'),
      pkgName?: string(name='PkgName'),
      versionCode?: long(name='VersionCode'),
      id?: long(name='Id'),
    }
  ](name='ClientPluginVersions'),
  requestId?: string(name='RequestId'),
}

model ListClientPluginVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListClientPluginVersionsResponseBody(name='body'),
}

async function listClientPluginVersionsWithOptions(request: ListClientPluginVersionsRequest, runtime: Util.RuntimeOptions): ListClientPluginVersionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListClientPluginVersions', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listClientPluginVersions(request: ListClientPluginVersionsRequest): ListClientPluginVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClientPluginVersionsWithOptions(request, runtime);
}

model FindVersionMessageSendRecordsRequest {
  versionType?: string(name='VersionType'),
  projectId?: string(name='ProjectId'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  messageType?: string(name='MessageType'),
  versionId?: string(name='VersionId'),
}

model FindVersionMessageSendRecordsResponseBody = {
  messageSendRecordList?: {
    items?: [ 
      {
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        messageType?: string(name='MessageType'),
        failedCount?: string(name='FailedCount'),
        skippedCount?: string(name='SkippedCount'),
        result?: string(name='Result'),
        succeededCount?: string(name='SucceededCount'),
        gmtCreate?: string(name='GmtCreate'),
        versionId?: string(name='VersionId'),
        resultDesc?: string(name='ResultDesc'),
        targetId?: string(name='TargetId'),
        id?: long(name='Id'),
      }
    ](name='Items'),
    totalCount?: int32(name='TotalCount'),
  }(name='MessageSendRecordList'),
  requestId?: string(name='RequestId'),
}

model FindVersionMessageSendRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: FindVersionMessageSendRecordsResponseBody(name='body'),
}

async function findVersionMessageSendRecordsWithOptions(request: FindVersionMessageSendRecordsRequest, runtime: Util.RuntimeOptions): FindVersionMessageSendRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('FindVersionMessageSendRecords', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function findVersionMessageSendRecords(request: FindVersionMessageSendRecordsRequest): FindVersionMessageSendRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return findVersionMessageSendRecordsWithOptions(request, runtime);
}

model GenerateSysAppDownloadInfoRequest {
  plugins?: string(name='Plugins'),
  signMode?: string(name='SignMode'),
  osType?: int32(name='OsType'),
  pkgName?: string(name='PkgName'),
  projectId?: string(name='ProjectId'),
  certFileObjectKey?: string(name='CertFileObjectKey'),
}

model GenerateSysAppDownloadInfoResponseBody = {
  requestId?: string(name='RequestId'),
  sysAppDownloadInfo?: {
    url?: string(name='Url'),
  }(name='SysAppDownloadInfo'),
}

model GenerateSysAppDownloadInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateSysAppDownloadInfoResponseBody(name='body'),
}

async function generateSysAppDownloadInfoWithOptions(request: GenerateSysAppDownloadInfoRequest, runtime: Util.RuntimeOptions): GenerateSysAppDownloadInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GenerateSysAppDownloadInfo', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function generateSysAppDownloadInfo(request: GenerateSysAppDownloadInfoRequest): GenerateSysAppDownloadInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateSysAppDownloadInfoWithOptions(request, runtime);
}

model DeleteTriggerRequest {
  projectId?: string(name='ProjectId'),
  id?: long(name='Id'),
}

model DeleteTriggerResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTriggerResponseBody(name='body'),
}

async function deleteTriggerWithOptions(request: DeleteTriggerRequest, runtime: Util.RuntimeOptions): DeleteTriggerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteTrigger', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteTrigger(request: DeleteTriggerRequest): DeleteTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTriggerWithOptions(request, runtime);
}

model DescribeDeviceInfoRequest {
  deviceId?: string(name='DeviceId'),
  deviceToken?: string(name='DeviceToken'),
  projectId?: string(name='ProjectId'),
}

model DescribeDeviceInfoResponseBody = {
  requestId?: string(name='RequestId'),
  deviceInfo?: {
    serialNumber?: string(name='SerialNumber'),
    status?: string(name='Status'),
    deviceModelId?: long(name='DeviceModelId'),
    macAddress?: string(name='MacAddress'),
    deviceId?: string(name='DeviceId'),
    deviceType?: string(name='DeviceType'),
    projectId?: string(name='ProjectId'),
    deviceModel?: string(name='DeviceModel'),
    usageType?: int32(name='UsageType'),
    vin?: string(name='Vin'),
    usageTypeDesc?: string(name='UsageTypeDesc'),
    uuid?: string(name='Uuid'),
    hardwareId?: string(name='HardwareId'),
    region?: string(name='Region'),
    softwareId?: string(name='SoftwareId'),
    name?: string(name='Name'),
    deviceBrand?: string(name='DeviceBrand'),
  }(name='DeviceInfo'),
}

model DescribeDeviceInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeviceInfoResponseBody(name='body'),
}

async function describeDeviceInfoWithOptions(request: DescribeDeviceInfoRequest, runtime: Util.RuntimeOptions): DescribeDeviceInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeDeviceInfo', '2018-05-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeDeviceInfo(request: DescribeDeviceInfoRequest): DescribeDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeviceInfoWithOptions(request, runtime);
}

model CreateDeviceModelRequest {
  initUsageType?: string(name='InitUsageType'),
  canCreateDeviceId?: string(name='CanCreateDeviceId'),
  modelName?: string(name='ModelName'),
  hardwareType?: string(name='HardwareType'),
  brandName?: string(name='BrandName'),
  description?: string(name='Description'),
  deviceType?: string(name='DeviceType'),
  projectId?: string(name='ProjectId'),
  securityChip?: string(name='SecurityChip'),
  osPlatform?: string(name='OsPlatform'),
  objectKey?: string(name='ObjectKey'),
  deviceName?: string(name='DeviceName'),
}

model CreateDeviceModelResponseBody = {
  requestId?: string(name='RequestId'),
  deviceModelId?: long(name='DeviceModelId'),
}

model CreateDeviceModelResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeviceModelResponseBody(name='body'),
}

async function createDeviceModelWithOptions(request: CreateDeviceModelRequest, runtime: Util.RuntimeOptions): CreateDeviceModelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDeviceModel', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDeviceModel(request: CreateDeviceModelRequest): CreateDeviceModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeviceModelWithOptions(request, runtime);
}

model UpdateAppVersionStatusRequest {
  projectId?: string(name='ProjectId'),
  id?: string(name='Id'),
  status?: string(name='Status'),
}

model UpdateAppVersionStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateAppVersionStatusResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAppVersionStatusResponseBody(name='body'),
}

async function updateAppVersionStatusWithOptions(request: UpdateAppVersionStatusRequest, runtime: Util.RuntimeOptions): UpdateAppVersionStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateAppVersionStatus', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateAppVersionStatus(request: UpdateAppVersionStatusRequest): UpdateAppVersionStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAppVersionStatusWithOptions(request, runtime);
}

model UpdateShadowSchemaRequest {
  deviceModelId?: string(name='DeviceModelId'),
  authType?: string(name='AuthType'),
  namespace?: string(name='Namespace'),
  projectId?: string(name='ProjectId'),
  schema?: string(name='Schema'),
  id?: string(name='Id'),
}

model UpdateShadowSchemaResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateShadowSchemaResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateShadowSchemaResponseBody(name='body'),
}

async function updateShadowSchemaWithOptions(request: UpdateShadowSchemaRequest, runtime: Util.RuntimeOptions): UpdateShadowSchemaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateShadowSchema', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateShadowSchema(request: UpdateShadowSchemaRequest): UpdateShadowSchemaResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateShadowSchemaWithOptions(request, runtime);
}

model DescribeDeviceShadowRequest {
  projectId?: string(name='ProjectId'),
  deviceId?: string(name='DeviceId'),
  deviceModel?: string(name='DeviceModel'),
  path?: string(name='Path'),
  viewSubscribed?: boolean(name='ViewSubscribed'),
}

model DescribeDeviceShadowResponseBody = {
  requestId?: string(name='RequestId'),
  deviceShadow?: {
    deviceShadow?: string(name='DeviceShadow'),
    deviceInfo?: string(name='DeviceInfo'),
  }(name='DeviceShadow'),
}

model DescribeDeviceShadowResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeviceShadowResponseBody(name='body'),
}

async function describeDeviceShadowWithOptions(request: DescribeDeviceShadowRequest, runtime: Util.RuntimeOptions): DescribeDeviceShadowResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDeviceShadow', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDeviceShadow(request: DescribeDeviceShadowRequest): DescribeDeviceShadowResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeviceShadowWithOptions(request, runtime);
}

model ListTriggersRequest {
  projectId?: string(name='ProjectId'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model ListTriggersResponseBody = {
  requestId?: string(name='RequestId'),
  triggerList?: {
    pagination?: {
      pageIndex?: int32(name='PageIndex'),
      totalPageCount?: int32(name='TotalPageCount'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
    triggers?: [ 
      {
        status?: int32(name='Status'),
        type?: int32(name='Type'),
        production?: int32(name='Production'),
        functions?: [ 
          {
            gmtCreate?: long(name='GmtCreate'),
            fileName?: string(name='FileName'),
            name?: string(name='Name'),
            gmtModified?: long(name='GmtModified'),
            id?: long(name='Id'),
            fileId?: long(name='FileId'),
          }
        ](name='Functions'),
        sandbox?: int32(name='Sandbox'),
        namespace?: string(name='Namespace'),
        gmtModified?: long(name='GmtModified'),
        source?: string(name='Source'),
        chainedFunctionIds?: string(name='ChainedFunctionIds'),
        gmtCreate?: long(name='GmtCreate'),
        invocationMode?: int32(name='InvocationMode'),
        id?: long(name='Id'),
      }
    ](name='Triggers'),
  }(name='TriggerList'),
}

model ListTriggersResponse = {
  headers: map[string]string(name='headers'),
  body: ListTriggersResponseBody(name='body'),
}

async function listTriggersWithOptions(request: ListTriggersRequest, runtime: Util.RuntimeOptions): ListTriggersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTriggers', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTriggers(request: ListTriggersRequest): ListTriggersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTriggersWithOptions(request, runtime);
}

model UpdateCustomizedFilterRequest {
  blackWhiteType?: string(name='BlackWhiteType'),
  projectId?: string(name='ProjectId'),
  name?: string(name='Name'),
  value?: string(name='Value'),
  valueType?: string(name='ValueType'),
  valueCompareType?: string(name='ValueCompareType'),
  id?: long(name='Id'),
}

model UpdateCustomizedFilterResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateCustomizedFilterResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCustomizedFilterResponseBody(name='body'),
}

async function updateCustomizedFilterWithOptions(request: UpdateCustomizedFilterRequest, runtime: Util.RuntimeOptions): UpdateCustomizedFilterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateCustomizedFilter', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateCustomizedFilter(request: UpdateCustomizedFilterRequest): UpdateCustomizedFilterResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCustomizedFilterWithOptions(request, runtime);
}

model CreateVersionPrepublishRequest {
  isTotalPrepublish?: string(name='IsTotalPrepublish'),
  versionId?: string(name='VersionId'),
  versionType?: string(name='VersionType'),
  name?: string(name='Name'),
  projectId?: string(name='ProjectId'),
  barrierCount?: string(name='BarrierCount'),
}

model CreateVersionPrepublishResponseBody = {
  requestId?: string(name='RequestId'),
  prepublishId?: string(name='PrepublishId'),
}

model CreateVersionPrepublishResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVersionPrepublishResponseBody(name='body'),
}

async function createVersionPrepublishWithOptions(request: CreateVersionPrepublishRequest, runtime: Util.RuntimeOptions): CreateVersionPrepublishResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateVersionPrepublish', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createVersionPrepublish(request: CreateVersionPrepublishRequest): CreateVersionPrepublishResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVersionPrepublishWithOptions(request, runtime);
}

model UpdateAppVersionRemarkRequest {
  projectId?: string(name='ProjectId'),
  versionId?: string(name='VersionId'),
  remark?: string(name='Remark'),
}

model UpdateAppVersionRemarkResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateAppVersionRemarkResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAppVersionRemarkResponseBody(name='body'),
}

async function updateAppVersionRemarkWithOptions(request: UpdateAppVersionRemarkRequest, runtime: Util.RuntimeOptions): UpdateAppVersionRemarkResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateAppVersionRemark', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateAppVersionRemark(request: UpdateAppVersionRemarkRequest): UpdateAppVersionRemarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAppVersionRemarkWithOptions(request, runtime);
}

model DescribeDeviceModelRequest {
  deviceModelId?: int32(name='DeviceModelId'),
  deviceModel?: string(name='DeviceModel'),
  projectId?: string(name='ProjectId'),
}

model DescribeDeviceModelResponseBody = {
  deviceModel?: {
    deviceModelId?: long(name='DeviceModelId'),
    hardwareType?: string(name='HardwareType'),
    deviceName?: string(name='DeviceName'),
    deviceType?: string(name='DeviceType'),
    canCreateDeviceId?: int32(name='CanCreateDeviceId'),
    projectId?: string(name='ProjectId'),
    osPlatform?: string(name='OsPlatform'),
    deviceModel?: string(name='DeviceModel'),
    securityChip?: string(name='SecurityChip'),
    deviceLogoUrl?: string(name='DeviceLogoUrl'),
    description?: string(name='Description'),
    objectKey?: string(name='ObjectKey'),
    initUsageTypeDesc?: string(name='InitUsageTypeDesc'),
    initUsageType?: int32(name='InitUsageType'),
    deviceBrand?: string(name='DeviceBrand'),
  }(name='DeviceModel'),
  requestId?: string(name='RequestId'),
}

model DescribeDeviceModelResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeviceModelResponseBody(name='body'),
}

async function describeDeviceModelWithOptions(request: DescribeDeviceModelRequest, runtime: Util.RuntimeOptions): DescribeDeviceModelResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeDeviceModel', '2018-05-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeDeviceModel(request: DescribeDeviceModelRequest): DescribeDeviceModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeviceModelWithOptions(request, runtime);
}

model ListDeviceTypesRequest {
  projectId?: string(name='ProjectId'),
}

model ListDeviceTypesResponseBody = {
  requestId?: string(name='RequestId'),
  deviceTypes?: [ 
    {
      deviceType?: string(name='DeviceType'),
      name?: string(name='Name'),
    }
  ](name='DeviceTypes'),
}

model ListDeviceTypesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeviceTypesResponseBody(name='body'),
}

async function listDeviceTypesWithOptions(request: ListDeviceTypesRequest, runtime: Util.RuntimeOptions): ListDeviceTypesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListDeviceTypes', '2018-05-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listDeviceTypes(request: ListDeviceTypesRequest): ListDeviceTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeviceTypesWithOptions(request, runtime);
}

model GenerateSdkDownloadInfoRequest {
  sdks?: string(name='Sdks'),
  appId?: string(name='AppId'),
  osType?: int32(name='OsType'),
  pkgName?: string(name='PkgName'),
  projectId?: string(name='ProjectId'),
  certFileObjectKey?: string(name='CertFileObjectKey'),
}

model GenerateSdkDownloadInfoResponseBody = {
  requestId?: string(name='RequestId'),
  sdkDownloadInfo?: {
    url?: string(name='Url'),
  }(name='SdkDownloadInfo'),
}

model GenerateSdkDownloadInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateSdkDownloadInfoResponseBody(name='body'),
}

async function generateSdkDownloadInfoWithOptions(request: GenerateSdkDownloadInfoRequest, runtime: Util.RuntimeOptions): GenerateSdkDownloadInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GenerateSdkDownloadInfo', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function generateSdkDownloadInfo(request: GenerateSdkDownloadInfoRequest): GenerateSdkDownloadInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateSdkDownloadInfoWithOptions(request, runtime);
}

model ExecuteVehicleControlRequest {
  deviceId?: string(name='DeviceId'),
  command?: string(name='Command'),
  commandParam?: string(name='CommandParam'),
  vin?: string(name='Vin'),
  projectId?: string(name='ProjectId'),
}

model ExecuteVehicleControlResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  executionInfo?: {
    executionId?: string(name='ExecutionId'),
  }(name='ExecutionInfo'),
}

model ExecuteVehicleControlResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteVehicleControlResponseBody(name='body'),
}

async function executeVehicleControlWithOptions(request: ExecuteVehicleControlRequest, runtime: Util.RuntimeOptions): ExecuteVehicleControlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExecuteVehicleControl', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function executeVehicleControl(request: ExecuteVehicleControlRequest): ExecuteVehicleControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeVehicleControlWithOptions(request, runtime);
}

model DescribeApiGatewayAppSecurityRequest {
  projectId?: string(name='ProjectId'),
  gatewayAppId?: string(name='GatewayAppId'),
}

model DescribeApiGatewayAppSecurityResponseBody = {
  requestId?: string(name='RequestId'),
  apiGatewayAppSecurity?: {
    gatewayAppKey?: string(name='GatewayAppKey'),
    gatewayAppSecret?: string(name='GatewayAppSecret'),
    gatewayAppId?: string(name='GatewayAppId'),
    gmtCreate?: long(name='GmtCreate'),
    gmtModified?: long(name='GmtModified'),
  }(name='ApiGatewayAppSecurity'),
}

model DescribeApiGatewayAppSecurityResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApiGatewayAppSecurityResponseBody(name='body'),
}

async function describeApiGatewayAppSecurityWithOptions(request: DescribeApiGatewayAppSecurityRequest, runtime: Util.RuntimeOptions): DescribeApiGatewayAppSecurityResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeApiGatewayAppSecurity', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeApiGatewayAppSecurity(request: DescribeApiGatewayAppSecurityRequest): DescribeApiGatewayAppSecurityResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiGatewayAppSecurityWithOptions(request, runtime);
}

model DescribeDeviceOnlineInfoRequest {
  projectId?: string(name='ProjectId'),
  type?: string(name='Type'),
  value?: string(name='Value'),
}

model DescribeDeviceOnlineInfoResponseBody = {
  requestId?: string(name='RequestId'),
  devices?: [ 
    {
      loginTime?: long(name='LoginTime'),
      deviceId?: string(name='DeviceId'),
      online?: int32(name='Online'),
      projectId?: string(name='ProjectId'),
      iasId?: string(name='IasId'),
      systemVersion?: string(name='SystemVersion'),
      terminal?: string(name='Terminal'),
      clientVersion?: string(name='ClientVersion'),
    }
  ](name='Devices'),
}

model DescribeDeviceOnlineInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeviceOnlineInfoResponseBody(name='body'),
}

async function describeDeviceOnlineInfoWithOptions(request: DescribeDeviceOnlineInfoRequest, runtime: Util.RuntimeOptions): DescribeDeviceOnlineInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDeviceOnlineInfo', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDeviceOnlineInfo(request: DescribeDeviceOnlineInfoRequest): DescribeDeviceOnlineInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeviceOnlineInfoWithOptions(request, runtime);
}

model CreateRpcServiceRequest {
  projectId?: string(name='ProjectId'),
  appKey?: string(name='AppKey'),
  interfaceName?: string(name='InterfaceName'),
  invokeType?: string(name='InvokeType'),
  params?: string(name='Params'),
  groupName?: string(name='GroupName'),
  methodName?: string(name='MethodName'),
  versionCode?: string(name='VersionCode'),
}

model CreateRpcServiceResponseBody = {
  requestId?: string(name='RequestId'),
  id?: long(name='Id'),
}

model CreateRpcServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRpcServiceResponseBody(name='body'),
}

async function createRpcServiceWithOptions(request: CreateRpcServiceRequest, runtime: Util.RuntimeOptions): CreateRpcServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateRpcService', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createRpcService(request: CreateRpcServiceRequest): CreateRpcServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRpcServiceWithOptions(request, runtime);
}

model DeleteVersionWhiteDevicesRequest {
  deviceIds?: string(name='DeviceIds'),
  projectId?: string(name='ProjectId'),
  versionType?: string(name='VersionType'),
  versionId?: string(name='VersionId'),
  deviceIdType?: string(name='DeviceIdType'),
}

model DeleteVersionWhiteDevicesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVersionWhiteDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVersionWhiteDevicesResponseBody(name='body'),
}

async function deleteVersionWhiteDevicesWithOptions(request: DeleteVersionWhiteDevicesRequest, runtime: Util.RuntimeOptions): DeleteVersionWhiteDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteVersionWhiteDevices', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteVersionWhiteDevices(request: DeleteVersionWhiteDevicesRequest): DeleteVersionWhiteDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVersionWhiteDevicesWithOptions(request, runtime);
}

model ListProjectsResponseBody = {
  requestId?: string(name='RequestId'),
  projects?: [ 
    {
      status?: int32(name='Status'),
      description?: string(name='Description'),
      userId?: string(name='UserId'),
      projectId?: string(name='ProjectId'),
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      name?: string(name='Name'),
      id?: long(name='Id'),
      creator?: string(name='Creator'),
    }
  ](name='Projects'),
}

model ListProjectsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProjectsResponseBody(name='body'),
}

async function listProjectsWithOptions(runtime: Util.RuntimeOptions): ListProjectsResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('ListProjects', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listProjects(): ListProjectsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectsWithOptions(runtime);
}

model GenerateFunctionFileUploadMetaRequest {
  projectId?: string(name='ProjectId'),
  fileName?: string(name='FileName'),
}

model GenerateFunctionFileUploadMetaResponseBody = {
  requestId?: string(name='RequestId'),
  uploadMeta?: {
    postObjectPolicy?: {
      signature?: string(name='Signature'),
      host?: string(name='Host'),
      policy?: string(name='Policy'),
      expire?: string(name='Expire'),
      accessId?: string(name='AccessId'),
    }(name='PostObjectPolicy'),
    securityToken?: string(name='SecurityToken'),
    objectKey?: string(name='ObjectKey'),
  }(name='UploadMeta'),
}

model GenerateFunctionFileUploadMetaResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateFunctionFileUploadMetaResponseBody(name='body'),
}

async function generateFunctionFileUploadMetaWithOptions(request: GenerateFunctionFileUploadMetaRequest, runtime: Util.RuntimeOptions): GenerateFunctionFileUploadMetaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GenerateFunctionFileUploadMeta', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function generateFunctionFileUploadMeta(request: GenerateFunctionFileUploadMetaRequest): GenerateFunctionFileUploadMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateFunctionFileUploadMetaWithOptions(request, runtime);
}

model DescribeProjectRequest {
  projectId?: string(name='ProjectId'),
}

model DescribeProjectResponseBody = {
  project?: {
    status?: int32(name='Status'),
    description?: string(name='Description'),
    userId?: string(name='UserId'),
    projectId?: string(name='ProjectId'),
    gmtCreate?: long(name='GmtCreate'),
    gmtModified?: long(name='GmtModified'),
    name?: string(name='Name'),
    id?: long(name='Id'),
    creator?: string(name='Creator'),
    vehicleCommunicationProtocol?: string(name='VehicleCommunicationProtocol'),
  }(name='Project'),
  requestId?: string(name='RequestId'),
}

model DescribeProjectResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProjectResponseBody(name='body'),
}

async function describeProjectWithOptions(request: DescribeProjectRequest, runtime: Util.RuntimeOptions): DescribeProjectResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeProject', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeProject(request: DescribeProjectRequest): DescribeProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProjectWithOptions(request, runtime);
}

model DescribeMqttMessageRequest {
  appKey?: string(name='AppKey'),
  mid?: string(name='Mid'),
  projectId?: string(name='ProjectId'),
}

model DescribeMqttMessageResponseBody = {
  requestId?: string(name='RequestId'),
  message?: {
    time?: long(name='Time'),
    appKey?: string(name='AppKey'),
    mid?: string(name='Mid'),
    topic?: string(name='Topic'),
    payload?: string(name='Payload'),
    qoS?: int32(name='QoS'),
  }(name='Message'),
}

model DescribeMqttMessageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMqttMessageResponseBody(name='body'),
}

async function describeMqttMessageWithOptions(request: DescribeMqttMessageRequest, runtime: Util.RuntimeOptions): DescribeMqttMessageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeMqttMessage', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeMqttMessage(request: DescribeMqttMessageRequest): DescribeMqttMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMqttMessageWithOptions(request, runtime);
}

model ListCameraShootingRecordsRequest {
  projectId?: string(name='ProjectId', description='项目ID'),
  edgeDeviceId?: string(name='EdgeDeviceId', description='终端设备id'),
  shootingType?: long(name='ShootingType', description='拍摄类型，0-图片，1-视频'),
  startTime?: long(name='StartTime', description='起始时间'),
  endTime?: long(name='EndTime', description='截止时间'),
  pageIndex?: long(name='PageIndex', description='查询开始页号'),
  pageSize?: long(name='PageSize', description='每页记录数'),
}

model ListCameraShootingRecordsResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  shootingRecords?: {
    pagination?: {
      totalCount?: long(name='TotalCount'),
      totalPageCount?: long(name='TotalPageCount'),
      pageIndex?: long(name='PageIndex'),
      pageSize?: long(name='PageSize'),
    }(name='Pagination'),
    list?: [ 
      {
        id?: long(name='Id', description='主键ID'),
        shootingType?: long(name='ShootingType', description='拍摄类型，0-图片，1-视频'),
        number?: long(name='Number', description='拍摄数量'),
        time?: long(name='Time', description='拍照间隔/视频时长，单位为s'),
        recordTime?: long(name='RecordTime', description='记录时间'),
        status?: long(name='Status', description='状态：0-未完成，1-已完成'),
      }
    ](name='List'),
  }(name='ShootingRecords'),
}

model ListCameraShootingRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCameraShootingRecordsResponseBody(name='body'),
}

async function listCameraShootingRecordsWithOptions(request: ListCameraShootingRecordsRequest, runtime: Util.RuntimeOptions): ListCameraShootingRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListCameraShootingRecords', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listCameraShootingRecords(request: ListCameraShootingRecordsRequest): ListCameraShootingRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCameraShootingRecordsWithOptions(request, runtime);
}

model DeleteVersionBlackDevicesRequest {
  deviceIds?: string(name='DeviceIds'),
  projectId?: string(name='ProjectId'),
  versionType?: string(name='VersionType'),
  versionId?: string(name='VersionId'),
  deviceIdType?: string(name='DeviceIdType'),
}

model DeleteVersionBlackDevicesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVersionBlackDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVersionBlackDevicesResponseBody(name='body'),
}

async function deleteVersionBlackDevicesWithOptions(request: DeleteVersionBlackDevicesRequest, runtime: Util.RuntimeOptions): DeleteVersionBlackDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteVersionBlackDevices', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteVersionBlackDevices(request: DeleteVersionBlackDevicesRequest): DeleteVersionBlackDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVersionBlackDevicesWithOptions(request, runtime);
}

model DescribeOsVersionRequest {
  projectId?: string(name='ProjectId'),
  versionId?: long(name='VersionId'),
}

model DescribeOsVersionResponseBody = {
  requestId?: string(name='RequestId'),
  osVersion?: {
    status?: string(name='Status'),
    deviceModelId?: string(name='DeviceModelId'),
    blackVersionList?: string(name='BlackVersionList'),
    isMilestone?: string(name='IsMilestone'),
    gmtModify?: string(name='GmtModify'),
    releaseNote?: string(name='ReleaseNote'),
    remark?: string(name='Remark'),
    systemVersion?: string(name='SystemVersion'),
    statusName?: string(name='StatusName'),
    deviceModelName?: string(name='DeviceModelName'),
    whiteVersionList?: string(name='WhiteVersionList'),
    maxClientVersion?: string(name='MaxClientVersion'),
    romList?: [ 
      {
        gmtModify?: string(name='GmtModify'),
        splitNum?: string(name='SplitNum'),
        downloadUrl?: string(name='DownloadUrl'),
        size?: string(name='Size'),
        gmtCreate?: string(name='GmtCreate'),
        versionId?: long(name='VersionId'),
        md5?: string(name='Md5'),
        baseVersion?: string(name='BaseVersion'),
        id?: long(name='Id'),
        originalUrl?: string(name='OriginalUrl'),
      }
    ](name='RomList'),
    minClientVersion?: string(name='MinClientVersion'),
    nightUpgradeOption?: {
      downloadType?: string(name='DownloadType'),
      isAllowedCancel?: string(name='IsAllowedCancel'),
      isShowTip?: string(name='IsShowTip'),
    }(name='NightUpgradeOption'),
    gmtCreate?: string(name='GmtCreate'),
    isForceNightUpgrade?: string(name='IsForceNightUpgrade'),
    mobileDownloadMaxSize?: string(name='MobileDownloadMaxSize'),
    enableMobileDownload?: string(name='EnableMobileDownload'),
    isForceUpgrade?: string(name='IsForceUpgrade'),
    id?: long(name='Id'),
  }(name='OsVersion'),
}

model DescribeOsVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOsVersionResponseBody(name='body'),
}

async function describeOsVersionWithOptions(request: DescribeOsVersionRequest, runtime: Util.RuntimeOptions): DescribeOsVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeOsVersion', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeOsVersion(request: DescribeOsVersionRequest): DescribeOsVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOsVersionWithOptions(request, runtime);
}

model ListRpcServicesRequest {
  projectId?: string(name='ProjectId'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model ListRpcServicesResponseBody = {
  requestId?: string(name='RequestId'),
  rpcServices?: {
    pagination?: {
      pageIndex?: int32(name='PageIndex'),
      totalPageCount?: int32(name='TotalPageCount'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
    list?: [ 
      {
        methodName?: string(name='MethodName'),
        type?: string(name='Type'),
        interfaceName?: string(name='InterfaceName'),
        params?: string(name='Params'),
        appKey?: string(name='AppKey'),
        groupName?: string(name='GroupName'),
        gmtCreate?: long(name='GmtCreate'),
        isDelete?: string(name='IsDelete'),
        versionCode?: string(name='VersionCode'),
        gmtModified?: long(name='GmtModified'),
        id?: long(name='Id'),
      }
    ](name='List'),
  }(name='RpcServices'),
}

model ListRpcServicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRpcServicesResponseBody(name='body'),
}

async function listRpcServicesWithOptions(request: ListRpcServicesRequest, runtime: Util.RuntimeOptions): ListRpcServicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListRpcServices', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listRpcServices(request: ListRpcServicesRequest): ListRpcServicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRpcServicesWithOptions(request, runtime);
}

model DeleteSchemaSubscribeRequest {
  id?: string(name='Id'),
  projectId?: string(name='ProjectId'),
}

model DeleteSchemaSubscribeResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSchemaSubscribeResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSchemaSubscribeResponseBody(name='body'),
}

async function deleteSchemaSubscribeWithOptions(request: DeleteSchemaSubscribeRequest, runtime: Util.RuntimeOptions): DeleteSchemaSubscribeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSchemaSubscribe', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSchemaSubscribe(request: DeleteSchemaSubscribeRequest): DeleteSchemaSubscribeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSchemaSubscribeWithOptions(request, runtime);
}

model AddUploadedFunctionFileInfoRequest {
  projectId?: string(name='ProjectId'),
  objectKey?: string(name='ObjectKey'),
  fileName?: string(name='FileName'),
}

model AddUploadedFunctionFileInfoResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddUploadedFunctionFileInfoResponse = {
  headers: map[string]string(name='headers'),
  body: AddUploadedFunctionFileInfoResponseBody(name='body'),
}

async function addUploadedFunctionFileInfoWithOptions(request: AddUploadedFunctionFileInfoRequest, runtime: Util.RuntimeOptions): AddUploadedFunctionFileInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddUploadedFunctionFileInfo', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addUploadedFunctionFileInfo(request: AddUploadedFunctionFileInfoRequest): AddUploadedFunctionFileInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return addUploadedFunctionFileInfoWithOptions(request, runtime);
}

model CreateProjectAppRequest {
  projectId?: string(name='ProjectId'),
  appName?: string(name='AppName'),
  appPkgName?: string(name='AppPkgName'),
  osType?: int32(name='OsType'),
}

model CreateProjectAppResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateProjectAppResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProjectAppResponseBody(name='body'),
}

async function createProjectAppWithOptions(request: CreateProjectAppRequest, runtime: Util.RuntimeOptions): CreateProjectAppResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateProjectApp', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createProjectApp(request: CreateProjectAppRequest): CreateProjectAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProjectAppWithOptions(request, runtime);
}

model ListServicesResponseBody = {
  requestId?: string(name='RequestId'),
  serviceList?: [ string ](name='ServiceList'),
}

model ListServicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListServicesResponseBody(name='body'),
}

async function listServicesWithOptions(runtime: Util.RuntimeOptions): ListServicesResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('ListServices', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listServices(): ListServicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listServicesWithOptions(runtime);
}

model FindOsVersionsRequest {
  projectId?: string(name='ProjectId'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  versionId?: string(name='VersionId'),
  deviceModelId?: string(name='DeviceModelId'),
  systemVersion?: string(name='SystemVersion'),
  status?: string(name='Status'),
  isMilestone?: string(name='IsMilestone'),
  remark?: string(name='Remark'),
}

model FindOsVersionsResponseBody = {
  requestId?: string(name='RequestId'),
  osVersionList?: {
    items?: [ 
      {
        status?: string(name='Status'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        deviceModelId?: string(name='DeviceModelId'),
        gmtModify?: string(name='GmtModify'),
        isMilestone?: string(name='IsMilestone'),
        remark?: string(name='Remark'),
        systemVersion?: string(name='SystemVersion'),
        statusName?: string(name='StatusName'),
        isForceReboot?: string(name='IsForceReboot'),
        deviceModelName?: string(name='DeviceModelName'),
        isSilentUpgrade?: string(name='IsSilentUpgrade'),
        gmtModifyTimestamp?: long(name='GmtModifyTimestamp'),
        isForceNightUpgrade?: string(name='IsForceNightUpgrade'),
        gmtCreate?: string(name='GmtCreate'),
        isForceUpgrade?: string(name='IsForceUpgrade'),
        id?: long(name='Id'),
      }
    ](name='Items'),
    totalCount?: int32(name='TotalCount'),
  }(name='OsVersionList'),
}

model FindOsVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: FindOsVersionsResponseBody(name='body'),
}

async function findOsVersionsWithOptions(request: FindOsVersionsRequest, runtime: Util.RuntimeOptions): FindOsVersionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('FindOsVersions', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function findOsVersions(request: FindOsVersionsRequest): FindOsVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return findOsVersionsWithOptions(request, runtime);
}

model UpdateVersionPrepublishActiveStatusRequest {
  projectId?: string(name='ProjectId'),
  prepublishId?: string(name='PrepublishId'),
  isActive?: string(name='IsActive'),
}

model UpdateVersionPrepublishActiveStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateVersionPrepublishActiveStatusResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVersionPrepublishActiveStatusResponseBody(name='body'),
}

async function updateVersionPrepublishActiveStatusWithOptions(request: UpdateVersionPrepublishActiveStatusRequest, runtime: Util.RuntimeOptions): UpdateVersionPrepublishActiveStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateVersionPrepublishActiveStatus', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateVersionPrepublishActiveStatus(request: UpdateVersionPrepublishActiveStatusRequest): UpdateVersionPrepublishActiveStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateVersionPrepublishActiveStatusWithOptions(request, runtime);
}

model CreateOsVersionRequest {
  isForceNightUpgrade?: string(name='IsForceNightUpgrade'),
  maxClientVersion?: string(name='MaxClientVersion'),
  projectId?: string(name='ProjectId'),
  deviceModelId?: string(name='DeviceModelId'),
  systemVersion?: string(name='SystemVersion'),
  releaseNote?: string(name='ReleaseNote'),
  remark?: string(name='Remark'),
  blackVersionList?: string(name='BlackVersionList'),
  isMilestone?: string(name='IsMilestone'),
  minClientVersion?: string(name='MinClientVersion'),
  whiteVersionList?: string(name='WhiteVersionList'),
  isForceUpgrade?: string(name='IsForceUpgrade'),
  nightUpgradeDownloadType?: string(name='NightUpgradeDownloadType'),
  nightUpgradeIsShowTip?: string(name='NightUpgradeIsShowTip'),
  nightUpgradeIsAllowedCancel?: string(name='NightUpgradeIsAllowedCancel'),
  romList?: string(name='RomList'),
  enableMobileDownload?: string(name='EnableMobileDownload'),
  mobileDownloadMaxSize?: string(name='MobileDownloadMaxSize'),
}

model CreateOsVersionResponseBody = {
  versionId?: string(name='VersionId'),
  requestId?: string(name='RequestId'),
}

model CreateOsVersionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOsVersionResponseBody(name='body'),
}

async function createOsVersionWithOptions(request: CreateOsVersionRequest, runtime: Util.RuntimeOptions): CreateOsVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateOsVersion', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createOsVersion(request: CreateOsVersionRequest): CreateOsVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOsVersionWithOptions(request, runtime);
}

model CountDeviceBrandsRequest {
  deviceBrandId?: long(name='DeviceBrandId'),
  deviceBrand?: string(name='DeviceBrand'),
  projectId?: string(name='ProjectId'),
}

model CountDeviceBrandsResponseBody = {
  requestId?: string(name='RequestId'),
  brandCount?: int32(name='BrandCount'),
}

model CountDeviceBrandsResponse = {
  headers: map[string]string(name='headers'),
  body: CountDeviceBrandsResponseBody(name='body'),
}

async function countDeviceBrandsWithOptions(request: CountDeviceBrandsRequest, runtime: Util.RuntimeOptions): CountDeviceBrandsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('CountDeviceBrands', '2018-05-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function countDeviceBrands(request: CountDeviceBrandsRequest): CountDeviceBrandsResponse {
  var runtime = new Util.RuntimeOptions{};
  return countDeviceBrandsWithOptions(request, runtime);
}

model DescribeDeviceBrandRequest {
  projectId?: string(name='ProjectId'),
  deviceBrandId?: long(name='DeviceBrandId'),
  deviceBrand?: string(name='DeviceBrand'),
  start?: string(name='Start'),
  length?: string(name='Length'),
}

model DescribeDeviceBrandResponseBody = {
  requestId?: string(name='RequestId'),
  deviceBrand?: {
    deviceBrandId?: long(name='DeviceBrandId'),
    description?: string(name='Description'),
    projectId?: string(name='ProjectId'),
    manufacture?: string(name='Manufacture'),
    deviceBrand?: string(name='DeviceBrand'),
  }(name='DeviceBrand'),
}

model DescribeDeviceBrandResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeviceBrandResponseBody(name='body'),
}

async function describeDeviceBrandWithOptions(request: DescribeDeviceBrandRequest, runtime: Util.RuntimeOptions): DescribeDeviceBrandResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeDeviceBrand', '2018-05-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeDeviceBrand(request: DescribeDeviceBrandRequest): DescribeDeviceBrandResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeviceBrandWithOptions(request, runtime);
}

model CreateShadowSchemaRequest {
  deviceModelId?: string(name='DeviceModelId'),
  authType?: string(name='AuthType'),
  namespace?: string(name='Namespace'),
  projectId?: string(name='ProjectId'),
  schema?: string(name='Schema'),
}

model CreateShadowSchemaResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateShadowSchemaResponse = {
  headers: map[string]string(name='headers'),
  body: CreateShadowSchemaResponseBody(name='body'),
}

async function createShadowSchemaWithOptions(request: CreateShadowSchemaRequest, runtime: Util.RuntimeOptions): CreateShadowSchemaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateShadowSchema', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createShadowSchema(request: CreateShadowSchemaRequest): CreateShadowSchemaResponse {
  var runtime = new Util.RuntimeOptions{};
  return createShadowSchemaWithOptions(request, runtime);
}

model DescribeDeviceValiditySchemaRequest {
  deviceModel?: string(name='DeviceModel'),
  schemaVersion?: string(name='SchemaVersion'),
  projectId?: string(name='ProjectId'),
}

model DescribeDeviceValiditySchemaResponseBody = {
  requestId?: string(name='RequestId'),
  itemList?: [ 
    {
      minimum?: float(name='Minimum'),
      type?: string(name='Type'),
      maximum?: float(name='Maximum'),
      itemType?: string(name='ItemType'),
      enumListStr?: string(name='EnumListStr'),
      exclusiveMinimum?: boolean(name='ExclusiveMinimum'),
      maxLength?: int32(name='MaxLength'),
      required?: string(name='Required'),
      description?: string(name='Description'),
      exclusiveMaximum?: boolean(name='ExclusiveMaximum'),
      path?: string(name='Path'),
      minLength?: int32(name='MinLength'),
    }
  ](name='ItemList'),
}

model DescribeDeviceValiditySchemaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeviceValiditySchemaResponseBody(name='body'),
}

async function describeDeviceValiditySchemaWithOptions(request: DescribeDeviceValiditySchemaRequest, runtime: Util.RuntimeOptions): DescribeDeviceValiditySchemaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDeviceValiditySchema', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDeviceValiditySchema(request: DescribeDeviceValiditySchemaRequest): DescribeDeviceValiditySchemaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeviceValiditySchemaWithOptions(request, runtime);
}

model GetOssUploadMetaRequest {
  projectId?: string(name='ProjectId'),
  ext?: string(name='Ext'),
}

model GetOssUploadMetaResponseBody = {
  requestId?: string(name='RequestId'),
  ossUploadMeta?: {
    accessKey?: string(name='AccessKey'),
    signature?: string(name='Signature'),
    host?: string(name='Host'),
    policy?: string(name='Policy'),
    securityToken?: string(name='SecurityToken'),
    objectKey?: string(name='ObjectKey'),
  }(name='OssUploadMeta'),
}

model GetOssUploadMetaResponse = {
  headers: map[string]string(name='headers'),
  body: GetOssUploadMetaResponseBody(name='body'),
}

async function getOssUploadMetaWithOptions(request: GetOssUploadMetaRequest, runtime: Util.RuntimeOptions): GetOssUploadMetaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetOssUploadMeta', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getOssUploadMeta(request: GetOssUploadMetaRequest): GetOssUploadMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOssUploadMetaWithOptions(request, runtime);
}

model ListUpstreamAppKeyRelationsRequest {
  pageSize?: int32(name='PageSize'),
  projectId?: string(name='ProjectId'),
  appServerId?: long(name='AppServerId'),
  pageIndex?: int32(name='PageIndex'),
}

model ListUpstreamAppKeyRelationsResponseBody = {
  requestId?: string(name='RequestId'),
  relationList?: {
    pagination?: {
      pageIndex?: int32(name='PageIndex'),
      totalPageCount?: int32(name='TotalPageCount'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
    list?: [ 
      {
        appName?: string(name='AppName'),
        appKey?: string(name='AppKey'),
        appPackage?: string(name='AppPackage'),
        projectId?: string(name='ProjectId'),
        gmtCreate?: long(name='GmtCreate'),
        PAppKey?: string(name='PAppKey'),
        id?: long(name='Id'),
      }
    ](name='List'),
  }(name='RelationList'),
}

model ListUpstreamAppKeyRelationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListUpstreamAppKeyRelationsResponseBody(name='body'),
}

async function listUpstreamAppKeyRelationsWithOptions(request: ListUpstreamAppKeyRelationsRequest, runtime: Util.RuntimeOptions): ListUpstreamAppKeyRelationsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListUpstreamAppKeyRelations', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listUpstreamAppKeyRelations(request: ListUpstreamAppKeyRelationsRequest): ListUpstreamAppKeyRelationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUpstreamAppKeyRelationsWithOptions(request, runtime);
}

model ListShadowSchemasRequest {
  projectId?: string(name='ProjectId'),
  queryType?: string(name='QueryType'),
  queryValue?: string(name='QueryValue'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
}

model ListShadowSchemasResponseBody = {
  requestId?: string(name='RequestId'),
  pageList?: {
    pagination?: {
      pageIndex?: int32(name='PageIndex'),
      totalPageCount?: int32(name='TotalPageCount'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
      simpleSign?: boolean(name='SimpleSign'),
      hasNextPage?: boolean(name='HasNextPage'),
    }(name='Pagination'),
    list?: [ 
      {
        authTypeDesc?: string(name='AuthTypeDesc'),
        deviceModelId?: long(name='DeviceModelId'),
        authType?: int32(name='AuthType'),
        projectId?: string(name='ProjectId'),
        gmtCreate?: long(name='GmtCreate'),
        namespace?: string(name='Namespace'),
        deviceModel?: string(name='DeviceModel'),
        gmtModified?: long(name='GmtModified'),
        moduleSchema?: string(name='ModuleSchema'),
        id?: long(name='Id'),
      }
    ](name='List'),
  }(name='PageList'),
}

model ListShadowSchemasResponse = {
  headers: map[string]string(name='headers'),
  body: ListShadowSchemasResponseBody(name='body'),
}

async function listShadowSchemasWithOptions(request: ListShadowSchemasRequest, runtime: Util.RuntimeOptions): ListShadowSchemasResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListShadowSchemas', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listShadowSchemas(request: ListShadowSchemasRequest): ListShadowSchemasResponse {
  var runtime = new Util.RuntimeOptions{};
  return listShadowSchemasWithOptions(request, runtime);
}

model DeleteProjectAppRequest {
  projectId?: string(name='ProjectId'),
  appId?: string(name='AppId'),
}

model DeleteProjectAppResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteProjectAppResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProjectAppResponseBody(name='body'),
}

async function deleteProjectAppWithOptions(request: DeleteProjectAppRequest, runtime: Util.RuntimeOptions): DeleteProjectAppResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteProjectApp', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteProjectApp(request: DeleteProjectAppRequest): DeleteProjectAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProjectAppWithOptions(request, runtime);
}

model CountYunIdInfoResponseBody = {
  requestId?: string(name='RequestId'),
  yunIdInfo?: [ 
    {
      totalBrandCount?: long(name='TotalBrandCount'),
      totalDeviceCount?: long(name='TotalDeviceCount'),
      totalDeviceModelCount?: long(name='TotalDeviceModelCount'),
    }
  ](name='YunIdInfo'),
}

model CountYunIdInfoResponse = {
  headers: map[string]string(name='headers'),
  body: CountYunIdInfoResponseBody(name='body'),
}

async function countYunIdInfoWithOptions(runtime: Util.RuntimeOptions): CountYunIdInfoResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('CountYunIdInfo', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function countYunIdInfo(): CountYunIdInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return countYunIdInfoWithOptions(runtime);
}

model FindPrepublishesByParentIdRequest {
  projectId?: string(name='ProjectId'),
  parentId?: int32(name='ParentId'),
}

model FindPrepublishesByParentIdResponseBody = {
  requestId?: string(name='RequestId'),
  prepublishList?: {
    items?: [ 
      {
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        deviceModelId?: string(name='DeviceModelId'),
        gmtModify?: string(name='GmtModify'),
        isActive?: string(name='IsActive'),
        versionId?: string(name='VersionId'),
        barrierCount?: string(name='BarrierCount'),
        isTotalPrepublish?: string(name='IsTotalPrepublish'),
        gmtModifyTimestamp?: long(name='GmtModifyTimestamp'),
        parentId?: string(name='ParentId'),
        gmtCreate?: string(name='GmtCreate'),
        name?: string(name='Name'),
        id?: long(name='Id'),
        versionType?: string(name='VersionType'),
      }
    ](name='Items'),
    totalCount?: int32(name='TotalCount'),
  }(name='PrepublishList'),
}

model FindPrepublishesByParentIdResponse = {
  headers: map[string]string(name='headers'),
  body: FindPrepublishesByParentIdResponseBody(name='body'),
}

async function findPrepublishesByParentIdWithOptions(request: FindPrepublishesByParentIdRequest, runtime: Util.RuntimeOptions): FindPrepublishesByParentIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('FindPrepublishesByParentId', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function findPrepublishesByParentId(request: FindPrepublishesByParentIdRequest): FindPrepublishesByParentIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return findPrepublishesByParentIdWithOptions(request, runtime);
}

model GetVehicleControlResultRequest {
  deviceId?: string(name='DeviceId'),
  executionId?: string(name='ExecutionId'),
  projectId?: string(name='ProjectId'),
}

model GetVehicleControlResultResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  executionInfo?: {
    status?: string(name='Status'),
    subStatus?: string(name='SubStatus'),
  }(name='ExecutionInfo'),
}

model GetVehicleControlResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetVehicleControlResultResponseBody(name='body'),
}

async function getVehicleControlResultWithOptions(request: GetVehicleControlResultRequest, runtime: Util.RuntimeOptions): GetVehicleControlResultResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetVehicleControlResult', '2018-05-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getVehicleControlResult(request: GetVehicleControlResultRequest): GetVehicleControlResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVehicleControlResultWithOptions(request, runtime);
}

model UpdateTriggerRequest {
  projectId?: string(name='ProjectId'),
  id?: long(name='Id'),
  sandbox?: int32(name='Sandbox'),
  production?: int32(name='Production'),
}

model UpdateTriggerResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTriggerResponseBody(name='body'),
}

async function updateTriggerWithOptions(request: UpdateTriggerRequest, runtime: Util.RuntimeOptions): UpdateTriggerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateTrigger', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateTrigger(request: UpdateTriggerRequest): UpdateTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTriggerWithOptions(request, runtime);
}

model ListClientSdksRequest {
  osType?: string(name='OsType'),
}

model ListClientSdksResponseBody = {
  clientSdks?: [ 
    {
      osType?: int32(name='OsType'),
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      name?: string(name='Name'),
      pkgName?: string(name='PkgName'),
      pkgType?: int32(name='PkgType'),
      id?: long(name='Id'),
    }
  ](name='ClientSdks'),
  requestId?: string(name='RequestId'),
}

model ListClientSdksResponse = {
  headers: map[string]string(name='headers'),
  body: ListClientSdksResponseBody(name='body'),
}

async function listClientSdksWithOptions(request: ListClientSdksRequest, runtime: Util.RuntimeOptions): ListClientSdksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListClientSdks', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listClientSdks(request: ListClientSdksRequest): ListClientSdksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClientSdksWithOptions(request, runtime);
}

model ListVersionDeviceGroupsRequest {
  projectId?: string(name='ProjectId'),
}

model ListVersionDeviceGroupsResponseBody = {
  requestId?: string(name='RequestId'),
  deviceGroupList?: [ 
    {
      gmtModify?: string(name='GmtModify'),
      description?: string(name='Description'),
      gmtCreate?: string(name='GmtCreate'),
      name?: string(name='Name'),
      id?: string(name='Id'),
    }
  ](name='DeviceGroupList'),
}

model ListVersionDeviceGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListVersionDeviceGroupsResponseBody(name='body'),
}

async function listVersionDeviceGroupsWithOptions(request: ListVersionDeviceGroupsRequest, runtime: Util.RuntimeOptions): ListVersionDeviceGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListVersionDeviceGroups', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listVersionDeviceGroups(request: ListVersionDeviceGroupsRequest): ListVersionDeviceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVersionDeviceGroupsWithOptions(request, runtime);
}

model GetCommercialVehicleDeviceRequest {
  projectId?: string(name='ProjectId', description='项目ID'),
  clientId?: string(name='ClientId'),
}

model GetCommercialVehicleDeviceResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  vehicleDevice?: {
    createTime?: long(name='CreateTime'),
    modifiedTime?: long(name='ModifiedTime'),
    hardwareId?: string(name='HardwareId'),
    clientId?: string(name='ClientId'),
    manufacturerId?: string(name='ManufacturerId'),
    deviceModel?: string(name='DeviceModel'),
    onlineStatus?: long(name='OnlineStatus'),
    plateColor?: long(name='PlateColor'),
    plateNumber?: string(name='PlateNumber'),
    vin?: string(name='Vin'),
    imei?: string(name='Imei'),
    softVersion?: string(name='SoftVersion'),
    lastAuthTime?: long(name='LastAuthTime'),
  }(name='VehicleDevice'),
}

model GetCommercialVehicleDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: GetCommercialVehicleDeviceResponseBody(name='body'),
}

async function getCommercialVehicleDeviceWithOptions(request: GetCommercialVehicleDeviceRequest, runtime: Util.RuntimeOptions): GetCommercialVehicleDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetCommercialVehicleDevice', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getCommercialVehicleDevice(request: GetCommercialVehicleDeviceRequest): GetCommercialVehicleDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCommercialVehicleDeviceWithOptions(request, runtime);
}

model SubmitAssistReportRequest {
  projectId?: string(name='ProjectId'),
  assistId?: string(name='AssistId'),
  assistDescription?: string(name='AssistDescription'),
  assistResult?: string(name='AssistResult'),
  assistTag?: string(name='AssistTag'),
  assistReason?: string(name='AssistReason'),
  deviceModel?: string(name='DeviceModel'),
}

model SubmitAssistReportResponseBody = {
  requestId?: string(name='RequestId'),
}

model SubmitAssistReportResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitAssistReportResponseBody(name='body'),
}

async function submitAssistReportWithOptions(request: SubmitAssistReportRequest, runtime: Util.RuntimeOptions): SubmitAssistReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitAssistReport', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitAssistReport(request: SubmitAssistReportRequest): SubmitAssistReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitAssistReportWithOptions(request, runtime);
}

model DeleteVersionAllBlackDevicesRequest {
  projectId?: string(name='ProjectId'),
  versionType?: string(name='VersionType'),
  versionId?: string(name='VersionId'),
}

model DeleteVersionAllBlackDevicesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVersionAllBlackDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVersionAllBlackDevicesResponseBody(name='body'),
}

async function deleteVersionAllBlackDevicesWithOptions(request: DeleteVersionAllBlackDevicesRequest, runtime: Util.RuntimeOptions): DeleteVersionAllBlackDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteVersionAllBlackDevices', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteVersionAllBlackDevices(request: DeleteVersionAllBlackDevicesRequest): DeleteVersionAllBlackDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVersionAllBlackDevicesWithOptions(request, runtime);
}

model ListOpenAccountLinksRequest {
  projectId?: string(name='ProjectId'),
  identityId?: string(name='IdentityId'),
  idp?: string(name='Idp'),
  openId?: string(name='OpenId'),
}

model ListOpenAccountLinksResponseBody = {
  requestId?: string(name='RequestId'),
  openAccounts?: [ 
    {
      status?: int32(name='Status'),
      type?: int32(name='Type'),
      displayName?: string(name='DisplayName'),
      createAccessKey?: string(name='CreateAccessKey'),
      openId?: string(name='OpenId'),
      mobile?: string(name='Mobile'),
      region?: string(name='Region'),
      identityId?: string(name='IdentityId'),
      loginId?: string(name='LoginId'),
      idp?: string(name='Idp'),
      aliyunId?: string(name='AliyunId'),
    }
  ](name='OpenAccounts'),
}

model ListOpenAccountLinksResponse = {
  headers: map[string]string(name='headers'),
  body: ListOpenAccountLinksResponseBody(name='body'),
}

async function listOpenAccountLinksWithOptions(request: ListOpenAccountLinksRequest, runtime: Util.RuntimeOptions): ListOpenAccountLinksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListOpenAccountLinks', '2018-05-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listOpenAccountLinks(request: ListOpenAccountLinksRequest): ListOpenAccountLinksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOpenAccountLinksWithOptions(request, runtime);
}

model AddVersionWhiteDevicesByDeviceGroupsRequest {
  projectId?: string(name='ProjectId'),
  versionType?: string(name='VersionType'),
  groupIds?: string(name='GroupIds'),
  versionId?: string(name='VersionId'),
}

model AddVersionWhiteDevicesByDeviceGroupsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
}

model AddVersionWhiteDevicesByDeviceGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: AddVersionWhiteDevicesByDeviceGroupsResponseBody(name='body'),
}

async function addVersionWhiteDevicesByDeviceGroupsWithOptions(request: AddVersionWhiteDevicesByDeviceGroupsRequest, runtime: Util.RuntimeOptions): AddVersionWhiteDevicesByDeviceGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddVersionWhiteDevicesByDeviceGroups', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addVersionWhiteDevicesByDeviceGroups(request: AddVersionWhiteDevicesByDeviceGroupsRequest): AddVersionWhiteDevicesByDeviceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addVersionWhiteDevicesByDeviceGroupsWithOptions(request, runtime);
}

model FindCustomizedPropertiesRequest {
  projectId?: string(name='ProjectId'),
  versionId?: string(name='VersionId'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  name?: string(name='Name'),
  versionType?: string(name='VersionType'),
}

model FindCustomizedPropertiesResponseBody = {
  requestId?: string(name='RequestId'),
  customizedPropertyList?: {
    items?: [ 
      {
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        value?: string(name='Value'),
        gmtCreate?: string(name='GmtCreate'),
        name?: string(name='Name'),
        id?: long(name='Id'),
      }
    ](name='Items'),
    totalCount?: int32(name='TotalCount'),
  }(name='CustomizedPropertyList'),
}

model FindCustomizedPropertiesResponse = {
  headers: map[string]string(name='headers'),
  body: FindCustomizedPropertiesResponseBody(name='body'),
}

async function findCustomizedPropertiesWithOptions(request: FindCustomizedPropertiesRequest, runtime: Util.RuntimeOptions): FindCustomizedPropertiesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('FindCustomizedProperties', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function findCustomizedProperties(request: FindCustomizedPropertiesRequest): FindCustomizedPropertiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return findCustomizedPropertiesWithOptions(request, runtime);
}

model ListMessageAcksRequest {
  pageSize?: int32(name='PageSize'),
  projectId?: string(name='ProjectId'),
  deviceId?: string(name='DeviceId'),
  messageId?: long(name='MessageId'),
  pageIndex?: int32(name='PageIndex'),
}

model ListMessageAcksResponseBody = {
  requestId?: string(name='RequestId'),
  messageAcks?: {
    pagination?: {
      pageIndex?: int32(name='PageIndex'),
      totalPageCount?: int32(name='TotalPageCount'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
    list?: [ 
      {
        deviceId?: string(name='DeviceId'),
        ackTime?: long(name='AckTime'),
        mid?: long(name='Mid'),
      }
    ](name='List'),
  }(name='MessageAcks'),
}

model ListMessageAcksResponse = {
  headers: map[string]string(name='headers'),
  body: ListMessageAcksResponseBody(name='body'),
}

async function listMessageAcksWithOptions(request: ListMessageAcksRequest, runtime: Util.RuntimeOptions): ListMessageAcksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListMessageAcks', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listMessageAcks(request: ListMessageAcksRequest): ListMessageAcksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMessageAcksWithOptions(request, runtime);
}

model GetCommercialVehicleTrackRequest {
  projectId?: string(name='ProjectId', description='项目ID'),
  clientId?: string(name='ClientId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
}

model GetCommercialVehicleTrackResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  points?: [ 
    {
      longitude?: string(name='Longitude'),
      latitude?: string(name='Latitude'),
      altitude?: string(name='Altitude'),
      speed?: long(name='Speed'),
      direction?: long(name='Direction'),
      time?: long(name='Time'),
    }
  ](name='Points'),
}

model GetCommercialVehicleTrackResponse = {
  headers: map[string]string(name='headers'),
  body: GetCommercialVehicleTrackResponseBody(name='body'),
}

async function getCommercialVehicleTrackWithOptions(request: GetCommercialVehicleTrackRequest, runtime: Util.RuntimeOptions): GetCommercialVehicleTrackResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetCommercialVehicleTrack', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getCommercialVehicleTrack(request: GetCommercialVehicleTrackRequest): GetCommercialVehicleTrackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCommercialVehicleTrackWithOptions(request, runtime);
}

model ListHostDevicesRequest {
  projectId?: string(name='ProjectId', description='项目ID'),
  pageIndex?: long(name='PageIndex', description='查询开始页'),
  pageSize?: long(name='PageSize', description='每页记录数'),
  deviceId?: string(name='DeviceId'),
  serialNumber?: string(name='SerialNumber'),
  deviceName?: string(name='DeviceName'),
}

model ListHostDevicesResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  hostDevices?: {
    pagination?: {
      totalCount?: long(name='TotalCount'),
      totalPageCount?: long(name='TotalPageCount'),
      pageIndex?: long(name='PageIndex'),
      pageSize?: long(name='PageSize'),
    }(name='Pagination'),
    list?: [ 
      {
        deviceId?: string(name='DeviceId'),
        serialNumber?: string(name='SerialNumber'),
        deviceName?: string(name='DeviceName'),
        status?: long(name='Status'),
        deviceModel?: string(name='DeviceModel'),
        ip?: string(name='Ip'),
        activateTime?: long(name='ActivateTime'),
      }
    ](name='List'),
  }(name='HostDevices', description='表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
}

model ListHostDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListHostDevicesResponseBody(name='body'),
}

async function listHostDevicesWithOptions(request: ListHostDevicesRequest, runtime: Util.RuntimeOptions): ListHostDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListHostDevices', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listHostDevices(request: ListHostDevicesRequest): ListHostDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHostDevicesWithOptions(request, runtime);
}

model ListMqttClientSubscriptionsRequest {
  appKey?: string(name='AppKey'),
  clientId?: string(name='ClientId'),
  projectId?: string(name='ProjectId'),
}

model ListMqttClientSubscriptionsResponseBody = {
  requestId?: string(name='RequestId'),
  clientSubscriptions?: {
    pagination?: {
      pageIndex?: int32(name='PageIndex'),
      totalPageCount?: int32(name='TotalPageCount'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
    list?: [ 
      {
        topic?: string(name='Topic'),
        qoS?: int32(name='QoS'),
      }
    ](name='List'),
  }(name='ClientSubscriptions'),
}

model ListMqttClientSubscriptionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListMqttClientSubscriptionsResponseBody(name='body'),
}

async function listMqttClientSubscriptionsWithOptions(request: ListMqttClientSubscriptionsRequest, runtime: Util.RuntimeOptions): ListMqttClientSubscriptionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListMqttClientSubscriptions', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listMqttClientSubscriptions(request: ListMqttClientSubscriptionsRequest): ListMqttClientSubscriptionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMqttClientSubscriptionsWithOptions(request, runtime);
}

model InvokeFunctionRequest {
  projectId?: string(name='ProjectId'),
  fileId?: long(name='FileId'),
  functionName?: string(name='FunctionName'),
  env?: int32(name='Env'),
  parameters?: string(name='Parameters'),
}

model InvokeFunctionResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    output?: string(name='Output'),
    backEndRequestId?: string(name='BackEndRequestId'),
  }(name='Result'),
}

model InvokeFunctionResponse = {
  headers: map[string]string(name='headers'),
  body: InvokeFunctionResponseBody(name='body'),
}

async function invokeFunctionWithOptions(request: InvokeFunctionRequest, runtime: Util.RuntimeOptions): InvokeFunctionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('InvokeFunction', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function invokeFunction(request: InvokeFunctionRequest): InvokeFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return invokeFunctionWithOptions(request, runtime);
}

model DeleteVersionAllWhiteDevicesRequest {
  projectId?: string(name='ProjectId'),
  versionType?: string(name='VersionType'),
  versionId?: string(name='VersionId'),
}

model DeleteVersionAllWhiteDevicesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVersionAllWhiteDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVersionAllWhiteDevicesResponseBody(name='body'),
}

async function deleteVersionAllWhiteDevicesWithOptions(request: DeleteVersionAllWhiteDevicesRequest, runtime: Util.RuntimeOptions): DeleteVersionAllWhiteDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteVersionAllWhiteDevices', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteVersionAllWhiteDevices(request: DeleteVersionAllWhiteDevicesRequest): DeleteVersionAllWhiteDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVersionAllWhiteDevicesWithOptions(request, runtime);
}

model DescribeMessageRequest {
  projectId?: string(name='ProjectId'),
  messageId?: long(name='MessageId'),
}

model DescribeMessageResponseBody = {
  requestId?: string(name='RequestId'),
  message?: {
    type?: int32(name='Type'),
    action?: string(name='Action'),
    projectId?: string(name='ProjectId'),
    predictSendCnt?: int32(name='PredictSendCnt'),
    uri?: string(name='Uri'),
    desc?: string(name='Desc'),
    auditMsg?: string(name='AuditMsg'),
    appName?: string(name='AppName'),
    appKey?: string(name='AppKey'),
    gmtCreateTime?: long(name='GmtCreateTime'),
    exipiredTime?: long(name='ExipiredTime'),
    ackCnt?: int32(name='AckCnt'),
    title?: string(name='Title'),
    parameter?: string(name='Parameter'),
    audit?: int32(name='Audit'),
    id?: long(name='Id'),
    sendStatus?: int32(name='SendStatus'),
  }(name='Message'),
}

model DescribeMessageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMessageResponseBody(name='body'),
}

async function describeMessageWithOptions(request: DescribeMessageRequest, runtime: Util.RuntimeOptions): DescribeMessageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeMessage', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeMessage(request: DescribeMessageRequest): DescribeMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMessageWithOptions(request, runtime);
}

model UpdateProjectRequest {
  projectId?: string(name='ProjectId'),
  name?: string(name='Name'),
  description?: string(name='Description'),
}

model UpdateProjectResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateProjectResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProjectResponseBody(name='body'),
}

async function updateProjectWithOptions(request: UpdateProjectRequest, runtime: Util.RuntimeOptions): UpdateProjectResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateProject', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateProject(request: UpdateProjectRequest): UpdateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProjectWithOptions(request, runtime);
}

model UpdateAppBlackWhiteVersionsRequest {
  whiteAppVersions?: string(name='WhiteAppVersions'),
  projectId?: string(name='ProjectId'),
  versionId?: string(name='VersionId'),
  blackAppVersions?: string(name='BlackAppVersions'),
}

model UpdateAppBlackWhiteVersionsResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateAppBlackWhiteVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAppBlackWhiteVersionsResponseBody(name='body'),
}

async function updateAppBlackWhiteVersionsWithOptions(request: UpdateAppBlackWhiteVersionsRequest, runtime: Util.RuntimeOptions): UpdateAppBlackWhiteVersionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateAppBlackWhiteVersions', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateAppBlackWhiteVersions(request: UpdateAppBlackWhiteVersionsRequest): UpdateAppBlackWhiteVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAppBlackWhiteVersionsWithOptions(request, runtime);
}

model GetDeviceAppUpdateFunnelEventsRequest {
  packageName?: string(name='PackageName'),
  projectId?: string(name='ProjectId'),
  targetVersionCode?: string(name='TargetVersionCode'),
  idType?: string(name='IdType'),
  originalId?: string(name='OriginalId'),
}

model GetDeviceAppUpdateFunnelEventsResponseBody = {
  requestId?: string(name='RequestId'),
  eventList?: [ 
    {
      packageName?: string(name='PackageName'),
      deviceId?: string(name='DeviceId'),
      targetVersionCode?: string(name='TargetVersionCode'),
      event?: string(name='Event'),
      reportTimestamp?: long(name='ReportTimestamp'),
      reportTime?: string(name='ReportTime'),
      tenantId?: string(name='TenantId'),
    }
  ](name='EventList'),
}

model GetDeviceAppUpdateFunnelEventsResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceAppUpdateFunnelEventsResponseBody(name='body'),
}

async function getDeviceAppUpdateFunnelEventsWithOptions(request: GetDeviceAppUpdateFunnelEventsRequest, runtime: Util.RuntimeOptions): GetDeviceAppUpdateFunnelEventsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDeviceAppUpdateFunnelEvents', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDeviceAppUpdateFunnelEvents(request: GetDeviceAppUpdateFunnelEventsRequest): GetDeviceAppUpdateFunnelEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceAppUpdateFunnelEventsWithOptions(request, runtime);
}

model GetNamespaceStatisticsDataRequest {
  projectId?: string(name='ProjectId'),
  namespace?: string(name='Namespace'),
  dimensionType?: string(name='DimensionType'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model GetNamespaceStatisticsDataResponseBody = {
  requestId?: string(name='RequestId'),
  statistics?: {
    categories?: [ long ](name='Categories'),
    series?: [ 
      {
        data?: [ long ](name='Data'),
        name?: string(name='Name'),
      }
    ](name='Series'),
  }(name='Statistics'),
}

model GetNamespaceStatisticsDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetNamespaceStatisticsDataResponseBody(name='body'),
}

async function getNamespaceStatisticsDataWithOptions(request: GetNamespaceStatisticsDataRequest, runtime: Util.RuntimeOptions): GetNamespaceStatisticsDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetNamespaceStatisticsData', '2018-05-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getNamespaceStatisticsData(request: GetNamespaceStatisticsDataRequest): GetNamespaceStatisticsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNamespaceStatisticsDataWithOptions(request, runtime);
}

