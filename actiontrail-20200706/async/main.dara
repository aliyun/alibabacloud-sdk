/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Actiontrail';
  @version = '2020-07-06';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'actiontrail.ap-northeast-1.aliyuncs.com',
    cn-beijing-finance-1 = 'actiontrail.aliyuncs.com',
    cn-beijing-finance-pop = 'actiontrail.aliyuncs.com',
    cn-beijing-gov-1 = 'actiontrail.aliyuncs.com',
    cn-beijing-nu16-b01 = 'actiontrail.aliyuncs.com',
    cn-edge-1 = 'actiontrail.aliyuncs.com',
    cn-fujian = 'actiontrail.aliyuncs.com',
    cn-haidian-cm12-c01 = 'actiontrail.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'actiontrail.aliyuncs.com',
    cn-hangzhou-finance = 'actiontrail.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'actiontrail.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'actiontrail.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'actiontrail.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'actiontrail.aliyuncs.com',
    cn-hangzhou-test-306 = 'actiontrail.aliyuncs.com',
    cn-hongkong-finance-pop = 'actiontrail.aliyuncs.com',
    cn-qingdao-nebula = 'actiontrail.aliyuncs.com',
    cn-shanghai-et15-b01 = 'actiontrail.aliyuncs.com',
    cn-shanghai-et2-b01 = 'actiontrail.aliyuncs.com',
    cn-shanghai-inner = 'actiontrail.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'actiontrail.aliyuncs.com',
    cn-shenzhen-finance-1 = 'actiontrail.aliyuncs.com',
    cn-shenzhen-inner = 'actiontrail.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'actiontrail.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'actiontrail.aliyuncs.com',
    cn-wuhan = 'actiontrail.aliyuncs.com',
    cn-yushanfang = 'actiontrail.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'actiontrail.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'actiontrail.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'actiontrail.aliyuncs.com',
    eu-west-1-oxs = 'actiontrail.ap-northeast-1.aliyuncs.com',
    rus-west-1-pop = 'actiontrail.ap-northeast-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CreateDeliveryHistoryJobRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  trailName: string(name='TrailName', position='Query'),
}

model CreateDeliveryHistoryJobResponseBody = {
  jobId?: int32(name='JobId'),
  requestId?: string(name='RequestId'),
}

model CreateDeliveryHistoryJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeliveryHistoryJobResponseBody(name='body'),
}

async function createDeliveryHistoryJob(request: CreateDeliveryHistoryJobRequest): CreateDeliveryHistoryJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDeliveryHistoryJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateTrailRequest {
  eventRW?: string(name='EventRW', position='Query'),
  isOrganizationTrail?: boolean(name='IsOrganizationTrail', position='Query'),
  name: string(name='Name', position='Query'),
  ossBucketName?: string(name='OssBucketName', position='Query'),
  ossKeyPrefix?: string(name='OssKeyPrefix', position='Query'),
  ossWriteRoleArn?: string(name='OssWriteRoleArn', position='Query'),
  slsProjectArn?: string(name='SlsProjectArn', position='Query'),
  slsWriteRoleArn?: string(name='SlsWriteRoleArn', position='Query'),
  trailRegion?: string(name='TrailRegion', position='Query'),
}

model CreateTrailResponseBody = {
  eventRW?: string(name='EventRW'),
  homeRegion?: string(name='HomeRegion'),
  name?: string(name='Name'),
  ossBucketName?: string(name='OssBucketName'),
  ossKeyPrefix?: string(name='OssKeyPrefix'),
  ossWriteRoleArn?: string(name='OssWriteRoleArn'),
  requestId?: string(name='RequestId'),
  slsProjectArn?: string(name='SlsProjectArn'),
  slsWriteRoleArn?: string(name='SlsWriteRoleArn'),
  trailRegion?: string(name='TrailRegion'),
}

model CreateTrailResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTrailResponseBody(name='body'),
}

async function createTrail(request: CreateTrailRequest): CreateTrailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTrail', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDeliveryHistoryJobRequest {
  jobId: int32(name='JobId', minimum=0, maximum=2147483647, position='Query'),
}

model DeleteDeliveryHistoryJobResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDeliveryHistoryJobResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeliveryHistoryJobResponseBody(name='body'),
}

async function deleteDeliveryHistoryJob(request: DeleteDeliveryHistoryJobRequest): DeleteDeliveryHistoryJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDeliveryHistoryJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTrailRequest {
  name: string(name='Name', position='Query'),
}

model DeleteTrailResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTrailResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTrailResponseBody(name='body'),
}

async function deleteTrail(request: DeleteTrailRequest): DeleteTrailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTrail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName', description='地域名称'),
      regionEndpoint?: string(name='RegionEndpoint', description='地域链接地址'),
      regionId?: string(name='RegionId', description='地域ID'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTrailsRequest {
  includeOrganizationTrail?: boolean(name='IncludeOrganizationTrail', position='Query'),
  includeShadowTrails?: boolean(name='IncludeShadowTrails', position='Query'),
  nameList?: string(name='NameList', position='Query'),
}

model DescribeTrailsResponseBody = {
  requestId?: string(name='RequestId'),
  trailList?: [ 
    {
      createTime?: string(name='CreateTime'),
      eventRW?: string(name='EventRW'),
      homeRegion?: string(name='HomeRegion'),
      isOrganizationTrail?: boolean(name='IsOrganizationTrail'),
      name?: string(name='Name'),
      organizationId?: string(name='OrganizationId'),
      ossBucketLocation?: string(name='OssBucketLocation'),
      ossBucketName?: string(name='OssBucketName'),
      ossKeyPrefix?: string(name='OssKeyPrefix'),
      ossWriteRoleArn?: string(name='OssWriteRoleArn'),
      region?: string(name='Region'),
      slsProjectArn?: string(name='SlsProjectArn'),
      slsWriteRoleArn?: string(name='SlsWriteRoleArn'),
      startLoggingTime?: string(name='StartLoggingTime'),
      status?: string(name='Status'),
      stopLoggingTime?: string(name='StopLoggingTime'),
      trailArn?: string(name='TrailArn'),
      trailRegion?: string(name='TrailRegion'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='TrailList'),
}

model DescribeTrailsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTrailsResponseBody(name='body'),
}

async function describeTrails(request: DescribeTrailsRequest): DescribeTrailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTrails', 'POST', '/', 'json', false, 'json', request);
}

model GetAccessKeyLastUsedEventsRequest {
  accessKey: string(name='AccessKey', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  pageSize?: string(name='PageSize', position='Query'),
  serviceName: string(name='ServiceName', position='Query'),
}

model GetAccessKeyLastUsedEventsResponseBody = {
  events: [ 
    {
      detail?: string(name='Detail'),
      eventName?: string(name='EventName'),
      source?: string(name='Source'),
      usedTimestamp?: long(name='UsedTimestamp'),
    }
  ](name='Events'),
  nextToken?: string(name='NextToken'),
  requestId: string(name='RequestId'),
}

model GetAccessKeyLastUsedEventsResponse = {
  headers: map[string]string(name='headers'),
  body: GetAccessKeyLastUsedEventsResponseBody(name='body'),
}

async function getAccessKeyLastUsedEvents(request: GetAccessKeyLastUsedEventsRequest): GetAccessKeyLastUsedEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccessKeyLastUsedEvents', 'POST', '/', 'json', false, 'json', request);
}

model GetAccessKeyLastUsedInfoRequest {
  accessKey: string(name='AccessKey', position='Query'),
}

model GetAccessKeyLastUsedInfoResponseBody = {
  accessKeyId?: string(name='AccessKeyId'),
  accountId?: string(name='AccountId'),
  accountType?: string(name='AccountType'),
  detail?: string(name='Detail'),
  ownerId?: string(name='OwnerId'),
  requestId: string(name='RequestId'),
  serviceName: string(name='ServiceName'),
  serviceNameCn?: string(name='ServiceNameCn'),
  serviceNameEn?: string(name='ServiceNameEn'),
  source?: string(name='Source'),
  usedTimestamp: long(name='UsedTimestamp'),
  userName?: string(name='UserName'),
}

model GetAccessKeyLastUsedInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetAccessKeyLastUsedInfoResponseBody(name='body'),
}

async function getAccessKeyLastUsedInfo(request: GetAccessKeyLastUsedInfoRequest): GetAccessKeyLastUsedInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccessKeyLastUsedInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetAccessKeyLastUsedIpsRequest {
  accessKey: string(name='AccessKey', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  pageSize?: string(name='PageSize', position='Query'),
  serviceName: string(name='ServiceName', position='Query'),
}

model GetAccessKeyLastUsedIpsResponseBody = {
  ips: [ 
    {
      detail?: string(name='Detail'),
      ip?: string(name='Ip'),
      source?: string(name='Source'),
      usedTimestamp?: long(name='UsedTimestamp'),
    }
  ](name='Ips'),
  nextToken?: string(name='NextToken'),
  requestId: string(name='RequestId'),
}

model GetAccessKeyLastUsedIpsResponse = {
  headers: map[string]string(name='headers'),
  body: GetAccessKeyLastUsedIpsResponseBody(name='body'),
}

async function getAccessKeyLastUsedIps(request: GetAccessKeyLastUsedIpsRequest): GetAccessKeyLastUsedIpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccessKeyLastUsedIps', 'POST', '/', 'json', false, 'json', request);
}

model GetAccessKeyLastUsedProductsRequest {
  accessKey: string(name='AccessKey', position='Query'),
}

model GetAccessKeyLastUsedProductsResponseBody = {
  products: [ 
    {
      detail?: string(name='Detail'),
      serviceName?: string(name='ServiceName'),
      serviceNameCn?: string(name='ServiceNameCn'),
      serviceNameEn?: string(name='ServiceNameEn'),
      source?: string(name='Source'),
      usedTimestamp?: long(name='UsedTimestamp'),
    }
  ](name='Products'),
  requestId: string(name='RequestId'),
}

model GetAccessKeyLastUsedProductsResponse = {
  headers: map[string]string(name='headers'),
  body: GetAccessKeyLastUsedProductsResponseBody(name='body'),
}

async function getAccessKeyLastUsedProducts(request: GetAccessKeyLastUsedProductsRequest): GetAccessKeyLastUsedProductsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccessKeyLastUsedProducts', 'POST', '/', 'json', false, 'json', request);
}

model GetAccessKeyLastUsedResourcesRequest {
  accessKey: string(name='AccessKey', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  pageSize?: string(name='PageSize', position='Query'),
  serviceName: string(name='ServiceName', position='Query'),
}

model GetAccessKeyLastUsedResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId: string(name='RequestId'),
  resources: [ 
    {
      detail?: string(name='Detail'),
      resourceName?: string(name='ResourceName'),
      resourceType?: string(name='ResourceType'),
      source?: string(name='Source'),
      usedTimestamp?: long(name='UsedTimestamp'),
    }
  ](name='Resources'),
}

model GetAccessKeyLastUsedResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: GetAccessKeyLastUsedResourcesResponseBody(name='body'),
}

async function getAccessKeyLastUsedResources(request: GetAccessKeyLastUsedResourcesRequest): GetAccessKeyLastUsedResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccessKeyLastUsedResources', 'POST', '/', 'json', false, 'json', request);
}

model GetDeliveryHistoryJobRequest {
  jobId: long(name='JobId', position='Query'),
}

model GetDeliveryHistoryJobResponseBody = {
  createdTime?: string(name='CreatedTime'),
  endTime?: string(name='EndTime'),
  homeRegion?: string(name='HomeRegion'),
  jobId?: long(name='JobId'),
  jobStatus?: int32(name='JobStatus'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  status?: [ 
    {
      region?: string(name='Region'),
      status?: int32(name='Status'),
    }
  ](name='Status'),
  trailName?: string(name='TrailName'),
  updatedTime?: string(name='UpdatedTime'),
}

model GetDeliveryHistoryJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeliveryHistoryJobResponseBody(name='body'),
}

async function getDeliveryHistoryJob(request: GetDeliveryHistoryJobRequest): GetDeliveryHistoryJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeliveryHistoryJob', 'POST', '/', 'json', false, 'json', request);
}

model GetTrailStatusRequest {
  isOrganizationTrail?: boolean(name='IsOrganizationTrail', position='Query'),
  name: string(name='Name', position='Query'),
}

model GetTrailStatusResponseBody = {
  isLogging?: boolean(name='IsLogging'),
  latestDeliveryError?: string(name='LatestDeliveryError'),
  latestDeliveryLogServiceError?: string(name='LatestDeliveryLogServiceError'),
  latestDeliveryLogServiceTime?: string(name='LatestDeliveryLogServiceTime'),
  latestDeliveryTime?: string(name='LatestDeliveryTime'),
  ossBucketStatus?: boolean(name='OssBucketStatus'),
  requestId?: string(name='RequestId'),
  slsLogStoreStatus?: boolean(name='SlsLogStoreStatus'),
  startLoggingTime?: string(name='StartLoggingTime'),
  stopLoggingTime?: string(name='StopLoggingTime'),
}

model GetTrailStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetTrailStatusResponseBody(name='body'),
}

async function getTrailStatus(request: GetTrailStatusRequest): GetTrailStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTrailStatus', 'POST', '/', 'json', false, 'json', request);
}

model ListDeliveryHistoryJobsRequest {
  pageNumber?: int32(name='PageNumber', minimum=0, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', minimum=0, maximum=100, position='Query'),
}

model ListDeliveryHistoryJobsResponseBody = {
  deliveryHistoryJobs?: [ 
    {
      createdTime?: string(name='CreatedTime'),
      endTime?: string(name='EndTime'),
      homeRegion?: string(name='HomeRegion'),
      jobId?: long(name='JobId'),
      jobStatus?: int32(name='JobStatus'),
      startTime?: string(name='StartTime'),
      trailName?: string(name='TrailName'),
      updatedTime?: string(name='UpdatedTime'),
    }
  ](name='DeliveryHistoryJobs'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListDeliveryHistoryJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeliveryHistoryJobsResponseBody(name='body'),
}

async function listDeliveryHistoryJobs(request: ListDeliveryHistoryJobsRequest): ListDeliveryHistoryJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDeliveryHistoryJobs', 'POST', '/', 'json', false, 'json', request);
}

model LookupEventsRequest {
  direction?: string(name='Direction', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  lookupAttribute?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='LookupAttribute', position='Query'),
  maxResults?: string(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model LookupEventsResponseBody = {
  endTime?: string(name='EndTime'),
  events?: [  map[string]any ](name='Events'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model LookupEventsResponse = {
  headers: map[string]string(name='headers'),
  body: LookupEventsResponseBody(name='body'),
}

async function lookupEvents(request: LookupEventsRequest): LookupEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LookupEvents', 'POST', '/', 'json', false, 'json', request);
}

model StartLoggingRequest {
  name: string(name='Name', position='Query'),
}

model StartLoggingResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartLoggingResponse = {
  headers: map[string]string(name='headers'),
  body: StartLoggingResponseBody(name='body'),
}

async function startLogging(request: StartLoggingRequest): StartLoggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartLogging', 'POST', '/', 'json', false, 'json', request);
}

model StopLoggingRequest {
  name: string(name='Name', position='Query'),
}

model StopLoggingResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopLoggingResponse = {
  headers: map[string]string(name='headers'),
  body: StopLoggingResponseBody(name='body'),
}

async function stopLogging(request: StopLoggingRequest): StopLoggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopLogging', 'GET', '/', 'json', false, 'json', request);
}

model UpdateTrailRequest {
  eventRW?: string(name='EventRW', position='Query'),
  name: string(name='Name', position='Query'),
  ossBucketName?: string(name='OssBucketName', position='Query'),
  ossKeyPrefix?: string(name='OssKeyPrefix', position='Query'),
  ossWriteRoleArn?: string(name='OssWriteRoleArn', position='Query'),
  slsProjectArn?: string(name='SlsProjectArn', position='Query'),
  slsWriteRoleArn?: string(name='SlsWriteRoleArn', position='Query'),
  trailRegion?: string(name='TrailRegion', position='Query'),
}

model UpdateTrailResponseBody = {
  eventRW?: string(name='EventRW'),
  homeRegion?: string(name='HomeRegion'),
  name?: string(name='Name'),
  ossBucketName?: string(name='OssBucketName'),
  ossKeyPrefix?: string(name='OssKeyPrefix'),
  ossWriteRoleArn?: string(name='OssWriteRoleArn'),
  requestId?: string(name='RequestId'),
  slsProjectArn?: string(name='SlsProjectArn'),
  slsWriteRoleArn?: string(name='SlsWriteRoleArn'),
  trailRegion?: string(name='TrailRegion'),
}

model UpdateTrailResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTrailResponseBody(name='body'),
}

async function updateTrail(request: UpdateTrailRequest): UpdateTrailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTrail', 'POST', '/', 'json', false, 'json', request);
}

