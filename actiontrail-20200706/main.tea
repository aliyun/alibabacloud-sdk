/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    ap-northeast-2-pop = 'actiontrail.ap-northeast-1.aliyuncs.com',
    cn-beijing-finance-1 = 'actiontrail.aliyuncs.com',
    cn-beijing-finance-pop = 'actiontrail.aliyuncs.com',
    cn-beijing-gov-1 = 'actiontrail.aliyuncs.com',
    cn-beijing-nu16-b01 = 'actiontrail.aliyuncs.com',
    cn-edge-1 = 'actiontrail.aliyuncs.com',
    cn-fujian = 'actiontrail.aliyuncs.com',
    cn-haidian-cm12-c01 = 'actiontrail.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'actiontrail.aliyuncs.com',
    cn-hangzhou-finance = 'actiontrail.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'actiontrail.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'actiontrail.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'actiontrail.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'actiontrail.aliyuncs.com',
    cn-hangzhou-test-306 = 'actiontrail.aliyuncs.com',
    cn-hongkong-finance-pop = 'actiontrail.aliyuncs.com',
    cn-qingdao-nebula = 'actiontrail.aliyuncs.com',
    cn-shanghai-et15-b01 = 'actiontrail.aliyuncs.com',
    cn-shanghai-et2-b01 = 'actiontrail.aliyuncs.com',
    cn-shanghai-inner = 'actiontrail.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'actiontrail.aliyuncs.com',
    cn-shenzhen-finance-1 = 'actiontrail.aliyuncs.com',
    cn-shenzhen-inner = 'actiontrail.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'actiontrail.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'actiontrail.aliyuncs.com',
    cn-wuhan = 'actiontrail.aliyuncs.com',
    cn-yushanfang = 'actiontrail.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'actiontrail.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'actiontrail.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'actiontrail.aliyuncs.com',
    eu-west-1-oxs = 'actiontrail.ap-northeast-1.aliyuncs.com',
    rus-west-1-pop = 'actiontrail.ap-northeast-1.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('actiontrail', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateDeliveryHistoryJobRequest {
  clientToken?: string(name='ClientToken'),
  trailName?: string(name='TrailName'),
}

model CreateDeliveryHistoryJobResponseBody = {
  jobId?: int32(name='JobId'),
  requestId?: string(name='RequestId'),
}

model CreateDeliveryHistoryJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeliveryHistoryJobResponseBody(name='body'),
}

async function createDeliveryHistoryJobWithOptions(request: CreateDeliveryHistoryJobRequest, runtime: Util.RuntimeOptions): CreateDeliveryHistoryJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDeliveryHistoryJob', '2020-07-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDeliveryHistoryJob(request: CreateDeliveryHistoryJobRequest): CreateDeliveryHistoryJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeliveryHistoryJobWithOptions(request, runtime);
}

model CreateTrailRequest {
  eventRW?: string(name='EventRW'),
  isOrganizationTrail?: boolean(name='IsOrganizationTrail'),
  name?: string(name='Name'),
  ossBucketName?: string(name='OssBucketName'),
  ossKeyPrefix?: string(name='OssKeyPrefix'),
  ossWriteRoleArn?: string(name='OssWriteRoleArn'),
  slsProjectArn?: string(name='SlsProjectArn'),
  slsWriteRoleArn?: string(name='SlsWriteRoleArn'),
  trailRegion?: string(name='TrailRegion'),
}

model CreateTrailResponseBody = {
  eventRW?: string(name='EventRW'),
  homeRegion?: string(name='HomeRegion'),
  name?: string(name='Name'),
  ossBucketName?: string(name='OssBucketName'),
  ossKeyPrefix?: string(name='OssKeyPrefix'),
  ossWriteRoleArn?: string(name='OssWriteRoleArn'),
  requestId?: string(name='RequestId'),
  slsProjectArn?: string(name='SlsProjectArn'),
  slsWriteRoleArn?: string(name='SlsWriteRoleArn'),
  trailRegion?: string(name='TrailRegion'),
}

model CreateTrailResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTrailResponseBody(name='body'),
}

async function createTrailWithOptions(request: CreateTrailRequest, runtime: Util.RuntimeOptions): CreateTrailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateTrail', '2020-07-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createTrail(request: CreateTrailRequest): CreateTrailResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTrailWithOptions(request, runtime);
}

model DeleteDeliveryHistoryJobRequest {
  jobId?: int32(name='JobId'),
}

model DeleteDeliveryHistoryJobResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDeliveryHistoryJobResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeliveryHistoryJobResponseBody(name='body'),
}

async function deleteDeliveryHistoryJobWithOptions(request: DeleteDeliveryHistoryJobRequest, runtime: Util.RuntimeOptions): DeleteDeliveryHistoryJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDeliveryHistoryJob', '2020-07-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDeliveryHistoryJob(request: DeleteDeliveryHistoryJobRequest): DeleteDeliveryHistoryJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeliveryHistoryJobWithOptions(request, runtime);
}

model DeleteTrailRequest {
  name?: string(name='Name'),
}

model DeleteTrailResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTrailResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTrailResponseBody(name='body'),
}

async function deleteTrailWithOptions(request: DeleteTrailRequest, runtime: Util.RuntimeOptions): DeleteTrailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteTrail', '2020-07-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteTrail(request: DeleteTrailRequest): DeleteTrailResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTrailWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName', description='地域名称'),
      regionEndpoint?: string(name='RegionEndpoint', description='地域链接地址'),
      regionId?: string(name='RegionId', description='地域ID'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegions', '2020-07-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeTrailsRequest {
  includeOrganizationTrail?: boolean(name='IncludeOrganizationTrail'),
  includeShadowTrails?: boolean(name='IncludeShadowTrails'),
  nameList?: string(name='NameList'),
}

model DescribeTrailsResponseBody = {
  requestId?: string(name='RequestId'),
  trailList?: [ 
    {
      createTime?: string(name='CreateTime'),
      eventRW?: string(name='EventRW'),
      homeRegion?: string(name='HomeRegion'),
      isOrganizationTrail?: boolean(name='IsOrganizationTrail'),
      name?: string(name='Name'),
      organizationId?: string(name='OrganizationId'),
      ossBucketLocation?: string(name='OssBucketLocation'),
      ossBucketName?: string(name='OssBucketName'),
      ossKeyPrefix?: string(name='OssKeyPrefix'),
      ossWriteRoleArn?: string(name='OssWriteRoleArn'),
      region?: string(name='Region'),
      slsProjectArn?: string(name='SlsProjectArn'),
      slsWriteRoleArn?: string(name='SlsWriteRoleArn'),
      startLoggingTime?: string(name='StartLoggingTime'),
      status?: string(name='Status'),
      stopLoggingTime?: string(name='StopLoggingTime'),
      trailArn?: string(name='TrailArn'),
      trailRegion?: string(name='TrailRegion'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='TrailList'),
}

model DescribeTrailsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTrailsResponseBody(name='body'),
}

async function describeTrailsWithOptions(request: DescribeTrailsRequest, runtime: Util.RuntimeOptions): DescribeTrailsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTrails', '2020-07-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTrails(request: DescribeTrailsRequest): DescribeTrailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTrailsWithOptions(request, runtime);
}

model GetDeliveryHistoryJobRequest {
  jobId?: long(name='JobId'),
}

model GetDeliveryHistoryJobResponseBody = {
  createdTime?: string(name='CreatedTime'),
  endTime?: string(name='EndTime'),
  jobId?: long(name='JobId'),
  jobStatus?: int32(name='JobStatus'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  status?: [ 
    {
      region?: string(name='Region'),
      status?: int32(name='Status'),
    }
  ](name='Status'),
  trailName?: string(name='TrailName'),
  updatedTime?: string(name='UpdatedTime'),
}

model GetDeliveryHistoryJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeliveryHistoryJobResponseBody(name='body'),
}

async function getDeliveryHistoryJobWithOptions(request: GetDeliveryHistoryJobRequest, runtime: Util.RuntimeOptions): GetDeliveryHistoryJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDeliveryHistoryJob', '2020-07-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDeliveryHistoryJob(request: GetDeliveryHistoryJobRequest): GetDeliveryHistoryJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeliveryHistoryJobWithOptions(request, runtime);
}

model GetTrailStatusRequest {
  isOrganizationTrail?: boolean(name='IsOrganizationTrail'),
  name?: string(name='Name'),
}

model GetTrailStatusResponseBody = {
  isLogging?: boolean(name='IsLogging'),
  latestDeliveryError?: string(name='LatestDeliveryError'),
  latestDeliveryLogServiceError?: string(name='LatestDeliveryLogServiceError'),
  latestDeliveryLogServiceTime?: string(name='LatestDeliveryLogServiceTime'),
  latestDeliveryTime?: string(name='LatestDeliveryTime'),
  ossBucketStatus?: boolean(name='OssBucketStatus'),
  requestId?: string(name='RequestId'),
  slsLogStoreStatus?: boolean(name='SlsLogStoreStatus'),
  startLoggingTime?: string(name='StartLoggingTime'),
  stopLoggingTime?: string(name='StopLoggingTime'),
}

model GetTrailStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetTrailStatusResponseBody(name='body'),
}

async function getTrailStatusWithOptions(request: GetTrailStatusRequest, runtime: Util.RuntimeOptions): GetTrailStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTrailStatus', '2020-07-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTrailStatus(request: GetTrailStatusRequest): GetTrailStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTrailStatusWithOptions(request, runtime);
}

model ListDeliveryHistoryJobsRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListDeliveryHistoryJobsResponseBody = {
  deliveryHistoryJobs?: [ 
    {
      createdTime?: string(name='CreatedTime'),
      endTime?: string(name='EndTime'),
      homeRegion?: string(name='HomeRegion'),
      jobId?: long(name='JobId'),
      jobStatus?: int32(name='JobStatus'),
      startTime?: string(name='StartTime'),
      trailName?: string(name='TrailName'),
      updatedTime?: string(name='UpdatedTime'),
    }
  ](name='DeliveryHistoryJobs'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListDeliveryHistoryJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeliveryHistoryJobsResponseBody(name='body'),
}

async function listDeliveryHistoryJobsWithOptions(request: ListDeliveryHistoryJobsRequest, runtime: Util.RuntimeOptions): ListDeliveryHistoryJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListDeliveryHistoryJobs', '2020-07-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listDeliveryHistoryJobs(request: ListDeliveryHistoryJobsRequest): ListDeliveryHistoryJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeliveryHistoryJobsWithOptions(request, runtime);
}

model LookupEventsRequest {
  direction?: string(name='Direction'),
  endTime?: string(name='EndTime'),
  lookupAttribute?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='LookupAttribute'),
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  startTime?: string(name='StartTime'),
}

model LookupEventsResponseBody = {
  endTime?: string(name='EndTime'),
  events?: [  map[string]any ](name='Events'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model LookupEventsResponse = {
  headers: map[string]string(name='headers'),
  body: LookupEventsResponseBody(name='body'),
}

async function lookupEventsWithOptions(request: LookupEventsRequest, runtime: Util.RuntimeOptions): LookupEventsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('LookupEvents', '2020-07-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function lookupEvents(request: LookupEventsRequest): LookupEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return lookupEventsWithOptions(request, runtime);
}

model StartLoggingRequest {
  name?: string(name='Name'),
}

model StartLoggingResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartLoggingResponse = {
  headers: map[string]string(name='headers'),
  body: StartLoggingResponseBody(name='body'),
}

async function startLoggingWithOptions(request: StartLoggingRequest, runtime: Util.RuntimeOptions): StartLoggingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartLogging', '2020-07-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startLogging(request: StartLoggingRequest): StartLoggingResponse {
  var runtime = new Util.RuntimeOptions{};
  return startLoggingWithOptions(request, runtime);
}

model StopLoggingRequest {
  name?: string(name='Name'),
}

model StopLoggingResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopLoggingResponse = {
  headers: map[string]string(name='headers'),
  body: StopLoggingResponseBody(name='body'),
}

async function stopLoggingWithOptions(request: StopLoggingRequest, runtime: Util.RuntimeOptions): StopLoggingResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('StopLogging', '2020-07-06', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function stopLogging(request: StopLoggingRequest): StopLoggingResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopLoggingWithOptions(request, runtime);
}

model UpdateTrailRequest {
  eventRW?: string(name='EventRW'),
  name?: string(name='Name'),
  ossBucketName?: string(name='OssBucketName'),
  ossKeyPrefix?: string(name='OssKeyPrefix'),
  ossWriteRoleArn?: string(name='OssWriteRoleArn'),
  slsProjectArn?: string(name='SlsProjectArn'),
  slsWriteRoleArn?: string(name='SlsWriteRoleArn'),
  trailRegion?: string(name='TrailRegion'),
}

model UpdateTrailResponseBody = {
  eventRW?: string(name='EventRW'),
  homeRegion?: string(name='HomeRegion'),
  name?: string(name='Name'),
  ossBucketName?: string(name='OssBucketName'),
  ossKeyPrefix?: string(name='OssKeyPrefix'),
  ossWriteRoleArn?: string(name='OssWriteRoleArn'),
  requestId?: string(name='RequestId'),
  slsProjectArn?: string(name='SlsProjectArn'),
  slsWriteRoleArn?: string(name='SlsWriteRoleArn'),
  trailRegion?: string(name='TrailRegion'),
}

model UpdateTrailResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTrailResponseBody(name='body'),
}

async function updateTrailWithOptions(request: UpdateTrailRequest, runtime: Util.RuntimeOptions): UpdateTrailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateTrail', '2020-07-06', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateTrail(request: UpdateTrailRequest): UpdateTrailResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTrailWithOptions(request, runtime);
}

