/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'actiontrail.ap-northeast-1.aliyuncs.com',
    cn-beijing-finance-1 = 'actiontrail.aliyuncs.com',
    cn-beijing-finance-pop = 'actiontrail.aliyuncs.com',
    cn-beijing-gov-1 = 'actiontrail.aliyuncs.com',
    cn-beijing-nu16-b01 = 'actiontrail.aliyuncs.com',
    cn-edge-1 = 'actiontrail.aliyuncs.com',
    cn-fujian = 'actiontrail.aliyuncs.com',
    cn-haidian-cm12-c01 = 'actiontrail.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'actiontrail.aliyuncs.com',
    cn-hangzhou-finance = 'actiontrail.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'actiontrail.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'actiontrail.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'actiontrail.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'actiontrail.aliyuncs.com',
    cn-hangzhou-test-306 = 'actiontrail.aliyuncs.com',
    cn-hongkong-finance-pop = 'actiontrail.aliyuncs.com',
    cn-qingdao-nebula = 'actiontrail.aliyuncs.com',
    cn-shanghai-et15-b01 = 'actiontrail.aliyuncs.com',
    cn-shanghai-et2-b01 = 'actiontrail.aliyuncs.com',
    cn-shanghai-inner = 'actiontrail.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'actiontrail.aliyuncs.com',
    cn-shenzhen-finance-1 = 'actiontrail.aliyuncs.com',
    cn-shenzhen-inner = 'actiontrail.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'actiontrail.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'actiontrail.aliyuncs.com',
    cn-wuhan = 'actiontrail.aliyuncs.com',
    cn-yushanfang = 'actiontrail.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'actiontrail.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'actiontrail.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'actiontrail.aliyuncs.com',
    eu-west-1-oxs = 'actiontrail.ap-northeast-1.aliyuncs.com',
    rus-west-1-pop = 'actiontrail.ap-northeast-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('actiontrail', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateDeliveryHistoryJobRequest {
  clientToken?: string(name='ClientToken'),
  trailName?: string(name='TrailName'),
}

model CreateDeliveryHistoryJobResponseBody = {
  jobId?: int32(name='JobId'),
  requestId?: string(name='RequestId'),
}

model CreateDeliveryHistoryJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDeliveryHistoryJobResponseBody(name='body'),
}

async function createDeliveryHistoryJobWithOptions(request: CreateDeliveryHistoryJobRequest, runtime: Util.RuntimeOptions): CreateDeliveryHistoryJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.trailName)) {
    query['TrailName'] = request.trailName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDeliveryHistoryJob',
    version = '2020-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDeliveryHistoryJob(request: CreateDeliveryHistoryJobRequest): CreateDeliveryHistoryJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeliveryHistoryJobWithOptions(request, runtime);
}

model CreateTrailRequest {
  eventRW?: string(name='EventRW'),
  isOrganizationTrail?: boolean(name='IsOrganizationTrail'),
  name?: string(name='Name'),
  ossBucketName?: string(name='OssBucketName'),
  ossKeyPrefix?: string(name='OssKeyPrefix'),
  ossWriteRoleArn?: string(name='OssWriteRoleArn'),
  slsProjectArn?: string(name='SlsProjectArn'),
  slsWriteRoleArn?: string(name='SlsWriteRoleArn'),
  trailRegion?: string(name='TrailRegion'),
}

model CreateTrailResponseBody = {
  eventRW?: string(name='EventRW'),
  homeRegion?: string(name='HomeRegion'),
  name?: string(name='Name'),
  ossBucketName?: string(name='OssBucketName'),
  ossKeyPrefix?: string(name='OssKeyPrefix'),
  ossWriteRoleArn?: string(name='OssWriteRoleArn'),
  requestId?: string(name='RequestId'),
  slsProjectArn?: string(name='SlsProjectArn'),
  slsWriteRoleArn?: string(name='SlsWriteRoleArn'),
  trailRegion?: string(name='TrailRegion'),
}

model CreateTrailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTrailResponseBody(name='body'),
}

async function createTrailWithOptions(request: CreateTrailRequest, runtime: Util.RuntimeOptions): CreateTrailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eventRW)) {
    query['EventRW'] = request.eventRW;
  }
  if (!Util.isUnset(request.isOrganizationTrail)) {
    query['IsOrganizationTrail'] = request.isOrganizationTrail;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ossBucketName)) {
    query['OssBucketName'] = request.ossBucketName;
  }
  if (!Util.isUnset(request.ossKeyPrefix)) {
    query['OssKeyPrefix'] = request.ossKeyPrefix;
  }
  if (!Util.isUnset(request.ossWriteRoleArn)) {
    query['OssWriteRoleArn'] = request.ossWriteRoleArn;
  }
  if (!Util.isUnset(request.slsProjectArn)) {
    query['SlsProjectArn'] = request.slsProjectArn;
  }
  if (!Util.isUnset(request.slsWriteRoleArn)) {
    query['SlsWriteRoleArn'] = request.slsWriteRoleArn;
  }
  if (!Util.isUnset(request.trailRegion)) {
    query['TrailRegion'] = request.trailRegion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTrail',
    version = '2020-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTrail(request: CreateTrailRequest): CreateTrailResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTrailWithOptions(request, runtime);
}

model DeleteDeliveryHistoryJobRequest {
  jobId?: int32(name='JobId'),
}

model DeleteDeliveryHistoryJobResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDeliveryHistoryJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDeliveryHistoryJobResponseBody(name='body'),
}

async function deleteDeliveryHistoryJobWithOptions(request: DeleteDeliveryHistoryJobRequest, runtime: Util.RuntimeOptions): DeleteDeliveryHistoryJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDeliveryHistoryJob',
    version = '2020-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDeliveryHistoryJob(request: DeleteDeliveryHistoryJobRequest): DeleteDeliveryHistoryJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeliveryHistoryJobWithOptions(request, runtime);
}

model DeleteTrailRequest {
  name?: string(name='Name'),
}

model DeleteTrailResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTrailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTrailResponseBody(name='body'),
}

async function deleteTrailWithOptions(request: DeleteTrailRequest, runtime: Util.RuntimeOptions): DeleteTrailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTrail',
    version = '2020-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTrail(request: DeleteTrailRequest): DeleteTrailResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTrailWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2020-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeTrailsRequest {
  includeOrganizationTrail?: boolean(name='IncludeOrganizationTrail'),
  includeShadowTrails?: boolean(name='IncludeShadowTrails'),
  nameList?: string(name='NameList'),
}

model DescribeTrailsResponseBody = {
  requestId?: string(name='RequestId'),
  trailList?: [ 
    {
      createTime?: string(name='CreateTime'),
      eventRW?: string(name='EventRW'),
      homeRegion?: string(name='HomeRegion'),
      isOrganizationTrail?: boolean(name='IsOrganizationTrail'),
      name?: string(name='Name'),
      organizationId?: string(name='OrganizationId'),
      ossBucketLocation?: string(name='OssBucketLocation'),
      ossBucketName?: string(name='OssBucketName'),
      ossKeyPrefix?: string(name='OssKeyPrefix'),
      ossWriteRoleArn?: string(name='OssWriteRoleArn'),
      region?: string(name='Region'),
      slsProjectArn?: string(name='SlsProjectArn'),
      slsWriteRoleArn?: string(name='SlsWriteRoleArn'),
      startLoggingTime?: string(name='StartLoggingTime'),
      status?: string(name='Status'),
      stopLoggingTime?: string(name='StopLoggingTime'),
      trailArn?: string(name='TrailArn'),
      trailRegion?: string(name='TrailRegion'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='TrailList'),
}

model DescribeTrailsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTrailsResponseBody(name='body'),
}

async function describeTrailsWithOptions(request: DescribeTrailsRequest, runtime: Util.RuntimeOptions): DescribeTrailsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.includeOrganizationTrail)) {
    query['IncludeOrganizationTrail'] = request.includeOrganizationTrail;
  }
  if (!Util.isUnset(request.includeShadowTrails)) {
    query['IncludeShadowTrails'] = request.includeShadowTrails;
  }
  if (!Util.isUnset(request.nameList)) {
    query['NameList'] = request.nameList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTrails',
    version = '2020-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTrails(request: DescribeTrailsRequest): DescribeTrailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTrailsWithOptions(request, runtime);
}

model GetAccessKeyLastUsedEventsRequest {
  accessKey?: string(name='AccessKey'),
  nextToken?: string(name='NextToken'),
  pageSize?: string(name='PageSize'),
  serviceName?: string(name='ServiceName'),
}

model GetAccessKeyLastUsedEventsResponseBody = {
  events?: [ 
    {
      detail?: string(name='Detail'),
      eventName?: string(name='EventName'),
      source?: string(name='Source'),
      usedTimestamp?: long(name='UsedTimestamp'),
    }
  ](name='Events'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model GetAccessKeyLastUsedEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAccessKeyLastUsedEventsResponseBody(name='body'),
}

async function getAccessKeyLastUsedEventsWithOptions(request: GetAccessKeyLastUsedEventsRequest, runtime: Util.RuntimeOptions): GetAccessKeyLastUsedEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessKey)) {
    query['AccessKey'] = request.accessKey;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAccessKeyLastUsedEvents',
    version = '2020-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAccessKeyLastUsedEvents(request: GetAccessKeyLastUsedEventsRequest): GetAccessKeyLastUsedEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAccessKeyLastUsedEventsWithOptions(request, runtime);
}

model GetAccessKeyLastUsedInfoRequest {
  accessKey?: string(name='AccessKey'),
}

model GetAccessKeyLastUsedInfoResponseBody = {
  accessKeyId?: string(name='AccessKeyId'),
  accountId?: string(name='AccountId'),
  accountType?: string(name='AccountType'),
  detail?: string(name='Detail'),
  ownerId?: string(name='OwnerId'),
  requestId?: string(name='RequestId'),
  serviceName?: string(name='ServiceName'),
  serviceNameCn?: string(name='ServiceNameCn'),
  serviceNameEn?: string(name='ServiceNameEn'),
  source?: string(name='Source'),
  usedTimestamp?: long(name='UsedTimestamp'),
  userName?: string(name='UserName'),
}

model GetAccessKeyLastUsedInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAccessKeyLastUsedInfoResponseBody(name='body'),
}

async function getAccessKeyLastUsedInfoWithOptions(request: GetAccessKeyLastUsedInfoRequest, runtime: Util.RuntimeOptions): GetAccessKeyLastUsedInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessKey)) {
    query['AccessKey'] = request.accessKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAccessKeyLastUsedInfo',
    version = '2020-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAccessKeyLastUsedInfo(request: GetAccessKeyLastUsedInfoRequest): GetAccessKeyLastUsedInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAccessKeyLastUsedInfoWithOptions(request, runtime);
}

model GetAccessKeyLastUsedIpsRequest {
  accessKey?: string(name='AccessKey'),
  nextToken?: string(name='NextToken'),
  pageSize?: string(name='PageSize'),
  serviceName?: string(name='ServiceName'),
}

model GetAccessKeyLastUsedIpsResponseBody = {
  ips?: [ 
    {
      detail?: string(name='Detail'),
      ip?: string(name='Ip'),
      source?: string(name='Source'),
      usedTimestamp?: long(name='UsedTimestamp'),
    }
  ](name='Ips'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model GetAccessKeyLastUsedIpsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAccessKeyLastUsedIpsResponseBody(name='body'),
}

async function getAccessKeyLastUsedIpsWithOptions(request: GetAccessKeyLastUsedIpsRequest, runtime: Util.RuntimeOptions): GetAccessKeyLastUsedIpsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessKey)) {
    query['AccessKey'] = request.accessKey;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAccessKeyLastUsedIps',
    version = '2020-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAccessKeyLastUsedIps(request: GetAccessKeyLastUsedIpsRequest): GetAccessKeyLastUsedIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAccessKeyLastUsedIpsWithOptions(request, runtime);
}

model GetAccessKeyLastUsedProductsRequest {
  accessKey?: string(name='AccessKey'),
}

model GetAccessKeyLastUsedProductsResponseBody = {
  products?: [ 
    {
      detail?: string(name='Detail'),
      serviceName?: string(name='ServiceName'),
      serviceNameCn?: string(name='ServiceNameCn'),
      serviceNameEn?: string(name='ServiceNameEn'),
      source?: string(name='Source'),
      usedTimestamp?: long(name='UsedTimestamp'),
    }
  ](name='Products'),
  requestId?: string(name='RequestId'),
}

model GetAccessKeyLastUsedProductsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAccessKeyLastUsedProductsResponseBody(name='body'),
}

async function getAccessKeyLastUsedProductsWithOptions(request: GetAccessKeyLastUsedProductsRequest, runtime: Util.RuntimeOptions): GetAccessKeyLastUsedProductsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessKey)) {
    query['AccessKey'] = request.accessKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAccessKeyLastUsedProducts',
    version = '2020-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAccessKeyLastUsedProducts(request: GetAccessKeyLastUsedProductsRequest): GetAccessKeyLastUsedProductsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAccessKeyLastUsedProductsWithOptions(request, runtime);
}

model GetAccessKeyLastUsedResourcesRequest {
  accessKey?: string(name='AccessKey'),
  nextToken?: string(name='NextToken'),
  pageSize?: string(name='PageSize'),
  serviceName?: string(name='ServiceName'),
}

model GetAccessKeyLastUsedResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  resources?: [ 
    {
      detail?: string(name='Detail'),
      resourceName?: string(name='ResourceName'),
      resourceType?: string(name='ResourceType'),
      source?: string(name='Source'),
      usedTimestamp?: long(name='UsedTimestamp'),
    }
  ](name='Resources'),
}

model GetAccessKeyLastUsedResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAccessKeyLastUsedResourcesResponseBody(name='body'),
}

async function getAccessKeyLastUsedResourcesWithOptions(request: GetAccessKeyLastUsedResourcesRequest, runtime: Util.RuntimeOptions): GetAccessKeyLastUsedResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessKey)) {
    query['AccessKey'] = request.accessKey;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAccessKeyLastUsedResources',
    version = '2020-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAccessKeyLastUsedResources(request: GetAccessKeyLastUsedResourcesRequest): GetAccessKeyLastUsedResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAccessKeyLastUsedResourcesWithOptions(request, runtime);
}

model GetDeliveryHistoryJobRequest {
  jobId?: long(name='JobId'),
}

model GetDeliveryHistoryJobResponseBody = {
  createdTime?: string(name='CreatedTime'),
  endTime?: string(name='EndTime'),
  homeRegion?: string(name='HomeRegion'),
  jobId?: long(name='JobId'),
  jobStatus?: int32(name='JobStatus'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  status?: [ 
    {
      region?: string(name='Region'),
      status?: int32(name='Status'),
    }
  ](name='Status'),
  trailName?: string(name='TrailName'),
  updatedTime?: string(name='UpdatedTime'),
}

model GetDeliveryHistoryJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeliveryHistoryJobResponseBody(name='body'),
}

async function getDeliveryHistoryJobWithOptions(request: GetDeliveryHistoryJobRequest, runtime: Util.RuntimeOptions): GetDeliveryHistoryJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDeliveryHistoryJob',
    version = '2020-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDeliveryHistoryJob(request: GetDeliveryHistoryJobRequest): GetDeliveryHistoryJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeliveryHistoryJobWithOptions(request, runtime);
}

model GetTrailStatusRequest {
  isOrganizationTrail?: boolean(name='IsOrganizationTrail'),
  name?: string(name='Name'),
}

model GetTrailStatusResponseBody = {
  isLogging?: boolean(name='IsLogging'),
  latestDeliveryError?: string(name='LatestDeliveryError'),
  latestDeliveryLogServiceError?: string(name='LatestDeliveryLogServiceError'),
  latestDeliveryLogServiceTime?: string(name='LatestDeliveryLogServiceTime'),
  latestDeliveryTime?: string(name='LatestDeliveryTime'),
  ossBucketStatus?: boolean(name='OssBucketStatus'),
  requestId?: string(name='RequestId'),
  slsLogStoreStatus?: boolean(name='SlsLogStoreStatus'),
  startLoggingTime?: string(name='StartLoggingTime'),
  stopLoggingTime?: string(name='StopLoggingTime'),
}

model GetTrailStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTrailStatusResponseBody(name='body'),
}

async function getTrailStatusWithOptions(request: GetTrailStatusRequest, runtime: Util.RuntimeOptions): GetTrailStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.isOrganizationTrail)) {
    query['IsOrganizationTrail'] = request.isOrganizationTrail;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTrailStatus',
    version = '2020-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTrailStatus(request: GetTrailStatusRequest): GetTrailStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTrailStatusWithOptions(request, runtime);
}

model ListDeliveryHistoryJobsRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListDeliveryHistoryJobsResponseBody = {
  deliveryHistoryJobs?: [ 
    {
      createdTime?: string(name='CreatedTime'),
      endTime?: string(name='EndTime'),
      homeRegion?: string(name='HomeRegion'),
      jobId?: long(name='JobId'),
      jobStatus?: int32(name='JobStatus'),
      startTime?: string(name='StartTime'),
      trailName?: string(name='TrailName'),
      updatedTime?: string(name='UpdatedTime'),
    }
  ](name='DeliveryHistoryJobs'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListDeliveryHistoryJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDeliveryHistoryJobsResponseBody(name='body'),
}

async function listDeliveryHistoryJobsWithOptions(request: ListDeliveryHistoryJobsRequest, runtime: Util.RuntimeOptions): ListDeliveryHistoryJobsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDeliveryHistoryJobs',
    version = '2020-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDeliveryHistoryJobs(request: ListDeliveryHistoryJobsRequest): ListDeliveryHistoryJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeliveryHistoryJobsWithOptions(request, runtime);
}

model LookupEventsRequest {
  direction?: string(name='Direction'),
  endTime?: string(name='EndTime'),
  lookupAttribute?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='LookupAttribute'),
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  startTime?: string(name='StartTime'),
}

model LookupEventsResponseBody = {
  endTime?: string(name='EndTime'),
  events?: [  map[string]any ](name='Events'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model LookupEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LookupEventsResponseBody(name='body'),
}

async function lookupEventsWithOptions(request: LookupEventsRequest, runtime: Util.RuntimeOptions): LookupEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lookupAttribute)) {
    query['LookupAttribute'] = request.lookupAttribute;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'LookupEvents',
    version = '2020-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function lookupEvents(request: LookupEventsRequest): LookupEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return lookupEventsWithOptions(request, runtime);
}

model StartLoggingRequest {
  name?: string(name='Name'),
}

model StartLoggingResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartLoggingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartLoggingResponseBody(name='body'),
}

async function startLoggingWithOptions(request: StartLoggingRequest, runtime: Util.RuntimeOptions): StartLoggingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartLogging',
    version = '2020-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startLogging(request: StartLoggingRequest): StartLoggingResponse {
  var runtime = new Util.RuntimeOptions{};
  return startLoggingWithOptions(request, runtime);
}

model StopLoggingRequest {
  name?: string(name='Name'),
}

model StopLoggingResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopLoggingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopLoggingResponseBody(name='body'),
}

async function stopLoggingWithOptions(request: StopLoggingRequest, runtime: Util.RuntimeOptions): StopLoggingResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopLogging',
    version = '2020-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopLogging(request: StopLoggingRequest): StopLoggingResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopLoggingWithOptions(request, runtime);
}

model UpdateTrailRequest {
  eventRW?: string(name='EventRW'),
  name?: string(name='Name'),
  ossBucketName?: string(name='OssBucketName'),
  ossKeyPrefix?: string(name='OssKeyPrefix'),
  ossWriteRoleArn?: string(name='OssWriteRoleArn'),
  slsProjectArn?: string(name='SlsProjectArn'),
  slsWriteRoleArn?: string(name='SlsWriteRoleArn'),
  trailRegion?: string(name='TrailRegion'),
}

model UpdateTrailResponseBody = {
  eventRW?: string(name='EventRW'),
  homeRegion?: string(name='HomeRegion'),
  name?: string(name='Name'),
  ossBucketName?: string(name='OssBucketName'),
  ossKeyPrefix?: string(name='OssKeyPrefix'),
  ossWriteRoleArn?: string(name='OssWriteRoleArn'),
  requestId?: string(name='RequestId'),
  slsProjectArn?: string(name='SlsProjectArn'),
  slsWriteRoleArn?: string(name='SlsWriteRoleArn'),
  trailRegion?: string(name='TrailRegion'),
}

model UpdateTrailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTrailResponseBody(name='body'),
}

async function updateTrailWithOptions(request: UpdateTrailRequest, runtime: Util.RuntimeOptions): UpdateTrailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eventRW)) {
    query['EventRW'] = request.eventRW;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ossBucketName)) {
    query['OssBucketName'] = request.ossBucketName;
  }
  if (!Util.isUnset(request.ossKeyPrefix)) {
    query['OssKeyPrefix'] = request.ossKeyPrefix;
  }
  if (!Util.isUnset(request.ossWriteRoleArn)) {
    query['OssWriteRoleArn'] = request.ossWriteRoleArn;
  }
  if (!Util.isUnset(request.slsProjectArn)) {
    query['SlsProjectArn'] = request.slsProjectArn;
  }
  if (!Util.isUnset(request.slsWriteRoleArn)) {
    query['SlsWriteRoleArn'] = request.slsWriteRoleArn;
  }
  if (!Util.isUnset(request.trailRegion)) {
    query['TrailRegion'] = request.trailRegion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTrail',
    version = '2020-07-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTrail(request: UpdateTrailRequest): UpdateTrailResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTrailWithOptions(request, runtime);
}

