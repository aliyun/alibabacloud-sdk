/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('servicecatalog', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AssociatePrincipalWithPortfolioRequest {
  portfolioId?: string(name='PortfolioId', description='产品组合ID'),
  principalId?: string(name='PrincipalId', description='RAM实体ID'),
  principalType?: string(name='PrincipalType', description='RAM实体类型'),
}

model AssociatePrincipalWithPortfolioResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model AssociatePrincipalWithPortfolioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociatePrincipalWithPortfolioResponseBody(name='body'),
}

async function associatePrincipalWithPortfolioWithOptions(request: AssociatePrincipalWithPortfolioRequest, runtime: Util.RuntimeOptions): AssociatePrincipalWithPortfolioResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.portfolioId)) {
    body['PortfolioId'] = request.portfolioId;
  }
  if (!Util.isUnset(request.principalId)) {
    body['PrincipalId'] = request.principalId;
  }
  if (!Util.isUnset(request.principalType)) {
    body['PrincipalType'] = request.principalType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AssociatePrincipalWithPortfolio',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associatePrincipalWithPortfolio(request: AssociatePrincipalWithPortfolioRequest): AssociatePrincipalWithPortfolioResponse {
  var runtime = new Util.RuntimeOptions{};
  return associatePrincipalWithPortfolioWithOptions(request, runtime);
}

model AssociateProductWithPortfolioRequest {
  portfolioId?: string(name='PortfolioId', description='产品组合ID'),
  productId?: string(name='ProductId', description='产品ID'),
}

model AssociateProductWithPortfolioResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model AssociateProductWithPortfolioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateProductWithPortfolioResponseBody(name='body'),
}

async function associateProductWithPortfolioWithOptions(request: AssociateProductWithPortfolioRequest, runtime: Util.RuntimeOptions): AssociateProductWithPortfolioResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.portfolioId)) {
    body['PortfolioId'] = request.portfolioId;
  }
  if (!Util.isUnset(request.productId)) {
    body['ProductId'] = request.productId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AssociateProductWithPortfolio',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associateProductWithPortfolio(request: AssociateProductWithPortfolioRequest): AssociateProductWithPortfolioResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateProductWithPortfolioWithOptions(request, runtime);
}

model CreateConstraintRequest {
  config?: string(name='Config', description='约束配置'),
  constraintType?: string(name='ConstraintType', description='约束类型'),
  description?: string(name='Description', description='约束描述'),
  portfolioId?: string(name='PortfolioId', description='约束所属的产品组合ID'),
  productId?: string(name='ProductId', description='约束对应的产品ID'),
}

model CreateConstraintResponseBody = {
  constraintId?: string(name='ConstraintId', description='约束ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model CreateConstraintResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateConstraintResponseBody(name='body'),
}

async function createConstraintWithOptions(request: CreateConstraintRequest, runtime: Util.RuntimeOptions): CreateConstraintResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.config)) {
    body['Config'] = request.config;
  }
  if (!Util.isUnset(request.constraintType)) {
    body['ConstraintType'] = request.constraintType;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.portfolioId)) {
    body['PortfolioId'] = request.portfolioId;
  }
  if (!Util.isUnset(request.productId)) {
    body['ProductId'] = request.productId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateConstraint',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createConstraint(request: CreateConstraintRequest): CreateConstraintResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConstraintWithOptions(request, runtime);
}

model CreatePortfolioRequest {
  description?: string(name='Description', description='产品组合描述'),
  portfolioName?: string(name='PortfolioName', description='产品组合名称'),
  providerName?: string(name='ProviderName', description='提供者名称'),
}

model CreatePortfolioResponseBody = {
  portfolioId?: string(name='PortfolioId', description='产品组合ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model CreatePortfolioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePortfolioResponseBody(name='body'),
}

async function createPortfolioWithOptions(request: CreatePortfolioRequest, runtime: Util.RuntimeOptions): CreatePortfolioResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.portfolioName)) {
    body['PortfolioName'] = request.portfolioName;
  }
  if (!Util.isUnset(request.providerName)) {
    body['ProviderName'] = request.providerName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreatePortfolio',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createPortfolio(request: CreatePortfolioRequest): CreatePortfolioResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPortfolioWithOptions(request, runtime);
}

model CreateProductRequest {
  description?: string(name='Description', description='产品描述'),
  productName?: string(name='ProductName', description='产品名称'),
  productType?: string(name='ProductType', description='产品类型'),
  productVersionParameters?: {
    active?: boolean(name='Active', description='是否启用'),
    description?: string(name='Description', description='产品版本描述'),
    guidance?: string(name='Guidance', description='推荐信息'),
    productVersionName?: string(name='ProductVersionName', description='产品版本名称'),
    templateType?: string(name='TemplateType', description='模板类型'),
    templateUrl?: string(name='TemplateUrl', description='模板的URL地址'),
  }(name='ProductVersionParameters', description='产品版本相关的参数'),
  providerName?: string(name='ProviderName', description='提供者名称'),
}

model CreateProductShrinkRequest {
  description?: string(name='Description', description='产品描述'),
  productName?: string(name='ProductName', description='产品名称'),
  productType?: string(name='ProductType', description='产品类型'),
  productVersionParametersShrink?: string(name='ProductVersionParameters', description='产品版本相关的参数'),
  providerName?: string(name='ProviderName', description='提供者名称'),
}

model CreateProductResponseBody = {
  productId?: string(name='ProductId', description='产品ID'),
  productVersionId?: string(name='ProductVersionId'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model CreateProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProductResponseBody(name='body'),
}

async function createProductWithOptions(tmpReq: CreateProductRequest, runtime: Util.RuntimeOptions): CreateProductResponse {
  Util.validateModel(tmpReq);
  var request = new CreateProductShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.productVersionParameters)) {
    request.productVersionParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.productVersionParameters, 'ProductVersionParameters', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.productName)) {
    body['ProductName'] = request.productName;
  }
  if (!Util.isUnset(request.productType)) {
    body['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.productVersionParametersShrink)) {
    body['ProductVersionParameters'] = request.productVersionParametersShrink;
  }
  if (!Util.isUnset(request.providerName)) {
    body['ProviderName'] = request.providerName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateProduct',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createProduct(request: CreateProductRequest): CreateProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProductWithOptions(request, runtime);
}

model CreateProductVersionRequest {
  active?: boolean(name='Active', description='是否启用'),
  description?: string(name='Description', description='产品版本描述'),
  guidance?: string(name='Guidance', description='推荐信息'),
  productId?: string(name='ProductId', description='产品版本所属的产品ID'),
  productVersionName?: string(name='ProductVersionName', description='产品版本名称'),
  templateType?: string(name='TemplateType', description='模板类型'),
  templateUrl?: string(name='TemplateUrl', description='模板的OSS地址'),
}

model CreateProductVersionResponseBody = {
  productVersionId?: string(name='ProductVersionId', description='产品版本ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model CreateProductVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProductVersionResponseBody(name='body'),
}

async function createProductVersionWithOptions(request: CreateProductVersionRequest, runtime: Util.RuntimeOptions): CreateProductVersionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.active)) {
    body['Active'] = request.active;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.guidance)) {
    body['Guidance'] = request.guidance;
  }
  if (!Util.isUnset(request.productId)) {
    body['ProductId'] = request.productId;
  }
  if (!Util.isUnset(request.productVersionName)) {
    body['ProductVersionName'] = request.productVersionName;
  }
  if (!Util.isUnset(request.templateType)) {
    body['TemplateType'] = request.templateType;
  }
  if (!Util.isUnset(request.templateUrl)) {
    body['TemplateUrl'] = request.templateUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateProductVersion',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createProductVersion(request: CreateProductVersionRequest): CreateProductVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProductVersionWithOptions(request, runtime);
}

model CreateTemplateRequest {
  templateBody?: string(name='TemplateBody', description='模板内容'),
  templateType?: string(name='TemplateType', description='模板类型'),
}

model CreateTemplateResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  templateUrl?: string(name='TemplateUrl', description='模板的OSS地址'),
}

model CreateTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTemplateResponseBody(name='body'),
}

async function createTemplateWithOptions(request: CreateTemplateRequest, runtime: Util.RuntimeOptions): CreateTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.templateBody)) {
    body['TemplateBody'] = request.templateBody;
  }
  if (!Util.isUnset(request.templateType)) {
    body['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTemplate',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTemplate(request: CreateTemplateRequest): CreateTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTemplateWithOptions(request, runtime);
}

model DeleteConstraintRequest {
  constraintId?: string(name='ConstraintId', description='约束ID'),
}

model DeleteConstraintResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model DeleteConstraintResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteConstraintResponseBody(name='body'),
}

async function deleteConstraintWithOptions(request: DeleteConstraintRequest, runtime: Util.RuntimeOptions): DeleteConstraintResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.constraintId)) {
    body['ConstraintId'] = request.constraintId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteConstraint',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteConstraint(request: DeleteConstraintRequest): DeleteConstraintResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteConstraintWithOptions(request, runtime);
}

model DeletePortfolioRequest {
  portfolioId?: string(name='PortfolioId', description='产品组合ID'),
}

model DeletePortfolioResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model DeletePortfolioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePortfolioResponseBody(name='body'),
}

async function deletePortfolioWithOptions(request: DeletePortfolioRequest, runtime: Util.RuntimeOptions): DeletePortfolioResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.portfolioId)) {
    body['PortfolioId'] = request.portfolioId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeletePortfolio',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePortfolio(request: DeletePortfolioRequest): DeletePortfolioResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePortfolioWithOptions(request, runtime);
}

model DeleteProductRequest {
  productId?: string(name='ProductId', description='产品ID'),
}

model DeleteProductResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model DeleteProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProductResponseBody(name='body'),
}

async function deleteProductWithOptions(request: DeleteProductRequest, runtime: Util.RuntimeOptions): DeleteProductResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.productId)) {
    body['ProductId'] = request.productId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProduct',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteProduct(request: DeleteProductRequest): DeleteProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProductWithOptions(request, runtime);
}

model DeleteProductVersionRequest {
  productVersionId?: string(name='ProductVersionId', description='产品版本ID'),
}

model DeleteProductVersionResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model DeleteProductVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProductVersionResponseBody(name='body'),
}

async function deleteProductVersionWithOptions(request: DeleteProductVersionRequest, runtime: Util.RuntimeOptions): DeleteProductVersionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.productVersionId)) {
    body['ProductVersionId'] = request.productVersionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProductVersion',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteProductVersion(request: DeleteProductVersionRequest): DeleteProductVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProductVersionWithOptions(request, runtime);
}

model DisassociatePrincipalFromPortfolioRequest {
  portfolioId?: string(name='PortfolioId', description='产品组合ID'),
  principalId?: string(name='PrincipalId', description='RAM实体ID'),
  principalType?: string(name='PrincipalType', description='RAM实体类型'),
}

model DisassociatePrincipalFromPortfolioResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model DisassociatePrincipalFromPortfolioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisassociatePrincipalFromPortfolioResponseBody(name='body'),
}

async function disassociatePrincipalFromPortfolioWithOptions(request: DisassociatePrincipalFromPortfolioRequest, runtime: Util.RuntimeOptions): DisassociatePrincipalFromPortfolioResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.portfolioId)) {
    body['PortfolioId'] = request.portfolioId;
  }
  if (!Util.isUnset(request.principalId)) {
    body['PrincipalId'] = request.principalId;
  }
  if (!Util.isUnset(request.principalType)) {
    body['PrincipalType'] = request.principalType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DisassociatePrincipalFromPortfolio',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disassociatePrincipalFromPortfolio(request: DisassociatePrincipalFromPortfolioRequest): DisassociatePrincipalFromPortfolioResponse {
  var runtime = new Util.RuntimeOptions{};
  return disassociatePrincipalFromPortfolioWithOptions(request, runtime);
}

model DisassociateProductFromPortfolioRequest {
  portfolioId?: string(name='PortfolioId', description='产品组合ID'),
  productId?: string(name='ProductId', description='产品ID'),
}

model DisassociateProductFromPortfolioResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model DisassociateProductFromPortfolioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisassociateProductFromPortfolioResponseBody(name='body'),
}

async function disassociateProductFromPortfolioWithOptions(request: DisassociateProductFromPortfolioRequest, runtime: Util.RuntimeOptions): DisassociateProductFromPortfolioResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.portfolioId)) {
    body['PortfolioId'] = request.portfolioId;
  }
  if (!Util.isUnset(request.productId)) {
    body['ProductId'] = request.productId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DisassociateProductFromPortfolio',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disassociateProductFromPortfolio(request: DisassociateProductFromPortfolioRequest): DisassociateProductFromPortfolioResponse {
  var runtime = new Util.RuntimeOptions{};
  return disassociateProductFromPortfolioWithOptions(request, runtime);
}

model GetConstraintRequest {
  constraintId?: string(name='ConstraintId', description='约束ID'),
}

model GetConstraintResponseBody = {
  constraintDetail?: {
    config?: string(name='Config', description='约束配置'),
    constraintId?: string(name='ConstraintId', description='约束ID'),
    constraintType?: string(name='ConstraintType', description='约束类型'),
    createTime?: string(name='CreateTime', description='创建时间'),
    description?: string(name='Description', description='描述'),
    portfolioId?: string(name='PortfolioId', description='约束所属的产品组合ID'),
    productId?: string(name='ProductId', description='约束的产品ID'),
    productName?: string(name='ProductName'),
  }(name='ConstraintDetail', description='约束详情'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model GetConstraintResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetConstraintResponseBody(name='body'),
}

async function getConstraintWithOptions(request: GetConstraintRequest, runtime: Util.RuntimeOptions): GetConstraintResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.constraintId)) {
    query['ConstraintId'] = request.constraintId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetConstraint',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getConstraint(request: GetConstraintRequest): GetConstraintResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConstraintWithOptions(request, runtime);
}

model GetPortfolioRequest {
  portfolioId?: string(name='PortfolioId', description='产品组合ID'),
}

model GetPortfolioResponseBody = {
  portfolioDetail?: {
    createTime?: string(name='CreateTime', description='产品组合创建时间'),
    description?: string(name='Description', description='产品组合描述'),
    portfolioArn?: string(name='PortfolioArn', description='产品组合ARN'),
    portfolioId?: string(name='PortfolioId', description='产品组合ID'),
    portfolioName?: string(name='PortfolioName', description='产品组合名称'),
    providerName?: string(name='ProviderName', description='提供者名称'),
  }(name='PortfolioDetail', description='产品组合详情'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model GetPortfolioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPortfolioResponseBody(name='body'),
}

async function getPortfolioWithOptions(request: GetPortfolioRequest, runtime: Util.RuntimeOptions): GetPortfolioResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.portfolioId)) {
    query['PortfolioId'] = request.portfolioId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPortfolio',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPortfolio(request: GetPortfolioRequest): GetPortfolioResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPortfolioWithOptions(request, runtime);
}

model GetProductAsAdminRequest {
  productId?: string(name='ProductId', description='产品ID'),
}

model GetProductAsAdminResponseBody = {
  productDetail?: {
    createTime?: string(name='CreateTime', description='创建时间'),
    description?: string(name='Description', description='产品描述'),
    productArn?: string(name='ProductArn', description='产品ARN'),
    productId?: string(name='ProductId', description='产品ID'),
    productName?: string(name='ProductName', description='产品名称'),
    productType?: string(name='ProductType', description='产品类型'),
    providerName?: string(name='ProviderName', description='提供者名称'),
  }(name='ProductDetail', description='产品详情'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model GetProductAsAdminResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProductAsAdminResponseBody(name='body'),
}

async function getProductAsAdminWithOptions(request: GetProductAsAdminRequest, runtime: Util.RuntimeOptions): GetProductAsAdminResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.productId)) {
    query['ProductId'] = request.productId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProductAsAdmin',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getProductAsAdmin(request: GetProductAsAdminRequest): GetProductAsAdminResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProductAsAdminWithOptions(request, runtime);
}

model GetProductAsEndUserRequest {
  productId?: string(name='ProductId', description='产品ID'),
}

model GetProductAsEndUserResponseBody = {
  productSummary?: {
    createTime?: string(name='CreateTime', description='创建时间'),
    description?: string(name='Description', description='产品描述'),
    hasDefaultLaunchOption?: boolean(name='HasDefaultLaunchOption'),
    productArn?: string(name='ProductArn', description='产品ARN'),
    productId?: string(name='ProductId', description='产品ID'),
    productName?: string(name='ProductName', description='产品名称'),
    productType?: string(name='ProductType', description='产品类型'),
    providerName?: string(name='ProviderName', description='提供者名称'),
  }(name='ProductSummary', description='产品详情'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model GetProductAsEndUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProductAsEndUserResponseBody(name='body'),
}

async function getProductAsEndUserWithOptions(request: GetProductAsEndUserRequest, runtime: Util.RuntimeOptions): GetProductAsEndUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.productId)) {
    query['ProductId'] = request.productId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProductAsEndUser',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getProductAsEndUser(request: GetProductAsEndUserRequest): GetProductAsEndUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProductAsEndUserWithOptions(request, runtime);
}

model GetProductVersionRequest {
  productVersionId?: string(name='ProductVersionId', description='产品版本ID'),
}

model GetProductVersionResponseBody = {
  productVersionDetail?: {
    active?: boolean(name='Active', description='是否启用'),
    createTime?: string(name='CreateTime', description='创建时间'),
    description?: string(name='Description', description='产品版本描述'),
    guidance?: string(name='Guidance', description='推荐信息'),
    productId?: string(name='ProductId', description='产品版本所属的产品ID'),
    productVersionId?: string(name='ProductVersionId', description='产品版本ID'),
    productVersionName?: string(name='ProductVersionName', description='产品版本名称'),
    templateType?: string(name='TemplateType', description='模板类型'),
    templateUrl?: string(name='TemplateUrl', description='模板的OSS地址'),
  }(name='ProductVersionDetail', description='产品版本详情'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model GetProductVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProductVersionResponseBody(name='body'),
}

async function getProductVersionWithOptions(request: GetProductVersionRequest, runtime: Util.RuntimeOptions): GetProductVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.productVersionId)) {
    query['ProductVersionId'] = request.productVersionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProductVersion',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getProductVersion(request: GetProductVersionRequest): GetProductVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProductVersionWithOptions(request, runtime);
}

model GetProvisionedProductRequest {
  provisionedProductId?: string(name='ProvisionedProductId', description='实例ID'),
}

model GetProvisionedProductResponseBody = {
  provisionedProductDetail?: {
    createTime?: string(name='CreateTime', description='创建时间'),
    lastProvisioningTaskId?: string(name='LastProvisioningTaskId', description='上一次执行的实例操作任务ID'),
    lastSuccessfulProvisioningTaskId?: string(name='LastSuccessfulProvisioningTaskId', description='上一次成功执行的实例操作任务ID'),
    lastTaskId?: string(name='LastTaskId', description='上一次执行的任务ID'),
    ownerPrincipalId?: string(name='OwnerPrincipalId', description='归属人的RAM实体ID'),
    ownerPrincipalType?: string(name='OwnerPrincipalType', description='归属人的RAM实体类型'),
    portfolioId?: string(name='PortfolioId', description='产品组合ID'),
    productId?: string(name='ProductId', description='产品ID'),
    productName?: string(name='ProductName', description='产品名称'),
    productVersionId?: string(name='ProductVersionId', description='产品版本ID'),
    productVersionName?: string(name='ProductVersionName', description='产品版本名称'),
    provisionedProductArn?: string(name='ProvisionedProductArn', description='实例ARN'),
    provisionedProductId?: string(name='ProvisionedProductId', description='实例ID'),
    provisionedProductName?: string(name='ProvisionedProductName', description='实例名称'),
    provisionedProductType?: string(name='ProvisionedProductType'),
    stackId?: string(name='StackId', description='ROS资源栈的ID'),
    stackRegionId?: string(name='StackRegionId', description='ROS资源栈所属的地域ID'),
    status?: string(name='Status', description='实例状态'),
    statusMessage?: string(name='StatusMessage', description='实例状态说明'),
  }(name='ProvisionedProductDetail', description='实例信息'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model GetProvisionedProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProvisionedProductResponseBody(name='body'),
}

async function getProvisionedProductWithOptions(request: GetProvisionedProductRequest, runtime: Util.RuntimeOptions): GetProvisionedProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.provisionedProductId)) {
    query['ProvisionedProductId'] = request.provisionedProductId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProvisionedProduct',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getProvisionedProduct(request: GetProvisionedProductRequest): GetProvisionedProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProvisionedProductWithOptions(request, runtime);
}

model GetTaskRequest {
  taskId?: string(name='TaskId', description='任务ID'),
}

model GetTaskResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  taskDetail?: {
    createTime?: string(name='CreateTime', description='创建时间'),
    log?: {
      terraformLogs?: [ 
        {
          command?: string(name='Command'),
          content?: string(name='Content'),
          stream?: string(name='Stream'),
        }
      ](name='TerraformLogs'),
    }(name='Log'),
    outputs?: [ 
      {
        description?: string(name='Description'),
        outputKey?: string(name='OutputKey'),
        outputValue?: string(name='OutputValue'),
      }
    ](name='Outputs'),
    parameters?: [ 
      {
        parameterKey?: string(name='ParameterKey'),
        parameterValue?: string(name='ParameterValue'),
      }
    ](name='Parameters'),
    portfolioId?: string(name='PortfolioId', description='产品组合ID'),
    productId?: string(name='ProductId', description='产品ID'),
    productName?: string(name='ProductName', description='产品名称'),
    productVersionId?: string(name='ProductVersionId', description='产品版本ID'),
    productVersionName?: string(name='ProductVersionName', description='产品版本名称'),
    provisionedProductId?: string(name='ProvisionedProductId', description='实例ID'),
    provisionedProductName?: string(name='ProvisionedProductName', description='实例名称'),
    status?: string(name='Status', description='任务状态'),
    statusMessage?: string(name='StatusMessage', description='任务状态说明'),
    taskId?: string(name='TaskId', description='任务ID'),
    taskType?: string(name='TaskType', description='任务类型'),
    updateTime?: string(name='UpdateTime'),
  }(name='TaskDetail', description='任务信息'),
}

model GetTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTaskResponseBody(name='body'),
}

async function getTaskWithOptions(request: GetTaskRequest, runtime: Util.RuntimeOptions): GetTaskResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTask',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTask(request: GetTaskRequest): GetTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTaskWithOptions(request, runtime);
}

model GetTemplateRequest {
  productId?: string(name='ProductId', description='产品ID'),
  productVersionId?: string(name='ProductVersionId', description='产品版本ID'),
}

model GetTemplateResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  templateBody?: string(name='TemplateBody', description='模板内容'),
}

model GetTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTemplateResponseBody(name='body'),
}

async function getTemplateWithOptions(request: GetTemplateRequest, runtime: Util.RuntimeOptions): GetTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.productId)) {
    query['ProductId'] = request.productId;
  }
  if (!Util.isUnset(request.productVersionId)) {
    query['ProductVersionId'] = request.productVersionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTemplate',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTemplate(request: GetTemplateRequest): GetTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTemplateWithOptions(request, runtime);
}

model LaunchProductRequest {
  parameters?: [ 
    {
      parameterKey?: string(name='ParameterKey'),
      parameterValue?: string(name='ParameterValue'),
    }
  ](name='Parameters'),
  portfolioId?: string(name='PortfolioId', description='产品组合ID'),
  productId?: string(name='ProductId', description='产品ID'),
  productVersionId?: string(name='ProductVersionId', description='产品版本ID'),
  provisionedProductName?: string(name='ProvisionedProductName', description='实例名称'),
  stackRegionId?: string(name='StackRegionId', description='ROS资源栈所属的地域ID'),
}

model LaunchProductResponseBody = {
  provisionedProductId?: string(name='ProvisionedProductId', description='实例ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model LaunchProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LaunchProductResponseBody(name='body'),
}

async function launchProductWithOptions(request: LaunchProductRequest, runtime: Util.RuntimeOptions): LaunchProductResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.parameters)) {
    body['Parameters'] = request.parameters;
  }
  if (!Util.isUnset(request.portfolioId)) {
    body['PortfolioId'] = request.portfolioId;
  }
  if (!Util.isUnset(request.productId)) {
    body['ProductId'] = request.productId;
  }
  if (!Util.isUnset(request.productVersionId)) {
    body['ProductVersionId'] = request.productVersionId;
  }
  if (!Util.isUnset(request.provisionedProductName)) {
    body['ProvisionedProductName'] = request.provisionedProductName;
  }
  if (!Util.isUnset(request.stackRegionId)) {
    body['StackRegionId'] = request.stackRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'LaunchProduct',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function launchProduct(request: LaunchProductRequest): LaunchProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return launchProductWithOptions(request, runtime);
}

model ListConstraintsRequest {
  portfolioId?: string(name='PortfolioId', description='产品组合ID'),
}

model ListConstraintsResponseBody = {
  constraintDetails?: [ 
    {
      config?: string(name='Config', description='约束配置'),
      constraintId?: string(name='ConstraintId', description='约束ID'),
      constraintType?: string(name='ConstraintType', description='约束类型'),
      createTime?: string(name='CreateTime', description='创建时间'),
      description?: string(name='Description', description='约束描述'),
      portfolioId?: string(name='PortfolioId', description='约束所属的产品组合ID'),
      productId?: string(name='ProductId', description='约束对应的产品ID'),
      productName?: string(name='ProductName'),
    }
  ](name='ConstraintDetails', description='约束详情'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model ListConstraintsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListConstraintsResponseBody(name='body'),
}

async function listConstraintsWithOptions(request: ListConstraintsRequest, runtime: Util.RuntimeOptions): ListConstraintsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.portfolioId)) {
    query['PortfolioId'] = request.portfolioId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListConstraints',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listConstraints(request: ListConstraintsRequest): ListConstraintsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConstraintsWithOptions(request, runtime);
}

model ListLaunchOptionsRequest {
  productId?: string(name='ProductId', description='产品ID'),
}

model ListLaunchOptionsResponseBody = {
  launchOptionSummaries?: [ 
    {
      constraintSummaries?: [ 
        {
          constraintType?: string(name='ConstraintType', description='约束类型'),
          description?: string(name='Description', description='约束描述'),
        }
      ](name='ConstraintSummaries', description='约束概要'),
      portfolioId?: string(name='PortfolioId', description='产品组合ID'),
      portfolioName?: string(name='PortfolioName', description='产品组合名称'),
    }
  ](name='LaunchOptionSummaries', description='启动选项概要'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model ListLaunchOptionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLaunchOptionsResponseBody(name='body'),
}

async function listLaunchOptionsWithOptions(request: ListLaunchOptionsRequest, runtime: Util.RuntimeOptions): ListLaunchOptionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.productId)) {
    query['ProductId'] = request.productId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLaunchOptions',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listLaunchOptions(request: ListLaunchOptionsRequest): ListLaunchOptionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLaunchOptionsWithOptions(request, runtime);
}

model ListPortfoliosRequest {
  filters?: [ 
    {
      key?: string(name='Key', description='过滤条件的名称'),
      value?: string(name='Value', description='过滤条件的值'),
    }
  ](name='Filters', description='过滤条件'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  productId?: string(name='ProductId', description='产品ID'),
  scope?: string(name='Scope'),
  sortBy?: string(name='SortBy', description='排序字段'),
  sortOrder?: string(name='SortOrder', description='排序方式'),
}

model ListPortfoliosResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  portfolioDetails?: [ 
    {
      createTime?: string(name='CreateTime', description='创建时间'),
      description?: string(name='Description', description='产品组合描述'),
      portfolioArn?: string(name='PortfolioArn', description='产品组合ARN'),
      portfolioId?: string(name='PortfolioId', description='产品组合ID'),
      portfolioName?: string(name='PortfolioName', description='产品组合名称'),
      providerName?: string(name='ProviderName', description='提供者名称'),
    }
  ](name='PortfolioDetails', description='产品组合列表'),
  requestId?: string(name='RequestId', description='请求ID'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
}

model ListPortfoliosResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPortfoliosResponseBody(name='body'),
}

async function listPortfoliosWithOptions(request: ListPortfoliosRequest, runtime: Util.RuntimeOptions): ListPortfoliosResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filters)) {
    query['Filters'] = request.filters;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productId)) {
    query['ProductId'] = request.productId;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.sortOrder)) {
    query['SortOrder'] = request.sortOrder;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPortfolios',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPortfolios(request: ListPortfoliosRequest): ListPortfoliosResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPortfoliosWithOptions(request, runtime);
}

model ListPrincipalsRequest {
  portfolioId?: string(name='PortfolioId', description='产品组合ID'),
}

model ListPrincipalsResponseBody = {
  principals?: [ 
    {
      principalId?: string(name='PrincipalId', description='RAM实体ID'),
      principalType?: string(name='PrincipalType', description='RAM实体类型'),
    }
  ](name='Principals', description='RAM实体列表'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model ListPrincipalsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPrincipalsResponseBody(name='body'),
}

async function listPrincipalsWithOptions(request: ListPrincipalsRequest, runtime: Util.RuntimeOptions): ListPrincipalsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.portfolioId)) {
    query['PortfolioId'] = request.portfolioId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPrincipals',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPrincipals(request: ListPrincipalsRequest): ListPrincipalsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPrincipalsWithOptions(request, runtime);
}

model ListProductVersionsRequest {
  productId?: string(name='ProductId', description='产品版本所属的产品ID'),
}

model ListProductVersionsResponseBody = {
  productVersionDetails?: [ 
    {
      active?: boolean(name='Active', description='是否启用'),
      createTime?: string(name='CreateTime', description='创建时间'),
      description?: string(name='Description', description='产品版本描述'),
      guidance?: string(name='Guidance', description='推荐信息'),
      productId?: string(name='ProductId'),
      productVersionId?: string(name='ProductVersionId', description='产品版本ID'),
      productVersionName?: string(name='ProductVersionName', description='产品版本名称'),
      templateType?: string(name='TemplateType', description='模板类型'),
      templateUrl?: string(name='TemplateUrl', description='模板的OSS地址'),
    }
  ](name='ProductVersionDetails', description='产品版本列表'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model ListProductVersionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProductVersionsResponseBody(name='body'),
}

async function listProductVersionsWithOptions(request: ListProductVersionsRequest, runtime: Util.RuntimeOptions): ListProductVersionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.productId)) {
    query['ProductId'] = request.productId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProductVersions',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProductVersions(request: ListProductVersionsRequest): ListProductVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProductVersionsWithOptions(request, runtime);
}

model ListProductsAsAdminRequest {
  filters?: [ 
    {
      key?: string(name='Key', description='过滤条件的名称'),
      value?: string(name='Value', description='过滤条件的值'),
    }
  ](name='Filters', description='过滤条件'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  portfolioId?: string(name='PortfolioId', description='产品组合ID'),
  scope?: string(name='Scope'),
  sortBy?: string(name='SortBy', description='排序字段'),
  sortOrder?: string(name='SortOrder', description='排序方式'),
}

model ListProductsAsAdminResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  productDetails?: [ 
    {
      createTime?: string(name='CreateTime', description='产品创建时间'),
      description?: string(name='Description', description='产品描述'),
      productArn?: string(name='ProductArn', description='产品ARN'),
      productId?: string(name='ProductId', description='产品ID'),
      productName?: string(name='ProductName', description='产品名字'),
      productType?: string(name='ProductType', description='产品类型'),
      providerName?: string(name='ProviderName', description='产品提供方'),
    }
  ](name='ProductDetails', description='产品列表'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
}

model ListProductsAsAdminResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProductsAsAdminResponseBody(name='body'),
}

async function listProductsAsAdminWithOptions(request: ListProductsAsAdminRequest, runtime: Util.RuntimeOptions): ListProductsAsAdminResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filters)) {
    query['Filters'] = request.filters;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.portfolioId)) {
    query['PortfolioId'] = request.portfolioId;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.sortOrder)) {
    query['SortOrder'] = request.sortOrder;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProductsAsAdmin',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProductsAsAdmin(request: ListProductsAsAdminRequest): ListProductsAsAdminResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProductsAsAdminWithOptions(request, runtime);
}

model ListProductsAsEndUserRequest {
  filters?: [ 
    {
      key?: string(name='Key', description='过滤条件的名称'),
      value?: string(name='Value', description='过滤条件的值'),
    }
  ](name='Filters', description='过滤条件'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  sortBy?: string(name='SortBy', description='排序字段'),
  sortOrder?: string(name='SortOrder', description='排序方式'),
}

model ListProductsAsEndUserResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  productSummaries?: [ 
    {
      createTime?: string(name='CreateTime', description='产品创建时间'),
      description?: string(name='Description', description='产品描述'),
      hasDefaultLaunchOption?: boolean(name='HasDefaultLaunchOption', description='是否存在默认的启动选项'),
      productArn?: string(name='ProductArn', description='产品ARN'),
      productId?: string(name='ProductId', description='产品ID'),
      productName?: string(name='ProductName', description='产品名字'),
      productType?: string(name='ProductType', description='产品类型'),
      providerName?: string(name='ProviderName', description='产品提供方'),
    }
  ](name='ProductSummaries', description='产品列表'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
}

model ListProductsAsEndUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProductsAsEndUserResponseBody(name='body'),
}

async function listProductsAsEndUserWithOptions(request: ListProductsAsEndUserRequest, runtime: Util.RuntimeOptions): ListProductsAsEndUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filters)) {
    query['Filters'] = request.filters;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.sortOrder)) {
    query['SortOrder'] = request.sortOrder;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProductsAsEndUser',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProductsAsEndUser(request: ListProductsAsEndUserRequest): ListProductsAsEndUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProductsAsEndUserWithOptions(request, runtime);
}

model ListProvisionedProductsRequest {
  accessLevelFilter?: string(name='AccessLevelFilter', description='访问过滤器'),
  filters?: [ 
    {
      key?: string(name='Key', description='过滤条件的名称'),
      value?: string(name='Value', description='过滤条件的值'),
    }
  ](name='Filters', description='过滤条件'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  sortBy?: string(name='SortBy', description='排序字段'),
  sortOrder?: string(name='SortOrder', description='排序方式'),
}

model ListProvisionedProductsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  provisionedProductDetails?: [ 
    {
      createTime?: string(name='CreateTime', description='创建时间'),
      lastProvisioningTaskId?: string(name='LastProvisioningTaskId', description='上一次执行的实例操作任务ID'),
      lastSuccessfulProvisioningTaskId?: string(name='LastSuccessfulProvisioningTaskId', description='上一次成功执行的实例操作任务ID'),
      lastTaskId?: string(name='LastTaskId', description='上一次执行的任务ID'),
      ownerPrincipalId?: string(name='OwnerPrincipalId', description='归属人的RAM实体ID'),
      ownerPrincipalType?: string(name='OwnerPrincipalType', description='归属人的RAM实体类型'),
      portfolioId?: string(name='PortfolioId', description='产品组合ID'),
      productId?: string(name='ProductId', description='产品ID'),
      productName?: string(name='ProductName', description='产品名称'),
      productVersionId?: string(name='ProductVersionId', description='产品版本ID'),
      productVersionName?: string(name='ProductVersionName', description='产品版本名称'),
      provisionedProductArn?: string(name='ProvisionedProductArn', description='实例ARN'),
      provisionedProductId?: string(name='ProvisionedProductId', description='实例ID'),
      provisionedProductName?: string(name='ProvisionedProductName', description='实例名称'),
      provisionedProductType?: string(name='ProvisionedProductType'),
      stackId?: string(name='StackId', description='ROS资源栈的ID'),
      stackRegionId?: string(name='StackRegionId', description='ROS资源栈所属的地域ID'),
      status?: string(name='Status', description='实例状态'),
      statusMessage?: string(name='StatusMessage', description='实例状态说明'),
    }
  ](name='ProvisionedProductDetails', description='实例列表'),
  requestId?: string(name='RequestId', description='请求ID'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
}

model ListProvisionedProductsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProvisionedProductsResponseBody(name='body'),
}

async function listProvisionedProductsWithOptions(request: ListProvisionedProductsRequest, runtime: Util.RuntimeOptions): ListProvisionedProductsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessLevelFilter)) {
    query['AccessLevelFilter'] = request.accessLevelFilter;
  }
  if (!Util.isUnset(request.filters)) {
    query['Filters'] = request.filters;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.sortOrder)) {
    query['SortOrder'] = request.sortOrder;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProvisionedProducts',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProvisionedProducts(request: ListProvisionedProductsRequest): ListProvisionedProductsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProvisionedProductsWithOptions(request, runtime);
}

model ListRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='地域名称'),
      regionEndpoint?: string(name='RegionEndpoint', description='地域接入地址'),
      regionId?: string(name='RegionId', description='地域ID'),
    }
  ](name='Regions', description='地域列表'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegionsWithOptions(runtime: Util.RuntimeOptions): ListRegionsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListRegions',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRegions(): ListRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRegionsWithOptions(runtime);
}

model ListTasksRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  provisionedProductId?: string(name='ProvisionedProductId', description='实例ID'),
  sortBy?: string(name='SortBy', description='排序字段'),
  sortOrder?: string(name='SortOrder', description='排序方式'),
}

model ListTasksResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId', description='请求ID'),
  taskDetails?: [ 
    {
      createTime?: string(name='CreateTime', description='创建时间'),
      log?: {
        terraformLogs?: [ 
          {
            command?: string(name='Command'),
            content?: string(name='Content'),
            stream?: string(name='Stream'),
          }
        ](name='TerraformLogs'),
      }(name='Log'),
      outputs?: [ 
        {
          description?: string(name='Description'),
          outputKey?: string(name='OutputKey'),
          outputValue?: string(name='OutputValue'),
        }
      ](name='Outputs'),
      parameters?: [ 
        {
          parameterKey?: string(name='ParameterKey'),
          parameterValue?: string(name='ParameterValue'),
        }
      ](name='Parameters'),
      portfolioId?: string(name='PortfolioId', description='产品组合ID'),
      productId?: string(name='ProductId', description='产品ID'),
      productName?: string(name='ProductName', description='产品名称'),
      productVersionId?: string(name='ProductVersionId', description='产品版本ID'),
      productVersionName?: string(name='ProductVersionName', description='产品版本名称'),
      provisionedProductId?: string(name='ProvisionedProductId', description='实例ID'),
      provisionedProductName?: string(name='ProvisionedProductName', description='实例名称'),
      status?: string(name='Status', description='实例状态'),
      statusMessage?: string(name='StatusMessage', description='实例状态说明'),
      taskId?: string(name='TaskId', description='实例名称'),
      taskType?: string(name='TaskType', description='实例ARN'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='TaskDetails', description='实例列表'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
}

model ListTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTasksResponseBody(name='body'),
}

async function listTasksWithOptions(request: ListTasksRequest, runtime: Util.RuntimeOptions): ListTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.provisionedProductId)) {
    query['ProvisionedProductId'] = request.provisionedProductId;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.sortOrder)) {
    query['SortOrder'] = request.sortOrder;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTasks',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTasks(request: ListTasksRequest): ListTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTasksWithOptions(request, runtime);
}

model TerminateProvisionedProductRequest {
  provisionedProductId?: string(name='ProvisionedProductId', description='实例ID'),
}

model TerminateProvisionedProductResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
}

model TerminateProvisionedProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TerminateProvisionedProductResponseBody(name='body'),
}

async function terminateProvisionedProductWithOptions(request: TerminateProvisionedProductRequest, runtime: Util.RuntimeOptions): TerminateProvisionedProductResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.provisionedProductId)) {
    body['ProvisionedProductId'] = request.provisionedProductId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TerminateProvisionedProduct',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function terminateProvisionedProduct(request: TerminateProvisionedProductRequest): TerminateProvisionedProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return terminateProvisionedProductWithOptions(request, runtime);
}

model UpdateConstraintRequest {
  config?: string(name='Config', description='约束配置'),
  constraintId?: string(name='ConstraintId', description='约束ID'),
  description?: string(name='Description', description='约束描述'),
}

model UpdateConstraintResponseBody = {
  constraintId?: string(name='ConstraintId', description='约束ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model UpdateConstraintResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateConstraintResponseBody(name='body'),
}

async function updateConstraintWithOptions(request: UpdateConstraintRequest, runtime: Util.RuntimeOptions): UpdateConstraintResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.config)) {
    body['Config'] = request.config;
  }
  if (!Util.isUnset(request.constraintId)) {
    body['ConstraintId'] = request.constraintId;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateConstraint',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateConstraint(request: UpdateConstraintRequest): UpdateConstraintResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateConstraintWithOptions(request, runtime);
}

model UpdatePortfolioRequest {
  description?: string(name='Description', description='产品组合描述'),
  portfolioId?: string(name='PortfolioId', description='产品组合ID'),
  portfolioName?: string(name='PortfolioName', description='产品组合名称'),
  providerName?: string(name='ProviderName', description='提供者名称'),
}

model UpdatePortfolioResponseBody = {
  portfolioId?: string(name='PortfolioId', description='产品组合ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model UpdatePortfolioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdatePortfolioResponseBody(name='body'),
}

async function updatePortfolioWithOptions(request: UpdatePortfolioRequest, runtime: Util.RuntimeOptions): UpdatePortfolioResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.portfolioId)) {
    body['PortfolioId'] = request.portfolioId;
  }
  if (!Util.isUnset(request.portfolioName)) {
    body['PortfolioName'] = request.portfolioName;
  }
  if (!Util.isUnset(request.providerName)) {
    body['ProviderName'] = request.providerName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePortfolio',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updatePortfolio(request: UpdatePortfolioRequest): UpdatePortfolioResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePortfolioWithOptions(request, runtime);
}

model UpdateProductRequest {
  description?: string(name='Description', description='产品描述'),
  productId?: string(name='ProductId', description='产品ID'),
  productName?: string(name='ProductName', description='产品名称'),
  providerName?: string(name='ProviderName', description='提供者名称'),
}

model UpdateProductResponseBody = {
  productId?: string(name='ProductId', description='产品ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model UpdateProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProductResponseBody(name='body'),
}

async function updateProductWithOptions(request: UpdateProductRequest, runtime: Util.RuntimeOptions): UpdateProductResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.productId)) {
    body['ProductId'] = request.productId;
  }
  if (!Util.isUnset(request.productName)) {
    body['ProductName'] = request.productName;
  }
  if (!Util.isUnset(request.providerName)) {
    body['ProviderName'] = request.providerName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateProduct',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateProduct(request: UpdateProductRequest): UpdateProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProductWithOptions(request, runtime);
}

model UpdateProductVersionRequest {
  active?: boolean(name='Active', description='是否启用'),
  description?: string(name='Description', description='产品版本描述'),
  guidance?: string(name='Guidance', description='推荐信息'),
  productVersionId?: string(name='ProductVersionId', description='产品版本ID'),
  productVersionName?: string(name='ProductVersionName', description='产品版本名称'),
}

model UpdateProductVersionResponseBody = {
  productVersionId?: string(name='ProductVersionId', description='产品版本ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model UpdateProductVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProductVersionResponseBody(name='body'),
}

async function updateProductVersionWithOptions(request: UpdateProductVersionRequest, runtime: Util.RuntimeOptions): UpdateProductVersionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.active)) {
    body['Active'] = request.active;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.guidance)) {
    body['Guidance'] = request.guidance;
  }
  if (!Util.isUnset(request.productVersionId)) {
    body['ProductVersionId'] = request.productVersionId;
  }
  if (!Util.isUnset(request.productVersionName)) {
    body['ProductVersionName'] = request.productVersionName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateProductVersion',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateProductVersion(request: UpdateProductVersionRequest): UpdateProductVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProductVersionWithOptions(request, runtime);
}

model UpdateProvisionedProductRequest {
  parameters?: [ 
    {
      parameterKey?: string(name='ParameterKey'),
      parameterValue?: string(name='ParameterValue'),
    }
  ](name='Parameters'),
  portfolioId?: string(name='PortfolioId', description='产品组合ID'),
  productId?: string(name='ProductId', description='产品ID'),
  productVersionId?: string(name='ProductVersionId', description='产品版本ID'),
  provisionedProductId?: string(name='ProvisionedProductId', description='实例ID'),
}

model UpdateProvisionedProductResponseBody = {
  provisionedProductId?: string(name='ProvisionedProductId', description='实例ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model UpdateProvisionedProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProvisionedProductResponseBody(name='body'),
}

async function updateProvisionedProductWithOptions(request: UpdateProvisionedProductRequest, runtime: Util.RuntimeOptions): UpdateProvisionedProductResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.parameters)) {
    body['Parameters'] = request.parameters;
  }
  if (!Util.isUnset(request.portfolioId)) {
    body['PortfolioId'] = request.portfolioId;
  }
  if (!Util.isUnset(request.productId)) {
    body['ProductId'] = request.productId;
  }
  if (!Util.isUnset(request.productVersionId)) {
    body['ProductVersionId'] = request.productVersionId;
  }
  if (!Util.isUnset(request.provisionedProductId)) {
    body['ProvisionedProductId'] = request.provisionedProductId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateProvisionedProduct',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateProvisionedProduct(request: UpdateProvisionedProductRequest): UpdateProvisionedProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProvisionedProductWithOptions(request, runtime);
}

