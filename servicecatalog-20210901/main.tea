/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('servicecatalog', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ApproveProvisionedProductPlanRequest {
  approvalAction?: string(name='ApprovalAction', example='Approve'),
  comment?: string(name='Comment'),
  planId?: string(name='PlanId', example='plan-bp1jvmdk2k****'),
}

model ApproveProvisionedProductPlanResponseBody = {
  requestId?: string(name='RequestId', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model ApproveProvisionedProductPlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApproveProvisionedProductPlanResponseBody(name='body'),
}

async function approveProvisionedProductPlanWithOptions(request: ApproveProvisionedProductPlanRequest, runtime: Util.RuntimeOptions): ApproveProvisionedProductPlanResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.approvalAction)) {
    body['ApprovalAction'] = request.approvalAction;
  }
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.planId)) {
    body['PlanId'] = request.planId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ApproveProvisionedProductPlan',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function approveProvisionedProductPlan(request: ApproveProvisionedProductPlanRequest): ApproveProvisionedProductPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return approveProvisionedProductPlanWithOptions(request, runtime);
}

model AssociatePrincipalWithPortfolioRequest {
  portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****'),
  principalId?: string(name='PrincipalId', description='The ID of the RAM entity.

For more information about how to obtain the ID of a RAM user, see [GetUser](~~28681~~).

For more information about how to obtain the ID of a RAM role, see [GetRole](~~28711~~).', example='24477111603637****'),
  principalType?: string(name='PrincipalType', description='The type of the RAM entity. Valid values:

*   RamUser: a RAM user
*   RamRole: a RAM role', example='RamUser'),
}

model AssociatePrincipalWithPortfolioResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model AssociatePrincipalWithPortfolioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociatePrincipalWithPortfolioResponseBody(name='body'),
}

async function associatePrincipalWithPortfolioWithOptions(request: AssociatePrincipalWithPortfolioRequest, runtime: Util.RuntimeOptions): AssociatePrincipalWithPortfolioResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.portfolioId)) {
    body['PortfolioId'] = request.portfolioId;
  }
  if (!Util.isUnset(request.principalId)) {
    body['PrincipalId'] = request.principalId;
  }
  if (!Util.isUnset(request.principalType)) {
    body['PrincipalType'] = request.principalType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AssociatePrincipalWithPortfolio',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associatePrincipalWithPortfolio(request: AssociatePrincipalWithPortfolioRequest): AssociatePrincipalWithPortfolioResponse {
  var runtime = new Util.RuntimeOptions{};
  return associatePrincipalWithPortfolioWithOptions(request, runtime);
}

model AssociateProductWithPortfolioRequest {
  portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****'),
  productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
}

model AssociateProductWithPortfolioResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model AssociateProductWithPortfolioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateProductWithPortfolioResponseBody(name='body'),
}

async function associateProductWithPortfolioWithOptions(request: AssociateProductWithPortfolioRequest, runtime: Util.RuntimeOptions): AssociateProductWithPortfolioResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.portfolioId)) {
    body['PortfolioId'] = request.portfolioId;
  }
  if (!Util.isUnset(request.productId)) {
    body['ProductId'] = request.productId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AssociateProductWithPortfolio',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associateProductWithPortfolio(request: AssociateProductWithPortfolioRequest): AssociateProductWithPortfolioResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateProductWithPortfolioWithOptions(request, runtime);
}

model CancelProvisionedProductPlanRequest {
  planId?: string(name='PlanId', example='plan-bp1jvmdk2k****'),
}

model CancelProvisionedProductPlanResponseBody = {
  requestId?: string(name='RequestId', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model CancelProvisionedProductPlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelProvisionedProductPlanResponseBody(name='body'),
}

async function cancelProvisionedProductPlanWithOptions(request: CancelProvisionedProductPlanRequest, runtime: Util.RuntimeOptions): CancelProvisionedProductPlanResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.planId)) {
    body['PlanId'] = request.planId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CancelProvisionedProductPlan',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelProvisionedProductPlan(request: CancelProvisionedProductPlanRequest): CancelProvisionedProductPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelProvisionedProductPlanWithOptions(request, runtime);
}

model CreateConstraintRequest {
  config?: string(name='Config', description='The configuration of the constraint.

Format: { "LocalRoleName": "\\<role_name>" }.', example='{ "LocalRoleName": "TestRole" }'),
  constraintType?: string(name='ConstraintType', description='The type of the constraint.

The value is fixed as Launch, which specifies the launch constraint.', example='Launch'),
  description?: string(name='Description', description='The description of the constraint.

The value must be 1 to 128 characters in length.', example='Launch as local role TestRole'),
  portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio to which the constraint belongs.', example='port-bp1yt7582g****'),
  productId?: string(name='ProductId', description='The ID of the product for which the constraint is created.', example='prod-bp18r7q127****'),
}

model CreateConstraintResponseBody = {
  constraintId?: string(name='ConstraintId', description='The ID of the constraint.', example='cons-bp1yx7x42v****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model CreateConstraintResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateConstraintResponseBody(name='body'),
}

async function createConstraintWithOptions(request: CreateConstraintRequest, runtime: Util.RuntimeOptions): CreateConstraintResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.config)) {
    body['Config'] = request.config;
  }
  if (!Util.isUnset(request.constraintType)) {
    body['ConstraintType'] = request.constraintType;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.portfolioId)) {
    body['PortfolioId'] = request.portfolioId;
  }
  if (!Util.isUnset(request.productId)) {
    body['ProductId'] = request.productId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateConstraint',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createConstraint(request: CreateConstraintRequest): CreateConstraintResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConstraintWithOptions(request, runtime);
}

model CreatePortfolioRequest {
  description?: string(name='Description', description='The description of the product portfolio.

The value must be 1 to 128 characters in length.', example='The description of the product portfolio.'),
  portfolioName?: string(name='PortfolioName', description='The name of the product portfolio.

The value must be 1 to 128 characters in length.', example='DEMO-IT services'),
  providerName?: string(name='ProviderName', description='The provider of the product portfolio.

The value must be 1 to 128 characters in length.', example='IT team'),
}

model CreatePortfolioResponseBody = {
  portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model CreatePortfolioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePortfolioResponseBody(name='body'),
}

async function createPortfolioWithOptions(request: CreatePortfolioRequest, runtime: Util.RuntimeOptions): CreatePortfolioResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.portfolioName)) {
    body['PortfolioName'] = request.portfolioName;
  }
  if (!Util.isUnset(request.providerName)) {
    body['ProviderName'] = request.providerName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreatePortfolio',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createPortfolio(request: CreatePortfolioRequest): CreatePortfolioResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPortfolioWithOptions(request, runtime);
}

model CreateProductRequest {
  description?: string(name='Description', description='The description of the product.

The value must be 1 to 128 characters in length.', example='The description of the product.'),
  productName?: string(name='ProductName', description='The name of the product.

The value must be 1 to 128 characters in length.', example='DEMO-Create an ECS instance'),
  productType?: string(name='ProductType', description='The type of the product.

The value is fixed as Ros, which specifies Resource Orchestration Service (ROS).', example='Ros'),
  productVersionParameters?: {
    active?: boolean(name='Active', description='Specifies whether the product version is visible to end users. Valid values:

*   true: The product version is visible to end users. This is the default value.
*   false: The product version is invisible to end users.', example='true'),
    description?: string(name='Description', description='The description of the product version.

The value must be 1 to 128 characters in length.', example='The description of the product version.'),
    guidance?: string(name='Guidance', description='The recommendation information. Valid values:

*   Default: No recommendation information is provided. This is the default value.
*   Recommended: the recommendation version.
*   Latest: the latest version.
*   Deprecated: the version that is about to be deprecated.', example='Default'),
    productVersionName?: string(name='ProductVersionName', description='The name of the product version.

The value must be 1 to 128 characters in length.', example='1.0'),
    templateType?: string(name='TemplateType', description='The type of the template.

The value is fixed as RosTerraformTemplate, which specifies that the Terraform template is supported by ROS.', example='RosTerraformTemplate'),
    templateUrl?: string(name='TemplateUrl', description='The URL of the template.

For more information about how to obtain the URL of a template, see [CreateTemplate](~~CreateTemplate~~).', example='oss://servicecatalog-cn-hangzhou/146611588617****/terraform/template/tpl-bp1217we23****/template.json'),
  }(name='ProductVersionParameters', description='The information about the product version.'),
  providerName?: string(name='ProviderName', description='The provider of the product.

The value must be 1 to 128 characters in length.', example='IT team'),
}

model CreateProductShrinkRequest {
  description?: string(name='Description', description='The description of the product.

The value must be 1 to 128 characters in length.', example='The description of the product.'),
  productName?: string(name='ProductName', description='The name of the product.

The value must be 1 to 128 characters in length.', example='DEMO-Create an ECS instance'),
  productType?: string(name='ProductType', description='The type of the product.

The value is fixed as Ros, which specifies Resource Orchestration Service (ROS).', example='Ros'),
  productVersionParametersShrink?: string(name='ProductVersionParameters', description='The information about the product version.'),
  providerName?: string(name='ProviderName', description='The provider of the product.

The value must be 1 to 128 characters in length.', example='IT team'),
}

model CreateProductResponseBody = {
  productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
  productVersionId?: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model CreateProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProductResponseBody(name='body'),
}

/**
  * Before you call the CreateProduct operation, you must call the [CreateTemplate](~~CreateTemplate~~) operation to create a template.
  *
  * @param tmpReq CreateProductRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateProductResponse
 */
async function createProductWithOptions(tmpReq: CreateProductRequest, runtime: Util.RuntimeOptions): CreateProductResponse {
  Util.validateModel(tmpReq);
  var request = new CreateProductShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.productVersionParameters)) {
    request.productVersionParametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.productVersionParameters, 'ProductVersionParameters', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.productName)) {
    body['ProductName'] = request.productName;
  }
  if (!Util.isUnset(request.productType)) {
    body['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.productVersionParametersShrink)) {
    body['ProductVersionParameters'] = request.productVersionParametersShrink;
  }
  if (!Util.isUnset(request.providerName)) {
    body['ProviderName'] = request.providerName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateProduct',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you call the CreateProduct operation, you must call the [CreateTemplate](~~CreateTemplate~~) operation to create a template.
  *
  * @param request CreateProductRequest
  * @return CreateProductResponse
 */
async function createProduct(request: CreateProductRequest): CreateProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProductWithOptions(request, runtime);
}

model CreateProductVersionRequest {
  active?: boolean(name='Active', description='Specifies whether the product version is visible to end users. Valid values:

*   true: The product version is visible to end users. This is the default value.
*   false: The product version is invisible to end users.', example='true'),
  description?: string(name='Description', description='The description of the product version.

The value must be 1 to 128 characters in length.', example='The description of the product version.'),
  guidance?: string(name='Guidance', description='The recommendation information. Valid values:

*   Default: No recommendation information is provided. This is the default value.
*   Recommended: the recommendation version.
*   Latest: the latest version.
*   Deprecated: the version that is about to be deprecated.', example='Default'),
  productId?: string(name='ProductId', description='The ID of the product to which the product version belongs.', example='prod-bp18r7q127****'),
  productVersionName?: string(name='ProductVersionName', description='The name of the product version.

The value must be 1 to 128 characters in length.', example='1.0'),
  templateType?: string(name='TemplateType', description='The type of the template.

The value is fixed as RosTerraformTemplate, which specifies that the Terraform template is supported by Resource Orchestration Service (ROS).', example='RosTerraformTemplate'),
  templateUrl?: string(name='TemplateUrl', description='The URL of the template.

For more information about how to obtain the URL of a template, see [CreateTemplate](~~CreateTemplate~~).', example='oss://servicecatalog-cn-hangzhou/146611588617****/terraform/template/tpl-bp1217we23****/template.json'),
}

model CreateProductVersionResponseBody = {
  productVersionId?: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model CreateProductVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProductVersionResponseBody(name='body'),
}

/**
  * Before you call the CreateProductVersion operation, you must call the [CreateTemplate](~~CreateTemplate~~) operation to create a template.
  *
  * @param request CreateProductVersionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateProductVersionResponse
 */
async function createProductVersionWithOptions(request: CreateProductVersionRequest, runtime: Util.RuntimeOptions): CreateProductVersionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.active)) {
    body['Active'] = request.active;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.guidance)) {
    body['Guidance'] = request.guidance;
  }
  if (!Util.isUnset(request.productId)) {
    body['ProductId'] = request.productId;
  }
  if (!Util.isUnset(request.productVersionName)) {
    body['ProductVersionName'] = request.productVersionName;
  }
  if (!Util.isUnset(request.templateType)) {
    body['TemplateType'] = request.templateType;
  }
  if (!Util.isUnset(request.templateUrl)) {
    body['TemplateUrl'] = request.templateUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateProductVersion',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you call the CreateProductVersion operation, you must call the [CreateTemplate](~~CreateTemplate~~) operation to create a template.
  *
  * @param request CreateProductVersionRequest
  * @return CreateProductVersionResponse
 */
async function createProductVersion(request: CreateProductVersionRequest): CreateProductVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProductVersionWithOptions(request, runtime);
}

model CreateProvisionedProductPlanRequest {
  description?: string(name='Description'),
  operationType?: string(name='OperationType'),
  parameters?: [ 
    {
      parameterKey?: string(name='ParameterKey', description='The name of the parameter in the template.', example='instance_type'),
      parameterValue?: string(name='ParameterValue', description='The value of the parameter in the template.', example='ecs.s6-c1m1.small'),
    }
  ](name='Parameters', description='An array that consists of the parameters in the template. The parameters are specified by the administrator.

You can specify up to 200 parameters.

>  This parameter is optional. If you specify the Parameters parameter, you must specify the ParameterKey and ParameterValue parameters.'),
  planName?: string(name='PlanName', description='The name of the plan.

The value must be 1 to 128 characters in length.', example='DEMO-ECS instance'),
  planType?: string(name='PlanType', description='The type of the plan.

Set the value to Ros, which specifies Resource Orchestration Service (ROS).', example='Ros'),
  portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.

>  If the PortfolioId parameter is not required, you do not need to specify the PortfolioId parameter. If the PortfolioId parameter is required, you must specify the PortfolioId parameter. For more information about how to obtain the value of the PortfolioId parameter, see [ListLaunchOptions](~~ListLaunchOptions~~).', example='port-bp1yt7582g****'),
  productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
  productVersionId?: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****'),
  provisionedProductName?: string(name='ProvisionedProductName', description='The name of the product instance.

The value must be 1 to 128 characters in length.', example='DEMO-ECS instance'),
  stackRegionId?: string(name='StackRegionId', description='The ID of the region to which the ROS stack belongs.

For more information about how to obtain the regions that are supported by ROS, see [DescribeRegions](~~131035~~).', example='cn-hangzhou'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
}

model CreateProvisionedProductPlanResponseBody = {
  planId?: string(name='PlanId', description='The ID of the plan.', example='plan-bp1jvmdk2k****'),
  provisionedProductId?: string(name='ProvisionedProductId', description='The ID of the product instance.', example='pp-bp1ddg1n2a****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model CreateProvisionedProductPlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProvisionedProductPlanResponseBody(name='body'),
}

async function createProvisionedProductPlanWithOptions(request: CreateProvisionedProductPlanRequest, runtime: Util.RuntimeOptions): CreateProvisionedProductPlanResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.operationType)) {
    body['OperationType'] = request.operationType;
  }
  if (!Util.isUnset(request.parameters)) {
    body['Parameters'] = request.parameters;
  }
  if (!Util.isUnset(request.planName)) {
    body['PlanName'] = request.planName;
  }
  if (!Util.isUnset(request.planType)) {
    body['PlanType'] = request.planType;
  }
  if (!Util.isUnset(request.portfolioId)) {
    body['PortfolioId'] = request.portfolioId;
  }
  if (!Util.isUnset(request.productId)) {
    body['ProductId'] = request.productId;
  }
  if (!Util.isUnset(request.productVersionId)) {
    body['ProductVersionId'] = request.productVersionId;
  }
  if (!Util.isUnset(request.provisionedProductName)) {
    body['ProvisionedProductName'] = request.provisionedProductName;
  }
  if (!Util.isUnset(request.stackRegionId)) {
    body['StackRegionId'] = request.stackRegionId;
  }
  if (!Util.isUnset(request.tags)) {
    body['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateProvisionedProductPlan',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createProvisionedProductPlan(request: CreateProvisionedProductPlanRequest): CreateProvisionedProductPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProvisionedProductPlanWithOptions(request, runtime);
}

model CreateTemplateRequest {
  templateBody?: string(name='TemplateBody', description='The content of the template.

For more information about the template syntax, see [Structure of Terraform templates](~~184397~~).', example='{
  "ROSTemplateFormatVersion": "2015-09-01",
  "Transform": "Aliyun::Terraform-v1.1",
  "Workspace": {
    "main.tf": "variable  \\"name\\" {  default = \\"auto_provisioning_group\\"}"
  },
  "Outputs": {}
}'),
  templateType?: string(name='TemplateType', description='The type of the template.

The value is fixed as RosTerraformTemplate, which specifies that the Terraform template is supported by Resource Orchestration Service (ROS).', example='RosTerraformTemplate'),
  terraformVariables?: [ 
    {
      description?: string(name='Description'),
      variableName?: string(name='VariableName'),
    }
  ](name='TerraformVariables'),
}

model CreateTemplateResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
  templateUrl?: string(name='TemplateUrl', description='The URL of the template.', example='oss://servicecatalog-cn-hangzhou/146611588617****/terraform/template/tpl-bp1217we23****/template.json'),
}

model CreateTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTemplateResponseBody(name='body'),
}

async function createTemplateWithOptions(request: CreateTemplateRequest, runtime: Util.RuntimeOptions): CreateTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.templateBody)) {
    body['TemplateBody'] = request.templateBody;
  }
  if (!Util.isUnset(request.templateType)) {
    body['TemplateType'] = request.templateType;
  }
  if (!Util.isUnset(request.terraformVariables)) {
    body['TerraformVariables'] = request.terraformVariables;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTemplate',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTemplate(request: CreateTemplateRequest): CreateTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTemplateWithOptions(request, runtime);
}

model DeleteConstraintRequest {
  constraintId?: string(name='ConstraintId', description='The ID of the constraint.', example='cons-bp1yx7x42v****'),
}

model DeleteConstraintResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model DeleteConstraintResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteConstraintResponseBody(name='body'),
}

async function deleteConstraintWithOptions(request: DeleteConstraintRequest, runtime: Util.RuntimeOptions): DeleteConstraintResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.constraintId)) {
    body['ConstraintId'] = request.constraintId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteConstraint',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteConstraint(request: DeleteConstraintRequest): DeleteConstraintResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteConstraintWithOptions(request, runtime);
}

model DeletePortfolioRequest {
  portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****'),
}

model DeletePortfolioResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model DeletePortfolioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePortfolioResponseBody(name='body'),
}

async function deletePortfolioWithOptions(request: DeletePortfolioRequest, runtime: Util.RuntimeOptions): DeletePortfolioResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.portfolioId)) {
    body['PortfolioId'] = request.portfolioId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeletePortfolio',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePortfolio(request: DeletePortfolioRequest): DeletePortfolioResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePortfolioWithOptions(request, runtime);
}

model DeleteProductRequest {
  productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
}

model DeleteProductResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model DeleteProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProductResponseBody(name='body'),
}

async function deleteProductWithOptions(request: DeleteProductRequest, runtime: Util.RuntimeOptions): DeleteProductResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.productId)) {
    body['ProductId'] = request.productId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProduct',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteProduct(request: DeleteProductRequest): DeleteProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProductWithOptions(request, runtime);
}

model DeleteProductVersionRequest {
  productVersionId?: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****'),
}

model DeleteProductVersionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model DeleteProductVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProductVersionResponseBody(name='body'),
}

async function deleteProductVersionWithOptions(request: DeleteProductVersionRequest, runtime: Util.RuntimeOptions): DeleteProductVersionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.productVersionId)) {
    body['ProductVersionId'] = request.productVersionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProductVersion',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteProductVersion(request: DeleteProductVersionRequest): DeleteProductVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProductVersionWithOptions(request, runtime);
}

model DeleteProvisionedProductPlanRequest {
  planId?: string(name='PlanId', description='The ID of the plan.', example='plan-bp1jvmdk2k****'),
}

model DeleteProvisionedProductPlanResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model DeleteProvisionedProductPlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProvisionedProductPlanResponseBody(name='body'),
}

async function deleteProvisionedProductPlanWithOptions(request: DeleteProvisionedProductPlanRequest, runtime: Util.RuntimeOptions): DeleteProvisionedProductPlanResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.planId)) {
    body['PlanId'] = request.planId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProvisionedProductPlan',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteProvisionedProductPlan(request: DeleteProvisionedProductPlanRequest): DeleteProvisionedProductPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProvisionedProductPlanWithOptions(request, runtime);
}

model DisassociatePrincipalFromPortfolioRequest {
  portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****'),
  principalId?: string(name='PrincipalId', description='The ID of the RAM entity.

For more information about how to obtain the ID of a RAM user, see [GetUser](~~28681~~).

For more information about how to obtain the ID of a RAM role, see [GetRole](~~28711~~).', example='24477111603637****'),
  principalType?: string(name='PrincipalType', description='The type of the Resource Access Management (RAM) entity. Valid values:

*   RamUser: a RAM user
*   RamRole: a RAM role', example='RamUser'),
}

model DisassociatePrincipalFromPortfolioResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model DisassociatePrincipalFromPortfolioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisassociatePrincipalFromPortfolioResponseBody(name='body'),
}

async function disassociatePrincipalFromPortfolioWithOptions(request: DisassociatePrincipalFromPortfolioRequest, runtime: Util.RuntimeOptions): DisassociatePrincipalFromPortfolioResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.portfolioId)) {
    body['PortfolioId'] = request.portfolioId;
  }
  if (!Util.isUnset(request.principalId)) {
    body['PrincipalId'] = request.principalId;
  }
  if (!Util.isUnset(request.principalType)) {
    body['PrincipalType'] = request.principalType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DisassociatePrincipalFromPortfolio',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disassociatePrincipalFromPortfolio(request: DisassociatePrincipalFromPortfolioRequest): DisassociatePrincipalFromPortfolioResponse {
  var runtime = new Util.RuntimeOptions{};
  return disassociatePrincipalFromPortfolioWithOptions(request, runtime);
}

model DisassociateProductFromPortfolioRequest {
  portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****'),
  productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
}

model DisassociateProductFromPortfolioResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model DisassociateProductFromPortfolioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisassociateProductFromPortfolioResponseBody(name='body'),
}

async function disassociateProductFromPortfolioWithOptions(request: DisassociateProductFromPortfolioRequest, runtime: Util.RuntimeOptions): DisassociateProductFromPortfolioResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.portfolioId)) {
    body['PortfolioId'] = request.portfolioId;
  }
  if (!Util.isUnset(request.productId)) {
    body['ProductId'] = request.productId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DisassociateProductFromPortfolio',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disassociateProductFromPortfolio(request: DisassociateProductFromPortfolioRequest): DisassociateProductFromPortfolioResponse {
  var runtime = new Util.RuntimeOptions{};
  return disassociateProductFromPortfolioWithOptions(request, runtime);
}

model ExecuteProvisionedProductPlanRequest {
  planId?: string(name='PlanId', description='The ID of the plan.', example='plan-bp1jvmdk2k****'),
}

model ExecuteProvisionedProductPlanResponseBody = {
  planId?: string(name='PlanId', description='The ID of the plan.', example='plan-bp1jvmdk2k****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model ExecuteProvisionedProductPlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExecuteProvisionedProductPlanResponseBody(name='body'),
}

async function executeProvisionedProductPlanWithOptions(request: ExecuteProvisionedProductPlanRequest, runtime: Util.RuntimeOptions): ExecuteProvisionedProductPlanResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.planId)) {
    body['PlanId'] = request.planId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ExecuteProvisionedProductPlan',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function executeProvisionedProductPlan(request: ExecuteProvisionedProductPlanRequest): ExecuteProvisionedProductPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeProvisionedProductPlanWithOptions(request, runtime);
}

model GetConstraintRequest {
  constraintId?: string(name='ConstraintId', description='The ID of the constraint.', example='cons-bp1yx7x42v****'),
}

model GetConstraintResponseBody = {
  constraintDetail?: {
    config?: string(name='Config', description='The configuration of the constraint.

Format: { "LocalRoleName": "\\<role_name>" }.', example='{ "LocalRoleName": "TestRole" }'),
    constraintId?: string(name='ConstraintId', description='The ID of the constraint.', example='cons-bp1yx7x42v****'),
    constraintType?: string(name='ConstraintType', description='The type of the constraint.

The value is fixed as Launch, which indicates the launch constraint.', example='Launch'),
    createTime?: string(name='CreateTime', description='The time when the constraint was created.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-04-12T06:11:26Z'),
    description?: string(name='Description', description='The description of the constraint.', example='Launch as local role TestRole'),
    portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio to which the constraint belongs.', example='port-bp1yt7582g****'),
    productId?: string(name='ProductId', description='The ID of the product for which the constraint is created.', example='prod-bp18r7q127****'),
    productName?: string(name='ProductName', description='The name of the product.', example='DEMO-Create an ECS instance'),
  }(name='ConstraintDetail', description='The details of the constraint.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model GetConstraintResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetConstraintResponseBody(name='body'),
}

async function getConstraintWithOptions(request: GetConstraintRequest, runtime: Util.RuntimeOptions): GetConstraintResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.constraintId)) {
    query['ConstraintId'] = request.constraintId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetConstraint',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getConstraint(request: GetConstraintRequest): GetConstraintResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConstraintWithOptions(request, runtime);
}

model GetPortfolioRequest {
  portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****'),
}

model GetPortfolioResponseBody = {
  portfolioDetail?: {
    createTime?: string(name='CreateTime', description='The time when the product portfolio is created.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-04-12T06:11:12Z'),
    description?: string(name='Description', description='The description of the product portfolio.', example='The description of the product portfolio.'),
    portfolioArn?: string(name='PortfolioArn', description='The Alibaba Cloud Resource Name (ARN) of the product portfolio.', example='acs:servicecatalog:cn-hangzhou:146611588617****:portfolio/port-bp1yt7582g****'),
    portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****'),
    portfolioName?: string(name='PortfolioName', description='The name of the product portfolio.', example='DEMO-IT services'),
    providerName?: string(name='ProviderName', description='The provider of the product portfolio.', example='IT team'),
  }(name='PortfolioDetail', description='The details of the product portfolio.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model GetPortfolioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPortfolioResponseBody(name='body'),
}

async function getPortfolioWithOptions(request: GetPortfolioRequest, runtime: Util.RuntimeOptions): GetPortfolioResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.portfolioId)) {
    query['PortfolioId'] = request.portfolioId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPortfolio',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPortfolio(request: GetPortfolioRequest): GetPortfolioResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPortfolioWithOptions(request, runtime);
}

model GetProductAsAdminRequest {
  productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
}

model GetProductAsAdminResponseBody = {
  productDetail?: {
    createTime?: string(name='CreateTime', description='The time when the product is created.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-04-12T06:10:37Z'),
    description?: string(name='Description', description='The description of the product.', example='The description of the product.'),
    productArn?: string(name='ProductArn', description='The Alibaba Cloud Resource Name (ARN) of the product.', example='acs:servicecatalog:cn-hangzhou:146611588617****:product/prod-bp18r7q127****'),
    productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
    productName?: string(name='ProductName', description='The name of the product.', example='DEMO-Create an ECS instance'),
    productType?: string(name='ProductType', description='The type of the product.

The value is fixed as Ros, which indicates Resource Orchestration Service (ROS).', example='Ros'),
    providerName?: string(name='ProviderName', description='The provider of the product.', example='IT team'),
  }(name='ProductDetail', description='The information about the product.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model GetProductAsAdminResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProductAsAdminResponseBody(name='body'),
}

async function getProductAsAdminWithOptions(request: GetProductAsAdminRequest, runtime: Util.RuntimeOptions): GetProductAsAdminResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.productId)) {
    query['ProductId'] = request.productId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProductAsAdmin',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getProductAsAdmin(request: GetProductAsAdminRequest): GetProductAsAdminResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProductAsAdminWithOptions(request, runtime);
}

model GetProductAsEndUserRequest {
  productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
}

model GetProductAsEndUserResponseBody = {
  productSummary?: {
    createTime?: string(name='CreateTime', description='The time when the product is created.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-04-12T06:10:37Z'),
    description?: string(name='Description', description='The description of the product.', example='This is a product description.'),
    hasDefaultLaunchOption?: boolean(name='HasDefaultLaunchOption', description='Indicates whether the default launch option exists. Valid values:

*   true: The default launch option exists. In this case, the PortfolioId parameter is not required when the product is launched or when the information about the product instance is updated.
*   false: The default launch option does not exist. In this case, the PortfolioId parameter is required when the product is launched or when the information about the product instance is updated. For more information about how to obtain the value of the PortfolioId parameter, see [ListLaunchOptions](~~ListLaunchOptions~~).

>  If the product is added to only one product portfolio, the default launch option exists. If the product is added to multiple product portfolios, multiple launch options exist at the same time. However, no default launch options exist.', example='true'),
    productArn?: string(name='ProductArn', description='The Alibaba Cloud Resource Name (ARN) of the product.', example='acs:servicecatalog:cn-hangzhou:146611588617****:product/prod-bp18r7q127****'),
    productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
    productName?: string(name='ProductName', description='The name of the product.', example='DEMO-Create an ECS instance'),
    productType?: string(name='ProductType', description='The type of the product.

The value is fixed as Ros, which indicates Resource Orchestration Service (ROS).', example='Ros'),
    providerName?: string(name='ProviderName', description='The provider of the product.', example='IT team'),
  }(name='ProductSummary', description='The information about the product.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model GetProductAsEndUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProductAsEndUserResponseBody(name='body'),
}

/**
  * Make sure that the administrator grants the end user the permissions to manage the product. For more information, see [Grant the end user the permissions to access the product](~~405233~~).
  *
  * @param request GetProductAsEndUserRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetProductAsEndUserResponse
 */
async function getProductAsEndUserWithOptions(request: GetProductAsEndUserRequest, runtime: Util.RuntimeOptions): GetProductAsEndUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.productId)) {
    query['ProductId'] = request.productId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProductAsEndUser',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Make sure that the administrator grants the end user the permissions to manage the product. For more information, see [Grant the end user the permissions to access the product](~~405233~~).
  *
  * @param request GetProductAsEndUserRequest
  * @return GetProductAsEndUserResponse
 */
async function getProductAsEndUser(request: GetProductAsEndUserRequest): GetProductAsEndUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProductAsEndUserWithOptions(request, runtime);
}

model GetProductVersionRequest {
  productVersionId?: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****'),
}

model GetProductVersionResponseBody = {
  productVersionDetail?: {
    active?: boolean(name='Active', description='Indicates whether the product version is visible to end users. Valid values:

*   true: The product version is visible to end users. This is the default value.
*   false: The product version is invisible to end users.', example='true'),
    createTime?: string(name='CreateTime', description='The time when the product version is created.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-04-12T06:10:37Z'),
    description?: string(name='Description', description='The description of the product version.', example='The description of the product version.'),
    guidance?: string(name='Guidance', description='The recommendation information. Valid values:

*   Default: No recommendation information is provided. This is the default value.
*   Recommended: the recommendation version.
*   Latest: the latest version.
*   Deprecated: the version that is about to be deprecated.', example='Default'),
    productId?: string(name='ProductId', description='The ID of the product to which the product version belongs.', example='prod-bp18r7q127****'),
    productVersionId?: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****'),
    productVersionName?: string(name='ProductVersionName', description='The name of the product version.', example='1.0'),
    templateType?: string(name='TemplateType', description='The type of the template.

The value is fixed as RosTerraformTemplate, which indicates that the Terraform template is supported by Resource Orchestration Service (ROS).', example='RosTerraformTemplate'),
    templateUrl?: string(name='TemplateUrl', description='The URL of the template.', example='oss://servicecatalog-cn-hangzhou/146611588617****/terraform/template/tpl-bp1217we23****/template.json'),
  }(name='ProductVersionDetail', description='The details of the product version.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model GetProductVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProductVersionResponseBody(name='body'),
}

async function getProductVersionWithOptions(request: GetProductVersionRequest, runtime: Util.RuntimeOptions): GetProductVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.productVersionId)) {
    query['ProductVersionId'] = request.productVersionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProductVersion',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getProductVersion(request: GetProductVersionRequest): GetProductVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProductVersionWithOptions(request, runtime);
}

model GetProvisionedProductRequest {
  provisionedProductId?: string(name='ProvisionedProductId', description='The ID of the product instance.', example='pp-bp1ddg1n2a****'),
}

model GetProvisionedProductResponseBody = {
  provisionedProductDetail?: {
    createTime?: string(name='CreateTime', description='The time when the product instance is created.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-05-23T09:46:27Z'),
    lastProvisioningTaskId?: string(name='LastProvisioningTaskId', description='The ID of the task that is last run on the product instance.

The task can be one of the following types:

*   LaunchProduct: launches the product.
*   UpdateProvisionedProduct: updates the information about the product instance.
*   TerminateProvisionedProduct: terminates the product instance.', example='task-bp1dmg242c****'),
    lastSuccessfulProvisioningTaskId?: string(name='LastSuccessfulProvisioningTaskId', description='The ID of the last task successfully run on the product instance.

The task can be one of the following types:

*   LaunchProduct: launches the product.
*   UpdateProvisionedProduct: updates the information about the product instance.
*   TerminateProvisionedProduct: terminates the product instance.', example='task-bp1dmg242c****'),
    lastTaskId?: string(name='LastTaskId', description='The ID of the task that is last run.', example='task-bp1dmg242c****'),
    ownerPrincipalId?: string(name='OwnerPrincipalId', description='The ID of the RAM entity to which the product instance belongs.', example='24477111603637****'),
    ownerPrincipalType?: string(name='OwnerPrincipalType', description='The type of the Resource Access Management (RAM) entity to which the product instance belongs. Valid values:

*   RamUser: a RAM user
*   RamRole: a RAM role', example='RamUser'),
    portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****'),
    productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
    productName?: string(name='ProductName', description='The name of the product.', example='DEMO-Create an ECS instance'),
    productVersionId?: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****'),
    productVersionName?: string(name='ProductVersionName', description='The name of the product version.', example='1.0'),
    provisionedProductArn?: string(name='ProvisionedProductArn', description='The Alibaba Cloud Resource Name (ARN) of the product instance.', example='acs:servicecatalog:cn-hangzhou:146611588617****:provisionedproduct/pp-bp1ddg1n2a****'),
    provisionedProductId?: string(name='ProvisionedProductId', description='The ID of the product instance.', example='pp-bp1ddg1n2a****'),
    provisionedProductName?: string(name='ProvisionedProductName', description='The name of the product instance.', example='DEMO-ECS instance'),
    provisionedProductType?: string(name='ProvisionedProductType', description='The type of the product instance.

The value is fixed as RosStack, which indicates a ROS stack.', example='RosStack'),
    stackId?: string(name='StackId', description='The ID of the Resource Orchestration Service (ROS) stack.', example='137e31df-3754-40b4-be2f-c793ad84****'),
    stackRegionId?: string(name='StackRegionId', description='The ID of the region to which the ROS stack belongs.', example='cn-hangzhou'),
    status?: string(name='Status', description='The state of the product instance. Valid values:

*   Available: The product instance is available.
*   UnderChange: The information about the product instance is being changed.
*   Error: An exception occurred on the product instance.', example='Available'),
    statusMessage?: string(name='StatusMessage', description='The message that is returned for the state.

>  This parameter is returned only when Error is returned for the Status parameter.', example='Resource CREATE failed: terraform stack sc-146611588617****-pp-bp1ddg1n2a**** failure...'),
  }(name='ProvisionedProductDetail', description='The details of the product instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model GetProvisionedProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProvisionedProductResponseBody(name='body'),
}

async function getProvisionedProductWithOptions(request: GetProvisionedProductRequest, runtime: Util.RuntimeOptions): GetProvisionedProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.provisionedProductId)) {
    query['ProvisionedProductId'] = request.provisionedProductId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProvisionedProduct',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getProvisionedProduct(request: GetProvisionedProductRequest): GetProvisionedProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProvisionedProductWithOptions(request, runtime);
}

model GetProvisionedProductPlanRequest {
  planId?: string(name='PlanId', description='The ID of the plan.', example='plan-bp1jvmdk2k****'),
}

model GetProvisionedProductPlanResponseBody = {
  planDetail?: {
    approvalDetail?: {
      operationRecords?: [ 
        {
          approvalAction?: string(name='ApprovalAction'),
          comment?: string(name='Comment'),
          createTime?: string(name='CreateTime'),
          operator?: {
            principalId?: string(name='PrincipalId'),
            principalName?: string(name='PrincipalName'),
            principalType?: string(name='PrincipalType'),
          }(name='Operator'),
        }
      ](name='OperationRecords'),
      todoTaskActivities?: [ 
        {
          activityName?: string(name='ActivityName'),
          tasks?: [ 
            {
              operator?: {
                principalName?: string(name='PrincipalName'),
                principalType?: string(name='PrincipalType'),
              }(name='Operator'),
            }
          ](name='Tasks'),
        }
      ](name='TodoTaskActivities'),
    }(name='ApprovalDetail'),
    assignedApprovers?: [ 
      {
        principalName?: string(name='PrincipalName'),
        principalType?: string(name='PrincipalType'),
      }
    ](name='AssignedApprovers'),
    createTime?: string(name='CreateTime', description='The time when the plan is created.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-05-23T09:46:27Z'),
    description?: string(name='Description'),
    operationType?: string(name='OperationType'),
    ownerPrincipalId?: string(name='OwnerPrincipalId'),
    ownerPrincipalName?: string(name='OwnerPrincipalName'),
    ownerPrincipalType?: string(name='OwnerPrincipalType'),
    parameters?: [ 
      {
        parameterKey?: string(name='ParameterKey', description='The name of the parameter in the template.', example='instance_type'),
        parameterValue?: string(name='ParameterValue', description='The value of the parameter in the template.', example='ecs.s6-c1m1.small'),
      }
    ](name='Parameters', description='An array that consists of the parameters in the template. The parameters are specified by the administrator.'),
    planId?: string(name='PlanId', description='The ID of the plan.', example='plan-bp1jvmdk2k****'),
    planName?: string(name='PlanName', description='The name of the plan.', example='DEMO-ECS instance'),
    planType?: string(name='PlanType', description='The type of the plan.

The value is fixed as Ros, which indicates Resource Orchestration Service (ROS).', example='Ros'),
    portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****'),
    productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
    productVersionId?: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****'),
    provisionedProductId?: string(name='ProvisionedProductId', description='The ID of the product instance.', example='pp-bp1ddg1n2a****'),
    provisionedProductName?: string(name='ProvisionedProductName', description='The name of the product instance.', example='DEMO-ECS instance'),
    stackId?: string(name='StackId', description='The ID of the ROS stack.', example='137e31df-3754-40b4-be2f-c793ad84****'),
    stackRegionId?: string(name='StackRegionId', description='The ID of the region to which the ROS stack belongs.', example='cn-hangzhou'),
    status?: string(name='Status', description='The state of the plan. Valid values:

*   PreviewInProgress: The plan is being prechecked.
*   PreviewSuccess: The precheck is successful.
*   PreviewFailed: The precheck fails.
*   ExecuteInProgress: The plan is being run.
*   ExecuteSuccess: The plan is run.
*   ExecuteFailed: The plan fails to be run.', example='PreviewSuccess'),
    statusMessage?: string(name='StatusMessage', description='The message returned for the state.

> : This parameter is returned only when PreviewFailed or ExecuteFailed is returned for the Status parameter.', example='Create stack failed: Resource CREATE failed: terraform stack sc-146611588617****-pp-bp1ddg1n2a**** failure...'),
    tags?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Tags'),
    uid?: string(name='Uid'),
    updateTime?: string(name='UpdateTime', description='The last time when the task is modified.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-05-23T09:47:29Z'),
  }(name='PlanDetail', description='The details of the plan.'),
  productDetail?: {
    createTime?: string(name='CreateTime'),
    description?: string(name='Description'),
    productArn?: string(name='ProductArn'),
    productId?: string(name='ProductId'),
    productName?: string(name='ProductName'),
    productType?: string(name='ProductType'),
    providerName?: string(name='ProviderName'),
  }(name='ProductDetail'),
  productVersionDetail?: {
    active?: boolean(name='Active'),
    createTime?: string(name='CreateTime'),
    description?: string(name='Description'),
    guidance?: string(name='Guidance'),
    productId?: string(name='ProductId'),
    productVersionId?: string(name='ProductVersionId'),
    productVersionName?: string(name='ProductVersionName'),
    templateType?: string(name='TemplateType'),
    templateUrl?: string(name='TemplateUrl'),
  }(name='ProductVersionDetail'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
  resourceChanges?: [ 
    {
      action?: string(name='Action'),
      logicalResourceId?: string(name='LogicalResourceId'),
      physicalResourceId?: string(name='PhysicalResourceId'),
      replacement?: string(name='Replacement'),
      resourceType?: string(name='ResourceType'),
    }
  ](name='ResourceChanges'),
}

model GetProvisionedProductPlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProvisionedProductPlanResponseBody(name='body'),
}

async function getProvisionedProductPlanWithOptions(request: GetProvisionedProductPlanRequest, runtime: Util.RuntimeOptions): GetProvisionedProductPlanResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.planId)) {
    body['PlanId'] = request.planId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetProvisionedProductPlan',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getProvisionedProductPlan(request: GetProvisionedProductPlanRequest): GetProvisionedProductPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProvisionedProductPlanWithOptions(request, runtime);
}

model GetTaskRequest {
  taskId?: string(name='TaskId', description='The ID of the task.', example='task-bp1dmg242c****'),
}

model GetTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
  taskDetail?: {
    createTime?: string(name='CreateTime', description='The time when the task was created.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-05-23T09:46:27Z'),
    log?: {
      terraformLogs?: [ 
        {
          command?: string(name='Command', description='The name of the Terraform command. Valid values:

*   apply
*   plan
*   destroy
*   version

For more information about Terraform commands, see [Basic CLI Features](https://www.terraform.io/cli/commands).', example='apply'),
          content?: string(name='Content', description='The content of the output stream that is returned after you run the command.', example='Apply complete! Resources: 42 added, 0 changed, 0 destroyed.'),
          stream?: string(name='Stream', description='The output stream. Valid values:

*   stdout: a standard output stream
*   stderr: a standard error stream', example='stdout'),
        }
      ](name='TerraformLogs', description='An array that consists of Terraform logs.'),
    }(name='Log', description='The logs of the product instance.'),
    outputs?: [ 
      {
        description?: string(name='Description', description='The description of the parameter that is specified in the output of the template.', example='The ECS instance ID.'),
        outputKey?: string(name='OutputKey', description='The name of the parameter that is specified in the output of the template.', example='instance_id'),
        outputValue?: string(name='OutputValue', description='The value of the parameter that is specified in the output of the template.', example='i-xxxxxx'),
      }
    ](name='Outputs', description='An array that consists of the parameters specified in the output of the template.'),
    parameters?: [ 
      {
        parameterKey?: string(name='ParameterKey', description='The name of the parameter in the template.', example='instance_type'),
        parameterValue?: string(name='ParameterValue', description='The value of the parameter in the template.', example='ecs.s6-c1m1.small'),
      }
    ](name='Parameters', description='An array that consists of the parameters in the template.'),
    portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****'),
    productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
    productName?: string(name='ProductName', description='The name of the product.', example='DEMO-Create an ECS instance.'),
    productVersionId?: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****'),
    productVersionName?: string(name='ProductVersionName', description='The name for the version of the product.', example='1.0'),
    provisionedProductId?: string(name='ProvisionedProductId', description='The ID of the product instance.', example='pp-bp1ddg1n2a****'),
    provisionedProductName?: string(name='ProvisionedProductName', description='The name of the product instance.', example='DEMO-ECS instance'),
    status?: string(name='Status', description='The status of the task. Valid values:

*   Succeeded: The task was successful.
*   InProgress: The task is in progress.
*   Failed: The task failed.', example='Succeeded'),
    statusMessage?: string(name='StatusMessage', description='The message that is returned for the state.

> This parameter is returned only when Failed is returned for the Status parameter.', example='Resource CREATE failed: terraform stack sc-146611588617****-pp-bp1ddg1n2a**** failure...'),
    taskId?: string(name='TaskId', description='The ID of the task.', example='task-bp1dmg242c****'),
    taskTags?: [ 
      {
        key?: string(name='Key', description='The tag key of the custom tag.

The tag key can be up to 128 characters in length, and cannot start with `acs:` or `aliyun`. The tag key cannot contain `http://` or `https://`.', example='k1'),
        value?: string(name='Value', description='The tag value of the custom tag.

The tag value can be up to 128 characters in length, and cannot start with `acs:`. The tag value cannot contain `http://` or `https://`.', example='v1'),
      }
    ](name='TaskTags', description='An array consisting of custom tags that are specified by the end user.'),
    taskType?: string(name='TaskType', description='The type of the task. Valid values:

*   LaunchProduct: launches the product.
*   UpdateProvisionedProduct: updates the information about the product instance.
*   TerminateProvisionedProduct: terminates the product instance.', example='LaunchProduct'),
    updateTime?: string(name='UpdateTime', description='The time when the task was last modified.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-05-23T09:47:29Z'),
  }(name='TaskDetail', description='The details of the download task.'),
}

model GetTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTaskResponseBody(name='body'),
}

async function getTaskWithOptions(request: GetTaskRequest, runtime: Util.RuntimeOptions): GetTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTask',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTask(request: GetTaskRequest): GetTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTaskWithOptions(request, runtime);
}

model GetTemplateRequest {
  productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
  productVersionId?: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****'),
}

model GetTemplateResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
  templateBody?: string(name='TemplateBody', description='The content of the template.

For more information about the template syntax, see [Structure of Terraform templates](~~184397~~).', example='{
  "ROSTemplateFormatVersion": "2015-09-01",
  "Transform": "Aliyun::Terraform-v1.1",
  "Workspace": {
    "main.tf": "variable  \\"name\\" {  default = \\"auto_provisioning_group\\"}"
  },
  "Outputs": {}
}'),
}

model GetTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTemplateResponseBody(name='body'),
}

async function getTemplateWithOptions(request: GetTemplateRequest, runtime: Util.RuntimeOptions): GetTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.productId)) {
    query['ProductId'] = request.productId;
  }
  if (!Util.isUnset(request.productVersionId)) {
    query['ProductVersionId'] = request.productVersionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTemplate',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTemplate(request: GetTemplateRequest): GetTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTemplateWithOptions(request, runtime);
}

model LaunchProductRequest {
  parameters?: [ 
    {
      parameterKey?: string(name='ParameterKey', description='The name of the parameter in the template.', example='instance_type'),
      parameterValue?: string(name='ParameterValue', description='The value of the parameter in the template.', example='ecs.s6-c1m1.small'),
    }
  ](name='Parameters', description='An array that consists of the parameters in the template. The parameters are specified by the administrator.

You can specify up to 200 parameters.

>  This parameter is optional. If you specify the Parameters parameter, you must specify the ParameterKey and ParameterValue parameters.'),
  portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.

>  If the PortfolioId parameter is not required, you do not need to specify the PortfolioId parameter. If the PortfolioId parameter is required, you must specify the PortfolioId parameter. For more information about how to obtain the value of the PortfolioId parameter, see [ListLaunchOptions](~~ListLaunchOptions~~).', example='port-bp1yt7582g****'),
  productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
  productVersionId?: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****'),
  provisionedProductName?: string(name='ProvisionedProductName', description='The name of the product instance.

The value must be 1 to 128 characters in length.', example='DEMO-ECS instance'),
  stackRegionId?: string(name='StackRegionId', description='The ID of the region to which the Resource Orchestration Service (ROS) stack belongs.

For more information about how to obtain the regions that are supported by ROS, see [DescribeRegions](~~131035~~).', example='cn-hangzhou'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
}

model LaunchProductResponseBody = {
  provisionedProductId?: string(name='ProvisionedProductId', description='The ID of the product instance.', example='pp-bp1ddg1n2a****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model LaunchProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LaunchProductResponseBody(name='body'),
}

async function launchProductWithOptions(request: LaunchProductRequest, runtime: Util.RuntimeOptions): LaunchProductResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.parameters)) {
    body['Parameters'] = request.parameters;
  }
  if (!Util.isUnset(request.portfolioId)) {
    body['PortfolioId'] = request.portfolioId;
  }
  if (!Util.isUnset(request.productId)) {
    body['ProductId'] = request.productId;
  }
  if (!Util.isUnset(request.productVersionId)) {
    body['ProductVersionId'] = request.productVersionId;
  }
  if (!Util.isUnset(request.provisionedProductName)) {
    body['ProvisionedProductName'] = request.provisionedProductName;
  }
  if (!Util.isUnset(request.stackRegionId)) {
    body['StackRegionId'] = request.stackRegionId;
  }
  if (!Util.isUnset(request.tags)) {
    body['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'LaunchProduct',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function launchProduct(request: LaunchProductRequest): LaunchProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return launchProductWithOptions(request, runtime);
}

model ListPortfoliosRequest {
  filters?: [ 
    {
      key?: string(name='Key', description='The name of the filter condition. Valid values:

*   PortfolioName: performs exact matches by product portfolio name. Product portfolio names are not case-sensitive.
*   FullTextSearch: performs full-text searches by product portfolio name, product portfolio provider, or product portfolio description. Fuzzy match is supported.', example='PortfolioName'),
      value?: string(name='Value', description='The value of the filter condition.', example='DEMO-IT services'),
    }
  ](name='Filters', description='The filter condition.'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Minimum value: 1. Default value: 10.', example='10'),
  productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
  scope?: string(name='Scope', description='The query scope. Valid values:

*   Local: the product portfolios that are created by using the current account. This is the default value.
*   Import: the product portfolios that are imported from other accounts.
*   All: All available product portfolios.', example='Local'),
  sortBy?: string(name='SortBy', description='The field that is used to sort the queried data.

The value is fixed as CreateTime, which specifies the creation time of product portfolios.', example='CreateTime'),
  sortOrder?: string(name='SortOrder', description='The order in which you want to sort the queried data. Valid values:

*   Asc: the ascending order
*   Desc: the descending order', example='Desc'),
}

model ListPortfoliosResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  portfolioDetails?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the product portfolio is created.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-04-12T06:11:12Z'),
      description?: string(name='Description', description='The description of the product portfolio.', example='The description of the product portfolio.'),
      portfolioArn?: string(name='PortfolioArn', description='The Alibaba Cloud Resource Name (ARN) of the product portfolio.', example='acs:servicecatalog:cn-hangzhou:146611588617****:portfolio/port-bp1yt7582g****'),
      portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****'),
      portfolioName?: string(name='PortfolioName', description='The name of the product portfolio.', example='DEMO-IT services'),
      providerName?: string(name='ProviderName', description='The provider of the product portfolio.', example='IT team'),
    }
  ](name='PortfolioDetails', description='An array that consists of the product portfolios.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListPortfoliosResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPortfoliosResponseBody(name='body'),
}

async function listPortfoliosWithOptions(request: ListPortfoliosRequest, runtime: Util.RuntimeOptions): ListPortfoliosResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filters)) {
    query['Filters'] = request.filters;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productId)) {
    query['ProductId'] = request.productId;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.sortOrder)) {
    query['SortOrder'] = request.sortOrder;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPortfolios',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPortfolios(request: ListPortfoliosRequest): ListPortfoliosResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPortfoliosWithOptions(request, runtime);
}

model ListPrincipalsRequest {
  portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****'),
}

model ListPrincipalsResponseBody = {
  principals?: [ 
    {
      principalId?: string(name='PrincipalId', description='The ID of the RAM entity.', example='24477111603637****'),
      principalType?: string(name='PrincipalType', description='The type of the RAM entity. Valid values:

*   RamUser: a RAM user
*   RamRole: a RAM role', example='RamUser'),
    }
  ](name='Principals', description='An array that consists of RAM entities.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model ListPrincipalsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPrincipalsResponseBody(name='body'),
}

async function listPrincipalsWithOptions(request: ListPrincipalsRequest, runtime: Util.RuntimeOptions): ListPrincipalsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.portfolioId)) {
    query['PortfolioId'] = request.portfolioId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPrincipals',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPrincipals(request: ListPrincipalsRequest): ListPrincipalsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPrincipalsWithOptions(request, runtime);
}

model ListProductVersionsRequest {
  productId?: string(name='ProductId', description='The ID of the product to which the product version belongs.', example='prod-bp18r7q127****'),
}

model ListProductVersionsResponseBody = {
  productVersionDetails?: [ 
    {
      active?: boolean(name='Active', description='Indicates whether the product version is visible to end users. Valid values:

true: The product version is visible to end users. This is the default value. false: The product version is invisible to end users.', example='true'),
      createTime?: string(name='CreateTime', description='The time when the product version is created.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-04-12T06:10:37Z'),
      description?: string(name='Description', description='The description of the product version.', example='The description of the product version.'),
      guidance?: string(name='Guidance', description='The recommendation information. Valid values:

*   Default: No recommendation information is provided. This is the default value.
*   Recommended: the recommendation version.
*   Latest: the latest version.
*   Deprecated: the version that is about to be deprecated.', example='Default'),
      productId?: string(name='ProductId', description='The ID of the product to which the product version belongs.', example='prod-bp18r7q127****'),
      productVersionId?: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****'),
      productVersionName?: string(name='ProductVersionName', description='The name of the product version.', example='1.0'),
      templateType?: string(name='TemplateType', description='The type of the template.

The value is fixed as RosTerraformTemplate, which indicates that the Terraform template is supported by Resource Orchestration Service (ROS).', example='RosTerraformTemplate'),
      templateUrl?: string(name='TemplateUrl', description='The URL of the template.', example='oss://servicecatalog-cn-hangzhou/146611588617****/terraform/template/tpl-bp1217we23****/template.json'),
    }
  ](name='ProductVersionDetails', description='An array that consists of the product versions.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model ListProductVersionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProductVersionsResponseBody(name='body'),
}

async function listProductVersionsWithOptions(request: ListProductVersionsRequest, runtime: Util.RuntimeOptions): ListProductVersionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.productId)) {
    query['ProductId'] = request.productId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProductVersions',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProductVersions(request: ListProductVersionsRequest): ListProductVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProductVersionsWithOptions(request, runtime);
}

model ListProductsAsAdminRequest {
  filters?: [ 
    {
      key?: string(name='Key', description='The name of the filter condition. Valid values:

*   ProductName: performs exact matches by product name. Product names are not case-sensitive.
*   FullTextSearch: performs full-text searches by product name, product provider, or product description. Fuzzy match is supported.', example='ProductName'),
      value?: string(name='Value', description='The value of the filter condition.', example='DEMO-Create an ECS instance.'),
    }
  ](name='Filters', description='An array that consists of filter conditions.'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.

Valid values: 1 to 100. Pages start from page 1. Default value: 10.', example='10'),
  portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****'),
  scope?: string(name='Scope', description='The query scope. Valid values:

*   Local: the products that are created by using the current account. This is the default value.
*   Import: the products that are imported from other accounts.
*   All: all available products.', example='Local'),
  sortBy?: string(name='SortBy', description='The information based on which you want to sort the products.

The value is fixed as CreateTime, which specifies the creation time of products.', example='CreateTime'),
  sortOrder?: string(name='SortOrder', description='The order in which you want to sort the query results. Valid values:

*   Asc: the ascending order
*   Desc: the descending order', example='Desc'),
}

model ListProductsAsAdminResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  productDetails?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the product was created.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-04-12T06:10:37Z'),
      description?: string(name='Description', description='The description of the product.', example='This is a product description.'),
      productArn?: string(name='ProductArn', description='The Alibaba Cloud Resource Name (ARN) of the product.', example='acs:servicecatalog:cn-hangzhou:146611588617****:product/prod-bp18r7q127****'),
      productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
      productName?: string(name='ProductName', description='The name of the product.', example='DEMO-Create an ECS instance.'),
      productType?: string(name='ProductType', description='The type of the product.

The value is fixed as Ros, which specifies Resource Orchestration Service (ROS).', example='Ros'),
      providerName?: string(name='ProviderName', description='The provider of the product.', example='IT team'),
    }
  ](name='ProductDetails', description='An array that consists of products.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListProductsAsAdminResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProductsAsAdminResponseBody(name='body'),
}

async function listProductsAsAdminWithOptions(request: ListProductsAsAdminRequest, runtime: Util.RuntimeOptions): ListProductsAsAdminResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filters)) {
    query['Filters'] = request.filters;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.portfolioId)) {
    query['PortfolioId'] = request.portfolioId;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.sortOrder)) {
    query['SortOrder'] = request.sortOrder;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProductsAsAdmin',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProductsAsAdmin(request: ListProductsAsAdminRequest): ListProductsAsAdminResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProductsAsAdminWithOptions(request, runtime);
}

model ListProductsAsEndUserRequest {
  filters?: [ 
    {
      key?: string(name='Key', description='The name of the filter condition. Valid values:

*   ProductName: performs exact matches by product name. Product names are not case-sensitive.
*   FullTextSearch: performs full-text searches by product name, product provider, or product description. Fuzzy match is supported.', example='ProductName'),
      value?: string(name='Value', description='The value of the filter condition.', example='DEMO-Create an ECS instance'),
    }
  ](name='Filters', description='An array that consists of filter conditions.'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Minimum value: 1. Default value: 10.', example='10'),
  sortBy?: string(name='SortBy', description='The field that is used to sort the queried data.

The value is fixed as CreateTime, which specifies the creation time of products.', example='CreateTime'),
  sortOrder?: string(name='SortOrder', description='The order in which you want to sort the queried data. Valid values:

*   Asc: the ascending order
*   Desc: the descending order', example='Desc'),
}

model ListProductsAsEndUserResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  productSummaries?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the product is created.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-04-12T06:10:37Z'),
      description?: string(name='Description', description='The description of the product.', example='This is a product description.'),
      hasDefaultLaunchOption?: boolean(name='HasDefaultLaunchOption', description='Indicates whether the default launch option exists. Valid values:

*   true: The default launch option exists. In this case, the PortfolioId parameter is not required when the product is launched or when the information about the product instance is updated.
*   false: The default launch option does not exist. In this case, the PortfolioId parameter is required when the product is launched or when the information about the product instance is updated. For more information about how to obtain the value of the PortfolioId parameter, see [ListLaunchOptions](~~ListLaunchOptions~~).

>  If the product is added to only one product portfolio, the default launch option exists. If the product is added to multiple product portfolios, multiple launch options exist at the same time. However, no default launch options exist.', example='true'),
      productArn?: string(name='ProductArn', description='The Alibaba Cloud Resource Name (ARN) of the product.', example='acs:servicecatalog:cn-hangzhou:146611588617****:product/prod-bp18r7q127****'),
      productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
      productName?: string(name='ProductName', description='The name of the product.', example='DEMO-Create an ECS instance.'),
      productType?: string(name='ProductType', description='The type of the product.

The value is fixed as Ros, which indicates Resource Orchestration Service (ROS).', example='Ros'),
      providerName?: string(name='ProviderName', description='The provider of the product.', example='IT team'),
    }
  ](name='ProductSummaries', description='An array that consists of products.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
  totalCount?: int32(name='TotalCount', description='The total number of returned rows.', example='100'),
}

model ListProductsAsEndUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProductsAsEndUserResponseBody(name='body'),
}

/**
  * Make sure that the administrator grants the end user the permissions to manage the product. For more information, see [Grant the end user the permissions to access the product](~~405233~~).
  *
  * @param request ListProductsAsEndUserRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListProductsAsEndUserResponse
 */
async function listProductsAsEndUserWithOptions(request: ListProductsAsEndUserRequest, runtime: Util.RuntimeOptions): ListProductsAsEndUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filters)) {
    query['Filters'] = request.filters;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.sortOrder)) {
    query['SortOrder'] = request.sortOrder;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProductsAsEndUser',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Make sure that the administrator grants the end user the permissions to manage the product. For more information, see [Grant the end user the permissions to access the product](~~405233~~).
  *
  * @param request ListProductsAsEndUserRequest
  * @return ListProductsAsEndUserResponse
 */
async function listProductsAsEndUser(request: ListProductsAsEndUserRequest): ListProductsAsEndUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProductsAsEndUserWithOptions(request, runtime);
}

model ListProvisionedProductPlanApproversRequest {
  accessLevelFilter?: string(name='AccessLevelFilter', example='User'),
  approvalFilter?: string(name='ApprovalFilter', example='AccountRequests'),
  filters?: [ 
    {
      key?: string(name='Key', example='ProvisionedProductPlanApproverName'),
      value?: string(name='Value', example='approver'),
    }
  ](name='Filters'),
}

model ListProvisionedProductPlanApproversResponseBody = {
  approvers?: [ 
    {
      principalName?: string(name='PrincipalName', example='approver-1'),
      principalType?: string(name='PrincipalType', example='RamUser'),
    }
  ](name='Approvers'),
  requestId?: string(name='RequestId', example='0FEEF92D-4052-5202-87D0-3D8EC16F****'),
}

model ListProvisionedProductPlanApproversResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProvisionedProductPlanApproversResponseBody(name='body'),
}

async function listProvisionedProductPlanApproversWithOptions(request: ListProvisionedProductPlanApproversRequest, runtime: Util.RuntimeOptions): ListProvisionedProductPlanApproversResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProvisionedProductPlanApprovers',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProvisionedProductPlanApprovers(request: ListProvisionedProductPlanApproversRequest): ListProvisionedProductPlanApproversResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProvisionedProductPlanApproversWithOptions(request, runtime);
}

model ListProvisionedProductPlansRequest {
  accessLevelFilter?: string(name='AccessLevelFilter', example='User'),
  approvalFilter?: string(name='ApprovalFilter', example='ReceivedRequests'),
  filters?: [ 
    {
      key?: string(name='Key', example='FullTextSearch'),
      value?: string(name='Value', example='ECS'),
    }
  ](name='Filters'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  provisionedProductId?: string(name='ProvisionedProductId', example='pp-bp1ddg1n2a****'),
  sortBy?: string(name='SortBy', example='CreateTime'),
  sortOrder?: string(name='SortOrder', example='Desc'),
}

model ListProvisionedProductPlansResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  planDetails?: [ 
    {
      assignedApprovers?: [ 
        {
          principalName?: string(name='PrincipalName', example='endUser'),
          principalType?: string(name='PrincipalType', example='RamUser'),
        }
      ](name='AssignedApprovers'),
      createTime?: string(name='CreateTime', example='2022-09-13T02:01:22Z'),
      description?: string(name='Description'),
      operationType?: string(name='OperationType', example='LaunchProduct'),
      ownerPrincipalId?: string(name='OwnerPrincipalId', example='24477111603637****'),
      ownerPrincipalName?: string(name='OwnerPrincipalName', example='enduser'),
      ownerPrincipalType?: string(name='OwnerPrincipalType', example='RamUser'),
      parameters?: [ 
        {
          parameterKey?: string(name='ParameterKey', example='role_name'),
          parameterValue?: string(name='ParameterValue', example='Test-8'),
        }
      ](name='Parameters'),
      planId?: string(name='PlanId', example='plan-bp18mmdh2u****'),
      planName?: string(name='PlanName'),
      planType?: string(name='PlanType', example='Ros'),
      portfolioId?: string(name='PortfolioId', example='port-bp1438kf2j****'),
      productId?: string(name='ProductId', example='prod-bp1rtrnh2c****'),
      productName?: string(name='ProductName'),
      productVersionId?: string(name='ProductVersionId', example='pv-bp19udk22v****'),
      provisionedProductId?: string(name='ProvisionedProductId', example='pp-bp1c35162d****'),
      provisionedProductName?: string(name='ProvisionedProductName', example='rds-MYSQL-875****'),
      stackId?: string(name='StackId', example='2599090a-309e-4306-b989-17ba66a9****'),
      stackRegionId?: string(name='StackRegionId', example='cn-hangzhou'),
      status?: string(name='Status', example='PreviewSuccess'),
      statusMessage?: string(name='StatusMessage', example='Create stack failed: Resource CREATE failed: terraform stack sc-146611588617****-pp-bp1ddg1n2a**** failure...'),
      tags?: [ 
        {
          key?: string(name='Key', example='k1'),
          value?: string(name='Value', example='v1'),
        }
      ](name='Tags'),
      uid?: string(name='Uid', example='146611588617****'),
      updateTime?: string(name='UpdateTime', example='2022-07-18T06:02:35.075Z'),
    }
  ](name='PlanDetails'),
  requestId?: string(name='RequestId', example='0FEEF92D-4052-5202-87D0-3D8EC16F****'),
  totalCount?: int32(name='TotalCount', example='16'),
}

model ListProvisionedProductPlansResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProvisionedProductPlansResponseBody(name='body'),
}

async function listProvisionedProductPlansWithOptions(request: ListProvisionedProductPlansRequest, runtime: Util.RuntimeOptions): ListProvisionedProductPlansResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessLevelFilter)) {
    query['AccessLevelFilter'] = request.accessLevelFilter;
  }
  if (!Util.isUnset(request.approvalFilter)) {
    query['ApprovalFilter'] = request.approvalFilter;
  }
  if (!Util.isUnset(request.filters)) {
    query['Filters'] = request.filters;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.provisionedProductId)) {
    query['ProvisionedProductId'] = request.provisionedProductId;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.sortOrder)) {
    query['SortOrder'] = request.sortOrder;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProvisionedProductPlans',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProvisionedProductPlans(request: ListProvisionedProductPlansRequest): ListProvisionedProductPlansResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProvisionedProductPlansWithOptions(request, runtime);
}

model ListProvisionedProductsRequest {
  accessLevelFilter?: string(name='AccessLevelFilter', description='The access filter. Valid values:

*   User: queries the product instances that are created by the current requester. This is the default value.
*   Account: queries the product instances that belong to the current Alibaba Cloud account.', example='User'),
  filters?: [ 
    {
      key?: string(name='Key', description='The name of the filter condition. Valid values:

*   ProvisionedProductName: performs exact matches by product instance name. Product instance names are not case-sensitive.
*   FullTextSearch: performs full-text searches by product instance name. Fuzzy match is supported.', example='ProvisionedProductName'),
      value?: string(name='Value', description='The value of the filter condition.', example='DEMO-ECS instance'),
    }
  ](name='Filters', description='The filter condition.'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Minimum value: 1. Default value: 10.', example='10'),
  sortBy?: string(name='SortBy', description='The field that is used to sort the queried data.

The value is fixed as CreateTime, which specifies the creation time of product instances.', example='CreateTime'),
  sortOrder?: string(name='SortOrder', description='The order in which you want to sort the queried data. Valid values:

*   Asc: the ascending order
*   Desc: the descending order', example='Desc'),
}

model ListProvisionedProductsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  provisionedProductDetails?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the product instance is created.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-05-23T09:46:27Z'),
      lastProvisioningTaskId?: string(name='LastProvisioningTaskId', description='The ID of the task that is last run on the product instance.

The task can be one of the following types:

*   LaunchProduct: launches the product.
*   UpdateProvisionedProduct: updates the information about the product instance.
*   TerminateProvisionedProduct: terminates the product instance.', example='task-bp1dmg242c****'),
      lastSuccessfulProvisioningTaskId?: string(name='LastSuccessfulProvisioningTaskId', description='The ID of the last task successfully run on the product instance.

The task can be one of the following types:

*   LaunchProduct: launches the product.
*   UpdateProvisionedProduct: updates the information about the product instance.
*   TerminateProvisionedProduct: terminates the product instance.', example='task-bp1dmg242c****'),
      lastTaskId?: string(name='LastTaskId', description='The ID of the task that is last run.', example='task-bp1dmg242c****'),
      ownerPrincipalId?: string(name='OwnerPrincipalId', description='The ID of the RAM entity to which the product instance belongs.', example='24477111603637****'),
      ownerPrincipalType?: string(name='OwnerPrincipalType', description='The type of the Resource Access Management (RAM) entity to which the product instance belongs. Valid values:

*   RamUser: a RAM user
*   RamRole: a RAM role', example='RamUser'),
      portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****'),
      productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
      productName?: string(name='ProductName', description='The name of the product.', example='DEMO-Create an ECS instance'),
      productVersionId?: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****'),
      productVersionName?: string(name='ProductVersionName', description='The name of the product version.', example='1.0'),
      provisionedProductArn?: string(name='ProvisionedProductArn', description='The Alibaba Cloud Resource Name (ARN) of the product instance.', example='acs:servicecatalog:cn-hangzhou:146611588617****:provisionedproduct/pp-bp1ddg1n2a****'),
      provisionedProductId?: string(name='ProvisionedProductId', description='The ID of the product instance.', example='pp-bp1ddg1n2a****'),
      provisionedProductName?: string(name='ProvisionedProductName', description='The name of the product instance.', example='DEMO-ECS instance'),
      provisionedProductType?: string(name='ProvisionedProductType', description='The type of the product instance.

The value is fixed as RosStack, which indicates a ROS stack.', example='RosStack'),
      stackId?: string(name='StackId', description='The ID of the Resource Orchestration Service (ROS) stack.', example='137e31df-3754-40b4-be2f-c793ad84****'),
      stackRegionId?: string(name='StackRegionId', description='The ID of the region to which the ROS stack belongs.', example='cn-hangzhou'),
      status?: string(name='Status', description='The state of the product instance. Valid values:

*   Available: The product instance is available.
*   UnderChange: The information about the product instance is being changed.
*   Error: An exception occurred on the product instance.', example='Available'),
      statusMessage?: string(name='StatusMessage', description='The description of the state.

>  This parameter is returned only when Error is returned for the Status parameter.', example='Resource CREATE failed: terraform stack sc-146611588617****-pp-bp1ddg1n2a**** failure...'),
    }
  ](name='ProvisionedProductDetails', description='An array that consists of product instances.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListProvisionedProductsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProvisionedProductsResponseBody(name='body'),
}

async function listProvisionedProductsWithOptions(request: ListProvisionedProductsRequest, runtime: Util.RuntimeOptions): ListProvisionedProductsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessLevelFilter)) {
    query['AccessLevelFilter'] = request.accessLevelFilter;
  }
  if (!Util.isUnset(request.filters)) {
    query['Filters'] = request.filters;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.sortOrder)) {
    query['SortOrder'] = request.sortOrder;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProvisionedProducts',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProvisionedProducts(request: ListProvisionedProductsRequest): ListProvisionedProductsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProvisionedProductsWithOptions(request, runtime);
}

model ListRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='The name of the region.', example='China (Hangzhou)'),
      regionEndpoint?: string(name='RegionEndpoint', description='The endpoint of the region.', example='servicecatalog.cn-hangzhou.aliyuncs.com'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    }
  ](name='Regions', description='An array that consists of regions.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegionsWithOptions(runtime: Util.RuntimeOptions): ListRegionsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListRegions',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRegions(): ListRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRegionsWithOptions(runtime);
}

model ListTasksRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Minimum value: 1. Default value: 10.', example='10'),
  provisionedProductId?: string(name='ProvisionedProductId', description='The ID of the product instance.', example='pp-bp1ddg1n2a****'),
  sortBy?: string(name='SortBy', description='The field that is used to sort the queried data.

The value is fixed as CreateTime, which specifies the creation time of tasks.', example='CreateTime'),
  sortOrder?: string(name='SortOrder', description='The order in which you want to sort the queried data. Valid values:

*   Asc: the ascending order
*   Desc: the descending order', example='Desc'),
}

model ListTasksResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
  taskDetails?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the task is created.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-05-23T09:46:27Z'),
      log?: {
        terraformLogs?: [ 
          {
            command?: string(name='Command', description='The name of the Terraform command. Valid values:

*   apply
*   plan
*   destroy
*   version

For more information about Terraform commands, see [Basic CLI Features](https://www.terraform.io/cli/commands).', example='apply'),
            content?: string(name='Content', description='The content of the output stream that is returned after you run the command.', example='Apply complete! Resources: 42 added, 0 changed, 0 destroyed.'),
            stream?: string(name='Stream', description='The output stream. Valid values:

*   stdout: a standard output stream
*   stderr: a standard error stream', example='stdout'),
          }
        ](name='TerraformLogs', description='An array that consists of Terraform logs.'),
      }(name='Log', description='The logs of the product instance.'),
      outputs?: [ 
        {
          description?: string(name='Description', description='The description of the parameter that is specified in the output of the template.', example='The ECS instance ID.'),
          outputKey?: string(name='OutputKey', description='The name of the parameter that is specified in the output of the template.', example='instance_id'),
          outputValue?: string(name='OutputValue', description='The value of the parameter that is specified in the output of the template.', example='i-xxxxxx'),
        }
      ](name='Outputs', description='An array that consists of the parameters specified in the output of the template.'),
      parameters?: [ 
        {
          parameterKey?: string(name='ParameterKey', description='The name of the parameter in the template.', example='instance_type'),
          parameterValue?: string(name='ParameterValue', description='The value of the parameter in the template.', example='ecs.s6-c1m1.small'),
        }
      ](name='Parameters', description='An array that consists of the parameters in the template. The parameters are specified by the administrator.'),
      portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****'),
      productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
      productName?: string(name='ProductName', description='The name of the product.', example='DEMO-Create an ECS instance'),
      productVersionId?: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****'),
      productVersionName?: string(name='ProductVersionName', description='The name for the version of the product.', example='1.0'),
      provisionedProductId?: string(name='ProvisionedProductId', description='The ID of the product instance.', example='pp-bp1ddg1n2a****'),
      provisionedProductName?: string(name='ProvisionedProductName', description='The name of the product instance.', example='DEMO-ECS instance'),
      status?: string(name='Status', description='The state of the task. Valid values:

*   Succeeded: The task is successful.
*   InProgress: The task is in progress.
*   Failed: The task failed.', example='Succeeded'),
      statusMessage?: string(name='StatusMessage', description='The message that is returned for the state.

>  This parameter is returned only when Failed is returned for the Status parameter.', example='Resource CREATE failed: terraform stack sc-146611588617****-pp-bp1ddg1n2a**** failure...'),
      taskId?: string(name='TaskId', description='The ID of the task.', example='task-bp1dmg242c****'),
      taskType?: string(name='TaskType', description='The type of the task. Valid values:

*   LaunchProduct: launches the product.
*   UpdateProvisionedProduct: updates the information about the product instance.
*   TerminateProvisionedProduct: terminates the product instance.', example='LaunchProduct'),
      updateTime?: string(name='UpdateTime', description='The time when the task was last modified.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-05-26T03:28:45Z'),
    }
  ](name='TaskDetails', description='An array that consists of tasks.'),
  totalCount?: int32(name='TotalCount', description='The total number of returned rows.', example='2'),
}

model ListTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTasksResponseBody(name='body'),
}

async function listTasksWithOptions(request: ListTasksRequest, runtime: Util.RuntimeOptions): ListTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.provisionedProductId)) {
    query['ProvisionedProductId'] = request.provisionedProductId;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.sortOrder)) {
    query['SortOrder'] = request.sortOrder;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTasks',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTasks(request: ListTasksRequest): ListTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTasksWithOptions(request, runtime);
}

model TerminateProvisionedProductRequest {
  provisionedProductId?: string(name='ProvisionedProductId', description='The ID of the product instance.', example='pp-bp1ddg1n2a****'),
}

model TerminateProvisionedProductResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model TerminateProvisionedProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TerminateProvisionedProductResponseBody(name='body'),
}

/**
  * After a product instance is terminated, the product instance is deleted from the product instance list. End users cannot manage the product instance throughout its lifecycle. Proceed with caution.
  *
  * @param request TerminateProvisionedProductRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return TerminateProvisionedProductResponse
 */
async function terminateProvisionedProductWithOptions(request: TerminateProvisionedProductRequest, runtime: Util.RuntimeOptions): TerminateProvisionedProductResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.provisionedProductId)) {
    body['ProvisionedProductId'] = request.provisionedProductId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TerminateProvisionedProduct',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * After a product instance is terminated, the product instance is deleted from the product instance list. End users cannot manage the product instance throughout its lifecycle. Proceed with caution.
  *
  * @param request TerminateProvisionedProductRequest
  * @return TerminateProvisionedProductResponse
 */
async function terminateProvisionedProduct(request: TerminateProvisionedProductRequest): TerminateProvisionedProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return terminateProvisionedProductWithOptions(request, runtime);
}

model UpdateConstraintRequest {
  config?: string(name='Config', description='The configuration of the constraint.

Format: { "LocalRoleName": "\\<role_name>" }.', example='{ "LocalRoleName": "TestRole" }'),
  constraintId?: string(name='ConstraintId', description='The ID of the constraint.', example='cons-bp1yx7x42v****'),
  description?: string(name='Description', description='The description of the constraint.

The value must be 1 to 128 characters in length.', example='Launch as local role TestRole'),
}

model UpdateConstraintResponseBody = {
  constraintId?: string(name='ConstraintId', description='The ID of the constraint.', example='cons-bp1yx7x42v****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model UpdateConstraintResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateConstraintResponseBody(name='body'),
}

async function updateConstraintWithOptions(request: UpdateConstraintRequest, runtime: Util.RuntimeOptions): UpdateConstraintResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.config)) {
    body['Config'] = request.config;
  }
  if (!Util.isUnset(request.constraintId)) {
    body['ConstraintId'] = request.constraintId;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateConstraint',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateConstraint(request: UpdateConstraintRequest): UpdateConstraintResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateConstraintWithOptions(request, runtime);
}

model UpdatePortfolioRequest {
  description?: string(name='Description', description='The description of the product portfolio.

The value must be 1 to 128 characters in length.', example='The description of the product portfolio.'),
  portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****'),
  portfolioName?: string(name='PortfolioName', description='The name of the product portfolio.

The value must be 1 to 128 characters in length.', example='DEMO-IT services'),
  providerName?: string(name='ProviderName', description='The provider of the product portfolio.

The value must be 1 to 128 characters in length.', example='IT team'),
}

model UpdatePortfolioResponseBody = {
  portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model UpdatePortfolioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdatePortfolioResponseBody(name='body'),
}

async function updatePortfolioWithOptions(request: UpdatePortfolioRequest, runtime: Util.RuntimeOptions): UpdatePortfolioResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.portfolioId)) {
    body['PortfolioId'] = request.portfolioId;
  }
  if (!Util.isUnset(request.portfolioName)) {
    body['PortfolioName'] = request.portfolioName;
  }
  if (!Util.isUnset(request.providerName)) {
    body['ProviderName'] = request.providerName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePortfolio',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updatePortfolio(request: UpdatePortfolioRequest): UpdatePortfolioResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePortfolioWithOptions(request, runtime);
}

model UpdateProductRequest {
  description?: string(name='Description', description='The description of the product.

The value must be 1 to 128 characters in length.', example='The description of the product.'),
  productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
  productName?: string(name='ProductName', description='The name of the product.

The value must be 1 to 128 characters in length.', example='DEMO-Create an ECS instance'),
  providerName?: string(name='ProviderName', description='The provider of the product.

The value must be 1 to 128 characters in length.', example='IT team'),
}

model UpdateProductResponseBody = {
  productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model UpdateProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProductResponseBody(name='body'),
}

async function updateProductWithOptions(request: UpdateProductRequest, runtime: Util.RuntimeOptions): UpdateProductResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.productId)) {
    body['ProductId'] = request.productId;
  }
  if (!Util.isUnset(request.productName)) {
    body['ProductName'] = request.productName;
  }
  if (!Util.isUnset(request.providerName)) {
    body['ProviderName'] = request.providerName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateProduct',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateProduct(request: UpdateProductRequest): UpdateProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProductWithOptions(request, runtime);
}

model UpdateProductVersionRequest {
  active?: boolean(name='Active', description='Specifies whether the product version is visible to end users. Valid values:

*   true: The product version is visible to end users. This is the default value.
*   false: The product version is invisible to end users.', example='true'),
  description?: string(name='Description', description='The description of the product version.

The value must be 1 to 128 characters in length.', example='The description of the product version.'),
  guidance?: string(name='Guidance', description='The recommendation information. Valid values:

*   Default: No recommendation information is provided. This is the default value.
*   Recommended: the recommendation version.
*   Latest: the latest version.
*   Deprecated: the version that is about to be deprecated.', example='Default'),
  productVersionId?: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****'),
  productVersionName?: string(name='ProductVersionName', description='The name of the product version.

The value must be 1 to 128 characters in length.', example='1.0'),
}

model UpdateProductVersionResponseBody = {
  productVersionId?: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model UpdateProductVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProductVersionResponseBody(name='body'),
}

async function updateProductVersionWithOptions(request: UpdateProductVersionRequest, runtime: Util.RuntimeOptions): UpdateProductVersionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.active)) {
    body['Active'] = request.active;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.guidance)) {
    body['Guidance'] = request.guidance;
  }
  if (!Util.isUnset(request.productVersionId)) {
    body['ProductVersionId'] = request.productVersionId;
  }
  if (!Util.isUnset(request.productVersionName)) {
    body['ProductVersionName'] = request.productVersionName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateProductVersion',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateProductVersion(request: UpdateProductVersionRequest): UpdateProductVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProductVersionWithOptions(request, runtime);
}

model UpdateProvisionedProductRequest {
  parameters?: [ 
    {
      parameterKey?: string(name='ParameterKey', description='The name of the parameter in the template.', example='instance_type'),
      parameterValue?: string(name='ParameterValue', description='The value of the parameter in the template.', example='ecs.s6-c1m1.small'),
    }
  ](name='Parameters', description='An array that consists of the parameters in the template. The parameters are specified by the administrator.

You can specify up to 200 parameters.

> - This parameter is optional. If you specify the Parameters parameter, you must specify the ParameterKey and ParameterValue parameters.
> - If the values of the ProductVersionId and Parameters parameters are not changed, you are not allowed to update the information about the product instance.'),
  portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.

>  If the PortfolioId parameter is not required, you do not need to specify the PortfolioId parameter. If the PortfolioId parameter is required, you must specify the PortfolioId parameter. For more information about how to obtain the value of the PortfolioId parameter, see [ListLaunchOptions](~~ListLaunchOptions~~).', example='port-bp1yt7582g****'),
  productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
  productVersionId?: string(name='ProductVersionId', description='The ID of the product version.

>  If the values of the ProductVersionId and Parameters parameters are not changed, the information about the product instance cannot be updated.', example='pv-bp15e79d26****'),
  provisionedProductId?: string(name='ProvisionedProductId', description='The ID of the product instance.', example='pp-bp1ddg1n2a****'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
}

model UpdateProvisionedProductResponseBody = {
  provisionedProductId?: string(name='ProvisionedProductId', description='The ID of the product instance.', example='pp-bp1ddg1n2a****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model UpdateProvisionedProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProvisionedProductResponseBody(name='body'),
}

async function updateProvisionedProductWithOptions(request: UpdateProvisionedProductRequest, runtime: Util.RuntimeOptions): UpdateProvisionedProductResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.parameters)) {
    body['Parameters'] = request.parameters;
  }
  if (!Util.isUnset(request.portfolioId)) {
    body['PortfolioId'] = request.portfolioId;
  }
  if (!Util.isUnset(request.productId)) {
    body['ProductId'] = request.productId;
  }
  if (!Util.isUnset(request.productVersionId)) {
    body['ProductVersionId'] = request.productVersionId;
  }
  if (!Util.isUnset(request.provisionedProductId)) {
    body['ProvisionedProductId'] = request.provisionedProductId;
  }
  if (!Util.isUnset(request.tags)) {
    body['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateProvisionedProduct',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateProvisionedProduct(request: UpdateProvisionedProductRequest): UpdateProvisionedProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProvisionedProductWithOptions(request, runtime);
}

model UpdateProvisionedProductPlanRequest {
  description?: string(name='Description'),
  parameters?: [ 
    {
      parameterKey?: string(name='ParameterKey', example='instance_type'),
      parameterValue?: string(name='ParameterValue', example='ecs.s6-c1m1.small'),
    }
  ](name='Parameters'),
  planId?: string(name='PlanId', example='plan-bp1jvmdk2k****'),
  portfolioId?: string(name='PortfolioId', example='port-bp1yt7582g****'),
  productId?: string(name='ProductId', example='prod-bp18r7q127****'),
  productVersionId?: string(name='ProductVersionId', example='pv-bp15e79d26****'),
  tags?: [ 
    {
      key?: string(name='Key', example='k1'),
      value?: string(name='Value', example='v1'),
    }
  ](name='Tags'),
}

model UpdateProvisionedProductPlanResponseBody = {
  planId?: string(name='PlanId', example='plan-bp1jvmdk2k****'),
  provisionedProductId?: string(name='ProvisionedProductId', example='pp-bp1ddg1n2a****'),
  requestId?: string(name='RequestId', example='0FEEF92D-4052-5202-87D0-3D8EC16F****'),
}

model UpdateProvisionedProductPlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProvisionedProductPlanResponseBody(name='body'),
}

async function updateProvisionedProductPlanWithOptions(request: UpdateProvisionedProductPlanRequest, runtime: Util.RuntimeOptions): UpdateProvisionedProductPlanResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.parameters)) {
    body['Parameters'] = request.parameters;
  }
  if (!Util.isUnset(request.planId)) {
    body['PlanId'] = request.planId;
  }
  if (!Util.isUnset(request.portfolioId)) {
    body['PortfolioId'] = request.portfolioId;
  }
  if (!Util.isUnset(request.productId)) {
    body['ProductId'] = request.productId;
  }
  if (!Util.isUnset(request.productVersionId)) {
    body['ProductVersionId'] = request.productVersionId;
  }
  if (!Util.isUnset(request.tags)) {
    body['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateProvisionedProductPlan',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateProvisionedProductPlan(request: UpdateProvisionedProductPlanRequest): UpdateProvisionedProductPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProvisionedProductPlanWithOptions(request, runtime);
}

