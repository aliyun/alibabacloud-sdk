/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'servicecatalog';
  @version = '2021-09-01';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ApproveProvisionedProductPlanRequest {
  approvalAction: string(name='ApprovalAction', description='The review action. Valid values:

*   Approve
*   Reject', example='Approve', position='Body'),
  comment?: string(name='Comment', description='The review description.', example='Approved. You can create a resource.', position='Body'),
  planId: string(name='PlanId', description='The ID of the plan.', example='plan-bp1jvmdk2k****', position='Body'),
}

model ApproveProvisionedProductPlanResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model ApproveProvisionedProductPlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApproveProvisionedProductPlanResponseBody(name='body'),
}

async function approveProvisionedProductPlan(request: ApproveProvisionedProductPlanRequest): ApproveProvisionedProductPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApproveProvisionedProductPlan', 'POST', '/', 'json', true, 'form', request);
}

model AssociatePrincipalWithPortfolioRequest {
  portfolioId: string(name='PortfolioId', example='port-bp1yt7582g****', position='Body'),
  principalId: string(name='PrincipalId', example='24477111603637****', position='Body'),
  principalType: string(name='PrincipalType', example='RamUser', position='Body'),
}

model AssociatePrincipalWithPortfolioResponseBody = {
  requestId?: string(name='RequestId', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model AssociatePrincipalWithPortfolioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociatePrincipalWithPortfolioResponseBody(name='body'),
}

async function associatePrincipalWithPortfolio(request: AssociatePrincipalWithPortfolioRequest): AssociatePrincipalWithPortfolioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociatePrincipalWithPortfolio', 'POST', '/', 'json', true, 'form', request);
}

model AssociateProductWithPortfolioRequest {
  portfolioId: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****', position='Body'),
  productId: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****', position='Body'),
}

model AssociateProductWithPortfolioResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model AssociateProductWithPortfolioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateProductWithPortfolioResponseBody(name='body'),
}

async function associateProductWithPortfolio(request: AssociateProductWithPortfolioRequest): AssociateProductWithPortfolioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateProductWithPortfolio', 'POST', '/', 'json', true, 'form', request);
}

model AssociateTagOptionWithResourceRequest {
  resourceId: string(name='ResourceId', description='The ID of the resource with which the tag option is associated.', example='port-bp15p96922****', position='Body'),
  tagOptionId: string(name='TagOptionId', description='The ID of the tag option.', example='tag-bp1u6mdf3d****', position='Body'),
}

model AssociateTagOptionWithResourceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='DC833558-AFF4-5935-9AB6-8A12EE7D****'),
}

model AssociateTagOptionWithResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateTagOptionWithResourceResponseBody(name='body'),
}

async function associateTagOptionWithResource(request: AssociateTagOptionWithResourceRequest): AssociateTagOptionWithResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateTagOptionWithResource', 'POST', '/', 'json', true, 'form', request);
}

model CancelProvisionedProductPlanRequest {
  planId: string(name='PlanId', description='The ID of the plan.', example='plan-bp1jvmdk2k****', position='Body'),
}

model CancelProvisionedProductPlanResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model CancelProvisionedProductPlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelProvisionedProductPlanResponseBody(name='body'),
}

async function cancelProvisionedProductPlan(request: CancelProvisionedProductPlanRequest): CancelProvisionedProductPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelProvisionedProductPlan', 'POST', '/', 'json', true, 'form', request);
}

model CopyProductRequest {
  sourceProductArn: string(name='SourceProductArn', description='The Alibaba Cloud Resource Name (ARN) of the source product.

> The source product can belong to the current account or belong to a product portfolio that is shared by another account.', example='acs:servicecatalog:cn-hangzhou:146611588617****:product/prod-bp18r7q127****', position='Body'),
  targetProductName?: string(name='TargetProductName', description='The name of the destination product.', example='DEMO-ECS', position='Body'),
}

model CopyProductResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F****'),
}

model CopyProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CopyProductResponseBody(name='body'),
}

async function copyProduct(request: CopyProductRequest): CopyProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CopyProduct', 'POST', '/', 'json', true, 'form', request);
}

model CreateConstraintRequest {
  config: string(name='Config', description='The configuration of the constraint.

Format: { "LocalRoleName": "\\<role_name>" }.', example='{ "LocalRoleName": "TestRole" }', position='Body'),
  constraintType: string(name='ConstraintType', description='The type of the constraint.

The value is fixed as Launch, which specifies the launch constraint.', example='Launch', position='Body'),
  description?: string(name='Description', description='The description of the constraint.

The value must be 1 to 128 characters in length.', example='Launch as local role TestRole', position='Body'),
  portfolioId: string(name='PortfolioId', description='The ID of the product portfolio to which the constraint belongs.', example='port-bp1yt7582g****', position='Body'),
  productId: string(name='ProductId', description='The ID of the product for which the constraint is created.', example='prod-bp18r7q127****', position='Body'),
}

model CreateConstraintResponseBody = {
  constraintId?: string(name='ConstraintId', description='The ID of the constraint.', example='cons-bp1yx7x42v****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model CreateConstraintResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateConstraintResponseBody(name='body'),
}

async function createConstraint(request: CreateConstraintRequest): CreateConstraintResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateConstraint', 'POST', '/', 'json', true, 'form', request);
}

model CreatePortfolioRequest {
  description?: string(name='Description', description='The description of the product portfolio.

The value must be 1 to 128 characters in length.', example='The description of the product portfolio.', position='Body'),
  portfolioName: string(name='PortfolioName', description='The name of the product portfolio.

The value must be 1 to 128 characters in length.', example='DEMO-IT services', minLength=1, maxLength=100, position='Body'),
  providerName: string(name='ProviderName', description='The provider of the product portfolio.

The value must be 1 to 128 characters in length.', example='IT team', minLength=1, maxLength=100, position='Body'),
}

model CreatePortfolioResponseBody = {
  portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model CreatePortfolioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePortfolioResponseBody(name='body'),
}

async function createPortfolio(request: CreatePortfolioRequest): CreatePortfolioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePortfolio', 'POST', '/', 'json', true, 'form', request);
}

model CreateProductRequest {
  description?: string(name='Description', description='The description of the product.

The value must be 1 to 128 characters in length.', example='The description of the product.', position='Body'),
  productName: string(name='ProductName', description='The name of the product.

The value must be 1 to 128 characters in length.', example='DEMO-Create an ECS instance', minLength=1, maxLength=100, position='Body'),
  productType: string(name='ProductType', description='The type of the product.

Set the value to Ros, which specifies Resource Orchestration Service (ROS).', example='Ros', position='Body'),
  productVersionParameters?: {
    active?: boolean(name='Active', description='Specifies whether to enable the product version. Valid values:

*   true: enables the product version. This is the default value.
*   false: disables the product version.', example='true'),
    description?: string(name='Description', description='The description of the product version.

The value must be 1 to 128 characters in length.', example='The description of the product version.'),
    guidance?: string(name='Guidance', description='The recommendation information. Valid values:

*   Default: No recommendation information is provided. This is the default value.
*   Recommended: the recommended version.
*   Latest: the latest version.
*   Deprecated: the version that is about to be discontinued.', example='Default'),
    productVersionName?: string(name='ProductVersionName', description='The name of the product version.

The value must be 1 to 128 characters in length.', example='1.0', minLength=1, maxLength=100),
    templateType?: string(name='TemplateType', description='The type of the template.

Set the value to RosTerraformTemplate, which specifies the Terraform template that is supported by ROS.', example='RosTerraformTemplate'),
    templateUrl?: string(name='TemplateUrl', description='The URL of the template.

For more information about how to obtain the URL of a template, see [CreateTemplate](~~CreateTemplate~~).', example='oss://servicecatalog-cn-hangzhou/146611588617****/terraform/template/tpl-bp1217we23****/template.json'),
  }(name='ProductVersionParameters', description='The information about the product version.', shrink='json', position='Body'),
  providerName: string(name='ProviderName', description='The provider of the product.

The value must be 1 to 128 characters in length.', example='IT team', minLength=1, maxLength=100, position='Body'),
}

model CreateProductResponseBody = {
  productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
  productVersionId?: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model CreateProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProductResponseBody(name='body'),
}

/**
  * Before you call the CreateProduct operation, you must call the [CreateTemplate](~~CreateTemplate~~) operation to create a template.
  *
 */
async function createProduct(request: CreateProductRequest): CreateProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProduct', 'POST', '/', 'json', true, 'form', request);
}

model CreateProductVersionRequest {
  active?: boolean(name='Active', description='Specifies whether the product version is active. Valid values:

*   true: The product version is active. This is the default value.
*   false: The product version is inactive.', example='true', position='Body'),
  description?: string(name='Description', description='The description of the product version.

The value must be 1 to 128 characters in length.', example='The description of the product version.', position='Body'),
  guidance?: string(name='Guidance', description='The recommendation information. Valid values:

*   Default: No recommendation information is provided. This is the default value.
*   Recommended: the recommendation version.
*   Latest: the latest version.
*   Deprecated: the version that is about to be discontinued.', example='Default', position='Body'),
  productId: string(name='ProductId', description='The ID of the product to which the product version belongs.', example='prod-bp18r7q127****', position='Body'),
  productVersionName: string(name='ProductVersionName', description='The name of the product version.

The value must be 1 to 128 characters in length.', example='1.0', minLength=1, maxLength=100, position='Body'),
  templateType: string(name='TemplateType', description='The type of the template.

The value is fixed as RosTerraformTemplate, which specifies the Terraform template that is supported by Resource Orchestration Service (ROS).', example='RosTerraformTemplate', position='Body'),
  templateUrl: string(name='TemplateUrl', description='The URL of the template.

For more information about how to obtain the URL of a template, see [CreateTemplate](~~CreateTemplate~~).', example='oss://servicecatalog-cn-hangzhou/146611588617****/terraform/template/tpl-bp1217we23****/template.json', position='Body'),
}

model CreateProductVersionResponseBody = {
  productVersionId?: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model CreateProductVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProductVersionResponseBody(name='body'),
}

/**
  * Before you call the CreateProductVersion operation, you must call the [CreateTemplate](~~CreateTemplate~~) operation to create a template.
  *
 */
async function createProductVersion(request: CreateProductVersionRequest): CreateProductVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProductVersion', 'POST', '/', 'json', true, 'form', request);
}

model CreateProvisionedProductPlanRequest {
  description?: string(name='Description', description='The description of the plan.

The value must be 1 to 128 characters in length.', example='Create an ECS instance.', position='Body'),
  operationType?: string(name='OperationType', description='The type of the operation that you want the plan to perform. Valid values:

*   LaunchProduct: launches the product. This is the default value.
*   UpdateProvisionedProduct: updates the information about the product instance.
*   TerminateProvisionedProduct: terminates the product instance.', example='LaunchProduct', position='Body'),
  parameters?: [ 
    {
      parameterKey?: string(name='ParameterKey', description='The name of the parameter in the template.', example='instance_type'),
      parameterValue?: string(name='ParameterValue', description='The value of the parameter in the template.', example='ecs.s6-c1m1.small'),
    }
  ](name='Parameters', description='An array that consists of the parameters in the template.

You can specify up to 200 parameters.

> If you specify Parameters, you must specify ParameterKey and ParameterValue.', position='Body'),
  planName: string(name='PlanName', description='The plan name.

The value must be 1 to 128 characters in length.', example='DEMO-ECS instance', minLength=1, maxLength=100, position='Body'),
  planType: string(name='PlanType', description='The plan type.

Set the value to Ros, which specifies Resource Orchestration Service (ROS).', example='Ros', position='Body'),
  portfolioId?: string(name='PortfolioId', description='The product portfolio ID.

> If PortfolioId is not required, you do not need to specify PortfolioId. If PortfolioId is required, you must specify PortfolioId. For more information about how to obtain the value of PortfolioId, see [ListLaunchOptions](~~ListLaunchOptions~~).', example='port-bp1yt7582g****', position='Body'),
  productId: string(name='ProductId', description='The product ID.', example='prod-bp18r7q127****', position='Body'),
  productVersionId: string(name='ProductVersionId', description='The product version ID.', example='pv-bp15e79d26****', position='Body'),
  provisionedProductName: string(name='ProvisionedProductName', description='The product instance name.

The value must be 1 to 128 characters in length.', example='DEMO-ECS instance', minLength=1, maxLength=100, position='Body'),
  stackRegionId: string(name='StackRegionId', description='The ID of the region to which the ROS stack belongs.

For more information about how to obtain the regions that are supported by ROS, see [DescribeRegions](~~131035~~).', example='cn-hangzhou', position='Body'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of the custom tag.

The key can be up to 128 characters in length, and cannot start with `acs:` or `aliyun`. The tag key cannot contain `http://` or `https://`.', example='k1'),
      value?: string(name='Value', description='The value of the custom tag.

The value can be up to 128 characters in length, and cannot start with `acs:`. The tag value cannot contain `http://` or `https://`.', example='v1'),
    }
  ](name='Tags', description='An array that consists of custom tags.

Maximum value of N: 20.

> 
*   If you specify Tags, you must specify Tags.N.Key and Tags.N.Value.
*   The tag of a stack is propagated to each resource that supports the tag feature in the stack.', position='Body'),
}

model CreateProvisionedProductPlanResponseBody = {
  planId?: string(name='PlanId', description='The plan ID.', example='plan-bp1jvmdk2k****'),
  provisionedProductId?: string(name='ProvisionedProductId', description='The product instance ID.', example='pp-bp1ddg1n2a****'),
  requestId?: string(name='RequestId', description='The request ID.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model CreateProvisionedProductPlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProvisionedProductPlanResponseBody(name='body'),
}

async function createProvisionedProductPlan(request: CreateProvisionedProductPlanRequest): CreateProvisionedProductPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProvisionedProductPlan', 'POST', '/', 'json', true, 'form', request);
}

model CreateTagOptionRequest {
  key: string(name='Key', description='The key of the tag option.

The key can be up to 128 characters in length. It cannot start with `aliyun` or `acs:` and cannot contain `http://` or `https://`.', example='k1', minLength=1, maxLength=128, position='Body'),
  value: string(name='Value', description='The value of the tag option.

The value can be up to 128 characters in length. It cannot start with `acs:`and cannot contain `http://` or `https://`.', example='v1', minLength=1, maxLength=128, position='Body'),
}

model CreateTagOptionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A48A5F12-6098-54A1-A389-6834AF27****'),
  tagOptionDetail?: {
    active?: boolean(name='Active', description='Indicates whether the tag option is enabled. Valid values:

*   true (default)
*   false', example='true'),
    key?: string(name='Key', description='The key of the tag option.

The key must be 1 to 128 characters in length. It cannot start with `aliyun` or `acs:` and cannot contain `http://` or `https://`.', example='k1'),
    owner?: string(name='Owner', description='The ID of the Alibaba Cloud account to which the tag option belongs.', example='133413081827****'),
    tagOptionId?: string(name='TagOptionId', description='The ID of the tag option.', example='tag-bp1r3mxq3t****'),
    value?: string(name='Value', description='The value of the tag option.

The value must be 1 to 128 characters in length. It cannot start with `acs:` and cannot contain `http://` or `https://`.', example='v1'),
  }(name='TagOptionDetail', description='An array that consists of the details of the tag option.'),
}

model CreateTagOptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTagOptionResponseBody(name='body'),
}

async function createTagOption(request: CreateTagOptionRequest): CreateTagOptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTagOption', 'POST', '/', 'json', true, 'form', request);
}

model CreateTemplateRequest {
  templateBody: string(name='TemplateBody', description='The content of the template.

For more information about the template syntax, see [Structure of Terraform templates](~~184397~~).', example='{
  "ROSTemplateFormatVersion": "2015-09-01",
  "Transform": "Aliyun::Terraform-v1.1",
  "Workspace": {
    "main.tf": "variable  \\"name\\" {  default = \\"auto_provisioning_group\\"}"
  },
  "Outputs": {}
}', position='Body'),
  templateType: string(name='TemplateType', description='The type of the template.

Set the value to RosTerraformTemplate, which specifies the Terraform template that is supported by Resource Orchestration Service (ROS).', example='RosTerraformTemplate', position='Body'),
  terraformVariables?: [ 
    {
      description?: string(name='Description', description='The description of the variable.

For more information about the format of variable descriptions, see [Methods and suggestions for Terraform code development](~~322216~~).', example='{ "Label": { "en": "Instance Type" }, "AllowedValues": \\[ "ecs.s6-c1m1.small", "ecs.s6-c1m2.large", "ecs.s6-c1m2.xlarge" ] }'),
      variableName?: string(name='VariableName', description='The name of the variable.', example='instance_type'),
    }
  ](name='TerraformVariables', description='The variable settings of the Terraform template. You can configure the variables in a structured manner. Service Catalog applies the variable settings to the template.

> The variables must be defined in the Terraform template.', position='Body'),
}

model CreateTemplateResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
  templateUrl?: string(name='TemplateUrl', description='The URL of the template.', example='oss://servicecatalog-cn-hangzhou/146611588617****/terraform/template/tpl-bp1217we23****/template.json'),
}

model CreateTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTemplateResponseBody(name='body'),
}

async function createTemplate(request: CreateTemplateRequest): CreateTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTemplate', 'POST', '/', 'json', true, 'form', request);
}

model DeleteConstraintRequest {
  constraintId: string(name='ConstraintId', description='The ID of the constraint.', example='cons-bp1yx7x42v****', position='Body'),
}

model DeleteConstraintResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model DeleteConstraintResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteConstraintResponseBody(name='body'),
}

async function deleteConstraint(request: DeleteConstraintRequest): DeleteConstraintResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteConstraint', 'POST', '/', 'json', true, 'form', request);
}

model DeletePortfolioRequest {
  portfolioId: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****', position='Body'),
}

model DeletePortfolioResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model DeletePortfolioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePortfolioResponseBody(name='body'),
}

async function deletePortfolio(request: DeletePortfolioRequest): DeletePortfolioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePortfolio', 'POST', '/', 'json', true, 'form', request);
}

model DeleteProductRequest {
  productId: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****', position='Body'),
}

model DeleteProductResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model DeleteProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProductResponseBody(name='body'),
}

async function deleteProduct(request: DeleteProductRequest): DeleteProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteProduct', 'POST', '/', 'json', true, 'form', request);
}

model DeleteProductVersionRequest {
  productVersionId: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****', position='Body'),
}

model DeleteProductVersionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model DeleteProductVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProductVersionResponseBody(name='body'),
}

async function deleteProductVersion(request: DeleteProductVersionRequest): DeleteProductVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteProductVersion', 'POST', '/', 'json', true, 'form', request);
}

model DeleteProvisionedProductPlanRequest {
  planId: string(name='PlanId', description='The ID of the plan.', example='plan-bp1jvmdk2k****', position='Body'),
}

model DeleteProvisionedProductPlanResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model DeleteProvisionedProductPlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProvisionedProductPlanResponseBody(name='body'),
}

async function deleteProvisionedProductPlan(request: DeleteProvisionedProductPlanRequest): DeleteProvisionedProductPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteProvisionedProductPlan', 'POST', '/', 'json', true, 'form', request);
}

model DeleteTagOptionRequest {
  tagOptionId: string(name='TagOptionId', description='The ID of the tag option.', example='tag-bp1u6mdf3d****', position='Body'),
}

model DeleteTagOptionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F****'),
}

model DeleteTagOptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTagOptionResponseBody(name='body'),
}

async function deleteTagOption(request: DeleteTagOptionRequest): DeleteTagOptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTagOption', 'POST', '/', 'json', true, 'form', request);
}

model DisAssociateTagOptionFromResourceRequest {
  resourceId: string(name='ResourceId', description='The ID of the resource with which the tag option is associated.', example='prod-bp14katy3d****', position='Body'),
  tagOptionId: string(name='TagOptionId', description='The ID of the tag option.', example='tag-bp1u6mdf3d****', position='Body'),
}

model DisAssociateTagOptionFromResourceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='7E23D1F3-4333-587B-909C-39EA4626****'),
}

model DisAssociateTagOptionFromResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisAssociateTagOptionFromResourceResponseBody(name='body'),
}

async function disAssociateTagOptionFromResource(request: DisAssociateTagOptionFromResourceRequest): DisAssociateTagOptionFromResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisAssociateTagOptionFromResource', 'POST', '/', 'json', true, 'form', request);
}

model DisassociatePrincipalFromPortfolioRequest {
  portfolioId: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****', position='Body'),
  principalId: string(name='PrincipalId', description='The ID of the RAM entity.

For more information about how to obtain the ID of a RAM user, see [GetUser](~~28681~~).

For more information about how to obtain the ID of a RAM role, see [GetRole](~~28711~~).', example='24477111603637****', position='Body'),
  principalType: string(name='PrincipalType', description='The type of the Resource Access Management (RAM) entity. Valid values:

*   RamUser: a RAM user
*   RamRole: a RAM role', example='RamUser', position='Body'),
}

model DisassociatePrincipalFromPortfolioResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model DisassociatePrincipalFromPortfolioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisassociatePrincipalFromPortfolioResponseBody(name='body'),
}

async function disassociatePrincipalFromPortfolio(request: DisassociatePrincipalFromPortfolioRequest): DisassociatePrincipalFromPortfolioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisassociatePrincipalFromPortfolio', 'POST', '/', 'json', true, 'form', request);
}

model DisassociateProductFromPortfolioRequest {
  portfolioId: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****', position='Body'),
  productId: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****', position='Body'),
}

model DisassociateProductFromPortfolioResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model DisassociateProductFromPortfolioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisassociateProductFromPortfolioResponseBody(name='body'),
}

async function disassociateProductFromPortfolio(request: DisassociateProductFromPortfolioRequest): DisassociateProductFromPortfolioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisassociateProductFromPortfolio', 'POST', '/', 'json', true, 'form', request);
}

model ExecuteProvisionedProductPlanRequest {
  planId: string(name='PlanId', description='The ID of the plan.', example='plan-bp1jvmdk2k****', position='Body'),
}

model ExecuteProvisionedProductPlanResponseBody = {
  planId?: string(name='PlanId', description='The ID of the plan.', example='plan-bp1jvmdk2k****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model ExecuteProvisionedProductPlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExecuteProvisionedProductPlanResponseBody(name='body'),
}

async function executeProvisionedProductPlan(request: ExecuteProvisionedProductPlanRequest): ExecuteProvisionedProductPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteProvisionedProductPlan', 'POST', '/', 'json', true, 'form', request);
}

model GetConstraintRequest {
  constraintId: string(name='ConstraintId', description='The ID of the constraint.', example='cons-bp1yx7x42v****', position='Query'),
}

model GetConstraintResponseBody = {
  constraintDetail?: {
    config?: string(name='Config', description='The configuration of the constraint.

Format: { "LocalRoleName": "\\<role_name>" }.', example='{ "LocalRoleName": "TestRole" }'),
    constraintId?: string(name='ConstraintId', description='The ID of the constraint.', example='cons-bp1yx7x42v****'),
    constraintType?: string(name='ConstraintType', description='The type of the constraint.

The value is fixed as Launch, which indicates the launch constraint.', example='Launch'),
    createTime?: string(name='CreateTime', description='The time when the constraint was created.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-04-12T06:11:26Z'),
    description?: string(name='Description', description='The description of the constraint.', example='Launch as local role TestRole'),
    portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio to which the constraint belongs.', example='port-bp1yt7582g****'),
    productId?: string(name='ProductId', description='The ID of the product for which the constraint is created.', example='prod-bp18r7q127****'),
    productName?: string(name='ProductName', description='The name of the product.', example='DEMO-Create an ECS instance.'),
  }(name='ConstraintDetail', description='The details of the constraint.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model GetConstraintResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetConstraintResponseBody(name='body'),
}

async function getConstraint(request: GetConstraintRequest): GetConstraintResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConstraint', 'POST', '/', 'json', false, 'json', request);
}

model GetPortfolioRequest {
  portfolioId: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****', position='Query'),
}

model GetPortfolioResponseBody = {
  portfolioDetail?: {
    createTime?: string(name='CreateTime', description='The time when the product portfolio was created.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-04-12T06:11:12Z'),
    description?: string(name='Description', description='The description of the product portfolio.', example='The description of the product portfolio.'),
    portfolioArn?: string(name='PortfolioArn', description='The Alibaba Cloud Resource Name (ARN) of the product portfolio.', example='acs:servicecatalog:cn-hangzhou:146611588617****:portfolio/port-bp1yt7582g****'),
    portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****'),
    portfolioName?: string(name='PortfolioName', description='The name of the product portfolio.', example='DEMO-IT services'),
    providerName?: string(name='ProviderName', description='The provider of the product portfolio.', example='IT team'),
  }(name='PortfolioDetail', description='The details of the product portfolio.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
  tagOptions?: [ 
    {
      active?: boolean(name='Active', description='Indicates whether the tag option is enabled. Valid values:

- true (default)
- false', example='true'),
      key?: string(name='Key', description='The key of the tag option.', example='k1'),
      owner?: string(name='Owner', description='The ID of the owner of the tag option.', example='133413081827****'),
      tagOptionId?: string(name='TagOptionId', description='The ID of the tag option.', example='tag-bp1q65xd3j****'),
      value?: string(name='Value', description='The value of the tag option.', example='v1'),
    }
  ](name='TagOptions', description='The tag options associated with the service portfolio.'),
}

model GetPortfolioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPortfolioResponseBody(name='body'),
}

async function getPortfolio(request: GetPortfolioRequest): GetPortfolioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPortfolio', 'POST', '/', 'json', false, 'json', request);
}

model GetProductAsAdminRequest {
  productId: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****', position='Query'),
}

model GetProductAsAdminResponseBody = {
  productDetail?: {
    createTime?: string(name='CreateTime', description='The creation time.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-04-12T06:10:37Z'),
    description?: string(name='Description', description='The description of the product.', example='This is a product description.'),
    productArn?: string(name='ProductArn', description='The Alibaba Cloud Resource Name (ARN) of the product.', example='acs:servicecatalog:cn-hangzhou:146611588617****:product/prod-bp18r7q127****'),
    productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
    productName?: string(name='ProductName', description='The name of the product.', example='DEMO-Create an ECS instance'),
    productType?: string(name='ProductType', description='The type of the product.

The value is fixed as Ros, which indicates Resource Orchestration Service (ROS).', example='Ros'),
    providerName?: string(name='ProviderName', description='The provider of the product.', example='IT team'),
  }(name='ProductDetail', description='The information about the product.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
  tagOptions?: [ 
    {
      active?: boolean(name='Active', description='Indicates whether the tag option is enabled. Valid values:

- true (default)
- false', example='true'),
      key?: string(name='Key', description='The key of the tag option.', example='k1'),
      owner?: string(name='Owner', description='The ID of the owner of the tag option.', example='133413081827****'),
      tagOptionId?: string(name='TagOptionId', description='The ID of the tag option.', example='tag-bp1q65xd3j****'),
      value?: string(name='Value', description='The value of the tag option.', example='v1'),
    }
  ](name='TagOptions', description='The tag options associated with the product.'),
}

model GetProductAsAdminResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProductAsAdminResponseBody(name='body'),
}

async function getProductAsAdmin(request: GetProductAsAdminRequest): GetProductAsAdminResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetProductAsAdmin', 'POST', '/', 'json', false, 'json', request);
}

model GetProductAsEndUserRequest {
  productId: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****', position='Query'),
}

model GetProductAsEndUserResponseBody = {
  productSummary?: {
    createTime?: string(name='CreateTime', description='The time when the product was created.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-04-12T06:10:37Z'),
    description?: string(name='Description', description='The description of the product.', example='The description of the product.'),
    hasDefaultLaunchOption?: boolean(name='HasDefaultLaunchOption', description='Indicates whether the default launch option exists. Valid values:

*   true: The default launch option exists. In this case, the PortfolioId parameter is not required when the product is launched or when the information about the product instance is updated.
*   false: The default launch option does not exist. In this case, the PortfolioId parameter is required when the product is launched or when the information about the product instance is updated. For more information about how to obtain the value of the PortfolioId parameter, see [ListLaunchOptions](~~ListLaunchOptions~~).

> If the product is added to only one product portfolio, the default launch option exists. If the product is added to multiple product portfolios, multiple launch options exist at the same time. However, no default launch options exist.', example='true'),
    productArn?: string(name='ProductArn', description='The Alibaba Cloud Resource Name (ARN) of the product.', example='acs:servicecatalog:cn-hangzhou:146611588617****:product/prod-bp18r7q127****'),
    productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
    productName?: string(name='ProductName', description='The name of the product.', example='DEMO-Create an ECS instance.'),
    productType?: string(name='ProductType', description='The type of the product.

The value is fixed as Ros, which indicates Resource Orchestration Service (ROS).', example='Ros'),
    providerName?: string(name='ProviderName', description='The provider of the product.', example='IT team'),
  }(name='ProductSummary', description='The information about the product.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model GetProductAsEndUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProductAsEndUserResponseBody(name='body'),
}

/**
  * Make sure that you are granted the permissions to manage relevant products as a user by an administrator. For more information, see [Manage access permissions](~~405233~~).
  *
 */
async function getProductAsEndUser(request: GetProductAsEndUserRequest): GetProductAsEndUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetProductAsEndUser', 'POST', '/', 'json', false, 'json', request);
}

model GetProductVersionRequest {
  productVersionId: string(name='ProductVersionId', example='pv-bp15e79d26****', position='Query'),
}

model GetProductVersionResponseBody = {
  productVersionDetail?: {
    active?: boolean(name='Active', example='true'),
    createTime?: string(name='CreateTime', example='2022-04-12T06:10:37Z'),
    description?: string(name='Description'),
    guidance?: string(name='Guidance', example='Default'),
    productId?: string(name='ProductId', example='prod-bp18r7q127****'),
    productVersionId?: string(name='ProductVersionId', example='pv-bp15e79d26****'),
    productVersionName?: string(name='ProductVersionName', example='1.0'),
    templateType?: string(name='TemplateType', example='RosTerraformTemplate'),
    templateUrl?: string(name='TemplateUrl', example='oss://servicecatalog-cn-hangzhou/146611588617****/terraform/template/tpl-bp1217we23****/template.json'),
  }(name='ProductVersionDetail'),
  requestId?: string(name='RequestId', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model GetProductVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProductVersionResponseBody(name='body'),
}

async function getProductVersion(request: GetProductVersionRequest): GetProductVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetProductVersion', 'POST', '/', 'json', false, 'json', request);
}

model GetProvisionedProductRequest {
  provisionedProductId: string(name='ProvisionedProductId', description='The ID of the product instance.', example='pp-bp1ddg1n2a****', position='Query'),
}

model GetProvisionedProductResponseBody = {
  provisionedProductDetail?: {
    createTime?: string(name='CreateTime', description='The time when the product instance was created.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-05-23T09:46:27Z'),
    lastProvisioningTaskId?: string(name='LastProvisioningTaskId', description='The ID of the task that was last run on the product instance.

The task can be one of the following types:

*   LaunchProduct: a task that launches the product.
*   UpdateProvisionedProduct: a task that updates the information about the product instance.
*   TerminateProvisionedProduct: a task that terminates the product instance.', example='task-bp1dmg242c****'),
    lastSuccessfulProvisioningTaskId?: string(name='LastSuccessfulProvisioningTaskId', description='The ID of the last task that was successfully run on the product instance.

The task can be one of the following types:

*   LaunchProduct: a task that launches the product.
*   UpdateProvisionedProduct: a task that updates the information about the product instance.
*   TerminateProvisionedProduct: a task that terminates the product instance.', example='task-bp1dmg242c****'),
    lastTaskId?: string(name='LastTaskId', description='The ID of the task that was last run.', example='task-bp1dmg242c****'),
    ownerPrincipalId?: string(name='OwnerPrincipalId', description='The ID of the RAM entity to which the product instance belongs.', example='24477111603637****'),
    ownerPrincipalType?: string(name='OwnerPrincipalType', description='The type of the Resource Access Management (RAM) entity to which the product instance belongs. Valid values:

*   RamUser: a RAM user
*   RamRole: a RAM role', example='RamUser'),
    portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****'),
    productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
    productName?: string(name='ProductName', description='The name of the product.', example='DEMO-Create an ECS instance'),
    productVersionId?: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****'),
    productVersionName?: string(name='ProductVersionName', description='The name of the product version.', example='1.0'),
    provisionedProductArn?: string(name='ProvisionedProductArn', description='The Alibaba Cloud Resource Name (ARN) of the product instance.', example='acs:servicecatalog:cn-hangzhou:146611588617****:provisionedproduct/pp-bp1ddg1n2a****'),
    provisionedProductId?: string(name='ProvisionedProductId', description='The ID of the product instance.', example='pp-bp1ddg1n2a****'),
    provisionedProductName?: string(name='ProvisionedProductName', description='The name of the product instance.', example='DEMO-ECS instance'),
    provisionedProductType?: string(name='ProvisionedProductType', description='The type of the product instance.

The value is fixed as RosStack, which indicates an ROS stack.', example='RosStack'),
    stackId?: string(name='StackId', description='The ID of the Resource Orchestration Service (ROS) stack.', example='137e31df-3754-40b4-be2f-c793ad84****'),
    stackRegionId?: string(name='StackRegionId', description='The ID of the region to which the ROS stack belongs.', example='cn-hangzhou'),
    status?: string(name='Status', description='The state of the product instance. Valid values:

*   Available: The product instance was available.
*   UnderChange: The information about the product instance was being changed.
*   Error: An exception occurred on the product instance.', example='Available'),
    statusMessage?: string(name='StatusMessage', description='The message that is returned for the status of the product instance.

> This parameter is returned only when Error is returned for the Status parameter.', example='Resource CREATE failed: terraform stack sc-146611588617****-pp-bp1ddg1n2a**** failure...'),
  }(name='ProvisionedProductDetail', description='The details of the product instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model GetProvisionedProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProvisionedProductResponseBody(name='body'),
}

async function getProvisionedProduct(request: GetProvisionedProductRequest): GetProvisionedProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetProvisionedProduct', 'POST', '/', 'json', false, 'json', request);
}

model GetProvisionedProductPlanRequest {
  planId: string(name='PlanId', description='The ID of the plan.', example='plan-bp1jvmdk2k****', position='Body'),
}

model GetProvisionedProductPlanResponseBody = {
  planDetail?: {
    approvalDetail?: {
      operationRecords?: [ 
        {
          approvalAction?: string(name='ApprovalAction', description='The operation that is performed by the operator on the plan. Valid values:

*   Submit: submits the plan.
*   Cancel: cancels the plan.
*   Approve: approves the plan.
*   reject: rejects the plan.', example='Approve'),
          comment?: string(name='Comment', description='The review comment of the operator.', example='Agreed.'),
          createTime?: string(name='CreateTime', description='The time when the operation was performed.', example='2022-03-22T05:56:14Z'),
          operator?: {
            principalId?: string(name='PrincipalId', description='The RAM entity ID of the operator.', example='277401963826235***'),
            principalName?: string(name='PrincipalName', description='The RAM entity name of the operator.', example='approver'),
            principalType?: string(name='PrincipalType', description='The RAM entity type of the operator. Valid values:

*   RamUser: a RAM user
*   RamRole: a RAM role', example='RamUser'),
          }(name='Operator', description='The operator who performs operations on the plan.'),
        }
      ](name='OperationRecords', description='An array that consists of operations that are performed by the operator.'),
      todoTaskActivities?: [ 
        {
          activityName?: string(name='ActivityName', description='The name of the operation that is being performed by the plan.', example='ApproverNode-1'),
          tasks?: [ 
            {
              operator?: {
                principalName?: string(name='PrincipalName', description='The RAM entity name of the operator.', example='approver'),
                principalType?: string(name='PrincipalType', description='The RAM entity type of the operator. Valid values:

*   RamUser: a RAM user
*   RamRole: a RAM role', example='RamUser'),
              }(name='Operator', description='The operator who performs operations on the plan.'),
            }
          ](name='Tasks', description='An array consisting of tasks that are pending for review.'),
        }
      ](name='TodoTaskActivities', description='An array that consists of operations that are being performed by the plan.'),
    }(name='ApprovalDetail', description='The review details of the plan.'),
    assignedApprovers?: [ 
      {
        principalName?: string(name='PrincipalName', description='The RAM entity name of the reviewer.', example='approver'),
        principalType?: string(name='PrincipalType', description='The type of the Resource Access Management (RAM) entity of the reviewer. Valid values:

*   RamUser: a RAM user
*   RamRole: a RAM role', example='RamUser'),
      }
    ](name='AssignedApprovers', description='An array that consists of reviewers.'),
    createTime?: string(name='CreateTime', description='The time when the plan was created.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-05-23T09:46:27Z'),
    description?: string(name='Description', description='The description of the plan.', example='Create an ECS instance.'),
    operationType?: string(name='OperationType', description='The purpose of the plan. Valid values:

*   LaunchProduct: launches the product.
*   UpdateProvisionedProduct: updates the information about the product instance.
*   TerminateProvisionedProduct: terminates the product instance.', example='LaunchProduct'),
    ownerPrincipalId?: string(name='OwnerPrincipalId', description='The ID of the RAM entity to which the plan belongs.', example='27740196382623****'),
    ownerPrincipalName?: string(name='OwnerPrincipalName', description='The name of the RAM entity to which the plan belongs.', example='endUser'),
    ownerPrincipalType?: string(name='OwnerPrincipalType', description='The type of the RAM entity to which the plan belongs. Valid values:

*   RamUser: a RAM user
*   RamRole: a RAM role', example='RamUser'),
    parameters?: [ 
      {
        parameterKey?: string(name='ParameterKey', description='The name of the parameter in the template.', example='instance_type'),
        parameterValue?: string(name='ParameterValue', description='The value of the parameter in the template.', example='ecs.s6-c1m1.small'),
      }
    ](name='Parameters', description='An array that consists of the parameters in the template.'),
    planId?: string(name='PlanId', description='The ID of the plan.', example='plan-bp1jvmdk2k****'),
    planName?: string(name='PlanName', description='The name of the plan.', example='DEMO-ECS instance'),
    planType?: string(name='PlanType', description='The type of the plan.

The value is fixed as Ros, which indicates Resource Orchestration Service (ROS).', example='Ros'),
    portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****'),
    productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
    productVersionId?: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****'),
    provisionedProductId?: string(name='ProvisionedProductId', description='The ID of the product instance.', example='pp-bp1ddg1n2a****'),
    provisionedProductName?: string(name='ProvisionedProductName', description='The name of the product instance.', example='DEMO-ECS instance'),
    stackId?: string(name='StackId', description='The ID of the ROS stack.', example='137e31df-3754-40b4-be2f-c793ad84****'),
    stackRegionId?: string(name='StackRegionId', description='The ID of the region to which the ROS stack belongs.', example='cn-hangzhou'),
    status?: string(name='Status', description='The state of the plan. Valid values:

*   PreviewInProgress: The plan is being prechecked.
*   PreviewSuccess: The precheck is successful.
*   PreviewFailed: The precheck fails.
*   ExecuteInProgress: The plan is being run.
*   ExecuteSuccess: The plan is run.
*   ExecuteFailed: The plan fails to be run.', example='PreviewSuccess'),
    statusMessage?: string(name='StatusMessage', description='The message returned for the state.

> This parameter is returned only when PreviewFailed or ExecuteFailed is returned for Status.', example='Create stack failed: Resource CREATE failed: terraform stack sc-146611588617****-pp-bp1ddg1n2a**** failure...'),
    tags?: [ 
      {
        key?: string(name='Key', description='The key of the custom tag.', example='k1'),
        value?: string(name='Value', description='The value of the custom tag.', example='v1'),
      }
    ](name='Tags', description='An array that consists of custom tags.'),
    uid?: string(name='Uid', description='The ID of the Alibaba Cloud account to which the plan belongs.', example='146611588617****'),
    updateTime?: string(name='UpdateTime', description='The last time when the task was modified.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-05-23T09:47:29Z'),
  }(name='PlanDetail', description='The details of the plan.'),
  productDetail?: {
    createTime?: string(name='CreateTime', description='The creation time.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-04-12T06:10:37Z'),
    description?: string(name='Description', description='The description of the product.', example='This is a product description.'),
    productArn?: string(name='ProductArn', description='The Alibaba Cloud Resource Name (ARN) of the product.', example='acs:servicecatalog:cn-hangzhou:146611588617****:product/prod-bp18r7q127****'),
    productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
    productName?: string(name='ProductName', description='The name of the product.', example='DEMO-Create an ECS instance'),
    productType?: string(name='ProductType', description='The type of the product.

The value is fixed as Ros, which indicates ROS.', example='Ros'),
    providerName?: string(name='ProviderName', description='The provider of the product.', example='IT team'),
  }(name='ProductDetail', description='The details of the product.'),
  productVersionDetail?: {
    active?: boolean(name='Active', description='Indicates whether the product version is visible to end users. Valid values:

*   true (default)
*   false', example='true'),
    createTime?: string(name='CreateTime', description='The time when the product version was created.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-04-12T06:10:37Z'),
    description?: string(name='Description', description='The description of the product version.', example='The description of the product version.'),
    guidance?: string(name='Guidance', description='The recommendation information. Valid values:

*   Default: No recommendation information is provided. This is the default value.
*   Recommended: the recommendation version.
*   Latest: the latest version.
*   Deprecated: the version that is about to be deprecated.', example='Default'),
    productId?: string(name='ProductId', description='The ID of the product to which the product version belongs.', example='prod-bp18r7q127****'),
    productVersionId?: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****'),
    productVersionName?: string(name='ProductVersionName', description='The name for the version of the product.', example='1.0.0'),
    templateType?: string(name='TemplateType', description='The type of the template.

The value is fixed as RosTerraformTemplate, which indicates that the Terraform template is supported by ROS.', example='RosTerraformTemplate'),
    templateUrl?: string(name='TemplateUrl', description='The URL of the template.', example='oss://servicecatalog-cn-hangzhou/146611588617****/terraform/template/tpl-bp1217we23****/template.json'),
  }(name='ProductVersionDetail', description='The details of the product version.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
  resourceChanges?: [ 
    {
      action?: string(name='Action', description='The action that is performed on the resource. Valid values:

*   Add
*   Modify
*   Remove
*   None', example='Add'),
      logicalResourceId?: string(name='LogicalResourceId', description='The logical ID of the resource.', example='instance'),
      physicalResourceId?: string(name='PhysicalResourceId', description='The physical ID of the resource.

> This parameter is returned only when Action is set to Modify or Remove.', example='i-bp13lmam3qd9q6il****'),
      replacement?: string(name='Replacement', description='Indicates whether a replacement update is performed on the template. Valid values:

*   True: A replacement update is performed on the template.
*   False: A change is made on the template.
*   Conditional: A replacement update may be performed on the template. You can check whether a replacement update is performed when the template is in use.

> This parameter is returned only when Action is set to Modify.', example='True'),
      resourceType?: string(name='ResourceType', description='The type of the resource.', example='alicloud_instance'),
    }
  ](name='ResourceChanges', description='An array that consists of the resources to be changed in the plan.'),
}

model GetProvisionedProductPlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProvisionedProductPlanResponseBody(name='body'),
}

async function getProvisionedProductPlan(request: GetProvisionedProductPlanRequest): GetProvisionedProductPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetProvisionedProductPlan', 'POST', '/', 'json', true, 'form', request);
}

model GetTagOptionRequest {
  tagOptionId: string(name='TagOptionId', description='The ID of the tag option.', example='tag-bp1r3mxq3t****', position='Query'),
}

model GetTagOptionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C1509725-055D-5C7B-9420-8B737DBD****'),
  tagOptionDetail?: {
    active?: boolean(name='Active', description='Indicates whether the tag option is enabled. Valid values:

*   true
*   false', example='true'),
    key?: string(name='Key', description='The key of the tag option.', example='k1'),
    owner?: string(name='Owner', description='The ID of the Alibaba Cloud account to which the tag option belongs.', example='133413081827****'),
    tagOptionId?: string(name='TagOptionId', description='The ID of the tag option.', example='tag-bp15qmwz3r****'),
    value?: string(name='Value', description='The value of the tag option.', example='v1'),
  }(name='TagOptionDetail', description='The details of the tag option.'),
}

model GetTagOptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTagOptionResponseBody(name='body'),
}

async function getTagOption(request: GetTagOptionRequest): GetTagOptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTagOption', 'GET', '/', 'json', false, 'json', request);
}

model GetTaskRequest {
  taskId: string(name='TaskId', description='The ID of the task.', example='task-bp1dmg242c****', position='Body'),
}

model GetTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
  taskDetail?: {
    createTime?: string(name='CreateTime', description='The time when the task was created.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-05-23T09:46:27Z'),
    log?: {
      terraformLogs?: [ 
        {
          command?: string(name='Command', description='The name of the Terraform command that is run. Valid values:

*   apply
*   plan
*   destroy
*   version

For more information about Terraform commands, see [Basic CLI Features](https://www.terraform.io/cli/commands).', example='apply'),
          content?: string(name='Content', description='The content of the output stream that is returned after the command is run.', example='Apply complete! Resources: 42 added, 0 changed, 0 destroyed.'),
          stream?: string(name='Stream', description='The output stream. Valid values:

*   stdout: a standard output stream
*   stderr: a standard error stream', example='stdout'),
        }
      ](name='TerraformLogs', description='The Terraform logs.'),
    }(name='Log', description='The logs of the instance.'),
    outputs?: [ 
      {
        description?: string(name='Description', description='The description of the output parameter for the template.', example='The ECS instance ID.'),
        outputKey?: string(name='OutputKey', description='The name of the output parameter for the template.', example='instance_id'),
        outputValue?: string(name='OutputValue', description='The value of the output parameter for the template.', example='i-xxxxxx'),
      }
    ](name='Outputs', description='The output parameters of the template.'),
    parameters?: [ 
      {
        parameterKey?: string(name='ParameterKey', description='The name of the input parameter for the template.', example='instance_type'),
        parameterValue?: string(name='ParameterValue', description='The value of the input parameter for the template.', example='ecs.s6-c1m1.small'),
      }
    ](name='Parameters', description='The parameters that are specified in the template.'),
    portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****'),
    productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
    productName?: string(name='ProductName', description='The name of the product.', example='DEMO-Create an ECS instance'),
    productVersionId?: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****'),
    productVersionName?: string(name='ProductVersionName', description='The name of the product version.', example='1.0'),
    provisionedProductId?: string(name='ProvisionedProductId', description='The ID of the product instance.', example='pp-bp1ddg1n2a****'),
    provisionedProductName?: string(name='ProvisionedProductName', description='The name of the product instance.', example='DEMO-ECS instance'),
    status?: string(name='Status', description='The state of the task. Valid values:

*   Succeeded: The task was successful.
*   InProgress: The task was in progress.
*   Failed: The task failed.', example='Succeeded'),
    statusMessage?: string(name='StatusMessage', description='The message that is returned for the status of the task.

> This parameter is returned only when Failed is returned for the Status parameter.', example='Resource CREATE failed: terraform stack sc-146611588617****-pp-bp1ddg1n2a**** failure...'),
    taskId?: string(name='TaskId', description='The ID of the task.', example='task-bp1dmg242c****'),
    taskTags?: [ 
      {
        key?: string(name='Key', description='The custom tag key.

The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `acs:` or `aliyun`.', example='k1'),
        value?: string(name='Value', description='The custom tag value.

The value must be 1 to 128 characters in length. It cannot start with `acs:` and cannot contain `http://` or `https://`.', example='v1'),
      }
    ](name='TaskTags', description='The custom tags.'),
    taskType?: string(name='TaskType', description='The type of the task. Valid values:

*   LaunchProduct: a task that launches the product.
*   UpdateProvisionedProduct: a task that updates the information about the product instance.
*   TerminateProvisionedProduct: a task that terminates the product instance.', example='LaunchProduct'),
    updateTime?: string(name='UpdateTime', description='The time when the task was last modified.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-05-23T09:47:29Z'),
  }(name='TaskDetail', description='The details of the task.'),
}

model GetTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTaskResponseBody(name='body'),
}

async function getTask(request: GetTaskRequest): GetTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTask', 'POST', '/', 'json', true, 'form', request);
}

model GetTemplateRequest {
  productId: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****', position='Query'),
  productVersionId: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****', position='Query'),
}

model GetTemplateResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
  templateBody?: string(name='TemplateBody', description='The content of the template.

For more information about the template syntax, see [Structure of Terraform templates](~~184397~~).', example='{
  "ROSTemplateFormatVersion": "2015-09-01",
  "Transform": "Aliyun::Terraform-v1.1",
  "Workspace": {
    "main.tf": "variable  \\"name\\" {  default = \\"auto_provisioning_group\\"}"
  },
  "Outputs": {}
}'),
}

model GetTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTemplateResponseBody(name='body'),
}

async function getTemplate(request: GetTemplateRequest): GetTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTemplate', 'POST', '/', 'json', false, 'json', request);
}

model LaunchProductRequest {
  parameters?: [ 
    {
      parameterKey?: string(name='ParameterKey', description='The name of the input parameter for the template.', example='instance_type'),
      parameterValue?: string(name='ParameterValue', description='The value of the input parameter for the template.', example='ecs.s6-c1m1.small'),
    }
  ](name='Parameters', description='The input parameters of the template.

You can specify up to 200 parameters.

> This parameter is optional. If you specify the Parameters parameter, you must specify the ParameterKey and ParameterValue parameters.', position='Body'),
  portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.

> If the PortfolioId parameter is not required, you do not need to specify the PortfolioId parameter. If the PortfolioId parameter is required, you must specify the PortfolioId parameter. For more information about how to obtain the value of the PortfolioId parameter, see [ListLaunchOptions](~~ListLaunchOptions~~).', example='port-bp1yt7582g****', position='Body'),
  productId: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****', position='Body'),
  productVersionId: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****', position='Body'),
  provisionedProductName: string(name='ProvisionedProductName', description='The name of the product instance.

The value must be 1 to 128 characters in length.', example='DEMO-ECS instance', minLength=1, maxLength=100, position='Body'),
  stackRegionId: string(name='StackRegionId', description='The ID of the region to which the Resource Orchestration Service (ROS) stack belongs.

For more information about how to obtain the regions that are supported by ROS, see [DescribeRegions](~~131035~~).', example='cn-hangzhou', position='Body'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key of the custom tag.

The tag key must be 1 to 128 characters in length and cannot contain `http://` or `https://`. It cannot start with `acs:` or `aliyun`.', example='k1'),
      value?: string(name='Value', description='The tag value of the custom tag.

The tag value can be up to 128 characters in length and cannot start with `acs:`. It cannot contain `http://` or `https://`.', example='v1'),
    }
  ](name='Tags', description='The custom tags that are specified by the end user.

Maximum value of N: 20.

> 

*   The Tags parameter is optional. If you specify the Tags parameter, you must specify the Tags.N.Key and Tags.N.Value parameters.

*   The tag is propagated to each stack resource that supports the tag feature.', position='Body'),
}

model LaunchProductResponseBody = {
  provisionedProductId?: string(name='ProvisionedProductId', description='The ID of the instance', example='pp-bp1ddg1n2a****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model LaunchProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LaunchProductResponseBody(name='body'),
}

async function launchProduct(request: LaunchProductRequest): LaunchProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LaunchProduct', 'POST', '/', 'json', true, 'form', request);
}

model ListLaunchOptionsRequest {
  productId: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****', position='Query'),
}

model ListLaunchOptionsResponseBody = {
  launchOptionSummaries?: [ 
    {
      constraintSummaries?: [ 
        {
          constraintType?: string(name='ConstraintType', description='The type of the constraint. Valid values:

1.  Launch
2.  Template
3.  Approval
4.  StackRegion', example='Launch'),
          description?: string(name='Description', description='The description of the constraint.', example='Launch as local role TestRole'),
          operationTypes?: [ string ](name='OperationTypes', description='The types of operations that require approval. If the type of the constraint is Approval, this parameter is not empty.'),
          stackRegions?: [ string ](name='StackRegions', description='The regions in which users can launch the service. If the type of the constraint is StackRegion, this parameter is not empty.'),
        }
      ](name='ConstraintSummaries', description='The constraints.'),
      portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****'),
      portfolioName?: string(name='PortfolioName', description='The name of the product portfolio.', example='DEMO-IT services'),
    }
  ](name='LaunchOptionSummaries', description='The launch options.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model ListLaunchOptionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLaunchOptionsResponseBody(name='body'),
}

async function listLaunchOptions(request: ListLaunchOptionsRequest): ListLaunchOptionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLaunchOptions', 'POST', '/', 'json', false, 'json', request);
}

model ListPortfoliosRequest {
  filters?: [ 
    {
      key?: string(name='Key', example='PortfolioName'),
      value?: string(name='Value'),
    }
  ](name='Filters', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  productId?: string(name='ProductId', example='prod-bp18r7q127****', position='Query'),
  scope?: string(name='Scope', example='Local', position='Query'),
  sortBy?: string(name='SortBy', example='CreateTime', position='Query'),
  sortOrder?: string(name='SortOrder', example='Desc', position='Query'),
}

model ListPortfoliosResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  portfolioDetails?: [ 
    {
      createTime?: string(name='CreateTime', description='代表创建时间的资源属性字段', example='2022-04-12T06:11:12Z'),
      description?: string(name='Description', description='产品组合描述'),
      portfolioArn?: string(name='PortfolioArn', example='acs:servicecatalog:cn-hangzhou:146611588617****:portfolio/port-bp1yt7582g****'),
      portfolioId?: string(name='PortfolioId', description='代表资源一级ID的资源属性字段', example='port-bp1yt7582g****'),
      portfolioName?: string(name='PortfolioName', description='代表资源名称的资源属性字段'),
      providerName?: string(name='ProviderName', description='产品组合提供方'),
    }
  ](name='PortfolioDetails'),
  requestId?: string(name='RequestId', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListPortfoliosResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPortfoliosResponseBody(name='body'),
}

async function listPortfolios(request: ListPortfoliosRequest): ListPortfoliosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPortfolios', 'POST', '/', 'json', false, 'json', request);
}

model ListPrincipalsRequest {
  portfolioId: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****', position='Query'),
}

model ListPrincipalsResponseBody = {
  principals?: [ 
    {
      principalId?: string(name='PrincipalId', description='The ID of the RAM entity.', example='24477111603637****'),
      principalType?: string(name='PrincipalType', description='The type of the RAM entity. Valid values:

*   RamUser: a RAM user
*   RamRole: a RAM role', example='RamUser'),
    }
  ](name='Principals', description='The RAM entities.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model ListPrincipalsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPrincipalsResponseBody(name='body'),
}

async function listPrincipals(request: ListPrincipalsRequest): ListPrincipalsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrincipals', 'POST', '/', 'json', false, 'json', request);
}

model ListProductVersionsRequest {
  productId: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****', position='Query'),
}

model ListProductVersionsResponseBody = {
  productVersionDetails?: [ 
    {
      active?: boolean(name='Active', description='Indicates whether the product version is enabled. Valid values:

true: The product version is enabled. This is the default value. false: The product version is disabled.', example='true'),
      createTime?: string(name='CreateTime', description='The time when the product version was created.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-04-12T06:10:37Z'),
      description?: string(name='Description', description='The description of the product version.', example='The description of the product version.'),
      guidance?: string(name='Guidance', description='The recommendation information. Valid values:

*   Default: No recommendation information is provided. This is the default value.
*   Recommended: the recommended version.
*   Latest: the latest version.
*   Deprecated: the version that is about to be discontinued.', example='Default'),
      productId?: string(name='ProductId', description='The ID of the product to which the product version belongs.', example='prod-bp18r7q127****'),
      productVersionId?: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****'),
      productVersionName?: string(name='ProductVersionName', description='The name of the product version.', example='1.0'),
      templateType?: string(name='TemplateType', description='The type of the template.

The value is fixed as RosTerraformTemplate, which indicates the Terraform template that is supported by Resource Orchestration Service (ROS).', example='RosTerraformTemplate'),
      templateUrl?: string(name='TemplateUrl', description='The URL of the template.', example='oss://servicecatalog-cn-hangzhou/146611588617****/terraform/template/tpl-bp1217we23****/template.json'),
    }
  ](name='ProductVersionDetails', description='The versions of the product.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model ListProductVersionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProductVersionsResponseBody(name='body'),
}

async function listProductVersions(request: ListProductVersionsRequest): ListProductVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProductVersions', 'POST', '/', 'json', false, 'json', request);
}

model ListProductsAsAdminRequest {
  filters?: [ 
    {
      key?: string(name='Key', description='The name of the filter condition. Valid values:

*   ProductName: performs exact matches by product name. Product names are not case-sensitive.
*   FullTextSearch: performs full-text searches by product name, product provider, or product description. Fuzzy match is supported.', example='ProductName'),
      value?: string(name='Value', description='The value of the filter condition.', example='DEMO-Create an ECS instance'),
    }
  ](name='Filters', description='The filter conditions.', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10', position='Query'),
  portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****', position='Query'),
  scope?: string(name='Scope', description='The query scope. Valid values:

*   Local: the products that are created by using the current account. This is the default value.
*   Import: the products that are imported from other accounts.
*   All: all available products.', example='Local', position='Query'),
  sortBy?: string(name='SortBy', description='The field that is used to sort the queried data.

Set the value to CreateTime, which specifies the time when the product was created.', example='CreateTime', position='Query'),
  sortOrder?: string(name='SortOrder', description='The order in which you want to sort the queried data. Valid values:

*   Asc: the ascending order
*   Desc: the descending order', example='Desc', position='Query'),
}

model ListProductsAsAdminResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  productDetails?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the product was created.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-04-12T06:10:37Z'),
      description?: string(name='Description', description='The description of the product.', example='The description of the product.'),
      productArn?: string(name='ProductArn', description='The Alibaba Cloud Resource Name (ARN) of the product.', example='acs:servicecatalog:cn-hangzhou:146611588617****:product/prod-bp18r7q127****'),
      productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
      productName?: string(name='ProductName', description='The name of the product.', example='DEMO-Create an ECS instance'),
      productType?: string(name='ProductType', description='The type of the product.

The value is fixed as Ros, which indicates Resource Orchestration Service (ROS).', example='Ros'),
      providerName?: string(name='ProviderName', description='The provider of the product.', example='IT team'),
    }
  ](name='ProductDetails', description='The products.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListProductsAsAdminResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProductsAsAdminResponseBody(name='body'),
}

async function listProductsAsAdmin(request: ListProductsAsAdminRequest): ListProductsAsAdminResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProductsAsAdmin', 'POST', '/', 'json', false, 'json', request);
}

model ListProductsAsEndUserRequest {
  filters?: [ 
    {
      key?: string(name='Key', description='The name of the filter condition. Valid values:

*   ProductName: performs exact matches by product name. Product names are not case-sensitive.
*   FullTextSearch: performs full-text searches by product name, product provider, or product description. Fuzzy match is supported.', example='ProductName'),
      value?: string(name='Value', description='The value of the filter condition.', example='DEMO-Create an ECS instance'),
    }
  ](name='Filters', description='The filter conditions.', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10', position='Query'),
  sortBy?: string(name='SortBy', description='The field that is used to sort the queried data.

Set the value to CreateTime, which specifies the time when the product was created.', example='CreateTime', position='Query'),
  sortOrder?: string(name='SortOrder', description='The order in which you want to sort the queried data. Valid values:

*   Asc: the ascending order
*   Desc: the descending order', example='Desc', position='Query'),
}

model ListProductsAsEndUserResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  productSummaries?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the product was created.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-04-12T06:10:37Z'),
      description?: string(name='Description', description='The description of the product.', example='The description of the product.'),
      hasDefaultLaunchOption?: boolean(name='HasDefaultLaunchOption', description='Indicates whether the default launch option exists. Valid values:

*   true: The default launch option exists. In this case, the PortfolioId parameter is not required when the product is launched or when the information about the product instance is updated.
*   false: The default launch option does not exist. In this case, the PortfolioId parameter is required when the product is launched or when the information about the product instance is updated. For more information about how to obtain the value of the PortfolioId parameter, see [ListLaunchOptions](~~ListLaunchOptions~~).

> If the product is added to only one product portfolio, the default launch option exists. If the product is added to multiple product portfolios, multiple launch options exist at the same time. However, no default launch options exist.', example='true'),
      productArn?: string(name='ProductArn', description='The Alibaba Cloud Resource Name (ARN) of the product.', example='acs:servicecatalog:cn-hangzhou:146611588617****:product/prod-bp18r7q127****'),
      productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
      productName?: string(name='ProductName', description='The name of the product.', example='DEMO-Create an ECS instance'),
      productType?: string(name='ProductType', description='The type of the product.

The value is fixed as Ros, which indicates Resource Orchestration Service (ROS).', example='Ros'),
      providerName?: string(name='ProviderName', description='The provider of the product.', example='IT team'),
    }
  ](name='ProductSummaries', description='The products.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
}

model ListProductsAsEndUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProductsAsEndUserResponseBody(name='body'),
}

/**
  * Make sure that you are granted the permissions to manage relevant products as a user by an administrator. For more information, see [Manage access permissions](~~405233~~).
  *
 */
async function listProductsAsEndUser(request: ListProductsAsEndUserRequest): ListProductsAsEndUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProductsAsEndUser', 'POST', '/', 'json', false, 'json', request);
}

model ListProvisionedProductPlanApproversRequest {
  accessLevelFilter?: string(name='AccessLevelFilter', description='The access filter. Valid values:

*   User (default): queries the plans that are created by the current requester.
*   Account: queries the plans that belong to the current Alibaba Cloud account.
*   ResourceDirectory: queries the plans that belong to the current resource directory.

>  You must specify one of the `ApprovalFilter` and `AccessLevelFilter` parameters, but not both.', example='User', position='Query'),
  approvalFilter?: string(name='ApprovalFilter', description='The access filter of the review dimension. Valid values:

*   AccountRequests: queries all reviewed plans that belong to the current Alibaba Cloud account.
*   ResourceDirectoryRequests: queries all plans that belong to the current resource directory.

>  You must specify one of the `ApprovalFilter` and `AccessLevelFilter` parameters, but not both.', example='AccountRequests', position='Query'),
  filters?: [ 
    {
      key?: string(name='Key', description='The name of the filter condition. Valid values:

*   ProvisionedProductPlanApproverName: performs fuzzy match by reviewer name.', example='ProvisionedProductPlanApproverName'),
      value?: string(name='Value', description='The value of the filter condition.', example='approver'),
    }
  ](name='Filters', description='An array that consists of filter conditions.', position='Query'),
}

model ListProvisionedProductPlanApproversResponseBody = {
  approvers?: [ 
    {
      principalName?: string(name='PrincipalName', description='The name of the reviewer.', example='approver-1'),
      principalType?: string(name='PrincipalType', description='The type of the Resource Access Management (RAM) entity of the reviewer. Valid values:

*   RamUser: a RAM user
*   RamRole: a RAM role', example='RamUser'),
    }
  ](name='Approvers', description='An array that consists of reviewers.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F****'),
}

model ListProvisionedProductPlanApproversResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProvisionedProductPlanApproversResponseBody(name='body'),
}

async function listProvisionedProductPlanApprovers(request: ListProvisionedProductPlanApproversRequest): ListProvisionedProductPlanApproversResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProvisionedProductPlanApprovers', 'GET', '/', 'json', false, 'json', request);
}

model ListProvisionedProductPlansRequest {
  accessLevelFilter?: string(name='AccessLevelFilter', description='The access filter. Valid values:

*   User (default): queries the plans that are created by the current requester.
*   Account: queries the plans that belong to the current Alibaba Cloud account.
*   ResourceDirectory: queries the plans that belong to the current resource directory.', example='User', position='Query'),
  approvalFilter?: string(name='ApprovalFilter', description='The access filter of the review dimension. Valid values:

*   ReceivedRequests: queries plans that are pending for review.
*   ApprovalHistory: queries review history.
*   AccountRequests: queries all plans that belong to the current Alibaba Cloud account.
*   AccountRequests: queries all plans that belong to the current Alibaba Cloud account.', example='ReceivedRequests', position='Query'),
  filters?: [ 
    {
      key?: string(name='Key', description='The name of the filter condition. Valid values:

*   ProvisionedProductPlanName: performs exact matches by plan name. Plan names are not case-sensitive.
*   ProvisionedProductPlanApprover: performs exact matches by reviewer. You must specify a reviewer in the `RamUser/RamRole:<Name of the reviewer>` format. You can specify multiple reviewers.
*   ProvisionedProductPlanApproverName: performs matches by reviewer name. You must specify the Resource Access Management (RAM) entity name of the reviewer. You can specify multiple reviewer names.
*   ProvisionedProductPlanStatus: performs matches by plan status. You must specify the state of the plan. You can specify multiple states.
*   ProvisionedProductPlanOwnerUid: performs exact matches by ID of Alibaba Cloud account to which a plan belongs.
*   FullTextSearch: performs fuzzy full-text searches by plan name.', example='FullTextSearch'),
      value?: string(name='Value', description='The value of the filter condition.', example='ECS'),
    }
  ](name='Filters', description='An array that consists of filter conditions.', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Minimum value: 1. Default value: 10.', example='10', position='Query'),
  provisionedProductId?: string(name='ProvisionedProductId', description='The ID of the product instance.', example='pp-bp1ddg1n2a****', position='Query'),
  sortBy?: string(name='SortBy', description='The information based on which you want to sort the query results.

Set the value to CreateTime, which specifies the creation time of plans.', example='CreateTime', position='Query'),
  sortOrder?: string(name='SortOrder', description='The order in which you want to sort the query results. Valid values:

*   Asc: the ascending order
*   Desc (default): the descending order.', example='Desc', position='Query'),
}

model ListProvisionedProductPlansResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.

Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.

Valid values: 1 to 100. Minimum value: 1. Default value: 10.', example='10'),
  planDetails?: [ 
    {
      assignedApprovers?: [ 
        {
          principalName?: string(name='PrincipalName', description='The RAM entity name of the reviewer.', example='endUser'),
          principalType?: string(name='PrincipalType', description='The type of the RAM entity of the reviewer. Valid values:

*   RamUser: a RAM user
*   RamRole: a RAM role', example='RamUser'),
        }
      ](name='AssignedApprovers', description='An array that consists of reviewers.'),
      createTime?: string(name='CreateTime', description='The time when the plan was created.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-09-13T02:01:22Z'),
      description?: string(name='Description', description='The description of the plan.', example='For development team.'),
      operationType?: string(name='OperationType', description='The purpose of the plan. Valid values:

*   LaunchProduct: launches the product. This is the default value.
*   UpdateProvisionedProduct: updates the information about the product instance.
*   TerminateProvisionedProduct: terminates the product instance.', example='LaunchProduct'),
      ownerPrincipalId?: string(name='OwnerPrincipalId', description='The ID of the RAM entity to which the plan belongs.', example='24477111603637****'),
      ownerPrincipalName?: string(name='OwnerPrincipalName', description='The name of the RAM entity to which the plan belongs.', example='enduser'),
      ownerPrincipalType?: string(name='OwnerPrincipalType', description='The type of the RAM entity to which the plan belongs. Valid values:

*   RamUser: a RAM user
*   RamRole: a RAM role', example='RamUser'),
      parameters?: [ 
        {
          parameterKey?: string(name='ParameterKey', description='The name of the parameter in the template.', example='role_name'),
          parameterValue?: string(name='ParameterValue', description='The value of the parameter in the template.', example='Test-8'),
        }
      ](name='Parameters', description='An array that consists of the parameters in the template.'),
      planId?: string(name='PlanId', description='The ID of the plan.', example='plan-bp18mmdh2u****'),
      planName?: string(name='PlanName', description='The name of the plan.', example='DEMO-Create an ECS instance-637\\*\\*\\*\\*'),
      planType?: string(name='PlanType', description='The type of the plan.

The value is fixed as Ros, which indicates Resource Orchestration Service (ROS).', example='Ros'),
      portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1438kf2j****'),
      productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp1rtrnh2c****'),
      productName?: string(name='ProductName', description='The name of the product.', example='Create an ECS instance'),
      productVersionId?: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp19udk22v****'),
      provisionedProductId?: string(name='ProvisionedProductId', description='The ID of the product instance.', example='pp-bp1c35162d****'),
      provisionedProductName?: string(name='ProvisionedProductName', description='The name of the product instance.', example='rds-MYSQL-875****'),
      stackId?: string(name='StackId', description='The ID of the ROS stack.', example='2599090a-309e-4306-b989-17ba66a9****'),
      stackRegionId?: string(name='StackRegionId', description='The ID of the region to which the ROS stack belongs.', example='cn-hangzhou'),
      status?: string(name='Status', description='The state of the plan. Valid values:

*   PreviewInProgress: The plan is being prechecked.
*   PreviewSuccess: The precheck is successful.
*   PreviewFailed: The precheck fails.
*   ApplicationInProgress: The plan is being reviewed.
*   ApplicationApproved: The plan is approved.
*   ApplicationRejected: The approval is rejected.
*   ExecuteInProgress: The plan is being run.
*   ExecuteSuccess: The plan is run.
*   ExecuteFailed: The plan fails to be run.
*   Canceled: The plan is canceled.', example='PreviewSuccess'),
      statusMessage?: string(name='StatusMessage', description='The message returned for the state.

> This parameter is returned only when PreviewFailed or ExecuteFailed is returned for the Status parameter.', example='Create stack failed: Resource CREATE failed: terraform stack sc-146611588617****-pp-bp1ddg1n2a**** failure...'),
      tags?: [ 
        {
          key?: string(name='Key', description='The key of the custom tag.', example='k1'),
          value?: string(name='Value', description='The value of the custom tag.', example='v1'),
        }
      ](name='Tags', description='An array that consists of custom tags.'),
      uid?: string(name='Uid', description='The ID of the Alibaba Cloud account to which the plan belongs.', example='146611588617****'),
      updateTime?: string(name='UpdateTime', description='The last time when the task was modified.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-07-18T06:02:35.075Z'),
    }
  ](name='PlanDetails', description='An array that consists of plans.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='16'),
}

model ListProvisionedProductPlansResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProvisionedProductPlansResponseBody(name='body'),
}

async function listProvisionedProductPlans(request: ListProvisionedProductPlansRequest): ListProvisionedProductPlansResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProvisionedProductPlans', 'POST', '/', 'json', false, 'json', request);
}

model ListProvisionedProductsRequest {
  accessLevelFilter?: string(name='AccessLevelFilter', description='The access filter. Valid values:

*   User: queries the product instances that are created by the current requester. This is the default value.
*   Account: queries the product instances that belong to the current Alibaba Cloud account.', example='User', position='Query'),
  filters?: [ 
    {
      key?: string(name='Key', description='The name of the filter condition. Valid values:

*   ProvisionedProductName: performs exact matches by product instance name. Product instance names are not case-sensitive.
*   FullTextSearch: performs full-text searches by product instance name. Fuzzy match is supported.', example='ProvisionedProductName'),
      value?: string(name='Value', description='The value of the filter condition.', example='DEMO-ECS instance'),
    }
  ](name='Filters', description='The filter conditions.', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10', position='Query'),
  sortBy?: string(name='SortBy', description='The field that is used to sort the queried data.

Set the value to CreateTime, which specifies the time when the product instance was created.', example='CreateTime', position='Query'),
  sortOrder?: string(name='SortOrder', description='The sorting method. Valid values:

*   Asc: the ascending order.
*   Desc (default): the descending order.', example='Desc', position='Query'),
}

model ListProvisionedProductsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  provisionedProductDetails?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the product instance was created.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-05-23T09:46:27Z'),
      lastProvisioningTaskId?: string(name='LastProvisioningTaskId', description='The ID of the task that was last run on the product instance.

The task can be one of the following types:

*   LaunchProduct: a task that launches the product.
*   UpdateProvisionedProduct: a task that updates the information about the product instance.
*   TerminateProvisionedProduct: a task that terminates the product instance.', example='task-bp1dmg242c****'),
      lastSuccessfulProvisioningTaskId?: string(name='LastSuccessfulProvisioningTaskId', description='The ID of the last task that was successfully run on the product instance.

The task can be one of the following types:

*   LaunchProduct: a task that launches the product.
*   UpdateProvisionedProduct: a task that updates the information about the product instance.
*   TerminateProvisionedProduct: a task that terminates the product instance.', example='task-bp1dmg242c****'),
      lastTaskId?: string(name='LastTaskId', description='The ID of the task that was last run.', example='task-bp1dmg242c****'),
      ownerPrincipalId?: string(name='OwnerPrincipalId', description='The ID of the RAM entity to which the product instance belongs.', example='24477111603637****'),
      ownerPrincipalType?: string(name='OwnerPrincipalType', description='The type of the Resource Access Management (RAM) entity to which the product instance belongs. Valid values:

*   RamUser: a RAM user
*   RamRole: a RAM role', example='RamUser'),
      portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.', example='port-bp1yt7582g****'),
      productId?: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****'),
      productName?: string(name='ProductName', description='The name of the product.', example='DEMO-Create an ECS instance'),
      productVersionId?: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****'),
      productVersionName?: string(name='ProductVersionName', description='The name of the product version.', example='1.0'),
      provisionedProductArn?: string(name='ProvisionedProductArn', description='The Alibaba Cloud Resource Name (ARN) of the product instance.', example='acs:servicecatalog:cn-hangzhou:146611588617****:provisionedproduct/pp-bp1ddg1n2a****'),
      provisionedProductId?: string(name='ProvisionedProductId', description='The ID of the product instance.', example='pp-bp1ddg1n2a****'),
      provisionedProductName?: string(name='ProvisionedProductName', description='The name of the product instance.', example='DEMO-ECS instance'),
      provisionedProductType?: string(name='ProvisionedProductType', description='The type of the product instance.

The value is fixed as RosStack, which indicates an ROS stack.', example='RosStack'),
      stackId?: string(name='StackId', description='The ID of the Resource Orchestration Service (ROS) stack.', example='137e31df-3754-40b4-be2f-c793ad84****'),
      stackRegionId?: string(name='StackRegionId', description='The ID of the region to which the ROS stack belongs.', example='cn-hangzhou'),
      status?: string(name='Status', description='The state of the product instance. Valid values:

*   Available: The product instance was available.
*   UnderChange: The information about the product instance was being changed.
*   Error: An exception occurred on the product instance.', example='Available'),
      statusMessage?: string(name='StatusMessage', description='The message that is returned for the status of the product instance.

> This parameter is returned only when Error is returned for the Status parameter.', example='Resource CREATE failed: terraform stack sc-146611588617****-pp-bp1ddg1n2a**** failure...'),
    }
  ](name='ProvisionedProductDetails', description='The product instances.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListProvisionedProductsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProvisionedProductsResponseBody(name='body'),
}

async function listProvisionedProducts(request: ListProvisionedProductsRequest): ListProvisionedProductsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProvisionedProducts', 'POST', '/', 'json', false, 'json', request);
}

model ListRegionsRequest {
}

model ListRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='The name of the region.', example='China (Hangzhou)'),
      regionEndpoint?: string(name='RegionEndpoint', description='The endpoint of the region.', example='servicecatalog.cn-hangzhou.aliyuncs.com'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    }
  ](name='Regions', description='The details of regions.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRegions', 'POST', '/', 'json', false, 'json', request);
}

model ListResourcesForTagOptionRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100 Minimum value: 1. Default value: 10.', example='10', position='Query'),
  resourceType: string(name='ResourceType', description='The type of resource that is associated with the tag option. Valid values:

*   product: product
*   Portfolio: product portfolio', example='Product', position='Query'),
  tagOptionId: string(name='TagOptionId', description='The ID of the tag option.', example='tag-bp1u6mdf3d****', position='Query'),
}

model ListResourcesForTagOptionResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.

Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.

Valid values: 1 to 100 Minimum value: 1. Default value: 10.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E465F21C-8712-5794-A754-5E4D9152****'),
  resourceDetails?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the resource was created.

The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-11-04T08:07:04.281986714Z'),
      description?: string(name='Description', description='The description of the resource.

The value must be 1 to 128 characters in length.', example='The description of the resource.'),
      resourceArn?: string(name='ResourceArn', description='The Alibaba Cloud Resource Name (ARN) of the resource.', example='acs:servicecatalog:cn-hangzhou:146611588617****:product/prod-bp18r7q127****'),
      resourceId?: string(name='ResourceId', description='The ID of the resource with which the tag option is associated.', example='port-bp15p96922****'),
      resourceName?: string(name='ResourceName', description='The name of the resource.', example='DEMO-ECS'),
    }
  ](name='ResourceDetails', description='An array that consists of the associated resources.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='10'),
}

model ListResourcesForTagOptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListResourcesForTagOptionResponseBody(name='body'),
}

async function listResourcesForTagOption(request: ListResourcesForTagOptionRequest): ListResourcesForTagOptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListResourcesForTagOption', 'GET', '/', 'json', false, 'json', request);
}

model ListTagOptionsRequest {
  filters?: {
    active?: boolean(name='Active', description='Specifies whether to enable the tag option. Valid values:

*   true (default)
*   false', example='true'),
    fullTextSearch?: string(name='FullTextSearch', description='The full-text search method.', example='k1'),
    key?: string(name='Key', description='The key of the tag option.', example='k1'),
    value?: string(name='Value', description='The value of the tag option.', example='v1'),
  }(name='Filters', description='The filter condition.', shrink='json', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Minimum value: 1. Default value: 10.', example='10', position='Query'),
  sortBy?: string(name='SortBy', description='The information based on which you want to sort the query results.

Set the value to CreateTime, which specifies the creation time of tag options.', example='CreateTime', position='Query'),
  sortOrder?: string(name='SortOrder', description='The order in which you want to sort the query results. Valid values:

*   Asc: the ascending order
*   Desc (default): the descending order', example='Desc', position='Query'),
}

model ListTagOptionsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.

Valid values: 1 to 100. Minimum value: 1. Default value: 10.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='37C9C1DF-EFFC-5D8A-80D0-8657B1F3****'),
  tagOptionDetails?: [ 
    {
      active?: boolean(name='Active', description='Indicates whether the tag option is enabled. Valid values:

*   true
*   false', example='true'),
      key?: string(name='Key', description='The key of the tag option.', example='k1'),
      owner?: string(name='Owner', description='The ID of the Alibaba Cloud account to which the tag option belongs.', example='133413081827****'),
      tagOptionId?: string(name='TagOptionId', description='The ID of the tag option.', example='tag-bp1r3mxq3t****'),
      value?: string(name='Value', description='The value of the tag option.', example='v1'),
    }
  ](name='TagOptionDetails', description='An array that consists of the details of the tag option.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='10'),
}

model ListTagOptionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagOptionsResponseBody(name='body'),
}

async function listTagOptions(request: ListTagOptionsRequest): ListTagOptionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagOptions', 'GET', '/', 'json', false, 'json', request);
}

model ListTasksRequest {
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  provisionedProductId: string(name='ProvisionedProductId', example='pp-bp1ddg1n2a****', position='Query'),
  sortBy?: string(name='SortBy', example='CreateTime', position='Query'),
  sortOrder?: string(name='SortOrder', example='Desc', position='Query'),
}

model ListTasksResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
  taskDetails?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-05-23T09:46:27Z'),
      log?: {
        terraformLogs?: [ 
          {
            command?: string(name='Command', example='apply'),
            content?: string(name='Content', example='Apply complete! Resources: 42 added, 0 changed, 0 destroyed.'),
            stream?: string(name='Stream', example='stdout'),
          }
        ](name='TerraformLogs'),
      }(name='Log'),
      outputs?: [ 
        {
          description?: string(name='Description', example='The ECS instance ID.'),
          outputKey?: string(name='OutputKey', example='instance_id'),
          outputValue?: string(name='OutputValue', example='i-xxxxxx'),
        }
      ](name='Outputs'),
      parameters?: [ 
        {
          parameterKey?: string(name='ParameterKey', example='instance_type'),
          parameterValue?: string(name='ParameterValue', example='ecs.s6-c1m1.small'),
        }
      ](name='Parameters'),
      portfolioId?: string(name='PortfolioId', example='port-bp1yt7582g****'),
      productId?: string(name='ProductId', example='prod-bp18r7q127****'),
      productName?: string(name='ProductName'),
      productVersionId?: string(name='ProductVersionId', example='pv-bp15e79d26****'),
      productVersionName?: string(name='ProductVersionName', example='1.0'),
      provisionedProductId?: string(name='ProvisionedProductId', example='pp-bp1ddg1n2a****'),
      provisionedProductName?: string(name='ProvisionedProductName'),
      status?: string(name='Status', example='Succeeded'),
      statusMessage?: string(name='StatusMessage', example='Resource CREATE failed: terraform stack sc-146611588617****-pp-bp1ddg1n2a**** failure...'),
      taskId?: string(name='TaskId', description='代表资源名称的资源属性字段', example='task-bp1dmg242c****'),
      taskType?: string(name='TaskType', example='LaunchProduct'),
      updateTime?: string(name='UpdateTime', example='2022-05-26T03:28:45Z'),
    }
  ](name='TaskDetails'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTasksResponseBody(name='body'),
}

async function listTasks(request: ListTasksRequest): ListTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTasks', 'POST', '/', 'json', false, 'json', request);
}

model TerminateProvisionedProductRequest {
  provisionedProductId: string(name='ProvisionedProductId', description='The ID of the product instance.', example='pp-bp1ddg1n2a****', position='Body'),
}

model TerminateProvisionedProductResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model TerminateProvisionedProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TerminateProvisionedProductResponseBody(name='body'),
}

/**
  * After a product instance is terminated, the product instance is deleted from the product instance list. End users cannot manage the product instance throughout its lifecycle. Proceed with caution.
  *
 */
async function terminateProvisionedProduct(request: TerminateProvisionedProductRequest): TerminateProvisionedProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TerminateProvisionedProduct', 'POST', '/', 'json', true, 'form', request);
}

model UpdateConstraintRequest {
  config: string(name='Config', description='The configurations of the constraint.

Format: { "LocalRoleName": "\\<role_name>" }.', example='{ "LocalRoleName": "TestRole" }', position='Body'),
  constraintId: string(name='ConstraintId', description='The ID of the constraint.', example='cons-bp1yx7x42v****', position='Body'),
  description?: string(name='Description', description='The description of the constraint.

The value must be 1 to 128 characters in length.', example='Launch as local role TestRole', position='Body'),
}

model UpdateConstraintResponseBody = {
  constraintId?: string(name='ConstraintId', description='The ID of the constraint.', example='cons-bp1yx7x42v****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model UpdateConstraintResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateConstraintResponseBody(name='body'),
}

async function updateConstraint(request: UpdateConstraintRequest): UpdateConstraintResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateConstraint', 'POST', '/', 'json', true, 'form', request);
}

model UpdatePortfolioRequest {
  description?: string(name='Description', description='产品组合描述', position='Body'),
  portfolioId: string(name='PortfolioId', description='代表资源一级ID的资源属性字段', example='port-bp1yt7582g****', position='Body'),
  portfolioName: string(name='PortfolioName', description='代表资源名称的资源属性字段', minLength=1, maxLength=100, position='Body'),
  providerName: string(name='ProviderName', description='产品组合提供方', minLength=1, maxLength=100, position='Body'),
}

model UpdatePortfolioResponseBody = {
  portfolioId?: string(name='PortfolioId', example='port-bp1yt7582g****'),
  requestId?: string(name='RequestId', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model UpdatePortfolioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdatePortfolioResponseBody(name='body'),
}

async function updatePortfolio(request: UpdatePortfolioRequest): UpdatePortfolioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePortfolio', 'POST', '/', 'json', true, 'form', request);
}

model UpdateProductRequest {
  description?: string(name='Description', description='产品描述', position='Body'),
  productId: string(name='ProductId', description='代表资源一级ID的资源属性字段', example='prod-bp18r7q127****', position='Body'),
  productName: string(name='ProductName', description='代表资源名称的资源属性字段', minLength=1, maxLength=100, position='Body'),
  providerName: string(name='ProviderName', description='产品提供方', minLength=1, maxLength=100, position='Body'),
}

model UpdateProductResponseBody = {
  productId?: string(name='ProductId', example='prod-bp18r7q127****'),
  requestId?: string(name='RequestId', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model UpdateProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProductResponseBody(name='body'),
}

async function updateProduct(request: UpdateProductRequest): UpdateProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateProduct', 'POST', '/', 'json', true, 'form', request);
}

model UpdateProductVersionRequest {
  active?: boolean(name='Active', description='Specifies whether to enable the product version. Valid values:

*   true: enables the product version. This is the default value.
*   false: disables the product version.', example='true', position='Body'),
  description?: string(name='Description', description='The description of the product version.

The value must be 1 to 128 characters in length.', example='The description of the product version.', position='Body'),
  guidance?: string(name='Guidance', description='The recommendation information. Valid values:

*   Default: No recommendation information is provided. This is the default value.
*   Recommended: the recommended version.
*   Latest: the latest version.
*   Deprecated: the version that is about to be discontinued.', example='Default', position='Body'),
  productVersionId: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****', position='Body'),
  productVersionName: string(name='ProductVersionName', description='The name of the product version.

The value must be 1 to 128 characters in length.', example='1.0', minLength=1, maxLength=100, position='Body'),
}

model UpdateProductVersionResponseBody = {
  productVersionId?: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model UpdateProductVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProductVersionResponseBody(name='body'),
}

async function updateProductVersion(request: UpdateProductVersionRequest): UpdateProductVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateProductVersion', 'POST', '/', 'json', true, 'form', request);
}

model UpdateProvisionedProductRequest {
  parameters?: [ 
    {
      parameterKey?: string(name='ParameterKey', description='The name of the input parameter for the template.', example='instance_type'),
      parameterValue?: string(name='ParameterValue', description='The value of the input parameter for the template.', example='ecs.s6-c1m1.small'),
    }
  ](name='Parameters', description='The input parameters of the template.

You can specify up to 200 parameters.

> - This parameter is optional. If you specify the Parameters parameter, you must specify the ParameterKey and ParameterValue parameters.
> - If the values of the ProductVersionId and Parameters parameters are not changed, you are not allowed to update the information about the product instance.', position='Body'),
  portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.

> The PortfolioId parameter is not required if the default launch option exists. The PortfolioId parameter is required if the default launch option does not exist. For more information about how to obtain the value of the PortfolioId parameter, see [ListLaunchOptions](~~ListLaunchOptions~~).', example='port-bp1yt7582g****', position='Body'),
  productId: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****', position='Body'),
  productVersionId: string(name='ProductVersionId', description='The ID of the product version.

> If the values of the ProductVersionId and Parameters parameters are not changed, the information about the product instance cannot be updated.', example='pv-bp15e79d26****', position='Body'),
  provisionedProductId: string(name='ProvisionedProductId', description='The ID of the product instance.', example='pp-bp1ddg1n2a****', position='Body'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key of the custom tag.

The tag key must be 1 to 128 characters in length and cannot contain `http://` or `https://`. It cannot start with `acs:` or `aliyun`.', example='k1'),
      value?: string(name='Value', description='The tag value of the custom tag.

The tag value can be up to 128 characters in length and cannot start with `acs:`. It cannot contain `http://` or `https://`.', example='v1'),
    }
  ](name='Tags', description='The input custom tags.

Maximum value of N: 20.

> - The Tags parameter is optional. If you need to specify the Tags parameter, you must specify the Tags.N.Key and Tags.N.Value parameters.
> - The tag is propagated to each stack resource that supports the tag feature.', position='Body'),
}

model UpdateProvisionedProductResponseBody = {
  provisionedProductId?: string(name='ProvisionedProductId', description='The ID of the product instance.', example='pp-bp1ddg1n2a****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F81BF'),
}

model UpdateProvisionedProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProvisionedProductResponseBody(name='body'),
}

async function updateProvisionedProduct(request: UpdateProvisionedProductRequest): UpdateProvisionedProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateProvisionedProduct', 'POST', '/', 'json', true, 'form', request);
}

model UpdateProvisionedProductPlanRequest {
  description?: string(name='Description', description='The description of the plan.', example='Create an ECS instance.', position='Body'),
  parameters?: [ 
    {
      parameterKey?: string(name='ParameterKey', description='The name of the parameter in the template.', example='instance_type'),
      parameterValue?: string(name='ParameterValue', description='The value of the parameter in the template.', example='ecs.s6-c1m1.small'),
    }
  ](name='Parameters', description='An array that consists of the parameters in the template.

Maximum value of N: 200.

> If you specify Parameters, you must specify ParameterKey and ParameterValue.', position='Body'),
  planId: string(name='PlanId', description='The ID of the plan.', example='plan-bp1jvmdk2k****', position='Body'),
  portfolioId?: string(name='PortfolioId', description='The ID of the product portfolio.

> If the default launch option exists, you do not need to specify PortfolioId. If the default launch option does not exist, you must specify PortfolioId. For more information about how to obtain the value of PortfolioId, see [ListLaunchOptions](~~ListLaunchOptions~~).', example='port-bp1yt7582g****', position='Body'),
  productId: string(name='ProductId', description='The ID of the product.', example='prod-bp18r7q127****', position='Body'),
  productVersionId: string(name='ProductVersionId', description='The ID of the product version.', example='pv-bp15e79d26****', position='Body'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of the custom tag.

The key can be up to 128 characters in length, and cannot start with `acs:` or `aliyun`. The tag key cannot contain `http://` or `https://`.', example='k1'),
      value?: string(name='Value', description='The value of the custom tag.

The value can be up to 128 characters in length, and cannot start with `acs:`. The tag value cannot contain `http://` or `https://`.', example='v1'),
    }
  ](name='Tags', description='An array that consists of custom tags.

Maximum value of N: 20.

> 
*   If you specify Tags, you must specify Tags.N.Key and Tags.N.Value.
*   The tag of a stack is propagated to each resource that supports the tag feature in the stack.', position='Body'),
}

model UpdateProvisionedProductPlanResponseBody = {
  planId?: string(name='PlanId', description='The ID of the plan.', example='plan-bp1jvmdk2k****'),
  provisionedProductId?: string(name='ProvisionedProductId', description='The ID of the product instance.', example='pp-bp1ddg1n2a****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F****'),
}

model UpdateProvisionedProductPlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProvisionedProductPlanResponseBody(name='body'),
}

async function updateProvisionedProductPlan(request: UpdateProvisionedProductPlanRequest): UpdateProvisionedProductPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateProvisionedProductPlan', 'POST', '/', 'json', true, 'form', request);
}

model UpdateTagOptionRequest {
  active?: boolean(name='Active', description='Specifies whether to enable the tag option. Valid values:

*   true (default)
*   false', example='true', position='Body'),
  tagOptionId: string(name='TagOptionId', description='The ID of the tag option.', example='tag-bp1u6mdf3d****', position='Body'),
  value?: string(name='Value', description='The value of the tag option.

The value can be up to 128 characters in length. It cannot start with `acs:` and cannot contain `http://` or `https://`.', example='v1', minLength=1, maxLength=128, position='Body'),
}

model UpdateTagOptionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FEEF92D-4052-5202-87D0-3D8EC16F****'),
  tagOptionDetail?: {
    active?: boolean(name='Active', description='Indicates whether the tag option is enabled. Valid values:

*   true (default)
*   false', example='true'),
    key?: string(name='Key', description='The key of the tag option.

The key must be 1 to 128 characters in length. It cannot contain `http://` or `https://` and cannot start with `acs:` or `aliyun`.', example='k1'),
    owner?: string(name='Owner', description='The ID of the Alibaba Cloud account to which the tag option belongs.', example='133413081827****'),
    tagOptionId?: string(name='TagOptionId', description='The ID of the tag option.', example='tag-bp1u6mdf3d****'),
    value?: string(name='Value', description='The value of the tag option.

The value must be 1 to 128 characters in length. It cannot contain `http://` or `https://` and cannot start with `acs:` or `aliyun`.', example='v1'),
  }(name='TagOptionDetail', description='The details of the tag option.'),
}

model UpdateTagOptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTagOptionResponseBody(name='body'),
}

async function updateTagOption(request: UpdateTagOptionRequest): UpdateTagOptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTagOption', 'POST', '/', 'json', true, 'form', request);
}

