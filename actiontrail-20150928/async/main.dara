/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Actiontrail';
  @version = '2015-09-28';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'actiontrail.ap-northeast-1.aliyuncs.com',
    cn-beijing-finance-1 = 'actiontrail.aliyuncs.com',
    cn-beijing-finance-pop = 'actiontrail.aliyuncs.com',
    cn-beijing-gov-1 = 'actiontrail.aliyuncs.com',
    cn-beijing-nu16-b01 = 'actiontrail.aliyuncs.com',
    cn-edge-1 = 'actiontrail.aliyuncs.com',
    cn-fujian = 'actiontrail.aliyuncs.com',
    cn-haidian-cm12-c01 = 'actiontrail.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'actiontrail.aliyuncs.com',
    cn-hangzhou-finance = 'actiontrail.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'actiontrail.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'actiontrail.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'actiontrail.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'actiontrail.aliyuncs.com',
    cn-hangzhou-test-306 = 'actiontrail.aliyuncs.com',
    cn-hongkong-finance-pop = 'actiontrail.aliyuncs.com',
    cn-qingdao-nebula = 'actiontrail.aliyuncs.com',
    cn-shanghai-et15-b01 = 'actiontrail.aliyuncs.com',
    cn-shanghai-et2-b01 = 'actiontrail.aliyuncs.com',
    cn-shanghai-inner = 'actiontrail.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'actiontrail.aliyuncs.com',
    cn-shenzhen-finance-1 = 'actiontrail.aliyuncs.com',
    cn-shenzhen-inner = 'actiontrail.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'actiontrail.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'actiontrail.aliyuncs.com',
    cn-wuhan = 'actiontrail.aliyuncs.com',
    cn-yushanfang = 'actiontrail.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'actiontrail.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'actiontrail.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'actiontrail.aliyuncs.com',
    eu-west-1-oxs = 'actiontrail.ap-northeast-1.aliyuncs.com',
    rus-west-1-pop = 'actiontrail.ap-northeast-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CreateTrailRequest {
  format?: string(name='Format', position='Query'),
  help?: string(name='Help', position='Query'),
  name?: string(name='Name', position='Query'),
  ossBucketName?: string(name='OssBucketName', position='Query'),
  ossKeyPrefix?: string(name='OssKeyPrefix', position='Query'),
  roleName?: string(name='RoleName', position='Query'),
  type?: string(name='Type', position='Query'),
  version: string(name='Version', position='Query'),
}

model CreateTrailResponseBody = {
  name?: string(name='Name'),
  ossBucketName?: string(name='OssBucketName'),
  ossKeyPrefix?: string(name='OssKeyPrefix'),
  param?: string(name='Param'),
  result?: string(name='Result'),
  roleName?: string(name='RoleName'),
}

model CreateTrailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTrailResponseBody(name='body'),
}

async function createTrail(request: CreateTrailRequest): CreateTrailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTrail', 'GET', '/', 'json', false, 'json', request);
}

model DeleteTrailRequest {
  format?: string(name='Format', position='Query'),
  help?: string(name='Help', position='Query'),
  name?: string(name='Name', position='Query'),
  type?: string(name='Type', position='Query'),
  version: string(name='Version', position='Query'),
}

model DeleteTrailResponseBody = {
  param?: string(name='Param'),
  result?: string(name='Result'),
}

model DeleteTrailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTrailResponseBody(name='body'),
}

async function deleteTrail(request: DeleteTrailRequest): DeleteTrailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTrail', 'GET', '/', 'json', false, 'json', request);
}

model DescribeTrailsRequest {
  format?: string(name='Format', position='Query'),
  help?: string(name='Help', position='Query'),
  name?: string(name='Name', position='Query'),
  type?: string(name='Type', position='Query'),
  version: string(name='Version', position='Query'),
}

model DescribeTrailsResponseBody = {
  param?: string(name='Param'),
  result?: string(name='Result'),
  trailList?: string(name='TrailList'),
}

model DescribeTrailsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTrailsResponseBody(name='body'),
}

async function describeTrails(request: DescribeTrailsRequest): DescribeTrailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTrails', 'GET', '/', 'json', false, 'json', request);
}

model EchoRequest {
  bucketName?: string(name='BucketName', position='Query'),
  format?: string(name='Format', position='Query'),
  help?: string(name='Help', position='Query'),
  isLogging?: string(name='IsLogging', position='Query'),
  keyPrefix?: string(name='KeyPrefix', position='Query'),
  latestDeliveryError?: string(name='LatestDeliveryError', position='Query'),
  latestDeliveryTime?: string(name='LatestDeliveryTime', position='Query'),
  name?: string(name='Name', position='Query'),
  startLoggingTime?: string(name='StartLoggingTime', position='Query'),
  status?: string(name='Status', position='Query'),
  stopLoggingTime?: string(name='StopLoggingTime', position='Query'),
  type?: string(name='Type', position='Query'),
  version: string(name='Version', position='Query'),
}

model EchoResponseBody = {
  param?: string(name='Param'),
  result?: string(name='Result'),
  requestId?: string(name='requestId'),
}

model EchoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EchoResponseBody(name='body'),
}

async function echo(request: EchoRequest): EchoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Echo', 'GET', '/', 'json', false, 'json', request);
}

model GetTrailStatusRequest {
  format?: string(name='Format', position='Query'),
  help?: string(name='Help', position='Query'),
  name?: string(name='Name', position='Query'),
  type?: string(name='Type', position='Query'),
  version: string(name='Version', position='Query'),
}

model GetTrailStatusResponseBody = {
  isLogging?: boolean(name='IsLogging'),
  latestDeliveryError?: string(name='LatestDeliveryError'),
  latestDeliveryTime?: string(name='LatestDeliveryTime'),
  param?: string(name='Param'),
  result?: string(name='Result'),
  startLoggingTime?: string(name='StartLoggingTime'),
  stopLoggingTime?: string(name='StopLoggingTime'),
}

model GetTrailStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTrailStatusResponseBody(name='body'),
}

async function getTrailStatus(request: GetTrailStatusRequest): GetTrailStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTrailStatus', 'GET', '/', 'json', false, 'json', request);
}

model HelpRequest {
  format?: string(name='Format', position='Query'),
  help?: string(name='Help', position='Query'),
  type?: string(name='Type', position='Query'),
  version: string(name='Version', position='Query'),
}

model HelpResponseBody = {
  action?: string(name='Action'),
  param?: string(name='Param'),
  result?: string(name='Result'),
}

model HelpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HelpResponseBody(name='body'),
}

async function help(request: HelpRequest): HelpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Help', 'GET', '/', 'json', false, 'json', request);
}

model LookupEventsRequest {
  endTime?: string(name='EndTime', position='Query'),
  event?: string(name='Event', position='Query'),
  eventAccessKeyId?: string(name='EventAccessKeyId', position='Query'),
  eventName?: string(name='EventName', position='Query'),
  eventRW?: string(name='EventRW', position='Query'),
  eventType?: string(name='EventType', position='Query'),
  format?: string(name='Format', position='Query'),
  help?: string(name='Help', position='Query'),
  maxResults?: string(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  request?: string(name='Request', position='Query'),
  resourceName?: string(name='ResourceName', position='Query'),
  resourceType?: string(name='ResourceType', position='Query'),
  serviceName?: string(name='ServiceName', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  type?: string(name='Type', position='Query'),
  user?: string(name='User', position='Query'),
  version: string(name='Version', position='Query'),
}

model LookupEventsResponseBody = {
  endTime?: string(name='EndTime'),
  events?: string(name='Events'),
  nextToken?: string(name='NextToken'),
  param?: string(name='Param'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  startTime?: string(name='StartTime'),
}

model LookupEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LookupEventsResponseBody(name='body'),
}

async function lookupEvents(request: LookupEventsRequest): LookupEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LookupEvents', 'GET', '/', 'json', false, 'json', request);
}

model StartLoggingRequest {
  format?: string(name='Format', position='Query'),
  help?: string(name='Help', position='Query'),
  name?: string(name='Name', position='Query'),
  type?: string(name='Type', position='Query'),
  version: string(name='Version', position='Query'),
}

model StartLoggingResponseBody = {
  param?: string(name='Param'),
  result?: string(name='Result'),
}

model StartLoggingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartLoggingResponseBody(name='body'),
}

async function startLogging(request: StartLoggingRequest): StartLoggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartLogging', 'GET', '/', 'json', false, 'json', request);
}

model StopLoggingRequest {
  format?: string(name='Format', position='Query'),
  help?: string(name='Help', position='Query'),
  name?: string(name='Name', position='Query'),
  type?: string(name='Type', position='Query'),
  version: string(name='Version', position='Query'),
}

model StopLoggingResponseBody = {
  param?: string(name='Param'),
  result?: string(name='Result'),
}

model StopLoggingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopLoggingResponseBody(name='body'),
}

async function stopLogging(request: StopLoggingRequest): StopLoggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopLogging', 'GET', '/', 'json', false, 'json', request);
}

model UpdateTrailRequest {
  format?: string(name='Format', position='Query'),
  help?: string(name='Help', position='Query'),
  name?: string(name='Name', position='Query'),
  ossBucketName?: string(name='OssBucketName', position='Query'),
  ossKeyPrefix?: string(name='OssKeyPrefix', position='Query'),
  roleName?: string(name='RoleName', position='Query'),
  type?: string(name='Type', position='Query'),
  version: string(name='Version', position='Query'),
}

model UpdateTrailResponseBody = {
  name?: string(name='Name'),
  ossBucketName?: string(name='OssBucketName'),
  ossKeyPrefix?: string(name='OssKeyPrefix'),
  param?: string(name='Param'),
  result?: string(name='Result'),
  roleName?: string(name='RoleName'),
}

model UpdateTrailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTrailResponseBody(name='body'),
}

async function updateTrail(request: UpdateTrailRequest): UpdateTrailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTrail', 'POST', '/', 'json', false, 'json', request);
}

