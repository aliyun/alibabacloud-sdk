/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'csas';
  @version = '2023-01-20';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AuthReportInterval {
  timeUnit?: string(name='TimeUnit'),
  value?: long(name='Value'),
}

model CommonConfig {
  idp?: {
    apOidcCallbackUrl?: string(name='ApOidcCallbackUrl'),
    dingtalk?: {
      eventCallbackBase?: string(name='EventCallbackBase'),
      eventLabel?: string(name='EventLabel'),
      homePage?: string(name='HomePage'),
      loginRedirect?: string(name='LoginRedirect'),
    }(name='Dingtalk'),
    feishu?: {
      eventCallbackBase?: string(name='EventCallbackBase'),
      eventLabel?: string(name='EventLabel'),
      homePage?: string(name='HomePage'),
      loginRedirect?: string(name='LoginRedirect'),
    }(name='Feishu'),
    idaas2?: {
      eventCallbackBase?: string(name='EventCallbackBase'),
      eventLabel?: string(name='EventLabel'),
    }(name='Idaas2'),
    saml?: {
      acs?: string(name='Acs'),
      metadata?: string(name='Metadata'),
    }(name='Saml'),
  }(name='Idp'),
}

model DisposalContent {
  alertContent?: string(name='AlertContent'),
  alertContentEn?: string(name='AlertContentEn'),
  alertIntervalSeconds?: long(name='AlertIntervalSeconds'),
  alertTitle?: string(name='AlertTitle'),
  alertTitleEn?: string(name='AlertTitleEn'),
  nacDemotionPolicyIds?: [ string ](name='NacDemotionPolicyIds'),
  noticeContent?: string(name='NoticeContent'),
  noticeContentEn?: string(name='NoticeContentEn'),
  notifyActions: [ string ](name='NotifyActions', description='This parameter is required.'),
  prohibitActions?: [ string ](name='ProhibitActions'),
  prohibitSoftwareIds?: [ string ](name='ProhibitSoftwareIds'),
}

model IdpAttrMapConfig {
  mapItems?: [
    IdpAttrMapConfigItem
  ](name='MapItems'),
}

model IdpAttrMapConfigItem {
  source?: string(name='Source'),
  target?: string(name='Target'),
  targetType?: string(name='TargetType'),
}

model IdpConfig {
  attrMapConfig?: IdpAttrMapConfig(name='AttrMapConfig'),
  connectConfig?: IdpConnectConfig(name='ConnectConfig'),
  description?: string(name='Description'),
  dingtalkConfig?: IdpDingtalkSubConfig(name='DingtalkConfig'),
  enabled?: boolean(name='Enabled'),
  feishuConfig?: IdpFeishuSubConfig(name='FeishuConfig'),
  idaasConfig?: IdpIdaas2SubConfig(name='IdaasConfig'),
  idpConfigId?: string(name='IdpConfigId'),
  lastSyncTimeUnix?: long(name='LastSyncTimeUnix'),
  ldapConfig?: IdpLdapSubConfig(name='LdapConfig'),
  loginConfig?: IdpLoginConfig(name='LoginConfig'),
  name?: string(name='Name'),
  syncConfig?: IdpSyncConfig(name='SyncConfig'),
  syncStatus?: string(name='SyncStatus'),
  type?: string(name='Type'),
  weixinConfig?: IdpWeixin2SubConfig(name='WeixinConfig'),
  wuyingConfig?: OpenStructIdpWuyingSubConfig(name='WuyingConfig'),
}

model IdpConnectConfig {
  connectorId?: string(name='ConnectorId'),
  useConnector?: boolean(name='UseConnector'),
}

model IdpCustomField {
  description?: string(name='Description'),
  key?: string(name='Key'),
  name?: string(name='Name'),
  type?: string(name='Type'),
  value?: string(name='Value'),
}

model IdpDingtalkSubConfig {
  appKey?: string(name='AppKey'),
  appSecret?: string(name='AppSecret'),
  corpId?: string(name='CorpId'),
  eventAesKey?: string(name='EventAesKey'),
  eventLabel?: string(name='EventLabel'),
  eventVerifyToken?: string(name='EventVerifyToken'),
  exclusive?: boolean(name='Exclusive'),
  redirectUri?: string(name='RedirectUri'),
}

model IdpFeishuSubConfig {
  appId?: string(name='AppId'),
  appSecret?: string(name='AppSecret'),
  corpId?: string(name='CorpId'),
  eventAesKey?: string(name='EventAesKey'),
  eventLabel?: string(name='EventLabel'),
  eventVerifyToken?: string(name='EventVerifyToken'),
  redirectUri?: string(name='RedirectUri'),
}

model IdpIdaas2SubConfig {
  applicationId?: string(name='ApplicationId'),
  clientId?: string(name='ClientId'),
  clientSecret?: string(name='ClientSecret'),
  eventAesKey?: string(name='EventAesKey'),
  eventLabel?: string(name='EventLabel'),
  instanceId?: string(name='InstanceId'),
  publicKeyEndpoint?: string(name='PublicKeyEndpoint'),
  region?: string(name='Region'),
  samlMetadata?: string(name='SamlMetadata'),
}

model IdpLdapSubConfig {
  baseDn?: string(name='BaseDn'),
  groupBaseDn?: string(name='GroupBaseDn'),
  groupFilter?: string(name='GroupFilter'),
  groupMembershipAttr?: string(name='GroupMembershipAttr'),
  groupNameAttr?: string(name='GroupNameAttr'),
  loginNameAttr?: string(name='LoginNameAttr'),
  serverAddr?: string(name='ServerAddr'),
  serverPort?: string(name='ServerPort'),
  serverType?: string(name='ServerType'),
  useSsl?: boolean(name='UseSsl'),
  userDn?: string(name='UserDn'),
  userFilter?: string(name='UserFilter'),
  userPassword?: string(name='UserPassword'),
}

model IdpLoginConfig {
  mobileLoginType?: string(name='MobileLoginType'),
  mobileMfaTypes?: string(name='MobileMfaTypes'),
  pcLoginType?: string(name='PcLoginType'),
  pcMfaTypes?: string(name='PcMfaTypes'),
  totpCorpVerifyAesKey?: string(name='TotpCorpVerifyAesKey'),
  totpCorpVerifyToken?: string(name='TotpCorpVerifyToken'),
  totpCorpVerifyUrl?: string(name='TotpCorpVerifyUrl'),
}

model IdpLoginOrderItem {
  class?: string(name='Class'),
  configId?: string(name='ConfigId'),
  desc?: string(name='Desc'),
  enabled?: boolean(name='Enabled'),
  name?: string(name='Name'),
  type?: string(name='Type'),
}

model IdpSyncConfig {
  autoSyncEnabled?: boolean(name='AutoSyncEnabled'),
  idpDepartmentInfos?: [ 
    {
      id?: string(name='Id'),
      name?: string(name='Name'),
    }
  ](name='IdpDepartmentInfos'),
  scheduleSyncIntervalSecond?: long(name='ScheduleSyncIntervalSecond'),
  userSyncEnabled?: boolean(name='UserSyncEnabled'),
}

model IdpWeixin2SubConfig {
  agentId?: string(name='AgentId'),
  appSchema?: string(name='AppSchema'),
  appSecret?: string(name='AppSecret'),
  corpId?: string(name='CorpId'),
  eventAesKey?: string(name='EventAesKey'),
  eventLabel?: string(name='EventLabel'),
  eventVerifyToken?: string(name='EventVerifyToken'),
  redirectUri?: string(name='RedirectUri'),
}

model OpenStructIdpSyncRecord {
  action?: string(name='Action'),
  idpRawJson?: string(name='IdpRawJson'),
  idpResourceId?: string(name='IdpResourceId'),
  name?: string(name='Name'),
  recordType?: string(name='RecordType'),
  saseRawJson?: string(name='SaseRawJson'),
  saseResourceId?: string(name='SaseResourceId'),
  success?: boolean(name='Success'),
  syncRecordId?: string(name='SyncRecordId'),
  syncTaskId?: string(name='SyncTaskId'),
  timeUnix?: string(name='TimeUnix'),
}

model OpenStructIdpSyncTask {
  departmentFailed?: long(name='DepartmentFailed'),
  departmentTotal?: long(name='DepartmentTotal'),
  endTimeUnix?: long(name='EndTimeUnix'),
  failType?: string(name='FailType'),
  idpConfigId?: bytes(name='IdpConfigId'),
  startTimeUnix?: long(name='StartTimeUnix'),
  status?: string(name='Status'),
  syncTaskId?: string(name='SyncTaskId'),
  updateTimeUnix?: long(name='UpdateTimeUnix'),
  userFailed?: long(name='UserFailed'),
  userTotal?: long(name='UserTotal'),
}

model OpenStructIdpWuyingSubConfig {
  aliuids?: [ string ](name='Aliuids'),
}

model OpenStructSaseDepartment {
  departmentId?: string(name='DepartmentId'),
  fullDn?: string(name='FullDn'),
  name?: string(name='Name'),
  parentDepartmentId?: string(name='ParentDepartmentId'),
}

model OpenStructSaseUser {
  createTimeUnix?: long(name='CreateTimeUnix'),
  customFields?: [
    IdpCustomField
  ](name='CustomFields'),
  departments?: [
    OpenStructSaseDepartment
  ](name='Departments'),
  description?: string(name='Description'),
  email?: string(name='Email'),
  idpConfigId?: string(name='IdpConfigId'),
  leaveTimeUnix?: long(name='LeaveTimeUnix'),
  loginTimeUnix?: long(name='LoginTimeUnix'),
  saseUserId?: string(name='SaseUserId'),
  saseUserStatus?: string(name='SaseUserStatus'),
  syncTimeUnix?: long(name='SyncTimeUnix'),
  telephone?: string(name='Telephone'),
  title?: string(name='Title'),
  updateTimeUnix?: long(name='UpdateTimeUnix'),
  username?: string(name='Username'),
  workStatus?: string(name='WorkStatus'),
}

model OpenStructSaseUserSimple {
  departments?: [ 
    {
      departmentId?: string(name='DepartmentId'),
      fullDepartmentIdPath?: string(name='FullDepartmentIdPath'),
      fullDn?: string(name='FullDn'),
      name?: string(name='Name'),
      parentDepartmentId?: string(name='ParentDepartmentId'),
    }
  ](name='Departments'),
  email?: string(name='Email'),
  idpConfigId?: string(name='IdpConfigId'),
  saseUserId?: string(name='SaseUserId'),
  telephone?: string(name='Telephone'),
  username?: string(name='Username'),
}

model PAL7Config {
  bypassConfig?: {
    appBypassFroms?: [ string ](name='AppBypassFroms'),
    mode?: string(name='Mode'),
    urlBypassRules?: [ 
      {
        froms?: [ string ](name='Froms'),
        paths?: [ string ](name='Paths'),
      }
    ](name='UrlBypassRules'),
  }(name='BypassConfig'),
  certId?: string(name='CertId'),
  dnsConfig?: {
    dnsServers?: [ string ](name='DnsServers'),
  }(name='DnsConfig'),
  jsHookConfig?: {
    mode?: string(name='Mode'),
    replaceRules?: [
      PAL7ConfigReplaceRule
    ](name='ReplaceRules'),
  }(name='JsHookConfig'),
  proxyDomainTypes?: bytes(name='ProxyDomainTypes', example='逗号分隔的枚举值：automatic,custom'),
  requestHeaderRewriteConfig?: {
    ops?: [
      PAL7ConfigRewriteOp
    ](name='Ops'),
  }(name='RequestHeaderRewriteConfig'),
  requestQueryRewriteConfig?: {
    ops?: [
      PAL7ConfigRewriteOp
    ](name='Ops'),
  }(name='RequestQueryRewriteConfig'),
  responseHeaderRewriteConfig?: {
    ops?: [
      PAL7ConfigRewriteOp
    ](name='Ops'),
  }(name='ResponseHeaderRewriteConfig'),
  responseRewriteConfig?: {
    mode?: string(name='Mode'),
    replaceRules?: [
      PAL7ConfigReplaceRule
    ](name='ReplaceRules'),
  }(name='ResponseRewriteConfig'),
}

model PAL7ConfigReplaceRule {
  from?: string(name='From', example='aaa'),
  to?: string(name='To', example='bbb'),
}

model PAL7ConfigRewriteOp {
  key?: string(name='Key'),
  oldValue?: string(name='OldValue'),
  op?: string(name='Op', example='add,set,delete,replace'),
  value?: string(name='Value'),
  valueVariable?: string(name='ValueVariable'),
}

model ProcessGroup {
  description?: string(name='Description'),
  gmtCreate?: string(name='GmtCreate'),
  gmtModified?: string(name='GmtModified'),
  name?: string(name='Name'),
  processGroupId?: string(name='ProcessGroupId'),
  processes?: [
    ProcessItem
  ](name='Processes'),
}

model ProcessItem {
  bundleId?: string(name='BundleId'),
  devType?: string(name='DevType'),
  directory?: string(name='Directory'),
  process?: string(name='Process'),
}

model RecoveryContent {
  authReportInterval?: AuthReportInterval(name='AuthReportInterval'),
  recoveryActions: [ string ](name='RecoveryActions', description='This parameter is required.'),
}

model RiskSceneConfig {
  detectChannel?: [ string ](name='DetectChannel'),
  officeChannel?: [ string ](name='OfficeChannel'),
}

model Rule {
  combinator?: string(name='Combinator'),
  id?: string(name='Id'),
  name?: string(name='Name'),
  operator?: string(name='Operator'),
  ruleSubType?: string(name='RuleSubType'),
  ruleType?: string(name='RuleType'),
  rules?: [
    Rule
  ](name='Rules'),
  values?: [ string ](name='Values'),
}

model UserCertificate {
  certId?: string(name='CertId', example='cert-aabbccdd'),
  certificate?: string(name='Certificate', example='用于测试'),
  description?: string(name='Description', example='xxxx'),
  dnsNames?: [ string ](name='DnsNames'),
  expTimeUnix?: long(name='ExpTimeUnix', example='1734492686'),
  gmtCreateUnix?: long(name='GmtCreateUnix', example='1734523812'),
  gmtModifiedUnix?: long(name='GmtModifiedUnix', example='1734523812'),
  name?: string(name='Name', example='证书1'),
  privateKey?: string(name='PrivateKey', example='xxxx'),
}

model AttachApplication2ConnectorRequest {
  applicationIds: [ string ](name='ApplicationIds', description='This parameter is required.', shrink='json', position='Body'),
  connectorId: string(name='ConnectorId', description='ConnectorID。

This parameter is required.', example='connector-94db94e06b98****', position='Body'),
}

model AttachApplication2ConnectorResponseBody = {
  requestId?: string(name='RequestId', example='7E9D7ACD-53D5-56EF-A913-79D148D06299'),
}

model AttachApplication2ConnectorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachApplication2ConnectorResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AttachApplication2Connector  AttachApplication2ConnectorRequest
  * @return AttachApplication2ConnectorResponse
 */
async function attachApplication2Connector(request: AttachApplication2ConnectorRequest): AttachApplication2ConnectorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachApplication2Connector', 'POST', '/', 'json', true, 'form', request);
}

model AttachPolicy2ApprovalProcessRequest {
  policyId?: string(name='PolicyId', example='ladp-27a4fedf5e73****', position='Body'),
  policyType: string(name='PolicyType', description='This parameter is required.', example='DlpSend', position='Body'),
  processId: string(name='ProcessId', description='This parameter is required.', example='approval-process-2677fcf063f5****', position='Body'),
}

model AttachPolicy2ApprovalProcessResponseBody = {
  requestId?: string(name='RequestId', example='C51D9340-4604-5331-AE62-407F3B408F86'),
}

model AttachPolicy2ApprovalProcessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachPolicy2ApprovalProcessResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AttachPolicy2ApprovalProcess  AttachPolicy2ApprovalProcessRequest
  * @return AttachPolicy2ApprovalProcessResponse
 */
async function attachPolicy2ApprovalProcess(request: AttachPolicy2ApprovalProcessRequest): AttachPolicy2ApprovalProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachPolicy2ApprovalProcess', 'POST', '/', 'json', true, 'form', request);
}

model CreateApprovalProcessRequest {
  description?: string(name='Description', position='Body'),
  matchSchemas?: {
    appUninstallSchemaId?: string(name='AppUninstallSchemaId', example='approval-schema-090134f1ebff****'),
    deviceRegistrationSchemaId?: string(name='DeviceRegistrationSchemaId', example='approval-schema-090134f1ebff****'),
    dlpSendSchemaId?: string(name='DlpSendSchemaId', example='approval-schema-090134f1ebff****'),
    domainBlacklistSchemaId?: string(name='DomainBlacklistSchemaId', example='approval-schema-090134f1ebff****'),
    domainWhitelistSchemaId?: string(name='DomainWhitelistSchemaId', example='approval-schema-090134f1ebff****'),
    endpointHardeningSchemaId?: string(name='EndpointHardeningSchemaId'),
    peripheralBlockSchemaId?: string(name='PeripheralBlockSchemaId', example='approval-schema-090134f1ebff****'),
    softwareBlockSchemaId?: string(name='SoftwareBlockSchemaId', example='approval-schema-090134f1ebff****'),
    softwareHardeningSchemaId?: string(name='SoftwareHardeningSchemaId'),
  }(name='MatchSchemas', shrink='json', position='Body'),
  processName: string(name='ProcessName', description='This parameter is required.', example='test_process', position='Body'),
  processNodes: [[ string ]  ](name='ProcessNodes', description='This parameter is required.', position='Body'),
}

model CreateApprovalProcessResponseBody = {
  process?: {
    appUninstallPolicies?: {
      policyIds?: [ string ](name='PolicyIds'),
      schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
    }(name='AppUninstallPolicies'),
    createTime?: string(name='CreateTime', example='2022-10-25 10:44:09'),
    description?: string(name='Description'),
    deviceRegistrationPolicies?: {
      policyIds?: [ string ](name='PolicyIds'),
      schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
    }(name='DeviceRegistrationPolicies'),
    dlpSendPolicies?: {
      policyIds?: [ string ](name='PolicyIds'),
      schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
    }(name='DlpSendPolicies'),
    domainBlacklistPolicies?: {
      policyIds?: [ string ](name='PolicyIds'),
      schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
    }(name='DomainBlacklistPolicies'),
    domainWhitelistPolicies?: {
      policyIds?: [ string ](name='PolicyIds'),
      schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
    }(name='DomainWhitelistPolicies'),
    endpointHardeningPolicies?: {
      policyIds?: [ string ](name='PolicyIds'),
      schemaId?: string(name='SchemaId'),
    }(name='EndpointHardeningPolicies'),
    peripheralBlockPolicies?: {
      policyIds?: [ string ](name='PolicyIds'),
      schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
    }(name='PeripheralBlockPolicies'),
    processId?: string(name='ProcessId', example='approval-process-dc61e92ba5c5****'),
    processName?: string(name='ProcessName'),
    processNodes?: [[ 
      {
        saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
        username?: string(name='Username'),
      }
    ]    ](name='ProcessNodes'),
    softwareBlockPolicies?: {
      policyIds?: [ string ](name='PolicyIds'),
      schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
    }(name='SoftwareBlockPolicies'),
    softwareHardeningPolicies?: {
      policyIds?: [ string ](name='PolicyIds'),
      schemaId?: string(name='SchemaId'),
    }(name='SoftwareHardeningPolicies'),
  }(name='Process'),
  requestId?: string(name='RequestId', example='2CABFEBB-0CE7-575E-833A-266F75D46713'),
}

model CreateApprovalProcessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateApprovalProcessResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateApprovalProcess  CreateApprovalProcessRequest
  * @return CreateApprovalProcessResponse
 */
async function createApprovalProcess(request: CreateApprovalProcessRequest): CreateApprovalProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApprovalProcess', 'POST', '/', 'json', true, 'form', request);
}

model CreateClientUserRequest {
  departmentId?: string(name='DepartmentId', example='10797', position='Query'),
  description?: string(name='Description', position='Query'),
  email: string(name='Email', description='This parameter is required.', example='johndoe@example.com', position='Query'),
  idpConfigId: string(name='IdpConfigId', description='This parameter is required.', example='727', position='Query'),
  mobileNumber?: string(name='MobileNumber', example='13641966835', position='Query'),
  password?: string(name='Password', example='kehudiyi', position='Query'),
  username: string(name='Username', description='This parameter is required.', position='Query'),
}

model CreateClientUserResponseBody = {
  data?: string(name='Data', example='726'),
  requestId?: string(name='RequestId', example='58D6B23E-E5DA-5418-8F61-51A3B5A30049'),
}

model CreateClientUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateClientUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateClientUser  CreateClientUserRequest
  * @return CreateClientUserResponse
 */
async function createClientUser(request: CreateClientUserRequest): CreateClientUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateClientUser', 'POST', '/', 'json', false, 'json', request);
}

model CreateDynamicRouteRequest {
  applicationIds?: [ string ](name='ApplicationIds', position='Body'),
  applicationType: string(name='ApplicationType', description='This parameter is required.', example='Application', position='Body'),
  description?: string(name='Description', position='Body'),
  dynamicRouteType: string(name='DynamicRouteType', description='This parameter is required.', example='connector', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='dynamic_route_name', position='Body'),
  nextHop: string(name='NextHop', description='This parameter is required.', example='connector-8ccb13b6f52c****', position='Body'),
  priority: int32(name='Priority', description='This parameter is required.', example='99', position='Body'),
  regionIds: [ string ](name='RegionIds', description='This parameter is required.', position='Body'),
  status: string(name='Status', description='This parameter is required.', example='Disabled', position='Body'),
  tagIds?: [ string ](name='TagIds', position='Body'),
}

model CreateDynamicRouteResponseBody = {
  dynamicRouteId?: string(name='DynamicRouteId', example='dr-ca9fddfac7c6****'),
  requestId?: string(name='RequestId', example='102350E7-1A20-58F5-9D63-ABEA820AE6E1'),
}

model CreateDynamicRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDynamicRouteResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDynamicRoute  CreateDynamicRouteRequest
  * @return CreateDynamicRouteResponse
 */
async function createDynamicRoute(request: CreateDynamicRouteRequest): CreateDynamicRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDynamicRoute', 'POST', '/', 'json', true, 'form', request);
}

model CreateEnterpriseAcceleratePolicyRequest {
  accelerationType?: string(name='AccelerationType', example='whitelist', position='Body'),
  description?: string(name='Description', position='Body'),
  name?: string(name='Name', position='Body'),
  priority?: string(name='Priority', example='99', maxLength=99, position='Body'),
  showInClient?: int32(name='ShowInClient', example='1', position='Body'),
  upstreamHost: string(name='UpstreamHost', description='This parameter is required.', example='12.34.56.XX', position='Body'),
  upstreamPort: int32(name='UpstreamPort', description='This parameter is required.', example='1000', position='Body'),
  upstreamType: string(name='UpstreamType', description='This parameter is required.', example='ga', position='Body'),
  userAttributeGroup: string(name='UserAttributeGroup', description='This parameter is required.', position='Body'),
}

model CreateEnterpriseAcceleratePolicyResponseBody = {
  requestId?: string(name='RequestId', example='2CABFEBB-0CE7-575E-833A-266F75D46713'),
}

model CreateEnterpriseAcceleratePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEnterpriseAcceleratePolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateEnterpriseAcceleratePolicy  CreateEnterpriseAcceleratePolicyRequest
  * @return CreateEnterpriseAcceleratePolicyResponse
 */
async function createEnterpriseAcceleratePolicy(request: CreateEnterpriseAcceleratePolicyRequest): CreateEnterpriseAcceleratePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEnterpriseAcceleratePolicy', 'POST', '/', 'json', true, 'form', request);
}

model CreateEnterpriseAccelerateTargetRequest {
  eapId: string(name='EapId', description='This parameter is required.', example='eap-eec34d4b12fcca61', position='Body'),
  target: [ string ](name='Target', description='This parameter is required.', position='Body'),
}

model CreateEnterpriseAccelerateTargetResponseBody = {
  requestId?: string(name='RequestId', example='D1AE33DD-0D46-59CD-8340-92BEA2BDD0F1'),
}

model CreateEnterpriseAccelerateTargetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEnterpriseAccelerateTargetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateEnterpriseAccelerateTarget  CreateEnterpriseAccelerateTargetRequest
  * @return CreateEnterpriseAccelerateTargetResponse
 */
async function createEnterpriseAccelerateTarget(request: CreateEnterpriseAccelerateTargetRequest): CreateEnterpriseAccelerateTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEnterpriseAccelerateTarget', 'POST', '/', 'json', true, 'form', request);
}

model CreateIdpDepartmentRequest {
  departmentName: string(name='DepartmentName', description='This parameter is required.', position='Query'),
  idpConfigId: string(name='IdpConfigId', description='This parameter is required.', example='1222', position='Query'),
}

model CreateIdpDepartmentResponseBody = {
  data?: string(name='Data', example='726'),
  requestId?: string(name='RequestId', example='D6707286-A50E-57B1-B2CF-EFAC59E850D8'),
}

model CreateIdpDepartmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIdpDepartmentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateIdpDepartment  CreateIdpDepartmentRequest
  * @return CreateIdpDepartmentResponse
 */
async function createIdpDepartment(request: CreateIdpDepartmentRequest): CreateIdpDepartmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIdpDepartment', 'POST', '/', 'json', false, 'json', request);
}

model CreatePrivateAccessApplicationRequest {
  addresses: [ string ](name='Addresses', description='The addresses of the office applications. You can enter up to 1,000 addresses of office applications.

This parameter is required.', position='Body'),
  browserAccessStatus?: string(name='BrowserAccessStatus', description='Specifies whether to allow access from a browser. Default value: **Disabled**. Valid values:

*   **Enabled**
*   **Disabled**', example='Disabled', position='Body'),
  description?: string(name='Description', description='The description of the office application. The value must be 1 to 128 characters in length and can contain letters, digits, periods (.), underscores (_), hyphens (-), and spaces.', position='Body'),
  l7Config?: PAL7Config(name='L7Config', description='The browser access mode parameter. The parameter specifies the configurations of Layer 7 applications.', shrink='json', position='Body'),
  l7ProxyDomainAutomaticPrefix?: string(name='L7ProxyDomainAutomaticPrefix', description='The browser access mode parameter. The parameter specifies the prefix of the domain name that the proxy gateway uses. The prefix must be 3 to 20 characters in length, and can contain lowercase letters, digits, and hyphens (-).', example='app-sample', position='Body'),
  l7ProxyDomainCustom?: string(name='L7ProxyDomainCustom', description='The browser access mode parameter. The parameter specifies the custom domain name of the proxy gateway. Enter a valid domain name.', example='app1.example.com', position='Body'),
  name: string(name='Name', description='The name of the office application. The value must be 1 to 128 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-).

This parameter is required.', example='private_access_application_name', position='Body'),
  portRanges: [ 
    {
      begin: int32(name='Begin', description='The start port. The start port must be less than or equal to the end port.

This parameter is required.', example='80', minimum=1, maximum=65535),
      end: int32(name='End', description='The end port. The end port must be greater than or equal to the start port.

This parameter is required.', example='81', minimum=1, maximum=65535),
    }
  ](name='PortRanges', description='The port ranges of the office applications. You can enter up to 65,535 port ranges. Multiple port ranges cannot be duplicated or overlapped.

This parameter is required.', position='Body'),
  protocol: string(name='Protocol', description='The protocol that is used by the office application. Valid values:

*   **All**
*   **TCP**
*   **UDP**

This parameter is required.', example='All', position='Body'),
  status: string(name='Status', description='The status of the office application. Valid values:

*   **Enabled**
*   **Disabled**

This parameter is required.', example='Enabled', position='Body'),
  tagIds?: [ string ](name='TagIds', description='The IDs of the tags for the office applications. You can add up to six custom tags to an office application.', position='Body'),
}

model CreatePrivateAccessApplicationResponseBody = {
  applicationId?: string(name='ApplicationId', description='The ID of the office application.', example='pa-application-e12860ef6c48****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BE4FB974-11BC-5453-9BE1-1606A73EACA6'),
}

model CreatePrivateAccessApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePrivateAccessApplicationResponseBody(name='body'),
}

/**
  * @description By default, you can create a maximum of 500 office applications.
  * @param request  the request parameters of CreatePrivateAccessApplication  CreatePrivateAccessApplicationRequest
  * @return CreatePrivateAccessApplicationResponse
 */
async function createPrivateAccessApplication(request: CreatePrivateAccessApplicationRequest): CreatePrivateAccessApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePrivateAccessApplication', 'POST', '/', 'json', true, 'form', request);
}

model CreatePrivateAccessPolicyRequest {
  applicationIds?: [ string ](name='ApplicationIds', description='Set of application IDs for the private access policy. Up to 100 application IDs can be entered. Required when **ApplicationType** is **Application**. Mutually exclusive with **TagIds**.', position='Body'),
  applicationType: string(name='ApplicationType', description='Application type of the private access policy. Values:
- **Application**: Application.
- **Tag**: Tag.

This parameter is required.', example='Application', position='Body'),
  customUserAttributes?: [ 
    {
      idpId?: int32(name='IdpId', description='The ID of the identity source for the custom user group. Required when the custom user group type is **department**.', example='12'),
      relation?: string(name='Relation', description='Relation of the custom user group. Values:
- **Equal**: Equal.
- **Unequal**: Not equal.', example='Equal'),
      userGroupType?: string(name='UserGroupType', description='Type of the custom user group. Values:
- **username**: Username.
- **department**: Department.
- **email**: Email.
- **telephone**: Telephone.', example='department'),
      value?: string(name='Value', description='Value of the custom user group attribute.
- When the user group type is **username**, it represents the value of the username. The length is 1 to 128 characters, supporting Chinese and uppercase and lowercase English letters, and can include numbers, periods (.), underscores (_), hyphens (-), asterisks (*), at (@) symbols, and spaces.
- When the user group type is **department**, it represents the value of the department. For example: OU=Department1,OU=SASE DingTalk.
- When the user group type is **email**, it represents the value of the email. For example: username@example.com.
- When the user group type is **telephone**, it represents the value of the telephone. For example: 13900001234.', example='OU=部门1,OU=SASE钉钉'),
    }
  ](name='CustomUserAttributes', description='Set of custom user groups for the private access policy. Required when the user group type is **Custom**. Mutually exclusive with the user group ID set. Up to 10 custom user groups can be entered.', position='Body'),
  description?: string(name='Description', description='Description of the private access policy. The length is 1 to 128 characters, supporting Chinese and uppercase and lowercase English letters, and can include numbers, periods (.), underscores (_), hyphens (-), and spaces.', example='test', position='Body'),
  deviceAttributeAction?: string(name='DeviceAttributeAction', description='The execution policy for not meeting the security baseline. Values:

- **Block**: Block.
- **Observe**: Observe.', example='Block', position='Body'),
  deviceAttributeId?: string(name='DeviceAttributeId', description='The ID of the security baseline policy.', example='dag-d3f64e8bdd4a****', position='Body'),
  name: string(name='Name', description='Name of the private access policy. The length is 1 to 128 characters, supporting Chinese and uppercase and lowercase English letters, and can include numbers, periods (.), underscores (_), and hyphens (-).

This parameter is required.', example='private_access_policy_name', position='Body'),
  policyAction: string(name='PolicyAction', description='Action of the private access policy. Values:
- **Block**: Block.
- **Allow**: Allow.

This parameter is required.', example='Allow', position='Body'),
  priority: int32(name='Priority', description='The priority of the private access policy. The number 1 indicates the highest priority. Range: 1~1000, with the maximum value being the total number of private access policies.

This parameter is required.', example='1', position='Body'),
  status: string(name='Status', description='The status of the private access policy. Values:
- **Enabled**: Enabled.
- **Disabled**: Disabled.

This parameter is required.', example='Enabled', position='Body'),
  tagIds?: [ string ](name='TagIds', description='Set of tag IDs for the private access policy. Up to 100 tag IDs can be entered. Required when **ApplicationType** is **Tag**. Mutually exclusive with **ApplicationIds**.', position='Body'),
  triggerTemplateId?: string(name='TriggerTemplateId', description='The trigger template ID.', example='dag-d3f64e8bdd4a****', position='Body'),
  trustedProcessGroupIds?: [ string ](name='TrustedProcessGroupIds', description='The ID of the trusted process group.', position='Body'),
  trustedProcessStatus?: string(name='TrustedProcessStatus', description='The switch status of the trusted process. Values:
- **Enabled**: Enabled.
- **Disabled**: Disabled.', example='Enabled', position='Body'),
  trustedSoftwareIds?: [ string ](name='TrustedSoftwareIds', description='The ID of the trusted software.', position='Body'),
  userGroupIds?: [ string ](name='UserGroupIds', description='Set of user group IDs for the private access policy. Required when the user group type is **Normal**. Mutually exclusive with the custom user group set. Up to 2000 user group IDs can be entered.', position='Body'),
  userGroupMode: string(name='UserGroupMode', description='User group type of the private access policy. Values:
- **Normal**: Normal user group.
- **Custom**: Custom user group.

This parameter is required.', example='Normal', position='Body'),
}

model CreatePrivateAccessPolicyResponseBody = {
  policyId?: string(name='PolicyId', description='The ID of the private access policy.', example='pa-policy-867ef4007c8a****'),
  requestId?: string(name='RequestId', description='The ID of the current request.', example='EFE7EBB2-449D-5BBB-B381-CA7839BC1649'),
}

model CreatePrivateAccessPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePrivateAccessPolicyResponseBody(name='body'),
}

/**
  * @description By default, up to 500 private access policies can be created.
  * @param request  the request parameters of CreatePrivateAccessPolicy  CreatePrivateAccessPolicyRequest
  * @return CreatePrivateAccessPolicyResponse
 */
async function createPrivateAccessPolicy(request: CreatePrivateAccessPolicyRequest): CreatePrivateAccessPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePrivateAccessPolicy', 'POST', '/', 'json', true, 'form', request);
}

model CreatePrivateAccessTagRequest {
  description?: string(name='Description', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='tag_name', position='Body'),
}

model CreatePrivateAccessTagResponseBody = {
  requestId?: string(name='RequestId', example='102350E7-1A20-58F5-9D63-ABEA820AE6E1'),
  tagId?: string(name='TagId', example='tag-d3f64e8bdd4a****'),
}

model CreatePrivateAccessTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePrivateAccessTagResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePrivateAccessTag  CreatePrivateAccessTagRequest
  * @return CreatePrivateAccessTagResponse
 */
async function createPrivateAccessTag(request: CreatePrivateAccessTagRequest): CreatePrivateAccessTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePrivateAccessTag', 'POST', '/', 'json', true, 'form', request);
}

model CreateRegistrationPolicyRequest {
  companyLimitCount?: {
    all?: int32(name='All', example='1'),
    mobile?: int32(name='Mobile', example='0'),
    pc?: int32(name='PC', example='0'),
  }(name='CompanyLimitCount', shrink='json', position='Body'),
  companyLimitType: string(name='CompanyLimitType', description='This parameter is required.', example='LimitAll', position='Body'),
  description?: string(name='Description', position='Body'),
  matchMode: string(name='MatchMode', description='This parameter is required.', example='UserGroupAll', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='registration_policy_name', position='Body'),
  personalLimitCount?: {
    all?: int32(name='All', example='0'),
    mobile?: int32(name='Mobile', example='3'),
    pc?: int32(name='PC', example='2'),
  }(name='PersonalLimitCount', shrink='json', position='Body'),
  personalLimitType: string(name='PersonalLimitType', description='This parameter is required.', example='LimitDiff', position='Body'),
  priority?: long(name='Priority', example='99', position='Body'),
  status: string(name='Status', description='This parameter is required.', example='Enabled', position='Body'),
  userGroupIds?: [ string ](name='UserGroupIds', position='Body'),
  whitelist?: [ string ](name='Whitelist', position='Body'),
}

model CreateRegistrationPolicyResponseBody = {
  policy?: {
    createTime?: string(name='CreateTime', example='2023-05-16 17:18:46'),
    description?: string(name='Description'),
    limitDetail?: [ 
      {
        deviceBelong?: string(name='DeviceBelong', example='Company'),
        limitCount?: {
          all?: int32(name='All', example='0'),
          mobile?: int32(name='Mobile', example='3'),
          pc?: int32(name='PC', example='2'),
        }(name='LimitCount'),
        limitType?: string(name='LimitType', example='LimitDiff'),
      }
    ](name='LimitDetail'),
    matchMode?: string(name='MatchMode', example='UserGroupNormal'),
    name?: string(name='Name', example='registration_policy_name'),
    policyId?: string(name='PolicyId', example='reg-policy-dcbfd33cb004****'),
    priority?: string(name='Priority', example='1'),
    status?: string(name='Status', example='Enabled'),
    userGroupIds?: [ string ](name='UserGroupIds'),
    whitelist?: [ string ](name='Whitelist'),
  }(name='Policy'),
  requestId?: string(name='RequestId', example='FEF1144C-95D1-5F7C-81EF-9DB70EA49FCE'),
}

model CreateRegistrationPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRegistrationPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateRegistrationPolicy  CreateRegistrationPolicyRequest
  * @return CreateRegistrationPolicyResponse
 */
async function createRegistrationPolicy(request: CreateRegistrationPolicyRequest): CreateRegistrationPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRegistrationPolicy', 'POST', '/', 'json', true, 'form', request);
}

model CreateUserGroupRequest {
  attributes: [ 
    {
      idpId?: int32(name='IdpId', example='12'),
      relation: string(name='Relation', description='This parameter is required.', example='Equal'),
      userGroupType: string(name='UserGroupType', description='This parameter is required.', example='department'),
      value: string(name='Value', description='This parameter is required.'),
    }
  ](name='Attributes', description='This parameter is required.', position='Body'),
  description?: string(name='Description', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='user_group_name', position='Body'),
}

model CreateUserGroupResponseBody = {
  requestId?: string(name='RequestId', example='102350E7-1A20-58F5-9D63-ABEA820AE6E1'),
  userGroupId?: string(name='UserGroupId', example='usergroup-6f1ef2fc56b6****'),
}

model CreateUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateUserGroup  CreateUserGroupRequest
  * @return CreateUserGroupResponse
 */
async function createUserGroup(request: CreateUserGroupRequest): CreateUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUserGroup', 'POST', '/', 'json', true, 'form', request);
}

model CreateWmBaseImageRequest {
  height: int32(name='Height', description='This parameter is required.', example='1080', minimum=100, maximum=10000, position='Body'),
  imageControl?: {
    logoVisibleControl?: {
      angle?: long(name='Angle'),
      enhance?: boolean(name='Enhance'),
      logoBase64?: string(name='LogoBase64'),
      margin?: {
        bottom?: float(name='Bottom'),
        left?: float(name='Left'),
        right?: float(name='Right'),
        top?: float(name='Top'),
      }(name='Margin'),
      mode?: string(name='Mode'),
      opacity?: int32(name='Opacity'),
      posAx?: float(name='PosAx'),
      posAy?: float(name='PosAy'),
      posX?: long(name='PosX'),
      posY?: long(name='PosY'),
      spaceX?: long(name='SpaceX'),
      spaceY?: long(name='SpaceY'),
      visible?: boolean(name='Visible'),
    }(name='LogoVisibleControl'),
    textVisibleControl?: {
      angle?: long(name='Angle'),
      fontColor?: string(name='FontColor'),
      fontSize?: long(name='FontSize'),
      margin?: {
        bottom?: float(name='Bottom'),
        left?: float(name='Left'),
        right?: float(name='Right'),
        top?: float(name='Top'),
      }(name='Margin'),
      mode?: string(name='Mode'),
      opacity?: int32(name='Opacity'),
      posAx?: float(name='PosAx'),
      posAy?: float(name='PosAy'),
      posX?: long(name='PosX'),
      posY?: long(name='PosY'),
      spaceX?: long(name='SpaceX'),
      spaceY?: long(name='SpaceY'),
      visible?: boolean(name='Visible'),
      visibleText?: string(name='VisibleText'),
    }(name='TextVisibleControl'),
  }(name='ImageControl', shrink='json', position='Body'),
  opacity: int32(name='Opacity', description='This parameter is required.', example='255', minimum=1, maximum=255, position='Body'),
  scale: int32(name='Scale', description='This parameter is required.', example='1', minimum=1, maximum=3, position='Body'),
  width: int32(name='Width', description='This parameter is required.', example='1920', minimum=100, maximum=10000, position='Body'),
  wmInfoBytesB64?: string(name='WmInfoBytesB64', example='aGVsbG8gc2F*****', maxLength=400, position='Body'),
  wmInfoSize?: long(name='WmInfoSize', example='32', position='Body'),
  wmInfoUint?: string(name='WmInfoUint', example='12*****', position='Body'),
  wmType: string(name='WmType', description='This parameter is required.', example='PureWebappInvisible', position='Body'),
  comment?: string(name='comment', position='Query'),
}

model CreateWmBaseImageResponseBody = {
  data?: {
    imageId?: string(name='ImageId', example='fafb432cdede9b20640e12105845386e-496883833-8242409229217337*****'),
    imageUrl?: string(name='ImageUrl', example='https://example.com/test-*****.png'),
    imageUrlExp?: long(name='ImageUrlExp', example='17185*****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='58D6B23E-E5DA-5418-8F61-51A3B5A30049'),
}

model CreateWmBaseImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWmBaseImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateWmBaseImage  CreateWmBaseImageRequest
  * @return CreateWmBaseImageResponse
 */
async function createWmBaseImage(request: CreateWmBaseImageRequest): CreateWmBaseImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWmBaseImage', 'POST', '/', 'json', true, 'form', request);
}

model CreateWmEmbedTaskRequest {
  audioControl?: {
    metadataControl?: {
      enable?: boolean(name='Enable'),
      xmpKvBase64?: string(name='XmpKvBase64'),
    }(name='MetadataControl'),
  }(name='AudioControl', shrink='json', position='Body'),
  csvControl?: {
    embedBitsNumberInEachTime?: long(name='EmbedBitsNumberInEachTime', minimum=1, maximum=4),
    embedColumn?: long(name='EmbedColumn'),
    embedDensity?: string(name='EmbedDensity'),
    embedPrecision?: long(name='EmbedPrecision'),
    embedTimePosition?: string(name='EmbedTimePosition'),
    method?: string(name='Method'),
    timeFormat?: string(name='TimeFormat'),
  }(name='CsvControl', shrink='json', position='Body'),
  documentControl?: {
    backgroundControl?: {
      bgAddInvisible?: boolean(name='BgAddInvisible', example='true'),
      bgAddVisible?: boolean(name='BgAddVisible', example='true'),
      bgInvisibleControl?: {
        opacity?: long(name='Opacity', example='10', minimum=1, maximum=255),
      }(name='BgInvisibleControl'),
      bgVisibleControl?: {
        angle?: long(name='Angle', example='30', minimum=0, maximum=360),
        fontColor?: string(name='FontColor', example='0x000000'),
        fontSize?: long(name='FontSize', example='30', maximum=200),
        horizontalNumber?: long(name='HorizontalNumber', example='3', maximum=200),
        mode?: string(name='Mode', example='pos'),
        opacity?: long(name='Opacity', example='100', minimum=1, maximum=255),
        posX?: string(name='PosX', example='0.5'),
        posY?: string(name='PosY', example='0.5'),
        verticalNumber?: long(name='VerticalNumber', example='3', maximum=200),
        visibleText?: string(name='VisibleText', example='hello ****', maxLength=1000),
      }(name='BgVisibleControl'),
    }(name='BackgroundControl'),
    invisibleAntiAllCopy?: boolean(name='InvisibleAntiAllCopy', example='true'),
    invisibleAntiTextCopy?: boolean(name='InvisibleAntiTextCopy', example='true'),
  }(name='DocumentControl', shrink='json', position='Body'),
  fileUrl: string(name='FileUrl', description='This parameter is required.', example='https://example.com/abc****.pdf', position='Body'),
  filename: string(name='Filename', description='This parameter is required.', example='abc****.pdf', position='Body'),
  imageControl?: {
    logoVisibleControl?: {
      angle?: long(name='Angle'),
      enhance?: boolean(name='Enhance'),
      logoBase64?: string(name='LogoBase64'),
      margin?: {
        bottom?: float(name='Bottom'),
        left?: float(name='Left'),
        right?: float(name='Right'),
        top?: float(name='Top'),
      }(name='Margin'),
      mode?: string(name='Mode'),
      opacity?: int32(name='Opacity'),
      posAx?: float(name='PosAx'),
      posAy?: float(name='PosAy'),
      posX?: long(name='PosX'),
      posY?: long(name='PosY'),
      spaceX?: long(name='SpaceX'),
      spaceY?: long(name='SpaceY'),
      visible?: boolean(name='Visible'),
    }(name='LogoVisibleControl'),
    metadataControl?: {
      enable?: boolean(name='Enable'),
      xmpKvBase64?: string(name='XmpKvBase64'),
    }(name='MetadataControl'),
    textVisibleControl?: {
      angle?: long(name='Angle'),
      fontColor?: string(name='FontColor'),
      fontSize?: long(name='FontSize'),
      margin?: {
        bottom?: float(name='Bottom'),
        left?: float(name='Left'),
        right?: float(name='Right'),
        top?: float(name='Top'),
      }(name='Margin'),
      mode?: string(name='Mode'),
      opacity?: int32(name='Opacity'),
      posAx?: float(name='PosAx'),
      posAy?: float(name='PosAy'),
      posX?: long(name='PosX'),
      posY?: long(name='PosY'),
      spaceX?: long(name='SpaceX'),
      spaceY?: long(name='SpaceY'),
      visible?: boolean(name='Visible'),
      visibleText?: string(name='VisibleText'),
    }(name='TextVisibleControl'),
  }(name='ImageControl', shrink='json', position='Body'),
  imageEmbedJpegQuality?: long(name='ImageEmbedJpegQuality', example='95', position='Body'),
  imageEmbedLevel?: long(name='ImageEmbedLevel', example='2', position='Body'),
  invisibleEnable?: boolean(name='InvisibleEnable', position='Body'),
  videoBitrate?: string(name='VideoBitrate', example='3000k', position='Body'),
  videoControl?: {
    metadataControl?: {
      enable?: boolean(name='Enable'),
      xmpKvBase64?: string(name='XmpKvBase64'),
    }(name='MetadataControl'),
    textVisibleControl?: {
      fontColor?: string(name='FontColor'),
      fontSize?: int32(name='FontSize'),
      margin?: {
        bottom?: int32(name='Bottom'),
        right?: int32(name='Right'),
      }(name='Margin'),
      mode?: string(name='Mode'),
      opacity?: int32(name='Opacity'),
      posX?: int32(name='PosX'),
      posY?: int32(name='PosY'),
      visible?: boolean(name='Visible'),
      visibleText?: string(name='VisibleText'),
    }(name='TextVisibleControl'),
  }(name='VideoControl', shrink='json', position='Body'),
  videoIsLong?: boolean(name='VideoIsLong', example='false', position='Body'),
  wmInfoBytesB64?: string(name='WmInfoBytesB64', example='aGVsbG8gc2F*****', maxLength=400, position='Body'),
  wmInfoSize?: long(name='WmInfoSize', example='32', minimum=32, maximum=64, position='Body'),
  wmInfoUint?: string(name='WmInfoUint', example='123***', position='Body'),
  wmType: string(name='WmType', description='This parameter is required.', example='PureDocument', position='Body'),
}

model CreateWmEmbedTaskResponseBody = {
  data?: {
    taskId?: string(name='TaskId', example='job:5GfrJYsoaffmCE7Z5bZtjUefzxfd****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='BE4FB974-11BC-5453-9BE1-1606A73EACA6'),
}

model CreateWmEmbedTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWmEmbedTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateWmEmbedTask  CreateWmEmbedTaskRequest
  * @return CreateWmEmbedTaskResponse
 */
async function createWmEmbedTask(request: CreateWmEmbedTaskRequest): CreateWmEmbedTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWmEmbedTask', 'POST', '/', 'json', true, 'form', request);
}

model CreateWmExtractTaskRequest {
  csvControl?: {
    embedBitsNumberInEachTime?: long(name='EmbedBitsNumberInEachTime', description='The timestamp watermark parameter that specifies how much information a single timestamp holds. You must keep the value of this parameter consistent for watermark embedding and watermark extraction. Otherwise, the extraction fails.', example='1', minimum=1, maximum=4),
    embedColumn?: long(name='EmbedColumn', description='The lossy embedding control parameter that specifies columns to be modified You must keep the value of this parameter consistent for watermark embedding and watermark extraction. Otherwise, the extraction fails.', example='1'),
    embedPrecision?: long(name='EmbedPrecision', description='The lossy embedding control parameter that specifies the modification precision. You must keep the value of this parameter consistent for watermark embedding and watermark extraction. Otherwise, the extraction fails.', example='0'),
    embedTimePosition?: string(name='EmbedTimePosition', description='The timestamp watermark parameter that specifies the embedding position of the timestamp watermarks. You must keep the value of this parameter consistent for watermark embedding and watermark extraction. Otherwise, the extraction fails.', example='Min'),
    method?: string(name='Method', description='The CSV watermark embedding method. You must keep the value of this parameter consistent for watermark embedding and watermark extraction. Otherwise, the extraction fails.', example='lossless_row_shift_embed'),
    timeFormat?: string(name='TimeFormat', description='The timestamp watermark parameter that specifies the timestamp format. You must keep the value of this parameter consistent for watermark embedding and watermark extraction. Otherwise, the extraction fails.', example='Year-Mon-Day Hour:Min:Sec.MilSec'),
  }(name='CsvControl', description='The CSV watermark control parameter. You must keep the value of this parameter consistent for watermark embedding and watermark extraction. Otherwise, the extraction fails.', shrink='json', position='Query'),
  documentIsCapture?: boolean(name='DocumentIsCapture', description='The document watermark parameter that specifies whether the file to be extracted is a screenshot of a document with a background watermark added. The system determines whether to use the extraction logic for document background watermarks based on whether the file to be extracted is an image file. By default, you do not need to configure this parameter. Valid values:

*   **true**
*   **false**', example='false', position='Body'),
  fileUrl: string(name='FileUrl', description='The URL used to download the file to be extracted. The URL must be accessible over the Internet.

This parameter is required.', example='https://example.com/test-****.pdf', position='Body'),
  filename: string(name='Filename', description='The name of the file to be extracted. The system needs to check the file type based on the file name extension.

This parameter is required.', example='test-****.pdf', position='Body'),
  imageExtractParamsOpenApi?: {
    srcLogoBase64?: string(name='SrcLogoBase64'),
  }(name='ImageExtractParamsOpenApi', shrink='json', position='Query'),
  isClientEmbed?: boolean(name='IsClientEmbed', position='Query'),
  videoIsLong?: boolean(name='VideoIsLong', description='The watermark parameter for videos that specifies whether to use the long video watermark SDK. Default value: false. Valid values:

*   **true**
*   **false**', example='false', position='Body'),
  videoSpeed?: string(name='VideoSpeed', description='The watermark parameter for long videos that specifies the video speed factor. The value can be a floating-point number or a string. Default value: 1. This parameter indicates the speed at which a watermark is added or the time-stretching rate for videos after a watermark is added.', example='1', position='Body'),
  wmInfoSize?: long(name='WmInfoSize', description='The watermark information size. Default value: 32. You must keep the value of this parameter consistent for watermark embedding and watermark extraction. For example, if a 40-bit watermark is used for watermark embedding, you must set this parameter to 40 for watermark extraction.', example='32', minimum=32, maximum=64, position='Body'),
  wmType: string(name='WmType', description='The watermark type. Valid values:

*   **PureWebappInvisible**: web page watermark
*   **PureAppInvisible**: app watermark
*   **PureScreenInvisible**: screen watermark
*   **PureDocument**: document watermark
*   **PureImage**: image watermark
*   **PureAudio**: audio watermark
*   **PureVideo**: video watermark
*   **AigcWebappInvisible**: artificial intelligence generated content (AIGC)-based webpage watermark
*   **AigcAppInvisible**: AIGC-based app watermark
*   **AigcScreenInvisible**: AIGC-based screen watermark
*   **AigcDocument**: AIGC-based document watermark
*   **AigcImage**: AIGC-based image watermark
*   **AigcAudio**: AIGC-based audio watermark
*   **AigcVideo**: AIGC-based video watermark

This parameter is required.', example='PureDocument', position='Body'),
}

model CreateWmExtractTaskResponseBody = {
  data?: {
    taskId?: string(name='TaskId', description='The task ID. You can use task IDs to query task results.', example='wmt-9648c22d2eb2cb57bb855dcae7898464********'),
  }(name='Data', description='The information about the watermark extraction task.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D6707286-A50E-57B1-B2CF-EFAC59E850D8'),
}

model CreateWmExtractTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWmExtractTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateWmExtractTask  CreateWmExtractTaskRequest
  * @return CreateWmExtractTaskResponse
 */
async function createWmExtractTask(request: CreateWmExtractTaskRequest): CreateWmExtractTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWmExtractTask', 'POST', '/', 'json', true, 'form', request);
}

model CreateWmInfoMappingRequest {
  wmInfoBytesB64: string(name='WmInfoBytesB64', description='This parameter is required.', example='aGVsbG8gc2F*****', maxLength=400, position='Body'),
  wmInfoSize?: long(name='WmInfoSize', example='32', minimum=32, maximum=64, position='Body'),
  wmType: string(name='WmType', description='This parameter is required.', example='PureDocument', position='Body'),
}

model CreateWmInfoMappingResponseBody = {
  data?: {
    wmInfoUint?: long(name='WmInfoUint', example='123***'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='7E9D7ACD-53D5-56EF-A913-79D148D06299'),
}

model CreateWmInfoMappingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWmInfoMappingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateWmInfoMapping  CreateWmInfoMappingRequest
  * @return CreateWmInfoMappingResponse
 */
async function createWmInfoMapping(request: CreateWmInfoMappingRequest): CreateWmInfoMappingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWmInfoMapping', 'POST', '/', 'json', true, 'form', request);
}

model DeleteApprovalProcessesRequest {
  processIds: [ string ](name='ProcessIds', description='This parameter is required.', position='Body'),
}

model DeleteApprovalProcessesResponseBody = {
  requestId?: string(name='RequestId', example='B608C6AE-623D-55C4-9454-601B88AE937E'),
}

model DeleteApprovalProcessesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteApprovalProcessesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteApprovalProcesses  DeleteApprovalProcessesRequest
  * @return DeleteApprovalProcessesResponse
 */
async function deleteApprovalProcesses(request: DeleteApprovalProcessesRequest): DeleteApprovalProcessesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApprovalProcesses', 'POST', '/', 'json', true, 'form', request);
}

model DeleteClientUserRequest {
  id: string(name='Id', description='This parameter is required.', example='27058', position='Query'),
}

model DeleteClientUserResponseBody = {
  requestId?: string(name='RequestId', example='102350E7-1A20-58F5-9D63-ABEA820AE6E1'),
}

model DeleteClientUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteClientUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteClientUser  DeleteClientUserRequest
  * @return DeleteClientUserResponse
 */
async function deleteClientUser(request: DeleteClientUserRequest): DeleteClientUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteClientUser', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDynamicRouteRequest {
  dynamicRouteId: string(name='DynamicRouteId', description='This parameter is required.', example='dr-ca9fddfac7c6****', position='Query'),
}

model DeleteDynamicRouteResponseBody = {
  requestId?: string(name='RequestId', example='748CFDC7-1EB6-5B8B-9405-DA76ED5BB60D'),
}

model DeleteDynamicRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDynamicRouteResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDynamicRoute  DeleteDynamicRouteRequest
  * @return DeleteDynamicRouteResponse
 */
async function deleteDynamicRoute(request: DeleteDynamicRouteRequest): DeleteDynamicRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDynamicRoute', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEnterpriseAcceleratePolicyRequest {
  eapId: string(name='EapId', description='This parameter is required.', example='eap-6edfb9d722ef8429', position='Body'),
}

model DeleteEnterpriseAcceleratePolicyResponseBody = {
  requestId?: string(name='RequestId', example='2CABFEBB-0CE7-575E-833A-266F75D46713'),
}

model DeleteEnterpriseAcceleratePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEnterpriseAcceleratePolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteEnterpriseAcceleratePolicy  DeleteEnterpriseAcceleratePolicyRequest
  * @return DeleteEnterpriseAcceleratePolicyResponse
 */
async function deleteEnterpriseAcceleratePolicy(request: DeleteEnterpriseAcceleratePolicyRequest): DeleteEnterpriseAcceleratePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEnterpriseAcceleratePolicy', 'POST', '/', 'json', true, 'form', request);
}

model DeleteEnterpriseAccelerateTargetRequest {
  eapId: string(name='EapId', description='This parameter is required.', example='eap-ed1f0e392a28a4e6', position='Body'),
  target: [ string ](name='Target', description='This parameter is required.', position='Body'),
}

model DeleteEnterpriseAccelerateTargetResponseBody = {
  requestId?: string(name='RequestId', example='655CE28F-2C0C-5801-A31E-C16BF54BD225'),
}

model DeleteEnterpriseAccelerateTargetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEnterpriseAccelerateTargetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteEnterpriseAccelerateTarget  DeleteEnterpriseAccelerateTargetRequest
  * @return DeleteEnterpriseAccelerateTargetResponse
 */
async function deleteEnterpriseAccelerateTarget(request: DeleteEnterpriseAccelerateTargetRequest): DeleteEnterpriseAccelerateTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEnterpriseAccelerateTarget', 'POST', '/', 'json', true, 'form', request);
}

model DeleteIdpDepartmentRequest {
  departmentId: string(name='DepartmentId', description='This parameter is required.', example='10829', position='Query'),
  idpConfigId: string(name='IdpConfigId', description='This parameter is required.', example='507', position='Query'),
}

model DeleteIdpDepartmentResponseBody = {
  requestId?: string(name='RequestId', example='FEF1144C-95D1-5F7C-81EF-9DB70EA49FCE'),
}

model DeleteIdpDepartmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIdpDepartmentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteIdpDepartment  DeleteIdpDepartmentRequest
  * @return DeleteIdpDepartmentResponse
 */
async function deleteIdpDepartment(request: DeleteIdpDepartmentRequest): DeleteIdpDepartmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIdpDepartment', 'POST', '/', 'json', false, 'json', request);
}

model DeleteOtpConfigRequest {
  username?: string(name='Username', position='Body'),
}

model DeleteOtpConfigResponseBody = {
  requestId?: string(name='RequestId', example='54A4055A-343D-583E-9EAC-D12231148A68'),
}

model DeleteOtpConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteOtpConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteOtpConfig  DeleteOtpConfigRequest
  * @return DeleteOtpConfigResponse
 */
async function deleteOtpConfig(request: DeleteOtpConfigRequest): DeleteOtpConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteOtpConfig', 'POST', '/', 'json', true, 'form', request);
}

model DeletePrivateAccessApplicationRequest {
  applicationId: string(name='ApplicationId', description='This parameter is required.', example='pa-application-e12860ef6c48****', position='Body'),
}

model DeletePrivateAccessApplicationResponseBody = {
  requestId?: string(name='RequestId', example='BE4FB974-11BC-5453-9BE1-1606A73EACA6'),
}

model DeletePrivateAccessApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePrivateAccessApplicationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeletePrivateAccessApplication  DeletePrivateAccessApplicationRequest
  * @return DeletePrivateAccessApplicationResponse
 */
async function deletePrivateAccessApplication(request: DeletePrivateAccessApplicationRequest): DeletePrivateAccessApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePrivateAccessApplication', 'POST', '/', 'json', true, 'form', request);
}

model DeletePrivateAccessPolicyRequest {
  policyId: string(name='PolicyId', description='This parameter is required.', example='pa-policy-867ef4007c8a****', position='Body'),
}

model DeletePrivateAccessPolicyResponseBody = {
  requestId?: string(name='RequestId', example='4D169859-A4F2-5EC8-853B-8447787C0D8A'),
}

model DeletePrivateAccessPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePrivateAccessPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeletePrivateAccessPolicy  DeletePrivateAccessPolicyRequest
  * @return DeletePrivateAccessPolicyResponse
 */
async function deletePrivateAccessPolicy(request: DeletePrivateAccessPolicyRequest): DeletePrivateAccessPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePrivateAccessPolicy', 'POST', '/', 'json', true, 'form', request);
}

model DeletePrivateAccessTagRequest {
  tagId: string(name='TagId', description='This parameter is required.', example='tag-d3f64e8bdd4a****', position='Body'),
}

model DeletePrivateAccessTagResponseBody = {
  requestId?: string(name='RequestId', example='FD724DBC-CD76-5235-BF76-59C51B73296D'),
}

model DeletePrivateAccessTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePrivateAccessTagResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeletePrivateAccessTag  DeletePrivateAccessTagRequest
  * @return DeletePrivateAccessTagResponse
 */
async function deletePrivateAccessTag(request: DeletePrivateAccessTagRequest): DeletePrivateAccessTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePrivateAccessTag', 'POST', '/', 'json', true, 'form', request);
}

model DeleteRegistrationPoliciesRequest {
  policyIds: [ string ](name='PolicyIds', description='This parameter is required.', position='Body'),
}

model DeleteRegistrationPoliciesResponseBody = {
  requestId?: string(name='RequestId', example='D6707286-A50E-57B1-B2CF-EFAC59E850D8'),
}

model DeleteRegistrationPoliciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRegistrationPoliciesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteRegistrationPolicies  DeleteRegistrationPoliciesRequest
  * @return DeleteRegistrationPoliciesResponse
 */
async function deleteRegistrationPolicies(request: DeleteRegistrationPoliciesRequest): DeleteRegistrationPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRegistrationPolicies', 'POST', '/', 'json', true, 'form', request);
}

model DeleteUserDevicesRequest {
  deviceTags?: [ string ](name='DeviceTags', position='Body'),
}

model DeleteUserDevicesResponseBody = {
  requestId?: string(name='RequestId', example='5FEF5CFA-14CC-5DE5-BD1F-AFFE0996E71D'),
}

model DeleteUserDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserDevicesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteUserDevices  DeleteUserDevicesRequest
  * @return DeleteUserDevicesResponse
 */
async function deleteUserDevices(request: DeleteUserDevicesRequest): DeleteUserDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserDevices', 'POST', '/', 'json', true, 'form', request);
}

model DeleteUserGroupRequest {
  userGroupId: string(name='UserGroupId', description='This parameter is required.', example='usergroup-6f1ef2fc56b6****', position='Body'),
}

model DeleteUserGroupResponseBody = {
  requestId?: string(name='RequestId', example='58D6B23E-E5DA-5418-8F61-51A3B5A30049'),
}

model DeleteUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteUserGroup  DeleteUserGroupRequest
  * @return DeleteUserGroupResponse
 */
async function deleteUserGroup(request: DeleteUserGroupRequest): DeleteUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserGroup', 'POST', '/', 'json', true, 'form', request);
}

model DetachApplication2ConnectorRequest {
  applicationIds: [ string ](name='ApplicationIds', description='This parameter is required.', shrink='json', position='Body'),
  connectorId: string(name='ConnectorId', description='ConnectorID。

This parameter is required.', example='connector-94db94e06b98****', position='Body'),
}

model DetachApplication2ConnectorResponseBody = {
  requestId?: string(name='RequestId', example='4D169859-A4F2-5EC8-853B-8447787C0D8A'),
}

model DetachApplication2ConnectorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachApplication2ConnectorResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI DetachApplication2Connector is deprecated, please use csas::2023-01-20::ModifyForwardStrategy instead.  * @param request  the request parameters of DetachApplication2Connector  DetachApplication2ConnectorRequest
  * @return DetachApplication2ConnectorResponse
 */
// Deprecated
async function detachApplication2Connector(request: DetachApplication2ConnectorRequest): DetachApplication2ConnectorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachApplication2Connector', 'POST', '/', 'json', true, 'form', request);
}

model DetachPolicy2ApprovalProcessRequest {
  policyId: string(name='PolicyId', description='This parameter is required.', example='ladp-27a4fedf5e73****', position='Body'),
  policyType: string(name='PolicyType', description='This parameter is required.', example='PeripheralBlock', position='Body'),
  processId: string(name='ProcessId', description='This parameter is required.', example='approval-process-2677fcf063f5****', position='Body'),
}

model DetachPolicy2ApprovalProcessResponseBody = {
  requestId?: string(name='RequestId', example='BE4FB974-11BC-5453-9BE1-1606A73EACA6'),
}

model DetachPolicy2ApprovalProcessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachPolicy2ApprovalProcessResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DetachPolicy2ApprovalProcess  DetachPolicy2ApprovalProcessRequest
  * @return DetachPolicy2ApprovalProcessResponse
 */
async function detachPolicy2ApprovalProcess(request: DetachPolicy2ApprovalProcessRequest): DetachPolicy2ApprovalProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachPolicy2ApprovalProcess', 'POST', '/', 'json', true, 'form', request);
}

model DisableEnterpriseAcceleratePolicyRequest {
  eapId: string(name='EapId', description='This parameter is required.', example='eap-d50b45aa7dc04aef', position='Body'),
}

model DisableEnterpriseAcceleratePolicyResponseBody = {
  requestId?: string(name='RequestId', example='E4C3E4CA-87CC-5EF6-91DD-D400A812EB43'),
}

model DisableEnterpriseAcceleratePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableEnterpriseAcceleratePolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisableEnterpriseAcceleratePolicy  DisableEnterpriseAcceleratePolicyRequest
  * @return DisableEnterpriseAcceleratePolicyResponse
 */
async function disableEnterpriseAcceleratePolicy(request: DisableEnterpriseAcceleratePolicyRequest): DisableEnterpriseAcceleratePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableEnterpriseAcceleratePolicy', 'POST', '/', 'json', true, 'form', request);
}

model EnableEnterpriseAcceleratePolicyRequest {
  eapId: string(name='EapId', description='This parameter is required.', example='eap-530da9f7110441fb', position='Body'),
}

model EnableEnterpriseAcceleratePolicyResponseBody = {
  requestId?: string(name='RequestId', example='09D9F396-29C5-5F0F-9C12-83308062CA2F'),
}

model EnableEnterpriseAcceleratePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableEnterpriseAcceleratePolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableEnterpriseAcceleratePolicy  EnableEnterpriseAcceleratePolicyRequest
  * @return EnableEnterpriseAcceleratePolicyResponse
 */
async function enableEnterpriseAcceleratePolicy(request: EnableEnterpriseAcceleratePolicyRequest): EnableEnterpriseAcceleratePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableEnterpriseAcceleratePolicy', 'POST', '/', 'json', true, 'form', request);
}

model ExportUserDevicesRequest {
  appStatuses?: [ string ](name='AppStatuses', position='Body'),
  department?: string(name='Department', position='Body'),
  deviceBelong?: string(name='DeviceBelong', example='Company', position='Body'),
  deviceStatuses?: [ string ](name='DeviceStatuses', position='Body'),
  deviceTags?: [ string ](name='DeviceTags', position='Body'),
  deviceTypes?: [ string ](name='DeviceTypes', position='Body'),
  dlpStatuses?: [ string ](name='DlpStatuses', position='Body'),
  hostname?: string(name='Hostname', example='win10-64bit', position='Body'),
  iaStatuses?: [ string ](name='IaStatuses', position='Body'),
  mac?: string(name='Mac', example='00:16:XX:XX:7c:46', position='Body'),
  nacStatuses?: [ string ](name='NacStatuses', position='Body'),
  paStatuses?: [ string ](name='PaStatuses', position='Body'),
  saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****', position='Body'),
  sharingStatus?: boolean(name='SharingStatus', example='true', position='Body'),
  username?: string(name='Username', position='Body'),
}

model ExportUserDevicesResponseBody = {
  requestId?: string(name='RequestId', example='748CFDC7-1EB6-5B8B-9405-DA76ED5BB60D'),
  signedUrl?: string(name='SignedUrl', example='https://sase-export.oss-cn-hangzhou.aliyuncs.com/export%2Fapp-device%2F20240607154831.xlsx?Expires=1717746571&OSSAccessKeyId=********************'),
}

model ExportUserDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportUserDevicesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExportUserDevices  ExportUserDevicesRequest
  * @return ExportUserDevicesResponse
 */
async function exportUserDevices(request: ExportUserDevicesRequest): ExportUserDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportUserDevices', 'POST', '/', 'json', true, 'form', request);
}

model GetActiveIdpConfigRequest {
}

model GetActiveIdpConfigResponseBody = {
  data?: {
    description?: string(name='Description'),
    id?: string(name='Id', example='idp-cfg001'),
    name?: string(name='Name'),
    type?: string(name='Type', example='DingTalk'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='4D169859-A4F2-5EC8-853B-8447787C0D8A'),
}

model GetActiveIdpConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetActiveIdpConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetActiveIdpConfig  GetActiveIdpConfigRequest
  * @return GetActiveIdpConfigResponse
 */
async function getActiveIdpConfig(request: GetActiveIdpConfigRequest): GetActiveIdpConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetActiveIdpConfig', 'GET', '/', 'json', false, 'json', request);
}

model GetApprovalRequest {
  approvalId: string(name='ApprovalId', description='This parameter is required.', example='approval-872b5e911b35****', position='Query'),
}

model GetApprovalResponseBody = {
  approval?: [ 
    {
      approvalDetail?: string(name='ApprovalDetail'),
      approvalId?: string(name='ApprovalId', example='approval-3564b140642f****'),
      approvalProgresses?: [ 
        {
          action?: string(name='Action', example='Approve'),
          comment?: string(name='Comment'),
          executor?: string(name='Executor', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
          operators?: [ 
            {
              saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
              username?: string(name='Username'),
            }
          ](name='Operators'),
          status?: string(name='Status', example='Approved'),
          timestamp?: long(name='Timestamp', example='1736752000'),
        }
      ](name='ApprovalProgresses'),
      createTime?: string(name='CreateTime', example='2022-11-15 22:11:55'),
      creatorDepartment?: string(name='CreatorDepartment'),
      creatorDevTag?: string(name='CreatorDevTag', example='36efa42d-2c32-c4dc-e3fc-8541e33a****'),
      creatorUserId?: string(name='CreatorUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
      creatorUsername?: string(name='CreatorUsername'),
      endTimestamp?: long(name='EndTimestamp', example='1757952000'),
      policyType?: string(name='PolicyType', example='DlpSend'),
      processId?: string(name='ProcessId', example='approval-process-fcc351b8a95b****'),
      processName?: string(name='ProcessName'),
      reason?: string(name='Reason'),
      schemaContent?: string(name='SchemaContent', example='{"form": {"labelCol": 6,"wrapperCol": 12}}'),
      schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
      schemaName?: string(name='SchemaName'),
      status?: string(name='Status', example='Pending'),
    }
  ](name='Approval'),
  requestId?: string(name='RequestId', example='7E9D7ACD-53D5-56EF-A913-79D148D06299'),
}

model GetApprovalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetApprovalResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetApproval  GetApprovalRequest
  * @return GetApprovalResponse
 */
async function getApproval(request: GetApprovalRequest): GetApprovalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApproval', 'GET', '/', 'json', false, 'json', request);
}

model GetApprovalProcessRequest {
  processId: string(name='ProcessId', description='This parameter is required.', example='approval-process-fcc351b8a95b****', position='Query'),
}

model GetApprovalProcessResponseBody = {
  process?: {
    appUninstallPolicies?: {
      externalProcessId?: string(name='ExternalProcessId'),
      fieldMap?: [ 
        {
          displayField?: string(name='DisplayField', example='名称'),
          displayFieldValue?: string(name='DisplayFieldValue'),
          systemField?: string(name='SystemField', example='名称'),
        }
      ](name='FieldMap'),
      policyIds?: [ string ](name='PolicyIds'),
      schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
    }(name='AppUninstallPolicies'),
    approvalType?: int32(name='ApprovalType'),
    createTime?: string(name='CreateTime', example='2022-10-25 10:44:09'),
    description?: string(name='Description'),
    deviceRegistrationPolicies?: {
      externalProcessId?: string(name='ExternalProcessId'),
      fieldMap?: [ 
        {
          displayField?: string(name='DisplayField'),
          displayFieldValue?: string(name='DisplayFieldValue'),
          systemField?: string(name='SystemField'),
        }
      ](name='FieldMap'),
      policyIds?: [ string ](name='PolicyIds'),
      schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
    }(name='DeviceRegistrationPolicies'),
    dlpSendPolicies?: {
      externalProcessId?: string(name='ExternalProcessId'),
      fieldMap?: [ 
        {
          displayField?: string(name='DisplayField'),
          displayFieldValue?: string(name='DisplayFieldValue'),
          systemField?: string(name='SystemField'),
        }
      ](name='FieldMap'),
      policyIds?: [ string ](name='PolicyIds'),
      schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
    }(name='DlpSendPolicies'),
    domainBlacklistPolicies?: {
      externalProcessId?: string(name='ExternalProcessId'),
      fieldMap?: [ 
        {
          displayField?: string(name='DisplayField'),
          displayFieldValue?: string(name='DisplayFieldValue'),
          systemField?: string(name='SystemField'),
        }
      ](name='FieldMap'),
      policyIds?: [ string ](name='PolicyIds'),
      schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
    }(name='DomainBlacklistPolicies'),
    domainWhitelistPolicies?: {
      externalProcessId?: string(name='ExternalProcessId'),
      fieldMap?: [ 
        {
          displayField?: string(name='DisplayField'),
          displayFieldValue?: string(name='DisplayFieldValue'),
          systemField?: string(name='SystemField'),
        }
      ](name='FieldMap'),
      policyIds?: [ string ](name='PolicyIds'),
      schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
    }(name='DomainWhitelistPolicies'),
    endpointHardeningPolicies?: {
      externalProcessId?: string(name='ExternalProcessId'),
      fieldMap?: [ 
        {
          displayField?: string(name='DisplayField'),
          displayFieldValue?: string(name='DisplayFieldValue'),
          systemField?: string(name='SystemField'),
        }
      ](name='FieldMap'),
      policyIds?: [ string ](name='PolicyIds'),
      schemaId?: string(name='SchemaId'),
    }(name='EndpointHardeningPolicies'),
    eventLabel?: string(name='EventLabel'),
    externalConfig?: string(name='ExternalConfig'),
    peripheralBlockPolicies?: {
      externalProcessId?: string(name='ExternalProcessId'),
      fieldMap?: [ 
        {
          displayField?: string(name='DisplayField'),
          displayFieldValue?: string(name='DisplayFieldValue'),
          systemField?: string(name='SystemField'),
        }
      ](name='FieldMap'),
      policyIds?: [ string ](name='PolicyIds'),
      schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
    }(name='PeripheralBlockPolicies'),
    processId?: string(name='ProcessId', example='approval-process-35ee09077ee9****'),
    processName?: string(name='ProcessName'),
    processNodes?: [[ 
      {
        saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
        username?: string(name='Username'),
      }
    ]    ](name='ProcessNodes'),
    softwareBlockPolicies?: {
      externalProcessId?: string(name='ExternalProcessId'),
      fieldMap?: [ 
        {
          displayField?: string(name='DisplayField'),
          displayFieldValue?: string(name='DisplayFieldValue'),
          systemField?: string(name='SystemField'),
        }
      ](name='FieldMap'),
      policyIds?: [ string ](name='PolicyIds'),
      schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
    }(name='SoftwareBlockPolicies'),
    softwareHardeningPolicies?: {
      externalProcessId?: string(name='ExternalProcessId'),
      fieldMap?: [ 
        {
          displayField?: string(name='DisplayField'),
          displayFieldValue?: string(name='DisplayFieldValue'),
          systemField?: string(name='SystemField'),
        }
      ](name='FieldMap'),
      policyIds?: [ string ](name='PolicyIds'),
      schemaId?: string(name='SchemaId'),
    }(name='SoftwareHardeningPolicies'),
  }(name='Process'),
  requestId?: string(name='RequestId', example='C81E0B4B-AAEB-5FDD-B27E-3F5AF7EBD7EF'),
}

model GetApprovalProcessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetApprovalProcessResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetApprovalProcess  GetApprovalProcessRequest
  * @return GetApprovalProcessResponse
 */
async function getApprovalProcess(request: GetApprovalProcessRequest): GetApprovalProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApprovalProcess', 'GET', '/', 'json', false, 'json', request);
}

model GetApprovalSchemaRequest {
  schemaId: string(name='SchemaId', description='This parameter is required.', example='approval-schema-090134f1ebff****', position='Query'),
}

model GetApprovalSchemaResponseBody = {
  requestId?: string(name='RequestId', example='EFE7EBB2-449D-5BBB-B381-CA7839BC1649'),
  schema?: {
    createTime?: string(name='CreateTime', example='2022-02-14 11:57:51'),
    description?: string(name='Description'),
    isDefault?: boolean(name='IsDefault', example='true'),
    policyType?: string(name='PolicyType', example='DlpSend'),
    schemaContent?: string(name='SchemaContent', example='{"form": {"labelCol": 6,"wrapperCol": 12}}'),
    schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
    schemaName?: string(name='SchemaName'),
    schemaVersion?: long(name='SchemaVersion', example='1715680940'),
  }(name='Schema'),
}

model GetApprovalSchemaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetApprovalSchemaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetApprovalSchema  GetApprovalSchemaRequest
  * @return GetApprovalSchemaResponse
 */
async function getApprovalSchema(request: GetApprovalSchemaRequest): GetApprovalSchemaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApprovalSchema', 'GET', '/', 'json', false, 'json', request);
}

model GetBootAndAntiUninstallPolicyRequest {
}

model GetBootAndAntiUninstallPolicyResponseBody = {
  requestId?: string(name='RequestId', example='CB67D866-1E54-5106-89DF-6D70C73E5989'),
  strategy?: {
    allowReport?: boolean(name='AllowReport', example='true'),
    blockContent?: {
      blockTextEn?: {
        content?: string(name='Content', example='After uninstalling, the device can no longer be used for company work, and it will lose access to the company\\"s intranet!'),
        mainButtonText?: string(name='MainButtonText', example='Report'),
        minorButtonText?: string(name='MinorButtonText', example='Ignore'),
        title?: string(name='Title', example='Anti-Uninstall Warning'),
      }(name='BlockTextEn'),
      blockTextZh?: {
        content?: string(name='Content'),
        mainButtonText?: string(name='MainButtonText'),
        minorButtonText?: string(name='MinorButtonText'),
        title?: string(name='Title'),
      }(name='BlockTextZh'),
    }(name='BlockContent'),
    createTime?: string(name='CreateTime', example='2023-04-16 10:50:05'),
    isAntiUninstall?: boolean(name='IsAntiUninstall', example='true'),
    isBoot?: boolean(name='IsBoot', example='true'),
    policyId?: string(name='PolicyId', example='auto-boot-anti-uninstall-6f6cbf5f6605****'),
    reportProcessId?: string(name='ReportProcessId', example='approval-process-300abfb970cc****'),
    updateTime?: string(name='UpdateTime', example='2024-06-14 10:17:14'),
    userGroupIds?: [ string ](name='UserGroupIds'),
    whitelistUsers?: [ string ](name='WhitelistUsers'),
  }(name='Strategy'),
}

model GetBootAndAntiUninstallPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBootAndAntiUninstallPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetBootAndAntiUninstallPolicy  GetBootAndAntiUninstallPolicyRequest
  * @return GetBootAndAntiUninstallPolicyResponse
 */
async function getBootAndAntiUninstallPolicy(request: GetBootAndAntiUninstallPolicyRequest): GetBootAndAntiUninstallPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBootAndAntiUninstallPolicy', 'GET', '/', 'json', false, 'json', request);
}

model GetClientUserRequest {
  idpConfigId: string(name='IdpConfigId', description='This parameter is required.', example='598', position='Query'),
  username: string(name='Username', description='This parameter is required.', position='Query'),
}

model GetClientUserResponseBody = {
  data?: {
    department?: {
      id?: string(name='Id', example='107'),
      name?: string(name='Name'),
    }(name='Department'),
    departmentId?: string(name='DepartmentId', example='10713'),
    description?: string(name='Description'),
    email?: string(name='Email', example='johndoe@example.com'),
    id?: string(name='Id', example='83'),
    idpConfigId?: string(name='IdpConfigId', example='598'),
    mobileNumber?: string(name='MobileNumber', example='13641966835'),
    status?: string(name='Status', example='Disabled'),
    userId?: string(name='UserId', example='su_abcd7215****'),
    username?: string(name='Username'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='58D6B23E-E5DA-5418-8F61-51A3B5A30049'),
}

model GetClientUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClientUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetClientUser  GetClientUserRequest
  * @return GetClientUserResponse
 */
async function getClientUser(request: GetClientUserRequest): GetClientUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetClientUser', 'GET', '/', 'json', false, 'json', request);
}

model GetDynamicRouteRequest {
  dynamicRouteId: string(name='DynamicRouteId', description='This parameter is required.', example='dr-16ff07c8207d****', position='Query'),
}

model GetDynamicRouteResponseBody = {
  dynamicRoute?: {
    applicationIds?: [ string ](name='ApplicationIds'),
    applicationType?: string(name='ApplicationType', example='Application'),
    createTime?: string(name='CreateTime', example='2023-02-09 10:31:47'),
    description?: string(name='Description'),
    dynamicRouteId?: string(name='DynamicRouteId', example='dr-16ff07c8207d****'),
    dynamicRouteType?: string(name='DynamicRouteType', example='connector'),
    name?: string(name='Name', example='dynamic_route_name'),
    nextHop?: string(name='NextHop', example='connector-8ccb13b6f52c****'),
    priority?: int32(name='Priority', example='1'),
    regionIds?: [ string ](name='RegionIds'),
    status?: string(name='Status', example='Enabled'),
    tagIds?: [ string ](name='TagIds'),
  }(name='DynamicRoute'),
  requestId?: string(name='RequestId', example='58D6B23E-E5DA-5418-8F61-51A3B5A30049'),
}

model GetDynamicRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDynamicRouteResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDynamicRoute  GetDynamicRouteRequest
  * @return GetDynamicRouteResponse
 */
async function getDynamicRoute(request: GetDynamicRouteRequest): GetDynamicRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDynamicRoute', 'GET', '/', 'json', false, 'json', request);
}

model GetIdpConfigRequest {
  id: string(name='Id', description='This parameter is required.', example='1465', position='Query'),
}

model GetIdpConfigResponseBody = {
  data?: {
    accessKey?: string(name='AccessKey', description='AccessKey ID', example='LTAI5tJVztnh6Nn***'),
    accessKeySecret?: string(name='AccessKeySecret', description='AccessKey Secret', example='E75ktr5jENiR3ssjC***'),
    description?: string(name='Description'),
    getGroupUrl?: string(name='GetGroupUrl', example='https://172.10.10.2:4321/getGroup?name=%s&pass=%s'),
    id?: string(name='Id', example='1465'),
    idpMetadata?: string(name='IdpMetadata', example='<?xml version="1.0" encoding="utf-8"?>***'),
    mfaConfigType?: string(name='MfaConfigType', example='totp'),
    mobileLoginType?: string(name='MobileLoginType', example='password'),
    mobileMfaConfigType?: string(name='MobileMfaConfigType', example='totp'),
    multiIdpInfo?: string(name='MultiIdpInfo', example='1482,1355'),
    name?: string(name='Name'),
    pcLoginType?: string(name='PcLoginType', example='password'),
    status?: string(name='Status', example='Enabled'),
    type?: string(name='Type', example='CSAS'),
    updateTime?: string(name='UpdateTime', example='2024-02-26T02:02:42Z'),
    verifyAesKey?: string(name='VerifyAesKey', example='QVhaU0RDR0JIWVV***'),
    verifyToken?: string(name='VerifyToken', example='7JAr3fYtnl***'),
    verifyUrl?: string(name='VerifyUrl', example='http://172.10.10.1:1234/otp_verify'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='58D6B23E-E5DA-5418-8F61-51A3B5A30049'),
}

model GetIdpConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIdpConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetIdpConfig  GetIdpConfigRequest
  * @return GetIdpConfigResponse
 */
async function getIdpConfig(request: GetIdpConfigRequest): GetIdpConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetIdpConfig', 'GET', '/', 'json', false, 'json', request);
}

model GetPrivateAccessApplicationRequest {
  applicationId: string(name='ApplicationId', description='The ID of the office application. You can obtain the value by calling the following operations:

*   [ListPrivateAccessApplications](~~ListPrivateAccessApplications~~): queries office applications.
*   [CreatePrivateAccessApplication](~~CreatePrivateAccessApplication~~): creates an office application.

This parameter is required.', example='pa-application-e12860ef6c48****', position='Query'),
}

model GetPrivateAccessApplicationResponseBody = {
  application?: {
    addresses?: [ string ](name='Addresses', description='The addresses of the office applications.'),
    applicationId?: string(name='ApplicationId', description='The ID of the office application.', example='pa-application-e12860ef6c48****'),
    autoGenerated?: int32(name='AutoGenerated'),
    browserAccessStatus?: string(name='BrowserAccessStatus', description='The browser access mode. Valid values:

*   **Enabled**
*   **Disabled**', example='Enabled'),
    connectorIds?: [ string ](name='ConnectorIds', description='The IDs of connectors.'),
    createTime?: string(name='CreateTime', description='The creation time of the office application.', example='2022-08-30 16:50:32'),
    description?: string(name='Description', description='The description of the office application.'),
    l7Config?: PAL7Config(name='L7Config', description='The browser access mode parameter. The parameter indicates the configurations of Layer 7 applications.'),
    l7ProxyDomainAutomatic?: string(name='L7ProxyDomainAutomatic', description='The browser access mode parameter. The parameter indicates the domain name that the proxy gateway uses.', example='app.example.com'),
    l7ProxyDomainCustom?: string(name='L7ProxyDomainCustom', description='The browser access mode parameter. The parameter indicates the custom domain name of the proxy gateway.', example='app.example.com'),
    name?: string(name='Name', description='The name of the office application.', example='private_access_application_name'),
    policyIds?: [ string ](name='PolicyIds', description='The IDs of the private access policies.'),
    portRanges?: [ 
      {
        begin?: int32(name='Begin', description='The start port.', example='80'),
        end?: int32(name='End', description='The end port.', example='81'),
      }
    ](name='PortRanges', description='The port ranges of the office applications. Multiple port ranges cannot be duplicated or overlapped.'),
    protocol?: string(name='Protocol', description='The protocol that is used by the office application. Valid values:

*   **All**
*   **TCP**
*   **UDP**', example='All'),
    status?: string(name='Status', description='The status of the office application. Valid values:

*   **Enabled**
*   **Disabled**', example='Enabled'),
    tagIds?: [ string ](name='TagIds', description='The IDs of the tags for the office applications.'),
  }(name='Application', description='The office application.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3ACC5EDC-2B7D-5032-8C58-D7615D66C1D4'),
}

model GetPrivateAccessApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPrivateAccessApplicationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPrivateAccessApplication  GetPrivateAccessApplicationRequest
  * @return GetPrivateAccessApplicationResponse
 */
async function getPrivateAccessApplication(request: GetPrivateAccessApplicationRequest): GetPrivateAccessApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPrivateAccessApplication', 'GET', '/', 'json', false, 'json', request);
}

model GetPrivateAccessPolicyRequest {
  policyId: string(name='PolicyId', description='Intranet access policy ID. The value can be obtained from:
- [ListPrivateAccessPolices](~~ListPrivateAccessPolices~~): Query multiple intranet access policies in bulk.
- [CreatePrivateAccessPolicy](~~CreatePrivateAccessPolicy~~): Create an intranet access policy.

This parameter is required.', example='pa-policy-63b2f1844b86****', position='Query'),
}

model GetPrivateAccessPolicyResponseBody = {
  policy?: {
    applicationIds?: [ string ](name='ApplicationIds', description='A collection of application IDs for the private access policy. This field has a value when the application type is Application.'),
    applicationType?: string(name='ApplicationType', description='The application type of the private access policy. Possible values:
- **Application**: Application.
- **Tag**: Tag.', example='Application'),
    createTime?: string(name='CreateTime', description='Intranet access policy creation time.', example='2021-07-29 11:26:02'),
    customUserAttributes?: [ 
      {
        idpId?: int32(name='IdpId', description='The identity provider ID for the custom user group. This field is required when the custom user group type is **department**.', example='12'),
        relation?: string(name='Relation', description='Custom user group relationship. Values: - **Equal**: Equal to. - **Unequal**: Not equal to.', example='Equal'),
        userGroupType?: string(name='UserGroupType', description='Type of the custom user group. Values:
- **username**: Username.
- **department**: Department.
- **email**: Email.
- **telephone**: Telephone.', example='department'),
        value?: string(name='Value', description='The value of the custom user group attribute.
- When the user group type is **username**, it represents the value of the username. The length should be 1 to 128 characters, supporting Chinese and case-sensitive English letters, and can include numbers, periods (.), underscores (_), and hyphens (-).
- When the user group type is **department**, it represents the value of the department. For example: OU=Department1,OU=SASE DingTalk.
- When the user group type is **email**, it represents the value of the email. For example: username@example.com.
- When the user group type is **telephone**, it represents the value of the phone number. For example: 13900001234.', example='OU=部门1,OU=SASE钉钉'),
      }
    ](name='CustomUserAttributes', description='Collection of custom user group attributes. Multiple custom user group attributes are combined with an OR relationship and take effect as a set.'),
    description?: string(name='Description', description='Intranet access policy description.', example='test'),
    deviceAttributeAction?: string(name='DeviceAttributeAction', description='The action to take if the security baseline is not met. Possible values:

- **Block**: Block.
- **Observe**: Observe.', example='Block'),
    deviceAttributeId?: string(name='DeviceAttributeId', description='The ID of the security baseline policy.', example='dag-d3f64e8bdd4a****'),
    name?: string(name='Name', description='Intranet access policy name.', example='private_access_policy_name'),
    policyAction?: string(name='PolicyAction', description='Intranet access policy action. Values:
- **Block**: Block.
- **Allow**: Allow.', example='Allow'),
    policyId?: string(name='PolicyId', description='Intranet access policy ID.', example='pa-policy-63b2f1844b86****'),
    priority?: int32(name='Priority', description='Intranet access policy priority. A value of 1 indicates the highest priority.', example='1'),
    status?: string(name='Status', description='Intranet access policy status. Values:
- **Enabled**: Enabled.
- **Disabled**: Disabled.', example='Enabled'),
    tagIds?: [ string ](name='TagIds', description='A collection of tag IDs for the private access policy. This field has a value when the application type is Tag.'),
    triggerTemplateId?: string(name='TriggerTemplateId', description='The trigger template ID.', example='dag-d3f64e8bdd4a****'),
    trustedProcessGroupIds?: [ string ](name='TrustedProcessGroupIds', description='A list of trusted process group IDs.'),
    trustedProcessStatus?: string(name='TrustedProcessStatus', description='The status of the trusted process switch. Possible values:
- **Enabled**: Enabled.
- **Disabled**: Disabled.', example='Enabled'),
    trustedSoftwareIds?: [ string ](name='TrustedSoftwareIds', description='A list of trusted software IDs.'),
    userGroupIds?: [ string ](name='UserGroupIds', description='Collection of user group IDs for the intranet access policy. This field is populated when the user group type is Normal.'),
    userGroupMode?: string(name='UserGroupMode', description='User group type for the intranet access policy. Values:
- **Normal**: Normal user group.
- **Custom**: Custom user group.', example='Normal'),
  }(name='Policy', description='Intranet access policy.'),
  requestId?: string(name='RequestId', description='The ID of the current request.', example='7E9D7ACD-53D5-56EF-A913-79D148D06299'),
}

model GetPrivateAccessPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPrivateAccessPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPrivateAccessPolicy  GetPrivateAccessPolicyRequest
  * @return GetPrivateAccessPolicyResponse
 */
async function getPrivateAccessPolicy(request: GetPrivateAccessPolicyRequest): GetPrivateAccessPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPrivateAccessPolicy', 'GET', '/', 'json', false, 'json', request);
}

model GetRegistrationPolicyRequest {
  policyId: string(name='PolicyId', description='This parameter is required.', example='reg-policy-dcbfd33cb004****', position='Query'),
}

model GetRegistrationPolicyResponseBody = {
  createTime?: string(name='CreateTime', example='2023-05-16 17:18:46'),
  description?: string(name='Description'),
  limitDetail?: [ 
    {
      deviceBelong?: string(name='DeviceBelong', example='Personal'),
      limitCount?: {
        all?: int32(name='All', example='0'),
        mobile?: int32(name='Mobile', example='2'),
        pc?: int32(name='PC', example='2'),
      }(name='LimitCount'),
      limitType?: string(name='LimitType', example='LimitDiff'),
    }
  ](name='LimitDetail'),
  matchMode?: string(name='MatchMode', example='UserGroupAll'),
  name?: string(name='Name', example='registration_policy_name'),
  policyId?: string(name='PolicyId', example='reg-policy-dcbfd33cb004****'),
  priority?: long(name='Priority', example='99'),
  requestId?: string(name='RequestId', example='47363C2B-1AAA-5954-8847-0E50FCC54117'),
  status?: string(name='Status', example='Enabled'),
  userGroupIds?: [ string ](name='UserGroupIds'),
  whitelist?: [ string ](name='Whitelist'),
}

model GetRegistrationPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRegistrationPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRegistrationPolicy  GetRegistrationPolicyRequest
  * @return GetRegistrationPolicyResponse
 */
async function getRegistrationPolicy(request: GetRegistrationPolicyRequest): GetRegistrationPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRegistrationPolicy', 'GET', '/', 'json', false, 'json', request);
}

model GetUserDeviceRequest {
  deviceTag: string(name='DeviceTag', description='This parameter is required.', example='36efa42d-2c32-c4dc-e3fc-8541e33a****', position='Query'),
}

model GetUserDeviceResponseBody = {
  device?: {
    appStatus?: string(name='AppStatus', example='Online'),
    appVersion?: string(name='AppVersion', example='2.2.0'),
    autoLoginStatus?: string(name='AutoLoginStatus'),
    CPU?: string(name='CPU', example='Apple M1'),
    createTime?: string(name='CreateTime', example='2023-05-16 17:18:46'),
    department?: string(name='Department'),
    deviceBelong?: string(name='DeviceBelong', example='Company'),
    deviceModel?: string(name='DeviceModel', example='MacBookPro17,1'),
    deviceStatus?: string(name='DeviceStatus', example='Online'),
    deviceTag?: string(name='DeviceTag', example='36efa42d-2c32-c4dc-e3fc-8541e33a****'),
    deviceType?: string(name='DeviceType', example='Windows'),
    deviceVersion?: string(name='DeviceVersion', example='3.5.1'),
    disk?: string(name='Disk', example='APPLE SSD AP0512Q Media'),
    dlpStatus?: string(name='DlpStatus', example='Unauthorized'),
    edrStatus?: string(name='EdrStatus'),
    historyUsers?: [ 
      {
        saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
        username?: string(name='Username'),
      }
    ](name='HistoryUsers'),
    hostname?: string(name='Hostname', example='win10-64bit'),
    iaStatus?: string(name='IaStatus', example='Disabled'),
    innerIP?: string(name='InnerIP', example='172.16.XX.XX'),
    mac?: string(name='Mac', example='48:9e:XX:XX:02:80'),
    matchDeviceGroupIds?: [ string ](name='MatchDeviceGroupIds'),
    memory?: string(name='Memory', example='16'),
    nacStatus?: string(name='NacStatus', example='Unprovisioned'),
    netInterfaceInfo?: [ 
      {
        mac?: string(name='Mac'),
        name?: string(name='Name'),
      }
    ](name='NetInterfaceInfo'),
    paStatus?: string(name='PaStatus', example='Enabled'),
    saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
    sharingStatus?: boolean(name='SharingStatus', example='true'),
    snBaseBoard?: string(name='SnBaseBoard'),
    snBios?: string(name='SnBios'),
    snDiskDrive?: string(name='SnDiskDrive'),
    snProcessor?: string(name='SnProcessor'),
    snSystem?: string(name='SnSystem'),
    srcIP?: string(name='SrcIP', example='106.14.XX.XX'),
    updateTime?: string(name='UpdateTime', example='2023-08-24 19:04:42'),
    username?: string(name='Username'),
    workshop?: string(name='Workshop'),
  }(name='Device'),
  requestId?: string(name='RequestId', example='EFE7EBB2-449D-5BBB-B381-CA7839BC1649'),
}

model GetUserDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserDeviceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserDevice  GetUserDeviceRequest
  * @return GetUserDeviceResponse
 */
async function getUserDevice(request: GetUserDeviceRequest): GetUserDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserDevice', 'GET', '/', 'json', false, 'json', request);
}

model GetUserGroupRequest {
  userGroupId: string(name='UserGroupId', description='This parameter is required.', position='Query'),
}

model GetUserGroupResponseBody = {
  requestId?: string(name='RequestId', example='1310DBC7-7E1F-55D3-B4B4-E4BE912517FB'),
  userGroup?: {
    attributes?: [ 
      {
        idpId?: int32(name='IdpId', example='12'),
        relation?: string(name='Relation', example='Equal'),
        userGroupType?: string(name='UserGroupType', example='department'),
        value?: string(name='Value'),
      }
    ](name='Attributes'),
    createTime?: string(name='CreateTime', example='2022-10-10 11:39:22'),
    description?: string(name='Description'),
    name?: string(name='Name', example='user_group_name'),
    userGroupId?: string(name='UserGroupId'),
  }(name='UserGroup'),
}

model GetUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserGroup  GetUserGroupRequest
  * @return GetUserGroupResponse
 */
async function getUserGroup(request: GetUserGroupRequest): GetUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserGroup', 'GET', '/', 'json', false, 'json', request);
}

model GetWmEmbedTaskRequest {
  taskId: string(name='TaskId', description='This parameter is required.', example='job:5GfrJYsoaffmCE7Z5bZtjU********', position='Query'),
}

model GetWmEmbedTaskResponseBody = {
  data?: {
    fileUrl?: string(name='FileUrl', example='https://example.com/embed-****.pdf'),
    fileUrlExp?: string(name='FileUrlExp', example='171859****'),
    filename?: string(name='Filename', example='embed-****.pdf'),
    outFileHashMd5?: string(name='OutFileHashMd5', example='d41d8cd98f00b204e9800998ecf8****'),
    outFileSize?: long(name='OutFileSize', example='123**'),
    taskId?: string(name='TaskId', example='job:5GfrJYsoaffmCE7Z5bZtjUxxxxxxxxxx'),
    taskStatus?: string(name='TaskStatus', example='Success'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='D6707286-A50E-57B1-B2CF-EFAC59E850D8'),
}

model GetWmEmbedTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWmEmbedTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetWmEmbedTask  GetWmEmbedTaskRequest
  * @return GetWmEmbedTaskResponse
 */
async function getWmEmbedTask(request: GetWmEmbedTaskRequest): GetWmEmbedTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWmEmbedTask', 'GET', '/', 'json', false, 'json', request);
}

model GetWmExtractTaskRequest {
  taskId: string(name='TaskId', description='This parameter is required.', example='wmt-9648c22d2eb2cb57bb855dcae7898464********', position='Query'),
}

model GetWmExtractTaskResponseBody = {
  data?: {
    createTime?: string(name='CreateTime', example='2024-01-01 11:22:33'),
    filename?: string(name='Filename', example='test-****.pdf'),
    status?: string(name='Status', example='Success'),
    taskId?: string(name='TaskId', example='wmt-9648c22d2eb2cb57bb855dcae7898464********'),
    wmInfoBytesB64?: string(name='WmInfoBytesB64', example='aGVsbG8gc2Fz****'),
    wmInfoSize?: long(name='WmInfoSize', example='32'),
    wmInfoUint?: long(name='WmInfoUint', example='123**'),
    wmType?: string(name='WmType', example='PureDocument'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='102350E7-1A20-58F5-9D63-ABEA820AE6E1'),
}

model GetWmExtractTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWmExtractTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetWmExtractTask  GetWmExtractTaskRequest
  * @return GetWmExtractTaskResponse
 */
async function getWmExtractTask(request: GetWmExtractTaskRequest): GetWmExtractTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWmExtractTask', 'GET', '/', 'json', false, 'json', request);
}

model ImportEnterpriseAccelerateTargetsRequest {
  eapId: string(name='EapId', description='This parameter is required.', example='eap-6457339b546c4cfb', position='Body'),
  fileUrl: string(name='FileUrl', description='This parameter is required.', example='https://filename.xlsx', position='Body'),
}

model ImportEnterpriseAccelerateTargetsResponseBody = {
  data?: string(name='Data', example='1648723859058501'),
  requestId?: string(name='RequestId', example='305508BD-8A31-5E15-86CE-52D57967C45E'),
}

model ImportEnterpriseAccelerateTargetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportEnterpriseAccelerateTargetsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ImportEnterpriseAccelerateTargets  ImportEnterpriseAccelerateTargetsRequest
  * @return ImportEnterpriseAccelerateTargetsResponse
 */
async function importEnterpriseAccelerateTargets(request: ImportEnterpriseAccelerateTargetsRequest): ImportEnterpriseAccelerateTargetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportEnterpriseAccelerateTargets', 'POST', '/', 'json', true, 'form', request);
}

model ListApplicationsForPrivateAccessPolicyRequest {
  policyIds: [ string ](name='PolicyIds', description='This parameter is required.', position='Query'),
}

model ListApplicationsForPrivateAccessPolicyResponseBody = {
  polices?: [ 
    {
      applications?: [ 
        {
          addresses?: [ string ](name='Addresses'),
          applicationId?: string(name='ApplicationId', example='pa-application-7a9243dd02f4****'),
          createTime?: string(name='CreateTime', example='2022-09-27 18:10:25'),
          description?: string(name='Description'),
          name?: string(name='Name', example='application_name'),
          portRanges?: [ 
            {
              begin?: int32(name='Begin', example='80'),
              end?: int32(name='End', example='81'),
            }
          ](name='PortRanges'),
          protocol?: string(name='Protocol', example='TCP'),
          status?: string(name='Status', example='Enabled'),
        }
      ](name='Applications'),
      policyId?: string(name='PolicyId', example='pa-policy-1b0d0e8b4bcf****'),
    }
  ](name='Polices'),
  requestId?: string(name='RequestId', example='4D169859-A4F2-5EC8-853B-8447787C0D8A'),
}

model ListApplicationsForPrivateAccessPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApplicationsForPrivateAccessPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListApplicationsForPrivateAccessPolicy  ListApplicationsForPrivateAccessPolicyRequest
  * @return ListApplicationsForPrivateAccessPolicyResponse
 */
async function listApplicationsForPrivateAccessPolicy(request: ListApplicationsForPrivateAccessPolicyRequest): ListApplicationsForPrivateAccessPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplicationsForPrivateAccessPolicy', 'GET', '/', 'json', false, 'json', request);
}

model ListApplicationsForPrivateAccessTagRequest {
  tagIds: [ string ](name='TagIds', description='This parameter is required.', position='Query'),
}

model ListApplicationsForPrivateAccessTagResponseBody = {
  requestId?: string(name='RequestId', example='B608C6AE-623D-55C4-9454-601B88AE937E'),
  tags?: [ 
    {
      applications?: [ 
        {
          addresses?: [ string ](name='Addresses'),
          applicationId?: string(name='ApplicationId', example='pa-application-7a9243dd02f4****'),
          createTime?: string(name='CreateTime', description='内网访问应用创建时间。', example='2022-09-27 18:10:25'),
          description?: string(name='Description'),
          name?: string(name='Name', example='private_access_application_name'),
          portRanges?: [ 
            {
              begin?: int32(name='Begin', example='80'),
              end?: int32(name='End', example='81'),
            }
          ](name='PortRanges'),
          protocol?: string(name='Protocol', example='All'),
          status?: string(name='Status', example='Enabled'),
        }
      ](name='Applications'),
      tagId?: string(name='TagId', example='tag-7ffc82853476****'),
    }
  ](name='Tags'),
}

model ListApplicationsForPrivateAccessTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApplicationsForPrivateAccessTagResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListApplicationsForPrivateAccessTag  ListApplicationsForPrivateAccessTagRequest
  * @return ListApplicationsForPrivateAccessTagResponse
 */
async function listApplicationsForPrivateAccessTag(request: ListApplicationsForPrivateAccessTagRequest): ListApplicationsForPrivateAccessTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplicationsForPrivateAccessTag', 'GET', '/', 'json', false, 'json', request);
}

model ListApprovalProcessesRequest {
  currentPage: long(name='CurrentPage', description='This parameter is required.', example='1', position='Query'),
  pageSize: long(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  policyId?: string(name='PolicyId', example='pid-6d6ad77d5b52****', position='Query'),
  policyType?: string(name='PolicyType', example='DlpSend', position='Query'),
  processIds?: [ string ](name='ProcessIds', position='Query'),
  processName?: string(name='ProcessName', example='test', position='Query'),
  saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****', position='Query'),
  username?: string(name='Username', position='Query'),
}

model ListApprovalProcessesResponseBody = {
  processes?: [ 
    {
      appUninstallPolicies?: {
        policyIds?: [ string ](name='PolicyIds'),
        schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
      }(name='AppUninstallPolicies'),
      approvalType?: int32(name='ApprovalType'),
      createTime?: string(name='CreateTime', example='2024-02-27 14:04:27'),
      description?: string(name='Description'),
      deviceRegistrationPolicies?: {
        policyIds?: [ string ](name='PolicyIds'),
        schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
      }(name='DeviceRegistrationPolicies'),
      dlpSendPolicies?: {
        policyIds?: [ string ](name='PolicyIds'),
        schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
      }(name='DlpSendPolicies'),
      domainBlacklistPolicies?: {
        policyIds?: [ string ](name='PolicyIds'),
        schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
      }(name='DomainBlacklistPolicies'),
      domainWhitelistPolicies?: {
        policyIds?: [ string ](name='PolicyIds'),
        schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
      }(name='DomainWhitelistPolicies'),
      endpointHardeningPolicies?: {
        policyIds?: [ string ](name='PolicyIds'),
        schemaId?: string(name='SchemaId'),
      }(name='EndpointHardeningPolicies'),
      peripheralBlockPolicies?: {
        policyIds?: [ string ](name='PolicyIds'),
        schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
      }(name='PeripheralBlockPolicies'),
      processId?: string(name='ProcessId', example='approval-process-35ee09077ee9****'),
      processName?: string(name='ProcessName'),
      processNodes?: [[ 
        {
          saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
          username?: string(name='Username'),
        }
      ]      ](name='ProcessNodes'),
      softwareBlockPolicies?: {
        policyIds?: [ string ](name='PolicyIds'),
        schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
      }(name='SoftwareBlockPolicies'),
      softwareHardeningPolicies?: {
        policyIds?: [ string ](name='PolicyIds'),
        schemaId?: string(name='SchemaId'),
      }(name='SoftwareHardeningPolicies'),
    }
  ](name='Processes'),
  requestId?: string(name='RequestId', example='7E39C33B-F565-55C6-ACC2-953FCE7DA7D6'),
  totalNum?: string(name='TotalNum', example='1'),
}

model ListApprovalProcessesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApprovalProcessesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListApprovalProcesses  ListApprovalProcessesRequest
  * @return ListApprovalProcessesResponse
 */
async function listApprovalProcesses(request: ListApprovalProcessesRequest): ListApprovalProcessesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApprovalProcesses', 'GET', '/', 'json', false, 'json', request);
}

model ListApprovalProcessesForApprovalSchemasRequest {
  schemaIds: [ string ](name='SchemaIds', description='This parameter is required.', position='Query'),
}

model ListApprovalProcessesForApprovalSchemasResponseBody = {
  requestId?: string(name='RequestId', example='BE4FB974-11BC-5453-9BE1-1606A73EACA6'),
  schemas?: [ 
    {
      processes?: [ 
        {
          createTime?: string(name='CreateTime', example='2022-10-25 10:44:09'),
          description?: string(name='Description'),
          processId?: string(name='ProcessId', example='approval-process-dc61e92ba5c5****'),
          processName?: string(name='ProcessName'),
        }
      ](name='Processes'),
      schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
    }
  ](name='Schemas'),
}

model ListApprovalProcessesForApprovalSchemasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApprovalProcessesForApprovalSchemasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListApprovalProcessesForApprovalSchemas  ListApprovalProcessesForApprovalSchemasRequest
  * @return ListApprovalProcessesForApprovalSchemasResponse
 */
async function listApprovalProcessesForApprovalSchemas(request: ListApprovalProcessesForApprovalSchemasRequest): ListApprovalProcessesForApprovalSchemasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApprovalProcessesForApprovalSchemas', 'GET', '/', 'json', false, 'json', request);
}

model ListApprovalSchemasRequest {
  currentPage: long(name='CurrentPage', description='This parameter is required.', example='1', position='Query'),
  pageSize: long(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  policyType?: string(name='PolicyType', example='DlpSend', position='Query'),
  schemaIds?: [ string ](name='SchemaIds', position='Query'),
  schemaName?: string(name='SchemaName', example='test', position='Query'),
}

model ListApprovalSchemasResponseBody = {
  requestId?: string(name='RequestId', example='102350E7-1A20-58F5-9D63-ABEA820AE6E1'),
  schemas?: [ 
    {
      createTime?: string(name='CreateTime', example='2024-03-15 14:44:07'),
      description?: string(name='Description'),
      isDefault?: boolean(name='IsDefault', example='true'),
      policyType?: string(name='PolicyType', example='DlpSend'),
      schemaContent?: string(name='SchemaContent', example='{"form": {"labelCol": 6,"wrapperCol": 12}}'),
      schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
      schemaName?: string(name='SchemaName'),
      schemaVersion?: long(name='SchemaVersion', example='1715680940'),
    }
  ](name='Schemas'),
  totalNum?: string(name='TotalNum', example='1'),
}

model ListApprovalSchemasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApprovalSchemasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListApprovalSchemas  ListApprovalSchemasRequest
  * @return ListApprovalSchemasResponse
 */
async function listApprovalSchemas(request: ListApprovalSchemasRequest): ListApprovalSchemasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApprovalSchemas', 'GET', '/', 'json', false, 'json', request);
}

model ListApprovalSchemasForApprovalProcessesRequest {
  processIds: [ string ](name='ProcessIds', description='This parameter is required.', position='Query'),
}

model ListApprovalSchemasForApprovalProcessesResponseBody = {
  processes?: [ 
    {
      processId?: string(name='ProcessId', example='approval-process-35ee09077ee9****'),
      schemas?: [ 
        {
          createTime?: string(name='CreateTime', example='2024-03-15 14:44:07'),
          description?: string(name='Description'),
          isDefault?: boolean(name='IsDefault', example='true'),
          policyType?: string(name='PolicyType', example='DlpSend'),
          schemaContent?: string(name='SchemaContent', example='{"form": {"labelCol": 6,"wrapperCol": 12}}'),
          schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
          schemaName?: string(name='SchemaName'),
          schemaVersion?: long(name='SchemaVersion', example='1715680940'),
        }
      ](name='Schemas'),
    }
  ](name='Processes'),
  requestId?: string(name='RequestId', example='58D6B23E-E5DA-5418-8F61-51A3B5A30049'),
}

model ListApprovalSchemasForApprovalProcessesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApprovalSchemasForApprovalProcessesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListApprovalSchemasForApprovalProcesses  ListApprovalSchemasForApprovalProcessesRequest
  * @return ListApprovalSchemasForApprovalProcessesResponse
 */
async function listApprovalSchemasForApprovalProcesses(request: ListApprovalSchemasForApprovalProcessesRequest): ListApprovalSchemasForApprovalProcessesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApprovalSchemasForApprovalProcesses', 'GET', '/', 'json', false, 'json', request);
}

model ListApprovalsRequest {
  approvalIds?: [ string ](name='ApprovalIds', position='Query'),
  createEndTime?: long(name='CreateEndTime', example='1736750500', position='Query'),
  createStartTime?: long(name='CreateStartTime', example='1730000000', position='Query'),
  creatorDepartment?: string(name='CreatorDepartment', position='Query'),
  creatorDevTag?: string(name='CreatorDevTag', example='36efa42d-2c32-c4dc-e3fc-8541e33a****', position='Query'),
  creatorUserId?: string(name='CreatorUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****', position='Query'),
  creatorUsername?: string(name='CreatorUsername', position='Query'),
  currentPage: long(name='CurrentPage', description='This parameter is required.', example='1', position='Query'),
  operatorUserId?: string(name='OperatorUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****', position='Query'),
  operatorUsername?: string(name='OperatorUsername', position='Query'),
  pageSize: long(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  policyType?: string(name='PolicyType', example='DlpSend', position='Query'),
  processId?: string(name='ProcessId', example='approval-process-fcc351b8a95b****', position='Query'),
  processName?: string(name='ProcessName', position='Query'),
  schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****', position='Query'),
  schemaName?: string(name='SchemaName', example='test', position='Query'),
  statuses?: [ string ](name='Statuses', position='Query'),
}

model ListApprovalsResponseBody = {
  approvals?: [ 
    {
      approvalDetail?: string(name='ApprovalDetail'),
      approvalId?: string(name='ApprovalId', example='approval-872b5e911b35****'),
      approvalProgresses?: [ 
        {
          action?: string(name='Action', example='Approve'),
          comment?: string(name='Comment'),
          executor?: string(name='Executor', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
          operators?: [ 
            {
              saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
              username?: string(name='Username'),
            }
          ](name='Operators'),
          status?: string(name='Status', example='Approved'),
          timestamp?: long(name='Timestamp', example='1736752000'),
        }
      ](name='ApprovalProgresses'),
      approvalType?: int32(name='ApprovalType'),
      createTime?: string(name='CreateTime', example='2022-11-15 22:11:55'),
      creatorDepartment?: string(name='CreatorDepartment'),
      creatorDevTag?: string(name='CreatorDevTag', example='36efa42d-2c32-c4dc-e3fc-8541e33a****'),
      creatorUserId?: string(name='CreatorUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
      creatorUsername?: string(name='CreatorUsername'),
      endTimestamp?: long(name='EndTimestamp', example='1757952000'),
      policyType?: string(name='PolicyType', example='DlpSend'),
      processId?: string(name='ProcessId', example='approval-process-fcc351b8a95b****'),
      processName?: string(name='ProcessName'),
      reason?: string(name='Reason'),
      schemaContent?: string(name='SchemaContent', example='{"form": {"labelCol": 6,"wrapperCol": 12}}'),
      schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
      schemaName?: string(name='SchemaName'),
      status?: string(name='Status', example='Pending'),
    }
  ](name='Approvals'),
  requestId?: string(name='RequestId', example='6965F5BA-53B6-5650-A708-51F090F843BB'),
  totalNum?: string(name='TotalNum', example='1'),
}

model ListApprovalsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApprovalsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListApprovals  ListApprovalsRequest
  * @return ListApprovalsResponse
 */
async function listApprovals(request: ListApprovalsRequest): ListApprovalsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApprovals', 'GET', '/', 'json', false, 'json', request);
}

model ListClientUsersRequest {
  currentPage?: long(name='CurrentPage', example='1', minimum=1, position='Query'),
  departmentId?: string(name='DepartmentId', example='10785', position='Query'),
  email?: string(name='Email', example='johndoe@example.com', position='Query'),
  idpConfigId: string(name='IdpConfigId', description='This parameter is required.', example='1071', position='Query'),
  mobileNumber?: string(name='MobileNumber', example='18980976559', position='Query'),
  pageSize?: long(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  status?: string(name='Status', example='Enabled', position='Query'),
  username?: string(name='Username', position='Query'),
}

model ListClientUsersResponseBody = {
  data?: {
    dataList?: [ 
      {
        department?: {
          id?: string(name='Id', example='105'),
          name?: string(name='Name'),
        }(name='Department'),
        departmentId?: string(name='DepartmentId', example='10800'),
        description?: string(name='Description'),
        email?: string(name='Email', example='johndoe@example.com'),
        id?: string(name='Id', example='1970'),
        idpConfigId?: string(name='IdpConfigId', example='1026'),
        mobileNumber?: string(name='MobileNumber', example='15800820468'),
        status?: string(name='Status', example='Disabled'),
        userId?: string(name='UserId', example='su_dead7216****'),
        username?: string(name='Username'),
      }
    ](name='DataList'),
    totalNum?: long(name='TotalNum', example='2'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='FEF1144C-95D1-5F7C-81EF-9DB70EA49FCE'),
}

model ListClientUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClientUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListClientUsers  ListClientUsersRequest
  * @return ListClientUsersResponse
 */
async function listClientUsers(request: ListClientUsersRequest): ListClientUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClientUsers', 'GET', '/', 'json', false, 'json', request);
}

model ListConnectorsRequest {
  connectorIds?: [ string ](name='ConnectorIds', description='Collection of Connector IDs. Up to 100 Connector IDs can be entered.', position='Query'),
  currentPage: int32(name='CurrentPage', description='The page number of the current page in a paginated query. Range: 1~10000.

This parameter is required.', example='1', position='Query'),
  name?: string(name='Name', description='Connector name. Length: 1~128 characters, supporting Chinese and both uppercase and lowercase English letters, and can include numbers, periods (.), underscores (_), and hyphens (-).', example='connector_name', position='Query'),
  pageSize: int32(name='PageSize', description='The number of items per page in a paginated query. Range: 1~1000.

This parameter is required.', example='10', position='Query'),
  status?: string(name='Status', description='Connector connection status. Values:
- **Online**: Online.
- **Offline**: Offline.', example='Online', position='Query'),
  switchStatus?: string(name='SwitchStatus', description='Connector instance status. Values:
- **Enabled**: Enabled.
- **Disabled**: Disabled.', example='Enabled', position='Query'),
}

model ListConnectorsResponseBody = {
  connectors?: [ 
    {
      applications?: [ 
        {
          applicationId?: string(name='ApplicationId', description='Internal network access application ID.', example='pa-application-e12860ef6c48****'),
          applicationName?: string(name='ApplicationName', description='Internal network access application name.', example='application_name'),
        }
      ](name='Applications', description='Collection of associated internal network access applications.'),
      clusterIP?: string(name='ClusterIP', description='Cluster IP.', example='1.1.1.1'),
      clusterPort?: string(name='ClusterPort', description='Cluster port.', example='8000'),
      connectorClients?: [ 
        {
          connectionStatus?: string(name='ConnectionStatus', description='Connection status between ConnectorClient and ConnectorServer.', example='Disconnected'),
          devTag?: string(name='DevTag', description='Unique device identifier for the ConnectorClient.', example='C50A2386-F851-4F11-920B-DF7148DA0C22'),
          hostname?: string(name='Hostname', description='Hostname of the ConnectorClient.', example='connector_client'),
          publicIp?: string(name='PublicIp', description='Public IP of the ConnectorClient.', example='192.0.2.1'),
        }
      ](name='ConnectorClients', description='Collection of deployed ConnectorClients.'),
      connectorId?: string(name='ConnectorId', description='Connector ID.', example='connector-94db94e06b98****'),
      createTime?: string(name='CreateTime', description='Creation time of the Connector.', example='2022-09-27 18:10:25'),
      name?: string(name='Name', description='Connector name.', example='connector_name'),
      regionId?: string(name='RegionId', description='Region ID.', example='cn-hangzhou'),
      status?: string(name='Status', description='Connector connection status. Values:
- **Online**: Online.
- **Offline**: Offline.', example='Online'),
      switchStatus?: string(name='SwitchStatus', description='Connector instance status. Values:
- **Enabled**: Enabled.
- **Disabled**: Disabled.', example='Enabled'),
      upgradeTime?: {
        end?: string(name='End', description='End time.', example='23:00'),
        start?: string(name='Start', description='Start time.', example='20:00'),
      }(name='UpgradeTime', description='Connector upgrade time.'),
    }
  ](name='Connectors', description='List of Connectors.'),
  requestId?: string(name='RequestId', description='ID of the current request.', example='58D6B23E-E5DA-5418-8F61-51A3B5A30049'),
  totalNum?: int32(name='TotalNum', description='Total number of Connectors.', example='1'),
}

model ListConnectorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListConnectorsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListConnectors  ListConnectorsRequest
  * @return ListConnectorsResponse
 */
async function listConnectors(request: ListConnectorsRequest): ListConnectorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListConnectors', 'GET', '/', 'json', false, 'json', request);
}

model ListDynamicDisposalProcessesRequest {
  currentPage: long(name='CurrentPage', description='The page number to display in the paginated query. Range: 1~10000.

This parameter is required.', example='1', position='Query'),
  devTag?: string(name='DevTag', description='Terminal device ID.', example='E7798391-2554-FE83-E0B7-045DDED629A8', position='Query'),
  disposalAction?: string(name='DisposalAction', description='Disposal action.
- **ztna_connect**: Prohibit connection to the zero-trust intranet.
- **nac_connect**: Prohibit connection to the office network access.
- **none**: No disposal action.', example='none', position='Query'),
  disposalProcessId?: string(name='DisposalProcessId', description='Disposal process ID.', example='dp-xxxxxxxx', position='Query'),
  endTime?: long(name='EndTime', description='The end time for querying dynamic disposal processes. Format: Unix timestamp (in seconds).', example='1743143296', position='Query'),
  pageSize: long(name='PageSize', description='The number of items per page in the paginated query. Range: 1~1000.

This parameter is required.', example='10', position='Query'),
  recoveryType?: string(name='RecoveryType', description='Recovery type.
- **auto**: Automatic recovery.
- **console**: Console recovery.
- **auth**: Recovery by authentication and reporting.', example='auto', position='Query'),
  startTime?: long(name='StartTime', description='The start time for querying dynamic disposal processes. Format: Unix timestamp (in seconds).', example='1743143296', position='Query'),
  status?: string(name='Status', description='Disposal status. Values:
- **disposal**: In the disposal state.
- **finished**: Already automatically recovered.
- **recovery**: Recovered by authentication and reporting or console recovery.', example='disposal', position='Query'),
  userName?: string(name='UserName', description='Username.', example='xiaoming', position='Query'),
}

model ListDynamicDisposalProcessesResponseBody = {
  disposalProcesses?: [ 
    {
      department?: string(name='Department', description='User\\"s department.', example='IT'),
      devTag?: string(name='DevTag', description='Device ID.', example='FD7554AD-4CDE-6359-6B49-4FE950606C2C'),
      deviceBasicInfo?: {
        cpu?: string(name='Cpu', description='CPU model.', example='Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz'),
        devTag?: string(name='DevTag', description='Device ID.', example='A84D0AF0-1ACC-02B8-6A07-FC898F71BE09'),
        devType?: string(name='DevType', description='Device operating system type. Values:
- **Windows**：Windows system.
- **macOS**：macOS system.
- **Linux**：Linux system.
- **Android**：Android system.
- **iOS**：iOS system.
- **Windows_Wuying**：Wuying cloud desktop system.', example='windows'),
        disk?: string(name='Disk', description='Device disk model.', example='KXG6AZNV512G TOSHIBA'),
        hostname?: string(name='Hostname', description='Device name.', example='DESKTOP-ERLV3AK'),
        mac?: string(name='Mac', description='Device MAC address.', example='CE:3B:**:**:FD:FB'),
        memory?: string(name='Memory', description='Device memory capacity. Unit: GB.', example='2'),
        osVersion?: string(name='OsVersion', description='Operating system version', example='1'),
      }(name='DeviceBasicInfo', description='Basic device information.'),
      deviceStatusInfo?: {
        appVersion?: string(name='AppVersion', description='Client version.', example='4.5.1'),
        department?: string(name='Department', description='Department to which the user belongs.', example='IT运维部'),
        dlpStatus?: string(name='DlpStatus', description='Office data protection status. Values:
- **Enabled**: Enabled.
- **Disabled**: Disabled.
- **Unprovisioned**: Not configured.
- **Unauthorized**: Unauthorized.', example='enabled'),
        internetIp?: string(name='InternetIp', description='Public IP address.', example='120.26.XX.XX'),
        laStatus?: string(name='LaStatus', description='Internet behavior management enablement status.', example='enabled'),
        loginStatus?: string(name='LoginStatus', description='Login status.', example='online'),
        nacStatus?: string(name='NacStatus', description='Network access control status. Values:
- **Enabled**: Enabled.
- **Disabled**: Disabled.
- **Unprovisioned**: Not configured.', example='enabled'),
        privateIp?: string(name='PrivateIp', description='Private IP address.', example='172.20.XX.XX'),
        saseUserId?: string(name='SaseUserId', description='Unique ID of the SASE user.', example='su_dfsdfsdgasgsgag'),
        username?: string(name='Username', description='Username.', example='test'),
        workshop?: string(name='Workshop', description='Identified office area name.', example='office'),
        ztnaStatus?: string(name='ZtnaStatus', description='ZTNA enablement status.', example='enabled'),
      }(name='DeviceStatusInfo', description='设备状态信息。'),
      disposalActions?: [ string ](name='DisposalActions', description='List of disposal actions.'),
      disposalProcessId?: string(name='DisposalProcessId', description='Disposal process ID.', example='dp-xxxxxxxx'),
      disposalTime?: string(name='DisposalTime', description='Disposal time, in seconds since the epoch.', example='1743059249'),
      dynamicPolicyId?: string(name='DynamicPolicyId', description='Dynamic policy ID.', example='dynamic-policy-xxxxxxxx'),
      dynamicPolicyName?: string(name='DynamicPolicyName', description='Dynamic policy name.', example='动态策略1'),
      hostname?: string(name='Hostname', description='Terminal device name. Length: 1~128 characters, supporting Chinese and uppercase/lowercase English letters, and can include numbers, half-width periods (.), commas (,), semicolons (;), hyphens (-), underscores (_), slashes (/), at (@) symbols, and spaces. Entering an underscore (_) alone will additionally query all terminal devices with 4-byte UTF-8 characters in their names.', example='WANGCHENCHENNBB'),
      recoveryType?: string(name='RecoveryType', description='Recovery type.
- **auto**：Automatic recovery.
- **console**：Console recovery.
- **auth**：Certification and reporting recovery.', example='auto'),
      ruleContent?: any(name='RuleContent', description='Rule content.', example='{
  "Combinator": "OR",
  "Rules": [
    {
      "Operator": "version_gt",
      "Values": [
        "1"
      ],
      "RuleType": "device_info",
      "Id": "1",
      "RuleSubType": "basic_info",
      "Name": "app_version"
    }
  ]
}'),
      saseUserId?: string(name='SaseUserId', description='SASE用户ID。', example='asdqwedg-xzczvzdaf-asfafs'),
      status?: string(name='Status', description='Disposal status. Values:
- **disposal**: In the disposal state.
- **finished**: Already automatically recovered.
- **recovery**: Recovered by authentication and reporting or console recovery.', example='disposal'),
      userName?: string(name='UserName', description='Username.', example='xiaoming'),
    }
  ](name='DisposalProcesses', description='List of disposal processes.'),
  requestId?: string(name='RequestId', description='Request ID.', example='BE4FB974-11BC-5453-9BE1-1606A73EACA6'),
  totalNum?: int32(name='TotalNum', description='Total number of dynamic disposal processes.', example='1'),
}

model ListDynamicDisposalProcessesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDynamicDisposalProcessesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDynamicDisposalProcesses  ListDynamicDisposalProcessesRequest
  * @return ListDynamicDisposalProcessesResponse
 */
async function listDynamicDisposalProcesses(request: ListDynamicDisposalProcessesRequest): ListDynamicDisposalProcessesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDynamicDisposalProcesses', 'GET', '/', 'json', false, 'json', request);
}

model ListDynamicRouteRegionsRequest {
}

model ListDynamicRouteRegionsResponseBody = {
  regions?: [ string ](name='Regions'),
  requestId?: string(name='RequestId', example='58D6B23E-E5DA-5418-8F61-51A3B5A30049'),
  totalNum?: int32(name='TotalNum', example='1'),
}

model ListDynamicRouteRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDynamicRouteRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDynamicRouteRegions  ListDynamicRouteRegionsRequest
  * @return ListDynamicRouteRegionsResponse
 */
async function listDynamicRouteRegions(request: ListDynamicRouteRegionsRequest): ListDynamicRouteRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDynamicRouteRegions', 'GET', '/', 'json', false, 'json', request);
}

model ListDynamicRoutesRequest {
  applicationId?: string(name='ApplicationId', example='pa-application-e12860ef6c48****', position='Query'),
  currentPage: int32(name='CurrentPage', description='This parameter is required.', example='1', position='Query'),
  dynamicRouteIds?: [ string ](name='DynamicRouteIds', position='Query'),
  name?: string(name='Name', example='dynamic_route_name', position='Query'),
  nextHop?: string(name='NextHop', example='connector-8ccb13b6f52c****', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  regionIds?: [ string ](name='RegionIds', position='Query'),
  status?: string(name='Status', example='Enabled', position='Query'),
  tagId?: string(name='TagId', example='tag-d3f64e8bdd4a****', position='Query'),
}

model ListDynamicRoutesResponseBody = {
  dynamicRoutes?: [ 
    {
      applicationIds?: [ string ](name='ApplicationIds'),
      applicationType?: string(name='ApplicationType', example='Application'),
      createTime?: string(name='CreateTime', example='2023-03-21 11:50:03'),
      description?: string(name='Description'),
      dynamicRouteId?: string(name='DynamicRouteId', example='dr-a0ca843f53cf****'),
      dynamicRouteType?: string(name='DynamicRouteType', example='connector'),
      name?: string(name='Name', example='dynamic_route_name'),
      nextHop?: string(name='NextHop', example='connector-8ccb13b6f52c****'),
      priority?: int32(name='Priority', example='1'),
      regionIds?: [ string ](name='RegionIds'),
      status?: string(name='Status', example='Enabled'),
      tagIds?: [ string ](name='TagIds'),
    }
  ](name='DynamicRoutes'),
  requestId?: string(name='RequestId', example='58D6B23E-E5DA-5418-8F61-51A3B5A30049'),
  totalNum?: int32(name='TotalNum', example='1'),
}

model ListDynamicRoutesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDynamicRoutesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDynamicRoutes  ListDynamicRoutesRequest
  * @return ListDynamicRoutesResponse
 */
async function listDynamicRoutes(request: ListDynamicRoutesRequest): ListDynamicRoutesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDynamicRoutes', 'GET', '/', 'json', false, 'json', request);
}

model ListEnterpriseAccelerateLogsRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  department?: string(name='Department', position='Query'),
  dstAddr?: string(name='DstAddr', position='Query'),
  endTime: long(name='EndTime', description='This parameter is required.', example='1748422694', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  searchMode?: string(name='SearchMode', position='Query'),
  startTime: long(name='StartTime', description='This parameter is required.', example='1748419094', position='Query'),
  username?: string(name='Username', position='Query'),
}

model ListEnterpriseAccelerateLogsResponseBody = {
  logs?: [ 
    {
      department?: string(name='Department'),
      deviceType?: string(name='DeviceType', example='windows'),
      dstAddr?: string(name='DstAddr', example='www.bing.com:443'),
      inBytes?: string(name='InBytes', example='12299'),
      outBytes?: string(name='OutBytes', example='2603'),
      policyName?: string(name='PolicyName'),
      proxyAddr?: string(name='ProxyAddr', example='8.222.179.xxx:10015'),
      unixTime?: string(name='UnixTime', example='1748422797'),
      username?: string(name='Username'),
    }
  ](name='Logs'),
  requestId?: string(name='RequestId', example='43F07A6A-294D-56FB-85EB-6AD00C5B60FF'),
  totalNumber?: int32(name='TotalNumber', example='120'),
}

model ListEnterpriseAccelerateLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnterpriseAccelerateLogsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListEnterpriseAccelerateLogs  ListEnterpriseAccelerateLogsRequest
  * @return ListEnterpriseAccelerateLogsResponse
 */
async function listEnterpriseAccelerateLogs(request: ListEnterpriseAccelerateLogsRequest): ListEnterpriseAccelerateLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEnterpriseAccelerateLogs', 'GET', '/', 'json', false, 'json', request);
}

model ListEnterpriseAcceleratePoliciesRequest {
  currentPage: int32(name='CurrentPage', description='This parameter is required.', example='1', minimum=1, maximum=10000, position='Query'),
  name?: string(name='Name', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', minimum=1, maximum=1000, position='Query'),
}

model ListEnterpriseAcceleratePoliciesResponseBody = {
  policies?: [ 
    {
      accelerationType?: string(name='AccelerationType', example='whitelist'),
      description?: string(name='Description'),
      eapId?: string(name='EapId', example='eap-eec34d4b12fcca61'),
      enabled?: int32(name='Enabled', example='0'),
      name?: string(name='Name', example='test'),
      onTls?: int32(name='OnTls', example='0'),
      priority?: int32(name='Priority', example='99'),
      showInClient?: int32(name='ShowInClient', example='1'),
      upstreamHost?: string(name='UpstreamHost', example='12.34.56.XX'),
      upstreamPort?: int32(name='UpstreamPort', example='1000'),
      upstreamType?: string(name='UpstreamType', example='connector'),
      userAttributeGroup?: string(name='UserAttributeGroup'),
    }
  ](name='Policies'),
  requestId?: string(name='RequestId', example='DB0471D0-C05C-556D-9F40-0325D890036F'),
  total?: int32(name='Total', example='5'),
}

model ListEnterpriseAcceleratePoliciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnterpriseAcceleratePoliciesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListEnterpriseAcceleratePolicies  ListEnterpriseAcceleratePoliciesRequest
  * @return ListEnterpriseAcceleratePoliciesResponse
 */
async function listEnterpriseAcceleratePolicies(request: ListEnterpriseAcceleratePoliciesRequest): ListEnterpriseAcceleratePoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEnterpriseAcceleratePolicies', 'GET', '/', 'json', false, 'json', request);
}

model ListEnterpriseAccelerateTargetsRequest {
  currentPage: long(name='CurrentPage', description='This parameter is required.', example='1', minimum=1, maximum=10000, position='Query'),
  eapId: string(name='EapId', description='This parameter is required.', example='eap-424ba3f47660425c', position='Query'),
  pageSize: long(name='PageSize', description='This parameter is required.', example='10', minimum=1, maximum=1000, position='Query'),
  target?: string(name='Target', example='googleapis.com', position='Query'),
}

model ListEnterpriseAccelerateTargetsResponseBody = {
  eapId?: string(name='EapId', example='eap-7fed37a757a0de24'),
  requestId?: string(name='RequestId', example='529F755E-2E75-52EC-9C2E-6293FB8BF986'),
  targets?: [ string ](name='Targets'),
  total?: int32(name='Total', example='103'),
}

model ListEnterpriseAccelerateTargetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnterpriseAccelerateTargetsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListEnterpriseAccelerateTargets  ListEnterpriseAccelerateTargetsRequest
  * @return ListEnterpriseAccelerateTargetsResponse
 */
async function listEnterpriseAccelerateTargets(request: ListEnterpriseAccelerateTargetsRequest): ListEnterpriseAccelerateTargetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEnterpriseAccelerateTargets', 'GET', '/', 'json', false, 'json', request);
}

model ListExcessiveDeviceRegistrationApplicationsRequest {
  applicationIds?: [ string ](name='ApplicationIds', position='Query'),
  currentPage: long(name='CurrentPage', description='This parameter is required.', example='1', position='Query'),
  department?: string(name='Department', position='Query'),
  deviceTag?: string(name='DeviceTag', example='36efa42d-2c32-c4dc-e3fc-8541e33a****', position='Query'),
  hostname?: string(name='Hostname', example='win10-64bit', position='Query'),
  mac?: string(name='Mac', example='00:16:XX:XX:7c:46', position='Query'),
  pageSize: long(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****', position='Query'),
  statuses?: [ string ](name='Statuses', position='Query'),
  username?: string(name='Username', position='Query'),
}

model ListExcessiveDeviceRegistrationApplicationsResponseBody = {
  applications?: [ 
    {
      applicationId?: string(name='ApplicationId', example='reg-application-0f4a127b7e78****'),
      createTime?: string(name='CreateTime', example='2023-07-17 18:46:55'),
      department?: string(name='Department'),
      description?: string(name='Description'),
      deviceTag?: string(name='DeviceTag', example='36efa42d-2c32-c4dc-e3fc-8541e33a****'),
      deviceType?: string(name='DeviceType', example='Windows'),
      hostname?: string(name='Hostname', example='win10-64bit'),
      isUsed?: boolean(name='IsUsed', example='false'),
      mac?: string(name='Mac', example='00:16:XX:XX:7c:46'),
      saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
      status?: string(name='Status', example='Approved'),
      username?: string(name='Username'),
    }
  ](name='Applications'),
  requestId?: string(name='RequestId', example='58D6B23E-E5DA-5418-8F61-51A3B5A30049'),
  totalNum?: long(name='TotalNum', example='1'),
}

model ListExcessiveDeviceRegistrationApplicationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListExcessiveDeviceRegistrationApplicationsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListExcessiveDeviceRegistrationApplications  ListExcessiveDeviceRegistrationApplicationsRequest
  * @return ListExcessiveDeviceRegistrationApplicationsResponse
 */
async function listExcessiveDeviceRegistrationApplications(request: ListExcessiveDeviceRegistrationApplicationsRequest): ListExcessiveDeviceRegistrationApplicationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListExcessiveDeviceRegistrationApplications', 'GET', '/', 'json', false, 'json', request);
}

model ListIdpConfigsRequest {
  currentPage?: long(name='CurrentPage', example='1', minimum=1, position='Query'),
  include?: string(name='Include', example='CSAS,DingTalk,LDAP', position='Query'),
  pageSize?: long(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
}

model ListIdpConfigsResponseBody = {
  data?: {
    dataList?: [ 
      {
        description?: string(name='Description'),
        id?: string(name='Id', example='277'),
        mfa?: string(name='Mfa', example='totp'),
        mobileLoginType?: string(name='MobileLoginType', example='password'),
        mobileMfaConfigType?: string(name='MobileMfaConfigType', example='password'),
        multiIdpInfo?: string(name='MultiIdpInfo', example='1482,1355'),
        name?: string(name='Name'),
        pcLoginType?: string(name='PcLoginType', example='password'),
        status?: string(name='Status', example='Disabled'),
        type?: string(name='Type', example='DingTalk'),
        updateTime?: string(name='UpdateTime', example='2023-05-09T02:22:41.430Z'),
      }
    ](name='DataList'),
    totalNum?: long(name='TotalNum', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='FD724DBC-CD76-5235-BF76-59C51B73296D'),
}

model ListIdpConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIdpConfigsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListIdpConfigs  ListIdpConfigsRequest
  * @return ListIdpConfigsResponse
 */
async function listIdpConfigs(request: ListIdpConfigsRequest): ListIdpConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIdpConfigs', 'GET', '/', 'json', false, 'json', request);
}

model ListIdpDepartmentsRequest {
  currentPage?: long(name='CurrentPage', example='1', minimum=1, position='Query'),
  idpConfigId: string(name='IdpConfigId', description='This parameter is required.', example='1440', position='Query'),
  pageSize?: long(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
}

model ListIdpDepartmentsResponseBody = {
  data?: {
    dataList?: [ 
      {
        id?: string(name='Id', example='30520'),
        idpConfigId?: string(name='IdpConfigId', example='1440'),
        name?: string(name='Name'),
      }
    ](name='DataList'),
    totalNum?: long(name='TotalNum', example='2'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='102350E7-1A20-58F5-9D63-ABEA820AE6E1'),
}

model ListIdpDepartmentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIdpDepartmentsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListIdpDepartments  ListIdpDepartmentsRequest
  * @return ListIdpDepartmentsResponse
 */
async function listIdpDepartments(request: ListIdpDepartmentsRequest): ListIdpDepartmentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIdpDepartments', 'GET', '/', 'json', false, 'json', request);
}

model ListNacUserCertRequest {
  currentPage?: string(name='CurrentPage', example='1', position='Query'),
  department?: string(name='Department', position='Query'),
  deviceType?: string(name='DeviceType', example='windows', position='Query'),
  endTime?: long(name='EndTime', example='1702770400', position='Query'),
  pageSize?: string(name='PageSize', example='10', position='Query'),
  startTime?: long(name='StartTime', example='1702260834', position='Query'),
  status?: string(name='Status', example='Enabled', position='Query'),
  username?: string(name='Username', example='zhang**', position='Query'),
}

model ListNacUserCertResponseBody = {
  code?: long(name='Code', example='200'),
  dataList?: [ 
    {
      aliuid?: string(name='Aliuid', example='1'),
      department?: string(name='Department'),
      devTag?: string(name='DevTag', example='36efa42d-2c32-c4dc-e3fc-8541e33a****'),
      deviceType?: string(name='DeviceType', example='windows'),
      expiredTime?: string(name='ExpiredTime', example='2029-06-30 09:31:54'),
      hostname?: string(name='Hostname', example='MS-XU****'),
      mac?: string(name='Mac', example='08:f8:**:**:**:5e'),
      status?: string(name='Status', example='Disabled'),
      userId?: string(name='UserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
      username?: string(name='Username', example='zhang**'),
    }
  ](name='DataList'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='58D6B23E-E5DA-5418-8F61-51A3B5A30049'),
  totalNum?: long(name='TotalNum', example='1'),
}

model ListNacUserCertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNacUserCertResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNacUserCert  ListNacUserCertRequest
  * @return ListNacUserCertResponse
 */
async function listNacUserCert(request: ListNacUserCertRequest): ListNacUserCertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNacUserCert', 'POST', '/', 'json', false, 'json', request);
}

model ListPolicesForPrivateAccessApplicationRequest {
  applicationIds: [ string ](name='ApplicationIds', description='This parameter is required.', position='Query'),
}

model ListPolicesForPrivateAccessApplicationResponseBody = {
  applications?: [ 
    {
      applicationId?: string(name='ApplicationId', example='pa-application-b927baf3e592****'),
      policies?: [ 
        {
          applicationType?: string(name='ApplicationType', example='Application'),
          createTime?: string(name='CreateTime', example='2022-09-27 18:10:25'),
          customUserAttributes?: [ 
            {
              idpId?: int32(name='IdpId', example='12'),
              relation?: string(name='Relation', example='Equal'),
              userGroupType?: string(name='UserGroupType', example='department'),
              value?: string(name='Value'),
            }
          ](name='CustomUserAttributes'),
          description?: string(name='Description'),
          name?: string(name='Name', example='private_access_policy_name'),
          policyAction?: string(name='PolicyAction', example='Allow'),
          policyId?: string(name='PolicyId', example='pa-policy-867ef4007c8a****'),
          priority?: int32(name='Priority', example='1'),
          status?: string(name='Status', example='Enabled'),
          userGroupType?: string(name='UserGroupType', example='Normal'),
        }
      ](name='Policies'),
    }
  ](name='Applications'),
  requestId?: string(name='RequestId', example='4AB972E2-D702-5464-B132-B1911498B8BF'),
}

model ListPolicesForPrivateAccessApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPolicesForPrivateAccessApplicationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPolicesForPrivateAccessApplication  ListPolicesForPrivateAccessApplicationRequest
  * @return ListPolicesForPrivateAccessApplicationResponse
 */
async function listPolicesForPrivateAccessApplication(request: ListPolicesForPrivateAccessApplicationRequest): ListPolicesForPrivateAccessApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPolicesForPrivateAccessApplication', 'GET', '/', 'json', false, 'json', request);
}

model ListPolicesForPrivateAccessTagRequest {
  tagIds: [ string ](name='TagIds', description='This parameter is required.', position='Query'),
}

model ListPolicesForPrivateAccessTagResponseBody = {
  requestId?: string(name='RequestId', example='4D169859-A4F2-5EC8-853B-8447787C0D8A'),
  tags?: [ 
    {
      polices?: [ 
        {
          applicationType?: string(name='ApplicationType', example='Application'),
          createTime?: string(name='CreateTime', description='内网访问策略创建时间。', example='2023-02-21 14:10:16'),
          customUserAttributes?: [ 
            {
              idpId?: int32(name='IdpId', description='用户组的身份源ID。当自定义用户组类型为**department**时，存在该值。', example='12'),
              relation?: string(name='Relation', description='用户组的关系。取值：
- **Equal**：等于。
- **Unequal**：不等于。', example='Equal'),
              userGroupType?: string(name='UserGroupType', description='用户组的类型。取值：
- **username**：用户名。
- **department**：部门。
- **email**：邮箱。
- **telephone**：手机。', example='department'),
              value?: string(name='Value', description='用户组属性的值。
- 当用户组类型为**username**时，表示用户名的值。长度为1~128个字符，支持中文和大小写英文字母，可包含数字、半角句号（.）、下划线（_）和短划线（-）。
- 当用户组类型为**department**时，表示部门的值。如：OU=部门1,OU=SASE钉钉。
- 当用户组类型为**email**时，表示邮箱的值。如：username@example.com。
- 当用户组类型为**telephone**时，表示手机的值。如：13900001234。', example='OU=部门1,OU=SASE钉钉'),
            }
          ](name='CustomUserAttributes', description='自定义用户组属性集合。多个自定义用户组属性之间是或的关系，按照合集生效。'),
          description?: string(name='Description'),
          name?: string(name='Name', example='private_access_policy_name'),
          policyAction?: string(name='PolicyAction', example='Allow'),
          policyId?: string(name='PolicyId', example='pa-policy-867ef4007c8a****'),
          priority?: int32(name='Priority', example='1'),
          status?: string(name='Status', example='Enabled'),
          userGroupType?: string(name='UserGroupType', example='Normal'),
        }
      ](name='Polices'),
      tagId?: string(name='TagId', example='tag-b927baf3e592****'),
    }
  ](name='Tags'),
}

model ListPolicesForPrivateAccessTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPolicesForPrivateAccessTagResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPolicesForPrivateAccessTag  ListPolicesForPrivateAccessTagRequest
  * @return ListPolicesForPrivateAccessTagResponse
 */
async function listPolicesForPrivateAccessTag(request: ListPolicesForPrivateAccessTagRequest): ListPolicesForPrivateAccessTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPolicesForPrivateAccessTag', 'GET', '/', 'json', false, 'json', request);
}

model ListPolicesForUserGroupRequest {
  userGroupIds: [ string ](name='UserGroupIds', description='This parameter is required.', position='Query'),
}

model ListPolicesForUserGroupResponseBody = {
  requestId?: string(name='RequestId', example='5F04DFBD-3F48-5F70-AE72-474026670128'),
  userGroups?: [ 
    {
      polices?: [ 
        {
          name?: string(name='Name', example='private_access_policy_name'),
          policyId?: string(name='PolicyId', example='pa-policy-ce2bf7236fab****'),
          policyType?: string(name='PolicyType', example='PrivateAccess'),
        }
      ](name='Polices'),
      userGroupId?: string(name='UserGroupId', example='usergroup-6f1ef2fc56b6****'),
    }
  ](name='UserGroups'),
}

model ListPolicesForUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPolicesForUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPolicesForUserGroup  ListPolicesForUserGroupRequest
  * @return ListPolicesForUserGroupResponse
 */
async function listPolicesForUserGroup(request: ListPolicesForUserGroupRequest): ListPolicesForUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPolicesForUserGroup', 'GET', '/', 'json', false, 'json', request);
}

model ListPopTrafficStatisticsRequest {
  endTime?: string(name='EndTime', example='1681293719', position='Query'),
  region?: string(name='Region', example='cn-hangzhou', position='Query'),
  startTime?: string(name='StartTime', example='1681035708', position='Query'),
}

model ListPopTrafficStatisticsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='EFE7EBB2-449D-5BBB-B381-CA7839BC1649'),
  trafficData?: [ 
    {
      datapoints?: [ 
        {
          average?: double(name='Average', example='15325'),
          dateTime?: string(name='DateTime', example='2023-12-06 15:29:00'),
        }
      ](name='Datapoints'),
      metricName?: string(name='MetricName', example='InternetTx'),
    }
  ](name='TrafficData'),
}

model ListPopTrafficStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPopTrafficStatisticsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPopTrafficStatistics  ListPopTrafficStatisticsRequest
  * @return ListPopTrafficStatisticsResponse
 */
async function listPopTrafficStatistics(request: ListPopTrafficStatisticsRequest): ListPopTrafficStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPopTrafficStatistics', 'GET', '/', 'json', false, 'json', request);
}

model ListPrivateAccessApplicationsRequest {
  accessModes?: string(name='AccessModes', position='Query'),
  address?: string(name='Address', example='192.168.0.0/16', position='Query'),
  applicationIds?: [ string ](name='ApplicationIds', position='Query'),
  connectorId?: string(name='ConnectorId', position='Query'),
  currentPage: int32(name='CurrentPage', description='This parameter is required.', example='1', position='Query'),
  name?: string(name='Name', example='private_access_application_name', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  policyId?: string(name='PolicyId', example='pa-policy-54a7838a48bf****', position='Query'),
  status?: string(name='Status', example='Enabled', position='Query'),
  tagId?: string(name='TagId', example='tag-d3f64e8bdd4a****', position='Query'),
}

model ListPrivateAccessApplicationsResponseBody = {
  applications?: [ 
    {
      addresses?: [ string ](name='Addresses'),
      applicationId?: string(name='ApplicationId', example='pa-application-e12860ef6c48****'),
      autoGenerated?: int32(name='AutoGenerated'),
      browserAccessStatus?: string(name='BrowserAccessStatus'),
      connectorIds?: [ string ](name='ConnectorIds'),
      createTime?: string(name='CreateTime', example='2022-12-16 15:03:42'),
      description?: string(name='Description'),
      l7ProxyDomainAutomatic?: string(name='L7ProxyDomainAutomatic'),
      l7ProxyDomainCustom?: string(name='L7ProxyDomainCustom'),
      name?: string(name='Name', example='private_access_application_name'),
      policyIds?: [ string ](name='PolicyIds'),
      portRanges?: [ 
        {
          begin?: int32(name='Begin', example='80'),
          end?: int32(name='End', example='81'),
        }
      ](name='PortRanges'),
      protocol?: string(name='Protocol', example='All'),
      status?: string(name='Status', example='Enabled'),
      tagIds?: [ string ](name='TagIds'),
    }
  ](name='Applications'),
  requestId?: string(name='RequestId', example='748CFDC7-1EB6-5B8B-9405-DA76ED5BB60D'),
  totalNum?: int32(name='TotalNum', example='1'),
}

model ListPrivateAccessApplicationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPrivateAccessApplicationsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPrivateAccessApplications  ListPrivateAccessApplicationsRequest
  * @return ListPrivateAccessApplicationsResponse
 */
async function listPrivateAccessApplications(request: ListPrivateAccessApplicationsRequest): ListPrivateAccessApplicationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrivateAccessApplications', 'POST', '/', 'json', false, 'json', request);
}

model ListPrivateAccessApplicationsForDynamicRouteRequest {
  dynamicRouteIds: [ string ](name='DynamicRouteIds', description='This parameter is required.', position='Query'),
}

model ListPrivateAccessApplicationsForDynamicRouteResponseBody = {
  dynamicRoutes?: [ 
    {
      applications?: [ 
        {
          addresses?: [ string ](name='Addresses'),
          applicationId?: string(name='ApplicationId', example='pa-application-7a9243dd02f4****'),
          createTime?: string(name='CreateTime', example='2022-04-13 13:33:24'),
          description?: string(name='Description'),
          name?: string(name='Name', example='application_name'),
          portRanges?: [ 
            {
              begin?: int32(name='Begin', example='80'),
              end?: int32(name='End', example='81'),
            }
          ](name='PortRanges'),
          protocol?: string(name='Protocol', example='All'),
          status?: string(name='Status', example='Enabled'),
        }
      ](name='Applications'),
      dynamicRouteId?: string(name='DynamicRouteId', example='dr-ca9fddfac7c6****'),
    }
  ](name='DynamicRoutes'),
  requestId?: string(name='RequestId', example='BE4FB974-11BC-5453-9BE1-1606A73EACA6'),
}

model ListPrivateAccessApplicationsForDynamicRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPrivateAccessApplicationsForDynamicRouteResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPrivateAccessApplicationsForDynamicRoute  ListPrivateAccessApplicationsForDynamicRouteRequest
  * @return ListPrivateAccessApplicationsForDynamicRouteResponse
 */
async function listPrivateAccessApplicationsForDynamicRoute(request: ListPrivateAccessApplicationsForDynamicRouteRequest): ListPrivateAccessApplicationsForDynamicRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrivateAccessApplicationsForDynamicRoute', 'GET', '/', 'json', false, 'json', request);
}

model ListPrivateAccessPolicesRequest {
  applicationId?: string(name='ApplicationId', description='The ID of the office application. Either the ID or tag of the office application is used for queries. You can obtain the value by calling the following operations:

*   [ListPrivateAccessApplications](~~ListPrivateAccessApplications~~): queries office applications.
*   [CreatePrivateAccessApplication](~~CreatePrivateAccessApplication~~): creates an office application.', example='pa-application-e12860ef6c48****', position='Query'),
  applicationName?: string(name='ApplicationName', description='The name of the office application.', example='Office', position='Query'),
  currentPage: int32(name='CurrentPage', description='The page number. Valid values: 1 to 10000.

This parameter is required.', example='1', position='Query'),
  name?: string(name='Name', description='The name of the private access policy. The value must be 1 to 128 characters in length and can contain letters, digits, hyphens (-), underscores (_), and periods (.).', example='private_access_policy_name', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 1000.

This parameter is required.', example='10', position='Query'),
  policyAction?: string(name='PolicyAction', description='The action in the private access policy. Valid values:

*   **Block**
*   **Allow**', example='Allow', position='Query'),
  policyIds?: [ string ](name='PolicyIds', description='The IDs of the private access policies. You can enter up to 100 IDs.', position='Query'),
  status?: string(name='Status', description='The status of the private access policy. Valid values:

*   **Enabled**
*   **Disabled**', example='Enabled', position='Query'),
  tagId?: string(name='TagId', description='The ID of the tag for the office application. Either the ID or tag of the office application is used for queries. You can obtain the value by calling the following operations:

*   [ListPrivateAccessTags](~~ListPrivateAccessTags~~): queries tags for office applications.
*   [CreatePrivateAccessTag](~~CreatePrivateAccessTag~~): creates a tag for office applications.', example='tag-c0cb77857a99****', position='Query'),
  tagName?: string(name='TagName', description='The name of the tag.', example='Cloud service', position='Query'),
  userGroupId?: string(name='UserGroupId', description='The ID of the user group. You can obtain the value by calling the following operations:

*   [ListUserGroups](~~ListUserGroups~~): queries user groups.
*   [CreateUserGroup](~~CreateUserGroup~~): creates a user group.', example='usergroup-6f1ef2fc56b6****', position='Query'),
}

model ListPrivateAccessPolicesResponseBody = {
  polices?: [ 
    {
      applicationIds?: [ string ](name='ApplicationIds', description='The IDs of the applications that are specified in the private access policy. If the value of ApplicationType is **Application**, this parameter is returned.'),
      applicationType?: string(name='ApplicationType', description='The application type of the private access policy. Valid values:

*   **Application**
*   **Tag**', example='Application'),
      createTime?: string(name='CreateTime', description='The creation time of the private access policy.', example='2022-07-10 15:50:23'),
      customUserAttributes?: [ 
        {
          idpId?: int32(name='IdpId', description='The ID of the identity provider (IdP) for the user group. If the value of UserGroupType is **department**, this parameter is returned.', example='12'),
          relation?: string(name='Relation', description='The logical operator for the user group. Valid values:

*   **Equal**
*   **Unequal**', example='Equal'),
          userGroupType?: string(name='UserGroupType', description='The type of the user group, which is the key of the attribute. Valid values:

*   **username**
*   **department**
*   **email**
*   **telephone**', example='department'),
          value?: string(name='Value', description='The value of the attribute.

*   If the value of UserGroupType is **username**, the value of this parameter is a username. The value must be 1 to 128 characters in length and can contain letters, digits, hyphens (-), underscores (_), and periods (.).
*   If the value of UserGroupType is **department**, the value of this parameter is a department. Examples: OU=Department 1, OU=SASE DingTalk.
*   If the value of UserGroupType is **email**, the value of this parameter is an email address. Example: username@example.com.
*   If the value of UserGroupType is **telephone**, the value of this parameter is a mobile phone number. Example: 13900001234.', example='OU=Department 1, OU=SASE DingTalk'),
        }
      ](name='CustomUserAttributes', description='The attributes of the custom user group. The attributes of the custom user group are evaluated by using a logical OR. If an attribute is matched, the policy takes effect.'),
      description?: string(name='Description', description='The description of the private access policy.', example='a private access policy'),
      deviceAttributeAction?: string(name='DeviceAttributeAction', description='The action that is performed when the security baseline is not met. Valid values:

*   **Block**
*   **Observe**', example='Block'),
      deviceAttributeId?: string(name='DeviceAttributeId', description='The ID of the security baseline.', example='dag-d3f64e8bdd4a****'),
      name?: string(name='Name', description='The name of the private access policy.', example='private_access_policy_name'),
      policyAction?: string(name='PolicyAction', description='The action in the private access policy. Valid values:

*   **Block**
*   **Allow**', example='Allow'),
      policyId?: string(name='PolicyId', description='The ID of the private access policy.', example='pa-policy-63b2f1844b86****'),
      priority?: int32(name='Priority', description='The priority of the private access policy. The value 1 indicates the highest priority.', example='1'),
      status?: string(name='Status', description='The status of the private access policy. Valid values:

*   **Enabled**
*   **Disabled**', example='Enabled'),
      tagIds?: [ string ](name='TagIds', description='The IDs of the tags that are specified in the private access policy. If the value of ApplicationType is **Tag**, this parameter is returned.'),
      triggerTemplateId?: string(name='TriggerTemplateId', description='The ID of the trigger template.', example='dag-d3f64e8bdd4a****'),
      trustedProcessGroupIds?: [ string ](name='TrustedProcessGroupIds', description='List of trusted process group IDs.'),
      trustedProcessStatus?: string(name='TrustedProcessStatus', description='Trusted process switch status. Values: 
- **Enabled**: On.
- **Disabled**: Off.', example='Enabled'),
      trustedSoftwareIds?: [ string ](name='TrustedSoftwareIds', description='List of trusted software IDs.'),
      userGroupIds?: [ string ](name='UserGroupIds', description='The IDs of user groups in the private access policy. If the value of UserGroupMode is **Normal**, this parameter is returned.'),
      userGroupMode?: string(name='UserGroupMode', description='The type of the user group in the private access policy. Valid values:

*   **Normal**: regular user group.
*   **Custom**: custom user group.', example='Normal'),
    }
  ](name='Polices', description='The private access policies.'),
  requestId?: string(name='RequestId', description='The request ID.', example='748CFDC7-1EB6-5B8B-9405-DA76ED5BB60D'),
  totalNum?: int32(name='TotalNum', description='The total number of private access policies.', example='1'),
}

model ListPrivateAccessPolicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPrivateAccessPolicesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPrivateAccessPolices  ListPrivateAccessPolicesRequest
  * @return ListPrivateAccessPolicesResponse
 */
async function listPrivateAccessPolices(request: ListPrivateAccessPolicesRequest): ListPrivateAccessPolicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrivateAccessPolices', 'GET', '/', 'json', false, 'json', request);
}

model ListPrivateAccessTagsRequest {
  applicationId?: string(name='ApplicationId', description='The ID of the internal access application. You can obtain the application ID by calling the following operations:

*   [ListPrivateAccessApplications](~~ListPrivateAccessApplications~~): queries all internal access applications.
*   [CreatePrivateAccessApplication](~~CreatePrivateAccessApplication~~): creates an internal access application.', example='pa-application-e12860ef6c48****', position='Query'),
  currentPage: int32(name='CurrentPage', description='The page number. Valid values: 1 to 10000.

This parameter is required.', example='1', position='Query'),
  name?: string(name='Name', description='The name of the internal access tag. The name must be 1 to 128 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-).', example='tag_name', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 1000.

This parameter is required.', example='10', position='Query'),
  policyId?: string(name='PolicyId', description='The ID of the internal access policy. You can obtain the policy ID by calling the following operations:

*   [ListPrivateAccessPolices](~~ListPrivateAccessPolices~~): queries all internal access policies.
*   [CreatePrivateAccessPolicy](~~CreatePrivateAccessPolicy~~): creates an internal access policy.', example='pa-policy-54a7838a48bf****', position='Query'),
  simpleMode?: boolean(name='SimpleMode', description='Specifies whether to enable the simple query mode. A value of true specifies that policy IDs are not queried.', example='true', position='Query'),
  tagIds?: [ string ](name='TagIds', description='The IDs of internal access tags. You can specify up to 100 tag IDs.', position='Query'),
}

model ListPrivateAccessTagsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='54C1D236-CDB9-586C-B44D-AFDCEA195545'),
  tags?: [ 
    {
      applicationIds?: [ string ](name='ApplicationIds', description='The IDs of the internal access applications.'),
      createTime?: string(name='CreateTime', description='The time when the internal access tag was created.', example='2022-10-10 11:39:34'),
      description?: string(name='Description', description='The description of the internal access tag.'),
      name?: string(name='Name', description='The name of the internal access tag.', example='tag_name'),
      policyIds?: [ string ](name='PolicyIds', description='The IDs of the internal access policies.'),
      tagId?: string(name='TagId', description='The ID of the internal access tag.', example='tag-d3f64e8bdd4a****'),
      tagType?: string(name='TagType', description='The type of the internal access tag. Valid values:

*   **Default**
*   **Custom**', example='Default'),
    }
  ](name='Tags', description='The internal access tags.'),
  totalNum?: int32(name='TotalNum', description='The total number of internal access tags.', example='1'),
}

model ListPrivateAccessTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPrivateAccessTagsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPrivateAccessTags  ListPrivateAccessTagsRequest
  * @return ListPrivateAccessTagsResponse
 */
async function listPrivateAccessTags(request: ListPrivateAccessTagsRequest): ListPrivateAccessTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrivateAccessTags', 'GET', '/', 'json', false, 'json', request);
}

model ListPrivateAccessTagsForDynamicRouteRequest {
  dynamicRouteIds: [ string ](name='DynamicRouteIds', description='This parameter is required.', position='Query'),
}

model ListPrivateAccessTagsForDynamicRouteResponseBody = {
  dynamicRoutes?: [ 
    {
      dynamicRouteId?: string(name='DynamicRouteId', example='dr-ca9fddfac7c6****'),
      tags?: [ 
        {
          createTime?: string(name='CreateTime', example='2022-10-23 14:02:56'),
          description?: string(name='Description'),
          name?: string(name='Name', example='tag_name'),
          tagId?: string(name='TagId', example='tag-d3f64e8bdd4a****'),
          tagType?: string(name='TagType', example='Custom'),
        }
      ](name='Tags'),
    }
  ](name='DynamicRoutes'),
  requestId?: string(name='RequestId', example='B608C6AE-623D-55C4-9454-601B88AE937E'),
}

model ListPrivateAccessTagsForDynamicRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPrivateAccessTagsForDynamicRouteResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPrivateAccessTagsForDynamicRoute  ListPrivateAccessTagsForDynamicRouteRequest
  * @return ListPrivateAccessTagsForDynamicRouteResponse
 */
async function listPrivateAccessTagsForDynamicRoute(request: ListPrivateAccessTagsForDynamicRouteRequest): ListPrivateAccessTagsForDynamicRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrivateAccessTagsForDynamicRoute', 'GET', '/', 'json', false, 'json', request);
}

model ListRegistrationPoliciesRequest {
  companyLimitType?: string(name='CompanyLimitType', example='LimitAll', position='Query'),
  currentPage: long(name='CurrentPage', description='This parameter is required.', example='1', position='Query'),
  matchMode?: string(name='MatchMode', example='UserGroupAll', position='Query'),
  name?: string(name='Name', example='registration_policy_name', position='Query'),
  pageSize: long(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  personalLimitType?: string(name='PersonalLimitType', example='LimitDiff', position='Query'),
  policyIds?: [ string ](name='PolicyIds', position='Query'),
  status?: string(name='Status', example='Enabled', position='Query'),
  userGroupId?: string(name='UserGroupId', example='usergroup-6f1ef2fc56b6****', position='Query'),
}

model ListRegistrationPoliciesResponseBody = {
  policies?: [ 
    {
      createTime?: string(name='CreateTime', example='2023-05-16 17:18:46'),
      description?: string(name='Description'),
      limitDetail?: [ 
        {
          deviceBelong?: string(name='DeviceBelong', example='Company'),
          limitCount?: {
            all?: int32(name='All', example='3'),
            mobile?: int32(name='Mobile', example='0'),
            pc?: int32(name='PC', example='0'),
          }(name='LimitCount'),
          limitType?: string(name='LimitType', example='LimitAll'),
        }
      ](name='LimitDetail'),
      matchMode?: string(name='MatchMode', example='UserGroupNormal'),
      name?: string(name='Name', example='registration_policy_name'),
      policyId?: string(name='PolicyId', example='reg-policy-dcbfd33cb004****'),
      priority?: long(name='Priority', example='1'),
      status?: string(name='Status', example='Enabled'),
      userGroupIds?: [ string ](name='UserGroupIds'),
      whitelist?: [ string ](name='Whitelist'),
    }
  ](name='Policies'),
  requestId?: string(name='RequestId', example='7A8FE38A-E29C-5678-B84A-FEDBCB83552F'),
  totalNum?: string(name='TotalNum', example='1'),
}

model ListRegistrationPoliciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRegistrationPoliciesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRegistrationPolicies  ListRegistrationPoliciesRequest
  * @return ListRegistrationPoliciesResponse
 */
async function listRegistrationPolicies(request: ListRegistrationPoliciesRequest): ListRegistrationPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRegistrationPolicies', 'GET', '/', 'json', false, 'json', request);
}

model ListRegistrationPoliciesForUserGroupRequest {
  userGroupIds: [ string ](name='UserGroupIds', description='This parameter is required.', position='Query'),
}

model ListRegistrationPoliciesForUserGroupResponseBody = {
  requestId?: string(name='RequestId', example='58D6B23E-E5DA-5418-8F61-51A3B5A30049'),
  userGroups?: [ 
    {
      policies?: [ 
        {
          createTime?: string(name='CreateTime', example='2023-05-16 17:18:46'),
          description?: string(name='Description'),
          limitDetail?: [ 
            {
              deviceBelong?: string(name='DeviceBelong', example='Company'),
              limitCount?: {
                all?: string(name='All', example='3'),
                mobile?: string(name='Mobile', example='0'),
                pc?: string(name='PC', example='0'),
              }(name='LimitCount'),
              limitType?: string(name='LimitType', example='LimitAll'),
            }
          ](name='LimitDetail'),
          matchMode?: string(name='MatchMode', example='UserGroupNormal'),
          name?: string(name='Name', example='registration_policy_name'),
          policyId?: string(name='PolicyId', example='reg-policy-dcbfd33cb004****'),
          priority?: long(name='Priority', example='1'),
          status?: string(name='Status', example='Enabled'),
          whitelist?: [ string ](name='Whitelist'),
        }
      ](name='Policies'),
      userGroupId?: string(name='UserGroupId', example='usergroup-6f1ef2fc56b6****'),
    }
  ](name='UserGroups'),
}

model ListRegistrationPoliciesForUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRegistrationPoliciesForUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRegistrationPoliciesForUserGroup  ListRegistrationPoliciesForUserGroupRequest
  * @return ListRegistrationPoliciesForUserGroupResponse
 */
async function listRegistrationPoliciesForUserGroup(request: ListRegistrationPoliciesForUserGroupRequest): ListRegistrationPoliciesForUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRegistrationPoliciesForUserGroup', 'GET', '/', 'json', false, 'json', request);
}

model ListSoftwareForUserDeviceRequest {
  currentPage: long(name='CurrentPage', description='This parameter is required.', example='1', position='Query'),
  deviceTag: string(name='DeviceTag', description='This parameter is required.', example='36efa42d-2c32-c4dc-e3fc-8541e33a****', position='Query'),
  pageSize: long(name='PageSize', description='This parameter is required.', example='10', position='Query'),
}

model ListSoftwareForUserDeviceResponseBody = {
  requestId?: string(name='RequestId', example='102350E7-1A20-58F5-9D63-ABEA820AE6E1'),
  software?: [ 
    {
      inc?: string(name='Inc', example='Alibaba (China) Network Technology Co.,Ltd.'),
      installTime?: string(name='InstallTime', example='2023-08-18 02:43:02'),
      name?: string(name='Name'),
      versions?: [ string ](name='Versions'),
    }
  ](name='Software'),
  totalNum?: long(name='TotalNum', example='1'),
}

model ListSoftwareForUserDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSoftwareForUserDeviceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSoftwareForUserDevice  ListSoftwareForUserDeviceRequest
  * @return ListSoftwareForUserDeviceResponse
 */
async function listSoftwareForUserDevice(request: ListSoftwareForUserDeviceRequest): ListSoftwareForUserDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSoftwareForUserDevice', 'GET', '/', 'json', false, 'json', request);
}

model ListTagsForPrivateAccessApplicationRequest {
  applicationIds: [ string ](name='ApplicationIds', description='This parameter is required.', position='Query'),
}

model ListTagsForPrivateAccessApplicationResponseBody = {
  applications?: [ 
    {
      applicationId?: string(name='ApplicationId', example='pa-application-7a4445897856****'),
      tags?: [ 
        {
          createTime?: string(name='CreateTime', example='2022-07-01 16:05:26'),
          description?: string(name='Description'),
          name?: string(name='Name', example='tag_name'),
          tagId?: string(name='TagId', example='tag-c0cb77857a99****'),
          tagType?: string(name='TagType', example='Default'),
        }
      ](name='Tags'),
    }
  ](name='Applications'),
  requestId?: string(name='RequestId', example='7241F45B-E8D3-5BA3-8172-8A58AC2AB0FC'),
}

model ListTagsForPrivateAccessApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagsForPrivateAccessApplicationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTagsForPrivateAccessApplication  ListTagsForPrivateAccessApplicationRequest
  * @return ListTagsForPrivateAccessApplicationResponse
 */
async function listTagsForPrivateAccessApplication(request: ListTagsForPrivateAccessApplicationRequest): ListTagsForPrivateAccessApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagsForPrivateAccessApplication', 'GET', '/', 'json', false, 'json', request);
}

model ListTagsForPrivateAccessPolicyRequest {
  policyIds: [ string ](name='PolicyIds', description='This parameter is required.', position='Query'),
}

model ListTagsForPrivateAccessPolicyResponseBody = {
  polices?: [ 
    {
      policyId?: string(name='PolicyId', example='pa-policy-1b0d0e8b4bcf****'),
      tags?: [ 
        {
          createTime?: string(name='CreateTime', description='内网访问标签创建时间。', example='2023-02-21 14:10:16'),
          description?: string(name='Description'),
          name?: string(name='Name', example='tag_name'),
          tagId?: string(name='TagId', example='tag-d3f64e8bdd4a****'),
          tagType?: string(name='TagType', example='Default'),
        }
      ](name='Tags'),
    }
  ](name='Polices'),
  requestId?: string(name='RequestId', example='9EE61139-A6A8-5E13-80AF-83435C21B26B'),
}

model ListTagsForPrivateAccessPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagsForPrivateAccessPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTagsForPrivateAccessPolicy  ListTagsForPrivateAccessPolicyRequest
  * @return ListTagsForPrivateAccessPolicyResponse
 */
async function listTagsForPrivateAccessPolicy(request: ListTagsForPrivateAccessPolicyRequest): ListTagsForPrivateAccessPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagsForPrivateAccessPolicy', 'GET', '/', 'json', false, 'json', request);
}

model ListUninstallApplicationsRequest {
  applicationIds?: [ string ](name='ApplicationIds', position='Query'),
  currentPage: long(name='CurrentPage', description='This parameter is required.', example='1', position='Query'),
  department?: string(name='Department', position='Query'),
  hostname?: string(name='Hostname', example='win10-64bit', position='Query'),
  mac?: string(name='Mac', example='00:16:XX:XX:7c:46', position='Query'),
  pageSize: long(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  statuses?: [ string ](name='Statuses', position='Query'),
  username?: string(name='Username', position='Query'),
}

model ListUninstallApplicationsResponseBody = {
  applications?: [ 
    {
      applicationId?: string(name='ApplicationId', example='uninstall-app-6646831ac314****'),
      createTime?: string(name='CreateTime', example='2023-07-17 18:46:55'),
      department?: string(name='Department'),
      devTag?: string(name='DevTag', example='36efa42d-2c32-c4dc-e3fc-8541e33a****'),
      devType?: string(name='DevType', example='Windows'),
      hostname?: string(name='Hostname', example='win10-64bit'),
      idpName?: string(name='IdpName'),
      isUninstall?: boolean(name='IsUninstall', example='false'),
      mac?: string(name='Mac', example='00:16:XX:XX:7c:46'),
      reason?: string(name='Reason'),
      saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
      status?: string(name='Status', example='Approved'),
      username?: string(name='Username'),
    }
  ](name='Applications'),
  requestId?: string(name='RequestId', example='58D6B23E-E5DA-5418-8F61-51A3B5A30049'),
  totalNum?: long(name='TotalNum', example='1'),
}

model ListUninstallApplicationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUninstallApplicationsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUninstallApplications  ListUninstallApplicationsRequest
  * @return ListUninstallApplicationsResponse
 */
async function listUninstallApplications(request: ListUninstallApplicationsRequest): ListUninstallApplicationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUninstallApplications', 'GET', '/', 'json', false, 'json', request);
}

model ListUserApplicationsRequest {
  currentPage: int32(name='CurrentPage', description='This parameter is required.', example='1', position='Query'),
  name?: string(name='Name', example='private_access_application_name', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  saseUserId: string(name='SaseUserId', description='This parameter is required.', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****', position='Query'),
}

model ListUserApplicationsResponseBody = {
  applications?: [ 
    {
      action?: string(name='Action', example='Block'),
      addresses?: [ string ](name='Addresses'),
      applicationId?: string(name='ApplicationId', example='pa-application-b927baf3e592****'),
      name?: string(name='Name', example='private_access_application_name'),
      portRanges?: [ 
        {
          begin?: string(name='Begin', example='80'),
          end?: string(name='End', example='81'),
        }
      ](name='PortRanges'),
      protocol?: string(name='Protocol', example='TCP'),
    }
  ](name='Applications'),
  requestId?: string(name='RequestId', description='Id of the request', example='58D6B23E-E5DA-5418-8F61-51A3B5A30049'),
  totalNum?: int32(name='TotalNum', example='20'),
}

model ListUserApplicationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserApplicationsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserApplications  ListUserApplicationsRequest
  * @return ListUserApplicationsResponse
 */
async function listUserApplications(request: ListUserApplicationsRequest): ListUserApplicationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserApplications', 'GET', '/', 'json', false, 'json', request);
}

model ListUserDevicesRequest {
  appStatuses?: [ string ](name='AppStatuses', position='Query'),
  appVersions?: [ string ](name='AppVersions', position='Query'),
  autoLoginStatuses?: [ string ](name='AutoLoginStatuses', position='Query'),
  currentPage: long(name='CurrentPage', description='This parameter is required.', example='1', position='Query'),
  department?: string(name='Department', position='Query'),
  deviceBelong?: string(name='DeviceBelong', example='Company', position='Query'),
  deviceGroupId?: string(name='DeviceGroupId', position='Query'),
  deviceStatuses?: [ string ](name='DeviceStatuses', position='Query'),
  deviceTags?: [ string ](name='DeviceTags', position='Query'),
  deviceTypes?: [ string ](name='DeviceTypes', position='Query'),
  dlpStatuses?: [ string ](name='DlpStatuses', position='Query'),
  hostname?: string(name='Hostname', example='win10-64bit', position='Query'),
  iaStatuses?: [ string ](name='IaStatuses', position='Query'),
  innerIp?: string(name='InnerIp', position='Query'),
  mac?: string(name='Mac', example='00:16:XX:XX:7c:46', position='Query'),
  nacStatuses?: [ string ](name='NacStatuses', position='Query'),
  paStatuses?: [ string ](name='PaStatuses', position='Query'),
  pageSize: long(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****', position='Query'),
  sharingStatus?: boolean(name='SharingStatus', example='true', position='Query'),
  snSystem?: string(name='SnSystem', position='Query'),
  sortBy?: string(name='SortBy', position='Query'),
  username?: string(name='Username', position='Query'),
  workshop?: string(name='Workshop', position='Query'),
}

model ListUserDevicesResponseBody = {
  devices?: [ 
    {
      appStatus?: string(name='AppStatus', example='Online'),
      appVersion?: string(name='AppVersion', example='2.2.0'),
      autoLoginStatus?: string(name='AutoLoginStatus'),
      CPU?: string(name='CPU', example='Apple M1'),
      createTime?: string(name='CreateTime', example='2023-07-17 18:46:55'),
      department?: string(name='Department'),
      deviceBelong?: string(name='DeviceBelong', example='Company'),
      deviceModel?: string(name='DeviceModel', example='MacBookPro17,1'),
      deviceStatus?: string(name='DeviceStatus', example='Online'),
      deviceTag?: string(name='DeviceTag', example='36efa42d-2c32-c4dc-e3fc-8541e33a****'),
      deviceType?: string(name='DeviceType', example='Windows'),
      deviceVersion?: string(name='DeviceVersion', example='3.5.1'),
      disk?: string(name='Disk', example='APPLE SSD AP0512Q Media'),
      dlpStatus?: string(name='DlpStatus', example='Enabled'),
      edrStatus?: string(name='EdrStatus'),
      hostname?: string(name='Hostname', example='win10-64bit'),
      iaStatus?: string(name='IaStatus', example='Enabled'),
      innerIP?: string(name='InnerIP', example='192.168.XX.XX'),
      mac?: string(name='Mac', example='00:16:XX:XX:7c:46'),
      matchDeviceGroupIds?: [ string ](name='MatchDeviceGroupIds'),
      memory?: string(name='Memory', example='16'),
      nacStatus?: string(name='NacStatus', example='Enabled'),
      netInterfaceInfo?: [ 
        {
          mac?: string(name='Mac'),
          name?: string(name='Name'),
        }
      ](name='NetInterfaceInfo'),
      paStatus?: string(name='PaStatus', example='Enabled'),
      saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
      sharingStatus?: boolean(name='SharingStatus', example='true'),
      snBaseBoard?: string(name='SnBaseBoard'),
      snBios?: string(name='SnBios'),
      snDiskDrive?: string(name='SnDiskDrive'),
      snProcessor?: string(name='SnProcessor'),
      snSystem?: string(name='SnSystem'),
      srcIP?: string(name='SrcIP', example='11.49.XX.XX'),
      updateTime?: string(name='UpdateTime', example='2023-08-24 19:04:42'),
      username?: string(name='Username'),
      workshop?: string(name='Workshop'),
    }
  ](name='Devices'),
  requestId?: string(name='RequestId', example='5FEF5CFA-14CC-5DE5-BD1F-AFFE0996E71D'),
  totalNum?: long(name='TotalNum', example='1'),
}

model ListUserDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserDevicesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserDevices  ListUserDevicesRequest
  * @return ListUserDevicesResponse
 */
async function listUserDevices(request: ListUserDevicesRequest): ListUserDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserDevices', 'GET', '/', 'json', false, 'json', request);
}

model ListUserGroupsRequest {
  attributeValue?: string(name='AttributeValue', example='username', position='Query'),
  currentPage: int32(name='CurrentPage', description='This parameter is required.', example='1', minimum=1, maximum=10000, position='Query'),
  name?: string(name='Name', description='用户组名称。长度为1~128个字符，支持中文和大小写英文字母，可包含数字、半角句号（.）、下划线（_）和短划线（-）。', example='user_group_name', position='Query'),
  PAPolicyId?: string(name='PAPolicyId', example='pa-policy-54a7838a48bf****', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', minimum=1, maximum=1000, position='Query'),
  userGroupIds?: [ string ](name='UserGroupIds', position='Query'),
}

model ListUserGroupsResponseBody = {
  requestId?: string(name='RequestId', example='4AB972E2-D702-5464-B132-B1911498B8BF'),
  totalNum?: int32(name='TotalNum', example='1'),
  userGroups?: [ 
    {
      attributes?: [ 
        {
          idpId?: int32(name='IdpId', example='12'),
          relation?: string(name='Relation', example='Equal'),
          userGroupType?: string(name='UserGroupType', example='department'),
          value?: string(name='Value'),
        }
      ](name='Attributes'),
      createTime?: string(name='CreateTime', example='2022-10-10 11:39:22'),
      description?: string(name='Description'),
      name?: string(name='Name', example='user_group_name'),
      userGroupId?: string(name='UserGroupId', example='usergroup-6f1ef2fc56b6****'),
    }
  ](name='UserGroups'),
}

model ListUserGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserGroups  ListUserGroupsRequest
  * @return ListUserGroupsResponse
 */
async function listUserGroups(request: ListUserGroupsRequest): ListUserGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserGroups', 'GET', '/', 'json', false, 'json', request);
}

model ListUserGroupsForPrivateAccessPolicyRequest {
  policyIds: [ string ](name='PolicyIds', description='This parameter is required.', position='Query'),
}

model ListUserGroupsForPrivateAccessPolicyResponseBody = {
  polices?: [ 
    {
      policyId?: string(name='PolicyId', example='pa-policy-1b0d0e8b4bcf****'),
      userGroups?: [ 
        {
          attributes?: [ 
            {
              idpId?: int32(name='IdpId', example='12'),
              relation?: string(name='Relation', example='Equal'),
              userGroupType?: string(name='UserGroupType', example='department'),
              value?: string(name='Value'),
            }
          ](name='Attributes'),
          createTime?: string(name='CreateTime', description='用户组创建时间。', example='2022-09-27 18:10:25'),
          description?: string(name='Description'),
          name?: string(name='Name', example='user_group_name'),
          userGroupId?: string(name='UserGroupId', example='usergroup-6f1ef2fc56b6****'),
        }
      ](name='UserGroups'),
    }
  ](name='Polices'),
  requestId?: string(name='RequestId', example='58D6B23E-E5DA-5418-8F61-51A3B5A30049'),
}

model ListUserGroupsForPrivateAccessPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserGroupsForPrivateAccessPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserGroupsForPrivateAccessPolicy  ListUserGroupsForPrivateAccessPolicyRequest
  * @return ListUserGroupsForPrivateAccessPolicyResponse
 */
async function listUserGroupsForPrivateAccessPolicy(request: ListUserGroupsForPrivateAccessPolicyRequest): ListUserGroupsForPrivateAccessPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserGroupsForPrivateAccessPolicy', 'GET', '/', 'json', false, 'json', request);
}

model ListUserGroupsForRegistrationPolicyRequest {
  policyIds: [ string ](name='PolicyIds', description='This parameter is required.', position='Query'),
}

model ListUserGroupsForRegistrationPolicyResponseBody = {
  policies?: [ 
    {
      policyId?: string(name='PolicyId', example='reg-policy-f25c9e5872e5****'),
      userGroups?: [ 
        {
          attributes?: [ 
            {
              idpId?: int32(name='IdpId', example='12'),
              relation?: string(name='Relation', example='Equal'),
              userGroupType?: string(name='UserGroupType', example='department'),
              value?: string(name='Value'),
            }
          ](name='Attributes'),
          createTime?: string(name='CreateTime', example='2022-09-27 18:10:25'),
          description?: string(name='Description'),
          name?: string(name='Name', example='user_group_name'),
          userGroupId?: string(name='UserGroupId', example='usergroup-6f1ef2fc56b6****'),
        }
      ](name='UserGroups'),
    }
  ](name='Policies'),
  requestId?: string(name='RequestId', example='D89009C7-54C6-51B6-BAE7-3F373920C6BF'),
}

model ListUserGroupsForRegistrationPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserGroupsForRegistrationPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserGroupsForRegistrationPolicy  ListUserGroupsForRegistrationPolicyRequest
  * @return ListUserGroupsForRegistrationPolicyResponse
 */
async function listUserGroupsForRegistrationPolicy(request: ListUserGroupsForRegistrationPolicyRequest): ListUserGroupsForRegistrationPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserGroupsForRegistrationPolicy', 'GET', '/', 'json', false, 'json', request);
}

model ListUserPrivateAccessPoliciesRequest {
  currentPage: int32(name='CurrentPage', description='Current page number.

This parameter is required.', example='1', minimum=1, position='Query'),
  name?: string(name='Name', description='Intranet access policy name. Length should be between 1 to 128 characters, supporting Chinese and case-sensitive English letters, and can include numbers, periods (.), underscores (_), and hyphens (-).', example='private_access_policy_name', position='Query'),
  pageSize: int32(name='PageSize', description='Number of items per page for pagination. Range: 1~100.

This parameter is required.', example='10', minimum=1, maximum=100, position='Query'),
  saseUserId: string(name='SaseUserId', description='User ID.

This parameter is required.', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****', position='Query'),
}

model ListUserPrivateAccessPoliciesResponseBody = {
  polices?: [ 
    {
      customUserAttributes?: [ 
        {
          idpId?: int32(name='IdpId', description='The identity provider ID of the user group. This value exists when the custom user group type is **department**.', example='12'),
          relation?: string(name='Relation', description='Relation of the user group. Values:
- **Equal**: Equal.
- **Unequal**: Not equal.', example='Equal'),
          userGroupType?: string(name='UserGroupType', description='Type of the user group. Values:
- **username**: Username.
- **department**: Department.
- **email**: Email.
- **telephone**: Telephone.', example='department'),
          value?: string(name='Value', description='The value of the user group attribute.
- When the user group type is **username**, it represents the value of the username. The length is 1 to 128 characters, supporting Chinese and case-sensitive English letters, and can include numbers, periods (.), underscores (_), and hyphens (-).
- When the user group type is **department**, it represents the value of the department. For example: OU=Department1,OU=SASE DingTalk.
- When the user group type is **email**, it represents the value of the email. For example: username@example.com.
- When the user group type is **telephone**, it represents the value of the phone number. For example: 13900001234.', example='OU=部门1,OU=SASE钉钉'),
        }
      ](name='CustomUserAttributes', description='Set of custom user group attributes. Multiple custom user group attributes are in an OR relationship, effective as a union.'),
      deviceAttributeName?: string(name='DeviceAttributeName', description='Associated security baseline.', example='device_attribute_name'),
      matchedUserGroup?: string(name='MatchedUserGroup', description='Associated user group.', example='user_group_name'),
      name?: string(name='Name', description='Intranet access policy name.', example='private_access_policy_name'),
      policyAction?: string(name='PolicyAction', description='Action of the intranet access policy. Values:
- **Block**: Block.
- **Allow**: Allow.', example='Allow'),
      policyId?: string(name='PolicyId', description='Intranet access policy ID.', example='pa-policy-1b0d0e8b4bcf****'),
      priority?: long(name='Priority', description='Priority of the intranet access policy. The number 1 indicates the highest priority.', example='1'),
      trustedProcessGroupIds?: [ string ](name='TrustedProcessGroupIds', description='List of trusted process group IDs.'),
      trustedSoftwareIds?: [ string ](name='TrustedSoftwareIds', description='List of trusted software IDs.'),
      userGroupMode?: string(name='UserGroupMode', description='Type of the user group for the intranet access policy. Values:
- **Normal**: Normal user group.
- **Custom**: Custom user group.', example='Custom'),
    }
  ](name='Polices', description='List of authorized policies.'),
  requestId?: string(name='RequestId', description='ID of the request.', example='9D852F87-AFB5-51B8-AACD-F7D0EFB8277D'),
  totalNum?: int32(name='TotalNum', description='Total number of authorized policies.', example='20'),
}

model ListUserPrivateAccessPoliciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserPrivateAccessPoliciesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserPrivateAccessPolicies  ListUserPrivateAccessPoliciesRequest
  * @return ListUserPrivateAccessPoliciesResponse
 */
async function listUserPrivateAccessPolicies(request: ListUserPrivateAccessPoliciesRequest): ListUserPrivateAccessPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserPrivateAccessPolicies', 'GET', '/', 'json', false, 'json', request);
}

model ListUsersRequest {
  currentPage: long(name='CurrentPage', description='This parameter is required.', example='1', position='Query'),
  department?: string(name='Department', position='Query'),
  fuzzyUsername?: string(name='FuzzyUsername', position='Query'),
  pageSize: long(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  preciseUsername?: string(name='PreciseUsername', position='Query'),
  saseUserIds?: [ string ](name='SaseUserIds', position='Query'),
  status?: string(name='Status', example='Enabled', position='Query'),
}

model ListUsersResponseBody = {
  requestId?: string(name='RequestId', example='5FEF5CFA-14CC-5DE5-BD1F-AFFE0996E71D'),
  totalNum?: string(name='TotalNum', example='1'),
  users?: [ 
    {
      department?: string(name='Department'),
      email?: string(name='Email', example='a***@example.net'),
      idpName?: string(name='IdpName'),
      phone?: string(name='Phone', example='1381111****'),
      saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
      status?: string(name='Status', example='Enabled'),
      username?: string(name='Username'),
    }
  ](name='Users'),
}

model ListUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUsers  ListUsersRequest
  * @return ListUsersResponse
 */
async function listUsers(request: ListUsersRequest): ListUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsers', 'GET', '/', 'json', false, 'json', request);
}

model LookupWmInfoMappingRequest {
  wmInfoSize?: long(name='WmInfoSize', example='32', minimum=32, maximum=64, position='Query'),
  wmInfoUint: string(name='WmInfoUint', description='This parameter is required.', example='123***', position='Query'),
  wmType: string(name='WmType', description='This parameter is required.', example='PureDocument', position='Query'),
}

model LookupWmInfoMappingResponseBody = {
  data?: {
    wmInfoBytesB64?: string(name='WmInfoBytesB64', example='aGVsbG8gc2F*****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='7E9D7ACD-53D5-56EF-A913-79D148D06299'),
}

model LookupWmInfoMappingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LookupWmInfoMappingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of LookupWmInfoMapping  LookupWmInfoMappingRequest
  * @return LookupWmInfoMappingResponse
 */
async function lookupWmInfoMapping(request: LookupWmInfoMappingRequest): LookupWmInfoMappingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LookupWmInfoMapping', 'GET', '/', 'json', false, 'json', request);
}

model ModifyEnterpriseAcceleratePolicyRequest {
  accelerationType?: string(name='AccelerationType', example='whiltelist', position='Body'),
  description?: string(name='Description', position='Body'),
  eapId?: string(name='EapId', example='eap-ce153a7165c8feea', position='Body'),
  name?: string(name='Name', position='Body'),
  onTls?: int32(name='OnTls', example='0', position='Body'),
  priority?: int32(name='Priority', example='999', minimum=0, maximum=99, position='Body'),
  showInClient?: int32(name='ShowInClient', example='0', position='Body'),
  upstreamHost: string(name='UpstreamHost', description='This parameter is required.', example='12.34.56.XX', position='Body'),
  upstreamPort: int32(name='UpstreamPort', description='This parameter is required.', example='1000', position='Body'),
  upstreamType: string(name='UpstreamType', description='This parameter is required.', example='ga', position='Body'),
  userAttributeGroup: string(name='UserAttributeGroup', description='This parameter is required.', position='Body'),
}

model ModifyEnterpriseAcceleratePolicyResponseBody = {
  requestId?: string(name='RequestId', example='2CABFEBB-0CE7-575E-833A-266F75D46713'),
}

model ModifyEnterpriseAcceleratePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyEnterpriseAcceleratePolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyEnterpriseAcceleratePolicy  ModifyEnterpriseAcceleratePolicyRequest
  * @return ModifyEnterpriseAcceleratePolicyResponse
 */
async function modifyEnterpriseAcceleratePolicy(request: ModifyEnterpriseAcceleratePolicyRequest): ModifyEnterpriseAcceleratePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyEnterpriseAcceleratePolicy', 'POST', '/', 'json', true, 'form', request);
}

model RevokeUserSessionRequest {
  externalIds: string(name='ExternalIds', description='This parameter is required.', example='12345678', position='Query'),
  idpId: string(name='IdpId', description='This parameter is required.', example='idp-cfg9vcrqylo39c39uxnw', position='Query'),
}

model RevokeUserSessionResponseBody = {
  requestId?: string(name='RequestId', example='D6707286-A50E-57B1-B2CF-EFAC59E850D8'),
}

model RevokeUserSessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeUserSessionResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI RevokeUserSession is deprecated  * @param request  the request parameters of RevokeUserSession  RevokeUserSessionRequest
  * @return RevokeUserSessionResponse
 */
// Deprecated
async function revokeUserSession(request: RevokeUserSessionRequest): RevokeUserSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeUserSession', 'POST', '/', 'json', false, 'json', request);
}

model UpdateApprovalProcessRequest {
  approvalType?: int32(name='ApprovalType', position='Query'),
  description?: string(name='Description', position='Body'),
  eventLabel?: string(name='EventLabel', position='Query'),
  externalConfig?: string(name='ExternalConfig', position='Query'),
  matchSchemaConfigs?: {
    appUninstallSchemaConfig?: {
      externalProcessId?: string(name='ExternalProcessId'),
      fieldMap?: [ 
        {
          displayField?: string(name='DisplayField'),
          displayFieldValue?: string(name='DisplayFieldValue'),
          systemField?: string(name='SystemField'),
        }
      ](name='FieldMap'),
      schemaId?: string(name='SchemaId'),
    }(name='AppUninstallSchemaConfig'),
    deviceRegistrationSchemaConfig?: {
      externalProcessId?: string(name='ExternalProcessId'),
      fieldMap?: [ 
        {
          displayField?: string(name='DisplayField'),
          displayFieldValue?: string(name='DisplayFieldValue'),
          systemField?: string(name='SystemField'),
        }
      ](name='FieldMap'),
      schemaId?: string(name='SchemaId'),
    }(name='DeviceRegistrationSchemaConfig'),
    dlpSendSchemaConfig?: {
      externalProcessId?: string(name='ExternalProcessId'),
      fieldMap?: [ 
        {
          displayField?: string(name='DisplayField'),
          displayFieldValue?: string(name='DisplayFieldValue'),
          systemField?: string(name='SystemField'),
        }
      ](name='FieldMap'),
      schemaId?: string(name='SchemaId'),
    }(name='DlpSendSchemaConfig'),
    domainBlacklistSchemaConfig?: {
      externalProcessId?: string(name='ExternalProcessId'),
      fieldMap?: [ 
        {
          displayField?: string(name='DisplayField'),
          displayFieldValue?: string(name='DisplayFieldValue'),
          systemField?: string(name='SystemField'),
        }
      ](name='FieldMap'),
      schemaId?: string(name='SchemaId'),
    }(name='DomainBlacklistSchemaConfig'),
    domainWhitelistSchemaConfig?: {
      externalProcessId?: string(name='ExternalProcessId'),
      fieldMap?: [ 
        {
          displayField?: string(name='DisplayField'),
          displayFieldValue?: string(name='DisplayFieldValue'),
          systemField?: string(name='SystemField'),
        }
      ](name='FieldMap'),
      schemaId?: string(name='SchemaId'),
    }(name='DomainWhitelistSchemaConfig'),
    endpointHardeningSchemaConfig?: {
      externalProcessId?: string(name='ExternalProcessId'),
      fieldMap?: [ 
        {
          displayField?: string(name='DisplayField'),
          displayFieldValue?: string(name='DisplayFieldValue'),
          systemField?: string(name='SystemField'),
        }
      ](name='FieldMap'),
      schemaId?: string(name='SchemaId'),
    }(name='EndpointHardeningSchemaConfig'),
    peripheralBlockSchemaConfig?: {
      externalProcessId?: string(name='ExternalProcessId'),
      fieldMap?: [ 
        {
          displayField?: string(name='DisplayField'),
          displayFieldValue?: string(name='DisplayFieldValue'),
          systemField?: string(name='SystemField'),
        }
      ](name='FieldMap'),
      schemaId?: string(name='SchemaId'),
    }(name='PeripheralBlockSchemaConfig'),
    softwareBlockSchemaConfig?: {
      externalProcessId?: string(name='ExternalProcessId'),
      fieldMap?: [ 
        {
          displayField?: string(name='DisplayField'),
          displayFieldValue?: string(name='DisplayFieldValue'),
          systemField?: string(name='SystemField'),
        }
      ](name='FieldMap'),
      schemaId?: string(name='SchemaId'),
    }(name='SoftwareBlockSchemaConfig'),
    softwareHardeningSchemaConfig?: {
      externalProcessId?: string(name='ExternalProcessId'),
      fieldMap?: [ 
        {
          displayField?: string(name='DisplayField'),
          displayFieldValue?: string(name='DisplayFieldValue'),
          systemField?: string(name='SystemField'),
        }
      ](name='FieldMap'),
      schemaId?: string(name='SchemaId'),
    }(name='SoftwareHardeningSchemaConfig'),
  }(name='MatchSchemaConfigs', shrink='json', position='Query'),
  matchSchemas?: {
    appUninstallSchemaId?: string(name='AppUninstallSchemaId', example='approval-schema-090134f1ebff****'),
    deviceRegistrationSchemaId?: string(name='DeviceRegistrationSchemaId', example='approval-schema-090134f1ebff****'),
    dlpSendSchemaId?: string(name='DlpSendSchemaId', example='approval-schema-090134f1ebff****'),
    domainBlacklistSchemaId?: string(name='DomainBlacklistSchemaId', example='approval-schema-090134f1ebff****'),
    domainWhitelistSchemaId?: string(name='DomainWhitelistSchemaId', example='approval-schema-090134f1ebff****'),
    endpointHardeningSchemaId?: string(name='EndpointHardeningSchemaId'),
    peripheralBlockSchemaId?: string(name='PeripheralBlockSchemaId', example='approval-schema-090134f1ebff****'),
    softwareBlockSchemaId?: string(name='SoftwareBlockSchemaId', example='approval-schema-090134f1ebff****'),
    softwareHardeningSchemaId?: string(name='SoftwareHardeningSchemaId'),
  }(name='MatchSchemas', shrink='json', position='Body'),
  processId: string(name='ProcessId', description='This parameter is required.', example='approval-process-f16bf74b2b29****', position='Body'),
  processName?: string(name='ProcessName', position='Body'),
  processNodes?: [[ string ]  ](name='ProcessNodes', position='Body'),
}

model UpdateApprovalProcessResponseBody = {
  process?: {
    appUninstallPolicies?: {
      externalProcessId?: string(name='ExternalProcessId'),
      fieldMap?: [ 
        {
          displayField?: string(name='DisplayField'),
          displayFieldValue?: string(name='DisplayFieldValue'),
          systemField?: string(name='SystemField'),
        }
      ](name='FieldMap'),
      policyIds?: [ string ](name='PolicyIds'),
      schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
    }(name='AppUninstallPolicies'),
    approvalType?: int32(name='ApprovalType'),
    createTime?: string(name='CreateTime', example='2022-07-11 15:31:39'),
    description?: string(name='Description'),
    deviceRegistrationPolicies?: {
      externalProcessId?: string(name='ExternalProcessId'),
      fieldMap?: [ 
        {
          displayField?: string(name='DisplayField'),
          displayFieldValue?: string(name='DisplayFieldValue'),
          systemField?: string(name='SystemField'),
        }
      ](name='FieldMap'),
      policyIds?: [ string ](name='PolicyIds'),
      schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
    }(name='DeviceRegistrationPolicies'),
    dlpSendPolicies?: {
      externalProcessId?: string(name='ExternalProcessId'),
      fieldMap?: [ 
        {
          displayField?: string(name='DisplayField'),
          displayFieldValue?: string(name='DisplayFieldValue'),
          systemField?: string(name='SystemField'),
        }
      ](name='FieldMap'),
      policyIds?: [ string ](name='PolicyIds'),
      schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
    }(name='DlpSendPolicies'),
    domainBlacklistPolicies?: {
      externalProcessId?: string(name='ExternalProcessId'),
      fieldMap?: [ 
        {
          displayField?: string(name='DisplayField'),
          displayFieldValue?: string(name='DisplayFieldValue'),
          systemField?: string(name='SystemField'),
        }
      ](name='FieldMap'),
      policyIds?: [ string ](name='PolicyIds'),
      schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
    }(name='DomainBlacklistPolicies'),
    domainWhitelistPolicies?: {
      externalProcessId?: string(name='ExternalProcessId'),
      fieldMap?: [ 
        {
          displayField?: string(name='DisplayField'),
          displayFieldValue?: string(name='DisplayFieldValue'),
          systemField?: string(name='SystemField'),
        }
      ](name='FieldMap'),
      policyIds?: [ string ](name='PolicyIds'),
      schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
    }(name='DomainWhitelistPolicies'),
    endpointHardeningPolicies?: {
      externalProcessId?: string(name='ExternalProcessId'),
      fieldMap?: [ 
        {
          displayField?: string(name='DisplayField'),
          displayFieldValue?: string(name='DisplayFieldValue'),
          systemField?: string(name='SystemField'),
        }
      ](name='FieldMap'),
      policyIds?: [ string ](name='PolicyIds'),
      schemaId?: string(name='SchemaId'),
    }(name='EndpointHardeningPolicies'),
    eventLabel?: string(name='EventLabel'),
    externalConfig?: string(name='ExternalConfig'),
    peripheraBlockPolicies?: {
      externalProcessId?: string(name='ExternalProcessId'),
      fieldMap?: [ 
        {
          displayField?: string(name='DisplayField'),
          displayFieldValue?: string(name='DisplayFieldValue'),
          systemField?: string(name='SystemField'),
        }
      ](name='FieldMap'),
      policyIds?: [ string ](name='PolicyIds'),
      schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
    }(name='PeripheraBlockPolicies'),
    processId?: string(name='ProcessId', example='approval-process-2677fcf063f5****'),
    processName?: string(name='ProcessName'),
    processNodes?: [[ 
      {
        saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
        username?: string(name='Username'),
      }
    ]    ](name='ProcessNodes'),
    softwareBlockPolicies?: {
      externalProcessId?: string(name='ExternalProcessId'),
      fieldMap?: [ 
        {
          displayField?: string(name='DisplayField'),
          displayFieldValue?: string(name='DisplayFieldValue'),
          systemField?: string(name='SystemField'),
        }
      ](name='FieldMap'),
      policyIds?: [ string ](name='PolicyIds'),
      schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
    }(name='SoftwareBlockPolicies'),
    softwareHardeningPolicies?: {
      externalProcessId?: string(name='ExternalProcessId'),
      fieldMap?: [ 
        {
          displayField?: string(name='DisplayField'),
          displayFieldValue?: string(name='DisplayFieldValue'),
          systemField?: string(name='SystemField'),
        }
      ](name='FieldMap'),
      policyIds?: [ string ](name='PolicyIds'),
      schemaId?: string(name='SchemaId'),
    }(name='SoftwareHardeningPolicies'),
  }(name='Process'),
  requestId?: string(name='RequestId', example='7E9D7ACD-53D5-56EF-A913-79D148D06299'),
}

model UpdateApprovalProcessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateApprovalProcessResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateApprovalProcess  UpdateApprovalProcessRequest
  * @return UpdateApprovalProcessResponse
 */
async function updateApprovalProcess(request: UpdateApprovalProcessRequest): UpdateApprovalProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateApprovalProcess', 'POST', '/', 'json', true, 'form', request);
}

model UpdateApprovalStatusRequest {
  approvalId: string(name='ApprovalId', description='This parameter is required.', example='approval-872b5e911b35****', position='Query'),
  status: string(name='Status', description='This parameter is required.', example='Approved', position='Query'),
}

model UpdateApprovalStatusResponseBody = {
  approval?: [ 
    {
      approvalDetail?: string(name='ApprovalDetail'),
      approvalId?: string(name='ApprovalId', example='approval-165e6738ad9d****'),
      approvalProgresses?: [ 
        {
          action?: string(name='Action', example='Approve'),
          comment?: string(name='Comment'),
          executor?: string(name='Executor', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
          operators?: [ 
            {
              saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
              username?: string(name='Username'),
            }
          ](name='Operators'),
          status?: string(name='Status', example='Approved'),
          timestamp?: long(name='Timestamp', example='1736752000'),
        }
      ](name='ApprovalProgresses'),
      createTime?: string(name='CreateTime', example='2022-11-15 22:11:55'),
      creatorDevTag?: string(name='CreatorDevTag', example='36efa42d-2c32-c4dc-e3fc-8541e33a****'),
      creatorUserId?: string(name='CreatorUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
      endTimestamp?: long(name='EndTimestamp', example='1757952000'),
      policyType?: string(name='PolicyType', example='DlpSend'),
      processId?: string(name='ProcessId', example='approval-process-fcc351b8a95b****'),
      processName?: string(name='ProcessName'),
      reason?: string(name='Reason'),
      schemaContent?: string(name='SchemaContent', example='{"form": {"labelCol": 6,"wrapperCol": 12}}'),
      schemaId?: string(name='SchemaId', example='approval-schema-090134f1ebff****'),
      schemaName?: string(name='SchemaName'),
      status?: string(name='Status', example='Pending'),
    }
  ](name='Approval'),
  requestId?: string(name='RequestId', example='58D6B23E-E5DA-5418-8F61-51A3B5A30049'),
}

model UpdateApprovalStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateApprovalStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateApprovalStatus  UpdateApprovalStatusRequest
  * @return UpdateApprovalStatusResponse
 */
async function updateApprovalStatus(request: UpdateApprovalStatusRequest): UpdateApprovalStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateApprovalStatus', 'POST', '/', 'json', false, 'json', request);
}

model UpdateBootAndAntiUninstallPolicyRequest {
  allowReport?: boolean(name='AllowReport', example='true', position='Body'),
  blockContent?: {
    blockTextEn?: {
      content?: string(name='Content', example='After uninstalling, the device can no longer be used for company work, and it will lose access to the company\\"s intranet!'),
      mainButtonText?: string(name='MainButtonText', example='Report'),
      minorButtonText?: string(name='MinorButtonText', example='Ignore'),
      title?: string(name='Title', example='Anti-Uninstall Warning'),
    }(name='BlockTextEn'),
    blockTextZh?: {
      content?: string(name='Content'),
      mainButtonText?: string(name='MainButtonText'),
      minorButtonText?: string(name='MinorButtonText'),
      title?: string(name='Title'),
    }(name='BlockTextZh'),
  }(name='BlockContent', shrink='json', position='Body'),
  isAntiUninstall?: boolean(name='IsAntiUninstall', example='true', position='Body'),
  isBoot?: boolean(name='IsBoot', example='true', position='Body'),
  userGroupIds?: [ string ](name='UserGroupIds', position='Body'),
  whitelistUsers?: [ string ](name='WhitelistUsers', position='Body'),
}

model UpdateBootAndAntiUninstallPolicyResponseBody = {
  requestId?: string(name='RequestId', example='CB67D866-1E54-5106-89DF-6D70C73E5989'),
  strategy?: {
    allowReport?: boolean(name='AllowReport', example='true'),
    blockContent?: {
      blockTextEn?: {
        content?: string(name='Content', example='After uninstalling, the device can no longer be used for company work, and it will lose access to the company\\"s intranet!'),
        mainButtonText?: string(name='MainButtonText', example='Report'),
        minorButtonText?: string(name='MinorButtonText', example='Ignore'),
        title?: string(name='Title', example='Anti-Uninstall Warning'),
      }(name='BlockTextEn'),
      blockTextZh?: {
        content?: string(name='Content'),
        mainButtonText?: string(name='MainButtonText'),
        minorButtonText?: string(name='MinorButtonText'),
        title?: string(name='Title'),
      }(name='BlockTextZh'),
    }(name='BlockContent'),
    createTime?: string(name='CreateTime', example='2023-04-16 10:50:05'),
    isAntiUninstall?: boolean(name='IsAntiUninstall', example='true'),
    isBoot?: boolean(name='IsBoot', example='true'),
    policyId?: string(name='PolicyId', example='auto-boot-anti-uninstall-6f6cbf5f6605****'),
    reportProcessId?: string(name='ReportProcessId', example='approval-process-65c255598826****'),
    updateTime?: string(name='UpdateTime', example='2024-06-14 10:17:14'),
    userGroupIds?: [ string ](name='UserGroupIds'),
    whitelistUsers?: [ string ](name='WhitelistUsers'),
  }(name='Strategy'),
}

model UpdateBootAndAntiUninstallPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateBootAndAntiUninstallPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateBootAndAntiUninstallPolicy  UpdateBootAndAntiUninstallPolicyRequest
  * @return UpdateBootAndAntiUninstallPolicyResponse
 */
async function updateBootAndAntiUninstallPolicy(request: UpdateBootAndAntiUninstallPolicyRequest): UpdateBootAndAntiUninstallPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBootAndAntiUninstallPolicy', 'POST', '/', 'json', true, 'form', request);
}

model UpdateClientUserRequest {
  departmentId?: string(name='DepartmentId', example='10701', position='Query'),
  description?: string(name='Description', position='Query'),
  email?: string(name='Email', example='johndoe@example.com', position='Query'),
  id: string(name='Id', description='This parameter is required.', example='20644', position='Query'),
  mobileNumber?: string(name='MobileNumber', example='13641966835', position='Query'),
}

model UpdateClientUserResponseBody = {
  requestId?: string(name='RequestId', example='BE4FB974-11BC-5453-9BE1-1606A73EACA6'),
}

model UpdateClientUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateClientUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateClientUser  UpdateClientUserRequest
  * @return UpdateClientUserResponse
 */
async function updateClientUser(request: UpdateClientUserRequest): UpdateClientUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateClientUser', 'POST', '/', 'json', false, 'json', request);
}

model UpdateClientUserPasswordRequest {
  id?: string(name='Id', example='1128', position='Query'),
  password?: string(name='Password', example='kehudiyidj', position='Query'),
  username?: string(name='Username', position='Query'),
}

model UpdateClientUserPasswordResponseBody = {
  requestId?: string(name='RequestId', example='EFE7EBB2-449D-5BBB-B381-CA7839BC1649'),
}

model UpdateClientUserPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateClientUserPasswordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateClientUserPassword  UpdateClientUserPasswordRequest
  * @return UpdateClientUserPasswordResponse
 */
async function updateClientUserPassword(request: UpdateClientUserPasswordRequest): UpdateClientUserPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateClientUserPassword', 'POST', '/', 'json', false, 'json', request);
}

model UpdateClientUserStatusRequest {
  id: string(name='Id', description='This parameter is required.', example='1495', position='Query'),
  status: string(name='Status', description='This parameter is required.', example='Enabled', position='Query'),
}

model UpdateClientUserStatusResponseBody = {
  requestId?: string(name='RequestId', example='BE4FB974-11BC-5453-9BE1-1606A73EACA6'),
}

model UpdateClientUserStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateClientUserStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateClientUserStatus  UpdateClientUserStatusRequest
  * @return UpdateClientUserStatusResponse
 */
async function updateClientUserStatus(request: UpdateClientUserStatusRequest): UpdateClientUserStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateClientUserStatus', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDynamicRouteRequest {
  applicationIds?: [ string ](name='ApplicationIds', position='Body'),
  applicationType?: string(name='ApplicationType', example='Application', position='Body'),
  description?: string(name='Description', position='Body'),
  dynamicRouteId: string(name='DynamicRouteId', description='This parameter is required.', example='dr-ca9fddfac7c6****', position='Body'),
  dynamicRouteType?: string(name='DynamicRouteType', example='connector', position='Body'),
  modifyType?: string(name='ModifyType', example='Cover', position='Body'),
  name?: string(name='Name', example='dynamic_route_name', position='Body'),
  nextHop?: string(name='NextHop', example='connector-8ccb13b6f52c****', position='Body'),
  priority?: int32(name='Priority', example='99', position='Body'),
  regionIds?: [ string ](name='RegionIds', position='Body'),
  status?: string(name='Status', example='Disabled', position='Body'),
  tagIds?: [ string ](name='TagIds', position='Body'),
}

model UpdateDynamicRouteResponseBody = {
  requestId?: string(name='RequestId', example='BE4FB974-11BC-5453-9BE1-1606A73EACA6'),
}

model UpdateDynamicRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDynamicRouteResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDynamicRoute  UpdateDynamicRouteRequest
  * @return UpdateDynamicRouteResponse
 */
async function updateDynamicRoute(request: UpdateDynamicRouteRequest): UpdateDynamicRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDynamicRoute', 'POST', '/', 'json', true, 'form', request);
}

model UpdateExcessiveDeviceRegistrationApplicationsStatusRequest {
  applicationIds: [ string ](name='ApplicationIds', description='This parameter is required.', position='Body'),
  status: string(name='Status', description='This parameter is required.', example='Approved', position='Body'),
}

model UpdateExcessiveDeviceRegistrationApplicationsStatusResponseBody = {
  applications?: [ 
    {
      applicationId?: string(name='ApplicationId', example='reg-application-0f4a127b7e78****'),
      createTime?: string(name='CreateTime', example='2023-07-17 18:46:55'),
      department?: string(name='Department'),
      description?: string(name='Description'),
      deviceTag?: string(name='DeviceTag', example='36efa42d-2c32-c4dc-e3fc-8541e33a****'),
      deviceType?: string(name='DeviceType', example='Windows'),
      hostname?: string(name='Hostname', example='win10-64bit'),
      isUsed?: boolean(name='IsUsed', example='false'),
      mac?: string(name='Mac', example='00:16:XX:XX:7c:46'),
      saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
      status?: string(name='Status', example='Approved'),
      username?: string(name='Username'),
    }
  ](name='Applications'),
  requestId?: string(name='RequestId', example='102350E7-1A20-58F5-9D63-ABEA820AE6E1'),
}

model UpdateExcessiveDeviceRegistrationApplicationsStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateExcessiveDeviceRegistrationApplicationsStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateExcessiveDeviceRegistrationApplicationsStatus  UpdateExcessiveDeviceRegistrationApplicationsStatusRequest
  * @return UpdateExcessiveDeviceRegistrationApplicationsStatusResponse
 */
async function updateExcessiveDeviceRegistrationApplicationsStatus(request: UpdateExcessiveDeviceRegistrationApplicationsStatusRequest): UpdateExcessiveDeviceRegistrationApplicationsStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateExcessiveDeviceRegistrationApplicationsStatus', 'POST', '/', 'json', true, 'form', request);
}

model UpdateIdpDepartmentRequest {
  departmentId: string(name='DepartmentId', description='This parameter is required.', example='10653', position='Query'),
  departmentName: string(name='DepartmentName', description='This parameter is required.', position='Query'),
  idpConfigId: string(name='IdpConfigId', description='This parameter is required.', example='598', position='Query'),
}

model UpdateIdpDepartmentResponseBody = {
  requestId?: string(name='RequestId', example='4D169859-A4F2-5EC8-853B-8447787C0D8A'),
}

model UpdateIdpDepartmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateIdpDepartmentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateIdpDepartment  UpdateIdpDepartmentRequest
  * @return UpdateIdpDepartmentResponse
 */
async function updateIdpDepartment(request: UpdateIdpDepartmentRequest): UpdateIdpDepartmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateIdpDepartment', 'POST', '/', 'json', false, 'json', request);
}

model UpdateNacUserCertStatusRequest {
  idList?: [ 
    {
      devTag?: string(name='DevTag', example='36efa42d-2c32-c4dc-e3fc-8541e33a****'),
      userId?: string(name='UserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
    }
  ](name='IdList', position='Body'),
  status?: string(name='Status', example='Enabled', position='Body'),
}

model UpdateNacUserCertStatusResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='102350E7-1A20-58F5-9D63-ABEA820AE6E1'),
}

model UpdateNacUserCertStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateNacUserCertStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateNacUserCertStatus  UpdateNacUserCertStatusRequest
  * @return UpdateNacUserCertStatusResponse
 */
async function updateNacUserCertStatus(request: UpdateNacUserCertStatusRequest): UpdateNacUserCertStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateNacUserCertStatus', 'POST', '/', 'json', true, 'form', request);
}

model UpdatePrivateAccessApplicationRequest {
  addresses?: [ string ](name='Addresses', description='The addresses of the office applications. You can enter up to 1,000 addresses of office applications.', position='Body'),
  applicationId: string(name='ApplicationId', description='The ID of the office application. You can obtain the value by calling the following operations:

*   [ListPrivateAccessApplications](~~ListPrivateAccessApplications~~): queries office applications.
*   [CreatePrivateAccessApplication](~~CreatePrivateAccessApplication~~): creates an office application.

This parameter is required.', example='pa-application-e12860ef6c48****', position='Body'),
  description?: string(name='Description', description='The description of the office application. The value must be 1 to 128 characters in length and can contain letters, digits, periods (.), underscores (_), hyphens (-), and spaces.', position='Body'),
  l7Config?: PAL7Config(name='L7Config', description='The browser access mode parameter. The parameter specifies the configurations of Layer 7 applications.', shrink='json', position='Body'),
  l7ProxyDomainAutomaticPrefix?: string(name='L7ProxyDomainAutomaticPrefix', description='The browser access mode parameter. The parameter specifies the prefix of the domain name that the proxy gateway uses. The prefix must be 3 to 20 characters in length, and can contain lowercase letters, digits, and hyphens (-).', example='app1-xxx', position='Body'),
  l7ProxyDomainCustom?: string(name='L7ProxyDomainCustom', description='The browser access mode parameter. The parameter specifies the custom domain name of the proxy gateway.', example='app1.example.com', position='Body'),
  l7ProxyDomainPrivate?: string(name='L7ProxyDomainPrivate', description='浏览器访问模式参数：私有代理域名。', example='app1.example.com', deprecated='true', position='Body'),
  modifyType?: string(name='ModifyType', description='The modification type of the office application. Valid values:

*   **Cover**: uses the values of the **Addresses**, **PortRanges**, and **TagIds** parameters to overwrite the original addresses, port ranges, and tag IDs. This is the default value.
*   **Append**: adds the values of the **Addresses**, **PortRanges**, and **TagIds** parameters respectively to the original addresses, port ranges, and tag IDs.', example='Cover', position='Body'),
  portRanges?: [ 
    {
      begin?: int32(name='Begin', description='The start port. The start port must be less than or equal to the end port.', example='80', minimum=1, maximum=65535),
      end?: int32(name='End', description='The end port. The end port must be greater than or equal to the start port.', example='81', minimum=1, maximum=65535),
    }
  ](name='PortRanges', description='The port ranges of the office applications. You can enter up to 65,535 port ranges. Multiple port ranges cannot be duplicated or overlapped.', position='Body'),
  protocol?: string(name='Protocol', description='The protocol that is used by the office application. Valid values:

*   **All**
*   **TCP**
*   **UDP**', example='All', position='Body'),
  status?: string(name='Status', description='The status of the office application. Valid values:

*   **Enabled**
*   **Disabled**', example='Enabled', position='Body'),
  tagIds?: [ string ](name='TagIds', description='The IDs of the tags for the office applications. You can add up to six custom tags to an office application.', position='Body'),
}

model UpdatePrivateAccessApplicationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='FD724DBC-CD76-5235-BF76-59C51B73296D'),
}

model UpdatePrivateAccessApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePrivateAccessApplicationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdatePrivateAccessApplication  UpdatePrivateAccessApplicationRequest
  * @return UpdatePrivateAccessApplicationResponse
 */
async function updatePrivateAccessApplication(request: UpdatePrivateAccessApplicationRequest): UpdatePrivateAccessApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePrivateAccessApplication', 'POST', '/', 'json', true, 'form', request);
}

model UpdatePrivateAccessPolicyRequest {
  applicationIds?: [ string ](name='ApplicationIds', description='Set of application IDs for the private access policy. A single policy supports up to 100 private access application IDs.', position='Body'),
  applicationType?: string(name='ApplicationType', description='Application type of the private access policy. Values:
- **Application**: Application.
- **Tag**: Tag.', example='Application', position='Body'),
  customUserAttributes?: [ 
    {
      idpId?: int32(name='IdpId', description='The identity source ID of the custom user group. Required when the custom user group type is **department**.', example='12'),
      relation: string(name='Relation', description='Relation of the custom user group. Values:
- **Equal**: Equal.
- **Unequal**: Not equal.

This parameter is required.', example='Equal'),
      userGroupType: string(name='UserGroupType', description='Type of the custom user group. Values:
- **username**: Username.
- **department**: Department.
- **email**: Email.
- **telephone**: Telephone.

This parameter is required.', example='department'),
      value: string(name='Value', description='Custom user group attribute values. - When the user group type is **username**, it represents the value of the username. The length should be 1 to 128 characters, supporting Chinese and case-sensitive English letters, and can include numbers, half-width periods (.), underscores (_), hyphens (-), asterisks (*), at symbols (@), and spaces. - When the user group type is **department**, it represents the value of the department. For example: OU=Department1,OU=SASE DingTalk. - When the user group type is **email**, it represents the value of the email. For example: username@example.com. - When the user group type is **telephone**, it represents the value of the mobile phone. For example: 13900001234.

This parameter is required.', example='OU=部门1,OU=SASE钉钉'),
    }
  ](name='CustomUserAttributes', description='Set of custom user attributes for the private access policy, required when the user group type is **Custom**. Mutually exclusive with the user group ID set. The total number of custom user groups is limited to 10.', position='Body'),
  description?: string(name='Description', description='Description of the private access policy. Length should be 1 to 128 characters, supporting Chinese and English letters (both uppercase and lowercase), and can include numbers, periods (.), underscores (_), hyphens (-), and spaces.', example='test', position='Body'),
  deviceAttributeAction?: string(name='DeviceAttributeAction', description='The execution strategy for not meeting the security baseline. Values:

- **Block**: Block.
- **Observe**: Observe.', example='Block', position='Body'),
  deviceAttributeId?: string(name='DeviceAttributeId', description='The ID of the security baseline policy.', example='dag-d3f64e8bdd4a****', position='Body'),
  modifyType?: string(name='ModifyType', description='The modification type of the private access policy. Values:
- **Cover** (default): Use the values of **ApplicationIds**, **UserGroupIds**, and **CustomUserAttributes** to overwrite the original application ID set, user group ID set, and custom user attribute set, respectively.
- **Append**: Add the values provided in **ApplicationIds**, **UserGroupIds**, and **CustomUserAttributes** to the original application ID set, user group ID set, and custom user attribute set, respectively.', example='Cover', position='Body'),
  policyAction?: string(name='PolicyAction', description='Action of the private access policy. Values:
- **Block**: Block.
- **Allow**: Allow.', example='Allow', position='Body'),
  policyId: string(name='PolicyId', description='ID of the private access policy. Value sources:
- [ListPrivateAccessPolicies](~~ListPrivateAccessPolicies~~): Batch query for private access policies.
- [CreatePrivateAccessPolicy](~~CreatePrivateAccessPolicy~~): Create a private access policy.

This parameter is required.', example='pa-policy-63b2f1844b86****', position='Body'),
  priority?: int32(name='Priority', description='The priority of the private access policy. The number 1 indicates the highest priority. Range: 1~1000, with the maximum value being the total number of private access policies minus one.', example='1', position='Body'),
  status?: string(name='Status', description='The status of the private access policy. Values:
- **Enabled**: Enabled.
- **Disabled**: Disabled.', example='Enabled', position='Body'),
  tagIds?: [ string ](name='TagIds', description='Set of tag IDs for the private access policy. A single policy supports up to 100 private access tag IDs.', position='Body'),
  triggerTemplateId?: string(name='TriggerTemplateId', description='The trigger template ID.', example='dag-d3f64e8bdd4a****', position='Body'),
  trustedProcessGroupIds?: [ string ](name='TrustedProcessGroupIds', description='Trusted process group ID.', position='Body'),
  trustedProcessStatus?: string(name='TrustedProcessStatus', description='Trusted process switch status. Values: 

- **Enabled**: On. 

- **Disabled**: Off.', example='Disabled', position='Body'),
  trustedSoftwareIds?: [ string ](name='TrustedSoftwareIds', description='Trusted Software ID.', position='Body'),
  userGroupIds?: [ string ](name='UserGroupIds', description='Set of user group IDs for the private access policy, required when the user group type is **Normal**. Mutually exclusive with the custom user group set. A single policy supports up to 10,000 user groups, and a maximum of 2,000 user group IDs can be modified at once.', position='Body'),
  userGroupMode?: string(name='UserGroupMode', description='User group type of the private access policy. Values:
- **Normal**: Normal user group.
- **Custom**: Custom user group.', example='Normal', position='Body'),
}

model UpdatePrivateAccessPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of this request.', example='5FEF5CFA-14CC-5DE5-BD1F-AFFE0996E71D'),
}

model UpdatePrivateAccessPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePrivateAccessPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdatePrivateAccessPolicy  UpdatePrivateAccessPolicyRequest
  * @return UpdatePrivateAccessPolicyResponse
 */
async function updatePrivateAccessPolicy(request: UpdatePrivateAccessPolicyRequest): UpdatePrivateAccessPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePrivateAccessPolicy', 'POST', '/', 'json', true, 'form', request);
}

model UpdateRegistrationPolicyRequest {
  companyLimitCount?: {
    all?: int32(name='All', example='1'),
    mobile?: int32(name='Mobile', example='0'),
    pc?: int32(name='PC', example='0'),
  }(name='CompanyLimitCount', shrink='json', position='Body'),
  companyLimitType?: string(name='CompanyLimitType', example='LimitAll', position='Body'),
  description?: string(name='Description', position='Body'),
  matchMode?: string(name='MatchMode', example='UserGroupNormal', position='Body'),
  name?: string(name='Name', example='registration_policy_name', position='Body'),
  personalLimitCount?: {
    all?: int32(name='All', example='0'),
    mobile?: int32(name='Mobile', example='1'),
    pc?: int32(name='PC', example='2'),
  }(name='PersonalLimitCount', shrink='json', position='Body'),
  personalLimitType?: string(name='PersonalLimitType', example='LimitDiff', position='Body'),
  policyId: string(name='PolicyId', description='This parameter is required.', example='reg-policy-63b2f1844b86****', position='Body'),
  priority?: long(name='Priority', example='0', position='Body'),
  status?: string(name='Status', example='Enabled', position='Body'),
  userGroupIds?: [ string ](name='UserGroupIds', position='Body'),
  whitelist?: [ string ](name='Whitelist', position='Body'),
}

model UpdateRegistrationPolicyResponseBody = {
  policy?: {
    createTime?: string(name='CreateTime', example='2023-05-16 17:18:46'),
    description?: string(name='Description'),
    limitDetail?: [ 
      {
        deviceBelong?: string(name='DeviceBelong', example='Company'),
        limitCount?: {
          all?: int32(name='All', example='1'),
          mobile?: int32(name='Mobile', example='0'),
          pc?: int32(name='PC', example='0'),
        }(name='LimitCount'),
        limitType?: string(name='LimitType', example='LimitAll'),
      }
    ](name='LimitDetail'),
    matchMode?: string(name='MatchMode', example='UserGroupNormal'),
    name?: string(name='Name', example='registration_policy_name'),
    policyId?: string(name='PolicyId'),
    priority?: string(name='Priority', example='1'),
    status?: string(name='Status', example='Enabled'),
    userGroupIds?: [ string ](name='UserGroupIds'),
    whitelist?: [ string ](name='Whitelist'),
  }(name='Policy'),
  requestId?: string(name='RequestId', example='27064ECA-0936-59F3-8A98-EC821E5BD08F'),
}

model UpdateRegistrationPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRegistrationPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateRegistrationPolicy  UpdateRegistrationPolicyRequest
  * @return UpdateRegistrationPolicyResponse
 */
async function updateRegistrationPolicy(request: UpdateRegistrationPolicyRequest): UpdateRegistrationPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRegistrationPolicy', 'POST', '/', 'json', true, 'form', request);
}

model UpdateUninstallApplicationsStatusRequest {
  applicationIds?: [ string ](name='ApplicationIds', position='Body'),
  status?: string(name='Status', example='Approved', position='Body'),
}

model UpdateUninstallApplicationsStatusResponseBody = {
  applications?: [ 
    {
      applicationId?: string(name='ApplicationId', example='uninstall-app-6646831ac314****'),
      createTime?: string(name='CreateTime', example='2023-07-17 18:46:55'),
      department?: string(name='Department'),
      devTag?: string(name='DevTag', example='36efa42d-2c32-c4dc-e3fc-8541e33a****'),
      devType?: string(name='DevType', example='Windows'),
      hostname?: string(name='Hostname', example='win10-64bit'),
      idpName?: string(name='IdpName'),
      isUninstall?: boolean(name='IsUninstall', example='false'),
      mac?: string(name='Mac', example='00:16:XX:XX:7c:46'),
      reason?: string(name='Reason'),
      saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
      status?: string(name='Status', example='Approved'),
      username?: string(name='Username'),
    }
  ](name='Applications'),
  requestId?: string(name='RequestId', example='9B769522-D50C-5978-8981-52BE800D6099'),
}

model UpdateUninstallApplicationsStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUninstallApplicationsStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateUninstallApplicationsStatus  UpdateUninstallApplicationsStatusRequest
  * @return UpdateUninstallApplicationsStatusResponse
 */
async function updateUninstallApplicationsStatus(request: UpdateUninstallApplicationsStatusRequest): UpdateUninstallApplicationsStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUninstallApplicationsStatus', 'POST', '/', 'json', true, 'form', request);
}

model UpdateUserDevicesSharingStatusRequest {
  deviceTags: [ string ](name='DeviceTags', description='This parameter is required.', position='Body'),
  sharingStatus: boolean(name='SharingStatus', description='This parameter is required.', example='true', position='Body'),
}

model UpdateUserDevicesSharingStatusResponseBody = {
  devices?: [ 
    {
      appStatus?: string(name='AppStatus', example='Online'),
      appVersion?: string(name='AppVersion', example='2.2.0'),
      CPU?: string(name='CPU', example='Apple M1'),
      createTime?: string(name='CreateTime', example='2023-05-16 17:18:46'),
      department?: string(name='Department'),
      deviceBelong?: string(name='DeviceBelong', example='Company'),
      deviceModel?: string(name='DeviceModel', example='MacBookPro17,1'),
      deviceStatus?: string(name='DeviceStatus', example='Online'),
      deviceTag?: string(name='DeviceTag', example='36efa42d-2c32-c4dc-e3fc-8541e33a****'),
      deviceType?: string(name='DeviceType', example='Windows'),
      deviceVersion?: string(name='DeviceVersion', example='3.5.1'),
      disk?: string(name='Disk', example='APPLE SSD AP0512Q Media'),
      dlpStatus?: string(name='DlpStatus', example='Enabled'),
      hostname?: string(name='Hostname', example='win10-64bit'),
      iaStatus?: string(name='IaStatus', example='Enabled'),
      innerIP?: string(name='InnerIP', example='192.168.XX.XX'),
      mac?: string(name='Mac', example='00:16:XX:XX:7c:46'),
      memory?: string(name='Memory', example='16'),
      nacStatus?: string(name='NacStatus', example='Enabled'),
      netInterfaceInfo?: [ 
        {
          mac?: string(name='Mac'),
          name?: string(name='Name'),
        }
      ](name='NetInterfaceInfo'),
      paStatus?: string(name='PaStatus', example='Enabled'),
      saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
      sharingStatus?: boolean(name='SharingStatus', example='true'),
      srcIP?: string(name='SrcIP', example='11.49.XX.XX'),
      updateTime?: string(name='UpdateTime', example='2023-08-24 19:04:42'),
      username?: string(name='Username'),
    }
  ](name='Devices'),
  requestId?: string(name='RequestId', example='4D169859-A4F2-5EC8-853B-8447787C0D8A'),
}

model UpdateUserDevicesSharingStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserDevicesSharingStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateUserDevicesSharingStatus  UpdateUserDevicesSharingStatusRequest
  * @return UpdateUserDevicesSharingStatusResponse
 */
async function updateUserDevicesSharingStatus(request: UpdateUserDevicesSharingStatusRequest): UpdateUserDevicesSharingStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUserDevicesSharingStatus', 'POST', '/', 'json', true, 'form', request);
}

model UpdateUserDevicesStatusRequest {
  deviceAction: string(name='DeviceAction', description='This parameter is required.', example='Unbound', position='Body'),
  deviceTags: [ string ](name='DeviceTags', description='This parameter is required.', position='Body'),
}

model UpdateUserDevicesStatusResponseBody = {
  devices?: [ 
    {
      appStatus?: string(name='AppStatus', example='Online'),
      appVersion?: string(name='AppVersion', example='2.2.0'),
      CPU?: string(name='CPU', example='Apple M1'),
      createTime?: string(name='CreateTime', example='2023-07-17 18:46:55'),
      department?: string(name='Department'),
      deviceBelong?: string(name='DeviceBelong', example='Company'),
      deviceModel?: string(name='DeviceModel', example='MacBookPro17,1'),
      deviceStatus?: string(name='DeviceStatus', example='Online'),
      deviceTag?: string(name='DeviceTag', example='36efa42d-2c32-c4dc-e3fc-8541e33a****'),
      deviceType?: string(name='DeviceType', example='Windows'),
      deviceVersion?: string(name='DeviceVersion', example='3.5.1'),
      disk?: string(name='Disk', example='APPLE SSD AP0512Q Media'),
      dlpStatus?: string(name='DlpStatus', example='Enabled'),
      hostname?: string(name='Hostname', example='win10-64bit'),
      iaStatus?: string(name='IaStatus', example='Enabled'),
      innerIP?: string(name='InnerIP', example='192.168.XX.XX'),
      mac?: string(name='Mac', example='00:16:XX:XX:7c:46'),
      memory?: string(name='Memory', example='16'),
      nacStatus?: string(name='NacStatus', example='Enabled'),
      netInterfaceInfo?: [ 
        {
          mac?: string(name='Mac'),
          name?: string(name='Name'),
        }
      ](name='NetInterfaceInfo'),
      paStatus?: string(name='PaStatus', example='Enabled'),
      saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
      sharingStatus?: boolean(name='SharingStatus', example='true'),
      srcIP?: string(name='SrcIP', example='11.49.XX.XX'),
      updateTime?: string(name='UpdateTime', example='2023-08-24 19:04:42'),
      username?: string(name='Username'),
    }
  ](name='Devices'),
  requestId?: string(name='RequestId', example='5FEF5CFA-14CC-5DE5-BD1F-AFFE0996E71D'),
}

model UpdateUserDevicesStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserDevicesStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateUserDevicesStatus  UpdateUserDevicesStatusRequest
  * @return UpdateUserDevicesStatusResponse
 */
async function updateUserDevicesStatus(request: UpdateUserDevicesStatusRequest): UpdateUserDevicesStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUserDevicesStatus', 'POST', '/', 'json', true, 'form', request);
}

model UpdateUserGroupRequest {
  attributes?: [ 
    {
      idpId?: int32(name='IdpId', example='12'),
      relation: string(name='Relation', description='This parameter is required.', example='Equal'),
      userGroupType: string(name='UserGroupType', description='This parameter is required.', example='department'),
      value: string(name='Value', description='This parameter is required.'),
    }
  ](name='Attributes', position='Body'),
  description?: string(name='Description', position='Body'),
  modifyType?: string(name='ModifyType', example='Cover', position='Body'),
  userGroupId: string(name='UserGroupId', description='This parameter is required.', example='usergroup-6f1ef2fc56b6****', position='Body'),
}

model UpdateUserGroupResponseBody = {
  requestId?: string(name='RequestId', example='FD724DBC-CD76-5235-BF76-59C51B73296D'),
}

model UpdateUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateUserGroup  UpdateUserGroupRequest
  * @return UpdateUserGroupResponse
 */
async function updateUserGroup(request: UpdateUserGroupRequest): UpdateUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUserGroup', 'POST', '/', 'json', true, 'form', request);
}

model UpdateUsersStatusRequest {
  saseUserIds: [ string ](name='SaseUserIds', description='This parameter is required.', position='Query'),
  status: string(name='Status', description='This parameter is required.', example='Enabled', position='Query'),
}

model UpdateUsersStatusResponseBody = {
  requestId?: string(name='RequestId', example='47363C2B-1AAA-5954-8847-0E50FCC54117'),
}

model UpdateUsersStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUsersStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateUsersStatus  UpdateUsersStatusRequest
  * @return UpdateUsersStatusResponse
 */
async function updateUsersStatus(request: UpdateUsersStatusRequest): UpdateUsersStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUsersStatus', 'POST', '/', 'json', false, 'json', request);
}

