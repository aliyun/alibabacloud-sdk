/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'csas';
  @version = '2023-01-20';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AttachApplication2ConnectorRequest {
  applicationIds: [ string ](name='ApplicationIds', shrink='json', position='Body'),
  connectorId: string(name='ConnectorId', description='ConnectorID。', example='connector-94db94e06b98****', position='Body'),
}

model AttachApplication2ConnectorResponseBody = {
  requestId?: string(name='RequestId', example='7E9D7ACD-53D5-56EF-A913-79D148D06299'),
}

model AttachApplication2ConnectorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachApplication2ConnectorResponseBody(name='body'),
}

async function attachApplication2Connector(request: AttachApplication2ConnectorRequest): AttachApplication2ConnectorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachApplication2Connector', 'POST', '/', 'json', true, 'form', request);
}

model CreateDynamicRouteRequest {
  applicationIds?: [ string ](name='ApplicationIds', position='Body'),
  applicationType: string(name='ApplicationType', example='Application', position='Body'),
  description?: string(name='Description', position='Body'),
  dynamicRouteType: string(name='DynamicRouteType', example='connector', position='Body'),
  name: string(name='Name', example='dynamic_route_name', position='Body'),
  nextHop: string(name='NextHop', example='connector-8ccb13b6f52c****', position='Body'),
  priority: int32(name='Priority', example='99', position='Body'),
  regionIds: [ string ](name='RegionIds', position='Body'),
  status: string(name='Status', example='Disabled', position='Body'),
  tagIds?: [ string ](name='TagIds', position='Body'),
}

model CreateDynamicRouteResponseBody = {
  dynamicRouteId?: string(name='DynamicRouteId', example='dr-ca9fddfac7c6****'),
  requestId?: string(name='RequestId', example='102350E7-1A20-58F5-9D63-ABEA820AE6E1'),
}

model CreateDynamicRouteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDynamicRouteResponseBody(name='body'),
}

async function createDynamicRoute(request: CreateDynamicRouteRequest): CreateDynamicRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDynamicRoute', 'POST', '/', 'json', true, 'form', request);
}

model CreatePrivateAccessApplicationRequest {
  addresses: [ string ](name='Addresses', position='Body'),
  description?: string(name='Description', position='Body'),
  name: string(name='Name', example='private_access_application_name', position='Body'),
  portRanges: [ 
    {
      begin: int32(name='Begin', example='80', minimum=1, maximum=65535),
      end: int32(name='End', example='81', minimum=1, maximum=65535),
    }
  ](name='PortRanges', position='Body'),
  protocol: string(name='Protocol', example='All', position='Body'),
  status: string(name='Status', example='Enabled', position='Body'),
  tagIds?: [ string ](name='TagIds', position='Body'),
}

model CreatePrivateAccessApplicationResponseBody = {
  applicationId?: string(name='ApplicationId', example='pa-application-e12860ef6c48****'),
  requestId?: string(name='RequestId', example='BE4FB974-11BC-5453-9BE1-1606A73EACA6'),
}

model CreatePrivateAccessApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePrivateAccessApplicationResponseBody(name='body'),
}

async function createPrivateAccessApplication(request: CreatePrivateAccessApplicationRequest): CreatePrivateAccessApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePrivateAccessApplication', 'POST', '/', 'json', true, 'form', request);
}

model CreatePrivateAccessPolicyRequest {
  applicationIds?: [ string ](name='ApplicationIds', position='Body'),
  applicationType: string(name='ApplicationType', example='Application', position='Body'),
  customUserAttributes?: [ 
    {
      idpId?: int32(name='IdpId', example='12'),
      relation: string(name='Relation', example='Equal'),
      userGroupType: string(name='UserGroupType', example='department'),
      value: string(name='Value'),
    }
  ](name='CustomUserAttributes', position='Body'),
  description?: string(name='Description', position='Body'),
  name: string(name='Name', example='private_access_policy_name', position='Body'),
  policyAction: string(name='PolicyAction', example='Allow', position='Body'),
  priority: int32(name='Priority', example='1', position='Body'),
  status: string(name='Status', example='Enabled', position='Body'),
  tagIds?: [ string ](name='TagIds', description='内网访问标签ID集合。最多可输入100个内网访问标签ID。当**ApplicationType**为**Tag时**，必填。和**ApplicationIds**互斥。', position='Body'),
  userGroupIds?: [ string ](name='UserGroupIds', position='Body'),
  userGroupMode: string(name='UserGroupMode', description='内网访问策略的用户组类型。取值：
- **Normal**：普通用户组。
- **Custom**：自定义用户组。', example='Normal', position='Body'),
}

model CreatePrivateAccessPolicyResponseBody = {
  policyId?: string(name='PolicyId', example='pa-policy-867ef4007c8a****'),
  requestId?: string(name='RequestId', example='EFE7EBB2-449D-5BBB-B381-CA7839BC1649'),
}

model CreatePrivateAccessPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePrivateAccessPolicyResponseBody(name='body'),
}

async function createPrivateAccessPolicy(request: CreatePrivateAccessPolicyRequest): CreatePrivateAccessPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePrivateAccessPolicy', 'POST', '/', 'json', true, 'form', request);
}

model CreatePrivateAccessTagRequest {
  description?: string(name='Description', position='Body'),
  name: string(name='Name', example='tag_name', position='Body'),
}

model CreatePrivateAccessTagResponseBody = {
  requestId?: string(name='RequestId', example='102350E7-1A20-58F5-9D63-ABEA820AE6E1'),
  tagId?: string(name='TagId', example='tag-d3f64e8bdd4a****'),
}

model CreatePrivateAccessTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePrivateAccessTagResponseBody(name='body'),
}

async function createPrivateAccessTag(request: CreatePrivateAccessTagRequest): CreatePrivateAccessTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePrivateAccessTag', 'POST', '/', 'json', true, 'form', request);
}

model CreateRegistrationPolicyRequest {
  companyLimitCount?: {
    all?: int32(name='All', example='1'),
    mobile?: int32(name='Mobile', example='0'),
    pc?: int32(name='PC', example='0'),
  }(name='CompanyLimitCount', shrink='json', position='Body'),
  companyLimitType: string(name='CompanyLimitType', example='LimitAll', position='Body'),
  description?: string(name='Description', position='Body'),
  matchMode: string(name='MatchMode', example='UserGroupAll', position='Body'),
  name: string(name='Name', example='registration_policy_name', position='Body'),
  personalLimitCount?: {
    all?: int32(name='All', example='0'),
    mobile?: int32(name='Mobile', example='3'),
    pc?: int32(name='PC', example='2'),
  }(name='PersonalLimitCount', shrink='json', position='Body'),
  personalLimitType: string(name='PersonalLimitType', example='LimitDiff', position='Body'),
  priority?: long(name='Priority', example='99', position='Body'),
  status: string(name='Status', example='Enabled', position='Body'),
  userGroupIds?: [ string ](name='UserGroupIds', position='Body'),
  whitelist?: [ string ](name='Whitelist', position='Body'),
}

model CreateRegistrationPolicyResponseBody = {
  policy?: {
    createTime?: string(name='CreateTime', example='2023-05-16 17:18:46'),
    description?: string(name='Description'),
    limitDetail?: [ 
      {
        deviceBelong?: string(name='DeviceBelong', example='Company'),
        limitCount?: {
          all?: int32(name='All', example='0'),
          mobile?: int32(name='Mobile', example='3'),
          pc?: int32(name='PC', example='2'),
        }(name='LimitCount'),
        limitType?: string(name='LimitType', example='LimitDiff'),
      }
    ](name='LimitDetail'),
    matchMode?: string(name='MatchMode', example='UserGroupNormal'),
    name?: string(name='Name', example='registration_policy_name'),
    policyId?: string(name='PolicyId', example='reg-policy-dcbfd33cb004****'),
    priority?: string(name='Priority', example='1'),
    status?: string(name='Status', example='Enabled'),
    userGroupIds?: [ string ](name='UserGroupIds'),
    whitelist?: [ string ](name='Whitelist'),
  }(name='Policy'),
  requestId?: string(name='RequestId', example='FEF1144C-95D1-5F7C-81EF-9DB70EA49FCE'),
}

model CreateRegistrationPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRegistrationPolicyResponseBody(name='body'),
}

async function createRegistrationPolicy(request: CreateRegistrationPolicyRequest): CreateRegistrationPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRegistrationPolicy', 'POST', '/', 'json', true, 'form', request);
}

model CreateUserGroupRequest {
  attributes: [ 
    {
      idpId?: int32(name='IdpId', example='12'),
      relation: string(name='Relation', example='Equal'),
      userGroupType: string(name='UserGroupType', example='department'),
      value: string(name='Value'),
    }
  ](name='Attributes', position='Body'),
  description?: string(name='Description', position='Body'),
  name: string(name='Name', example='user_group_name', position='Body'),
}

model CreateUserGroupResponseBody = {
  requestId?: string(name='RequestId', example='102350E7-1A20-58F5-9D63-ABEA820AE6E1'),
  userGroupId?: string(name='UserGroupId', example='usergroup-6f1ef2fc56b6****'),
}

model CreateUserGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUserGroupResponseBody(name='body'),
}

async function createUserGroup(request: CreateUserGroupRequest): CreateUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUserGroup', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDynamicRouteRequest {
  dynamicRouteId: string(name='DynamicRouteId', example='dr-ca9fddfac7c6****', position='Query'),
}

model DeleteDynamicRouteResponseBody = {
  requestId?: string(name='RequestId', example='748CFDC7-1EB6-5B8B-9405-DA76ED5BB60D'),
}

model DeleteDynamicRouteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDynamicRouteResponseBody(name='body'),
}

async function deleteDynamicRoute(request: DeleteDynamicRouteRequest): DeleteDynamicRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDynamicRoute', 'POST', '/', 'json', false, 'json', request);
}

model DeletePrivateAccessApplicationRequest {
  applicationId: string(name='ApplicationId', example='pa-application-e12860ef6c48****', position='Body'),
}

model DeletePrivateAccessApplicationResponseBody = {
  requestId?: string(name='RequestId', example='BE4FB974-11BC-5453-9BE1-1606A73EACA6'),
}

model DeletePrivateAccessApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePrivateAccessApplicationResponseBody(name='body'),
}

async function deletePrivateAccessApplication(request: DeletePrivateAccessApplicationRequest): DeletePrivateAccessApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePrivateAccessApplication', 'POST', '/', 'json', true, 'form', request);
}

model DeletePrivateAccessPolicyRequest {
  policyId: string(name='PolicyId', example='pa-policy-867ef4007c8a****', position='Body'),
}

model DeletePrivateAccessPolicyResponseBody = {
  requestId?: string(name='RequestId', example='4D169859-A4F2-5EC8-853B-8447787C0D8A'),
}

model DeletePrivateAccessPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePrivateAccessPolicyResponseBody(name='body'),
}

async function deletePrivateAccessPolicy(request: DeletePrivateAccessPolicyRequest): DeletePrivateAccessPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePrivateAccessPolicy', 'POST', '/', 'json', true, 'form', request);
}

model DeletePrivateAccessTagRequest {
  tagId: string(name='TagId', example='tag-d3f64e8bdd4a****', position='Body'),
}

model DeletePrivateAccessTagResponseBody = {
  requestId?: string(name='RequestId', example='FD724DBC-CD76-5235-BF76-59C51B73296D'),
}

model DeletePrivateAccessTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePrivateAccessTagResponseBody(name='body'),
}

async function deletePrivateAccessTag(request: DeletePrivateAccessTagRequest): DeletePrivateAccessTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePrivateAccessTag', 'POST', '/', 'json', true, 'form', request);
}

model DeleteRegistrationPoliciesRequest {
  policyIds: [ string ](name='PolicyIds', position='Body'),
}

model DeleteRegistrationPoliciesResponseBody = {
  requestId?: string(name='RequestId', example='D6707286-A50E-57B1-B2CF-EFAC59E850D8'),
}

model DeleteRegistrationPoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRegistrationPoliciesResponseBody(name='body'),
}

async function deleteRegistrationPolicies(request: DeleteRegistrationPoliciesRequest): DeleteRegistrationPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRegistrationPolicies', 'POST', '/', 'json', true, 'form', request);
}

model DeleteUserGroupRequest {
  userGroupId: string(name='UserGroupId', example='usergroup-6f1ef2fc56b6****', position='Body'),
}

model DeleteUserGroupResponseBody = {
  requestId?: string(name='RequestId', example='58D6B23E-E5DA-5418-8F61-51A3B5A30049'),
}

model DeleteUserGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteUserGroupResponseBody(name='body'),
}

async function deleteUserGroup(request: DeleteUserGroupRequest): DeleteUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserGroup', 'POST', '/', 'json', true, 'form', request);
}

model DetachApplication2ConnectorRequest {
  applicationIds: [ string ](name='ApplicationIds', shrink='json', position='Body'),
  connectorId: string(name='ConnectorId', description='ConnectorID。', example='connector-94db94e06b98****', position='Body'),
}

model DetachApplication2ConnectorResponseBody = {
  requestId?: string(name='RequestId', example='4D169859-A4F2-5EC8-853B-8447787C0D8A'),
}

model DetachApplication2ConnectorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachApplication2ConnectorResponseBody(name='body'),
}

async function detachApplication2Connector(request: DetachApplication2ConnectorRequest): DetachApplication2ConnectorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachApplication2Connector', 'POST', '/', 'json', true, 'form', request);
}

model GetDynamicRouteRequest {
  dynamicRouteId: string(name='DynamicRouteId', example='dr-16ff07c8207d****', position='Query'),
}

model GetDynamicRouteResponseBody = {
  dynamicRoute?: {
    applicationIds?: [ string ](name='ApplicationIds'),
    applicationType?: string(name='ApplicationType', example='Application'),
    createTime?: string(name='CreateTime', example='2023-02-09 10:31:47'),
    description?: string(name='Description'),
    dynamicRouteId?: string(name='DynamicRouteId', example='dr-16ff07c8207d****'),
    dynamicRouteType?: string(name='DynamicRouteType', example='connector'),
    name?: string(name='Name', example='dynamic_route_name'),
    nextHop?: string(name='NextHop', example='connector-8ccb13b6f52c****'),
    priority?: int32(name='Priority', example='1'),
    regionIds?: [ string ](name='RegionIds'),
    status?: string(name='Status', example='Enabled'),
    tagIds?: [ string ](name='TagIds'),
  }(name='DynamicRoute'),
  requestId?: string(name='RequestId', example='58D6B23E-E5DA-5418-8F61-51A3B5A30049'),
}

model GetDynamicRouteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDynamicRouteResponseBody(name='body'),
}

async function getDynamicRoute(request: GetDynamicRouteRequest): GetDynamicRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDynamicRoute', 'GET', '/', 'json', false, 'json', request);
}

model GetPrivateAccessApplicationRequest {
  applicationId: string(name='ApplicationId', example='pa-application-e12860ef6c48****', position='Query'),
}

model GetPrivateAccessApplicationResponseBody = {
  application?: {
    addresses?: [ string ](name='Addresses'),
    applicationId?: string(name='ApplicationId', example='pa-application-e12860ef6c48****'),
    connectorIds?: [ string ](name='ConnectorIds'),
    createTime?: string(name='CreateTime', example='2022-08-30 16:50:32'),
    description?: string(name='Description'),
    name?: string(name='Name', example='private_access_application_name'),
    policyIds?: [ string ](name='PolicyIds'),
    portRanges?: [ 
      {
        begin?: int32(name='Begin', example='80'),
        end?: int32(name='End', example='81'),
      }
    ](name='PortRanges'),
    protocol?: string(name='Protocol', example='All'),
    status?: string(name='Status', example='Enabled'),
    tagIds?: [ string ](name='TagIds'),
  }(name='Application'),
  requestId?: string(name='RequestId', example='3ACC5EDC-2B7D-5032-8C58-D7615D66C1D4'),
}

model GetPrivateAccessApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPrivateAccessApplicationResponseBody(name='body'),
}

async function getPrivateAccessApplication(request: GetPrivateAccessApplicationRequest): GetPrivateAccessApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPrivateAccessApplication', 'GET', '/', 'json', false, 'json', request);
}

model GetPrivateAccessPolicyRequest {
  policyId: string(name='PolicyId', example='pa-policy-63b2f1844b86****', position='Query'),
}

model GetPrivateAccessPolicyResponseBody = {
  policy?: {
    applicationIds?: [ string ](name='ApplicationIds'),
    applicationType?: string(name='ApplicationType', example='Application'),
    createTime?: string(name='CreateTime', example='2021-07-29 11:26:02'),
    customUserAttributes?: [ 
      {
        idpId?: int32(name='IdpId', example='12'),
        relation?: string(name='Relation', example='Equal'),
        userGroupType?: string(name='UserGroupType', example='department'),
        value?: string(name='Value'),
      }
    ](name='CustomUserAttributes'),
    description?: string(name='Description'),
    name?: string(name='Name', example='private_access_policy_name'),
    policyAction?: string(name='PolicyAction', example='Allow'),
    policyId?: string(name='PolicyId', example='pa-policy-63b2f1844b86****'),
    priority?: int32(name='Priority', example='1'),
    status?: string(name='Status', example='Enabled'),
    tagIds?: [ string ](name='TagIds'),
    userGroupIds?: [ string ](name='UserGroupIds'),
    userGroupMode?: string(name='UserGroupMode', example='Normal'),
  }(name='Policy'),
  requestId?: string(name='RequestId', example='7E9D7ACD-53D5-56EF-A913-79D148D06299'),
}

model GetPrivateAccessPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPrivateAccessPolicyResponseBody(name='body'),
}

async function getPrivateAccessPolicy(request: GetPrivateAccessPolicyRequest): GetPrivateAccessPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPrivateAccessPolicy', 'GET', '/', 'json', false, 'json', request);
}

model GetRegistrationPolicyRequest {
  policyId: string(name='PolicyId', example='reg-policy-dcbfd33cb004****', position='Query'),
}

model GetRegistrationPolicyResponseBody = {
  createTime?: string(name='CreateTime', example='2023-05-16 17:18:46'),
  description?: string(name='Description'),
  limitDetail?: [ 
    {
      deviceBelong?: string(name='DeviceBelong', example='Personal'),
      limitCount?: {
        all?: int32(name='All', example='0'),
        mobile?: int32(name='Mobile', example='2'),
        pc?: int32(name='PC', example='2'),
      }(name='LimitCount'),
      limitType?: string(name='LimitType', example='LimitDiff'),
    }
  ](name='LimitDetail'),
  matchMode?: string(name='MatchMode', example='UserGroupAll'),
  name?: string(name='Name', example='registration_policy_name'),
  policyId?: string(name='PolicyId', example='reg-policy-dcbfd33cb004****'),
  priority?: long(name='Priority', example='99'),
  requestId?: string(name='RequestId', example='47363C2B-1AAA-5954-8847-0E50FCC54117'),
  status?: string(name='Status', example='Enabled'),
  userGroupIds?: [ string ](name='UserGroupIds'),
  whitelist?: [ string ](name='Whitelist'),
}

model GetRegistrationPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRegistrationPolicyResponseBody(name='body'),
}

async function getRegistrationPolicy(request: GetRegistrationPolicyRequest): GetRegistrationPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRegistrationPolicy', 'GET', '/', 'json', false, 'json', request);
}

model GetUserDeviceRequest {
  deviceTag: string(name='DeviceTag', example='36efa42d-2c32-c4dc-e3fc-8541e33a****', position='Query'),
}

model GetUserDeviceResponseBody = {
  device?: {
    appStatus?: string(name='AppStatus', example='Online'),
    appVersion?: string(name='AppVersion', example='2.2.0'),
    CPU?: string(name='CPU', example='Apple M1'),
    createTime?: string(name='CreateTime', example='2023-05-16 17:18:46'),
    department?: string(name='Department'),
    deviceBelong?: string(name='DeviceBelong', example='Company'),
    deviceModel?: string(name='DeviceModel', example='MacBookPro17,1'),
    deviceStatus?: string(name='DeviceStatus', example='Online'),
    deviceTag?: string(name='DeviceTag', example='36efa42d-2c32-c4dc-e3fc-8541e33a****'),
    deviceType?: string(name='DeviceType', example='Windows'),
    deviceVersion?: string(name='DeviceVersion', example='3.5.1'),
    disk?: string(name='Disk', example='APPLE SSD AP0512Q Media'),
    dlpStatus?: string(name='DlpStatus', example='Unauthorized'),
    historyUsers?: [ 
      {
        saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
        username?: string(name='Username'),
      }
    ](name='HistoryUsers'),
    hostname?: string(name='Hostname', example='win10-64bit'),
    iaStatus?: string(name='IaStatus', example='Disabled'),
    innerIP?: string(name='InnerIP', example='172.16.XX.XX'),
    mac?: string(name='Mac', example='48:9e:XX:XX:02:80'),
    memory?: string(name='Memory', example='16'),
    nacStatus?: string(name='NacStatus', example='Unprovisioned'),
    paStatus?: string(name='PaStatus', example='Enabled'),
    saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
    sharingStatus?: boolean(name='SharingStatus', example='true'),
    srcIP?: string(name='SrcIP', example='106.14.XX.XX'),
    updateTime?: string(name='UpdateTime', example='2023-08-24 19:04:42'),
    username?: string(name='Username'),
  }(name='Device'),
  requestId?: string(name='RequestId', example='EFE7EBB2-449D-5BBB-B381-CA7839BC1649'),
}

model GetUserDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserDeviceResponseBody(name='body'),
}

async function getUserDevice(request: GetUserDeviceRequest): GetUserDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserDevice', 'GET', '/', 'json', false, 'json', request);
}

model GetUserGroupRequest {
  userGroupId: string(name='UserGroupId', position='Query'),
}

model GetUserGroupResponseBody = {
  requestId?: string(name='RequestId', example='1310DBC7-7E1F-55D3-B4B4-E4BE912517FB'),
  userGroup?: {
    attributes?: [ 
      {
        idpId?: int32(name='IdpId', example='12'),
        relation?: string(name='Relation', example='Equal'),
        userGroupType?: string(name='UserGroupType', example='department'),
        value?: string(name='Value'),
      }
    ](name='Attributes'),
    createTime?: string(name='CreateTime', example='2022-10-10 11:39:22'),
    description?: string(name='Description'),
    name?: string(name='Name', example='user_group_name'),
    userGroupId?: string(name='UserGroupId'),
  }(name='UserGroup'),
}

model GetUserGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserGroupResponseBody(name='body'),
}

async function getUserGroup(request: GetUserGroupRequest): GetUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserGroup', 'GET', '/', 'json', false, 'json', request);
}

model ListApplicationsForPrivateAccessPolicyRequest {
  policyIds: [ string ](name='PolicyIds', position='Query'),
}

model ListApplicationsForPrivateAccessPolicyResponseBody = {
  polices?: [ 
    {
      applications?: [ 
        {
          addresses?: [ string ](name='Addresses'),
          applicationId?: string(name='ApplicationId', example='pa-application-7a9243dd02f4****'),
          createTime?: string(name='CreateTime', example='2022-09-27 18:10:25'),
          description?: string(name='Description'),
          name?: string(name='Name', example='application_name'),
          portRanges?: [ 
            {
              begin?: int32(name='Begin', example='80'),
              end?: int32(name='End', example='81'),
            }
          ](name='PortRanges'),
          protocol?: string(name='Protocol', example='TCP'),
          status?: string(name='Status', example='Enabled'),
        }
      ](name='Applications'),
      policyId?: string(name='PolicyId', example='pa-policy-1b0d0e8b4bcf****'),
    }
  ](name='Polices'),
  requestId?: string(name='RequestId', example='4D169859-A4F2-5EC8-853B-8447787C0D8A'),
}

model ListApplicationsForPrivateAccessPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListApplicationsForPrivateAccessPolicyResponseBody(name='body'),
}

async function listApplicationsForPrivateAccessPolicy(request: ListApplicationsForPrivateAccessPolicyRequest): ListApplicationsForPrivateAccessPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplicationsForPrivateAccessPolicy', 'GET', '/', 'json', false, 'json', request);
}

model ListApplicationsForPrivateAccessTagRequest {
  tagIds: [ string ](name='TagIds', position='Query'),
}

model ListApplicationsForPrivateAccessTagResponseBody = {
  requestId?: string(name='RequestId', example='B608C6AE-623D-55C4-9454-601B88AE937E'),
  tags?: [ 
    {
      applications?: [ 
        {
          addresses?: [ string ](name='Addresses'),
          applicationId?: string(name='ApplicationId', example='pa-application-7a9243dd02f4****'),
          createTime?: string(name='CreateTime', description='内网访问应用创建时间。', example='2022-09-27 18:10:25'),
          description?: string(name='Description'),
          name?: string(name='Name', example='private_access_application_name'),
          portRanges?: [ 
            {
              begin?: int32(name='Begin', example='80'),
              end?: int32(name='End', example='81'),
            }
          ](name='PortRanges'),
          protocol?: string(name='Protocol', example='All'),
          status?: string(name='Status', example='Enabled'),
        }
      ](name='Applications'),
      tagId?: string(name='TagId', example='tag-7ffc82853476****'),
    }
  ](name='Tags'),
}

model ListApplicationsForPrivateAccessTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListApplicationsForPrivateAccessTagResponseBody(name='body'),
}

async function listApplicationsForPrivateAccessTag(request: ListApplicationsForPrivateAccessTagRequest): ListApplicationsForPrivateAccessTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplicationsForPrivateAccessTag', 'GET', '/', 'json', false, 'json', request);
}

model ListConnectorsRequest {
  connectorIds?: [ string ](name='ConnectorIds', position='Query'),
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  name?: string(name='Name', example='connector_name', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  status?: string(name='Status', position='Query'),
  switchStatus?: string(name='SwitchStatus', position='Query'),
}

model ListConnectorsResponseBody = {
  connectors?: [ 
    {
      applications?: [ 
        {
          applicationId?: string(name='ApplicationId', example='pa-application-e12860ef6c48****'),
          applicationName?: string(name='ApplicationName', example='application_name'),
        }
      ](name='Applications'),
      connectorClients?: [ 
        {
          connectionStatus?: string(name='ConnectionStatus'),
          devTag?: string(name='DevTag'),
          hostname?: string(name='Hostname'),
          publicIp?: string(name='PublicIp'),
        }
      ](name='ConnectorClients'),
      connectorId?: string(name='ConnectorId', description='ConnectorID。', example='connector-94db94e06b98****'),
      createTime?: string(name='CreateTime', example='2022-09-27 18:10:25'),
      name?: string(name='Name', example='connector_name'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      status?: string(name='Status', example='Online'),
      switchStatus?: string(name='SwitchStatus', example='Enabled'),
      upgradeTime?: {
        end?: string(name='End', example='23:00'),
        start?: string(name='Start', example='20:00'),
      }(name='UpgradeTime'),
    }
  ](name='Connectors'),
  requestId?: string(name='RequestId', example='58D6B23E-E5DA-5418-8F61-51A3B5A30049'),
  totalNum?: int32(name='TotalNum', example='1'),
}

model ListConnectorsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListConnectorsResponseBody(name='body'),
}

async function listConnectors(request: ListConnectorsRequest): ListConnectorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListConnectors', 'GET', '/', 'json', false, 'json', request);
}

model ListDynamicRouteRegionsRequest {
}

model ListDynamicRouteRegionsResponseBody = {
  regions?: [ string ](name='Regions'),
  requestId?: string(name='RequestId', example='58D6B23E-E5DA-5418-8F61-51A3B5A30049'),
  totalNum?: int32(name='TotalNum', example='1'),
}

model ListDynamicRouteRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDynamicRouteRegionsResponseBody(name='body'),
}

async function listDynamicRouteRegions(request: ListDynamicRouteRegionsRequest): ListDynamicRouteRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDynamicRouteRegions', 'GET', '/', 'json', false, 'json', request);
}

model ListDynamicRoutesRequest {
  applicationId?: string(name='ApplicationId', example='pa-application-e12860ef6c48****', position='Query'),
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  dynamicRouteIds?: [ string ](name='DynamicRouteIds', position='Query'),
  name?: string(name='Name', example='dynamic_route_name', position='Query'),
  nextHop?: string(name='NextHop', example='connector-8ccb13b6f52c****', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  regionIds?: [ string ](name='RegionIds', position='Query'),
  status?: string(name='Status', example='Enabled', position='Query'),
  tagId?: string(name='TagId', example='tag-d3f64e8bdd4a****', position='Query'),
}

model ListDynamicRoutesResponseBody = {
  dynamicRoutes?: [ 
    {
      applicationIds?: [ string ](name='ApplicationIds'),
      applicationType?: string(name='ApplicationType', example='Application'),
      createTime?: string(name='CreateTime', example='2023-03-21 11:50:03'),
      description?: string(name='Description'),
      dynamicRouteId?: string(name='DynamicRouteId', example='dr-a0ca843f53cf****'),
      dynamicRouteType?: string(name='DynamicRouteType', example='connector'),
      name?: string(name='Name', example='dynamic_route_name'),
      nextHop?: string(name='NextHop', example='connector-8ccb13b6f52c****'),
      priority?: int32(name='Priority', example='1'),
      regionIds?: [ string ](name='RegionIds'),
      status?: string(name='Status', example='Enabled'),
      tagIds?: [ string ](name='TagIds'),
    }
  ](name='DynamicRoutes'),
  requestId?: string(name='RequestId', example='58D6B23E-E5DA-5418-8F61-51A3B5A30049'),
  totalNum?: int32(name='TotalNum', example='1'),
}

model ListDynamicRoutesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDynamicRoutesResponseBody(name='body'),
}

async function listDynamicRoutes(request: ListDynamicRoutesRequest): ListDynamicRoutesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDynamicRoutes', 'GET', '/', 'json', false, 'json', request);
}

model ListExcessiveDeviceRegistrationApplicationsRequest {
  applicationIds?: [ string ](name='ApplicationIds', position='Query'),
  currentPage: long(name='CurrentPage', example='1', position='Query'),
  department?: string(name='Department', position='Query'),
  deviceTag?: string(name='DeviceTag', example='36efa42d-2c32-c4dc-e3fc-8541e33a****', position='Query'),
  hostname?: string(name='Hostname', example='win10-64bit', position='Query'),
  mac?: string(name='Mac', example='00:16:XX:XX:7c:46', position='Query'),
  pageSize: long(name='PageSize', example='10', position='Query'),
  saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****', position='Query'),
  statuses?: [ string ](name='Statuses', position='Query'),
  username?: string(name='Username', position='Query'),
}

model ListExcessiveDeviceRegistrationApplicationsResponseBody = {
  applications?: [ 
    {
      applicationId?: string(name='ApplicationId', example='reg-application-0f4a127b7e78****'),
      createTime?: string(name='CreateTime', example='2023-07-17 18:46:55'),
      department?: string(name='Department'),
      description?: string(name='Description'),
      deviceTag?: string(name='DeviceTag', example='36efa42d-2c32-c4dc-e3fc-8541e33a****'),
      deviceType?: string(name='DeviceType', example='Windows'),
      hostname?: string(name='Hostname', example='win10-64bit'),
      isUsed?: boolean(name='IsUsed', example='false'),
      mac?: string(name='Mac', example='00:16:XX:XX:7c:46'),
      saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
      status?: string(name='Status', example='Approved'),
      username?: string(name='Username'),
    }
  ](name='Applications'),
  requestId?: string(name='RequestId', example='58D6B23E-E5DA-5418-8F61-51A3B5A30049'),
  totalNum?: long(name='TotalNum', example='1'),
}

model ListExcessiveDeviceRegistrationApplicationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListExcessiveDeviceRegistrationApplicationsResponseBody(name='body'),
}

async function listExcessiveDeviceRegistrationApplications(request: ListExcessiveDeviceRegistrationApplicationsRequest): ListExcessiveDeviceRegistrationApplicationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListExcessiveDeviceRegistrationApplications', 'GET', '/', 'json', false, 'json', request);
}

model ListPolicesForPrivateAccessApplicationRequest {
  applicationIds: [ string ](name='ApplicationIds', position='Query'),
}

model ListPolicesForPrivateAccessApplicationResponseBody = {
  applications?: [ 
    {
      applicationId?: string(name='ApplicationId', example='pa-application-b927baf3e592****'),
      policies?: [ 
        {
          applicationType?: string(name='ApplicationType', example='Application'),
          createTime?: string(name='CreateTime', example='2022-09-27 18:10:25'),
          customUserAttributes?: [ 
            {
              idpId?: int32(name='IdpId', example='12'),
              relation?: string(name='Relation', example='Equal'),
              userGroupType?: string(name='UserGroupType', example='department'),
              value?: string(name='Value'),
            }
          ](name='CustomUserAttributes'),
          description?: string(name='Description'),
          name?: string(name='Name', example='private_access_policy_name'),
          policyAction?: string(name='PolicyAction', example='Allow'),
          policyId?: string(name='PolicyId', example='pa-policy-867ef4007c8a****'),
          priority?: int32(name='Priority', example='1'),
          status?: string(name='Status', example='Enabled'),
          userGroupType?: string(name='UserGroupType', example='Normal'),
        }
      ](name='Policies'),
    }
  ](name='Applications'),
  requestId?: string(name='RequestId', example='4AB972E2-D702-5464-B132-B1911498B8BF'),
}

model ListPolicesForPrivateAccessApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPolicesForPrivateAccessApplicationResponseBody(name='body'),
}

async function listPolicesForPrivateAccessApplication(request: ListPolicesForPrivateAccessApplicationRequest): ListPolicesForPrivateAccessApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPolicesForPrivateAccessApplication', 'GET', '/', 'json', false, 'json', request);
}

model ListPolicesForPrivateAccessTagRequest {
  tagIds: [ string ](name='TagIds', position='Query'),
}

model ListPolicesForPrivateAccessTagResponseBody = {
  requestId?: string(name='RequestId', example='4D169859-A4F2-5EC8-853B-8447787C0D8A'),
  tags?: [ 
    {
      polices?: [ 
        {
          applicationType?: string(name='ApplicationType', example='Application'),
          createTime?: string(name='CreateTime', description='内网访问策略创建时间。', example='2023-02-21 14:10:16'),
          customUserAttributes?: [ 
            {
              idpId?: int32(name='IdpId', description='用户组的身份源ID。当自定义用户组类型为**department**时，存在该值。', example='12'),
              relation?: string(name='Relation', description='用户组的关系。取值：
- **Equal**：等于。
- **Unequal**：不等于。', example='Equal'),
              userGroupType?: string(name='UserGroupType', description='用户组的类型。取值：
- **username**：用户名。
- **department**：部门。
- **email**：邮箱。
- **telephone**：手机。', example='department'),
              value?: string(name='Value', description='用户组属性的值。
- 当用户组类型为**username**时，表示用户名的值。长度为1~128个字符，支持中文和大小写英文字母，可包含数字、半角句号（.）、下划线（_）和短划线（-）。
- 当用户组类型为**department**时，表示部门的值。如：OU=部门1,OU=SASE钉钉。
- 当用户组类型为**email**时，表示邮箱的值。如：username@example.com。
- 当用户组类型为**telephone**时，表示手机的值。如：13900001234。', example='OU=部门1,OU=SASE钉钉'),
            }
          ](name='CustomUserAttributes', description='自定义用户组属性集合。多个自定义用户组属性之间是或的关系，按照合集生效。'),
          description?: string(name='Description'),
          name?: string(name='Name', example='private_access_policy_name'),
          policyAction?: string(name='PolicyAction', example='Allow'),
          policyId?: string(name='PolicyId', example='pa-policy-867ef4007c8a****'),
          priority?: int32(name='Priority', example='1'),
          status?: string(name='Status', example='Enabled'),
          userGroupType?: string(name='UserGroupType', example='Normal'),
        }
      ](name='Polices'),
      tagId?: string(name='TagId', example='tag-b927baf3e592****'),
    }
  ](name='Tags'),
}

model ListPolicesForPrivateAccessTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPolicesForPrivateAccessTagResponseBody(name='body'),
}

async function listPolicesForPrivateAccessTag(request: ListPolicesForPrivateAccessTagRequest): ListPolicesForPrivateAccessTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPolicesForPrivateAccessTag', 'GET', '/', 'json', false, 'json', request);
}

model ListPolicesForUserGroupRequest {
  userGroupIds: [ string ](name='UserGroupIds', position='Query'),
}

model ListPolicesForUserGroupResponseBody = {
  requestId?: string(name='RequestId', example='5F04DFBD-3F48-5F70-AE72-474026670128'),
  userGroups?: [ 
    {
      polices?: [ 
        {
          name?: string(name='Name', example='private_access_policy_name'),
          policyId?: string(name='PolicyId', example='pa-policy-ce2bf7236fab****'),
          policyType?: string(name='PolicyType', example='PrivateAccess'),
        }
      ](name='Polices'),
      userGroupId?: string(name='UserGroupId', example='usergroup-6f1ef2fc56b6****'),
    }
  ](name='UserGroups'),
}

model ListPolicesForUserGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPolicesForUserGroupResponseBody(name='body'),
}

async function listPolicesForUserGroup(request: ListPolicesForUserGroupRequest): ListPolicesForUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPolicesForUserGroup', 'GET', '/', 'json', false, 'json', request);
}

model ListPrivateAccessApplicationsRequest {
  address?: string(name='Address', example='192.168.0.0/16', position='Query'),
  applicationIds?: [ string ](name='ApplicationIds', position='Query'),
  connectorId?: string(name='ConnectorId', position='Query'),
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  name?: string(name='Name', example='private_access_application_name', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  policyId?: string(name='PolicyId', example='pa-policy-54a7838a48bf****', position='Query'),
  status?: string(name='Status', example='Enabled', position='Query'),
  tagId?: string(name='TagId', example='tag-d3f64e8bdd4a****', position='Query'),
}

model ListPrivateAccessApplicationsResponseBody = {
  applications?: [ 
    {
      addresses?: [ string ](name='Addresses'),
      applicationId?: string(name='ApplicationId', example='pa-application-e12860ef6c48****'),
      connectorIds?: [ string ](name='ConnectorIds'),
      createTime?: string(name='CreateTime', example='2022-12-16 15:03:42'),
      description?: string(name='Description'),
      name?: string(name='Name', example='private_access_application_name'),
      policyIds?: [ string ](name='PolicyIds'),
      portRanges?: [ 
        {
          begin?: int32(name='Begin', example='80'),
          end?: int32(name='End', example='81'),
        }
      ](name='PortRanges'),
      protocol?: string(name='Protocol', example='All'),
      status?: string(name='Status', example='Enabled'),
      tagIds?: [ string ](name='TagIds'),
    }
  ](name='Applications'),
  requestId?: string(name='RequestId', example='748CFDC7-1EB6-5B8B-9405-DA76ED5BB60D'),
  totalNum?: int32(name='TotalNum', example='1'),
}

model ListPrivateAccessApplicationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPrivateAccessApplicationsResponseBody(name='body'),
}

async function listPrivateAccessApplications(request: ListPrivateAccessApplicationsRequest): ListPrivateAccessApplicationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrivateAccessApplications', 'GET', '/', 'json', false, 'json', request);
}

model ListPrivateAccessApplicationsForDynamicRouteRequest {
  dynamicRouteIds: [ string ](name='DynamicRouteIds', position='Query'),
}

model ListPrivateAccessApplicationsForDynamicRouteResponseBody = {
  dynamicRoutes?: [ 
    {
      applications?: [ 
        {
          addresses?: [ string ](name='Addresses'),
          applicationId?: string(name='ApplicationId', example='pa-application-7a9243dd02f4****'),
          createTime?: string(name='CreateTime', example='2022-04-13 13:33:24'),
          description?: string(name='Description'),
          name?: string(name='Name', example='application_name'),
          portRanges?: [ 
            {
              begin?: int32(name='Begin', example='80'),
              end?: int32(name='End', example='81'),
            }
          ](name='PortRanges'),
          protocol?: string(name='Protocol', example='All'),
          status?: string(name='Status', example='Enabled'),
        }
      ](name='Applications'),
      dynamicRouteId?: string(name='DynamicRouteId', example='dr-ca9fddfac7c6****'),
    }
  ](name='DynamicRoutes'),
  requestId?: string(name='RequestId', example='BE4FB974-11BC-5453-9BE1-1606A73EACA6'),
}

model ListPrivateAccessApplicationsForDynamicRouteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPrivateAccessApplicationsForDynamicRouteResponseBody(name='body'),
}

async function listPrivateAccessApplicationsForDynamicRoute(request: ListPrivateAccessApplicationsForDynamicRouteRequest): ListPrivateAccessApplicationsForDynamicRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrivateAccessApplicationsForDynamicRoute', 'GET', '/', 'json', false, 'json', request);
}

model ListPrivateAccessPolicesRequest {
  applicationId?: string(name='ApplicationId', example='pa-application-e12860ef6c48****', position='Query'),
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  name?: string(name='Name', example='private_access_policy_name', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  policyAction?: string(name='PolicyAction', example='Allow', position='Query'),
  policyIds?: [ string ](name='PolicyIds', position='Query'),
  status?: string(name='Status', example='Enabled', position='Query'),
  tagId?: string(name='TagId', example='tag-c0cb77857a99****', position='Query'),
  userGroupId?: string(name='UserGroupId', description='用户组ID。取值来源：
- [ListUserGroups](~~ListUserGroups~~)：批量查询用户组。
- [CreateUserGroup](~~CreateUserGroup~~)：创建用户组。', example='usergroup-6f1ef2fc56b6****', position='Query'),
}

model ListPrivateAccessPolicesResponseBody = {
  polices?: [ 
    {
      applicationIds?: [ string ](name='ApplicationIds'),
      applicationType?: string(name='ApplicationType', example='Application'),
      createTime?: string(name='CreateTime', example='2022-07-10 15:50:23'),
      customUserAttributes?: [ 
        {
          idpId?: int32(name='IdpId', example='12'),
          relation?: string(name='Relation', example='Equal'),
          userGroupType?: string(name='UserGroupType', example='department'),
          value?: string(name='Value'),
        }
      ](name='CustomUserAttributes'),
      description?: string(name='Description'),
      name?: string(name='Name', example='private_access_policy_name'),
      policyAction?: string(name='PolicyAction', example='Allow'),
      policyId?: string(name='PolicyId', example='pa-policy-63b2f1844b86****'),
      priority?: int32(name='Priority', example='1'),
      status?: string(name='Status', example='Enabled'),
      tagIds?: [ string ](name='TagIds'),
      userGroupIds?: [ string ](name='UserGroupIds'),
      userGroupMode?: string(name='UserGroupMode', example='Normal'),
    }
  ](name='Polices'),
  requestId?: string(name='RequestId', example='748CFDC7-1EB6-5B8B-9405-DA76ED5BB60D'),
  totalNum?: int32(name='TotalNum', example='1'),
}

model ListPrivateAccessPolicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPrivateAccessPolicesResponseBody(name='body'),
}

async function listPrivateAccessPolices(request: ListPrivateAccessPolicesRequest): ListPrivateAccessPolicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrivateAccessPolices', 'GET', '/', 'json', false, 'json', request);
}

model ListPrivateAccessTagsRequest {
  applicationId?: string(name='ApplicationId', example='pa-application-e12860ef6c48****', position='Query'),
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  name?: string(name='Name', example='tag_name', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  policyId?: string(name='PolicyId', example='pa-policy-54a7838a48bf****', position='Query'),
  tagIds?: [ string ](name='TagIds', position='Query'),
}

model ListPrivateAccessTagsResponseBody = {
  requestId?: string(name='RequestId', example='54C1D236-CDB9-586C-B44D-AFDCEA195545'),
  tags?: [ 
    {
      applicationIds?: [ string ](name='ApplicationIds'),
      createTime?: string(name='CreateTime', example='2022-10-10 11:39:34'),
      description?: string(name='Description'),
      name?: string(name='Name', example='tag_name'),
      policyIds?: [ string ](name='PolicyIds'),
      tagId?: string(name='TagId', example='tag-d3f64e8bdd4a****'),
      tagType?: string(name='TagType', example='Default'),
    }
  ](name='Tags'),
  totalNum?: int32(name='TotalNum', example='1'),
}

model ListPrivateAccessTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPrivateAccessTagsResponseBody(name='body'),
}

async function listPrivateAccessTags(request: ListPrivateAccessTagsRequest): ListPrivateAccessTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrivateAccessTags', 'GET', '/', 'json', false, 'json', request);
}

model ListPrivateAccessTagsForDynamicRouteRequest {
  dynamicRouteIds: [ string ](name='DynamicRouteIds', position='Query'),
}

model ListPrivateAccessTagsForDynamicRouteResponseBody = {
  dynamicRoutes?: [ 
    {
      dynamicRouteId?: string(name='DynamicRouteId', example='dr-ca9fddfac7c6****'),
      tags?: [ 
        {
          createTime?: string(name='CreateTime', example='2022-10-23 14:02:56'),
          description?: string(name='Description'),
          name?: string(name='Name', example='tag_name'),
          tagId?: string(name='TagId', example='tag-d3f64e8bdd4a****'),
          tagType?: string(name='TagType', example='Custom'),
        }
      ](name='Tags'),
    }
  ](name='DynamicRoutes'),
  requestId?: string(name='RequestId', example='B608C6AE-623D-55C4-9454-601B88AE937E'),
}

model ListPrivateAccessTagsForDynamicRouteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPrivateAccessTagsForDynamicRouteResponseBody(name='body'),
}

async function listPrivateAccessTagsForDynamicRoute(request: ListPrivateAccessTagsForDynamicRouteRequest): ListPrivateAccessTagsForDynamicRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrivateAccessTagsForDynamicRoute', 'GET', '/', 'json', false, 'json', request);
}

model ListRegistrationPoliciesRequest {
  companyLimitType?: string(name='CompanyLimitType', example='LimitAll', position='Query'),
  currentPage: long(name='CurrentPage', example='1', position='Query'),
  matchMode?: string(name='MatchMode', example='UserGroupAll', position='Query'),
  name?: string(name='Name', example='registration_policy_name', position='Query'),
  pageSize: long(name='PageSize', example='10', position='Query'),
  personalLimitType?: string(name='PersonalLimitType', example='LimitDiff', position='Query'),
  policyIds?: [ string ](name='PolicyIds', position='Query'),
  status?: string(name='Status', example='Enabled', position='Query'),
  userGroupId?: string(name='UserGroupId', example='usergroup-6f1ef2fc56b6****', position='Query'),
}

model ListRegistrationPoliciesResponseBody = {
  policies?: [ 
    {
      createTime?: string(name='CreateTime', example='2023-05-16 17:18:46'),
      description?: string(name='Description'),
      limitDetail?: [ 
        {
          deviceBelong?: string(name='DeviceBelong', example='Company'),
          limitCount?: {
            all?: int32(name='All', example='3'),
            mobile?: int32(name='Mobile', example='0'),
            pc?: int32(name='PC', example='0'),
          }(name='LimitCount'),
          limitType?: string(name='LimitType', example='LimitAll'),
        }
      ](name='LimitDetail'),
      matchMode?: string(name='MatchMode', example='UserGroupNormal'),
      name?: string(name='Name', example='registration_policy_name'),
      policyId?: string(name='PolicyId', example='reg-policy-dcbfd33cb004****'),
      priority?: long(name='Priority', example='1'),
      status?: string(name='Status', example='Enabled'),
      userGroupIds?: [ string ](name='UserGroupIds'),
      whitelist?: [ string ](name='Whitelist'),
    }
  ](name='Policies'),
  requestId?: string(name='RequestId', example='7A8FE38A-E29C-5678-B84A-FEDBCB83552F'),
  totalNum?: string(name='TotalNum', example='1'),
}

model ListRegistrationPoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRegistrationPoliciesResponseBody(name='body'),
}

async function listRegistrationPolicies(request: ListRegistrationPoliciesRequest): ListRegistrationPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRegistrationPolicies', 'GET', '/', 'json', false, 'json', request);
}

model ListRegistrationPoliciesForUserGroupRequest {
  userGroupIds: [ string ](name='UserGroupIds', position='Query'),
}

model ListRegistrationPoliciesForUserGroupResponseBody = {
  requestId?: string(name='RequestId', example='58D6B23E-E5DA-5418-8F61-51A3B5A30049'),
  userGroups?: [ 
    {
      policies?: [ 
        {
          createTime?: string(name='CreateTime', example='2023-05-16 17:18:46'),
          description?: string(name='Description'),
          limitDetail?: [ 
            {
              deviceBelong?: string(name='DeviceBelong', example='Company'),
              limitCount?: {
                all?: string(name='All', example='3'),
                mobile?: string(name='Mobile', example='0'),
                pc?: string(name='PC', example='0'),
              }(name='LimitCount'),
              limitType?: string(name='LimitType', example='LimitAll'),
            }
          ](name='LimitDetail'),
          matchMode?: string(name='MatchMode', example='UserGroupNormal'),
          name?: string(name='Name', example='registration_policy_name'),
          policyId?: string(name='PolicyId', example='reg-policy-dcbfd33cb004****'),
          priority?: long(name='Priority', example='1'),
          status?: string(name='Status', example='Enabled'),
          whitelist?: [ string ](name='Whitelist'),
        }
      ](name='Policies'),
      userGroupId?: string(name='UserGroupId', example='usergroup-6f1ef2fc56b6****'),
    }
  ](name='UserGroups'),
}

model ListRegistrationPoliciesForUserGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRegistrationPoliciesForUserGroupResponseBody(name='body'),
}

async function listRegistrationPoliciesForUserGroup(request: ListRegistrationPoliciesForUserGroupRequest): ListRegistrationPoliciesForUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRegistrationPoliciesForUserGroup', 'GET', '/', 'json', false, 'json', request);
}

model ListSoftwareForUserDeviceRequest {
  currentPage: long(name='CurrentPage', example='1', position='Query'),
  deviceTag: string(name='DeviceTag', example='36efa42d-2c32-c4dc-e3fc-8541e33a****', position='Query'),
  pageSize: long(name='PageSize', example='10', position='Query'),
}

model ListSoftwareForUserDeviceResponseBody = {
  requestId?: string(name='RequestId', example='102350E7-1A20-58F5-9D63-ABEA820AE6E1'),
  software?: [ 
    {
      inc?: string(name='Inc', example='Alibaba (China) Network Technology Co.,Ltd.'),
      installTime?: string(name='InstallTime', example='2023-08-18 02:43:02'),
      name?: string(name='Name'),
      versions?: [ string ](name='Versions'),
    }
  ](name='Software'),
  totalNum?: long(name='TotalNum', example='1'),
}

model ListSoftwareForUserDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSoftwareForUserDeviceResponseBody(name='body'),
}

async function listSoftwareForUserDevice(request: ListSoftwareForUserDeviceRequest): ListSoftwareForUserDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSoftwareForUserDevice', 'GET', '/', 'json', false, 'json', request);
}

model ListTagsForPrivateAccessApplicationRequest {
  applicationIds: [ string ](name='ApplicationIds', position='Query'),
}

model ListTagsForPrivateAccessApplicationResponseBody = {
  applications?: [ 
    {
      applicationId?: string(name='ApplicationId', example='pa-application-7a4445897856****'),
      tags?: [ 
        {
          createTime?: string(name='CreateTime', example='2022-07-01 16:05:26'),
          description?: string(name='Description'),
          name?: string(name='Name', example='tag_name'),
          tagId?: string(name='TagId', example='tag-c0cb77857a99****'),
          tagType?: string(name='TagType', example='Default'),
        }
      ](name='Tags'),
    }
  ](name='Applications'),
  requestId?: string(name='RequestId', example='7241F45B-E8D3-5BA3-8172-8A58AC2AB0FC'),
}

model ListTagsForPrivateAccessApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagsForPrivateAccessApplicationResponseBody(name='body'),
}

async function listTagsForPrivateAccessApplication(request: ListTagsForPrivateAccessApplicationRequest): ListTagsForPrivateAccessApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagsForPrivateAccessApplication', 'GET', '/', 'json', false, 'json', request);
}

model ListTagsForPrivateAccessPolicyRequest {
  policyIds: [ string ](name='PolicyIds', position='Query'),
}

model ListTagsForPrivateAccessPolicyResponseBody = {
  polices?: [ 
    {
      policyId?: string(name='PolicyId', example='pa-policy-1b0d0e8b4bcf****'),
      tags?: [ 
        {
          createTime?: string(name='CreateTime', description='内网访问标签创建时间。', example='2023-02-21 14:10:16'),
          description?: string(name='Description'),
          name?: string(name='Name', example='tag_name'),
          tagId?: string(name='TagId', example='tag-d3f64e8bdd4a****'),
          tagType?: string(name='TagType', example='Default'),
        }
      ](name='Tags'),
    }
  ](name='Polices'),
  requestId?: string(name='RequestId', example='9EE61139-A6A8-5E13-80AF-83435C21B26B'),
}

model ListTagsForPrivateAccessPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagsForPrivateAccessPolicyResponseBody(name='body'),
}

async function listTagsForPrivateAccessPolicy(request: ListTagsForPrivateAccessPolicyRequest): ListTagsForPrivateAccessPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagsForPrivateAccessPolicy', 'GET', '/', 'json', false, 'json', request);
}

model ListUserDevicesRequest {
  appStatuses?: [ string ](name='AppStatuses', position='Query'),
  currentPage: long(name='CurrentPage', example='1', position='Query'),
  department?: string(name='Department', position='Query'),
  deviceBelong?: string(name='DeviceBelong', example='Company', position='Query'),
  deviceStatuses?: [ string ](name='DeviceStatuses', position='Query'),
  deviceTags?: [ string ](name='DeviceTags', position='Query'),
  deviceTypes?: [ string ](name='DeviceTypes', position='Query'),
  dlpStatuses?: [ string ](name='DlpStatuses', position='Query'),
  hostname?: string(name='Hostname', example='win10-64bit', position='Query'),
  iaStatuses?: [ string ](name='IaStatuses', position='Query'),
  mac?: string(name='Mac', example='00:16:XX:XX:7c:46', position='Query'),
  nacStatuses?: [ string ](name='NacStatuses', position='Query'),
  paStatuses?: [ string ](name='PaStatuses', position='Query'),
  pageSize: long(name='PageSize', example='10', position='Query'),
  saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****', position='Query'),
  sharingStatus?: boolean(name='SharingStatus', example='true', position='Query'),
  username?: string(name='Username', position='Query'),
}

model ListUserDevicesResponseBody = {
  devices?: [ 
    {
      appStatus?: string(name='AppStatus', example='Online'),
      appVersion?: string(name='AppVersion', example='2.2.0'),
      CPU?: string(name='CPU', example='Apple M1'),
      createTime?: string(name='CreateTime', example='2023-07-17 18:46:55'),
      department?: string(name='Department'),
      deviceBelong?: string(name='DeviceBelong', example='Company'),
      deviceModel?: string(name='DeviceModel', example='MacBookPro17,1'),
      deviceStatus?: string(name='DeviceStatus', example='Online'),
      deviceTag?: string(name='DeviceTag', example='36efa42d-2c32-c4dc-e3fc-8541e33a****'),
      deviceType?: string(name='DeviceType', example='Windows'),
      deviceVersion?: string(name='DeviceVersion', example='3.5.1'),
      disk?: string(name='Disk', example='APPLE SSD AP0512Q Media'),
      dlpStatus?: string(name='DlpStatus', example='Enabled'),
      hostname?: string(name='Hostname', example='win10-64bit'),
      iaStatus?: string(name='IaStatus', example='Enabled'),
      innerIP?: string(name='InnerIP', example='192.168.XX.XX'),
      mac?: string(name='Mac', example='00:16:XX:XX:7c:46'),
      memory?: string(name='Memory', example='16'),
      nacStatus?: string(name='NacStatus', example='Enabled'),
      paStatus?: string(name='PaStatus', example='Enabled'),
      saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
      sharingStatus?: boolean(name='SharingStatus', example='true'),
      srcIP?: string(name='SrcIP', example='11.49.XX.XX'),
      updateTime?: string(name='UpdateTime', example='2023-08-24 19:04:42'),
      username?: string(name='Username'),
    }
  ](name='Devices'),
  requestId?: string(name='RequestId', example='5FEF5CFA-14CC-5DE5-BD1F-AFFE0996E71D'),
  totalNum?: long(name='TotalNum', example='1'),
}

model ListUserDevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserDevicesResponseBody(name='body'),
}

async function listUserDevices(request: ListUserDevicesRequest): ListUserDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserDevices', 'GET', '/', 'json', false, 'json', request);
}

model ListUserGroupsRequest {
  attributeValue?: string(name='AttributeValue', example='username', position='Query'),
  currentPage: int32(name='CurrentPage', example='1', minimum=1, maximum=10000, position='Query'),
  name?: string(name='Name', description='用户组名称。长度为1~128个字符，支持中文和大小写英文字母，可包含数字、半角句号（.）、下划线（_）和短划线（-）。', example='user_group_name', position='Query'),
  PAPolicyId?: string(name='PAPolicyId', example='pa-policy-54a7838a48bf****', position='Query'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=1000, position='Query'),
  userGroupIds?: [ string ](name='UserGroupIds', position='Query'),
}

model ListUserGroupsResponseBody = {
  requestId?: string(name='RequestId', example='4AB972E2-D702-5464-B132-B1911498B8BF'),
  totalNum?: int32(name='TotalNum', example='1'),
  userGroups?: [ 
    {
      attributes?: [ 
        {
          idpId?: int32(name='IdpId', example='12'),
          relation?: string(name='Relation', example='Equal'),
          userGroupType?: string(name='UserGroupType', example='department'),
          value?: string(name='Value'),
        }
      ](name='Attributes'),
      createTime?: string(name='CreateTime', example='2022-10-10 11:39:22'),
      description?: string(name='Description'),
      name?: string(name='Name', example='user_group_name'),
      userGroupId?: string(name='UserGroupId', example='usergroup-6f1ef2fc56b6****'),
    }
  ](name='UserGroups'),
}

model ListUserGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserGroupsResponseBody(name='body'),
}

async function listUserGroups(request: ListUserGroupsRequest): ListUserGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserGroups', 'GET', '/', 'json', false, 'json', request);
}

model ListUserGroupsForPrivateAccessPolicyRequest {
  policyIds: [ string ](name='PolicyIds', position='Query'),
}

model ListUserGroupsForPrivateAccessPolicyResponseBody = {
  polices?: [ 
    {
      policyId?: string(name='PolicyId', example='pa-policy-1b0d0e8b4bcf****'),
      userGroups?: [ 
        {
          attributes?: [ 
            {
              idpId?: int32(name='IdpId', example='12'),
              relation?: string(name='Relation', example='Equal'),
              userGroupType?: string(name='UserGroupType', example='department'),
              value?: string(name='Value'),
            }
          ](name='Attributes'),
          createTime?: string(name='CreateTime', description='用户组创建时间。', example='2022-09-27 18:10:25'),
          description?: string(name='Description'),
          name?: string(name='Name', example='user_group_name'),
          userGroupId?: string(name='UserGroupId', example='usergroup-6f1ef2fc56b6****'),
        }
      ](name='UserGroups'),
    }
  ](name='Polices'),
  requestId?: string(name='RequestId', example='58D6B23E-E5DA-5418-8F61-51A3B5A30049'),
}

model ListUserGroupsForPrivateAccessPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserGroupsForPrivateAccessPolicyResponseBody(name='body'),
}

async function listUserGroupsForPrivateAccessPolicy(request: ListUserGroupsForPrivateAccessPolicyRequest): ListUserGroupsForPrivateAccessPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserGroupsForPrivateAccessPolicy', 'GET', '/', 'json', false, 'json', request);
}

model ListUserGroupsForRegistrationPolicyRequest {
  policyIds: [ string ](name='PolicyIds', position='Query'),
}

model ListUserGroupsForRegistrationPolicyResponseBody = {
  policies?: [ 
    {
      policyId?: string(name='PolicyId', example='reg-policy-f25c9e5872e5****'),
      userGroups?: [ 
        {
          attributes?: [ 
            {
              idpId?: int32(name='IdpId', example='12'),
              relation?: string(name='Relation', example='Equal'),
              userGroupType?: string(name='UserGroupType', example='department'),
              value?: string(name='Value'),
            }
          ](name='Attributes'),
          createTime?: string(name='CreateTime', example='2022-09-27 18:10:25'),
          description?: string(name='Description'),
          name?: string(name='Name', example='user_group_name'),
          userGroupId?: string(name='UserGroupId', example='usergroup-6f1ef2fc56b6****'),
        }
      ](name='UserGroups'),
    }
  ](name='Policies'),
  requestId?: string(name='RequestId', example='D89009C7-54C6-51B6-BAE7-3F373920C6BF'),
}

model ListUserGroupsForRegistrationPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserGroupsForRegistrationPolicyResponseBody(name='body'),
}

async function listUserGroupsForRegistrationPolicy(request: ListUserGroupsForRegistrationPolicyRequest): ListUserGroupsForRegistrationPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserGroupsForRegistrationPolicy', 'GET', '/', 'json', false, 'json', request);
}

model UpdateDynamicRouteRequest {
  applicationIds?: [ string ](name='ApplicationIds', position='Body'),
  applicationType?: string(name='ApplicationType', example='Application', position='Body'),
  description?: string(name='Description', position='Body'),
  dynamicRouteId: string(name='DynamicRouteId', example='dr-ca9fddfac7c6****', position='Body'),
  dynamicRouteType?: string(name='DynamicRouteType', example='connector', position='Body'),
  modifyType?: string(name='ModifyType', example='Cover', position='Body'),
  name?: string(name='Name', example='dynamic_route_name', position='Body'),
  nextHop?: string(name='NextHop', example='connector-8ccb13b6f52c****', position='Body'),
  priority?: int32(name='Priority', example='99', position='Body'),
  regionIds?: [ string ](name='RegionIds', position='Body'),
  status?: string(name='Status', example='Disabled', position='Body'),
  tagIds?: [ string ](name='TagIds', position='Body'),
}

model UpdateDynamicRouteResponseBody = {
  requestId?: string(name='RequestId', example='BE4FB974-11BC-5453-9BE1-1606A73EACA6'),
}

model UpdateDynamicRouteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDynamicRouteResponseBody(name='body'),
}

async function updateDynamicRoute(request: UpdateDynamicRouteRequest): UpdateDynamicRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDynamicRoute', 'POST', '/', 'json', true, 'form', request);
}

model UpdateExcessiveDeviceRegistrationApplicationsStatusRequest {
  applicationIds: [ string ](name='ApplicationIds', position='Body'),
  status: string(name='Status', example='Approved', position='Body'),
}

model UpdateExcessiveDeviceRegistrationApplicationsStatusResponseBody = {
  applications?: [ 
    {
      applicationId?: string(name='ApplicationId', example='reg-application-0f4a127b7e78****'),
      createTime?: string(name='CreateTime', example='2023-07-17 18:46:55'),
      department?: string(name='Department'),
      description?: string(name='Description'),
      deviceTag?: string(name='DeviceTag', example='36efa42d-2c32-c4dc-e3fc-8541e33a****'),
      deviceType?: string(name='DeviceType', example='Windows'),
      hostname?: string(name='Hostname', example='win10-64bit'),
      isUsed?: boolean(name='IsUsed', example='false'),
      mac?: string(name='Mac', example='00:16:XX:XX:7c:46'),
      saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
      status?: string(name='Status', example='Approved'),
      username?: string(name='Username'),
    }
  ](name='Applications'),
  requestId?: string(name='RequestId', example='102350E7-1A20-58F5-9D63-ABEA820AE6E1'),
}

model UpdateExcessiveDeviceRegistrationApplicationsStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateExcessiveDeviceRegistrationApplicationsStatusResponseBody(name='body'),
}

async function updateExcessiveDeviceRegistrationApplicationsStatus(request: UpdateExcessiveDeviceRegistrationApplicationsStatusRequest): UpdateExcessiveDeviceRegistrationApplicationsStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateExcessiveDeviceRegistrationApplicationsStatus', 'POST', '/', 'json', true, 'form', request);
}

model UpdatePrivateAccessApplicationRequest {
  addresses?: [ string ](name='Addresses', position='Body'),
  applicationId: string(name='ApplicationId', example='pa-application-e12860ef6c48****', position='Body'),
  description?: string(name='Description', position='Body'),
  modifyType?: string(name='ModifyType', example='Cover', position='Body'),
  portRanges?: [ 
    {
      begin?: int32(name='Begin', example='80', minimum=1, maximum=65535),
      end?: int32(name='End', example='81', minimum=1, maximum=65535),
    }
  ](name='PortRanges', position='Body'),
  protocol?: string(name='Protocol', example='All', position='Body'),
  status?: string(name='Status', example='Enabled', position='Body'),
  tagIds?: [ string ](name='TagIds', position='Body'),
}

model UpdatePrivateAccessApplicationResponseBody = {
  requestId?: string(name='RequestId', example='FD724DBC-CD76-5235-BF76-59C51B73296D'),
}

model UpdatePrivateAccessApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdatePrivateAccessApplicationResponseBody(name='body'),
}

async function updatePrivateAccessApplication(request: UpdatePrivateAccessApplicationRequest): UpdatePrivateAccessApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePrivateAccessApplication', 'POST', '/', 'json', true, 'form', request);
}

model UpdatePrivateAccessPolicyRequest {
  applicationIds?: [ string ](name='ApplicationIds', position='Body'),
  applicationType?: string(name='ApplicationType', example='Application', position='Body'),
  customUserAttributes?: [ 
    {
      idpId?: int32(name='IdpId', example='12'),
      relation: string(name='Relation', example='Equal'),
      userGroupType: string(name='UserGroupType', example='department'),
      value: string(name='Value'),
    }
  ](name='CustomUserAttributes', position='Body'),
  description?: string(name='Description', position='Body'),
  modifyType?: string(name='ModifyType', example='Cover', position='Body'),
  policyAction?: string(name='PolicyAction', example='Allow', position='Body'),
  policyId: string(name='PolicyId', example='pa-policy-63b2f1844b86****', position='Body'),
  priority?: int32(name='Priority', example='1', position='Body'),
  status?: string(name='Status', example='Enabled', position='Body'),
  tagIds?: [ string ](name='TagIds', description='内网访问标签ID集合。一条策略最多支持100个内网访问标签ID。', position='Body'),
  userGroupIds?: [ string ](name='UserGroupIds', position='Body'),
  userGroupMode?: string(name='UserGroupMode', description='内网访问策略的用户组类型。取值：
- **Normal**：普通用户组。
- **Custom**：自定义用户组。', example='Normal', position='Body'),
}

model UpdatePrivateAccessPolicyResponseBody = {
  requestId?: string(name='RequestId', example='5FEF5CFA-14CC-5DE5-BD1F-AFFE0996E71D'),
}

model UpdatePrivateAccessPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdatePrivateAccessPolicyResponseBody(name='body'),
}

async function updatePrivateAccessPolicy(request: UpdatePrivateAccessPolicyRequest): UpdatePrivateAccessPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePrivateAccessPolicy', 'POST', '/', 'json', true, 'form', request);
}

model UpdateRegistrationPolicyRequest {
  companyLimitCount?: {
    all?: int32(name='All', example='1'),
    mobile?: int32(name='Mobile', example='0'),
    pc?: int32(name='PC', example='0'),
  }(name='CompanyLimitCount', shrink='json', position='Body'),
  companyLimitType?: string(name='CompanyLimitType', example='LimitAll', position='Body'),
  description?: string(name='Description', position='Body'),
  matchMode?: string(name='MatchMode', example='UserGroupNormal', position='Body'),
  name?: string(name='Name', example='registration_policy_name', position='Body'),
  personalLimitCount?: {
    all?: int32(name='All', example='0'),
    mobile?: int32(name='Mobile', example='1'),
    pc?: int32(name='PC', example='2'),
  }(name='PersonalLimitCount', shrink='json', position='Body'),
  personalLimitType?: string(name='PersonalLimitType', example='LimitDiff', position='Body'),
  policyId: string(name='PolicyId', example='reg-policy-63b2f1844b86****', position='Body'),
  priority?: long(name='Priority', example='0', position='Body'),
  status?: string(name='Status', example='Enabled', position='Body'),
  userGroupIds?: [ string ](name='UserGroupIds', position='Body'),
  whitelist?: [ string ](name='Whitelist', position='Body'),
}

model UpdateRegistrationPolicyResponseBody = {
  policy?: {
    createTime?: string(name='CreateTime', example='2023-05-16 17:18:46'),
    description?: string(name='Description'),
    limitDetail?: [ 
      {
        deviceBelong?: string(name='DeviceBelong', example='Company'),
        limitCount?: {
          all?: int32(name='All', example='1'),
          mobile?: int32(name='Mobile', example='0'),
          pc?: int32(name='PC', example='0'),
        }(name='LimitCount'),
        limitType?: string(name='LimitType', example='LimitAll'),
      }
    ](name='LimitDetail'),
    matchMode?: string(name='MatchMode', example='UserGroupNormal'),
    name?: string(name='Name', example='registration_policy_name'),
    policyId?: string(name='PolicyId'),
    priority?: string(name='Priority', example='1'),
    status?: string(name='Status', example='Enabled'),
    userGroupIds?: [ string ](name='UserGroupIds'),
    whitelist?: [ string ](name='Whitelist'),
  }(name='Policy'),
  requestId?: string(name='RequestId', example='27064ECA-0936-59F3-8A98-EC821E5BD08F'),
}

model UpdateRegistrationPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateRegistrationPolicyResponseBody(name='body'),
}

async function updateRegistrationPolicy(request: UpdateRegistrationPolicyRequest): UpdateRegistrationPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRegistrationPolicy', 'POST', '/', 'json', true, 'form', request);
}

model UpdateUserDevicesSharingStatusRequest {
  deviceTags: [ string ](name='DeviceTags', position='Body'),
  sharingStatus: boolean(name='SharingStatus', example='true', position='Body'),
}

model UpdateUserDevicesSharingStatusResponseBody = {
  devices?: [ 
    {
      appStatus?: string(name='AppStatus', example='Online'),
      appVersion?: string(name='AppVersion', example='2.2.0'),
      CPU?: string(name='CPU', example='Apple M1'),
      createTime?: string(name='CreateTime', example='2023-05-16 17:18:46'),
      department?: string(name='Department'),
      deviceBelong?: string(name='DeviceBelong', example='Company'),
      deviceModel?: string(name='DeviceModel', example='MacBookPro17,1'),
      deviceStatus?: string(name='DeviceStatus', example='Online'),
      deviceTag?: string(name='DeviceTag', example='36efa42d-2c32-c4dc-e3fc-8541e33a****'),
      deviceType?: string(name='DeviceType', example='Windows'),
      deviceVersion?: string(name='DeviceVersion', example='3.5.1'),
      disk?: string(name='Disk', example='APPLE SSD AP0512Q Media'),
      dlpStatus?: string(name='DlpStatus', example='Enabled'),
      hostname?: string(name='Hostname', example='win10-64bit'),
      iaStatus?: string(name='IaStatus', example='Enabled'),
      innerIP?: string(name='InnerIP', example='192.168.XX.XX'),
      mac?: string(name='Mac', example='00:16:XX:XX:7c:46'),
      memory?: string(name='Memory', example='16'),
      nacStatus?: string(name='NacStatus', example='Enabled'),
      paStatus?: string(name='PaStatus', example='Enabled'),
      saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
      sharingStatus?: boolean(name='SharingStatus', example='true'),
      srcIP?: string(name='SrcIP', example='11.49.XX.XX'),
      updateTime?: string(name='UpdateTime', example='2023-08-24 19:04:42'),
      username?: string(name='Username'),
    }
  ](name='Devices'),
  requestId?: string(name='RequestId', example='4D169859-A4F2-5EC8-853B-8447787C0D8A'),
}

model UpdateUserDevicesSharingStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateUserDevicesSharingStatusResponseBody(name='body'),
}

async function updateUserDevicesSharingStatus(request: UpdateUserDevicesSharingStatusRequest): UpdateUserDevicesSharingStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUserDevicesSharingStatus', 'POST', '/', 'json', true, 'form', request);
}

model UpdateUserDevicesStatusRequest {
  deviceAction: string(name='DeviceAction', example='Unbound', position='Body'),
  deviceTags: [ string ](name='DeviceTags', position='Body'),
}

model UpdateUserDevicesStatusResponseBody = {
  devices?: [ 
    {
      appStatus?: string(name='AppStatus', example='Online'),
      appVersion?: string(name='AppVersion', example='2.2.0'),
      CPU?: string(name='CPU', example='Apple M1'),
      createTime?: string(name='CreateTime', example='2023-07-17 18:46:55'),
      department?: string(name='Department'),
      deviceBelong?: string(name='DeviceBelong', example='Company'),
      deviceModel?: string(name='DeviceModel', example='MacBookPro17,1'),
      deviceStatus?: string(name='DeviceStatus', example='Online'),
      deviceTag?: string(name='DeviceTag', example='36efa42d-2c32-c4dc-e3fc-8541e33a****'),
      deviceType?: string(name='DeviceType', example='Windows'),
      deviceVersion?: string(name='DeviceVersion', example='3.5.1'),
      disk?: string(name='Disk', example='APPLE SSD AP0512Q Media'),
      dlpStatus?: string(name='DlpStatus', example='Enabled'),
      hostname?: string(name='Hostname', example='win10-64bit'),
      iaStatus?: string(name='IaStatus', example='Enabled'),
      innerIP?: string(name='InnerIP', example='192.168.XX.XX'),
      mac?: string(name='Mac', example='00:16:XX:XX:7c:46'),
      memory?: string(name='Memory', example='16'),
      nacStatus?: string(name='NacStatus', example='Enabled'),
      paStatus?: string(name='PaStatus', example='Enabled'),
      saseUserId?: string(name='SaseUserId', example='su_e8f218fb171edd167c2ad917d21f53148bdefc510ca1f3c3cc0249d3643d****'),
      sharingStatus?: boolean(name='SharingStatus', example='true'),
      srcIP?: string(name='SrcIP', example='11.49.XX.XX'),
      updateTime?: string(name='UpdateTime', example='2023-08-24 19:04:42'),
      username?: string(name='Username'),
    }
  ](name='Devices'),
  requestId?: string(name='RequestId', example='5FEF5CFA-14CC-5DE5-BD1F-AFFE0996E71D'),
}

model UpdateUserDevicesStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateUserDevicesStatusResponseBody(name='body'),
}

async function updateUserDevicesStatus(request: UpdateUserDevicesStatusRequest): UpdateUserDevicesStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUserDevicesStatus', 'POST', '/', 'json', true, 'form', request);
}

model UpdateUserGroupRequest {
  attributes?: [ 
    {
      idpId?: int32(name='IdpId', example='12'),
      relation: string(name='Relation', example='Equal'),
      userGroupType: string(name='UserGroupType', example='department'),
      value: string(name='Value'),
    }
  ](name='Attributes', position='Body'),
  description?: string(name='Description', position='Body'),
  modifyType?: string(name='ModifyType', example='Cover', position='Body'),
  userGroupId: string(name='UserGroupId', example='usergroup-6f1ef2fc56b6****', position='Body'),
}

model UpdateUserGroupResponseBody = {
  requestId?: string(name='RequestId', example='FD724DBC-CD76-5235-BF76-59C51B73296D'),
}

model UpdateUserGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateUserGroupResponseBody(name='body'),
}

async function updateUserGroup(request: UpdateUserGroupRequest): UpdateUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUserGroup', 'POST', '/', 'json', true, 'form', request);
}

