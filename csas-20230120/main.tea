/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('csas', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AttachApplication2ConnectorRequest {
  applicationIds?: [ string ](name='ApplicationIds'),
  connectorId?: string(name='ConnectorId', description='ConnectorID。', example='connector-94db94e06b98****'),
}

model AttachApplication2ConnectorShrinkRequest {
  applicationIdsShrink?: string(name='ApplicationIds'),
  connectorId?: string(name='ConnectorId', description='ConnectorID。', example='connector-94db94e06b98****'),
}

model AttachApplication2ConnectorResponseBody = {
  requestId?: string(name='RequestId', example='7E9D7ACD-53D5-56EF-A913-79D148D06299'),
}

model AttachApplication2ConnectorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachApplication2ConnectorResponseBody(name='body'),
}

async function attachApplication2ConnectorWithOptions(tmpReq: AttachApplication2ConnectorRequest, runtime: Util.RuntimeOptions): AttachApplication2ConnectorResponse {
  Util.validateModel(tmpReq);
  var request = new AttachApplication2ConnectorShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.applicationIds)) {
    request.applicationIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.applicationIds, 'ApplicationIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.applicationIdsShrink)) {
    body['ApplicationIds'] = request.applicationIdsShrink;
  }
  if (!Util.isUnset(request.connectorId)) {
    body['ConnectorId'] = request.connectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AttachApplication2Connector',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachApplication2Connector(request: AttachApplication2ConnectorRequest): AttachApplication2ConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachApplication2ConnectorWithOptions(request, runtime);
}

model CreatePrivateAccessApplicationRequest {
  addresses?: [ string ](name='Addresses'),
  description?: string(name='Description'),
  name?: string(name='Name', example='private_access_application_name'),
  portRanges?: [ 
    {
      begin?: int32(name='Begin', example='80'),
      end?: int32(name='End', example='81'),
    }
  ](name='PortRanges'),
  protocol?: string(name='Protocol', example='All'),
  status?: string(name='Status', example='Enabled'),
  tagIds?: [ string ](name='TagIds'),
}

model CreatePrivateAccessApplicationShrinkRequest {
  addressesShrink?: string(name='Addresses'),
  description?: string(name='Description'),
  name?: string(name='Name', example='private_access_application_name'),
  portRangesShrink?: string(name='PortRanges'),
  protocol?: string(name='Protocol', example='All'),
  status?: string(name='Status', example='Enabled'),
  tagIdsShrink?: string(name='TagIds'),
}

model CreatePrivateAccessApplicationResponseBody = {
  applicationId?: string(name='ApplicationId', example='pa-application-e12860ef6c48****'),
  requestId?: string(name='RequestId', example='BE4FB974-11BC-5453-9BE1-1606A73EACA6'),
}

model CreatePrivateAccessApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePrivateAccessApplicationResponseBody(name='body'),
}

async function createPrivateAccessApplicationWithOptions(tmpReq: CreatePrivateAccessApplicationRequest, runtime: Util.RuntimeOptions): CreatePrivateAccessApplicationResponse {
  Util.validateModel(tmpReq);
  var request = new CreatePrivateAccessApplicationShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.addresses)) {
    request.addressesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.addresses, 'Addresses', 'json');
  }
  if (!Util.isUnset(tmpReq.portRanges)) {
    request.portRangesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.portRanges, 'PortRanges', 'json');
  }
  if (!Util.isUnset(tmpReq.tagIds)) {
    request.tagIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tagIds, 'TagIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.addressesShrink)) {
    body['Addresses'] = request.addressesShrink;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.portRangesShrink)) {
    body['PortRanges'] = request.portRangesShrink;
  }
  if (!Util.isUnset(request.protocol)) {
    body['Protocol'] = request.protocol;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.tagIdsShrink)) {
    body['TagIds'] = request.tagIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreatePrivateAccessApplication',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createPrivateAccessApplication(request: CreatePrivateAccessApplicationRequest): CreatePrivateAccessApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPrivateAccessApplicationWithOptions(request, runtime);
}

model CreatePrivateAccessPolicyRequest {
  applicationIds?: [ string ](name='ApplicationIds'),
  applicationType?: string(name='ApplicationType', example='Application'),
  customUserAttributes?: [ 
    {
      idpId?: int32(name='IdpId', example='12'),
      relation?: string(name='Relation', example='Equal'),
      userGroupType?: string(name='UserGroupType', example='department'),
      value?: string(name='Value'),
    }
  ](name='CustomUserAttributes'),
  description?: string(name='Description'),
  name?: string(name='Name', example='private_access_policy_name'),
  policyAction?: string(name='PolicyAction', example='Allow'),
  priority?: int32(name='Priority', example='1'),
  status?: string(name='Status', example='Enabled'),
  tagIds?: [ string ](name='TagIds'),
  userGroupIds?: [ string ](name='UserGroupIds'),
  userGroupMode?: string(name='UserGroupMode'),
}

model CreatePrivateAccessPolicyShrinkRequest {
  applicationIdsShrink?: string(name='ApplicationIds'),
  applicationType?: string(name='ApplicationType', example='Application'),
  customUserAttributesShrink?: string(name='CustomUserAttributes'),
  description?: string(name='Description'),
  name?: string(name='Name', example='private_access_policy_name'),
  policyAction?: string(name='PolicyAction', example='Allow'),
  priority?: int32(name='Priority', example='1'),
  status?: string(name='Status', example='Enabled'),
  tagIdsShrink?: string(name='TagIds'),
  userGroupIdsShrink?: string(name='UserGroupIds'),
  userGroupMode?: string(name='UserGroupMode'),
}

model CreatePrivateAccessPolicyResponseBody = {
  policyId?: string(name='PolicyId', example='pa-policy-867ef4007c8a****'),
  requestId?: string(name='RequestId', example='EFE7EBB2-449D-5BBB-B381-CA7839BC1649'),
}

model CreatePrivateAccessPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePrivateAccessPolicyResponseBody(name='body'),
}

async function createPrivateAccessPolicyWithOptions(tmpReq: CreatePrivateAccessPolicyRequest, runtime: Util.RuntimeOptions): CreatePrivateAccessPolicyResponse {
  Util.validateModel(tmpReq);
  var request = new CreatePrivateAccessPolicyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.applicationIds)) {
    request.applicationIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.applicationIds, 'ApplicationIds', 'json');
  }
  if (!Util.isUnset(tmpReq.customUserAttributes)) {
    request.customUserAttributesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.customUserAttributes, 'CustomUserAttributes', 'json');
  }
  if (!Util.isUnset(tmpReq.tagIds)) {
    request.tagIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tagIds, 'TagIds', 'json');
  }
  if (!Util.isUnset(tmpReq.userGroupIds)) {
    request.userGroupIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userGroupIds, 'UserGroupIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.applicationIdsShrink)) {
    body['ApplicationIds'] = request.applicationIdsShrink;
  }
  if (!Util.isUnset(request.applicationType)) {
    body['ApplicationType'] = request.applicationType;
  }
  if (!Util.isUnset(request.customUserAttributesShrink)) {
    body['CustomUserAttributes'] = request.customUserAttributesShrink;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.policyAction)) {
    body['PolicyAction'] = request.policyAction;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.tagIdsShrink)) {
    body['TagIds'] = request.tagIdsShrink;
  }
  if (!Util.isUnset(request.userGroupIdsShrink)) {
    body['UserGroupIds'] = request.userGroupIdsShrink;
  }
  if (!Util.isUnset(request.userGroupMode)) {
    body['UserGroupMode'] = request.userGroupMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreatePrivateAccessPolicy',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createPrivateAccessPolicy(request: CreatePrivateAccessPolicyRequest): CreatePrivateAccessPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPrivateAccessPolicyWithOptions(request, runtime);
}

model CreatePrivateAccessTagRequest {
  description?: string(name='Description'),
  name?: string(name='Name', example='tag_name'),
}

model CreatePrivateAccessTagResponseBody = {
  requestId?: string(name='RequestId', example='102350E7-1A20-58F5-9D63-ABEA820AE6E1'),
  tagId?: string(name='TagId', example='tag-d3f64e8bdd4a****'),
}

model CreatePrivateAccessTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePrivateAccessTagResponseBody(name='body'),
}

async function createPrivateAccessTagWithOptions(request: CreatePrivateAccessTagRequest, runtime: Util.RuntimeOptions): CreatePrivateAccessTagResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreatePrivateAccessTag',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createPrivateAccessTag(request: CreatePrivateAccessTagRequest): CreatePrivateAccessTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPrivateAccessTagWithOptions(request, runtime);
}

model CreateUserGroupRequest {
  attributes?: [ 
    {
      idpId?: int32(name='IdpId', example='12'),
      relation?: string(name='Relation', example='Equal'),
      userGroupType?: string(name='UserGroupType', example='department'),
      value?: string(name='Value'),
    }
  ](name='Attributes'),
  description?: string(name='Description'),
  name?: string(name='Name', example='user_group_name'),
}

model CreateUserGroupShrinkRequest {
  attributesShrink?: string(name='Attributes'),
  description?: string(name='Description'),
  name?: string(name='Name', example='user_group_name'),
}

model CreateUserGroupResponseBody = {
  requestId?: string(name='RequestId', example='102350E7-1A20-58F5-9D63-ABEA820AE6E1'),
  userGroupId?: string(name='UserGroupId', example='usergroup-6f1ef2fc56b6****'),
}

model CreateUserGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUserGroupResponseBody(name='body'),
}

async function createUserGroupWithOptions(tmpReq: CreateUserGroupRequest, runtime: Util.RuntimeOptions): CreateUserGroupResponse {
  Util.validateModel(tmpReq);
  var request = new CreateUserGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.attributes)) {
    request.attributesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.attributes, 'Attributes', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.attributesShrink)) {
    body['Attributes'] = request.attributesShrink;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateUserGroup',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createUserGroup(request: CreateUserGroupRequest): CreateUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserGroupWithOptions(request, runtime);
}

model DeletePrivateAccessApplicationRequest {
  applicationId?: string(name='ApplicationId', example='pa-application-e12860ef6c48****'),
}

model DeletePrivateAccessApplicationResponseBody = {
  requestId?: string(name='RequestId', example='BE4FB974-11BC-5453-9BE1-1606A73EACA6'),
}

model DeletePrivateAccessApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePrivateAccessApplicationResponseBody(name='body'),
}

async function deletePrivateAccessApplicationWithOptions(request: DeletePrivateAccessApplicationRequest, runtime: Util.RuntimeOptions): DeletePrivateAccessApplicationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.applicationId)) {
    body['ApplicationId'] = request.applicationId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeletePrivateAccessApplication',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePrivateAccessApplication(request: DeletePrivateAccessApplicationRequest): DeletePrivateAccessApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePrivateAccessApplicationWithOptions(request, runtime);
}

model DeletePrivateAccessPolicyRequest {
  policyId?: string(name='PolicyId', example='pa-policy-867ef4007c8a****'),
}

model DeletePrivateAccessPolicyResponseBody = {
  requestId?: string(name='RequestId', example='4D169859-A4F2-5EC8-853B-8447787C0D8A'),
}

model DeletePrivateAccessPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePrivateAccessPolicyResponseBody(name='body'),
}

async function deletePrivateAccessPolicyWithOptions(request: DeletePrivateAccessPolicyRequest, runtime: Util.RuntimeOptions): DeletePrivateAccessPolicyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.policyId)) {
    body['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeletePrivateAccessPolicy',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePrivateAccessPolicy(request: DeletePrivateAccessPolicyRequest): DeletePrivateAccessPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePrivateAccessPolicyWithOptions(request, runtime);
}

model DeletePrivateAccessTagRequest {
  tagId?: string(name='TagId', example='tag-d3f64e8bdd4a****'),
}

model DeletePrivateAccessTagResponseBody = {
  requestId?: string(name='RequestId', example='FD724DBC-CD76-5235-BF76-59C51B73296D'),
}

model DeletePrivateAccessTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePrivateAccessTagResponseBody(name='body'),
}

async function deletePrivateAccessTagWithOptions(request: DeletePrivateAccessTagRequest, runtime: Util.RuntimeOptions): DeletePrivateAccessTagResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.tagId)) {
    body['TagId'] = request.tagId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeletePrivateAccessTag',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePrivateAccessTag(request: DeletePrivateAccessTagRequest): DeletePrivateAccessTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePrivateAccessTagWithOptions(request, runtime);
}

model DeleteUserGroupRequest {
  userGroupId?: string(name='UserGroupId', example='usergroup-6f1ef2fc56b6****'),
}

model DeleteUserGroupResponseBody = {
  requestId?: string(name='RequestId', example='58D6B23E-E5DA-5418-8F61-51A3B5A30049'),
}

model DeleteUserGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteUserGroupResponseBody(name='body'),
}

async function deleteUserGroupWithOptions(request: DeleteUserGroupRequest, runtime: Util.RuntimeOptions): DeleteUserGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.userGroupId)) {
    body['UserGroupId'] = request.userGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUserGroup',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteUserGroup(request: DeleteUserGroupRequest): DeleteUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserGroupWithOptions(request, runtime);
}

model DetachApplication2ConnectorRequest {
  applicationIds?: [ string ](name='ApplicationIds'),
  connectorId?: string(name='ConnectorId', description='ConnectorID。', example='connector-94db94e06b98****'),
}

model DetachApplication2ConnectorShrinkRequest {
  applicationIdsShrink?: string(name='ApplicationIds'),
  connectorId?: string(name='ConnectorId', description='ConnectorID。', example='connector-94db94e06b98****'),
}

model DetachApplication2ConnectorResponseBody = {
  requestId?: string(name='RequestId', example='4D169859-A4F2-5EC8-853B-8447787C0D8A'),
}

model DetachApplication2ConnectorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachApplication2ConnectorResponseBody(name='body'),
}

async function detachApplication2ConnectorWithOptions(tmpReq: DetachApplication2ConnectorRequest, runtime: Util.RuntimeOptions): DetachApplication2ConnectorResponse {
  Util.validateModel(tmpReq);
  var request = new DetachApplication2ConnectorShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.applicationIds)) {
    request.applicationIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.applicationIds, 'ApplicationIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.applicationIdsShrink)) {
    body['ApplicationIds'] = request.applicationIdsShrink;
  }
  if (!Util.isUnset(request.connectorId)) {
    body['ConnectorId'] = request.connectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DetachApplication2Connector',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachApplication2Connector(request: DetachApplication2ConnectorRequest): DetachApplication2ConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachApplication2ConnectorWithOptions(request, runtime);
}

model GetPrivateAccessApplicationRequest {
  applicationId?: string(name='ApplicationId', example='pa-application-e12860ef6c48****'),
}

model GetPrivateAccessApplicationResponseBody = {
  application?: {
    addresses?: [ string ](name='Addresses'),
    applicationId?: string(name='ApplicationId', example='pa-application-e12860ef6c48****'),
    createTime?: string(name='CreateTime', example='2022-08-30 16:50:32'),
    description?: string(name='Description'),
    name?: string(name='Name', example='private_access_application_name'),
    policyIds?: [ string ](name='PolicyIds'),
    portRanges?: [ 
      {
        begin?: int32(name='Begin', example='80'),
        end?: int32(name='End', example='81'),
      }
    ](name='PortRanges'),
    protocol?: string(name='Protocol', example='All'),
    status?: string(name='Status', example='Enabled'),
    tagIds?: [ string ](name='TagIds'),
  }(name='Application'),
  requestId?: string(name='RequestId', example='3ACC5EDC-2B7D-5032-8C58-D7615D66C1D4'),
}

model GetPrivateAccessApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPrivateAccessApplicationResponseBody(name='body'),
}

async function getPrivateAccessApplicationWithOptions(request: GetPrivateAccessApplicationRequest, runtime: Util.RuntimeOptions): GetPrivateAccessApplicationResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPrivateAccessApplication',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPrivateAccessApplication(request: GetPrivateAccessApplicationRequest): GetPrivateAccessApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPrivateAccessApplicationWithOptions(request, runtime);
}

model GetPrivateAccessPolicyRequest {
  policyId?: string(name='PolicyId', example='pa-policy-63b2f1844b86****'),
}

model GetPrivateAccessPolicyResponseBody = {
  policy?: {
    applicationIds?: [ string ](name='ApplicationIds'),
    applicationType?: string(name='ApplicationType', example='Application'),
    createTime?: string(name='CreateTime', example='2021-07-29 11:26:02'),
    customUserAttributes?: [ 
      {
        idpId?: int32(name='IdpId'),
        relation?: string(name='Relation'),
        userGroupType?: string(name='UserGroupType'),
        value?: string(name='Value'),
      }
    ](name='CustomUserAttributes'),
    description?: string(name='Description'),
    name?: string(name='Name', example='private_access_policy_name'),
    policyAction?: string(name='PolicyAction', example='Allow'),
    policyId?: string(name='PolicyId', example='pa-policy-63b2f1844b86****'),
    priority?: int32(name='Priority', example='1'),
    status?: string(name='Status', example='Enabled'),
    tagIds?: [ string ](name='TagIds'),
    userGroupIds?: [ string ](name='UserGroupIds'),
    userGroupMode?: string(name='UserGroupMode'),
  }(name='Policy'),
  requestId?: string(name='RequestId', example='7E9D7ACD-53D5-56EF-A913-79D148D06299'),
}

model GetPrivateAccessPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPrivateAccessPolicyResponseBody(name='body'),
}

async function getPrivateAccessPolicyWithOptions(request: GetPrivateAccessPolicyRequest, runtime: Util.RuntimeOptions): GetPrivateAccessPolicyResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPrivateAccessPolicy',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPrivateAccessPolicy(request: GetPrivateAccessPolicyRequest): GetPrivateAccessPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPrivateAccessPolicyWithOptions(request, runtime);
}

model GetUserGroupRequest {
  userGroupId?: string(name='UserGroupId', example='usergroup-6f1ef2fc56b6ab59'),
}

model GetUserGroupResponseBody = {
  requestId?: string(name='RequestId', example='1310DBC7-7E1F-55D3-B4B4-E4BE912517FB'),
  userGroup?: {
    attributes?: [ 
      {
        idpId?: int32(name='IdpId', example='12'),
        relation?: string(name='Relation', example='Equal'),
        userGroupType?: string(name='UserGroupType', example='department'),
        value?: string(name='Value'),
      }
    ](name='Attributes'),
    createTime?: string(name='CreateTime', example='2022-10-10 11:39:22'),
    description?: string(name='Description'),
    name?: string(name='Name'),
    userGroupId?: string(name='UserGroupId', example='usergroup-6f1ef2fc56b6ab59'),
  }(name='UserGroup'),
}

model GetUserGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserGroupResponseBody(name='body'),
}

async function getUserGroupWithOptions(request: GetUserGroupRequest, runtime: Util.RuntimeOptions): GetUserGroupResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUserGroup',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUserGroup(request: GetUserGroupRequest): GetUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserGroupWithOptions(request, runtime);
}

model ListApplicationsForPrivateAccessPolicyRequest {
  policyIds?: [ string ](name='PolicyIds'),
}

model ListApplicationsForPrivateAccessPolicyShrinkRequest {
  policyIdsShrink?: string(name='PolicyIds'),
}

model ListApplicationsForPrivateAccessPolicyResponseBody = {
  polices?: [ 
    {
      applications?: [ 
        {
          addresses?: [ string ](name='Addresses'),
          applicationId?: string(name='ApplicationId', example='pa-application-7a9243dd02f4****'),
          createTime?: string(name='CreateTime'),
          description?: string(name='Description'),
          name?: string(name='Name', example='application_name'),
          portRanges?: [ 
            {
              begin?: int32(name='Begin', example='80'),
              end?: int32(name='End', example='81'),
            }
          ](name='PortRanges'),
          protocol?: string(name='Protocol', example='TCP'),
          status?: string(name='Status', example='Enabled'),
        }
      ](name='Applications'),
      policyId?: string(name='PolicyId', example='pa-policy-1b0d0e8b4bcf****'),
    }
  ](name='Polices'),
  requestId?: string(name='RequestId', example='4D169859-A4F2-5EC8-853B-8447787C0D8A'),
}

model ListApplicationsForPrivateAccessPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListApplicationsForPrivateAccessPolicyResponseBody(name='body'),
}

async function listApplicationsForPrivateAccessPolicyWithOptions(tmpReq: ListApplicationsForPrivateAccessPolicyRequest, runtime: Util.RuntimeOptions): ListApplicationsForPrivateAccessPolicyResponse {
  Util.validateModel(tmpReq);
  var request = new ListApplicationsForPrivateAccessPolicyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.policyIds)) {
    request.policyIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.policyIds, 'PolicyIds', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListApplicationsForPrivateAccessPolicy',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listApplicationsForPrivateAccessPolicy(request: ListApplicationsForPrivateAccessPolicyRequest): ListApplicationsForPrivateAccessPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return listApplicationsForPrivateAccessPolicyWithOptions(request, runtime);
}

model ListApplicationsForPrivateAccessTagRequest {
  tagIds?: [ string ](name='TagIds'),
}

model ListApplicationsForPrivateAccessTagShrinkRequest {
  tagIdsShrink?: string(name='TagIds'),
}

model ListApplicationsForPrivateAccessTagResponseBody = {
  requestId?: string(name='RequestId', example='B608C6AE-623D-55C4-9454-601B88AE937E'),
  tags?: [ 
    {
      applications?: [ 
        {
          addresses?: [ string ](name='Addresses'),
          applicationId?: string(name='ApplicationId', example='pa-application-7a9243dd02f4****'),
          createTime?: string(name='CreateTime'),
          description?: string(name='Description'),
          name?: string(name='Name', example='private_access_application_name'),
          portRanges?: [ 
            {
              begin?: int32(name='Begin', example='80'),
              end?: int32(name='End', example='81'),
            }
          ](name='PortRanges'),
          protocol?: string(name='Protocol', example='All'),
          status?: string(name='Status', example='Enabled'),
        }
      ](name='Applications'),
      tagId?: string(name='TagId', example='tag-7ffc82853476****'),
    }
  ](name='Tags'),
}

model ListApplicationsForPrivateAccessTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListApplicationsForPrivateAccessTagResponseBody(name='body'),
}

async function listApplicationsForPrivateAccessTagWithOptions(tmpReq: ListApplicationsForPrivateAccessTagRequest, runtime: Util.RuntimeOptions): ListApplicationsForPrivateAccessTagResponse {
  Util.validateModel(tmpReq);
  var request = new ListApplicationsForPrivateAccessTagShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tagIds)) {
    request.tagIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tagIds, 'TagIds', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListApplicationsForPrivateAccessTag',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listApplicationsForPrivateAccessTag(request: ListApplicationsForPrivateAccessTagRequest): ListApplicationsForPrivateAccessTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return listApplicationsForPrivateAccessTagWithOptions(request, runtime);
}

model ListConnectorsRequest {
  connectorIds?: [ string ](name='ConnectorIds'),
  currentPage?: int32(name='CurrentPage', example='1'),
  name?: string(name='Name', example='connector_name'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListConnectorsShrinkRequest {
  connectorIdsShrink?: string(name='ConnectorIds'),
  currentPage?: int32(name='CurrentPage', example='1'),
  name?: string(name='Name', example='connector_name'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListConnectorsResponseBody = {
  connectors?: [ 
    {
      applications?: [ 
        {
          applicationId?: string(name='ApplicationId', example='pa-application-e12860ef6c48****'),
          applicationName?: string(name='ApplicationName', example='application_name'),
        }
      ](name='Applications'),
      connectorId?: string(name='ConnectorId', description='ConnectorID。', example='connector-94db94e06b98****'),
      createTime?: string(name='CreateTime', example='2022-09-27 18:10:25'),
      name?: string(name='Name', example='connector_name'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      status?: string(name='Status', example='Online'),
      switchStatus?: string(name='SwitchStatus', example='Enabled'),
      upgradeTime?: {
        end?: string(name='End', example='23:00'),
        start?: string(name='Start', example='20:00'),
      }(name='UpgradeTime'),
    }
  ](name='Connectors'),
  requestId?: string(name='RequestId', example='58D6B23E-E5DA-5418-8F61-51A3B5A30049'),
  totalNum?: int32(name='TotalNum', example='1'),
}

model ListConnectorsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListConnectorsResponseBody(name='body'),
}

async function listConnectorsWithOptions(tmpReq: ListConnectorsRequest, runtime: Util.RuntimeOptions): ListConnectorsResponse {
  Util.validateModel(tmpReq);
  var request = new ListConnectorsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.connectorIds)) {
    request.connectorIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.connectorIds, 'ConnectorIds', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListConnectors',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listConnectors(request: ListConnectorsRequest): ListConnectorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConnectorsWithOptions(request, runtime);
}

model ListPolicesForPrivateAccessApplicationRequest {
  applicationIds?: [ string ](name='ApplicationIds'),
}

model ListPolicesForPrivateAccessApplicationShrinkRequest {
  applicationIdsShrink?: string(name='ApplicationIds'),
}

model ListPolicesForPrivateAccessApplicationResponseBody = {
  applications?: [ 
    {
      applicationId?: string(name='ApplicationId', example='pa-application-b927baf3e592****'),
      policies?: [ 
        {
          applicationType?: string(name='ApplicationType', example='Application'),
          createTime?: string(name='CreateTime', example='2022-09-27 18:10:25'),
          customUserAttributes?: [ 
            {
              idpId?: int32(name='IdpId'),
              relation?: string(name='Relation'),
              userGroupType?: string(name='UserGroupType'),
              value?: string(name='Value'),
            }
          ](name='CustomUserAttributes'),
          description?: string(name='Description'),
          name?: string(name='Name', example='private_access_policy_name'),
          policyAction?: string(name='PolicyAction', example='Allow'),
          policyId?: string(name='PolicyId', example='pa-policy-867ef4007c8a****'),
          priority?: int32(name='Priority', example='1'),
          status?: string(name='Status', example='Enabled'),
          userGroupType?: string(name='UserGroupType', example='Normal'),
        }
      ](name='Policies'),
    }
  ](name='Applications'),
  requestId?: string(name='RequestId', example='4AB972E2-D702-5464-B132-B1911498B8BF'),
}

model ListPolicesForPrivateAccessApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPolicesForPrivateAccessApplicationResponseBody(name='body'),
}

async function listPolicesForPrivateAccessApplicationWithOptions(tmpReq: ListPolicesForPrivateAccessApplicationRequest, runtime: Util.RuntimeOptions): ListPolicesForPrivateAccessApplicationResponse {
  Util.validateModel(tmpReq);
  var request = new ListPolicesForPrivateAccessApplicationShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.applicationIds)) {
    request.applicationIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.applicationIds, 'ApplicationIds', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPolicesForPrivateAccessApplication',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPolicesForPrivateAccessApplication(request: ListPolicesForPrivateAccessApplicationRequest): ListPolicesForPrivateAccessApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPolicesForPrivateAccessApplicationWithOptions(request, runtime);
}

model ListPolicesForPrivateAccessTagRequest {
  tagIds?: [ string ](name='TagIds'),
}

model ListPolicesForPrivateAccessTagShrinkRequest {
  tagIdsShrink?: string(name='TagIds'),
}

model ListPolicesForPrivateAccessTagResponseBody = {
  requestId?: string(name='RequestId', example='4D169859-A4F2-5EC8-853B-8447787C0D8A'),
  tags?: [ 
    {
      polices?: [ 
        {
          applicationType?: string(name='ApplicationType', example='Application'),
          createTime?: string(name='CreateTime'),
          customUserAttributes?: [ 
            {
              idpId?: int32(name='IdpId'),
              relation?: string(name='Relation'),
              userGroupType?: string(name='UserGroupType'),
              value?: string(name='Value'),
            }
          ](name='CustomUserAttributes'),
          description?: string(name='Description'),
          name?: string(name='Name', example='private_access_policy_name'),
          policyAction?: string(name='PolicyAction', example='Allow'),
          policyId?: string(name='PolicyId', example='pa-policy-867ef4007c8a****'),
          priority?: int32(name='Priority', example='1'),
          status?: string(name='Status', example='Enabled'),
          userGroupType?: string(name='UserGroupType', example='Normal'),
        }
      ](name='Polices'),
      tagId?: string(name='TagId', example='tag-b927baf3e592****'),
    }
  ](name='Tags'),
}

model ListPolicesForPrivateAccessTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPolicesForPrivateAccessTagResponseBody(name='body'),
}

async function listPolicesForPrivateAccessTagWithOptions(tmpReq: ListPolicesForPrivateAccessTagRequest, runtime: Util.RuntimeOptions): ListPolicesForPrivateAccessTagResponse {
  Util.validateModel(tmpReq);
  var request = new ListPolicesForPrivateAccessTagShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tagIds)) {
    request.tagIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tagIds, 'TagIds', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPolicesForPrivateAccessTag',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPolicesForPrivateAccessTag(request: ListPolicesForPrivateAccessTagRequest): ListPolicesForPrivateAccessTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPolicesForPrivateAccessTagWithOptions(request, runtime);
}

model ListPolicesForUserGroupRequest {
  userGroupIds?: [ string ](name='UserGroupIds'),
}

model ListPolicesForUserGroupShrinkRequest {
  userGroupIdsShrink?: string(name='UserGroupIds'),
}

model ListPolicesForUserGroupResponseBody = {
  requestId?: string(name='RequestId', example='5F04DFBD-3F48-5F70-AE72-474026670128'),
  userGroups?: [ 
    {
      polices?: [ 
        {
          name?: string(name='Name', example='private_access_policy_name'),
          policyId?: string(name='PolicyId', example='pa-policy-ce2bf7236fab****'),
          policyType?: string(name='PolicyType', example='PrivateAccess'),
        }
      ](name='Polices'),
      userGroupId?: string(name='UserGroupId', example='usergroup-6f1ef2fc56b6****'),
    }
  ](name='UserGroups'),
}

model ListPolicesForUserGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPolicesForUserGroupResponseBody(name='body'),
}

async function listPolicesForUserGroupWithOptions(tmpReq: ListPolicesForUserGroupRequest, runtime: Util.RuntimeOptions): ListPolicesForUserGroupResponse {
  Util.validateModel(tmpReq);
  var request = new ListPolicesForUserGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userGroupIds)) {
    request.userGroupIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userGroupIds, 'UserGroupIds', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPolicesForUserGroup',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPolicesForUserGroup(request: ListPolicesForUserGroupRequest): ListPolicesForUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPolicesForUserGroupWithOptions(request, runtime);
}

model ListPrivateAccessApplicationsRequest {
  address?: string(name='Address', example='192.168.0.0/16'),
  applicationIds?: [ string ](name='ApplicationIds'),
  currentPage?: int32(name='CurrentPage', example='1'),
  name?: string(name='Name', example='private_access_application_name'),
  pageSize?: int32(name='PageSize', example='10'),
  policyId?: string(name='PolicyId', example='pa-policy-54a7838a48bf****'),
  status?: string(name='Status', example='Enabled'),
  tagId?: string(name='TagId', example='tag-d3f64e8bdd4a****'),
}

model ListPrivateAccessApplicationsShrinkRequest {
  address?: string(name='Address', example='192.168.0.0/16'),
  applicationIdsShrink?: string(name='ApplicationIds'),
  currentPage?: int32(name='CurrentPage', example='1'),
  name?: string(name='Name', example='private_access_application_name'),
  pageSize?: int32(name='PageSize', example='10'),
  policyId?: string(name='PolicyId', example='pa-policy-54a7838a48bf****'),
  status?: string(name='Status', example='Enabled'),
  tagId?: string(name='TagId', example='tag-d3f64e8bdd4a****'),
}

model ListPrivateAccessApplicationsResponseBody = {
  applications?: [ 
    {
      addresses?: [ string ](name='Addresses'),
      applicationId?: string(name='ApplicationId', example='pa-application-e12860ef6c48****'),
      createTime?: string(name='CreateTime', example='2022-12-16 15:03:42'),
      description?: string(name='Description'),
      name?: string(name='Name', example='private_access_application_name'),
      policyIds?: [ string ](name='PolicyIds'),
      portRanges?: [ 
        {
          begin?: int32(name='Begin', example='80'),
          end?: int32(name='End', example='81'),
        }
      ](name='PortRanges'),
      protocol?: string(name='Protocol', example='All'),
      status?: string(name='Status', example='Enabled'),
      tagIds?: [ string ](name='TagIds'),
    }
  ](name='Applications'),
  requestId?: string(name='RequestId', example='748CFDC7-1EB6-5B8B-9405-DA76ED5BB60D'),
  totalNum?: int32(name='TotalNum', example='1'),
}

model ListPrivateAccessApplicationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPrivateAccessApplicationsResponseBody(name='body'),
}

async function listPrivateAccessApplicationsWithOptions(tmpReq: ListPrivateAccessApplicationsRequest, runtime: Util.RuntimeOptions): ListPrivateAccessApplicationsResponse {
  Util.validateModel(tmpReq);
  var request = new ListPrivateAccessApplicationsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.applicationIds)) {
    request.applicationIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.applicationIds, 'ApplicationIds', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPrivateAccessApplications',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPrivateAccessApplications(request: ListPrivateAccessApplicationsRequest): ListPrivateAccessApplicationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPrivateAccessApplicationsWithOptions(request, runtime);
}

model ListPrivateAccessPolicesRequest {
  applicationId?: string(name='ApplicationId', example='pa-application-e12860ef6c48****'),
  currentPage?: int32(name='CurrentPage', example='1'),
  name?: string(name='Name', example='private_access_policy_name'),
  pageSize?: int32(name='PageSize', example='10'),
  policyAction?: string(name='PolicyAction', example='Allow'),
  policyIds?: [ string ](name='PolicyIds'),
  status?: string(name='Status', example='Enabled'),
  tagId?: string(name='TagId', example='tag-c0cb77857a99****'),
  userGroupId?: string(name='UserGroupId'),
}

model ListPrivateAccessPolicesShrinkRequest {
  applicationId?: string(name='ApplicationId', example='pa-application-e12860ef6c48****'),
  currentPage?: int32(name='CurrentPage', example='1'),
  name?: string(name='Name', example='private_access_policy_name'),
  pageSize?: int32(name='PageSize', example='10'),
  policyAction?: string(name='PolicyAction', example='Allow'),
  policyIdsShrink?: string(name='PolicyIds'),
  status?: string(name='Status', example='Enabled'),
  tagId?: string(name='TagId', example='tag-c0cb77857a99****'),
  userGroupId?: string(name='UserGroupId'),
}

model ListPrivateAccessPolicesResponseBody = {
  polices?: [ 
    {
      applicationIds?: [ string ](name='ApplicationIds'),
      applicationType?: string(name='ApplicationType', example='Application'),
      createTime?: string(name='CreateTime', example='2022-07-10 15:50:23'),
      customUserAttributes?: [ 
        {
          idpId?: int32(name='IdpId'),
          relation?: string(name='Relation'),
          userGroupType?: string(name='UserGroupType'),
          value?: string(name='Value'),
        }
      ](name='CustomUserAttributes'),
      description?: string(name='Description'),
      name?: string(name='Name', example='private_access_policy_name'),
      policyAction?: string(name='PolicyAction', example='Allow'),
      policyId?: string(name='PolicyId', example='pa-policy-63b2f1844b86****'),
      priority?: int32(name='Priority', example='1'),
      status?: string(name='Status', example='Enabled'),
      tagIds?: [ string ](name='TagIds'),
      userGroupIds?: [ string ](name='UserGroupIds'),
      userGroupMode?: string(name='UserGroupMode'),
    }
  ](name='Polices'),
  requestId?: string(name='RequestId', example='748CFDC7-1EB6-5B8B-9405-DA76ED5BB60D'),
  totalNum?: int32(name='TotalNum', example='1'),
}

model ListPrivateAccessPolicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPrivateAccessPolicesResponseBody(name='body'),
}

async function listPrivateAccessPolicesWithOptions(tmpReq: ListPrivateAccessPolicesRequest, runtime: Util.RuntimeOptions): ListPrivateAccessPolicesResponse {
  Util.validateModel(tmpReq);
  var request = new ListPrivateAccessPolicesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.policyIds)) {
    request.policyIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.policyIds, 'PolicyIds', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPrivateAccessPolices',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPrivateAccessPolices(request: ListPrivateAccessPolicesRequest): ListPrivateAccessPolicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPrivateAccessPolicesWithOptions(request, runtime);
}

model ListPrivateAccessTagsRequest {
  applicationId?: string(name='ApplicationId', example='pa-application-e12860ef6c48****'),
  currentPage?: int32(name='CurrentPage', example='1'),
  name?: string(name='Name', example='tag_name'),
  pageSize?: int32(name='PageSize', example='10'),
  policyId?: string(name='PolicyId', example='pa-policy-54a7838a48bf****'),
  tagIds?: [ string ](name='TagIds'),
}

model ListPrivateAccessTagsShrinkRequest {
  applicationId?: string(name='ApplicationId', example='pa-application-e12860ef6c48****'),
  currentPage?: int32(name='CurrentPage', example='1'),
  name?: string(name='Name', example='tag_name'),
  pageSize?: int32(name='PageSize', example='10'),
  policyId?: string(name='PolicyId', example='pa-policy-54a7838a48bf****'),
  tagIdsShrink?: string(name='TagIds'),
}

model ListPrivateAccessTagsResponseBody = {
  requestId?: string(name='RequestId', example='54C1D236-CDB9-586C-B44D-AFDCEA195545'),
  tags?: [ 
    {
      applicationIds?: [ string ](name='ApplicationIds'),
      createTime?: string(name='CreateTime', example='2022-10-10 11:39:34'),
      description?: string(name='Description'),
      name?: string(name='Name', example='tag_name'),
      policyIds?: [ string ](name='PolicyIds'),
      tagId?: string(name='TagId', example='tag-d3f64e8bdd4a****'),
      tagType?: string(name='TagType', example='Default'),
    }
  ](name='Tags'),
  totalNum?: int32(name='TotalNum', example='1'),
}

model ListPrivateAccessTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPrivateAccessTagsResponseBody(name='body'),
}

async function listPrivateAccessTagsWithOptions(tmpReq: ListPrivateAccessTagsRequest, runtime: Util.RuntimeOptions): ListPrivateAccessTagsResponse {
  Util.validateModel(tmpReq);
  var request = new ListPrivateAccessTagsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tagIds)) {
    request.tagIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tagIds, 'TagIds', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPrivateAccessTags',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPrivateAccessTags(request: ListPrivateAccessTagsRequest): ListPrivateAccessTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPrivateAccessTagsWithOptions(request, runtime);
}

model ListTagsForPrivateAccessApplicationRequest {
  applicationIds?: [ string ](name='ApplicationIds'),
}

model ListTagsForPrivateAccessApplicationShrinkRequest {
  applicationIdsShrink?: string(name='ApplicationIds'),
}

model ListTagsForPrivateAccessApplicationResponseBody = {
  applications?: [ 
    {
      applicationId?: string(name='ApplicationId', example='pa-application-7a4445897856****'),
      tags?: [ 
        {
          createTime?: string(name='CreateTime'),
          description?: string(name='Description'),
          name?: string(name='Name', example='tag_name'),
          tagId?: string(name='TagId', example='tag-c0cb77857a99****'),
          tagType?: string(name='TagType', example='Default'),
        }
      ](name='Tags'),
    }
  ](name='Applications'),
  requestId?: string(name='RequestId', example='7241F45B-E8D3-5BA3-8172-8A58AC2AB0FC'),
}

model ListTagsForPrivateAccessApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagsForPrivateAccessApplicationResponseBody(name='body'),
}

async function listTagsForPrivateAccessApplicationWithOptions(tmpReq: ListTagsForPrivateAccessApplicationRequest, runtime: Util.RuntimeOptions): ListTagsForPrivateAccessApplicationResponse {
  Util.validateModel(tmpReq);
  var request = new ListTagsForPrivateAccessApplicationShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.applicationIds)) {
    request.applicationIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.applicationIds, 'ApplicationIds', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagsForPrivateAccessApplication',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagsForPrivateAccessApplication(request: ListTagsForPrivateAccessApplicationRequest): ListTagsForPrivateAccessApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagsForPrivateAccessApplicationWithOptions(request, runtime);
}

model ListTagsForPrivateAccessPolicyRequest {
  policyIds?: [ string ](name='PolicyIds'),
}

model ListTagsForPrivateAccessPolicyShrinkRequest {
  policyIdsShrink?: string(name='PolicyIds'),
}

model ListTagsForPrivateAccessPolicyResponseBody = {
  polices?: [ 
    {
      policyId?: string(name='PolicyId', example='pa-policy-1b0d0e8b4bcf****'),
      tags?: [ 
        {
          createTime?: string(name='CreateTime'),
          description?: string(name='Description'),
          name?: string(name='Name', example='tag_name'),
          tagId?: string(name='TagId', example='tag-d3f64e8bdd4a****'),
          tagType?: string(name='TagType', example='Default'),
        }
      ](name='Tags'),
    }
  ](name='Polices'),
  requestId?: string(name='RequestId', example='9EE61139-A6A8-5E13-80AF-83435C21B26B'),
}

model ListTagsForPrivateAccessPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagsForPrivateAccessPolicyResponseBody(name='body'),
}

async function listTagsForPrivateAccessPolicyWithOptions(tmpReq: ListTagsForPrivateAccessPolicyRequest, runtime: Util.RuntimeOptions): ListTagsForPrivateAccessPolicyResponse {
  Util.validateModel(tmpReq);
  var request = new ListTagsForPrivateAccessPolicyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.policyIds)) {
    request.policyIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.policyIds, 'PolicyIds', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagsForPrivateAccessPolicy',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagsForPrivateAccessPolicy(request: ListTagsForPrivateAccessPolicyRequest): ListTagsForPrivateAccessPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagsForPrivateAccessPolicyWithOptions(request, runtime);
}

model ListUserGroupsRequest {
  attributeValue?: string(name='AttributeValue', example='username'),
  currentPage?: int32(name='CurrentPage', example='1'),
  name?: string(name='Name'),
  PAPolicyId?: string(name='PAPolicyId', example='pa-policy-54a7838a48bf****'),
  pageSize?: int32(name='PageSize', example='10'),
  userGroupIds?: [ string ](name='UserGroupIds'),
}

model ListUserGroupsShrinkRequest {
  attributeValue?: string(name='AttributeValue', example='username'),
  currentPage?: int32(name='CurrentPage', example='1'),
  name?: string(name='Name'),
  PAPolicyId?: string(name='PAPolicyId', example='pa-policy-54a7838a48bf****'),
  pageSize?: int32(name='PageSize', example='10'),
  userGroupIdsShrink?: string(name='UserGroupIds'),
}

model ListUserGroupsResponseBody = {
  requestId?: string(name='RequestId', example='4AB972E2-D702-5464-B132-B1911498B8BF'),
  totalNum?: int32(name='TotalNum', example='1'),
  userGroups?: [ 
    {
      attributes?: [ 
        {
          idpId?: int32(name='IdpId', example='12'),
          relation?: string(name='Relation', example='Equal'),
          userGroupType?: string(name='UserGroupType', example='department'),
          value?: string(name='Value'),
        }
      ](name='Attributes'),
      createTime?: string(name='CreateTime', example='2022-10-10 11:39:22'),
      description?: string(name='Description'),
      name?: string(name='Name', example='user_group_name'),
      userGroupId?: string(name='UserGroupId', example='usergroup-6f1ef2fc56b6****'),
    }
  ](name='UserGroups'),
}

model ListUserGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserGroupsResponseBody(name='body'),
}

async function listUserGroupsWithOptions(tmpReq: ListUserGroupsRequest, runtime: Util.RuntimeOptions): ListUserGroupsResponse {
  Util.validateModel(tmpReq);
  var request = new ListUserGroupsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userGroupIds)) {
    request.userGroupIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userGroupIds, 'UserGroupIds', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUserGroups',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUserGroups(request: ListUserGroupsRequest): ListUserGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserGroupsWithOptions(request, runtime);
}

model ListUserGroupsForPrivateAccessPolicyRequest {
  policyIds?: [ string ](name='PolicyIds'),
}

model ListUserGroupsForPrivateAccessPolicyShrinkRequest {
  policyIdsShrink?: string(name='PolicyIds'),
}

model ListUserGroupsForPrivateAccessPolicyResponseBody = {
  polices?: [ 
    {
      policyId?: string(name='PolicyId', example='pa-policy-1b0d0e8b4bcf****'),
      userGroups?: [ 
        {
          attributes?: [ 
            {
              idpId?: int32(name='IdpId', example='12'),
              relation?: string(name='Relation', example='Equal'),
              userGroupType?: string(name='UserGroupType', example='department'),
              value?: string(name='Value'),
            }
          ](name='Attributes'),
          createTime?: string(name='CreateTime'),
          description?: string(name='Description'),
          name?: string(name='Name', example='user_group_name'),
          userGroupId?: string(name='UserGroupId', example='usergroup-6f1ef2fc56b6****'),
        }
      ](name='UserGroups'),
    }
  ](name='Polices'),
  requestId?: string(name='RequestId', example='58D6B23E-E5DA-5418-8F61-51A3B5A30049'),
}

model ListUserGroupsForPrivateAccessPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserGroupsForPrivateAccessPolicyResponseBody(name='body'),
}

async function listUserGroupsForPrivateAccessPolicyWithOptions(tmpReq: ListUserGroupsForPrivateAccessPolicyRequest, runtime: Util.RuntimeOptions): ListUserGroupsForPrivateAccessPolicyResponse {
  Util.validateModel(tmpReq);
  var request = new ListUserGroupsForPrivateAccessPolicyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.policyIds)) {
    request.policyIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.policyIds, 'PolicyIds', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUserGroupsForPrivateAccessPolicy',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUserGroupsForPrivateAccessPolicy(request: ListUserGroupsForPrivateAccessPolicyRequest): ListUserGroupsForPrivateAccessPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserGroupsForPrivateAccessPolicyWithOptions(request, runtime);
}

model UpdatePrivateAccessApplicationRequest {
  addresses?: [ string ](name='Addresses'),
  applicationId?: string(name='ApplicationId', example='pa-application-e12860ef6c48****'),
  description?: string(name='Description'),
  modifyType?: string(name='ModifyType', example='Cover'),
  portRanges?: [ 
    {
      begin?: int32(name='Begin', example='80'),
      end?: int32(name='End', example='81'),
    }
  ](name='PortRanges'),
  protocol?: string(name='Protocol', example='All'),
  status?: string(name='Status', example='Enabled'),
  tagIds?: [ string ](name='TagIds'),
}

model UpdatePrivateAccessApplicationShrinkRequest {
  addressesShrink?: string(name='Addresses'),
  applicationId?: string(name='ApplicationId', example='pa-application-e12860ef6c48****'),
  description?: string(name='Description'),
  modifyType?: string(name='ModifyType', example='Cover'),
  portRangesShrink?: string(name='PortRanges'),
  protocol?: string(name='Protocol', example='All'),
  status?: string(name='Status', example='Enabled'),
  tagIdsShrink?: string(name='TagIds'),
}

model UpdatePrivateAccessApplicationResponseBody = {
  requestId?: string(name='RequestId', example='FD724DBC-CD76-5235-BF76-59C51B73296D'),
}

model UpdatePrivateAccessApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdatePrivateAccessApplicationResponseBody(name='body'),
}

async function updatePrivateAccessApplicationWithOptions(tmpReq: UpdatePrivateAccessApplicationRequest, runtime: Util.RuntimeOptions): UpdatePrivateAccessApplicationResponse {
  Util.validateModel(tmpReq);
  var request = new UpdatePrivateAccessApplicationShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.addresses)) {
    request.addressesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.addresses, 'Addresses', 'json');
  }
  if (!Util.isUnset(tmpReq.portRanges)) {
    request.portRangesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.portRanges, 'PortRanges', 'json');
  }
  if (!Util.isUnset(tmpReq.tagIds)) {
    request.tagIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tagIds, 'TagIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.addressesShrink)) {
    body['Addresses'] = request.addressesShrink;
  }
  if (!Util.isUnset(request.applicationId)) {
    body['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.modifyType)) {
    body['ModifyType'] = request.modifyType;
  }
  if (!Util.isUnset(request.portRangesShrink)) {
    body['PortRanges'] = request.portRangesShrink;
  }
  if (!Util.isUnset(request.protocol)) {
    body['Protocol'] = request.protocol;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.tagIdsShrink)) {
    body['TagIds'] = request.tagIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePrivateAccessApplication',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updatePrivateAccessApplication(request: UpdatePrivateAccessApplicationRequest): UpdatePrivateAccessApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePrivateAccessApplicationWithOptions(request, runtime);
}

model UpdatePrivateAccessPolicyRequest {
  applicationIds?: [ string ](name='ApplicationIds'),
  applicationType?: string(name='ApplicationType', example='Application'),
  customUserAttributes?: [ 
    {
      idpId?: int32(name='IdpId', example='12'),
      relation?: string(name='Relation', example='Equal'),
      userGroupType?: string(name='UserGroupType', example='department'),
      value?: string(name='Value'),
    }
  ](name='CustomUserAttributes'),
  description?: string(name='Description'),
  modifyType?: string(name='ModifyType', example='Cover'),
  policyAction?: string(name='PolicyAction', example='Allow'),
  policyId?: string(name='PolicyId', example='pa-policy-63b2f1844b86****'),
  priority?: int32(name='Priority', example='1'),
  status?: string(name='Status', example='Enabled'),
  tagIds?: [ string ](name='TagIds'),
  userGroupIds?: [ string ](name='UserGroupIds'),
  userGroupMode?: string(name='UserGroupMode'),
}

model UpdatePrivateAccessPolicyShrinkRequest {
  applicationIdsShrink?: string(name='ApplicationIds'),
  applicationType?: string(name='ApplicationType', example='Application'),
  customUserAttributesShrink?: string(name='CustomUserAttributes'),
  description?: string(name='Description'),
  modifyType?: string(name='ModifyType', example='Cover'),
  policyAction?: string(name='PolicyAction', example='Allow'),
  policyId?: string(name='PolicyId', example='pa-policy-63b2f1844b86****'),
  priority?: int32(name='Priority', example='1'),
  status?: string(name='Status', example='Enabled'),
  tagIdsShrink?: string(name='TagIds'),
  userGroupIdsShrink?: string(name='UserGroupIds'),
  userGroupMode?: string(name='UserGroupMode'),
}

model UpdatePrivateAccessPolicyResponseBody = {
  requestId?: string(name='RequestId', example='5FEF5CFA-14CC-5DE5-BD1F-AFFE0996E71D'),
}

model UpdatePrivateAccessPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdatePrivateAccessPolicyResponseBody(name='body'),
}

async function updatePrivateAccessPolicyWithOptions(tmpReq: UpdatePrivateAccessPolicyRequest, runtime: Util.RuntimeOptions): UpdatePrivateAccessPolicyResponse {
  Util.validateModel(tmpReq);
  var request = new UpdatePrivateAccessPolicyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.applicationIds)) {
    request.applicationIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.applicationIds, 'ApplicationIds', 'json');
  }
  if (!Util.isUnset(tmpReq.customUserAttributes)) {
    request.customUserAttributesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.customUserAttributes, 'CustomUserAttributes', 'json');
  }
  if (!Util.isUnset(tmpReq.tagIds)) {
    request.tagIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tagIds, 'TagIds', 'json');
  }
  if (!Util.isUnset(tmpReq.userGroupIds)) {
    request.userGroupIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userGroupIds, 'UserGroupIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.applicationIdsShrink)) {
    body['ApplicationIds'] = request.applicationIdsShrink;
  }
  if (!Util.isUnset(request.applicationType)) {
    body['ApplicationType'] = request.applicationType;
  }
  if (!Util.isUnset(request.customUserAttributesShrink)) {
    body['CustomUserAttributes'] = request.customUserAttributesShrink;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.modifyType)) {
    body['ModifyType'] = request.modifyType;
  }
  if (!Util.isUnset(request.policyAction)) {
    body['PolicyAction'] = request.policyAction;
  }
  if (!Util.isUnset(request.policyId)) {
    body['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.tagIdsShrink)) {
    body['TagIds'] = request.tagIdsShrink;
  }
  if (!Util.isUnset(request.userGroupIdsShrink)) {
    body['UserGroupIds'] = request.userGroupIdsShrink;
  }
  if (!Util.isUnset(request.userGroupMode)) {
    body['UserGroupMode'] = request.userGroupMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePrivateAccessPolicy',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updatePrivateAccessPolicy(request: UpdatePrivateAccessPolicyRequest): UpdatePrivateAccessPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePrivateAccessPolicyWithOptions(request, runtime);
}

model UpdateUserGroupRequest {
  attributes?: [ 
    {
      idpId?: int32(name='IdpId', example='12'),
      relation?: string(name='Relation', example='Equal'),
      userGroupType?: string(name='UserGroupType', example='department'),
      value?: string(name='Value'),
    }
  ](name='Attributes'),
  description?: string(name='Description'),
  modifyType?: string(name='ModifyType', example='Cover'),
  userGroupId?: string(name='UserGroupId', example='usergroup-6f1ef2fc56b6****'),
}

model UpdateUserGroupShrinkRequest {
  attributesShrink?: string(name='Attributes'),
  description?: string(name='Description'),
  modifyType?: string(name='ModifyType', example='Cover'),
  userGroupId?: string(name='UserGroupId', example='usergroup-6f1ef2fc56b6****'),
}

model UpdateUserGroupResponseBody = {
  requestId?: string(name='RequestId', example='FD724DBC-CD76-5235-BF76-59C51B73296D'),
}

model UpdateUserGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateUserGroupResponseBody(name='body'),
}

async function updateUserGroupWithOptions(tmpReq: UpdateUserGroupRequest, runtime: Util.RuntimeOptions): UpdateUserGroupResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateUserGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.attributes)) {
    request.attributesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.attributes, 'Attributes', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.attributesShrink)) {
    body['Attributes'] = request.attributesShrink;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.modifyType)) {
    body['ModifyType'] = request.modifyType;
  }
  if (!Util.isUnset(request.userGroupId)) {
    body['UserGroupId'] = request.userGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateUserGroup',
    version = '2023-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateUserGroup(request: UpdateUserGroupRequest): UpdateUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUserGroupWithOptions(request, runtime);
}

