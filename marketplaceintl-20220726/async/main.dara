/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'marketplaceIntl';
  @version = '2022-07-26';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddIntlImageProductVersionRequest {
  accessDetail?: {
    ak?: string(name='Ak'),
    autoPublish?: boolean(name='AutoPublish'),
    imageId?: string(name='ImageId'),
    imageName?: string(name='ImageName'),
    imageVersion?: string(name='ImageVersion'),
    region?: string(name='Region'),
    releaseNote?: string(name='ReleaseNote'),
    releaseRegionOption?: string(name='ReleaseRegionOption'),
    secret?: string(name='Secret'),
  }(name='AccessDetail', position='Body'),
  commodityCode?: string(name='CommodityCode', position='Body'),
  imageConstraint?: {
    baseConfig?: {
      maxCpu?: int32(name='MaxCpu'),
      maxMemory?: float(name='MaxMemory'),
      minBandwidth?: int32(name='MinBandwidth'),
      minCpu?: int32(name='MinCpu'),
      minDataDiskSize?: int32(name='MinDataDiskSize'),
      minMemory?: float(name='MinMemory'),
      minSystemDiskSize?: int32(name='MinSystemDiskSize'),
    }(name='BaseConfig'),
    customizeFamilyConstraints?: map[string]any(name='CustomizeFamilyConstraints'),
    supportMoreNetworkCards?: boolean(name='SupportMoreNetworkCards'),
    tcpPortRange?: [ string ](name='TcpPortRange'),
    udpPortRange?: [ string ](name='UdpPortRange'),
  }(name='ImageConstraint', position='Body'),
  requestId?: string(name='RequestId', position='Body'),
  uid?: string(name='Uid', position='Body'),
}

model AddIntlImageProductVersionResponseBody = {
  code?: int32(name='Code'),
  data?: {
    commodityCode?: string(name='CommodityCode'),
    trackId?: string(name='TrackId'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddIntlImageProductVersionResponse = {
  headers: map[string]string(name='headers'),
  body: AddIntlImageProductVersionResponseBody(name='body'),
}

async function addIntlImageProductVersion(request: AddIntlImageProductVersionRequest): AddIntlImageProductVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddIntlImageProductVersion', 'POST', '/', 'json', true, 'form', request);
}

model CreateOrUpdateIntlImageRequest {
  accessInfo?: {
    accessDetail?: {
      ak?: string(name='Ak'),
      autoPublish?: boolean(name='AutoPublish'),
      imageId?: string(name='ImageId'),
      imageName?: string(name='ImageName'),
      imageVersion?: string(name='ImageVersion'),
      region?: string(name='Region'),
      releaseNote?: string(name='ReleaseNote'),
      releaseRegionOption?: string(name='ReleaseRegionOption'),
      secret?: string(name='Secret'),
    }(name='AccessDetail'),
    autoPublish?: boolean(name='AutoPublish'),
    imageConstraint?: {
      baseConfig?: {
        maxCpu?: int32(name='MaxCpu'),
        maxMemory?: float(name='MaxMemory'),
        minBandwidth?: int32(name='MinBandwidth'),
        minCpu?: int32(name='MinCpu'),
        minDataDiskSize?: int32(name='MinDataDiskSize'),
        minMemory?: float(name='MinMemory'),
        minSystemDiskSize?: int32(name='MinSystemDiskSize'),
      }(name='BaseConfig'),
      customizeFamilyConstraints?: map[string]any(name='CustomizeFamilyConstraints'),
      supportMoreNetworkCards?: boolean(name='SupportMoreNetworkCards'),
      tcpPortRange?: [ string ](name='TcpPortRange'),
      udpPortRange?: [ string ](name='UdpPortRange'),
    }(name='ImageConstraint'),
    name?: string(name='Name'),
    releaseRegion?: string(name='ReleaseRegion'),
    releaseRegionOption?: string(name='ReleaseRegionOption'),
    type?: int32(name='Type'),
  }(name='AccessInfo', position='Body'),
  basicInfo?: {
    commodityAfterSale?: string(name='CommodityAfterSale'),
    commodityDetail?: string(name='CommodityDetail'),
    commodityFeature?: string(name='CommodityFeature'),
    commodityIntroduction?: string(name='CommodityIntroduction'),
    commodityPicture?: string(name='CommodityPicture'),
    commodityPictureName?: string(name='CommodityPictureName'),
    commodityPictureStream?: string(name='CommodityPictureStream'),
    commodityQualification?: [ string ](name='CommodityQualification'),
    commodityRefundPolicy?: string(name='CommodityRefundPolicy'),
    commodityUserGuide?: string(name='CommodityUserGuide'),
    commodityVideoName?: string(name='CommodityVideoName'),
    commodityVideoStream?: string(name='CommodityVideoStream'),
    commodityVideoUrl?: string(name='CommodityVideoUrl'),
    videoSelect?: string(name='VideoSelect'),
  }(name='BasicInfo', position='Body'),
  bussinessInfo?: {
    categoryId?: string(name='CategoryId'),
    pipCode?: string(name='PipCode'),
    seoDescription?: string(name='SeoDescription'),
    seoKeywords?: string(name='SeoKeywords'),
  }(name='BussinessInfo', position='Body'),
  callBackUrl?: string(name='CallBackUrl', position='Body'),
  commodityCode?: string(name='CommodityCode', position='Body'),
  protocolInfo?: {
    agentName?: string(name='AgentName'),
    customsTarifNumber?: string(name='CustomsTarifNumber'),
    earControlled?: string(name='EarControlled'),
    eccnCode?: string(name='EccnCode'),
    finalUserProtocol?: string(name='FinalUserProtocol'),
    identificationMethod?: string(name='IdentificationMethod'),
    license?: string(name='License'),
    licenseException?: string(name='LicenseException'),
    localExportControlClassificationNumber?: string(name='LocalExportControlClassificationNumber'),
    officialIdentificationNumber?: string(name='OfficialIdentificationNumber'),
    productCryType?: string(name='ProductCryType'),
    productType?: string(name='ProductType'),
  }(name='ProtocolInfo', position='Body'),
  requestId?: string(name='RequestId', position='Body'),
  uid?: string(name='Uid', position='Body'),
}

model CreateOrUpdateIntlImageResponseBody = {
  code?: int32(name='Code'),
  data?: {
    code?: string(name='Code'),
    trackId?: string(name='TrackId'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateOrUpdateIntlImageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOrUpdateIntlImageResponseBody(name='body'),
}

async function createOrUpdateIntlImage(request: CreateOrUpdateIntlImageRequest): CreateOrUpdateIntlImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrUpdateIntlImage', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAccessibleRegionsRequest {
  requestId?: string(name='RequestId', position='Body'),
  uid?: string(name='Uid', position='Body'),
}

model DescribeAccessibleRegionsResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      regionName?: string(name='RegionName'),
      regionNo?: string(name='RegionNo'),
      trackId?: string(name='TrackId'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeAccessibleRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccessibleRegionsResponseBody(name='body'),
}

async function describeAccessibleRegions(request: DescribeAccessibleRegionsRequest): DescribeAccessibleRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccessibleRegions', 'POST', '/', 'json', true, 'form', request);
}

model DescribeCategoriesRequest {
  requestId?: string(name='RequestId', position='Body'),
  uid?: string(name='Uid', position='Body'),
}

model DescribeCategoriesResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      categoryId?: string(name='CategoryId'),
      categoryName?: string(name='CategoryName'),
      subCategories?: [ 
        {
          categoryId?: string(name='CategoryId'),
          categoryName?: string(name='CategoryName'),
        }
      ](name='SubCategories'),
      trackId?: string(name='TrackId'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeCategoriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCategoriesResponseBody(name='body'),
}

async function describeCategories(request: DescribeCategoriesRequest): DescribeCategoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCategories', 'POST', '/', 'json', true, 'form', request);
}

model DescribeCountriesRequest {
  requestId?: string(name='RequestId', position='Body'),
  uid?: string(name='Uid', position='Body'),
}

model DescribeCountriesResponseBody = {
  code?: int32(name='Code'),
  data?: {
    countries?: [ string ](name='Countries'),
    requestId?: string(name='RequestId'),
    uid?: string(name='Uid'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeCountriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCountriesResponseBody(name='body'),
}

async function describeCountries(request: DescribeCountriesRequest): DescribeCountriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCountries', 'POST', '/', 'json', true, 'form', request);
}

model DescribeCustomImagesRequest {
  ak?: string(name='Ak', position='Body'),
  regionNo?: string(name='RegionNo', position='Body'),
  requestId?: string(name='RequestId', position='Body'),
  secret?: string(name='Secret', position='Body'),
  uid?: string(name='Uid', position='Body'),
}

model DescribeCustomImagesResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      createdOn?: long(name='CreatedOn'),
      imageId?: string(name='ImageId'),
      imageName?: string(name='ImageName'),
      imageSize?: int32(name='ImageSize'),
      osname?: string(name='Osname'),
      platform?: string(name='Platform'),
      platformBit?: string(name='PlatformBit'),
      platformType?: string(name='PlatformType'),
      region?: string(name='Region'),
      trackId?: string(name='TrackId'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeCustomImagesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCustomImagesResponseBody(name='body'),
}

async function describeCustomImages(request: DescribeCustomImagesRequest): DescribeCustomImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomImages', 'POST', '/', 'json', true, 'form', request);
}

model DescribeImageCommodityInfoRequest {
  commodityCode?: string(name='CommodityCode', position='Body'),
  requestId?: string(name='RequestId', position='Body'),
  uid?: string(name='Uid', position='Body'),
}

model DescribeImageCommodityInfoResponseBody = {
  code?: int32(name='Code'),
  data?: {
    accessInfo?: {
      accessDetail?: {
        ak?: string(name='Ak'),
        autoPublish?: boolean(name='AutoPublish'),
        imageId?: string(name='ImageId'),
        imageName?: string(name='ImageName'),
        imageVersion?: string(name='ImageVersion'),
        region?: string(name='Region'),
        releaseNote?: string(name='ReleaseNote'),
        releaseRegionOption?: string(name='ReleaseRegionOption'),
        secret?: string(name='Secret'),
      }(name='AccessDetail'),
      autoPublish?: boolean(name='AutoPublish'),
      imageConstraint?: {
        baseConfig?: {
          maxCpu?: int32(name='MaxCpu'),
          maxMemory?: float(name='MaxMemory'),
          minBandwidth?: int32(name='MinBandwidth'),
          minCpu?: int32(name='MinCpu'),
          minDataDiskSize?: int32(name='MinDataDiskSize'),
          minMemory?: float(name='MinMemory'),
          minSystemDiskSize?: int32(name='MinSystemDiskSize'),
        }(name='BaseConfig'),
        customizeFamilyConstraints?: map[string]any(name='CustomizeFamilyConstraints'),
        supportMoreNetworkCards?: boolean(name='SupportMoreNetworkCards'),
        tcpPortRange?: [ string ](name='TcpPortRange'),
        udpPortRange?: [ string ](name='UdpPortRange'),
      }(name='ImageConstraint'),
      name?: string(name='Name'),
      releaseRegion?: string(name='ReleaseRegion'),
      releaseRegionOption?: string(name='ReleaseRegionOption'),
      type?: int32(name='Type'),
    }(name='AccessInfo'),
    basicInfo?: {
      commodityAfterSale?: string(name='CommodityAfterSale'),
      commodityDetail?: string(name='CommodityDetail'),
      commodityFeature?: string(name='CommodityFeature'),
      commodityIntroduction?: string(name='CommodityIntroduction'),
      commodityPicture?: string(name='CommodityPicture'),
      commodityPictureName?: string(name='CommodityPictureName'),
      commodityPictureStream?: string(name='CommodityPictureStream'),
      commodityQualification?: [ string ](name='CommodityQualification'),
      commodityRefundPolicy?: string(name='CommodityRefundPolicy'),
      commodityUserGuide?: string(name='CommodityUserGuide'),
      commodityVideoName?: string(name='CommodityVideoName'),
      commodityVideoStream?: string(name='CommodityVideoStream'),
      commodityVideoUrl?: string(name='CommodityVideoUrl'),
      videoSelect?: string(name='VideoSelect'),
    }(name='BasicInfo'),
    bussinessInfo?: {
      categoryId?: string(name='CategoryId'),
      pipCode?: string(name='PipCode'),
      seoDescription?: string(name='SeoDescription'),
      seoKeywords?: string(name='SeoKeywords'),
    }(name='BussinessInfo'),
    commodityCode?: string(name='CommodityCode'),
    protocolInfo?: {
      agentName?: string(name='AgentName'),
      customsTarifNumber?: string(name='CustomsTarifNumber'),
      earControlled?: string(name='EarControlled'),
      eccnCode?: string(name='EccnCode'),
      finalUserProtocol?: string(name='FinalUserProtocol'),
      identificationMethod?: string(name='IdentificationMethod'),
      license?: string(name='License'),
      licenseException?: string(name='LicenseException'),
      localExportControlClassificationNumber?: string(name='LocalExportControlClassificationNumber'),
      officialIdentificationNumber?: string(name='OfficialIdentificationNumber'),
      productCryType?: string(name='ProductCryType'),
      productType?: string(name='ProductType'),
    }(name='ProtocolInfo'),
    trackId?: string(name='TrackId'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeImageCommodityInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageCommodityInfoResponseBody(name='body'),
}

async function describeImageCommodityInfo(request: DescribeImageCommodityInfoRequest): DescribeImageCommodityInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageCommodityInfo', 'POST', '/', 'json', true, 'form', request);
}

model DescribeImageCommodityStatusRequest {
  commodityCode?: string(name='CommodityCode', position='Body'),
  requestId?: string(name='RequestId', position='Body'),
  uid?: string(name='Uid', position='Body'),
}

model DescribeImageCommodityStatusResponseBody = {
  code?: int32(name='Code'),
  data?: {
    auditStatus?: int32(name='AuditStatus'),
    commodityCode?: string(name='CommodityCode'),
    trackId?: string(name='TrackId'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeImageCommodityStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageCommodityStatusResponseBody(name='body'),
}

async function describeImageCommodityStatus(request: DescribeImageCommodityStatusRequest): DescribeImageCommodityStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageCommodityStatus', 'POST', '/', 'json', true, 'form', request);
}

model DescribeImageConstraintsRequest {
  ak?: string(name='Ak', position='Body'),
  imageId?: string(name='ImageId', position='Body'),
  regionNo?: string(name='RegionNo', position='Body'),
  requestId?: string(name='RequestId', position='Body'),
  secret?: string(name='Secret', position='Body'),
  uid?: string(name='Uid', position='Body'),
}

model DescribeImageConstraintsResponseBody = {
  code?: int32(name='Code'),
  data?: {
    bandwidth?: {
      max?: int32(name='Max'),
      min?: int32(name='Min'),
      step?: int32(name='Step'),
      unit?: string(name='Unit'),
    }(name='Bandwidth'),
    cpuMemoryRange?: [ 
      {
        cpuCoreCount?: int32(name='CpuCoreCount'),
        memorySizeList?: [ float ](name='MemorySizeList'),
      }
    ](name='CpuMemoryRange'),
    dataDisk?: {
      max?: int32(name='Max'),
      min?: int32(name='Min'),
      step?: int32(name='Step'),
      unit?: string(name='Unit'),
    }(name='DataDisk'),
    systemDisk?: {
      max?: int32(name='Max'),
      min?: int32(name='Min'),
      step?: int32(name='Step'),
      unit?: string(name='Unit'),
    }(name='SystemDisk'),
    trackId?: string(name='TrackId'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeImageConstraintsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageConstraintsResponseBody(name='body'),
}

async function describeImageConstraints(request: DescribeImageConstraintsRequest): DescribeImageConstraintsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageConstraints', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInstanceTypesRequest {
  requestId?: string(name='RequestId', position='Body'),
  uid?: string(name='Uid', position='Body'),
}

model DescribeInstanceTypesResponseBody = {
  code?: int32(name='Code'),
  data?: {
    customizeFamily?: [ 
      {
        globalKey?: string(name='GlobalKey'),
        text?: string(name='Text'),
        value?: string(name='Value'),
      }
    ](name='CustomizeFamily'),
    instanceTypes?: [ 
      {
        text?: string(name='Text'),
        value?: string(name='Value'),
      }
    ](name='InstanceTypes'),
    trackId?: string(name='TrackId'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeInstanceTypesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceTypesResponseBody(name='body'),
}

async function describeInstanceTypes(request: DescribeInstanceTypesRequest): DescribeInstanceTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceTypes', 'POST', '/', 'json', true, 'form', request);
}

model DescribeListResourcesRequest {
  requestId?: string(name='RequestId', position='Body'),
  type?: string(name='Type', position='Body'),
  uid?: string(name='Uid', position='Body'),
}

model DescribeListResourcesResponseBody = {
  code?: int32(name='Code'),
  data?: {
    ossLink?: [ string ](name='OssLink'),
    trackId?: string(name='TrackId'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeListResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeListResourcesResponseBody(name='body'),
}

async function describeListResources(request: DescribeListResourcesRequest): DescribeListResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeListResources', 'POST', '/', 'json', true, 'form', request);
}

model DescribeReleasableRegionListRequest {
  requestId?: string(name='RequestId', position='Body'),
  uid?: string(name='Uid', position='Body'),
}

model DescribeReleasableRegionListResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      regionName?: string(name='RegionName'),
      regionNo?: string(name='RegionNo'),
      trackId?: string(name='TrackId'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeReleasableRegionListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeReleasableRegionListResponseBody(name='body'),
}

async function describeReleasableRegionList(request: DescribeReleasableRegionListRequest): DescribeReleasableRegionListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeReleasableRegionList', 'POST', '/', 'json', true, 'form', request);
}

model SubmitImageCommodityReviewRequest {
  commodityCode?: string(name='CommodityCode', position='Body'),
  requestId?: string(name='RequestId', position='Body'),
  uid?: string(name='Uid', position='Body'),
}

model SubmitImageCommodityReviewResponseBody = {
  code?: int32(name='Code'),
  data?: {
    commodityCode?: string(name='CommodityCode'),
    trackId?: string(name='TrackId'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitImageCommodityReviewResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitImageCommodityReviewResponseBody(name='body'),
}

async function submitImageCommodityReview(request: SubmitImageCommodityReviewRequest): SubmitImageCommodityReviewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitImageCommodityReview', 'POST', '/', 'json', true, 'form', request);
}

